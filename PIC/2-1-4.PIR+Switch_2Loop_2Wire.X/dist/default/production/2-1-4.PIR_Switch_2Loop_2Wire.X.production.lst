

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Jan 19 11:16:40 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,delta=2
    65                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,delta=2
    67                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text55,local,class=CODE,merge=1,delta=2
    69                           	psect	text56,local,class=CODE,merge=1,delta=2
    70                           	psect	text57,local,class=CODE,merge=1,delta=2
    71                           	psect	text58,local,class=CODE,merge=1,delta=2
    72                           	psect	text59,local,class=CODE,merge=1,delta=2
    73                           	psect	text60,local,class=CODE,merge=1,delta=2
    74                           	psect	text61,local,class=CODE,merge=1,delta=2
    75                           	psect	text62,local,class=CODE,merge=1,delta=2
    76                           	psect	text63,local,class=CODE,merge=1,delta=2
    77                           	psect	text64,local,class=CODE,merge=1,delta=2
    78                           	psect	text65,local,class=CODE,merge=1,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,delta=2
    80                           	psect	text67,local,class=CODE,merge=1,delta=2
    81                           	psect	text68,local,class=CODE,merge=1,delta=2
    82                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text74,local,class=CODE,merge=1,delta=2
    88                           	psect	intentry,global,class=CODE,delta=2
    89                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    90                           	dabs	1,0x7E,2
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0007                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  008F                     	;# 
   134  0090                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0093                     	;# 
   139  0094                     	;# 
   140  0095                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0096                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009C                     	;# 
   147  009D                     	;# 
   148  009F                     	;# 
   149  0108                     	;# 
   150  0109                     	;# 
   151  010C                     	;# 
   152  010C                     	;# 
   153  010D                     	;# 
   154  010D                     	;# 
   155  010E                     	;# 
   156  010F                     	;# 
   157  0185                     	;# 
   158  0186                     	;# 
   159  018C                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  000E                     	;# 
   175  000F                     	;# 
   176  0010                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0013                     	;# 
   180  0014                     	;# 
   181  0015                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  001D                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  0081                     	;# 
   195  0085                     	;# 
   196  0086                     	;# 
   197  0087                     	;# 
   198  0089                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  008F                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0093                     	;# 
   208  0094                     	;# 
   209  0095                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0096                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009F                     	;# 
   218  0108                     	;# 
   219  0109                     	;# 
   220  010C                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  010F                     	;# 
   226  0185                     	;# 
   227  0186                     	;# 
   228  018C                     	;# 
   229  0000                     	;# 
   230  0001                     	;# 
   231  0002                     	;# 
   232  0003                     	;# 
   233  0004                     	;# 
   234  0005                     	;# 
   235  0006                     	;# 
   236  0007                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0089                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  008F                     	;# 
   272  0090                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0095                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0096                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009F                     	;# 
   287  0108                     	;# 
   288  0109                     	;# 
   289  010C                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  0185                     	;# 
   296  0186                     	;# 
   297  018C                     	;# 
   298  0000                     	;# 
   299  0001                     	;# 
   300  0002                     	;# 
   301  0003                     	;# 
   302  0004                     	;# 
   303  0005                     	;# 
   304  0006                     	;# 
   305  0007                     	;# 
   306  0009                     	;# 
   307  000A                     	;# 
   308  000B                     	;# 
   309  000C                     	;# 
   310  000D                     	;# 
   311  000E                     	;# 
   312  000E                     	;# 
   313  000F                     	;# 
   314  0010                     	;# 
   315  0011                     	;# 
   316  0012                     	;# 
   317  0013                     	;# 
   318  0014                     	;# 
   319  0015                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0017                     	;# 
   323  0018                     	;# 
   324  0019                     	;# 
   325  001A                     	;# 
   326  001B                     	;# 
   327  001B                     	;# 
   328  001C                     	;# 
   329  001D                     	;# 
   330  001E                     	;# 
   331  001F                     	;# 
   332  0081                     	;# 
   333  0085                     	;# 
   334  0086                     	;# 
   335  0087                     	;# 
   336  0089                     	;# 
   337  008C                     	;# 
   338  008D                     	;# 
   339  008E                     	;# 
   340  008F                     	;# 
   341  0090                     	;# 
   342  0091                     	;# 
   343  0092                     	;# 
   344  0093                     	;# 
   345  0093                     	;# 
   346  0094                     	;# 
   347  0095                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0096                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009F                     	;# 
   356  0108                     	;# 
   357  0109                     	;# 
   358  010C                     	;# 
   359  010C                     	;# 
   360  010D                     	;# 
   361  010D                     	;# 
   362  010E                     	;# 
   363  010F                     	;# 
   364  0185                     	;# 
   365  0186                     	;# 
   366  018C                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0009                     	;# 
   376  000A                     	;# 
   377  000B                     	;# 
   378  000C                     	;# 
   379  000D                     	;# 
   380  000E                     	;# 
   381  000E                     	;# 
   382  000F                     	;# 
   383  0010                     	;# 
   384  0011                     	;# 
   385  0012                     	;# 
   386  0013                     	;# 
   387  0014                     	;# 
   388  0015                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0017                     	;# 
   392  0018                     	;# 
   393  0019                     	;# 
   394  001A                     	;# 
   395  001B                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  001D                     	;# 
   399  001E                     	;# 
   400  001F                     	;# 
   401  0081                     	;# 
   402  0085                     	;# 
   403  0086                     	;# 
   404  0087                     	;# 
   405  0089                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  008F                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0094                     	;# 
   416  0095                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0096                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009F                     	;# 
   425  0108                     	;# 
   426  0109                     	;# 
   427  010C                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  010F                     	;# 
   433  0185                     	;# 
   434  0186                     	;# 
   435  018C                     	;# 
   436  0000                     	;# 
   437  0001                     	;# 
   438  0002                     	;# 
   439  0003                     	;# 
   440  0004                     	;# 
   441  0005                     	;# 
   442  0006                     	;# 
   443  0007                     	;# 
   444  0009                     	;# 
   445  000A                     	;# 
   446  000B                     	;# 
   447  000C                     	;# 
   448  000D                     	;# 
   449  000E                     	;# 
   450  000E                     	;# 
   451  000F                     	;# 
   452  0010                     	;# 
   453  0011                     	;# 
   454  0012                     	;# 
   455  0013                     	;# 
   456  0014                     	;# 
   457  0015                     	;# 
   458  0015                     	;# 
   459  0016                     	;# 
   460  0017                     	;# 
   461  0018                     	;# 
   462  0019                     	;# 
   463  001A                     	;# 
   464  001B                     	;# 
   465  001B                     	;# 
   466  001C                     	;# 
   467  001D                     	;# 
   468  001E                     	;# 
   469  001F                     	;# 
   470  0081                     	;# 
   471  0085                     	;# 
   472  0086                     	;# 
   473  0087                     	;# 
   474  0089                     	;# 
   475  008C                     	;# 
   476  008D                     	;# 
   477  008E                     	;# 
   478  008F                     	;# 
   479  0090                     	;# 
   480  0091                     	;# 
   481  0092                     	;# 
   482  0093                     	;# 
   483  0093                     	;# 
   484  0094                     	;# 
   485  0095                     	;# 
   486  0095                     	;# 
   487  0096                     	;# 
   488  0096                     	;# 
   489  0098                     	;# 
   490  0099                     	;# 
   491  009C                     	;# 
   492  009D                     	;# 
   493  009F                     	;# 
   494  0108                     	;# 
   495  0109                     	;# 
   496  010C                     	;# 
   497  010C                     	;# 
   498  010D                     	;# 
   499  010D                     	;# 
   500  010E                     	;# 
   501  010F                     	;# 
   502  0185                     	;# 
   503  0186                     	;# 
   504  018C                     	;# 
   505  0000                     	;# 
   506  0001                     	;# 
   507  0002                     	;# 
   508  0003                     	;# 
   509  0004                     	;# 
   510  0005                     	;# 
   511  0006                     	;# 
   512  0007                     	;# 
   513  0009                     	;# 
   514  000A                     	;# 
   515  000B                     	;# 
   516  000C                     	;# 
   517  000D                     	;# 
   518  000E                     	;# 
   519  000E                     	;# 
   520  000F                     	;# 
   521  0010                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0013                     	;# 
   525  0014                     	;# 
   526  0015                     	;# 
   527  0015                     	;# 
   528  0016                     	;# 
   529  0017                     	;# 
   530  0018                     	;# 
   531  0019                     	;# 
   532  001A                     	;# 
   533  001B                     	;# 
   534  001B                     	;# 
   535  001C                     	;# 
   536  001D                     	;# 
   537  001E                     	;# 
   538  001F                     	;# 
   539  0081                     	;# 
   540  0085                     	;# 
   541  0086                     	;# 
   542  0087                     	;# 
   543  0089                     	;# 
   544  008C                     	;# 
   545  008D                     	;# 
   546  008E                     	;# 
   547  008F                     	;# 
   548  0090                     	;# 
   549  0091                     	;# 
   550  0092                     	;# 
   551  0093                     	;# 
   552  0093                     	;# 
   553  0094                     	;# 
   554  0095                     	;# 
   555  0095                     	;# 
   556  0096                     	;# 
   557  0096                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009F                     	;# 
   563  0108                     	;# 
   564  0109                     	;# 
   565  010C                     	;# 
   566  010C                     	;# 
   567  010D                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  010F                     	;# 
   571  0185                     	;# 
   572  0186                     	;# 
   573  018C                     	;# 
   574  0000                     	;# 
   575  0001                     	;# 
   576  0002                     	;# 
   577  0003                     	;# 
   578  0004                     	;# 
   579  0005                     	;# 
   580  0006                     	;# 
   581  0007                     	;# 
   582  0009                     	;# 
   583  000A                     	;# 
   584  000B                     	;# 
   585  000C                     	;# 
   586  000D                     	;# 
   587  000E                     	;# 
   588  000E                     	;# 
   589  000F                     	;# 
   590  0010                     	;# 
   591  0011                     	;# 
   592  0012                     	;# 
   593  0013                     	;# 
   594  0014                     	;# 
   595  0015                     	;# 
   596  0015                     	;# 
   597  0016                     	;# 
   598  0017                     	;# 
   599  0018                     	;# 
   600  0019                     	;# 
   601  001A                     	;# 
   602  001B                     	;# 
   603  001B                     	;# 
   604  001C                     	;# 
   605  001D                     	;# 
   606  001E                     	;# 
   607  001F                     	;# 
   608  0081                     	;# 
   609  0085                     	;# 
   610  0086                     	;# 
   611  0087                     	;# 
   612  0089                     	;# 
   613  008C                     	;# 
   614  008D                     	;# 
   615  008E                     	;# 
   616  008F                     	;# 
   617  0090                     	;# 
   618  0091                     	;# 
   619  0092                     	;# 
   620  0093                     	;# 
   621  0093                     	;# 
   622  0094                     	;# 
   623  0095                     	;# 
   624  0095                     	;# 
   625  0096                     	;# 
   626  0096                     	;# 
   627  0098                     	;# 
   628  0099                     	;# 
   629  009C                     	;# 
   630  009D                     	;# 
   631  009F                     	;# 
   632  0108                     	;# 
   633  0109                     	;# 
   634  010C                     	;# 
   635  010C                     	;# 
   636  010D                     	;# 
   637  010D                     	;# 
   638  010E                     	;# 
   639  010F                     	;# 
   640  0185                     	;# 
   641  0186                     	;# 
   642  018C                     	;# 
   643  0000                     	;# 
   644  0001                     	;# 
   645  0002                     	;# 
   646  0003                     	;# 
   647  0004                     	;# 
   648  0005                     	;# 
   649  0006                     	;# 
   650  0007                     	;# 
   651  0009                     	;# 
   652  000A                     	;# 
   653  000B                     	;# 
   654  000C                     	;# 
   655  000D                     	;# 
   656  000E                     	;# 
   657  000E                     	;# 
   658  000F                     	;# 
   659  0010                     	;# 
   660  0011                     	;# 
   661  0012                     	;# 
   662  0013                     	;# 
   663  0014                     	;# 
   664  0015                     	;# 
   665  0015                     	;# 
   666  0016                     	;# 
   667  0017                     	;# 
   668  0018                     	;# 
   669  0019                     	;# 
   670  001A                     	;# 
   671  001B                     	;# 
   672  001B                     	;# 
   673  001C                     	;# 
   674  001D                     	;# 
   675  001E                     	;# 
   676  001F                     	;# 
   677  0081                     	;# 
   678  0085                     	;# 
   679  0086                     	;# 
   680  0087                     	;# 
   681  0089                     	;# 
   682  008C                     	;# 
   683  008D                     	;# 
   684  008E                     	;# 
   685  008F                     	;# 
   686  0090                     	;# 
   687  0091                     	;# 
   688  0092                     	;# 
   689  0093                     	;# 
   690  0093                     	;# 
   691  0094                     	;# 
   692  0095                     	;# 
   693  0095                     	;# 
   694  0096                     	;# 
   695  0096                     	;# 
   696  0098                     	;# 
   697  0099                     	;# 
   698  009C                     	;# 
   699  009D                     	;# 
   700  009F                     	;# 
   701  0108                     	;# 
   702  0109                     	;# 
   703  010C                     	;# 
   704  010C                     	;# 
   705  010D                     	;# 
   706  010D                     	;# 
   707  010E                     	;# 
   708  010F                     	;# 
   709  0185                     	;# 
   710  0186                     	;# 
   711  018C                     	;# 
   712  0000                     	;# 
   713  0001                     	;# 
   714  0002                     	;# 
   715  0003                     	;# 
   716  0004                     	;# 
   717  0005                     	;# 
   718  0006                     	;# 
   719  0007                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  000E                     	;# 
   727  000F                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0013                     	;# 
   732  0014                     	;# 
   733  0015                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0017                     	;# 
   737  0018                     	;# 
   738  0019                     	;# 
   739  001A                     	;# 
   740  001B                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  001D                     	;# 
   744  001E                     	;# 
   745  001F                     	;# 
   746  0081                     	;# 
   747  0085                     	;# 
   748  0086                     	;# 
   749  0087                     	;# 
   750  0089                     	;# 
   751  008C                     	;# 
   752  008D                     	;# 
   753  008E                     	;# 
   754  008F                     	;# 
   755  0090                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0093                     	;# 
   759  0093                     	;# 
   760  0094                     	;# 
   761  0095                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0096                     	;# 
   765  0098                     	;# 
   766  0099                     	;# 
   767  009C                     	;# 
   768  009D                     	;# 
   769  009F                     	;# 
   770  0108                     	;# 
   771  0109                     	;# 
   772  010C                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  010D                     	;# 
   776  010E                     	;# 
   777  010F                     	;# 
   778  0185                     	;# 
   779  0186                     	;# 
   780  018C                     	;# 
   781  0000                     	;# 
   782  0001                     	;# 
   783  0002                     	;# 
   784  0003                     	;# 
   785  0004                     	;# 
   786  0005                     	;# 
   787  0006                     	;# 
   788  0007                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000D                     	;# 
   794  000E                     	;# 
   795  000E                     	;# 
   796  000F                     	;# 
   797  0010                     	;# 
   798  0011                     	;# 
   799  0012                     	;# 
   800  0013                     	;# 
   801  0014                     	;# 
   802  0015                     	;# 
   803  0015                     	;# 
   804  0016                     	;# 
   805  0017                     	;# 
   806  0018                     	;# 
   807  0019                     	;# 
   808  001A                     	;# 
   809  001B                     	;# 
   810  001B                     	;# 
   811  001C                     	;# 
   812  001D                     	;# 
   813  001E                     	;# 
   814  001F                     	;# 
   815  0081                     	;# 
   816  0085                     	;# 
   817  0086                     	;# 
   818  0087                     	;# 
   819  0089                     	;# 
   820  008C                     	;# 
   821  008D                     	;# 
   822  008E                     	;# 
   823  008F                     	;# 
   824  0090                     	;# 
   825  0091                     	;# 
   826  0092                     	;# 
   827  0093                     	;# 
   828  0093                     	;# 
   829  0094                     	;# 
   830  0095                     	;# 
   831  0095                     	;# 
   832  0096                     	;# 
   833  0096                     	;# 
   834  0098                     	;# 
   835  0099                     	;# 
   836  009C                     	;# 
   837  009D                     	;# 
   838  009F                     	;# 
   839  0108                     	;# 
   840  0109                     	;# 
   841  010C                     	;# 
   842  010C                     	;# 
   843  010D                     	;# 
   844  010D                     	;# 
   845  010E                     	;# 
   846  010F                     	;# 
   847  0185                     	;# 
   848  0186                     	;# 
   849  018C                     	;# 
   850  0000                     	;# 
   851  0001                     	;# 
   852  0002                     	;# 
   853  0003                     	;# 
   854  0004                     	;# 
   855  0005                     	;# 
   856  0006                     	;# 
   857  0007                     	;# 
   858  0009                     	;# 
   859  000A                     	;# 
   860  000B                     	;# 
   861  000C                     	;# 
   862  000D                     	;# 
   863  000E                     	;# 
   864  000E                     	;# 
   865  000F                     	;# 
   866  0010                     	;# 
   867  0011                     	;# 
   868  0012                     	;# 
   869  0013                     	;# 
   870  0014                     	;# 
   871  0015                     	;# 
   872  0015                     	;# 
   873  0016                     	;# 
   874  0017                     	;# 
   875  0018                     	;# 
   876  0019                     	;# 
   877  001A                     	;# 
   878  001B                     	;# 
   879  001B                     	;# 
   880  001C                     	;# 
   881  001D                     	;# 
   882  001E                     	;# 
   883  001F                     	;# 
   884  0081                     	;# 
   885  0085                     	;# 
   886  0086                     	;# 
   887  0087                     	;# 
   888  0089                     	;# 
   889  008C                     	;# 
   890  008D                     	;# 
   891  008E                     	;# 
   892  008F                     	;# 
   893  0090                     	;# 
   894  0091                     	;# 
   895  0092                     	;# 
   896  0093                     	;# 
   897  0093                     	;# 
   898  0094                     	;# 
   899  0095                     	;# 
   900  0095                     	;# 
   901  0096                     	;# 
   902  0096                     	;# 
   903  0098                     	;# 
   904  0099                     	;# 
   905  009C                     	;# 
   906  009D                     	;# 
   907  009F                     	;# 
   908  0108                     	;# 
   909  0109                     	;# 
   910  010C                     	;# 
   911  010C                     	;# 
   912  010D                     	;# 
   913  010D                     	;# 
   914  010E                     	;# 
   915  010F                     	;# 
   916  0185                     	;# 
   917  0186                     	;# 
   918  018C                     	;# 
   919  0000                     	;# 
   920  0001                     	;# 
   921  0002                     	;# 
   922  0003                     	;# 
   923  0004                     	;# 
   924  0005                     	;# 
   925  0006                     	;# 
   926  0007                     	;# 
   927  0009                     	;# 
   928  000A                     	;# 
   929  000B                     	;# 
   930  000C                     	;# 
   931  000D                     	;# 
   932  000E                     	;# 
   933  000E                     	;# 
   934  000F                     	;# 
   935  0010                     	;# 
   936  0011                     	;# 
   937  0012                     	;# 
   938  0013                     	;# 
   939  0014                     	;# 
   940  0015                     	;# 
   941  0015                     	;# 
   942  0016                     	;# 
   943  0017                     	;# 
   944  0018                     	;# 
   945  0019                     	;# 
   946  001A                     	;# 
   947  001B                     	;# 
   948  001B                     	;# 
   949  001C                     	;# 
   950  001D                     	;# 
   951  001E                     	;# 
   952  001F                     	;# 
   953  0081                     	;# 
   954  0085                     	;# 
   955  0086                     	;# 
   956  0087                     	;# 
   957  0089                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  008F                     	;# 
   962  0090                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0093                     	;# 
   966  0093                     	;# 
   967  0094                     	;# 
   968  0095                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0096                     	;# 
   972  0098                     	;# 
   973  0099                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009F                     	;# 
   977  0108                     	;# 
   978  0109                     	;# 
   979  010C                     	;# 
   980  010C                     	;# 
   981  010D                     	;# 
   982  010D                     	;# 
   983  010E                     	;# 
   984  010F                     	;# 
   985  0185                     	;# 
   986  0186                     	;# 
   987  018C                     	;# 
   988  0000                     	;# 
   989  0001                     	;# 
   990  0002                     	;# 
   991  0003                     	;# 
   992  0004                     	;# 
   993  0005                     	;# 
   994  0006                     	;# 
   995  0007                     	;# 
   996  0009                     	;# 
   997  000A                     	;# 
   998  000B                     	;# 
   999  000C                     	;# 
  1000  000D                     	;# 
  1001  000E                     	;# 
  1002  000E                     	;# 
  1003  000F                     	;# 
  1004  0010                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0013                     	;# 
  1008  0014                     	;# 
  1009  0015                     	;# 
  1010  0015                     	;# 
  1011  0016                     	;# 
  1012  0017                     	;# 
  1013  0018                     	;# 
  1014  0019                     	;# 
  1015  001A                     	;# 
  1016  001B                     	;# 
  1017  001B                     	;# 
  1018  001C                     	;# 
  1019  001D                     	;# 
  1020  001E                     	;# 
  1021  001F                     	;# 
  1022  0081                     	;# 
  1023  0085                     	;# 
  1024  0086                     	;# 
  1025  0087                     	;# 
  1026  0089                     	;# 
  1027  008C                     	;# 
  1028  008D                     	;# 
  1029  008E                     	;# 
  1030  008F                     	;# 
  1031  0090                     	;# 
  1032  0091                     	;# 
  1033  0092                     	;# 
  1034  0093                     	;# 
  1035  0093                     	;# 
  1036  0094                     	;# 
  1037  0095                     	;# 
  1038  0095                     	;# 
  1039  0096                     	;# 
  1040  0096                     	;# 
  1041  0098                     	;# 
  1042  0099                     	;# 
  1043  009C                     	;# 
  1044  009D                     	;# 
  1045  009F                     	;# 
  1046  0108                     	;# 
  1047  0109                     	;# 
  1048  010C                     	;# 
  1049  010C                     	;# 
  1050  010D                     	;# 
  1051  010D                     	;# 
  1052  010E                     	;# 
  1053  010F                     	;# 
  1054  0185                     	;# 
  1055  0186                     	;# 
  1056  018C                     	;# 
  1057  0000                     	;# 
  1058  0001                     	;# 
  1059  0002                     	;# 
  1060  0003                     	;# 
  1061  0004                     	;# 
  1062  0005                     	;# 
  1063  0006                     	;# 
  1064  0007                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  000E                     	;# 
  1072  000F                     	;# 
  1073  0010                     	;# 
  1074  0011                     	;# 
  1075  0012                     	;# 
  1076  0013                     	;# 
  1077  0014                     	;# 
  1078  0015                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0017                     	;# 
  1082  0018                     	;# 
  1083  0019                     	;# 
  1084  001A                     	;# 
  1085  001B                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  001D                     	;# 
  1089  001E                     	;# 
  1090  001F                     	;# 
  1091  0081                     	;# 
  1092  0085                     	;# 
  1093  0086                     	;# 
  1094  0087                     	;# 
  1095  0089                     	;# 
  1096  008C                     	;# 
  1097  008D                     	;# 
  1098  008E                     	;# 
  1099  008F                     	;# 
  1100  0090                     	;# 
  1101  0091                     	;# 
  1102  0092                     	;# 
  1103  0093                     	;# 
  1104  0093                     	;# 
  1105  0094                     	;# 
  1106  0095                     	;# 
  1107  0095                     	;# 
  1108  0096                     	;# 
  1109  0096                     	;# 
  1110  0098                     	;# 
  1111  0099                     	;# 
  1112  009C                     	;# 
  1113  009D                     	;# 
  1114  009F                     	;# 
  1115  0108                     	;# 
  1116  0109                     	;# 
  1117  010C                     	;# 
  1118  010C                     	;# 
  1119  010D                     	;# 
  1120  010D                     	;# 
  1121  010E                     	;# 
  1122  010F                     	;# 
  1123  0185                     	;# 
  1124  0186                     	;# 
  1125  018C                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0009                     	;# 
  1135  000A                     	;# 
  1136  000B                     	;# 
  1137  000C                     	;# 
  1138  000D                     	;# 
  1139  000E                     	;# 
  1140  000E                     	;# 
  1141  000F                     	;# 
  1142  0010                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0014                     	;# 
  1147  0015                     	;# 
  1148  0015                     	;# 
  1149  0016                     	;# 
  1150  0017                     	;# 
  1151  0018                     	;# 
  1152  0019                     	;# 
  1153  001A                     	;# 
  1154  001B                     	;# 
  1155  001B                     	;# 
  1156  001C                     	;# 
  1157  001D                     	;# 
  1158  001E                     	;# 
  1159  001F                     	;# 
  1160  0081                     	;# 
  1161  0085                     	;# 
  1162  0086                     	;# 
  1163  0087                     	;# 
  1164  0089                     	;# 
  1165  008C                     	;# 
  1166  008D                     	;# 
  1167  008E                     	;# 
  1168  008F                     	;# 
  1169  0090                     	;# 
  1170  0091                     	;# 
  1171  0092                     	;# 
  1172  0093                     	;# 
  1173  0093                     	;# 
  1174  0094                     	;# 
  1175  0095                     	;# 
  1176  0095                     	;# 
  1177  0096                     	;# 
  1178  0096                     	;# 
  1179  0098                     	;# 
  1180  0099                     	;# 
  1181  009C                     	;# 
  1182  009D                     	;# 
  1183  009F                     	;# 
  1184  0108                     	;# 
  1185  0109                     	;# 
  1186  010C                     	;# 
  1187  010C                     	;# 
  1188  010D                     	;# 
  1189  010D                     	;# 
  1190  010E                     	;# 
  1191  010F                     	;# 
  1192  0185                     	;# 
  1193  0186                     	;# 
  1194  018C                     	;# 
  1195  0000                     	;# 
  1196  0001                     	;# 
  1197  0002                     	;# 
  1198  0003                     	;# 
  1199  0004                     	;# 
  1200  0005                     	;# 
  1201  0006                     	;# 
  1202  0007                     	;# 
  1203  0009                     	;# 
  1204  000A                     	;# 
  1205  000B                     	;# 
  1206  000C                     	;# 
  1207  000D                     	;# 
  1208  000E                     	;# 
  1209  000E                     	;# 
  1210  000F                     	;# 
  1211  0010                     	;# 
  1212  0011                     	;# 
  1213  0012                     	;# 
  1214  0013                     	;# 
  1215  0014                     	;# 
  1216  0015                     	;# 
  1217  0015                     	;# 
  1218  0016                     	;# 
  1219  0017                     	;# 
  1220  0018                     	;# 
  1221  0019                     	;# 
  1222  001A                     	;# 
  1223  001B                     	;# 
  1224  001B                     	;# 
  1225  001C                     	;# 
  1226  001D                     	;# 
  1227  001E                     	;# 
  1228  001F                     	;# 
  1229  0081                     	;# 
  1230  0085                     	;# 
  1231  0086                     	;# 
  1232  0087                     	;# 
  1233  0089                     	;# 
  1234  008C                     	;# 
  1235  008D                     	;# 
  1236  008E                     	;# 
  1237  008F                     	;# 
  1238  0090                     	;# 
  1239  0091                     	;# 
  1240  0092                     	;# 
  1241  0093                     	;# 
  1242  0093                     	;# 
  1243  0094                     	;# 
  1244  0095                     	;# 
  1245  0095                     	;# 
  1246  0096                     	;# 
  1247  0096                     	;# 
  1248  0098                     	;# 
  1249  0099                     	;# 
  1250  009C                     	;# 
  1251  009D                     	;# 
  1252  009F                     	;# 
  1253  0108                     	;# 
  1254  0109                     	;# 
  1255  010C                     	;# 
  1256  010C                     	;# 
  1257  010D                     	;# 
  1258  010D                     	;# 
  1259  010E                     	;# 
  1260  010F                     	;# 
  1261  0185                     	;# 
  1262  0186                     	;# 
  1263  018C                     	;# 
  1264  0000                     	;# 
  1265  0001                     	;# 
  1266  0002                     	;# 
  1267  0003                     	;# 
  1268  0004                     	;# 
  1269  0005                     	;# 
  1270  0006                     	;# 
  1271  0007                     	;# 
  1272  0009                     	;# 
  1273  000A                     	;# 
  1274  000B                     	;# 
  1275  000C                     	;# 
  1276  000D                     	;# 
  1277  000E                     	;# 
  1278  000E                     	;# 
  1279  000F                     	;# 
  1280  0010                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0013                     	;# 
  1284  0014                     	;# 
  1285  0015                     	;# 
  1286  0015                     	;# 
  1287  0016                     	;# 
  1288  0017                     	;# 
  1289  0018                     	;# 
  1290  0019                     	;# 
  1291  001A                     	;# 
  1292  001B                     	;# 
  1293  001B                     	;# 
  1294  001C                     	;# 
  1295  001D                     	;# 
  1296  001E                     	;# 
  1297  001F                     	;# 
  1298  0081                     	;# 
  1299  0085                     	;# 
  1300  0086                     	;# 
  1301  0087                     	;# 
  1302  0089                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  008F                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0093                     	;# 
  1311  0093                     	;# 
  1312  0094                     	;# 
  1313  0095                     	;# 
  1314  0095                     	;# 
  1315  0096                     	;# 
  1316  0096                     	;# 
  1317  0098                     	;# 
  1318  0099                     	;# 
  1319  009C                     	;# 
  1320  009D                     	;# 
  1321  009F                     	;# 
  1322  0108                     	;# 
  1323  0109                     	;# 
  1324  010C                     	;# 
  1325  010C                     	;# 
  1326  010D                     	;# 
  1327  010D                     	;# 
  1328  010E                     	;# 
  1329  010F                     	;# 
  1330  0185                     	;# 
  1331  0186                     	;# 
  1332  018C                     	;# 
  1333  001F                     _ADCON0	set	31
  1334  001E                     _ADRES	set	30
  1335  0005                     _PORTA	set	5
  1336  0006                     _PORTB	set	6
  1337  0007                     _PORTC	set	7
  1338  0010                     _T1CON	set	16
  1339  000F                     _TMR1H	set	15
  1340  000E                     _TMR1L	set	14
  1341  005F                     _GIE	set	95
  1342  00F9                     _GO_nDONE	set	249
  1343  005E                     _PEIE	set	94
  1344  002E                     _RA6	set	46
  1345  002F                     _RA7	set	47
  1346  0032                     _RB2	set	50
  1347  0033                     _RB3	set	51
  1348  0034                     _RB4	set	52
  1349  0035                     _RB5	set	53
  1350  0038                     _RC0	set	56
  1351  0039                     _RC1	set	57
  1352  003C                     _RC4	set	60
  1353  003D                     _RC5	set	61
  1354  003E                     _RC6	set	62
  1355  003F                     _RC7	set	63
  1356  0060                     _TMR1IF	set	96
  1357  009F                     _ADCON1	set	159
  1358  009D                     _FVRCON	set	157
  1359  0090                     _OSCCON	set	144
  1360  0085                     _TRISA	set	133
  1361  0086                     _TRISB	set	134
  1362  0087                     _TRISC	set	135
  1363  0095                     _WPUB	set	149
  1364  0408                     _PS0	set	1032
  1365  0409                     _PS1	set	1033
  1366  040A                     _PS2	set	1034
  1367  040B                     _PSA	set	1035
  1368  0460                     _TMR1IE	set	1120
  1369  0185                     _ANSELA	set	389
  1370  0186                     _ANSELB	set	390
  1371                           
  1372                           	psect	text0
  1373  0000                     __ptext0:	
  1374                           ; #config settings
  1375                           
  1376                           
  1377                           ;psect for function _TMR1_ISR
  1378  0000                     
  1379                           	psect	cinit
  1380  0013                     start_initialization:	
  1381  0013                     __initialization:	
  1382                           
  1383                           ; Clear objects allocated to COMMON
  1384  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1385  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1386  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1387  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1388                           
  1389                           ; Clear objects allocated to BANK0
  1390  0017  1383               	bcf	3,7	;select IRP bank0
  1391  0018  3020               	movlw	low __pbssBANK0
  1392  0019  0084               	movwf	4
  1393  001A  3057               	movlw	low (__pbssBANK0+55)
  1394  001B  158A  216E  118A   	fcall	clear_ram0
  1395                           
  1396                           ; Clear objects allocated to BANK1
  1397  001E  30A0               	movlw	low __pbssBANK1
  1398  001F  0084               	movwf	4
  1399  0020  30EE               	movlw	low (__pbssBANK1+78)
  1400  0021  158A  216E  118A   	fcall	clear_ram0
  1401                           
  1402                           ; Clear objects allocated to BANK2
  1403  0024  1783               	bsf	3,7	;select IRP bank2
  1404  0025  3020               	movlw	low __pbssBANK2
  1405  0026  0084               	movwf	4
  1406  0027  302A               	movlw	low (__pbssBANK2+10)
  1407  0028  158A  216E         	fcall	clear_ram0
  1408  002A                     end_of_initialization:	
  1409                           ;End of C runtime variable initialization code
  1410                           
  1411  002A                     __end_of__initialization:	
  1412  002A  0183               	clrf	3
  1413  002B  158A  2F04         	ljmp	_main	;jump to C main() function
  1414                           
  1415                           	psect	bssCOMMON
  1416  0076                     __pbssCOMMON:	
  1417  0076                     _LED:	
  1418  0076                     	ds	1
  1419  0077                     _Light:	
  1420  0077                     	ds	1
  1421  0078                     _Lights:	
  1422  0078                     	ds	1
  1423  0079                     _Sw:	
  1424  0079                     	ds	1
  1425                           
  1426                           	psect	bssBANK0
  1427  0020                     __pbssBANK0:	
  1428  0020                     _Buz1:	
  1429  0020                     	ds	12
  1430  002C                     _SYSC:	
  1431  002C                     	ds	5
  1432  0031                     _myMain:	
  1433  0031                     	ds	5
  1434  0036                     __CDS:	
  1435  0036                     	ds	4
  1436  003A                     _Timer1:	
  1437  003A                     	ds	3
  1438  003D                     _WDT:	
  1439  003D                     	ds	2
  1440  003F                     _Cmd:	
  1441  003F                     	ds	1
  1442  0040                     _LightsControl:	
  1443  0040                     	ds	1
  1444  0041                     _SwDetect:	
  1445  0041                     	ds	1
  1446  0042                     _Temp:	
  1447  0042                     	ds	7
  1448  0049                     _Lights1:	
  1449  0049                     	ds	5
  1450  004E                     _Lights2:	
  1451  004E                     	ds	5
  1452  0053                     _VarErrLED:	
  1453  0053                     	ds	4
  1454                           
  1455                           	psect	bssBANK1
  1456  00A0                     __pbssBANK1:	
  1457  00A0                     __PIR:	
  1458  00A0                     	ds	42
  1459  00CA                     _Load:	
  1460  00CA                     	ds	28
  1461  00E6                     _VarLED1:	
  1462  00E6                     	ds	4
  1463  00EA                     _VarLED2:	
  1464  00EA                     	ds	4
  1465                           
  1466                           	psect	bssBANK2
  1467  0120                     __pbssBANK2:	
  1468  0120                     _Sw1:	
  1469  0120                     	ds	5
  1470  0125                     _Sw2:	
  1471  0125                     	ds	5
  1472                           
  1473                           	psect	clrtext
  1474  096E                     clear_ram0:	
  1475                           ;	Called with FSR containing the base address, and
  1476                           ;	W with the last address+1
  1477                           
  1478  096E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1479  096F                     clrloop0:	
  1480  096F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1481  0970  0A84               	incf	4,f	;increment pointer
  1482  0971  0604               	xorwf	4,w	;XOR with final address
  1483  0972  1903               	btfsc	3,2	;have we reached the end yet?
  1484  0973  3400               	retlw	0	;all done for this memory range, return
  1485  0974  0604               	xorwf	4,w	;XOR again to restore value
  1486  0975  296F               	goto	clrloop0	;do the next byte
  1487                           
  1488                           	psect	cstackCOMMON
  1489  0070                     __pcstackCOMMON:	
  1490  0070                     ?_setLED_Initialization:	
  1491  0070                     ?_setLED_Main:	
  1492                           ; 0 bytes @ 0x0
  1493                           
  1494  0070                     ?_Fosc_Set:	
  1495                           ; 0 bytes @ 0x0
  1496                           
  1497  0070                     ?_IO_Set:	
  1498                           ; 0 bytes @ 0x0
  1499                           
  1500  0070                     ?_TMR1_Set:	
  1501                           ; 0 bytes @ 0x0
  1502                           
  1503  0070                     ?_ADC_Set:	
  1504                           ; 0 bytes @ 0x0
  1505                           
  1506  0070                     ?_WDT_Set:	
  1507                           ; 0 bytes @ 0x0
  1508                           
  1509  0070                     ?_TMR1_ISR:	
  1510                           ; 0 bytes @ 0x0
  1511                           
  1512  0070                     ??_TMR1_ISR:	
  1513                           ; 0 bytes @ 0x0
  1514                           
  1515  0070                     ?_Timeout_Counter:	
  1516                           ; 0 bytes @ 0x0
  1517                           
  1518  0070                     ?_set_TimeoutCleared:	
  1519                           ; 0 bytes @ 0x0
  1520                           
  1521  0070                     ?_WDT_Clearing:	
  1522                           ; 0 bytes @ 0x0
  1523                           
  1524  0070                     ?_myMain_Initialization:	
  1525                           ; 0 bytes @ 0x0
  1526                           
  1527  0070                     ?_SYSC_Initialization:	
  1528                           ; 0 bytes @ 0x0
  1529                           
  1530  0070                     ?_Temp_Initialization:	
  1531                           ; 0 bytes @ 0x0
  1532                           
  1533  0070                     ?_Load_Initialization:	
  1534                           ; 0 bytes @ 0x0
  1535                           
  1536  0070                     ?_Lights_Initialization:	
  1537                           ; 0 bytes @ 0x0
  1538                           
  1539  0070                     ?_PIR_Initialization:	
  1540                           ; 0 bytes @ 0x0
  1541                           
  1542  0070                     ?_Switch_Initialization:	
  1543                           ; 0 bytes @ 0x0
  1544                           
  1545  0070                     ?_DetectSYSC_Signal:	
  1546                           ; 0 bytes @ 0x0
  1547                           
  1548  0070                     ?_getLoad_AD:	
  1549                           ; 0 bytes @ 0x0
  1550                           
  1551  0070                     ?_getTemp_AD:	
  1552                           ; 0 bytes @ 0x0
  1553                           
  1554  0070                     ?_my_MainTimer:	
  1555                           ; 0 bytes @ 0x0
  1556                           
  1557  0070                     ?_SYSC_Main:	
  1558                           ; 0 bytes @ 0x0
  1559                           
  1560  0070                     ?_Temp_Main:	
  1561                           ; 0 bytes @ 0x0
  1562                           
  1563  0070                     ?_Load_Main:	
  1564                           ; 0 bytes @ 0x0
  1565                           
  1566  0070                     ?_Lights_Main:	
  1567                           ; 0 bytes @ 0x0
  1568                           
  1569  0070                     ?_Switch_Main:	
  1570                           ; 0 bytes @ 0x0
  1571                           
  1572  0070                     ?_PIR_Main:	
  1573                           ; 0 bytes @ 0x0
  1574                           
  1575  0070                     ?_Exception_Main:	
  1576                           ; 0 bytes @ 0x0
  1577                           
  1578  0070                     ?_setLights_SwOn:	
  1579                           ; 0 bytes @ 0x0
  1580                           
  1581  0070                     ?_setLights_SwOff:	
  1582                           ; 0 bytes @ 0x0
  1583                           
  1584  0070                     ?_setLoad_AH_AL_Restore:	
  1585                           ; 0 bytes @ 0x0
  1586                           
  1587  0070                     ?_setTemp_Initialization:	
  1588                           ; 0 bytes @ 0x0
  1589                           
  1590  0070                     ?_setTemp_Main:	
  1591                           ; 0 bytes @ 0x0
  1592                           
  1593  0070                     ?_setSYSC_Initialization:	
  1594                           ; 0 bytes @ 0x0
  1595                           
  1596  0070                     ?_setSYSC_Main:	
  1597                           ; 0 bytes @ 0x0
  1598                           
  1599  0070                     ?_setSw_Main:	
  1600                           ; 0 bytes @ 0x0
  1601                           
  1602  0070                     ?_setLights_Initialization:	
  1603                           ; 0 bytes @ 0x0
  1604                           
  1605  0070                     ?_setLights_Main:	
  1606                           ; 0 bytes @ 0x0
  1607                           
  1608  0070                     ?_Lights_Control:	
  1609                           ; 0 bytes @ 0x0
  1610                           
  1611  0070                     ?_setLights_Line:	
  1612                           ; 0 bytes @ 0x0
  1613                           
  1614  0070                     ?_Buzzer_Initialization:	
  1615                           ; 0 bytes @ 0x0
  1616                           
  1617  0070                     ?_Buzzer_Main:	
  1618                           ; 0 bytes @ 0x0
  1619                           
  1620  0070                     ?_CDS_Initialization:	
  1621                           ; 0 bytes @ 0x0
  1622                           
  1623  0070                     ?_CDS_Main:	
  1624                           ; 0 bytes @ 0x0
  1625                           
  1626  0070                     ?_LedPointSelect:	
  1627                           ; 0 bytes @ 0x0
  1628                           
  1629  0070                     ?_LED_Initialization:	
  1630                           ; 0 bytes @ 0x0
  1631                           
  1632  0070                     ?_LED_Main:	
  1633                           ; 0 bytes @ 0x0
  1634                           
  1635  0070                     ?_Mcu_Initialization:	
  1636                           ; 0 bytes @ 0x0
  1637                           
  1638  0070                     ?_ISR:	
  1639                           ; 0 bytes @ 0x0
  1640                           
  1641  0070                     ??_ISR:	
  1642                           ; 0 bytes @ 0x0
  1643                           
  1644  0070                     ?_WDT_Main:	
  1645                           ; 0 bytes @ 0x0
  1646                           
  1647  0070                     ?_TouchPower:	
  1648                           ; 0 bytes @ 0x0
  1649                           
  1650  0070                     ?_SwPointSelect:	
  1651                           ; 0 bytes @ 0x0
  1652                           
  1653  0070                     ?_LightsPointSelect:	
  1654                           ; 0 bytes @ 0x0
  1655                           
  1656  0070                     ?_getLights_Status:	
  1657                           ; 0 bytes @ 0x0
  1658                           
  1659  0070                     ?_getAll_Lights_Line:	
  1660                           ; 1 bytes @ 0x0
  1661                           
  1662  0070                     ?_getLight_LoadGO:	
  1663                           ; 1 bytes @ 0x0
  1664                           
  1665  0070                     ?_getLight_Load_Status:	
  1666                           ; 1 bytes @ 0x0
  1667                           
  1668  0070                     ?_getSw_KeyStatus:	
  1669                           ; 1 bytes @ 0x0
  1670                           
  1671  0070                     ?_getLights_Allow_Condition:	
  1672                           ; 1 bytes @ 0x0
  1673                           
  1674  0070                     ?_getCDS_Status:	
  1675                           ; 1 bytes @ 0x0
  1676                           
  1677  0070                     ?_getMain_All_LightsStatus:	
  1678                           ; 1 bytes @ 0x0
  1679                           
  1680  0070                     ?_getMain_All_Error_Status:	
  1681                           ; 1 bytes @ 0x0
  1682                           
  1683  0070                     ?_getMain_Lights_Count:	
  1684                           ; 1 bytes @ 0x0
  1685                           
  1686  0070                     ?_getLoad_OK:	
  1687                           ; 1 bytes @ 0x0
  1688                           
  1689  0070                     getLights_Allow_Condition@lights:	
  1690                           ; 1 bytes @ 0x0
  1691                           
  1692                           
  1693                           ; 1 bytes @ 0x0
  1694  0070                     	ds	4
  1695  0074                     ??_Fosc_Set:	
  1696  0074                     ??_IO_Set:	
  1697                           ; 0 bytes @ 0x4
  1698                           
  1699  0074                     ??_TMR1_Set:	
  1700                           ; 0 bytes @ 0x4
  1701                           
  1702  0074                     ??_ADC_Set:	
  1703                           ; 0 bytes @ 0x4
  1704                           
  1705  0074                     ??_WDT_Set:	
  1706                           ; 0 bytes @ 0x4
  1707                           
  1708  0074                     ??_Timeout_Counter:	
  1709                           ; 0 bytes @ 0x4
  1710                           
  1711  0074                     ??_set_TimeoutCleared:	
  1712                           ; 0 bytes @ 0x4
  1713                           
  1714  0074                     ??_WDT_Clearing:	
  1715                           ; 0 bytes @ 0x4
  1716                           
  1717  0074                     ??_myMain_Initialization:	
  1718                           ; 0 bytes @ 0x4
  1719                           
  1720  0074                     ??_SYSC_Initialization:	
  1721                           ; 0 bytes @ 0x4
  1722                           
  1723  0074                     ??_Temp_Initialization:	
  1724                           ; 0 bytes @ 0x4
  1725                           
  1726  0074                     ??_PIR_Initialization:	
  1727                           ; 0 bytes @ 0x4
  1728                           
  1729  0074                     ??_Switch_Initialization:	
  1730                           ; 0 bytes @ 0x4
  1731                           
  1732  0074                     ??_DetectSYSC_Signal:	
  1733                           ; 0 bytes @ 0x4
  1734                           
  1735  0074                     ??_getAll_Lights_Line:	
  1736                           ; 0 bytes @ 0x4
  1737                           
  1738  0074                     ??_setLoad_AH_AL_Restore:	
  1739                           ; 0 bytes @ 0x4
  1740                           
  1741  0074                     ??_getLight_LoadGO:	
  1742                           ; 0 bytes @ 0x4
  1743                           
  1744  0074                     ??_getLight_Load_Status:	
  1745                           ; 0 bytes @ 0x4
  1746                           
  1747  0074                     ??_setTemp_Initialization:	
  1748                           ; 0 bytes @ 0x4
  1749                           
  1750  0074                     ??_setSYSC_Initialization:	
  1751                           ; 0 bytes @ 0x4
  1752                           
  1753  0074                     ??_getSw_KeyStatus:	
  1754                           ; 0 bytes @ 0x4
  1755                           
  1756  0074                     ??_setLights_Line:	
  1757                           ; 0 bytes @ 0x4
  1758                           
  1759  0074                     ??_Buzzer_Initialization:	
  1760                           ; 0 bytes @ 0x4
  1761                           
  1762  0074                     ??_Buzzer_Main:	
  1763                           ; 0 bytes @ 0x4
  1764                           
  1765  0074                     ??_CDS_Initialization:	
  1766                           ; 0 bytes @ 0x4
  1767                           
  1768  0074                     ??_getCDS_Status:	
  1769                           ; 0 bytes @ 0x4
  1770                           
  1771  0074                     ??_LedPointSelect:	
  1772                           ; 0 bytes @ 0x4
  1773                           
  1774  0074                     ??_WDT_Main:	
  1775                           ; 0 bytes @ 0x4
  1776                           
  1777  0074                     ??_getMain_All_LightsStatus:	
  1778                           ; 0 bytes @ 0x4
  1779                           
  1780  0074                     ??_getMain_All_Error_Status:	
  1781                           ; 0 bytes @ 0x4
  1782                           
  1783  0074                     ??_getMain_Lights_Count:	
  1784                           ; 0 bytes @ 0x4
  1785                           
  1786  0074                     ??_getLoad_OK:	
  1787                           ; 0 bytes @ 0x4
  1788                           
  1789  0074                     ??_TouchPower:	
  1790                           ; 0 bytes @ 0x4
  1791                           
  1792  0074                     ??_SwPointSelect:	
  1793                           ; 0 bytes @ 0x4
  1794                           
  1795  0074                     ??_LightsPointSelect:	
  1796                           ; 0 bytes @ 0x4
  1797                           
  1798  0074                     ??___wmul:	
  1799                           ; 0 bytes @ 0x4
  1800                           
  1801  0074                     ??___awdiv:	
  1802                           ; 0 bytes @ 0x4
  1803                           
  1804  0074                     ??___lwdiv:	
  1805                           ; 0 bytes @ 0x4
  1806                           
  1807  0074                     ?_getAD:	
  1808                           ; 0 bytes @ 0x4
  1809                           
  1810  0074                     getCDS_Status@status:	
  1811                           ; 1 bytes @ 0x4
  1812                           
  1813  0074                     getAD@adcon1:	
  1814                           ; 1 bytes @ 0x4
  1815                           
  1816  0074                     getMain_All_LightsStatus@status:	
  1817                           ; 1 bytes @ 0x4
  1818                           
  1819  0074                     getLoad_OK@ok:	
  1820                           ; 1 bytes @ 0x4
  1821                           
  1822  0074                     getSw_KeyStatus@status:	
  1823                           ; 1 bytes @ 0x4
  1824                           
  1825  0074                     setLights_Line@lights:	
  1826                           ; 1 bytes @ 0x4
  1827                           
  1828  0074                     getLight_LoadGO@loadgo:	
  1829                           ; 1 bytes @ 0x4
  1830                           
  1831  0074                     getLight_Load_Status@loadstatus:	
  1832                           ; 1 bytes @ 0x4
  1833                           
  1834  0074                     ___wmul@product:	
  1835                           ; 1 bytes @ 0x4
  1836                           
  1837                           
  1838                           ; 2 bytes @ 0x4
  1839  0074                     	ds	1
  1840  0075                     ??_getAD:	
  1841  0075                     ??_SYSC_Main:	
  1842                           ; 0 bytes @ 0x5
  1843                           
  1844  0075                     ??_setSYSC_Main:	
  1845                           ; 0 bytes @ 0x5
  1846                           
  1847  0075                     ??_getLights_Allow_Condition:	
  1848                           ; 0 bytes @ 0x5
  1849                           
  1850  0075                     ??_setBuz:	
  1851                           ; 0 bytes @ 0x5
  1852                           
  1853  0075                     ??_Mcu_Initialization:	
  1854                           ; 0 bytes @ 0x5
  1855                           
  1856  0075                     LedPointSelect@led:	
  1857                           ; 0 bytes @ 0x5
  1858                           
  1859  0075                     getAD@adcon0:	
  1860                           ; 1 bytes @ 0x5
  1861                           
  1862  0075                     setLoad_AH_AL_Restore@i:	
  1863                           ; 1 bytes @ 0x5
  1864                           
  1865  0075                     SwPointSelect@sw:	
  1866                           ; 1 bytes @ 0x5
  1867                           
  1868  0075                     getSw_KeyStatus@sw:	
  1869                           ; 1 bytes @ 0x5
  1870                           
  1871  0075                     LightsPointSelect@lights:	
  1872                           ; 1 bytes @ 0x5
  1873                           
  1874  0075                     getAll_Lights_Line@line:	
  1875                           ; 1 bytes @ 0x5
  1876                           
  1877                           
  1878                           ; 1 bytes @ 0x5
  1879  0075                     	ds	1
  1880  0076                     ??_setLED_Initialization:	
  1881  0076                     ??_setLED:	
  1882                           ; 0 bytes @ 0x6
  1883                           
  1884  0076                     ??_Load_Initialization:	
  1885                           ; 0 bytes @ 0x6
  1886                           
  1887  0076                     ??_Lights_Initialization:	
  1888                           ; 0 bytes @ 0x6
  1889                           
  1890  0076                     ??_Temp_Main:	
  1891                           ; 0 bytes @ 0x6
  1892                           
  1893  0076                     ??_Lights_Main:	
  1894                           ; 0 bytes @ 0x6
  1895                           
  1896  0076                     ??_Switch_Main:	
  1897                           ; 0 bytes @ 0x6
  1898                           
  1899  0076                     ??_getLights_Status:	
  1900                           ; 0 bytes @ 0x6
  1901                           
  1902  0076                     ??_setLights_SwOn:	
  1903                           ; 0 bytes @ 0x6
  1904                           
  1905  0076                     ??_setLights_SwOff:	
  1906                           ; 0 bytes @ 0x6
  1907                           
  1908  0076                     ??_setLights_Initialization:	
  1909                           ; 0 bytes @ 0x6
  1910                           
  1911  0076                     ??_setLights_Main:	
  1912                           ; 0 bytes @ 0x6
  1913                           
  1914  0076                     ??_LED_Initialization:	
  1915                           ; 0 bytes @ 0x6
  1916                           
  1917  0076                     ??_LED_Main:	
  1918                           ; 0 bytes @ 0x6
  1919                           
  1920                           
  1921                           	psect	cstackBANK0
  1922  0057                     __pcstackBANK0:	
  1923                           ; 0 bytes @ 0x6
  1924                           
  1925  0057                     ??_setLED_Main:	
  1926  0057                     ?_setLED:	
  1927                           ; 0 bytes @ 0x0
  1928                           
  1929  0057                     ??_getLoad_AD:	
  1930                           ; 0 bytes @ 0x0
  1931                           
  1932  0057                     ??_getTemp_AD:	
  1933                           ; 0 bytes @ 0x0
  1934                           
  1935  0057                     ??_CDS_Main:	
  1936                           ; 0 bytes @ 0x0
  1937                           
  1938  0057                     ?_getCDS_AD:	
  1939                           ; 0 bytes @ 0x0
  1940                           
  1941  0057                     ?_setLights_Trigger:	
  1942                           ; 0 bytes @ 0x0
  1943                           
  1944  0057                     ?___wmul:	
  1945                           ; 0 bytes @ 0x0
  1946                           
  1947  0057                     ?___awdiv:	
  1948                           ; 2 bytes @ 0x0
  1949                           
  1950  0057                     ?___lwdiv:	
  1951                           ; 2 bytes @ 0x0
  1952                           
  1953  0057                     getCDS_AD@channel2:	
  1954                           ; 2 bytes @ 0x0
  1955                           
  1956  0057                     setLED@command:	
  1957                           ; 1 bytes @ 0x0
  1958                           
  1959  0057                     getMain_Lights_Count@count:	
  1960                           ; 1 bytes @ 0x0
  1961                           
  1962  0057                     setLights_Initialization@lights:	
  1963                           ; 1 bytes @ 0x0
  1964                           
  1965  0057                     getLights_Status@lights:	
  1966                           ; 1 bytes @ 0x0
  1967                           
  1968  0057                     setLights_Trigger@command:	
  1969                           ; 1 bytes @ 0x0
  1970                           
  1971  0057                     getLights_Allow_Condition@allow:	
  1972                           ; 1 bytes @ 0x0
  1973                           
  1974  0057                     _getMain_All_Error_Status$2408:	
  1975                           ; 1 bytes @ 0x0
  1976                           
  1977  0057                     ___wmul@multiplier:	
  1978                           ; 2 bytes @ 0x0
  1979                           
  1980  0057                     ___awdiv@divisor:	
  1981                           ; 2 bytes @ 0x0
  1982                           
  1983  0057                     ___lwdiv@divisor:	
  1984                           ; 2 bytes @ 0x0
  1985                           
  1986                           
  1987                           ; 2 bytes @ 0x0
  1988  0057                     	ds	1
  1989  0058                     ??_getCDS_AD:	
  1990  0058                     ??_setLights_Trigger:	
  1991                           ; 0 bytes @ 0x1
  1992                           
  1993  0058                     setLED@led:	
  1994                           ; 0 bytes @ 0x1
  1995                           
  1996  0058                     getMain_Lights_Count@status1:	
  1997                           ; 1 bytes @ 0x1
  1998                           
  1999  0058                     getLights_Status@status:	
  2000                           ; 1 bytes @ 0x1
  2001                           
  2002  0058                     _getLights_Allow_Condition$4789:	
  2003                           ; 1 bytes @ 0x1
  2004                           
  2005                           
  2006                           ; 1 bytes @ 0x1
  2007  0058                     	ds	1
  2008  0059                     ?_setLights:	
  2009  0059                     setLED_Initialization@led:	
  2010                           ; 0 bytes @ 0x2
  2011                           
  2012  0059                     setLED_Main@led:	
  2013                           ; 1 bytes @ 0x2
  2014                           
  2015  0059                     getMain_Lights_Count@status2:	
  2016                           ; 1 bytes @ 0x2
  2017                           
  2018  0059                     getLoad_AD@channel:	
  2019                           ; 1 bytes @ 0x2
  2020                           
  2021  0059                     getTemp_AD@channel:	
  2022                           ; 1 bytes @ 0x2
  2023                           
  2024  0059                     setLights@status:	
  2025                           ; 1 bytes @ 0x2
  2026                           
  2027  0059                     setLights_Trigger@lights:	
  2028                           ; 1 bytes @ 0x2
  2029                           
  2030  0059                     _getMain_All_Error_Status$2409:	
  2031                           ; 1 bytes @ 0x2
  2032                           
  2033  0059                     ___wmul@multiplicand:	
  2034                           ; 2 bytes @ 0x2
  2035                           
  2036  0059                     ___awdiv@dividend:	
  2037                           ; 2 bytes @ 0x2
  2038                           
  2039  0059                     ___lwdiv@dividend:	
  2040                           ; 2 bytes @ 0x2
  2041                           
  2042                           
  2043                           ; 2 bytes @ 0x2
  2044  0059                     	ds	1
  2045  005A                     ??_setLights:	
  2046  005A                     getCDS_AD@i:	
  2047                           ; 0 bytes @ 0x3
  2048                           
  2049  005A                     getLoad_AD@k:	
  2050                           ; 1 bytes @ 0x3
  2051                           
  2052  005A                     getTemp_AD@ADRES:	
  2053                           ; 1 bytes @ 0x3
  2054                           
  2055  005A                     setLights_SwOn@sw:	
  2056                           ; 1 bytes @ 0x3
  2057                           
  2058  005A                     setLights_SwOff@sw:	
  2059                           ; 1 bytes @ 0x3
  2060                           
  2061                           
  2062                           ; 1 bytes @ 0x3
  2063  005A                     	ds	1
  2064  005B                     getCDS_AD@j:	
  2065  005B                     getMain_All_Error_Status@command:	
  2066                           ; 1 bytes @ 0x4
  2067                           
  2068  005B                     getLoad_AD@j:	
  2069                           ; 1 bytes @ 0x4
  2070                           
  2071  005B                     setLights@lights:	
  2072                           ; 1 bytes @ 0x4
  2073                           
  2074  005B                     ___awdiv@counter:	
  2075                           ; 1 bytes @ 0x4
  2076                           
  2077  005B                     ___lwdiv@counter:	
  2078                           ; 1 bytes @ 0x4
  2079                           
  2080                           
  2081                           ; 1 bytes @ 0x4
  2082  005B                     	ds	1
  2083  005C                     getCDS_AD@channel1:	
  2084  005C                     getMain_All_Error_Status@status:	
  2085                           ; 1 bytes @ 0x5
  2086                           
  2087  005C                     getLoad_AD@ADRES:	
  2088                           ; 1 bytes @ 0x5
  2089                           
  2090  005C                     setLights_Main@lights:	
  2091                           ; 1 bytes @ 0x5
  2092                           
  2093  005C                     ___awdiv@sign:	
  2094                           ; 1 bytes @ 0x5
  2095                           
  2096  005C                     ___lwdiv@quotient:	
  2097                           ; 1 bytes @ 0x5
  2098                           
  2099                           
  2100                           ; 2 bytes @ 0x5
  2101  005C                     	ds	1
  2102  005D                     ??_PIR_Main:	
  2103  005D                     ??_setSw_Main:	
  2104                           ; 0 bytes @ 0x6
  2105                           
  2106  005D                     getLoad_AD@i:	
  2107                           ; 0 bytes @ 0x6
  2108                           
  2109  005D                     ___awdiv@quotient:	
  2110                           ; 1 bytes @ 0x6
  2111                           
  2112                           
  2113                           ; 2 bytes @ 0x6
  2114  005D                     	ds	1
  2115  005E                     ??_Load_Main:	
  2116                           
  2117                           ; 0 bytes @ 0x7
  2118  005E                     	ds	1
  2119  005F                     ?_getPIR_AD:	
  2120  005F                     ??_Lights_Control:	
  2121                           ; 0 bytes @ 0x8
  2122                           
  2123  005F                     ?_setBuz:	
  2124                           ; 0 bytes @ 0x8
  2125                           
  2126  005F                     getPIR_AD@channel2:	
  2127                           ; 0 bytes @ 0x8
  2128                           
  2129  005F                     setSw_Main@sw:	
  2130                           ; 1 bytes @ 0x8
  2131                           
  2132  005F                     setBuz@time:	
  2133                           ; 1 bytes @ 0x8
  2134                           
  2135                           
  2136                           ; 2 bytes @ 0x8
  2137  005F                     	ds	1
  2138  0060                     ??_getPIR_AD:	
  2139  0060                     Load_Main@error:	
  2140                           ; 0 bytes @ 0x9
  2141                           
  2142                           
  2143                           ; 1 bytes @ 0x9
  2144  0060                     	ds	1
  2145  0061                     setBuz@count:	
  2146  0061                     PIR_Main@error:	
  2147                           ; 1 bytes @ 0xA
  2148                           
  2149  0061                     Lights_Control@lights:	
  2150                           ; 1 bytes @ 0xA
  2151                           
  2152  0061                     _Load_Main$2696:	
  2153                           ; 1 bytes @ 0xA
  2154                           
  2155                           
  2156                           ; 2 bytes @ 0xA
  2157  0061                     	ds	1
  2158  0062                     ??_my_MainTimer:	
  2159  0062                     ??_Exception_Main:	
  2160                           ; 0 bytes @ 0xB
  2161                           
  2162  0062                     ??_setTemp_Main:	
  2163                           ; 0 bytes @ 0xB
  2164                           
  2165  0062                     _PIR_Main$3214:	
  2166                           ; 0 bytes @ 0xB
  2167                           
  2168                           
  2169                           ; 2 bytes @ 0xB
  2170  0062                     	ds	1
  2171  0063                     Exception_Main@lights:	
  2172  0063                     Load_Main@ErrorCountValue:	
  2173                           ; 1 bytes @ 0xC
  2174                           
  2175  0063                     setTemp_Main@error:	
  2176                           ; 1 bytes @ 0xC
  2177                           
  2178  0063                     getPIR_AD@j:	
  2179                           ; 1 bytes @ 0xC
  2180                           
  2181                           
  2182                           ; 1 bytes @ 0xC
  2183  0063                     	ds	1
  2184  0064                     Exception_Main@count:	
  2185  0064                     Load_Main@Load_RunStatus:	
  2186                           ; 1 bytes @ 0xD
  2187                           
  2188  0064                     setTemp_Main@TempGO:	
  2189                           ; 1 bytes @ 0xD
  2190                           
  2191  0064                     PIR_Main@Enable_Switch:	
  2192                           ; 1 bytes @ 0xD
  2193                           
  2194  0064                     getPIR_AD@channel1:	
  2195                           ; 1 bytes @ 0xD
  2196                           
  2197                           
  2198                           ; 1 bytes @ 0xD
  2199  0064                     	ds	1
  2200  0065                     Exception_Main@error:	
  2201  0065                     Load_Main@LightsCount:	
  2202                           ; 1 bytes @ 0xE
  2203                           
  2204  0065                     setTemp_Main@SafeValue:	
  2205                           ; 1 bytes @ 0xE
  2206                           
  2207  0065                     PIR_Main@TriggerValue:	
  2208                           ; 1 bytes @ 0xE
  2209                           
  2210  0065                     getPIR_AD@VRAD1:	
  2211                           ; 1 bytes @ 0xE
  2212                           
  2213                           
  2214                           ; 1 bytes @ 0xE
  2215  0065                     	ds	1
  2216  0066                     Exception_Main@status:	
  2217  0066                     setTemp_Main@DangerValue:	
  2218                           ; 1 bytes @ 0xF
  2219                           
  2220  0066                     PIR_Main@cds:	
  2221                           ; 1 bytes @ 0xF
  2222                           
  2223  0066                     getPIR_AD@VRAD:	
  2224                           ; 1 bytes @ 0xF
  2225                           
  2226  0066                     Load_Main@i:	
  2227                           ; 1 bytes @ 0xF
  2228                           
  2229                           
  2230                           ; 2 bytes @ 0xF
  2231  0066                     	ds	1
  2232  0067                     setTemp_Main@AD:	
  2233  0067                     PIR_Main@LightsStatus:	
  2234                           ; 1 bytes @ 0x10
  2235                           
  2236  0067                     getPIR_AD@i:	
  2237                           ; 1 bytes @ 0x10
  2238                           
  2239  0067                     Exception_Main@i:	
  2240                           ; 1 bytes @ 0x10
  2241                           
  2242                           
  2243                           ; 2 bytes @ 0x10
  2244  0067                     	ds	2
  2245  0069                     Exception_Main@i_2422:	
  2246                           
  2247                           ; 2 bytes @ 0x12
  2248  0069                     	ds	2
  2249  006B                     ?_main:	
  2250  006B                     main@argc:	
  2251                           ; 2 bytes @ 0x14
  2252                           
  2253                           
  2254                           ; 2 bytes @ 0x14
  2255  006B                     	ds	2
  2256  006D                     main@argv:	
  2257                           
  2258                           ; 2 bytes @ 0x16
  2259  006D                     	ds	2
  2260  006F                     ??_main:	
  2261                           
  2262                           ; 0 bytes @ 0x18
  2263  006F                     	ds	1
  2264                           
  2265                           	psect	maintext
  2266  0F04                     __pmaintext:	
  2267 ;;
  2268 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2269 ;;
  2270 ;; *************** function _main *****************
  2271 ;; Defined at:
  2272 ;;		line 7 in file "../src/Main_B1.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;  argc            2   20[BANK0 ] int 
  2275 ;;  argv            2   22[BANK0 ] PTR PTR unsigned char 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;		None
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  2   20[BANK0 ] int 
  2280 ;; Registers used:
  2281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 17F/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2287 ;;      Params:         0       4       0       0
  2288 ;;      Locals:         0       0       0       0
  2289 ;;      Temps:          0       1       0       0
  2290 ;;      Totals:         0       5       0       0
  2291 ;;Total ram usage:        5 bytes
  2292 ;; Hardware stack levels required when called:    7
  2293 ;; This function calls:
  2294 ;;		_Buzzer_Initialization
  2295 ;;		_Buzzer_Main
  2296 ;;		_CDS_Initialization
  2297 ;;		_CDS_Main
  2298 ;;		_DetectSYSC_Signal
  2299 ;;		_Exception_Main
  2300 ;;		_LED_Initialization
  2301 ;;		_LED_Main
  2302 ;;		_Lights_Initialization
  2303 ;;		_Lights_Main
  2304 ;;		_Load_Initialization
  2305 ;;		_Load_Main
  2306 ;;		_Mcu_Initialization
  2307 ;;		_PIR_Initialization
  2308 ;;		_PIR_Main
  2309 ;;		_SYSC_Initialization
  2310 ;;		_SYSC_Main
  2311 ;;		_Switch_Initialization
  2312 ;;		_Switch_Main
  2313 ;;		_Temp_Initialization
  2314 ;;		_Temp_Main
  2315 ;;		_WDT_Main
  2316 ;;		_getCDS_AD
  2317 ;;		_getLoad_AD
  2318 ;;		_getPIR_AD
  2319 ;;		_getTemp_AD
  2320 ;;		_myMain_Initialization
  2321 ;;		_my_MainTimer
  2322 ;; This function is called by:
  2323 ;;		Startup code after reset
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           
  2328                           ;psect for function _main
  2329  0F04                     _main:	
  2330                           
  2331                           ;Main_B1.c: 8: myMain_Initialization();
  2332                           
  2333                           ;incstack = 0
  2334                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2335  0F04  158A  2111  158A   	fcall	_myMain_Initialization
  2336                           
  2337                           ;Main_B1.c: 9: Mcu_Initialization();
  2338  0F07  158A  21C5  158A   	fcall	_Mcu_Initialization
  2339                           
  2340                           ;Main_B1.c: 10: ;;
  2341                           ;Main_B1.c: 11: LED_Initialization();
  2342  0F0A  118A  27F4  158A   	fcall	_LED_Initialization
  2343                           
  2344                           ;Main_B1.c: 12: Buzzer_Initialization();
  2345  0F0D  158A  2121  158A   	fcall	_Buzzer_Initialization
  2346                           
  2347                           ;Main_B1.c: 14: SYSC_Initialization();
  2348  0F10  158A  2115  158A   	fcall	_SYSC_Initialization
  2349                           
  2350                           ;Main_B1.c: 15: Temp_Initialization();
  2351  0F13  158A  211B  158A   	fcall	_Temp_Initialization
  2352                           
  2353                           ;Main_B1.c: 16: Load_Initialization();
  2354  0F16  158A  2112  158A   	fcall	_Load_Initialization
  2355                           
  2356                           ;Main_B1.c: 17: ;;
  2357                           ;Main_B1.c: 18: ;;
  2358                           ;Main_B1.c: 20: ;;
  2359                           ;Main_B1.c: 21: Lights_Initialization();
  2360  0F19  158A  2156  158A   	fcall	_Lights_Initialization
  2361                           
  2362                           ;Main_B1.c: 22: CDS_Initialization();
  2363  0F1C  158A  2125  158A   	fcall	_CDS_Initialization
  2364                           
  2365                           ;Main_B1.c: 23: PIR_Initialization();
  2366  0F1F  158A  2176  158A   	fcall	_PIR_Initialization
  2367                           
  2368                           ;Main_B1.c: 24: Switch_Initialization();
  2369  0F22  158A  210F  158A   	fcall	_Switch_Initialization
  2370  0F25                     l6156:	
  2371                           ;Main_B1.c: 25: ;;
  2372                           ;Main_B1.c: 26: ;;
  2373                           ;Main_B1.c: 27: ;;
  2374                           ;Main_B1.c: 28: ;;
  2375                           ;Main_B1.c: 30: while (1) {
  2376                           
  2377                           
  2378                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2379  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0F27  1C31               	btfss	_myMain,0
  2382  0F28  2F48               	goto	l6168
  2383                           
  2384                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2385  0F29  158A  218C  158A   	fcall	_DetectSYSC_Signal
  2386                           
  2387                           ;Main_B1.c: 38: getLoad_AD(0x31);
  2388  0F2C  3031               	movlw	49
  2389  0F2D  158A  264B  158A   	fcall	_getLoad_AD
  2390                           
  2391                           ;Main_B1.c: 42: getTemp_AD(0x21);
  2392  0F30  3021               	movlw	33
  2393  0F31  158A  2434  158A   	fcall	_getTemp_AD
  2394                           
  2395                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x11);
  2396  0F34  3011               	movlw	17
  2397  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  2398  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  2399  0F37  00EF               	movwf	??_main
  2400  0F38  086F               	movf	??_main,w
  2401  0F39  00D7               	movwf	getCDS_AD@channel2
  2402  0F3A  3009               	movlw	9
  2403  0F3B  158A  237F  158A   	fcall	_getCDS_AD
  2404                           
  2405                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2406  0F3E  300D               	movlw	13
  2407  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  2408  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  2409  0F41  00EF               	movwf	??_main
  2410  0F42  086F               	movf	??_main,w
  2411  0F43  00DF               	movwf	getPIR_AD@channel2
  2412  0F44  3005               	movlw	5
  2413  0F45  118A  23B7  158A   	fcall	_getPIR_AD
  2414  0F48                     l6168:	
  2415                           
  2416                           ;Main_B1.c: 57: }
  2417                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2418  0F48  1283               	bcf	3,5	;RP0=0, select bank0
  2419  0F49  1303               	bcf	3,6	;RP1=0, select bank0
  2420  0F4A  1C3A               	btfss	_Timer1,0
  2421  0F4B  2F25               	goto	l6156
  2422                           
  2423                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2424  0F4C  103A               	bcf	_Timer1,0
  2425                           
  2426                           ;Main_B1.c: 96: my_MainTimer();
  2427  0F4D  158A  23A1  158A   	fcall	_my_MainTimer
  2428                           
  2429                           ;Main_B1.c: 97: WDT_Main();
  2430  0F50  158A  2205  158A   	fcall	_WDT_Main
  2431                           
  2432                           ;Main_B1.c: 98: ;;
  2433                           ;Main_B1.c: 99: ;;
  2434                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2435  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  2436  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  2437  0F55  1C31               	btfss	_myMain,0
  2438  0F56  2F25               	goto	l6156
  2439                           
  2440                           ;Main_B1.c: 101: ;;
  2441                           ;Main_B1.c: 103: LED_Main();
  2442  0F57  158A  2129  158A   	fcall	_LED_Main
  2443                           
  2444                           ;Main_B1.c: 104: Buzzer_Main();
  2445  0F5A  158A  257C  158A   	fcall	_Buzzer_Main
  2446                           
  2447                           ;Main_B1.c: 106: SYSC_Main();
  2448  0F5D  158A  2118  158A   	fcall	_SYSC_Main
  2449                           
  2450                           ;Main_B1.c: 107: Temp_Main();
  2451  0F60  158A  211E  158A   	fcall	_Temp_Main
  2452                           
  2453                           ;Main_B1.c: 108: Load_Main();
  2454  0F63  118A  202D  158A   	fcall	_Load_Main
  2455                           
  2456                           ;Main_B1.c: 109: ;;
  2457                           ;Main_B1.c: 111: Lights_Main();
  2458  0F66  158A  240E  158A   	fcall	_Lights_Main
  2459                           
  2460                           ;Main_B1.c: 112: ;;
  2461                           ;Main_B1.c: 113: Switch_Main();
  2462  0F69  158A  2181  158A   	fcall	_Switch_Main
  2463                           
  2464                           ;Main_B1.c: 114: CDS_Main();
  2465  0F6C  158A  248F  158A   	fcall	_CDS_Main
  2466                           
  2467                           ;Main_B1.c: 115: PIR_Main();
  2468  0F6F  118A  2217  158A   	fcall	_PIR_Main
  2469                           
  2470                           ;Main_B1.c: 117: ;;
  2471                           ;Main_B1.c: 118: ;;
  2472                           ;Main_B1.c: 119: ;;
  2473                           ;Main_B1.c: 120: ;;
  2474                           ;Main_B1.c: 121: Exception_Main();
  2475  0F72  118A  24E5  158A   	fcall	_Exception_Main
  2476  0F75  2F25               	goto	l6156
  2477  0F76                     __end_of_main:	
  2478                           ;Main_B1.c: 128: }
  2479                           ;Main_B1.c: 129: }
  2480                           ;Main_B1.c: 163: }
  2481                           ;Main_B1.c: 164: return (0);
  2482                           ;	Return value of _main is never used
  2483                           
  2484                           
  2485                           	psect	text1
  2486  0BA1                     __ptext1:	
  2487 ;; *************** function _my_MainTimer *****************
  2488 ;; Defined at:
  2489 ;;		line 185 in file "../src/Main_B1.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;		None
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;		None
  2494 ;; Return value:  Size  Location     Type
  2495 ;;		None               void
  2496 ;; Registers used:
  2497 ;;		wreg, status,2, status,0, pclath, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2503 ;;      Params:         0       0       0       0
  2504 ;;      Locals:         0       0       0       0
  2505 ;;      Temps:          0       1       0       0
  2506 ;;      Totals:         0       1       0       0
  2507 ;;Total ram usage:        1 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    4
  2510 ;; This function calls:
  2511 ;;		_setBuz
  2512 ;; This function is called by:
  2513 ;;		_main
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           
  2518                           ;psect for function _my_MainTimer
  2519  0BA1                     _my_MainTimer:	
  2520                           
  2521                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2522                           
  2523                           ;incstack = 0
  2524                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0+pclath+cstack]
  2525  0BA1  1283               	bcf	3,5	;RP0=0, select bank0
  2526  0BA2  1303               	bcf	3,6	;RP1=0, select bank0
  2527  0BA3  1831               	btfsc	_myMain,0
  2528  0BA4  2BBA               	goto	l5764
  2529                           
  2530                           ;Main_B1.c: 188: myMain.PowerCount++;
  2531  0BA5  3001               	movlw	1
  2532  0BA6  00E2               	movwf	??_my_MainTimer
  2533  0BA7  0862               	movf	??_my_MainTimer,w
  2534  0BA8  07B2               	addwf	_myMain+1,f
  2535                           
  2536                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2537  0BA9  0832               	movf	_myMain+1,w
  2538  0BAA  3A4B               	xorlw	75
  2539  0BAB  1D03               	skipz
  2540  0BAC  0008               	return
  2541                           
  2542                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2543  0BAD  01B2               	clrf	_myMain+1
  2544                           
  2545                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2546  0BAE  1431               	bsf	_myMain,0
  2547                           
  2548                           ;Main_B1.c: 196: setBuz(3, 50);
  2549  0BAF  3032               	movlw	50
  2550  0BB0  00DF               	movwf	setBuz@time
  2551  0BB1  3000               	movlw	0
  2552  0BB2  00E0               	movwf	setBuz@time+1
  2553  0BB3  3003               	movlw	3
  2554  0BB4  158A  2604         	fcall	_setBuz
  2555                           
  2556                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2557  0BB6  1283               	bcf	3,5	;RP0=0, select bank0
  2558  0BB7  1303               	bcf	3,6	;RP1=0, select bank0
  2559  0BB8  1631               	bsf	_myMain,4
  2560                           
  2561                           ;Main_B1.c: 206: }
  2562                           ;Main_B1.c: 207: } else {
  2563  0BB9  0008               	return
  2564  0BBA                     l5764:	
  2565                           
  2566                           ;Main_B1.c: 208: myMain.PowerCount++;
  2567  0BBA  3001               	movlw	1
  2568  0BBB  00E2               	movwf	??_my_MainTimer
  2569  0BBC  0862               	movf	??_my_MainTimer,w
  2570  0BBD  07B2               	addwf	_myMain+1,f
  2571                           
  2572                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2573  0BBE  0832               	movf	_myMain+1,w
  2574  0BBF  3A32               	xorlw	50
  2575  0BC0  1D03               	skipz
  2576  0BC1  0008               	return
  2577                           
  2578                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2579  0BC2  01B2               	clrf	_myMain+1
  2580  0BC3  0008               	return
  2581  0BC4                     __end_of_my_MainTimer:	
  2582                           
  2583                           	psect	text2
  2584  0911                     __ptext2:	
  2585 ;; *************** function _myMain_Initialization *****************
  2586 ;; Defined at:
  2587 ;;		line 170 in file "../src/Main_B1.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;		None
  2590 ;; Auto vars:     Size  Location     Type
  2591 ;;		None
  2592 ;; Return value:  Size  Location     Type
  2593 ;;		None               void
  2594 ;; Registers used:
  2595 ;;		None
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2601 ;;      Params:         0       0       0       0
  2602 ;;      Locals:         0       0       0       0
  2603 ;;      Temps:          0       0       0       0
  2604 ;;      Totals:         0       0       0       0
  2605 ;;Total ram usage:        0 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:    2
  2608 ;; This function calls:
  2609 ;;		Nothing
  2610 ;; This function is called by:
  2611 ;;		_main
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           
  2616                           ;psect for function _myMain_Initialization
  2617  0911                     _myMain_Initialization:	
  2618                           
  2619                           ;incstack = 0
  2620                           ; Regs used in _myMain_Initialization: []
  2621  0911  0008               	return
  2622  0912                     __end_of_myMain_Initialization:	
  2623                           
  2624                           	psect	text3
  2625  0C34                     __ptext3:	
  2626 ;; *************** function _getTemp_AD *****************
  2627 ;; Defined at:
  2628 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;  channel         1    wreg     unsigned char 
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;  channel         1    2[BANK0 ] unsigned char 
  2633 ;;  ADRES           1    3[BANK0 ] unsigned char 
  2634 ;; Return value:  Size  Location     Type
  2635 ;;		None               void
  2636 ;; Registers used:
  2637 ;;		wreg, status,2, status,0, pclath, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2643 ;;      Params:         0       0       0       0
  2644 ;;      Locals:         0       2       0       0
  2645 ;;      Temps:          0       2       0       0
  2646 ;;      Totals:         0       4       0       0
  2647 ;;Total ram usage:        4 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    4
  2650 ;; This function calls:
  2651 ;;		_getAD
  2652 ;; This function is called by:
  2653 ;;		_main
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           
  2658                           ;psect for function _getTemp_AD
  2659  0C34                     _getTemp_AD:	
  2660                           
  2661                           ;incstack = 0
  2662                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2663                           ;getTemp_AD@channel stored from wreg
  2664  0C34  1283               	bcf	3,5	;RP0=0, select bank0
  2665  0C35  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0C36  00D9               	movwf	getTemp_AD@channel
  2667                           
  2668                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2669  0C37  01DA               	clrf	getTemp_AD@ADRES
  2670                           
  2671                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2672  0C38  1D42               	btfss	_Temp,2
  2673  0C39  2C52               	goto	l5670
  2674                           
  2675                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2676  0C3A  3070               	movlw	112
  2677  0C3B  00D7               	movwf	??_getTemp_AD
  2678  0C3C  0857               	movf	??_getTemp_AD,w
  2679  0C3D  00F4               	movwf	getAD@adcon1
  2680  0C3E  0859               	movf	getTemp_AD@channel,w
  2681  0C3F  158A  2363  158A   	fcall	_getAD
  2682  0C42  1283               	bcf	3,5	;RP0=0, select bank0
  2683  0C43  1303               	bcf	3,6	;RP1=0, select bank0
  2684  0C44  00D8               	movwf	??_getTemp_AD+1
  2685  0C45  0858               	movf	??_getTemp_AD+1,w
  2686  0C46  00DA               	movwf	getTemp_AD@ADRES
  2687                           
  2688                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  2689  0C47  085A               	movf	getTemp_AD@ADRES,w
  2690  0C48  1903               	btfsc	3,2
  2691  0C49  2C52               	goto	l5670
  2692                           
  2693                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  2694  0C4A  085A               	movf	getTemp_AD@ADRES,w
  2695  0C4B  0248               	subwf	_Temp+6,w
  2696  0C4C  1803               	skipnc
  2697  0C4D  2C52               	goto	l5670
  2698                           
  2699                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  2700  0C4E  085A               	movf	getTemp_AD@ADRES,w
  2701  0C4F  00D7               	movwf	??_getTemp_AD
  2702  0C50  0857               	movf	??_getTemp_AD,w
  2703  0C51  00C8               	movwf	_Temp+6
  2704  0C52                     l5670:	
  2705                           
  2706                           ;OverTemperature_B1.c: 32: }
  2707                           ;OverTemperature_B1.c: 33: }
  2708                           ;OverTemperature_B1.c: 34: }
  2709                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0x70);
  2710  0C52  3070               	movlw	112
  2711  0C53  00D7               	movwf	??_getTemp_AD
  2712  0C54  0857               	movf	??_getTemp_AD,w
  2713  0C55  00F4               	movwf	getAD@adcon1
  2714  0C56  0859               	movf	getTemp_AD@channel,w
  2715  0C57  158A  2363         	fcall	_getAD
  2716  0C59  1283               	bcf	3,5	;RP0=0, select bank0
  2717  0C5A  1303               	bcf	3,6	;RP1=0, select bank0
  2718  0C5B  00D8               	movwf	??_getTemp_AD+1
  2719  0C5C  0858               	movf	??_getTemp_AD+1,w
  2720  0C5D  00DA               	movwf	getTemp_AD@ADRES
  2721  0C5E  0008               	return
  2722  0C5F                     __end_of_getTemp_AD:	
  2723                           
  2724                           	psect	text4
  2725  03B7                     __ptext4:	
  2726 ;; *************** function _getPIR_AD *****************
  2727 ;; Defined at:
  2728 ;;		line 341 in file "../src/PIR_B1.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  channel1        1    wreg     unsigned char 
  2731 ;;  channel2        1    8[BANK0 ] unsigned char 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  channel1        1   13[BANK0 ] unsigned char 
  2734 ;;  i               1   16[BANK0 ] unsigned char 
  2735 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2736 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2737 ;;  j               1   12[BANK0 ] unsigned char 
  2738 ;; Return value:  Size  Location     Type
  2739 ;;		None               void
  2740 ;; Registers used:
  2741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2747 ;;      Params:         0       1       0       0
  2748 ;;      Locals:         0       5       0       0
  2749 ;;      Temps:          0       3       0       0
  2750 ;;      Totals:         0       9       0       0
  2751 ;;Total ram usage:        9 bytes
  2752 ;; Hardware stack levels used:    1
  2753 ;; Hardware stack levels required when called:    4
  2754 ;; This function calls:
  2755 ;;		___awdiv
  2756 ;;		___lwdiv
  2757 ;;		_getAD
  2758 ;; This function is called by:
  2759 ;;		_main
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           
  2764                           ;psect for function _getPIR_AD
  2765  03B7                     _getPIR_AD:	
  2766                           
  2767                           ;incstack = 0
  2768                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2769                           ;getPIR_AD@channel1 stored from wreg
  2770  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  2771  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  2772  03B9  00E4               	movwf	getPIR_AD@channel1
  2773                           
  2774                           ;PIR_B1.c: 342: char i = 0, j = 0;
  2775  03BA  01E7               	clrf	getPIR_AD@i
  2776  03BB  01E3               	clrf	getPIR_AD@j
  2777                           
  2778                           ;PIR_B1.c: 343: char VRAD = 0, VRAD1 = 0;
  2779  03BC  01E6               	clrf	getPIR_AD@VRAD
  2780  03BD  01E5               	clrf	getPIR_AD@VRAD1
  2781                           
  2782                           ;PIR_B1.c: 344: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2783  03BE  1683               	bsf	3,5	;RP0=1, select bank1
  2784  03BF  1303               	bcf	3,6	;RP1=0, select bank1
  2785  03C0  1CA0               	btfss	__PIR^(0+128),1
  2786  03C1  0008               	return
  2787  03C2  1920               	btfsc	__PIR^(0+128),2
  2788  03C3  0008               	return
  2789                           
  2790                           ;PIR_B1.c: 345: _PIR.GO = 1;
  2791  03C4  1520               	bsf	__PIR^(0+128),2
  2792                           
  2793                           ;PIR_B1.c: 352: VRAD1 = getAD(channel1, 0x70);
  2794  03C5  3070               	movlw	112
  2795  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  2796  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  2797  03C8  00E0               	movwf	??_getPIR_AD
  2798  03C9  0860               	movf	??_getPIR_AD,w
  2799  03CA  00F4               	movwf	getAD@adcon1
  2800  03CB  0864               	movf	getPIR_AD@channel1,w
  2801  03CC  158A  2363  118A   	fcall	_getAD
  2802  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  2803  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  2804  03D1  00E1               	movwf	??_getPIR_AD+1
  2805  03D2  0861               	movf	??_getPIR_AD+1,w
  2806  03D3  00E5               	movwf	getPIR_AD@VRAD1
  2807                           
  2808                           ;PIR_B1.c: 353: VRAD = VRAD1 / 25;
  2809  03D4  3019               	movlw	25
  2810  03D5  00D7               	movwf	___awdiv@divisor
  2811  03D6  3000               	movlw	0
  2812  03D7  00D8               	movwf	___awdiv@divisor+1
  2813  03D8  0865               	movf	getPIR_AD@VRAD1,w
  2814  03D9  00E0               	movwf	??_getPIR_AD
  2815  03DA  01E1               	clrf	??_getPIR_AD+1
  2816  03DB  0860               	movf	??_getPIR_AD,w
  2817  03DC  00D9               	movwf	___awdiv@dividend
  2818  03DD  0861               	movf	??_getPIR_AD+1,w
  2819  03DE  00DA               	movwf	___awdiv@dividend+1
  2820  03DF  158A  26A7  118A   	fcall	___awdiv
  2821  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  2822  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  2823  03E4  0857               	movf	?___awdiv,w
  2824  03E5  00E2               	movwf	??_getPIR_AD+2
  2825  03E6  0862               	movf	??_getPIR_AD+2,w
  2826  03E7  00E6               	movwf	getPIR_AD@VRAD
  2827                           
  2828                           ;PIR_B1.c: 354: _PIR.SignalAD = getAD(channel2, 0x70);
  2829  03E8  3070               	movlw	112
  2830  03E9  00E0               	movwf	??_getPIR_AD
  2831  03EA  0860               	movf	??_getPIR_AD,w
  2832  03EB  00F4               	movwf	getAD@adcon1
  2833  03EC  085F               	movf	getPIR_AD@channel2,w
  2834  03ED  158A  2363  118A   	fcall	_getAD
  2835  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  2836  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  2837  03F2  00E1               	movwf	??_getPIR_AD+1
  2838  03F3  0861               	movf	??_getPIR_AD+1,w
  2839  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  2840  03F5  1303               	bcf	3,6	;RP1=0, select bank1
  2841  03F6  00A1               	movwf	(__PIR^(0+128)+1)
  2842                           
  2843                           ;PIR_B1.c: 368: if (VRAD < 1) {
  2844  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2845  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2846  03F9  08E6               	movf	getPIR_AD@VRAD,f
  2847  03FA  1D03               	skipz
  2848  03FB  2BFE               	goto	l5686
  2849                           
  2850                           ;PIR_B1.c: 369: _PIR.CloseTimeValue = 5;
  2851  03FC  3005               	movlw	5
  2852  03FD  2C04               	goto	L1
  2853  03FE                     l5686:	
  2854                           ;PIR_B1.c: 370: } else if (VRAD < 3) {
  2855                           
  2856  03FE  3003               	movlw	3
  2857  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  2858  0400  0266               	subwf	getPIR_AD@VRAD,w
  2859  0401  1803               	skipnc
  2860  0402  2C09               	goto	l5690
  2861                           
  2862                           ;PIR_B1.c: 371: _PIR.CloseTimeValue = 60;
  2863  0403  303C               	movlw	60
  2864  0404                     L1:	
  2865  0404  1683               	bsf	3,5	;RP0=1, select bank1
  2866  0405  1303               	bcf	3,6	;RP1=0, select bank1
  2867  0406  00C3               	movwf	(__PIR^(0+128)+35)
  2868  0407  3000               	movlw	0
  2869  0408  2C2F               	goto	L5
  2870  0409                     l5690:	
  2871                           ;PIR_B1.c: 372: } else if (VRAD < 5) {
  2872                           
  2873  0409  3005               	movlw	5
  2874  040A  1283               	bcf	3,5	;RP0=0, select bank0
  2875  040B  0266               	subwf	getPIR_AD@VRAD,w
  2876  040C  1803               	skipnc
  2877  040D  2C14               	goto	l5694
  2878                           
  2879                           ;PIR_B1.c: 373: _PIR.CloseTimeValue = 300;
  2880  040E  302C               	movlw	44
  2881  040F  1683               	bsf	3,5	;RP0=1, select bank1
  2882  0410  1303               	bcf	3,6	;RP1=0, select bank1
  2883  0411  00C3               	movwf	(__PIR^(0+128)+35)
  2884  0412  3001               	movlw	1
  2885  0413  2C2F               	goto	L5
  2886  0414                     l5694:	
  2887                           ;PIR_B1.c: 374: } else if (VRAD < 7) {
  2888                           
  2889  0414  3007               	movlw	7
  2890  0415  1283               	bcf	3,5	;RP0=0, select bank0
  2891  0416  0266               	subwf	getPIR_AD@VRAD,w
  2892  0417  1803               	skipnc
  2893  0418  2C1F               	goto	l5698
  2894                           
  2895                           ;PIR_B1.c: 375: _PIR.CloseTimeValue = 600;
  2896  0419  3058               	movlw	88
  2897  041A  1683               	bsf	3,5	;RP0=1, select bank1
  2898  041B  1303               	bcf	3,6	;RP1=0, select bank1
  2899  041C  00C3               	movwf	(__PIR^(0+128)+35)
  2900  041D  3002               	movlw	2
  2901  041E  2C2F               	goto	L5
  2902  041F                     l5698:	
  2903                           ;PIR_B1.c: 376: } else if (VRAD < 9) {
  2904                           
  2905  041F  3009               	movlw	9
  2906  0420  1283               	bcf	3,5	;RP0=0, select bank0
  2907  0421  0266               	subwf	getPIR_AD@VRAD,w
  2908  0422  1803               	skipnc
  2909  0423  2C2A               	goto	l5702
  2910                           
  2911                           ;PIR_B1.c: 377: _PIR.CloseTimeValue = 900;
  2912  0424  3084               	movlw	132
  2913  0425  1683               	bsf	3,5	;RP0=1, select bank1
  2914  0426  1303               	bcf	3,6	;RP1=0, select bank1
  2915  0427  00C3               	movwf	(__PIR^(0+128)+35)
  2916  0428  3003               	movlw	3
  2917  0429  2C2F               	goto	L5
  2918  042A                     l5702:	
  2919                           ;PIR_B1.c: 378: } else {
  2920                           
  2921                           
  2922                           ;PIR_B1.c: 379: _PIR.CloseTimeValue = 1200;
  2923  042A  30B0               	movlw	176
  2924  042B  1683               	bsf	3,5	;RP0=1, select bank1
  2925  042C  1303               	bcf	3,6	;RP1=0, select bank1
  2926  042D  00C3               	movwf	(__PIR^(0+128)+35)
  2927  042E  3004               	movlw	4
  2928  042F                     L5:	
  2929  042F  00C4               	movwf	(__PIR^(0+128)+36)
  2930                           
  2931                           ;PIR_B1.c: 380: }
  2932                           ;PIR_B1.c: 389: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2933  0430  0821               	movf	(__PIR^(0+128)+1),w
  2934  0431  1283               	bcf	3,5	;RP0=0, select bank0
  2935  0432  1303               	bcf	3,6	;RP1=0, select bank0
  2936  0433  00E0               	movwf	??_getPIR_AD
  2937  0434  1683               	bsf	3,5	;RP0=1, select bank1
  2938  0435  1303               	bcf	3,6	;RP1=0, select bank1
  2939  0436  0824               	movf	(__PIR^(0+128)+4),w
  2940  0437  3EA5               	addlw	(__PIR+5)& (0+255)
  2941  0438  0084               	movwf	4
  2942  0439  1283               	bcf	3,5	;RP0=0, select bank0
  2943  043A  1303               	bcf	3,6	;RP1=0, select bank0
  2944  043B  0860               	movf	??_getPIR_AD,w
  2945  043C  1383               	bcf	3,7	;select IRP bank1
  2946  043D  0080               	movwf	0
  2947                           
  2948                           ;PIR_B1.c: 390: for (i = 0; i < 10; i++) {
  2949  043E  01E7               	clrf	getPIR_AD@i
  2950  043F  300A               	movlw	10
  2951  0440  0267               	subwf	getPIR_AD@i,w
  2952  0441  1803               	btfsc	3,0
  2953  0442  2C5F               	goto	l5718
  2954  0443                     l5712:	
  2955                           
  2956                           ;PIR_B1.c: 391: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2957  0443  0867               	movf	getPIR_AD@i,w
  2958  0444  3EA5               	addlw	(__PIR+5)& (0+255)
  2959  0445  0084               	movwf	4
  2960  0446  0800               	movf	0,w
  2961  0447  00E0               	movwf	??_getPIR_AD
  2962  0448  01E1               	clrf	??_getPIR_AD+1
  2963  0449  0860               	movf	??_getPIR_AD,w
  2964  044A  1683               	bsf	3,5	;RP0=1, select bank1
  2965  044B  1303               	bcf	3,6	;RP1=0, select bank1
  2966  044C  07AF               	addwf	(__PIR^(0+128)+15),f
  2967  044D  1803               	skipnc
  2968  044E  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2969  044F  1283               	bcf	3,5	;RP0=0, select bank0
  2970  0450  1303               	bcf	3,6	;RP1=0, select bank0
  2971  0451  0861               	movf	??_getPIR_AD+1,w
  2972  0452  1683               	bsf	3,5	;RP0=1, select bank1
  2973  0453  1303               	bcf	3,6	;RP1=0, select bank1
  2974  0454  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2975  0455  3001               	movlw	1
  2976  0456  1283               	bcf	3,5	;RP0=0, select bank0
  2977  0457  1303               	bcf	3,6	;RP1=0, select bank0
  2978  0458  00E0               	movwf	??_getPIR_AD
  2979  0459  0860               	movf	??_getPIR_AD,w
  2980  045A  07E7               	addwf	getPIR_AD@i,f
  2981  045B  300A               	movlw	10
  2982  045C  0267               	subwf	getPIR_AD@i,w
  2983  045D  1C03               	skipc
  2984  045E  2C43               	goto	l5712
  2985  045F                     l5718:	
  2986                           
  2987                           ;PIR_B1.c: 392: }
  2988                           ;PIR_B1.c: 393: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2989  045F  300A               	movlw	10
  2990  0460  00D7               	movwf	___lwdiv@divisor
  2991  0461  3000               	movlw	0
  2992  0462  00D8               	movwf	___lwdiv@divisor+1
  2993  0463  1683               	bsf	3,5	;RP0=1, select bank1
  2994  0464  1303               	bcf	3,6	;RP1=0, select bank1
  2995  0465  0830               	movf	((__PIR+1)^(0+128)+15),w
  2996  0466  1283               	bcf	3,5	;RP0=0, select bank0
  2997  0467  1303               	bcf	3,6	;RP1=0, select bank0
  2998  0468  01DA               	clrf	___lwdiv@dividend+1
  2999  0469  07DA               	addwf	___lwdiv@dividend+1,f
  3000  046A  1683               	bsf	3,5	;RP0=1, select bank1
  3001  046B  1303               	bcf	3,6	;RP1=0, select bank1
  3002  046C  082F               	movf	(__PIR^(0+128)+15),w
  3003  046D  1283               	bcf	3,5	;RP0=0, select bank0
  3004  046E  1303               	bcf	3,6	;RP1=0, select bank0
  3005  046F  01D9               	clrf	___lwdiv@dividend
  3006  0470  07D9               	addwf	___lwdiv@dividend,f
  3007  0471  158A  253C  118A   	fcall	___lwdiv
  3008  0474  1283               	bcf	3,5	;RP0=0, select bank0
  3009  0475  1303               	bcf	3,6	;RP1=0, select bank0
  3010  0476  0857               	movf	?___lwdiv,w
  3011  0477  00E0               	movwf	??_getPIR_AD
  3012  0478  1683               	bsf	3,5	;RP0=1, select bank1
  3013  0479  1303               	bcf	3,6	;RP1=0, select bank1
  3014  047A  0831               	movf	(__PIR^(0+128)+17),w
  3015  047B  3EB2               	addlw	(__PIR+18)& (0+255)
  3016  047C  0084               	movwf	4
  3017  047D  1283               	bcf	3,5	;RP0=0, select bank0
  3018  047E  1303               	bcf	3,6	;RP1=0, select bank0
  3019  047F  0860               	movf	??_getPIR_AD,w
  3020  0480  1383               	bcf	3,7	;select IRP bank1
  3021  0481  0080               	movwf	0
  3022                           
  3023                           ;PIR_B1.c: 394: _PIR.TenAverageValue = 0;
  3024  0482  1683               	bsf	3,5	;RP0=1, select bank1
  3025  0483  1303               	bcf	3,6	;RP1=0, select bank1
  3026  0484  01AF               	clrf	(__PIR^(0+128)+15)
  3027  0485  01B0               	clrf	((__PIR+1)^(0+128)+15)
  3028                           
  3029                           ;PIR_B1.c: 396: for (i = 0; i <= 9; i++) {
  3030  0486  1283               	bcf	3,5	;RP0=0, select bank0
  3031  0487  1303               	bcf	3,6	;RP1=0, select bank0
  3032  0488  01E7               	clrf	getPIR_AD@i
  3033  0489  300A               	movlw	10
  3034  048A  0267               	subwf	getPIR_AD@i,w
  3035  048B  1803               	btfsc	3,0
  3036  048C  2CA9               	goto	l5734
  3037  048D                     l5728:	
  3038                           
  3039                           ;PIR_B1.c: 397: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  3040  048D  0867               	movf	getPIR_AD@i,w
  3041  048E  3EB2               	addlw	(__PIR+18)& (0+255)
  3042  048F  0084               	movwf	4
  3043  0490  0800               	movf	0,w
  3044  0491  00E0               	movwf	??_getPIR_AD
  3045  0492  01E1               	clrf	??_getPIR_AD+1
  3046  0493  0860               	movf	??_getPIR_AD,w
  3047  0494  1683               	bsf	3,5	;RP0=1, select bank1
  3048  0495  1303               	bcf	3,6	;RP1=0, select bank1
  3049  0496  07BC               	addwf	(__PIR^(0+128)+28),f
  3050  0497  1803               	skipnc
  3051  0498  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  3052  0499  1283               	bcf	3,5	;RP0=0, select bank0
  3053  049A  1303               	bcf	3,6	;RP1=0, select bank0
  3054  049B  0861               	movf	??_getPIR_AD+1,w
  3055  049C  1683               	bsf	3,5	;RP0=1, select bank1
  3056  049D  1303               	bcf	3,6	;RP1=0, select bank1
  3057  049E  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  3058  049F  3001               	movlw	1
  3059  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  3060  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  3061  04A2  00E0               	movwf	??_getPIR_AD
  3062  04A3  0860               	movf	??_getPIR_AD,w
  3063  04A4  07E7               	addwf	getPIR_AD@i,f
  3064  04A5  300A               	movlw	10
  3065  04A6  0267               	subwf	getPIR_AD@i,w
  3066  04A7  1C03               	skipc
  3067  04A8  2C8D               	goto	l5728
  3068  04A9                     l5734:	
  3069                           
  3070                           ;PIR_B1.c: 398: }
  3071                           ;PIR_B1.c: 399: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  3072  04A9  300A               	movlw	10
  3073  04AA  00D7               	movwf	___lwdiv@divisor
  3074  04AB  3000               	movlw	0
  3075  04AC  00D8               	movwf	___lwdiv@divisor+1
  3076  04AD  1683               	bsf	3,5	;RP0=1, select bank1
  3077  04AE  1303               	bcf	3,6	;RP1=0, select bank1
  3078  04AF  083D               	movf	((__PIR+1)^(0+128)+28),w
  3079  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  3080  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  3081  04B2  01DA               	clrf	___lwdiv@dividend+1
  3082  04B3  07DA               	addwf	___lwdiv@dividend+1,f
  3083  04B4  1683               	bsf	3,5	;RP0=1, select bank1
  3084  04B5  1303               	bcf	3,6	;RP1=0, select bank1
  3085  04B6  083C               	movf	(__PIR^(0+128)+28),w
  3086  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  3087  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  3088  04B9  01D9               	clrf	___lwdiv@dividend
  3089  04BA  07D9               	addwf	___lwdiv@dividend,f
  3090  04BB  158A  253C  118A   	fcall	___lwdiv
  3091  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  3092  04BF  1303               	bcf	3,6	;RP1=0, select bank0
  3093  04C0  0857               	movf	?___lwdiv,w
  3094  04C1  00E0               	movwf	??_getPIR_AD
  3095  04C2  0860               	movf	??_getPIR_AD,w
  3096  04C3  1683               	bsf	3,5	;RP0=1, select bank1
  3097  04C4  1303               	bcf	3,6	;RP1=0, select bank1
  3098  04C5  00A3               	movwf	(__PIR^(0+128)+3)
  3099                           
  3100                           ;PIR_B1.c: 400: _PIR.HundredAverageValue = 0;
  3101  04C6  01BC               	clrf	(__PIR^(0+128)+28)
  3102  04C7  01BD               	clrf	((__PIR+1)^(0+128)+28)
  3103                           
  3104                           ;PIR_B1.c: 402: if (_PIR.TenCount < 10) {
  3105  04C8  300A               	movlw	10
  3106  04C9  0224               	subwf	(__PIR^(0+128)+4),w
  3107  04CA  1803               	skipnc
  3108  04CB  2CD5               	goto	l5742
  3109                           
  3110                           ;PIR_B1.c: 403: _PIR.TenCount++;
  3111  04CC  3001               	movlw	1
  3112  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  3113  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  3114  04CF  00E0               	movwf	??_getPIR_AD
  3115  04D0  0860               	movf	??_getPIR_AD,w
  3116  04D1  1683               	bsf	3,5	;RP0=1, select bank1
  3117  04D2  1303               	bcf	3,6	;RP1=0, select bank1
  3118  04D3  07A4               	addwf	(__PIR^(0+128)+4),f
  3119                           
  3120                           ;PIR_B1.c: 404: } else {
  3121  04D4  0008               	return
  3122  04D5                     l5742:	
  3123                           
  3124                           ;PIR_B1.c: 405: _PIR.TenCount = 0;
  3125  04D5  01A4               	clrf	(__PIR^(0+128)+4)
  3126                           
  3127                           ;PIR_B1.c: 406: if (_PIR.HundreCount < 10)
  3128  04D6  300A               	movlw	10
  3129  04D7  0231               	subwf	(__PIR^(0+128)+17),w
  3130  04D8  1803               	skipnc
  3131  04D9  2CE3               	goto	l5748
  3132                           
  3133                           ;PIR_B1.c: 407: _PIR.HundreCount++;
  3134  04DA  3001               	movlw	1
  3135  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  3136  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  3137  04DD  00E0               	movwf	??_getPIR_AD
  3138  04DE  0860               	movf	??_getPIR_AD,w
  3139  04DF  1683               	bsf	3,5	;RP0=1, select bank1
  3140  04E0  1303               	bcf	3,6	;RP1=0, select bank1
  3141  04E1  07B1               	addwf	(__PIR^(0+128)+17),f
  3142  04E2  0008               	return
  3143  04E3                     l5748:	
  3144                           
  3145                           ;PIR_B1.c: 408: else
  3146                           ;PIR_B1.c: 409: _PIR.HundreCount = 0;
  3147  04E3  01B1               	clrf	(__PIR^(0+128)+17)
  3148  04E4  0008               	return
  3149  04E5                     __end_of_getPIR_AD:	
  3150                           
  3151                           	psect	text5
  3152  0E4B                     __ptext5:	
  3153 ;; *************** function _getLoad_AD *****************
  3154 ;; Defined at:
  3155 ;;		line 15 in file "../src/OverLoad_B1.c"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;  channel         1    wreg     unsigned char 
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;  channel         1    2[BANK0 ] unsigned char 
  3160 ;;  i               1    6[BANK0 ] unsigned char 
  3161 ;;  ADRES           1    5[BANK0 ] unsigned char 
  3162 ;;  j               1    4[BANK0 ] unsigned char 
  3163 ;;  k               1    3[BANK0 ] unsigned char 
  3164 ;; Return value:  Size  Location     Type
  3165 ;;		None               void
  3166 ;; Registers used:
  3167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3173 ;;      Params:         0       0       0       0
  3174 ;;      Locals:         0       5       0       0
  3175 ;;      Temps:          0       2       0       0
  3176 ;;      Totals:         0       7       0       0
  3177 ;;Total ram usage:        7 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:    4
  3180 ;; This function calls:
  3181 ;;		_getAD
  3182 ;; This function is called by:
  3183 ;;		_main
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           
  3188                           ;psect for function _getLoad_AD
  3189  0E4B                     _getLoad_AD:	
  3190                           
  3191                           ;incstack = 0
  3192                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3193                           ;getLoad_AD@channel stored from wreg
  3194  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  3195  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  3196  0E4D  00D9               	movwf	getLoad_AD@channel
  3197                           
  3198                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3199  0E4E  01DD               	clrf	getLoad_AD@i
  3200  0E4F  01DB               	clrf	getLoad_AD@j
  3201  0E50  01DA               	clrf	getLoad_AD@k
  3202                           
  3203                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  3204  0E51  01DC               	clrf	getLoad_AD@ADRES
  3205                           
  3206                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3207  0E52  1683               	bsf	3,5	;RP0=1, select bank1
  3208  0E53  1303               	bcf	3,6	;RP1=0, select bank1
  3209  0E54  1E4A               	btfss	_Load^(0+128),4
  3210  0E55  0008               	return
  3211                           
  3212                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0x73);
  3213  0E56  3073               	movlw	115
  3214  0E57  1283               	bcf	3,5	;RP0=0, select bank0
  3215  0E58  1303               	bcf	3,6	;RP1=0, select bank0
  3216  0E59  00D7               	movwf	??_getLoad_AD
  3217  0E5A  0857               	movf	??_getLoad_AD,w
  3218  0E5B  00F4               	movwf	getAD@adcon1
  3219  0E5C  0859               	movf	getLoad_AD@channel,w
  3220  0E5D  158A  2363  158A   	fcall	_getAD
  3221  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  3222  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  3223  0E62  00D8               	movwf	??_getLoad_AD+1
  3224  0E63  0858               	movf	??_getLoad_AD+1,w
  3225  0E64  00DC               	movwf	getLoad_AD@ADRES
  3226                           
  3227                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3228  0E65  01DD               	clrf	getLoad_AD@i
  3229  0E66  3004               	movlw	4
  3230  0E67  025D               	subwf	getLoad_AD@i,w
  3231  0E68  1803               	btfsc	3,0
  3232  0E69  2E86               	goto	l5638
  3233  0E6A                     l5626:	
  3234                           
  3235                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  3236  0E6A  085D               	movf	getLoad_AD@i,w
  3237  0E6B  3ED4               	addlw	(_Load+10)& (0+255)
  3238  0E6C  0084               	movwf	4
  3239  0E6D  085C               	movf	getLoad_AD@ADRES,w
  3240  0E6E  1383               	bcf	3,7	;select IRP bank1
  3241  0E6F  0200               	subwf	0,w
  3242  0E70  1803               	skipnc
  3243  0E71  2E7E               	goto	l5634
  3244  0E72  08DB               	movf	getLoad_AD@j,f
  3245  0E73  1D03               	skipz
  3246  0E74  2E7E               	goto	l5634
  3247                           
  3248                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  3249  0E75  085C               	movf	getLoad_AD@ADRES,w
  3250  0E76  00D7               	movwf	??_getLoad_AD
  3251  0E77  085D               	movf	getLoad_AD@i,w
  3252  0E78  3ED4               	addlw	(_Load+10)& (0+255)
  3253  0E79  0084               	movwf	4
  3254  0E7A  0857               	movf	??_getLoad_AD,w
  3255  0E7B  0080               	movwf	0
  3256                           
  3257                           ;OverLoad_B1.c: 24: j = 1;
  3258  0E7C  01DB               	clrf	getLoad_AD@j
  3259  0E7D  0ADB               	incf	getLoad_AD@j,f
  3260  0E7E                     l5634:	
  3261  0E7E  3001               	movlw	1
  3262  0E7F  00D7               	movwf	??_getLoad_AD
  3263  0E80  0857               	movf	??_getLoad_AD,w
  3264  0E81  07DD               	addwf	getLoad_AD@i,f
  3265  0E82  3004               	movlw	4
  3266  0E83  025D               	subwf	getLoad_AD@i,w
  3267  0E84  1C03               	skipc
  3268  0E85  2E6A               	goto	l5626
  3269  0E86                     l5638:	
  3270                           
  3271                           ;OverLoad_B1.c: 25: }
  3272                           ;OverLoad_B1.c: 26: }
  3273                           ;OverLoad_B1.c: 27: if (j == 0) {
  3274  0E86  08DB               	movf	getLoad_AD@j,f
  3275  0E87  1D03               	skipz
  3276  0E88  0008               	return
  3277                           
  3278                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3279  0E89  01DD               	clrf	getLoad_AD@i
  3280  0E8A                     L6:	
  3281  0E8A  3004               	movlw	4
  3282  0E8B  025D               	subwf	getLoad_AD@i,w
  3283  0E8C  1803               	btfsc	3,0
  3284  0E8D  0008               	return
  3285                           
  3286                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  3287  0E8E  085D               	movf	getLoad_AD@i,w
  3288  0E8F  3ED9               	addlw	(_Load+15)& (0+255)
  3289  0E90  0084               	movwf	4
  3290  0E91  1383               	bcf	3,7	;select IRP bank1
  3291  0E92  0800               	movf	0,w
  3292  0E93  025C               	subwf	getLoad_AD@ADRES,w
  3293  0E94  1803               	skipnc
  3294  0E95  2EA2               	goto	l5654
  3295  0E96  08DA               	movf	getLoad_AD@k,f
  3296  0E97  1D03               	skipz
  3297  0E98  2EA2               	goto	l5654
  3298                           
  3299                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  3300  0E99  085C               	movf	getLoad_AD@ADRES,w
  3301  0E9A  00D7               	movwf	??_getLoad_AD
  3302  0E9B  085D               	movf	getLoad_AD@i,w
  3303  0E9C  3ED9               	addlw	(_Load+15)& (0+255)
  3304  0E9D  0084               	movwf	4
  3305  0E9E  0857               	movf	??_getLoad_AD,w
  3306  0E9F  0080               	movwf	0
  3307                           
  3308                           ;OverLoad_B1.c: 31: k = 1;
  3309  0EA0  01DA               	clrf	getLoad_AD@k
  3310  0EA1  0ADA               	incf	getLoad_AD@k,f
  3311  0EA2                     l5654:	
  3312  0EA2  3001               	movlw	1
  3313  0EA3  00D7               	movwf	??_getLoad_AD
  3314  0EA4  0857               	movf	??_getLoad_AD,w
  3315  0EA5  07DD               	addwf	getLoad_AD@i,f
  3316  0EA6  2E8A               	goto	L6
  3317  0EA7                     __end_of_getLoad_AD:	
  3318                           
  3319                           	psect	text6
  3320  0B7F                     __ptext6:	
  3321 ;; *************** function _getCDS_AD *****************
  3322 ;; Defined at:
  3323 ;;		line 48 in file "../src/CDS_B1.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;  channel1        1    wreg     unsigned char 
  3326 ;;  channel2        1    0[BANK0 ] unsigned char 
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  channel1        1    5[BANK0 ] unsigned char 
  3329 ;;  j               1    4[BANK0 ] unsigned char 
  3330 ;;  i               1    3[BANK0 ] unsigned char 
  3331 ;; Return value:  Size  Location     Type
  3332 ;;		None               void
  3333 ;; Registers used:
  3334 ;;		wreg, status,2, status,0, pclath, cstack
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3340 ;;      Params:         0       1       0       0
  3341 ;;      Locals:         0       3       0       0
  3342 ;;      Temps:          0       2       0       0
  3343 ;;      Totals:         0       6       0       0
  3344 ;;Total ram usage:        6 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    4
  3347 ;; This function calls:
  3348 ;;		_getAD
  3349 ;; This function is called by:
  3350 ;;		_main
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           
  3355                           ;psect for function _getCDS_AD
  3356  0B7F                     _getCDS_AD:	
  3357                           
  3358                           ;incstack = 0
  3359                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3360                           ;getCDS_AD@channel1 stored from wreg
  3361  0B7F  1283               	bcf	3,5	;RP0=0, select bank0
  3362  0B80  1303               	bcf	3,6	;RP1=0, select bank0
  3363  0B81  00DC               	movwf	getCDS_AD@channel1
  3364                           
  3365                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3366  0B82  01DA               	clrf	getCDS_AD@i
  3367  0B83  01DB               	clrf	getCDS_AD@j
  3368                           
  3369                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3370  0B84  1DB6               	btfss	__CDS,3
  3371  0B85  0008               	return
  3372                           
  3373                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3374  0B86  14B6               	bsf	__CDS,1
  3375                           
  3376                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3377  0B87  3070               	movlw	112
  3378  0B88  00D8               	movwf	??_getCDS_AD
  3379  0B89  0858               	movf	??_getCDS_AD,w
  3380  0B8A  00F4               	movwf	getAD@adcon1
  3381  0B8B  085C               	movf	getCDS_AD@channel1,w
  3382  0B8C  158A  2363  158A   	fcall	_getAD
  3383  0B8F  1283               	bcf	3,5	;RP0=0, select bank0
  3384  0B90  1303               	bcf	3,6	;RP1=0, select bank0
  3385  0B91  00D9               	movwf	??_getCDS_AD+1
  3386  0B92  0859               	movf	??_getCDS_AD+1,w
  3387  0B93  00B8               	movwf	__CDS+2
  3388                           
  3389                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3390  0B94  3070               	movlw	112
  3391  0B95  00D8               	movwf	??_getCDS_AD
  3392  0B96  0858               	movf	??_getCDS_AD,w
  3393  0B97  00F4               	movwf	getAD@adcon1
  3394  0B98  0857               	movf	getCDS_AD@channel2,w
  3395  0B99  158A  2363         	fcall	_getAD
  3396  0B9B  1283               	bcf	3,5	;RP0=0, select bank0
  3397  0B9C  1303               	bcf	3,6	;RP1=0, select bank0
  3398  0B9D  00D9               	movwf	??_getCDS_AD+1
  3399  0B9E  0859               	movf	??_getCDS_AD+1,w
  3400  0B9F  00B9               	movwf	__CDS+3
  3401  0BA0  0008               	return
  3402  0BA1                     __end_of_getCDS_AD:	
  3403                           
  3404                           	psect	text7
  3405  0B63                     __ptext7:	
  3406 ;; *************** function _getAD *****************
  3407 ;; Defined at:
  3408 ;;		line 432 in file "../src/MCU_B1.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;  adcon0          1    wreg     unsigned char 
  3411 ;;  adcon1          1    4[COMMON] unsigned char 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  adcon0          1    5[COMMON] unsigned char 
  3414 ;; Return value:  Size  Location     Type
  3415 ;;                  1    wreg      unsigned char 
  3416 ;; Registers used:
  3417 ;;		wreg, status,2, status,0, pclath, cstack
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3423 ;;      Params:         1       0       0       0
  3424 ;;      Locals:         1       0       0       0
  3425 ;;      Temps:          0       0       0       0
  3426 ;;      Totals:         2       0       0       0
  3427 ;;Total ram usage:        2 bytes
  3428 ;; Hardware stack levels used:    1
  3429 ;; Hardware stack levels required when called:    3
  3430 ;; This function calls:
  3431 ;;		_Timeout_Counter
  3432 ;;		_set_TimeoutCleared
  3433 ;; This function is called by:
  3434 ;;		_getCDS_AD
  3435 ;;		_getLoad_AD
  3436 ;;		_getTemp_AD
  3437 ;;		_getPIR_AD
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           
  3442                           ;psect for function _getAD
  3443  0B63                     _getAD:	
  3444                           
  3445                           ;incstack = 0
  3446                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3447                           ;getAD@adcon0 stored from wreg
  3448  0B63  00F5               	movwf	getAD@adcon0
  3449                           
  3450                           ;MCU_B1.c: 433: ADCON0 = adcon0;
  3451  0B64  0875               	movf	getAD@adcon0,w
  3452  0B65  1283               	bcf	3,5	;RP0=0, select bank0
  3453  0B66  1303               	bcf	3,6	;RP1=0, select bank0
  3454  0B67  009F               	movwf	31	;volatile
  3455                           
  3456                           ;MCU_B1.c: 434: ADCON1 = adcon1;
  3457  0B68  0874               	movf	getAD@adcon1,w
  3458  0B69  1683               	bsf	3,5	;RP0=1, select bank1
  3459  0B6A  1303               	bcf	3,6	;RP1=0, select bank1
  3460  0B6B  009F               	movwf	31	;volatile
  3461                           
  3462                           ;MCU_B1.c: 435: GO_nDONE = 1;
  3463  0B6C  1283               	bcf	3,5	;RP0=0, select bank0
  3464  0B6D  1303               	bcf	3,6	;RP1=0, select bank0
  3465  0B6E  149F               	bsf	31,1	;volatile
  3466                           
  3467                           ;MCU_B1.c: 436: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3468  0B6F  2B73               	goto	l5306
  3469  0B70                     l5304:	
  3470                           
  3471                           ;MCU_B1.c: 437: Timeout_Counter();
  3472  0B70  158A  224E  158A   	fcall	_Timeout_Counter
  3473  0B73                     l5306:	
  3474  0B73  1283               	bcf	3,5	;RP0=0, select bank0
  3475  0B74  1303               	bcf	3,6	;RP1=0, select bank0
  3476  0B75  1C9F               	btfss	31,1	;volatile
  3477  0B76  2B79               	goto	l5310
  3478  0B77  1D33               	btfss	_myMain+2,2
  3479  0B78  2B70               	goto	l5304
  3480  0B79                     l5310:	
  3481                           
  3482                           ;MCU_B1.c: 438: };
  3483                           ;MCU_B1.c: 439: set_TimeoutCleared();
  3484  0B79  158A  2142         	fcall	_set_TimeoutCleared
  3485                           
  3486                           ;MCU_B1.c: 440: return ADRES;
  3487  0B7B  1283               	bcf	3,5	;RP0=0, select bank0
  3488  0B7C  1303               	bcf	3,6	;RP1=0, select bank0
  3489  0B7D  081E               	movf	30,w	;volatile
  3490  0B7E  0008               	return
  3491  0B7F                     __end_of_getAD:	
  3492                           
  3493                           	psect	text8
  3494  0A05                     __ptext8:	
  3495 ;; *************** function _WDT_Main *****************
  3496 ;; Defined at:
  3497 ;;		line 1103 in file "../src/MCU_B1.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;		None
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;		None
  3502 ;; Return value:  Size  Location     Type
  3503 ;;		None               void
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0, pclath, cstack
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3511 ;;      Params:         0       0       0       0
  3512 ;;      Locals:         0       0       0       0
  3513 ;;      Temps:          1       0       0       0
  3514 ;;      Totals:         1       0       0       0
  3515 ;;Total ram usage:        1 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    3
  3518 ;; This function calls:
  3519 ;;		_WDT_Clearing
  3520 ;; This function is called by:
  3521 ;;		_main
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function _WDT_Main
  3527  0A05                     _WDT_Main:	
  3528                           
  3529                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  3530                           
  3531                           ;incstack = 0
  3532                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3533  0A05  1283               	bcf	3,5	;RP0=0, select bank0
  3534  0A06  1303               	bcf	3,6	;RP1=0, select bank0
  3535  0A07  1C3D               	btfss	_WDT,0
  3536  0A08  0008               	return
  3537                           
  3538                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  3539  0A09  3001               	movlw	1
  3540  0A0A  02BE               	subwf	_WDT+1,f
  3541  0A0B  083E               	movf	_WDT+1,w
  3542  0A0C  3AFF               	xorlw	255
  3543  0A0D  1903               	skipnz
  3544  0A0E  0008               	return
  3545                           
  3546                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  3547  0A0F  3064               	movlw	100
  3548  0A10  00F4               	movwf	??_WDT_Main
  3549  0A11  0874               	movf	??_WDT_Main,w
  3550  0A12  00BE               	movwf	_WDT+1
  3551                           
  3552                           ;MCU_B1.c: 1107: WDT_Clearing();
  3553  0A13  118A  2002         	fcall	_WDT_Clearing
  3554  0A15  0008               	return
  3555  0A16                     __end_of_WDT_Main:	
  3556                           
  3557                           	psect	text9
  3558  0002                     __ptext9:	
  3559 ;; *************** function _WDT_Clearing *****************
  3560 ;; Defined at:
  3561 ;;		line 1113 in file "../src/MCU_B1.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;		None
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;		None
  3566 ;; Return value:  Size  Location     Type
  3567 ;;		None               void
  3568 ;; Registers used:
  3569 ;;		None
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3575 ;;      Params:         0       0       0       0
  3576 ;;      Locals:         0       0       0       0
  3577 ;;      Temps:          0       0       0       0
  3578 ;;      Totals:         0       0       0       0
  3579 ;;Total ram usage:        0 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    2
  3582 ;; This function calls:
  3583 ;;		Nothing
  3584 ;; This function is called by:
  3585 ;;		_WDT_Main
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           
  3590                           ;psect for function _WDT_Clearing
  3591  0002                     _WDT_Clearing:	
  3592                           
  3593                           ;incstack = 0
  3594                           ; Regs used in _WDT_Clearing: []
  3595  0002  0064               	clrwdt	;# 
  3596  0003  0008               	return
  3597  0004                     __end_of_WDT_Clearing:	
  3598                           
  3599                           	psect	text10
  3600  091E                     __ptext10:	
  3601 ;; *************** function _Temp_Main *****************
  3602 ;; Defined at:
  3603 ;;		line 57 in file "../src/OverTemperature_B1.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;		None
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;		None
  3608 ;; Return value:  Size  Location     Type
  3609 ;;		None               void
  3610 ;; Registers used:
  3611 ;;		wreg, status,2, status,0, pclath, cstack
  3612 ;; Tracked objects:
  3613 ;;		On entry : 0/0
  3614 ;;		On exit  : 0/0
  3615 ;;		Unchanged: 0/0
  3616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3617 ;;      Params:         0       0       0       0
  3618 ;;      Locals:         0       0       0       0
  3619 ;;      Temps:          0       0       0       0
  3620 ;;      Totals:         0       0       0       0
  3621 ;;Total ram usage:        0 bytes
  3622 ;; Hardware stack levels used:    1
  3623 ;; Hardware stack levels required when called:    5
  3624 ;; This function calls:
  3625 ;;		_setTemp_Main
  3626 ;; This function is called by:
  3627 ;;		_main
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           
  3632                           ;psect for function _Temp_Main
  3633  091E                     _Temp_Main:	
  3634                           
  3635                           ;OverTemperature_B1.c: 59: setTemp_Main();
  3636                           
  3637                           ;incstack = 0
  3638                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3639  091E  158A  2776         	fcall	_setTemp_Main
  3640  0920  0008               	return
  3641  0921                     __end_of_Temp_Main:	
  3642                           
  3643                           	psect	text11
  3644  0F76                     __ptext11:	
  3645 ;; *************** function _setTemp_Main *****************
  3646 ;; Defined at:
  3647 ;;		line 64 in file "../src/OverTemperature_B1.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;		None
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  AD              1   16[BANK0 ] unsigned char 
  3652 ;;  DangerValue     1   15[BANK0 ] unsigned char 
  3653 ;;  SafeValue       1   14[BANK0 ] unsigned char 
  3654 ;;  TempGO          1   13[BANK0 ] unsigned char 
  3655 ;;  error           1   12[BANK0 ] unsigned char 
  3656 ;; Return value:  Size  Location     Type
  3657 ;;		None               void
  3658 ;; Registers used:
  3659 ;;		wreg, status,2, status,0, pclath, cstack
  3660 ;; Tracked objects:
  3661 ;;		On entry : 0/0
  3662 ;;		On exit  : 0/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3665 ;;      Params:         0       0       0       0
  3666 ;;      Locals:         0       5       0       0
  3667 ;;      Temps:          0       1       0       0
  3668 ;;      Totals:         0       6       0       0
  3669 ;;Total ram usage:        6 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; Hardware stack levels required when called:    4
  3672 ;; This function calls:
  3673 ;;		_getMain_All_Error_Status
  3674 ;;		_getMain_All_LightsStatus
  3675 ;;		_setBuz
  3676 ;; This function is called by:
  3677 ;;		_Temp_Main
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           
  3682                           ;psect for function _setTemp_Main
  3683  0F76                     _setTemp_Main:	
  3684                           
  3685                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  3686                           
  3687                           ;incstack = 0
  3688                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3689  0F76  3000               	movlw	0
  3690  0F77  158A  24FE  158A   	fcall	_getMain_All_Error_Status
  3691  0F7A  1283               	bcf	3,5	;RP0=0, select bank0
  3692  0F7B  1303               	bcf	3,6	;RP1=0, select bank0
  3693  0F7C  00E2               	movwf	??_setTemp_Main
  3694  0F7D  0862               	movf	??_setTemp_Main,w
  3695  0F7E  00E3               	movwf	setTemp_Main@error
  3696                           
  3697                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  3698  0F7F  01E5               	clrf	setTemp_Main@SafeValue
  3699  0F80  01E6               	clrf	setTemp_Main@DangerValue
  3700                           
  3701                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  3702  0F81  158A  21E4  158A   	fcall	_getMain_All_LightsStatus
  3703  0F84  1283               	bcf	3,5	;RP0=0, select bank0
  3704  0F85  1303               	bcf	3,6	;RP1=0, select bank0
  3705  0F86  00E2               	movwf	??_setTemp_Main
  3706  0F87  0862               	movf	??_setTemp_Main,w
  3707  0F88  00E4               	movwf	setTemp_Main@TempGO
  3708                           
  3709                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  3710  0F89  1C42               	btfss	_Temp,0
  3711  0F8A  2FFC               	goto	l952
  3712                           
  3713                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  3714  0F8B  1942               	btfsc	_Temp,2
  3715  0F8C  2FA9               	goto	l5372
  3716                           
  3717                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  3718  0F8D  0864               	movf	setTemp_Main@TempGO,w
  3719  0F8E  3A01               	xorlw	1
  3720  0F8F  1D03               	skipz
  3721  0F90  2F93               	goto	l958
  3722  0F91  1CC2               	btfss	_Temp,1
  3723  0F92  2F95               	goto	l5364
  3724  0F93                     l958:	
  3725  0F93  1CC2               	btfss	_Temp,1
  3726  0F94  2FA6               	goto	l5370
  3727  0F95                     l5364:	
  3728                           
  3729                           ;OverTemperature_B1.c: 79: Temp.Time++;
  3730  0F95  3001               	movlw	1
  3731  0F96  07C3               	addwf	_Temp+1,f
  3732  0F97  1803               	skipnc
  3733  0F98  0AC4               	incf	_Temp+2,f
  3734  0F99  3000               	movlw	0
  3735  0F9A  07C4               	addwf	_Temp+2,f
  3736                           
  3737                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  3738  0F9B  3000               	movlw	0
  3739  0F9C  0244               	subwf	_Temp+2,w
  3740  0F9D  30FA               	movlw	250
  3741  0F9E  1903               	skipnz
  3742  0F9F  0243               	subwf	_Temp+1,w
  3743  0FA0  1C03               	skipc
  3744  0FA1  0008               	return
  3745                           
  3746                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  3747  0FA2  01C3               	clrf	_Temp+1
  3748  0FA3  01C4               	clrf	_Temp+2
  3749                           
  3750                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  3751  0FA4  1542               	bsf	_Temp,2
  3752                           
  3753                           ;OverTemperature_B1.c: 83: }
  3754                           ;OverTemperature_B1.c: 84: } else {
  3755  0FA5  0008               	return
  3756  0FA6                     l5370:	
  3757                           
  3758                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  3759  0FA6  01C3               	clrf	_Temp+1
  3760  0FA7  01C4               	clrf	_Temp+2
  3761                           
  3762                           ;OverTemperature_B1.c: 86: }
  3763                           ;OverTemperature_B1.c: 87: } else {
  3764  0FA8  0008               	return
  3765  0FA9                     l5372:	
  3766                           
  3767                           ;OverTemperature_B1.c: 88: Temp.Time++;
  3768  0FA9  3001               	movlw	1
  3769  0FAA  07C3               	addwf	_Temp+1,f
  3770  0FAB  1803               	skipnc
  3771  0FAC  0AC4               	incf	_Temp+2,f
  3772  0FAD  3000               	movlw	0
  3773  0FAE  07C4               	addwf	_Temp+2,f
  3774                           
  3775                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  3776  0FAF  3000               	movlw	0
  3777  0FB0  0244               	subwf	_Temp+2,w
  3778  0FB1  3005               	movlw	5
  3779  0FB2  1903               	skipnz
  3780  0FB3  0243               	subwf	_Temp+1,w
  3781  0FB4  1C03               	skipc
  3782  0FB5  0008               	return
  3783                           
  3784                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  3785  0FB6  01C3               	clrf	_Temp+1
  3786  0FB7  01C4               	clrf	_Temp+2
  3787                           
  3788                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  3789  0FB8  0848               	movf	_Temp+6,w
  3790  0FB9  1903               	btfsc	3,2
  3791  0FBA  2FF6               	goto	l963
  3792                           
  3793                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  3794  0FBB  1142               	bcf	_Temp,2
  3795                           
  3796                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  3797  0FBC  0848               	movf	_Temp+6,w
  3798  0FBD  00E2               	movwf	??_setTemp_Main
  3799  0FBE  0862               	movf	??_setTemp_Main,w
  3800  0FBF  00E7               	movwf	setTemp_Main@AD
  3801                           
  3802                           ;OverTemperature_B1.c: 106: SafeValue = 0x85;
  3803  0FC0  3085               	movlw	133
  3804  0FC1  00E2               	movwf	??_setTemp_Main
  3805  0FC2  0862               	movf	??_setTemp_Main,w
  3806  0FC3  00E5               	movwf	setTemp_Main@SafeValue
  3807                           
  3808                           ;OverTemperature_B1.c: 107: DangerValue = 0x75;
  3809  0FC4  3075               	movlw	117
  3810  0FC5  00E2               	movwf	??_setTemp_Main
  3811  0FC6  0862               	movf	??_setTemp_Main,w
  3812  0FC7  00E6               	movwf	setTemp_Main@DangerValue
  3813                           
  3814                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  3815  0FC8  1CC2               	btfss	_Temp,1
  3816  0FC9  2FE6               	goto	l5398
  3817                           
  3818                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  3819  0FCA  0865               	movf	setTemp_Main@SafeValue,w
  3820  0FCB  0267               	subwf	setTemp_Main@AD,w
  3821  0FCC  1C03               	skipc
  3822  0FCD  2FE3               	goto	l5396
  3823                           
  3824                           ;OverTemperature_B1.c: 121: Temp.Count++;
  3825  0FCE  3001               	movlw	1
  3826  0FCF  00E2               	movwf	??_setTemp_Main
  3827  0FD0  0862               	movf	??_setTemp_Main,w
  3828  0FD1  07C5               	addwf	_Temp+3,f
  3829                           
  3830                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  3831  0FD2  3003               	movlw	3
  3832  0FD3  0245               	subwf	_Temp+3,w
  3833  0FD4  1C03               	skipc
  3834  0FD5  2FF6               	goto	l963
  3835                           
  3836                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  3837  0FD6  01C5               	clrf	_Temp+3
  3838                           
  3839                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  3840  0FD7  10C2               	bcf	_Temp,1
  3841                           
  3842                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  3843  0FD8  3064               	movlw	100
  3844  0FD9  00DF               	movwf	setBuz@time
  3845  0FDA  3000               	movlw	0
  3846  0FDB  00E0               	movwf	setBuz@time+1
  3847  0FDC  3002               	movlw	2
  3848  0FDD  158A  2604  158A   	fcall	_setBuz
  3849                           
  3850                           ;OverTemperature_B1.c: 126: }
  3851                           ;OverTemperature_B1.c: 127: } else {
  3852  0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  3853  0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  3854  0FE2  2FF6               	goto	l963
  3855  0FE3                     l5396:	
  3856                           
  3857                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  3858  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  3859  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  3860  0FE5  2FF5               	goto	l5408
  3861  0FE6                     l5398:	
  3862                           ;OverTemperature_B1.c: 129: }
  3863                           ;OverTemperature_B1.c: 130: } else {
  3864                           
  3865                           
  3866                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  3867  0FE6  0867               	movf	setTemp_Main@AD,w
  3868  0FE7  0266               	subwf	setTemp_Main@DangerValue,w
  3869  0FE8  1C03               	skipc
  3870  0FE9  2FF5               	goto	l5408
  3871                           
  3872                           ;OverTemperature_B1.c: 132: Temp.Count++;
  3873  0FEA  3001               	movlw	1
  3874  0FEB  00E2               	movwf	??_setTemp_Main
  3875  0FEC  0862               	movf	??_setTemp_Main,w
  3876  0FED  07C5               	addwf	_Temp+3,f
  3877                           
  3878                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  3879  0FEE  3003               	movlw	3
  3880  0FEF  0245               	subwf	_Temp+3,w
  3881  0FF0  1C03               	skipc
  3882  0FF1  2FF6               	goto	l963
  3883                           
  3884                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  3885  0FF2  01C5               	clrf	_Temp+3
  3886                           
  3887                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  3888  0FF3  14C2               	bsf	_Temp,1
  3889                           
  3890                           ;OverTemperature_B1.c: 136: }
  3891                           ;OverTemperature_B1.c: 137: } else {
  3892  0FF4  2FF6               	goto	l963
  3893  0FF5                     l5408:	
  3894                           
  3895                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  3896  0FF5  01C5               	clrf	_Temp+3
  3897  0FF6                     l963:	
  3898                           ;OverTemperature_B1.c: 139: }
  3899                           ;OverTemperature_B1.c: 140: }
  3900                           ;OverTemperature_B1.c: 141: ;;
  3901                           ;OverTemperature_B1.c: 142: ;;
  3902                           
  3903                           
  3904                           ;OverTemperature_B1.c: 158: }
  3905                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  3906  0FF6  1283               	bcf	3,5	;RP0=0, select bank0
  3907  0FF7  1303               	bcf	3,6	;RP1=0, select bank0
  3908  0FF8  01C6               	clrf	_Temp+4
  3909                           
  3910                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  3911  0FF9  01C7               	clrf	_Temp+5
  3912                           
  3913                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  3914  0FFA  01C8               	clrf	_Temp+6
  3915                           
  3916                           ;OverTemperature_B1.c: 162: }
  3917                           ;OverTemperature_B1.c: 163: }
  3918                           ;OverTemperature_B1.c: 166: } else {
  3919  0FFB  0008               	return
  3920  0FFC                     l952:	
  3921                           
  3922                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  3923  0FFC  1C31               	btfss	_myMain,0
  3924  0FFD  0008               	return
  3925                           
  3926                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  3927  0FFE  1442               	bsf	_Temp,0
  3928  0FFF  0008               	return
  3929  1000                     __end_of_setTemp_Main:	
  3930                           
  3931                           	psect	text12
  3932  091B                     __ptext12:	
  3933 ;; *************** function _Temp_Initialization *****************
  3934 ;; Defined at:
  3935 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;		None
  3940 ;; Return value:  Size  Location     Type
  3941 ;;		None               void
  3942 ;; Registers used:
  3943 ;;		status,2, status,0, pclath, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3949 ;;      Params:         0       0       0       0
  3950 ;;      Locals:         0       0       0       0
  3951 ;;      Temps:          0       0       0       0
  3952 ;;      Totals:         0       0       0       0
  3953 ;;Total ram usage:        0 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    3
  3956 ;; This function calls:
  3957 ;;		_setTemp_Initialization
  3958 ;; This function is called by:
  3959 ;;		_main
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           
  3964                           ;psect for function _Temp_Initialization
  3965  091B                     _Temp_Initialization:	
  3966                           
  3967                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3968                           
  3969                           ;incstack = 0
  3970                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3971  091B  158A  2110         	fcall	_setTemp_Initialization
  3972  091D  0008               	return
  3973  091E                     __end_of_Temp_Initialization:	
  3974                           
  3975                           	psect	text13
  3976  0910                     __ptext13:	
  3977 ;; *************** function _setTemp_Initialization *****************
  3978 ;; Defined at:
  3979 ;;		line 52 in file "../src/OverTemperature_B1.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;		None
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;		None               void
  3986 ;; Registers used:
  3987 ;;		None
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3993 ;;      Params:         0       0       0       0
  3994 ;;      Locals:         0       0       0       0
  3995 ;;      Temps:          0       0       0       0
  3996 ;;      Totals:         0       0       0       0
  3997 ;;Total ram usage:        0 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    2
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		_Temp_Initialization
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           
  4008                           ;psect for function _setTemp_Initialization
  4009  0910                     _setTemp_Initialization:	
  4010                           
  4011                           ;incstack = 0
  4012                           ; Regs used in _setTemp_Initialization: []
  4013  0910  0008               	return
  4014  0911                     __end_of_setTemp_Initialization:	
  4015                           
  4016                           	psect	text14
  4017  0981                     __ptext14:	
  4018 ;; *************** function _Switch_Main *****************
  4019 ;; Defined at:
  4020 ;;		line 76 in file "../src/Switch_B1.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;		None
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;		None
  4025 ;; Return value:  Size  Location     Type
  4026 ;;		None               void
  4027 ;; Registers used:
  4028 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4034 ;;      Params:         0       0       0       0
  4035 ;;      Locals:         0       0       0       0
  4036 ;;      Temps:          0       0       0       0
  4037 ;;      Totals:         0       0       0       0
  4038 ;;Total ram usage:        0 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    6
  4041 ;; This function calls:
  4042 ;;		_TouchPower
  4043 ;;		_setSw_Main
  4044 ;; This function is called by:
  4045 ;;		_main
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           
  4050                           ;psect for function _Switch_Main
  4051  0981                     _Switch_Main:	
  4052                           
  4053                           ;Switch_B1.c: 79: setSw_Main(1);
  4054                           
  4055                           ;incstack = 0
  4056                           ; Regs used in _Switch_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4057  0981  3001               	movlw	1
  4058  0982  118A  25BD  158A   	fcall	_setSw_Main
  4059                           
  4060                           ;Switch_B1.c: 83: setSw_Main(2);
  4061  0985  3002               	movlw	2
  4062  0986  118A  25BD  158A   	fcall	_setSw_Main
  4063                           
  4064                           ;Switch_B1.c: 91: TouchPower();
  4065  0989  158A  2262         	fcall	_TouchPower
  4066  098B  0008               	return
  4067  098C                     __end_of_Switch_Main:	
  4068                           
  4069                           	psect	text15
  4070  05BD                     __ptext15:	
  4071 ;; *************** function _setSw_Main *****************
  4072 ;; Defined at:
  4073 ;;		line 117 in file "../src/Switch_B1.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;  sw              1    wreg     unsigned char 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;  sw              1    8[BANK0 ] unsigned char 
  4078 ;; Return value:  Size  Location     Type
  4079 ;;		None               void
  4080 ;; Registers used:
  4081 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4087 ;;      Params:         0       0       0       0
  4088 ;;      Locals:         0       1       0       0
  4089 ;;      Temps:          0       2       0       0
  4090 ;;      Totals:         0       3       0       0
  4091 ;;Total ram usage:        3 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    5
  4094 ;; This function calls:
  4095 ;;		_SwPointSelect
  4096 ;;		_getMain_All_Error_Status
  4097 ;;		_getSw_KeyStatus
  4098 ;;		_setLED
  4099 ;;		_setLights_SwOff
  4100 ;;		_setLights_SwOn
  4101 ;; This function is called by:
  4102 ;;		_Switch_Main
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           
  4107                           ;psect for function _setSw_Main
  4108  05BD                     _setSw_Main:	
  4109                           
  4110                           ;incstack = 0
  4111                           ; Regs used in _setSw_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4112                           ;setSw_Main@sw stored from wreg
  4113  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  4114  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  4115  05BF  00DF               	movwf	setSw_Main@sw
  4116                           
  4117                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4118  05C0  085F               	movf	setSw_Main@sw,w
  4119  05C1  158A  223B  118A   	fcall	_SwPointSelect
  4120                           
  4121                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4122  05C4  0879               	movf	_Sw,w
  4123  05C5  0084               	movwf	4
  4124  05C6  1783               	bsf	3,7	;select IRP bank2
  4125  05C7  1C00               	btfss	0,0
  4126  05C8  2E70               	goto	l1426
  4127                           
  4128                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  4129  05C9  3000               	movlw	0
  4130  05CA  158A  24FE  118A   	fcall	_getMain_All_Error_Status
  4131  05CD  3800               	iorlw	0
  4132  05CE  1D03               	skipz
  4133  05CF  2DEB               	goto	l5436
  4134                           
  4135                           ;Switch_B1.c: 122: Sw->Detect = 0;
  4136  05D0  0A79               	incf	_Sw,w
  4137  05D1  0084               	movwf	4
  4138  05D2  1783               	bsf	3,7	;select IRP bank2
  4139  05D3  1080               	bcf	0,1
  4140                           
  4141                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  4142  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  4143  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  4144  05D6  085F               	movf	setSw_Main@sw,w
  4145  05D7  158A  2276  118A   	fcall	_getSw_KeyStatus
  4146  05DA  3A01               	xorlw	1
  4147  05DB  3000               	movlw	0
  4148  05DC  1903               	skipnz
  4149  05DD  3001               	movlw	1
  4150  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  4151  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  4152  05E0  00DD               	movwf	??_setSw_Main
  4153  05E1  0879               	movf	_Sw,w
  4154  05E2  0084               	movwf	4
  4155  05E3  0DDD               	rlf	??_setSw_Main,f
  4156  05E4  1783               	bsf	3,7	;select IRP bank2
  4157  05E5  0800               	movf	0,w
  4158  05E6  065D               	xorwf	??_setSw_Main,w
  4159  05E7  39FD               	andlw	-3
  4160  05E8  065D               	xorwf	??_setSw_Main,w
  4161  05E9  0080               	movwf	0
  4162                           
  4163                           ;Switch_B1.c: 124: } else {
  4164  05EA  2DF9               	goto	l1428
  4165  05EB                     l5436:	
  4166                           
  4167                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  4168  05EB  0A79               	incf	_Sw,w
  4169  05EC  0084               	movwf	4
  4170  05ED  1783               	bsf	3,7	;select IRP bank2
  4171  05EE  1880               	btfsc	0,1
  4172  05EF  2DF9               	goto	l1428
  4173                           
  4174                           ;Switch_B1.c: 126: Sw->Detect = 1;
  4175  05F0  0A79               	incf	_Sw,w
  4176  05F1  0084               	movwf	4
  4177  05F2  1480               	bsf	0,1
  4178                           
  4179                           ;Switch_B1.c: 128: Sw->Touch = 0;
  4180  05F3  0879               	movf	_Sw,w
  4181  05F4  0084               	movwf	4
  4182  05F5  1080               	bcf	0,1
  4183                           
  4184                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  4185  05F6  0879               	movf	_Sw,w
  4186  05F7  0084               	movwf	4
  4187  05F8  1500               	bsf	0,2
  4188  05F9                     l1428:	
  4189                           
  4190                           ;Switch_B1.c: 130: }
  4191                           ;Switch_B1.c: 131: }
  4192                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  4193  05F9  0879               	movf	_Sw,w
  4194  05FA  0084               	movwf	4
  4195  05FB  1C80               	btfss	0,1
  4196  05FC  2E47               	goto	l5464
  4197                           
  4198                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  4199  05FD  0879               	movf	_Sw,w
  4200  05FE  0084               	movwf	4
  4201  05FF  1900               	btfsc	0,2
  4202  0600  2E1C               	goto	l5452
  4203                           
  4204                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  4205  0601  3001               	movlw	1
  4206  0602  1283               	bcf	3,5	;RP0=0, select bank0
  4207  0603  1303               	bcf	3,6	;RP1=0, select bank0
  4208  0604  00DD               	movwf	??_setSw_Main
  4209  0605  0879               	movf	_Sw,w
  4210  0606  3E02               	addlw	2
  4211  0607  0084               	movwf	4
  4212  0608  085D               	movf	??_setSw_Main,w
  4213  0609  0780               	addwf	0,f
  4214                           
  4215                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  4216  060A  0879               	movf	_Sw,w
  4217  060B  3E02               	addlw	2
  4218  060C  0084               	movwf	4
  4219  060D  3003               	movlw	3
  4220  060E  0200               	subwf	0,w
  4221  060F  1C03               	skipc
  4222  0610  0008               	return
  4223                           
  4224                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  4225  0611  0879               	movf	_Sw,w
  4226  0612  3E02               	addlw	2
  4227  0613  0084               	movwf	4
  4228  0614  0180               	clrf	0
  4229                           
  4230                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  4231  0615  0879               	movf	_Sw,w
  4232  0616  0084               	movwf	4
  4233  0617  1500               	bsf	0,2
  4234                           
  4235                           ;Switch_B1.c: 140: setLights_SwOn(sw);
  4236  0618  085F               	movf	setSw_Main@sw,w
  4237  0619  158A  23C4         	fcall	_setLights_SwOn
  4238                           
  4239                           ;Switch_B1.c: 146: }
  4240                           ;Switch_B1.c: 147: } else {
  4241  061B  0008               	return
  4242  061C                     l5452:	
  4243                           
  4244                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  4245  061C  0879               	movf	_Sw,w
  4246  061D  0084               	movwf	4
  4247  061E  1783               	bsf	3,7	;select IRP bank2
  4248  061F  1980               	btfsc	0,3
  4249  0620  0008               	return
  4250                           
  4251                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  4252  0621  0879               	movf	_Sw,w
  4253  0622  3E03               	addlw	3
  4254  0623  0084               	movwf	4
  4255  0624  3001               	movlw	1
  4256  0625  0780               	addwf	0,f
  4257  0626  0A84               	incf	4,f
  4258  0627  1803               	skipnc
  4259  0628  0A80               	incf	0,f
  4260                           
  4261                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (3000 / 20)) {
  4262  0629  0879               	movf	_Sw,w
  4263  062A  3E03               	addlw	3
  4264  062B  0084               	movwf	4
  4265  062C  0800               	movf	0,w
  4266  062D  1283               	bcf	3,5	;RP0=0, select bank0
  4267  062E  1303               	bcf	3,6	;RP1=0, select bank0
  4268  062F  00DD               	movwf	??_setSw_Main
  4269  0630  0A84               	incf	4,f
  4270  0631  0800               	movf	0,w
  4271  0632  00DE               	movwf	??_setSw_Main+1
  4272  0633  3000               	movlw	0
  4273  0634  025E               	subwf	??_setSw_Main+1,w
  4274  0635  3096               	movlw	150
  4275  0636  1903               	skipnz
  4276  0637  025D               	subwf	??_setSw_Main,w
  4277  0638  1C03               	skipc
  4278  0639  0008               	return
  4279                           
  4280                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  4281  063A  0879               	movf	_Sw,w
  4282  063B  3E03               	addlw	3
  4283  063C  0084               	movwf	4
  4284  063D  0180               	clrf	0
  4285  063E  0A84               	incf	4,f
  4286  063F  0180               	clrf	0
  4287                           
  4288                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  4289  0640  0879               	movf	_Sw,w
  4290  0641  0084               	movwf	4
  4291  0642  1580               	bsf	0,3
  4292                           
  4293                           ;Switch_B1.c: 154: setLights_SwOff(sw);
  4294  0643  085F               	movf	setSw_Main@sw,w
  4295  0644  158A  232E         	fcall	_setLights_SwOff
  4296                           
  4297                           ;Switch_B1.c: 194: }
  4298                           ;Switch_B1.c: 195: }
  4299                           ;Switch_B1.c: 196: } else {
  4300                           
  4301                           ;Switch_B1.c: 161: }
  4302                           ;Switch_B1.c: 162: } else {
  4303  0646  0008               	return
  4304  0647                     l5464:	
  4305                           
  4306                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  4307  0647  0879               	movf	_Sw,w
  4308  0648  0084               	movwf	4
  4309  0649  1783               	bsf	3,7	;select IRP bank2
  4310  064A  1D00               	btfss	0,2
  4311  064B  0008               	return
  4312                           
  4313                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  4314  064C  3001               	movlw	1
  4315  064D  1283               	bcf	3,5	;RP0=0, select bank0
  4316  064E  1303               	bcf	3,6	;RP1=0, select bank0
  4317  064F  00DD               	movwf	??_setSw_Main
  4318  0650  0879               	movf	_Sw,w
  4319  0651  3E02               	addlw	2
  4320  0652  0084               	movwf	4
  4321  0653  085D               	movf	??_setSw_Main,w
  4322  0654  0780               	addwf	0,f
  4323                           
  4324                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  4325  0655  0879               	movf	_Sw,w
  4326  0656  3E02               	addlw	2
  4327  0657  0084               	movwf	4
  4328  0658  3003               	movlw	3
  4329  0659  0200               	subwf	0,w
  4330  065A  1C03               	skipc
  4331  065B  0008               	return
  4332                           
  4333                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  4334  065C  0879               	movf	_Sw,w
  4335  065D  3E02               	addlw	2
  4336  065E  0084               	movwf	4
  4337  065F  0180               	clrf	0
  4338                           
  4339                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  4340  0660  0879               	movf	_Sw,w
  4341  0661  0084               	movwf	4
  4342  0662  1100               	bcf	0,2
  4343                           
  4344                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  4345  0663  0879               	movf	_Sw,w
  4346  0664  3E03               	addlw	3
  4347  0665  0084               	movwf	4
  4348  0666  0180               	clrf	0
  4349  0667  0A84               	incf	4,f
  4350  0668  0180               	clrf	0
  4351                           
  4352                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  4353  0669  0879               	movf	_Sw,w
  4354  066A  0084               	movwf	4
  4355  066B  1180               	bcf	0,3
  4356                           
  4357                           ;Switch_B1.c: 212: setLights_SwOff(sw);
  4358  066C  085F               	movf	setSw_Main@sw,w
  4359  066D  158A  232E         	fcall	_setLights_SwOff
  4360                           
  4361                           ;Switch_B1.c: 221: }
  4362                           ;Switch_B1.c: 222: }
  4363                           ;Switch_B1.c: 223: }
  4364                           ;Switch_B1.c: 224: } else {
  4365  066F  0008               	return
  4366  0670                     l1426:	
  4367                           
  4368                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  4369  0670  1283               	bcf	3,5	;RP0=0, select bank0
  4370  0671  1303               	bcf	3,6	;RP1=0, select bank0
  4371  0672  1C31               	btfss	_myMain,0
  4372  0673  0008               	return
  4373                           
  4374                           ;Switch_B1.c: 226: Sw->Enable = 1;
  4375  0674  0879               	movf	_Sw,w
  4376  0675  0084               	movwf	4
  4377  0676  1400               	bsf	0,0
  4378                           
  4379                           ;Switch_B1.c: 228: if (sw == 2) {
  4380  0677  085F               	movf	setSw_Main@sw,w
  4381  0678  3A02               	xorlw	2
  4382  0679  1D03               	skipz
  4383  067A  0008               	return
  4384                           
  4385                           ;Switch_B1.c: 229: setLED(1, 1);
  4386  067B  01D7               	clrf	setLED@command
  4387  067C  0AD7               	incf	setLED@command,f
  4388  067D  3001               	movlw	1
  4389  067E  118A  27A6         	fcall	_setLED
  4390  0680  0008               	return
  4391  0681                     __end_of_setSw_Main:	
  4392                           
  4393                           	psect	text16
  4394  0A76                     __ptext16:	
  4395 ;; *************** function _getSw_KeyStatus *****************
  4396 ;; Defined at:
  4397 ;;		line 237 in file "../src/Switch_B1.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  sw              1    wreg     unsigned char 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  sw              1    5[COMMON] unsigned char 
  4402 ;;  status          1    4[COMMON] unsigned char 
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      unsigned char 
  4405 ;; Registers used:
  4406 ;;		wreg, status,2
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4412 ;;      Params:         0       0       0       0
  4413 ;;      Locals:         2       0       0       0
  4414 ;;      Temps:          0       0       0       0
  4415 ;;      Totals:         2       0       0       0
  4416 ;;Total ram usage:        2 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    2
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		_setSw_Main
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           
  4427                           ;psect for function _getSw_KeyStatus
  4428  0A76                     _getSw_KeyStatus:	
  4429                           
  4430                           ;incstack = 0
  4431                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  4432                           ;getSw_KeyStatus@sw stored from wreg
  4433  0A76  00F5               	movwf	getSw_KeyStatus@sw
  4434                           
  4435                           ;Switch_B1.c: 238: char status = 0;
  4436  0A77  01F4               	clrf	getSw_KeyStatus@status
  4437                           
  4438                           ;Switch_B1.c: 252: if (sw == 1) {
  4439  0A78  0875               	movf	getSw_KeyStatus@sw,w
  4440  0A79  3A01               	xorlw	1
  4441  0A7A  1D03               	skipz
  4442  0A7B  2A7E               	goto	l3806
  4443                           
  4444                           ;Switch_B1.c: 253: __nop();
  4445  0A7C  0000               	nop
  4446                           
  4447                           ;Switch_B1.c: 254: } else if (sw == 2) {
  4448  0A7D  2A88               	goto	l3810
  4449  0A7E                     l3806:	
  4450  0A7E  0875               	movf	getSw_KeyStatus@sw,w
  4451  0A7F  3A02               	xorlw	2
  4452  0A80  1D03               	skipz
  4453  0A81  2A88               	goto	l3810
  4454                           
  4455                           ;Switch_B1.c: 255: status = RB4 == 1 ? 1 : 0;
  4456  0A82  3000               	movlw	0
  4457  0A83  1283               	bcf	3,5	;RP0=0, select bank0
  4458  0A84  1303               	bcf	3,6	;RP1=0, select bank0
  4459  0A85  1A06               	btfsc	6,4	;volatile
  4460  0A86  3001               	movlw	1
  4461  0A87  00F4               	movwf	getSw_KeyStatus@status
  4462  0A88                     l3810:	
  4463                           
  4464                           ;Switch_B1.c: 256: }
  4465                           ;Switch_B1.c: 275: return status;
  4466  0A88  0874               	movf	getSw_KeyStatus@status,w
  4467  0A89  0008               	return
  4468  0A8A                     __end_of_getSw_KeyStatus:	
  4469                           
  4470                           	psect	text17
  4471  0A3B                     __ptext17:	
  4472 ;; *************** function _SwPointSelect *****************
  4473 ;; Defined at:
  4474 ;;		line 25 in file "../src/Switch_B1.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  sw              1    wreg     unsigned char 
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;  sw              1    5[COMMON] unsigned char 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;		None               void
  4481 ;; Registers used:
  4482 ;;		wreg
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4488 ;;      Params:         0       0       0       0
  4489 ;;      Locals:         1       0       0       0
  4490 ;;      Temps:          1       0       0       0
  4491 ;;      Totals:         2       0       0       0
  4492 ;;Total ram usage:        2 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:    2
  4495 ;; This function calls:
  4496 ;;		Nothing
  4497 ;; This function is called by:
  4498 ;;		_setSw_Main
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           
  4503                           ;psect for function _SwPointSelect
  4504  0A3B                     _SwPointSelect:	
  4505                           
  4506                           ;incstack = 0
  4507                           ; Regs used in _SwPointSelect: [wreg]
  4508                           ;SwPointSelect@sw stored from wreg
  4509  0A3B  00F5               	movwf	SwPointSelect@sw
  4510                           
  4511                           ;Switch_B1.c: 28: if (sw == 1) {
  4512  0A3C  0875               	movf	SwPointSelect@sw,w
  4513  0A3D  3A01               	xorlw	1
  4514  0A3E  1D03               	skipz
  4515  0A3F  2A45               	goto	l3796
  4516                           
  4517                           ;Switch_B1.c: 29: Sw = &Sw1;
  4518  0A40  3020               	movlw	_Sw1& (0+255)
  4519  0A41  00F4               	movwf	??_SwPointSelect
  4520  0A42  0874               	movf	??_SwPointSelect,w
  4521  0A43  00F9               	movwf	_Sw
  4522                           
  4523                           ;Switch_B1.c: 30: }
  4524  0A44  0008               	return
  4525  0A45                     l3796:	
  4526                           
  4527                           ;Switch_B1.c: 33: else if (sw == 2) {
  4528  0A45  0875               	movf	SwPointSelect@sw,w
  4529  0A46  3A02               	xorlw	2
  4530  0A47  1D03               	skipz
  4531  0A48  0008               	return
  4532                           
  4533                           ;Switch_B1.c: 34: Sw = &Sw2;
  4534  0A49  3025               	movlw	_Sw2& (0+255)
  4535  0A4A  00F4               	movwf	??_SwPointSelect
  4536  0A4B  0874               	movf	??_SwPointSelect,w
  4537  0A4C  00F9               	movwf	_Sw
  4538  0A4D  0008               	return
  4539  0A4E                     __end_of_SwPointSelect:	
  4540                           
  4541                           	psect	text18
  4542  0A62                     __ptext18:	
  4543 ;; *************** function _TouchPower *****************
  4544 ;; Defined at:
  4545 ;;		line 10 in file "../src/Switch_B1.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;		None
  4548 ;; Auto vars:     Size  Location     Type
  4549 ;;		None
  4550 ;; Return value:  Size  Location     Type
  4551 ;;		None               void
  4552 ;; Registers used:
  4553 ;;		wreg, status,2, status,0, pclath, cstack
  4554 ;; Tracked objects:
  4555 ;;		On entry : 0/0
  4556 ;;		On exit  : 0/0
  4557 ;;		Unchanged: 0/0
  4558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4559 ;;      Params:         0       0       0       0
  4560 ;;      Locals:         0       0       0       0
  4561 ;;      Temps:          0       0       0       0
  4562 ;;      Totals:         0       0       0       0
  4563 ;;Total ram usage:        0 bytes
  4564 ;; Hardware stack levels used:    1
  4565 ;; Hardware stack levels required when called:    3
  4566 ;; This function calls:
  4567 ;;		_Timeout_Counter
  4568 ;;		_set_TimeoutCleared
  4569 ;; This function is called by:
  4570 ;;		_Switch_Main
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           
  4575                           ;psect for function _TouchPower
  4576  0A62                     _TouchPower:	
  4577                           
  4578                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  4579                           
  4580                           ;incstack = 0
  4581                           ; Regs used in _TouchPower: [wreg+status,2+status,0+pclath+cstack]
  4582  0A62  1283               	bcf	3,5	;RP0=0, select bank0
  4583  0A63  1303               	bcf	3,6	;RP1=0, select bank0
  4584  0A64  1C31               	btfss	_myMain,0
  4585  0A65  0008               	return
  4586                           
  4587                           ;Switch_B1.c: 12: if (RB5 == 0) {
  4588  0A66  1A86               	btfsc	6,5	;volatile
  4589  0A67  0008               	return
  4590  0A68  2A6D               	goto	l5420
  4591  0A69                     l1404:	
  4592                           ;Switch_B1.c: 13: while (RB5 == 0 && myMain.Timeout == 0) {
  4593                           
  4594                           
  4595                           ;Switch_B1.c: 14: RB5 = 1;
  4596  0A69  1686               	bsf	6,5	;volatile
  4597                           
  4598                           ;Switch_B1.c: 15: Timeout_Counter();
  4599  0A6A  158A  224E  158A   	fcall	_Timeout_Counter
  4600  0A6D                     l5420:	
  4601  0A6D  1283               	bcf	3,5	;RP0=0, select bank0
  4602  0A6E  1303               	bcf	3,6	;RP1=0, select bank0
  4603  0A6F  1A86               	btfsc	6,5	;volatile
  4604  0A70  2A73               	goto	l5424
  4605  0A71  1D33               	btfss	_myMain+2,2
  4606  0A72  2A69               	goto	l1404
  4607  0A73                     l5424:	
  4608                           
  4609                           ;Switch_B1.c: 16: }
  4610                           ;Switch_B1.c: 17: set_TimeoutCleared();
  4611  0A73  158A  2142         	fcall	_set_TimeoutCleared
  4612  0A75  0008               	return
  4613  0A76                     __end_of_TouchPower:	
  4614                           
  4615                           	psect	text19
  4616  0942                     __ptext19:	
  4617 ;; *************** function _set_TimeoutCleared *****************
  4618 ;; Defined at:
  4619 ;;		line 281 in file "../src/Main_B1.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;		None
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;		None
  4624 ;; Return value:  Size  Location     Type
  4625 ;;		None               void
  4626 ;; Registers used:
  4627 ;;		status,2
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4633 ;;      Params:         0       0       0       0
  4634 ;;      Locals:         0       0       0       0
  4635 ;;      Temps:          0       0       0       0
  4636 ;;      Totals:         0       0       0       0
  4637 ;;Total ram usage:        0 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:    2
  4640 ;; This function calls:
  4641 ;;		Nothing
  4642 ;; This function is called by:
  4643 ;;		_getAD
  4644 ;;		_TouchPower
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           
  4649                           ;psect for function _set_TimeoutCleared
  4650  0942                     _set_TimeoutCleared:	
  4651                           
  4652                           ;Main_B1.c: 282: myMain.Timeout = 0;
  4653                           
  4654                           ;incstack = 0
  4655                           ; Regs used in _set_TimeoutCleared: [status,2]
  4656  0942  1283               	bcf	3,5	;RP0=0, select bank0
  4657  0943  1303               	bcf	3,6	;RP1=0, select bank0
  4658  0944  1133               	bcf	_myMain+2,2
  4659                           
  4660                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  4661  0945  01B4               	clrf	_myMain+3
  4662  0946  01B5               	clrf	_myMain+4
  4663  0947  0008               	return
  4664  0948                     __end_of_set_TimeoutCleared:	
  4665                           
  4666                           	psect	text20
  4667  0A4E                     __ptext20:	
  4668 ;; *************** function _Timeout_Counter *****************
  4669 ;; Defined at:
  4670 ;;		line 272 in file "../src/Main_B1.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;		None
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;		None
  4675 ;; Return value:  Size  Location     Type
  4676 ;;		None               void
  4677 ;; Registers used:
  4678 ;;		wreg, status,2
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4684 ;;      Params:         0       0       0       0
  4685 ;;      Locals:         0       0       0       0
  4686 ;;      Temps:          0       0       0       0
  4687 ;;      Totals:         0       0       0       0
  4688 ;;Total ram usage:        0 bytes
  4689 ;; Hardware stack levels used:    1
  4690 ;; Hardware stack levels required when called:    2
  4691 ;; This function calls:
  4692 ;;		Nothing
  4693 ;; This function is called by:
  4694 ;;		_getAD
  4695 ;;		_TouchPower
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           
  4700                           ;psect for function _Timeout_Counter
  4701  0A4E                     _Timeout_Counter:	
  4702                           
  4703                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  4704                           
  4705                           ;incstack = 0
  4706                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  4707  0A4E  3001               	movlw	1
  4708  0A4F  1283               	bcf	3,5	;RP0=0, select bank0
  4709  0A50  1303               	bcf	3,6	;RP1=0, select bank0
  4710  0A51  07B4               	addwf	_myMain+3,f
  4711  0A52  1803               	skipnc
  4712  0A53  0AB5               	incf	_myMain+4,f
  4713  0A54  3000               	movlw	0
  4714  0A55  07B5               	addwf	_myMain+4,f
  4715                           
  4716                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  4717  0A56  3061               	movlw	97
  4718  0A57  0635               	xorwf	_myMain+4,w
  4719  0A58  1D03               	skipz
  4720  0A59  2A5C               	goto	u5875
  4721  0A5A  30A8               	movlw	168
  4722  0A5B  0634               	xorwf	_myMain+3,w
  4723  0A5C                     u5875:	
  4724  0A5C  1D03               	skipz
  4725  0A5D  0008               	return
  4726                           
  4727                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  4728  0A5E  01B4               	clrf	_myMain+3
  4729  0A5F  01B5               	clrf	_myMain+4
  4730                           
  4731                           ;Main_B1.c: 276: myMain.Timeout = 1;
  4732  0A60  1533               	bsf	_myMain+2,2
  4733  0A61  0008               	return
  4734  0A62                     __end_of_Timeout_Counter:	
  4735                           
  4736                           	psect	text21
  4737  090F                     __ptext21:	
  4738 ;; *************** function _Switch_Initialization *****************
  4739 ;; Defined at:
  4740 ;;		line 46 in file "../src/Switch_B1.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;		None
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;		None
  4745 ;; Return value:  Size  Location     Type
  4746 ;;		None               void
  4747 ;; Registers used:
  4748 ;;		None
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4754 ;;      Params:         0       0       0       0
  4755 ;;      Locals:         0       0       0       0
  4756 ;;      Temps:          0       0       0       0
  4757 ;;      Totals:         0       0       0       0
  4758 ;;Total ram usage:        0 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    2
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_main
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           
  4769                           ;psect for function _Switch_Initialization
  4770  090F                     _Switch_Initialization:	
  4771                           
  4772                           ;incstack = 0
  4773                           ; Regs used in _Switch_Initialization: []
  4774  090F  0008               	return
  4775  0910                     __end_of_Switch_Initialization:	
  4776                           
  4777                           	psect	text22
  4778  0918                     __ptext22:	
  4779 ;; *************** function _SYSC_Main *****************
  4780 ;; Defined at:
  4781 ;;		line 17 in file "../src/SYSC_B1.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;		None
  4786 ;; Return value:  Size  Location     Type
  4787 ;;		None               void
  4788 ;; Registers used:
  4789 ;;		wreg, status,2, status,0, pclath, cstack
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4795 ;;      Params:         0       0       0       0
  4796 ;;      Locals:         0       0       0       0
  4797 ;;      Temps:          0       0       0       0
  4798 ;;      Totals:         0       0       0       0
  4799 ;;Total ram usage:        0 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    4
  4802 ;; This function calls:
  4803 ;;		_setSYSC_Main
  4804 ;; This function is called by:
  4805 ;;		_main
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           
  4810                           ;psect for function _SYSC_Main
  4811  0918                     _SYSC_Main:	
  4812                           
  4813                           ;SYSC_B1.c: 19: setSYSC_Main();
  4814                           
  4815                           ;incstack = 0
  4816                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4817  0918  158A  25C0         	fcall	_setSYSC_Main
  4818  091A  0008               	return
  4819  091B                     __end_of_SYSC_Main:	
  4820                           
  4821                           	psect	text23
  4822  0DC0                     __ptext23:	
  4823 ;; *************** function _setSYSC_Main *****************
  4824 ;; Defined at:
  4825 ;;		line 23 in file "../src/SYSC_B1.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;		None
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;		None
  4830 ;; Return value:  Size  Location     Type
  4831 ;;		None               void
  4832 ;; Registers used:
  4833 ;;		wreg, status,2, status,0, pclath, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4839 ;;      Params:         0       0       0       0
  4840 ;;      Locals:         0       0       0       0
  4841 ;;      Temps:          0       0       0       0
  4842 ;;      Totals:         0       0       0       0
  4843 ;;Total ram usage:        0 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    3
  4846 ;; This function calls:
  4847 ;;		_getMain_All_Error_Status
  4848 ;; This function is called by:
  4849 ;;		_SYSC_Main
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           
  4854                           ;psect for function _setSYSC_Main
  4855  0DC0                     _setSYSC_Main:	
  4856                           
  4857                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4858                           
  4859                           ;incstack = 0
  4860                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4861  0DC0  1283               	bcf	3,5	;RP0=0, select bank0
  4862  0DC1  1303               	bcf	3,6	;RP1=0, select bank0
  4863  0DC2  1C2C               	btfss	_SYSC,0
  4864  0DC3  0008               	return
  4865                           
  4866                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4867  0DC4  18AC               	btfsc	_SYSC,1
  4868  0DC5  2DD7               	goto	l4094
  4869                           
  4870                           ;SYSC_B1.c: 27: SYSC.Time++;
  4871  0DC6  3001               	movlw	1
  4872  0DC7  07AD               	addwf	_SYSC+1,f
  4873  0DC8  1803               	skipnc
  4874  0DC9  0AAE               	incf	_SYSC+2,f
  4875  0DCA  3000               	movlw	0
  4876  0DCB  07AE               	addwf	_SYSC+2,f
  4877                           
  4878                           ;SYSC_B1.c: 28: if (SYSC.Time >= (500 / 20)) {
  4879  0DCC  3000               	movlw	0
  4880  0DCD  022E               	subwf	_SYSC+2,w
  4881  0DCE  3019               	movlw	25
  4882  0DCF  1903               	skipnz
  4883  0DD0  022D               	subwf	_SYSC+1,w
  4884  0DD1  1C03               	skipc
  4885  0DD2  0008               	return
  4886                           
  4887                           ;SYSC_B1.c: 29: SYSC.Time = 0;
  4888  0DD3  01AD               	clrf	_SYSC+1
  4889  0DD4  01AE               	clrf	_SYSC+2
  4890                           
  4891                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4892  0DD5  14AC               	bsf	_SYSC,1
  4893                           
  4894                           ;SYSC_B1.c: 31: }
  4895                           ;SYSC_B1.c: 32: } else {
  4896  0DD6  0008               	return
  4897  0DD7                     l4094:	
  4898                           
  4899                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4900  0DD7  3001               	movlw	1
  4901  0DD8  158A  24FE  158A   	fcall	_getMain_All_Error_Status
  4902  0DDB  3800               	iorlw	0
  4903  0DDC  1D03               	skipz
  4904  0DDD  0008               	return
  4905                           
  4906                           ;SYSC_B1.c: 34: SYSC.Time++;
  4907  0DDE  3001               	movlw	1
  4908  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  4909  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  4910  0DE1  07AD               	addwf	_SYSC+1,f
  4911  0DE2  1803               	skipnc
  4912  0DE3  0AAE               	incf	_SYSC+2,f
  4913  0DE4  3000               	movlw	0
  4914  0DE5  07AE               	addwf	_SYSC+2,f
  4915                           
  4916                           ;SYSC_B1.c: 35: if (SYSC.Time >= (500 / 20)) {
  4917  0DE6  3000               	movlw	0
  4918  0DE7  022E               	subwf	_SYSC+2,w
  4919  0DE8  3019               	movlw	25
  4920  0DE9  1903               	skipnz
  4921  0DEA  022D               	subwf	_SYSC+1,w
  4922  0DEB  1C03               	skipc
  4923  0DEC  2DF2               	goto	l4100
  4924                           
  4925                           ;SYSC_B1.c: 36: SYSC.Time = 0;
  4926  0DED  01AD               	clrf	_SYSC+1
  4927  0DEE  01AE               	clrf	_SYSC+2
  4928                           
  4929                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4930  0DEF  01AF               	clrf	_SYSC+3
  4931  0DF0  01B0               	clrf	_SYSC+4
  4932                           
  4933                           ;SYSC_B1.c: 38: } else {
  4934  0DF1  0008               	return
  4935  0DF2                     l4100:	
  4936                           
  4937                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4938  0DF2  3001               	movlw	1
  4939  0DF3  07AF               	addwf	_SYSC+3,f
  4940  0DF4  1803               	skipnc
  4941  0DF5  0AB0               	incf	_SYSC+4,f
  4942  0DF6  3000               	movlw	0
  4943  0DF7  07B0               	addwf	_SYSC+4,f
  4944                           
  4945                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4946  0DF8  3001               	movlw	1
  4947  0DF9  0630               	xorwf	_SYSC+4,w
  4948  0DFA  1D03               	skipz
  4949  0DFB  2DFE               	goto	u3725
  4950  0DFC  30F4               	movlw	244
  4951  0DFD  062F               	xorwf	_SYSC+3,w
  4952  0DFE                     u3725:	
  4953  0DFE  1D03               	skipz
  4954  0DFF  0008               	return
  4955                           
  4956                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4957  0E00  01AF               	clrf	_SYSC+3
  4958  0E01  01B0               	clrf	_SYSC+4
  4959                           
  4960                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4961  0E02  10AC               	bcf	_SYSC,1
  4962  0E03  0008               	return
  4963  0E04                     __end_of_setSYSC_Main:	
  4964                           
  4965                           	psect	text24
  4966  0915                     __ptext24:	
  4967 ;; *************** function _SYSC_Initialization *****************
  4968 ;; Defined at:
  4969 ;;		line 7 in file "../src/SYSC_B1.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;		None
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;		None
  4974 ;; Return value:  Size  Location     Type
  4975 ;;		None               void
  4976 ;; Registers used:
  4977 ;;		status,2, status,0, pclath, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4983 ;;      Params:         0       0       0       0
  4984 ;;      Locals:         0       0       0       0
  4985 ;;      Temps:          0       0       0       0
  4986 ;;      Totals:         0       0       0       0
  4987 ;;Total ram usage:        0 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:    3
  4990 ;; This function calls:
  4991 ;;		_setSYSC_Initialization
  4992 ;; This function is called by:
  4993 ;;		_main
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           
  4998                           ;psect for function _SYSC_Initialization
  4999  0915                     _SYSC_Initialization:	
  5000                           
  5001                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  5002                           
  5003                           ;incstack = 0
  5004                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  5005  0915  158A  212D         	fcall	_setSYSC_Initialization
  5006  0917  0008               	return
  5007  0918                     __end_of_SYSC_Initialization:	
  5008                           
  5009                           	psect	text25
  5010  092D                     __ptext25:	
  5011 ;; *************** function _setSYSC_Initialization *****************
  5012 ;; Defined at:
  5013 ;;		line 13 in file "../src/SYSC_B1.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;		None
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;		None
  5018 ;; Return value:  Size  Location     Type
  5019 ;;		None               void
  5020 ;; Registers used:
  5021 ;;		None
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5027 ;;      Params:         0       0       0       0
  5028 ;;      Locals:         0       0       0       0
  5029 ;;      Temps:          0       0       0       0
  5030 ;;      Totals:         0       0       0       0
  5031 ;;Total ram usage:        0 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    2
  5034 ;; This function calls:
  5035 ;;		Nothing
  5036 ;; This function is called by:
  5037 ;;		_SYSC_Initialization
  5038 ;; This function uses a non-reentrant model
  5039 ;;
  5040                           
  5041                           
  5042                           ;psect for function _setSYSC_Initialization
  5043  092D                     _setSYSC_Initialization:	
  5044                           
  5045                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  5046                           
  5047                           ;incstack = 0
  5048                           ; Regs used in _setSYSC_Initialization: []
  5049  092D  1283               	bcf	3,5	;RP0=0, select bank0
  5050  092E  1303               	bcf	3,6	;RP1=0, select bank0
  5051  092F  142C               	bsf	_SYSC,0
  5052  0930  0008               	return
  5053  0931                     __end_of_setSYSC_Initialization:	
  5054                           
  5055                           	psect	text26
  5056  0217                     __ptext26:	
  5057 ;; *************** function _PIR_Main *****************
  5058 ;; Defined at:
  5059 ;;		line 13 in file "../src/PIR_B1.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;		None
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;  LightsStatus    1   16[BANK0 ] unsigned char 
  5064 ;;  cds             1   15[BANK0 ] unsigned char 
  5065 ;;  TriggerValue    1   14[BANK0 ] unsigned char 
  5066 ;;  Enable_Switc    1   13[BANK0 ] unsigned char 
  5067 ;;  error           1   10[BANK0 ] unsigned char 
  5068 ;; Return value:  Size  Location     Type
  5069 ;;		None               void
  5070 ;; Registers used:
  5071 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5072 ;; Tracked objects:
  5073 ;;		On entry : 0/0
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5077 ;;      Params:         0       0       0       0
  5078 ;;      Locals:         0       7       0       0
  5079 ;;      Temps:          0       4       0       0
  5080 ;;      Totals:         0      11       0       0
  5081 ;;Total ram usage:       11 bytes
  5082 ;; Hardware stack levels used:    1
  5083 ;; Hardware stack levels required when called:    5
  5084 ;; This function calls:
  5085 ;;		_getCDS_Status
  5086 ;;		_getLights_Status
  5087 ;;		_getMain_All_Error_Status
  5088 ;;		_setLights_SwOff
  5089 ;;		_setLights_SwOn
  5090 ;; This function is called by:
  5091 ;;		_main
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           
  5096                           ;psect for function _PIR_Main
  5097  0217                     _PIR_Main:	
  5098                           
  5099                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  5100                           
  5101                           ;incstack = 0
  5102                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5103  0217  3000               	movlw	0
  5104  0218  158A  24FE  118A   	fcall	_getMain_All_Error_Status
  5105  021B  1283               	bcf	3,5	;RP0=0, select bank0
  5106  021C  1303               	bcf	3,6	;RP1=0, select bank0
  5107  021D  00DD               	movwf	??_PIR_Main
  5108  021E  085D               	movf	??_PIR_Main,w
  5109  021F  00E1               	movwf	PIR_Main@error
  5110                           
  5111                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  5112  0220  158A  2166  118A   	fcall	_getCDS_Status
  5113  0223  1283               	bcf	3,5	;RP0=0, select bank0
  5114  0224  1303               	bcf	3,6	;RP1=0, select bank0
  5115  0225  00DD               	movwf	??_PIR_Main
  5116  0226  085D               	movf	??_PIR_Main,w
  5117  0227  00E6               	movwf	PIR_Main@cds
  5118                           
  5119                           ;PIR_B1.c: 16: char LightsStatus = 0;
  5120  0228  01E7               	clrf	PIR_Main@LightsStatus
  5121                           
  5122                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  5123  0229  01E4               	clrf	PIR_Main@Enable_Switch
  5124  022A  0AE4               	incf	PIR_Main@Enable_Switch,f
  5125                           
  5126                           ;PIR_B1.c: 18: char TriggerValue = 0;
  5127  022B  01E5               	clrf	PIR_Main@TriggerValue
  5128                           
  5129                           ;PIR_B1.c: 20: Enable_Switch = RB3 == 1 ? 1 : 0;
  5130  022C  3000               	movlw	0
  5131  022D  1986               	btfsc	6,3	;volatile
  5132  022E  3001               	movlw	1
  5133  022F  00E4               	movwf	PIR_Main@Enable_Switch
  5134                           
  5135                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  5136  0230  3001               	movlw	1
  5137  0231  158A  21F4  118A   	fcall	_getLights_Status
  5138  0234  1283               	bcf	3,5	;RP0=0, select bank0
  5139  0235  1303               	bcf	3,6	;RP1=0, select bank0
  5140  0236  00DD               	movwf	??_PIR_Main
  5141  0237  085D               	movf	??_PIR_Main,w
  5142  0238  00E7               	movwf	PIR_Main@LightsStatus
  5143                           
  5144                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  5145  0239  1683               	bsf	3,5	;RP0=1, select bank1
  5146  023A  1303               	bcf	3,6	;RP1=0, select bank1
  5147  023B  1C20               	btfss	__PIR^(0+128),0
  5148  023C  2BA1               	goto	l1040
  5149                           
  5150                           ;PIR_B1.c: 36: if (error == 0) {
  5151  023D  1283               	bcf	3,5	;RP0=0, select bank0
  5152  023E  1303               	bcf	3,6	;RP1=0, select bank0
  5153  023F  08E1               	movf	PIR_Main@error,f
  5154  0240  1D03               	skipz
  5155  0241  2A68               	goto	l1041
  5156                           
  5157                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  5158  0242  0866               	movf	PIR_Main@cds,w
  5159  0243  3A01               	xorlw	1
  5160  0244  1D03               	skipz
  5161  0245  2A4E               	goto	l1042
  5162  0246  0864               	movf	PIR_Main@Enable_Switch,w
  5163  0247  3A01               	xorlw	1
  5164  0248  1D03               	skipz
  5165  0249  2A4E               	goto	l1042
  5166                           
  5167                           ;PIR_B1.c: 39: _PIR.Available = 1;
  5168  024A  1683               	bsf	3,5	;RP0=1, select bank1
  5169  024B  1303               	bcf	3,6	;RP1=0, select bank1
  5170  024C  17A0               	bsf	__PIR^(0+128),7
  5171                           
  5172                           ;PIR_B1.c: 40: } else {
  5173  024D  2A62               	goto	l5966
  5174  024E                     l1042:	
  5175                           
  5176                           ;PIR_B1.c: 41: _PIR.Available = 0;
  5177  024E  1683               	bsf	3,5	;RP0=1, select bank1
  5178  024F  1303               	bcf	3,6	;RP1=0, select bank1
  5179  0250  13A0               	bcf	__PIR^(0+128),7
  5180                           
  5181                           ;PIR_B1.c: 43: if (_PIR.OK == 1) {
  5182  0251  1DA0               	btfss	__PIR^(0+128),3
  5183  0252  2A62               	goto	l5966
  5184                           
  5185                           ;PIR_B1.c: 51: if (getLights_Status(1) == 1) {
  5186  0253  3001               	movlw	1
  5187  0254  158A  21F4  118A   	fcall	_getLights_Status
  5188  0257  3A01               	xorlw	1
  5189  0258  1D03               	skipz
  5190  0259  2A62               	goto	l5966
  5191                           
  5192                           ;PIR_B1.c: 52: setLights_SwOn(1);
  5193  025A  3001               	movlw	1
  5194  025B  158A  23C4  118A   	fcall	_setLights_SwOn
  5195                           
  5196                           ;PIR_B1.c: 53: setLights_SwOff(1);
  5197  025E  3001               	movlw	1
  5198  025F  158A  232E  118A   	fcall	_setLights_SwOff
  5199  0262                     l5966:	
  5200                           
  5201                           ;PIR_B1.c: 55: }
  5202                           ;PIR_B1.c: 67: }
  5203                           ;PIR_B1.c: 68: }
  5204                           ;PIR_B1.c: 72: if (_PIR.Detect == 0) {
  5205  0262  1683               	bsf	3,5	;RP0=1, select bank1
  5206  0263  1303               	bcf	3,6	;RP1=0, select bank1
  5207  0264  1A20               	btfsc	__PIR^(0+128),4
  5208  0265  2A6E               	goto	l1047
  5209                           
  5210                           ;PIR_B1.c: 73: _PIR.Detect = 1;
  5211  0266  1620               	bsf	__PIR^(0+128),4
  5212                           
  5213                           ;PIR_B1.c: 80: }
  5214                           ;PIR_B1.c: 81: } else {
  5215  0267  2A6E               	goto	l1047
  5216  0268                     l1041:	
  5217                           
  5218                           ;PIR_B1.c: 82: if (_PIR.Detect == 1) {
  5219  0268  1683               	bsf	3,5	;RP0=1, select bank1
  5220  0269  1303               	bcf	3,6	;RP1=0, select bank1
  5221  026A  1E20               	btfss	__PIR^(0+128),4
  5222  026B  2A6E               	goto	l1047
  5223                           
  5224                           ;PIR_B1.c: 83: _PIR.Detect = 0;
  5225  026C  1220               	bcf	__PIR^(0+128),4
  5226                           
  5227                           ;PIR_B1.c: 84: _PIR.Available = 0;
  5228  026D  13A0               	bcf	__PIR^(0+128),7
  5229  026E                     l1047:	
  5230                           
  5231                           ;PIR_B1.c: 102: }
  5232                           ;PIR_B1.c: 103: }
  5233                           ;PIR_B1.c: 105: if (_PIR.ADtoGO == 0) {
  5234  026E  18A0               	btfsc	__PIR^(0+128),1
  5235  026F  2A7F               	goto	l1049
  5236                           
  5237                           ;PIR_B1.c: 106: _PIR.Time++;
  5238  0270  3001               	movlw	1
  5239  0271  1283               	bcf	3,5	;RP0=0, select bank0
  5240  0272  1303               	bcf	3,6	;RP1=0, select bank0
  5241  0273  00DD               	movwf	??_PIR_Main
  5242  0274  085D               	movf	??_PIR_Main,w
  5243  0275  1683               	bsf	3,5	;RP0=1, select bank1
  5244  0276  1303               	bcf	3,6	;RP1=0, select bank1
  5245  0277  07A2               	addwf	(__PIR^(0+128)+2),f
  5246                           
  5247                           ;PIR_B1.c: 107: if (_PIR.Time == (100 / 20)) {
  5248  0278  0822               	movf	(__PIR^(0+128)+2),w
  5249  0279  3A05               	xorlw	5
  5250  027A  1D03               	skipz
  5251  027B  2B48               	goto	l6042
  5252                           
  5253                           ;PIR_B1.c: 108: _PIR.Time = 0;
  5254  027C  01A2               	clrf	(__PIR^(0+128)+2)
  5255                           
  5256                           ;PIR_B1.c: 109: _PIR.ADtoGO = 1;
  5257  027D  14A0               	bsf	__PIR^(0+128),1
  5258                           
  5259                           ;PIR_B1.c: 110: }
  5260                           ;PIR_B1.c: 111: } else {
  5261  027E  2B48               	goto	l6042
  5262  027F                     l1049:	
  5263                           
  5264                           ;PIR_B1.c: 112: if (_PIR.GO == 1) {
  5265  027F  1D20               	btfss	__PIR^(0+128),2
  5266  0280  2B48               	goto	l6042
  5267                           
  5268                           ;PIR_B1.c: 113: _PIR.GO = 0;
  5269  0281  1120               	bcf	__PIR^(0+128),2
  5270                           
  5271                           ;PIR_B1.c: 114: _PIR.ADtoGO = 0;
  5272  0282  10A0               	bcf	__PIR^(0+128),1
  5273                           
  5274                           ;PIR_B1.c: 115: if (_PIR.Available == 1) {
  5275  0283  1BA0               	btfsc	__PIR^(0+128),7
  5276                           
  5277                           ;PIR_B1.c: 116: if (_PIR.OK == 1) {
  5278  0284  1DA0               	btfss	__PIR^(0+128),3
  5279  0285  2B48               	goto	l6042
  5280                           
  5281                           ;PIR_B1.c: 118: _PIR.Time++;
  5282  0286  3001               	movlw	1
  5283  0287  1283               	bcf	3,5	;RP0=0, select bank0
  5284  0288  1303               	bcf	3,6	;RP1=0, select bank0
  5285  0289  00DD               	movwf	??_PIR_Main
  5286  028A  085D               	movf	??_PIR_Main,w
  5287  028B  1683               	bsf	3,5	;RP0=1, select bank1
  5288  028C  1303               	bcf	3,6	;RP1=0, select bank1
  5289  028D  07A2               	addwf	(__PIR^(0+128)+2),f
  5290                           
  5291                           ;PIR_B1.c: 119: if (_PIR.Time == 60) {
  5292  028E  0822               	movf	(__PIR^(0+128)+2),w
  5293  028F  3A3C               	xorlw	60
  5294  0290  1D03               	skipz
  5295  0291  2AC6               	goto	l6020
  5296                           
  5297                           ;PIR_B1.c: 120: _PIR.Time = 0;
  5298  0292  01A2               	clrf	(__PIR^(0+128)+2)
  5299                           
  5300                           ;PIR_B1.c: 121: if (_PIR.RangeCount >= 90) {
  5301  0293  305A               	movlw	90
  5302  0294  0247               	subwf	(__PIR^(0+128)+39),w
  5303  0295  1C03               	skipc
  5304  0296  2AA2               	goto	l6002
  5305                           
  5306                           ;PIR_B1.c: 122: _PIR.RangeTime1 = 0;
  5307  0297  01C6               	clrf	(__PIR^(0+128)+38)
  5308                           
  5309                           ;PIR_B1.c: 124: if (_PIR.RangeValue == 25) {
  5310  0298  0848               	movf	(__PIR^(0+128)+40),w
  5311  0299  3A19               	xorlw	25
  5312  029A  1903               	btfsc	3,2
  5313  029B  2AB7               	goto	L10
  5314                           
  5315                           ;PIR_B1.c: 126: } else if (_PIR.RangeValue == (25+10)) {
  5316                           
  5317                           ;PIR_B1.c: 125: _PIR.RangeValue = (25+10);
  5318  029C  0848               	movf	(__PIR^(0+128)+40),w
  5319  029D  3A23               	xorlw	35
  5320  029E  1D03               	skipz
  5321  029F  2AC5               	goto	l6018
  5322                           
  5323                           ;PIR_B1.c: 127: _PIR.RangeValue = (25+20);
  5324  02A0  302D               	movlw	45
  5325  02A1  2ABE               	goto	L9
  5326  02A2                     l6002:	
  5327                           ;PIR_B1.c: 128: }
  5328                           ;PIR_B1.c: 129: } else if (_PIR.RangeCount <= 10) {
  5329                           
  5330  02A2  300B               	movlw	11
  5331  02A3  0247               	subwf	(__PIR^(0+128)+39),w
  5332  02A4  1803               	skipnc
  5333  02A5  2AC5               	goto	l6018
  5334                           
  5335                           ;PIR_B1.c: 130: _PIR.RangeTime1++;
  5336  02A6  3001               	movlw	1
  5337  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  5338  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  5339  02A9  00DD               	movwf	??_PIR_Main
  5340  02AA  085D               	movf	??_PIR_Main,w
  5341  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  5342  02AC  1303               	bcf	3,6	;RP1=0, select bank1
  5343  02AD  07C6               	addwf	(__PIR^(0+128)+38),f
  5344                           
  5345                           ;PIR_B1.c: 131: if (_PIR.RangeTime1 == 2) {
  5346  02AE  0846               	movf	(__PIR^(0+128)+38),w
  5347  02AF  3A02               	xorlw	2
  5348  02B0  1D03               	skipz
  5349  02B1  2AC5               	goto	l6018
  5350                           
  5351                           ;PIR_B1.c: 132: _PIR.RangeTime1 = 0;
  5352  02B2  01C6               	clrf	(__PIR^(0+128)+38)
  5353                           
  5354                           ;PIR_B1.c: 134: if (_PIR.RangeValue == (25+20)) {
  5355  02B3  0848               	movf	(__PIR^(0+128)+40),w
  5356  02B4  3A2D               	xorlw	45
  5357  02B5  1D03               	skipz
  5358  02B6  2AB9               	goto	l6014
  5359  02B7                     L10:	
  5360                           
  5361                           ;PIR_B1.c: 135: _PIR.RangeValue = (25+10);
  5362  02B7  3023               	movlw	35
  5363  02B8  2ABE               	goto	L9
  5364  02B9                     l6014:	
  5365                           ;PIR_B1.c: 136: } else if (_PIR.RangeValue == (25+10)) {
  5366                           
  5367  02B9  0848               	movf	(__PIR^(0+128)+40),w
  5368  02BA  3A23               	xorlw	35
  5369  02BB  1D03               	skipz
  5370  02BC  2AC5               	goto	l6018
  5371                           
  5372                           ;PIR_B1.c: 137: _PIR.RangeValue = 25;
  5373  02BD  3019               	movlw	25
  5374  02BE                     L9:	
  5375  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  5376  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  5377  02C0  00DD               	movwf	??_PIR_Main
  5378  02C1  085D               	movf	??_PIR_Main,w
  5379  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  5380  02C3  1303               	bcf	3,6	;RP1=0, select bank1
  5381  02C4  00C8               	movwf	(__PIR^(0+128)+40)
  5382  02C5                     l6018:	
  5383                           
  5384                           ;PIR_B1.c: 138: }
  5385                           ;PIR_B1.c: 139: }
  5386                           ;PIR_B1.c: 140: }
  5387                           ;PIR_B1.c: 141: _PIR.RangeCount = 0;
  5388  02C5  01C7               	clrf	(__PIR^(0+128)+39)
  5389  02C6                     l6020:	
  5390                           
  5391                           ;PIR_B1.c: 142: }
  5392                           ;PIR_B1.c: 145: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  5393                           ;PIR_B1.c: 146: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  5394  02C6  0848               	movf	(__PIR^(0+128)+40),w
  5395  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  5396  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  5397  02C9  00DD               	movwf	??_PIR_Main
  5398  02CA  01DE               	clrf	??_PIR_Main+1
  5399  02CB  09DD               	comf	??_PIR_Main,f
  5400  02CC  09DE               	comf	??_PIR_Main+1,f
  5401  02CD  0ADD               	incf	??_PIR_Main,f
  5402  02CE  1903               	skipnz
  5403  02CF  0ADE               	incf	??_PIR_Main+1,f
  5404  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  5405  02D1  1303               	bcf	3,6	;RP1=0, select bank1
  5406  02D2  0823               	movf	(__PIR^(0+128)+3),w
  5407  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  5408  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  5409  02D5  075D               	addwf	??_PIR_Main,w
  5410  02D6  00DF               	movwf	??_PIR_Main+2
  5411  02D7  085E               	movf	??_PIR_Main+1,w
  5412  02D8  1803               	skipnc
  5413  02D9  0A5E               	incf	??_PIR_Main+1,w
  5414  02DA  00E0               	movwf	??_PIR_Main+3
  5415  02DB  0860               	movf	??_PIR_Main+3,w
  5416  02DC  3A80               	xorlw	128
  5417  02DD  3C80               	sublw	128
  5418  02DE  1D03               	skipz
  5419  02DF  2AE4               	goto	u7595
  5420  02E0  085F               	movf	??_PIR_Main+2,w
  5421  02E1  1683               	bsf	3,5	;RP0=1, select bank1
  5422  02E2  1303               	bcf	3,6	;RP1=0, select bank1
  5423  02E3  0221               	subwf	(__PIR^(0+128)+1),w
  5424  02E4                     u7595:	
  5425  02E4  1C03               	skipc
  5426  02E5  2B03               	goto	l6026
  5427  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  5428  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  5429  02E8  0823               	movf	(__PIR^(0+128)+3),w
  5430  02E9  0748               	addwf	(__PIR^(0+128)+40),w
  5431  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  5432  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  5433  02EC  00DD               	movwf	??_PIR_Main
  5434  02ED  01DE               	clrf	??_PIR_Main+1
  5435  02EE  0DDE               	rlf	??_PIR_Main+1,f
  5436  02EF  085E               	movf	??_PIR_Main+1,w
  5437  02F0  3A80               	xorlw	128
  5438  02F1  00DF               	movwf	??_PIR_Main+2
  5439  02F2  3080               	movlw	128
  5440  02F3  025F               	subwf	??_PIR_Main+2,w
  5441  02F4  1D03               	skipz
  5442  02F5  2AFC               	goto	u7605
  5443  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  5444  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  5445  02F8  0821               	movf	(__PIR^(0+128)+1),w
  5446  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  5447  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  5448  02FB  025D               	subwf	??_PIR_Main,w
  5449  02FC                     u7605:	
  5450  02FC  1C03               	skipc
  5451  02FD  2B03               	goto	l6026
  5452                           
  5453                           ;PIR_B1.c: 148: _PIR.Count = 0;
  5454  02FE  1683               	bsf	3,5	;RP0=1, select bank1
  5455  02FF  1303               	bcf	3,6	;RP1=0, select bank1
  5456  0300  01BE               	clrf	(__PIR^(0+128)+30)
  5457  0301  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5458                           
  5459                           ;PIR_B1.c: 159: } else {
  5460  0302  2B48               	goto	l6042
  5461  0303                     l6026:	
  5462                           
  5463                           ;PIR_B1.c: 162: _PIR.RangeCount++;
  5464  0303  3001               	movlw	1
  5465  0304  1283               	bcf	3,5	;RP0=0, select bank0
  5466  0305  1303               	bcf	3,6	;RP1=0, select bank0
  5467  0306  00DD               	movwf	??_PIR_Main
  5468  0307  085D               	movf	??_PIR_Main,w
  5469  0308  1683               	bsf	3,5	;RP0=1, select bank1
  5470  0309  1303               	bcf	3,6	;RP1=0, select bank1
  5471  030A  07C7               	addwf	(__PIR^(0+128)+39),f
  5472                           
  5473                           ;PIR_B1.c: 163: _PIR.Count++;
  5474  030B  3001               	movlw	1
  5475  030C  07BE               	addwf	(__PIR^(0+128)+30),f
  5476  030D  1803               	skipnc
  5477  030E  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5478  030F  3000               	movlw	0
  5479  0310  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5480                           
  5481                           ;PIR_B1.c: 165: TriggerValue = LightsStatus == 1 ? 3 : 3;
  5482  0311  1283               	bcf	3,5	;RP0=0, select bank0
  5483  0312  1303               	bcf	3,6	;RP1=0, select bank0
  5484  0313  0867               	movf	PIR_Main@LightsStatus,w
  5485  0314  3A01               	xorlw	1
  5486  0315  1903               	skipnz
  5487  0316  2B17               	goto	l6034
  5488  0317                     l6034:	
  5489  0317  3003               	movlw	3
  5490  0318  00E2               	movwf	_PIR_Main$3214
  5491  0319  3000               	movlw	0
  5492  031A  00E3               	movwf	_PIR_Main$3214+1
  5493  031B  0862               	movf	_PIR_Main$3214,w
  5494  031C  00DD               	movwf	??_PIR_Main
  5495  031D  085D               	movf	??_PIR_Main,w
  5496  031E  00E5               	movwf	PIR_Main@TriggerValue
  5497                           
  5498                           ;PIR_B1.c: 167: if (_PIR.Count == TriggerValue) {
  5499  031F  0865               	movf	PIR_Main@TriggerValue,w
  5500  0320  00DD               	movwf	??_PIR_Main
  5501  0321  01DE               	clrf	??_PIR_Main+1
  5502  0322  1683               	bsf	3,5	;RP0=1, select bank1
  5503  0323  1303               	bcf	3,6	;RP1=0, select bank1
  5504  0324  083F               	movf	((__PIR+1)^(0+128)+30),w
  5505  0325  1283               	bcf	3,5	;RP0=0, select bank0
  5506  0326  1303               	bcf	3,6	;RP1=0, select bank0
  5507  0327  065E               	xorwf	??_PIR_Main+1,w
  5508  0328  1D03               	skipz
  5509  0329  2B30               	goto	u7625
  5510  032A  1683               	bsf	3,5	;RP0=1, select bank1
  5511  032B  1303               	bcf	3,6	;RP1=0, select bank1
  5512  032C  083E               	movf	(__PIR^(0+128)+30),w
  5513  032D  1283               	bcf	3,5	;RP0=0, select bank0
  5514  032E  1303               	bcf	3,6	;RP1=0, select bank0
  5515  032F  065D               	xorwf	??_PIR_Main,w
  5516  0330                     u7625:	
  5517  0330  1D03               	skipz
  5518  0331  2B48               	goto	l6042
  5519                           
  5520                           ;PIR_B1.c: 168: _PIR.Count = 0;
  5521  0332  1683               	bsf	3,5	;RP0=1, select bank1
  5522  0333  1303               	bcf	3,6	;RP1=0, select bank1
  5523  0334  01BE               	clrf	(__PIR^(0+128)+30)
  5524  0335  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5525                           
  5526                           ;PIR_B1.c: 170: _PIR.CloseTimeSeconds = 0;
  5527  0336  01C2               	clrf	(__PIR^(0+128)+34)
  5528                           
  5529                           ;PIR_B1.c: 171: _PIR.CloseTimeMinutes = 0;
  5530  0337  01C0               	clrf	(__PIR^(0+128)+32)
  5531  0338  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5532                           
  5533                           ;PIR_B1.c: 177: if (getLights_Status(1) == 0) {
  5534  0339  3001               	movlw	1
  5535  033A  158A  21F4  118A   	fcall	_getLights_Status
  5536  033D  3800               	iorlw	0
  5537  033E  1D03               	skipz
  5538  033F  2B48               	goto	l6042
  5539                           
  5540                           ;PIR_B1.c: 178: setLights_SwOn(1);
  5541  0340  3001               	movlw	1
  5542  0341  158A  23C4  118A   	fcall	_setLights_SwOn
  5543                           
  5544                           ;PIR_B1.c: 179: setLights_SwOff(1);
  5545  0344  3001               	movlw	1
  5546  0345  158A  232E  118A   	fcall	_setLights_SwOff
  5547  0348                     l6042:	
  5548                           
  5549                           ;PIR_B1.c: 181: }
  5550                           ;PIR_B1.c: 243: }
  5551                           ;PIR_B1.c: 244: }
  5552                           ;PIR_B1.c: 245: }
  5553                           ;PIR_B1.c: 246: }
  5554                           ;PIR_B1.c: 247: }
  5555                           ;PIR_B1.c: 248: }
  5556                           ;PIR_B1.c: 249: if (_PIR.OK == 0) {
  5557  0348  1683               	bsf	3,5	;RP0=1, select bank1
  5558  0349  1303               	bcf	3,6	;RP1=0, select bank1
  5559  034A  19A0               	btfsc	__PIR^(0+128),3
  5560  034B  2B71               	goto	l6056
  5561                           
  5562                           ;PIR_B1.c: 250: _PIR.Count++;
  5563  034C  3001               	movlw	1
  5564  034D  07BE               	addwf	(__PIR^(0+128)+30),f
  5565  034E  1803               	skipnc
  5566  034F  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5567  0350  3000               	movlw	0
  5568  0351  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5569                           
  5570                           ;PIR_B1.c: 251: if (_PIR.Count == (30000 / 20)) {
  5571  0352  3005               	movlw	5
  5572  0353  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  5573  0354  1D03               	skipz
  5574  0355  2B58               	goto	u7655
  5575  0356  30DC               	movlw	220
  5576  0357  063E               	xorwf	(__PIR^(0+128)+30),w
  5577  0358                     u7655:	
  5578  0358  1D03               	skipz
  5579  0359  0008               	return
  5580                           
  5581                           ;PIR_B1.c: 252: _PIR.Count = 0;
  5582  035A  01BE               	clrf	(__PIR^(0+128)+30)
  5583  035B  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5584                           
  5585                           ;PIR_B1.c: 253: _PIR.OK = 1;
  5586  035C  15A0               	bsf	__PIR^(0+128),3
  5587                           
  5588                           ;PIR_B1.c: 258: if (cds == 0) {
  5589  035D  1283               	bcf	3,5	;RP0=0, select bank0
  5590  035E  1303               	bcf	3,6	;RP1=0, select bank0
  5591  035F  08E6               	movf	PIR_Main@cds,f
  5592  0360  1D03               	skipz
  5593  0361  0008               	return
  5594                           
  5595                           ;PIR_B1.c: 261: if (getLights_Status(1) == 1) {
  5596  0362  3001               	movlw	1
  5597  0363  158A  21F4  118A   	fcall	_getLights_Status
  5598  0366  3A01               	xorlw	1
  5599  0367  1D03               	skipz
  5600  0368  0008               	return
  5601                           
  5602                           ;PIR_B1.c: 262: setLights_SwOn(1);
  5603  0369  3001               	movlw	1
  5604  036A  158A  23C4  118A   	fcall	_setLights_SwOn
  5605                           
  5606                           ;PIR_B1.c: 263: setLights_SwOff(1);
  5607  036D  3001               	movlw	1
  5608  036E  158A  232E         	fcall	_setLights_SwOff
  5609                           
  5610                           ;PIR_B1.c: 265: }
  5611                           ;PIR_B1.c: 277: }
  5612                           ;PIR_B1.c: 278: }
  5613                           ;PIR_B1.c: 279: } else {
  5614  0370  0008               	return
  5615  0371                     l6056:	
  5616                           
  5617                           ;PIR_B1.c: 280: if (LightsStatus == 1) {
  5618  0371  1283               	bcf	3,5	;RP0=0, select bank0
  5619  0372  1303               	bcf	3,6	;RP1=0, select bank0
  5620  0373  0867               	movf	PIR_Main@LightsStatus,w
  5621  0374  3A01               	xorlw	1
  5622  0375  1D03               	skipz
  5623  0376  0008               	return
  5624                           
  5625                           ;PIR_B1.c: 281: _PIR.CloseTimeSeconds++;
  5626  0377  3001               	movlw	1
  5627  0378  00DD               	movwf	??_PIR_Main
  5628  0379  085D               	movf	??_PIR_Main,w
  5629  037A  1683               	bsf	3,5	;RP0=1, select bank1
  5630  037B  1303               	bcf	3,6	;RP1=0, select bank1
  5631  037C  07C2               	addwf	(__PIR^(0+128)+34),f
  5632                           
  5633                           ;PIR_B1.c: 282: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  5634  037D  0842               	movf	(__PIR^(0+128)+34),w
  5635  037E  3A32               	xorlw	50
  5636  037F  1D03               	skipz
  5637  0380  0008               	return
  5638                           
  5639                           ;PIR_B1.c: 283: _PIR.CloseTimeSeconds = 0;
  5640  0381  01C2               	clrf	(__PIR^(0+128)+34)
  5641                           
  5642                           ;PIR_B1.c: 284: _PIR.CloseTimeMinutes++;
  5643  0382  3001               	movlw	1
  5644  0383  07C0               	addwf	(__PIR^(0+128)+32),f
  5645  0384  1803               	skipnc
  5646  0385  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  5647  0386  3000               	movlw	0
  5648  0387  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  5649                           
  5650                           ;PIR_B1.c: 285: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5651  0388  0844               	movf	((__PIR+1)^(0+128)+35),w
  5652  0389  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  5653  038A  1D03               	skipz
  5654  038B  2B8E               	goto	u7705
  5655  038C  0843               	movf	(__PIR^(0+128)+35),w
  5656  038D  0640               	xorwf	(__PIR^(0+128)+32),w
  5657  038E                     u7705:	
  5658  038E  1D03               	skipz
  5659  038F  0008               	return
  5660                           
  5661                           ;PIR_B1.c: 286: _PIR.CloseTimeMinutes = 0;
  5662  0390  01C0               	clrf	(__PIR^(0+128)+32)
  5663  0391  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5664                           
  5665                           ;PIR_B1.c: 292: if (getLights_Status(1) == 1) {
  5666  0392  3001               	movlw	1
  5667  0393  158A  21F4  118A   	fcall	_getLights_Status
  5668  0396  3A01               	xorlw	1
  5669  0397  1D03               	skipz
  5670  0398  0008               	return
  5671                           
  5672                           ;PIR_B1.c: 293: setLights_SwOn(1);
  5673  0399  3001               	movlw	1
  5674  039A  158A  23C4  118A   	fcall	_setLights_SwOn
  5675                           
  5676                           ;PIR_B1.c: 294: setLights_SwOff(1);
  5677  039D  3001               	movlw	1
  5678  039E  158A  232E         	fcall	_setLights_SwOff
  5679                           
  5680                           ;PIR_B1.c: 296: }
  5681                           ;PIR_B1.c: 308: }
  5682                           ;PIR_B1.c: 309: }
  5683                           ;PIR_B1.c: 310: }
  5684                           ;PIR_B1.c: 311: }
  5685                           ;PIR_B1.c: 312: } else {
  5686  03A0  0008               	return
  5687  03A1                     l1040:	
  5688                           
  5689                           ;PIR_B1.c: 313: if (myMain.PowerON == 1) {
  5690  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  5691  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  5692  03A3  1C31               	btfss	_myMain,0
  5693  03A4  0008               	return
  5694                           
  5695                           ;PIR_B1.c: 314: _PIR.Enable = 1;
  5696  03A5  1683               	bsf	3,5	;RP0=1, select bank1
  5697  03A6  1303               	bcf	3,6	;RP1=0, select bank1
  5698  03A7  1420               	bsf	__PIR^(0+128),0
  5699                           
  5700                           ;PIR_B1.c: 321: if (getLights_Status(1) == 0) {
  5701  03A8  3001               	movlw	1
  5702  03A9  158A  21F4  118A   	fcall	_getLights_Status
  5703  03AC  3800               	iorlw	0
  5704  03AD  1D03               	skipz
  5705  03AE  0008               	return
  5706                           
  5707                           ;PIR_B1.c: 322: setLights_SwOn(1);
  5708  03AF  3001               	movlw	1
  5709  03B0  158A  23C4  118A   	fcall	_setLights_SwOn
  5710                           
  5711                           ;PIR_B1.c: 323: setLights_SwOff(1);
  5712  03B3  3001               	movlw	1
  5713  03B4  158A  232E         	fcall	_setLights_SwOff
  5714  03B6  0008               	return
  5715  03B7                     __end_of_PIR_Main:	
  5716                           
  5717                           	psect	text27
  5718  0966                     __ptext27:	
  5719 ;; *************** function _getCDS_Status *****************
  5720 ;; Defined at:
  5721 ;;		line 42 in file "../src/CDS_B1.c"
  5722 ;; Parameters:    Size  Location     Type
  5723 ;;		None
  5724 ;; Auto vars:     Size  Location     Type
  5725 ;;  status          1    4[COMMON] unsigned char 
  5726 ;; Return value:  Size  Location     Type
  5727 ;;                  1    wreg      unsigned char 
  5728 ;; Registers used:
  5729 ;;		wreg, status,2
  5730 ;; Tracked objects:
  5731 ;;		On entry : 0/0
  5732 ;;		On exit  : 0/0
  5733 ;;		Unchanged: 0/0
  5734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5735 ;;      Params:         0       0       0       0
  5736 ;;      Locals:         1       0       0       0
  5737 ;;      Temps:          0       0       0       0
  5738 ;;      Totals:         1       0       0       0
  5739 ;;Total ram usage:        1 bytes
  5740 ;; Hardware stack levels used:    1
  5741 ;; Hardware stack levels required when called:    2
  5742 ;; This function calls:
  5743 ;;		Nothing
  5744 ;; This function is called by:
  5745 ;;		_PIR_Main
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           
  5750                           ;psect for function _getCDS_Status
  5751  0966                     _getCDS_Status:	
  5752                           
  5753                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5754                           
  5755                           ;incstack = 0
  5756                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5757  0966  3000               	movlw	0
  5758  0967  1283               	bcf	3,5	;RP0=0, select bank0
  5759  0968  1303               	bcf	3,6	;RP1=0, select bank0
  5760  0969  1A36               	btfsc	__CDS,4
  5761  096A  3001               	movlw	1
  5762  096B  00F4               	movwf	getCDS_Status@status
  5763                           
  5764                           ;CDS_B1.c: 44: return status;
  5765  096C  0874               	movf	getCDS_Status@status,w
  5766  096D  0008               	return
  5767  096E                     __end_of_getCDS_Status:	
  5768                           
  5769                           	psect	text28
  5770  0976                     __ptext28:	
  5771 ;; *************** function _PIR_Initialization *****************
  5772 ;; Defined at:
  5773 ;;		line 7 in file "../src/PIR_B1.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;		None
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;		None
  5778 ;; Return value:  Size  Location     Type
  5779 ;;		None               void
  5780 ;; Registers used:
  5781 ;;		wreg
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5787 ;;      Params:         0       0       0       0
  5788 ;;      Locals:         0       0       0       0
  5789 ;;      Temps:          1       0       0       0
  5790 ;;      Totals:         1       0       0       0
  5791 ;;Total ram usage:        1 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:    2
  5794 ;; This function calls:
  5795 ;;		Nothing
  5796 ;; This function is called by:
  5797 ;;		_main
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           
  5802                           ;psect for function _PIR_Initialization
  5803  0976                     _PIR_Initialization:	
  5804                           
  5805                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5806                           
  5807                           ;incstack = 0
  5808                           ; Regs used in _PIR_Initialization: [wreg]
  5809  0976  3019               	movlw	25
  5810  0977  00F4               	movwf	??_PIR_Initialization
  5811  0978  0874               	movf	??_PIR_Initialization,w
  5812  0979  1683               	bsf	3,5	;RP0=1, select bank1
  5813  097A  1303               	bcf	3,6	;RP1=0, select bank1
  5814  097B  00C8               	movwf	(__PIR^(0+128)+40)
  5815                           
  5816                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5817  097C  3005               	movlw	5
  5818  097D  00C3               	movwf	(__PIR^(0+128)+35)
  5819  097E  3000               	movlw	0
  5820  097F  00C4               	movwf	(__PIR^(0+128)+36)
  5821  0980  0008               	return
  5822  0981                     __end_of_PIR_Initialization:	
  5823                           
  5824                           	psect	text29
  5825  09C5                     __ptext29:	
  5826 ;; *************** function _Mcu_Initialization *****************
  5827 ;; Defined at:
  5828 ;;		line 30 in file "../src/MCU_B1.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;		None
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;		None
  5833 ;; Return value:  Size  Location     Type
  5834 ;;		None               void
  5835 ;; Registers used:
  5836 ;;		wreg, status,2, status,0, pclath, cstack
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5842 ;;      Params:         0       0       0       0
  5843 ;;      Locals:         0       0       0       0
  5844 ;;      Temps:          0       0       0       0
  5845 ;;      Totals:         0       0       0       0
  5846 ;;Total ram usage:        0 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; Hardware stack levels required when called:    3
  5849 ;; This function calls:
  5850 ;;		_ADC_Set
  5851 ;;		_Fosc_Set
  5852 ;;		_IO_Set
  5853 ;;		_TMR1_Set
  5854 ;;		_WDT_Set
  5855 ;; This function is called by:
  5856 ;;		_main
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           
  5861                           ;psect for function _Mcu_Initialization
  5862  09C5                     _Mcu_Initialization:	
  5863                           
  5864                           ;MCU_B1.c: 32: Fosc_Set();
  5865                           
  5866                           ;incstack = 0
  5867                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5868  09C5  158A  2131  158A   	fcall	_Fosc_Set
  5869                           
  5870                           ;MCU_B1.c: 34: IO_Set();
  5871  09C8  158A  22FC  158A   	fcall	_IO_Set
  5872                           
  5873                           ;MCU_B1.c: 36: ;;
  5874                           ;MCU_B1.c: 38: TMR1_Set();
  5875  09CB  158A  219A  158A   	fcall	_TMR1_Set
  5876                           
  5877                           ;MCU_B1.c: 40: ADC_Set();
  5878  09CE  158A  214F  158A   	fcall	_ADC_Set
  5879                           
  5880                           ;MCU_B1.c: 42: ;;
  5881                           ;MCU_B1.c: 44: ;;
  5882                           ;MCU_B1.c: 46: ;;
  5883                           ;MCU_B1.c: 48: ;;
  5884                           ;MCU_B1.c: 50: ;;
  5885                           ;MCU_B1.c: 52: WDT_Set();
  5886  09D1  158A  21A8         	fcall	_WDT_Set
  5887  09D3  0008               	return
  5888  09D4                     __end_of_Mcu_Initialization:	
  5889                           
  5890                           	psect	text30
  5891  09A8                     __ptext30:	
  5892 ;; *************** function _WDT_Set *****************
  5893 ;; Defined at:
  5894 ;;		line 1089 in file "../src/MCU_B1.c"
  5895 ;; Parameters:    Size  Location     Type
  5896 ;;		None
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;		None
  5899 ;; Return value:  Size  Location     Type
  5900 ;;		None               void
  5901 ;; Registers used:
  5902 ;;		wreg
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5908 ;;      Params:         0       0       0       0
  5909 ;;      Locals:         0       0       0       0
  5910 ;;      Temps:          1       0       0       0
  5911 ;;      Totals:         1       0       0       0
  5912 ;;Total ram usage:        1 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:    2
  5915 ;; This function calls:
  5916 ;;		Nothing
  5917 ;; This function is called by:
  5918 ;;		_Mcu_Initialization
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           
  5923                           ;psect for function _WDT_Set
  5924  09A8                     _WDT_Set:	
  5925                           
  5926                           ;MCU_B1.c: 1091: PSA = 1;
  5927                           
  5928                           ;incstack = 0
  5929                           ; Regs used in _WDT_Set: [wreg]
  5930  09A8  1683               	bsf	3,5	;RP0=1, select bank1
  5931  09A9  1303               	bcf	3,6	;RP1=0, select bank1
  5932  09AA  1581               	bsf	1,3	;volatile
  5933                           
  5934                           ;MCU_B1.c: 1092: PS0 = 1;
  5935  09AB  1401               	bsf	1,0	;volatile
  5936                           
  5937                           ;MCU_B1.c: 1093: PS1 = 1;
  5938  09AC  1481               	bsf	1,1	;volatile
  5939                           
  5940                           ;MCU_B1.c: 1094: PS2 = 1;
  5941  09AD  1501               	bsf	1,2	;volatile
  5942                           
  5943                           ;MCU_B1.c: 1098: WDT.Enable = 1;
  5944  09AE  1283               	bcf	3,5	;RP0=0, select bank0
  5945  09AF  1303               	bcf	3,6	;RP1=0, select bank0
  5946  09B0  143D               	bsf	_WDT,0
  5947                           
  5948                           ;MCU_B1.c: 1099: WDT.Timer = 10;
  5949  09B1  300A               	movlw	10
  5950  09B2  00F4               	movwf	??_WDT_Set
  5951  09B3  0874               	movf	??_WDT_Set,w
  5952  09B4  00BE               	movwf	_WDT+1
  5953  09B5  0008               	return
  5954  09B6                     __end_of_WDT_Set:	
  5955                           
  5956                           	psect	text31
  5957  099A                     __ptext31:	
  5958 ;; *************** function _TMR1_Set *****************
  5959 ;; Defined at:
  5960 ;;		line 226 in file "../src/MCU_B1.c"
  5961 ;; Parameters:    Size  Location     Type
  5962 ;;		None
  5963 ;; Auto vars:     Size  Location     Type
  5964 ;;		None
  5965 ;; Return value:  Size  Location     Type
  5966 ;;		None               void
  5967 ;; Registers used:
  5968 ;;		wreg
  5969 ;; Tracked objects:
  5970 ;;		On entry : 0/0
  5971 ;;		On exit  : 0/0
  5972 ;;		Unchanged: 0/0
  5973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5974 ;;      Params:         0       0       0       0
  5975 ;;      Locals:         0       0       0       0
  5976 ;;      Temps:          0       0       0       0
  5977 ;;      Totals:         0       0       0       0
  5978 ;;Total ram usage:        0 bytes
  5979 ;; Hardware stack levels used:    1
  5980 ;; Hardware stack levels required when called:    2
  5981 ;; This function calls:
  5982 ;;		Nothing
  5983 ;; This function is called by:
  5984 ;;		_Mcu_Initialization
  5985 ;; This function uses a non-reentrant model
  5986 ;;
  5987                           
  5988                           
  5989                           ;psect for function _TMR1_Set
  5990  099A                     _TMR1_Set:	
  5991                           
  5992                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5993                           
  5994                           ;incstack = 0
  5995                           ; Regs used in _TMR1_Set: [wreg]
  5996  099A  3041               	movlw	65
  5997  099B  1283               	bcf	3,5	;RP0=0, select bank0
  5998  099C  1303               	bcf	3,6	;RP1=0, select bank0
  5999  099D  0090               	movwf	16	;volatile
  6000                           
  6001                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  6002  099E  30FA               	movlw	250
  6003  099F  008F               	movwf	15	;volatile
  6004                           
  6005                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  6006  09A0  3038               	movlw	56
  6007  09A1  008E               	movwf	14	;volatile
  6008                           
  6009                           ;MCU_B1.c: 230: TMR1IE = 1;
  6010  09A2  1683               	bsf	3,5	;RP0=1, select bank1
  6011  09A3  1303               	bcf	3,6	;RP1=0, select bank1
  6012  09A4  140C               	bsf	12,0	;volatile
  6013                           
  6014                           ;MCU_B1.c: 231: PEIE = 1;
  6015  09A5  170B               	bsf	11,6	;volatile
  6016                           
  6017                           ;MCU_B1.c: 232: GIE = 1;
  6018  09A6  178B               	bsf	11,7	;volatile
  6019  09A7  0008               	return
  6020  09A8                     __end_of_TMR1_Set:	
  6021                           
  6022                           	psect	text32
  6023  0AFC                     __ptext32:	
  6024 ;; *************** function _IO_Set *****************
  6025 ;; Defined at:
  6026 ;;		line 60 in file "../src/MCU_B1.c"
  6027 ;; Parameters:    Size  Location     Type
  6028 ;;		None
  6029 ;; Auto vars:     Size  Location     Type
  6030 ;;		None
  6031 ;; Return value:  Size  Location     Type
  6032 ;;		None               void
  6033 ;; Registers used:
  6034 ;;		wreg, status,2
  6035 ;; Tracked objects:
  6036 ;;		On entry : 0/0
  6037 ;;		On exit  : 0/0
  6038 ;;		Unchanged: 0/0
  6039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6040 ;;      Params:         0       0       0       0
  6041 ;;      Locals:         0       0       0       0
  6042 ;;      Temps:          0       0       0       0
  6043 ;;      Totals:         0       0       0       0
  6044 ;;Total ram usage:        0 bytes
  6045 ;; Hardware stack levels used:    1
  6046 ;; Hardware stack levels required when called:    2
  6047 ;; This function calls:
  6048 ;;		Nothing
  6049 ;; This function is called by:
  6050 ;;		_Mcu_Initialization
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           
  6055                           ;psect for function _IO_Set
  6056  0AFC                     _IO_Set:	
  6057                           
  6058                           ;MCU_B1.c: 62: TRISA = 0b00101110;;
  6059                           
  6060                           ;incstack = 0
  6061                           ; Regs used in _IO_Set: [wreg+status,2]
  6062  0AFC  302E               	movlw	46
  6063  0AFD  1683               	bsf	3,5	;RP0=1, select bank1
  6064  0AFE  1303               	bcf	3,6	;RP1=0, select bank1
  6065  0AFF  0085               	movwf	5	;volatile
  6066                           
  6067                           ;MCU_B1.c: 63: TRISB = 0b00010101;;
  6068  0B00  3015               	movlw	21
  6069  0B01  0086               	movwf	6	;volatile
  6070                           
  6071                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  6072  0B02  0187               	clrf	7	;volatile
  6073                           
  6074                           ;MCU_B1.c: 65: ANSELA = 0b00101110;;
  6075  0B03  302E               	movlw	46
  6076  0B04  1683               	bsf	3,5	;RP0=1, select bank3
  6077  0B05  1703               	bsf	3,6	;RP1=1, select bank3
  6078  0B06  0085               	movwf	5	;volatile
  6079                           
  6080                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  6081  0B07  3001               	movlw	1
  6082  0B08  0086               	movwf	6	;volatile
  6083                           
  6084                           ;MCU_B1.c: 67: PORTA = 0b00101110;;
  6085  0B09  302E               	movlw	46
  6086  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  6087  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  6088  0B0C  0085               	movwf	5	;volatile
  6089                           
  6090                           ;MCU_B1.c: 68: PORTB = 0b00010101;;
  6091  0B0D  3015               	movlw	21
  6092  0B0E  0086               	movwf	6	;volatile
  6093                           
  6094                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  6095  0B0F  0187               	clrf	7	;volatile
  6096                           
  6097                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  6098  0B10  1683               	bsf	3,5	;RP0=1, select bank1
  6099  0B11  1303               	bcf	3,6	;RP1=0, select bank1
  6100  0B12  0195               	clrf	21	;volatile
  6101  0B13  0008               	return
  6102  0B14                     __end_of_IO_Set:	
  6103                           
  6104                           	psect	text33
  6105  0931                     __ptext33:	
  6106 ;; *************** function _Fosc_Set *****************
  6107 ;; Defined at:
  6108 ;;		line 56 in file "../src/MCU_B1.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;		None
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;		None
  6113 ;; Return value:  Size  Location     Type
  6114 ;;		None               void
  6115 ;; Registers used:
  6116 ;;		wreg
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6122 ;;      Params:         0       0       0       0
  6123 ;;      Locals:         0       0       0       0
  6124 ;;      Temps:          0       0       0       0
  6125 ;;      Totals:         0       0       0       0
  6126 ;;Total ram usage:        0 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:    2
  6129 ;; This function calls:
  6130 ;;		Nothing
  6131 ;; This function is called by:
  6132 ;;		_Mcu_Initialization
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           
  6137                           ;psect for function _Fosc_Set
  6138  0931                     _Fosc_Set:	
  6139                           
  6140                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  6141                           
  6142                           ;incstack = 0
  6143                           ; Regs used in _Fosc_Set: [wreg]
  6144  0931  303C               	movlw	60
  6145  0932  1683               	bsf	3,5	;RP0=1, select bank1
  6146  0933  1303               	bcf	3,6	;RP1=0, select bank1
  6147  0934  0090               	movwf	16	;volatile
  6148  0935  0008               	return
  6149  0936                     __end_of_Fosc_Set:	
  6150                           
  6151                           	psect	text34
  6152  094F                     __ptext34:	
  6153 ;; *************** function _ADC_Set *****************
  6154 ;; Defined at:
  6155 ;;		line 425 in file "../src/MCU_B1.c"
  6156 ;; Parameters:    Size  Location     Type
  6157 ;;		None
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;		None
  6160 ;; Return value:  Size  Location     Type
  6161 ;;		None               void
  6162 ;; Registers used:
  6163 ;;		wreg
  6164 ;; Tracked objects:
  6165 ;;		On entry : 0/0
  6166 ;;		On exit  : 0/0
  6167 ;;		Unchanged: 0/0
  6168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6169 ;;      Params:         0       0       0       0
  6170 ;;      Locals:         0       0       0       0
  6171 ;;      Temps:          0       0       0       0
  6172 ;;      Totals:         0       0       0       0
  6173 ;;Total ram usage:        0 bytes
  6174 ;; Hardware stack levels used:    1
  6175 ;; Hardware stack levels required when called:    2
  6176 ;; This function calls:
  6177 ;;		Nothing
  6178 ;; This function is called by:
  6179 ;;		_Mcu_Initialization
  6180 ;; This function uses a non-reentrant model
  6181 ;;
  6182                           
  6183                           
  6184                           ;psect for function _ADC_Set
  6185  094F                     _ADC_Set:	
  6186                           
  6187                           ;MCU_B1.c: 426: ADCON1 = 0x73;
  6188                           
  6189                           ;incstack = 0
  6190                           ; Regs used in _ADC_Set: [wreg]
  6191  094F  3073               	movlw	115
  6192  0950  1683               	bsf	3,5	;RP0=1, select bank1
  6193  0951  1303               	bcf	3,6	;RP1=0, select bank1
  6194  0952  009F               	movwf	31	;volatile
  6195                           
  6196                           ;MCU_B1.c: 427: FVRCON = 0xc1;
  6197  0953  30C1               	movlw	193
  6198  0954  009D               	movwf	29	;volatile
  6199  0955  0008               	return
  6200  0956                     __end_of_ADC_Set:	
  6201                           
  6202                           	psect	text35
  6203  002D                     __ptext35:	
  6204 ;; *************** function _Load_Main *****************
  6205 ;; Defined at:
  6206 ;;		line 39 in file "../src/OverLoad_B1.c"
  6207 ;; Parameters:    Size  Location     Type
  6208 ;;		None
  6209 ;; Auto vars:     Size  Location     Type
  6210 ;;  i               2   15[BANK0 ] int 
  6211 ;;  LightsCount     1   14[BANK0 ] unsigned char 
  6212 ;;  Load_RunStat    1   13[BANK0 ] unsigned char 
  6213 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  6214 ;;  error           1    9[BANK0 ] unsigned char 
  6215 ;; Return value:  Size  Location     Type
  6216 ;;		None               void
  6217 ;; Registers used:
  6218 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6219 ;; Tracked objects:
  6220 ;;		On entry : 0/0
  6221 ;;		On exit  : 0/0
  6222 ;;		Unchanged: 0/0
  6223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6224 ;;      Params:         0       0       0       0
  6225 ;;      Locals:         0       8       0       0
  6226 ;;      Temps:          0       2       0       0
  6227 ;;      Totals:         0      10       0       0
  6228 ;;Total ram usage:       10 bytes
  6229 ;; Hardware stack levels used:    1
  6230 ;; Hardware stack levels required when called:    3
  6231 ;; This function calls:
  6232 ;;		___lwdiv
  6233 ;;		___wmul
  6234 ;;		_getLight_LoadGO
  6235 ;;		_getLight_Load_Status
  6236 ;;		_getMain_All_Error_Status
  6237 ;;		_getMain_All_LightsStatus
  6238 ;;		_getMain_Lights_Count
  6239 ;;		_setLoad_AH_AL_Restore
  6240 ;; This function is called by:
  6241 ;;		_main
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245                           
  6246                           ;psect for function _Load_Main
  6247  002D                     _Load_Main:	
  6248                           
  6249                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  6250                           
  6251                           ;incstack = 0
  6252                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6253  002D  3000               	movlw	0
  6254  002E  158A  24FE  118A   	fcall	_getMain_All_Error_Status
  6255  0031  1283               	bcf	3,5	;RP0=0, select bank0
  6256  0032  1303               	bcf	3,6	;RP1=0, select bank0
  6257  0033  00DE               	movwf	??_Load_Main
  6258  0034  085E               	movf	??_Load_Main,w
  6259  0035  00E0               	movwf	Load_Main@error
  6260                           
  6261                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
  6262  0036  01E4               	clrf	Load_Main@Load_RunStatus
  6263  0037  01E3               	clrf	Load_Main@ErrorCountValue
  6264  0038  01E5               	clrf	Load_Main@LightsCount
  6265                           
  6266                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  6267  0039  1683               	bsf	3,5	;RP0=1, select bank1
  6268  003A  1303               	bcf	3,6	;RP1=0, select bank1
  6269  003B  1C4A               	btfss	_Load^(0+128),0
  6270  003C  2A0F               	goto	l820
  6271                           
  6272                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
  6273  003D  158A  21E4  118A   	fcall	_getMain_All_LightsStatus
  6274  0040  3800               	iorlw	0
  6275  0041  1D03               	skipz
  6276  0042  2846               	goto	l5786
  6277                           
  6278                           ;OverLoad_B1.c: 45: Load.GO = 0;
  6279  0043  1683               	bsf	3,5	;RP0=1, select bank1
  6280  0044  1303               	bcf	3,6	;RP1=0, select bank1
  6281  0045  2865               	goto	l5802
  6282  0046                     l5786:	
  6283                           ;OverLoad_B1.c: 46: } else {
  6284                           
  6285                           
  6286                           ;OverLoad_B1.c: 69: if (error == 0) {
  6287  0046  1283               	bcf	3,5	;RP0=0, select bank0
  6288  0047  1303               	bcf	3,6	;RP1=0, select bank0
  6289  0048  08E0               	movf	Load_Main@error,f
  6290  0049  1D03               	skipz
  6291  004A  2862               	goto	l823
  6292                           
  6293                           ;OverLoad_B1.c: 70: Load.GO = 1;
  6294  004B  1683               	bsf	3,5	;RP0=1, select bank1
  6295  004C  1303               	bcf	3,6	;RP1=0, select bank1
  6296  004D  14CA               	bsf	_Load^(0+128),1
  6297                           
  6298                           ;OverLoad_B1.c: 72: if (getLight_LoadGO() == 1) {
  6299  004E  158A  2136  118A   	fcall	_getLight_LoadGO
  6300  0051  3A01               	xorlw	1
  6301  0052  1D03               	skipz
  6302  0053  285C               	goto	l824
  6303                           
  6304                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  6305  0054  1683               	bsf	3,5	;RP0=1, select bank1
  6306  0055  1303               	bcf	3,6	;RP1=0, select bank1
  6307  0056  1DCA               	btfss	_Load^(0+128),3
  6308  0057  1BCA               	btfsc	_Load^(0+128),7
  6309  0058  2866               	goto	l822
  6310                           
  6311                           ;OverLoad_B1.c: 74: Load.Run = 1;
  6312  0059  15CA               	bsf	_Load^(0+128),3
  6313                           
  6314                           ;OverLoad_B1.c: 75: Load.Count = 0;
  6315  005A  01E3               	clrf	(_Load^(0+128)+25)
  6316                           
  6317                           ;OverLoad_B1.c: 76: }
  6318                           ;OverLoad_B1.c: 77: } else {
  6319  005B  2866               	goto	l822
  6320  005C                     l824:	
  6321                           
  6322                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  6323  005C  1683               	bsf	3,5	;RP0=1, select bank1
  6324  005D  1303               	bcf	3,6	;RP1=0, select bank1
  6325  005E  1FCA               	btfss	_Load^(0+128),7
  6326  005F  2866               	goto	l822
  6327                           
  6328                           ;OverLoad_B1.c: 79: Load.OK = 0;
  6329  0060  13CA               	bcf	_Load^(0+128),7
  6330                           
  6331                           ;OverLoad_B1.c: 80: }
  6332                           ;OverLoad_B1.c: 81: }
  6333                           ;OverLoad_B1.c: 82: } else {
  6334  0061  2866               	goto	l822
  6335  0062                     l823:	
  6336                           
  6337                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  6338  0062  1683               	bsf	3,5	;RP0=1, select bank1
  6339  0063  1303               	bcf	3,6	;RP1=0, select bank1
  6340  0064  18CA               	btfsc	_Load^(0+128),1
  6341  0065                     l5802:	
  6342                           
  6343                           ;OverLoad_B1.c: 84: Load.GO = 0;
  6344  0065  10CA               	bcf	_Load^(0+128),1
  6345  0066                     l822:	
  6346                           
  6347                           ;OverLoad_B1.c: 85: }
  6348                           ;OverLoad_B1.c: 86: }
  6349                           ;OverLoad_B1.c: 88: }
  6350                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  6351  0066  1CCA               	btfss	_Load^(0+128),1
  6352  0067  29E8               	goto	l830
  6353                           
  6354                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  6355  0068  154A               	bsf	_Load^(0+128),2
  6356                           
  6357                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  6358  0069  1E4A               	btfss	_Load^(0+128),4
  6359  006A  29E6               	goto	l831
  6360                           
  6361                           ;OverLoad_B1.c: 95: Load.Time++;
  6362  006B  3001               	movlw	1
  6363  006C  07CB               	addwf	(_Load^(0+128)+1),f
  6364  006D  1803               	skipnc
  6365  006E  0ACC               	incf	((_Load+1)^(0+128)+1),f
  6366  006F  3000               	movlw	0
  6367  0070  07CC               	addwf	((_Load+1)^(0+128)+1),f
  6368                           
  6369                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
  6370  0071  3000               	movlw	0
  6371  0072  024C               	subwf	((_Load+1)^(0+128)+1),w
  6372  0073  3002               	movlw	2
  6373  0074  1903               	skipnz
  6374  0075  024B               	subwf	(_Load^(0+128)+1),w
  6375  0076  1C03               	skipc
  6376  0077  0008               	return
  6377                           
  6378                           ;OverLoad_B1.c: 97: Load.Time = 0;
  6379  0078  01CB               	clrf	(_Load^(0+128)+1)
  6380  0079  01CC               	clrf	((_Load+1)^(0+128)+1)
  6381                           
  6382                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  6383  007A  124A               	bcf	_Load^(0+128),4
  6384                           
  6385                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  6386  007B  3001               	movlw	1
  6387  007C  1283               	bcf	3,5	;RP0=0, select bank0
  6388  007D  1303               	bcf	3,6	;RP1=0, select bank0
  6389  007E  00E6               	movwf	Load_Main@i
  6390  007F  3000               	movlw	0
  6391  0080  00E7               	movwf	Load_Main@i+1
  6392  0081  0867               	movf	Load_Main@i+1,w
  6393  0082  3A80               	xorlw	128
  6394  0083  00FF               	movwf	127
  6395  0084  3080               	movlw	128
  6396  0085  027F               	subwf	127,w
  6397  0086  1D03               	skipz
  6398  0087  288A               	goto	u7155
  6399  0088  3004               	movlw	4
  6400  0089  0266               	subwf	Load_Main@i,w
  6401  008A                     u7155:	
  6402  008A  1803               	btfsc	3,0
  6403  008B  28C8               	goto	l5824
  6404  008C                     l5818:	
  6405                           
  6406                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  6407  008C  1283               	bcf	3,5	;RP0=0, select bank0
  6408  008D  1303               	bcf	3,6	;RP1=0, select bank0
  6409  008E  0866               	movf	Load_Main@i,w
  6410  008F  3ED4               	addlw	(_Load+10)& (0+255)
  6411  0090  0084               	movwf	4
  6412  0091  1383               	bcf	3,7	;select IRP bank1
  6413  0092  0800               	movf	0,w
  6414  0093  00DE               	movwf	??_Load_Main
  6415  0094  01DF               	clrf	??_Load_Main+1
  6416  0095  085E               	movf	??_Load_Main,w
  6417  0096  1683               	bsf	3,5	;RP0=1, select bank1
  6418  0097  1303               	bcf	3,6	;RP1=0, select bank1
  6419  0098  07CF               	addwf	(_Load^(0+128)+5),f
  6420  0099  1803               	skipnc
  6421  009A  0AD0               	incf	((_Load+1)^(0+128)+5),f
  6422  009B  1283               	bcf	3,5	;RP0=0, select bank0
  6423  009C  1303               	bcf	3,6	;RP1=0, select bank0
  6424  009D  085F               	movf	??_Load_Main+1,w
  6425  009E  1683               	bsf	3,5	;RP0=1, select bank1
  6426  009F  1303               	bcf	3,6	;RP1=0, select bank1
  6427  00A0  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6428                           
  6429                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  6430  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  6431  00A2  1303               	bcf	3,6	;RP1=0, select bank0
  6432  00A3  0866               	movf	Load_Main@i,w
  6433  00A4  3ED9               	addlw	(_Load+15)& (0+255)
  6434  00A5  0084               	movwf	4
  6435  00A6  0800               	movf	0,w
  6436  00A7  00DE               	movwf	??_Load_Main
  6437  00A8  01DF               	clrf	??_Load_Main+1
  6438  00A9  085E               	movf	??_Load_Main,w
  6439  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  6440  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  6441  00AC  07D1               	addwf	(_Load^(0+128)+7),f
  6442  00AD  1803               	skipnc
  6443  00AE  0AD2               	incf	((_Load+1)^(0+128)+7),f
  6444  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  6445  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  6446  00B1  085F               	movf	??_Load_Main+1,w
  6447  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  6448  00B3  1303               	bcf	3,6	;RP1=0, select bank1
  6449  00B4  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6450  00B5  3001               	movlw	1
  6451  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  6452  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  6453  00B8  07E6               	addwf	Load_Main@i,f
  6454  00B9  1803               	skipnc
  6455  00BA  0AE7               	incf	Load_Main@i+1,f
  6456  00BB  3000               	movlw	0
  6457  00BC  07E7               	addwf	Load_Main@i+1,f
  6458  00BD  0867               	movf	Load_Main@i+1,w
  6459  00BE  3A80               	xorlw	128
  6460  00BF  00FF               	movwf	127
  6461  00C0  3080               	movlw	128
  6462  00C1  027F               	subwf	127,w
  6463  00C2  1D03               	skipz
  6464  00C3  28C6               	goto	u7165
  6465  00C4  3004               	movlw	4
  6466  00C5  0266               	subwf	Load_Main@i,w
  6467  00C6                     u7165:	
  6468  00C6  1C03               	skipc
  6469  00C7  288C               	goto	l5818
  6470  00C8                     l5824:	
  6471                           
  6472                           ;OverLoad_B1.c: 103: }
  6473                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  6474  00C8  3003               	movlw	3
  6475  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  6476  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  6477  00CB  00D7               	movwf	___lwdiv@divisor
  6478  00CC  3000               	movlw	0
  6479  00CD  00D8               	movwf	___lwdiv@divisor+1
  6480  00CE  1683               	bsf	3,5	;RP0=1, select bank1
  6481  00CF  1303               	bcf	3,6	;RP1=0, select bank1
  6482  00D0  0850               	movf	((_Load+1)^(0+128)+5),w
  6483  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  6484  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  6485  00D3  01DA               	clrf	___lwdiv@dividend+1
  6486  00D4  07DA               	addwf	___lwdiv@dividend+1,f
  6487  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  6488  00D6  1303               	bcf	3,6	;RP1=0, select bank1
  6489  00D7  084F               	movf	(_Load^(0+128)+5),w
  6490  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  6491  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  6492  00DA  01D9               	clrf	___lwdiv@dividend
  6493  00DB  07D9               	addwf	___lwdiv@dividend,f
  6494  00DC  158A  253C  118A   	fcall	___lwdiv
  6495  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  6496  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  6497  00E1  0858               	movf	?___lwdiv+1,w
  6498  00E2  1683               	bsf	3,5	;RP0=1, select bank1
  6499  00E3  1303               	bcf	3,6	;RP1=0, select bank1
  6500  00E4  01D0               	clrf	((_Load+1)^(0+128)+5)
  6501  00E5  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6502  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  6503  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  6504  00E8  0857               	movf	?___lwdiv,w
  6505  00E9  1683               	bsf	3,5	;RP0=1, select bank1
  6506  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  6507  00EB  01CF               	clrf	(_Load^(0+128)+5)
  6508  00EC  07CF               	addwf	(_Load^(0+128)+5),f
  6509                           
  6510                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  6511  00ED  3003               	movlw	3
  6512  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  6513  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  6514  00F0  00D7               	movwf	___lwdiv@divisor
  6515  00F1  3000               	movlw	0
  6516  00F2  00D8               	movwf	___lwdiv@divisor+1
  6517  00F3  1683               	bsf	3,5	;RP0=1, select bank1
  6518  00F4  1303               	bcf	3,6	;RP1=0, select bank1
  6519  00F5  0852               	movf	((_Load+1)^(0+128)+7),w
  6520  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  6521  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  6522  00F8  01DA               	clrf	___lwdiv@dividend+1
  6523  00F9  07DA               	addwf	___lwdiv@dividend+1,f
  6524  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  6525  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  6526  00FC  0851               	movf	(_Load^(0+128)+7),w
  6527  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  6528  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  6529  00FF  01D9               	clrf	___lwdiv@dividend
  6530  0100  07D9               	addwf	___lwdiv@dividend,f
  6531  0101  158A  253C  118A   	fcall	___lwdiv
  6532  0104  1283               	bcf	3,5	;RP0=0, select bank0
  6533  0105  1303               	bcf	3,6	;RP1=0, select bank0
  6534  0106  0858               	movf	?___lwdiv+1,w
  6535  0107  1683               	bsf	3,5	;RP0=1, select bank1
  6536  0108  1303               	bcf	3,6	;RP1=0, select bank1
  6537  0109  01D2               	clrf	((_Load+1)^(0+128)+7)
  6538  010A  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6539  010B  1283               	bcf	3,5	;RP0=0, select bank0
  6540  010C  1303               	bcf	3,6	;RP1=0, select bank0
  6541  010D  0857               	movf	?___lwdiv,w
  6542  010E  1683               	bsf	3,5	;RP0=1, select bank1
  6543  010F  1303               	bcf	3,6	;RP1=0, select bank1
  6544  0110  01D1               	clrf	(_Load^(0+128)+7)
  6545  0111  07D1               	addwf	(_Load^(0+128)+7),f
  6546                           
  6547                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  6548  0112  158A  22A0  118A   	fcall	_setLoad_AH_AL_Restore
  6549                           
  6550                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
  6551  0115  1683               	bsf	3,5	;RP0=1, select bank1
  6552  0116  1303               	bcf	3,6	;RP1=0, select bank1
  6553  0117  0852               	movf	((_Load+1)^(0+128)+7),w
  6554  0118  0250               	subwf	((_Load+1)^(0+128)+5),w
  6555  0119  1D03               	skipz
  6556  011A  291D               	goto	u7175
  6557  011B  0851               	movf	(_Load^(0+128)+7),w
  6558  011C  024F               	subwf	(_Load^(0+128)+5),w
  6559  011D                     u7175:	
  6560  011D  1C03               	skipc
  6561  011E  0008               	return
  6562                           
  6563                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  6564  011F  0351               	decf	(_Load^(0+128)+7),w
  6565  0120  3AFF               	xorlw	255
  6566  0121  074F               	addwf	(_Load^(0+128)+5),w
  6567  0122  1283               	bcf	3,5	;RP0=0, select bank0
  6568  0123  1303               	bcf	3,6	;RP1=0, select bank0
  6569  0124  00DE               	movwf	??_Load_Main
  6570  0125  085E               	movf	??_Load_Main,w
  6571  0126  1683               	bsf	3,5	;RP0=1, select bank1
  6572  0127  1303               	bcf	3,6	;RP1=0, select bank1
  6573  0128  00DE               	movwf	(_Load^(0+128)+20)
  6574                           
  6575                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  6576  0129  01CF               	clrf	(_Load^(0+128)+5)
  6577  012A  01D0               	clrf	((_Load+1)^(0+128)+5)
  6578                           
  6579                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  6580  012B  01D1               	clrf	(_Load^(0+128)+7)
  6581  012C  01D2               	clrf	((_Load+1)^(0+128)+7)
  6582                           
  6583                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  6584  012D  1DCA               	btfss	_Load^(0+128),3
  6585  012E  2992               	goto	l836
  6586                           
  6587                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  6588  012F  3002               	movlw	2
  6589  0130  0263               	subwf	(_Load^(0+128)+25),w
  6590  0131  1803               	skipnc
  6591  0132  2992               	goto	l836
  6592                           
  6593                           ;OverLoad_B1.c: 115: Load.Count++;
  6594  0133  3001               	movlw	1
  6595  0134  1283               	bcf	3,5	;RP0=0, select bank0
  6596  0135  1303               	bcf	3,6	;RP1=0, select bank0
  6597  0136  00DE               	movwf	??_Load_Main
  6598  0137  085E               	movf	??_Load_Main,w
  6599  0138  1683               	bsf	3,5	;RP0=1, select bank1
  6600  0139  1303               	bcf	3,6	;RP1=0, select bank1
  6601  013A  07E3               	addwf	(_Load^(0+128)+25),f
  6602                           
  6603                           ;OverLoad_B1.c: 120: Load_RunStatus = getLight_Load_Status();
  6604  013B  158A  213C  118A   	fcall	_getLight_Load_Status
  6605  013E  1283               	bcf	3,5	;RP0=0, select bank0
  6606  013F  1303               	bcf	3,6	;RP1=0, select bank0
  6607  0140  00DE               	movwf	??_Load_Main
  6608  0141  085E               	movf	??_Load_Main,w
  6609  0142  00E4               	movwf	Load_Main@Load_RunStatus
  6610                           
  6611                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
  6612  0143  158A  21B6  118A   	fcall	_getMain_Lights_Count
  6613  0146  1283               	bcf	3,5	;RP0=0, select bank0
  6614  0147  1303               	bcf	3,6	;RP1=0, select bank0
  6615  0148  00DE               	movwf	??_Load_Main
  6616  0149  085E               	movf	??_Load_Main,w
  6617  014A  00E5               	movwf	Load_Main@LightsCount
  6618                           
  6619                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
  6620  014B  1683               	bsf	3,5	;RP0=1, select bank1
  6621  014C  1303               	bcf	3,6	;RP1=0, select bank1
  6622  014D  0863               	movf	(_Load^(0+128)+25),w
  6623  014E  3A01               	xorlw	1
  6624  014F  1D03               	skipz
  6625  0150  2953               	goto	l5850
  6626                           
  6627                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(20*2.3);
  6628  0151  302E               	movlw	46
  6629  0152  2960               	goto	L11
  6630  0153                     l5850:	
  6631                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
  6632                           
  6633  0153  0863               	movf	(_Load^(0+128)+25),w
  6634  0154  3A02               	xorlw	2
  6635  0155  1D03               	skipz
  6636  0156  2992               	goto	l836
  6637                           
  6638                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
  6639  0157  1283               	bcf	3,5	;RP0=0, select bank0
  6640  0158  1303               	bcf	3,6	;RP1=0, select bank0
  6641  0159  0865               	movf	Load_Main@LightsCount,w
  6642  015A  3A01               	xorlw	1
  6643  015B  1D03               	skipz
  6644  015C  2963               	goto	l5856
  6645                           
  6646                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(4.5*2.3);
  6647  015D  300A               	movlw	10
  6648  015E  1683               	bsf	3,5	;RP0=1, select bank1
  6649  015F  1303               	bcf	3,6	;RP1=0, select bank1
  6650  0160                     L11:	
  6651  0160  00E1               	movwf	(_Load^(0+128)+23)
  6652  0161  3000               	movlw	0
  6653  0162  2991               	goto	L12
  6654  0163                     l5856:	
  6655                           ;OverLoad_B1.c: 130: } else {
  6656                           
  6657                           
  6658                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
  6659  0163  1283               	bcf	3,5	;RP0=0, select bank0
  6660  0164  08E4               	movf	Load_Main@Load_RunStatus,f
  6661  0165  1D03               	skipz
  6662  0166  2984               	goto	l5860
  6663                           
  6664                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(4.5*2.3) * LightsCount;
  6665  0167  0865               	movf	Load_Main@LightsCount,w
  6666  0168  00DE               	movwf	??_Load_Main
  6667  0169  01DF               	clrf	??_Load_Main+1
  6668  016A  085E               	movf	??_Load_Main,w
  6669  016B  00D7               	movwf	___wmul@multiplier
  6670  016C  085F               	movf	??_Load_Main+1,w
  6671  016D  00D8               	movwf	___wmul@multiplier+1
  6672  016E  300A               	movlw	10
  6673  016F  00D9               	movwf	___wmul@multiplicand
  6674  0170  3000               	movlw	0
  6675  0171  00DA               	movwf	___wmul@multiplicand+1
  6676  0172  158A  23E9  118A   	fcall	___wmul
  6677  0175  1283               	bcf	3,5	;RP0=0, select bank0
  6678  0176  1303               	bcf	3,6	;RP1=0, select bank0
  6679  0177  0858               	movf	?___wmul+1,w
  6680  0178  1683               	bsf	3,5	;RP0=1, select bank1
  6681  0179  1303               	bcf	3,6	;RP1=0, select bank1
  6682  017A  01E2               	clrf	((_Load+1)^(0+128)+23)
  6683  017B  07E2               	addwf	((_Load+1)^(0+128)+23),f
  6684  017C  1283               	bcf	3,5	;RP0=0, select bank0
  6685  017D  1303               	bcf	3,6	;RP1=0, select bank0
  6686  017E  0857               	movf	?___wmul,w
  6687  017F  1683               	bsf	3,5	;RP0=1, select bank1
  6688  0180  1303               	bcf	3,6	;RP1=0, select bank1
  6689  0181  01E1               	clrf	(_Load^(0+128)+23)
  6690  0182  07E1               	addwf	(_Load^(0+128)+23),f
  6691                           
  6692                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
  6693  0183  2992               	goto	l836
  6694  0184                     l5860:	
  6695  0184  1283               	bcf	3,5	;RP0=0, select bank0
  6696  0185  0864               	movf	Load_Main@Load_RunStatus,w
  6697  0186  3A01               	xorlw	1
  6698  0187  1D03               	skipz
  6699  0188  2992               	goto	l836
  6700                           
  6701                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(4.5*2.3) + Load.TotalLoad;
  6702  0189  1683               	bsf	3,5	;RP0=1, select bank1
  6703  018A  1303               	bcf	3,6	;RP1=0, select bank1
  6704  018B  0853               	movf	(_Load^(0+128)+9),w
  6705  018C  3E0A               	addlw	10
  6706  018D  00E1               	movwf	(_Load^(0+128)+23)
  6707  018E  3000               	movlw	0
  6708  018F  1803               	skipnc
  6709  0190  3001               	movlw	1
  6710  0191                     L12:	
  6711  0191  00E2               	movwf	(_Load^(0+128)+24)
  6712  0192                     l836:	
  6713                           
  6714                           ;OverLoad_B1.c: 135: }
  6715                           ;OverLoad_B1.c: 136: }
  6716                           ;OverLoad_B1.c: 137: }
  6717                           ;OverLoad_B1.c: 138: }
  6718                           ;OverLoad_B1.c: 139: }
  6719                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
  6720  0192  1683               	bsf	3,5	;RP0=1, select bank1
  6721  0193  1303               	bcf	3,6	;RP1=0, select bank1
  6722  0194  085E               	movf	(_Load^(0+128)+20),w
  6723  0195  1283               	bcf	3,5	;RP0=0, select bank0
  6724  0196  1303               	bcf	3,6	;RP1=0, select bank0
  6725  0197  00DE               	movwf	??_Load_Main
  6726  0198  01DF               	clrf	??_Load_Main+1
  6727  0199  1683               	bsf	3,5	;RP0=1, select bank1
  6728  019A  1303               	bcf	3,6	;RP1=0, select bank1
  6729  019B  0862               	movf	((_Load+1)^(0+128)+23),w
  6730  019C  1283               	bcf	3,5	;RP0=0, select bank0
  6731  019D  1303               	bcf	3,6	;RP1=0, select bank0
  6732  019E  025F               	subwf	??_Load_Main+1,w
  6733  019F  1D03               	skipz
  6734  01A0  29A7               	goto	u7255
  6735  01A1  1683               	bsf	3,5	;RP0=1, select bank1
  6736  01A2  1303               	bcf	3,6	;RP1=0, select bank1
  6737  01A3  0861               	movf	(_Load^(0+128)+23),w
  6738  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  6739  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  6740  01A6  025E               	subwf	??_Load_Main,w
  6741  01A7                     u7255:	
  6742  01A7  1C03               	skipc
  6743  01A8  29C8               	goto	l5878
  6744                           
  6745                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6746  01A9  0865               	movf	Load_Main@LightsCount,w
  6747  01AA  3A01               	xorlw	1
  6748  01AB  1903               	skipnz
  6749  01AC  29AF               	goto	l5868
  6750  01AD  3003               	movlw	3
  6751  01AE  29B0               	goto	L13
  6752  01AF                     l5868:	
  6753  01AF  3002               	movlw	2
  6754  01B0                     L13:	
  6755  01B0  00E1               	movwf	_Load_Main$2696
  6756  01B1  3000               	movlw	0
  6757  01B2  00E2               	movwf	_Load_Main$2696+1
  6758  01B3  0861               	movf	_Load_Main$2696,w
  6759  01B4  00DE               	movwf	??_Load_Main
  6760  01B5  085E               	movf	??_Load_Main,w
  6761  01B6  00E3               	movwf	Load_Main@ErrorCountValue
  6762                           
  6763                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
  6764  01B7  3001               	movlw	1
  6765  01B8  00DE               	movwf	??_Load_Main
  6766  01B9  085E               	movf	??_Load_Main,w
  6767  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  6768  01BB  1303               	bcf	3,6	;RP1=0, select bank1
  6769  01BC  07E4               	addwf	(_Load^(0+128)+26),f
  6770                           
  6771                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
  6772  01BD  0864               	movf	(_Load^(0+128)+26),w
  6773  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  6774  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  6775  01C0  0263               	subwf	Load_Main@ErrorCountValue,w
  6776  01C1  1803               	skipnc
  6777  01C2  0008               	return
  6778                           
  6779                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
  6780  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  6781  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  6782  01C5  01E4               	clrf	(_Load^(0+128)+26)
  6783                           
  6784                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
  6785  01C6  16CA               	bsf	_Load^(0+128),5
  6786                           
  6787                           ;OverLoad_B1.c: 168: }
  6788                           ;OverLoad_B1.c: 169: } else {
  6789  01C7  0008               	return
  6790  01C8                     l5878:	
  6791                           
  6792                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
  6793  01C8  1683               	bsf	3,5	;RP0=1, select bank1
  6794  01C9  1303               	bcf	3,6	;RP1=0, select bank1
  6795  01CA  01E4               	clrf	(_Load^(0+128)+26)
  6796                           
  6797                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
  6798  01CB  1DCA               	btfss	_Load^(0+128),3
  6799  01CC  0008               	return
  6800                           
  6801                           ;OverLoad_B1.c: 172: Load.SafeCount++;
  6802  01CD  3001               	movlw	1
  6803  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  6804  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  6805  01D0  00DE               	movwf	??_Load_Main
  6806  01D1  085E               	movf	??_Load_Main,w
  6807  01D2  1683               	bsf	3,5	;RP0=1, select bank1
  6808  01D3  1303               	bcf	3,6	;RP1=0, select bank1
  6809  01D4  07E5               	addwf	(_Load^(0+128)+27),f
  6810                           
  6811                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
  6812  01D5  3003               	movlw	3
  6813  01D6  0265               	subwf	(_Load^(0+128)+27),w
  6814  01D7  1C03               	skipc
  6815  01D8  0008               	return
  6816                           
  6817                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
  6818  01D9  01E5               	clrf	(_Load^(0+128)+27)
  6819                           
  6820                           ;OverLoad_B1.c: 175: Load.OK = 1;
  6821  01DA  17CA               	bsf	_Load^(0+128),7
  6822                           
  6823                           ;OverLoad_B1.c: 176: Load.Run = 0;
  6824  01DB  11CA               	bcf	_Load^(0+128),3
  6825                           
  6826                           ;OverLoad_B1.c: 177: Load.Count = 0;
  6827  01DC  01E3               	clrf	(_Load^(0+128)+25)
  6828                           
  6829                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
  6830  01DD  085E               	movf	(_Load^(0+128)+20),w
  6831  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  6832  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  6833  01E0  00DE               	movwf	??_Load_Main
  6834  01E1  085E               	movf	??_Load_Main,w
  6835  01E2  1683               	bsf	3,5	;RP0=1, select bank1
  6836  01E3  1303               	bcf	3,6	;RP1=0, select bank1
  6837  01E4  00D3               	movwf	(_Load^(0+128)+9)
  6838                           
  6839                           ;OverLoad_B1.c: 182: }
  6840                           ;OverLoad_B1.c: 183: }
  6841                           ;OverLoad_B1.c: 206: }
  6842                           ;OverLoad_B1.c: 207: }
  6843                           ;OverLoad_B1.c: 208: }
  6844                           ;OverLoad_B1.c: 209: } else {
  6845  01E5  0008               	return
  6846  01E6                     l831:	
  6847                           
  6848                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
  6849  01E6  164A               	bsf	_Load^(0+128),4
  6850                           
  6851                           ;OverLoad_B1.c: 211: }
  6852                           ;OverLoad_B1.c: 212: } else {
  6853  01E7  0008               	return
  6854  01E8                     l830:	
  6855                           
  6856                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
  6857  01E8  1D4A               	btfss	_Load^(0+128),2
  6858  01E9  29FC               	goto	l5914
  6859                           
  6860                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
  6861  01EA  114A               	bcf	_Load^(0+128),2
  6862                           
  6863                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
  6864  01EB  124A               	bcf	_Load^(0+128),4
  6865                           
  6866                           ;OverLoad_B1.c: 218: Load.Time = 0;
  6867  01EC  01CB               	clrf	(_Load^(0+128)+1)
  6868  01ED  01CC               	clrf	((_Load+1)^(0+128)+1)
  6869                           
  6870                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
  6871  01EE  158A  22A0  118A   	fcall	_setLoad_AH_AL_Restore
  6872                           
  6873                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
  6874  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  6875  01F2  1303               	bcf	3,6	;RP1=0, select bank1
  6876  01F3  01E4               	clrf	(_Load^(0+128)+26)
  6877                           
  6878                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
  6879  01F4  01E5               	clrf	(_Load^(0+128)+27)
  6880                           
  6881                           ;OverLoad_B1.c: 224: Load.ADH = 0;
  6882  01F5  01CF               	clrf	(_Load^(0+128)+5)
  6883  01F6  01D0               	clrf	((_Load+1)^(0+128)+5)
  6884                           
  6885                           ;OverLoad_B1.c: 225: Load.ADL = 0;
  6886  01F7  01D1               	clrf	(_Load^(0+128)+7)
  6887  01F8  01D2               	clrf	((_Load+1)^(0+128)+7)
  6888                           
  6889                           ;OverLoad_B1.c: 231: Load.Run = 0;
  6890  01F9  11CA               	bcf	_Load^(0+128),3
  6891                           
  6892                           ;OverLoad_B1.c: 232: Load.Count = 0;
  6893  01FA  01E3               	clrf	(_Load^(0+128)+25)
  6894                           
  6895                           ;OverLoad_B1.c: 233: Load.OK = 0;
  6896  01FB  13CA               	bcf	_Load^(0+128),7
  6897  01FC                     l5914:	
  6898                           
  6899                           ;OverLoad_B1.c: 255: }
  6900                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
  6901  01FC  1ECA               	btfss	_Load^(0+128),5
  6902  01FD  0008               	return
  6903                           
  6904                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
  6905  01FE  3001               	movlw	1
  6906  01FF  07CD               	addwf	(_Load^(0+128)+3),f
  6907  0200  1803               	skipnc
  6908  0201  0ACE               	incf	((_Load+1)^(0+128)+3),f
  6909  0202  3000               	movlw	0
  6910  0203  07CE               	addwf	((_Load+1)^(0+128)+3),f
  6911                           
  6912                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
  6913  0204  3001               	movlw	1
  6914  0205  024E               	subwf	((_Load+1)^(0+128)+3),w
  6915  0206  30F4               	movlw	244
  6916  0207  1903               	skipnz
  6917  0208  024D               	subwf	(_Load^(0+128)+3),w
  6918  0209  1C03               	skipc
  6919  020A  0008               	return
  6920                           
  6921                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
  6922  020B  01CD               	clrf	(_Load^(0+128)+3)
  6923  020C  01CE               	clrf	((_Load+1)^(0+128)+3)
  6924                           
  6925                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
  6926  020D  12CA               	bcf	_Load^(0+128),5
  6927                           
  6928                           ;OverLoad_B1.c: 261: }
  6929                           ;OverLoad_B1.c: 262: }
  6930                           ;OverLoad_B1.c: 263: }
  6931                           ;OverLoad_B1.c: 264: } else {
  6932  020E  0008               	return
  6933  020F                     l820:	
  6934                           
  6935                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
  6936  020F  1283               	bcf	3,5	;RP0=0, select bank0
  6937  0210  1303               	bcf	3,6	;RP1=0, select bank0
  6938  0211  1C31               	btfss	_myMain,0
  6939  0212  0008               	return
  6940                           
  6941                           ;OverLoad_B1.c: 266: Load.Enable = 1;
  6942  0213  1683               	bsf	3,5	;RP0=1, select bank1
  6943  0214  1303               	bcf	3,6	;RP1=0, select bank1
  6944  0215  144A               	bsf	_Load^(0+128),0
  6945  0216  0008               	return
  6946  0217                     __end_of_Load_Main:	
  6947                           
  6948                           	psect	text36
  6949  09B6                     __ptext36:	
  6950 ;; *************** function _getMain_Lights_Count *****************
  6951 ;; Defined at:
  6952 ;;		line 459 in file "../src/Main_B1.c"
  6953 ;; Parameters:    Size  Location     Type
  6954 ;;		None
  6955 ;; Auto vars:     Size  Location     Type
  6956 ;;  status2         1    2[BANK0 ] unsigned char 
  6957 ;;  status1         1    1[BANK0 ] unsigned char 
  6958 ;;  count           1    0[BANK0 ] unsigned char 
  6959 ;; Return value:  Size  Location     Type
  6960 ;;                  1    wreg      unsigned char 
  6961 ;; Registers used:
  6962 ;;		wreg, status,2, status,0
  6963 ;; Tracked objects:
  6964 ;;		On entry : 0/0
  6965 ;;		On exit  : 0/0
  6966 ;;		Unchanged: 0/0
  6967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6968 ;;      Params:         0       0       0       0
  6969 ;;      Locals:         0       3       0       0
  6970 ;;      Temps:          0       0       0       0
  6971 ;;      Totals:         0       3       0       0
  6972 ;;Total ram usage:        3 bytes
  6973 ;; Hardware stack levels used:    1
  6974 ;; Hardware stack levels required when called:    2
  6975 ;; This function calls:
  6976 ;;		Nothing
  6977 ;; This function is called by:
  6978 ;;		_Load_Main
  6979 ;; This function uses a non-reentrant model
  6980 ;;
  6981                           
  6982                           
  6983                           ;psect for function _getMain_Lights_Count
  6984  09B6                     _getMain_Lights_Count:	
  6985                           
  6986                           ;Main_B1.c: 460: char count = 0;
  6987                           
  6988                           ;incstack = 0
  6989                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  6990  09B6  1283               	bcf	3,5	;RP0=0, select bank0
  6991  09B7  1303               	bcf	3,6	;RP1=0, select bank0
  6992  09B8  01D7               	clrf	getMain_Lights_Count@count
  6993                           
  6994                           ;Main_B1.c: 476: char status1 = Lights1.Status == 1 ? 1 : 0;
  6995  09B9  3000               	movlw	0
  6996  09BA  1949               	btfsc	_Lights1,2
  6997  09BB  3001               	movlw	1
  6998  09BC  00D8               	movwf	getMain_Lights_Count@status1
  6999                           
  7000                           ;Main_B1.c: 479: char status2 = Lights2.Status == 1 ? 1 : 0;
  7001  09BD  3000               	movlw	0
  7002  09BE  194E               	btfsc	_Lights2,2
  7003  09BF  3001               	movlw	1
  7004  09C0  00D9               	movwf	getMain_Lights_Count@status2
  7005                           
  7006                           ;Main_B1.c: 490: return count = (status1 + status2);
  7007  09C1  0859               	movf	getMain_Lights_Count@status2,w
  7008  09C2  0758               	addwf	getMain_Lights_Count@status1,w
  7009  09C3  00D7               	movwf	getMain_Lights_Count@count
  7010  09C4  0008               	return
  7011  09C5                     __end_of_getMain_Lights_Count:	
  7012                           
  7013                           	psect	text37
  7014  093C                     __ptext37:	
  7015 ;; *************** function _getLight_Load_Status *****************
  7016 ;; Defined at:
  7017 ;;		line 405 in file "../src/TriacRelay_B1.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;		None
  7020 ;; Auto vars:     Size  Location     Type
  7021 ;;  loadstatus      1    4[COMMON] unsigned char 
  7022 ;; Return value:  Size  Location     Type
  7023 ;;                  1    wreg      unsigned char 
  7024 ;; Registers used:
  7025 ;;		wreg, status,2
  7026 ;; Tracked objects:
  7027 ;;		On entry : 0/0
  7028 ;;		On exit  : 0/0
  7029 ;;		Unchanged: 0/0
  7030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7031 ;;      Params:         0       0       0       0
  7032 ;;      Locals:         1       0       0       0
  7033 ;;      Temps:          0       0       0       0
  7034 ;;      Totals:         1       0       0       0
  7035 ;;Total ram usage:        1 bytes
  7036 ;; Hardware stack levels used:    1
  7037 ;; Hardware stack levels required when called:    2
  7038 ;; This function calls:
  7039 ;;		Nothing
  7040 ;; This function is called by:
  7041 ;;		_Load_Main
  7042 ;; This function uses a non-reentrant model
  7043 ;;
  7044                           
  7045                           
  7046                           ;psect for function _getLight_Load_Status
  7047  093C                     _getLight_Load_Status:	
  7048                           
  7049                           ;TriacRelay_B1.c: 406: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  7050                           
  7051                           ;incstack = 0
  7052                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  7053  093C  3000               	movlw	0
  7054  093D  18F7               	btfsc	_Light,1
  7055  093E  3001               	movlw	1
  7056  093F  00F4               	movwf	getLight_Load_Status@loadstatus
  7057                           
  7058                           ;TriacRelay_B1.c: 407: return loadstatus;
  7059  0940  0874               	movf	getLight_Load_Status@loadstatus,w
  7060  0941  0008               	return
  7061  0942                     __end_of_getLight_Load_Status:	
  7062                           
  7063                           	psect	text38
  7064  0936                     __ptext38:	
  7065 ;; *************** function _getLight_LoadGO *****************
  7066 ;; Defined at:
  7067 ;;		line 400 in file "../src/TriacRelay_B1.c"
  7068 ;; Parameters:    Size  Location     Type
  7069 ;;		None
  7070 ;; Auto vars:     Size  Location     Type
  7071 ;;  loadgo          1    4[COMMON] unsigned char 
  7072 ;; Return value:  Size  Location     Type
  7073 ;;                  1    wreg      unsigned char 
  7074 ;; Registers used:
  7075 ;;		wreg, status,2
  7076 ;; Tracked objects:
  7077 ;;		On entry : 0/0
  7078 ;;		On exit  : 0/0
  7079 ;;		Unchanged: 0/0
  7080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7081 ;;      Params:         0       0       0       0
  7082 ;;      Locals:         1       0       0       0
  7083 ;;      Temps:          0       0       0       0
  7084 ;;      Totals:         1       0       0       0
  7085 ;;Total ram usage:        1 bytes
  7086 ;; Hardware stack levels used:    1
  7087 ;; Hardware stack levels required when called:    2
  7088 ;; This function calls:
  7089 ;;		Nothing
  7090 ;; This function is called by:
  7091 ;;		_Load_Main
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           
  7096                           ;psect for function _getLight_LoadGO
  7097  0936                     _getLight_LoadGO:	
  7098                           
  7099                           ;TriacRelay_B1.c: 401: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  7100                           
  7101                           ;incstack = 0
  7102                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  7103  0936  3000               	movlw	0
  7104  0937  1877               	btfsc	_Light,0
  7105  0938  3001               	movlw	1
  7106  0939  00F4               	movwf	getLight_LoadGO@loadgo
  7107                           
  7108                           ;TriacRelay_B1.c: 402: return loadgo;
  7109  093A  0874               	movf	getLight_LoadGO@loadgo,w
  7110  093B  0008               	return
  7111  093C                     __end_of_getLight_LoadGO:	
  7112                           
  7113                           	psect	text39
  7114  0BE9                     __ptext39:	
  7115 ;; *************** function ___wmul *****************
  7116 ;; Defined at:
  7117 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7120 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;  product         2    4[COMMON] unsigned int 
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  2    0[BANK0 ] unsigned int 
  7125 ;; Registers used:
  7126 ;;		wreg, status,2, status,0
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7132 ;;      Params:         0       4       0       0
  7133 ;;      Locals:         2       0       0       0
  7134 ;;      Temps:          0       0       0       0
  7135 ;;      Totals:         2       4       0       0
  7136 ;;Total ram usage:        6 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; Hardware stack levels required when called:    2
  7139 ;; This function calls:
  7140 ;;		Nothing
  7141 ;; This function is called by:
  7142 ;;		_Load_Main
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           
  7147                           ;psect for function ___wmul
  7148  0BE9                     ___wmul:	
  7149                           
  7150                           ;incstack = 0
  7151                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7152  0BE9  01F4               	clrf	___wmul@product
  7153  0BEA  01F5               	clrf	___wmul@product+1
  7154  0BEB                     l5540:	
  7155  0BEB  1283               	bcf	3,5	;RP0=0, select bank0
  7156  0BEC  1303               	bcf	3,6	;RP1=0, select bank0
  7157  0BED  1C57               	btfss	___wmul@multiplier,0
  7158  0BEE  2BF5               	goto	l1683
  7159  0BEF  0859               	movf	___wmul@multiplicand,w
  7160  0BF0  07F4               	addwf	___wmul@product,f
  7161  0BF1  1803               	skipnc
  7162  0BF2  0AF5               	incf	___wmul@product+1,f
  7163  0BF3  085A               	movf	___wmul@multiplicand+1,w
  7164  0BF4  07F5               	addwf	___wmul@product+1,f
  7165  0BF5                     l1683:	
  7166  0BF5  3001               	movlw	1
  7167  0BF6                     u6565:	
  7168  0BF6  1003               	clrc
  7169  0BF7  0DD9               	rlf	___wmul@multiplicand,f
  7170  0BF8  0DDA               	rlf	___wmul@multiplicand+1,f
  7171  0BF9  3EFF               	addlw	-1
  7172  0BFA  1D03               	skipz
  7173  0BFB  2BF6               	goto	u6565
  7174  0BFC  3001               	movlw	1
  7175  0BFD                     u6575:	
  7176  0BFD  1003               	clrc
  7177  0BFE  0CD8               	rrf	___wmul@multiplier+1,f
  7178  0BFF  0CD7               	rrf	___wmul@multiplier,f
  7179  0C00  3EFF               	addlw	-1
  7180  0C01  1D03               	skipz
  7181  0C02  2BFD               	goto	u6575
  7182  0C03  0858               	movf	___wmul@multiplier+1,w
  7183  0C04  0457               	iorwf	___wmul@multiplier,w
  7184  0C05  1D03               	skipz
  7185  0C06  2BEB               	goto	l5540
  7186  0C07  0875               	movf	___wmul@product+1,w
  7187  0C08  01D8               	clrf	?___wmul+1
  7188  0C09  07D8               	addwf	?___wmul+1,f
  7189  0C0A  0874               	movf	___wmul@product,w
  7190  0C0B  01D7               	clrf	?___wmul
  7191  0C0C  07D7               	addwf	?___wmul,f
  7192  0C0D  0008               	return
  7193  0C0E                     __end_of___wmul:	
  7194                           
  7195                           	psect	text40
  7196  0D3C                     __ptext40:	
  7197 ;; *************** function ___lwdiv *****************
  7198 ;; Defined at:
  7199 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;  divisor         2    0[BANK0 ] unsigned int 
  7202 ;;  dividend        2    2[BANK0 ] unsigned int 
  7203 ;; Auto vars:     Size  Location     Type
  7204 ;;  quotient        2    5[BANK0 ] unsigned int 
  7205 ;;  counter         1    4[BANK0 ] unsigned char 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  2    0[BANK0 ] unsigned int 
  7208 ;; Registers used:
  7209 ;;		wreg, status,2, status,0
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7215 ;;      Params:         0       4       0       0
  7216 ;;      Locals:         0       3       0       0
  7217 ;;      Temps:          1       0       0       0
  7218 ;;      Totals:         1       7       0       0
  7219 ;;Total ram usage:        8 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    2
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		_Load_Main
  7226 ;;		_getPIR_AD
  7227 ;; This function uses a non-reentrant model
  7228 ;;
  7229                           
  7230                           
  7231                           ;psect for function ___lwdiv
  7232  0D3C                     ___lwdiv:	
  7233                           
  7234                           ;incstack = 0
  7235                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7236  0D3C  1283               	bcf	3,5	;RP0=0, select bank0
  7237  0D3D  1303               	bcf	3,6	;RP1=0, select bank0
  7238  0D3E  01DC               	clrf	___lwdiv@quotient
  7239  0D3F  01DD               	clrf	___lwdiv@quotient+1
  7240  0D40  0858               	movf	___lwdiv@divisor+1,w
  7241  0D41  0457               	iorwf	___lwdiv@divisor,w
  7242  0D42  1903               	skipnz
  7243  0D43  2D75               	goto	l5572
  7244  0D44  01DB               	clrf	___lwdiv@counter
  7245  0D45  0ADB               	incf	___lwdiv@counter,f
  7246  0D46                     l5560:	
  7247  0D46  1BD8               	btfsc	___lwdiv@divisor+1,7
  7248  0D47  2D54               	goto	l5562
  7249  0D48  3001               	movlw	1
  7250  0D49                     u6605:	
  7251  0D49  1003               	clrc
  7252  0D4A  0DD7               	rlf	___lwdiv@divisor,f
  7253  0D4B  0DD8               	rlf	___lwdiv@divisor+1,f
  7254  0D4C  3EFF               	addlw	-1
  7255  0D4D  1D03               	skipz
  7256  0D4E  2D49               	goto	u6605
  7257  0D4F  3001               	movlw	1
  7258  0D50  00F4               	movwf	??___lwdiv
  7259  0D51  0874               	movf	??___lwdiv,w
  7260  0D52  07DB               	addwf	___lwdiv@counter,f
  7261  0D53  2D46               	goto	l5560
  7262  0D54                     l5562:	
  7263  0D54  3001               	movlw	1
  7264  0D55                     u6625:	
  7265  0D55  1003               	clrc
  7266  0D56  0DDC               	rlf	___lwdiv@quotient,f
  7267  0D57  0DDD               	rlf	___lwdiv@quotient+1,f
  7268  0D58  3EFF               	addlw	-1
  7269  0D59  1D03               	skipz
  7270  0D5A  2D55               	goto	u6625
  7271  0D5B  0858               	movf	___lwdiv@divisor+1,w
  7272  0D5C  025A               	subwf	___lwdiv@dividend+1,w
  7273  0D5D  1D03               	skipz
  7274  0D5E  2D61               	goto	u6635
  7275  0D5F  0857               	movf	___lwdiv@divisor,w
  7276  0D60  0259               	subwf	___lwdiv@dividend,w
  7277  0D61                     u6635:	
  7278  0D61  1C03               	skipc
  7279  0D62  2D6A               	goto	l5568
  7280  0D63  0857               	movf	___lwdiv@divisor,w
  7281  0D64  02D9               	subwf	___lwdiv@dividend,f
  7282  0D65  0858               	movf	___lwdiv@divisor+1,w
  7283  0D66  1C03               	skipc
  7284  0D67  03DA               	decf	___lwdiv@dividend+1,f
  7285  0D68  02DA               	subwf	___lwdiv@dividend+1,f
  7286  0D69  145C               	bsf	___lwdiv@quotient,0
  7287  0D6A                     l5568:	
  7288  0D6A  3001               	movlw	1
  7289  0D6B                     u6645:	
  7290  0D6B  1003               	clrc
  7291  0D6C  0CD8               	rrf	___lwdiv@divisor+1,f
  7292  0D6D  0CD7               	rrf	___lwdiv@divisor,f
  7293  0D6E  3EFF               	addlw	-1
  7294  0D6F  1D03               	skipz
  7295  0D70  2D6B               	goto	u6645
  7296  0D71  3001               	movlw	1
  7297  0D72  02DB               	subwf	___lwdiv@counter,f
  7298  0D73  1D03               	btfss	3,2
  7299  0D74  2D54               	goto	l5562
  7300  0D75                     l5572:	
  7301  0D75  085D               	movf	___lwdiv@quotient+1,w
  7302  0D76  01D8               	clrf	?___lwdiv+1
  7303  0D77  07D8               	addwf	?___lwdiv+1,f
  7304  0D78  085C               	movf	___lwdiv@quotient,w
  7305  0D79  01D7               	clrf	?___lwdiv
  7306  0D7A  07D7               	addwf	?___lwdiv,f
  7307  0D7B  0008               	return
  7308  0D7C                     __end_of___lwdiv:	
  7309                           
  7310                           	psect	text41
  7311  0912                     __ptext41:	
  7312 ;; *************** function _Load_Initialization *****************
  7313 ;; Defined at:
  7314 ;;		line 9 in file "../src/OverLoad_B1.c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;		None
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;		None
  7319 ;; Return value:  Size  Location     Type
  7320 ;;		None               void
  7321 ;; Registers used:
  7322 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7323 ;; Tracked objects:
  7324 ;;		On entry : 0/0
  7325 ;;		On exit  : 0/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7328 ;;      Params:         0       0       0       0
  7329 ;;      Locals:         0       0       0       0
  7330 ;;      Temps:          0       0       0       0
  7331 ;;      Totals:         0       0       0       0
  7332 ;;Total ram usage:        0 bytes
  7333 ;; Hardware stack levels used:    1
  7334 ;; Hardware stack levels required when called:    3
  7335 ;; This function calls:
  7336 ;;		_setLoad_AH_AL_Restore
  7337 ;; This function is called by:
  7338 ;;		_main
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           
  7343                           ;psect for function _Load_Initialization
  7344  0912                     _Load_Initialization:	
  7345                           
  7346                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  7347                           
  7348                           ;incstack = 0
  7349                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7350  0912  158A  22A0         	fcall	_setLoad_AH_AL_Restore
  7351  0914  0008               	return
  7352  0915                     __end_of_Load_Initialization:	
  7353                           
  7354                           	psect	text42
  7355  0AA0                     __ptext42:	
  7356 ;; *************** function _setLoad_AH_AL_Restore *****************
  7357 ;; Defined at:
  7358 ;;		line 292 in file "../src/OverLoad_B1.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;		None
  7361 ;; Auto vars:     Size  Location     Type
  7362 ;;  i               1    5[COMMON] unsigned char 
  7363 ;; Return value:  Size  Location     Type
  7364 ;;		None               void
  7365 ;; Registers used:
  7366 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7367 ;; Tracked objects:
  7368 ;;		On entry : 0/0
  7369 ;;		On exit  : 0/0
  7370 ;;		Unchanged: 0/0
  7371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7372 ;;      Params:         0       0       0       0
  7373 ;;      Locals:         1       0       0       0
  7374 ;;      Temps:          1       0       0       0
  7375 ;;      Totals:         2       0       0       0
  7376 ;;Total ram usage:        2 bytes
  7377 ;; Hardware stack levels used:    1
  7378 ;; Hardware stack levels required when called:    2
  7379 ;; This function calls:
  7380 ;;		Nothing
  7381 ;; This function is called by:
  7382 ;;		_Load_Initialization
  7383 ;;		_Load_Main
  7384 ;; This function uses a non-reentrant model
  7385 ;;
  7386                           
  7387                           
  7388                           ;psect for function _setLoad_AH_AL_Restore
  7389  0AA0                     _setLoad_AH_AL_Restore:	
  7390                           
  7391                           ;OverLoad_B1.c: 293: char i;
  7392                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
  7393                           
  7394                           ;incstack = 0
  7395                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  7396  0AA0  01F5               	clrf	setLoad_AH_AL_Restore@i
  7397  0AA1                     L14:	
  7398  0AA1  3005               	movlw	5
  7399  0AA2  0275               	subwf	setLoad_AH_AL_Restore@i,w
  7400  0AA3  1803               	btfsc	3,0
  7401  0AA4  0008               	return
  7402                           
  7403                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
  7404  0AA5  0875               	movf	setLoad_AH_AL_Restore@i,w
  7405  0AA6  3ED4               	addlw	(_Load+10)& (0+255)
  7406  0AA7  0084               	movwf	4
  7407  0AA8  1383               	bcf	3,7	;select IRP bank1
  7408  0AA9  0180               	clrf	0
  7409                           
  7410                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xff;
  7411  0AAA  30FF               	movlw	255
  7412  0AAB  00F4               	movwf	??_setLoad_AH_AL_Restore
  7413  0AAC  0875               	movf	setLoad_AH_AL_Restore@i,w
  7414  0AAD  3ED9               	addlw	(_Load+15)& (0+255)
  7415  0AAE  0084               	movwf	4
  7416  0AAF  0874               	movf	??_setLoad_AH_AL_Restore,w
  7417  0AB0  0080               	movwf	0
  7418  0AB1  3001               	movlw	1
  7419  0AB2  00F4               	movwf	??_setLoad_AH_AL_Restore
  7420  0AB3  0874               	movf	??_setLoad_AH_AL_Restore,w
  7421  0AB4  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  7422  0AB5  2AA1               	goto	L14
  7423  0AB6                     __end_of_setLoad_AH_AL_Restore:	
  7424                           
  7425                           	psect	text43
  7426  0C0E                     __ptext43:	
  7427 ;; *************** function _Lights_Main *****************
  7428 ;; Defined at:
  7429 ;;		line 52 in file "../src/TriacRelay_B1.c"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;		None
  7432 ;; Auto vars:     Size  Location     Type
  7433 ;;		None
  7434 ;; Return value:  Size  Location     Type
  7435 ;;		None               void
  7436 ;; Registers used:
  7437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7438 ;; Tracked objects:
  7439 ;;		On entry : 0/0
  7440 ;;		On exit  : 0/0
  7441 ;;		Unchanged: 0/0
  7442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7443 ;;      Params:         0       0       0       0
  7444 ;;      Locals:         0       0       0       0
  7445 ;;      Temps:          0       0       0       0
  7446 ;;      Totals:         0       0       0       0
  7447 ;;Total ram usage:        0 bytes
  7448 ;; Hardware stack levels used:    1
  7449 ;; Hardware stack levels required when called:    6
  7450 ;; This function calls:
  7451 ;;		_Lights_Control
  7452 ;;		_getLoad_OK
  7453 ;;		_getMain_All_Error_Status
  7454 ;;		_getMain_All_LightsStatus
  7455 ;;		_setLights_Main
  7456 ;; This function is called by:
  7457 ;;		_main
  7458 ;; This function uses a non-reentrant model
  7459 ;;
  7460                           
  7461                           
  7462                           ;psect for function _Lights_Main
  7463  0C0E                     _Lights_Main:	
  7464                           
  7465                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  7466                           
  7467                           ;incstack = 0
  7468                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7469  0C0E  1C77               	btfss	_Light,0
  7470  0C0F  2C24               	goto	l5932
  7471                           
  7472                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  7473  0C10  158A  215E  158A   	fcall	_getLoad_OK
  7474  0C13  3A01               	xorlw	1
  7475  0C14  1903               	skipnz
  7476  0C15  2C23               	goto	l1541
  7477  0C16  3000               	movlw	0
  7478  0C17  158A  24FE  158A   	fcall	_getMain_All_Error_Status
  7479  0C1A  3800               	iorlw	0
  7480  0C1B  1D03               	skipz
  7481  0C1C  2C23               	goto	l1541
  7482  0C1D  158A  21E4  158A   	fcall	_getMain_All_LightsStatus
  7483  0C20  3800               	iorlw	0
  7484  0C21  1D03               	skipz
  7485  0C22  2C24               	goto	l5932
  7486  0C23                     l1541:	
  7487                           
  7488                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  7489  0C23  1077               	bcf	_Light,0
  7490  0C24                     l5932:	
  7491                           
  7492                           ;TriacRelay_B1.c: 68: }
  7493                           ;TriacRelay_B1.c: 69: }
  7494                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  7495  0C24  3001               	movlw	1
  7496  0C25  158A  245F  158A   	fcall	_setLights_Main
  7497                           
  7498                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  7499  0C28  3001               	movlw	1
  7500  0C29  118A  2681  158A   	fcall	_Lights_Control
  7501                           
  7502                           ;TriacRelay_B1.c: 78: setLights_Main(2);
  7503  0C2C  3002               	movlw	2
  7504  0C2D  158A  245F  158A   	fcall	_setLights_Main
  7505                           
  7506                           ;TriacRelay_B1.c: 79: Lights_Control(2);
  7507  0C30  3002               	movlw	2
  7508  0C31  118A  2681         	fcall	_Lights_Control
  7509  0C33  0008               	return
  7510  0C34                     __end_of_Lights_Main:	
  7511                           
  7512                           	psect	text44
  7513  0C5F                     __ptext44:	
  7514 ;; *************** function _setLights_Main *****************
  7515 ;; Defined at:
  7516 ;;		line 91 in file "../src/TriacRelay_B1.c"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;  lights          1    wreg     unsigned char 
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;  lights          1    5[BANK0 ] unsigned char 
  7521 ;; Return value:  Size  Location     Type
  7522 ;;		None               void
  7523 ;; Registers used:
  7524 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7525 ;; Tracked objects:
  7526 ;;		On entry : 0/0
  7527 ;;		On exit  : 0/0
  7528 ;;		Unchanged: 0/0
  7529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7530 ;;      Params:         0       0       0       0
  7531 ;;      Locals:         0       1       0       0
  7532 ;;      Temps:          0       0       0       0
  7533 ;;      Totals:         0       1       0       0
  7534 ;;Total ram usage:        1 bytes
  7535 ;; Hardware stack levels used:    1
  7536 ;; Hardware stack levels required when called:    5
  7537 ;; This function calls:
  7538 ;;		_LightsPointSelect
  7539 ;;		_getLights_Allow_Condition
  7540 ;;		_setLights
  7541 ;; This function is called by:
  7542 ;;		_Lights_Main
  7543 ;; This function uses a non-reentrant model
  7544 ;;
  7545                           
  7546                           
  7547                           ;psect for function _setLights_Main
  7548  0C5F                     _setLights_Main:	
  7549                           
  7550                           ;incstack = 0
  7551                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7552                           ;setLights_Main@lights stored from wreg
  7553  0C5F  1283               	bcf	3,5	;RP0=0, select bank0
  7554  0C60  1303               	bcf	3,6	;RP1=0, select bank0
  7555  0C61  00DC               	movwf	setLights_Main@lights
  7556                           
  7557                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  7558  0C62  085C               	movf	setLights_Main@lights,w
  7559  0C63  158A  2228  158A   	fcall	_LightsPointSelect
  7560                           
  7561                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  7562  0C66  0878               	movf	_Lights,w
  7563  0C67  0084               	movwf	4
  7564  0C68  1383               	bcf	3,7	;select IRP bank0
  7565  0C69  1880               	btfsc	0,1
  7566  0C6A  0008               	return
  7567                           
  7568                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  7569  0C6B  0878               	movf	_Lights,w
  7570  0C6C  0084               	movwf	4
  7571  0C6D  1D80               	btfss	0,3
  7572  0C6E  0008               	return
  7573                           
  7574                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  7575  0C6F  1283               	bcf	3,5	;RP0=0, select bank0
  7576  0C70  1303               	bcf	3,6	;RP1=0, select bank0
  7577  0C71  085C               	movf	setLights_Main@lights,w
  7578  0C72  158A  22B6  158A   	fcall	_getLights_Allow_Condition
  7579  0C75  3800               	iorlw	0
  7580  0C76  1D03               	skipz
  7581  0C77  0008               	return
  7582                           
  7583                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  7584  0C78  0878               	movf	_Lights,w
  7585  0C79  0084               	movwf	4
  7586  0C7A  1383               	bcf	3,7	;select IRP bank0
  7587  0C7B  1180               	bcf	0,3
  7588                           
  7589                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  7590  0C7C  0878               	movf	_Lights,w
  7591  0C7D  0084               	movwf	4
  7592  0C7E  1E00               	btfss	0,4
  7593  0C7F  2C88               	goto	l5500
  7594                           
  7595                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  7596  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  7597  0C81  1303               	bcf	3,6	;RP1=0, select bank0
  7598  0C82  01D9               	clrf	setLights@status
  7599  0C83  0AD9               	incf	setLights@status,f
  7600  0C84  085C               	movf	setLights_Main@lights,w
  7601  0C85  118A  271B         	fcall	_setLights
  7602                           
  7603                           ;TriacRelay_B1.c: 99: } else {
  7604  0C87  0008               	return
  7605  0C88                     l5500:	
  7606                           
  7607                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  7608  0C88  1283               	bcf	3,5	;RP0=0, select bank0
  7609  0C89  1303               	bcf	3,6	;RP1=0, select bank0
  7610  0C8A  01D9               	clrf	setLights@status
  7611  0C8B  085C               	movf	setLights_Main@lights,w
  7612  0C8C  118A  271B         	fcall	_setLights
  7613  0C8E  0008               	return
  7614  0C8F                     __end_of_setLights_Main:	
  7615                           
  7616                           	psect	text45
  7617  071B                     __ptext45:	
  7618 ;; *************** function _setLights *****************
  7619 ;; Defined at:
  7620 ;;		line 108 in file "../src/TriacRelay_B1.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;  lights          1    wreg     unsigned char 
  7623 ;;  status          1    2[BANK0 ] unsigned char 
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;  lights          1    4[BANK0 ] unsigned char 
  7626 ;; Return value:  Size  Location     Type
  7627 ;;		None               void
  7628 ;; Registers used:
  7629 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7630 ;; Tracked objects:
  7631 ;;		On entry : 0/0
  7632 ;;		On exit  : 0/0
  7633 ;;		Unchanged: 0/0
  7634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7635 ;;      Params:         0       1       0       0
  7636 ;;      Locals:         0       1       0       0
  7637 ;;      Temps:          0       1       0       0
  7638 ;;      Totals:         0       3       0       0
  7639 ;;Total ram usage:        3 bytes
  7640 ;; Hardware stack levels used:    1
  7641 ;; Hardware stack levels required when called:    4
  7642 ;; This function calls:
  7643 ;;		_setLED
  7644 ;;		_setLights_Line
  7645 ;; This function is called by:
  7646 ;;		_setLights_Main
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           
  7651                           ;psect for function _setLights
  7652  071B                     _setLights:	
  7653                           
  7654                           ;incstack = 0
  7655                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7656                           ;setLights@lights stored from wreg
  7657  071B  1283               	bcf	3,5	;RP0=0, select bank0
  7658  071C  1303               	bcf	3,6	;RP1=0, select bank0
  7659  071D  00DB               	movwf	setLights@lights
  7660                           
  7661                           ;TriacRelay_B1.c: 116: if (status == 1) {
  7662  071E  0859               	movf	setLights@status,w
  7663  071F  3A01               	xorlw	1
  7664  0720  1D03               	skipz
  7665  0721  2F64               	goto	l5268
  7666                           
  7667                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  7668  0722  085B               	movf	setLights@lights,w
  7669  0723  3A02               	xorlw	2
  7670  0724  1D03               	skipz
  7671  0725  2F33               	goto	l5240
  7672                           
  7673                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  7674  0726  01D7               	clrf	setLED@command
  7675  0727  3001               	movlw	1
  7676  0728  118A  27A6  118A   	fcall	_setLED
  7677                           
  7678                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  7679  072B  1283               	bcf	3,5	;RP0=0, select bank0
  7680  072C  1303               	bcf	3,6	;RP1=0, select bank0
  7681  072D  01D7               	clrf	setLED@command
  7682  072E  0AD7               	incf	setLED@command,f
  7683  072F  3002               	movlw	2
  7684  0730  118A  27A6  118A   	fcall	_setLED
  7685  0733                     l5240:	
  7686                           
  7687                           ;TriacRelay_B1.c: 121: }
  7688                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  7689  0733  0878               	movf	_Lights,w
  7690  0734  0084               	movwf	4
  7691  0735  1383               	bcf	3,7	;select IRP bank0
  7692  0736  1900               	btfsc	0,2
  7693  0737  2F5D               	goto	l5264
  7694                           
  7695                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7696  0738  0878               	movf	_Lights,w
  7697  0739  0084               	movwf	4
  7698  073A  1500               	bsf	0,2
  7699                           
  7700                           ;TriacRelay_B1.c: 130: if (lights == 1) {
  7701  073B  1283               	bcf	3,5	;RP0=0, select bank0
  7702  073C  1303               	bcf	3,6	;RP1=0, select bank0
  7703  073D  085B               	movf	setLights@lights,w
  7704  073E  3A01               	xorlw	1
  7705  073F  1D03               	skipz
  7706  0740  2F43               	goto	l5254
  7707                           
  7708                           ;TriacRelay_B1.c: 131: RA7 = 1;
  7709  0741  1785               	bsf	5,7	;volatile
  7710  0742  2F48               	goto	L15
  7711  0743                     l5254:	
  7712                           ;TriacRelay_B1.c: 136: }
  7713                           
  7714                           ;TriacRelay_B1.c: 135: Lights->GO = 1;
  7715                           
  7716                           ;TriacRelay_B1.c: 134: Lights->Time = 0;
  7717                           
  7718                           ;TriacRelay_B1.c: 133: Lights->TriacValue = 140;
  7719                           
  7720                           ;TriacRelay_B1.c: 132: Lights->RelayValue = 100;
  7721                           
  7722                           
  7723                           ;TriacRelay_B1.c: 139: else if (lights == 2) {
  7724  0743  085B               	movf	setLights@lights,w
  7725  0744  3A02               	xorlw	2
  7726  0745  1D03               	skipz
  7727  0746  2F5D               	goto	l5264
  7728                           
  7729                           ;TriacRelay_B1.c: 141: RC4 = 1;
  7730  0747  1607               	bsf	7,4	;volatile
  7731  0748                     L15:	
  7732                           
  7733                           ;TriacRelay_B1.c: 142: Lights->RelayValue = 100;
  7734  0748  3064               	movlw	100
  7735  0749  00DA               	movwf	??_setLights
  7736  074A  0878               	movf	_Lights,w
  7737  074B  3E04               	addlw	4
  7738  074C  0084               	movwf	4
  7739  074D  085A               	movf	??_setLights,w
  7740  074E  0080               	movwf	0
  7741                           
  7742                           ;TriacRelay_B1.c: 143: Lights->TriacValue = 140;
  7743  074F  308C               	movlw	140
  7744  0750  00DA               	movwf	??_setLights
  7745  0751  0878               	movf	_Lights,w
  7746  0752  3E03               	addlw	3
  7747  0753  0084               	movwf	4
  7748  0754  085A               	movf	??_setLights,w
  7749  0755  0080               	movwf	0
  7750                           
  7751                           ;TriacRelay_B1.c: 144: Lights->Time = 0;
  7752  0756  0878               	movf	_Lights,w
  7753  0757  3E02               	addlw	2
  7754  0758  0084               	movwf	4
  7755  0759  0180               	clrf	0
  7756                           
  7757                           ;TriacRelay_B1.c: 145: Lights->GO = 1;
  7758  075A  0878               	movf	_Lights,w
  7759  075B  0084               	movwf	4
  7760  075C  1480               	bsf	0,1
  7761  075D                     l5264:	
  7762                           
  7763                           ;TriacRelay_B1.c: 151: }
  7764                           ;TriacRelay_B1.c: 162: }
  7765                           ;TriacRelay_B1.c: 164: Light.Load_Status = 1;
  7766  075D  14F7               	bsf	_Light,1
  7767                           
  7768                           ;TriacRelay_B1.c: 165: setLights_Line(lights);
  7769  075E  1283               	bcf	3,5	;RP0=0, select bank0
  7770  075F  1303               	bcf	3,6	;RP1=0, select bank0
  7771  0760  085B               	movf	setLights@lights,w
  7772  0761  158A  22CD         	fcall	_setLights_Line
  7773                           
  7774                           ;TriacRelay_B1.c: 167: } else {
  7775  0763  0008               	return
  7776  0764                     l5268:	
  7777                           
  7778                           ;TriacRelay_B1.c: 170: if (lights == 2) {
  7779  0764  1283               	bcf	3,5	;RP0=0, select bank0
  7780  0765  1303               	bcf	3,6	;RP1=0, select bank0
  7781  0766  085B               	movf	setLights@lights,w
  7782  0767  3A02               	xorlw	2
  7783  0768  1D03               	skipz
  7784  0769  2F77               	goto	l5272
  7785                           
  7786                           ;TriacRelay_B1.c: 171: setLED(1, 1);
  7787  076A  01D7               	clrf	setLED@command
  7788  076B  0AD7               	incf	setLED@command,f
  7789  076C  3001               	movlw	1
  7790  076D  118A  27A6  118A   	fcall	_setLED
  7791                           
  7792                           ;TriacRelay_B1.c: 172: setLED(2, 0);
  7793  0770  1283               	bcf	3,5	;RP0=0, select bank0
  7794  0771  1303               	bcf	3,6	;RP1=0, select bank0
  7795  0772  01D7               	clrf	setLED@command
  7796  0773  3002               	movlw	2
  7797  0774  118A  27A6  118A   	fcall	_setLED
  7798  0777                     l5272:	
  7799                           
  7800                           ;TriacRelay_B1.c: 173: }
  7801                           ;TriacRelay_B1.c: 175: if (Lights->Status == 1) {
  7802  0777  0878               	movf	_Lights,w
  7803  0778  0084               	movwf	4
  7804  0779  1383               	bcf	3,7	;select IRP bank0
  7805  077A  1D00               	btfss	0,2
  7806  077B  2FA1               	goto	l5296
  7807                           
  7808                           ;TriacRelay_B1.c: 176: Lights->Status = 0;
  7809  077C  0878               	movf	_Lights,w
  7810  077D  0084               	movwf	4
  7811  077E  1100               	bcf	0,2
  7812                           
  7813                           ;TriacRelay_B1.c: 178: if (lights == 1) {
  7814  077F  1283               	bcf	3,5	;RP0=0, select bank0
  7815  0780  1303               	bcf	3,6	;RP1=0, select bank0
  7816  0781  085B               	movf	setLights@lights,w
  7817  0782  3A01               	xorlw	1
  7818  0783  1D03               	skipz
  7819  0784  2F87               	goto	l5286
  7820                           
  7821                           ;TriacRelay_B1.c: 179: RA7 = 1;
  7822  0785  1785               	bsf	5,7	;volatile
  7823  0786  2F8C               	goto	L16
  7824  0787                     l5286:	
  7825                           ;TriacRelay_B1.c: 184: }
  7826                           
  7827                           ;TriacRelay_B1.c: 183: Lights->GO = 1;
  7828                           
  7829                           ;TriacRelay_B1.c: 182: Lights->Time = 0;
  7830                           
  7831                           ;TriacRelay_B1.c: 181: Lights->TriacValue = 80;
  7832                           
  7833                           ;TriacRelay_B1.c: 180: Lights->RelayValue = 40;
  7834                           
  7835                           
  7836                           ;TriacRelay_B1.c: 187: else if (lights == 2) {
  7837  0787  085B               	movf	setLights@lights,w
  7838  0788  3A02               	xorlw	2
  7839  0789  1D03               	skipz
  7840  078A  2FA1               	goto	l5296
  7841                           
  7842                           ;TriacRelay_B1.c: 189: RC4 = 1;
  7843  078B  1607               	bsf	7,4	;volatile
  7844  078C                     L16:	
  7845                           
  7846                           ;TriacRelay_B1.c: 190: Lights->RelayValue = 40;
  7847  078C  3028               	movlw	40
  7848  078D  00DA               	movwf	??_setLights
  7849  078E  0878               	movf	_Lights,w
  7850  078F  3E04               	addlw	4
  7851  0790  0084               	movwf	4
  7852  0791  085A               	movf	??_setLights,w
  7853  0792  0080               	movwf	0
  7854                           
  7855                           ;TriacRelay_B1.c: 191: Lights->TriacValue = 80;
  7856  0793  3050               	movlw	80
  7857  0794  00DA               	movwf	??_setLights
  7858  0795  0878               	movf	_Lights,w
  7859  0796  3E03               	addlw	3
  7860  0797  0084               	movwf	4
  7861  0798  085A               	movf	??_setLights,w
  7862  0799  0080               	movwf	0
  7863                           
  7864                           ;TriacRelay_B1.c: 192: Lights->Time = 0;
  7865  079A  0878               	movf	_Lights,w
  7866  079B  3E02               	addlw	2
  7867  079C  0084               	movwf	4
  7868  079D  0180               	clrf	0
  7869                           
  7870                           ;TriacRelay_B1.c: 193: Lights->GO = 1;
  7871  079E  0878               	movf	_Lights,w
  7872  079F  0084               	movwf	4
  7873  07A0  1480               	bsf	0,1
  7874  07A1                     l5296:	
  7875                           
  7876                           ;TriacRelay_B1.c: 199: }
  7877                           ;TriacRelay_B1.c: 211: }
  7878                           ;TriacRelay_B1.c: 213: Light.Load_Status = 0;
  7879  07A1  10F7               	bcf	_Light,1
  7880                           
  7881                           ;TriacRelay_B1.c: 214: setLights_Line(0);
  7882  07A2  3000               	movlw	0
  7883  07A3  158A  22CD         	fcall	_setLights_Line
  7884  07A5  0008               	return
  7885  07A6                     __end_of_setLights:	
  7886                           
  7887                           	psect	text46
  7888  0ACD                     __ptext46:	
  7889 ;; *************** function _setLights_Line *****************
  7890 ;; Defined at:
  7891 ;;		line 285 in file "../src/TriacRelay_B1.c"
  7892 ;; Parameters:    Size  Location     Type
  7893 ;;  lights          1    wreg     unsigned char 
  7894 ;; Auto vars:     Size  Location     Type
  7895 ;;  lights          1    4[COMMON] unsigned char 
  7896 ;; Return value:  Size  Location     Type
  7897 ;;		None               void
  7898 ;; Registers used:
  7899 ;;		wreg
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7905 ;;      Params:         0       0       0       0
  7906 ;;      Locals:         1       0       0       0
  7907 ;;      Temps:          0       0       0       0
  7908 ;;      Totals:         1       0       0       0
  7909 ;;Total ram usage:        1 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:    2
  7912 ;; This function calls:
  7913 ;;		Nothing
  7914 ;; This function is called by:
  7915 ;;		_setLights
  7916 ;; This function uses a non-reentrant model
  7917 ;;
  7918                           
  7919                           
  7920                           ;psect for function _setLights_Line
  7921  0ACD                     _setLights_Line:	
  7922                           
  7923                           ;incstack = 0
  7924                           ; Regs used in _setLights_Line: [wreg]
  7925                           ;setLights_Line@lights stored from wreg
  7926  0ACD  00F4               	movwf	setLights_Line@lights
  7927                           
  7928                           ;TriacRelay_B1.c: 286: Light.LoadGO = 1;
  7929  0ACE  1477               	bsf	_Light,0
  7930                           
  7931                           ;TriacRelay_B1.c: 288: Lights1.Line = 0;
  7932  0ACF  1283               	bcf	3,5	;RP0=0, select bank0
  7933  0AD0  1303               	bcf	3,6	;RP1=0, select bank0
  7934  0AD1  104A               	bcf	_Lights1+1,0
  7935                           
  7936                           ;TriacRelay_B1.c: 289: if (lights == 1 && lights != 0) {
  7937  0AD2  0874               	movf	setLights_Line@lights,w
  7938  0AD3  3A01               	xorlw	1
  7939  0AD4  1D03               	skipz
  7940  0AD5  2ADA               	goto	l1588
  7941  0AD6  0874               	movf	setLights_Line@lights,w
  7942  0AD7  1903               	btfsc	3,2
  7943  0AD8  2ADA               	goto	l1588
  7944                           
  7945                           ;TriacRelay_B1.c: 290: Lights1.Line = 1;
  7946  0AD9  144A               	bsf	_Lights1+1,0
  7947  0ADA                     l1588:	
  7948                           
  7949                           ;TriacRelay_B1.c: 291: }
  7950                           ;TriacRelay_B1.c: 294: Lights2.Line = 0;
  7951  0ADA  104F               	bcf	_Lights2+1,0
  7952                           
  7953                           ;TriacRelay_B1.c: 295: if (lights == 2 && lights != 0) {
  7954  0ADB  0874               	movf	setLights_Line@lights,w
  7955  0ADC  3A02               	xorlw	2
  7956  0ADD  1D03               	skipz
  7957  0ADE  0008               	return
  7958  0ADF  0874               	movf	setLights_Line@lights,w
  7959  0AE0  1903               	btfsc	3,2
  7960  0AE1  0008               	return
  7961                           
  7962                           ;TriacRelay_B1.c: 296: Lights2.Line = 1;
  7963  0AE2  144F               	bsf	_Lights2+1,0
  7964  0AE3  0008               	return
  7965  0AE4                     __end_of_setLights_Line:	
  7966                           
  7967                           	psect	text47
  7968  0AB6                     __ptext47:	
  7969 ;; *************** function _getLights_Allow_Condition *****************
  7970 ;; Defined at:
  7971 ;;		line 367 in file "../src/TriacRelay_B1.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;  lights          1    wreg     unsigned char 
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;  lights          1    0[COMMON] unsigned char 
  7976 ;;  allow           1    0[BANK0 ] unsigned char 
  7977 ;; Return value:  Size  Location     Type
  7978 ;;                  1    wreg      unsigned char 
  7979 ;; Registers used:
  7980 ;;		wreg, status,2, pclath, cstack
  7981 ;; Tracked objects:
  7982 ;;		On entry : 0/0
  7983 ;;		On exit  : 0/0
  7984 ;;		Unchanged: 0/0
  7985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7986 ;;      Params:         0       0       0       0
  7987 ;;      Locals:         0       2       0       0
  7988 ;;      Temps:          1       0       0       0
  7989 ;;      Totals:         1       2       0       0
  7990 ;;Total ram usage:        3 bytes
  7991 ;; Hardware stack levels used:    1
  7992 ;; Hardware stack levels required when called:    3
  7993 ;; This function calls:
  7994 ;;		_getLoad_OK
  7995 ;; This function is called by:
  7996 ;;		_setLights_Main
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           
  8001                           ;psect for function _getLights_Allow_Condition
  8002  0AB6                     _getLights_Allow_Condition:	
  8003                           
  8004                           ;TriacRelay_B1.c: 368: char allow = 0;
  8005                           
  8006                           ;incstack = 0
  8007                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  8008  0AB6  1283               	bcf	3,5	;RP0=0, select bank0
  8009  0AB7  1303               	bcf	3,6	;RP1=0, select bank0
  8010  0AB8  01D7               	clrf	getLights_Allow_Condition@allow
  8011                           
  8012                           ;TriacRelay_B1.c: 371: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  8013  0AB9  01D8               	clrf	_getLights_Allow_Condition$4789
  8014  0ABA  0AD8               	incf	_getLights_Allow_Condition$4789,f
  8015  0ABB  158A  215E  158A   	fcall	_getLoad_OK
  8016  0ABE  3800               	iorlw	0
  8017  0ABF  1903               	btfsc	3,2
  8018  0AC0  1877               	btfsc	_Light,0
  8019  0AC1  2AC5               	goto	l5228
  8020  0AC2  1283               	bcf	3,5	;RP0=0, select bank0
  8021  0AC3  1303               	bcf	3,6	;RP1=0, select bank0
  8022  0AC4  01D8               	clrf	_getLights_Allow_Condition$4789
  8023  0AC5                     l5228:	
  8024  0AC5  1283               	bcf	3,5	;RP0=0, select bank0
  8025  0AC6  1303               	bcf	3,6	;RP1=0, select bank0
  8026  0AC7  0858               	movf	_getLights_Allow_Condition$4789,w
  8027  0AC8  00F5               	movwf	??_getLights_Allow_Condition
  8028  0AC9  0875               	movf	??_getLights_Allow_Condition,w
  8029  0ACA  00D7               	movwf	getLights_Allow_Condition@allow
  8030                           
  8031                           ;TriacRelay_B1.c: 396: return allow;
  8032  0ACB  0857               	movf	getLights_Allow_Condition@allow,w
  8033  0ACC  0008               	return
  8034  0ACD                     __end_of_getLights_Allow_Condition:	
  8035                           
  8036                           	psect	text48
  8037  095E                     __ptext48:	
  8038 ;; *************** function _getLoad_OK *****************
  8039 ;; Defined at:
  8040 ;;		line 272 in file "../src/OverLoad_B1.c"
  8041 ;; Parameters:    Size  Location     Type
  8042 ;;		None
  8043 ;; Auto vars:     Size  Location     Type
  8044 ;;  ok              1    4[COMMON] unsigned char 
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  1    wreg      unsigned char 
  8047 ;; Registers used:
  8048 ;;		wreg, status,2
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8054 ;;      Params:         0       0       0       0
  8055 ;;      Locals:         1       0       0       0
  8056 ;;      Temps:          0       0       0       0
  8057 ;;      Totals:         1       0       0       0
  8058 ;;Total ram usage:        1 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; Hardware stack levels required when called:    2
  8061 ;; This function calls:
  8062 ;;		Nothing
  8063 ;; This function is called by:
  8064 ;;		_Lights_Main
  8065 ;;		_getLights_Allow_Condition
  8066 ;; This function uses a non-reentrant model
  8067 ;;
  8068                           
  8069                           
  8070                           ;psect for function _getLoad_OK
  8071  095E                     _getLoad_OK:	
  8072                           
  8073                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
  8074                           
  8075                           ;incstack = 0
  8076                           ; Regs used in _getLoad_OK: [wreg+status,2]
  8077  095E  3000               	movlw	0
  8078  095F  1683               	bsf	3,5	;RP0=1, select bank1
  8079  0960  1303               	bcf	3,6	;RP1=0, select bank1
  8080  0961  1BCA               	btfsc	_Load^(0+128),7
  8081  0962  3001               	movlw	1
  8082  0963  00F4               	movwf	getLoad_OK@ok
  8083                           
  8084                           ;OverLoad_B1.c: 274: return ok;
  8085  0964  0874               	movf	getLoad_OK@ok,w
  8086  0965  0008               	return
  8087  0966                     __end_of_getLoad_OK:	
  8088                           
  8089                           	psect	text49
  8090  0681                     __ptext49:	
  8091 ;; *************** function _Lights_Control *****************
  8092 ;; Defined at:
  8093 ;;		line 220 in file "../src/TriacRelay_B1.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;  lights          1    wreg     unsigned char 
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;  lights          1   10[BANK0 ] unsigned char 
  8098 ;; Return value:  Size  Location     Type
  8099 ;;		None               void
  8100 ;; Registers used:
  8101 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8102 ;; Tracked objects:
  8103 ;;		On entry : 0/0
  8104 ;;		On exit  : 0/0
  8105 ;;		Unchanged: 0/0
  8106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8107 ;;      Params:         0       0       0       0
  8108 ;;      Locals:         0       1       0       0
  8109 ;;      Temps:          0       2       0       0
  8110 ;;      Totals:         0       3       0       0
  8111 ;;Total ram usage:        3 bytes
  8112 ;; Hardware stack levels used:    1
  8113 ;; Hardware stack levels required when called:    3
  8114 ;; This function calls:
  8115 ;;		_LightsPointSelect
  8116 ;;		___awdiv
  8117 ;; This function is called by:
  8118 ;;		_Lights_Main
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           
  8123                           ;psect for function _Lights_Control
  8124  0681                     _Lights_Control:	
  8125                           
  8126                           ;incstack = 0
  8127                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8128                           ;Lights_Control@lights stored from wreg
  8129  0681  1283               	bcf	3,5	;RP0=0, select bank0
  8130  0682  1303               	bcf	3,6	;RP1=0, select bank0
  8131  0683  00E1               	movwf	Lights_Control@lights
  8132                           
  8133                           ;TriacRelay_B1.c: 221: LightsPointSelect(lights);
  8134  0684  0861               	movf	Lights_Control@lights,w
  8135  0685  158A  2228  118A   	fcall	_LightsPointSelect
  8136                           
  8137                           ;TriacRelay_B1.c: 222: if (Lights->GO == 1) {
  8138  0688  0878               	movf	_Lights,w
  8139  0689  0084               	movwf	4
  8140  068A  1383               	bcf	3,7	;select IRP bank0
  8141  068B  1C80               	btfss	0,1
  8142  068C  0008               	return
  8143                           
  8144                           ;TriacRelay_B1.c: 223: Lights->Time++;
  8145  068D  3001               	movlw	1
  8146  068E  1283               	bcf	3,5	;RP0=0, select bank0
  8147  068F  1303               	bcf	3,6	;RP1=0, select bank0
  8148  0690  00DF               	movwf	??_Lights_Control
  8149  0691  0878               	movf	_Lights,w
  8150  0692  3E02               	addlw	2
  8151  0693  0084               	movwf	4
  8152  0694  085F               	movf	??_Lights_Control,w
  8153  0695  0780               	addwf	0,f
  8154                           
  8155                           ;TriacRelay_B1.c: 224: if (Lights->RelaySet == 0) {
  8156  0696  0878               	movf	_Lights,w
  8157  0697  0084               	movwf	4
  8158  0698  1B80               	btfsc	0,7
  8159  0699  2EE1               	goto	l5522
  8160                           
  8161                           ;TriacRelay_B1.c: 225: if (Lights->Time >= (Lights->RelayValue / 20)) {
  8162  069A  3014               	movlw	20
  8163  069B  00D7               	movwf	___awdiv@divisor
  8164  069C  3000               	movlw	0
  8165  069D  00D8               	movwf	___awdiv@divisor+1
  8166  069E  0878               	movf	_Lights,w
  8167  069F  3E04               	addlw	4
  8168  06A0  0084               	movwf	4
  8169  06A1  0800               	movf	0,w
  8170  06A2  00DF               	movwf	??_Lights_Control
  8171  06A3  01E0               	clrf	??_Lights_Control+1
  8172  06A4  085F               	movf	??_Lights_Control,w
  8173  06A5  00D9               	movwf	___awdiv@dividend
  8174  06A6  0860               	movf	??_Lights_Control+1,w
  8175  06A7  00DA               	movwf	___awdiv@dividend+1
  8176  06A8  158A  26A7  118A   	fcall	___awdiv
  8177  06AB  0878               	movf	_Lights,w
  8178  06AC  3E02               	addlw	2
  8179  06AD  0084               	movwf	4
  8180  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  8181  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  8182  06B0  0858               	movf	?___awdiv+1,w
  8183  06B1  3A80               	xorlw	128
  8184  06B2  3C80               	sublw	128
  8185  06B3  1D03               	skipz
  8186  06B4  2EB8               	goto	u6455
  8187  06B5  0857               	movf	?___awdiv,w
  8188  06B6  1383               	bcf	3,7	;select IRP bank0
  8189  06B7  0200               	subwf	0,w
  8190  06B8                     u6455:	
  8191  06B8  1C03               	skipc
  8192  06B9  0008               	return
  8193                           
  8194                           ;TriacRelay_B1.c: 226: Lights->RelaySet = 1;
  8195  06BA  0878               	movf	_Lights,w
  8196  06BB  0084               	movwf	4
  8197  06BC  1383               	bcf	3,7	;select IRP bank0
  8198  06BD  1780               	bsf	0,7
  8199                           
  8200                           ;TriacRelay_B1.c: 228: if (lights == 1) {
  8201  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  8202  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  8203  06C0  0861               	movf	Lights_Control@lights,w
  8204  06C1  3A01               	xorlw	1
  8205  06C2  1D03               	skipz
  8206  06C3  2ED0               	goto	l5518
  8207                           
  8208                           ;TriacRelay_B1.c: 229: RA6 = Lights->Status == 1 ? 1 : 0;
  8209  06C4  0878               	movf	_Lights,w
  8210  06C5  0084               	movwf	4
  8211  06C6  1D00               	btfss	0,2
  8212  06C7  2ECC               	goto	u6470
  8213  06C8  1283               	bcf	3,5	;RP0=0, select bank0
  8214  06C9  1303               	bcf	3,6	;RP1=0, select bank0
  8215  06CA  1705               	bsf	5,6	;volatile
  8216  06CB  0008               	return
  8217  06CC                     u6470:	
  8218  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  8219  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  8220  06CE  1305               	bcf	5,6	;volatile
  8221                           
  8222                           ;TriacRelay_B1.c: 230: }
  8223  06CF  0008               	return
  8224  06D0                     l5518:	
  8225                           
  8226                           ;TriacRelay_B1.c: 233: else if (lights == 2) {
  8227  06D0  0861               	movf	Lights_Control@lights,w
  8228  06D1  3A02               	xorlw	2
  8229  06D2  1D03               	skipz
  8230  06D3  0008               	return
  8231                           
  8232                           ;TriacRelay_B1.c: 234: RC5 = Lights->Status == 1 ? 1 : 0;
  8233  06D4  0878               	movf	_Lights,w
  8234  06D5  0084               	movwf	4
  8235  06D6  1383               	bcf	3,7	;select IRP bank0
  8236  06D7  1D00               	btfss	0,2
  8237  06D8  2EDD               	goto	u6500
  8238  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  8239  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  8240  06DB  1687               	bsf	7,5	;volatile
  8241  06DC  0008               	return
  8242  06DD                     u6500:	
  8243  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  8244  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  8245  06DF  1287               	bcf	7,5	;volatile
  8246                           
  8247                           ;TriacRelay_B1.c: 235: }
  8248                           ;TriacRelay_B1.c: 242: }
  8249                           ;TriacRelay_B1.c: 243: } else {
  8250  06E0  0008               	return
  8251  06E1                     l5522:	
  8252                           
  8253                           ;TriacRelay_B1.c: 244: if (Lights->Time >= (Lights->TriacValue / 20)) {
  8254  06E1  3014               	movlw	20
  8255  06E2  00D7               	movwf	___awdiv@divisor
  8256  06E3  3000               	movlw	0
  8257  06E4  00D8               	movwf	___awdiv@divisor+1
  8258  06E5  0878               	movf	_Lights,w
  8259  06E6  3E03               	addlw	3
  8260  06E7  0084               	movwf	4
  8261  06E8  1383               	bcf	3,7	;select IRP bank0
  8262  06E9  0800               	movf	0,w
  8263  06EA  00DF               	movwf	??_Lights_Control
  8264  06EB  01E0               	clrf	??_Lights_Control+1
  8265  06EC  085F               	movf	??_Lights_Control,w
  8266  06ED  00D9               	movwf	___awdiv@dividend
  8267  06EE  0860               	movf	??_Lights_Control+1,w
  8268  06EF  00DA               	movwf	___awdiv@dividend+1
  8269  06F0  158A  26A7  118A   	fcall	___awdiv
  8270  06F3  0878               	movf	_Lights,w
  8271  06F4  3E02               	addlw	2
  8272  06F5  0084               	movwf	4
  8273  06F6  1283               	bcf	3,5	;RP0=0, select bank0
  8274  06F7  1303               	bcf	3,6	;RP1=0, select bank0
  8275  06F8  0858               	movf	?___awdiv+1,w
  8276  06F9  3A80               	xorlw	128
  8277  06FA  3C80               	sublw	128
  8278  06FB  1D03               	skipz
  8279  06FC  2F00               	goto	u6525
  8280  06FD  0857               	movf	?___awdiv,w
  8281  06FE  1383               	bcf	3,7	;select IRP bank0
  8282  06FF  0200               	subwf	0,w
  8283  0700                     u6525:	
  8284  0700  1C03               	skipc
  8285  0701  0008               	return
  8286                           
  8287                           ;TriacRelay_B1.c: 245: Lights->Time = 0;
  8288  0702  0878               	movf	_Lights,w
  8289  0703  3E02               	addlw	2
  8290  0704  0084               	movwf	4
  8291  0705  1383               	bcf	3,7	;select IRP bank0
  8292  0706  0180               	clrf	0
  8293                           
  8294                           ;TriacRelay_B1.c: 246: Lights->GO = 0;
  8295  0707  0878               	movf	_Lights,w
  8296  0708  0084               	movwf	4
  8297  0709  1080               	bcf	0,1
  8298                           
  8299                           ;TriacRelay_B1.c: 247: Lights->RelaySet = 0;
  8300  070A  0878               	movf	_Lights,w
  8301  070B  0084               	movwf	4
  8302  070C  1380               	bcf	0,7
  8303                           
  8304                           ;TriacRelay_B1.c: 250: if (lights == 1) {
  8305  070D  1283               	bcf	3,5	;RP0=0, select bank0
  8306  070E  1303               	bcf	3,6	;RP1=0, select bank0
  8307  070F  0861               	movf	Lights_Control@lights,w
  8308  0710  3A01               	xorlw	1
  8309  0711  1D03               	skipz
  8310  0712  2F15               	goto	l5534
  8311                           
  8312                           ;TriacRelay_B1.c: 251: RA7 = 0;
  8313  0713  1385               	bcf	5,7	;volatile
  8314                           
  8315                           ;TriacRelay_B1.c: 252: }
  8316  0714  0008               	return
  8317  0715                     l5534:	
  8318                           
  8319                           ;TriacRelay_B1.c: 255: else if (lights == 2) {
  8320  0715  0861               	movf	Lights_Control@lights,w
  8321  0716  3A02               	xorlw	2
  8322  0717  1D03               	skipz
  8323  0718  0008               	return
  8324                           
  8325                           ;TriacRelay_B1.c: 256: RC4 = 0;
  8326  0719  1207               	bcf	7,4	;volatile
  8327  071A  0008               	return
  8328  071B                     __end_of_Lights_Control:	
  8329                           
  8330                           	psect	text50
  8331  0956                     __ptext50:	
  8332 ;; *************** function _Lights_Initialization *****************
  8333 ;; Defined at:
  8334 ;;		line 32 in file "../src/TriacRelay_B1.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;		None
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;		None
  8339 ;; Return value:  Size  Location     Type
  8340 ;;		None               void
  8341 ;; Registers used:
  8342 ;;		wreg, status,2, status,0, pclath, cstack
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8348 ;;      Params:         0       0       0       0
  8349 ;;      Locals:         0       0       0       0
  8350 ;;      Temps:          0       0       0       0
  8351 ;;      Totals:         0       0       0       0
  8352 ;;Total ram usage:        0 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    4
  8355 ;; This function calls:
  8356 ;;		_setLights_Initialization
  8357 ;; This function is called by:
  8358 ;;		_main
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           
  8363                           ;psect for function _Lights_Initialization
  8364  0956                     _Lights_Initialization:	
  8365                           
  8366                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  8367                           
  8368                           ;incstack = 0
  8369                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8370  0956  3001               	movlw	1
  8371  0957  158A  2148  158A   	fcall	_setLights_Initialization
  8372                           
  8373                           ;TriacRelay_B1.c: 38: setLights_Initialization(2);
  8374  095A  3002               	movlw	2
  8375  095B  158A  2148         	fcall	_setLights_Initialization
  8376  095D  0008               	return
  8377  095E                     __end_of_Lights_Initialization:	
  8378                           
  8379                           	psect	text51
  8380  0948                     __ptext51:	
  8381 ;; *************** function _setLights_Initialization *****************
  8382 ;; Defined at:
  8383 ;;		line 47 in file "../src/TriacRelay_B1.c"
  8384 ;; Parameters:    Size  Location     Type
  8385 ;;  lights          1    wreg     unsigned char 
  8386 ;; Auto vars:     Size  Location     Type
  8387 ;;  lights          1    0[BANK0 ] unsigned char 
  8388 ;; Return value:  Size  Location     Type
  8389 ;;		None               void
  8390 ;; Registers used:
  8391 ;;		wreg, status,2, status,0, pclath, cstack
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : 0/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8397 ;;      Params:         0       0       0       0
  8398 ;;      Locals:         0       1       0       0
  8399 ;;      Temps:          0       0       0       0
  8400 ;;      Totals:         0       1       0       0
  8401 ;;Total ram usage:        1 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; Hardware stack levels required when called:    3
  8404 ;; This function calls:
  8405 ;;		_LightsPointSelect
  8406 ;; This function is called by:
  8407 ;;		_Lights_Initialization
  8408 ;; This function uses a non-reentrant model
  8409 ;;
  8410                           
  8411                           
  8412                           ;psect for function _setLights_Initialization
  8413  0948                     _setLights_Initialization:	
  8414                           
  8415                           ;incstack = 0
  8416                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8417                           ;setLights_Initialization@lights stored from wreg
  8418  0948  1283               	bcf	3,5	;RP0=0, select bank0
  8419  0949  1303               	bcf	3,6	;RP1=0, select bank0
  8420  094A  00D7               	movwf	setLights_Initialization@lights
  8421                           
  8422                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  8423  094B  0857               	movf	setLights_Initialization@lights,w
  8424  094C  158A  2228         	fcall	_LightsPointSelect
  8425  094E  0008               	return
  8426  094F                     __end_of_setLights_Initialization:	
  8427                           
  8428                           	psect	text52
  8429  0929                     __ptext52:	
  8430 ;; *************** function _LED_Main *****************
  8431 ;; Defined at:
  8432 ;;		line 47 in file "../src/LED_B1.c"
  8433 ;; Parameters:    Size  Location     Type
  8434 ;;		None
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;		None
  8437 ;; Return value:  Size  Location     Type
  8438 ;;		None               void
  8439 ;; Registers used:
  8440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 0/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8446 ;;      Params:         0       0       0       0
  8447 ;;      Locals:         0       0       0       0
  8448 ;;      Temps:          0       0       0       0
  8449 ;;      Totals:         0       0       0       0
  8450 ;;Total ram usage:        0 bytes
  8451 ;; Hardware stack levels used:    1
  8452 ;; Hardware stack levels required when called:    4
  8453 ;; This function calls:
  8454 ;;		_setLED_Main
  8455 ;; This function is called by:
  8456 ;;		_main
  8457 ;; This function uses a non-reentrant model
  8458 ;;
  8459                           
  8460                           
  8461                           ;psect for function _LED_Main
  8462  0929                     _LED_Main:	
  8463                           
  8464                           ;LED_B1.c: 51: setLED_Main(99);
  8465                           
  8466                           ;incstack = 0
  8467                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8468  0929  3063               	movlw	99
  8469  092A  158A  24C3         	fcall	_setLED_Main
  8470  092C  0008               	return
  8471  092D                     __end_of_LED_Main:	
  8472                           
  8473                           	psect	text53
  8474  0CC3                     __ptext53:	
  8475 ;; *************** function _setLED_Main *****************
  8476 ;; Defined at:
  8477 ;;		line 229 in file "../src/LED_B1.c"
  8478 ;; Parameters:    Size  Location     Type
  8479 ;;  led             1    wreg     unsigned char 
  8480 ;; Auto vars:     Size  Location     Type
  8481 ;;  led             1    2[BANK0 ] unsigned char 
  8482 ;; Return value:  Size  Location     Type
  8483 ;;		None               void
  8484 ;; Registers used:
  8485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8486 ;; Tracked objects:
  8487 ;;		On entry : 0/0
  8488 ;;		On exit  : 0/0
  8489 ;;		Unchanged: 0/0
  8490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8491 ;;      Params:         0       0       0       0
  8492 ;;      Locals:         0       1       0       0
  8493 ;;      Temps:          0       2       0       0
  8494 ;;      Totals:         0       3       0       0
  8495 ;;Total ram usage:        3 bytes
  8496 ;; Hardware stack levels used:    1
  8497 ;; Hardware stack levels required when called:    3
  8498 ;; This function calls:
  8499 ;;		_LedPointSelect
  8500 ;; This function is called by:
  8501 ;;		_LED_Main
  8502 ;; This function uses a non-reentrant model
  8503 ;;
  8504                           
  8505                           
  8506                           ;psect for function _setLED_Main
  8507  0CC3                     _setLED_Main:	
  8508                           
  8509                           ;incstack = 0
  8510                           ; Regs used in _setLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8511                           ;setLED_Main@led stored from wreg
  8512  0CC3  1283               	bcf	3,5	;RP0=0, select bank0
  8513  0CC4  1303               	bcf	3,6	;RP1=0, select bank0
  8514  0CC5  00D9               	movwf	setLED_Main@led
  8515                           
  8516                           ;LED_B1.c: 230: LedPointSelect(led);
  8517  0CC6  0859               	movf	setLED_Main@led,w
  8518  0CC7  158A  2314  158A   	fcall	_LedPointSelect
  8519                           
  8520                           ;LED_B1.c: 231: if (LED->GO == 1) {
  8521  0CCA  0876               	movf	_LED,w
  8522  0CCB  0084               	movwf	4
  8523  0CCC  1383               	bcf	3,7	;select IRP bank0
  8524  0CCD  1C80               	btfss	0,1
  8525  0CCE  0008               	return
  8526                           
  8527                           ;LED_B1.c: 232: LED->Time++;
  8528  0CCF  0A76               	incf	_LED,w
  8529  0CD0  0084               	movwf	4
  8530  0CD1  3001               	movlw	1
  8531  0CD2  0780               	addwf	0,f
  8532  0CD3  0A84               	incf	4,f
  8533  0CD4  1803               	skipnc
  8534  0CD5  0A80               	incf	0,f
  8535                           
  8536                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
  8537  0CD6  0A76               	incf	_LED,w
  8538  0CD7  0084               	movwf	4
  8539  0CD8  0800               	movf	0,w
  8540  0CD9  1283               	bcf	3,5	;RP0=0, select bank0
  8541  0CDA  1303               	bcf	3,6	;RP1=0, select bank0
  8542  0CDB  00D7               	movwf	??_setLED_Main
  8543  0CDC  0A84               	incf	4,f
  8544  0CDD  0800               	movf	0,w
  8545  0CDE  00D8               	movwf	??_setLED_Main+1
  8546  0CDF  3000               	movlw	0
  8547  0CE0  0258               	subwf	??_setLED_Main+1,w
  8548  0CE1  3019               	movlw	25
  8549  0CE2  1903               	skipnz
  8550  0CE3  0257               	subwf	??_setLED_Main,w
  8551  0CE4  1C03               	skipc
  8552  0CE5  0008               	return
  8553                           
  8554                           ;LED_B1.c: 234: LED->Time = 0;
  8555  0CE6  0A76               	incf	_LED,w
  8556  0CE7  0084               	movwf	4
  8557  0CE8  0180               	clrf	0
  8558  0CE9  0A84               	incf	4,f
  8559  0CEA  0180               	clrf	0
  8560                           
  8561                           ;LED_B1.c: 237: if (led == 1) {
  8562  0CEB  0859               	movf	setLED_Main@led,w
  8563  0CEC  3A01               	xorlw	1
  8564  0CED  1D03               	skipz
  8565  0CEE  2CF1               	goto	l383
  8566                           
  8567                           ;LED_B1.c: 238: RC7 = RC7 == 1 ? 0 : 1;
  8568  0CEF  3080               	movlw	128
  8569  0CF0  0687               	xorwf	7,f
  8570  0CF1                     l383:	
  8571                           
  8572                           ;LED_B1.c: 239: }
  8573                           ;LED_B1.c: 242: if (led == 2) {
  8574  0CF1  0859               	movf	setLED_Main@led,w
  8575  0CF2  3A02               	xorlw	2
  8576  0CF3  1D03               	skipz
  8577  0CF4  2CF7               	goto	l384
  8578                           
  8579                           ;LED_B1.c: 243: RC6 = RC6 == 1 ? 0 : 1;
  8580  0CF5  3040               	movlw	64
  8581  0CF6  0687               	xorwf	7,f
  8582  0CF7                     l384:	
  8583                           
  8584                           ;LED_B1.c: 244: }
  8585                           ;LED_B1.c: 252: if (led == 99) {
  8586  0CF7  0859               	movf	setLED_Main@led,w
  8587  0CF8  3A63               	xorlw	99
  8588  0CF9  1D03               	skipz
  8589  0CFA  0008               	return
  8590                           
  8591                           ;LED_B1.c: 253: RC1 = RC1 == 1 ? 0 : 1;
  8592  0CFB  3002               	movlw	2
  8593  0CFC  0687               	xorwf	7,f
  8594  0CFD  0008               	return
  8595  0CFE                     __end_of_setLED_Main:	
  8596                           
  8597                           	psect	text54
  8598  07F4                     __ptext54:	
  8599 ;; *************** function _LED_Initialization *****************
  8600 ;; Defined at:
  8601 ;;		line 31 in file "../src/LED_B1.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;		None
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;		None
  8606 ;; Return value:  Size  Location     Type
  8607 ;;		None               void
  8608 ;; Registers used:
  8609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8615 ;;      Params:         0       0       0       0
  8616 ;;      Locals:         0       0       0       0
  8617 ;;      Temps:          0       0       0       0
  8618 ;;      Totals:         0       0       0       0
  8619 ;;Total ram usage:        0 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    5
  8622 ;; This function calls:
  8623 ;;		_setLED_Initialization
  8624 ;; This function is called by:
  8625 ;;		_main
  8626 ;; This function uses a non-reentrant model
  8627 ;;
  8628                           
  8629                           
  8630                           ;psect for function _LED_Initialization
  8631  07F4                     _LED_Initialization:	
  8632                           
  8633                           ;LED_B1.c: 33: setLED_Initialization(1);
  8634                           
  8635                           ;incstack = 0
  8636                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8637  07F4  3001               	movlw	1
  8638  07F5  158A  2216  118A   	fcall	_setLED_Initialization
  8639                           
  8640                           ;LED_B1.c: 36: setLED_Initialization(2);
  8641  07F8  3002               	movlw	2
  8642  07F9  158A  2216  118A   	fcall	_setLED_Initialization
  8643                           
  8644                           ;LED_B1.c: 42: setLED_Initialization(99);
  8645  07FC  3063               	movlw	99
  8646  07FD  158A  2216         	fcall	_setLED_Initialization
  8647  07FF  0008               	return
  8648  0800                     __end_of_LED_Initialization:	
  8649                           
  8650                           	psect	text55
  8651  0A16                     __ptext55:	
  8652 ;; *************** function _setLED_Initialization *****************
  8653 ;; Defined at:
  8654 ;;		line 74 in file "../src/LED_B1.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;  led             1    wreg     unsigned char 
  8657 ;; Auto vars:     Size  Location     Type
  8658 ;;  led             1    2[BANK0 ] unsigned char 
  8659 ;; Return value:  Size  Location     Type
  8660 ;;		None               void
  8661 ;; Registers used:
  8662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8663 ;; Tracked objects:
  8664 ;;		On entry : 0/0
  8665 ;;		On exit  : 0/0
  8666 ;;		Unchanged: 0/0
  8667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8668 ;;      Params:         0       0       0       0
  8669 ;;      Locals:         0       1       0       0
  8670 ;;      Temps:          0       0       0       0
  8671 ;;      Totals:         0       1       0       0
  8672 ;;Total ram usage:        1 bytes
  8673 ;; Hardware stack levels used:    1
  8674 ;; Hardware stack levels required when called:    4
  8675 ;; This function calls:
  8676 ;;		_LedPointSelect
  8677 ;;		_setLED
  8678 ;; This function is called by:
  8679 ;;		_LED_Initialization
  8680 ;; This function uses a non-reentrant model
  8681 ;;
  8682                           
  8683                           
  8684                           ;psect for function _setLED_Initialization
  8685  0A16                     _setLED_Initialization:	
  8686                           
  8687                           ;incstack = 0
  8688                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8689                           ;setLED_Initialization@led stored from wreg
  8690  0A16  1283               	bcf	3,5	;RP0=0, select bank0
  8691  0A17  1303               	bcf	3,6	;RP1=0, select bank0
  8692  0A18  00D9               	movwf	setLED_Initialization@led
  8693                           
  8694                           ;LED_B1.c: 75: LedPointSelect(led);
  8695  0A19  0859               	movf	setLED_Initialization@led,w
  8696  0A1A  158A  2314  158A   	fcall	_LedPointSelect
  8697                           
  8698                           ;LED_B1.c: 76: LED->Enable = 1;
  8699  0A1D  0876               	movf	_LED,w
  8700  0A1E  0084               	movwf	4
  8701  0A1F  1383               	bcf	3,7	;select IRP bank0
  8702  0A20  1400               	bsf	0,0
  8703                           
  8704                           ;LED_B1.c: 77: setLED(led, 0);
  8705  0A21  1283               	bcf	3,5	;RP0=0, select bank0
  8706  0A22  1303               	bcf	3,6	;RP1=0, select bank0
  8707  0A23  01D7               	clrf	setLED@command
  8708  0A24  0859               	movf	setLED_Initialization@led,w
  8709  0A25  118A  27A6         	fcall	_setLED
  8710  0A27  0008               	return
  8711  0A28                     __end_of_setLED_Initialization:	
  8712                           
  8713                           	psect	text56
  8714  04E5                     __ptext56:	
  8715 ;; *************** function _Exception_Main *****************
  8716 ;; Defined at:
  8717 ;;		line 499 in file "../src/Main_B1.c"
  8718 ;; Parameters:    Size  Location     Type
  8719 ;;		None
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;  i               2   18[BANK0 ] int 
  8722 ;;  i               2   16[BANK0 ] int 
  8723 ;;  status          1   15[BANK0 ] unsigned char 
  8724 ;;  error           1   14[BANK0 ] unsigned char 
  8725 ;;  count           1   13[BANK0 ] unsigned char 
  8726 ;;  lights          1   12[BANK0 ] unsigned char 
  8727 ;; Return value:  Size  Location     Type
  8728 ;;		None               void
  8729 ;; Registers used:
  8730 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8731 ;; Tracked objects:
  8732 ;;		On entry : 0/0
  8733 ;;		On exit  : 0/0
  8734 ;;		Unchanged: 0/0
  8735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8736 ;;      Params:         0       0       0       0
  8737 ;;      Locals:         0       8       0       0
  8738 ;;      Temps:          0       1       0       0
  8739 ;;      Totals:         0       9       0       0
  8740 ;;Total ram usage:        9 bytes
  8741 ;; Hardware stack levels used:    1
  8742 ;; Hardware stack levels required when called:    5
  8743 ;; This function calls:
  8744 ;;		_getAll_Lights_Line
  8745 ;;		_getLights_Status
  8746 ;;		_getMain_All_Error_Status
  8747 ;;		_getMain_All_LightsStatus
  8748 ;;		_setBuz
  8749 ;;		_setLED
  8750 ;;		_setLights_SwOff
  8751 ;;		_setLights_SwOn
  8752 ;; This function is called by:
  8753 ;;		_main
  8754 ;; This function uses a non-reentrant model
  8755 ;;
  8756                           
  8757                           
  8758                           ;psect for function _Exception_Main
  8759  04E5                     _Exception_Main:	
  8760                           
  8761                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8762                           
  8763                           ;incstack = 0
  8764                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8765  04E5  3000               	movlw	0
  8766  04E6  158A  24FE  118A   	fcall	_getMain_All_Error_Status
  8767  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  8768  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  8769  04EB  00E2               	movwf	??_Exception_Main
  8770  04EC  0862               	movf	??_Exception_Main,w
  8771  04ED  00E5               	movwf	Exception_Main@error
  8772                           
  8773                           ;Main_B1.c: 501: char lights = 0, count = 2;
  8774  04EE  01E3               	clrf	Exception_Main@lights
  8775  04EF  3002               	movlw	2
  8776  04F0  00E2               	movwf	??_Exception_Main
  8777  04F1  0862               	movf	??_Exception_Main,w
  8778  04F2  00E4               	movwf	Exception_Main@count
  8779                           
  8780                           ;Main_B1.c: 502: char status = 0;
  8781  04F3  01E6               	clrf	Exception_Main@status
  8782                           
  8783                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8784  04F4  1DB3               	btfss	_myMain+2,3
  8785  04F5  2D02               	goto	l6096
  8786                           
  8787                           ;Main_B1.c: 505: if (error == 0) {
  8788  04F6  08E5               	movf	Exception_Main@error,f
  8789  04F7  1D03               	skipz
  8790  04F8  0008               	return
  8791                           
  8792                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8793  04F9  11B3               	bcf	_myMain+2,3
  8794                           
  8795                           ;Main_B1.c: 509: setLED(99, 10);
  8796  04FA  300A               	movlw	10
  8797  04FB  00E2               	movwf	??_Exception_Main
  8798  04FC  0862               	movf	??_Exception_Main,w
  8799  04FD  00D7               	movwf	setLED@command
  8800  04FE  3063               	movlw	99
  8801  04FF  118A  27A6         	fcall	_setLED
  8802                           
  8803                           ;Main_B1.c: 522: }
  8804                           ;Main_B1.c: 523: } else {
  8805  0501  0008               	return
  8806  0502                     l6096:	
  8807                           
  8808                           ;Main_B1.c: 524: if (error != 0) {
  8809  0502  1283               	bcf	3,5	;RP0=0, select bank0
  8810  0503  1303               	bcf	3,6	;RP1=0, select bank0
  8811  0504  0865               	movf	Exception_Main@error,w
  8812  0505  1903               	btfsc	3,2
  8813  0506  0008               	return
  8814                           
  8815                           ;Main_B1.c: 525: myMain.Error_Run = 1;
  8816  0507  15B3               	bsf	_myMain+2,3
  8817                           
  8818                           ;Main_B1.c: 527: setLED(99, 11);
  8819  0508  300B               	movlw	11
  8820  0509  00E2               	movwf	??_Exception_Main
  8821  050A  0862               	movf	??_Exception_Main,w
  8822  050B  00D7               	movwf	setLED@command
  8823  050C  3063               	movlw	99
  8824  050D  118A  27A6  118A   	fcall	_setLED
  8825                           
  8826                           ;Main_B1.c: 591: switch (error) {
  8827  0510  2DAE               	goto	l6136
  8828  0511                     l6102:	
  8829                           ;Main_B1.c: 592: case 1:
  8830                           
  8831                           
  8832                           ;Main_B1.c: 593: for (int i = 0; i < count; i++) {
  8833  0511  1283               	bcf	3,5	;RP0=0, select bank0
  8834  0512  1303               	bcf	3,6	;RP1=0, select bank0
  8835  0513  01E7               	clrf	Exception_Main@i
  8836  0514  01E8               	clrf	Exception_Main@i+1
  8837  0515                     l6110:	
  8838  0515  0868               	movf	Exception_Main@i+1,w
  8839  0516  3A80               	xorlw	128
  8840  0517  00E2               	movwf	??_Exception_Main
  8841  0518  3080               	movlw	128
  8842  0519  0262               	subwf	??_Exception_Main,w
  8843  051A  1D03               	skipz
  8844  051B  2D1E               	goto	u7785
  8845  051C  0864               	movf	Exception_Main@count,w
  8846  051D  0267               	subwf	Exception_Main@i,w
  8847  051E                     u7785:	
  8848  051E  1803               	btfsc	3,0
  8849  051F  2D41               	goto	u7780
  8850                           
  8851                           ;Main_B1.c: 594: if (getLights_Status(i + 1) == 1) {
  8852  0520  1283               	bcf	3,5	;RP0=0, select bank0
  8853  0521  1303               	bcf	3,6	;RP1=0, select bank0
  8854  0522  0867               	movf	Exception_Main@i,w
  8855  0523  3E01               	addlw	1
  8856  0524  158A  21F4  118A   	fcall	_getLights_Status
  8857  0527  3A01               	xorlw	1
  8858  0528  1D03               	skipz
  8859  0529  2D38               	goto	l6108
  8860                           
  8861                           ;Main_B1.c: 596: setLights_SwOn(i + 1);
  8862  052A  1283               	bcf	3,5	;RP0=0, select bank0
  8863  052B  1303               	bcf	3,6	;RP1=0, select bank0
  8864  052C  0867               	movf	Exception_Main@i,w
  8865  052D  3E01               	addlw	1
  8866  052E  158A  23C4  118A   	fcall	_setLights_SwOn
  8867                           
  8868                           ;Main_B1.c: 597: setLights_SwOff(i + 1);
  8869  0531  1283               	bcf	3,5	;RP0=0, select bank0
  8870  0532  1303               	bcf	3,6	;RP1=0, select bank0
  8871  0533  0867               	movf	Exception_Main@i,w
  8872  0534  3E01               	addlw	1
  8873  0535  158A  232E  118A   	fcall	_setLights_SwOff
  8874  0538                     l6108:	
  8875  0538  3001               	movlw	1
  8876  0539  1283               	bcf	3,5	;RP0=0, select bank0
  8877  053A  1303               	bcf	3,6	;RP1=0, select bank0
  8878  053B  07E7               	addwf	Exception_Main@i,f
  8879  053C  1803               	skipnc
  8880  053D  0AE8               	incf	Exception_Main@i+1,f
  8881  053E  3000               	movlw	0
  8882  053F  07E8               	addwf	Exception_Main@i+1,f
  8883  0540  2D15               	goto	l6110
  8884  0541                     u7780:	
  8885  0541  1283               	bcf	3,5	;RP0=0, select bank0
  8886  0542  1303               	bcf	3,6	;RP1=0, select bank0
  8887  0543  0008               	return
  8888  0544                     l6112:	
  8889                           ;Main_B1.c: 601: case 2:
  8890                           
  8891                           ;Main_B1.c: 598: }
  8892                           ;Main_B1.c: 599: }
  8893                           ;Main_B1.c: 600: break;
  8894                           
  8895                           
  8896                           ;Main_B1.c: 602: if (getMain_All_LightsStatus() == 1) {
  8897  0544  158A  21E4  118A   	fcall	_getMain_All_LightsStatus
  8898  0547  3A01               	xorlw	1
  8899  0548  1D03               	skipz
  8900  0549  2D54               	goto	l6116
  8901                           
  8902                           ;Main_B1.c: 603: setBuz(10, 300);
  8903  054A  302C               	movlw	44
  8904  054B  1283               	bcf	3,5	;RP0=0, select bank0
  8905  054C  1303               	bcf	3,6	;RP1=0, select bank0
  8906  054D  00DF               	movwf	setBuz@time
  8907  054E  3001               	movlw	1
  8908  054F  00E0               	movwf	setBuz@time+1
  8909  0550  300A               	movlw	10
  8910  0551  158A  2604  118A   	fcall	_setBuz
  8911  0554                     l6116:	
  8912                           
  8913                           ;Main_B1.c: 604: }
  8914                           ;Main_B1.c: 606: for (int i = 0; i < count; i++) {
  8915  0554  1283               	bcf	3,5	;RP0=0, select bank0
  8916  0555  1303               	bcf	3,6	;RP1=0, select bank0
  8917  0556  01E9               	clrf	Exception_Main@i_2422
  8918  0557  01EA               	clrf	Exception_Main@i_2422+1
  8919  0558                     l6124:	
  8920  0558  086A               	movf	Exception_Main@i_2422+1,w
  8921  0559  3A80               	xorlw	128
  8922  055A  00E2               	movwf	??_Exception_Main
  8923  055B  3080               	movlw	128
  8924  055C  0262               	subwf	??_Exception_Main,w
  8925  055D  1D03               	skipz
  8926  055E  2D61               	goto	u7815
  8927  055F  0864               	movf	Exception_Main@count,w
  8928  0560  0269               	subwf	Exception_Main@i_2422,w
  8929  0561                     u7815:	
  8930  0561  1803               	btfsc	3,0
  8931  0562  2D84               	goto	u7810
  8932                           
  8933                           ;Main_B1.c: 607: if (getLights_Status(i + 1) == 1) {
  8934  0563  1283               	bcf	3,5	;RP0=0, select bank0
  8935  0564  1303               	bcf	3,6	;RP1=0, select bank0
  8936  0565  0869               	movf	Exception_Main@i_2422,w
  8937  0566  3E01               	addlw	1
  8938  0567  158A  21F4  118A   	fcall	_getLights_Status
  8939  056A  3A01               	xorlw	1
  8940  056B  1D03               	skipz
  8941  056C  2D7B               	goto	l6122
  8942                           
  8943                           ;Main_B1.c: 608: setLights_SwOn(i + 1);
  8944  056D  1283               	bcf	3,5	;RP0=0, select bank0
  8945  056E  1303               	bcf	3,6	;RP1=0, select bank0
  8946  056F  0869               	movf	Exception_Main@i_2422,w
  8947  0570  3E01               	addlw	1
  8948  0571  158A  23C4  118A   	fcall	_setLights_SwOn
  8949                           
  8950                           ;Main_B1.c: 609: setLights_SwOff(i + 1);
  8951  0574  1283               	bcf	3,5	;RP0=0, select bank0
  8952  0575  1303               	bcf	3,6	;RP1=0, select bank0
  8953  0576  0869               	movf	Exception_Main@i_2422,w
  8954  0577  3E01               	addlw	1
  8955  0578  158A  232E  118A   	fcall	_setLights_SwOff
  8956  057B                     l6122:	
  8957  057B  3001               	movlw	1
  8958  057C  1283               	bcf	3,5	;RP0=0, select bank0
  8959  057D  1303               	bcf	3,6	;RP1=0, select bank0
  8960  057E  07E9               	addwf	Exception_Main@i_2422,f
  8961  057F  1803               	skipnc
  8962  0580  0AEA               	incf	Exception_Main@i_2422+1,f
  8963  0581  3000               	movlw	0
  8964  0582  07EA               	addwf	Exception_Main@i_2422+1,f
  8965  0583  2D58               	goto	l6124
  8966  0584                     u7810:	
  8967  0584  1283               	bcf	3,5	;RP0=0, select bank0
  8968  0585  1303               	bcf	3,6	;RP1=0, select bank0
  8969  0586  0008               	return
  8970  0587                     l6126:	
  8971                           ;Main_B1.c: 613: case 3:
  8972                           
  8973                           ;Main_B1.c: 610: }
  8974                           ;Main_B1.c: 611: }
  8975                           ;Main_B1.c: 612: break;
  8976                           
  8977                           
  8978                           ;Main_B1.c: 614: status = getAll_Lights_Line();
  8979  0587  158A  21D4  118A   	fcall	_getAll_Lights_Line
  8980  058A  1283               	bcf	3,5	;RP0=0, select bank0
  8981  058B  1303               	bcf	3,6	;RP1=0, select bank0
  8982  058C  00E2               	movwf	??_Exception_Main
  8983  058D  0862               	movf	??_Exception_Main,w
  8984  058E  00E6               	movwf	Exception_Main@status
  8985                           
  8986                           ;Main_B1.c: 616: if (getLights_Status(status) == 1) {
  8987  058F  0866               	movf	Exception_Main@status,w
  8988  0590  158A  21F4  118A   	fcall	_getLights_Status
  8989  0593  3A01               	xorlw	1
  8990  0594  1D03               	skipz
  8991  0595  2DA2               	goto	l6132
  8992                           
  8993                           ;Main_B1.c: 617: setLights_SwOn(status);
  8994  0596  1283               	bcf	3,5	;RP0=0, select bank0
  8995  0597  1303               	bcf	3,6	;RP1=0, select bank0
  8996  0598  0866               	movf	Exception_Main@status,w
  8997  0599  158A  23C4  118A   	fcall	_setLights_SwOn
  8998                           
  8999                           ;Main_B1.c: 618: setLights_SwOff(status);
  9000  059C  1283               	bcf	3,5	;RP0=0, select bank0
  9001  059D  1303               	bcf	3,6	;RP1=0, select bank0
  9002  059E  0866               	movf	Exception_Main@status,w
  9003  059F  158A  232E  118A   	fcall	_setLights_SwOff
  9004  05A2                     l6132:	
  9005                           
  9006                           ;Main_B1.c: 620: }
  9007                           ;Main_B1.c: 621: setBuz(5, 300);
  9008  05A2  302C               	movlw	44
  9009  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  9010  05A4  1303               	bcf	3,6	;RP1=0, select bank0
  9011  05A5  00DF               	movwf	setBuz@time
  9012  05A6  3001               	movlw	1
  9013  05A7  00E0               	movwf	setBuz@time+1
  9014  05A8  3005               	movlw	5
  9015  05A9  158A  2604         	fcall	_setBuz
  9016                           
  9017                           ;Main_B1.c: 622: break;
  9018  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  9019  05AC  1303               	bcf	3,6	;RP1=0, select bank0
  9020  05AD  0008               	return
  9021  05AE                     l6136:	
  9022                           ;Main_B1.c: 623: }
  9023                           
  9024  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  9025  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  9026  05B0  0865               	movf	Exception_Main@error,w
  9027                           
  9028                           ; Switch size 1, requested type "space"
  9029                           ; Number of cases is 3, Range of values is 1 to 3
  9030                           ; switch strategies available:
  9031                           ; Name         Instructions Cycles
  9032                           ; simple_byte           10     6 (average)
  9033                           ; direct_byte           16    10 (fixed)
  9034                           ; jumptable            263     9 (fixed)
  9035                           ;	Chosen strategy is simple_byte
  9036  05B1  3A01               	xorlw	1	; case 1
  9037  05B2  1903               	skipnz
  9038  05B3  2D11               	goto	l6102
  9039  05B4  3A03               	xorlw	3	; case 2
  9040  05B5  1903               	skipnz
  9041  05B6  2D44               	goto	l6112
  9042  05B7  3A01               	xorlw	1	; case 3
  9043  05B8  1903               	skipnz
  9044  05B9  2D87               	goto	l6126
  9045  05BA  2DBC               	goto	l731
  9046  05BB  0008               	return
  9047  05BC                     l731:	
  9048  05BC  0008               	return
  9049  05BD                     __end_of_Exception_Main:	
  9050                           
  9051                           	psect	text57
  9052  0BC4                     __ptext57:	
  9053 ;; *************** function _setLights_SwOn *****************
  9054 ;; Defined at:
  9055 ;;		line 410 in file "../src/TriacRelay_B1.c"
  9056 ;; Parameters:    Size  Location     Type
  9057 ;;  sw              1    wreg     unsigned char 
  9058 ;; Auto vars:     Size  Location     Type
  9059 ;;  sw              1    3[BANK0 ] unsigned char 
  9060 ;; Return value:  Size  Location     Type
  9061 ;;		None               void
  9062 ;; Registers used:
  9063 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9064 ;; Tracked objects:
  9065 ;;		On entry : 0/0
  9066 ;;		On exit  : 0/0
  9067 ;;		Unchanged: 0/0
  9068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9069 ;;      Params:         0       0       0       0
  9070 ;;      Locals:         0       1       0       0
  9071 ;;      Temps:          0       0       0       0
  9072 ;;      Totals:         0       1       0       0
  9073 ;;Total ram usage:        1 bytes
  9074 ;; Hardware stack levels used:    1
  9075 ;; Hardware stack levels required when called:    4
  9076 ;; This function calls:
  9077 ;;		_LightsPointSelect
  9078 ;;		_getLights_Status
  9079 ;;		_setLights_Trigger
  9080 ;; This function is called by:
  9081 ;;		_Exception_Main
  9082 ;;		_PIR_Main
  9083 ;;		_setSw_Main
  9084 ;; This function uses a non-reentrant model
  9085 ;;
  9086                           
  9087                           
  9088                           ;psect for function _setLights_SwOn
  9089  0BC4                     _setLights_SwOn:	
  9090                           
  9091                           ;incstack = 0
  9092                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9093                           ;setLights_SwOn@sw stored from wreg
  9094  0BC4  1283               	bcf	3,5	;RP0=0, select bank0
  9095  0BC5  1303               	bcf	3,6	;RP1=0, select bank0
  9096  0BC6  00DA               	movwf	setLights_SwOn@sw
  9097                           
  9098                           ;TriacRelay_B1.c: 411: LightsPointSelect(sw);
  9099  0BC7  085A               	movf	setLights_SwOn@sw,w
  9100  0BC8  158A  2228  158A   	fcall	_LightsPointSelect
  9101                           
  9102                           ;TriacRelay_B1.c: 414: Lights->SwFlag = 1;
  9103  0BCB  0A78               	incf	_Lights,w
  9104  0BCC  0084               	movwf	4
  9105  0BCD  1383               	bcf	3,7	;select IRP bank0
  9106  0BCE  1500               	bsf	0,2
  9107                           
  9108                           ;TriacRelay_B1.c: 415: if (getLights_Status(sw) == 0) {
  9109  0BCF  1283               	bcf	3,5	;RP0=0, select bank0
  9110  0BD0  1303               	bcf	3,6	;RP1=0, select bank0
  9111  0BD1  085A               	movf	setLights_SwOn@sw,w
  9112  0BD2  158A  21F4  158A   	fcall	_getLights_Status
  9113  0BD5  3800               	iorlw	0
  9114  0BD6  1D03               	skipz
  9115  0BD7  2BE4               	goto	l5208
  9116                           
  9117                           ;TriacRelay_B1.c: 416: Lights->SwStatus = 1;
  9118  0BD8  0A78               	incf	_Lights,w
  9119  0BD9  0084               	movwf	4
  9120  0BDA  1383               	bcf	3,7	;select IRP bank0
  9121  0BDB  1580               	bsf	0,3
  9122                           
  9123                           ;TriacRelay_B1.c: 417: setLights_Trigger(sw, 1);
  9124  0BDC  1283               	bcf	3,5	;RP0=0, select bank0
  9125  0BDD  1303               	bcf	3,6	;RP1=0, select bank0
  9126  0BDE  01D7               	clrf	setLights_Trigger@command
  9127  0BDF  0AD7               	incf	setLights_Trigger@command,f
  9128  0BE0  085A               	movf	setLights_SwOn@sw,w
  9129  0BE1  158A  2348         	fcall	_setLights_Trigger
  9130                           
  9131                           ;TriacRelay_B1.c: 418: } else {
  9132  0BE3  0008               	return
  9133  0BE4                     l5208:	
  9134                           
  9135                           ;TriacRelay_B1.c: 419: Lights->SwStatus = 0;
  9136  0BE4  0A78               	incf	_Lights,w
  9137  0BE5  0084               	movwf	4
  9138  0BE6  1383               	bcf	3,7	;select IRP bank0
  9139  0BE7  1180               	bcf	0,3
  9140  0BE8  0008               	return
  9141  0BE9                     __end_of_setLights_SwOn:	
  9142                           
  9143                           	psect	text58
  9144  09F4                     __ptext58:	
  9145 ;; *************** function _getLights_Status *****************
  9146 ;; Defined at:
  9147 ;;		line 271 in file "../src/TriacRelay_B1.c"
  9148 ;; Parameters:    Size  Location     Type
  9149 ;;  lights          1    wreg     unsigned char 
  9150 ;; Auto vars:     Size  Location     Type
  9151 ;;  lights          1    0[BANK0 ] unsigned char 
  9152 ;;  status          1    1[BANK0 ] unsigned char 
  9153 ;; Return value:  Size  Location     Type
  9154 ;;                  1    wreg      unsigned char 
  9155 ;; Registers used:
  9156 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9157 ;; Tracked objects:
  9158 ;;		On entry : 0/0
  9159 ;;		On exit  : 0/0
  9160 ;;		Unchanged: 0/0
  9161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9162 ;;      Params:         0       0       0       0
  9163 ;;      Locals:         0       2       0       0
  9164 ;;      Temps:          0       0       0       0
  9165 ;;      Totals:         0       2       0       0
  9166 ;;Total ram usage:        2 bytes
  9167 ;; Hardware stack levels used:    1
  9168 ;; Hardware stack levels required when called:    3
  9169 ;; This function calls:
  9170 ;;		_LightsPointSelect
  9171 ;; This function is called by:
  9172 ;;		_Exception_Main
  9173 ;;		_PIR_Main
  9174 ;;		_setLights_SwOn
  9175 ;;		_setLights_ErrorClose
  9176 ;; This function uses a non-reentrant model
  9177 ;;
  9178                           
  9179                           
  9180                           ;psect for function _getLights_Status
  9181  09F4                     _getLights_Status:	
  9182                           
  9183                           ;incstack = 0
  9184                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9185                           ;getLights_Status@lights stored from wreg
  9186  09F4  1283               	bcf	3,5	;RP0=0, select bank0
  9187  09F5  1303               	bcf	3,6	;RP1=0, select bank0
  9188  09F6  00D7               	movwf	getLights_Status@lights
  9189                           
  9190                           ;TriacRelay_B1.c: 272: LightsPointSelect(lights);
  9191  09F7  0857               	movf	getLights_Status@lights,w
  9192  09F8  158A  2228         	fcall	_LightsPointSelect
  9193                           
  9194                           ;TriacRelay_B1.c: 273: char status = Lights->Status == 1 ? 1 : 0;
  9195  09FA  0878               	movf	_Lights,w
  9196  09FB  0084               	movwf	4
  9197  09FC  3000               	movlw	0
  9198  09FD  1383               	bcf	3,7	;select IRP bank0
  9199  09FE  1900               	btfsc	0,2
  9200  09FF  3001               	movlw	1
  9201  0A00  1283               	bcf	3,5	;RP0=0, select bank0
  9202  0A01  1303               	bcf	3,6	;RP1=0, select bank0
  9203  0A02  00D8               	movwf	getLights_Status@status
  9204                           
  9205                           ;TriacRelay_B1.c: 274: return status;
  9206  0A03  0858               	movf	getLights_Status@status,w
  9207  0A04  0008               	return
  9208  0A05                     __end_of_getLights_Status:	
  9209                           
  9210                           	psect	text59
  9211  0B2E                     __ptext59:	
  9212 ;; *************** function _setLights_SwOff *****************
  9213 ;; Defined at:
  9214 ;;		line 438 in file "../src/TriacRelay_B1.c"
  9215 ;; Parameters:    Size  Location     Type
  9216 ;;  sw              1    wreg     unsigned char 
  9217 ;; Auto vars:     Size  Location     Type
  9218 ;;  sw              1    3[BANK0 ] unsigned char 
  9219 ;; Return value:  Size  Location     Type
  9220 ;;		None               void
  9221 ;; Registers used:
  9222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9223 ;; Tracked objects:
  9224 ;;		On entry : 0/0
  9225 ;;		On exit  : 0/0
  9226 ;;		Unchanged: 0/0
  9227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9228 ;;      Params:         0       0       0       0
  9229 ;;      Locals:         0       1       0       0
  9230 ;;      Temps:          0       0       0       0
  9231 ;;      Totals:         0       1       0       0
  9232 ;;Total ram usage:        1 bytes
  9233 ;; Hardware stack levels used:    1
  9234 ;; Hardware stack levels required when called:    4
  9235 ;; This function calls:
  9236 ;;		_LightsPointSelect
  9237 ;;		_setLights_Trigger
  9238 ;; This function is called by:
  9239 ;;		_Exception_Main
  9240 ;;		_PIR_Main
  9241 ;;		_setSw_Main
  9242 ;; This function uses a non-reentrant model
  9243 ;;
  9244                           
  9245                           
  9246                           ;psect for function _setLights_SwOff
  9247  0B2E                     _setLights_SwOff:	
  9248                           
  9249                           ;incstack = 0
  9250                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9251                           ;setLights_SwOff@sw stored from wreg
  9252  0B2E  1283               	bcf	3,5	;RP0=0, select bank0
  9253  0B2F  1303               	bcf	3,6	;RP1=0, select bank0
  9254  0B30  00DA               	movwf	setLights_SwOff@sw
  9255                           
  9256                           ;TriacRelay_B1.c: 440: LightsPointSelect(sw);
  9257  0B31  085A               	movf	setLights_SwOff@sw,w
  9258  0B32  158A  2228  158A   	fcall	_LightsPointSelect
  9259                           
  9260                           ;TriacRelay_B1.c: 442: if (Lights->SwFlag == 1) {
  9261  0B35  0A78               	incf	_Lights,w
  9262  0B36  0084               	movwf	4
  9263  0B37  1383               	bcf	3,7	;select IRP bank0
  9264  0B38  1D00               	btfss	0,2
  9265  0B39  0008               	return
  9266                           
  9267                           ;TriacRelay_B1.c: 443: Lights->SwFlag = 0;
  9268  0B3A  0A78               	incf	_Lights,w
  9269  0B3B  0084               	movwf	4
  9270  0B3C  1100               	bcf	0,2
  9271                           
  9272                           ;TriacRelay_B1.c: 444: if (Lights->SwStatus == 0) {
  9273  0B3D  0A78               	incf	_Lights,w
  9274  0B3E  0084               	movwf	4
  9275  0B3F  1980               	btfsc	0,3
  9276  0B40  0008               	return
  9277                           
  9278                           ;TriacRelay_B1.c: 445: setLights_Trigger(sw, 0);
  9279  0B41  1283               	bcf	3,5	;RP0=0, select bank0
  9280  0B42  1303               	bcf	3,6	;RP1=0, select bank0
  9281  0B43  01D7               	clrf	setLights_Trigger@command
  9282  0B44  085A               	movf	setLights_SwOff@sw,w
  9283  0B45  158A  2348         	fcall	_setLights_Trigger
  9284  0B47  0008               	return
  9285  0B48                     __end_of_setLights_SwOff:	
  9286                           
  9287                           	psect	text60
  9288  0B48                     __ptext60:	
  9289 ;; *************** function _setLights_Trigger *****************
  9290 ;; Defined at:
  9291 ;;		line 278 in file "../src/TriacRelay_B1.c"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;  lights          1    wreg     unsigned char 
  9294 ;;  command         1    0[BANK0 ] unsigned char 
  9295 ;; Auto vars:     Size  Location     Type
  9296 ;;  lights          1    2[BANK0 ] unsigned char 
  9297 ;; Return value:  Size  Location     Type
  9298 ;;		None               void
  9299 ;; Registers used:
  9300 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9301 ;; Tracked objects:
  9302 ;;		On entry : 0/0
  9303 ;;		On exit  : 0/0
  9304 ;;		Unchanged: 0/0
  9305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9306 ;;      Params:         0       1       0       0
  9307 ;;      Locals:         0       1       0       0
  9308 ;;      Temps:          0       1       0       0
  9309 ;;      Totals:         0       3       0       0
  9310 ;;Total ram usage:        3 bytes
  9311 ;; Hardware stack levels used:    1
  9312 ;; Hardware stack levels required when called:    3
  9313 ;; This function calls:
  9314 ;;		_LightsPointSelect
  9315 ;; This function is called by:
  9316 ;;		_setLights_SwOn
  9317 ;;		_setLights_SwOff
  9318 ;;		_setLights_ErrorClose
  9319 ;; This function uses a non-reentrant model
  9320 ;;
  9321                           
  9322                           
  9323                           ;psect for function _setLights_Trigger
  9324  0B48                     _setLights_Trigger:	
  9325                           
  9326                           ;incstack = 0
  9327                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9328                           ;setLights_Trigger@lights stored from wreg
  9329  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  9330  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  9331  0B4A  00D9               	movwf	setLights_Trigger@lights
  9332                           
  9333                           ;TriacRelay_B1.c: 279: LightsPointSelect(lights);
  9334  0B4B  0859               	movf	setLights_Trigger@lights,w
  9335  0B4C  158A  2228         	fcall	_LightsPointSelect
  9336                           
  9337                           ;TriacRelay_B1.c: 280: Lights->Trigger = 1;
  9338  0B4E  0878               	movf	_Lights,w
  9339  0B4F  0084               	movwf	4
  9340  0B50  1383               	bcf	3,7	;select IRP bank0
  9341  0B51  1580               	bsf	0,3
  9342                           
  9343                           ;TriacRelay_B1.c: 281: Lights->Switch = command == 1 ? 1 : 0;
  9344  0B52  1283               	bcf	3,5	;RP0=0, select bank0
  9345  0B53  1303               	bcf	3,6	;RP1=0, select bank0
  9346  0B54  0857               	movf	setLights_Trigger@command,w
  9347  0B55  3A01               	xorlw	1
  9348  0B56  3000               	movlw	0
  9349  0B57  1903               	skipnz
  9350  0B58  3001               	movlw	1
  9351  0B59  00D8               	movwf	??_setLights_Trigger
  9352  0B5A  0878               	movf	_Lights,w
  9353  0B5B  0084               	movwf	4
  9354  0B5C  0ED8               	swapf	??_setLights_Trigger,f
  9355  0B5D  0800               	movf	0,w
  9356  0B5E  0658               	xorwf	??_setLights_Trigger,w
  9357  0B5F  39EF               	andlw	-17
  9358  0B60  0658               	xorwf	??_setLights_Trigger,w
  9359  0B61  0080               	movwf	0
  9360  0B62  0008               	return
  9361  0B63                     __end_of_setLights_Trigger:	
  9362                           
  9363                           	psect	text61
  9364  0A28                     __ptext61:	
  9365 ;; *************** function _LightsPointSelect *****************
  9366 ;; Defined at:
  9367 ;;		line 10 in file "../src/TriacRelay_B1.c"
  9368 ;; Parameters:    Size  Location     Type
  9369 ;;  lights          1    wreg     unsigned char 
  9370 ;; Auto vars:     Size  Location     Type
  9371 ;;  lights          1    5[COMMON] unsigned char 
  9372 ;; Return value:  Size  Location     Type
  9373 ;;		None               void
  9374 ;; Registers used:
  9375 ;;		wreg
  9376 ;; Tracked objects:
  9377 ;;		On entry : 0/0
  9378 ;;		On exit  : 0/0
  9379 ;;		Unchanged: 0/0
  9380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9381 ;;      Params:         0       0       0       0
  9382 ;;      Locals:         1       0       0       0
  9383 ;;      Temps:          1       0       0       0
  9384 ;;      Totals:         2       0       0       0
  9385 ;;Total ram usage:        2 bytes
  9386 ;; Hardware stack levels used:    1
  9387 ;; Hardware stack levels required when called:    2
  9388 ;; This function calls:
  9389 ;;		Nothing
  9390 ;; This function is called by:
  9391 ;;		_setLights_Initialization
  9392 ;;		_setLights_Main
  9393 ;;		_Lights_Control
  9394 ;;		_getLights_Status
  9395 ;;		_setLights_Trigger
  9396 ;;		_setLights_SwOn
  9397 ;;		_setLights_SwOff
  9398 ;; This function uses a non-reentrant model
  9399 ;;
  9400                           
  9401                           
  9402                           ;psect for function _LightsPointSelect
  9403  0A28                     _LightsPointSelect:	
  9404                           
  9405                           ;incstack = 0
  9406                           ; Regs used in _LightsPointSelect: [wreg]
  9407                           ;LightsPointSelect@lights stored from wreg
  9408  0A28  00F5               	movwf	LightsPointSelect@lights
  9409                           
  9410                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  9411  0A29  0875               	movf	LightsPointSelect@lights,w
  9412  0A2A  3A01               	xorlw	1
  9413  0A2B  1D03               	skipz
  9414  0A2C  2A32               	goto	l5040
  9415                           
  9416                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  9417  0A2D  3049               	movlw	_Lights1& (0+255)
  9418  0A2E  00F4               	movwf	??_LightsPointSelect
  9419  0A2F  0874               	movf	??_LightsPointSelect,w
  9420  0A30  00F8               	movwf	_Lights
  9421                           
  9422                           ;TriacRelay_B1.c: 15: }
  9423  0A31  0008               	return
  9424  0A32                     l5040:	
  9425                           
  9426                           ;TriacRelay_B1.c: 19: else if (lights == 2) {
  9427  0A32  0875               	movf	LightsPointSelect@lights,w
  9428  0A33  3A02               	xorlw	2
  9429  0A34  1D03               	skipz
  9430  0A35  0008               	return
  9431                           
  9432                           ;TriacRelay_B1.c: 20: Lights = &Lights2;
  9433  0A36  304E               	movlw	_Lights2& (0+255)
  9434  0A37  00F4               	movwf	??_LightsPointSelect
  9435  0A38  0874               	movf	??_LightsPointSelect,w
  9436  0A39  00F8               	movwf	_Lights
  9437  0A3A  0008               	return
  9438  0A3B                     __end_of_LightsPointSelect:	
  9439                           
  9440                           	psect	text62
  9441  07A6                     __ptext62:	
  9442 ;; *************** function _setLED *****************
  9443 ;; Defined at:
  9444 ;;		line 81 in file "../src/LED_B1.c"
  9445 ;; Parameters:    Size  Location     Type
  9446 ;;  led             1    wreg     unsigned char 
  9447 ;;  command         1    0[BANK0 ] unsigned char 
  9448 ;; Auto vars:     Size  Location     Type
  9449 ;;  led             1    1[BANK0 ] unsigned char 
  9450 ;; Return value:  Size  Location     Type
  9451 ;;		None               void
  9452 ;; Registers used:
  9453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9454 ;; Tracked objects:
  9455 ;;		On entry : 0/0
  9456 ;;		On exit  : 0/0
  9457 ;;		Unchanged: 0/0
  9458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9459 ;;      Params:         0       1       0       0
  9460 ;;      Locals:         0       1       0       0
  9461 ;;      Temps:          0       0       0       0
  9462 ;;      Totals:         0       2       0       0
  9463 ;;Total ram usage:        2 bytes
  9464 ;; Hardware stack levels used:    1
  9465 ;; Hardware stack levels required when called:    3
  9466 ;; This function calls:
  9467 ;;		_LedPointSelect
  9468 ;; This function is called by:
  9469 ;;		_setLED_Initialization
  9470 ;;		_Exception_Main
  9471 ;;		_setSw_Main
  9472 ;;		_setLights
  9473 ;; This function uses a non-reentrant model
  9474 ;;
  9475                           
  9476                           
  9477                           ;psect for function _setLED
  9478  07A6                     _setLED:	
  9479                           
  9480                           ;incstack = 0
  9481                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9482                           ;setLED@led stored from wreg
  9483  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  9484  07A7  1303               	bcf	3,6	;RP1=0, select bank0
  9485  07A8  00D8               	movwf	setLED@led
  9486                           
  9487                           ;LED_B1.c: 82: LedPointSelect(led);
  9488  07A9  0858               	movf	setLED@led,w
  9489  07AA  158A  2314  118A   	fcall	_LedPointSelect
  9490                           
  9491                           ;LED_B1.c: 83: if (command == 0) {
  9492  07AD  1283               	bcf	3,5	;RP0=0, select bank0
  9493  07AE  1303               	bcf	3,6	;RP1=0, select bank0
  9494  07AF  08D7               	movf	setLED@command,f
  9495  07B0  1D03               	skipz
  9496  07B1  2FBF               	goto	l5060
  9497                           
  9498                           ;LED_B1.c: 85: if (led == 1) {
  9499  07B2  0858               	movf	setLED@led,w
  9500  07B3  3A01               	xorlw	1
  9501  07B4  1D03               	skipz
  9502  07B5  2FB7               	goto	l5052
  9503                           
  9504                           ;LED_B1.c: 89: RC7 = 1;
  9505  07B6  1787               	bsf	7,7	;volatile
  9506  07B7                     l5052:	
  9507                           
  9508                           ;LED_B1.c: 91: }
  9509                           ;LED_B1.c: 94: if (led == 2) {
  9510  07B7  0858               	movf	setLED@led,w
  9511  07B8  3A02               	xorlw	2
  9512  07B9  1903               	btfsc	3,2
  9513                           
  9514                           ;LED_B1.c: 98: RC6 = 1;
  9515  07BA  1707               	bsf	7,6	;volatile
  9516                           
  9517                           ;LED_B1.c: 100: }
  9518                           ;LED_B1.c: 112: if (led == 99) {
  9519  07BB  0858               	movf	setLED@led,w
  9520  07BC  3A63               	xorlw	99
  9521  07BD  1903               	btfsc	3,2
  9522                           
  9523                           ;LED_B1.c: 116: RC1 = 1;
  9524  07BE  1487               	bsf	7,1	;volatile
  9525  07BF                     l5060:	
  9526                           
  9527                           ;LED_B1.c: 118: }
  9528                           ;LED_B1.c: 120: }
  9529                           ;LED_B1.c: 121: if (command == 1) {
  9530  07BF  0857               	movf	setLED@command,w
  9531  07C0  3A01               	xorlw	1
  9532  07C1  1D03               	skipz
  9533  07C2  2FD0               	goto	l5074
  9534                           
  9535                           ;LED_B1.c: 123: if (led == 1) {
  9536  07C3  0858               	movf	setLED@led,w
  9537  07C4  3A01               	xorlw	1
  9538  07C5  1D03               	skipz
  9539  07C6  2FC8               	goto	l5066
  9540                           
  9541                           ;LED_B1.c: 127: RC7 = 0;
  9542  07C7  1387               	bcf	7,7	;volatile
  9543  07C8                     l5066:	
  9544                           
  9545                           ;LED_B1.c: 129: }
  9546                           ;LED_B1.c: 132: if (led == 2) {
  9547  07C8  0858               	movf	setLED@led,w
  9548  07C9  3A02               	xorlw	2
  9549  07CA  1903               	btfsc	3,2
  9550                           
  9551                           ;LED_B1.c: 136: RC6 = 0;
  9552  07CB  1307               	bcf	7,6	;volatile
  9553                           
  9554                           ;LED_B1.c: 138: }
  9555                           ;LED_B1.c: 150: if (led == 99) {
  9556  07CC  0858               	movf	setLED@led,w
  9557  07CD  3A63               	xorlw	99
  9558  07CE  1903               	btfsc	3,2
  9559                           
  9560                           ;LED_B1.c: 154: RC1 = 0;
  9561  07CF  1087               	bcf	7,1	;volatile
  9562  07D0                     l5074:	
  9563                           
  9564                           ;LED_B1.c: 156: }
  9565                           ;LED_B1.c: 158: }
  9566                           ;LED_B1.c: 159: if (command == 10) {
  9567  07D0  0857               	movf	setLED@command,w
  9568  07D1  3A0A               	xorlw	10
  9569  07D2  1D03               	skipz
  9570  07D3  2FEB               	goto	l5092
  9571                           
  9572                           ;LED_B1.c: 160: LED->GO = 0;
  9573  07D4  0876               	movf	_LED,w
  9574  07D5  0084               	movwf	4
  9575  07D6  1383               	bcf	3,7	;select IRP bank0
  9576  07D7  1080               	bcf	0,1
  9577                           
  9578                           ;LED_B1.c: 161: LED->Time = 0;
  9579  07D8  0A76               	incf	_LED,w
  9580  07D9  0084               	movwf	4
  9581  07DA  0180               	clrf	0
  9582  07DB  0A84               	incf	4,f
  9583  07DC  0180               	clrf	0
  9584                           
  9585                           ;LED_B1.c: 163: if (led == 1) {
  9586  07DD  0858               	movf	setLED@led,w
  9587  07DE  3A01               	xorlw	1
  9588  07DF  1D03               	skipz
  9589  07E0  2FE3               	goto	l5084
  9590                           
  9591                           ;LED_B1.c: 167: RC7 = 1;
  9592  07E1  1787               	bsf	7,7	;volatile
  9593                           
  9594                           ;LED_B1.c: 169: }
  9595  07E2  2FE7               	goto	l5088
  9596  07E3                     l5084:	
  9597                           
  9598                           ;LED_B1.c: 172: else if (led == 2) {
  9599  07E3  0858               	movf	setLED@led,w
  9600  07E4  3A02               	xorlw	2
  9601  07E5  1903               	btfsc	3,2
  9602                           
  9603                           ;LED_B1.c: 176: RC6 = 1;
  9604  07E6  1707               	bsf	7,6	;volatile
  9605  07E7                     l5088:	
  9606                           
  9607                           ;LED_B1.c: 178: }
  9608                           ;LED_B1.c: 190: if (led == 99) {
  9609  07E7  0858               	movf	setLED@led,w
  9610  07E8  3A63               	xorlw	99
  9611  07E9  1903               	btfsc	3,2
  9612                           
  9613                           ;LED_B1.c: 194: RC1 = 1;
  9614  07EA  1487               	bsf	7,1	;volatile
  9615  07EB                     l5092:	
  9616                           
  9617                           ;LED_B1.c: 196: }
  9618                           ;LED_B1.c: 198: }
  9619                           ;LED_B1.c: 199: if (command == 11) {
  9620  07EB  0857               	movf	setLED@command,w
  9621  07EC  3A0B               	xorlw	11
  9622  07ED  1D03               	skipz
  9623  07EE  0008               	return
  9624                           
  9625                           ;LED_B1.c: 200: LED->GO = 1;
  9626  07EF  0876               	movf	_LED,w
  9627  07F0  0084               	movwf	4
  9628  07F1  1383               	bcf	3,7	;select IRP bank0
  9629  07F2  1480               	bsf	0,1
  9630  07F3  0008               	return
  9631  07F4                     __end_of_setLED:	
  9632                           
  9633                           	psect	text63
  9634  0B14                     __ptext63:	
  9635 ;; *************** function _LedPointSelect *****************
  9636 ;; Defined at:
  9637 ;;		line 7 in file "../src/LED_B1.c"
  9638 ;; Parameters:    Size  Location     Type
  9639 ;;  led             1    wreg     unsigned char 
  9640 ;; Auto vars:     Size  Location     Type
  9641 ;;  led             1    5[COMMON] unsigned char 
  9642 ;; Return value:  Size  Location     Type
  9643 ;;		None               void
  9644 ;; Registers used:
  9645 ;;		wreg
  9646 ;; Tracked objects:
  9647 ;;		On entry : 0/0
  9648 ;;		On exit  : 0/0
  9649 ;;		Unchanged: 0/0
  9650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9651 ;;      Params:         0       0       0       0
  9652 ;;      Locals:         1       0       0       0
  9653 ;;      Temps:          1       0       0       0
  9654 ;;      Totals:         2       0       0       0
  9655 ;;Total ram usage:        2 bytes
  9656 ;; Hardware stack levels used:    1
  9657 ;; Hardware stack levels required when called:    2
  9658 ;; This function calls:
  9659 ;;		Nothing
  9660 ;; This function is called by:
  9661 ;;		_setLED_Initialization
  9662 ;;		_setLED
  9663 ;;		_setLED_Main
  9664 ;; This function uses a non-reentrant model
  9665 ;;
  9666                           
  9667                           
  9668                           ;psect for function _LedPointSelect
  9669  0B14                     _LedPointSelect:	
  9670                           
  9671                           ;incstack = 0
  9672                           ; Regs used in _LedPointSelect: [wreg]
  9673                           ;LedPointSelect@led stored from wreg
  9674  0B14  00F5               	movwf	LedPointSelect@led
  9675                           
  9676                           ;LED_B1.c: 9: if (led == 1) {
  9677  0B15  0875               	movf	LedPointSelect@led,w
  9678  0B16  3A01               	xorlw	1
  9679  0B17  1D03               	skipz
  9680  0B18  2B1D               	goto	l349
  9681                           
  9682                           ;LED_B1.c: 10: LED = &VarLED1;
  9683  0B19  30E6               	movlw	_VarLED1& (0+255)
  9684  0B1A  00F4               	movwf	??_LedPointSelect
  9685  0B1B  0874               	movf	??_LedPointSelect,w
  9686  0B1C  00F6               	movwf	_LED
  9687  0B1D                     l349:	
  9688                           
  9689                           ;LED_B1.c: 11: }
  9690                           ;LED_B1.c: 14: if (led == 2) {
  9691  0B1D  0875               	movf	LedPointSelect@led,w
  9692  0B1E  3A02               	xorlw	2
  9693  0B1F  1D03               	skipz
  9694  0B20  2B25               	goto	l350
  9695                           
  9696                           ;LED_B1.c: 15: LED = &VarLED2;
  9697  0B21  30EA               	movlw	_VarLED2& (0+255)
  9698  0B22  00F4               	movwf	??_LedPointSelect
  9699  0B23  0874               	movf	??_LedPointSelect,w
  9700  0B24  00F6               	movwf	_LED
  9701  0B25                     l350:	
  9702                           
  9703                           ;LED_B1.c: 16: }
  9704                           ;LED_B1.c: 24: if (led == 99) {
  9705  0B25  0875               	movf	LedPointSelect@led,w
  9706  0B26  3A63               	xorlw	99
  9707  0B27  1D03               	skipz
  9708  0B28  0008               	return
  9709                           
  9710                           ;LED_B1.c: 25: LED = &VarErrLED;
  9711  0B29  3053               	movlw	_VarErrLED& (0+255)
  9712  0B2A  00F4               	movwf	??_LedPointSelect
  9713  0B2B  0874               	movf	??_LedPointSelect,w
  9714  0B2C  00F6               	movwf	_LED
  9715  0B2D  0008               	return
  9716  0B2E                     __end_of_LedPointSelect:	
  9717                           
  9718                           	psect	text64
  9719  0E04                     __ptext64:	
  9720 ;; *************** function _setBuz *****************
  9721 ;; Defined at:
  9722 ;;		line 22 in file "../src/Buzzer_B1.c"
  9723 ;; Parameters:    Size  Location     Type
  9724 ;;  count           1    wreg     unsigned char 
  9725 ;;  time            2    8[BANK0 ] int 
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;  count           1   10[BANK0 ] unsigned char 
  9728 ;; Return value:  Size  Location     Type
  9729 ;;		None               void
  9730 ;; Registers used:
  9731 ;;		wreg, status,2, status,0, pclath, cstack
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/0
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9737 ;;      Params:         0       2       0       0
  9738 ;;      Locals:         0       1       0       0
  9739 ;;      Temps:          1       0       0       0
  9740 ;;      Totals:         1       3       0       0
  9741 ;;Total ram usage:        4 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; Hardware stack levels required when called:    3
  9744 ;; This function calls:
  9745 ;;		___awdiv
  9746 ;; This function is called by:
  9747 ;;		_my_MainTimer
  9748 ;;		_Exception_Main
  9749 ;;		_setTemp_Main
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           
  9754                           ;psect for function _setBuz
  9755  0E04                     _setBuz:	
  9756                           
  9757                           ;incstack = 0
  9758                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
  9759                           ;setBuz@count stored from wreg
  9760  0E04  1283               	bcf	3,5	;RP0=0, select bank0
  9761  0E05  1303               	bcf	3,6	;RP1=0, select bank0
  9762  0E06  00E1               	movwf	setBuz@count
  9763                           
  9764                           ;Buzzer_B1.c: 23: time /= 20;
  9765  0E07  3014               	movlw	20
  9766  0E08  00D7               	movwf	___awdiv@divisor
  9767  0E09  3000               	movlw	0
  9768  0E0A  00D8               	movwf	___awdiv@divisor+1
  9769  0E0B  0860               	movf	setBuz@time+1,w
  9770  0E0C  01DA               	clrf	___awdiv@dividend+1
  9771  0E0D  07DA               	addwf	___awdiv@dividend+1,f
  9772  0E0E  085F               	movf	setBuz@time,w
  9773  0E0F  01D9               	clrf	___awdiv@dividend
  9774  0E10  07D9               	addwf	___awdiv@dividend,f
  9775  0E11  158A  26A7  158A   	fcall	___awdiv
  9776  0E14  1283               	bcf	3,5	;RP0=0, select bank0
  9777  0E15  1303               	bcf	3,6	;RP1=0, select bank0
  9778  0E16  0858               	movf	?___awdiv+1,w
  9779  0E17  01E0               	clrf	setBuz@time+1
  9780  0E18  07E0               	addwf	setBuz@time+1,f
  9781  0E19  0857               	movf	?___awdiv,w
  9782  0E1A  01DF               	clrf	setBuz@time
  9783  0E1B  07DF               	addwf	setBuz@time,f
  9784                           
  9785                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
  9786  0E1C  1C20               	btfss	_Buz1,0
  9787  0E1D  0008               	return
  9788                           
  9789                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
  9790  0E1E  18A0               	btfsc	_Buz1,1
  9791  0E1F  2E2F               	goto	l58
  9792                           
  9793                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
  9794  0E20  14A0               	bsf	_Buz1,1
  9795                           
  9796                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
  9797  0E21  01A1               	clrf	_Buz1+1
  9798  0E22  01A2               	clrf	_Buz1+2
  9799                           
  9800                           ;Buzzer_B1.c: 28: Buz1.Count = count;
  9801  0E23  0861               	movf	setBuz@count,w
  9802  0E24  00F5               	movwf	??_setBuz
  9803  0E25  0875               	movf	??_setBuz,w
  9804  0E26  00A3               	movwf	_Buz1+3
  9805                           
  9806                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
  9807  0E27  0860               	movf	setBuz@time+1,w
  9808  0E28  01A7               	clrf	_Buz1+7
  9809  0E29  07A7               	addwf	_Buz1+7,f
  9810  0E2A  085F               	movf	setBuz@time,w
  9811  0E2B  01A6               	clrf	_Buz1+6
  9812  0E2C  07A6               	addwf	_Buz1+6,f
  9813                           
  9814                           ;Buzzer_B1.c: 30: RC0 = 1;
  9815  0E2D  1407               	bsf	7,0	;volatile
  9816                           
  9817                           ;Buzzer_B1.c: 31: } else {
  9818  0E2E  0008               	return
  9819  0E2F                     l58:	
  9820                           
  9821                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
  9822  0E2F  19A0               	btfsc	_Buz1,3
  9823  0E30  2E3D               	goto	l60
  9824                           
  9825                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
  9826  0E31  15A0               	bsf	_Buz1,3
  9827                           
  9828                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
  9829  0E32  0861               	movf	setBuz@count,w
  9830  0E33  00F5               	movwf	??_setBuz
  9831  0E34  0875               	movf	??_setBuz,w
  9832  0E35  00A4               	movwf	_Buz1+4
  9833                           
  9834                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
  9835  0E36  0860               	movf	setBuz@time+1,w
  9836  0E37  01A9               	clrf	_Buz1+9
  9837  0E38  07A9               	addwf	_Buz1+9,f
  9838  0E39  085F               	movf	setBuz@time,w
  9839  0E3A  01A8               	clrf	_Buz1+8
  9840  0E3B  07A8               	addwf	_Buz1+8,f
  9841                           
  9842                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
  9843  0E3C  0008               	return
  9844  0E3D                     l60:	
  9845  0E3D  1A20               	btfsc	_Buz1,4
  9846  0E3E  0008               	return
  9847                           
  9848                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
  9849  0E3F  1620               	bsf	_Buz1,4
  9850                           
  9851                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
  9852  0E40  0861               	movf	setBuz@count,w
  9853  0E41  00F5               	movwf	??_setBuz
  9854  0E42  0875               	movf	??_setBuz,w
  9855  0E43  00A5               	movwf	_Buz1+5
  9856                           
  9857                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
  9858  0E44  0860               	movf	setBuz@time+1,w
  9859  0E45  01AB               	clrf	_Buz1+11
  9860  0E46  07AB               	addwf	_Buz1+11,f
  9861  0E47  085F               	movf	setBuz@time,w
  9862  0E48  01AA               	clrf	_Buz1+10
  9863  0E49  07AA               	addwf	_Buz1+10,f
  9864  0E4A  0008               	return
  9865  0E4B                     __end_of_setBuz:	
  9866                           
  9867                           	psect	text65
  9868  0EA7                     __ptext65:	
  9869 ;; *************** function ___awdiv *****************
  9870 ;; Defined at:
  9871 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  9872 ;; Parameters:    Size  Location     Type
  9873 ;;  divisor         2    0[BANK0 ] int 
  9874 ;;  dividend        2    2[BANK0 ] int 
  9875 ;; Auto vars:     Size  Location     Type
  9876 ;;  quotient        2    6[BANK0 ] int 
  9877 ;;  sign            1    5[BANK0 ] unsigned char 
  9878 ;;  counter         1    4[BANK0 ] unsigned char 
  9879 ;; Return value:  Size  Location     Type
  9880 ;;                  2    0[BANK0 ] int 
  9881 ;; Registers used:
  9882 ;;		wreg, status,2, status,0
  9883 ;; Tracked objects:
  9884 ;;		On entry : 0/0
  9885 ;;		On exit  : 0/0
  9886 ;;		Unchanged: 0/0
  9887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9888 ;;      Params:         0       4       0       0
  9889 ;;      Locals:         0       4       0       0
  9890 ;;      Temps:          1       0       0       0
  9891 ;;      Totals:         1       8       0       0
  9892 ;;Total ram usage:        9 bytes
  9893 ;; Hardware stack levels used:    1
  9894 ;; Hardware stack levels required when called:    2
  9895 ;; This function calls:
  9896 ;;		Nothing
  9897 ;; This function is called by:
  9898 ;;		_setBuz
  9899 ;;		_getPIR_AD
  9900 ;;		_Lights_Control
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           
  9905                           ;psect for function ___awdiv
  9906  0EA7                     ___awdiv:	
  9907                           
  9908                           ;incstack = 0
  9909                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9910  0EA7  1283               	bcf	3,5	;RP0=0, select bank0
  9911  0EA8  1303               	bcf	3,6	;RP1=0, select bank0
  9912  0EA9  01DC               	clrf	___awdiv@sign
  9913  0EAA  1FD8               	btfss	___awdiv@divisor+1,7
  9914  0EAB  2EB3               	goto	l5124
  9915  0EAC  09D7               	comf	___awdiv@divisor,f
  9916  0EAD  09D8               	comf	___awdiv@divisor+1,f
  9917  0EAE  0AD7               	incf	___awdiv@divisor,f
  9918  0EAF  1903               	skipnz
  9919  0EB0  0AD8               	incf	___awdiv@divisor+1,f
  9920  0EB1  01DC               	clrf	___awdiv@sign
  9921  0EB2  0ADC               	incf	___awdiv@sign,f
  9922  0EB3                     l5124:	
  9923  0EB3  1FDA               	btfss	___awdiv@dividend+1,7
  9924  0EB4  2EBE               	goto	l5130
  9925  0EB5  09D9               	comf	___awdiv@dividend,f
  9926  0EB6  09DA               	comf	___awdiv@dividend+1,f
  9927  0EB7  0AD9               	incf	___awdiv@dividend,f
  9928  0EB8  1903               	skipnz
  9929  0EB9  0ADA               	incf	___awdiv@dividend+1,f
  9930  0EBA  3001               	movlw	1
  9931  0EBB  00F4               	movwf	??___awdiv
  9932  0EBC  0874               	movf	??___awdiv,w
  9933  0EBD  06DC               	xorwf	___awdiv@sign,f
  9934  0EBE                     l5130:	
  9935  0EBE  01DD               	clrf	___awdiv@quotient
  9936  0EBF  01DE               	clrf	___awdiv@quotient+1
  9937  0EC0  0858               	movf	___awdiv@divisor+1,w
  9938  0EC1  0457               	iorwf	___awdiv@divisor,w
  9939  0EC2  1903               	skipnz
  9940  0EC3  2EF5               	goto	l5152
  9941  0EC4  01DB               	clrf	___awdiv@counter
  9942  0EC5  0ADB               	incf	___awdiv@counter,f
  9943  0EC6                     l5140:	
  9944  0EC6  1BD8               	btfsc	___awdiv@divisor+1,7
  9945  0EC7  2ED4               	goto	l5142
  9946  0EC8  3001               	movlw	1
  9947  0EC9                     u5765:	
  9948  0EC9  1003               	clrc
  9949  0ECA  0DD7               	rlf	___awdiv@divisor,f
  9950  0ECB  0DD8               	rlf	___awdiv@divisor+1,f
  9951  0ECC  3EFF               	addlw	-1
  9952  0ECD  1D03               	skipz
  9953  0ECE  2EC9               	goto	u5765
  9954  0ECF  3001               	movlw	1
  9955  0ED0  00F4               	movwf	??___awdiv
  9956  0ED1  0874               	movf	??___awdiv,w
  9957  0ED2  07DB               	addwf	___awdiv@counter,f
  9958  0ED3  2EC6               	goto	l5140
  9959  0ED4                     l5142:	
  9960  0ED4  3001               	movlw	1
  9961  0ED5                     u5785:	
  9962  0ED5  1003               	clrc
  9963  0ED6  0DDD               	rlf	___awdiv@quotient,f
  9964  0ED7  0DDE               	rlf	___awdiv@quotient+1,f
  9965  0ED8  3EFF               	addlw	-1
  9966  0ED9  1D03               	skipz
  9967  0EDA  2ED5               	goto	u5785
  9968  0EDB  0858               	movf	___awdiv@divisor+1,w
  9969  0EDC  025A               	subwf	___awdiv@dividend+1,w
  9970  0EDD  1D03               	skipz
  9971  0EDE  2EE1               	goto	u5795
  9972  0EDF  0857               	movf	___awdiv@divisor,w
  9973  0EE0  0259               	subwf	___awdiv@dividend,w
  9974  0EE1                     u5795:	
  9975  0EE1  1C03               	skipc
  9976  0EE2  2EEA               	goto	l5148
  9977  0EE3  0857               	movf	___awdiv@divisor,w
  9978  0EE4  02D9               	subwf	___awdiv@dividend,f
  9979  0EE5  0858               	movf	___awdiv@divisor+1,w
  9980  0EE6  1C03               	skipc
  9981  0EE7  03DA               	decf	___awdiv@dividend+1,f
  9982  0EE8  02DA               	subwf	___awdiv@dividend+1,f
  9983  0EE9  145D               	bsf	___awdiv@quotient,0
  9984  0EEA                     l5148:	
  9985  0EEA  3001               	movlw	1
  9986  0EEB                     u5805:	
  9987  0EEB  1003               	clrc
  9988  0EEC  0CD8               	rrf	___awdiv@divisor+1,f
  9989  0EED  0CD7               	rrf	___awdiv@divisor,f
  9990  0EEE  3EFF               	addlw	-1
  9991  0EEF  1D03               	skipz
  9992  0EF0  2EEB               	goto	u5805
  9993  0EF1  3001               	movlw	1
  9994  0EF2  02DB               	subwf	___awdiv@counter,f
  9995  0EF3  1D03               	btfss	3,2
  9996  0EF4  2ED4               	goto	l5142
  9997  0EF5                     l5152:	
  9998  0EF5  085C               	movf	___awdiv@sign,w
  9999  0EF6  1903               	btfsc	3,2
 10000  0EF7  2EFD               	goto	l5156
 10001  0EF8  09DD               	comf	___awdiv@quotient,f
 10002  0EF9  09DE               	comf	___awdiv@quotient+1,f
 10003  0EFA  0ADD               	incf	___awdiv@quotient,f
 10004  0EFB  1903               	skipnz
 10005  0EFC  0ADE               	incf	___awdiv@quotient+1,f
 10006  0EFD                     l5156:	
 10007  0EFD  085E               	movf	___awdiv@quotient+1,w
 10008  0EFE  01D8               	clrf	?___awdiv+1
 10009  0EFF  07D8               	addwf	?___awdiv+1,f
 10010  0F00  085D               	movf	___awdiv@quotient,w
 10011  0F01  01D7               	clrf	?___awdiv
 10012  0F02  07D7               	addwf	?___awdiv,f
 10013  0F03  0008               	return
 10014  0F04                     __end_of___awdiv:	
 10015                           
 10016                           	psect	text66
 10017  09E4                     __ptext66:	
 10018 ;; *************** function _getMain_All_LightsStatus *****************
 10019 ;; Defined at:
 10020 ;;		line 373 in file "../src/Main_B1.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;		None
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;  status          1    4[COMMON] unsigned char 
 10025 ;; Return value:  Size  Location     Type
 10026 ;;                  1    wreg      unsigned char 
 10027 ;; Registers used:
 10028 ;;		wreg, status,2, status,0
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10034 ;;      Params:         0       0       0       0
 10035 ;;      Locals:         1       0       0       0
 10036 ;;      Temps:          0       0       0       0
 10037 ;;      Totals:         1       0       0       0
 10038 ;;Total ram usage:        1 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    2
 10041 ;; This function calls:
 10042 ;;		Nothing
 10043 ;; This function is called by:
 10044 ;;		_Exception_Main
 10045 ;;		_Load_Main
 10046 ;;		_setTemp_Main
 10047 ;;		_Lights_Main
 10048 ;; This function uses a non-reentrant model
 10049 ;;
 10050                           
 10051                           
 10052                           ;psect for function _getMain_All_LightsStatus
 10053  09E4                     _getMain_All_LightsStatus:	
 10054                           
 10055                           ;Main_B1.c: 374: char status = 0;
 10056                           
 10057                           ;incstack = 0
 10058                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 10059  09E4  01F4               	clrf	getMain_All_LightsStatus@status
 10060                           
 10061                           ;Main_B1.c: 387: status = Lights1.Status == 1 ? 1 : 0;
 10062  09E5  3000               	movlw	0
 10063  09E6  1283               	bcf	3,5	;RP0=0, select bank0
 10064  09E7  1303               	bcf	3,6	;RP1=0, select bank0
 10065  09E8  1949               	btfsc	_Lights1,2
 10066  09E9  3001               	movlw	1
 10067  09EA  00F4               	movwf	getMain_All_LightsStatus@status
 10068                           
 10069                           ;Main_B1.c: 388: if (status == 0) {
 10070  09EB  08F4               	movf	getMain_All_LightsStatus@status,f
 10071  09EC  1D03               	skipz
 10072  09ED  29F2               	goto	l3738
 10073                           
 10074                           ;Main_B1.c: 389: status = Lights2.Status == 1 ? 1 : 0;
 10075  09EE  3000               	movlw	0
 10076  09EF  194E               	btfsc	_Lights2,2
 10077  09F0  3001               	movlw	1
 10078  09F1  00F4               	movwf	getMain_All_LightsStatus@status
 10079  09F2                     l3738:	
 10080                           
 10081                           ;Main_B1.c: 390: }
 10082                           ;Main_B1.c: 420: return status;
 10083  09F2  0874               	movf	getMain_All_LightsStatus@status,w
 10084  09F3  0008               	return
 10085  09F4                     __end_of_getMain_All_LightsStatus:	
 10086                           
 10087                           	psect	text67
 10088  0CFE                     __ptext67:	
 10089 ;; *************** function _getMain_All_Error_Status *****************
 10090 ;; Defined at:
 10091 ;;		line 424 in file "../src/Main_B1.c"
 10092 ;; Parameters:    Size  Location     Type
 10093 ;;  command         1    wreg     unsigned char 
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;  command         1    4[BANK0 ] unsigned char 
 10096 ;;  status          1    5[BANK0 ] unsigned char 
 10097 ;; Return value:  Size  Location     Type
 10098 ;;                  1    wreg      unsigned char 
 10099 ;; Registers used:
 10100 ;;		wreg, status,2, status,0
 10101 ;; Tracked objects:
 10102 ;;		On entry : 0/0
 10103 ;;		On exit  : 0/0
 10104 ;;		Unchanged: 0/0
 10105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10106 ;;      Params:         0       0       0       0
 10107 ;;      Locals:         0       6       0       0
 10108 ;;      Temps:          1       0       0       0
 10109 ;;      Totals:         1       6       0       0
 10110 ;;Total ram usage:        7 bytes
 10111 ;; Hardware stack levels used:    1
 10112 ;; Hardware stack levels required when called:    2
 10113 ;; This function calls:
 10114 ;;		Nothing
 10115 ;; This function is called by:
 10116 ;;		_Exception_Main
 10117 ;;		_Load_Main
 10118 ;;		_setTemp_Main
 10119 ;;		_PIR_Main
 10120 ;;		_setSYSC_Main
 10121 ;;		_setSw_Main
 10122 ;;		_Lights_Main
 10123 ;; This function uses a non-reentrant model
 10124 ;;
 10125                           
 10126                           
 10127                           ;psect for function _getMain_All_Error_Status
 10128  0CFE                     _getMain_All_Error_Status:	
 10129                           
 10130                           ;incstack = 0
 10131                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 10132                           ;getMain_All_Error_Status@command stored from wreg
 10133  0CFE  1283               	bcf	3,5	;RP0=0, select bank0
 10134  0CFF  1303               	bcf	3,6	;RP1=0, select bank0
 10135  0D00  00DB               	movwf	getMain_All_Error_Status@command
 10136                           
 10137                           ;Main_B1.c: 425: char status = 0;
 10138  0D01  01DC               	clrf	getMain_All_Error_Status@status
 10139                           
 10140                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
 10141  0D02  08DC               	movf	getMain_All_Error_Status@status,f
 10142  0D03  1D03               	skipz
 10143  0D04  2D0D               	goto	l3750
 10144  0D05  085B               	movf	getMain_All_Error_Status@command,w
 10145  0D06  3A01               	xorlw	1
 10146  0D07  1903               	skipnz
 10147  0D08  2D0D               	goto	l3750
 10148                           
 10149                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
 10150  0D09  3000               	movlw	0
 10151  0D0A  18AC               	btfsc	_SYSC,1
 10152  0D0B  3001               	movlw	1
 10153  0D0C  00DC               	movwf	getMain_All_Error_Status@status
 10154  0D0D                     l3750:	
 10155                           
 10156                           ;Main_B1.c: 430: }
 10157                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 10158  0D0D  08DC               	movf	getMain_All_Error_Status@status,f
 10159  0D0E  1D03               	skipz
 10160  0D0F  2D21               	goto	l3760
 10161  0D10  085B               	movf	getMain_All_Error_Status@command,w
 10162  0D11  3A02               	xorlw	2
 10163  0D12  1903               	skipnz
 10164  0D13  2D21               	goto	l3760
 10165                           
 10166                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 10167  0D14  18C2               	btfsc	_Temp,1
 10168  0D15  2D19               	goto	l3758
 10169  0D16  01D7               	clrf	_getMain_All_Error_Status$2408
 10170  0D17  01D8               	clrf	_getMain_All_Error_Status$2408+1
 10171  0D18  2D1D               	goto	l700
 10172  0D19                     l3758:	
 10173  0D19  3002               	movlw	2
 10174  0D1A  00D7               	movwf	_getMain_All_Error_Status$2408
 10175  0D1B  3000               	movlw	0
 10176  0D1C  00D8               	movwf	_getMain_All_Error_Status$2408+1
 10177  0D1D                     l700:	
 10178  0D1D  0857               	movf	_getMain_All_Error_Status$2408,w
 10179  0D1E  00F4               	movwf	??_getMain_All_Error_Status
 10180  0D1F  0874               	movf	??_getMain_All_Error_Status,w
 10181  0D20  00DC               	movwf	getMain_All_Error_Status@status
 10182  0D21                     l3760:	
 10183                           
 10184                           ;Main_B1.c: 438: }
 10185                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 10186  0D21  08DC               	movf	getMain_All_Error_Status@status,f
 10187  0D22  1D03               	skipz
 10188  0D23  2D3A               	goto	l701
 10189  0D24  085B               	movf	getMain_All_Error_Status@command,w
 10190  0D25  3A03               	xorlw	3
 10191  0D26  1903               	skipnz
 10192  0D27  2D3A               	goto	l701
 10193                           
 10194                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 10195  0D28  1683               	bsf	3,5	;RP0=1, select bank1
 10196  0D29  1303               	bcf	3,6	;RP1=0, select bank1
 10197  0D2A  1ACA               	btfsc	_Load^(0+128),5
 10198  0D2B  2D31               	goto	l3768
 10199  0D2C  1283               	bcf	3,5	;RP0=0, select bank0
 10200  0D2D  1303               	bcf	3,6	;RP1=0, select bank0
 10201  0D2E  01D9               	clrf	_getMain_All_Error_Status$2409
 10202  0D2F  01DA               	clrf	_getMain_All_Error_Status$2409+1
 10203  0D30  2D36               	goto	l705
 10204  0D31                     l3768:	
 10205  0D31  3003               	movlw	3
 10206  0D32  1283               	bcf	3,5	;RP0=0, select bank0
 10207  0D33  00D9               	movwf	_getMain_All_Error_Status$2409
 10208  0D34  3000               	movlw	0
 10209  0D35  00DA               	movwf	_getMain_All_Error_Status$2409+1
 10210  0D36                     l705:	
 10211  0D36  0859               	movf	_getMain_All_Error_Status$2409,w
 10212  0D37  00F4               	movwf	??_getMain_All_Error_Status
 10213  0D38  0874               	movf	??_getMain_All_Error_Status,w
 10214  0D39  00DC               	movwf	getMain_All_Error_Status@status
 10215  0D3A                     l701:	
 10216                           
 10217                           ;Main_B1.c: 445: }
 10218                           ;Main_B1.c: 455: return status;
 10219  0D3A  085C               	movf	getMain_All_Error_Status@status,w
 10220  0D3B  0008               	return
 10221  0D3C                     __end_of_getMain_All_Error_Status:	
 10222                           
 10223                           	psect	text68
 10224  09D4                     __ptext68:	
 10225 ;; *************** function _getAll_Lights_Line *****************
 10226 ;; Defined at:
 10227 ;;		line 310 in file "../src/TriacRelay_B1.c"
 10228 ;; Parameters:    Size  Location     Type
 10229 ;;		None
 10230 ;; Auto vars:     Size  Location     Type
 10231 ;;  line            1    5[COMMON] unsigned char 
 10232 ;; Return value:  Size  Location     Type
 10233 ;;                  1    wreg      unsigned char 
 10234 ;; Registers used:
 10235 ;;		wreg, status,2
 10236 ;; Tracked objects:
 10237 ;;		On entry : 0/0
 10238 ;;		On exit  : 0/0
 10239 ;;		Unchanged: 0/0
 10240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10241 ;;      Params:         0       0       0       0
 10242 ;;      Locals:         1       0       0       0
 10243 ;;      Temps:          1       0       0       0
 10244 ;;      Totals:         2       0       0       0
 10245 ;;Total ram usage:        2 bytes
 10246 ;; Hardware stack levels used:    1
 10247 ;; Hardware stack levels required when called:    2
 10248 ;; This function calls:
 10249 ;;		Nothing
 10250 ;; This function is called by:
 10251 ;;		_Exception_Main
 10252 ;; This function uses a non-reentrant model
 10253 ;;
 10254                           
 10255                           
 10256                           ;psect for function _getAll_Lights_Line
 10257  09D4                     _getAll_Lights_Line:	
 10258                           
 10259                           ;TriacRelay_B1.c: 311: char line = 0;
 10260                           
 10261                           ;incstack = 0
 10262                           ; Regs used in _getAll_Lights_Line: [wreg+status,2]
 10263  09D4  01F5               	clrf	getAll_Lights_Line@line
 10264                           
 10265                           ;TriacRelay_B1.c: 313: if (Lights1.Line == 1) {
 10266  09D5  1283               	bcf	3,5	;RP0=0, select bank0
 10267  09D6  1303               	bcf	3,6	;RP1=0, select bank0
 10268  09D7  1C4A               	btfss	_Lights1+1,0
 10269  09D8  29DC               	goto	l1593
 10270                           
 10271                           ;TriacRelay_B1.c: 314: line = 1;
 10272  09D9  01F5               	clrf	getAll_Lights_Line@line
 10273  09DA  0AF5               	incf	getAll_Lights_Line@line,f
 10274                           
 10275                           ;TriacRelay_B1.c: 315: }
 10276  09DB  29E2               	goto	l1594
 10277  09DC                     l1593:	
 10278                           
 10279                           ;TriacRelay_B1.c: 318: else if (Lights2.Line == 1) {
 10280  09DC  1C4F               	btfss	_Lights2+1,0
 10281  09DD  29E2               	goto	l1594
 10282                           
 10283                           ;TriacRelay_B1.c: 319: line = 2;
 10284  09DE  3002               	movlw	2
 10285  09DF  00F4               	movwf	??_getAll_Lights_Line
 10286  09E0  0874               	movf	??_getAll_Lights_Line,w
 10287  09E1  00F5               	movwf	getAll_Lights_Line@line
 10288  09E2                     l1594:	
 10289                           
 10290                           ;TriacRelay_B1.c: 320: }
 10291                           ;TriacRelay_B1.c: 327: return line;
 10292  09E2  0875               	movf	getAll_Lights_Line@line,w
 10293  09E3  0008               	return
 10294  09E4                     __end_of_getAll_Lights_Line:	
 10295                           
 10296                           	psect	text69
 10297  098C                     __ptext69:	
 10298 ;; *************** function _DetectSYSC_Signal *****************
 10299 ;; Defined at:
 10300 ;;		line 50 in file "../src/SYSC_B1.c"
 10301 ;; Parameters:    Size  Location     Type
 10302 ;;		None
 10303 ;; Auto vars:     Size  Location     Type
 10304 ;;		None
 10305 ;; Return value:  Size  Location     Type
 10306 ;;		None               void
 10307 ;; Registers used:
 10308 ;;		status,2
 10309 ;; Tracked objects:
 10310 ;;		On entry : 0/0
 10311 ;;		On exit  : 0/0
 10312 ;;		Unchanged: 0/0
 10313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10314 ;;      Params:         0       0       0       0
 10315 ;;      Locals:         0       0       0       0
 10316 ;;      Temps:          0       0       0       0
 10317 ;;      Totals:         0       0       0       0
 10318 ;;Total ram usage:        0 bytes
 10319 ;; Hardware stack levels used:    1
 10320 ;; Hardware stack levels required when called:    2
 10321 ;; This function calls:
 10322 ;;		Nothing
 10323 ;; This function is called by:
 10324 ;;		_main
 10325 ;; This function uses a non-reentrant model
 10326 ;;
 10327                           
 10328                           
 10329                           ;psect for function _DetectSYSC_Signal
 10330  098C                     _DetectSYSC_Signal:	
 10331                           
 10332                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
 10333                           
 10334                           ;incstack = 0
 10335                           ; Regs used in _DetectSYSC_Signal: [status,2]
 10336  098C  1283               	bcf	3,5	;RP0=0, select bank0
 10337  098D  1303               	bcf	3,6	;RP1=0, select bank0
 10338  098E  19AC               	btfsc	_SYSC,3
 10339  098F  2996               	goto	l1280
 10340                           
 10341                           ;SYSC_B1.c: 52: if (RB2 == 1) {
 10342  0990  1D06               	btfss	6,2	;volatile
 10343  0991  0008               	return
 10344                           
 10345                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
 10346  0992  15AC               	bsf	_SYSC,3
 10347                           
 10348                           ;SYSC_B1.c: 54: SYSC.Time = 0;
 10349  0993  01AD               	clrf	_SYSC+1
 10350  0994  01AE               	clrf	_SYSC+2
 10351                           
 10352                           ;SYSC_B1.c: 55: }
 10353                           ;SYSC_B1.c: 56: } else {
 10354  0995  0008               	return
 10355  0996                     l1280:	
 10356                           
 10357                           ;SYSC_B1.c: 57: if (RB2 == 0) {
 10358  0996  1906               	btfsc	6,2	;volatile
 10359  0997  0008               	return
 10360                           
 10361                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
 10362  0998  11AC               	bcf	_SYSC,3
 10363  0999  0008               	return
 10364  099A                     __end_of_DetectSYSC_Signal:	
 10365                           
 10366                           	psect	text70
 10367  0C8F                     __ptext70:	
 10368 ;; *************** function _CDS_Main *****************
 10369 ;; Defined at:
 10370 ;;		line 11 in file "../src/CDS_B1.c"
 10371 ;; Parameters:    Size  Location     Type
 10372 ;;		None
 10373 ;; Auto vars:     Size  Location     Type
 10374 ;;		None
 10375 ;; Return value:  Size  Location     Type
 10376 ;;		None               void
 10377 ;; Registers used:
 10378 ;;		wreg, status,2, status,0
 10379 ;; Tracked objects:
 10380 ;;		On entry : 0/0
 10381 ;;		On exit  : 0/0
 10382 ;;		Unchanged: 0/0
 10383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10384 ;;      Params:         0       0       0       0
 10385 ;;      Locals:         0       0       0       0
 10386 ;;      Temps:          0       3       0       0
 10387 ;;      Totals:         0       3       0       0
 10388 ;;Total ram usage:        3 bytes
 10389 ;; Hardware stack levels used:    1
 10390 ;; Hardware stack levels required when called:    2
 10391 ;; This function calls:
 10392 ;;		Nothing
 10393 ;; This function is called by:
 10394 ;;		_main
 10395 ;; This function uses a non-reentrant model
 10396 ;;
 10397                           
 10398                           
 10399                           ;psect for function _CDS_Main
 10400  0C8F                     _CDS_Main:	
 10401                           
 10402                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
 10403                           
 10404                           ;incstack = 0
 10405                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
 10406  0C8F  1283               	bcf	3,5	;RP0=0, select bank0
 10407  0C90  1303               	bcf	3,6	;RP1=0, select bank0
 10408  0C91  1C36               	btfss	__CDS,0
 10409  0C92  0008               	return
 10410                           
 10411                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
 10412  0C93  18B6               	btfsc	__CDS,1
 10413  0C94  2CA2               	goto	l180
 10414                           
 10415                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
 10416  0C95  19B6               	btfsc	__CDS,3
 10417  0C96  0008               	return
 10418                           
 10419                           ;CDS_B1.c: 16: _CDS.Time++;
 10420  0C97  3001               	movlw	1
 10421  0C98  00D7               	movwf	??_CDS_Main
 10422  0C99  0857               	movf	??_CDS_Main,w
 10423  0C9A  07B7               	addwf	__CDS+1,f
 10424                           
 10425                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
 10426  0C9B  3005               	movlw	5
 10427  0C9C  0237               	subwf	__CDS+1,w
 10428  0C9D  1C03               	skipc
 10429  0C9E  0008               	return
 10430                           
 10431                           ;CDS_B1.c: 18: {
 10432                           ;CDS_B1.c: 19: _CDS.Time = 0;
 10433  0C9F  01B7               	clrf	__CDS+1
 10434                           
 10435                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
 10436  0CA0  15B6               	bsf	__CDS,3
 10437                           
 10438                           ;CDS_B1.c: 21: }
 10439                           ;CDS_B1.c: 22: }
 10440                           ;CDS_B1.c: 23: } else {
 10441  0CA1  0008               	return
 10442  0CA2                     l180:	
 10443                           
 10444                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
 10445  0CA2  1CB6               	btfss	__CDS,1
 10446  0CA3  0008               	return
 10447                           
 10448                           ;CDS_B1.c: 25: _CDS.GO = 0;
 10449  0CA4  10B6               	bcf	__CDS,1
 10450                           
 10451                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
 10452  0CA5  1A36               	btfsc	__CDS,4
 10453  0CA6  2CAD               	goto	l5596
 10454                           
 10455                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
 10456  0CA7  0838               	movf	__CDS+2,w
 10457  0CA8  0239               	subwf	__CDS+3,w
 10458  0CA9  1C03               	skipc
 10459  0CAA  0008               	return
 10460                           
 10461                           ;CDS_B1.c: 28: _CDS.Status = 1;
 10462  0CAB  1636               	bsf	__CDS,4
 10463                           
 10464                           ;CDS_B1.c: 29: }
 10465                           ;CDS_B1.c: 30: } else {
 10466  0CAC  0008               	return
 10467  0CAD                     l5596:	
 10468                           
 10469                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
 10470  0CAD  0838               	movf	__CDS+2,w
 10471  0CAE  3E9C               	addlw	156
 10472  0CAF  00D7               	movwf	??_CDS_Main
 10473  0CB0  30FF               	movlw	255
 10474  0CB1  1803               	skipnc
 10475  0CB2  3000               	movlw	0
 10476  0CB3  00D8               	movwf	??_CDS_Main+1
 10477  0CB4  0858               	movf	??_CDS_Main+1,w
 10478  0CB5  3A80               	xorlw	128
 10479  0CB6  00D9               	movwf	??_CDS_Main+2
 10480  0CB7  3080               	movlw	128
 10481  0CB8  0259               	subwf	??_CDS_Main+2,w
 10482  0CB9  1D03               	skipz
 10483  0CBA  2CBD               	goto	u6735
 10484  0CBB  0839               	movf	__CDS+3,w
 10485  0CBC  0257               	subwf	??_CDS_Main,w
 10486  0CBD                     u6735:	
 10487  0CBD  1C03               	skipc
 10488  0CBE  0008               	return
 10489                           
 10490                           ;CDS_B1.c: 32: _CDS.Status = 0;
 10491  0CBF  1283               	bcf	3,5	;RP0=0, select bank0
 10492  0CC0  1303               	bcf	3,6	;RP1=0, select bank0
 10493  0CC1  1236               	bcf	__CDS,4
 10494  0CC2  0008               	return
 10495  0CC3                     __end_of_CDS_Main:	
 10496                           
 10497                           	psect	text71
 10498  0925                     __ptext71:	
 10499 ;; *************** function _CDS_Initialization *****************
 10500 ;; Defined at:
 10501 ;;		line 7 in file "../src/CDS_B1.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;		None
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;		None
 10506 ;; Return value:  Size  Location     Type
 10507 ;;		None               void
 10508 ;; Registers used:
 10509 ;;		None
 10510 ;; Tracked objects:
 10511 ;;		On entry : 0/0
 10512 ;;		On exit  : 0/0
 10513 ;;		Unchanged: 0/0
 10514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10515 ;;      Params:         0       0       0       0
 10516 ;;      Locals:         0       0       0       0
 10517 ;;      Temps:          0       0       0       0
 10518 ;;      Totals:         0       0       0       0
 10519 ;;Total ram usage:        0 bytes
 10520 ;; Hardware stack levels used:    1
 10521 ;; Hardware stack levels required when called:    2
 10522 ;; This function calls:
 10523 ;;		Nothing
 10524 ;; This function is called by:
 10525 ;;		_main
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           
 10530                           ;psect for function _CDS_Initialization
 10531  0925                     _CDS_Initialization:	
 10532                           
 10533                           ;CDS_B1.c: 8: _CDS.Enable = 1;
 10534                           
 10535                           ;incstack = 0
 10536                           ; Regs used in _CDS_Initialization: []
 10537  0925  1283               	bcf	3,5	;RP0=0, select bank0
 10538  0926  1303               	bcf	3,6	;RP1=0, select bank0
 10539  0927  1436               	bsf	__CDS,0
 10540  0928  0008               	return
 10541  0929                     __end_of_CDS_Initialization:	
 10542                           
 10543                           	psect	text72
 10544  0D7C                     __ptext72:	
 10545 ;; *************** function _Buzzer_Main *****************
 10546 ;; Defined at:
 10547 ;;		line 46 in file "../src/Buzzer_B1.c"
 10548 ;; Parameters:    Size  Location     Type
 10549 ;;		None
 10550 ;; Auto vars:     Size  Location     Type
 10551 ;;		None
 10552 ;; Return value:  Size  Location     Type
 10553 ;;		None               void
 10554 ;; Registers used:
 10555 ;;		wreg, status,2, status,0
 10556 ;; Tracked objects:
 10557 ;;		On entry : 0/0
 10558 ;;		On exit  : 0/0
 10559 ;;		Unchanged: 0/0
 10560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10561 ;;      Params:         0       0       0       0
 10562 ;;      Locals:         0       0       0       0
 10563 ;;      Temps:          1       0       0       0
 10564 ;;      Totals:         1       0       0       0
 10565 ;;Total ram usage:        1 bytes
 10566 ;; Hardware stack levels used:    1
 10567 ;; Hardware stack levels required when called:    2
 10568 ;; This function calls:
 10569 ;;		Nothing
 10570 ;; This function is called by:
 10571 ;;		_main
 10572 ;; This function uses a non-reentrant model
 10573 ;;
 10574                           
 10575                           
 10576                           ;psect for function _Buzzer_Main
 10577  0D7C                     _Buzzer_Main:	
 10578                           
 10579                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 10580                           
 10581                           ;incstack = 0
 10582                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 10583  0D7C  1283               	bcf	3,5	;RP0=0, select bank0
 10584  0D7D  1303               	bcf	3,6	;RP1=0, select bank0
 10585  0D7E  1CA0               	btfss	_Buz1,1
 10586  0D7F  0008               	return
 10587                           
 10588                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 10589  0D80  3001               	movlw	1
 10590  0D81  07A1               	addwf	_Buz1+1,f
 10591  0D82  1803               	skipnc
 10592  0D83  0AA2               	incf	_Buz1+2,f
 10593  0D84  3000               	movlw	0
 10594  0D85  07A2               	addwf	_Buz1+2,f
 10595                           
 10596                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 10597  0D86  0827               	movf	_Buz1+7,w
 10598  0D87  0222               	subwf	_Buz1+2,w
 10599  0D88  1D03               	skipz
 10600  0D89  2D8C               	goto	u4175
 10601  0D8A  0826               	movf	_Buz1+6,w
 10602  0D8B  0221               	subwf	_Buz1+1,w
 10603  0D8C                     u4175:	
 10604  0D8C  1C03               	skipc
 10605  0D8D  0008               	return
 10606                           
 10607                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 10608  0D8E  01A1               	clrf	_Buz1+1
 10609  0D8F  01A2               	clrf	_Buz1+2
 10610                           
 10611                           ;Buzzer_B1.c: 51: Buz1.Switch = (RC0 == 1) ? 1 : 0;
 10612  0D90  12A0               	bcf	_Buz1,5
 10613  0D91  1807               	btfsc	7,0	;volatile
 10614  0D92  16A0               	bsf	_Buz1,5
 10615                           
 10616                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 10617  0D93  1283               	bcf	3,5	;RP0=0, select bank0
 10618  0D94  1303               	bcf	3,6	;RP1=0, select bank0
 10619  0D95  1AA0               	btfsc	_Buz1,5
 10620  0D96  2DBB               	goto	l68
 10621                           
 10622                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 10623  0D97  08A3               	movf	_Buz1+3,f
 10624  0D98  1D03               	skipz
 10625  0D99  2DB8               	goto	l69
 10626                           
 10627                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 10628  0D9A  1DA0               	btfss	_Buz1,3
 10629  0D9B  2DA8               	goto	l70
 10630                           
 10631                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 10632  0D9C  11A0               	bcf	_Buz1,3
 10633                           
 10634                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 10635  0D9D  0824               	movf	_Buz1+4,w
 10636  0D9E  00F4               	movwf	??_Buzzer_Main
 10637  0D9F  0874               	movf	??_Buzzer_Main,w
 10638  0DA0  00A3               	movwf	_Buz1+3
 10639                           
 10640                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 10641  0DA1  0829               	movf	_Buz1+9,w
 10642  0DA2  01A7               	clrf	_Buz1+7
 10643  0DA3  07A7               	addwf	_Buz1+7,f
 10644  0DA4  0828               	movf	_Buz1+8,w
 10645  0DA5  01A6               	clrf	_Buz1+6
 10646  0DA6  07A6               	addwf	_Buz1+6,f
 10647                           
 10648                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 10649  0DA7  0008               	return
 10650  0DA8                     l70:	
 10651  0DA8  1E20               	btfss	_Buz1,4
 10652  0DA9  2DB6               	goto	l72
 10653                           
 10654                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 10655  0DAA  1220               	bcf	_Buz1,4
 10656                           
 10657                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 10658  0DAB  0825               	movf	_Buz1+5,w
 10659  0DAC  00F4               	movwf	??_Buzzer_Main
 10660  0DAD  0874               	movf	??_Buzzer_Main,w
 10661  0DAE  00A3               	movwf	_Buz1+3
 10662                           
 10663                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 10664  0DAF  082B               	movf	_Buz1+11,w
 10665  0DB0  01A7               	clrf	_Buz1+7
 10666  0DB1  07A7               	addwf	_Buz1+7,f
 10667  0DB2  082A               	movf	_Buz1+10,w
 10668  0DB3  01A6               	clrf	_Buz1+6
 10669  0DB4  07A6               	addwf	_Buz1+6,f
 10670                           
 10671                           ;Buzzer_B1.c: 62: } else {
 10672  0DB5  0008               	return
 10673  0DB6                     l72:	
 10674                           
 10675                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 10676  0DB6  10A0               	bcf	_Buz1,1
 10677                           
 10678                           ;Buzzer_B1.c: 64: }
 10679                           ;Buzzer_B1.c: 65: } else {
 10680  0DB7  0008               	return
 10681  0DB8                     l69:	
 10682                           
 10683                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 10684  0DB8  16A0               	bsf	_Buz1,5
 10685                           
 10686                           ;Buzzer_B1.c: 68: RC0 = 1;
 10687  0DB9  1407               	bsf	7,0	;volatile
 10688                           
 10689                           ;Buzzer_B1.c: 69: }
 10690                           ;Buzzer_B1.c: 70: } else {
 10691  0DBA  0008               	return
 10692  0DBB                     l68:	
 10693                           
 10694                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 10695  0DBB  12A0               	bcf	_Buz1,5
 10696                           
 10697                           ;Buzzer_B1.c: 73: RC0 = 0;
 10698  0DBC  1007               	bcf	7,0	;volatile
 10699                           
 10700                           ;Buzzer_B1.c: 75: Buz1.Count--;
 10701  0DBD  3001               	movlw	1
 10702  0DBE  02A3               	subwf	_Buz1+3,f
 10703  0DBF  0008               	return
 10704  0DC0                     __end_of_Buzzer_Main:	
 10705                           
 10706                           	psect	text73
 10707  0921                     __ptext73:	
 10708 ;; *************** function _Buzzer_Initialization *****************
 10709 ;; Defined at:
 10710 ;;		line 11 in file "../src/Buzzer_B1.c"
 10711 ;; Parameters:    Size  Location     Type
 10712 ;;		None
 10713 ;; Auto vars:     Size  Location     Type
 10714 ;;		None
 10715 ;; Return value:  Size  Location     Type
 10716 ;;		None               void
 10717 ;; Registers used:
 10718 ;;		None
 10719 ;; Tracked objects:
 10720 ;;		On entry : 0/0
 10721 ;;		On exit  : 0/0
 10722 ;;		Unchanged: 0/0
 10723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10724 ;;      Params:         0       0       0       0
 10725 ;;      Locals:         0       0       0       0
 10726 ;;      Temps:          0       0       0       0
 10727 ;;      Totals:         0       0       0       0
 10728 ;;Total ram usage:        0 bytes
 10729 ;; Hardware stack levels used:    1
 10730 ;; Hardware stack levels required when called:    2
 10731 ;; This function calls:
 10732 ;;		Nothing
 10733 ;; This function is called by:
 10734 ;;		_main
 10735 ;; This function uses a non-reentrant model
 10736 ;;
 10737                           
 10738                           
 10739                           ;psect for function _Buzzer_Initialization
 10740  0921                     _Buzzer_Initialization:	
 10741                           
 10742                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 10743                           
 10744                           ;incstack = 0
 10745                           ; Regs used in _Buzzer_Initialization: []
 10746  0921  1283               	bcf	3,5	;RP0=0, select bank0
 10747  0922  1303               	bcf	3,6	;RP1=0, select bank0
 10748  0923  1420               	bsf	_Buz1,0
 10749  0924  0008               	return
 10750  0925                     __end_of_Buzzer_Initialization:	
 10751                           
 10752                           	psect	text74
 10753  0AE4                     __ptext74:	
 10754 ;; *************** function _ISR *****************
 10755 ;; Defined at:
 10756 ;;		line 116 in file "../src/MCU_B1.c"
 10757 ;; Parameters:    Size  Location     Type
 10758 ;;		None
 10759 ;; Auto vars:     Size  Location     Type
 10760 ;;		None
 10761 ;; Return value:  Size  Location     Type
 10762 ;;		None               void
 10763 ;; Registers used:
 10764 ;;		wreg, status,2, status,0, pclath, cstack
 10765 ;; Tracked objects:
 10766 ;;		On entry : 0/0
 10767 ;;		On exit  : 0/0
 10768 ;;		Unchanged: 0/0
 10769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10770 ;;      Params:         0       0       0       0
 10771 ;;      Locals:         0       0       0       0
 10772 ;;      Temps:          4       0       0       0
 10773 ;;      Totals:         4       0       0       0
 10774 ;;Total ram usage:        4 bytes
 10775 ;; Hardware stack levels used:    1
 10776 ;; Hardware stack levels required when called:    1
 10777 ;; This function calls:
 10778 ;;		_TMR1_ISR
 10779 ;; This function is called by:
 10780 ;;		Interrupt level 1
 10781 ;; This function uses a non-reentrant model
 10782 ;;
 10783                           
 10784                           
 10785                           ;psect for function _ISR
 10786  0AE4                     _ISR:	
 10787                           
 10788                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 10789  0AE4  1683               	bsf	3,5	;RP0=1, select bank1
 10790  0AE5  1303               	bcf	3,6	;RP1=0, select bank1
 10791  0AE6  1C0C               	btfss	12,0	;volatile
 10792  0AE7  2AEF               	goto	i1l515
 10793  0AE8  1283               	bcf	3,5	;RP0=0, select bank0
 10794  0AE9  1303               	bcf	3,6	;RP1=0, select bank0
 10795  0AEA  1C0C               	btfss	12,0	;volatile
 10796  0AEB  2AEF               	goto	i1l515
 10797                           
 10798                           ;MCU_B1.c: 126: TMR1_ISR();
 10799  0AEC  158A  228A  158A   	fcall	_TMR1_ISR
 10800  0AEF                     i1l515:	
 10801                           ;MCU_B1.c: 127: }
 10802                           ;MCU_B1.c: 148: return;
 10803                           
 10804  0AEF  0873               	movf	??_ISR+3,w
 10805  0AF0  1283               	bcf	3,5	;RP0=0, select bank0
 10806  0AF1  1303               	bcf	3,6	;RP1=0, select bank0
 10807  0AF2  00FF               	movwf	127
 10808  0AF3  0872               	movf	??_ISR+2,w
 10809  0AF4  008A               	movwf	10
 10810  0AF5  0871               	movf	??_ISR+1,w
 10811  0AF6  0084               	movwf	4
 10812  0AF7  0E70               	swapf	??_ISR^(0+-128),w
 10813  0AF8  0083               	movwf	3
 10814  0AF9  0EFE               	swapf	126,f
 10815  0AFA  0E7E               	swapf	126,w
 10816  0AFB  0009               	retfie
 10817  0AFC                     __end_of_ISR:	
 10818                           
 10819                           	psect	intentry
 10820  0004                     __pintentry:	
 10821                           ;incstack = 0
 10822                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
 10823                           
 10824  0004                     interrupt_function:	
 10825  007E                     saved_w	set	btemp
 10826  0004  00FE               	movwf	btemp
 10827  0005  0E03               	swapf	3,w
 10828  0006  00F0               	movwf	??_ISR
 10829  0007  0804               	movf	4,w
 10830  0008  00F1               	movwf	??_ISR+1
 10831  0009  080A               	movf	10,w
 10832  000A  00F2               	movwf	??_ISR+2
 10833  000B  1283               	bcf	3,5	;RP0=0, select bank0
 10834  000C  1303               	bcf	3,6	;RP1=0, select bank0
 10835  000D  087F               	movf	btemp+1,w
 10836  000E  00F3               	movwf	??_ISR+3
 10837  000F  158A  2AE4         	ljmp	_ISR
 10838                           
 10839                           	psect	text75
 10840  0A8A                     __ptext75:	
 10841 ;; *************** function _TMR1_ISR *****************
 10842 ;; Defined at:
 10843 ;;		line 236 in file "../src/MCU_B1.c"
 10844 ;; Parameters:    Size  Location     Type
 10845 ;;		None
 10846 ;; Auto vars:     Size  Location     Type
 10847 ;;		None
 10848 ;; Return value:  Size  Location     Type
 10849 ;;		None               void
 10850 ;; Registers used:
 10851 ;;		wreg, status,2
 10852 ;; Tracked objects:
 10853 ;;		On entry : 0/0
 10854 ;;		On exit  : 0/0
 10855 ;;		Unchanged: 0/0
 10856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10857 ;;      Params:         0       0       0       0
 10858 ;;      Locals:         0       0       0       0
 10859 ;;      Temps:          0       0       0       0
 10860 ;;      Totals:         0       0       0       0
 10861 ;;Total ram usage:        0 bytes
 10862 ;; Hardware stack levels used:    1
 10863 ;; This function calls:
 10864 ;;		Nothing
 10865 ;; This function is called by:
 10866 ;;		_ISR
 10867 ;; This function uses a non-reentrant model
 10868 ;;
 10869                           
 10870                           
 10871                           ;psect for function _TMR1_ISR
 10872  0A8A                     _TMR1_ISR:	
 10873                           
 10874                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 10875                           
 10876                           ;incstack = 0
 10877                           ; Regs used in _TMR1_ISR: [wreg+status,2]
 10878  0A8A  30FA               	movlw	250
 10879  0A8B  1283               	bcf	3,5	;RP0=0, select bank0
 10880  0A8C  1303               	bcf	3,6	;RP1=0, select bank0
 10881  0A8D  008F               	movwf	15	;volatile
 10882                           
 10883                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 10884  0A8E  3038               	movlw	56
 10885  0A8F  008E               	movwf	14	;volatile
 10886                           
 10887                           ;MCU_B1.c: 240: TMR1IF = 0;
 10888  0A90  100C               	bcf	12,0	;volatile
 10889                           
 10890                           ;MCU_B1.c: 271: Timer1.Count++;
 10891  0A91  3001               	movlw	1
 10892  0A92  07BB               	addwf	_Timer1+1,f
 10893  0A93  1803               	skipnc
 10894  0A94  0ABC               	incf	_Timer1+2,f
 10895  0A95  3000               	movlw	0
 10896  0A96  07BC               	addwf	_Timer1+2,f
 10897                           
 10898                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 10899  0A97  30C8               	movlw	200
 10900  0A98  063B               	xorwf	_Timer1+1,w
 10901  0A99  043C               	iorwf	_Timer1+2,w
 10902  0A9A  1D03               	skipz
 10903  0A9B  0008               	return
 10904                           
 10905                           ;MCU_B1.c: 273: Timer1.Count = 0;
 10906  0A9C  01BB               	clrf	_Timer1+1
 10907  0A9D  01BC               	clrf	_Timer1+2
 10908                           
 10909                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 10910  0A9E  143A               	bsf	_Timer1,0
 10911  0A9F  0008               	return
 10912  0AA0                     __end_of_TMR1_ISR:	
 10913  007E                     btemp	set	126	;btemp
 10914  007E                     wtemp	set	126
 10915  007E                     wtemp0	set	126
 10916  0080                     wtemp1	set	128
 10917  0082                     wtemp2	set	130
 10918  0084                     wtemp3	set	132
 10919  0086                     wtemp4	set	134
 10920  0088                     wtemp5	set	136
 10921  007F                     wtemp6	set	127
 10922  007E                     ttemp	set	126
 10923  007E                     ttemp0	set	126
 10924  0081                     ttemp1	set	129
 10925  0084                     ttemp2	set	132
 10926  0087                     ttemp3	set	135
 10927  007F                     ttemp4	set	127
 10928  007E                     ltemp	set	126
 10929  007E                     ltemp0	set	126
 10930  0082                     ltemp1	set	130
 10931  0086                     ltemp2	set	134
 10932  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         147
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     25      80
    BANK1            80      0      78
    BANK2            16      0      10

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights2(BANK0[5]), Lights1(BANK0[5]), 

    Sw	PTR struct Switch size(1) Largest target is 5
		 -> NULL(NULL[0]), Sw2(BANK2[5]), Sw1(BANK2[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 


Critical Paths under _main in COMMON

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setTemp_Main->_setBuz
    _setSw_Main->_SwPointSelect
    _setSw_Main->_getSw_KeyStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Main->_LedPointSelect
    _setLED_Initialization->_LedPointSelect
    _Exception_Main->_getAll_Lights_Line
    _Exception_Main->_setBuz
    _setLights_SwOn->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _setBuz->___awdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Exception_Main
    _my_MainTimer->_setBuz
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setSw_Main
    _setSw_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setLED_Main
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_setBuz
    _setLights_SwOn->_setLights_Trigger
    _setLights_SwOff->_setLights_Trigger
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   26470
                                             20 BANK0      5     1      4
              _Buzzer_Initialization
                        _Buzzer_Main
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1589
                                             11 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     765
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    3060
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1130
                                              0 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     746
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     601
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    2018
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         6     6      0    2018
                                             11 BANK0      6     6      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    2917
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    2917
                                              6 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            11    11      0    1904
                                              6 BANK0     11    11      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2015
                                              7 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    3492
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    1927
                                              5 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    1633
                                              2 BANK0      3     2      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      88
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1278
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      93
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      93
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              0 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1298
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1298
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    4930
                                             11 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOn                                       1     1      0     714
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (4) _getLights_Status                                     2     2      0     127
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOff                                      1     1      0     556
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (4) _setLights_Trigger                                    3     2      1     432
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _LightsPointSelect                                    2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1143
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1589
                                              5 COMMON     1     1      0
                                              8 BANK0      3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1061
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      47
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Switch_Initialization
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setLED
         _LedPointSelect
       _setLights_SwOff
         _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
       _setLights_SwOn
         _LightsPointSelect
         _getLights_Status
           _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      B2       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       A       9       62.5%
DATA                 0      0      B2      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Jan 19 11:16:40 2015

              __size_of_Switch_Main 000B                        _WDT_Clearing 0002  
         getMain_Lights_Count@count 0057                                  l60 0E3D  
                                l70 0DA8                                  l72 0DB6  
                                l58 0E2F                                  l68 0DBB  
                                l69 0DB8                        ___awdiv@sign 005C  
                                _Sw 0079                      setTemp_Main@AD 0067  
                                fsr 0004                 ___wmul@multiplicand 0059  
                               l180 0CA2                                 l350 0B25  
                               l700 0D1D                                 l701 0D3A  
                               l349 0B1D                                 l383 0CF1  
                               l384 0CF7                                 l705 0D36  
                               l731 05BC                                 l820 020F  
                               l830 01E8                                 l822 0066  
                               l831 01E6                                 l823 0062  
                               l824 005C                                 l836 0192  
                               l952 0FFC                                 l963 0FF6  
                               l958 0F93                                 _GIE 005F  
                               _RC0 0038                                 _RB2 0032  
                               _LED 0076                                 _RC1 0039  
                               _RB3 0033                                 _RB4 0034  
                               _RA6 002E                                 _RB5 0035  
                               _RA7 002F                                 _RC4 003C  
                               _RC5 003D                                 _RC6 003E  
                               _RC7 003F                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _ISR 0AE4                                 _PSA 040B  
                               _WDT 003D                   ??_setLights_SwOff 0076  
                               _Cmd 003F                                 _Sw1 0120  
                               _Sw2 0125              getAll_Lights_Line@line 0075  
                               fsr0 0004                                 indf 0000  
             _Buzzer_Initialization 0921                     __end_of_ADC_Set 0956  
         __end_of_LightsPointSelect 0A3B                   ??_getSw_KeyStatus 0074  
                  _getLights_Status 09F4             __size_of_Lights_Control 009A  
                              ?_ISR 0070                          Load_Main@i 0066  
                              l1040 03A1                                l1041 0268  
                              l1042 024E                                l1047 026E  
                              l1049 027F                                l1404 0A69  
                              l1280 0996                                l1426 0670  
                              l4100 0DF2                                l1428 05F9  
                              l1541 0C23                                l5040 0A32  
                              l1593 09DC                                l1594 09E2  
                              l5130 0EBE                                l6002 02A2  
                              l1683 0BF5                                l5140 0EC6  
                              l5124 0EB3                                l5052 07B7  
                              l5060 07BF                                l1588 0ADA  
                              l6020 02C6                                l5142 0ED4  
                              l6110 0515                                l6102 0511  
                              l6014 02B9                                l4094 0DD7  
                              l5310 0B79                      _Load_Main$2696 0061  
                              l5152 0EF5                                l5208 0BE4  
                              l6112 0544                                l5240 0733  
                              l5304 0B70                                l5066 07C8  
                              l5074 07D0                                l6122 057B  
                              l6034 0317                                l6026 0303  
                              l6018 02C5                                l6042 0348  
                              l3810 0A88                                l5306 0B73  
                              l5156 0EFD                                l5148 0EEA  
                              l5084 07E3                                l5092 07EB  
                              l6132 05A2                                l6124 0558  
                              l6116 0554                                l6108 0538  
                              l5228 0AC5                                l5500 0C88  
                              l5420 0A6D                                l3750 0D0D  
                              l6126 0587                                l5254 0743  
                              l3806 0A7E                                l3760 0D21  
                              l5088 07E7                                l6136 05AE  
                              l5272 0777                                l5264 075D  
                              l6056 0371                                l5424 0A73  
                              l5408 0FF5                                l3738 09F2  
                              l5522 06E1                                l5370 0FA6  
                              l5268 0764                                l5540 0BEB  
                              l5452 061C                                l5436 05EB  
                              l5364 0F95                                l5372 0FA9  
                              l6156 0F25                                l3758 0D19  
                              l5534 0715                                l5518 06D0  
                              l5286 0787                                l5702 042A  
                              l3768 0D31                                l6096 0502  
                              l5296 07A1                                l5560 0D46  
                              l5464 0647                                l5712 0443  
                              l6168 0F48                                l5562 0D54  
                              l5802 0065                                l5634 0E7E  
                              l5626 0E6A                                l5572 0D75  
                              l3796 0A45                                l5396 0FE3  
                              l5398 0FE6                                l5654 0EA2  
                              l5638 0E86                                l5742 04D5  
                              l5734 04A9                                l5718 045F  
                              l5670 0C52                                l5568 0D6A  
                              l5824 00C8                                l5728 048D  
                              l5914 01FC                                l5850 0153  
                              l5818 008C                                l5690 0409  
                              l5596 0CAD                                l5932 0C24  
                              l5860 0184                                l5748 04E3  
                              l5764 0BBA                                l5694 0414  
                              l5686 03FE                                l5856 0163  
                              l5786 0046                                l5698 041F  
                              l5868 01AF                                l5878 01C8  
                              l5966 0262               _myMain_Initialization 0911  
                      __CFG_WDTE$ON 0000                                u4175 0D8C  
                              _PEIE 005E                                u3725 0DFE  
                              u6500 06DD                                u7155 008A  
                              u5805 0EEB                                u6525 0700  
                              u6605 0D49                                u7165 00C6  
                              u6470 06CC                                u6455 06B8  
                              u7255 01A7                                u7175 011D  
                              u6625 0D55                                u6635 0D61  
                              u5765 0EC9                                u6645 0D6B  
                              u6565 0BF6                                u7605 02FC  
                              u6735 0CBD                                u6575 0BFD  
                              u5785 0ED5                                u7705 038E  
                              u7625 0330                                u7810 0584  
                              u5795 0EE1                                u5875 0A5C  
                              u7815 0561                                u7655 0358  
                              u7595 02E4                                u7780 0541  
                              u7785 051E                                __CDS 0036  
           ?_setSYSC_Initialization 0070                                _WPUB 0095  
                              _SYSC 002C                                _Buz1 0020  
                              __PIR 00A0                                _Load 00CA  
                              _Temp 0042                                _main 0F04  
                              btemp 007E                     __end_of_WDT_Set 09B6  
                              ltemp 007E                                start 0011  
                              ttemp 007E                                wtemp 007E  
                  __end_of_CDS_Main 0CC3        __size_of_Temp_Initialization 0003  
                             ??_ISR 0070                   _setLights_Trigger 0B48  
                     ??_Lights_Main 0076                       __CFG_PLLEN$ON 0000  
                  __end_of_LED_Main 092D                  ?_setLights_Trigger 0057  
                             ?_main 006B                     __end_of___awdiv 0F04  
                             _ADRES 001E                     ___awdiv@divisor 0057  
                             _T1CON 0010                     __end_of___lwdiv 0D7C  
                             i1l515 0AEF                     ___awdiv@counter 005B  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTA 0005                               _PORTB 0006  
                             _PORTC 0007                        ?_setLED_Main 0070  
                             _TRISA 0085                               _TRISB 0086  
                             _TRISC 0087             __end_of_Timeout_Counter 0A62  
                             _Light 0077                 ??_setLights_Trigger 0058  
                  __end_of_PIR_Main 03B7                    __end_of_TMR1_ISR 0AA0  
                  __end_of_TMR1_Set 09A8                               _getAD 0B63  
    __end_of_setSYSC_Initialization 0931      getLights_Allow_Condition@allow 0057  
           __end_of_getLight_LoadGO 093C                       ??_Buzzer_Main 0074  
                  __end_of_WDT_Main 0A16                       _LightsControl 0040  
                    __CFG_BOREN$OFF 0000        __end_of_getMain_Lights_Count 09C5  
                             pclath 000A                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080      __size_of_setLED_Initialization 0012  
     __end_of_setLED_Initialization 0A28                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
                 getPIR_AD@channel1 0064                   getPIR_AD@channel2 005F  
            ?_setLoad_AH_AL_Restore 0070                   setTemp_Main@error 0063  
                    _setLights_Main 0C5F                      _setLights_Line 0ACD  
                   __initialization 0013                      _setLights_SwOn 0BC4  
                __size_of_SYSC_Main 0003           __end_of_setLights_Trigger 0B63  
                      __end_of_main 0F76                    __end_of_Fosc_Set 0936  
    getMain_All_LightsStatus@status 0074                      _Exception_Main 04E5  
                         ??_ADC_Set 0074                              ??_main 006F  
             PIR_Main@Enable_Switch 0064              ?_Buzzer_Initialization 0070  
               __end_of_Lights_Main 0C34          __size_of_LightsPointSelect 0013  
          _getMain_All_LightsStatus 09E4             ??_Switch_Initialization 0074  
                            ?_getAD 0074              ?_myMain_Initialization 0070  
                            _ADCON0 001F                              _ADCON1 009F  
                  ___awdiv@dividend 0059                           ??_WDT_Set 0074  
                            _ANSELA 0185                              _ANSELB 0186  
          _getMain_All_Error_Status 0CFE                              _FVRCON 009D  
            getLights_Status@lights 0057                              _OSCCON 0090  
                __size_of_Load_Main 01EA                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0AFC  
              Exception_Main@i_2422 0069              getLights_Status@status 0058  
            __end_of_setLights_Main 0C8F              __end_of_setLights_Line 0AE4  
            __end_of_setLights_SwOn 0BE9        __size_of_SYSC_Initialization 0003  
        __end_of_Mcu_Initialization 09D4                 __end_of_Buzzer_Main 0DC0  
                            _Lights 0078                              _Timer1 003A  
       __size_of_CDS_Initialization 0004             ??_Lights_Initialization 0076  
            __end_of_Exception_Main 05BD                Exception_Main@lights 0063  
                            ___wmul 0BE9                           ??___awdiv 0074  
                         ??___lwdiv 0074                Exception_Main@status 0066  
                            _setLED 07A6                              _myMain 0031  
                  ___awdiv@quotient 005D                              _setBuz 0E04  
                __size_of_Temp_Main 0003                Load_Main@LightsCount 0065  
       __end_of_Load_Initialization 0915     getLights_Allow_Condition@lights 0070  
                            saved_w 007E                    setLights_SwOn@sw 005A  
                  ?_Timeout_Counter 0070         getMain_Lights_Count@status1 0058  
       getMain_Lights_Count@status2 0059               __end_of_SwPointSelect 0A4E  
                 __end_of_SYSC_Main 091B                      _Lights_Control 0681  
           __size_of_LedPointSelect 001A                           ?_CDS_Main 0070  
                setTemp_Main@TempGO 0064                    ?_getLight_LoadGO 0070  
       __size_of_PIR_Initialization 000B                          _TouchPower 0A62  
           __end_of__initialization 002A                           ?_LED_Main 0070  
                     ?_my_MainTimer 0070                     ?_setLights_Main 0070  
                   ?_setLights_Line 0070                     ?_setLights_SwOn 0070  
                     ?_setSYSC_Main 0070                     _setLights_SwOff 0B2E  
        __size_of_setLights_Trigger 001B                      __pcstackCOMMON 0070  
                __size_of_getCDS_AD 0022                     ?_Exception_Main 0070  
          __end_of_getLights_Status 0A05                       __end_of_getAD 0B7F  
                         ?_PIR_Main 0070                           ?_TMR1_ISR 0070  
     __size_of_getLight_Load_Status 0006                           ?_TMR1_Set 0070  
            setLoad_AH_AL_Restore@i 0075                  _LED_Initialization 07F4  
                   _getSw_KeyStatus 0A76                  __size_of_getPIR_AD 012E  
                       _Lights_Main 0C0E            _setLights_Initialization 0948  
              _getMain_Lights_Count 09B6                           ?_WDT_Main 0070  
                 __end_of_Load_Main 0217          __end_of_set_TimeoutCleared 0948  
               ?_LED_Initialization 0070              __end_of_Lights_Control 071B  
              __size_of_setLED_Main 003B                             ??_getAD 0075  
               _Temp_Initialization 091B                          ??_CDS_Main 0057  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                        __pbssBANK2 0120                           ?_Fosc_Set 0070  
       __size_of_getAll_Lights_Line 0010                         _Buzzer_Main 0D7C  
                 __end_of_Temp_Main 0921                             ?_IO_Set 0070  
                   __CFG_VCAPEN$DIS 0000                      ??_my_MainTimer 0062  
                        ??_LED_Main 0076                      ??_setSYSC_Main 0075  
                     ??_Switch_Main 0076                ??_LED_Initialization 0076  
                 LedPointSelect@led 0075                         setBuz@count 0061  
                        __pmaintext 0F04          ?_getLights_Allow_Condition 0070  
              ?_Temp_Initialization 0070                PIR_Main@LightsStatus 0067  
                           ?___wmul 0057                          ??_PIR_Main 005D  
                        ??_TMR1_ISR 0070                       ?_setTemp_Main 0070  
                __size_of_setLights 008B                          _getLoad_AD 0E4B  
                        ??_TMR1_Set 0074                          __pintentry 0004  
                        _getLoad_OK 095E                             ?_setLED 0057  
           setLights_Trigger@lights 0059               ?_getMain_Lights_Count 0070  
                           _ADC_Set 094F                             ?_setBuz 005F  
                        _getTemp_AD 0C34                          ??_WDT_Main 0074  
            __size_of_getCDS_Status 0008                     ?_Lights_Control 0070  
                 __end_of_getCDS_AD 0BA1                             _WDT_Set 09A8  
                     getPIR_AD@VRAD 0066                          ??_Fosc_Set 0074  
                       ?_TouchPower 0070                   __end_of_getPIR_AD 04E5  
           ??_setLoad_AH_AL_Restore 0074             __end_of_setLights_SwOff 0B48  
    _getLights_Allow_Condition$4789 0058                     __size_of_IO_Set 0018  
                        getCDS_AD@i 005A                          getCDS_AD@j 005B  
                           _Lights1 0049                             _Lights2 004E  
                           _VarLED1 00E6                             _VarLED2 00EA  
           __end_of_getSw_KeyStatus 0A8A               ??_Temp_Initialization 0074  
                    ??_setTemp_Main 0062                             ___awdiv 0EA7  
                   __size_of___wmul 0025                 __end_of_Switch_Main 098C  
                           ___lwdiv 0D3C          ??_getMain_All_LightsStatus 0074  
           ??_Buzzer_Initialization 0074                         PIR_Main@cds 0066  
                   __size_of_setLED 004E                     __size_of_setBuz 0047  
                           __ptext0 0000                             __ptext1 0BA1  
                           __ptext2 0911                             __ptext3 0C34  
                           __ptext4 03B7                             __ptext5 0E4B  
                           __ptext6 0B7F                             __ptext7 0B63  
                           __ptext8 0A05                             __ptext9 0002  
                        getPIR_AD@i 0067                          getPIR_AD@j 0063  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0074  
               _SYSC_Initialization 0915             ??_myMain_Initialization 0074  
          ??_setTemp_Initialization 0074                      _LedPointSelect 0B14  
                   getTemp_AD@ADRES 005A                             clrloop0 096F  
    __size_of_Switch_Initialization 0001       __end_of_Switch_Initialization 0910  
                 __end_of_setLights 07A6                end_of_initialization 002A  
                        _setSw_Main 05BD                       _getCDS_Status 0966  
              ?_SYSC_Initialization 0070               _setLED_Initialization 0A16  
                 setLights_SwOff@sw 005A                         ?_getLoad_AD 0070  
    __size_of_Lights_Initialization 0008                         ?_getLoad_OK 0070  
            ??_getMain_Lights_Count 0074       __end_of_Lights_Initialization 095E  
                       ?_getTemp_AD 0070                 __size_of_TouchPower 0014  
          setLED_Initialization@led 0059             setTemp_Main@DangerValue 0066  
                _Mcu_Initialization 09C5                __end_of_my_MainTimer 0BC4  
              __end_of_setSYSC_Main 0E04              __end_of_LedPointSelect 0B2E  
          Load_Main@ErrorCountValue 0063                 ?_Mcu_Initialization 0070  
                  ??_setLights_Main 0076                    ??_setLights_Line 0074  
              setLights_Main@lights 005C                    ??_setLights_SwOn 0076  
                         _SYSC_Main 0918     getMain_All_Error_Status@command 005B  
                 __size_of_CDS_Main 0034                      ?_getCDS_Status 0070  
                  ?_setLights_SwOff 0070               ??_SYSC_Initialization 0074  
                  ??_Exception_Main 0062                      __end_of_IO_Set 0B14  
        __end_of_CDS_Initialization 0929                         _Switch_Main 0981  
        ??_setLights_Initialization 0076                   __size_of_LED_Main 0004  
                  ?_getSw_KeyStatus 0070                ??_Mcu_Initialization 0075  
                     ?_WDT_Clearing 0070                   ?_getLights_Status 0070  
                      ?_Lights_Main 0070                      __end_of___wmul 0C0E  
                 getSw_KeyStatus@sw 0075                   __size_of_PIR_Main 01A0  
                 __size_of_TMR1_ISR 0016                  ??_getLights_Status 0076  
                 __size_of_TMR1_Set 000E                      __end_of_setLED 07F4  
                    __end_of_setBuz 0E4B            ??_setSYSC_Initialization 0074  
                 __size_of_WDT_Main 0011                 start_initialization 0013  
                   ?_LedPointSelect 0070                setLights_Line@lights 0074  
                         _Load_Main 002D                         __end_of_ISR 0AFC  
        __end_of_PIR_Initialization 0981        __size_of_Load_Initialization 0003  
      __end_of_getLight_Load_Status 0942     __size_of_setTemp_Initialization 0001  
               getCDS_Status@status 0074                __end_of_setTemp_Main 1000  
               __size_of_getLoad_AD 005C                        ?_Buzzer_Main 0070  
               __size_of_getLoad_OK 0008                          ?_SYSC_Main 0070  
                _set_TimeoutCleared 0942                            ??_IO_Set 0074  
          __size_of_Timeout_Counter 0014                           _VarErrLED 0053  
                       ?_setSw_Main 0070                 __size_of_getTemp_AD 002B  
            ?_setLED_Initialization 0070                   __size_of_Fosc_Set 0005  
          __size_of_getLight_LoadGO 0006                           _Temp_Main 091E  
                   setLights@lights 005B                 ?_set_TimeoutCleared 0070  
                    ??_WDT_Clearing 0074         ??_getLights_Allow_Condition 0075  
               Exception_Main@count 0064                     setLights@status 0059  
               Exception_Main@error 0065                            ??___wmul 0074  
            __size_of_SwPointSelect 0013    __end_of_getMain_All_LightsStatus 09F4  
                          ??_setLED 0076                            ?_ADC_Set 0070  
                  ??_Lights_Control 005F                            ??_setBuz 0075  
  __end_of_getMain_All_Error_Status 0D3C                       ??_setLED_Main 0057  
                       __pbssCOMMON 0076             Load_Main@Load_RunStatus 0064  
                         ___latbits 0001                          ?_Load_Main 0070  
                     __pcstackBANK0 0057                ??_set_TimeoutCleared 0074  
        __end_of_getAll_Lights_Line 09E4                            ?_WDT_Set 0070  
                   ??_getCDS_Status 0074                        ??_TouchPower 0074  
                     PIR_Main@error 0061                           _getCDS_AD 0B7F  
    __size_of_setLoad_AH_AL_Restore 0016       __end_of_setLoad_AH_AL_Restore 0AB6  
                         _getPIR_AD 03B7         __size_of_LED_Initialization 000C  
                   Exception_Main@i 0067                          ?_Temp_Main 0070  
                  ___lwdiv@dividend 0059                          setBuz@time 005F  
                    Load_Main@error 0060              _setTemp_Initialization 0910  
                     _PIR_Main$3214 0062                            ?___awdiv 0057  
             __size_of_my_MainTimer 0023                            ?___lwdiv 0057  
             __size_of_setSYSC_Main 0044      __size_of_Buzzer_Initialization 0004  
     __end_of_Buzzer_Initialization 0925                  __end_of_TouchPower 0A76  
          setLights_Trigger@command 0057                 __size_of_setSw_Main 00C4  
   __size_of_setSYSC_Initialization 0004           _getLights_Allow_Condition 0AB6  
    __size_of_myMain_Initialization 0001       __end_of_myMain_Initialization 0912  
                    __size_of_getAD 001C                    ___lwdiv@quotient 005C  
                     _SwPointSelect 0A3B                            _CDS_Main 0C8F  
               __end_of_setLED_Main 0CFE                         ??_SYSC_Main 0075  
       __end_of_Temp_Initialization 091E                   interrupt_function 0004  
                        ?_getCDS_AD 0057                      ___wmul@product 0074  
                          _LED_Main 0929                           _setLights 071B  
                   SwPointSelect@sw 0075                           clear_ram0 096E  
  __end_of_setLights_Initialization 094F                        _my_MainTimer 0BA1  
                        ?_getPIR_AD 005F                        _setSYSC_Main 0DC0  
                          _GO_nDONE 00F9                   ??_Timeout_Counter 0074  
              PIR_Main@TriggerValue 0065                            _PIR_Main 0217  
                      ??_getLoad_AD 0057                            _TMR1_ISR 0A8A  
                      ??_getLoad_OK 0074                _getLight_Load_Status 093C  
                          _TMR1_Set 099A                   ??_getLight_LoadGO 0074  
                      ??_getTemp_AD 0057                            _WDT_Main 0A05  
             getSw_KeyStatus@status 0074                    __size_of_ADC_Set 0007  
                 ___wmul@multiplier 0057                      getPIR_AD@VRAD1 0065  
              __size_of_Lights_Main 0026               __size_of_setTemp_Main 008A  
                      setSw_Main@sw 005F                         ??_Load_Main 005E  
    getMain_All_Error_Status@status 005C                      ?_SwPointSelect 0070  
                       getAD@adcon0 0075                         getAD@adcon1 0074  
                    setLED_Main@led 0059                __end_of_WDT_Clearing 0004  
 __size_of_getMain_All_LightsStatus 0010           ?_getMain_All_LightsStatus 0070  
                          _Fosc_Set 0931                    __size_of_WDT_Set 000E  
                __end_of_getLoad_AD 0EA7                  __end_of_getLoad_OK 0966  
             _Switch_Initialization 090F   __size_of_getMain_All_Error_Status 003E  
         ?_getMain_All_Error_Status 0070                __size_of_Buzzer_Main 0044  
                        ?_setLights 0059                  __end_of_getTemp_AD 0C5F  
            _setSYSC_Initialization 092D                        ?_Switch_Main 0070  
                 getLoad_AD@channel 0059                   _DetectSYSC_Signal 098C  
                          _SwDetect 0041                         ??_Temp_Main 0076  
     _getMain_All_Error_Status$2408 0057       _getMain_All_Error_Status$2409 0059  
               _Load_Initialization 0912                  ?_DetectSYSC_Signal 0070  
                         setLED@led 0058               ?_getLight_Load_Status 0070  
                      _setTemp_Main 0F76                    __size_of___awdiv 005D  
    getLight_Load_Status@loadstatus 0074                    __size_of___lwdiv 0040  
                  ??_LedPointSelect 0074       __size_of_getMain_Lights_Count 000F  
               ??_DetectSYSC_Signal 0074                  _CDS_Initialization 0925  
             _Lights_Initialization 0956                   getTemp_AD@channel 0059  
                       _setLED_Main 0CC3                     ___lwdiv@divisor 0057  
              ?_Load_Initialization 0070                 ?_CDS_Initialization 0070  
                   ___lwdiv@counter 005B                            __ptext10 091E  
                          __ptext11 0F76                            __ptext20 0A4E  
                          __ptext12 091B                            __ptext21 090F  
                          __ptext13 0910                            __ptext30 09A8  
                          __ptext22 0918                            __ptext14 0981  
                          __ptext31 099A                            __ptext23 0DC0  
                          __ptext15 05BD                            __ptext40 0D3C  
                          __ptext32 0AFC                            __ptext24 0915  
                          __ptext16 0A76                            __ptext41 0912  
                          __ptext33 0931                            __ptext25 092D  
                          __ptext17 0A3B                            __ptext50 0956  
                          __ptext42 0AA0                            __ptext34 094F  
                          __ptext26 0217                            __ptext18 0A62  
                          __ptext51 0948                            __ptext43 0C0E  
                          __ptext35 002D                            __ptext27 0966  
                          __ptext19 0942                            __ptext60 0B48  
                          __ptext52 0929                            __ptext44 0C5F  
                          __ptext36 09B6                            __ptext28 0976  
                          __ptext61 0A28                            __ptext53 0CC3  
                          __ptext45 071B                            __ptext37 093C  
                          __ptext29 09C5                            __ptext70 0C8F  
                          __ptext62 07A6                            __ptext54 07F4  
                          __ptext46 0ACD                            __ptext38 0936  
                          __ptext71 0925                            __ptext63 0B14  
                          __ptext55 0A16                            __ptext47 0AB6  
                          __ptext39 0BE9                            __ptext72 0D7C  
                          __ptext64 0E04                            __ptext56 04E5  
                          __ptext48 095E                            __ptext73 0921  
                          __ptext65 0EA7                            __ptext57 0BC4  
                          __ptext49 0681                            __ptext74 0AE4  
                          __ptext66 09E4                            __ptext58 09F4  
                          __ptext75 0A8A                            __ptext67 0CFE  
                          __ptext59 0B2E                            __ptext68 09D4  
                          __ptext69 098C           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 0918             ??_setLED_Initialization 0076  
                       ??_getCDS_AD 0058                        ??_setSw_Main 005D  
                     setLED@command 0057           __end_of_DetectSYSC_Signal 099A  
                     __size_of_main 0072                         ??_getPIR_AD 0060  
                _PIR_Initialization 0976                ??_CDS_Initialization 0074  
       __size_of_Mcu_Initialization 000F            __size_of_setLights_SwOff 001A  
                      getLoad_OK@ok 0074                 ?_PIR_Initialization 0070  
                          main@argc 006B                            main@argv 006D  
          __size_of_getSw_KeyStatus 0014   __size_of_setLights_Initialization 0007  
         ?_setLights_Initialization 0070                     ??_SwPointSelect 0074  
                __end_of_setSw_Main 0681               ??_Load_Initialization 0076  
              Lights_Control@lights 0061                ??_PIR_Initialization 0074  
                          intlevel1 0000              ?_Switch_Initialization 0070  
__size_of_getLights_Allow_Condition 0017               setTemp_Main@SafeValue 0065  
                       ??_setLights 005A             ?_setTemp_Initialization 0070  
           LightsPointSelect@lights 0075                  _getAll_Lights_Line 09D4  
                   getLoad_AD@ADRES 005C              ??_getLight_Load_Status 0074  
                       getLoad_AD@i 005D                         getLoad_AD@j 005B  
                       getLoad_AD@k 005A             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 0017             __size_of_setLights_SwOn 0025  
               ?_getAll_Lights_Line 0070               getLight_LoadGO@loadgo 0074  
            ?_Lights_Initialization 0070             __size_of_Exception_Main 00D8  
             __size_of_WDT_Clearing 0002      setLights_Initialization@lights 0057  
       __size_of_set_TimeoutCleared 0006                   _LightsPointSelect 0A28  
              ??_getAll_Lights_Line 0074                  __CFG_FOSC$INTOSCIO 0000  
                ?_LightsPointSelect 0070                     _Timeout_Counter 0A4E  
        __end_of_LED_Initialization 0800               __end_of_getCDS_Status 096E  
    __end_of_setTemp_Initialization 0911          __size_of_DetectSYSC_Signal 000E  
                   _getLight_LoadGO 0936                   getCDS_AD@channel1 005C  
                 getCDS_AD@channel2 0057   __end_of_getLights_Allow_Condition 0ACD  
               ??_LightsPointSelect 0074               _setLoad_AH_AL_Restore 0AA0  
