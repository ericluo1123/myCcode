

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Jan 15 17:38:49 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text53,local,class=CODE,merge=1,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text55,local,class=CODE,merge=1,delta=2
    70                           	psect	text56,local,class=CODE,merge=1,delta=2
    71                           	psect	text57,local,class=CODE,merge=1,delta=2
    72                           	psect	text58,local,class=CODE,merge=1,delta=2
    73                           	psect	text59,local,class=CODE,merge=1,delta=2
    74                           	psect	text60,local,class=CODE,merge=1,delta=2
    75                           	psect	text61,local,class=CODE,merge=1,delta=2
    76                           	psect	text62,local,class=CODE,merge=1,delta=2
    77                           	psect	text63,local,class=CODE,merge=1,delta=2
    78                           	psect	text64,local,class=CODE,merge=1,delta=2
    79                           	psect	text65,local,class=CODE,merge=1,delta=2
    80                           	psect	text66,local,class=CODE,merge=1,delta=2
    81                           	psect	text67,local,class=CODE,merge=1,delta=2
    82                           	psect	text68,local,class=CODE,merge=1,delta=2
    83                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    88                           	psect	text74,local,class=CODE,merge=1,delta=2
    89                           	psect	intentry,global,class=CODE,delta=2
    90                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    91                           	dabs	1,0x7E,2
    92  0000                     	;# 
    93  0001                     	;# 
    94  0002                     	;# 
    95  0003                     	;# 
    96  0004                     	;# 
    97  0005                     	;# 
    98  0006                     	;# 
    99  0007                     	;# 
   100  0009                     	;# 
   101  000A                     	;# 
   102  000B                     	;# 
   103  000C                     	;# 
   104  000D                     	;# 
   105  000E                     	;# 
   106  000E                     	;# 
   107  000F                     	;# 
   108  0010                     	;# 
   109  0011                     	;# 
   110  0012                     	;# 
   111  0013                     	;# 
   112  0014                     	;# 
   113  0015                     	;# 
   114  0015                     	;# 
   115  0016                     	;# 
   116  0017                     	;# 
   117  0018                     	;# 
   118  0019                     	;# 
   119  001A                     	;# 
   120  001B                     	;# 
   121  001B                     	;# 
   122  001C                     	;# 
   123  001D                     	;# 
   124  001E                     	;# 
   125  001F                     	;# 
   126  0081                     	;# 
   127  0085                     	;# 
   128  0086                     	;# 
   129  0087                     	;# 
   130  0089                     	;# 
   131  008C                     	;# 
   132  008D                     	;# 
   133  008E                     	;# 
   134  008F                     	;# 
   135  0090                     	;# 
   136  0091                     	;# 
   137  0092                     	;# 
   138  0093                     	;# 
   139  0093                     	;# 
   140  0094                     	;# 
   141  0095                     	;# 
   142  0095                     	;# 
   143  0096                     	;# 
   144  0096                     	;# 
   145  0098                     	;# 
   146  0099                     	;# 
   147  009C                     	;# 
   148  009D                     	;# 
   149  009F                     	;# 
   150  0108                     	;# 
   151  0109                     	;# 
   152  010C                     	;# 
   153  010C                     	;# 
   154  010D                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010F                     	;# 
   158  0185                     	;# 
   159  0186                     	;# 
   160  018C                     	;# 
   161  0000                     	;# 
   162  0001                     	;# 
   163  0002                     	;# 
   164  0003                     	;# 
   165  0004                     	;# 
   166  0005                     	;# 
   167  0006                     	;# 
   168  0007                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  000E                     	;# 
   176  000F                     	;# 
   177  0010                     	;# 
   178  0011                     	;# 
   179  0012                     	;# 
   180  0013                     	;# 
   181  0014                     	;# 
   182  0015                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  001D                     	;# 
   193  001E                     	;# 
   194  001F                     	;# 
   195  0081                     	;# 
   196  0085                     	;# 
   197  0086                     	;# 
   198  0087                     	;# 
   199  0089                     	;# 
   200  008C                     	;# 
   201  008D                     	;# 
   202  008E                     	;# 
   203  008F                     	;# 
   204  0090                     	;# 
   205  0091                     	;# 
   206  0092                     	;# 
   207  0093                     	;# 
   208  0093                     	;# 
   209  0094                     	;# 
   210  0095                     	;# 
   211  0095                     	;# 
   212  0096                     	;# 
   213  0096                     	;# 
   214  0098                     	;# 
   215  0099                     	;# 
   216  009C                     	;# 
   217  009D                     	;# 
   218  009F                     	;# 
   219  0108                     	;# 
   220  0109                     	;# 
   221  010C                     	;# 
   222  010C                     	;# 
   223  010D                     	;# 
   224  010D                     	;# 
   225  010E                     	;# 
   226  010F                     	;# 
   227  0185                     	;# 
   228  0186                     	;# 
   229  018C                     	;# 
   230  0000                     	;# 
   231  0001                     	;# 
   232  0002                     	;# 
   233  0003                     	;# 
   234  0004                     	;# 
   235  0005                     	;# 
   236  0006                     	;# 
   237  0007                     	;# 
   238  0009                     	;# 
   239  000A                     	;# 
   240  000B                     	;# 
   241  000C                     	;# 
   242  000D                     	;# 
   243  000E                     	;# 
   244  000E                     	;# 
   245  000F                     	;# 
   246  0010                     	;# 
   247  0011                     	;# 
   248  0012                     	;# 
   249  0013                     	;# 
   250  0014                     	;# 
   251  0015                     	;# 
   252  0015                     	;# 
   253  0016                     	;# 
   254  0017                     	;# 
   255  0018                     	;# 
   256  0019                     	;# 
   257  001A                     	;# 
   258  001B                     	;# 
   259  001B                     	;# 
   260  001C                     	;# 
   261  001D                     	;# 
   262  001E                     	;# 
   263  001F                     	;# 
   264  0081                     	;# 
   265  0085                     	;# 
   266  0086                     	;# 
   267  0087                     	;# 
   268  0089                     	;# 
   269  008C                     	;# 
   270  008D                     	;# 
   271  008E                     	;# 
   272  008F                     	;# 
   273  0090                     	;# 
   274  0091                     	;# 
   275  0092                     	;# 
   276  0093                     	;# 
   277  0093                     	;# 
   278  0094                     	;# 
   279  0095                     	;# 
   280  0095                     	;# 
   281  0096                     	;# 
   282  0096                     	;# 
   283  0098                     	;# 
   284  0099                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009F                     	;# 
   288  0108                     	;# 
   289  0109                     	;# 
   290  010C                     	;# 
   291  010C                     	;# 
   292  010D                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  010F                     	;# 
   296  0185                     	;# 
   297  0186                     	;# 
   298  018C                     	;# 
   299  0000                     	;# 
   300  0001                     	;# 
   301  0002                     	;# 
   302  0003                     	;# 
   303  0004                     	;# 
   304  0005                     	;# 
   305  0006                     	;# 
   306  0007                     	;# 
   307  0009                     	;# 
   308  000A                     	;# 
   309  000B                     	;# 
   310  000C                     	;# 
   311  000D                     	;# 
   312  000E                     	;# 
   313  000E                     	;# 
   314  000F                     	;# 
   315  0010                     	;# 
   316  0011                     	;# 
   317  0012                     	;# 
   318  0013                     	;# 
   319  0014                     	;# 
   320  0015                     	;# 
   321  0015                     	;# 
   322  0016                     	;# 
   323  0017                     	;# 
   324  0018                     	;# 
   325  0019                     	;# 
   326  001A                     	;# 
   327  001B                     	;# 
   328  001B                     	;# 
   329  001C                     	;# 
   330  001D                     	;# 
   331  001E                     	;# 
   332  001F                     	;# 
   333  0081                     	;# 
   334  0085                     	;# 
   335  0086                     	;# 
   336  0087                     	;# 
   337  0089                     	;# 
   338  008C                     	;# 
   339  008D                     	;# 
   340  008E                     	;# 
   341  008F                     	;# 
   342  0090                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0093                     	;# 
   346  0093                     	;# 
   347  0094                     	;# 
   348  0095                     	;# 
   349  0095                     	;# 
   350  0096                     	;# 
   351  0096                     	;# 
   352  0098                     	;# 
   353  0099                     	;# 
   354  009C                     	;# 
   355  009D                     	;# 
   356  009F                     	;# 
   357  0108                     	;# 
   358  0109                     	;# 
   359  010C                     	;# 
   360  010C                     	;# 
   361  010D                     	;# 
   362  010D                     	;# 
   363  010E                     	;# 
   364  010F                     	;# 
   365  0185                     	;# 
   366  0186                     	;# 
   367  018C                     	;# 
   368  0000                     	;# 
   369  0001                     	;# 
   370  0002                     	;# 
   371  0003                     	;# 
   372  0004                     	;# 
   373  0005                     	;# 
   374  0006                     	;# 
   375  0007                     	;# 
   376  0009                     	;# 
   377  000A                     	;# 
   378  000B                     	;# 
   379  000C                     	;# 
   380  000D                     	;# 
   381  000E                     	;# 
   382  000E                     	;# 
   383  000F                     	;# 
   384  0010                     	;# 
   385  0011                     	;# 
   386  0012                     	;# 
   387  0013                     	;# 
   388  0014                     	;# 
   389  0015                     	;# 
   390  0015                     	;# 
   391  0016                     	;# 
   392  0017                     	;# 
   393  0018                     	;# 
   394  0019                     	;# 
   395  001A                     	;# 
   396  001B                     	;# 
   397  001B                     	;# 
   398  001C                     	;# 
   399  001D                     	;# 
   400  001E                     	;# 
   401  001F                     	;# 
   402  0081                     	;# 
   403  0085                     	;# 
   404  0086                     	;# 
   405  0087                     	;# 
   406  0089                     	;# 
   407  008C                     	;# 
   408  008D                     	;# 
   409  008E                     	;# 
   410  008F                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0093                     	;# 
   415  0093                     	;# 
   416  0094                     	;# 
   417  0095                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0096                     	;# 
   421  0098                     	;# 
   422  0099                     	;# 
   423  009C                     	;# 
   424  009D                     	;# 
   425  009F                     	;# 
   426  0108                     	;# 
   427  0109                     	;# 
   428  010C                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010D                     	;# 
   432  010E                     	;# 
   433  010F                     	;# 
   434  0185                     	;# 
   435  0186                     	;# 
   436  018C                     	;# 
   437  0000                     	;# 
   438  0001                     	;# 
   439  0002                     	;# 
   440  0003                     	;# 
   441  0004                     	;# 
   442  0005                     	;# 
   443  0006                     	;# 
   444  0007                     	;# 
   445  0009                     	;# 
   446  000A                     	;# 
   447  000B                     	;# 
   448  000C                     	;# 
   449  000D                     	;# 
   450  000E                     	;# 
   451  000E                     	;# 
   452  000F                     	;# 
   453  0010                     	;# 
   454  0011                     	;# 
   455  0012                     	;# 
   456  0013                     	;# 
   457  0014                     	;# 
   458  0015                     	;# 
   459  0015                     	;# 
   460  0016                     	;# 
   461  0017                     	;# 
   462  0018                     	;# 
   463  0019                     	;# 
   464  001A                     	;# 
   465  001B                     	;# 
   466  001B                     	;# 
   467  001C                     	;# 
   468  001D                     	;# 
   469  001E                     	;# 
   470  001F                     	;# 
   471  0081                     	;# 
   472  0085                     	;# 
   473  0086                     	;# 
   474  0087                     	;# 
   475  0089                     	;# 
   476  008C                     	;# 
   477  008D                     	;# 
   478  008E                     	;# 
   479  008F                     	;# 
   480  0090                     	;# 
   481  0091                     	;# 
   482  0092                     	;# 
   483  0093                     	;# 
   484  0093                     	;# 
   485  0094                     	;# 
   486  0095                     	;# 
   487  0095                     	;# 
   488  0096                     	;# 
   489  0096                     	;# 
   490  0098                     	;# 
   491  0099                     	;# 
   492  009C                     	;# 
   493  009D                     	;# 
   494  009F                     	;# 
   495  0108                     	;# 
   496  0109                     	;# 
   497  010C                     	;# 
   498  010C                     	;# 
   499  010D                     	;# 
   500  010D                     	;# 
   501  010E                     	;# 
   502  010F                     	;# 
   503  0185                     	;# 
   504  0186                     	;# 
   505  018C                     	;# 
   506  0000                     	;# 
   507  0001                     	;# 
   508  0002                     	;# 
   509  0003                     	;# 
   510  0004                     	;# 
   511  0005                     	;# 
   512  0006                     	;# 
   513  0007                     	;# 
   514  0009                     	;# 
   515  000A                     	;# 
   516  000B                     	;# 
   517  000C                     	;# 
   518  000D                     	;# 
   519  000E                     	;# 
   520  000E                     	;# 
   521  000F                     	;# 
   522  0010                     	;# 
   523  0011                     	;# 
   524  0012                     	;# 
   525  0013                     	;# 
   526  0014                     	;# 
   527  0015                     	;# 
   528  0015                     	;# 
   529  0016                     	;# 
   530  0017                     	;# 
   531  0018                     	;# 
   532  0019                     	;# 
   533  001A                     	;# 
   534  001B                     	;# 
   535  001B                     	;# 
   536  001C                     	;# 
   537  001D                     	;# 
   538  001E                     	;# 
   539  001F                     	;# 
   540  0081                     	;# 
   541  0085                     	;# 
   542  0086                     	;# 
   543  0087                     	;# 
   544  0089                     	;# 
   545  008C                     	;# 
   546  008D                     	;# 
   547  008E                     	;# 
   548  008F                     	;# 
   549  0090                     	;# 
   550  0091                     	;# 
   551  0092                     	;# 
   552  0093                     	;# 
   553  0093                     	;# 
   554  0094                     	;# 
   555  0095                     	;# 
   556  0095                     	;# 
   557  0096                     	;# 
   558  0096                     	;# 
   559  0098                     	;# 
   560  0099                     	;# 
   561  009C                     	;# 
   562  009D                     	;# 
   563  009F                     	;# 
   564  0108                     	;# 
   565  0109                     	;# 
   566  010C                     	;# 
   567  010C                     	;# 
   568  010D                     	;# 
   569  010D                     	;# 
   570  010E                     	;# 
   571  010F                     	;# 
   572  0185                     	;# 
   573  0186                     	;# 
   574  018C                     	;# 
   575  0000                     	;# 
   576  0001                     	;# 
   577  0002                     	;# 
   578  0003                     	;# 
   579  0004                     	;# 
   580  0005                     	;# 
   581  0006                     	;# 
   582  0007                     	;# 
   583  0009                     	;# 
   584  000A                     	;# 
   585  000B                     	;# 
   586  000C                     	;# 
   587  000D                     	;# 
   588  000E                     	;# 
   589  000E                     	;# 
   590  000F                     	;# 
   591  0010                     	;# 
   592  0011                     	;# 
   593  0012                     	;# 
   594  0013                     	;# 
   595  0014                     	;# 
   596  0015                     	;# 
   597  0015                     	;# 
   598  0016                     	;# 
   599  0017                     	;# 
   600  0018                     	;# 
   601  0019                     	;# 
   602  001A                     	;# 
   603  001B                     	;# 
   604  001B                     	;# 
   605  001C                     	;# 
   606  001D                     	;# 
   607  001E                     	;# 
   608  001F                     	;# 
   609  0081                     	;# 
   610  0085                     	;# 
   611  0086                     	;# 
   612  0087                     	;# 
   613  0089                     	;# 
   614  008C                     	;# 
   615  008D                     	;# 
   616  008E                     	;# 
   617  008F                     	;# 
   618  0090                     	;# 
   619  0091                     	;# 
   620  0092                     	;# 
   621  0093                     	;# 
   622  0093                     	;# 
   623  0094                     	;# 
   624  0095                     	;# 
   625  0095                     	;# 
   626  0096                     	;# 
   627  0096                     	;# 
   628  0098                     	;# 
   629  0099                     	;# 
   630  009C                     	;# 
   631  009D                     	;# 
   632  009F                     	;# 
   633  0108                     	;# 
   634  0109                     	;# 
   635  010C                     	;# 
   636  010C                     	;# 
   637  010D                     	;# 
   638  010D                     	;# 
   639  010E                     	;# 
   640  010F                     	;# 
   641  0185                     	;# 
   642  0186                     	;# 
   643  018C                     	;# 
   644  0000                     	;# 
   645  0001                     	;# 
   646  0002                     	;# 
   647  0003                     	;# 
   648  0004                     	;# 
   649  0005                     	;# 
   650  0006                     	;# 
   651  0007                     	;# 
   652  0009                     	;# 
   653  000A                     	;# 
   654  000B                     	;# 
   655  000C                     	;# 
   656  000D                     	;# 
   657  000E                     	;# 
   658  000E                     	;# 
   659  000F                     	;# 
   660  0010                     	;# 
   661  0011                     	;# 
   662  0012                     	;# 
   663  0013                     	;# 
   664  0014                     	;# 
   665  0015                     	;# 
   666  0015                     	;# 
   667  0016                     	;# 
   668  0017                     	;# 
   669  0018                     	;# 
   670  0019                     	;# 
   671  001A                     	;# 
   672  001B                     	;# 
   673  001B                     	;# 
   674  001C                     	;# 
   675  001D                     	;# 
   676  001E                     	;# 
   677  001F                     	;# 
   678  0081                     	;# 
   679  0085                     	;# 
   680  0086                     	;# 
   681  0087                     	;# 
   682  0089                     	;# 
   683  008C                     	;# 
   684  008D                     	;# 
   685  008E                     	;# 
   686  008F                     	;# 
   687  0090                     	;# 
   688  0091                     	;# 
   689  0092                     	;# 
   690  0093                     	;# 
   691  0093                     	;# 
   692  0094                     	;# 
   693  0095                     	;# 
   694  0095                     	;# 
   695  0096                     	;# 
   696  0096                     	;# 
   697  0098                     	;# 
   698  0099                     	;# 
   699  009C                     	;# 
   700  009D                     	;# 
   701  009F                     	;# 
   702  0108                     	;# 
   703  0109                     	;# 
   704  010C                     	;# 
   705  010C                     	;# 
   706  010D                     	;# 
   707  010D                     	;# 
   708  010E                     	;# 
   709  010F                     	;# 
   710  0185                     	;# 
   711  0186                     	;# 
   712  018C                     	;# 
   713  0000                     	;# 
   714  0001                     	;# 
   715  0002                     	;# 
   716  0003                     	;# 
   717  0004                     	;# 
   718  0005                     	;# 
   719  0006                     	;# 
   720  0007                     	;# 
   721  0009                     	;# 
   722  000A                     	;# 
   723  000B                     	;# 
   724  000C                     	;# 
   725  000D                     	;# 
   726  000E                     	;# 
   727  000E                     	;# 
   728  000F                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0013                     	;# 
   733  0014                     	;# 
   734  0015                     	;# 
   735  0015                     	;# 
   736  0016                     	;# 
   737  0017                     	;# 
   738  0018                     	;# 
   739  0019                     	;# 
   740  001A                     	;# 
   741  001B                     	;# 
   742  001B                     	;# 
   743  001C                     	;# 
   744  001D                     	;# 
   745  001E                     	;# 
   746  001F                     	;# 
   747  0081                     	;# 
   748  0085                     	;# 
   749  0086                     	;# 
   750  0087                     	;# 
   751  0089                     	;# 
   752  008C                     	;# 
   753  008D                     	;# 
   754  008E                     	;# 
   755  008F                     	;# 
   756  0090                     	;# 
   757  0091                     	;# 
   758  0092                     	;# 
   759  0093                     	;# 
   760  0093                     	;# 
   761  0094                     	;# 
   762  0095                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0096                     	;# 
   766  0098                     	;# 
   767  0099                     	;# 
   768  009C                     	;# 
   769  009D                     	;# 
   770  009F                     	;# 
   771  0108                     	;# 
   772  0109                     	;# 
   773  010C                     	;# 
   774  010C                     	;# 
   775  010D                     	;# 
   776  010D                     	;# 
   777  010E                     	;# 
   778  010F                     	;# 
   779  0185                     	;# 
   780  0186                     	;# 
   781  018C                     	;# 
   782  0000                     	;# 
   783  0001                     	;# 
   784  0002                     	;# 
   785  0003                     	;# 
   786  0004                     	;# 
   787  0005                     	;# 
   788  0006                     	;# 
   789  0007                     	;# 
   790  0009                     	;# 
   791  000A                     	;# 
   792  000B                     	;# 
   793  000C                     	;# 
   794  000D                     	;# 
   795  000E                     	;# 
   796  000E                     	;# 
   797  000F                     	;# 
   798  0010                     	;# 
   799  0011                     	;# 
   800  0012                     	;# 
   801  0013                     	;# 
   802  0014                     	;# 
   803  0015                     	;# 
   804  0015                     	;# 
   805  0016                     	;# 
   806  0017                     	;# 
   807  0018                     	;# 
   808  0019                     	;# 
   809  001A                     	;# 
   810  001B                     	;# 
   811  001B                     	;# 
   812  001C                     	;# 
   813  001D                     	;# 
   814  001E                     	;# 
   815  001F                     	;# 
   816  0081                     	;# 
   817  0085                     	;# 
   818  0086                     	;# 
   819  0087                     	;# 
   820  0089                     	;# 
   821  008C                     	;# 
   822  008D                     	;# 
   823  008E                     	;# 
   824  008F                     	;# 
   825  0090                     	;# 
   826  0091                     	;# 
   827  0092                     	;# 
   828  0093                     	;# 
   829  0093                     	;# 
   830  0094                     	;# 
   831  0095                     	;# 
   832  0095                     	;# 
   833  0096                     	;# 
   834  0096                     	;# 
   835  0098                     	;# 
   836  0099                     	;# 
   837  009C                     	;# 
   838  009D                     	;# 
   839  009F                     	;# 
   840  0108                     	;# 
   841  0109                     	;# 
   842  010C                     	;# 
   843  010C                     	;# 
   844  010D                     	;# 
   845  010D                     	;# 
   846  010E                     	;# 
   847  010F                     	;# 
   848  0185                     	;# 
   849  0186                     	;# 
   850  018C                     	;# 
   851  0000                     	;# 
   852  0001                     	;# 
   853  0002                     	;# 
   854  0003                     	;# 
   855  0004                     	;# 
   856  0005                     	;# 
   857  0006                     	;# 
   858  0007                     	;# 
   859  0009                     	;# 
   860  000A                     	;# 
   861  000B                     	;# 
   862  000C                     	;# 
   863  000D                     	;# 
   864  000E                     	;# 
   865  000E                     	;# 
   866  000F                     	;# 
   867  0010                     	;# 
   868  0011                     	;# 
   869  0012                     	;# 
   870  0013                     	;# 
   871  0014                     	;# 
   872  0015                     	;# 
   873  0015                     	;# 
   874  0016                     	;# 
   875  0017                     	;# 
   876  0018                     	;# 
   877  0019                     	;# 
   878  001A                     	;# 
   879  001B                     	;# 
   880  001B                     	;# 
   881  001C                     	;# 
   882  001D                     	;# 
   883  001E                     	;# 
   884  001F                     	;# 
   885  0081                     	;# 
   886  0085                     	;# 
   887  0086                     	;# 
   888  0087                     	;# 
   889  0089                     	;# 
   890  008C                     	;# 
   891  008D                     	;# 
   892  008E                     	;# 
   893  008F                     	;# 
   894  0090                     	;# 
   895  0091                     	;# 
   896  0092                     	;# 
   897  0093                     	;# 
   898  0093                     	;# 
   899  0094                     	;# 
   900  0095                     	;# 
   901  0095                     	;# 
   902  0096                     	;# 
   903  0096                     	;# 
   904  0098                     	;# 
   905  0099                     	;# 
   906  009C                     	;# 
   907  009D                     	;# 
   908  009F                     	;# 
   909  0108                     	;# 
   910  0109                     	;# 
   911  010C                     	;# 
   912  010C                     	;# 
   913  010D                     	;# 
   914  010D                     	;# 
   915  010E                     	;# 
   916  010F                     	;# 
   917  0185                     	;# 
   918  0186                     	;# 
   919  018C                     	;# 
   920  0000                     	;# 
   921  0001                     	;# 
   922  0002                     	;# 
   923  0003                     	;# 
   924  0004                     	;# 
   925  0005                     	;# 
   926  0006                     	;# 
   927  0007                     	;# 
   928  0009                     	;# 
   929  000A                     	;# 
   930  000B                     	;# 
   931  000C                     	;# 
   932  000D                     	;# 
   933  000E                     	;# 
   934  000E                     	;# 
   935  000F                     	;# 
   936  0010                     	;# 
   937  0011                     	;# 
   938  0012                     	;# 
   939  0013                     	;# 
   940  0014                     	;# 
   941  0015                     	;# 
   942  0015                     	;# 
   943  0016                     	;# 
   944  0017                     	;# 
   945  0018                     	;# 
   946  0019                     	;# 
   947  001A                     	;# 
   948  001B                     	;# 
   949  001B                     	;# 
   950  001C                     	;# 
   951  001D                     	;# 
   952  001E                     	;# 
   953  001F                     	;# 
   954  0081                     	;# 
   955  0085                     	;# 
   956  0086                     	;# 
   957  0087                     	;# 
   958  0089                     	;# 
   959  008C                     	;# 
   960  008D                     	;# 
   961  008E                     	;# 
   962  008F                     	;# 
   963  0090                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0093                     	;# 
   967  0093                     	;# 
   968  0094                     	;# 
   969  0095                     	;# 
   970  0095                     	;# 
   971  0096                     	;# 
   972  0096                     	;# 
   973  0098                     	;# 
   974  0099                     	;# 
   975  009C                     	;# 
   976  009D                     	;# 
   977  009F                     	;# 
   978  0108                     	;# 
   979  0109                     	;# 
   980  010C                     	;# 
   981  010C                     	;# 
   982  010D                     	;# 
   983  010D                     	;# 
   984  010E                     	;# 
   985  010F                     	;# 
   986  0185                     	;# 
   987  0186                     	;# 
   988  018C                     	;# 
   989  0000                     	;# 
   990  0001                     	;# 
   991  0002                     	;# 
   992  0003                     	;# 
   993  0004                     	;# 
   994  0005                     	;# 
   995  0006                     	;# 
   996  0007                     	;# 
   997  0009                     	;# 
   998  000A                     	;# 
   999  000B                     	;# 
  1000  000C                     	;# 
  1001  000D                     	;# 
  1002  000E                     	;# 
  1003  000E                     	;# 
  1004  000F                     	;# 
  1005  0010                     	;# 
  1006  0011                     	;# 
  1007  0012                     	;# 
  1008  0013                     	;# 
  1009  0014                     	;# 
  1010  0015                     	;# 
  1011  0015                     	;# 
  1012  0016                     	;# 
  1013  0017                     	;# 
  1014  0018                     	;# 
  1015  0019                     	;# 
  1016  001A                     	;# 
  1017  001B                     	;# 
  1018  001B                     	;# 
  1019  001C                     	;# 
  1020  001D                     	;# 
  1021  001E                     	;# 
  1022  001F                     	;# 
  1023  0081                     	;# 
  1024  0085                     	;# 
  1025  0086                     	;# 
  1026  0087                     	;# 
  1027  0089                     	;# 
  1028  008C                     	;# 
  1029  008D                     	;# 
  1030  008E                     	;# 
  1031  008F                     	;# 
  1032  0090                     	;# 
  1033  0091                     	;# 
  1034  0092                     	;# 
  1035  0093                     	;# 
  1036  0093                     	;# 
  1037  0094                     	;# 
  1038  0095                     	;# 
  1039  0095                     	;# 
  1040  0096                     	;# 
  1041  0096                     	;# 
  1042  0098                     	;# 
  1043  0099                     	;# 
  1044  009C                     	;# 
  1045  009D                     	;# 
  1046  009F                     	;# 
  1047  0108                     	;# 
  1048  0109                     	;# 
  1049  010C                     	;# 
  1050  010C                     	;# 
  1051  010D                     	;# 
  1052  010D                     	;# 
  1053  010E                     	;# 
  1054  010F                     	;# 
  1055  0185                     	;# 
  1056  0186                     	;# 
  1057  018C                     	;# 
  1058  0000                     	;# 
  1059  0001                     	;# 
  1060  0002                     	;# 
  1061  0003                     	;# 
  1062  0004                     	;# 
  1063  0005                     	;# 
  1064  0006                     	;# 
  1065  0007                     	;# 
  1066  0009                     	;# 
  1067  000A                     	;# 
  1068  000B                     	;# 
  1069  000C                     	;# 
  1070  000D                     	;# 
  1071  000E                     	;# 
  1072  000E                     	;# 
  1073  000F                     	;# 
  1074  0010                     	;# 
  1075  0011                     	;# 
  1076  0012                     	;# 
  1077  0013                     	;# 
  1078  0014                     	;# 
  1079  0015                     	;# 
  1080  0015                     	;# 
  1081  0016                     	;# 
  1082  0017                     	;# 
  1083  0018                     	;# 
  1084  0019                     	;# 
  1085  001A                     	;# 
  1086  001B                     	;# 
  1087  001B                     	;# 
  1088  001C                     	;# 
  1089  001D                     	;# 
  1090  001E                     	;# 
  1091  001F                     	;# 
  1092  0081                     	;# 
  1093  0085                     	;# 
  1094  0086                     	;# 
  1095  0087                     	;# 
  1096  0089                     	;# 
  1097  008C                     	;# 
  1098  008D                     	;# 
  1099  008E                     	;# 
  1100  008F                     	;# 
  1101  0090                     	;# 
  1102  0091                     	;# 
  1103  0092                     	;# 
  1104  0093                     	;# 
  1105  0093                     	;# 
  1106  0094                     	;# 
  1107  0095                     	;# 
  1108  0095                     	;# 
  1109  0096                     	;# 
  1110  0096                     	;# 
  1111  0098                     	;# 
  1112  0099                     	;# 
  1113  009C                     	;# 
  1114  009D                     	;# 
  1115  009F                     	;# 
  1116  0108                     	;# 
  1117  0109                     	;# 
  1118  010C                     	;# 
  1119  010C                     	;# 
  1120  010D                     	;# 
  1121  010D                     	;# 
  1122  010E                     	;# 
  1123  010F                     	;# 
  1124  0185                     	;# 
  1125  0186                     	;# 
  1126  018C                     	;# 
  1127  0000                     	;# 
  1128  0001                     	;# 
  1129  0002                     	;# 
  1130  0003                     	;# 
  1131  0004                     	;# 
  1132  0005                     	;# 
  1133  0006                     	;# 
  1134  0007                     	;# 
  1135  0009                     	;# 
  1136  000A                     	;# 
  1137  000B                     	;# 
  1138  000C                     	;# 
  1139  000D                     	;# 
  1140  000E                     	;# 
  1141  000E                     	;# 
  1142  000F                     	;# 
  1143  0010                     	;# 
  1144  0011                     	;# 
  1145  0012                     	;# 
  1146  0013                     	;# 
  1147  0014                     	;# 
  1148  0015                     	;# 
  1149  0015                     	;# 
  1150  0016                     	;# 
  1151  0017                     	;# 
  1152  0018                     	;# 
  1153  0019                     	;# 
  1154  001A                     	;# 
  1155  001B                     	;# 
  1156  001B                     	;# 
  1157  001C                     	;# 
  1158  001D                     	;# 
  1159  001E                     	;# 
  1160  001F                     	;# 
  1161  0081                     	;# 
  1162  0085                     	;# 
  1163  0086                     	;# 
  1164  0087                     	;# 
  1165  0089                     	;# 
  1166  008C                     	;# 
  1167  008D                     	;# 
  1168  008E                     	;# 
  1169  008F                     	;# 
  1170  0090                     	;# 
  1171  0091                     	;# 
  1172  0092                     	;# 
  1173  0093                     	;# 
  1174  0093                     	;# 
  1175  0094                     	;# 
  1176  0095                     	;# 
  1177  0095                     	;# 
  1178  0096                     	;# 
  1179  0096                     	;# 
  1180  0098                     	;# 
  1181  0099                     	;# 
  1182  009C                     	;# 
  1183  009D                     	;# 
  1184  009F                     	;# 
  1185  0108                     	;# 
  1186  0109                     	;# 
  1187  010C                     	;# 
  1188  010C                     	;# 
  1189  010D                     	;# 
  1190  010D                     	;# 
  1191  010E                     	;# 
  1192  010F                     	;# 
  1193  0185                     	;# 
  1194  0186                     	;# 
  1195  018C                     	;# 
  1196  0000                     	;# 
  1197  0001                     	;# 
  1198  0002                     	;# 
  1199  0003                     	;# 
  1200  0004                     	;# 
  1201  0005                     	;# 
  1202  0006                     	;# 
  1203  0007                     	;# 
  1204  0009                     	;# 
  1205  000A                     	;# 
  1206  000B                     	;# 
  1207  000C                     	;# 
  1208  000D                     	;# 
  1209  000E                     	;# 
  1210  000E                     	;# 
  1211  000F                     	;# 
  1212  0010                     	;# 
  1213  0011                     	;# 
  1214  0012                     	;# 
  1215  0013                     	;# 
  1216  0014                     	;# 
  1217  0015                     	;# 
  1218  0015                     	;# 
  1219  0016                     	;# 
  1220  0017                     	;# 
  1221  0018                     	;# 
  1222  0019                     	;# 
  1223  001A                     	;# 
  1224  001B                     	;# 
  1225  001B                     	;# 
  1226  001C                     	;# 
  1227  001D                     	;# 
  1228  001E                     	;# 
  1229  001F                     	;# 
  1230  0081                     	;# 
  1231  0085                     	;# 
  1232  0086                     	;# 
  1233  0087                     	;# 
  1234  0089                     	;# 
  1235  008C                     	;# 
  1236  008D                     	;# 
  1237  008E                     	;# 
  1238  008F                     	;# 
  1239  0090                     	;# 
  1240  0091                     	;# 
  1241  0092                     	;# 
  1242  0093                     	;# 
  1243  0093                     	;# 
  1244  0094                     	;# 
  1245  0095                     	;# 
  1246  0095                     	;# 
  1247  0096                     	;# 
  1248  0096                     	;# 
  1249  0098                     	;# 
  1250  0099                     	;# 
  1251  009C                     	;# 
  1252  009D                     	;# 
  1253  009F                     	;# 
  1254  0108                     	;# 
  1255  0109                     	;# 
  1256  010C                     	;# 
  1257  010C                     	;# 
  1258  010D                     	;# 
  1259  010D                     	;# 
  1260  010E                     	;# 
  1261  010F                     	;# 
  1262  0185                     	;# 
  1263  0186                     	;# 
  1264  018C                     	;# 
  1265  0000                     	;# 
  1266  0001                     	;# 
  1267  0002                     	;# 
  1268  0003                     	;# 
  1269  0004                     	;# 
  1270  0005                     	;# 
  1271  0006                     	;# 
  1272  0007                     	;# 
  1273  0009                     	;# 
  1274  000A                     	;# 
  1275  000B                     	;# 
  1276  000C                     	;# 
  1277  000D                     	;# 
  1278  000E                     	;# 
  1279  000E                     	;# 
  1280  000F                     	;# 
  1281  0010                     	;# 
  1282  0011                     	;# 
  1283  0012                     	;# 
  1284  0013                     	;# 
  1285  0014                     	;# 
  1286  0015                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0017                     	;# 
  1290  0018                     	;# 
  1291  0019                     	;# 
  1292  001A                     	;# 
  1293  001B                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  001D                     	;# 
  1297  001E                     	;# 
  1298  001F                     	;# 
  1299  0081                     	;# 
  1300  0085                     	;# 
  1301  0086                     	;# 
  1302  0087                     	;# 
  1303  0089                     	;# 
  1304  008C                     	;# 
  1305  008D                     	;# 
  1306  008E                     	;# 
  1307  008F                     	;# 
  1308  0090                     	;# 
  1309  0091                     	;# 
  1310  0092                     	;# 
  1311  0093                     	;# 
  1312  0093                     	;# 
  1313  0094                     	;# 
  1314  0095                     	;# 
  1315  0095                     	;# 
  1316  0096                     	;# 
  1317  0096                     	;# 
  1318  0098                     	;# 
  1319  0099                     	;# 
  1320  009C                     	;# 
  1321  009D                     	;# 
  1322  009F                     	;# 
  1323  0108                     	;# 
  1324  0109                     	;# 
  1325  010C                     	;# 
  1326  010C                     	;# 
  1327  010D                     	;# 
  1328  010D                     	;# 
  1329  010E                     	;# 
  1330  010F                     	;# 
  1331  0185                     	;# 
  1332  0186                     	;# 
  1333  018C                     	;# 
  1334  001F                     _ADCON0	set	31
  1335  001E                     _ADRES	set	30
  1336  0005                     _PORTA	set	5
  1337  0006                     _PORTB	set	6
  1338  0007                     _PORTC	set	7
  1339  0010                     _T1CON	set	16
  1340  000F                     _TMR1H	set	15
  1341  000E                     _TMR1L	set	14
  1342  005F                     _GIE	set	95
  1343  00F9                     _GO_nDONE	set	249
  1344  005E                     _PEIE	set	94
  1345  002E                     _RA6	set	46
  1346  002F                     _RA7	set	47
  1347  0032                     _RB2	set	50
  1348  0033                     _RB3	set	51
  1349  0034                     _RB4	set	52
  1350  0035                     _RB5	set	53
  1351  0038                     _RC0	set	56
  1352  0039                     _RC1	set	57
  1353  003C                     _RC4	set	60
  1354  003D                     _RC5	set	61
  1355  003E                     _RC6	set	62
  1356  003F                     _RC7	set	63
  1357  0060                     _TMR1IF	set	96
  1358  009F                     _ADCON1	set	159
  1359  009D                     _FVRCON	set	157
  1360  0090                     _OSCCON	set	144
  1361  0085                     _TRISA	set	133
  1362  0086                     _TRISB	set	134
  1363  0087                     _TRISC	set	135
  1364  0095                     _WPUB	set	149
  1365  0408                     _PS0	set	1032
  1366  0409                     _PS1	set	1033
  1367  040A                     _PS2	set	1034
  1368  040B                     _PSA	set	1035
  1369  0460                     _TMR1IE	set	1120
  1370  0185                     _ANSELA	set	389
  1371  0186                     _ANSELB	set	390
  1372                           
  1373                           	psect	text0
  1374  0000                     __ptext0:	
  1375                           ; #config settings
  1376                           
  1377                           
  1378                           ;psect for function _TMR1_ISR
  1379  0000                     
  1380                           	psect	cinit
  1381  0013                     start_initialization:	
  1382  0013                     __initialization:	
  1383                           
  1384                           ; Clear objects allocated to COMMON
  1385  0013  01F0               	clrf	__pbssCOMMON& (0+127)
  1386  0014  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1387  0015  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1388  0016  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1389  0017  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1390                           
  1391                           ; Clear objects allocated to BANK0
  1392  0018  1383               	bcf	3,7	;select IRP bank0
  1393  0019  3020               	movlw	low __pbssBANK0
  1394  001A  0084               	movwf	4
  1395  001B  305A               	movlw	low (__pbssBANK0+58)
  1396  001C  158A  20E3  118A   	fcall	clear_ram0
  1397                           
  1398                           ; Clear objects allocated to BANK1
  1399  001F  30A0               	movlw	low __pbssBANK1
  1400  0020  0084               	movwf	4
  1401  0021  30ED               	movlw	low (__pbssBANK1+77)
  1402  0022  158A  20E3         	fcall	clear_ram0
  1403                           
  1404                           ; Clear objects allocated to BANK2
  1405  0024  1283               	bcf	3,5	;RP0=0, select bank2
  1406  0025  1703               	bsf	3,6	;RP1=1, select bank2
  1407  0026  01A0               	clrf	__pbssBANK2& (0+127)
  1408  0027  01A1               	clrf	(__pbssBANK2+1)& (0+127)
  1409  0028  01A2               	clrf	(__pbssBANK2+2)& (0+127)
  1410  0029  01A3               	clrf	(__pbssBANK2+3)& (0+127)
  1411  002A  01A4               	clrf	(__pbssBANK2+4)& (0+127)
  1412  002B                     end_of_initialization:	
  1413                           ;End of C runtime variable initialization code
  1414                           
  1415  002B                     __end_of__initialization:	
  1416  002B  0183               	clrf	3
  1417  002C  118A  2F8D         	ljmp	_main	;jump to C main() function
  1418                           
  1419                           	psect	bssCOMMON
  1420  0070                     __pbssCOMMON:	
  1421  0070                     _Sw:	
  1422  0070                     	ds	2
  1423  0072                     _LED:	
  1424  0072                     	ds	1
  1425  0073                     _Light:	
  1426  0073                     	ds	1
  1427  0074                     _Lights:	
  1428  0074                     	ds	1
  1429                           
  1430                           	psect	bssBANK0
  1431  0020                     __pbssBANK0:	
  1432  0020                     _Buz1:	
  1433  0020                     	ds	12
  1434  002C                     _SYSC:	
  1435  002C                     	ds	5
  1436  0031                     _myMain:	
  1437  0031                     	ds	5
  1438  0036                     __CDS:	
  1439  0036                     	ds	4
  1440  003A                     _Timer1:	
  1441  003A                     	ds	3
  1442  003D                     _WDT:	
  1443  003D                     	ds	2
  1444  003F                     _Cmd:	
  1445  003F                     	ds	1
  1446  0040                     _LightsControl:	
  1447  0040                     	ds	1
  1448  0041                     _SwDetect:	
  1449  0041                     	ds	1
  1450  0042                     _Temp:	
  1451  0042                     	ds	6
  1452  0048                     _Lights1:	
  1453  0048                     	ds	5
  1454  004D                     _Lights2:	
  1455  004D                     	ds	5
  1456  0052                     _VarErrLED:	
  1457  0052                     	ds	4
  1458  0056                     _VarLED1:	
  1459  0056                     	ds	4
  1460                           
  1461                           	psect	bssBANK1
  1462  00A0                     __pbssBANK1:	
  1463  00A0                     __PIR:	
  1464  00A0                     	ds	42
  1465  00CA                     _Load:	
  1466  00CA                     	ds	26
  1467  00E4                     _Sw1:	
  1468  00E4                     	ds	5
  1469  00E9                     _VarLED2:	
  1470  00E9                     	ds	4
  1471                           
  1472                           	psect	bssBANK2
  1473  0120                     __pbssBANK2:	
  1474  0120                     _Sw2:	
  1475  0120                     	ds	5
  1476                           
  1477                           	psect	clrtext
  1478  08E3                     clear_ram0:	
  1479                           ;	Called with FSR containing the base address, and
  1480                           ;	W with the last address+1
  1481                           
  1482  08E3  0064               	clrwdt	;clear the watchdog before getting into this loop
  1483  08E4                     clrloop0:	
  1484  08E4  0180               	clrf	0	;clear RAM location pointed to by FSR
  1485  08E5  0A84               	incf	4,f	;increment pointer
  1486  08E6  0604               	xorwf	4,w	;XOR with final address
  1487  08E7  1903               	btfsc	3,2	;have we reached the end yet?
  1488  08E8  3400               	retlw	0	;all done for this memory range, return
  1489  08E9  0604               	xorwf	4,w	;XOR again to restore value
  1490  08EA  28E4               	goto	clrloop0	;do the next byte
  1491                           
  1492                           	psect	cstackBANK2
  1493  0125                     __pcstackBANK2:	
  1494  0125                     ?_main:	
  1495  0125                     main@argc:	
  1496                           ; 2 bytes @ 0x0
  1497                           
  1498                           
  1499                           ; 2 bytes @ 0x0
  1500  0125                     	ds	2
  1501  0127                     main@argv:	
  1502                           
  1503                           ; 2 bytes @ 0x2
  1504  0127                     	ds	2
  1505                           
  1506                           	psect	cstackCOMMON
  1507  0075                     __pcstackCOMMON:	
  1508  0075                     ?_setLED_Initialization:	
  1509  0075                     ?_setLED_Main:	
  1510                           ; 0 bytes @ 0x0
  1511                           
  1512  0075                     ?_Fosc_Set:	
  1513                           ; 0 bytes @ 0x0
  1514                           
  1515  0075                     ?_IO_Set:	
  1516                           ; 0 bytes @ 0x0
  1517                           
  1518  0075                     ?_TMR1_Set:	
  1519                           ; 0 bytes @ 0x0
  1520                           
  1521  0075                     ?_ADC_Set:	
  1522                           ; 0 bytes @ 0x0
  1523                           
  1524  0075                     ?_WDT_Set:	
  1525                           ; 0 bytes @ 0x0
  1526                           
  1527  0075                     ?_TMR1_ISR:	
  1528                           ; 0 bytes @ 0x0
  1529                           
  1530  0075                     ??_TMR1_ISR:	
  1531                           ; 0 bytes @ 0x0
  1532                           
  1533  0075                     ?_Timeout_Counter:	
  1534                           ; 0 bytes @ 0x0
  1535                           
  1536  0075                     ?_set_TimeoutCleared:	
  1537                           ; 0 bytes @ 0x0
  1538                           
  1539  0075                     ?_WDT_Clearing:	
  1540                           ; 0 bytes @ 0x0
  1541                           
  1542  0075                     ?_myMain_Initialization:	
  1543                           ; 0 bytes @ 0x0
  1544                           
  1545  0075                     ?_SYSC_Initialization:	
  1546                           ; 0 bytes @ 0x0
  1547                           
  1548  0075                     ?_Temp_Initialization:	
  1549                           ; 0 bytes @ 0x0
  1550                           
  1551  0075                     ?_Load_Initialization:	
  1552                           ; 0 bytes @ 0x0
  1553                           
  1554  0075                     ?_Lights_Initialization:	
  1555                           ; 0 bytes @ 0x0
  1556                           
  1557  0075                     ?_PIR_Initialization:	
  1558                           ; 0 bytes @ 0x0
  1559                           
  1560  0075                     ?_Switch_Initialization:	
  1561                           ; 0 bytes @ 0x0
  1562                           
  1563  0075                     ?_DetectSYSC_Signal:	
  1564                           ; 0 bytes @ 0x0
  1565                           
  1566  0075                     ?_getLoad_AD:	
  1567                           ; 0 bytes @ 0x0
  1568                           
  1569  0075                     ?_getTemp_AD:	
  1570                           ; 0 bytes @ 0x0
  1571                           
  1572  0075                     ?_my_MainTimer:	
  1573                           ; 0 bytes @ 0x0
  1574                           
  1575  0075                     ?_SYSC_Main:	
  1576                           ; 0 bytes @ 0x0
  1577                           
  1578  0075                     ?_Temp_Main:	
  1579                           ; 0 bytes @ 0x0
  1580                           
  1581  0075                     ?_Load_Main:	
  1582                           ; 0 bytes @ 0x0
  1583                           
  1584  0075                     ?_Lights_Main:	
  1585                           ; 0 bytes @ 0x0
  1586                           
  1587  0075                     ?_Switch_Main:	
  1588                           ; 0 bytes @ 0x0
  1589                           
  1590  0075                     ?_PIR_Main:	
  1591                           ; 0 bytes @ 0x0
  1592                           
  1593  0075                     ?_Exception_Main:	
  1594                           ; 0 bytes @ 0x0
  1595                           
  1596  0075                     ?_setLights_SwOn:	
  1597                           ; 0 bytes @ 0x0
  1598                           
  1599  0075                     ?_setLights_SwOff:	
  1600                           ; 0 bytes @ 0x0
  1601                           
  1602  0075                     ?_setLoad_AH_AL_Restore:	
  1603                           ; 0 bytes @ 0x0
  1604                           
  1605  0075                     ?_setTemp_Initialization:	
  1606                           ; 0 bytes @ 0x0
  1607                           
  1608  0075                     ?_setTemp_Main:	
  1609                           ; 0 bytes @ 0x0
  1610                           
  1611  0075                     ?_setSYSC_Initialization:	
  1612                           ; 0 bytes @ 0x0
  1613                           
  1614  0075                     ?_setSYSC_Main:	
  1615                           ; 0 bytes @ 0x0
  1616                           
  1617  0075                     ?_setSw_Main:	
  1618                           ; 0 bytes @ 0x0
  1619                           
  1620  0075                     ?_setLights_Initialization:	
  1621                           ; 0 bytes @ 0x0
  1622                           
  1623  0075                     ?_setLights_Main:	
  1624                           ; 0 bytes @ 0x0
  1625                           
  1626  0075                     ?_Lights_Control:	
  1627                           ; 0 bytes @ 0x0
  1628                           
  1629  0075                     ?_setLights_Line:	
  1630                           ; 0 bytes @ 0x0
  1631                           
  1632  0075                     ?_Buzzer_Initialization:	
  1633                           ; 0 bytes @ 0x0
  1634                           
  1635  0075                     ?_Buzzer_Main:	
  1636                           ; 0 bytes @ 0x0
  1637                           
  1638  0075                     ?_CDS_Initialization:	
  1639                           ; 0 bytes @ 0x0
  1640                           
  1641  0075                     ?_CDS_Main:	
  1642                           ; 0 bytes @ 0x0
  1643                           
  1644  0075                     ?_LedPointSelect:	
  1645                           ; 0 bytes @ 0x0
  1646                           
  1647  0075                     ?_LED_Initialization:	
  1648                           ; 0 bytes @ 0x0
  1649                           
  1650  0075                     ?_LED_Main:	
  1651                           ; 0 bytes @ 0x0
  1652                           
  1653  0075                     ?_Mcu_Initialization:	
  1654                           ; 0 bytes @ 0x0
  1655                           
  1656  0075                     ?_ISR:	
  1657                           ; 0 bytes @ 0x0
  1658                           
  1659  0075                     ??_ISR:	
  1660                           ; 0 bytes @ 0x0
  1661                           
  1662  0075                     ?_WDT_Main:	
  1663                           ; 0 bytes @ 0x0
  1664                           
  1665  0075                     ?_TouchPower:	
  1666                           ; 0 bytes @ 0x0
  1667                           
  1668  0075                     ?_SwPointSelect:	
  1669                           ; 0 bytes @ 0x0
  1670                           
  1671  0075                     ?_LightsPointSelect:	
  1672                           ; 0 bytes @ 0x0
  1673                           
  1674  0075                     ?_getAll_Lights_Line:	
  1675                           ; 0 bytes @ 0x0
  1676                           
  1677  0075                     ?_getLights_Status:	
  1678                           ; 1 bytes @ 0x0
  1679                           
  1680  0075                     ?_getLight_LoadGO:	
  1681                           ; 1 bytes @ 0x0
  1682                           
  1683  0075                     ?_getLight_Load_Status:	
  1684                           ; 1 bytes @ 0x0
  1685                           
  1686  0075                     ?_getSw_KeyStatus:	
  1687                           ; 1 bytes @ 0x0
  1688                           
  1689  0075                     ?_getLights_Allow_Condition:	
  1690                           ; 1 bytes @ 0x0
  1691                           
  1692  0075                     ?_getCDS_Status:	
  1693                           ; 1 bytes @ 0x0
  1694                           
  1695  0075                     ?_getMain_All_LightsStatus:	
  1696                           ; 1 bytes @ 0x0
  1697                           
  1698  0075                     ?_getMain_All_Error_Status:	
  1699                           ; 1 bytes @ 0x0
  1700                           
  1701  0075                     ?_getMain_Lights_Count:	
  1702                           ; 1 bytes @ 0x0
  1703                           
  1704  0075                     ?_getLoad_OK:	
  1705                           ; 1 bytes @ 0x0
  1706                           
  1707  0075                     getLights_Allow_Condition@lights:	
  1708                           ; 1 bytes @ 0x0
  1709                           
  1710                           
  1711                           ; 1 bytes @ 0x0
  1712  0075                     	ds	4
  1713  0079                     ??_Fosc_Set:	
  1714  0079                     ??_IO_Set:	
  1715                           ; 0 bytes @ 0x4
  1716                           
  1717  0079                     ??_TMR1_Set:	
  1718                           ; 0 bytes @ 0x4
  1719                           
  1720  0079                     ??_ADC_Set:	
  1721                           ; 0 bytes @ 0x4
  1722                           
  1723  0079                     ??_WDT_Set:	
  1724                           ; 0 bytes @ 0x4
  1725                           
  1726  0079                     ??_Timeout_Counter:	
  1727                           ; 0 bytes @ 0x4
  1728                           
  1729  0079                     ??_set_TimeoutCleared:	
  1730                           ; 0 bytes @ 0x4
  1731                           
  1732  0079                     ??_WDT_Clearing:	
  1733                           ; 0 bytes @ 0x4
  1734                           
  1735  0079                     ??_myMain_Initialization:	
  1736                           ; 0 bytes @ 0x4
  1737                           
  1738  0079                     ??_SYSC_Initialization:	
  1739                           ; 0 bytes @ 0x4
  1740                           
  1741  0079                     ??_Temp_Initialization:	
  1742                           ; 0 bytes @ 0x4
  1743                           
  1744  0079                     ??_PIR_Initialization:	
  1745                           ; 0 bytes @ 0x4
  1746                           
  1747  0079                     ??_Switch_Initialization:	
  1748                           ; 0 bytes @ 0x4
  1749                           
  1750  0079                     ??_DetectSYSC_Signal:	
  1751                           ; 0 bytes @ 0x4
  1752                           
  1753  0079                     ??_setLoad_AH_AL_Restore:	
  1754                           ; 0 bytes @ 0x4
  1755                           
  1756  0079                     ??_getLight_LoadGO:	
  1757                           ; 0 bytes @ 0x4
  1758                           
  1759  0079                     ??_getLight_Load_Status:	
  1760                           ; 0 bytes @ 0x4
  1761                           
  1762  0079                     ??_setTemp_Initialization:	
  1763                           ; 0 bytes @ 0x4
  1764                           
  1765  0079                     ??_setSYSC_Initialization:	
  1766                           ; 0 bytes @ 0x4
  1767                           
  1768  0079                     ??_getSw_KeyStatus:	
  1769                           ; 0 bytes @ 0x4
  1770                           
  1771  0079                     ??_setLights_Line:	
  1772                           ; 0 bytes @ 0x4
  1773                           
  1774  0079                     ??_Buzzer_Initialization:	
  1775                           ; 0 bytes @ 0x4
  1776                           
  1777  0079                     ??_Buzzer_Main:	
  1778                           ; 0 bytes @ 0x4
  1779                           
  1780  0079                     ??_CDS_Initialization:	
  1781                           ; 0 bytes @ 0x4
  1782                           
  1783  0079                     ??_getCDS_Status:	
  1784                           ; 0 bytes @ 0x4
  1785                           
  1786  0079                     ??_LedPointSelect:	
  1787                           ; 0 bytes @ 0x4
  1788                           
  1789  0079                     ??_WDT_Main:	
  1790                           ; 0 bytes @ 0x4
  1791                           
  1792  0079                     ??_getMain_All_LightsStatus:	
  1793                           ; 0 bytes @ 0x4
  1794                           
  1795  0079                     ??_getMain_All_Error_Status:	
  1796                           ; 0 bytes @ 0x4
  1797                           
  1798  0079                     ??_getMain_Lights_Count:	
  1799                           ; 0 bytes @ 0x4
  1800                           
  1801  0079                     ??_getLoad_OK:	
  1802                           ; 0 bytes @ 0x4
  1803                           
  1804  0079                     ??_TouchPower:	
  1805                           ; 0 bytes @ 0x4
  1806                           
  1807  0079                     ??_SwPointSelect:	
  1808                           ; 0 bytes @ 0x4
  1809                           
  1810  0079                     ??_LightsPointSelect:	
  1811                           ; 0 bytes @ 0x4
  1812                           
  1813  0079                     ??___awdiv:	
  1814                           ; 0 bytes @ 0x4
  1815                           
  1816  0079                     ??___lwdiv:	
  1817                           ; 0 bytes @ 0x4
  1818                           
  1819  0079                     ?_getAD:	
  1820                           ; 0 bytes @ 0x4
  1821                           
  1822  0079                     ?___bmul:	
  1823                           ; 1 bytes @ 0x4
  1824                           
  1825  0079                     getCDS_Status@status:	
  1826                           ; 1 bytes @ 0x4
  1827                           
  1828  0079                     getAD@adcon1:	
  1829                           ; 1 bytes @ 0x4
  1830                           
  1831  0079                     getMain_All_LightsStatus@status:	
  1832                           ; 1 bytes @ 0x4
  1833                           
  1834  0079                     getLoad_OK@ok:	
  1835                           ; 1 bytes @ 0x4
  1836                           
  1837  0079                     SwPointSelect@sw:	
  1838                           ; 1 bytes @ 0x4
  1839                           
  1840  0079                     setLights_Line@lights:	
  1841                           ; 1 bytes @ 0x4
  1842                           
  1843  0079                     getLight_LoadGO@loadgo:	
  1844                           ; 1 bytes @ 0x4
  1845                           
  1846  0079                     getLight_Load_Status@loadstatus:	
  1847                           ; 1 bytes @ 0x4
  1848                           
  1849  0079                     ___bmul@multiplicand:	
  1850                           ; 1 bytes @ 0x4
  1851                           
  1852                           
  1853                           ; 1 bytes @ 0x4
  1854  0079                     	ds	1
  1855  007A                     ??_getAD:	
  1856  007A                     ??_setLED_Initialization:	
  1857                           ; 0 bytes @ 0x5
  1858                           
  1859  007A                     ??_setLED:	
  1860                           ; 0 bytes @ 0x5
  1861                           
  1862  007A                     ??_Load_Initialization:	
  1863                           ; 0 bytes @ 0x5
  1864                           
  1865  007A                     ??_Lights_Initialization:	
  1866                           ; 0 bytes @ 0x5
  1867                           
  1868  007A                     ??_SYSC_Main:	
  1869                           ; 0 bytes @ 0x5
  1870                           
  1871  007A                     ??_Temp_Main:	
  1872                           ; 0 bytes @ 0x5
  1873                           
  1874  007A                     ??_Lights_Main:	
  1875                           ; 0 bytes @ 0x5
  1876                           
  1877  007A                     ??_Switch_Main:	
  1878                           ; 0 bytes @ 0x5
  1879                           
  1880  007A                     ??_getLights_Status:	
  1881                           ; 0 bytes @ 0x5
  1882                           
  1883  007A                     ??_setLights_SwOn:	
  1884                           ; 0 bytes @ 0x5
  1885                           
  1886  007A                     ??_setLights_SwOff:	
  1887                           ; 0 bytes @ 0x5
  1888                           
  1889  007A                     ??_setSYSC_Main:	
  1890                           ; 0 bytes @ 0x5
  1891                           
  1892  007A                     ??_setLights_Initialization:	
  1893                           ; 0 bytes @ 0x5
  1894                           
  1895  007A                     ??_setLights_Main:	
  1896                           ; 0 bytes @ 0x5
  1897                           
  1898  007A                     ??_LED_Initialization:	
  1899                           ; 0 bytes @ 0x5
  1900                           
  1901  007A                     ??_LED_Main:	
  1902                           ; 0 bytes @ 0x5
  1903                           
  1904  007A                     ??_Mcu_Initialization:	
  1905                           ; 0 bytes @ 0x5
  1906                           
  1907                           
  1908                           	psect	cstackBANK0
  1909  005A                     __pcstackBANK0:	
  1910                           ; 0 bytes @ 0x5
  1911                           
  1912  005A                     ??_getLights_Allow_Condition:	
  1913  005A                     ??_CDS_Main:	
  1914                           ; 0 bytes @ 0x0
  1915                           
  1916  005A                     ??___bmul:	
  1917                           ; 0 bytes @ 0x0
  1918                           
  1919  005A                     ?___awdiv:	
  1920                           ; 0 bytes @ 0x0
  1921                           
  1922  005A                     ?___lwdiv:	
  1923                           ; 2 bytes @ 0x0
  1924                           
  1925  005A                     LedPointSelect@led:	
  1926                           ; 2 bytes @ 0x0
  1927                           
  1928  005A                     getAD@adcon0:	
  1929                           ; 1 bytes @ 0x0
  1930                           
  1931  005A                     getMain_Lights_Count@count:	
  1932                           ; 1 bytes @ 0x0
  1933                           
  1934  005A                     setLoad_AH_AL_Restore@i:	
  1935                           ; 1 bytes @ 0x0
  1936                           
  1937  005A                     getSw_KeyStatus@status:	
  1938                           ; 1 bytes @ 0x0
  1939                           
  1940  005A                     LightsPointSelect@lights:	
  1941                           ; 1 bytes @ 0x0
  1942                           
  1943  005A                     _getMain_All_Error_Status$2404:	
  1944                           ; 1 bytes @ 0x0
  1945                           
  1946  005A                     ___awdiv@divisor:	
  1947                           ; 2 bytes @ 0x0
  1948                           
  1949  005A                     ___lwdiv@divisor:	
  1950                           ; 2 bytes @ 0x0
  1951                           
  1952                           
  1953                           ; 2 bytes @ 0x0
  1954  005A                     	ds	1
  1955  005B                     ??_setLED_Main:	
  1956  005B                     ?_setLED:	
  1957                           ; 0 bytes @ 0x1
  1958                           
  1959  005B                     ??_getLoad_AD:	
  1960                           ; 0 bytes @ 0x1
  1961                           
  1962  005B                     ??_getTemp_AD:	
  1963                           ; 0 bytes @ 0x1
  1964                           
  1965  005B                     ??_getAll_Lights_Line:	
  1966                           ; 0 bytes @ 0x1
  1967                           
  1968  005B                     ?_setLights_Trigger:	
  1969                           ; 0 bytes @ 0x1
  1970                           
  1971  005B                     ?_getCDS_AD:	
  1972                           ; 0 bytes @ 0x1
  1973                           
  1974  005B                     getCDS_AD@channel2:	
  1975                           ; 0 bytes @ 0x1
  1976                           
  1977  005B                     setLED@command:	
  1978                           ; 1 bytes @ 0x1
  1979                           
  1980  005B                     getMain_Lights_Count@status1:	
  1981                           ; 1 bytes @ 0x1
  1982                           
  1983  005B                     getSw_KeyStatus@sw:	
  1984                           ; 1 bytes @ 0x1
  1985                           
  1986  005B                     setLights_Initialization@lights:	
  1987                           ; 1 bytes @ 0x1
  1988                           
  1989  005B                     getLights_Status@lights:	
  1990                           ; 1 bytes @ 0x1
  1991                           
  1992  005B                     setLights_Trigger@command:	
  1993                           ; 1 bytes @ 0x1
  1994                           
  1995  005B                     getLights_Allow_Condition@allow:	
  1996                           ; 1 bytes @ 0x1
  1997                           
  1998  005B                     ___bmul@product:	
  1999                           ; 1 bytes @ 0x1
  2000                           
  2001                           
  2002                           ; 1 bytes @ 0x1
  2003  005B                     	ds	1
  2004  005C                     ??_setLights_Trigger:	
  2005  005C                     ??_getCDS_AD:	
  2006                           ; 0 bytes @ 0x2
  2007                           
  2008  005C                     setLED@led:	
  2009                           ; 0 bytes @ 0x2
  2010                           
  2011  005C                     getMain_Lights_Count@status2:	
  2012                           ; 1 bytes @ 0x2
  2013                           
  2014  005C                     getLights_Status@status:	
  2015                           ; 1 bytes @ 0x2
  2016                           
  2017  005C                     _getLights_Allow_Condition$4767:	
  2018                           ; 1 bytes @ 0x2
  2019                           
  2020  005C                     ___bmul@multiplier:	
  2021                           ; 1 bytes @ 0x2
  2022                           
  2023  005C                     _getMain_All_Error_Status$2405:	
  2024                           ; 1 bytes @ 0x2
  2025                           
  2026  005C                     _getAll_Lights_Line$4755:	
  2027                           ; 2 bytes @ 0x2
  2028                           
  2029  005C                     ___awdiv@dividend:	
  2030                           ; 2 bytes @ 0x2
  2031                           
  2032  005C                     ___lwdiv@dividend:	
  2033                           ; 2 bytes @ 0x2
  2034                           
  2035                           
  2036                           ; 2 bytes @ 0x2
  2037  005C                     	ds	1
  2038  005D                     ?_setLights:	
  2039  005D                     setLED_Initialization@led:	
  2040                           ; 0 bytes @ 0x3
  2041                           
  2042  005D                     setLED_Main@led:	
  2043                           ; 1 bytes @ 0x3
  2044                           
  2045  005D                     getLoad_AD@channel:	
  2046                           ; 1 bytes @ 0x3
  2047                           
  2048  005D                     getTemp_AD@channel:	
  2049                           ; 1 bytes @ 0x3
  2050                           
  2051  005D                     setLights@status:	
  2052                           ; 1 bytes @ 0x3
  2053                           
  2054  005D                     setLights_Trigger@lights:	
  2055                           ; 1 bytes @ 0x3
  2056                           
  2057                           
  2058                           ; 1 bytes @ 0x3
  2059  005D                     	ds	1
  2060  005E                     ??_setLights:	
  2061  005E                     getCDS_AD@i:	
  2062                           ; 0 bytes @ 0x4
  2063                           
  2064  005E                     getMain_All_Error_Status@command:	
  2065                           ; 1 bytes @ 0x4
  2066                           
  2067  005E                     getLoad_AD@k:	
  2068                           ; 1 bytes @ 0x4
  2069                           
  2070  005E                     getTemp_AD@ADRES:	
  2071                           ; 1 bytes @ 0x4
  2072                           
  2073  005E                     getAll_Lights_Line@line:	
  2074                           ; 1 bytes @ 0x4
  2075                           
  2076  005E                     setLights_SwOn@sw:	
  2077                           ; 1 bytes @ 0x4
  2078                           
  2079  005E                     setLights_SwOff@sw:	
  2080                           ; 1 bytes @ 0x4
  2081                           
  2082  005E                     ___awdiv@counter:	
  2083                           ; 1 bytes @ 0x4
  2084                           
  2085  005E                     ___lwdiv@counter:	
  2086                           ; 1 bytes @ 0x4
  2087                           
  2088                           
  2089                           ; 1 bytes @ 0x4
  2090  005E                     	ds	1
  2091  005F                     getCDS_AD@j:	
  2092  005F                     getMain_All_Error_Status@status:	
  2093                           ; 1 bytes @ 0x5
  2094                           
  2095  005F                     getLoad_AD@j:	
  2096                           ; 1 bytes @ 0x5
  2097                           
  2098  005F                     setLights@lights:	
  2099                           ; 1 bytes @ 0x5
  2100                           
  2101  005F                     ___awdiv@sign:	
  2102                           ; 1 bytes @ 0x5
  2103                           
  2104  005F                     ___lwdiv@quotient:	
  2105                           ; 1 bytes @ 0x5
  2106                           
  2107                           
  2108                           ; 2 bytes @ 0x5
  2109  005F                     	ds	1
  2110  0060                     ??_PIR_Main:	
  2111  0060                     ??_setSw_Main:	
  2112                           ; 0 bytes @ 0x6
  2113                           
  2114  0060                     getCDS_AD@channel1:	
  2115                           ; 0 bytes @ 0x6
  2116                           
  2117  0060                     getLoad_AD@ADRES:	
  2118                           ; 1 bytes @ 0x6
  2119                           
  2120  0060                     setLights_Main@lights:	
  2121                           ; 1 bytes @ 0x6
  2122                           
  2123  0060                     ___awdiv@quotient:	
  2124                           ; 1 bytes @ 0x6
  2125                           
  2126                           
  2127                           ; 2 bytes @ 0x6
  2128  0060                     	ds	1
  2129  0061                     ??_Load_Main:	
  2130  0061                     getLoad_AD@i:	
  2131                           ; 0 bytes @ 0x7
  2132                           
  2133                           
  2134                           ; 1 bytes @ 0x7
  2135  0061                     	ds	1
  2136  0062                     ?_getPIR_AD:	
  2137  0062                     ??_Lights_Control:	
  2138                           ; 0 bytes @ 0x8
  2139                           
  2140  0062                     ?_setBuz:	
  2141                           ; 0 bytes @ 0x8
  2142                           
  2143  0062                     getPIR_AD@channel2:	
  2144                           ; 0 bytes @ 0x8
  2145                           
  2146  0062                     setBuz@time:	
  2147                           ; 1 bytes @ 0x8
  2148                           
  2149                           
  2150                           ; 2 bytes @ 0x8
  2151  0062                     	ds	1
  2152  0063                     ??_getPIR_AD:	
  2153  0063                     Load_Main@error:	
  2154                           ; 0 bytes @ 0x9
  2155                           
  2156                           
  2157                           ; 1 bytes @ 0x9
  2158  0063                     	ds	1
  2159  0064                     ??_setBuz:	
  2160  0064                     PIR_Main@error:	
  2161                           ; 0 bytes @ 0xA
  2162                           
  2163  0064                     setSw_Main@sw:	
  2164                           ; 1 bytes @ 0xA
  2165                           
  2166  0064                     Lights_Control@lights:	
  2167                           ; 1 bytes @ 0xA
  2168                           
  2169  0064                     _Load_Main$2691:	
  2170                           ; 1 bytes @ 0xA
  2171                           
  2172                           
  2173                           ; 2 bytes @ 0xA
  2174  0064                     	ds	1
  2175  0065                     setBuz@count:	
  2176  0065                     _PIR_Main$3204:	
  2177                           ; 1 bytes @ 0xB
  2178                           
  2179                           
  2180                           ; 2 bytes @ 0xB
  2181  0065                     	ds	1
  2182  0066                     ??_my_MainTimer:	
  2183  0066                     ??_Exception_Main:	
  2184                           ; 0 bytes @ 0xC
  2185                           
  2186  0066                     ??_setTemp_Main:	
  2187                           ; 0 bytes @ 0xC
  2188                           
  2189  0066                     Load_Main@ErrorCountValue:	
  2190                           ; 0 bytes @ 0xC
  2191                           
  2192  0066                     getPIR_AD@j:	
  2193                           ; 1 bytes @ 0xC
  2194                           
  2195                           
  2196                           ; 1 bytes @ 0xC
  2197  0066                     	ds	1
  2198  0067                     Exception_Main@lights:	
  2199  0067                     Load_Main@Load_Status:	
  2200                           ; 1 bytes @ 0xD
  2201                           
  2202  0067                     setTemp_Main@error:	
  2203                           ; 1 bytes @ 0xD
  2204                           
  2205  0067                     PIR_Main@Enable_Switch:	
  2206                           ; 1 bytes @ 0xD
  2207                           
  2208  0067                     getPIR_AD@channel1:	
  2209                           ; 1 bytes @ 0xD
  2210                           
  2211                           
  2212                           ; 1 bytes @ 0xD
  2213  0067                     	ds	1
  2214  0068                     Exception_Main@count:	
  2215  0068                     Load_Main@JudgeValue:	
  2216                           ; 1 bytes @ 0xE
  2217                           
  2218  0068                     setTemp_Main@SafeValue:	
  2219                           ; 1 bytes @ 0xE
  2220                           
  2221  0068                     PIR_Main@TriggerValue:	
  2222                           ; 1 bytes @ 0xE
  2223                           
  2224  0068                     getPIR_AD@VRAD1:	
  2225                           ; 1 bytes @ 0xE
  2226                           
  2227                           
  2228                           ; 1 bytes @ 0xE
  2229  0068                     	ds	1
  2230  0069                     Exception_Main@error:	
  2231  0069                     Load_Main@LightsCount:	
  2232                           ; 1 bytes @ 0xF
  2233                           
  2234  0069                     setTemp_Main@DangerValue:	
  2235                           ; 1 bytes @ 0xF
  2236                           
  2237  0069                     PIR_Main@cds:	
  2238                           ; 1 bytes @ 0xF
  2239                           
  2240  0069                     getPIR_AD@VRAD:	
  2241                           ; 1 bytes @ 0xF
  2242                           
  2243                           
  2244                           ; 1 bytes @ 0xF
  2245  0069                     	ds	1
  2246  006A                     setTemp_Main@AD:	
  2247  006A                     PIR_Main@LightsStatus:	
  2248                           ; 1 bytes @ 0x10
  2249                           
  2250  006A                     getPIR_AD@i:	
  2251                           ; 1 bytes @ 0x10
  2252                           
  2253  006A                     Exception_Main@i:	
  2254                           ; 1 bytes @ 0x10
  2255                           
  2256  006A                     Load_Main@i:	
  2257                           ; 2 bytes @ 0x10
  2258                           
  2259                           
  2260                           ; 2 bytes @ 0x10
  2261  006A                     	ds	2
  2262  006C                     Exception_Main@i_2418:	
  2263                           
  2264                           ; 2 bytes @ 0x12
  2265  006C                     	ds	2
  2266  006E                     Exception_Main@status:	
  2267                           
  2268                           ; 1 bytes @ 0x14
  2269  006E                     	ds	1
  2270  006F                     ??_main:	
  2271                           
  2272                           ; 0 bytes @ 0x15
  2273  006F                     	ds	1
  2274                           
  2275                           	psect	maintext
  2276  078D                     __pmaintext:	
  2277 ;;
  2278 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2279 ;;
  2280 ;; *************** function _main *****************
  2281 ;; Defined at:
  2282 ;;		line 7 in file "../src/Main_B1.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  argc            2    0[BANK2 ] int 
  2285 ;;  argv            2    2[BANK2 ] PTR PTR unsigned char 
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;		None
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  2    0[BANK2 ] int 
  2290 ;; Registers used:
  2291 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2292 ;; Tracked objects:
  2293 ;;		On entry : 17F/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2297 ;;      Params:         0       0       0       4
  2298 ;;      Locals:         0       0       0       0
  2299 ;;      Temps:          0       1       0       0
  2300 ;;      Totals:         0       1       0       4
  2301 ;;Total ram usage:        5 bytes
  2302 ;; Hardware stack levels required when called:    7
  2303 ;; This function calls:
  2304 ;;		_Buzzer_Initialization
  2305 ;;		_Buzzer_Main
  2306 ;;		_CDS_Initialization
  2307 ;;		_CDS_Main
  2308 ;;		_DetectSYSC_Signal
  2309 ;;		_Exception_Main
  2310 ;;		_LED_Initialization
  2311 ;;		_LED_Main
  2312 ;;		_Lights_Initialization
  2313 ;;		_Lights_Main
  2314 ;;		_Load_Initialization
  2315 ;;		_Load_Main
  2316 ;;		_Mcu_Initialization
  2317 ;;		_PIR_Initialization
  2318 ;;		_PIR_Main
  2319 ;;		_SYSC_Initialization
  2320 ;;		_SYSC_Main
  2321 ;;		_Switch_Initialization
  2322 ;;		_Switch_Main
  2323 ;;		_Temp_Initialization
  2324 ;;		_Temp_Main
  2325 ;;		_WDT_Main
  2326 ;;		_getCDS_AD
  2327 ;;		_getLoad_AD
  2328 ;;		_getPIR_AD
  2329 ;;		_getTemp_AD
  2330 ;;		_myMain_Initialization
  2331 ;;		_my_MainTimer
  2332 ;; This function is called by:
  2333 ;;		Startup code after reset
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           
  2338                           ;psect for function _main
  2339  078D                     _main:	
  2340                           
  2341                           ;Main_B1.c: 8: myMain_Initialization();
  2342                           
  2343                           ;incstack = 0
  2344                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2345  078D  118A  27FF  118A   	fcall	_myMain_Initialization
  2346                           
  2347                           ;Main_B1.c: 9: Mcu_Initialization();
  2348  0790  158A  2146  118A   	fcall	_Mcu_Initialization
  2349                           
  2350                           ;Main_B1.c: 10: ;;
  2351                           ;Main_B1.c: 11: LED_Initialization();
  2352  0793  158A  2101  118A   	fcall	_LED_Initialization
  2353                           
  2354                           ;Main_B1.c: 12: Buzzer_Initialization();
  2355  0796  158A  2096  118A   	fcall	_Buzzer_Initialization
  2356                           
  2357                           ;Main_B1.c: 14: SYSC_Initialization();
  2358  0799  158A  208A  118A   	fcall	_SYSC_Initialization
  2359                           
  2360                           ;Main_B1.c: 15: Temp_Initialization();
  2361  079C  158A  2090  118A   	fcall	_Temp_Initialization
  2362                           
  2363                           ;Main_B1.c: 16: Load_Initialization();
  2364  079F  158A  2087  118A   	fcall	_Load_Initialization
  2365                           
  2366                           ;Main_B1.c: 17: ;;
  2367                           ;Main_B1.c: 18: ;;
  2368                           ;Main_B1.c: 20: ;;
  2369                           ;Main_B1.c: 21: Lights_Initialization();
  2370  07A2  158A  20CB  118A   	fcall	_Lights_Initialization
  2371                           
  2372                           ;Main_B1.c: 22: CDS_Initialization();
  2373  07A5  158A  209A  118A   	fcall	_CDS_Initialization
  2374                           
  2375                           ;Main_B1.c: 23: PIR_Initialization();
  2376  07A8  158A  20EB  118A   	fcall	_PIR_Initialization
  2377                           
  2378                           ;Main_B1.c: 24: Switch_Initialization();
  2379  07AB  158A  2085  118A   	fcall	_Switch_Initialization
  2380  07AE                     l7337:	
  2381                           ;Main_B1.c: 25: ;;
  2382                           ;Main_B1.c: 26: ;;
  2383                           ;Main_B1.c: 27: ;;
  2384                           ;Main_B1.c: 28: ;;
  2385                           ;Main_B1.c: 30: while (1) {
  2386                           
  2387                           
  2388                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2389  07AE  1283               	bcf	3,5	;RP0=0, select bank0
  2390  07AF  1303               	bcf	3,6	;RP1=0, select bank0
  2391  07B0  1C31               	btfss	_myMain,0
  2392  07B1  2FD1               	goto	l7349
  2393                           
  2394                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2395  07B2  158A  210D  118A   	fcall	_DetectSYSC_Signal
  2396                           
  2397                           ;Main_B1.c: 38: getLoad_AD(0x31);
  2398  07B5  3031               	movlw	49
  2399  07B6  158A  2633  118A   	fcall	_getLoad_AD
  2400                           
  2401                           ;Main_B1.c: 42: getTemp_AD(0x21);
  2402  07B9  3021               	movlw	33
  2403  07BA  158A  242B  118A   	fcall	_getTemp_AD
  2404                           
  2405                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x11);
  2406  07BD  3011               	movlw	17
  2407  07BE  1283               	bcf	3,5	;RP0=0, select bank0
  2408  07BF  1303               	bcf	3,6	;RP1=0, select bank0
  2409  07C0  00EF               	movwf	??_main
  2410  07C1  086F               	movf	??_main,w
  2411  07C2  00DB               	movwf	getCDS_AD@channel2
  2412  07C3  3009               	movlw	9
  2413  07C4  158A  230D  118A   	fcall	_getCDS_AD
  2414                           
  2415                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2416  07C7  300D               	movlw	13
  2417  07C8  1283               	bcf	3,5	;RP0=0, select bank0
  2418  07C9  1303               	bcf	3,6	;RP1=0, select bank0
  2419  07CA  00EF               	movwf	??_main
  2420  07CB  086F               	movf	??_main,w
  2421  07CC  00E2               	movwf	getPIR_AD@channel2
  2422  07CD  3005               	movlw	5
  2423  07CE  118A  24ED  118A   	fcall	_getPIR_AD
  2424  07D1                     l7349:	
  2425                           
  2426                           ;Main_B1.c: 57: }
  2427                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2428  07D1  1283               	bcf	3,5	;RP0=0, select bank0
  2429  07D2  1303               	bcf	3,6	;RP1=0, select bank0
  2430  07D3  1C3A               	btfss	_Timer1,0
  2431  07D4  2FAE               	goto	l7337
  2432                           
  2433                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2434  07D5  103A               	bcf	_Timer1,0
  2435                           
  2436                           ;Main_B1.c: 96: my_MainTimer();
  2437  07D6  158A  232F  118A   	fcall	_my_MainTimer
  2438                           
  2439                           ;Main_B1.c: 97: WDT_Main();
  2440  07D9  158A  2176  118A   	fcall	_WDT_Main
  2441                           
  2442                           ;Main_B1.c: 98: ;;
  2443                           ;Main_B1.c: 99: ;;
  2444                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2445  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  2446  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  2447  07DE  1C31               	btfss	_myMain,0
  2448  07DF  2FAE               	goto	l7337
  2449                           
  2450                           ;Main_B1.c: 101: ;;
  2451                           ;Main_B1.c: 103: LED_Main();
  2452  07E0  158A  209E  118A   	fcall	_LED_Main
  2453                           
  2454                           ;Main_B1.c: 104: Buzzer_Main();
  2455  07E3  158A  255A  118A   	fcall	_Buzzer_Main
  2456                           
  2457                           ;Main_B1.c: 106: SYSC_Main();
  2458  07E6  158A  208D  118A   	fcall	_SYSC_Main
  2459                           
  2460                           ;Main_B1.c: 107: Temp_Main();
  2461  07E9  158A  2093  118A   	fcall	_Temp_Main
  2462                           
  2463                           ;Main_B1.c: 108: Load_Main();
  2464  07EC  118A  202E  118A   	fcall	_Load_Main
  2465                           
  2466                           ;Main_B1.c: 109: ;;
  2467                           ;Main_B1.c: 111: Lights_Main();
  2468  07EF  158A  2377  118A   	fcall	_Lights_Main
  2469                           
  2470                           ;Main_B1.c: 112: ;;
  2471                           ;Main_B1.c: 113: Switch_Main();
  2472  07F2  158A  20F6  118A   	fcall	_Switch_Main
  2473                           
  2474                           ;Main_B1.c: 114: CDS_Main();
  2475  07F5  158A  23F7  118A   	fcall	_CDS_Main
  2476                           
  2477                           ;Main_B1.c: 115: PIR_Main();
  2478  07F8  118A  21F5  118A   	fcall	_PIR_Main
  2479                           
  2480                           ;Main_B1.c: 117: ;;
  2481                           ;Main_B1.c: 118: ;;
  2482                           ;Main_B1.c: 119: ;;
  2483                           ;Main_B1.c: 120: ;;
  2484                           ;Main_B1.c: 121: Exception_Main();
  2485  07FB  118A  261B  118A   	fcall	_Exception_Main
  2486  07FE  2FAE               	goto	l7337
  2487  07FF                     __end_of_main:	
  2488                           ;Main_B1.c: 128: }
  2489                           ;Main_B1.c: 129: }
  2490                           ;Main_B1.c: 163: }
  2491                           ;Main_B1.c: 164: return (0);
  2492                           ;	Return value of _main is never used
  2493                           
  2494                           
  2495                           	psect	text1
  2496  0B2F                     __ptext1:	
  2497 ;; *************** function _my_MainTimer *****************
  2498 ;; Defined at:
  2499 ;;		line 185 in file "../src/Main_B1.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;		None
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;		None
  2504 ;; Return value:  Size  Location     Type
  2505 ;;		None               void
  2506 ;; Registers used:
  2507 ;;		wreg, status,2, status,0, pclath, cstack
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2513 ;;      Params:         0       0       0       0
  2514 ;;      Locals:         0       0       0       0
  2515 ;;      Temps:          0       1       0       0
  2516 ;;      Totals:         0       1       0       0
  2517 ;;Total ram usage:        1 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    4
  2520 ;; This function calls:
  2521 ;;		_setBuz
  2522 ;; This function is called by:
  2523 ;;		_main
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           
  2528                           ;psect for function _my_MainTimer
  2529  0B2F                     _my_MainTimer:	
  2530                           
  2531                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2532                           
  2533                           ;incstack = 0
  2534                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0+pclath+cstack]
  2535  0B2F  1283               	bcf	3,5	;RP0=0, select bank0
  2536  0B30  1303               	bcf	3,6	;RP1=0, select bank0
  2537  0B31  1831               	btfsc	_myMain,0
  2538  0B32  2B48               	goto	l6943
  2539                           
  2540                           ;Main_B1.c: 188: myMain.PowerCount++;
  2541  0B33  3001               	movlw	1
  2542  0B34  00E6               	movwf	??_my_MainTimer
  2543  0B35  0866               	movf	??_my_MainTimer,w
  2544  0B36  07B2               	addwf	_myMain+1,f
  2545                           
  2546                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2547  0B37  0832               	movf	_myMain+1,w
  2548  0B38  3A4B               	xorlw	75
  2549  0B39  1D03               	skipz
  2550  0B3A  0008               	return
  2551                           
  2552                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2553  0B3B  01B2               	clrf	_myMain+1
  2554                           
  2555                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2556  0B3C  1431               	bsf	_myMain,0
  2557                           
  2558                           ;Main_B1.c: 196: setBuz(3, 50);
  2559  0B3D  3032               	movlw	50
  2560  0B3E  00E2               	movwf	setBuz@time
  2561  0B3F  3000               	movlw	0
  2562  0B40  00E3               	movwf	setBuz@time+1
  2563  0B41  3003               	movlw	3
  2564  0B42  158A  259E         	fcall	_setBuz
  2565                           
  2566                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2567  0B44  1283               	bcf	3,5	;RP0=0, select bank0
  2568  0B45  1303               	bcf	3,6	;RP1=0, select bank0
  2569  0B46  1631               	bsf	_myMain,4
  2570                           
  2571                           ;Main_B1.c: 206: }
  2572                           ;Main_B1.c: 207: } else {
  2573  0B47  0008               	return
  2574  0B48                     l6943:	
  2575                           
  2576                           ;Main_B1.c: 208: myMain.PowerCount++;
  2577  0B48  3001               	movlw	1
  2578  0B49  00E6               	movwf	??_my_MainTimer
  2579  0B4A  0866               	movf	??_my_MainTimer,w
  2580  0B4B  07B2               	addwf	_myMain+1,f
  2581                           
  2582                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2583  0B4C  0832               	movf	_myMain+1,w
  2584  0B4D  3A32               	xorlw	50
  2585  0B4E  1D03               	skipz
  2586  0B4F  0008               	return
  2587                           
  2588                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2589  0B50  01B2               	clrf	_myMain+1
  2590  0B51  0008               	return
  2591  0B52                     __end_of_my_MainTimer:	
  2592                           
  2593                           	psect	text2
  2594  07FF                     __ptext2:	
  2595 ;; *************** function _myMain_Initialization *****************
  2596 ;; Defined at:
  2597 ;;		line 170 in file "../src/Main_B1.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;		None
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;		None
  2602 ;; Return value:  Size  Location     Type
  2603 ;;		None               void
  2604 ;; Registers used:
  2605 ;;		None
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2611 ;;      Params:         0       0       0       0
  2612 ;;      Locals:         0       0       0       0
  2613 ;;      Temps:          0       0       0       0
  2614 ;;      Totals:         0       0       0       0
  2615 ;;Total ram usage:        0 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    2
  2618 ;; This function calls:
  2619 ;;		Nothing
  2620 ;; This function is called by:
  2621 ;;		_main
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           
  2626                           ;psect for function _myMain_Initialization
  2627  07FF                     _myMain_Initialization:	
  2628                           
  2629                           ;incstack = 0
  2630                           ; Regs used in _myMain_Initialization: []
  2631  07FF  0008               	return
  2632  0800                     __end_of_myMain_Initialization:	
  2633                           
  2634                           	psect	text3
  2635  0C2B                     __ptext3:	
  2636 ;; *************** function _getTemp_AD *****************
  2637 ;; Defined at:
  2638 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;  channel         1    wreg     unsigned char 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  channel         1    3[BANK0 ] unsigned char 
  2643 ;;  ADRES           1    4[BANK0 ] unsigned char 
  2644 ;; Return value:  Size  Location     Type
  2645 ;;		None               void
  2646 ;; Registers used:
  2647 ;;		wreg, status,2, status,0, pclath, cstack
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2653 ;;      Params:         0       0       0       0
  2654 ;;      Locals:         0       2       0       0
  2655 ;;      Temps:          0       2       0       0
  2656 ;;      Totals:         0       4       0       0
  2657 ;;Total ram usage:        4 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:    4
  2660 ;; This function calls:
  2661 ;;		_getAD
  2662 ;; This function is called by:
  2663 ;;		_main
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           
  2668                           ;psect for function _getTemp_AD
  2669  0C2B                     _getTemp_AD:	
  2670                           
  2671                           ;incstack = 0
  2672                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2673                           ;getTemp_AD@channel stored from wreg
  2674  0C2B  1283               	bcf	3,5	;RP0=0, select bank0
  2675  0C2C  1303               	bcf	3,6	;RP1=0, select bank0
  2676  0C2D  00DD               	movwf	getTemp_AD@channel
  2677                           
  2678                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2679  0C2E  01DE               	clrf	getTemp_AD@ADRES
  2680                           
  2681                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2682  0C2F  1D42               	btfss	_Temp,2
  2683  0C30  2C52               	goto	l6849
  2684                           
  2685                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2686  0C31  3070               	movlw	112
  2687  0C32  00DB               	movwf	??_getTemp_AD
  2688  0C33  085B               	movf	??_getTemp_AD,w
  2689  0C34  00F9               	movwf	getAD@adcon1
  2690  0C35  085D               	movf	getTemp_AD@channel,w
  2691  0C36  158A  22F1  158A   	fcall	_getAD
  2692  0C39  1283               	bcf	3,5	;RP0=0, select bank0
  2693  0C3A  1303               	bcf	3,6	;RP1=0, select bank0
  2694  0C3B  00DC               	movwf	??_getTemp_AD+1
  2695  0C3C  085C               	movf	??_getTemp_AD+1,w
  2696  0C3D  00DE               	movwf	getTemp_AD@ADRES
  2697                           
  2698                           ;OverTemperature_B1.c: 22: if (ADRES > 0) {
  2699  0C3E  085E               	movf	getTemp_AD@ADRES,w
  2700  0C3F  1903               	btfsc	3,2
  2701  0C40  2C52               	goto	l6849
  2702                           
  2703                           ;OverTemperature_B1.c: 23: if (Temp.ADH[0] < ADRES) {
  2704  0C41  085E               	movf	getTemp_AD@ADRES,w
  2705  0C42  0246               	subwf	_Temp+4,w
  2706  0C43  1803               	skipnc
  2707  0C44  2C4A               	goto	l6845
  2708                           
  2709                           ;OverTemperature_B1.c: 24: Temp.ADH[0] = ADRES;
  2710  0C45  085E               	movf	getTemp_AD@ADRES,w
  2711  0C46  00DB               	movwf	??_getTemp_AD
  2712  0C47  085B               	movf	??_getTemp_AD,w
  2713  0C48  00C6               	movwf	_Temp+4
  2714                           
  2715                           ;OverTemperature_B1.c: 25: } else if (Temp.ADH[1] < ADRES) {
  2716  0C49  2C52               	goto	l6849
  2717  0C4A                     l6845:	
  2718  0C4A  085E               	movf	getTemp_AD@ADRES,w
  2719  0C4B  0247               	subwf	_Temp+5,w
  2720  0C4C  1803               	skipnc
  2721  0C4D  2C52               	goto	l6849
  2722                           
  2723                           ;OverTemperature_B1.c: 26: Temp.ADH[1] = ADRES;
  2724  0C4E  085E               	movf	getTemp_AD@ADRES,w
  2725  0C4F  00DB               	movwf	??_getTemp_AD
  2726  0C50  085B               	movf	??_getTemp_AD,w
  2727  0C51  00C7               	movwf	_Temp+5
  2728  0C52                     l6849:	
  2729                           
  2730                           ;OverTemperature_B1.c: 27: }
  2731                           ;OverTemperature_B1.c: 28: }
  2732                           ;OverTemperature_B1.c: 29: }
  2733                           ;OverTemperature_B1.c: 36: ADRES = getAD(channel, 0x70);
  2734  0C52  3070               	movlw	112
  2735  0C53  00DB               	movwf	??_getTemp_AD
  2736  0C54  085B               	movf	??_getTemp_AD,w
  2737  0C55  00F9               	movwf	getAD@adcon1
  2738  0C56  085D               	movf	getTemp_AD@channel,w
  2739  0C57  158A  22F1         	fcall	_getAD
  2740  0C59  1283               	bcf	3,5	;RP0=0, select bank0
  2741  0C5A  1303               	bcf	3,6	;RP1=0, select bank0
  2742  0C5B  00DC               	movwf	??_getTemp_AD+1
  2743  0C5C  085C               	movf	??_getTemp_AD+1,w
  2744  0C5D  00DE               	movwf	getTemp_AD@ADRES
  2745  0C5E  0008               	return
  2746  0C5F                     __end_of_getTemp_AD:	
  2747                           
  2748                           	psect	text4
  2749  04ED                     __ptext4:	
  2750 ;; *************** function _getPIR_AD *****************
  2751 ;; Defined at:
  2752 ;;		line 327 in file "../src/PIR_B1.c"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;  channel1        1    wreg     unsigned char 
  2755 ;;  channel2        1    8[BANK0 ] unsigned char 
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;  channel1        1   13[BANK0 ] unsigned char 
  2758 ;;  i               1   16[BANK0 ] unsigned char 
  2759 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2760 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2761 ;;  j               1   12[BANK0 ] unsigned char 
  2762 ;; Return value:  Size  Location     Type
  2763 ;;		None               void
  2764 ;; Registers used:
  2765 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2766 ;; Tracked objects:
  2767 ;;		On entry : 0/0
  2768 ;;		On exit  : 0/0
  2769 ;;		Unchanged: 0/0
  2770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2771 ;;      Params:         0       1       0       0
  2772 ;;      Locals:         0       5       0       0
  2773 ;;      Temps:          0       3       0       0
  2774 ;;      Totals:         0       9       0       0
  2775 ;;Total ram usage:        9 bytes
  2776 ;; Hardware stack levels used:    1
  2777 ;; Hardware stack levels required when called:    4
  2778 ;; This function calls:
  2779 ;;		___awdiv
  2780 ;;		___lwdiv
  2781 ;;		_getAD
  2782 ;; This function is called by:
  2783 ;;		_main
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           
  2788                           ;psect for function _getPIR_AD
  2789  04ED                     _getPIR_AD:	
  2790                           
  2791                           ;incstack = 0
  2792                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2793                           ;getPIR_AD@channel1 stored from wreg
  2794  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  2795  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  2796  04EF  00E7               	movwf	getPIR_AD@channel1
  2797                           
  2798                           ;PIR_B1.c: 328: char i = 0, j = 0;
  2799  04F0  01EA               	clrf	getPIR_AD@i
  2800  04F1  01E6               	clrf	getPIR_AD@j
  2801                           
  2802                           ;PIR_B1.c: 329: char VRAD = 0, VRAD1 = 0;
  2803  04F2  01E9               	clrf	getPIR_AD@VRAD
  2804  04F3  01E8               	clrf	getPIR_AD@VRAD1
  2805                           
  2806                           ;PIR_B1.c: 330: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2807  04F4  1683               	bsf	3,5	;RP0=1, select bank1
  2808  04F5  1303               	bcf	3,6	;RP1=0, select bank1
  2809  04F6  1CA0               	btfss	__PIR^(0+128),1
  2810  04F7  0008               	return
  2811  04F8  1920               	btfsc	__PIR^(0+128),2
  2812  04F9  0008               	return
  2813                           
  2814                           ;PIR_B1.c: 331: _PIR.GO = 1;
  2815  04FA  1520               	bsf	__PIR^(0+128),2
  2816                           
  2817                           ;PIR_B1.c: 338: VRAD1 = getAD(channel1, 0x70);
  2818  04FB  3070               	movlw	112
  2819  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2820  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2821  04FE  00E3               	movwf	??_getPIR_AD
  2822  04FF  0863               	movf	??_getPIR_AD,w
  2823  0500  00F9               	movwf	getAD@adcon1
  2824  0501  0867               	movf	getPIR_AD@channel1,w
  2825  0502  158A  22F1  118A   	fcall	_getAD
  2826  0505  1283               	bcf	3,5	;RP0=0, select bank0
  2827  0506  1303               	bcf	3,6	;RP1=0, select bank0
  2828  0507  00E4               	movwf	??_getPIR_AD+1
  2829  0508  0864               	movf	??_getPIR_AD+1,w
  2830  0509  00E8               	movwf	getPIR_AD@VRAD1
  2831                           
  2832                           ;PIR_B1.c: 339: VRAD = VRAD1 / 25;
  2833  050A  3019               	movlw	25
  2834  050B  00DA               	movwf	___awdiv@divisor
  2835  050C  3000               	movlw	0
  2836  050D  00DB               	movwf	___awdiv@divisor+1
  2837  050E  0868               	movf	getPIR_AD@VRAD1,w
  2838  050F  00E3               	movwf	??_getPIR_AD
  2839  0510  01E4               	clrf	??_getPIR_AD+1
  2840  0511  0863               	movf	??_getPIR_AD,w
  2841  0512  00DC               	movwf	___awdiv@dividend
  2842  0513  0864               	movf	??_getPIR_AD+1,w
  2843  0514  00DD               	movwf	___awdiv@dividend+1
  2844  0515  158A  268F  118A   	fcall	___awdiv
  2845  0518  1283               	bcf	3,5	;RP0=0, select bank0
  2846  0519  1303               	bcf	3,6	;RP1=0, select bank0
  2847  051A  085A               	movf	?___awdiv,w
  2848  051B  00E5               	movwf	??_getPIR_AD+2
  2849  051C  0865               	movf	??_getPIR_AD+2,w
  2850  051D  00E9               	movwf	getPIR_AD@VRAD
  2851                           
  2852                           ;PIR_B1.c: 340: _PIR.SignalAD = getAD(channel2, 0x70);
  2853  051E  3070               	movlw	112
  2854  051F  00E3               	movwf	??_getPIR_AD
  2855  0520  0863               	movf	??_getPIR_AD,w
  2856  0521  00F9               	movwf	getAD@adcon1
  2857  0522  0862               	movf	getPIR_AD@channel2,w
  2858  0523  158A  22F1  118A   	fcall	_getAD
  2859  0526  1283               	bcf	3,5	;RP0=0, select bank0
  2860  0527  1303               	bcf	3,6	;RP1=0, select bank0
  2861  0528  00E4               	movwf	??_getPIR_AD+1
  2862  0529  0864               	movf	??_getPIR_AD+1,w
  2863  052A  1683               	bsf	3,5	;RP0=1, select bank1
  2864  052B  1303               	bcf	3,6	;RP1=0, select bank1
  2865  052C  00A1               	movwf	(__PIR^(0+128)+1)
  2866                           
  2867                           ;PIR_B1.c: 354: if (VRAD < 1) {
  2868  052D  1283               	bcf	3,5	;RP0=0, select bank0
  2869  052E  1303               	bcf	3,6	;RP1=0, select bank0
  2870  052F  08E9               	movf	getPIR_AD@VRAD,f
  2871  0530  1D03               	skipz
  2872  0531  2D34               	goto	l6865
  2873                           
  2874                           ;PIR_B1.c: 355: _PIR.CloseTimeValue = 5;
  2875  0532  3005               	movlw	5
  2876  0533  2D3A               	goto	L1
  2877  0534                     l6865:	
  2878                           ;PIR_B1.c: 356: } else if (VRAD < 3) {
  2879                           
  2880  0534  3003               	movlw	3
  2881  0535  1283               	bcf	3,5	;RP0=0, select bank0
  2882  0536  0269               	subwf	getPIR_AD@VRAD,w
  2883  0537  1803               	skipnc
  2884  0538  2D3F               	goto	l6869
  2885                           
  2886                           ;PIR_B1.c: 357: _PIR.CloseTimeValue = 60;
  2887  0539  303C               	movlw	60
  2888  053A                     L1:	
  2889  053A  1683               	bsf	3,5	;RP0=1, select bank1
  2890  053B  1303               	bcf	3,6	;RP1=0, select bank1
  2891  053C  00C3               	movwf	(__PIR^(0+128)+35)
  2892  053D  3000               	movlw	0
  2893  053E  2D65               	goto	L5
  2894  053F                     l6869:	
  2895                           ;PIR_B1.c: 358: } else if (VRAD < 5) {
  2896                           
  2897  053F  3005               	movlw	5
  2898  0540  1283               	bcf	3,5	;RP0=0, select bank0
  2899  0541  0269               	subwf	getPIR_AD@VRAD,w
  2900  0542  1803               	skipnc
  2901  0543  2D4A               	goto	l6873
  2902                           
  2903                           ;PIR_B1.c: 359: _PIR.CloseTimeValue = 300;
  2904  0544  302C               	movlw	44
  2905  0545  1683               	bsf	3,5	;RP0=1, select bank1
  2906  0546  1303               	bcf	3,6	;RP1=0, select bank1
  2907  0547  00C3               	movwf	(__PIR^(0+128)+35)
  2908  0548  3001               	movlw	1
  2909  0549  2D65               	goto	L5
  2910  054A                     l6873:	
  2911                           ;PIR_B1.c: 360: } else if (VRAD < 7) {
  2912                           
  2913  054A  3007               	movlw	7
  2914  054B  1283               	bcf	3,5	;RP0=0, select bank0
  2915  054C  0269               	subwf	getPIR_AD@VRAD,w
  2916  054D  1803               	skipnc
  2917  054E  2D55               	goto	l6877
  2918                           
  2919                           ;PIR_B1.c: 361: _PIR.CloseTimeValue = 600;
  2920  054F  3058               	movlw	88
  2921  0550  1683               	bsf	3,5	;RP0=1, select bank1
  2922  0551  1303               	bcf	3,6	;RP1=0, select bank1
  2923  0552  00C3               	movwf	(__PIR^(0+128)+35)
  2924  0553  3002               	movlw	2
  2925  0554  2D65               	goto	L5
  2926  0555                     l6877:	
  2927                           ;PIR_B1.c: 362: } else if (VRAD < 9) {
  2928                           
  2929  0555  3009               	movlw	9
  2930  0556  1283               	bcf	3,5	;RP0=0, select bank0
  2931  0557  0269               	subwf	getPIR_AD@VRAD,w
  2932  0558  1803               	skipnc
  2933  0559  2D60               	goto	l6881
  2934                           
  2935                           ;PIR_B1.c: 363: _PIR.CloseTimeValue = 900;
  2936  055A  3084               	movlw	132
  2937  055B  1683               	bsf	3,5	;RP0=1, select bank1
  2938  055C  1303               	bcf	3,6	;RP1=0, select bank1
  2939  055D  00C3               	movwf	(__PIR^(0+128)+35)
  2940  055E  3003               	movlw	3
  2941  055F  2D65               	goto	L5
  2942  0560                     l6881:	
  2943                           ;PIR_B1.c: 364: } else {
  2944                           
  2945                           
  2946                           ;PIR_B1.c: 365: _PIR.CloseTimeValue = 1200;
  2947  0560  30B0               	movlw	176
  2948  0561  1683               	bsf	3,5	;RP0=1, select bank1
  2949  0562  1303               	bcf	3,6	;RP1=0, select bank1
  2950  0563  00C3               	movwf	(__PIR^(0+128)+35)
  2951  0564  3004               	movlw	4
  2952  0565                     L5:	
  2953  0565  00C4               	movwf	(__PIR^(0+128)+36)
  2954                           
  2955                           ;PIR_B1.c: 366: }
  2956                           ;PIR_B1.c: 375: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2957  0566  0821               	movf	(__PIR^(0+128)+1),w
  2958  0567  1283               	bcf	3,5	;RP0=0, select bank0
  2959  0568  1303               	bcf	3,6	;RP1=0, select bank0
  2960  0569  00E3               	movwf	??_getPIR_AD
  2961  056A  1683               	bsf	3,5	;RP0=1, select bank1
  2962  056B  1303               	bcf	3,6	;RP1=0, select bank1
  2963  056C  0824               	movf	(__PIR^(0+128)+4),w
  2964  056D  3EA5               	addlw	(__PIR+5)& (0+255)
  2965  056E  0084               	movwf	4
  2966  056F  1283               	bcf	3,5	;RP0=0, select bank0
  2967  0570  1303               	bcf	3,6	;RP1=0, select bank0
  2968  0571  0863               	movf	??_getPIR_AD,w
  2969  0572  1383               	bcf	3,7	;select IRP bank1
  2970  0573  0080               	movwf	0
  2971                           
  2972                           ;PIR_B1.c: 376: for (i = 0; i < 10; i++) {
  2973  0574  01EA               	clrf	getPIR_AD@i
  2974  0575  300A               	movlw	10
  2975  0576  026A               	subwf	getPIR_AD@i,w
  2976  0577  1803               	btfsc	3,0
  2977  0578  2D95               	goto	l6897
  2978  0579                     l6891:	
  2979                           
  2980                           ;PIR_B1.c: 377: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2981  0579  086A               	movf	getPIR_AD@i,w
  2982  057A  3EA5               	addlw	(__PIR+5)& (0+255)
  2983  057B  0084               	movwf	4
  2984  057C  0800               	movf	0,w
  2985  057D  00E3               	movwf	??_getPIR_AD
  2986  057E  01E4               	clrf	??_getPIR_AD+1
  2987  057F  0863               	movf	??_getPIR_AD,w
  2988  0580  1683               	bsf	3,5	;RP0=1, select bank1
  2989  0581  1303               	bcf	3,6	;RP1=0, select bank1
  2990  0582  07AF               	addwf	(__PIR^(0+128)+15),f
  2991  0583  1803               	skipnc
  2992  0584  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2993  0585  1283               	bcf	3,5	;RP0=0, select bank0
  2994  0586  1303               	bcf	3,6	;RP1=0, select bank0
  2995  0587  0864               	movf	??_getPIR_AD+1,w
  2996  0588  1683               	bsf	3,5	;RP0=1, select bank1
  2997  0589  1303               	bcf	3,6	;RP1=0, select bank1
  2998  058A  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2999  058B  3001               	movlw	1
  3000  058C  1283               	bcf	3,5	;RP0=0, select bank0
  3001  058D  1303               	bcf	3,6	;RP1=0, select bank0
  3002  058E  00E3               	movwf	??_getPIR_AD
  3003  058F  0863               	movf	??_getPIR_AD,w
  3004  0590  07EA               	addwf	getPIR_AD@i,f
  3005  0591  300A               	movlw	10
  3006  0592  026A               	subwf	getPIR_AD@i,w
  3007  0593  1C03               	skipc
  3008  0594  2D79               	goto	l6891
  3009  0595                     l6897:	
  3010                           
  3011                           ;PIR_B1.c: 378: }
  3012                           ;PIR_B1.c: 379: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  3013  0595  300A               	movlw	10
  3014  0596  00DA               	movwf	___lwdiv@divisor
  3015  0597  3000               	movlw	0
  3016  0598  00DB               	movwf	___lwdiv@divisor+1
  3017  0599  1683               	bsf	3,5	;RP0=1, select bank1
  3018  059A  1303               	bcf	3,6	;RP1=0, select bank1
  3019  059B  0830               	movf	((__PIR+1)^(0+128)+15),w
  3020  059C  1283               	bcf	3,5	;RP0=0, select bank0
  3021  059D  1303               	bcf	3,6	;RP1=0, select bank0
  3022  059E  01DD               	clrf	___lwdiv@dividend+1
  3023  059F  07DD               	addwf	___lwdiv@dividend+1,f
  3024  05A0  1683               	bsf	3,5	;RP0=1, select bank1
  3025  05A1  1303               	bcf	3,6	;RP1=0, select bank1
  3026  05A2  082F               	movf	(__PIR^(0+128)+15),w
  3027  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  3028  05A4  1303               	bcf	3,6	;RP1=0, select bank0
  3029  05A5  01DC               	clrf	___lwdiv@dividend
  3030  05A6  07DC               	addwf	___lwdiv@dividend,f
  3031  05A7  158A  24D8  118A   	fcall	___lwdiv
  3032  05AA  1283               	bcf	3,5	;RP0=0, select bank0
  3033  05AB  1303               	bcf	3,6	;RP1=0, select bank0
  3034  05AC  085A               	movf	?___lwdiv,w
  3035  05AD  00E3               	movwf	??_getPIR_AD
  3036  05AE  1683               	bsf	3,5	;RP0=1, select bank1
  3037  05AF  1303               	bcf	3,6	;RP1=0, select bank1
  3038  05B0  0831               	movf	(__PIR^(0+128)+17),w
  3039  05B1  3EB2               	addlw	(__PIR+18)& (0+255)
  3040  05B2  0084               	movwf	4
  3041  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  3042  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  3043  05B5  0863               	movf	??_getPIR_AD,w
  3044  05B6  1383               	bcf	3,7	;select IRP bank1
  3045  05B7  0080               	movwf	0
  3046                           
  3047                           ;PIR_B1.c: 380: _PIR.TenAverageValue = 0;
  3048  05B8  1683               	bsf	3,5	;RP0=1, select bank1
  3049  05B9  1303               	bcf	3,6	;RP1=0, select bank1
  3050  05BA  01AF               	clrf	(__PIR^(0+128)+15)
  3051  05BB  01B0               	clrf	((__PIR+1)^(0+128)+15)
  3052                           
  3053                           ;PIR_B1.c: 382: for (i = 0; i <= 9; i++) {
  3054  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  3055  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  3056  05BE  01EA               	clrf	getPIR_AD@i
  3057  05BF  300A               	movlw	10
  3058  05C0  026A               	subwf	getPIR_AD@i,w
  3059  05C1  1803               	btfsc	3,0
  3060  05C2  2DDF               	goto	l6913
  3061  05C3                     l6907:	
  3062                           
  3063                           ;PIR_B1.c: 383: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  3064  05C3  086A               	movf	getPIR_AD@i,w
  3065  05C4  3EB2               	addlw	(__PIR+18)& (0+255)
  3066  05C5  0084               	movwf	4
  3067  05C6  0800               	movf	0,w
  3068  05C7  00E3               	movwf	??_getPIR_AD
  3069  05C8  01E4               	clrf	??_getPIR_AD+1
  3070  05C9  0863               	movf	??_getPIR_AD,w
  3071  05CA  1683               	bsf	3,5	;RP0=1, select bank1
  3072  05CB  1303               	bcf	3,6	;RP1=0, select bank1
  3073  05CC  07BC               	addwf	(__PIR^(0+128)+28),f
  3074  05CD  1803               	skipnc
  3075  05CE  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  3076  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  3077  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  3078  05D1  0864               	movf	??_getPIR_AD+1,w
  3079  05D2  1683               	bsf	3,5	;RP0=1, select bank1
  3080  05D3  1303               	bcf	3,6	;RP1=0, select bank1
  3081  05D4  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  3082  05D5  3001               	movlw	1
  3083  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  3084  05D7  1303               	bcf	3,6	;RP1=0, select bank0
  3085  05D8  00E3               	movwf	??_getPIR_AD
  3086  05D9  0863               	movf	??_getPIR_AD,w
  3087  05DA  07EA               	addwf	getPIR_AD@i,f
  3088  05DB  300A               	movlw	10
  3089  05DC  026A               	subwf	getPIR_AD@i,w
  3090  05DD  1C03               	skipc
  3091  05DE  2DC3               	goto	l6907
  3092  05DF                     l6913:	
  3093                           
  3094                           ;PIR_B1.c: 384: }
  3095                           ;PIR_B1.c: 385: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  3096  05DF  300A               	movlw	10
  3097  05E0  00DA               	movwf	___lwdiv@divisor
  3098  05E1  3000               	movlw	0
  3099  05E2  00DB               	movwf	___lwdiv@divisor+1
  3100  05E3  1683               	bsf	3,5	;RP0=1, select bank1
  3101  05E4  1303               	bcf	3,6	;RP1=0, select bank1
  3102  05E5  083D               	movf	((__PIR+1)^(0+128)+28),w
  3103  05E6  1283               	bcf	3,5	;RP0=0, select bank0
  3104  05E7  1303               	bcf	3,6	;RP1=0, select bank0
  3105  05E8  01DD               	clrf	___lwdiv@dividend+1
  3106  05E9  07DD               	addwf	___lwdiv@dividend+1,f
  3107  05EA  1683               	bsf	3,5	;RP0=1, select bank1
  3108  05EB  1303               	bcf	3,6	;RP1=0, select bank1
  3109  05EC  083C               	movf	(__PIR^(0+128)+28),w
  3110  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  3111  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  3112  05EF  01DC               	clrf	___lwdiv@dividend
  3113  05F0  07DC               	addwf	___lwdiv@dividend,f
  3114  05F1  158A  24D8  118A   	fcall	___lwdiv
  3115  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  3116  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  3117  05F6  085A               	movf	?___lwdiv,w
  3118  05F7  00E3               	movwf	??_getPIR_AD
  3119  05F8  0863               	movf	??_getPIR_AD,w
  3120  05F9  1683               	bsf	3,5	;RP0=1, select bank1
  3121  05FA  1303               	bcf	3,6	;RP1=0, select bank1
  3122  05FB  00A3               	movwf	(__PIR^(0+128)+3)
  3123                           
  3124                           ;PIR_B1.c: 386: _PIR.HundredAverageValue = 0;
  3125  05FC  01BC               	clrf	(__PIR^(0+128)+28)
  3126  05FD  01BD               	clrf	((__PIR+1)^(0+128)+28)
  3127                           
  3128                           ;PIR_B1.c: 388: if (_PIR.TenCount < 10) {
  3129  05FE  300A               	movlw	10
  3130  05FF  0224               	subwf	(__PIR^(0+128)+4),w
  3131  0600  1803               	skipnc
  3132  0601  2E0B               	goto	l6921
  3133                           
  3134                           ;PIR_B1.c: 389: _PIR.TenCount++;
  3135  0602  3001               	movlw	1
  3136  0603  1283               	bcf	3,5	;RP0=0, select bank0
  3137  0604  1303               	bcf	3,6	;RP1=0, select bank0
  3138  0605  00E3               	movwf	??_getPIR_AD
  3139  0606  0863               	movf	??_getPIR_AD,w
  3140  0607  1683               	bsf	3,5	;RP0=1, select bank1
  3141  0608  1303               	bcf	3,6	;RP1=0, select bank1
  3142  0609  07A4               	addwf	(__PIR^(0+128)+4),f
  3143                           
  3144                           ;PIR_B1.c: 390: } else {
  3145  060A  0008               	return
  3146  060B                     l6921:	
  3147                           
  3148                           ;PIR_B1.c: 391: _PIR.TenCount = 0;
  3149  060B  01A4               	clrf	(__PIR^(0+128)+4)
  3150                           
  3151                           ;PIR_B1.c: 392: if (_PIR.HundreCount < 10)
  3152  060C  300A               	movlw	10
  3153  060D  0231               	subwf	(__PIR^(0+128)+17),w
  3154  060E  1803               	skipnc
  3155  060F  2E19               	goto	l6927
  3156                           
  3157                           ;PIR_B1.c: 393: _PIR.HundreCount++;
  3158  0610  3001               	movlw	1
  3159  0611  1283               	bcf	3,5	;RP0=0, select bank0
  3160  0612  1303               	bcf	3,6	;RP1=0, select bank0
  3161  0613  00E3               	movwf	??_getPIR_AD
  3162  0614  0863               	movf	??_getPIR_AD,w
  3163  0615  1683               	bsf	3,5	;RP0=1, select bank1
  3164  0616  1303               	bcf	3,6	;RP1=0, select bank1
  3165  0617  07B1               	addwf	(__PIR^(0+128)+17),f
  3166  0618  0008               	return
  3167  0619                     l6927:	
  3168                           
  3169                           ;PIR_B1.c: 394: else
  3170                           ;PIR_B1.c: 395: _PIR.HundreCount = 0;
  3171  0619  01B1               	clrf	(__PIR^(0+128)+17)
  3172  061A  0008               	return
  3173  061B                     __end_of_getPIR_AD:	
  3174                           
  3175                           	psect	text5
  3176  0E33                     __ptext5:	
  3177 ;; *************** function _getLoad_AD *****************
  3178 ;; Defined at:
  3179 ;;		line 15 in file "../src/OverLoad_B1.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;  channel         1    wreg     unsigned char 
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;  channel         1    3[BANK0 ] unsigned char 
  3184 ;;  i               1    7[BANK0 ] unsigned char 
  3185 ;;  ADRES           1    6[BANK0 ] unsigned char 
  3186 ;;  j               1    5[BANK0 ] unsigned char 
  3187 ;;  k               1    4[BANK0 ] unsigned char 
  3188 ;; Return value:  Size  Location     Type
  3189 ;;		None               void
  3190 ;; Registers used:
  3191 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3197 ;;      Params:         0       0       0       0
  3198 ;;      Locals:         0       5       0       0
  3199 ;;      Temps:          0       2       0       0
  3200 ;;      Totals:         0       7       0       0
  3201 ;;Total ram usage:        7 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    4
  3204 ;; This function calls:
  3205 ;;		_getAD
  3206 ;; This function is called by:
  3207 ;;		_main
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           
  3212                           ;psect for function _getLoad_AD
  3213  0E33                     _getLoad_AD:	
  3214                           
  3215                           ;incstack = 0
  3216                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3217                           ;getLoad_AD@channel stored from wreg
  3218  0E33  1283               	bcf	3,5	;RP0=0, select bank0
  3219  0E34  1303               	bcf	3,6	;RP1=0, select bank0
  3220  0E35  00DD               	movwf	getLoad_AD@channel
  3221                           
  3222                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3223  0E36  01E1               	clrf	getLoad_AD@i
  3224  0E37  01DF               	clrf	getLoad_AD@j
  3225  0E38  01DE               	clrf	getLoad_AD@k
  3226                           
  3227                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  3228  0E39  01E0               	clrf	getLoad_AD@ADRES
  3229                           
  3230                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3231  0E3A  1683               	bsf	3,5	;RP0=1, select bank1
  3232  0E3B  1303               	bcf	3,6	;RP1=0, select bank1
  3233  0E3C  1E4A               	btfss	_Load^(0+128),4
  3234  0E3D  0008               	return
  3235                           
  3236                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0x73);
  3237  0E3E  3073               	movlw	115
  3238  0E3F  1283               	bcf	3,5	;RP0=0, select bank0
  3239  0E40  1303               	bcf	3,6	;RP1=0, select bank0
  3240  0E41  00DB               	movwf	??_getLoad_AD
  3241  0E42  085B               	movf	??_getLoad_AD,w
  3242  0E43  00F9               	movwf	getAD@adcon1
  3243  0E44  085D               	movf	getLoad_AD@channel,w
  3244  0E45  158A  22F1  158A   	fcall	_getAD
  3245  0E48  1283               	bcf	3,5	;RP0=0, select bank0
  3246  0E49  1303               	bcf	3,6	;RP1=0, select bank0
  3247  0E4A  00DC               	movwf	??_getLoad_AD+1
  3248  0E4B  085C               	movf	??_getLoad_AD+1,w
  3249  0E4C  00E0               	movwf	getLoad_AD@ADRES
  3250                           
  3251                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3252  0E4D  01E1               	clrf	getLoad_AD@i
  3253  0E4E  3004               	movlw	4
  3254  0E4F  0261               	subwf	getLoad_AD@i,w
  3255  0E50  1803               	btfsc	3,0
  3256  0E51  2E6E               	goto	l6813
  3257  0E52                     l6801:	
  3258                           
  3259                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  3260  0E52  0861               	movf	getLoad_AD@i,w
  3261  0E53  3ED4               	addlw	(_Load+10)& (0+255)
  3262  0E54  0084               	movwf	4
  3263  0E55  0860               	movf	getLoad_AD@ADRES,w
  3264  0E56  1383               	bcf	3,7	;select IRP bank1
  3265  0E57  0200               	subwf	0,w
  3266  0E58  1803               	skipnc
  3267  0E59  2E66               	goto	l6809
  3268  0E5A  08DF               	movf	getLoad_AD@j,f
  3269  0E5B  1D03               	skipz
  3270  0E5C  2E66               	goto	l6809
  3271                           
  3272                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  3273  0E5D  0860               	movf	getLoad_AD@ADRES,w
  3274  0E5E  00DB               	movwf	??_getLoad_AD
  3275  0E5F  0861               	movf	getLoad_AD@i,w
  3276  0E60  3ED4               	addlw	(_Load+10)& (0+255)
  3277  0E61  0084               	movwf	4
  3278  0E62  085B               	movf	??_getLoad_AD,w
  3279  0E63  0080               	movwf	0
  3280                           
  3281                           ;OverLoad_B1.c: 24: j = 1;
  3282  0E64  01DF               	clrf	getLoad_AD@j
  3283  0E65  0ADF               	incf	getLoad_AD@j,f
  3284  0E66                     l6809:	
  3285  0E66  3001               	movlw	1
  3286  0E67  00DB               	movwf	??_getLoad_AD
  3287  0E68  085B               	movf	??_getLoad_AD,w
  3288  0E69  07E1               	addwf	getLoad_AD@i,f
  3289  0E6A  3004               	movlw	4
  3290  0E6B  0261               	subwf	getLoad_AD@i,w
  3291  0E6C  1C03               	skipc
  3292  0E6D  2E52               	goto	l6801
  3293  0E6E                     l6813:	
  3294                           
  3295                           ;OverLoad_B1.c: 25: }
  3296                           ;OverLoad_B1.c: 26: }
  3297                           ;OverLoad_B1.c: 27: if (j == 0) {
  3298  0E6E  08DF               	movf	getLoad_AD@j,f
  3299  0E6F  1D03               	skipz
  3300  0E70  0008               	return
  3301                           
  3302                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3303  0E71  01E1               	clrf	getLoad_AD@i
  3304  0E72                     L6:	
  3305  0E72  3004               	movlw	4
  3306  0E73  0261               	subwf	getLoad_AD@i,w
  3307  0E74  1803               	btfsc	3,0
  3308  0E75  0008               	return
  3309                           
  3310                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  3311  0E76  0861               	movf	getLoad_AD@i,w
  3312  0E77  3ED9               	addlw	(_Load+15)& (0+255)
  3313  0E78  0084               	movwf	4
  3314  0E79  1383               	bcf	3,7	;select IRP bank1
  3315  0E7A  0800               	movf	0,w
  3316  0E7B  0260               	subwf	getLoad_AD@ADRES,w
  3317  0E7C  1803               	skipnc
  3318  0E7D  2E8A               	goto	l6829
  3319  0E7E  08DE               	movf	getLoad_AD@k,f
  3320  0E7F  1D03               	skipz
  3321  0E80  2E8A               	goto	l6829
  3322                           
  3323                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  3324  0E81  0860               	movf	getLoad_AD@ADRES,w
  3325  0E82  00DB               	movwf	??_getLoad_AD
  3326  0E83  0861               	movf	getLoad_AD@i,w
  3327  0E84  3ED9               	addlw	(_Load+15)& (0+255)
  3328  0E85  0084               	movwf	4
  3329  0E86  085B               	movf	??_getLoad_AD,w
  3330  0E87  0080               	movwf	0
  3331                           
  3332                           ;OverLoad_B1.c: 31: k = 1;
  3333  0E88  01DE               	clrf	getLoad_AD@k
  3334  0E89  0ADE               	incf	getLoad_AD@k,f
  3335  0E8A                     l6829:	
  3336  0E8A  3001               	movlw	1
  3337  0E8B  00DB               	movwf	??_getLoad_AD
  3338  0E8C  085B               	movf	??_getLoad_AD,w
  3339  0E8D  07E1               	addwf	getLoad_AD@i,f
  3340  0E8E  2E72               	goto	L6
  3341  0E8F                     __end_of_getLoad_AD:	
  3342                           
  3343                           	psect	text6
  3344  0B0D                     __ptext6:	
  3345 ;; *************** function _getCDS_AD *****************
  3346 ;; Defined at:
  3347 ;;		line 48 in file "../src/CDS_B1.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  channel1        1    wreg     unsigned char 
  3350 ;;  channel2        1    1[BANK0 ] unsigned char 
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  channel1        1    6[BANK0 ] unsigned char 
  3353 ;;  j               1    5[BANK0 ] unsigned char 
  3354 ;;  i               1    4[BANK0 ] unsigned char 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;		None               void
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0, pclath, cstack
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3364 ;;      Params:         0       1       0       0
  3365 ;;      Locals:         0       3       0       0
  3366 ;;      Temps:          0       2       0       0
  3367 ;;      Totals:         0       6       0       0
  3368 ;;Total ram usage:        6 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    4
  3371 ;; This function calls:
  3372 ;;		_getAD
  3373 ;; This function is called by:
  3374 ;;		_main
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           
  3379                           ;psect for function _getCDS_AD
  3380  0B0D                     _getCDS_AD:	
  3381                           
  3382                           ;incstack = 0
  3383                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3384                           ;getCDS_AD@channel1 stored from wreg
  3385  0B0D  1283               	bcf	3,5	;RP0=0, select bank0
  3386  0B0E  1303               	bcf	3,6	;RP1=0, select bank0
  3387  0B0F  00E0               	movwf	getCDS_AD@channel1
  3388                           
  3389                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3390  0B10  01DE               	clrf	getCDS_AD@i
  3391  0B11  01DF               	clrf	getCDS_AD@j
  3392                           
  3393                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3394  0B12  1DB6               	btfss	__CDS,3
  3395  0B13  0008               	return
  3396                           
  3397                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3398  0B14  14B6               	bsf	__CDS,1
  3399                           
  3400                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3401  0B15  3070               	movlw	112
  3402  0B16  00DC               	movwf	??_getCDS_AD
  3403  0B17  085C               	movf	??_getCDS_AD,w
  3404  0B18  00F9               	movwf	getAD@adcon1
  3405  0B19  0860               	movf	getCDS_AD@channel1,w
  3406  0B1A  158A  22F1  158A   	fcall	_getAD
  3407  0B1D  1283               	bcf	3,5	;RP0=0, select bank0
  3408  0B1E  1303               	bcf	3,6	;RP1=0, select bank0
  3409  0B1F  00DD               	movwf	??_getCDS_AD+1
  3410  0B20  085D               	movf	??_getCDS_AD+1,w
  3411  0B21  00B8               	movwf	__CDS+2
  3412                           
  3413                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3414  0B22  3070               	movlw	112
  3415  0B23  00DC               	movwf	??_getCDS_AD
  3416  0B24  085C               	movf	??_getCDS_AD,w
  3417  0B25  00F9               	movwf	getAD@adcon1
  3418  0B26  085B               	movf	getCDS_AD@channel2,w
  3419  0B27  158A  22F1         	fcall	_getAD
  3420  0B29  1283               	bcf	3,5	;RP0=0, select bank0
  3421  0B2A  1303               	bcf	3,6	;RP1=0, select bank0
  3422  0B2B  00DD               	movwf	??_getCDS_AD+1
  3423  0B2C  085D               	movf	??_getCDS_AD+1,w
  3424  0B2D  00B9               	movwf	__CDS+3
  3425  0B2E  0008               	return
  3426  0B2F                     __end_of_getCDS_AD:	
  3427                           
  3428                           	psect	text7
  3429  0AF1                     __ptext7:	
  3430 ;; *************** function _getAD *****************
  3431 ;; Defined at:
  3432 ;;		line 432 in file "../src/MCU_B1.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  adcon0          1    wreg     unsigned char 
  3435 ;;  adcon1          1    4[COMMON] unsigned char 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  adcon0          1    0[BANK0 ] unsigned char 
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  1    wreg      unsigned char 
  3440 ;; Registers used:
  3441 ;;		wreg, status,2, status,0, pclath, cstack
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3447 ;;      Params:         1       0       0       0
  3448 ;;      Locals:         0       1       0       0
  3449 ;;      Temps:          0       0       0       0
  3450 ;;      Totals:         1       1       0       0
  3451 ;;Total ram usage:        2 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:    3
  3454 ;; This function calls:
  3455 ;;		_Timeout_Counter
  3456 ;;		_set_TimeoutCleared
  3457 ;; This function is called by:
  3458 ;;		_getCDS_AD
  3459 ;;		_getLoad_AD
  3460 ;;		_getTemp_AD
  3461 ;;		_getPIR_AD
  3462 ;; This function uses a non-reentrant model
  3463 ;;
  3464                           
  3465                           
  3466                           ;psect for function _getAD
  3467  0AF1                     _getAD:	
  3468                           
  3469                           ;incstack = 0
  3470                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3471                           ;getAD@adcon0 stored from wreg
  3472  0AF1  1283               	bcf	3,5	;RP0=0, select bank0
  3473  0AF2  1303               	bcf	3,6	;RP1=0, select bank0
  3474  0AF3  00DA               	movwf	getAD@adcon0
  3475                           
  3476                           ;MCU_B1.c: 433: ADCON0 = adcon0;
  3477  0AF4  085A               	movf	getAD@adcon0,w
  3478  0AF5  009F               	movwf	31	;volatile
  3479                           
  3480                           ;MCU_B1.c: 434: ADCON1 = adcon1;
  3481  0AF6  0879               	movf	getAD@adcon1,w
  3482  0AF7  1683               	bsf	3,5	;RP0=1, select bank1
  3483  0AF8  1303               	bcf	3,6	;RP1=0, select bank1
  3484  0AF9  009F               	movwf	31	;volatile
  3485                           
  3486                           ;MCU_B1.c: 435: GO_nDONE = 1;
  3487  0AFA  1283               	bcf	3,5	;RP0=0, select bank0
  3488  0AFB  1303               	bcf	3,6	;RP1=0, select bank0
  3489  0AFC  149F               	bsf	31,1	;volatile
  3490                           
  3491                           ;MCU_B1.c: 436: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3492  0AFD  2B01               	goto	l6513
  3493  0AFE                     l6511:	
  3494                           
  3495                           ;MCU_B1.c: 437: Timeout_Counter();
  3496  0AFE  158A  21BF  158A   	fcall	_Timeout_Counter
  3497  0B01                     l6513:	
  3498  0B01  1283               	bcf	3,5	;RP0=0, select bank0
  3499  0B02  1303               	bcf	3,6	;RP1=0, select bank0
  3500  0B03  1C9F               	btfss	31,1	;volatile
  3501  0B04  2B07               	goto	l6517
  3502  0B05  1D33               	btfss	_myMain+2,2
  3503  0B06  2AFE               	goto	l6511
  3504  0B07                     l6517:	
  3505                           
  3506                           ;MCU_B1.c: 438: };
  3507                           ;MCU_B1.c: 439: set_TimeoutCleared();
  3508  0B07  158A  20B7         	fcall	_set_TimeoutCleared
  3509                           
  3510                           ;MCU_B1.c: 440: return ADRES;
  3511  0B09  1283               	bcf	3,5	;RP0=0, select bank0
  3512  0B0A  1303               	bcf	3,6	;RP1=0, select bank0
  3513  0B0B  081E               	movf	30,w	;volatile
  3514  0B0C  0008               	return
  3515  0B0D                     __end_of_getAD:	
  3516                           
  3517                           	psect	text8
  3518  0976                     __ptext8:	
  3519 ;; *************** function _WDT_Main *****************
  3520 ;; Defined at:
  3521 ;;		line 1103 in file "../src/MCU_B1.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;		None
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;		None
  3526 ;; Return value:  Size  Location     Type
  3527 ;;		None               void
  3528 ;; Registers used:
  3529 ;;		wreg, status,2, status,0, pclath, cstack
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3535 ;;      Params:         0       0       0       0
  3536 ;;      Locals:         0       0       0       0
  3537 ;;      Temps:          1       0       0       0
  3538 ;;      Totals:         1       0       0       0
  3539 ;;Total ram usage:        1 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    3
  3542 ;; This function calls:
  3543 ;;		_WDT_Clearing
  3544 ;; This function is called by:
  3545 ;;		_main
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           
  3550                           ;psect for function _WDT_Main
  3551  0976                     _WDT_Main:	
  3552                           
  3553                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  3554                           
  3555                           ;incstack = 0
  3556                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3557  0976  1283               	bcf	3,5	;RP0=0, select bank0
  3558  0977  1303               	bcf	3,6	;RP1=0, select bank0
  3559  0978  1C3D               	btfss	_WDT,0
  3560  0979  0008               	return
  3561                           
  3562                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  3563  097A  3001               	movlw	1
  3564  097B  02BE               	subwf	_WDT+1,f
  3565  097C  083E               	movf	_WDT+1,w
  3566  097D  3AFF               	xorlw	255
  3567  097E  1903               	skipnz
  3568  097F  0008               	return
  3569                           
  3570                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  3571  0980  3064               	movlw	100
  3572  0981  00F9               	movwf	??_WDT_Main
  3573  0982  0879               	movf	??_WDT_Main,w
  3574  0983  00BE               	movwf	_WDT+1
  3575                           
  3576                           ;MCU_B1.c: 1107: WDT_Clearing();
  3577  0984  118A  2002         	fcall	_WDT_Clearing
  3578  0986  0008               	return
  3579  0987                     __end_of_WDT_Main:	
  3580                           
  3581                           	psect	text9
  3582  0002                     __ptext9:	
  3583 ;; *************** function _WDT_Clearing *****************
  3584 ;; Defined at:
  3585 ;;		line 1113 in file "../src/MCU_B1.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;		None
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;		None
  3590 ;; Return value:  Size  Location     Type
  3591 ;;		None               void
  3592 ;; Registers used:
  3593 ;;		None
  3594 ;; Tracked objects:
  3595 ;;		On entry : 0/0
  3596 ;;		On exit  : 0/0
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3599 ;;      Params:         0       0       0       0
  3600 ;;      Locals:         0       0       0       0
  3601 ;;      Temps:          0       0       0       0
  3602 ;;      Totals:         0       0       0       0
  3603 ;;Total ram usage:        0 bytes
  3604 ;; Hardware stack levels used:    1
  3605 ;; Hardware stack levels required when called:    2
  3606 ;; This function calls:
  3607 ;;		Nothing
  3608 ;; This function is called by:
  3609 ;;		_WDT_Main
  3610 ;; This function uses a non-reentrant model
  3611 ;;
  3612                           
  3613                           
  3614                           ;psect for function _WDT_Clearing
  3615  0002                     _WDT_Clearing:	
  3616                           
  3617                           ;incstack = 0
  3618                           ; Regs used in _WDT_Clearing: []
  3619  0002  0064               	clrwdt	;# 
  3620  0003  0008               	return
  3621  0004                     __end_of_WDT_Clearing:	
  3622                           
  3623                           	psect	text10
  3624  0893                     __ptext10:	
  3625 ;; *************** function _Temp_Main *****************
  3626 ;; Defined at:
  3627 ;;		line 52 in file "../src/OverTemperature_B1.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;		None
  3630 ;; Auto vars:     Size  Location     Type
  3631 ;;		None
  3632 ;; Return value:  Size  Location     Type
  3633 ;;		None               void
  3634 ;; Registers used:
  3635 ;;		wreg, status,2, status,0, pclath, cstack
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3641 ;;      Params:         0       0       0       0
  3642 ;;      Locals:         0       0       0       0
  3643 ;;      Temps:          0       0       0       0
  3644 ;;      Totals:         0       0       0       0
  3645 ;;Total ram usage:        0 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    5
  3648 ;; This function calls:
  3649 ;;		_setTemp_Main
  3650 ;; This function is called by:
  3651 ;;		_main
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           
  3656                           ;psect for function _Temp_Main
  3657  0893                     _Temp_Main:	
  3658                           
  3659                           ;OverTemperature_B1.c: 54: setTemp_Main();
  3660                           
  3661                           ;incstack = 0
  3662                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3663  0893  158A  2769         	fcall	_setTemp_Main
  3664  0895  0008               	return
  3665  0896                     __end_of_Temp_Main:	
  3666                           
  3667                           	psect	text11
  3668  0F69                     __ptext11:	
  3669 ;; *************** function _setTemp_Main *****************
  3670 ;; Defined at:
  3671 ;;		line 59 in file "../src/OverTemperature_B1.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;		None
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  AD              1   16[BANK0 ] unsigned char 
  3676 ;;  DangerValue     1   15[BANK0 ] unsigned char 
  3677 ;;  SafeValue       1   14[BANK0 ] unsigned char 
  3678 ;;  error           1   13[BANK0 ] unsigned char 
  3679 ;; Return value:  Size  Location     Type
  3680 ;;		None               void
  3681 ;; Registers used:
  3682 ;;		wreg, status,2, status,0, pclath, cstack
  3683 ;; Tracked objects:
  3684 ;;		On entry : 0/0
  3685 ;;		On exit  : 0/0
  3686 ;;		Unchanged: 0/0
  3687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3688 ;;      Params:         0       0       0       0
  3689 ;;      Locals:         0       4       0       0
  3690 ;;      Temps:          0       1       0       0
  3691 ;;      Totals:         0       5       0       0
  3692 ;;Total ram usage:        5 bytes
  3693 ;; Hardware stack levels used:    1
  3694 ;; Hardware stack levels required when called:    4
  3695 ;; This function calls:
  3696 ;;		___awdiv
  3697 ;;		_getMain_All_Error_Status
  3698 ;;		_getMain_All_LightsStatus
  3699 ;;		_setBuz
  3700 ;; This function is called by:
  3701 ;;		_Temp_Main
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           
  3706                           ;psect for function _setTemp_Main
  3707  0F69                     _setTemp_Main:	
  3708                           
  3709                           ;OverTemperature_B1.c: 60: char error = getMain_All_Error_Status(0);
  3710                           
  3711                           ;incstack = 0
  3712                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3713  0F69  3000               	movlw	0
  3714  0F6A  158A  249A  158A   	fcall	_getMain_All_Error_Status
  3715  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  3716  0F6E  1303               	bcf	3,6	;RP1=0, select bank0
  3717  0F6F  00E6               	movwf	??_setTemp_Main
  3718  0F70  0866               	movf	??_setTemp_Main,w
  3719  0F71  00E7               	movwf	setTemp_Main@error
  3720                           
  3721                           ;OverTemperature_B1.c: 61: ADtype SafeValue = 0, DangerValue = 0, AD;
  3722  0F72  01E8               	clrf	setTemp_Main@SafeValue
  3723  0F73  01E9               	clrf	setTemp_Main@DangerValue
  3724                           
  3725                           ;OverTemperature_B1.c: 62: if (Temp.Enable == 1) {
  3726  0F74  1C42               	btfss	_Temp,0
  3727  0F75  2FFC               	goto	l975
  3728                           
  3729                           ;OverTemperature_B1.c: 69: if (Temp.ADtoGO == 0) {
  3730  0F76  1942               	btfsc	_Temp,2
  3731  0F77  2F89               	goto	l6589
  3732                           
  3733                           ;OverTemperature_B1.c: 70: Temp.Time++;
  3734  0F78  3001               	movlw	1
  3735  0F79  07C3               	addwf	_Temp+1,f
  3736  0F7A  1803               	skipnc
  3737  0F7B  0AC4               	incf	_Temp+2,f
  3738  0F7C  3000               	movlw	0
  3739  0F7D  07C4               	addwf	_Temp+2,f
  3740                           
  3741                           ;OverTemperature_B1.c: 71: if (Temp.Time >= (5000 / 20)) {
  3742  0F7E  3000               	movlw	0
  3743  0F7F  0244               	subwf	_Temp+2,w
  3744  0F80  30FA               	movlw	250
  3745  0F81  1903               	skipnz
  3746  0F82  0243               	subwf	_Temp+1,w
  3747  0F83  1C03               	skipc
  3748  0F84  0008               	return
  3749                           
  3750                           ;OverTemperature_B1.c: 72: Temp.Time = 0;
  3751  0F85  01C3               	clrf	_Temp+1
  3752  0F86  01C4               	clrf	_Temp+2
  3753                           
  3754                           ;OverTemperature_B1.c: 73: Temp.ADtoGO = 1;
  3755  0F87  1542               	bsf	_Temp,2
  3756                           
  3757                           ;OverTemperature_B1.c: 74: }
  3758                           ;OverTemperature_B1.c: 75: } else {
  3759  0F88  0008               	return
  3760  0F89                     l6589:	
  3761                           
  3762                           ;OverTemperature_B1.c: 76: Temp.Time++;
  3763  0F89  3001               	movlw	1
  3764  0F8A  07C3               	addwf	_Temp+1,f
  3765  0F8B  1803               	skipnc
  3766  0F8C  0AC4               	incf	_Temp+2,f
  3767  0F8D  3000               	movlw	0
  3768  0F8E  07C4               	addwf	_Temp+2,f
  3769                           
  3770                           ;OverTemperature_B1.c: 77: if (Temp.Time >= (40 / 20)) {
  3771  0F8F  3000               	movlw	0
  3772  0F90  0244               	subwf	_Temp+2,w
  3773  0F91  3002               	movlw	2
  3774  0F92  1903               	skipnz
  3775  0F93  0243               	subwf	_Temp+1,w
  3776  0F94  1C03               	skipc
  3777  0F95  0008               	return
  3778                           
  3779                           ;OverTemperature_B1.c: 78: Temp.Time = 0;
  3780  0F96  01C3               	clrf	_Temp+1
  3781  0F97  01C4               	clrf	_Temp+2
  3782                           
  3783                           ;OverTemperature_B1.c: 80: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  3784  0F98  0846               	movf	_Temp+4,w
  3785  0F99  1903               	btfsc	3,2
  3786  0F9A  2FF7               	goto	l980
  3787  0F9B  0847               	movf	_Temp+5,w
  3788  0F9C  1903               	btfsc	3,2
  3789  0F9D  2FF7               	goto	l980
  3790                           
  3791                           ;OverTemperature_B1.c: 81: Temp.ADtoGO = 0;
  3792  0F9E  1142               	bcf	_Temp,2
  3793                           
  3794                           ;OverTemperature_B1.c: 82: AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3795  0F9F  3002               	movlw	2
  3796  0FA0  00DA               	movwf	___awdiv@divisor
  3797  0FA1  3000               	movlw	0
  3798  0FA2  00DB               	movwf	___awdiv@divisor+1
  3799  0FA3  0846               	movf	_Temp+4,w
  3800  0FA4  0747               	addwf	_Temp+5,w
  3801  0FA5  00DC               	movwf	___awdiv@dividend
  3802  0FA6  01DD               	clrf	___awdiv@dividend+1
  3803  0FA7  0DDD               	rlf	___awdiv@dividend+1,f
  3804  0FA8  158A  268F  158A   	fcall	___awdiv
  3805  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  3806  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  3807  0FAD  085A               	movf	?___awdiv,w
  3808  0FAE  00E6               	movwf	??_setTemp_Main
  3809  0FAF  0866               	movf	??_setTemp_Main,w
  3810  0FB0  00EA               	movwf	setTemp_Main@AD
  3811                           
  3812                           ;OverTemperature_B1.c: 85: if (getMain_All_LightsStatus() == 1) {
  3813  0FB1  158A  2155  158A   	fcall	_getMain_All_LightsStatus
  3814  0FB4  3A01               	xorlw	1
  3815  0FB5  1D03               	skipz
  3816  0FB6  2FBF               	goto	l6603
  3817                           
  3818                           ;OverTemperature_B1.c: 86: SafeValue = 0x85;
  3819  0FB7  3085               	movlw	133
  3820  0FB8  1283               	bcf	3,5	;RP0=0, select bank0
  3821  0FB9  1303               	bcf	3,6	;RP1=0, select bank0
  3822  0FBA  00E6               	movwf	??_setTemp_Main
  3823  0FBB  0866               	movf	??_setTemp_Main,w
  3824  0FBC  00E8               	movwf	setTemp_Main@SafeValue
  3825                           
  3826                           ;OverTemperature_B1.c: 87: DangerValue = 0x70;
  3827  0FBD  3070               	movlw	112
  3828  0FBE  2FC6               	goto	L7
  3829  0FBF                     l6603:	
  3830                           ;OverTemperature_B1.c: 88: } else {
  3831                           
  3832                           
  3833                           ;OverTemperature_B1.c: 89: SafeValue = 0x4f;
  3834  0FBF  304F               	movlw	79
  3835  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  3836  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  3837  0FC2  00E6               	movwf	??_setTemp_Main
  3838  0FC3  0866               	movf	??_setTemp_Main,w
  3839  0FC4  00E8               	movwf	setTemp_Main@SafeValue
  3840                           
  3841                           ;OverTemperature_B1.c: 90: DangerValue = 0x40;
  3842  0FC5  3040               	movlw	64
  3843  0FC6                     L7:	
  3844  0FC6  00E6               	movwf	??_setTemp_Main
  3845  0FC7  0866               	movf	??_setTemp_Main,w
  3846  0FC8  00E9               	movwf	setTemp_Main@DangerValue
  3847                           
  3848                           ;OverTemperature_B1.c: 91: }
  3849                           ;OverTemperature_B1.c: 103: if (Temp.ERROR == 1) {
  3850  0FC9  1CC2               	btfss	_Temp,1
  3851  0FCA  2FE7               	goto	l6621
  3852                           
  3853                           ;OverTemperature_B1.c: 104: if (AD >= SafeValue) {
  3854  0FCB  0868               	movf	setTemp_Main@SafeValue,w
  3855  0FCC  026A               	subwf	setTemp_Main@AD,w
  3856  0FCD  1C03               	skipc
  3857  0FCE  2FE4               	goto	l6619
  3858                           
  3859                           ;OverTemperature_B1.c: 105: Temp.Count++;
  3860  0FCF  3001               	movlw	1
  3861  0FD0  00E6               	movwf	??_setTemp_Main
  3862  0FD1  0866               	movf	??_setTemp_Main,w
  3863  0FD2  07C5               	addwf	_Temp+3,f
  3864                           
  3865                           ;OverTemperature_B1.c: 106: if (Temp.Count >= 3) {
  3866  0FD3  3003               	movlw	3
  3867  0FD4  0245               	subwf	_Temp+3,w
  3868  0FD5  1C03               	skipc
  3869  0FD6  2FF7               	goto	l980
  3870                           
  3871                           ;OverTemperature_B1.c: 107: Temp.Count = 0;
  3872  0FD7  01C5               	clrf	_Temp+3
  3873                           
  3874                           ;OverTemperature_B1.c: 108: Temp.ERROR = 0;
  3875  0FD8  10C2               	bcf	_Temp,1
  3876                           
  3877                           ;OverTemperature_B1.c: 109: setBuz(2, 100);
  3878  0FD9  3064               	movlw	100
  3879  0FDA  00E2               	movwf	setBuz@time
  3880  0FDB  3000               	movlw	0
  3881  0FDC  00E3               	movwf	setBuz@time+1
  3882  0FDD  3002               	movlw	2
  3883  0FDE  158A  259E  158A   	fcall	_setBuz
  3884                           
  3885                           ;OverTemperature_B1.c: 110: }
  3886                           ;OverTemperature_B1.c: 111: } else {
  3887  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  3888  0FE2  1303               	bcf	3,6	;RP1=0, select bank0
  3889  0FE3  2FF7               	goto	l980
  3890  0FE4                     l6619:	
  3891                           
  3892                           ;OverTemperature_B1.c: 112: Temp.Count = 0;
  3893  0FE4  1283               	bcf	3,5	;RP0=0, select bank0
  3894  0FE5  1303               	bcf	3,6	;RP1=0, select bank0
  3895  0FE6  2FF6               	goto	l6631
  3896  0FE7                     l6621:	
  3897                           ;OverTemperature_B1.c: 113: }
  3898                           ;OverTemperature_B1.c: 114: } else {
  3899                           
  3900                           
  3901                           ;OverTemperature_B1.c: 115: if (AD <= DangerValue) {
  3902  0FE7  086A               	movf	setTemp_Main@AD,w
  3903  0FE8  0269               	subwf	setTemp_Main@DangerValue,w
  3904  0FE9  1C03               	skipc
  3905  0FEA  2FF6               	goto	l6631
  3906                           
  3907                           ;OverTemperature_B1.c: 116: Temp.Count++;
  3908  0FEB  3001               	movlw	1
  3909  0FEC  00E6               	movwf	??_setTemp_Main
  3910  0FED  0866               	movf	??_setTemp_Main,w
  3911  0FEE  07C5               	addwf	_Temp+3,f
  3912                           
  3913                           ;OverTemperature_B1.c: 117: if (Temp.Count >= 3) {
  3914  0FEF  3003               	movlw	3
  3915  0FF0  0245               	subwf	_Temp+3,w
  3916  0FF1  1C03               	skipc
  3917  0FF2  2FF7               	goto	l980
  3918                           
  3919                           ;OverTemperature_B1.c: 118: Temp.Count = 0;
  3920  0FF3  01C5               	clrf	_Temp+3
  3921                           
  3922                           ;OverTemperature_B1.c: 119: Temp.ERROR = 1;
  3923  0FF4  14C2               	bsf	_Temp,1
  3924                           
  3925                           ;OverTemperature_B1.c: 120: }
  3926                           ;OverTemperature_B1.c: 121: } else {
  3927  0FF5  2FF7               	goto	l980
  3928  0FF6                     l6631:	
  3929                           
  3930                           ;OverTemperature_B1.c: 122: Temp.Count = 0;
  3931  0FF6  01C5               	clrf	_Temp+3
  3932  0FF7                     l980:	
  3933                           ;OverTemperature_B1.c: 123: }
  3934                           ;OverTemperature_B1.c: 124: }
  3935                           ;OverTemperature_B1.c: 125: ;;
  3936                           ;OverTemperature_B1.c: 126: ;;
  3937                           
  3938                           
  3939                           ;OverTemperature_B1.c: 142: }
  3940                           ;OverTemperature_B1.c: 143: Temp.ADH[0] = 0;
  3941  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  3942  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  3943  0FF9  01C6               	clrf	_Temp+4
  3944                           
  3945                           ;OverTemperature_B1.c: 144: Temp.ADH[1] = 0;
  3946  0FFA  01C7               	clrf	_Temp+5
  3947                           
  3948                           ;OverTemperature_B1.c: 145: }
  3949                           ;OverTemperature_B1.c: 146: }
  3950                           ;OverTemperature_B1.c: 148: } else {
  3951  0FFB  0008               	return
  3952  0FFC                     l975:	
  3953                           
  3954                           ;OverTemperature_B1.c: 149: if (myMain.PowerON == 1) {
  3955  0FFC  1C31               	btfss	_myMain,0
  3956  0FFD  0008               	return
  3957                           
  3958                           ;OverTemperature_B1.c: 150: Temp.Enable = 1;
  3959  0FFE  1442               	bsf	_Temp,0
  3960  0FFF  0008               	return
  3961  1000                     __end_of_setTemp_Main:	
  3962                           
  3963                           	psect	text12
  3964  0890                     __ptext12:	
  3965 ;; *************** function _Temp_Initialization *****************
  3966 ;; Defined at:
  3967 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;		None
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;		None
  3972 ;; Return value:  Size  Location     Type
  3973 ;;		None               void
  3974 ;; Registers used:
  3975 ;;		status,2, status,0, pclath, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3981 ;;      Params:         0       0       0       0
  3982 ;;      Locals:         0       0       0       0
  3983 ;;      Temps:          0       0       0       0
  3984 ;;      Totals:         0       0       0       0
  3985 ;;Total ram usage:        0 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    3
  3988 ;; This function calls:
  3989 ;;		_setTemp_Initialization
  3990 ;; This function is called by:
  3991 ;;		_main
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           
  3996                           ;psect for function _Temp_Initialization
  3997  0890                     _Temp_Initialization:	
  3998                           
  3999                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  4000                           
  4001                           ;incstack = 0
  4002                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4003  0890  158A  2086         	fcall	_setTemp_Initialization
  4004  0892  0008               	return
  4005  0893                     __end_of_Temp_Initialization:	
  4006                           
  4007                           	psect	text13
  4008  0886                     __ptext13:	
  4009 ;; *************** function _setTemp_Initialization *****************
  4010 ;; Defined at:
  4011 ;;		line 47 in file "../src/OverTemperature_B1.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;		None
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;		None
  4016 ;; Return value:  Size  Location     Type
  4017 ;;		None               void
  4018 ;; Registers used:
  4019 ;;		None
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4025 ;;      Params:         0       0       0       0
  4026 ;;      Locals:         0       0       0       0
  4027 ;;      Temps:          0       0       0       0
  4028 ;;      Totals:         0       0       0       0
  4029 ;;Total ram usage:        0 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    2
  4032 ;; This function calls:
  4033 ;;		Nothing
  4034 ;; This function is called by:
  4035 ;;		_Temp_Initialization
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           
  4040                           ;psect for function _setTemp_Initialization
  4041  0886                     _setTemp_Initialization:	
  4042                           
  4043                           ;incstack = 0
  4044                           ; Regs used in _setTemp_Initialization: []
  4045  0886  0008               	return
  4046  0887                     __end_of_setTemp_Initialization:	
  4047                           
  4048                           	psect	text14
  4049  08F6                     __ptext14:	
  4050 ;; *************** function _Switch_Main *****************
  4051 ;; Defined at:
  4052 ;;		line 76 in file "../src/Switch_B1.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;		None
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;		None               void
  4059 ;; Registers used:
  4060 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4066 ;;      Params:         0       0       0       0
  4067 ;;      Locals:         0       0       0       0
  4068 ;;      Temps:          0       0       0       0
  4069 ;;      Totals:         0       0       0       0
  4070 ;;Total ram usage:        0 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    6
  4073 ;; This function calls:
  4074 ;;		_TouchPower
  4075 ;;		_setSw_Main
  4076 ;; This function is called by:
  4077 ;;		_main
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           
  4082                           ;psect for function _Switch_Main
  4083  08F6                     _Switch_Main:	
  4084                           
  4085                           ;Switch_B1.c: 79: setSw_Main(1);
  4086                           
  4087                           ;incstack = 0
  4088                           ; Regs used in _Switch_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4089  08F6  3001               	movlw	1
  4090  08F7  118A  2395  158A   	fcall	_setSw_Main
  4091                           
  4092                           ;Switch_B1.c: 83: setSw_Main(2);
  4093  08FA  3002               	movlw	2
  4094  08FB  118A  2395  158A   	fcall	_setSw_Main
  4095                           
  4096                           ;Switch_B1.c: 91: TouchPower();
  4097  08FE  158A  21D3         	fcall	_TouchPower
  4098  0900  0008               	return
  4099  0901                     __end_of_Switch_Main:	
  4100                           
  4101                           	psect	text15
  4102  0395                     __ptext15:	
  4103 ;; *************** function _setSw_Main *****************
  4104 ;; Defined at:
  4105 ;;		line 117 in file "../src/Switch_B1.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;  sw              1    wreg     unsigned char 
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;  sw              1   10[BANK0 ] unsigned char 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;		None               void
  4112 ;; Registers used:
  4113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4119 ;;      Params:         0       0       0       0
  4120 ;;      Locals:         0       1       0       0
  4121 ;;      Temps:          0       4       0       0
  4122 ;;      Totals:         0       5       0       0
  4123 ;;Total ram usage:        5 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    5
  4126 ;; This function calls:
  4127 ;;		_SwPointSelect
  4128 ;;		_getMain_All_Error_Status
  4129 ;;		_getSw_KeyStatus
  4130 ;;		_setLED
  4131 ;;		_setLights_SwOff
  4132 ;;		_setLights_SwOn
  4133 ;; This function is called by:
  4134 ;;		_Switch_Main
  4135 ;; This function uses a non-reentrant model
  4136 ;;
  4137                           
  4138                           
  4139                           ;psect for function _setSw_Main
  4140  0395                     _setSw_Main:	
  4141                           
  4142                           ;incstack = 0
  4143                           ; Regs used in _setSw_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4144                           ;setSw_Main@sw stored from wreg
  4145  0395  1283               	bcf	3,5	;RP0=0, select bank0
  4146  0396  1303               	bcf	3,6	;RP1=0, select bank0
  4147  0397  00E4               	movwf	setSw_Main@sw
  4148                           
  4149                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4150  0398  0864               	movf	setSw_Main@sw,w
  4151  0399  158A  21AC  118A   	fcall	_SwPointSelect
  4152                           
  4153                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4154  039C  0870               	movf	_Sw,w
  4155  039D  0084               	movwf	4
  4156  039E  1783               	bsf	3,7
  4157  039F  1C71               	btfss	_Sw+1,0
  4158  03A0  1383               	bcf	3,7
  4159  03A1  1C00               	btfss	0,0
  4160  03A2  2CD9               	goto	l1445
  4161                           
  4162                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  4163  03A3  3000               	movlw	0
  4164  03A4  158A  249A  118A   	fcall	_getMain_All_Error_Status
  4165  03A7  3800               	iorlw	0
  4166  03A8  1D03               	skipz
  4167  03A9  2BD0               	goto	l6659
  4168                           
  4169                           ;Switch_B1.c: 122: Sw->Detect = 0;
  4170  03AA  3001               	movlw	1
  4171  03AB  0770               	addwf	_Sw,w
  4172  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  4173  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  4174  03AE  00E0               	movwf	??_setSw_Main
  4175  03AF  0871               	movf	_Sw+1,w
  4176  03B0  1803               	skipnc
  4177  03B1  3E01               	addlw	1
  4178  03B2  00E1               	movwf	??_setSw_Main+1
  4179  03B3  0860               	movf	??_setSw_Main,w
  4180  03B4  0084               	movwf	4
  4181  03B5  1783               	bsf	3,7
  4182  03B6  1C61               	btfss	??_setSw_Main+1,0
  4183  03B7  1383               	bcf	3,7
  4184  03B8  1080               	bcf	0,1
  4185                           
  4186                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  4187  03B9  0864               	movf	setSw_Main@sw,w
  4188  03BA  158A  2288  118A   	fcall	_getSw_KeyStatus
  4189  03BD  3A01               	xorlw	1
  4190  03BE  3000               	movlw	0
  4191  03BF  1903               	skipnz
  4192  03C0  3001               	movlw	1
  4193  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  4194  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  4195  03C3  00E0               	movwf	??_setSw_Main
  4196  03C4  0870               	movf	_Sw,w
  4197  03C5  0084               	movwf	4
  4198  03C6  1783               	bsf	3,7
  4199  03C7  1C71               	btfss	_Sw+1,0
  4200  03C8  1383               	bcf	3,7
  4201  03C9  0DE0               	rlf	??_setSw_Main,f
  4202  03CA  0800               	movf	0,w
  4203  03CB  0660               	xorwf	??_setSw_Main,w
  4204  03CC  39FD               	andlw	-3
  4205  03CD  0660               	xorwf	??_setSw_Main,w
  4206  03CE  0080               	movwf	0
  4207                           
  4208                           ;Switch_B1.c: 124: } else {
  4209  03CF  2BF9               	goto	l6667
  4210  03D0                     l6659:	
  4211                           
  4212                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  4213  03D0  3001               	movlw	1
  4214  03D1  0770               	addwf	_Sw,w
  4215  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  4216  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  4217  03D4  00E0               	movwf	??_setSw_Main
  4218  03D5  0871               	movf	_Sw+1,w
  4219  03D6  1803               	skipnc
  4220  03D7  3E01               	addlw	1
  4221  03D8  00E1               	movwf	??_setSw_Main+1
  4222  03D9  0860               	movf	??_setSw_Main,w
  4223  03DA  0084               	movwf	4
  4224  03DB  1783               	bsf	3,7
  4225  03DC  1C61               	btfss	??_setSw_Main+1,0
  4226  03DD  1383               	bcf	3,7
  4227  03DE  1880               	btfsc	0,1
  4228  03DF  2BF9               	goto	l6667
  4229                           
  4230                           ;Switch_B1.c: 126: Sw->Detect = 1;
  4231  03E0  3001               	movlw	1
  4232  03E1  0770               	addwf	_Sw,w
  4233  03E2  00E0               	movwf	??_setSw_Main
  4234  03E3  0871               	movf	_Sw+1,w
  4235  03E4  1803               	skipnc
  4236  03E5  3E01               	addlw	1
  4237  03E6  00E1               	movwf	??_setSw_Main+1
  4238  03E7  0860               	movf	??_setSw_Main,w
  4239  03E8  0084               	movwf	4
  4240  03E9  1783               	bsf	3,7
  4241  03EA  1C61               	btfss	??_setSw_Main+1,0
  4242  03EB  1383               	bcf	3,7
  4243  03EC  1480               	bsf	0,1
  4244                           
  4245                           ;Switch_B1.c: 128: Sw->Touch = 0;
  4246  03ED  0870               	movf	_Sw,w
  4247  03EE  0084               	movwf	4
  4248  03EF  1783               	bsf	3,7
  4249  03F0  1C71               	btfss	_Sw+1,0
  4250  03F1  1383               	bcf	3,7
  4251  03F2  1080               	bcf	0,1
  4252                           
  4253                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  4254  03F3  0870               	movf	_Sw,w
  4255  03F4  0084               	movwf	4
  4256  03F5  1783               	bsf	3,7
  4257  03F6  1C71               	btfss	_Sw+1,0
  4258  03F7  1383               	bcf	3,7
  4259  03F8  1500               	bsf	0,2
  4260  03F9                     l6667:	
  4261                           
  4262                           ;Switch_B1.c: 130: }
  4263                           ;Switch_B1.c: 131: }
  4264                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  4265  03F9  0870               	movf	_Sw,w
  4266  03FA  0084               	movwf	4
  4267  03FB  1783               	bsf	3,7
  4268  03FC  1C71               	btfss	_Sw+1,0
  4269  03FD  1383               	bcf	3,7
  4270  03FE  1C80               	btfss	0,1
  4271  03FF  2C86               	goto	l6687
  4272                           
  4273                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  4274  0400  0870               	movf	_Sw,w
  4275  0401  0084               	movwf	4
  4276  0402  1783               	bsf	3,7
  4277  0403  1C71               	btfss	_Sw+1,0
  4278  0404  1383               	bcf	3,7
  4279  0405  1900               	btfsc	0,2
  4280  0406  2C3E               	goto	l6679
  4281                           
  4282                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  4283  0407  3001               	movlw	1
  4284  0408  00E0               	movwf	??_setSw_Main
  4285  0409  3002               	movlw	2
  4286  040A  0770               	addwf	_Sw,w
  4287  040B  00E1               	movwf	??_setSw_Main+1
  4288  040C  0871               	movf	_Sw+1,w
  4289  040D  1803               	skipnc
  4290  040E  3E01               	addlw	1
  4291  040F  00E2               	movwf	??_setSw_Main+2
  4292  0410  0861               	movf	??_setSw_Main+1,w
  4293  0411  0084               	movwf	4
  4294  0412  1783               	bsf	3,7
  4295  0413  1C62               	btfss	??_setSw_Main+2,0
  4296  0414  1383               	bcf	3,7
  4297  0415  0860               	movf	??_setSw_Main,w
  4298  0416  0780               	addwf	0,f
  4299                           
  4300                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  4301  0417  3002               	movlw	2
  4302  0418  0770               	addwf	_Sw,w
  4303  0419  00E0               	movwf	??_setSw_Main
  4304  041A  0871               	movf	_Sw+1,w
  4305  041B  1803               	skipnc
  4306  041C  3E01               	addlw	1
  4307  041D  00E1               	movwf	??_setSw_Main+1
  4308  041E  0860               	movf	??_setSw_Main,w
  4309  041F  0084               	movwf	4
  4310  0420  1783               	bsf	3,7
  4311  0421  1C61               	btfss	??_setSw_Main+1,0
  4312  0422  1383               	bcf	3,7
  4313  0423  3003               	movlw	3
  4314  0424  0200               	subwf	0,w
  4315  0425  1C03               	skipc
  4316  0426  0008               	return
  4317                           
  4318                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  4319  0427  3002               	movlw	2
  4320  0428  0770               	addwf	_Sw,w
  4321  0429  00E0               	movwf	??_setSw_Main
  4322  042A  0871               	movf	_Sw+1,w
  4323  042B  1803               	skipnc
  4324  042C  3E01               	addlw	1
  4325  042D  00E1               	movwf	??_setSw_Main+1
  4326  042E  0860               	movf	??_setSw_Main,w
  4327  042F  0084               	movwf	4
  4328  0430  1783               	bsf	3,7
  4329  0431  1C61               	btfss	??_setSw_Main+1,0
  4330  0432  1383               	bcf	3,7
  4331  0433  0180               	clrf	0
  4332                           
  4333                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  4334  0434  0870               	movf	_Sw,w
  4335  0435  0084               	movwf	4
  4336  0436  1783               	bsf	3,7
  4337  0437  1C71               	btfss	_Sw+1,0
  4338  0438  1383               	bcf	3,7
  4339  0439  1500               	bsf	0,2
  4340                           
  4341                           ;Switch_B1.c: 140: setLights_SwOn(sw);
  4342  043A  0864               	movf	setSw_Main@sw,w
  4343  043B  158A  2352         	fcall	_setLights_SwOn
  4344                           
  4345                           ;Switch_B1.c: 146: }
  4346                           ;Switch_B1.c: 147: } else {
  4347  043D  0008               	return
  4348  043E                     l6679:	
  4349                           
  4350                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  4351  043E  0870               	movf	_Sw,w
  4352  043F  0084               	movwf	4
  4353  0440  1783               	bsf	3,7
  4354  0441  1C71               	btfss	_Sw+1,0
  4355  0442  1383               	bcf	3,7
  4356  0443  1980               	btfsc	0,3
  4357  0444  0008               	return
  4358                           
  4359                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  4360  0445  3003               	movlw	3
  4361  0446  0770               	addwf	_Sw,w
  4362  0447  1283               	bcf	3,5	;RP0=0, select bank0
  4363  0448  1303               	bcf	3,6	;RP1=0, select bank0
  4364  0449  00E0               	movwf	??_setSw_Main
  4365  044A  0871               	movf	_Sw+1,w
  4366  044B  1803               	skipnc
  4367  044C  3E01               	addlw	1
  4368  044D  00E1               	movwf	??_setSw_Main+1
  4369  044E  0860               	movf	??_setSw_Main,w
  4370  044F  0084               	movwf	4
  4371  0450  1783               	bsf	3,7
  4372  0451  1C61               	btfss	??_setSw_Main+1,0
  4373  0452  1383               	bcf	3,7
  4374  0453  3001               	movlw	1
  4375  0454  0780               	addwf	0,f
  4376  0455  0A84               	incf	4,f
  4377  0456  1803               	skipnc
  4378  0457  0A80               	incf	0,f
  4379                           
  4380                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  4381  0458  3003               	movlw	3
  4382  0459  0770               	addwf	_Sw,w
  4383  045A  00E0               	movwf	??_setSw_Main
  4384  045B  0871               	movf	_Sw+1,w
  4385  045C  1803               	skipnc
  4386  045D  3E01               	addlw	1
  4387  045E  00E1               	movwf	??_setSw_Main+1
  4388  045F  0860               	movf	??_setSw_Main,w
  4389  0460  0084               	movwf	4
  4390  0461  1783               	bsf	3,7
  4391  0462  1C61               	btfss	??_setSw_Main+1,0
  4392  0463  1383               	bcf	3,7
  4393  0464  0800               	movf	0,w
  4394  0465  00E2               	movwf	??_setSw_Main+2
  4395  0466  0A84               	incf	4,f
  4396  0467  0800               	movf	0,w
  4397  0468  00E3               	movwf	??_setSw_Main+3
  4398  0469  3000               	movlw	0
  4399  046A  0263               	subwf	??_setSw_Main+3,w
  4400  046B  304B               	movlw	75
  4401  046C  1903               	skipnz
  4402  046D  0262               	subwf	??_setSw_Main+2,w
  4403  046E  1C03               	skipc
  4404  046F  0008               	return
  4405                           
  4406                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  4407  0470  3003               	movlw	3
  4408  0471  0770               	addwf	_Sw,w
  4409  0472  00E0               	movwf	??_setSw_Main
  4410  0473  0871               	movf	_Sw+1,w
  4411  0474  1803               	skipnc
  4412  0475  3E01               	addlw	1
  4413  0476  00E1               	movwf	??_setSw_Main+1
  4414  0477  0860               	movf	??_setSw_Main,w
  4415  0478  0084               	movwf	4
  4416  0479  1783               	bsf	3,7
  4417  047A  1C61               	btfss	??_setSw_Main+1,0
  4418  047B  1383               	bcf	3,7
  4419  047C  0180               	clrf	0
  4420  047D  0A84               	incf	4,f
  4421  047E  0180               	clrf	0
  4422                           
  4423                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  4424  047F  0870               	movf	_Sw,w
  4425  0480  0084               	movwf	4
  4426  0481  1783               	bsf	3,7
  4427  0482  1C71               	btfss	_Sw+1,0
  4428  0483  1383               	bcf	3,7
  4429  0484  1580               	bsf	0,3
  4430                           
  4431                           ;Switch_B1.c: 194: }
  4432                           ;Switch_B1.c: 195: }
  4433                           ;Switch_B1.c: 196: } else {
  4434                           
  4435                           ;Switch_B1.c: 161: }
  4436                           ;Switch_B1.c: 162: } else {
  4437  0485  0008               	return
  4438  0486                     l6687:	
  4439                           
  4440                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  4441  0486  0870               	movf	_Sw,w
  4442  0487  0084               	movwf	4
  4443  0488  1783               	bsf	3,7
  4444  0489  1C71               	btfss	_Sw+1,0
  4445  048A  1383               	bcf	3,7
  4446  048B  1D00               	btfss	0,2
  4447  048C  0008               	return
  4448                           
  4449                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  4450  048D  3001               	movlw	1
  4451  048E  00E0               	movwf	??_setSw_Main
  4452  048F  3002               	movlw	2
  4453  0490  0770               	addwf	_Sw,w
  4454  0491  00E1               	movwf	??_setSw_Main+1
  4455  0492  0871               	movf	_Sw+1,w
  4456  0493  1803               	skipnc
  4457  0494  3E01               	addlw	1
  4458  0495  00E2               	movwf	??_setSw_Main+2
  4459  0496  0861               	movf	??_setSw_Main+1,w
  4460  0497  0084               	movwf	4
  4461  0498  1783               	bsf	3,7
  4462  0499  1C62               	btfss	??_setSw_Main+2,0
  4463  049A  1383               	bcf	3,7
  4464  049B  0860               	movf	??_setSw_Main,w
  4465  049C  0780               	addwf	0,f
  4466                           
  4467                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  4468  049D  3002               	movlw	2
  4469  049E  0770               	addwf	_Sw,w
  4470  049F  00E0               	movwf	??_setSw_Main
  4471  04A0  0871               	movf	_Sw+1,w
  4472  04A1  1803               	skipnc
  4473  04A2  3E01               	addlw	1
  4474  04A3  00E1               	movwf	??_setSw_Main+1
  4475  04A4  0860               	movf	??_setSw_Main,w
  4476  04A5  0084               	movwf	4
  4477  04A6  1783               	bsf	3,7
  4478  04A7  1C61               	btfss	??_setSw_Main+1,0
  4479  04A8  1383               	bcf	3,7
  4480  04A9  3003               	movlw	3
  4481  04AA  0200               	subwf	0,w
  4482  04AB  1C03               	skipc
  4483  04AC  0008               	return
  4484                           
  4485                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  4486  04AD  3002               	movlw	2
  4487  04AE  0770               	addwf	_Sw,w
  4488  04AF  00E0               	movwf	??_setSw_Main
  4489  04B0  0871               	movf	_Sw+1,w
  4490  04B1  1803               	skipnc
  4491  04B2  3E01               	addlw	1
  4492  04B3  00E1               	movwf	??_setSw_Main+1
  4493  04B4  0860               	movf	??_setSw_Main,w
  4494  04B5  0084               	movwf	4
  4495  04B6  1783               	bsf	3,7
  4496  04B7  1C61               	btfss	??_setSw_Main+1,0
  4497  04B8  1383               	bcf	3,7
  4498  04B9  0180               	clrf	0
  4499                           
  4500                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  4501  04BA  0870               	movf	_Sw,w
  4502  04BB  0084               	movwf	4
  4503  04BC  1783               	bsf	3,7
  4504  04BD  1C71               	btfss	_Sw+1,0
  4505  04BE  1383               	bcf	3,7
  4506  04BF  1100               	bcf	0,2
  4507                           
  4508                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  4509  04C0  3003               	movlw	3
  4510  04C1  0770               	addwf	_Sw,w
  4511  04C2  00E0               	movwf	??_setSw_Main
  4512  04C3  0871               	movf	_Sw+1,w
  4513  04C4  1803               	skipnc
  4514  04C5  3E01               	addlw	1
  4515  04C6  00E1               	movwf	??_setSw_Main+1
  4516  04C7  0860               	movf	??_setSw_Main,w
  4517  04C8  0084               	movwf	4
  4518  04C9  1783               	bsf	3,7
  4519  04CA  1C61               	btfss	??_setSw_Main+1,0
  4520  04CB  1383               	bcf	3,7
  4521  04CC  0180               	clrf	0
  4522  04CD  0A84               	incf	4,f
  4523  04CE  0180               	clrf	0
  4524                           
  4525                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  4526  04CF  0870               	movf	_Sw,w
  4527  04D0  0084               	movwf	4
  4528  04D1  1783               	bsf	3,7
  4529  04D2  1C71               	btfss	_Sw+1,0
  4530  04D3  1383               	bcf	3,7
  4531  04D4  1180               	bcf	0,3
  4532                           
  4533                           ;Switch_B1.c: 211: setLights_SwOff(sw);
  4534  04D5  0864               	movf	setSw_Main@sw,w
  4535  04D6  158A  22A0         	fcall	_setLights_SwOff
  4536                           
  4537                           ;Switch_B1.c: 220: }
  4538                           ;Switch_B1.c: 221: }
  4539                           ;Switch_B1.c: 222: }
  4540                           ;Switch_B1.c: 223: } else {
  4541  04D8  0008               	return
  4542  04D9                     l1445:	
  4543                           
  4544                           ;Switch_B1.c: 224: if (myMain.PowerON == 1) {
  4545  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  4546  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  4547  04DB  1C31               	btfss	_myMain,0
  4548  04DC  0008               	return
  4549                           
  4550                           ;Switch_B1.c: 225: Sw->Enable = 1;
  4551  04DD  0870               	movf	_Sw,w
  4552  04DE  0084               	movwf	4
  4553  04DF  1783               	bsf	3,7
  4554  04E0  1C71               	btfss	_Sw+1,0
  4555  04E1  1383               	bcf	3,7
  4556  04E2  1400               	bsf	0,0
  4557                           
  4558                           ;Switch_B1.c: 227: if (sw == 2) {
  4559  04E3  0864               	movf	setSw_Main@sw,w
  4560  04E4  3A02               	xorlw	2
  4561  04E5  1D03               	skipz
  4562  04E6  0008               	return
  4563                           
  4564                           ;Switch_B1.c: 228: setLED(1, 1);
  4565  04E7  01DB               	clrf	setLED@command
  4566  04E8  0ADB               	incf	setLED@command,f
  4567  04E9  3001               	movlw	1
  4568  04EA  158A  25E5         	fcall	_setLED
  4569  04EC  0008               	return
  4570  04ED                     __end_of_setSw_Main:	
  4571                           
  4572                           	psect	text16
  4573  0A88                     __ptext16:	
  4574 ;; *************** function _getSw_KeyStatus *****************
  4575 ;; Defined at:
  4576 ;;		line 236 in file "../src/Switch_B1.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;  sw              1    wreg     unsigned char 
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;  sw              1    1[BANK0 ] unsigned char 
  4581 ;;  status          1    0[BANK0 ] unsigned char 
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  1    wreg      unsigned char 
  4584 ;; Registers used:
  4585 ;;		wreg, status,2
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4591 ;;      Params:         0       0       0       0
  4592 ;;      Locals:         0       2       0       0
  4593 ;;      Temps:          0       0       0       0
  4594 ;;      Totals:         0       2       0       0
  4595 ;;Total ram usage:        2 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    2
  4598 ;; This function calls:
  4599 ;;		Nothing
  4600 ;; This function is called by:
  4601 ;;		_setSw_Main
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           
  4606                           ;psect for function _getSw_KeyStatus
  4607  0A88                     _getSw_KeyStatus:	
  4608                           
  4609                           ;incstack = 0
  4610                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  4611                           ;getSw_KeyStatus@sw stored from wreg
  4612  0A88  1283               	bcf	3,5	;RP0=0, select bank0
  4613  0A89  1303               	bcf	3,6	;RP1=0, select bank0
  4614  0A8A  00DB               	movwf	getSw_KeyStatus@sw
  4615                           
  4616                           ;Switch_B1.c: 237: char status = 0;
  4617  0A8B  01DA               	clrf	getSw_KeyStatus@status
  4618                           
  4619                           ;Switch_B1.c: 251: if (sw == 1) {
  4620  0A8C  085B               	movf	getSw_KeyStatus@sw,w
  4621  0A8D  3A01               	xorlw	1
  4622  0A8E  1D03               	skipz
  4623  0A8F  2A92               	goto	l6443
  4624                           
  4625                           ;Switch_B1.c: 252: __nop();
  4626  0A90  0000               	nop
  4627                           
  4628                           ;Switch_B1.c: 253: } else if (sw == 2) {
  4629  0A91  2A9C               	goto	l6447
  4630  0A92                     l6443:	
  4631  0A92  1283               	bcf	3,5	;RP0=0, select bank0
  4632  0A93  1303               	bcf	3,6	;RP1=0, select bank0
  4633  0A94  085B               	movf	getSw_KeyStatus@sw,w
  4634  0A95  3A02               	xorlw	2
  4635  0A96  1D03               	skipz
  4636  0A97  2A9C               	goto	l6447
  4637                           
  4638                           ;Switch_B1.c: 254: status = RB4 == 1 ? 1 : 0;
  4639  0A98  3000               	movlw	0
  4640  0A99  1A06               	btfsc	6,4	;volatile
  4641  0A9A  3001               	movlw	1
  4642  0A9B  00DA               	movwf	getSw_KeyStatus@status
  4643  0A9C                     l6447:	
  4644                           
  4645                           ;Switch_B1.c: 255: }
  4646                           ;Switch_B1.c: 274: return status;
  4647  0A9C  1283               	bcf	3,5	;RP0=0, select bank0
  4648  0A9D  1303               	bcf	3,6	;RP1=0, select bank0
  4649  0A9E  085A               	movf	getSw_KeyStatus@status,w
  4650  0A9F  0008               	return
  4651  0AA0                     __end_of_getSw_KeyStatus:	
  4652                           
  4653                           	psect	text17
  4654  09AC                     __ptext17:	
  4655 ;; *************** function _SwPointSelect *****************
  4656 ;; Defined at:
  4657 ;;		line 25 in file "../src/Switch_B1.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  sw              1    wreg     unsigned char 
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;  sw              1    4[COMMON] unsigned char 
  4662 ;; Return value:  Size  Location     Type
  4663 ;;		None               void
  4664 ;; Registers used:
  4665 ;;		wreg, status,2, status,0
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4671 ;;      Params:         0       0       0       0
  4672 ;;      Locals:         1       0       0       0
  4673 ;;      Temps:          0       0       0       0
  4674 ;;      Totals:         1       0       0       0
  4675 ;;Total ram usage:        1 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:    2
  4678 ;; This function calls:
  4679 ;;		Nothing
  4680 ;; This function is called by:
  4681 ;;		_setSw_Main
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           
  4686                           ;psect for function _SwPointSelect
  4687  09AC                     _SwPointSelect:	
  4688                           
  4689                           ;incstack = 0
  4690                           ; Regs used in _SwPointSelect: [wreg+status,2+status,0]
  4691                           ;SwPointSelect@sw stored from wreg
  4692  09AC  00F9               	movwf	SwPointSelect@sw
  4693                           
  4694                           ;Switch_B1.c: 28: if (sw == 1) {
  4695  09AD  0879               	movf	SwPointSelect@sw,w
  4696  09AE  3A01               	xorlw	1
  4697  09AF  1D03               	skipz
  4698  09B0  29B6               	goto	l3833
  4699                           
  4700                           ;Switch_B1.c: 29: Sw = &Sw1;
  4701  09B1  30E4               	movlw	_Sw1& (0+255)
  4702  09B2  00F0               	movwf	_Sw
  4703  09B3  3000               	movlw	0
  4704  09B4  00F1               	movwf	_Sw+1
  4705                           
  4706                           ;Switch_B1.c: 30: }
  4707  09B5  0008               	return
  4708  09B6                     l3833:	
  4709                           
  4710                           ;Switch_B1.c: 33: else if (sw == 2) {
  4711  09B6  0879               	movf	SwPointSelect@sw,w
  4712  09B7  3A02               	xorlw	2
  4713  09B8  1D03               	skipz
  4714  09B9  0008               	return
  4715                           
  4716                           ;Switch_B1.c: 34: Sw = &Sw2;
  4717  09BA  3020               	movlw	_Sw2& (0+255)
  4718  09BB  00F0               	movwf	_Sw
  4719  09BC  3001               	movlw	1
  4720  09BD  00F1               	movwf	_Sw+1
  4721  09BE  0008               	return
  4722  09BF                     __end_of_SwPointSelect:	
  4723                           
  4724                           	psect	text18
  4725  09D3                     __ptext18:	
  4726 ;; *************** function _TouchPower *****************
  4727 ;; Defined at:
  4728 ;;		line 10 in file "../src/Switch_B1.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;		None
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;		None
  4733 ;; Return value:  Size  Location     Type
  4734 ;;		None               void
  4735 ;; Registers used:
  4736 ;;		wreg, status,2, status,0, pclath, cstack
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4742 ;;      Params:         0       0       0       0
  4743 ;;      Locals:         0       0       0       0
  4744 ;;      Temps:          0       0       0       0
  4745 ;;      Totals:         0       0       0       0
  4746 ;;Total ram usage:        0 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; Hardware stack levels required when called:    3
  4749 ;; This function calls:
  4750 ;;		_Timeout_Counter
  4751 ;;		_set_TimeoutCleared
  4752 ;; This function is called by:
  4753 ;;		_Switch_Main
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           
  4758                           ;psect for function _TouchPower
  4759  09D3                     _TouchPower:	
  4760                           
  4761                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  4762                           
  4763                           ;incstack = 0
  4764                           ; Regs used in _TouchPower: [wreg+status,2+status,0+pclath+cstack]
  4765  09D3  1283               	bcf	3,5	;RP0=0, select bank0
  4766  09D4  1303               	bcf	3,6	;RP1=0, select bank0
  4767  09D5  1C31               	btfss	_myMain,0
  4768  09D6  0008               	return
  4769                           
  4770                           ;Switch_B1.c: 12: if (RB5 == 0) {
  4771  09D7  1A86               	btfsc	6,5	;volatile
  4772  09D8  0008               	return
  4773  09D9  29DE               	goto	l6643
  4774  09DA                     l1423:	
  4775                           ;Switch_B1.c: 13: while (RB5 == 0 && myMain.Timeout == 0) {
  4776                           
  4777                           
  4778                           ;Switch_B1.c: 14: RB5 = 1;
  4779  09DA  1686               	bsf	6,5	;volatile
  4780                           
  4781                           ;Switch_B1.c: 15: Timeout_Counter();
  4782  09DB  158A  21BF  158A   	fcall	_Timeout_Counter
  4783  09DE                     l6643:	
  4784  09DE  1283               	bcf	3,5	;RP0=0, select bank0
  4785  09DF  1303               	bcf	3,6	;RP1=0, select bank0
  4786  09E0  1A86               	btfsc	6,5	;volatile
  4787  09E1  29E4               	goto	l6647
  4788  09E2  1D33               	btfss	_myMain+2,2
  4789  09E3  29DA               	goto	l1423
  4790  09E4                     l6647:	
  4791                           
  4792                           ;Switch_B1.c: 16: }
  4793                           ;Switch_B1.c: 17: set_TimeoutCleared();
  4794  09E4  158A  20B7         	fcall	_set_TimeoutCleared
  4795  09E6  0008               	return
  4796  09E7                     __end_of_TouchPower:	
  4797                           
  4798                           	psect	text19
  4799  08B7                     __ptext19:	
  4800 ;; *************** function _set_TimeoutCleared *****************
  4801 ;; Defined at:
  4802 ;;		line 281 in file "../src/Main_B1.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;		None
  4807 ;; Return value:  Size  Location     Type
  4808 ;;		None               void
  4809 ;; Registers used:
  4810 ;;		status,2
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4816 ;;      Params:         0       0       0       0
  4817 ;;      Locals:         0       0       0       0
  4818 ;;      Temps:          0       0       0       0
  4819 ;;      Totals:         0       0       0       0
  4820 ;;Total ram usage:        0 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:    2
  4823 ;; This function calls:
  4824 ;;		Nothing
  4825 ;; This function is called by:
  4826 ;;		_getAD
  4827 ;;		_TouchPower
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           
  4832                           ;psect for function _set_TimeoutCleared
  4833  08B7                     _set_TimeoutCleared:	
  4834                           
  4835                           ;Main_B1.c: 282: myMain.Timeout = 0;
  4836                           
  4837                           ;incstack = 0
  4838                           ; Regs used in _set_TimeoutCleared: [status,2]
  4839  08B7  1283               	bcf	3,5	;RP0=0, select bank0
  4840  08B8  1303               	bcf	3,6	;RP1=0, select bank0
  4841  08B9  1133               	bcf	_myMain+2,2
  4842                           
  4843                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  4844  08BA  01B4               	clrf	_myMain+3
  4845  08BB  01B5               	clrf	_myMain+4
  4846  08BC  0008               	return
  4847  08BD                     __end_of_set_TimeoutCleared:	
  4848                           
  4849                           	psect	text20
  4850  09BF                     __ptext20:	
  4851 ;; *************** function _Timeout_Counter *****************
  4852 ;; Defined at:
  4853 ;;		line 272 in file "../src/Main_B1.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;		None
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;		None
  4858 ;; Return value:  Size  Location     Type
  4859 ;;		None               void
  4860 ;; Registers used:
  4861 ;;		wreg, status,2
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4867 ;;      Params:         0       0       0       0
  4868 ;;      Locals:         0       0       0       0
  4869 ;;      Temps:          0       0       0       0
  4870 ;;      Totals:         0       0       0       0
  4871 ;;Total ram usage:        0 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; Hardware stack levels required when called:    2
  4874 ;; This function calls:
  4875 ;;		Nothing
  4876 ;; This function is called by:
  4877 ;;		_getAD
  4878 ;;		_TouchPower
  4879 ;; This function uses a non-reentrant model
  4880 ;;
  4881                           
  4882                           
  4883                           ;psect for function _Timeout_Counter
  4884  09BF                     _Timeout_Counter:	
  4885                           
  4886                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  4887                           
  4888                           ;incstack = 0
  4889                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  4890  09BF  3001               	movlw	1
  4891  09C0  1283               	bcf	3,5	;RP0=0, select bank0
  4892  09C1  1303               	bcf	3,6	;RP1=0, select bank0
  4893  09C2  07B4               	addwf	_myMain+3,f
  4894  09C3  1803               	skipnc
  4895  09C4  0AB5               	incf	_myMain+4,f
  4896  09C5  3000               	movlw	0
  4897  09C6  07B5               	addwf	_myMain+4,f
  4898                           
  4899                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  4900  09C7  3061               	movlw	97
  4901  09C8  0635               	xorwf	_myMain+4,w
  4902  09C9  1D03               	skipz
  4903  09CA  29CD               	goto	u8175
  4904  09CB  30A8               	movlw	168
  4905  09CC  0634               	xorwf	_myMain+3,w
  4906  09CD                     u8175:	
  4907  09CD  1D03               	skipz
  4908  09CE  0008               	return
  4909                           
  4910                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  4911  09CF  01B4               	clrf	_myMain+3
  4912  09D0  01B5               	clrf	_myMain+4
  4913                           
  4914                           ;Main_B1.c: 276: myMain.Timeout = 1;
  4915  09D1  1533               	bsf	_myMain+2,2
  4916  09D2  0008               	return
  4917  09D3                     __end_of_Timeout_Counter:	
  4918                           
  4919                           	psect	text21
  4920  0885                     __ptext21:	
  4921 ;; *************** function _Switch_Initialization *****************
  4922 ;; Defined at:
  4923 ;;		line 46 in file "../src/Switch_B1.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;		None
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;		None
  4928 ;; Return value:  Size  Location     Type
  4929 ;;		None               void
  4930 ;; Registers used:
  4931 ;;		None
  4932 ;; Tracked objects:
  4933 ;;		On entry : 0/0
  4934 ;;		On exit  : 0/0
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4937 ;;      Params:         0       0       0       0
  4938 ;;      Locals:         0       0       0       0
  4939 ;;      Temps:          0       0       0       0
  4940 ;;      Totals:         0       0       0       0
  4941 ;;Total ram usage:        0 bytes
  4942 ;; Hardware stack levels used:    1
  4943 ;; Hardware stack levels required when called:    2
  4944 ;; This function calls:
  4945 ;;		Nothing
  4946 ;; This function is called by:
  4947 ;;		_main
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           
  4952                           ;psect for function _Switch_Initialization
  4953  0885                     _Switch_Initialization:	
  4954                           
  4955                           ;incstack = 0
  4956                           ; Regs used in _Switch_Initialization: []
  4957  0885  0008               	return
  4958  0886                     __end_of_Switch_Initialization:	
  4959                           
  4960                           	psect	text22
  4961  088D                     __ptext22:	
  4962 ;; *************** function _SYSC_Main *****************
  4963 ;; Defined at:
  4964 ;;		line 17 in file "../src/SYSC_B1.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;		None
  4967 ;; Auto vars:     Size  Location     Type
  4968 ;;		None
  4969 ;; Return value:  Size  Location     Type
  4970 ;;		None               void
  4971 ;; Registers used:
  4972 ;;		wreg, status,2, status,0, pclath, cstack
  4973 ;; Tracked objects:
  4974 ;;		On entry : 0/0
  4975 ;;		On exit  : 0/0
  4976 ;;		Unchanged: 0/0
  4977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4978 ;;      Params:         0       0       0       0
  4979 ;;      Locals:         0       0       0       0
  4980 ;;      Temps:          0       0       0       0
  4981 ;;      Totals:         0       0       0       0
  4982 ;;Total ram usage:        0 bytes
  4983 ;; Hardware stack levels used:    1
  4984 ;; Hardware stack levels required when called:    4
  4985 ;; This function calls:
  4986 ;;		_setSYSC_Main
  4987 ;; This function is called by:
  4988 ;;		_main
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           
  4993                           ;psect for function _SYSC_Main
  4994  088D                     _SYSC_Main:	
  4995                           
  4996                           ;SYSC_B1.c: 19: setSYSC_Main();
  4997                           
  4998                           ;incstack = 0
  4999                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  5000  088D  158A  2518         	fcall	_setSYSC_Main
  5001  088F  0008               	return
  5002  0890                     __end_of_SYSC_Main:	
  5003                           
  5004                           	psect	text23
  5005  0D18                     __ptext23:	
  5006 ;; *************** function _setSYSC_Main *****************
  5007 ;; Defined at:
  5008 ;;		line 23 in file "../src/SYSC_B1.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;		None
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;		None
  5013 ;; Return value:  Size  Location     Type
  5014 ;;		None               void
  5015 ;; Registers used:
  5016 ;;		wreg, status,2, status,0, pclath, cstack
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5022 ;;      Params:         0       0       0       0
  5023 ;;      Locals:         0       0       0       0
  5024 ;;      Temps:          0       0       0       0
  5025 ;;      Totals:         0       0       0       0
  5026 ;;Total ram usage:        0 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; Hardware stack levels required when called:    3
  5029 ;; This function calls:
  5030 ;;		_getMain_All_Error_Status
  5031 ;; This function is called by:
  5032 ;;		_SYSC_Main
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           
  5037                           ;psect for function _setSYSC_Main
  5038  0D18                     _setSYSC_Main:	
  5039                           
  5040                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  5041                           
  5042                           ;incstack = 0
  5043                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  5044  0D18  1283               	bcf	3,5	;RP0=0, select bank0
  5045  0D19  1303               	bcf	3,6	;RP1=0, select bank0
  5046  0D1A  1C2C               	btfss	_SYSC,0
  5047  0D1B  0008               	return
  5048                           
  5049                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  5050  0D1C  18AC               	btfsc	_SYSC,1
  5051  0D1D  2D2F               	goto	l4109
  5052                           
  5053                           ;SYSC_B1.c: 27: SYSC.Timer++;
  5054  0D1E  3001               	movlw	1
  5055  0D1F  07AD               	addwf	_SYSC+1,f
  5056  0D20  1803               	skipnc
  5057  0D21  0AAE               	incf	_SYSC+2,f
  5058  0D22  3000               	movlw	0
  5059  0D23  07AE               	addwf	_SYSC+2,f
  5060                           
  5061                           ;SYSC_B1.c: 28: if (SYSC.Timer >= (160 / 20)) {
  5062  0D24  3000               	movlw	0
  5063  0D25  022E               	subwf	_SYSC+2,w
  5064  0D26  3008               	movlw	8
  5065  0D27  1903               	skipnz
  5066  0D28  022D               	subwf	_SYSC+1,w
  5067  0D29  1C03               	skipc
  5068  0D2A  0008               	return
  5069                           
  5070                           ;SYSC_B1.c: 29: SYSC.Timer = 0;
  5071  0D2B  01AD               	clrf	_SYSC+1
  5072  0D2C  01AE               	clrf	_SYSC+2
  5073                           
  5074                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  5075  0D2D  14AC               	bsf	_SYSC,1
  5076                           
  5077                           ;SYSC_B1.c: 31: }
  5078                           ;SYSC_B1.c: 32: } else {
  5079  0D2E  0008               	return
  5080  0D2F                     l4109:	
  5081                           
  5082                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  5083  0D2F  3001               	movlw	1
  5084  0D30  158A  249A  158A   	fcall	_getMain_All_Error_Status
  5085  0D33  3800               	iorlw	0
  5086  0D34  1D03               	skipz
  5087  0D35  0008               	return
  5088                           
  5089                           ;SYSC_B1.c: 34: SYSC.Timer++;
  5090  0D36  3001               	movlw	1
  5091  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  5092  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  5093  0D39  07AD               	addwf	_SYSC+1,f
  5094  0D3A  1803               	skipnc
  5095  0D3B  0AAE               	incf	_SYSC+2,f
  5096  0D3C  3000               	movlw	0
  5097  0D3D  07AE               	addwf	_SYSC+2,f
  5098                           
  5099                           ;SYSC_B1.c: 35: if (SYSC.Timer == (500 / 20)) {
  5100  0D3E  3019               	movlw	25
  5101  0D3F  062D               	xorwf	_SYSC+1,w
  5102  0D40  042E               	iorwf	_SYSC+2,w
  5103  0D41  1D03               	skipz
  5104  0D42  2D48               	goto	l4115
  5105                           
  5106                           ;SYSC_B1.c: 36: SYSC.Timer = 0;
  5107  0D43  01AD               	clrf	_SYSC+1
  5108  0D44  01AE               	clrf	_SYSC+2
  5109                           
  5110                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  5111  0D45  01AF               	clrf	_SYSC+3
  5112  0D46  01B0               	clrf	_SYSC+4
  5113                           
  5114                           ;SYSC_B1.c: 38: } else {
  5115  0D47  0008               	return
  5116  0D48                     l4115:	
  5117                           
  5118                           ;SYSC_B1.c: 39: SYSC.Counter++;
  5119  0D48  3001               	movlw	1
  5120  0D49  07AF               	addwf	_SYSC+3,f
  5121  0D4A  1803               	skipnc
  5122  0D4B  0AB0               	incf	_SYSC+4,f
  5123  0D4C  3000               	movlw	0
  5124  0D4D  07B0               	addwf	_SYSC+4,f
  5125                           
  5126                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  5127  0D4E  3001               	movlw	1
  5128  0D4F  0630               	xorwf	_SYSC+4,w
  5129  0D50  1D03               	skipz
  5130  0D51  2D54               	goto	u3695
  5131  0D52  30F4               	movlw	244
  5132  0D53  062F               	xorwf	_SYSC+3,w
  5133  0D54                     u3695:	
  5134  0D54  1D03               	skipz
  5135  0D55  0008               	return
  5136                           
  5137                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  5138  0D56  01AF               	clrf	_SYSC+3
  5139  0D57  01B0               	clrf	_SYSC+4
  5140                           
  5141                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  5142  0D58  10AC               	bcf	_SYSC,1
  5143  0D59  0008               	return
  5144  0D5A                     __end_of_setSYSC_Main:	
  5145                           
  5146                           	psect	text24
  5147  088A                     __ptext24:	
  5148 ;; *************** function _SYSC_Initialization *****************
  5149 ;; Defined at:
  5150 ;;		line 7 in file "../src/SYSC_B1.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;		None
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;		None
  5155 ;; Return value:  Size  Location     Type
  5156 ;;		None               void
  5157 ;; Registers used:
  5158 ;;		status,2, status,0, pclath, cstack
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5164 ;;      Params:         0       0       0       0
  5165 ;;      Locals:         0       0       0       0
  5166 ;;      Temps:          0       0       0       0
  5167 ;;      Totals:         0       0       0       0
  5168 ;;Total ram usage:        0 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:    3
  5171 ;; This function calls:
  5172 ;;		_setSYSC_Initialization
  5173 ;; This function is called by:
  5174 ;;		_main
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           
  5179                           ;psect for function _SYSC_Initialization
  5180  088A                     _SYSC_Initialization:	
  5181                           
  5182                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  5183                           
  5184                           ;incstack = 0
  5185                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  5186  088A  158A  20A2         	fcall	_setSYSC_Initialization
  5187  088C  0008               	return
  5188  088D                     __end_of_SYSC_Initialization:	
  5189                           
  5190                           	psect	text25
  5191  08A2                     __ptext25:	
  5192 ;; *************** function _setSYSC_Initialization *****************
  5193 ;; Defined at:
  5194 ;;		line 13 in file "../src/SYSC_B1.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;		None
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;		None
  5199 ;; Return value:  Size  Location     Type
  5200 ;;		None               void
  5201 ;; Registers used:
  5202 ;;		None
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5208 ;;      Params:         0       0       0       0
  5209 ;;      Locals:         0       0       0       0
  5210 ;;      Temps:          0       0       0       0
  5211 ;;      Totals:         0       0       0       0
  5212 ;;Total ram usage:        0 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:    2
  5215 ;; This function calls:
  5216 ;;		Nothing
  5217 ;; This function is called by:
  5218 ;;		_SYSC_Initialization
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           
  5223                           ;psect for function _setSYSC_Initialization
  5224  08A2                     _setSYSC_Initialization:	
  5225                           
  5226                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  5227                           
  5228                           ;incstack = 0
  5229                           ; Regs used in _setSYSC_Initialization: []
  5230  08A2  1283               	bcf	3,5	;RP0=0, select bank0
  5231  08A3  1303               	bcf	3,6	;RP1=0, select bank0
  5232  08A4  142C               	bsf	_SYSC,0
  5233  08A5  0008               	return
  5234  08A6                     __end_of_setSYSC_Initialization:	
  5235                           
  5236                           	psect	text26
  5237  01F5                     __ptext26:	
  5238 ;; *************** function _PIR_Main *****************
  5239 ;; Defined at:
  5240 ;;		line 13 in file "../src/PIR_B1.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;		None
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;  LightsStatus    1   16[BANK0 ] unsigned char 
  5245 ;;  cds             1   15[BANK0 ] unsigned char 
  5246 ;;  TriggerValue    1   14[BANK0 ] unsigned char 
  5247 ;;  Enable_Switc    1   13[BANK0 ] unsigned char 
  5248 ;;  error           1   10[BANK0 ] unsigned char 
  5249 ;; Return value:  Size  Location     Type
  5250 ;;		None               void
  5251 ;; Registers used:
  5252 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5258 ;;      Params:         0       0       0       0
  5259 ;;      Locals:         0       7       0       0
  5260 ;;      Temps:          0       4       0       0
  5261 ;;      Totals:         0      11       0       0
  5262 ;;Total ram usage:       11 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; Hardware stack levels required when called:    5
  5265 ;; This function calls:
  5266 ;;		_getCDS_Status
  5267 ;;		_getLights_Status
  5268 ;;		_getMain_All_Error_Status
  5269 ;;		_setLights_SwOff
  5270 ;;		_setLights_SwOn
  5271 ;; This function is called by:
  5272 ;;		_main
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           
  5277                           ;psect for function _PIR_Main
  5278  01F5                     _PIR_Main:	
  5279                           
  5280                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  5281                           
  5282                           ;incstack = 0
  5283                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5284  01F5  3000               	movlw	0
  5285  01F6  158A  249A  118A   	fcall	_getMain_All_Error_Status
  5286  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  5287  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  5288  01FB  00E0               	movwf	??_PIR_Main
  5289  01FC  0860               	movf	??_PIR_Main,w
  5290  01FD  00E4               	movwf	PIR_Main@error
  5291                           
  5292                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  5293  01FE  158A  20DB  118A   	fcall	_getCDS_Status
  5294  0201  1283               	bcf	3,5	;RP0=0, select bank0
  5295  0202  1303               	bcf	3,6	;RP1=0, select bank0
  5296  0203  00E0               	movwf	??_PIR_Main
  5297  0204  0860               	movf	??_PIR_Main,w
  5298  0205  00E9               	movwf	PIR_Main@cds
  5299                           
  5300                           ;PIR_B1.c: 16: char LightsStatus = 0;
  5301  0206  01EA               	clrf	PIR_Main@LightsStatus
  5302                           
  5303                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  5304  0207  01E7               	clrf	PIR_Main@Enable_Switch
  5305  0208  0AE7               	incf	PIR_Main@Enable_Switch,f
  5306                           
  5307                           ;PIR_B1.c: 18: char TriggerValue = 0;
  5308  0209  01E8               	clrf	PIR_Main@TriggerValue
  5309                           
  5310                           ;PIR_B1.c: 20: Enable_Switch = RB3 == 1 ? 1 : 0;
  5311  020A  3000               	movlw	0
  5312  020B  1986               	btfsc	6,3	;volatile
  5313  020C  3001               	movlw	1
  5314  020D  00E7               	movwf	PIR_Main@Enable_Switch
  5315                           
  5316                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  5317  020E  3001               	movlw	1
  5318  020F  158A  2165  118A   	fcall	_getLights_Status
  5319  0212  1283               	bcf	3,5	;RP0=0, select bank0
  5320  0213  1303               	bcf	3,6	;RP1=0, select bank0
  5321  0214  00E0               	movwf	??_PIR_Main
  5322  0215  0860               	movf	??_PIR_Main,w
  5323  0216  00EA               	movwf	PIR_Main@LightsStatus
  5324                           
  5325                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  5326  0217  1683               	bsf	3,5	;RP0=1, select bank1
  5327  0218  1303               	bcf	3,6	;RP1=0, select bank1
  5328  0219  1C20               	btfss	__PIR^(0+128),0
  5329  021A  2B7F               	goto	l1059
  5330                           
  5331                           ;PIR_B1.c: 36: if (error == 0) {
  5332  021B  1283               	bcf	3,5	;RP0=0, select bank0
  5333  021C  1303               	bcf	3,6	;RP1=0, select bank0
  5334  021D  08E4               	movf	PIR_Main@error,f
  5335  021E  1D03               	skipz
  5336  021F  2A46               	goto	l1060
  5337                           
  5338                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  5339  0220  0869               	movf	PIR_Main@cds,w
  5340  0221  3A01               	xorlw	1
  5341  0222  1D03               	skipz
  5342  0223  2A2C               	goto	l1061
  5343  0224  0867               	movf	PIR_Main@Enable_Switch,w
  5344  0225  3A01               	xorlw	1
  5345  0226  1D03               	skipz
  5346  0227  2A2C               	goto	l1061
  5347                           
  5348                           ;PIR_B1.c: 39: _PIR.Available = 1;
  5349  0228  1683               	bsf	3,5	;RP0=1, select bank1
  5350  0229  1303               	bcf	3,6	;RP1=0, select bank1
  5351  022A  17A0               	bsf	__PIR^(0+128),7
  5352                           
  5353                           ;PIR_B1.c: 40: } else {
  5354  022B  2A40               	goto	l7149
  5355  022C                     l1061:	
  5356                           
  5357                           ;PIR_B1.c: 41: _PIR.Available = 0;
  5358  022C  1683               	bsf	3,5	;RP0=1, select bank1
  5359  022D  1303               	bcf	3,6	;RP1=0, select bank1
  5360  022E  13A0               	bcf	__PIR^(0+128),7
  5361                           
  5362                           ;PIR_B1.c: 42: if (_PIR.OK == 1) {
  5363  022F  1DA0               	btfss	__PIR^(0+128),3
  5364  0230  2A40               	goto	l7149
  5365                           
  5366                           ;PIR_B1.c: 44: if (getLights_Status(1) == 1) {
  5367  0231  3001               	movlw	1
  5368  0232  158A  2165  118A   	fcall	_getLights_Status
  5369  0235  3A01               	xorlw	1
  5370  0236  1D03               	skipz
  5371  0237  2A40               	goto	l7149
  5372                           
  5373                           ;PIR_B1.c: 45: setLights_SwOn(1);
  5374  0238  3001               	movlw	1
  5375  0239  158A  2352  118A   	fcall	_setLights_SwOn
  5376                           
  5377                           ;PIR_B1.c: 46: setLights_SwOff(1);
  5378  023C  3001               	movlw	1
  5379  023D  158A  22A0  118A   	fcall	_setLights_SwOff
  5380  0240                     l7149:	
  5381                           
  5382                           ;PIR_B1.c: 48: }
  5383                           ;PIR_B1.c: 59: }
  5384                           ;PIR_B1.c: 60: }
  5385                           ;PIR_B1.c: 64: if (_PIR.Detect == 0) {
  5386  0240  1683               	bsf	3,5	;RP0=1, select bank1
  5387  0241  1303               	bcf	3,6	;RP1=0, select bank1
  5388  0242  1A20               	btfsc	__PIR^(0+128),4
  5389  0243  2A4C               	goto	l1066
  5390                           
  5391                           ;PIR_B1.c: 65: _PIR.Detect = 1;
  5392  0244  1620               	bsf	__PIR^(0+128),4
  5393                           
  5394                           ;PIR_B1.c: 71: }
  5395                           ;PIR_B1.c: 72: } else {
  5396  0245  2A4C               	goto	l1066
  5397  0246                     l1060:	
  5398                           
  5399                           ;PIR_B1.c: 73: if (_PIR.Detect == 1) {
  5400  0246  1683               	bsf	3,5	;RP0=1, select bank1
  5401  0247  1303               	bcf	3,6	;RP1=0, select bank1
  5402  0248  1E20               	btfss	__PIR^(0+128),4
  5403  0249  2A4C               	goto	l1066
  5404                           
  5405                           ;PIR_B1.c: 74: _PIR.Detect = 0;
  5406  024A  1220               	bcf	__PIR^(0+128),4
  5407                           
  5408                           ;PIR_B1.c: 75: _PIR.Available = 0;
  5409  024B  13A0               	bcf	__PIR^(0+128),7
  5410  024C                     l1066:	
  5411                           
  5412                           ;PIR_B1.c: 93: }
  5413                           ;PIR_B1.c: 94: }
  5414                           ;PIR_B1.c: 96: if (_PIR.ADtoGO == 0) {
  5415  024C  18A0               	btfsc	__PIR^(0+128),1
  5416  024D  2A5D               	goto	l1068
  5417                           
  5418                           ;PIR_B1.c: 97: _PIR.Time++;
  5419  024E  3001               	movlw	1
  5420  024F  1283               	bcf	3,5	;RP0=0, select bank0
  5421  0250  1303               	bcf	3,6	;RP1=0, select bank0
  5422  0251  00E0               	movwf	??_PIR_Main
  5423  0252  0860               	movf	??_PIR_Main,w
  5424  0253  1683               	bsf	3,5	;RP0=1, select bank1
  5425  0254  1303               	bcf	3,6	;RP1=0, select bank1
  5426  0255  07A2               	addwf	(__PIR^(0+128)+2),f
  5427                           
  5428                           ;PIR_B1.c: 98: if (_PIR.Time == (100 / 20)) {
  5429  0256  0822               	movf	(__PIR^(0+128)+2),w
  5430  0257  3A05               	xorlw	5
  5431  0258  1D03               	skipz
  5432  0259  2B26               	goto	l7225
  5433                           
  5434                           ;PIR_B1.c: 99: _PIR.Time = 0;
  5435  025A  01A2               	clrf	(__PIR^(0+128)+2)
  5436                           
  5437                           ;PIR_B1.c: 100: _PIR.ADtoGO = 1;
  5438  025B  14A0               	bsf	__PIR^(0+128),1
  5439                           
  5440                           ;PIR_B1.c: 101: }
  5441                           ;PIR_B1.c: 102: } else {
  5442  025C  2B26               	goto	l7225
  5443  025D                     l1068:	
  5444                           
  5445                           ;PIR_B1.c: 103: if (_PIR.GO == 1) {
  5446  025D  1D20               	btfss	__PIR^(0+128),2
  5447  025E  2B26               	goto	l7225
  5448                           
  5449                           ;PIR_B1.c: 104: _PIR.GO = 0;
  5450  025F  1120               	bcf	__PIR^(0+128),2
  5451                           
  5452                           ;PIR_B1.c: 105: _PIR.ADtoGO = 0;
  5453  0260  10A0               	bcf	__PIR^(0+128),1
  5454                           
  5455                           ;PIR_B1.c: 106: if (_PIR.Available == 1) {
  5456  0261  1BA0               	btfsc	__PIR^(0+128),7
  5457                           
  5458                           ;PIR_B1.c: 107: if (_PIR.OK == 1) {
  5459  0262  1DA0               	btfss	__PIR^(0+128),3
  5460  0263  2B26               	goto	l7225
  5461                           
  5462                           ;PIR_B1.c: 109: _PIR.Time++;
  5463  0264  3001               	movlw	1
  5464  0265  1283               	bcf	3,5	;RP0=0, select bank0
  5465  0266  1303               	bcf	3,6	;RP1=0, select bank0
  5466  0267  00E0               	movwf	??_PIR_Main
  5467  0268  0860               	movf	??_PIR_Main,w
  5468  0269  1683               	bsf	3,5	;RP0=1, select bank1
  5469  026A  1303               	bcf	3,6	;RP1=0, select bank1
  5470  026B  07A2               	addwf	(__PIR^(0+128)+2),f
  5471                           
  5472                           ;PIR_B1.c: 110: if (_PIR.Time == 60) {
  5473  026C  0822               	movf	(__PIR^(0+128)+2),w
  5474  026D  3A3C               	xorlw	60
  5475  026E  1D03               	skipz
  5476  026F  2AA4               	goto	l7203
  5477                           
  5478                           ;PIR_B1.c: 111: _PIR.Time = 0;
  5479  0270  01A2               	clrf	(__PIR^(0+128)+2)
  5480                           
  5481                           ;PIR_B1.c: 112: if (_PIR.RangeCount >= 90) {
  5482  0271  305A               	movlw	90
  5483  0272  0247               	subwf	(__PIR^(0+128)+39),w
  5484  0273  1C03               	skipc
  5485  0274  2A80               	goto	l7185
  5486                           
  5487                           ;PIR_B1.c: 113: _PIR.RangeTime1 = 0;
  5488  0275  01C6               	clrf	(__PIR^(0+128)+38)
  5489                           
  5490                           ;PIR_B1.c: 115: if (_PIR.RangeValue == 25) {
  5491  0276  0848               	movf	(__PIR^(0+128)+40),w
  5492  0277  3A19               	xorlw	25
  5493  0278  1903               	btfsc	3,2
  5494  0279  2A95               	goto	L11
  5495                           
  5496                           ;PIR_B1.c: 117: } else if (_PIR.RangeValue == (25+10)) {
  5497                           
  5498                           ;PIR_B1.c: 116: _PIR.RangeValue = (25+10);
  5499  027A  0848               	movf	(__PIR^(0+128)+40),w
  5500  027B  3A23               	xorlw	35
  5501  027C  1D03               	skipz
  5502  027D  2AA3               	goto	l7201
  5503                           
  5504                           ;PIR_B1.c: 118: _PIR.RangeValue = (25+20);
  5505  027E  302D               	movlw	45
  5506  027F  2A9C               	goto	L10
  5507  0280                     l7185:	
  5508                           ;PIR_B1.c: 119: }
  5509                           ;PIR_B1.c: 120: } else if (_PIR.RangeCount <= 10) {
  5510                           
  5511  0280  300B               	movlw	11
  5512  0281  0247               	subwf	(__PIR^(0+128)+39),w
  5513  0282  1803               	skipnc
  5514  0283  2AA3               	goto	l7201
  5515                           
  5516                           ;PIR_B1.c: 121: _PIR.RangeTime1++;
  5517  0284  3001               	movlw	1
  5518  0285  1283               	bcf	3,5	;RP0=0, select bank0
  5519  0286  1303               	bcf	3,6	;RP1=0, select bank0
  5520  0287  00E0               	movwf	??_PIR_Main
  5521  0288  0860               	movf	??_PIR_Main,w
  5522  0289  1683               	bsf	3,5	;RP0=1, select bank1
  5523  028A  1303               	bcf	3,6	;RP1=0, select bank1
  5524  028B  07C6               	addwf	(__PIR^(0+128)+38),f
  5525                           
  5526                           ;PIR_B1.c: 122: if (_PIR.RangeTime1 == 2) {
  5527  028C  0846               	movf	(__PIR^(0+128)+38),w
  5528  028D  3A02               	xorlw	2
  5529  028E  1D03               	skipz
  5530  028F  2AA3               	goto	l7201
  5531                           
  5532                           ;PIR_B1.c: 123: _PIR.RangeTime1 = 0;
  5533  0290  01C6               	clrf	(__PIR^(0+128)+38)
  5534                           
  5535                           ;PIR_B1.c: 125: if (_PIR.RangeValue == (25+20)) {
  5536  0291  0848               	movf	(__PIR^(0+128)+40),w
  5537  0292  3A2D               	xorlw	45
  5538  0293  1D03               	skipz
  5539  0294  2A97               	goto	l7197
  5540  0295                     L11:	
  5541                           
  5542                           ;PIR_B1.c: 126: _PIR.RangeValue = (25+10);
  5543  0295  3023               	movlw	35
  5544  0296  2A9C               	goto	L10
  5545  0297                     l7197:	
  5546                           ;PIR_B1.c: 127: } else if (_PIR.RangeValue == (25+10)) {
  5547                           
  5548  0297  0848               	movf	(__PIR^(0+128)+40),w
  5549  0298  3A23               	xorlw	35
  5550  0299  1D03               	skipz
  5551  029A  2AA3               	goto	l7201
  5552                           
  5553                           ;PIR_B1.c: 128: _PIR.RangeValue = 25;
  5554  029B  3019               	movlw	25
  5555  029C                     L10:	
  5556  029C  1283               	bcf	3,5	;RP0=0, select bank0
  5557  029D  1303               	bcf	3,6	;RP1=0, select bank0
  5558  029E  00E0               	movwf	??_PIR_Main
  5559  029F  0860               	movf	??_PIR_Main,w
  5560  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  5561  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  5562  02A2  00C8               	movwf	(__PIR^(0+128)+40)
  5563  02A3                     l7201:	
  5564                           
  5565                           ;PIR_B1.c: 129: }
  5566                           ;PIR_B1.c: 130: }
  5567                           ;PIR_B1.c: 131: }
  5568                           ;PIR_B1.c: 132: _PIR.RangeCount = 0;
  5569  02A3  01C7               	clrf	(__PIR^(0+128)+39)
  5570  02A4                     l7203:	
  5571                           
  5572                           ;PIR_B1.c: 133: }
  5573                           ;PIR_B1.c: 136: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  5574                           ;PIR_B1.c: 137: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  5575  02A4  0848               	movf	(__PIR^(0+128)+40),w
  5576  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  5577  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  5578  02A7  00E0               	movwf	??_PIR_Main
  5579  02A8  01E1               	clrf	??_PIR_Main+1
  5580  02A9  09E0               	comf	??_PIR_Main,f
  5581  02AA  09E1               	comf	??_PIR_Main+1,f
  5582  02AB  0AE0               	incf	??_PIR_Main,f
  5583  02AC  1903               	skipnz
  5584  02AD  0AE1               	incf	??_PIR_Main+1,f
  5585  02AE  1683               	bsf	3,5	;RP0=1, select bank1
  5586  02AF  1303               	bcf	3,6	;RP1=0, select bank1
  5587  02B0  0823               	movf	(__PIR^(0+128)+3),w
  5588  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  5589  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  5590  02B3  0760               	addwf	??_PIR_Main,w
  5591  02B4  00E2               	movwf	??_PIR_Main+2
  5592  02B5  0861               	movf	??_PIR_Main+1,w
  5593  02B6  1803               	skipnc
  5594  02B7  0A61               	incf	??_PIR_Main+1,w
  5595  02B8  00E3               	movwf	??_PIR_Main+3
  5596  02B9  0863               	movf	??_PIR_Main+3,w
  5597  02BA  3A80               	xorlw	128
  5598  02BB  3C80               	sublw	128
  5599  02BC  1D03               	skipz
  5600  02BD  2AC2               	goto	u9755
  5601  02BE  0862               	movf	??_PIR_Main+2,w
  5602  02BF  1683               	bsf	3,5	;RP0=1, select bank1
  5603  02C0  1303               	bcf	3,6	;RP1=0, select bank1
  5604  02C1  0221               	subwf	(__PIR^(0+128)+1),w
  5605  02C2                     u9755:	
  5606  02C2  1C03               	skipc
  5607  02C3  2AE1               	goto	l7209
  5608  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  5609  02C5  1303               	bcf	3,6	;RP1=0, select bank1
  5610  02C6  0823               	movf	(__PIR^(0+128)+3),w
  5611  02C7  0748               	addwf	(__PIR^(0+128)+40),w
  5612  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  5613  02C9  1303               	bcf	3,6	;RP1=0, select bank0
  5614  02CA  00E0               	movwf	??_PIR_Main
  5615  02CB  01E1               	clrf	??_PIR_Main+1
  5616  02CC  0DE1               	rlf	??_PIR_Main+1,f
  5617  02CD  0861               	movf	??_PIR_Main+1,w
  5618  02CE  3A80               	xorlw	128
  5619  02CF  00E2               	movwf	??_PIR_Main+2
  5620  02D0  3080               	movlw	128
  5621  02D1  0262               	subwf	??_PIR_Main+2,w
  5622  02D2  1D03               	skipz
  5623  02D3  2ADA               	goto	u9765
  5624  02D4  1683               	bsf	3,5	;RP0=1, select bank1
  5625  02D5  1303               	bcf	3,6	;RP1=0, select bank1
  5626  02D6  0821               	movf	(__PIR^(0+128)+1),w
  5627  02D7  1283               	bcf	3,5	;RP0=0, select bank0
  5628  02D8  1303               	bcf	3,6	;RP1=0, select bank0
  5629  02D9  0260               	subwf	??_PIR_Main,w
  5630  02DA                     u9765:	
  5631  02DA  1C03               	skipc
  5632  02DB  2AE1               	goto	l7209
  5633                           
  5634                           ;PIR_B1.c: 139: _PIR.Count = 0;
  5635  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  5636  02DD  1303               	bcf	3,6	;RP1=0, select bank1
  5637  02DE  01BE               	clrf	(__PIR^(0+128)+30)
  5638  02DF  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5639                           
  5640                           ;PIR_B1.c: 149: } else {
  5641  02E0  2B26               	goto	l7225
  5642  02E1                     l7209:	
  5643                           
  5644                           ;PIR_B1.c: 152: _PIR.RangeCount++;
  5645  02E1  3001               	movlw	1
  5646  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  5647  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  5648  02E4  00E0               	movwf	??_PIR_Main
  5649  02E5  0860               	movf	??_PIR_Main,w
  5650  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  5651  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  5652  02E8  07C7               	addwf	(__PIR^(0+128)+39),f
  5653                           
  5654                           ;PIR_B1.c: 153: _PIR.Count++;
  5655  02E9  3001               	movlw	1
  5656  02EA  07BE               	addwf	(__PIR^(0+128)+30),f
  5657  02EB  1803               	skipnc
  5658  02EC  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5659  02ED  3000               	movlw	0
  5660  02EE  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5661                           
  5662                           ;PIR_B1.c: 155: TriggerValue = LightsStatus == 1 ? 3 : 3;
  5663  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  5664  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  5665  02F1  086A               	movf	PIR_Main@LightsStatus,w
  5666  02F2  3A01               	xorlw	1
  5667  02F3  1903               	skipnz
  5668  02F4  2AF5               	goto	l7217
  5669  02F5                     l7217:	
  5670  02F5  3003               	movlw	3
  5671  02F6  00E5               	movwf	_PIR_Main$3204
  5672  02F7  3000               	movlw	0
  5673  02F8  00E6               	movwf	_PIR_Main$3204+1
  5674  02F9  0865               	movf	_PIR_Main$3204,w
  5675  02FA  00E0               	movwf	??_PIR_Main
  5676  02FB  0860               	movf	??_PIR_Main,w
  5677  02FC  00E8               	movwf	PIR_Main@TriggerValue
  5678                           
  5679                           ;PIR_B1.c: 157: if (_PIR.Count == TriggerValue) {
  5680  02FD  0868               	movf	PIR_Main@TriggerValue,w
  5681  02FE  00E0               	movwf	??_PIR_Main
  5682  02FF  01E1               	clrf	??_PIR_Main+1
  5683  0300  1683               	bsf	3,5	;RP0=1, select bank1
  5684  0301  1303               	bcf	3,6	;RP1=0, select bank1
  5685  0302  083F               	movf	((__PIR+1)^(0+128)+30),w
  5686  0303  1283               	bcf	3,5	;RP0=0, select bank0
  5687  0304  1303               	bcf	3,6	;RP1=0, select bank0
  5688  0305  0661               	xorwf	??_PIR_Main+1,w
  5689  0306  1D03               	skipz
  5690  0307  2B0E               	goto	u9785
  5691  0308  1683               	bsf	3,5	;RP0=1, select bank1
  5692  0309  1303               	bcf	3,6	;RP1=0, select bank1
  5693  030A  083E               	movf	(__PIR^(0+128)+30),w
  5694  030B  1283               	bcf	3,5	;RP0=0, select bank0
  5695  030C  1303               	bcf	3,6	;RP1=0, select bank0
  5696  030D  0660               	xorwf	??_PIR_Main,w
  5697  030E                     u9785:	
  5698  030E  1D03               	skipz
  5699  030F  2B26               	goto	l7225
  5700                           
  5701                           ;PIR_B1.c: 158: _PIR.Count = 0;
  5702  0310  1683               	bsf	3,5	;RP0=1, select bank1
  5703  0311  1303               	bcf	3,6	;RP1=0, select bank1
  5704  0312  01BE               	clrf	(__PIR^(0+128)+30)
  5705  0313  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5706                           
  5707                           ;PIR_B1.c: 160: _PIR.CloseTimeSeconds = 0;
  5708  0314  01C2               	clrf	(__PIR^(0+128)+34)
  5709                           
  5710                           ;PIR_B1.c: 161: _PIR.CloseTimeMinutes = 0;
  5711  0315  01C0               	clrf	(__PIR^(0+128)+32)
  5712  0316  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5713                           
  5714                           ;PIR_B1.c: 167: if (getLights_Status(1) == 0) {
  5715  0317  3001               	movlw	1
  5716  0318  158A  2165  118A   	fcall	_getLights_Status
  5717  031B  3800               	iorlw	0
  5718  031C  1D03               	skipz
  5719  031D  2B26               	goto	l7225
  5720                           
  5721                           ;PIR_B1.c: 168: setLights_SwOn(1);
  5722  031E  3001               	movlw	1
  5723  031F  158A  2352  118A   	fcall	_setLights_SwOn
  5724                           
  5725                           ;PIR_B1.c: 169: setLights_SwOff(1);
  5726  0322  3001               	movlw	1
  5727  0323  158A  22A0  118A   	fcall	_setLights_SwOff
  5728  0326                     l7225:	
  5729                           
  5730                           ;PIR_B1.c: 171: }
  5731                           ;PIR_B1.c: 231: }
  5732                           ;PIR_B1.c: 232: }
  5733                           ;PIR_B1.c: 233: }
  5734                           ;PIR_B1.c: 234: }
  5735                           ;PIR_B1.c: 235: }
  5736                           ;PIR_B1.c: 236: }
  5737                           ;PIR_B1.c: 237: if (_PIR.OK == 0) {
  5738  0326  1683               	bsf	3,5	;RP0=1, select bank1
  5739  0327  1303               	bcf	3,6	;RP1=0, select bank1
  5740  0328  19A0               	btfsc	__PIR^(0+128),3
  5741  0329  2B4F               	goto	l7239
  5742                           
  5743                           ;PIR_B1.c: 238: _PIR.Count++;
  5744  032A  3001               	movlw	1
  5745  032B  07BE               	addwf	(__PIR^(0+128)+30),f
  5746  032C  1803               	skipnc
  5747  032D  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5748  032E  3000               	movlw	0
  5749  032F  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5750                           
  5751                           ;PIR_B1.c: 239: if (_PIR.Count == (30000 / 20)) {
  5752  0330  3005               	movlw	5
  5753  0331  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  5754  0332  1D03               	skipz
  5755  0333  2B36               	goto	u9815
  5756  0334  30DC               	movlw	220
  5757  0335  063E               	xorwf	(__PIR^(0+128)+30),w
  5758  0336                     u9815:	
  5759  0336  1D03               	skipz
  5760  0337  0008               	return
  5761                           
  5762                           ;PIR_B1.c: 240: _PIR.Count = 0;
  5763  0338  01BE               	clrf	(__PIR^(0+128)+30)
  5764  0339  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5765                           
  5766                           ;PIR_B1.c: 241: _PIR.OK = 1;
  5767  033A  15A0               	bsf	__PIR^(0+128),3
  5768                           
  5769                           ;PIR_B1.c: 245: if (cds == 0) {
  5770  033B  1283               	bcf	3,5	;RP0=0, select bank0
  5771  033C  1303               	bcf	3,6	;RP1=0, select bank0
  5772  033D  08E9               	movf	PIR_Main@cds,f
  5773  033E  1D03               	skipz
  5774  033F  0008               	return
  5775                           
  5776                           ;PIR_B1.c: 248: if (getLights_Status(1) == 1) {
  5777  0340  3001               	movlw	1
  5778  0341  158A  2165  118A   	fcall	_getLights_Status
  5779  0344  3A01               	xorlw	1
  5780  0345  1D03               	skipz
  5781  0346  0008               	return
  5782                           
  5783                           ;PIR_B1.c: 249: setLights_SwOn(1);
  5784  0347  3001               	movlw	1
  5785  0348  158A  2352  118A   	fcall	_setLights_SwOn
  5786                           
  5787                           ;PIR_B1.c: 250: setLights_SwOff(1);
  5788  034B  3001               	movlw	1
  5789  034C  158A  22A0         	fcall	_setLights_SwOff
  5790                           
  5791                           ;PIR_B1.c: 252: }
  5792                           ;PIR_B1.c: 264: }
  5793                           ;PIR_B1.c: 265: }
  5794                           ;PIR_B1.c: 266: } else {
  5795  034E  0008               	return
  5796  034F                     l7239:	
  5797                           
  5798                           ;PIR_B1.c: 267: if (LightsStatus == 1) {
  5799  034F  1283               	bcf	3,5	;RP0=0, select bank0
  5800  0350  1303               	bcf	3,6	;RP1=0, select bank0
  5801  0351  086A               	movf	PIR_Main@LightsStatus,w
  5802  0352  3A01               	xorlw	1
  5803  0353  1D03               	skipz
  5804  0354  0008               	return
  5805                           
  5806                           ;PIR_B1.c: 268: _PIR.CloseTimeSeconds++;
  5807  0355  3001               	movlw	1
  5808  0356  00E0               	movwf	??_PIR_Main
  5809  0357  0860               	movf	??_PIR_Main,w
  5810  0358  1683               	bsf	3,5	;RP0=1, select bank1
  5811  0359  1303               	bcf	3,6	;RP1=0, select bank1
  5812  035A  07C2               	addwf	(__PIR^(0+128)+34),f
  5813                           
  5814                           ;PIR_B1.c: 269: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  5815  035B  0842               	movf	(__PIR^(0+128)+34),w
  5816  035C  3A32               	xorlw	50
  5817  035D  1D03               	skipz
  5818  035E  0008               	return
  5819                           
  5820                           ;PIR_B1.c: 270: _PIR.CloseTimeSeconds = 0;
  5821  035F  01C2               	clrf	(__PIR^(0+128)+34)
  5822                           
  5823                           ;PIR_B1.c: 271: _PIR.CloseTimeMinutes++;
  5824  0360  3001               	movlw	1
  5825  0361  07C0               	addwf	(__PIR^(0+128)+32),f
  5826  0362  1803               	skipnc
  5827  0363  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  5828  0364  3000               	movlw	0
  5829  0365  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  5830                           
  5831                           ;PIR_B1.c: 272: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5832  0366  0844               	movf	((__PIR+1)^(0+128)+35),w
  5833  0367  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  5834  0368  1D03               	skipz
  5835  0369  2B6C               	goto	u9865
  5836  036A  0843               	movf	(__PIR^(0+128)+35),w
  5837  036B  0640               	xorwf	(__PIR^(0+128)+32),w
  5838  036C                     u9865:	
  5839  036C  1D03               	skipz
  5840  036D  0008               	return
  5841                           
  5842                           ;PIR_B1.c: 273: _PIR.CloseTimeMinutes = 0;
  5843  036E  01C0               	clrf	(__PIR^(0+128)+32)
  5844  036F  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5845                           
  5846                           ;PIR_B1.c: 279: if (getLights_Status(1) == 1) {
  5847  0370  3001               	movlw	1
  5848  0371  158A  2165  118A   	fcall	_getLights_Status
  5849  0374  3A01               	xorlw	1
  5850  0375  1D03               	skipz
  5851  0376  0008               	return
  5852                           
  5853                           ;PIR_B1.c: 280: setLights_SwOn(1);
  5854  0377  3001               	movlw	1
  5855  0378  158A  2352  118A   	fcall	_setLights_SwOn
  5856                           
  5857                           ;PIR_B1.c: 281: setLights_SwOff(1);
  5858  037B  3001               	movlw	1
  5859  037C  158A  22A0         	fcall	_setLights_SwOff
  5860                           
  5861                           ;PIR_B1.c: 283: }
  5862                           ;PIR_B1.c: 295: }
  5863                           ;PIR_B1.c: 296: }
  5864                           ;PIR_B1.c: 297: }
  5865                           ;PIR_B1.c: 298: }
  5866                           ;PIR_B1.c: 299: } else {
  5867  037E  0008               	return
  5868  037F                     l1059:	
  5869                           
  5870                           ;PIR_B1.c: 300: if (myMain.PowerON == 1) {
  5871  037F  1283               	bcf	3,5	;RP0=0, select bank0
  5872  0380  1303               	bcf	3,6	;RP1=0, select bank0
  5873  0381  1C31               	btfss	_myMain,0
  5874  0382  0008               	return
  5875                           
  5876                           ;PIR_B1.c: 301: _PIR.Enable = 1;
  5877  0383  1683               	bsf	3,5	;RP0=1, select bank1
  5878  0384  1303               	bcf	3,6	;RP1=0, select bank1
  5879  0385  1420               	bsf	__PIR^(0+128),0
  5880                           
  5881                           ;PIR_B1.c: 307: if (getLights_Status(1) == 0) {
  5882  0386  3001               	movlw	1
  5883  0387  158A  2165  118A   	fcall	_getLights_Status
  5884  038A  3800               	iorlw	0
  5885  038B  1D03               	skipz
  5886  038C  0008               	return
  5887                           
  5888                           ;PIR_B1.c: 308: setLights_SwOn(1);
  5889  038D  3001               	movlw	1
  5890  038E  158A  2352  118A   	fcall	_setLights_SwOn
  5891                           
  5892                           ;PIR_B1.c: 309: setLights_SwOff(1);
  5893  0391  3001               	movlw	1
  5894  0392  158A  22A0         	fcall	_setLights_SwOff
  5895  0394  0008               	return
  5896  0395                     __end_of_PIR_Main:	
  5897                           
  5898                           	psect	text27
  5899  08DB                     __ptext27:	
  5900 ;; *************** function _getCDS_Status *****************
  5901 ;; Defined at:
  5902 ;;		line 42 in file "../src/CDS_B1.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;		None
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;  status          1    4[COMMON] unsigned char 
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  1    wreg      unsigned char 
  5909 ;; Registers used:
  5910 ;;		wreg, status,2
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5916 ;;      Params:         0       0       0       0
  5917 ;;      Locals:         1       0       0       0
  5918 ;;      Temps:          0       0       0       0
  5919 ;;      Totals:         1       0       0       0
  5920 ;;Total ram usage:        1 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:    2
  5923 ;; This function calls:
  5924 ;;		Nothing
  5925 ;; This function is called by:
  5926 ;;		_PIR_Main
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           
  5931                           ;psect for function _getCDS_Status
  5932  08DB                     _getCDS_Status:	
  5933                           
  5934                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5935                           
  5936                           ;incstack = 0
  5937                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5938  08DB  3000               	movlw	0
  5939  08DC  1283               	bcf	3,5	;RP0=0, select bank0
  5940  08DD  1303               	bcf	3,6	;RP1=0, select bank0
  5941  08DE  1A36               	btfsc	__CDS,4
  5942  08DF  3001               	movlw	1
  5943  08E0  00F9               	movwf	getCDS_Status@status
  5944                           
  5945                           ;CDS_B1.c: 44: return status;
  5946  08E1  0879               	movf	getCDS_Status@status,w
  5947  08E2  0008               	return
  5948  08E3                     __end_of_getCDS_Status:	
  5949                           
  5950                           	psect	text28
  5951  08EB                     __ptext28:	
  5952 ;; *************** function _PIR_Initialization *****************
  5953 ;; Defined at:
  5954 ;;		line 7 in file "../src/PIR_B1.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;		None
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;		None
  5959 ;; Return value:  Size  Location     Type
  5960 ;;		None               void
  5961 ;; Registers used:
  5962 ;;		wreg
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5968 ;;      Params:         0       0       0       0
  5969 ;;      Locals:         0       0       0       0
  5970 ;;      Temps:          1       0       0       0
  5971 ;;      Totals:         1       0       0       0
  5972 ;;Total ram usage:        1 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    2
  5975 ;; This function calls:
  5976 ;;		Nothing
  5977 ;; This function is called by:
  5978 ;;		_main
  5979 ;; This function uses a non-reentrant model
  5980 ;;
  5981                           
  5982                           
  5983                           ;psect for function _PIR_Initialization
  5984  08EB                     _PIR_Initialization:	
  5985                           
  5986                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5987                           
  5988                           ;incstack = 0
  5989                           ; Regs used in _PIR_Initialization: [wreg]
  5990  08EB  3019               	movlw	25
  5991  08EC  00F9               	movwf	??_PIR_Initialization
  5992  08ED  0879               	movf	??_PIR_Initialization,w
  5993  08EE  1683               	bsf	3,5	;RP0=1, select bank1
  5994  08EF  1303               	bcf	3,6	;RP1=0, select bank1
  5995  08F0  00C8               	movwf	(__PIR^(0+128)+40)
  5996                           
  5997                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5998  08F1  3005               	movlw	5
  5999  08F2  00C3               	movwf	(__PIR^(0+128)+35)
  6000  08F3  3000               	movlw	0
  6001  08F4  00C4               	movwf	(__PIR^(0+128)+36)
  6002  08F5  0008               	return
  6003  08F6                     __end_of_PIR_Initialization:	
  6004                           
  6005                           	psect	text29
  6006  0946                     __ptext29:	
  6007 ;; *************** function _Mcu_Initialization *****************
  6008 ;; Defined at:
  6009 ;;		line 30 in file "../src/MCU_B1.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;		None
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;		None
  6014 ;; Return value:  Size  Location     Type
  6015 ;;		None               void
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0, pclath, cstack
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6023 ;;      Params:         0       0       0       0
  6024 ;;      Locals:         0       0       0       0
  6025 ;;      Temps:          0       0       0       0
  6026 ;;      Totals:         0       0       0       0
  6027 ;;Total ram usage:        0 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    3
  6030 ;; This function calls:
  6031 ;;		_ADC_Set
  6032 ;;		_Fosc_Set
  6033 ;;		_IO_Set
  6034 ;;		_TMR1_Set
  6035 ;;		_WDT_Set
  6036 ;; This function is called by:
  6037 ;;		_main
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           
  6042                           ;psect for function _Mcu_Initialization
  6043  0946                     _Mcu_Initialization:	
  6044                           
  6045                           ;MCU_B1.c: 32: Fosc_Set();
  6046                           
  6047                           ;incstack = 0
  6048                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  6049  0946  158A  20A6  158A   	fcall	_Fosc_Set
  6050                           
  6051                           ;MCU_B1.c: 34: IO_Set();
  6052  0949  158A  2270  158A   	fcall	_IO_Set
  6053                           
  6054                           ;MCU_B1.c: 36: ;;
  6055                           ;MCU_B1.c: 38: TMR1_Set();
  6056  094C  158A  211B  158A   	fcall	_TMR1_Set
  6057                           
  6058                           ;MCU_B1.c: 40: ADC_Set();
  6059  094F  158A  20C4  158A   	fcall	_ADC_Set
  6060                           
  6061                           ;MCU_B1.c: 42: ;;
  6062                           ;MCU_B1.c: 44: ;;
  6063                           ;MCU_B1.c: 46: ;;
  6064                           ;MCU_B1.c: 48: ;;
  6065                           ;MCU_B1.c: 50: ;;
  6066                           ;MCU_B1.c: 52: WDT_Set();
  6067  0952  158A  2129         	fcall	_WDT_Set
  6068  0954  0008               	return
  6069  0955                     __end_of_Mcu_Initialization:	
  6070                           
  6071                           	psect	text30
  6072  0929                     __ptext30:	
  6073 ;; *************** function _WDT_Set *****************
  6074 ;; Defined at:
  6075 ;;		line 1089 in file "../src/MCU_B1.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;		None
  6078 ;; Auto vars:     Size  Location     Type
  6079 ;;		None
  6080 ;; Return value:  Size  Location     Type
  6081 ;;		None               void
  6082 ;; Registers used:
  6083 ;;		wreg
  6084 ;; Tracked objects:
  6085 ;;		On entry : 0/0
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6089 ;;      Params:         0       0       0       0
  6090 ;;      Locals:         0       0       0       0
  6091 ;;      Temps:          1       0       0       0
  6092 ;;      Totals:         1       0       0       0
  6093 ;;Total ram usage:        1 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; Hardware stack levels required when called:    2
  6096 ;; This function calls:
  6097 ;;		Nothing
  6098 ;; This function is called by:
  6099 ;;		_Mcu_Initialization
  6100 ;; This function uses a non-reentrant model
  6101 ;;
  6102                           
  6103                           
  6104                           ;psect for function _WDT_Set
  6105  0929                     _WDT_Set:	
  6106                           
  6107                           ;MCU_B1.c: 1091: PSA = 1;
  6108                           
  6109                           ;incstack = 0
  6110                           ; Regs used in _WDT_Set: [wreg]
  6111  0929  1683               	bsf	3,5	;RP0=1, select bank1
  6112  092A  1303               	bcf	3,6	;RP1=0, select bank1
  6113  092B  1581               	bsf	1,3	;volatile
  6114                           
  6115                           ;MCU_B1.c: 1092: PS0 = 1;
  6116  092C  1401               	bsf	1,0	;volatile
  6117                           
  6118                           ;MCU_B1.c: 1093: PS1 = 1;
  6119  092D  1481               	bsf	1,1	;volatile
  6120                           
  6121                           ;MCU_B1.c: 1094: PS2 = 1;
  6122  092E  1501               	bsf	1,2	;volatile
  6123                           
  6124                           ;MCU_B1.c: 1098: WDT.Enable = 1;
  6125  092F  1283               	bcf	3,5	;RP0=0, select bank0
  6126  0930  1303               	bcf	3,6	;RP1=0, select bank0
  6127  0931  143D               	bsf	_WDT,0
  6128                           
  6129                           ;MCU_B1.c: 1099: WDT.Timer = 10;
  6130  0932  300A               	movlw	10
  6131  0933  00F9               	movwf	??_WDT_Set
  6132  0934  0879               	movf	??_WDT_Set,w
  6133  0935  00BE               	movwf	_WDT+1
  6134  0936  0008               	return
  6135  0937                     __end_of_WDT_Set:	
  6136                           
  6137                           	psect	text31
  6138  091B                     __ptext31:	
  6139 ;; *************** function _TMR1_Set *****************
  6140 ;; Defined at:
  6141 ;;		line 226 in file "../src/MCU_B1.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;		None
  6144 ;; Auto vars:     Size  Location     Type
  6145 ;;		None
  6146 ;; Return value:  Size  Location     Type
  6147 ;;		None               void
  6148 ;; Registers used:
  6149 ;;		wreg
  6150 ;; Tracked objects:
  6151 ;;		On entry : 0/0
  6152 ;;		On exit  : 0/0
  6153 ;;		Unchanged: 0/0
  6154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6155 ;;      Params:         0       0       0       0
  6156 ;;      Locals:         0       0       0       0
  6157 ;;      Temps:          0       0       0       0
  6158 ;;      Totals:         0       0       0       0
  6159 ;;Total ram usage:        0 bytes
  6160 ;; Hardware stack levels used:    1
  6161 ;; Hardware stack levels required when called:    2
  6162 ;; This function calls:
  6163 ;;		Nothing
  6164 ;; This function is called by:
  6165 ;;		_Mcu_Initialization
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           
  6170                           ;psect for function _TMR1_Set
  6171  091B                     _TMR1_Set:	
  6172                           
  6173                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  6174                           
  6175                           ;incstack = 0
  6176                           ; Regs used in _TMR1_Set: [wreg]
  6177  091B  3041               	movlw	65
  6178  091C  1283               	bcf	3,5	;RP0=0, select bank0
  6179  091D  1303               	bcf	3,6	;RP1=0, select bank0
  6180  091E  0090               	movwf	16	;volatile
  6181                           
  6182                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  6183  091F  30FA               	movlw	250
  6184  0920  008F               	movwf	15	;volatile
  6185                           
  6186                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  6187  0921  3038               	movlw	56
  6188  0922  008E               	movwf	14	;volatile
  6189                           
  6190                           ;MCU_B1.c: 230: TMR1IE = 1;
  6191  0923  1683               	bsf	3,5	;RP0=1, select bank1
  6192  0924  1303               	bcf	3,6	;RP1=0, select bank1
  6193  0925  140C               	bsf	12,0	;volatile
  6194                           
  6195                           ;MCU_B1.c: 231: PEIE = 1;
  6196  0926  170B               	bsf	11,6	;volatile
  6197                           
  6198                           ;MCU_B1.c: 232: GIE = 1;
  6199  0927  178B               	bsf	11,7	;volatile
  6200  0928  0008               	return
  6201  0929                     __end_of_TMR1_Set:	
  6202                           
  6203                           	psect	text32
  6204  0A70                     __ptext32:	
  6205 ;; *************** function _IO_Set *****************
  6206 ;; Defined at:
  6207 ;;		line 60 in file "../src/MCU_B1.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;		None
  6210 ;; Auto vars:     Size  Location     Type
  6211 ;;		None
  6212 ;; Return value:  Size  Location     Type
  6213 ;;		None               void
  6214 ;; Registers used:
  6215 ;;		wreg, status,2
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6221 ;;      Params:         0       0       0       0
  6222 ;;      Locals:         0       0       0       0
  6223 ;;      Temps:          0       0       0       0
  6224 ;;      Totals:         0       0       0       0
  6225 ;;Total ram usage:        0 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    2
  6228 ;; This function calls:
  6229 ;;		Nothing
  6230 ;; This function is called by:
  6231 ;;		_Mcu_Initialization
  6232 ;; This function uses a non-reentrant model
  6233 ;;
  6234                           
  6235                           
  6236                           ;psect for function _IO_Set
  6237  0A70                     _IO_Set:	
  6238                           
  6239                           ;MCU_B1.c: 62: TRISA = 0b00101110;;
  6240                           
  6241                           ;incstack = 0
  6242                           ; Regs used in _IO_Set: [wreg+status,2]
  6243  0A70  302E               	movlw	46
  6244  0A71  1683               	bsf	3,5	;RP0=1, select bank1
  6245  0A72  1303               	bcf	3,6	;RP1=0, select bank1
  6246  0A73  0085               	movwf	5	;volatile
  6247                           
  6248                           ;MCU_B1.c: 63: TRISB = 0b00010101;;
  6249  0A74  3015               	movlw	21
  6250  0A75  0086               	movwf	6	;volatile
  6251                           
  6252                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  6253  0A76  0187               	clrf	7	;volatile
  6254                           
  6255                           ;MCU_B1.c: 65: ANSELA = 0b00101110;;
  6256  0A77  302E               	movlw	46
  6257  0A78  1683               	bsf	3,5	;RP0=1, select bank3
  6258  0A79  1703               	bsf	3,6	;RP1=1, select bank3
  6259  0A7A  0085               	movwf	5	;volatile
  6260                           
  6261                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  6262  0A7B  3001               	movlw	1
  6263  0A7C  0086               	movwf	6	;volatile
  6264                           
  6265                           ;MCU_B1.c: 67: PORTA = 0b00101110;;
  6266  0A7D  302E               	movlw	46
  6267  0A7E  1283               	bcf	3,5	;RP0=0, select bank0
  6268  0A7F  1303               	bcf	3,6	;RP1=0, select bank0
  6269  0A80  0085               	movwf	5	;volatile
  6270                           
  6271                           ;MCU_B1.c: 68: PORTB = 0b00010101;;
  6272  0A81  3015               	movlw	21
  6273  0A82  0086               	movwf	6	;volatile
  6274                           
  6275                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  6276  0A83  0187               	clrf	7	;volatile
  6277                           
  6278                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  6279  0A84  1683               	bsf	3,5	;RP0=1, select bank1
  6280  0A85  1303               	bcf	3,6	;RP1=0, select bank1
  6281  0A86  0195               	clrf	21	;volatile
  6282  0A87  0008               	return
  6283  0A88                     __end_of_IO_Set:	
  6284                           
  6285                           	psect	text33
  6286  08A6                     __ptext33:	
  6287 ;; *************** function _Fosc_Set *****************
  6288 ;; Defined at:
  6289 ;;		line 56 in file "../src/MCU_B1.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;		None
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;		None
  6294 ;; Return value:  Size  Location     Type
  6295 ;;		None               void
  6296 ;; Registers used:
  6297 ;;		wreg
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/0
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6303 ;;      Params:         0       0       0       0
  6304 ;;      Locals:         0       0       0       0
  6305 ;;      Temps:          0       0       0       0
  6306 ;;      Totals:         0       0       0       0
  6307 ;;Total ram usage:        0 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:    2
  6310 ;; This function calls:
  6311 ;;		Nothing
  6312 ;; This function is called by:
  6313 ;;		_Mcu_Initialization
  6314 ;; This function uses a non-reentrant model
  6315 ;;
  6316                           
  6317                           
  6318                           ;psect for function _Fosc_Set
  6319  08A6                     _Fosc_Set:	
  6320                           
  6321                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  6322                           
  6323                           ;incstack = 0
  6324                           ; Regs used in _Fosc_Set: [wreg]
  6325  08A6  303C               	movlw	60
  6326  08A7  1683               	bsf	3,5	;RP0=1, select bank1
  6327  08A8  1303               	bcf	3,6	;RP1=0, select bank1
  6328  08A9  0090               	movwf	16	;volatile
  6329  08AA  0008               	return
  6330  08AB                     __end_of_Fosc_Set:	
  6331                           
  6332                           	psect	text34
  6333  08C4                     __ptext34:	
  6334 ;; *************** function _ADC_Set *****************
  6335 ;; Defined at:
  6336 ;;		line 425 in file "../src/MCU_B1.c"
  6337 ;; Parameters:    Size  Location     Type
  6338 ;;		None
  6339 ;; Auto vars:     Size  Location     Type
  6340 ;;		None
  6341 ;; Return value:  Size  Location     Type
  6342 ;;		None               void
  6343 ;; Registers used:
  6344 ;;		wreg
  6345 ;; Tracked objects:
  6346 ;;		On entry : 0/0
  6347 ;;		On exit  : 0/0
  6348 ;;		Unchanged: 0/0
  6349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6350 ;;      Params:         0       0       0       0
  6351 ;;      Locals:         0       0       0       0
  6352 ;;      Temps:          0       0       0       0
  6353 ;;      Totals:         0       0       0       0
  6354 ;;Total ram usage:        0 bytes
  6355 ;; Hardware stack levels used:    1
  6356 ;; Hardware stack levels required when called:    2
  6357 ;; This function calls:
  6358 ;;		Nothing
  6359 ;; This function is called by:
  6360 ;;		_Mcu_Initialization
  6361 ;; This function uses a non-reentrant model
  6362 ;;
  6363                           
  6364                           
  6365                           ;psect for function _ADC_Set
  6366  08C4                     _ADC_Set:	
  6367                           
  6368                           ;MCU_B1.c: 426: ADCON1 = 0x73;
  6369                           
  6370                           ;incstack = 0
  6371                           ; Regs used in _ADC_Set: [wreg]
  6372  08C4  3073               	movlw	115
  6373  08C5  1683               	bsf	3,5	;RP0=1, select bank1
  6374  08C6  1303               	bcf	3,6	;RP1=0, select bank1
  6375  08C7  009F               	movwf	31	;volatile
  6376                           
  6377                           ;MCU_B1.c: 427: FVRCON = 0xc1;
  6378  08C8  30C1               	movlw	193
  6379  08C9  009D               	movwf	29	;volatile
  6380  08CA  0008               	return
  6381  08CB                     __end_of_ADC_Set:	
  6382                           
  6383                           	psect	text35
  6384  002E                     __ptext35:	
  6385 ;; *************** function _Load_Main *****************
  6386 ;; Defined at:
  6387 ;;		line 39 in file "../src/OverLoad_B1.c"
  6388 ;; Parameters:    Size  Location     Type
  6389 ;;		None
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;  i               2   16[BANK0 ] int 
  6392 ;;  LightsCount     1   15[BANK0 ] unsigned char 
  6393 ;;  JudgeValue      1   14[BANK0 ] unsigned char 
  6394 ;;  Load_Status     1   13[BANK0 ] unsigned char 
  6395 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  6396 ;;  error           1    9[BANK0 ] unsigned char 
  6397 ;; Return value:  Size  Location     Type
  6398 ;;		None               void
  6399 ;; Registers used:
  6400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6406 ;;      Params:         0       0       0       0
  6407 ;;      Locals:         0       9       0       0
  6408 ;;      Temps:          0       2       0       0
  6409 ;;      Totals:         0      11       0       0
  6410 ;;Total ram usage:       11 bytes
  6411 ;; Hardware stack levels used:    1
  6412 ;; Hardware stack levels required when called:    3
  6413 ;; This function calls:
  6414 ;;		___bmul
  6415 ;;		___lwdiv
  6416 ;;		_getLight_LoadGO
  6417 ;;		_getLight_Load_Status
  6418 ;;		_getMain_All_Error_Status
  6419 ;;		_getMain_All_LightsStatus
  6420 ;;		_getMain_Lights_Count
  6421 ;;		_setLoad_AH_AL_Restore
  6422 ;; This function is called by:
  6423 ;;		_main
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           
  6428                           ;psect for function _Load_Main
  6429  002E                     _Load_Main:	
  6430                           
  6431                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  6432                           
  6433                           ;incstack = 0
  6434                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6435  002E  3000               	movlw	0
  6436  002F  158A  249A  118A   	fcall	_getMain_All_Error_Status
  6437  0032  1283               	bcf	3,5	;RP0=0, select bank0
  6438  0033  1303               	bcf	3,6	;RP1=0, select bank0
  6439  0034  00E1               	movwf	??_Load_Main
  6440  0035  0861               	movf	??_Load_Main,w
  6441  0036  00E3               	movwf	Load_Main@error
  6442                           
  6443                           ;OverLoad_B1.c: 41: char Load_Status = 0, ErrorCountValue = 0, LightsCount=0;
  6444  0037  01E7               	clrf	Load_Main@Load_Status
  6445  0038  01E6               	clrf	Load_Main@ErrorCountValue
  6446  0039  01E9               	clrf	Load_Main@LightsCount
  6447                           
  6448                           ;OverLoad_B1.c: 42: ADtype JudgeValue = 0;
  6449  003A  01E8               	clrf	Load_Main@JudgeValue
  6450                           
  6451                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  6452  003B  1683               	bsf	3,5	;RP0=1, select bank1
  6453  003C  1303               	bcf	3,6	;RP1=0, select bank1
  6454  003D  1C4A               	btfss	_Load^(0+128),0
  6455  003E  29ED               	goto	l841
  6456                           
  6457                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
  6458  003F  158A  2155  118A   	fcall	_getMain_All_LightsStatus
  6459  0042  3800               	iorlw	0
  6460  0043  1D03               	skipz
  6461  0044  2848               	goto	l6967
  6462                           
  6463                           ;OverLoad_B1.c: 46: Load.GO = 0;
  6464  0045  1683               	bsf	3,5	;RP0=1, select bank1
  6465  0046  1303               	bcf	3,6	;RP1=0, select bank1
  6466  0047  2867               	goto	l6983
  6467  0048                     l6967:	
  6468                           ;OverLoad_B1.c: 47: } else {
  6469                           
  6470                           
  6471                           ;OverLoad_B1.c: 70: if (error == 0) {
  6472  0048  1283               	bcf	3,5	;RP0=0, select bank0
  6473  0049  1303               	bcf	3,6	;RP1=0, select bank0
  6474  004A  08E3               	movf	Load_Main@error,f
  6475  004B  1D03               	skipz
  6476  004C  2864               	goto	l844
  6477                           
  6478                           ;OverLoad_B1.c: 71: Load.GO = 1;
  6479  004D  1683               	bsf	3,5	;RP0=1, select bank1
  6480  004E  1303               	bcf	3,6	;RP1=0, select bank1
  6481  004F  14CA               	bsf	_Load^(0+128),1
  6482                           
  6483                           ;OverLoad_B1.c: 73: if (getLight_LoadGO() == 1) {
  6484  0050  158A  20AB  118A   	fcall	_getLight_LoadGO
  6485  0053  3A01               	xorlw	1
  6486  0054  1D03               	skipz
  6487  0055  285E               	goto	l845
  6488                           
  6489                           ;OverLoad_B1.c: 74: if (Load.Run == 0 && Load.OK == 0) {
  6490  0056  1683               	bsf	3,5	;RP0=1, select bank1
  6491  0057  1303               	bcf	3,6	;RP1=0, select bank1
  6492  0058  1DCA               	btfss	_Load^(0+128),3
  6493  0059  1BCA               	btfsc	_Load^(0+128),7
  6494  005A  2868               	goto	l843
  6495                           
  6496                           ;OverLoad_B1.c: 75: Load.Run = 1;
  6497  005B  15CA               	bsf	_Load^(0+128),3
  6498                           
  6499                           ;OverLoad_B1.c: 76: Load.Count = 0;
  6500  005C  01E1               	clrf	(_Load^(0+128)+23)
  6501                           
  6502                           ;OverLoad_B1.c: 77: }
  6503                           ;OverLoad_B1.c: 78: } else {
  6504  005D  2868               	goto	l843
  6505  005E                     l845:	
  6506                           
  6507                           ;OverLoad_B1.c: 79: if (Load.OK == 1) {
  6508  005E  1683               	bsf	3,5	;RP0=1, select bank1
  6509  005F  1303               	bcf	3,6	;RP1=0, select bank1
  6510  0060  1FCA               	btfss	_Load^(0+128),7
  6511  0061  2868               	goto	l843
  6512                           
  6513                           ;OverLoad_B1.c: 80: Load.OK = 0;
  6514  0062  13CA               	bcf	_Load^(0+128),7
  6515                           
  6516                           ;OverLoad_B1.c: 81: }
  6517                           ;OverLoad_B1.c: 82: }
  6518                           ;OverLoad_B1.c: 83: } else {
  6519  0063  2868               	goto	l843
  6520  0064                     l844:	
  6521                           
  6522                           ;OverLoad_B1.c: 84: if (Load.GO == 1) {
  6523  0064  1683               	bsf	3,5	;RP0=1, select bank1
  6524  0065  1303               	bcf	3,6	;RP1=0, select bank1
  6525  0066  18CA               	btfsc	_Load^(0+128),1
  6526  0067                     l6983:	
  6527                           
  6528                           ;OverLoad_B1.c: 85: Load.GO = 0;
  6529  0067  10CA               	bcf	_Load^(0+128),1
  6530  0068                     l843:	
  6531                           
  6532                           ;OverLoad_B1.c: 86: }
  6533                           ;OverLoad_B1.c: 87: }
  6534                           ;OverLoad_B1.c: 89: }
  6535                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
  6536  0068  1CCA               	btfss	_Load^(0+128),1
  6537  0069  29C6               	goto	l851
  6538                           
  6539                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
  6540  006A  154A               	bsf	_Load^(0+128),2
  6541                           
  6542                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
  6543  006B  1E4A               	btfss	_Load^(0+128),4
  6544  006C  29C4               	goto	l852
  6545                           
  6546                           ;OverLoad_B1.c: 96: Load.Time++;
  6547  006D  3001               	movlw	1
  6548  006E  07CB               	addwf	(_Load^(0+128)+1),f
  6549  006F  1803               	skipnc
  6550  0070  0ACC               	incf	((_Load+1)^(0+128)+1),f
  6551  0071  3000               	movlw	0
  6552  0072  07CC               	addwf	((_Load+1)^(0+128)+1),f
  6553                           
  6554                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
  6555  0073  3000               	movlw	0
  6556  0074  024C               	subwf	((_Load+1)^(0+128)+1),w
  6557  0075  3002               	movlw	2
  6558  0076  1903               	skipnz
  6559  0077  024B               	subwf	(_Load^(0+128)+1),w
  6560  0078  1C03               	skipc
  6561  0079  0008               	return
  6562                           
  6563                           ;OverLoad_B1.c: 98: Load.Time = 0;
  6564  007A  01CB               	clrf	(_Load^(0+128)+1)
  6565  007B  01CC               	clrf	((_Load+1)^(0+128)+1)
  6566                           
  6567                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
  6568  007C  124A               	bcf	_Load^(0+128),4
  6569                           
  6570                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
  6571  007D  3001               	movlw	1
  6572  007E  1283               	bcf	3,5	;RP0=0, select bank0
  6573  007F  1303               	bcf	3,6	;RP1=0, select bank0
  6574  0080  00EA               	movwf	Load_Main@i
  6575  0081  3000               	movlw	0
  6576  0082  00EB               	movwf	Load_Main@i+1
  6577  0083  086B               	movf	Load_Main@i+1,w
  6578  0084  3A80               	xorlw	128
  6579  0085  00FF               	movwf	127
  6580  0086  3080               	movlw	128
  6581  0087  027F               	subwf	127,w
  6582  0088  1D03               	skipz
  6583  0089  288C               	goto	u9315
  6584  008A  3004               	movlw	4
  6585  008B  026A               	subwf	Load_Main@i,w
  6586  008C                     u9315:	
  6587  008C  1803               	btfsc	3,0
  6588  008D  28CA               	goto	l7005
  6589  008E                     l6999:	
  6590                           
  6591                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
  6592  008E  1283               	bcf	3,5	;RP0=0, select bank0
  6593  008F  1303               	bcf	3,6	;RP1=0, select bank0
  6594  0090  086A               	movf	Load_Main@i,w
  6595  0091  3ED4               	addlw	(_Load+10)& (0+255)
  6596  0092  0084               	movwf	4
  6597  0093  1383               	bcf	3,7	;select IRP bank1
  6598  0094  0800               	movf	0,w
  6599  0095  00E1               	movwf	??_Load_Main
  6600  0096  01E2               	clrf	??_Load_Main+1
  6601  0097  0861               	movf	??_Load_Main,w
  6602  0098  1683               	bsf	3,5	;RP0=1, select bank1
  6603  0099  1303               	bcf	3,6	;RP1=0, select bank1
  6604  009A  07CF               	addwf	(_Load^(0+128)+5),f
  6605  009B  1803               	skipnc
  6606  009C  0AD0               	incf	((_Load+1)^(0+128)+5),f
  6607  009D  1283               	bcf	3,5	;RP0=0, select bank0
  6608  009E  1303               	bcf	3,6	;RP1=0, select bank0
  6609  009F  0862               	movf	??_Load_Main+1,w
  6610  00A0  1683               	bsf	3,5	;RP0=1, select bank1
  6611  00A1  1303               	bcf	3,6	;RP1=0, select bank1
  6612  00A2  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6613                           
  6614                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
  6615  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  6616  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  6617  00A5  086A               	movf	Load_Main@i,w
  6618  00A6  3ED9               	addlw	(_Load+15)& (0+255)
  6619  00A7  0084               	movwf	4
  6620  00A8  0800               	movf	0,w
  6621  00A9  00E1               	movwf	??_Load_Main
  6622  00AA  01E2               	clrf	??_Load_Main+1
  6623  00AB  0861               	movf	??_Load_Main,w
  6624  00AC  1683               	bsf	3,5	;RP0=1, select bank1
  6625  00AD  1303               	bcf	3,6	;RP1=0, select bank1
  6626  00AE  07D1               	addwf	(_Load^(0+128)+7),f
  6627  00AF  1803               	skipnc
  6628  00B0  0AD2               	incf	((_Load+1)^(0+128)+7),f
  6629  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  6630  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  6631  00B3  0862               	movf	??_Load_Main+1,w
  6632  00B4  1683               	bsf	3,5	;RP0=1, select bank1
  6633  00B5  1303               	bcf	3,6	;RP1=0, select bank1
  6634  00B6  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6635  00B7  3001               	movlw	1
  6636  00B8  1283               	bcf	3,5	;RP0=0, select bank0
  6637  00B9  1303               	bcf	3,6	;RP1=0, select bank0
  6638  00BA  07EA               	addwf	Load_Main@i,f
  6639  00BB  1803               	skipnc
  6640  00BC  0AEB               	incf	Load_Main@i+1,f
  6641  00BD  3000               	movlw	0
  6642  00BE  07EB               	addwf	Load_Main@i+1,f
  6643  00BF  086B               	movf	Load_Main@i+1,w
  6644  00C0  3A80               	xorlw	128
  6645  00C1  00FF               	movwf	127
  6646  00C2  3080               	movlw	128
  6647  00C3  027F               	subwf	127,w
  6648  00C4  1D03               	skipz
  6649  00C5  28C8               	goto	u9325
  6650  00C6  3004               	movlw	4
  6651  00C7  026A               	subwf	Load_Main@i,w
  6652  00C8                     u9325:	
  6653  00C8  1C03               	skipc
  6654  00C9  288E               	goto	l6999
  6655  00CA                     l7005:	
  6656                           
  6657                           ;OverLoad_B1.c: 104: }
  6658                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
  6659  00CA  3003               	movlw	3
  6660  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  6661  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  6662  00CD  00DA               	movwf	___lwdiv@divisor
  6663  00CE  3000               	movlw	0
  6664  00CF  00DB               	movwf	___lwdiv@divisor+1
  6665  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  6666  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  6667  00D2  0850               	movf	((_Load+1)^(0+128)+5),w
  6668  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  6669  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  6670  00D5  01DD               	clrf	___lwdiv@dividend+1
  6671  00D6  07DD               	addwf	___lwdiv@dividend+1,f
  6672  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  6673  00D8  1303               	bcf	3,6	;RP1=0, select bank1
  6674  00D9  084F               	movf	(_Load^(0+128)+5),w
  6675  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  6676  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  6677  00DC  01DC               	clrf	___lwdiv@dividend
  6678  00DD  07DC               	addwf	___lwdiv@dividend,f
  6679  00DE  158A  24D8  118A   	fcall	___lwdiv
  6680  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  6681  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  6682  00E3  085B               	movf	?___lwdiv+1,w
  6683  00E4  1683               	bsf	3,5	;RP0=1, select bank1
  6684  00E5  1303               	bcf	3,6	;RP1=0, select bank1
  6685  00E6  01D0               	clrf	((_Load+1)^(0+128)+5)
  6686  00E7  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6687  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6688  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6689  00EA  085A               	movf	?___lwdiv,w
  6690  00EB  1683               	bsf	3,5	;RP0=1, select bank1
  6691  00EC  1303               	bcf	3,6	;RP1=0, select bank1
  6692  00ED  01CF               	clrf	(_Load^(0+128)+5)
  6693  00EE  07CF               	addwf	(_Load^(0+128)+5),f
  6694                           
  6695                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
  6696  00EF  3003               	movlw	3
  6697  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  6698  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  6699  00F2  00DA               	movwf	___lwdiv@divisor
  6700  00F3  3000               	movlw	0
  6701  00F4  00DB               	movwf	___lwdiv@divisor+1
  6702  00F5  1683               	bsf	3,5	;RP0=1, select bank1
  6703  00F6  1303               	bcf	3,6	;RP1=0, select bank1
  6704  00F7  0852               	movf	((_Load+1)^(0+128)+7),w
  6705  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  6706  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  6707  00FA  01DD               	clrf	___lwdiv@dividend+1
  6708  00FB  07DD               	addwf	___lwdiv@dividend+1,f
  6709  00FC  1683               	bsf	3,5	;RP0=1, select bank1
  6710  00FD  1303               	bcf	3,6	;RP1=0, select bank1
  6711  00FE  0851               	movf	(_Load^(0+128)+7),w
  6712  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  6713  0100  1303               	bcf	3,6	;RP1=0, select bank0
  6714  0101  01DC               	clrf	___lwdiv@dividend
  6715  0102  07DC               	addwf	___lwdiv@dividend,f
  6716  0103  158A  24D8  118A   	fcall	___lwdiv
  6717  0106  1283               	bcf	3,5	;RP0=0, select bank0
  6718  0107  1303               	bcf	3,6	;RP1=0, select bank0
  6719  0108  085B               	movf	?___lwdiv+1,w
  6720  0109  1683               	bsf	3,5	;RP0=1, select bank1
  6721  010A  1303               	bcf	3,6	;RP1=0, select bank1
  6722  010B  01D2               	clrf	((_Load+1)^(0+128)+7)
  6723  010C  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6724  010D  1283               	bcf	3,5	;RP0=0, select bank0
  6725  010E  1303               	bcf	3,6	;RP1=0, select bank0
  6726  010F  085A               	movf	?___lwdiv,w
  6727  0110  1683               	bsf	3,5	;RP0=1, select bank1
  6728  0111  1303               	bcf	3,6	;RP1=0, select bank1
  6729  0112  01D1               	clrf	(_Load^(0+128)+7)
  6730  0113  07D1               	addwf	(_Load^(0+128)+7),f
  6731                           
  6732                           ;OverLoad_B1.c: 107: setLoad_AH_AL_Restore();
  6733  0114  158A  2258  118A   	fcall	_setLoad_AH_AL_Restore
  6734                           
  6735                           ;OverLoad_B1.c: 109: if (Load.ADH >= Load.ADL) {
  6736  0117  1683               	bsf	3,5	;RP0=1, select bank1
  6737  0118  1303               	bcf	3,6	;RP1=0, select bank1
  6738  0119  0852               	movf	((_Load+1)^(0+128)+7),w
  6739  011A  0250               	subwf	((_Load+1)^(0+128)+5),w
  6740  011B  1D03               	skipz
  6741  011C  291F               	goto	u9335
  6742  011D  0851               	movf	(_Load^(0+128)+7),w
  6743  011E  024F               	subwf	(_Load^(0+128)+5),w
  6744  011F                     u9335:	
  6745  011F  1C03               	skipc
  6746  0120  0008               	return
  6747                           
  6748                           ;OverLoad_B1.c: 110: Load.AD = Load.ADH - Load.ADL;
  6749  0121  0351               	decf	(_Load^(0+128)+7),w
  6750  0122  3AFF               	xorlw	255
  6751  0123  074F               	addwf	(_Load^(0+128)+5),w
  6752  0124  1283               	bcf	3,5	;RP0=0, select bank0
  6753  0125  1303               	bcf	3,6	;RP1=0, select bank0
  6754  0126  00E1               	movwf	??_Load_Main
  6755  0127  0861               	movf	??_Load_Main,w
  6756  0128  1683               	bsf	3,5	;RP0=1, select bank1
  6757  0129  1303               	bcf	3,6	;RP1=0, select bank1
  6758  012A  00DE               	movwf	(_Load^(0+128)+20)
  6759                           
  6760                           ;OverLoad_B1.c: 111: Load.ADH = 0;
  6761  012B  01CF               	clrf	(_Load^(0+128)+5)
  6762  012C  01D0               	clrf	((_Load+1)^(0+128)+5)
  6763                           
  6764                           ;OverLoad_B1.c: 112: Load.ADL = 0;
  6765  012D  01D1               	clrf	(_Load^(0+128)+7)
  6766  012E  01D2               	clrf	((_Load+1)^(0+128)+7)
  6767                           
  6768                           ;OverLoad_B1.c: 114: if (Load.Run == 1) {
  6769  012F  1DCA               	btfss	_Load^(0+128),3
  6770  0130  2980               	goto	l7045
  6771                           
  6772                           ;OverLoad_B1.c: 115: if (Load.Count < 2) {
  6773  0131  3002               	movlw	2
  6774  0132  0261               	subwf	(_Load^(0+128)+23),w
  6775  0133  1803               	skipnc
  6776  0134  2980               	goto	l7045
  6777                           
  6778                           ;OverLoad_B1.c: 116: Load.Count++;
  6779  0135  3001               	movlw	1
  6780  0136  1283               	bcf	3,5	;RP0=0, select bank0
  6781  0137  1303               	bcf	3,6	;RP1=0, select bank0
  6782  0138  00E1               	movwf	??_Load_Main
  6783  0139  0861               	movf	??_Load_Main,w
  6784  013A  1683               	bsf	3,5	;RP0=1, select bank1
  6785  013B  1303               	bcf	3,6	;RP1=0, select bank1
  6786  013C  07E1               	addwf	(_Load^(0+128)+23),f
  6787                           
  6788                           ;OverLoad_B1.c: 121: Load_Status = getLight_Load_Status();
  6789  013D  158A  20B1  118A   	fcall	_getLight_Load_Status
  6790  0140  1283               	bcf	3,5	;RP0=0, select bank0
  6791  0141  1303               	bcf	3,6	;RP1=0, select bank0
  6792  0142  00E1               	movwf	??_Load_Main
  6793  0143  0861               	movf	??_Load_Main,w
  6794  0144  00E7               	movwf	Load_Main@Load_Status
  6795                           
  6796                           ;OverLoad_B1.c: 123: LightsCount = getMain_Lights_Count();
  6797  0145  158A  2137  118A   	fcall	_getMain_Lights_Count
  6798  0148  1283               	bcf	3,5	;RP0=0, select bank0
  6799  0149  1303               	bcf	3,6	;RP1=0, select bank0
  6800  014A  00E1               	movwf	??_Load_Main
  6801  014B  0861               	movf	??_Load_Main,w
  6802  014C  00E9               	movwf	Load_Main@LightsCount
  6803                           
  6804                           ;OverLoad_B1.c: 125: if (Load.Count == 1) {
  6805  014D  1683               	bsf	3,5	;RP0=1, select bank1
  6806  014E  1303               	bcf	3,6	;RP1=0, select bank1
  6807  014F  0861               	movf	(_Load^(0+128)+23),w
  6808  0150  3A01               	xorlw	1
  6809  0151  1D03               	skipz
  6810  0152  2955               	goto	l7031
  6811                           
  6812                           ;OverLoad_B1.c: 127: JudgeValue = (int)(20*50);
  6813  0153  30E8               	movlw	232
  6814  0154  297B               	goto	L17
  6815  0155                     l7031:	
  6816                           ;OverLoad_B1.c: 128: } else if (Load.Count == 2) {
  6817                           
  6818  0155  1683               	bsf	3,5	;RP0=1, select bank1
  6819  0156  1303               	bcf	3,6	;RP1=0, select bank1
  6820  0157  0861               	movf	(_Load^(0+128)+23),w
  6821  0158  3A02               	xorlw	2
  6822  0159  1D03               	skipz
  6823  015A  2980               	goto	l7045
  6824                           
  6825                           ;OverLoad_B1.c: 129: if (LightsCount == 1) {
  6826  015B  1283               	bcf	3,5	;RP0=0, select bank0
  6827  015C  1303               	bcf	3,6	;RP1=0, select bank0
  6828  015D  0869               	movf	Load_Main@LightsCount,w
  6829  015E  3A01               	xorlw	1
  6830  015F  1D03               	skipz
  6831  0160  2963               	goto	l7037
  6832                           
  6833                           ;OverLoad_B1.c: 130: JudgeValue = (int)(1*50);
  6834  0161  3032               	movlw	50
  6835  0162  297D               	goto	L16
  6836  0163                     l7037:	
  6837                           ;OverLoad_B1.c: 131: } else {
  6838                           
  6839                           
  6840                           ;OverLoad_B1.c: 132: if (Load_Status == 0) {
  6841  0163  08E7               	movf	Load_Main@Load_Status,f
  6842  0164  1D03               	skipz
  6843  0165  2973               	goto	l7041
  6844                           
  6845                           ;OverLoad_B1.c: 133: JudgeValue = (int)(1*50) * LightsCount;
  6846  0166  3032               	movlw	50
  6847  0167  00E1               	movwf	??_Load_Main
  6848  0168  0861               	movf	??_Load_Main,w
  6849  0169  00F9               	movwf	___bmul@multiplicand
  6850  016A  0869               	movf	Load_Main@LightsCount,w
  6851  016B  158A  2199  118A   	fcall	___bmul
  6852  016E  1283               	bcf	3,5	;RP0=0, select bank0
  6853  016F  1303               	bcf	3,6	;RP1=0, select bank0
  6854  0170  00E2               	movwf	??_Load_Main+1
  6855  0171  0862               	movf	??_Load_Main+1,w
  6856  0172  297F               	goto	L14
  6857  0173                     l7041:	
  6858                           ;OverLoad_B1.c: 134: } else if (Load_Status == 1) {
  6859                           
  6860  0173  0867               	movf	Load_Main@Load_Status,w
  6861  0174  3A01               	xorlw	1
  6862  0175  1D03               	skipz
  6863  0176  2980               	goto	l7045
  6864                           
  6865                           ;OverLoad_B1.c: 135: JudgeValue = (int)(1*50) + Load.TotalLoad;
  6866  0177  1683               	bsf	3,5	;RP0=1, select bank1
  6867  0178  1303               	bcf	3,6	;RP1=0, select bank1
  6868  0179  0853               	movf	(_Load^(0+128)+9),w
  6869  017A  3E32               	addlw	50
  6870  017B                     L17:	
  6871  017B  1283               	bcf	3,5	;RP0=0, select bank0
  6872  017C  1303               	bcf	3,6	;RP1=0, select bank0
  6873  017D                     L16:	
  6874  017D  00E1               	movwf	??_Load_Main
  6875  017E  0861               	movf	??_Load_Main,w
  6876  017F                     L14:	
  6877  017F  00E8               	movwf	Load_Main@JudgeValue
  6878  0180                     l7045:	
  6879                           
  6880                           ;OverLoad_B1.c: 136: }
  6881                           ;OverLoad_B1.c: 137: }
  6882                           ;OverLoad_B1.c: 138: }
  6883                           ;OverLoad_B1.c: 139: }
  6884                           ;OverLoad_B1.c: 140: }
  6885                           ;OverLoad_B1.c: 142: if (Load.AD >= JudgeValue) {
  6886  0180  1283               	bcf	3,5	;RP0=0, select bank0
  6887  0181  0868               	movf	Load_Main@JudgeValue,w
  6888  0182  1683               	bsf	3,5	;RP0=1, select bank1
  6889  0183  1303               	bcf	3,6	;RP1=0, select bank1
  6890  0184  025E               	subwf	(_Load^(0+128)+20),w
  6891  0185  1C03               	skipc
  6892  0186  29A8               	goto	l7061
  6893                           
  6894                           ;OverLoad_B1.c: 143: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6895  0187  1283               	bcf	3,5	;RP0=0, select bank0
  6896  0188  1303               	bcf	3,6	;RP1=0, select bank0
  6897  0189  0869               	movf	Load_Main@LightsCount,w
  6898  018A  3A01               	xorlw	1
  6899  018B  1903               	skipnz
  6900  018C  298F               	goto	l7051
  6901  018D  3003               	movlw	3
  6902  018E  2990               	goto	L15
  6903  018F                     l7051:	
  6904  018F  3002               	movlw	2
  6905  0190                     L15:	
  6906  0190  00E4               	movwf	_Load_Main$2691
  6907  0191  3000               	movlw	0
  6908  0192  00E5               	movwf	_Load_Main$2691+1
  6909  0193  0864               	movf	_Load_Main$2691,w
  6910  0194  00E1               	movwf	??_Load_Main
  6911  0195  0861               	movf	??_Load_Main,w
  6912  0196  00E6               	movwf	Load_Main@ErrorCountValue
  6913                           
  6914                           ;OverLoad_B1.c: 144: Load.ErrorCount++;
  6915  0197  3001               	movlw	1
  6916  0198  00E1               	movwf	??_Load_Main
  6917  0199  0861               	movf	??_Load_Main,w
  6918  019A  1683               	bsf	3,5	;RP0=1, select bank1
  6919  019B  1303               	bcf	3,6	;RP1=0, select bank1
  6920  019C  07E2               	addwf	(_Load^(0+128)+24),f
  6921                           
  6922                           ;OverLoad_B1.c: 145: if (Load.ErrorCount > ErrorCountValue) {
  6923  019D  0862               	movf	(_Load^(0+128)+24),w
  6924  019E  1283               	bcf	3,5	;RP0=0, select bank0
  6925  019F  1303               	bcf	3,6	;RP1=0, select bank0
  6926  01A0  0266               	subwf	Load_Main@ErrorCountValue,w
  6927  01A1  1803               	skipnc
  6928  01A2  0008               	return
  6929                           
  6930                           ;OverLoad_B1.c: 146: Load.ErrorCount = 0;
  6931  01A3  1683               	bsf	3,5	;RP0=1, select bank1
  6932  01A4  1303               	bcf	3,6	;RP1=0, select bank1
  6933  01A5  01E2               	clrf	(_Load^(0+128)+24)
  6934                           
  6935                           ;OverLoad_B1.c: 147: Load.ERROR = 1;
  6936  01A6  16CA               	bsf	_Load^(0+128),5
  6937                           
  6938                           ;OverLoad_B1.c: 169: }
  6939                           ;OverLoad_B1.c: 170: } else {
  6940  01A7  0008               	return
  6941  01A8                     l7061:	
  6942                           
  6943                           ;OverLoad_B1.c: 171: Load.ErrorCount = 0;
  6944  01A8  01E2               	clrf	(_Load^(0+128)+24)
  6945                           
  6946                           ;OverLoad_B1.c: 172: if (Load.Run == 1) {
  6947  01A9  1DCA               	btfss	_Load^(0+128),3
  6948  01AA  0008               	return
  6949                           
  6950                           ;OverLoad_B1.c: 173: Load.SafeCount++;
  6951  01AB  3001               	movlw	1
  6952  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  6953  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  6954  01AE  00E1               	movwf	??_Load_Main
  6955  01AF  0861               	movf	??_Load_Main,w
  6956  01B0  1683               	bsf	3,5	;RP0=1, select bank1
  6957  01B1  1303               	bcf	3,6	;RP1=0, select bank1
  6958  01B2  07E3               	addwf	(_Load^(0+128)+25),f
  6959                           
  6960                           ;OverLoad_B1.c: 174: if (Load.SafeCount >= 3) {
  6961  01B3  3003               	movlw	3
  6962  01B4  0263               	subwf	(_Load^(0+128)+25),w
  6963  01B5  1C03               	skipc
  6964  01B6  0008               	return
  6965                           
  6966                           ;OverLoad_B1.c: 175: Load.SafeCount = 0;
  6967  01B7  01E3               	clrf	(_Load^(0+128)+25)
  6968                           
  6969                           ;OverLoad_B1.c: 176: Load.OK = 1;
  6970  01B8  17CA               	bsf	_Load^(0+128),7
  6971                           
  6972                           ;OverLoad_B1.c: 177: Load.Run = 0;
  6973  01B9  11CA               	bcf	_Load^(0+128),3
  6974                           
  6975                           ;OverLoad_B1.c: 178: Load.Count = 0;
  6976  01BA  01E1               	clrf	(_Load^(0+128)+23)
  6977                           
  6978                           ;OverLoad_B1.c: 179: Load.TotalLoad = Load.AD;
  6979  01BB  085E               	movf	(_Load^(0+128)+20),w
  6980  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  6981  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  6982  01BE  00E1               	movwf	??_Load_Main
  6983  01BF  0861               	movf	??_Load_Main,w
  6984  01C0  1683               	bsf	3,5	;RP0=1, select bank1
  6985  01C1  1303               	bcf	3,6	;RP1=0, select bank1
  6986  01C2  00D3               	movwf	(_Load^(0+128)+9)
  6987                           
  6988                           ;OverLoad_B1.c: 183: }
  6989                           ;OverLoad_B1.c: 184: }
  6990                           ;OverLoad_B1.c: 207: }
  6991                           ;OverLoad_B1.c: 208: }
  6992                           ;OverLoad_B1.c: 209: }
  6993                           ;OverLoad_B1.c: 210: } else {
  6994  01C3  0008               	return
  6995  01C4                     l852:	
  6996                           
  6997                           ;OverLoad_B1.c: 211: Load.ADtoGO = 1;
  6998  01C4  164A               	bsf	_Load^(0+128),4
  6999                           
  7000                           ;OverLoad_B1.c: 212: }
  7001                           ;OverLoad_B1.c: 213: } else {
  7002  01C5  0008               	return
  7003  01C6                     l851:	
  7004                           
  7005                           ;OverLoad_B1.c: 215: if (Load.LightsON == 1) {
  7006  01C6  1D4A               	btfss	_Load^(0+128),2
  7007  01C7  29DA               	goto	l7097
  7008                           
  7009                           ;OverLoad_B1.c: 216: Load.LightsON = 0;
  7010  01C8  114A               	bcf	_Load^(0+128),2
  7011                           
  7012                           ;OverLoad_B1.c: 218: Load.ADtoGO = 0;
  7013  01C9  124A               	bcf	_Load^(0+128),4
  7014                           
  7015                           ;OverLoad_B1.c: 219: Load.Time = 0;
  7016  01CA  01CB               	clrf	(_Load^(0+128)+1)
  7017  01CB  01CC               	clrf	((_Load+1)^(0+128)+1)
  7018                           
  7019                           ;OverLoad_B1.c: 220: setLoad_AH_AL_Restore();
  7020  01CC  158A  2258  118A   	fcall	_setLoad_AH_AL_Restore
  7021                           
  7022                           ;OverLoad_B1.c: 222: Load.ErrorCount = 0;
  7023  01CF  1683               	bsf	3,5	;RP0=1, select bank1
  7024  01D0  1303               	bcf	3,6	;RP1=0, select bank1
  7025  01D1  01E2               	clrf	(_Load^(0+128)+24)
  7026                           
  7027                           ;OverLoad_B1.c: 223: Load.SafeCount = 0;
  7028  01D2  01E3               	clrf	(_Load^(0+128)+25)
  7029                           
  7030                           ;OverLoad_B1.c: 225: Load.ADH = 0;
  7031  01D3  01CF               	clrf	(_Load^(0+128)+5)
  7032  01D4  01D0               	clrf	((_Load+1)^(0+128)+5)
  7033                           
  7034                           ;OverLoad_B1.c: 226: Load.ADL = 0;
  7035  01D5  01D1               	clrf	(_Load^(0+128)+7)
  7036  01D6  01D2               	clrf	((_Load+1)^(0+128)+7)
  7037                           
  7038                           ;OverLoad_B1.c: 232: Load.Run = 0;
  7039  01D7  11CA               	bcf	_Load^(0+128),3
  7040                           
  7041                           ;OverLoad_B1.c: 233: Load.Count = 0;
  7042  01D8  01E1               	clrf	(_Load^(0+128)+23)
  7043                           
  7044                           ;OverLoad_B1.c: 234: Load.OK = 0;
  7045  01D9  13CA               	bcf	_Load^(0+128),7
  7046  01DA                     l7097:	
  7047                           
  7048                           ;OverLoad_B1.c: 256: }
  7049                           ;OverLoad_B1.c: 257: if (Load.ERROR == 1) {
  7050  01DA  1ECA               	btfss	_Load^(0+128),5
  7051  01DB  0008               	return
  7052                           
  7053                           ;OverLoad_B1.c: 258: Load.ErrorTime++;
  7054  01DC  3001               	movlw	1
  7055  01DD  07CD               	addwf	(_Load^(0+128)+3),f
  7056  01DE  1803               	skipnc
  7057  01DF  0ACE               	incf	((_Load+1)^(0+128)+3),f
  7058  01E0  3000               	movlw	0
  7059  01E1  07CE               	addwf	((_Load+1)^(0+128)+3),f
  7060                           
  7061                           ;OverLoad_B1.c: 259: if (Load.ErrorTime >= (10000 / 20)) {
  7062  01E2  3001               	movlw	1
  7063  01E3  024E               	subwf	((_Load+1)^(0+128)+3),w
  7064  01E4  30F4               	movlw	244
  7065  01E5  1903               	skipnz
  7066  01E6  024D               	subwf	(_Load^(0+128)+3),w
  7067  01E7  1C03               	skipc
  7068  01E8  0008               	return
  7069                           
  7070                           ;OverLoad_B1.c: 260: Load.ErrorTime = 0;
  7071  01E9  01CD               	clrf	(_Load^(0+128)+3)
  7072  01EA  01CE               	clrf	((_Load+1)^(0+128)+3)
  7073                           
  7074                           ;OverLoad_B1.c: 261: Load.ERROR = 0;
  7075  01EB  12CA               	bcf	_Load^(0+128),5
  7076                           
  7077                           ;OverLoad_B1.c: 262: }
  7078                           ;OverLoad_B1.c: 263: }
  7079                           ;OverLoad_B1.c: 264: }
  7080                           ;OverLoad_B1.c: 265: } else {
  7081  01EC  0008               	return
  7082  01ED                     l841:	
  7083                           
  7084                           ;OverLoad_B1.c: 266: if (myMain.PowerON == 1) {
  7085  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  7086  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  7087  01EF  1C31               	btfss	_myMain,0
  7088  01F0  0008               	return
  7089                           
  7090                           ;OverLoad_B1.c: 267: Load.Enable = 1;
  7091  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  7092  01F2  1303               	bcf	3,6	;RP1=0, select bank1
  7093  01F3  144A               	bsf	_Load^(0+128),0
  7094  01F4  0008               	return
  7095  01F5                     __end_of_Load_Main:	
  7096                           
  7097                           	psect	text36
  7098  0937                     __ptext36:	
  7099 ;; *************** function _getMain_Lights_Count *****************
  7100 ;; Defined at:
  7101 ;;		line 459 in file "../src/Main_B1.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;		None
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;  status2         1    2[BANK0 ] unsigned char 
  7106 ;;  status1         1    1[BANK0 ] unsigned char 
  7107 ;;  count           1    0[BANK0 ] unsigned char 
  7108 ;; Return value:  Size  Location     Type
  7109 ;;                  1    wreg      unsigned char 
  7110 ;; Registers used:
  7111 ;;		wreg, status,2, status,0
  7112 ;; Tracked objects:
  7113 ;;		On entry : 0/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7117 ;;      Params:         0       0       0       0
  7118 ;;      Locals:         0       3       0       0
  7119 ;;      Temps:          0       0       0       0
  7120 ;;      Totals:         0       3       0       0
  7121 ;;Total ram usage:        3 bytes
  7122 ;; Hardware stack levels used:    1
  7123 ;; Hardware stack levels required when called:    2
  7124 ;; This function calls:
  7125 ;;		Nothing
  7126 ;; This function is called by:
  7127 ;;		_Load_Main
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           
  7132                           ;psect for function _getMain_Lights_Count
  7133  0937                     _getMain_Lights_Count:	
  7134                           
  7135                           ;Main_B1.c: 460: char count = 0;
  7136                           
  7137                           ;incstack = 0
  7138                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  7139  0937  1283               	bcf	3,5	;RP0=0, select bank0
  7140  0938  1303               	bcf	3,6	;RP1=0, select bank0
  7141  0939  01DA               	clrf	getMain_Lights_Count@count
  7142                           
  7143                           ;Main_B1.c: 476: char status1 = Lights1.Status == 1 ? 1 : 0;
  7144  093A  3000               	movlw	0
  7145  093B  1948               	btfsc	_Lights1,2
  7146  093C  3001               	movlw	1
  7147  093D  00DB               	movwf	getMain_Lights_Count@status1
  7148                           
  7149                           ;Main_B1.c: 479: char status2 = Lights2.Status == 1 ? 1 : 0;
  7150  093E  3000               	movlw	0
  7151  093F  194D               	btfsc	_Lights2,2
  7152  0940  3001               	movlw	1
  7153  0941  00DC               	movwf	getMain_Lights_Count@status2
  7154                           
  7155                           ;Main_B1.c: 490: return count = (status1 + status2);
  7156  0942  085C               	movf	getMain_Lights_Count@status2,w
  7157  0943  075B               	addwf	getMain_Lights_Count@status1,w
  7158  0944  00DA               	movwf	getMain_Lights_Count@count
  7159  0945  0008               	return
  7160  0946                     __end_of_getMain_Lights_Count:	
  7161                           
  7162                           	psect	text37
  7163  08B1                     __ptext37:	
  7164 ;; *************** function _getLight_Load_Status *****************
  7165 ;; Defined at:
  7166 ;;		line 356 in file "../src/TriacRelay_B1.c"
  7167 ;; Parameters:    Size  Location     Type
  7168 ;;		None
  7169 ;; Auto vars:     Size  Location     Type
  7170 ;;  loadstatus      1    4[COMMON] unsigned char 
  7171 ;; Return value:  Size  Location     Type
  7172 ;;                  1    wreg      unsigned char 
  7173 ;; Registers used:
  7174 ;;		wreg, status,2
  7175 ;; Tracked objects:
  7176 ;;		On entry : 0/0
  7177 ;;		On exit  : 0/0
  7178 ;;		Unchanged: 0/0
  7179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7180 ;;      Params:         0       0       0       0
  7181 ;;      Locals:         1       0       0       0
  7182 ;;      Temps:          0       0       0       0
  7183 ;;      Totals:         1       0       0       0
  7184 ;;Total ram usage:        1 bytes
  7185 ;; Hardware stack levels used:    1
  7186 ;; Hardware stack levels required when called:    2
  7187 ;; This function calls:
  7188 ;;		Nothing
  7189 ;; This function is called by:
  7190 ;;		_Load_Main
  7191 ;; This function uses a non-reentrant model
  7192 ;;
  7193                           
  7194                           
  7195                           ;psect for function _getLight_Load_Status
  7196  08B1                     _getLight_Load_Status:	
  7197                           
  7198                           ;TriacRelay_B1.c: 357: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  7199                           
  7200                           ;incstack = 0
  7201                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  7202  08B1  3000               	movlw	0
  7203  08B2  18F3               	btfsc	_Light,1
  7204  08B3  3001               	movlw	1
  7205  08B4  00F9               	movwf	getLight_Load_Status@loadstatus
  7206                           
  7207                           ;TriacRelay_B1.c: 358: return loadstatus;
  7208  08B5  0879               	movf	getLight_Load_Status@loadstatus,w
  7209  08B6  0008               	return
  7210  08B7                     __end_of_getLight_Load_Status:	
  7211                           
  7212                           	psect	text38
  7213  08AB                     __ptext38:	
  7214 ;; *************** function _getLight_LoadGO *****************
  7215 ;; Defined at:
  7216 ;;		line 351 in file "../src/TriacRelay_B1.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;		None
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;  loadgo          1    4[COMMON] unsigned char 
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  1    wreg      unsigned char 
  7223 ;; Registers used:
  7224 ;;		wreg, status,2
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7230 ;;      Params:         0       0       0       0
  7231 ;;      Locals:         1       0       0       0
  7232 ;;      Temps:          0       0       0       0
  7233 ;;      Totals:         1       0       0       0
  7234 ;;Total ram usage:        1 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    2
  7237 ;; This function calls:
  7238 ;;		Nothing
  7239 ;; This function is called by:
  7240 ;;		_Load_Main
  7241 ;; This function uses a non-reentrant model
  7242 ;;
  7243                           
  7244                           
  7245                           ;psect for function _getLight_LoadGO
  7246  08AB                     _getLight_LoadGO:	
  7247                           
  7248                           ;TriacRelay_B1.c: 352: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  7249                           
  7250                           ;incstack = 0
  7251                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  7252  08AB  3000               	movlw	0
  7253  08AC  1873               	btfsc	_Light,0
  7254  08AD  3001               	movlw	1
  7255  08AE  00F9               	movwf	getLight_LoadGO@loadgo
  7256                           
  7257                           ;TriacRelay_B1.c: 353: return loadgo;
  7258  08AF  0879               	movf	getLight_LoadGO@loadgo,w
  7259  08B0  0008               	return
  7260  08B1                     __end_of_getLight_LoadGO:	
  7261                           
  7262                           	psect	text39
  7263  0CD8                     __ptext39:	
  7264 ;; *************** function ___lwdiv *****************
  7265 ;; Defined at:
  7266 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  7267 ;; Parameters:    Size  Location     Type
  7268 ;;  divisor         2    0[BANK0 ] unsigned int 
  7269 ;;  dividend        2    2[BANK0 ] unsigned int 
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;  quotient        2    5[BANK0 ] unsigned int 
  7272 ;;  counter         1    4[BANK0 ] unsigned char 
  7273 ;; Return value:  Size  Location     Type
  7274 ;;                  2    0[BANK0 ] unsigned int 
  7275 ;; Registers used:
  7276 ;;		wreg, status,2, status,0
  7277 ;; Tracked objects:
  7278 ;;		On entry : 0/0
  7279 ;;		On exit  : 0/0
  7280 ;;		Unchanged: 0/0
  7281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7282 ;;      Params:         0       4       0       0
  7283 ;;      Locals:         0       3       0       0
  7284 ;;      Temps:          1       0       0       0
  7285 ;;      Totals:         1       7       0       0
  7286 ;;Total ram usage:        8 bytes
  7287 ;; Hardware stack levels used:    1
  7288 ;; Hardware stack levels required when called:    2
  7289 ;; This function calls:
  7290 ;;		Nothing
  7291 ;; This function is called by:
  7292 ;;		_Load_Main
  7293 ;;		_getPIR_AD
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297                           
  7298                           ;psect for function ___lwdiv
  7299  0CD8                     ___lwdiv:	
  7300                           
  7301                           ;incstack = 0
  7302                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7303  0CD8  1283               	bcf	3,5	;RP0=0, select bank0
  7304  0CD9  1303               	bcf	3,6	;RP1=0, select bank0
  7305  0CDA  01DF               	clrf	___lwdiv@quotient
  7306  0CDB  01E0               	clrf	___lwdiv@quotient+1
  7307  0CDC  085B               	movf	___lwdiv@divisor+1,w
  7308  0CDD  045A               	iorwf	___lwdiv@divisor,w
  7309  0CDE  1903               	skipnz
  7310  0CDF  2D11               	goto	l5615
  7311  0CE0  01DE               	clrf	___lwdiv@counter
  7312  0CE1  0ADE               	incf	___lwdiv@counter,f
  7313  0CE2                     l5603:	
  7314  0CE2  1BDB               	btfsc	___lwdiv@divisor+1,7
  7315  0CE3  2CF0               	goto	l5605
  7316  0CE4  3001               	movlw	1
  7317  0CE5                     u6585:	
  7318  0CE5  1003               	clrc
  7319  0CE6  0DDA               	rlf	___lwdiv@divisor,f
  7320  0CE7  0DDB               	rlf	___lwdiv@divisor+1,f
  7321  0CE8  3EFF               	addlw	-1
  7322  0CE9  1D03               	skipz
  7323  0CEA  2CE5               	goto	u6585
  7324  0CEB  3001               	movlw	1
  7325  0CEC  00F9               	movwf	??___lwdiv
  7326  0CED  0879               	movf	??___lwdiv,w
  7327  0CEE  07DE               	addwf	___lwdiv@counter,f
  7328  0CEF  2CE2               	goto	l5603
  7329  0CF0                     l5605:	
  7330  0CF0  3001               	movlw	1
  7331  0CF1                     u6605:	
  7332  0CF1  1003               	clrc
  7333  0CF2  0DDF               	rlf	___lwdiv@quotient,f
  7334  0CF3  0DE0               	rlf	___lwdiv@quotient+1,f
  7335  0CF4  3EFF               	addlw	-1
  7336  0CF5  1D03               	skipz
  7337  0CF6  2CF1               	goto	u6605
  7338  0CF7  085B               	movf	___lwdiv@divisor+1,w
  7339  0CF8  025D               	subwf	___lwdiv@dividend+1,w
  7340  0CF9  1D03               	skipz
  7341  0CFA  2CFD               	goto	u6615
  7342  0CFB  085A               	movf	___lwdiv@divisor,w
  7343  0CFC  025C               	subwf	___lwdiv@dividend,w
  7344  0CFD                     u6615:	
  7345  0CFD  1C03               	skipc
  7346  0CFE  2D06               	goto	l5611
  7347  0CFF  085A               	movf	___lwdiv@divisor,w
  7348  0D00  02DC               	subwf	___lwdiv@dividend,f
  7349  0D01  085B               	movf	___lwdiv@divisor+1,w
  7350  0D02  1C03               	skipc
  7351  0D03  03DD               	decf	___lwdiv@dividend+1,f
  7352  0D04  02DD               	subwf	___lwdiv@dividend+1,f
  7353  0D05  145F               	bsf	___lwdiv@quotient,0
  7354  0D06                     l5611:	
  7355  0D06  3001               	movlw	1
  7356  0D07                     u6625:	
  7357  0D07  1003               	clrc
  7358  0D08  0CDB               	rrf	___lwdiv@divisor+1,f
  7359  0D09  0CDA               	rrf	___lwdiv@divisor,f
  7360  0D0A  3EFF               	addlw	-1
  7361  0D0B  1D03               	skipz
  7362  0D0C  2D07               	goto	u6625
  7363  0D0D  3001               	movlw	1
  7364  0D0E  02DE               	subwf	___lwdiv@counter,f
  7365  0D0F  1D03               	btfss	3,2
  7366  0D10  2CF0               	goto	l5605
  7367  0D11                     l5615:	
  7368  0D11  0860               	movf	___lwdiv@quotient+1,w
  7369  0D12  01DB               	clrf	?___lwdiv+1
  7370  0D13  07DB               	addwf	?___lwdiv+1,f
  7371  0D14  085F               	movf	___lwdiv@quotient,w
  7372  0D15  01DA               	clrf	?___lwdiv
  7373  0D16  07DA               	addwf	?___lwdiv,f
  7374  0D17  0008               	return
  7375  0D18                     __end_of___lwdiv:	
  7376                           
  7377                           	psect	text40
  7378  0999                     __ptext40:	
  7379 ;; *************** function ___bmul *****************
  7380 ;; Defined at:
  7381 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;  multiplier      1    wreg     unsigned char 
  7384 ;;  multiplicand    1    4[COMMON] unsigned char 
  7385 ;; Auto vars:     Size  Location     Type
  7386 ;;  multiplier      1    2[BANK0 ] unsigned char 
  7387 ;;  product         1    1[BANK0 ] unsigned char 
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  1    wreg      unsigned char 
  7390 ;; Registers used:
  7391 ;;		wreg, status,2, status,0
  7392 ;; Tracked objects:
  7393 ;;		On entry : 0/0
  7394 ;;		On exit  : 0/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7397 ;;      Params:         1       0       0       0
  7398 ;;      Locals:         0       2       0       0
  7399 ;;      Temps:          0       1       0       0
  7400 ;;      Totals:         1       3       0       0
  7401 ;;Total ram usage:        4 bytes
  7402 ;; Hardware stack levels used:    1
  7403 ;; Hardware stack levels required when called:    2
  7404 ;; This function calls:
  7405 ;;		Nothing
  7406 ;; This function is called by:
  7407 ;;		_Load_Main
  7408 ;; This function uses a non-reentrant model
  7409 ;;
  7410                           
  7411                           
  7412                           ;psect for function ___bmul
  7413  0999                     ___bmul:	
  7414                           
  7415                           ;incstack = 0
  7416                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7417                           ;___bmul@multiplier stored from wreg
  7418  0999  1283               	bcf	3,5	;RP0=0, select bank0
  7419  099A  1303               	bcf	3,6	;RP1=0, select bank0
  7420  099B  00DC               	movwf	___bmul@multiplier
  7421  099C  01DB               	clrf	___bmul@product
  7422  099D                     l6759:	
  7423  099D  1C5C               	btfss	___bmul@multiplier,0
  7424  099E  29A3               	goto	l6763
  7425  099F  0879               	movf	___bmul@multiplicand,w
  7426  09A0  00DA               	movwf	??___bmul
  7427  09A1  085A               	movf	??___bmul,w
  7428  09A2  07DB               	addwf	___bmul@product,f
  7429  09A3                     l6763:	
  7430  09A3  1003               	clrc
  7431  09A4  0DF9               	rlf	___bmul@multiplicand,f
  7432  09A5  1003               	clrc
  7433  09A6  0CDC               	rrf	___bmul@multiplier,f
  7434  09A7  08DC               	movf	___bmul@multiplier,f
  7435  09A8  1D03               	skipz
  7436  09A9  299D               	goto	l6759
  7437  09AA  085B               	movf	___bmul@product,w
  7438  09AB  0008               	return
  7439  09AC                     __end_of___bmul:	
  7440                           
  7441                           	psect	text41
  7442  0887                     __ptext41:	
  7443 ;; *************** function _Load_Initialization *****************
  7444 ;; Defined at:
  7445 ;;		line 9 in file "../src/OverLoad_B1.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;		None
  7448 ;; Auto vars:     Size  Location     Type
  7449 ;;		None
  7450 ;; Return value:  Size  Location     Type
  7451 ;;		None               void
  7452 ;; Registers used:
  7453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7454 ;; Tracked objects:
  7455 ;;		On entry : 0/0
  7456 ;;		On exit  : 0/0
  7457 ;;		Unchanged: 0/0
  7458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7459 ;;      Params:         0       0       0       0
  7460 ;;      Locals:         0       0       0       0
  7461 ;;      Temps:          0       0       0       0
  7462 ;;      Totals:         0       0       0       0
  7463 ;;Total ram usage:        0 bytes
  7464 ;; Hardware stack levels used:    1
  7465 ;; Hardware stack levels required when called:    3
  7466 ;; This function calls:
  7467 ;;		_setLoad_AH_AL_Restore
  7468 ;; This function is called by:
  7469 ;;		_main
  7470 ;; This function uses a non-reentrant model
  7471 ;;
  7472                           
  7473                           
  7474                           ;psect for function _Load_Initialization
  7475  0887                     _Load_Initialization:	
  7476                           
  7477                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  7478                           
  7479                           ;incstack = 0
  7480                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7481  0887  158A  2258         	fcall	_setLoad_AH_AL_Restore
  7482  0889  0008               	return
  7483  088A                     __end_of_Load_Initialization:	
  7484                           
  7485                           	psect	text42
  7486  0A58                     __ptext42:	
  7487 ;; *************** function _setLoad_AH_AL_Restore *****************
  7488 ;; Defined at:
  7489 ;;		line 293 in file "../src/OverLoad_B1.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;		None
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;  i               1    0[BANK0 ] unsigned char 
  7494 ;; Return value:  Size  Location     Type
  7495 ;;		None               void
  7496 ;; Registers used:
  7497 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7498 ;; Tracked objects:
  7499 ;;		On entry : 0/0
  7500 ;;		On exit  : 0/0
  7501 ;;		Unchanged: 0/0
  7502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7503 ;;      Params:         0       0       0       0
  7504 ;;      Locals:         0       1       0       0
  7505 ;;      Temps:          1       0       0       0
  7506 ;;      Totals:         1       1       0       0
  7507 ;;Total ram usage:        2 bytes
  7508 ;; Hardware stack levels used:    1
  7509 ;; Hardware stack levels required when called:    2
  7510 ;; This function calls:
  7511 ;;		Nothing
  7512 ;; This function is called by:
  7513 ;;		_Load_Initialization
  7514 ;;		_Load_Main
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           
  7519                           ;psect for function _setLoad_AH_AL_Restore
  7520  0A58                     _setLoad_AH_AL_Restore:	
  7521                           
  7522                           ;OverLoad_B1.c: 294: char i;
  7523                           ;OverLoad_B1.c: 295: for (i = 0; i < 5; i++) {
  7524                           
  7525                           ;incstack = 0
  7526                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  7527  0A58  1283               	bcf	3,5	;RP0=0, select bank0
  7528  0A59  1303               	bcf	3,6	;RP1=0, select bank0
  7529  0A5A  01DA               	clrf	setLoad_AH_AL_Restore@i
  7530  0A5B                     L18:	
  7531  0A5B  3005               	movlw	5
  7532  0A5C  025A               	subwf	setLoad_AH_AL_Restore@i,w
  7533  0A5D  1803               	btfsc	3,0
  7534  0A5E  0008               	return
  7535                           
  7536                           ;OverLoad_B1.c: 296: Load.AH[i] = 0;
  7537  0A5F  085A               	movf	setLoad_AH_AL_Restore@i,w
  7538  0A60  3ED4               	addlw	(_Load+10)& (0+255)
  7539  0A61  0084               	movwf	4
  7540  0A62  1383               	bcf	3,7	;select IRP bank1
  7541  0A63  0180               	clrf	0
  7542                           
  7543                           ;OverLoad_B1.c: 297: Load.AL[i] = 0xff;
  7544  0A64  30FF               	movlw	255
  7545  0A65  00F9               	movwf	??_setLoad_AH_AL_Restore
  7546  0A66  085A               	movf	setLoad_AH_AL_Restore@i,w
  7547  0A67  3ED9               	addlw	(_Load+15)& (0+255)
  7548  0A68  0084               	movwf	4
  7549  0A69  0879               	movf	??_setLoad_AH_AL_Restore,w
  7550  0A6A  0080               	movwf	0
  7551  0A6B  3001               	movlw	1
  7552  0A6C  00F9               	movwf	??_setLoad_AH_AL_Restore
  7553  0A6D  0879               	movf	??_setLoad_AH_AL_Restore,w
  7554  0A6E  07DA               	addwf	setLoad_AH_AL_Restore@i,f
  7555  0A6F  2A5B               	goto	L18
  7556  0A70                     __end_of_setLoad_AH_AL_Restore:	
  7557                           
  7558                           	psect	text43
  7559  0B77                     __ptext43:	
  7560 ;; *************** function _Lights_Main *****************
  7561 ;; Defined at:
  7562 ;;		line 52 in file "../src/TriacRelay_B1.c"
  7563 ;; Parameters:    Size  Location     Type
  7564 ;;		None
  7565 ;; Auto vars:     Size  Location     Type
  7566 ;;		None
  7567 ;; Return value:  Size  Location     Type
  7568 ;;		None               void
  7569 ;; Registers used:
  7570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7571 ;; Tracked objects:
  7572 ;;		On entry : 0/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7576 ;;      Params:         0       0       0       0
  7577 ;;      Locals:         0       0       0       0
  7578 ;;      Temps:          0       0       0       0
  7579 ;;      Totals:         0       0       0       0
  7580 ;;Total ram usage:        0 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; Hardware stack levels required when called:    6
  7583 ;; This function calls:
  7584 ;;		_Lights_Control
  7585 ;;		_getLoad_OK
  7586 ;;		_getMain_All_Error_Status
  7587 ;;		_getMain_All_LightsStatus
  7588 ;;		_setLights_Main
  7589 ;; This function is called by:
  7590 ;;		_main
  7591 ;; This function uses a non-reentrant model
  7592 ;;
  7593                           
  7594                           
  7595                           ;psect for function _Lights_Main
  7596  0B77                     _Lights_Main:	
  7597                           
  7598                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  7599                           
  7600                           ;incstack = 0
  7601                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7602  0B77  1C73               	btfss	_Light,0
  7603  0B78  2B8D               	goto	l7115
  7604                           
  7605                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  7606  0B79  158A  20D3  158A   	fcall	_getLoad_OK
  7607  0B7C  3A01               	xorlw	1
  7608  0B7D  1903               	skipnz
  7609  0B7E  2B8C               	goto	l1560
  7610  0B7F  3000               	movlw	0
  7611  0B80  158A  249A  158A   	fcall	_getMain_All_Error_Status
  7612  0B83  3800               	iorlw	0
  7613  0B84  1D03               	skipz
  7614  0B85  2B8C               	goto	l1560
  7615  0B86  158A  2155  158A   	fcall	_getMain_All_LightsStatus
  7616  0B89  3800               	iorlw	0
  7617  0B8A  1D03               	skipz
  7618  0B8B  2B8D               	goto	l7115
  7619  0B8C                     l1560:	
  7620                           
  7621                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  7622  0B8C  1073               	bcf	_Light,0
  7623  0B8D                     l7115:	
  7624                           
  7625                           ;TriacRelay_B1.c: 68: }
  7626                           ;TriacRelay_B1.c: 69: }
  7627                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  7628  0B8D  3001               	movlw	1
  7629  0B8E  158A  23C7  158A   	fcall	_setLights_Main
  7630                           
  7631                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  7632  0B91  3001               	movlw	1
  7633  0B92  118A  26F3  158A   	fcall	_Lights_Control
  7634                           
  7635                           ;TriacRelay_B1.c: 78: setLights_Main(2);
  7636  0B95  3002               	movlw	2
  7637  0B96  158A  23C7  158A   	fcall	_setLights_Main
  7638                           
  7639                           ;TriacRelay_B1.c: 79: Lights_Control(2);
  7640  0B99  3002               	movlw	2
  7641  0B9A  118A  26F3         	fcall	_Lights_Control
  7642  0B9C  0008               	return
  7643  0B9D                     __end_of_Lights_Main:	
  7644                           
  7645                           	psect	text44
  7646  0BC7                     __ptext44:	
  7647 ;; *************** function _setLights_Main *****************
  7648 ;; Defined at:
  7649 ;;		line 91 in file "../src/TriacRelay_B1.c"
  7650 ;; Parameters:    Size  Location     Type
  7651 ;;  lights          1    wreg     unsigned char 
  7652 ;; Auto vars:     Size  Location     Type
  7653 ;;  lights          1    6[BANK0 ] unsigned char 
  7654 ;; Return value:  Size  Location     Type
  7655 ;;		None               void
  7656 ;; Registers used:
  7657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7658 ;; Tracked objects:
  7659 ;;		On entry : 0/0
  7660 ;;		On exit  : 0/0
  7661 ;;		Unchanged: 0/0
  7662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7663 ;;      Params:         0       0       0       0
  7664 ;;      Locals:         0       1       0       0
  7665 ;;      Temps:          0       0       0       0
  7666 ;;      Totals:         0       1       0       0
  7667 ;;Total ram usage:        1 bytes
  7668 ;; Hardware stack levels used:    1
  7669 ;; Hardware stack levels required when called:    5
  7670 ;; This function calls:
  7671 ;;		_LightsPointSelect
  7672 ;;		_getLights_Allow_Condition
  7673 ;;		_setLights
  7674 ;; This function is called by:
  7675 ;;		_Lights_Main
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           
  7680                           ;psect for function _setLights_Main
  7681  0BC7                     _setLights_Main:	
  7682                           
  7683                           ;incstack = 0
  7684                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7685                           ;setLights_Main@lights stored from wreg
  7686  0BC7  1283               	bcf	3,5	;RP0=0, select bank0
  7687  0BC8  1303               	bcf	3,6	;RP1=0, select bank0
  7688  0BC9  00E0               	movwf	setLights_Main@lights
  7689                           
  7690                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  7691  0BCA  0860               	movf	setLights_Main@lights,w
  7692  0BCB  158A  21E7  158A   	fcall	_LightsPointSelect
  7693                           
  7694                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  7695  0BCE  0874               	movf	_Lights,w
  7696  0BCF  0084               	movwf	4
  7697  0BD0  1383               	bcf	3,7	;select IRP bank0
  7698  0BD1  1880               	btfsc	0,1
  7699  0BD2  0008               	return
  7700                           
  7701                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  7702  0BD3  0874               	movf	_Lights,w
  7703  0BD4  0084               	movwf	4
  7704  0BD5  1D80               	btfss	0,3
  7705  0BD6  0008               	return
  7706                           
  7707                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  7708  0BD7  1283               	bcf	3,5	;RP0=0, select bank0
  7709  0BD8  1303               	bcf	3,6	;RP1=0, select bank0
  7710  0BD9  0860               	movf	setLights_Main@lights,w
  7711  0BDA  158A  2212  158A   	fcall	_getLights_Allow_Condition
  7712  0BDD  3800               	iorlw	0
  7713  0BDE  1D03               	skipz
  7714  0BDF  0008               	return
  7715                           
  7716                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  7717  0BE0  0874               	movf	_Lights,w
  7718  0BE1  0084               	movwf	4
  7719  0BE2  1383               	bcf	3,7	;select IRP bank0
  7720  0BE3  1180               	bcf	0,3
  7721                           
  7722                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  7723  0BE4  0874               	movf	_Lights,w
  7724  0BE5  0084               	movwf	4
  7725  0BE6  1E00               	btfss	0,4
  7726  0BE7  2BF0               	goto	l6719
  7727                           
  7728                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  7729  0BE8  1283               	bcf	3,5	;RP0=0, select bank0
  7730  0BE9  1303               	bcf	3,6	;RP1=0, select bank0
  7731  0BEA  01DD               	clrf	setLights@status
  7732  0BEB  0ADD               	incf	setLights@status,f
  7733  0BEC  0860               	movf	setLights_Main@lights,w
  7734  0BED  158A  26EC         	fcall	_setLights
  7735                           
  7736                           ;TriacRelay_B1.c: 99: } else {
  7737  0BEF  0008               	return
  7738  0BF0                     l6719:	
  7739                           
  7740                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  7741  0BF0  1283               	bcf	3,5	;RP0=0, select bank0
  7742  0BF1  1303               	bcf	3,6	;RP1=0, select bank0
  7743  0BF2  01DD               	clrf	setLights@status
  7744  0BF3  0860               	movf	setLights_Main@lights,w
  7745  0BF4  158A  26EC         	fcall	_setLights
  7746  0BF6  0008               	return
  7747  0BF7                     __end_of_setLights_Main:	
  7748                           
  7749                           	psect	text45
  7750  0EEC                     __ptext45:	
  7751 ;; *************** function _setLights *****************
  7752 ;; Defined at:
  7753 ;;		line 108 in file "../src/TriacRelay_B1.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;  lights          1    wreg     unsigned char 
  7756 ;;  status          1    3[BANK0 ] unsigned char 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  lights          1    5[BANK0 ] unsigned char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;		None               void
  7761 ;; Registers used:
  7762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7768 ;;      Params:         0       1       0       0
  7769 ;;      Locals:         0       1       0       0
  7770 ;;      Temps:          0       1       0       0
  7771 ;;      Totals:         0       3       0       0
  7772 ;;Total ram usage:        3 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    4
  7775 ;; This function calls:
  7776 ;;		_setLED
  7777 ;;		_setLights_Line
  7778 ;; This function is called by:
  7779 ;;		_setLights_Main
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           
  7784                           ;psect for function _setLights
  7785  0EEC                     _setLights:	
  7786                           
  7787                           ;incstack = 0
  7788                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7789                           ;setLights@lights stored from wreg
  7790  0EEC  1283               	bcf	3,5	;RP0=0, select bank0
  7791  0EED  1303               	bcf	3,6	;RP1=0, select bank0
  7792  0EEE  00DF               	movwf	setLights@lights
  7793                           
  7794                           ;TriacRelay_B1.c: 114: Lights->GO = 1;
  7795  0EEF  0874               	movf	_Lights,w
  7796  0EF0  0084               	movwf	4
  7797  0EF1  1383               	bcf	3,7	;select IRP bank0
  7798  0EF2  1480               	bsf	0,1
  7799                           
  7800                           ;TriacRelay_B1.c: 116: if (status == 1) {
  7801  0EF3  085D               	movf	setLights@status,w
  7802  0EF4  3A01               	xorlw	1
  7803  0EF5  1D03               	skipz
  7804  0EF6  2F27               	goto	l6485
  7805                           
  7806                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  7807  0EF7  085F               	movf	setLights@lights,w
  7808  0EF8  3A02               	xorlw	2
  7809  0EF9  1D03               	skipz
  7810  0EFA  2F08               	goto	l6475
  7811                           
  7812                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  7813  0EFB  01DB               	clrf	setLED@command
  7814  0EFC  3001               	movlw	1
  7815  0EFD  158A  25E5  158A   	fcall	_setLED
  7816                           
  7817                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  7818  0F00  1283               	bcf	3,5	;RP0=0, select bank0
  7819  0F01  1303               	bcf	3,6	;RP1=0, select bank0
  7820  0F02  01DB               	clrf	setLED@command
  7821  0F03  0ADB               	incf	setLED@command,f
  7822  0F04  3002               	movlw	2
  7823  0F05  158A  25E5  158A   	fcall	_setLED
  7824  0F08                     l6475:	
  7825                           
  7826                           ;TriacRelay_B1.c: 121: }
  7827                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  7828  0F08  0874               	movf	_Lights,w
  7829  0F09  0084               	movwf	4
  7830  0F0A  1383               	bcf	3,7	;select IRP bank0
  7831  0F0B  1900               	btfsc	0,2
  7832  0F0C  2F5B               	goto	l6499
  7833                           
  7834                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7835  0F0D  0874               	movf	_Lights,w
  7836  0F0E  0084               	movwf	4
  7837  0F0F  1500               	bsf	0,2
  7838                           
  7839                           ;TriacRelay_B1.c: 129: Lights->RelayValue = 100;
  7840  0F10  3064               	movlw	100
  7841  0F11  1283               	bcf	3,5	;RP0=0, select bank0
  7842  0F12  1303               	bcf	3,6	;RP1=0, select bank0
  7843  0F13  00DE               	movwf	??_setLights
  7844  0F14  0874               	movf	_Lights,w
  7845  0F15  3E04               	addlw	4
  7846  0F16  0084               	movwf	4
  7847  0F17  085E               	movf	??_setLights,w
  7848  0F18  0080               	movwf	0
  7849                           
  7850                           ;TriacRelay_B1.c: 130: Lights->TriacValue = 140;
  7851  0F19  308C               	movlw	140
  7852  0F1A  00DE               	movwf	??_setLights
  7853  0F1B  0874               	movf	_Lights,w
  7854  0F1C  3E03               	addlw	3
  7855  0F1D  0084               	movwf	4
  7856  0F1E  085E               	movf	??_setLights,w
  7857  0F1F  0080               	movwf	0
  7858                           
  7859                           ;TriacRelay_B1.c: 131: Lights->Time = 0;
  7860  0F20  0874               	movf	_Lights,w
  7861  0F21  3E02               	addlw	2
  7862  0F22  0084               	movwf	4
  7863  0F23  0180               	clrf	0
  7864                           
  7865                           ;TriacRelay_B1.c: 133: Light.Load_Status = 1;
  7866  0F24  14F3               	bsf	_Light,1
  7867                           
  7868                           ;TriacRelay_B1.c: 134: setLights_Line(lights);
  7869  0F25  085F               	movf	setLights@lights,w
  7870  0F26  2F58               	goto	L19
  7871  0F27                     l6485:	
  7872                           ;TriacRelay_B1.c: 136: }
  7873                           ;TriacRelay_B1.c: 137: } else {
  7874                           
  7875                           
  7876                           ;TriacRelay_B1.c: 140: if (lights == 2) {
  7877  0F27  1283               	bcf	3,5	;RP0=0, select bank0
  7878  0F28  1303               	bcf	3,6	;RP1=0, select bank0
  7879  0F29  085F               	movf	setLights@lights,w
  7880  0F2A  3A02               	xorlw	2
  7881  0F2B  1D03               	skipz
  7882  0F2C  2F3A               	goto	l6489
  7883                           
  7884                           ;TriacRelay_B1.c: 141: setLED(1, 1);
  7885  0F2D  01DB               	clrf	setLED@command
  7886  0F2E  0ADB               	incf	setLED@command,f
  7887  0F2F  3001               	movlw	1
  7888  0F30  158A  25E5  158A   	fcall	_setLED
  7889                           
  7890                           ;TriacRelay_B1.c: 142: setLED(2, 0);
  7891  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  7892  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  7893  0F35  01DB               	clrf	setLED@command
  7894  0F36  3002               	movlw	2
  7895  0F37  158A  25E5  158A   	fcall	_setLED
  7896  0F3A                     l6489:	
  7897                           
  7898                           ;TriacRelay_B1.c: 143: }
  7899                           ;TriacRelay_B1.c: 145: if (Lights->Status == 1) {
  7900  0F3A  0874               	movf	_Lights,w
  7901  0F3B  0084               	movwf	4
  7902  0F3C  1383               	bcf	3,7	;select IRP bank0
  7903  0F3D  1D00               	btfss	0,2
  7904  0F3E  2F5B               	goto	l6499
  7905                           
  7906                           ;TriacRelay_B1.c: 146: Lights->Status = 0;
  7907  0F3F  0874               	movf	_Lights,w
  7908  0F40  0084               	movwf	4
  7909  0F41  1100               	bcf	0,2
  7910                           
  7911                           ;TriacRelay_B1.c: 147: Lights->RelayValue = 40;
  7912  0F42  3028               	movlw	40
  7913  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  7914  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  7915  0F45  00DE               	movwf	??_setLights
  7916  0F46  0874               	movf	_Lights,w
  7917  0F47  3E04               	addlw	4
  7918  0F48  0084               	movwf	4
  7919  0F49  085E               	movf	??_setLights,w
  7920  0F4A  0080               	movwf	0
  7921                           
  7922                           ;TriacRelay_B1.c: 148: Lights->TriacValue = 80;
  7923  0F4B  3050               	movlw	80
  7924  0F4C  00DE               	movwf	??_setLights
  7925  0F4D  0874               	movf	_Lights,w
  7926  0F4E  3E03               	addlw	3
  7927  0F4F  0084               	movwf	4
  7928  0F50  085E               	movf	??_setLights,w
  7929  0F51  0080               	movwf	0
  7930                           
  7931                           ;TriacRelay_B1.c: 149: Lights->Time = 0;
  7932  0F52  0874               	movf	_Lights,w
  7933  0F53  3E02               	addlw	2
  7934  0F54  0084               	movwf	4
  7935  0F55  0180               	clrf	0
  7936                           
  7937                           ;TriacRelay_B1.c: 151: Light.Load_Status = 0;
  7938  0F56  10F3               	bcf	_Light,1
  7939                           
  7940                           ;TriacRelay_B1.c: 152: setLights_Line(0);
  7941  0F57  3000               	movlw	0
  7942  0F58                     L19:	
  7943  0F58  158A  2229  158A   	fcall	_setLights_Line
  7944  0F5B                     l6499:	
  7945                           
  7946                           ;TriacRelay_B1.c: 154: }
  7947                           ;TriacRelay_B1.c: 155: }
  7948                           ;TriacRelay_B1.c: 157: if (lights == 1) {
  7949  0F5B  1283               	bcf	3,5	;RP0=0, select bank0
  7950  0F5C  1303               	bcf	3,6	;RP1=0, select bank0
  7951  0F5D  085F               	movf	setLights@lights,w
  7952  0F5E  3A01               	xorlw	1
  7953  0F5F  1D03               	skipz
  7954  0F60  2F63               	goto	l6503
  7955                           
  7956                           ;TriacRelay_B1.c: 158: RA7 = 1;
  7957  0F61  1785               	bsf	5,7	;volatile
  7958                           
  7959                           ;TriacRelay_B1.c: 159: }
  7960  0F62  0008               	return
  7961  0F63                     l6503:	
  7962                           
  7963                           ;TriacRelay_B1.c: 162: else if (lights == 2) {
  7964  0F63  085F               	movf	setLights@lights,w
  7965  0F64  3A02               	xorlw	2
  7966  0F65  1D03               	skipz
  7967  0F66  0008               	return
  7968                           
  7969                           ;TriacRelay_B1.c: 163: RC4 = 1;
  7970  0F67  1607               	bsf	7,4	;volatile
  7971  0F68  0008               	return
  7972  0F69                     __end_of_setLights:	
  7973                           
  7974                           	psect	text46
  7975  0A29                     __ptext46:	
  7976 ;; *************** function _setLights_Line *****************
  7977 ;; Defined at:
  7978 ;;		line 239 in file "../src/TriacRelay_B1.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;  lights          1    wreg     unsigned char 
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;  lights          1    4[COMMON] unsigned char 
  7983 ;; Return value:  Size  Location     Type
  7984 ;;		None               void
  7985 ;; Registers used:
  7986 ;;		wreg
  7987 ;; Tracked objects:
  7988 ;;		On entry : 0/0
  7989 ;;		On exit  : 0/0
  7990 ;;		Unchanged: 0/0
  7991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7992 ;;      Params:         0       0       0       0
  7993 ;;      Locals:         1       0       0       0
  7994 ;;      Temps:          0       0       0       0
  7995 ;;      Totals:         1       0       0       0
  7996 ;;Total ram usage:        1 bytes
  7997 ;; Hardware stack levels used:    1
  7998 ;; Hardware stack levels required when called:    2
  7999 ;; This function calls:
  8000 ;;		Nothing
  8001 ;; This function is called by:
  8002 ;;		_setLights
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           
  8007                           ;psect for function _setLights_Line
  8008  0A29                     _setLights_Line:	
  8009                           
  8010                           ;incstack = 0
  8011                           ; Regs used in _setLights_Line: [wreg]
  8012                           ;setLights_Line@lights stored from wreg
  8013  0A29  00F9               	movwf	setLights_Line@lights
  8014                           
  8015                           ;TriacRelay_B1.c: 240: Light.LoadGO = 1;
  8016  0A2A  1473               	bsf	_Light,0
  8017                           
  8018                           ;TriacRelay_B1.c: 242: Lights1.Line = 0;
  8019  0A2B  1283               	bcf	3,5	;RP0=0, select bank0
  8020  0A2C  1303               	bcf	3,6	;RP1=0, select bank0
  8021  0A2D  1049               	bcf	_Lights1+1,0
  8022                           
  8023                           ;TriacRelay_B1.c: 243: if (lights == 1 && lights != 0) {
  8024  0A2E  0879               	movf	setLights_Line@lights,w
  8025  0A2F  3A01               	xorlw	1
  8026  0A30  1D03               	skipz
  8027  0A31  2A36               	goto	l1604
  8028  0A32  0879               	movf	setLights_Line@lights,w
  8029  0A33  1903               	btfsc	3,2
  8030  0A34  2A36               	goto	l1604
  8031                           
  8032                           ;TriacRelay_B1.c: 244: Lights1.Line = 1;
  8033  0A35  1449               	bsf	_Lights1+1,0
  8034  0A36                     l1604:	
  8035                           
  8036                           ;TriacRelay_B1.c: 245: }
  8037                           ;TriacRelay_B1.c: 248: Lights2.Line = 0;
  8038  0A36  104E               	bcf	_Lights2+1,0
  8039                           
  8040                           ;TriacRelay_B1.c: 249: if (lights == 2 && lights != 0) {
  8041  0A37  0879               	movf	setLights_Line@lights,w
  8042  0A38  3A02               	xorlw	2
  8043  0A39  1D03               	skipz
  8044  0A3A  0008               	return
  8045  0A3B  0879               	movf	setLights_Line@lights,w
  8046  0A3C  1903               	btfsc	3,2
  8047  0A3D  0008               	return
  8048                           
  8049                           ;TriacRelay_B1.c: 250: Lights2.Line = 1;
  8050  0A3E  144E               	bsf	_Lights2+1,0
  8051  0A3F  0008               	return
  8052  0A40                     __end_of_setLights_Line:	
  8053                           
  8054                           	psect	text47
  8055  0A12                     __ptext47:	
  8056 ;; *************** function _getLights_Allow_Condition *****************
  8057 ;; Defined at:
  8058 ;;		line 318 in file "../src/TriacRelay_B1.c"
  8059 ;; Parameters:    Size  Location     Type
  8060 ;;  lights          1    wreg     unsigned char 
  8061 ;; Auto vars:     Size  Location     Type
  8062 ;;  lights          1    0[COMMON] unsigned char 
  8063 ;;  allow           1    1[BANK0 ] unsigned char 
  8064 ;; Return value:  Size  Location     Type
  8065 ;;                  1    wreg      unsigned char 
  8066 ;; Registers used:
  8067 ;;		wreg, status,2, pclath, cstack
  8068 ;; Tracked objects:
  8069 ;;		On entry : 0/0
  8070 ;;		On exit  : 0/0
  8071 ;;		Unchanged: 0/0
  8072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8073 ;;      Params:         0       0       0       0
  8074 ;;      Locals:         0       2       0       0
  8075 ;;      Temps:          0       1       0       0
  8076 ;;      Totals:         0       3       0       0
  8077 ;;Total ram usage:        3 bytes
  8078 ;; Hardware stack levels used:    1
  8079 ;; Hardware stack levels required when called:    3
  8080 ;; This function calls:
  8081 ;;		_getLoad_OK
  8082 ;; This function is called by:
  8083 ;;		_setLights_Main
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           
  8088                           ;psect for function _getLights_Allow_Condition
  8089  0A12                     _getLights_Allow_Condition:	
  8090                           
  8091                           ;TriacRelay_B1.c: 319: char allow = 0;
  8092                           
  8093                           ;incstack = 0
  8094                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  8095  0A12  1283               	bcf	3,5	;RP0=0, select bank0
  8096  0A13  1303               	bcf	3,6	;RP1=0, select bank0
  8097  0A14  01DB               	clrf	getLights_Allow_Condition@allow
  8098                           
  8099                           ;TriacRelay_B1.c: 322: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  8100  0A15  01DC               	clrf	_getLights_Allow_Condition$4767
  8101  0A16  0ADC               	incf	_getLights_Allow_Condition$4767,f
  8102  0A17  158A  20D3  158A   	fcall	_getLoad_OK
  8103  0A1A  3800               	iorlw	0
  8104  0A1B  1903               	btfsc	3,2
  8105  0A1C  1873               	btfsc	_Light,0
  8106  0A1D  2A21               	goto	l6461
  8107  0A1E  1283               	bcf	3,5	;RP0=0, select bank0
  8108  0A1F  1303               	bcf	3,6	;RP1=0, select bank0
  8109  0A20  01DC               	clrf	_getLights_Allow_Condition$4767
  8110  0A21                     l6461:	
  8111  0A21  1283               	bcf	3,5	;RP0=0, select bank0
  8112  0A22  1303               	bcf	3,6	;RP1=0, select bank0
  8113  0A23  085C               	movf	_getLights_Allow_Condition$4767,w
  8114  0A24  00DA               	movwf	??_getLights_Allow_Condition
  8115  0A25  085A               	movf	??_getLights_Allow_Condition,w
  8116  0A26  00DB               	movwf	getLights_Allow_Condition@allow
  8117                           
  8118                           ;TriacRelay_B1.c: 347: return allow;
  8119  0A27  085B               	movf	getLights_Allow_Condition@allow,w
  8120  0A28  0008               	return
  8121  0A29                     __end_of_getLights_Allow_Condition:	
  8122                           
  8123                           	psect	text48
  8124  08D3                     __ptext48:	
  8125 ;; *************** function _getLoad_OK *****************
  8126 ;; Defined at:
  8127 ;;		line 273 in file "../src/OverLoad_B1.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;		None
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;  ok              1    4[COMMON] unsigned char 
  8132 ;; Return value:  Size  Location     Type
  8133 ;;                  1    wreg      unsigned char 
  8134 ;; Registers used:
  8135 ;;		wreg, status,2
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8141 ;;      Params:         0       0       0       0
  8142 ;;      Locals:         1       0       0       0
  8143 ;;      Temps:          0       0       0       0
  8144 ;;      Totals:         1       0       0       0
  8145 ;;Total ram usage:        1 bytes
  8146 ;; Hardware stack levels used:    1
  8147 ;; Hardware stack levels required when called:    2
  8148 ;; This function calls:
  8149 ;;		Nothing
  8150 ;; This function is called by:
  8151 ;;		_Lights_Main
  8152 ;;		_getLights_Allow_Condition
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156                           
  8157                           ;psect for function _getLoad_OK
  8158  08D3                     _getLoad_OK:	
  8159                           
  8160                           ;OverLoad_B1.c: 274: char ok = Load.OK == 1 ? 1 : 0;
  8161                           
  8162                           ;incstack = 0
  8163                           ; Regs used in _getLoad_OK: [wreg+status,2]
  8164  08D3  3000               	movlw	0
  8165  08D4  1683               	bsf	3,5	;RP0=1, select bank1
  8166  08D5  1303               	bcf	3,6	;RP1=0, select bank1
  8167  08D6  1BCA               	btfsc	_Load^(0+128),7
  8168  08D7  3001               	movlw	1
  8169  08D8  00F9               	movwf	getLoad_OK@ok
  8170                           
  8171                           ;OverLoad_B1.c: 275: return ok;
  8172  08D9  0879               	movf	getLoad_OK@ok,w
  8173  08DA  0008               	return
  8174  08DB                     __end_of_getLoad_OK:	
  8175                           
  8176                           	psect	text49
  8177  06F3                     __ptext49:	
  8178 ;; *************** function _Lights_Control *****************
  8179 ;; Defined at:
  8180 ;;		line 174 in file "../src/TriacRelay_B1.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  lights          1    wreg     unsigned char 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  lights          1   10[BANK0 ] unsigned char 
  8185 ;; Return value:  Size  Location     Type
  8186 ;;		None               void
  8187 ;; Registers used:
  8188 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8194 ;;      Params:         0       0       0       0
  8195 ;;      Locals:         0       1       0       0
  8196 ;;      Temps:          0       2       0       0
  8197 ;;      Totals:         0       3       0       0
  8198 ;;Total ram usage:        3 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; Hardware stack levels required when called:    3
  8201 ;; This function calls:
  8202 ;;		_LightsPointSelect
  8203 ;;		___awdiv
  8204 ;; This function is called by:
  8205 ;;		_Lights_Main
  8206 ;; This function uses a non-reentrant model
  8207 ;;
  8208                           
  8209                           
  8210                           ;psect for function _Lights_Control
  8211  06F3                     _Lights_Control:	
  8212                           
  8213                           ;incstack = 0
  8214                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8215                           ;Lights_Control@lights stored from wreg
  8216  06F3  1283               	bcf	3,5	;RP0=0, select bank0
  8217  06F4  1303               	bcf	3,6	;RP1=0, select bank0
  8218  06F5  00E4               	movwf	Lights_Control@lights
  8219                           
  8220                           ;TriacRelay_B1.c: 175: LightsPointSelect(lights);
  8221  06F6  0864               	movf	Lights_Control@lights,w
  8222  06F7  158A  21E7  118A   	fcall	_LightsPointSelect
  8223                           
  8224                           ;TriacRelay_B1.c: 176: if (Lights->GO == 1) {
  8225  06FA  0874               	movf	_Lights,w
  8226  06FB  0084               	movwf	4
  8227  06FC  1383               	bcf	3,7	;select IRP bank0
  8228  06FD  1C80               	btfss	0,1
  8229  06FE  0008               	return
  8230                           
  8231                           ;TriacRelay_B1.c: 177: Lights->Time++;
  8232  06FF  3001               	movlw	1
  8233  0700  1283               	bcf	3,5	;RP0=0, select bank0
  8234  0701  1303               	bcf	3,6	;RP1=0, select bank0
  8235  0702  00E2               	movwf	??_Lights_Control
  8236  0703  0874               	movf	_Lights,w
  8237  0704  3E02               	addlw	2
  8238  0705  0084               	movwf	4
  8239  0706  0862               	movf	??_Lights_Control,w
  8240  0707  0780               	addwf	0,f
  8241                           
  8242                           ;TriacRelay_B1.c: 178: if (Lights->RelaySet == 0) {
  8243  0708  0874               	movf	_Lights,w
  8244  0709  0084               	movwf	4
  8245  070A  1B80               	btfsc	0,7
  8246  070B  2F53               	goto	l6741
  8247                           
  8248                           ;TriacRelay_B1.c: 179: if (Lights->Time >= (Lights->RelayValue / 20)) {
  8249  070C  3014               	movlw	20
  8250  070D  00DA               	movwf	___awdiv@divisor
  8251  070E  3000               	movlw	0
  8252  070F  00DB               	movwf	___awdiv@divisor+1
  8253  0710  0874               	movf	_Lights,w
  8254  0711  3E04               	addlw	4
  8255  0712  0084               	movwf	4
  8256  0713  0800               	movf	0,w
  8257  0714  00E2               	movwf	??_Lights_Control
  8258  0715  01E3               	clrf	??_Lights_Control+1
  8259  0716  0862               	movf	??_Lights_Control,w
  8260  0717  00DC               	movwf	___awdiv@dividend
  8261  0718  0863               	movf	??_Lights_Control+1,w
  8262  0719  00DD               	movwf	___awdiv@dividend+1
  8263  071A  158A  268F  118A   	fcall	___awdiv
  8264  071D  0874               	movf	_Lights,w
  8265  071E  3E02               	addlw	2
  8266  071F  0084               	movwf	4
  8267  0720  1283               	bcf	3,5	;RP0=0, select bank0
  8268  0721  1303               	bcf	3,6	;RP1=0, select bank0
  8269  0722  085B               	movf	?___awdiv+1,w
  8270  0723  3A80               	xorlw	128
  8271  0724  3C80               	sublw	128
  8272  0725  1D03               	skipz
  8273  0726  2F2A               	goto	u8775
  8274  0727  085A               	movf	?___awdiv,w
  8275  0728  1383               	bcf	3,7	;select IRP bank0
  8276  0729  0200               	subwf	0,w
  8277  072A                     u8775:	
  8278  072A  1C03               	skipc
  8279  072B  0008               	return
  8280                           
  8281                           ;TriacRelay_B1.c: 180: Lights->RelaySet = 1;
  8282  072C  0874               	movf	_Lights,w
  8283  072D  0084               	movwf	4
  8284  072E  1383               	bcf	3,7	;select IRP bank0
  8285  072F  1780               	bsf	0,7
  8286                           
  8287                           ;TriacRelay_B1.c: 182: if (lights == 1) {
  8288  0730  1283               	bcf	3,5	;RP0=0, select bank0
  8289  0731  1303               	bcf	3,6	;RP1=0, select bank0
  8290  0732  0864               	movf	Lights_Control@lights,w
  8291  0733  3A01               	xorlw	1
  8292  0734  1D03               	skipz
  8293  0735  2F42               	goto	l6737
  8294                           
  8295                           ;TriacRelay_B1.c: 183: RA6 = Lights->Status == 1 ? 1 : 0;
  8296  0736  0874               	movf	_Lights,w
  8297  0737  0084               	movwf	4
  8298  0738  1D00               	btfss	0,2
  8299  0739  2F3E               	goto	u8790
  8300  073A  1283               	bcf	3,5	;RP0=0, select bank0
  8301  073B  1303               	bcf	3,6	;RP1=0, select bank0
  8302  073C  1705               	bsf	5,6	;volatile
  8303  073D  0008               	return
  8304  073E                     u8790:	
  8305  073E  1283               	bcf	3,5	;RP0=0, select bank0
  8306  073F  1303               	bcf	3,6	;RP1=0, select bank0
  8307  0740  1305               	bcf	5,6	;volatile
  8308                           
  8309                           ;TriacRelay_B1.c: 184: }
  8310  0741  0008               	return
  8311  0742                     l6737:	
  8312                           
  8313                           ;TriacRelay_B1.c: 187: else if (lights == 2) {
  8314  0742  0864               	movf	Lights_Control@lights,w
  8315  0743  3A02               	xorlw	2
  8316  0744  1D03               	skipz
  8317  0745  0008               	return
  8318                           
  8319                           ;TriacRelay_B1.c: 188: RC5 = Lights->Status == 1 ? 1 : 0;
  8320  0746  0874               	movf	_Lights,w
  8321  0747  0084               	movwf	4
  8322  0748  1383               	bcf	3,7	;select IRP bank0
  8323  0749  1D00               	btfss	0,2
  8324  074A  2F4F               	goto	u8820
  8325  074B  1283               	bcf	3,5	;RP0=0, select bank0
  8326  074C  1303               	bcf	3,6	;RP1=0, select bank0
  8327  074D  1687               	bsf	7,5	;volatile
  8328  074E  0008               	return
  8329  074F                     u8820:	
  8330  074F  1283               	bcf	3,5	;RP0=0, select bank0
  8331  0750  1303               	bcf	3,6	;RP1=0, select bank0
  8332  0751  1287               	bcf	7,5	;volatile
  8333                           
  8334                           ;TriacRelay_B1.c: 189: }
  8335                           ;TriacRelay_B1.c: 196: }
  8336                           ;TriacRelay_B1.c: 197: } else {
  8337  0752  0008               	return
  8338  0753                     l6741:	
  8339                           
  8340                           ;TriacRelay_B1.c: 198: if (Lights->Time >= (Lights->TriacValue / 20)) {
  8341  0753  3014               	movlw	20
  8342  0754  00DA               	movwf	___awdiv@divisor
  8343  0755  3000               	movlw	0
  8344  0756  00DB               	movwf	___awdiv@divisor+1
  8345  0757  0874               	movf	_Lights,w
  8346  0758  3E03               	addlw	3
  8347  0759  0084               	movwf	4
  8348  075A  1383               	bcf	3,7	;select IRP bank0
  8349  075B  0800               	movf	0,w
  8350  075C  00E2               	movwf	??_Lights_Control
  8351  075D  01E3               	clrf	??_Lights_Control+1
  8352  075E  0862               	movf	??_Lights_Control,w
  8353  075F  00DC               	movwf	___awdiv@dividend
  8354  0760  0863               	movf	??_Lights_Control+1,w
  8355  0761  00DD               	movwf	___awdiv@dividend+1
  8356  0762  158A  268F  118A   	fcall	___awdiv
  8357  0765  0874               	movf	_Lights,w
  8358  0766  3E02               	addlw	2
  8359  0767  0084               	movwf	4
  8360  0768  1283               	bcf	3,5	;RP0=0, select bank0
  8361  0769  1303               	bcf	3,6	;RP1=0, select bank0
  8362  076A  085B               	movf	?___awdiv+1,w
  8363  076B  3A80               	xorlw	128
  8364  076C  3C80               	sublw	128
  8365  076D  1D03               	skipz
  8366  076E  2F72               	goto	u8845
  8367  076F  085A               	movf	?___awdiv,w
  8368  0770  1383               	bcf	3,7	;select IRP bank0
  8369  0771  0200               	subwf	0,w
  8370  0772                     u8845:	
  8371  0772  1C03               	skipc
  8372  0773  0008               	return
  8373                           
  8374                           ;TriacRelay_B1.c: 199: Lights->Time = 0;
  8375  0774  0874               	movf	_Lights,w
  8376  0775  3E02               	addlw	2
  8377  0776  0084               	movwf	4
  8378  0777  1383               	bcf	3,7	;select IRP bank0
  8379  0778  0180               	clrf	0
  8380                           
  8381                           ;TriacRelay_B1.c: 200: Lights->GO = 0;
  8382  0779  0874               	movf	_Lights,w
  8383  077A  0084               	movwf	4
  8384  077B  1080               	bcf	0,1
  8385                           
  8386                           ;TriacRelay_B1.c: 201: Lights->RelaySet = 0;
  8387  077C  0874               	movf	_Lights,w
  8388  077D  0084               	movwf	4
  8389  077E  1380               	bcf	0,7
  8390                           
  8391                           ;TriacRelay_B1.c: 204: if (lights == 1) {
  8392  077F  1283               	bcf	3,5	;RP0=0, select bank0
  8393  0780  1303               	bcf	3,6	;RP1=0, select bank0
  8394  0781  0864               	movf	Lights_Control@lights,w
  8395  0782  3A01               	xorlw	1
  8396  0783  1D03               	skipz
  8397  0784  2F87               	goto	l6753
  8398                           
  8399                           ;TriacRelay_B1.c: 205: RA7 = 0;
  8400  0785  1385               	bcf	5,7	;volatile
  8401                           
  8402                           ;TriacRelay_B1.c: 206: }
  8403  0786  0008               	return
  8404  0787                     l6753:	
  8405                           
  8406                           ;TriacRelay_B1.c: 209: else if (lights == 2) {
  8407  0787  0864               	movf	Lights_Control@lights,w
  8408  0788  3A02               	xorlw	2
  8409  0789  1D03               	skipz
  8410  078A  0008               	return
  8411                           
  8412                           ;TriacRelay_B1.c: 210: RC4 = 0;
  8413  078B  1207               	bcf	7,4	;volatile
  8414  078C  0008               	return
  8415  078D                     __end_of_Lights_Control:	
  8416                           
  8417                           	psect	text50
  8418  08CB                     __ptext50:	
  8419 ;; *************** function _Lights_Initialization *****************
  8420 ;; Defined at:
  8421 ;;		line 32 in file "../src/TriacRelay_B1.c"
  8422 ;; Parameters:    Size  Location     Type
  8423 ;;		None
  8424 ;; Auto vars:     Size  Location     Type
  8425 ;;		None
  8426 ;; Return value:  Size  Location     Type
  8427 ;;		None               void
  8428 ;; Registers used:
  8429 ;;		wreg, status,2, status,0, pclath, cstack
  8430 ;; Tracked objects:
  8431 ;;		On entry : 0/0
  8432 ;;		On exit  : 0/0
  8433 ;;		Unchanged: 0/0
  8434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8435 ;;      Params:         0       0       0       0
  8436 ;;      Locals:         0       0       0       0
  8437 ;;      Temps:          0       0       0       0
  8438 ;;      Totals:         0       0       0       0
  8439 ;;Total ram usage:        0 bytes
  8440 ;; Hardware stack levels used:    1
  8441 ;; Hardware stack levels required when called:    4
  8442 ;; This function calls:
  8443 ;;		_setLights_Initialization
  8444 ;; This function is called by:
  8445 ;;		_main
  8446 ;; This function uses a non-reentrant model
  8447 ;;
  8448                           
  8449                           
  8450                           ;psect for function _Lights_Initialization
  8451  08CB                     _Lights_Initialization:	
  8452                           
  8453                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  8454                           
  8455                           ;incstack = 0
  8456                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8457  08CB  3001               	movlw	1
  8458  08CC  158A  20BD  158A   	fcall	_setLights_Initialization
  8459                           
  8460                           ;TriacRelay_B1.c: 38: setLights_Initialization(2);
  8461  08CF  3002               	movlw	2
  8462  08D0  158A  20BD         	fcall	_setLights_Initialization
  8463  08D2  0008               	return
  8464  08D3                     __end_of_Lights_Initialization:	
  8465                           
  8466                           	psect	text51
  8467  08BD                     __ptext51:	
  8468 ;; *************** function _setLights_Initialization *****************
  8469 ;; Defined at:
  8470 ;;		line 47 in file "../src/TriacRelay_B1.c"
  8471 ;; Parameters:    Size  Location     Type
  8472 ;;  lights          1    wreg     unsigned char 
  8473 ;; Auto vars:     Size  Location     Type
  8474 ;;  lights          1    1[BANK0 ] unsigned char 
  8475 ;; Return value:  Size  Location     Type
  8476 ;;		None               void
  8477 ;; Registers used:
  8478 ;;		wreg, status,2, status,0, pclath, cstack
  8479 ;; Tracked objects:
  8480 ;;		On entry : 0/0
  8481 ;;		On exit  : 0/0
  8482 ;;		Unchanged: 0/0
  8483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8484 ;;      Params:         0       0       0       0
  8485 ;;      Locals:         0       1       0       0
  8486 ;;      Temps:          0       0       0       0
  8487 ;;      Totals:         0       1       0       0
  8488 ;;Total ram usage:        1 bytes
  8489 ;; Hardware stack levels used:    1
  8490 ;; Hardware stack levels required when called:    3
  8491 ;; This function calls:
  8492 ;;		_LightsPointSelect
  8493 ;; This function is called by:
  8494 ;;		_Lights_Initialization
  8495 ;; This function uses a non-reentrant model
  8496 ;;
  8497                           
  8498                           
  8499                           ;psect for function _setLights_Initialization
  8500  08BD                     _setLights_Initialization:	
  8501                           
  8502                           ;incstack = 0
  8503                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8504                           ;setLights_Initialization@lights stored from wreg
  8505  08BD  1283               	bcf	3,5	;RP0=0, select bank0
  8506  08BE  1303               	bcf	3,6	;RP1=0, select bank0
  8507  08BF  00DB               	movwf	setLights_Initialization@lights
  8508                           
  8509                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  8510  08C0  085B               	movf	setLights_Initialization@lights,w
  8511  08C1  158A  21E7         	fcall	_LightsPointSelect
  8512  08C3  0008               	return
  8513  08C4                     __end_of_setLights_Initialization:	
  8514                           
  8515                           	psect	text52
  8516  089E                     __ptext52:	
  8517 ;; *************** function _LED_Main *****************
  8518 ;; Defined at:
  8519 ;;		line 47 in file "../src/LED_B1.c"
  8520 ;; Parameters:    Size  Location     Type
  8521 ;;		None
  8522 ;; Auto vars:     Size  Location     Type
  8523 ;;		None
  8524 ;; Return value:  Size  Location     Type
  8525 ;;		None               void
  8526 ;; Registers used:
  8527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8528 ;; Tracked objects:
  8529 ;;		On entry : 0/0
  8530 ;;		On exit  : 0/0
  8531 ;;		Unchanged: 0/0
  8532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8533 ;;      Params:         0       0       0       0
  8534 ;;      Locals:         0       0       0       0
  8535 ;;      Temps:          0       0       0       0
  8536 ;;      Totals:         0       0       0       0
  8537 ;;Total ram usage:        0 bytes
  8538 ;; Hardware stack levels used:    1
  8539 ;; Hardware stack levels required when called:    4
  8540 ;; This function calls:
  8541 ;;		_setLED_Main
  8542 ;; This function is called by:
  8543 ;;		_main
  8544 ;; This function uses a non-reentrant model
  8545 ;;
  8546                           
  8547                           
  8548                           ;psect for function _LED_Main
  8549  089E                     _LED_Main:	
  8550                           
  8551                           ;LED_B1.c: 51: setLED_Main(99);
  8552                           
  8553                           ;incstack = 0
  8554                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8555  089E  3063               	movlw	99
  8556  089F  158A  245F         	fcall	_setLED_Main
  8557  08A1  0008               	return
  8558  08A2                     __end_of_LED_Main:	
  8559                           
  8560                           	psect	text53
  8561  0C5F                     __ptext53:	
  8562 ;; *************** function _setLED_Main *****************
  8563 ;; Defined at:
  8564 ;;		line 229 in file "../src/LED_B1.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;  led             1    wreg     unsigned char 
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;  led             1    3[BANK0 ] unsigned char 
  8569 ;; Return value:  Size  Location     Type
  8570 ;;		None               void
  8571 ;; Registers used:
  8572 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8573 ;; Tracked objects:
  8574 ;;		On entry : 0/0
  8575 ;;		On exit  : 0/0
  8576 ;;		Unchanged: 0/0
  8577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8578 ;;      Params:         0       0       0       0
  8579 ;;      Locals:         0       1       0       0
  8580 ;;      Temps:          0       2       0       0
  8581 ;;      Totals:         0       3       0       0
  8582 ;;Total ram usage:        3 bytes
  8583 ;; Hardware stack levels used:    1
  8584 ;; Hardware stack levels required when called:    3
  8585 ;; This function calls:
  8586 ;;		_LedPointSelect
  8587 ;; This function is called by:
  8588 ;;		_LED_Main
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           
  8593                           ;psect for function _setLED_Main
  8594  0C5F                     _setLED_Main:	
  8595                           
  8596                           ;incstack = 0
  8597                           ; Regs used in _setLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8598                           ;setLED_Main@led stored from wreg
  8599  0C5F  1283               	bcf	3,5	;RP0=0, select bank0
  8600  0C60  1303               	bcf	3,6	;RP1=0, select bank0
  8601  0C61  00DD               	movwf	setLED_Main@led
  8602                           
  8603                           ;LED_B1.c: 230: LedPointSelect(led);
  8604  0C62  085D               	movf	setLED_Main@led,w
  8605  0C63  158A  22D5  158A   	fcall	_LedPointSelect
  8606                           
  8607                           ;LED_B1.c: 231: if (LED->GO == 1) {
  8608  0C66  0872               	movf	_LED,w
  8609  0C67  0084               	movwf	4
  8610  0C68  1383               	bcf	3,7	;select IRP bank0
  8611  0C69  1C80               	btfss	0,1
  8612  0C6A  0008               	return
  8613                           
  8614                           ;LED_B1.c: 232: LED->Time++;
  8615  0C6B  0A72               	incf	_LED,w
  8616  0C6C  0084               	movwf	4
  8617  0C6D  3001               	movlw	1
  8618  0C6E  0780               	addwf	0,f
  8619  0C6F  0A84               	incf	4,f
  8620  0C70  1803               	skipnc
  8621  0C71  0A80               	incf	0,f
  8622                           
  8623                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
  8624  0C72  0A72               	incf	_LED,w
  8625  0C73  0084               	movwf	4
  8626  0C74  0800               	movf	0,w
  8627  0C75  1283               	bcf	3,5	;RP0=0, select bank0
  8628  0C76  1303               	bcf	3,6	;RP1=0, select bank0
  8629  0C77  00DB               	movwf	??_setLED_Main
  8630  0C78  0A84               	incf	4,f
  8631  0C79  0800               	movf	0,w
  8632  0C7A  00DC               	movwf	??_setLED_Main+1
  8633  0C7B  3000               	movlw	0
  8634  0C7C  025C               	subwf	??_setLED_Main+1,w
  8635  0C7D  3019               	movlw	25
  8636  0C7E  1903               	skipnz
  8637  0C7F  025B               	subwf	??_setLED_Main,w
  8638  0C80  1C03               	skipc
  8639  0C81  0008               	return
  8640                           
  8641                           ;LED_B1.c: 234: LED->Time = 0;
  8642  0C82  0A72               	incf	_LED,w
  8643  0C83  0084               	movwf	4
  8644  0C84  0180               	clrf	0
  8645  0C85  0A84               	incf	4,f
  8646  0C86  0180               	clrf	0
  8647                           
  8648                           ;LED_B1.c: 237: if (led == 1) {
  8649  0C87  085D               	movf	setLED_Main@led,w
  8650  0C88  3A01               	xorlw	1
  8651  0C89  1D03               	skipz
  8652  0C8A  2C8D               	goto	l383
  8653                           
  8654                           ;LED_B1.c: 238: RC7 = RC7 == 1 ? 0 : 1;
  8655  0C8B  3080               	movlw	128
  8656  0C8C  0687               	xorwf	7,f
  8657  0C8D                     l383:	
  8658                           
  8659                           ;LED_B1.c: 239: }
  8660                           ;LED_B1.c: 242: if (led == 2) {
  8661  0C8D  085D               	movf	setLED_Main@led,w
  8662  0C8E  3A02               	xorlw	2
  8663  0C8F  1D03               	skipz
  8664  0C90  2C93               	goto	l384
  8665                           
  8666                           ;LED_B1.c: 243: RC6 = RC6 == 1 ? 0 : 1;
  8667  0C91  3040               	movlw	64
  8668  0C92  0687               	xorwf	7,f
  8669  0C93                     l384:	
  8670                           
  8671                           ;LED_B1.c: 244: }
  8672                           ;LED_B1.c: 252: if (led == 99) {
  8673  0C93  085D               	movf	setLED_Main@led,w
  8674  0C94  3A63               	xorlw	99
  8675  0C95  1D03               	skipz
  8676  0C96  0008               	return
  8677                           
  8678                           ;LED_B1.c: 253: RC1 = RC1 == 1 ? 0 : 1;
  8679  0C97  3002               	movlw	2
  8680  0C98  0687               	xorwf	7,f
  8681  0C99  0008               	return
  8682  0C9A                     __end_of_setLED_Main:	
  8683                           
  8684                           	psect	text54
  8685  0901                     __ptext54:	
  8686 ;; *************** function _LED_Initialization *****************
  8687 ;; Defined at:
  8688 ;;		line 31 in file "../src/LED_B1.c"
  8689 ;; Parameters:    Size  Location     Type
  8690 ;;		None
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;		None
  8693 ;; Return value:  Size  Location     Type
  8694 ;;		None               void
  8695 ;; Registers used:
  8696 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8702 ;;      Params:         0       0       0       0
  8703 ;;      Locals:         0       0       0       0
  8704 ;;      Temps:          0       0       0       0
  8705 ;;      Totals:         0       0       0       0
  8706 ;;Total ram usage:        0 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; Hardware stack levels required when called:    5
  8709 ;; This function calls:
  8710 ;;		_setLED_Initialization
  8711 ;; This function is called by:
  8712 ;;		_main
  8713 ;; This function uses a non-reentrant model
  8714 ;;
  8715                           
  8716                           
  8717                           ;psect for function _LED_Initialization
  8718  0901                     _LED_Initialization:	
  8719                           
  8720                           ;LED_B1.c: 33: setLED_Initialization(1);
  8721                           
  8722                           ;incstack = 0
  8723                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8724  0901  3001               	movlw	1
  8725  0902  158A  2187  158A   	fcall	_setLED_Initialization
  8726                           
  8727                           ;LED_B1.c: 36: setLED_Initialization(2);
  8728  0905  3002               	movlw	2
  8729  0906  158A  2187  158A   	fcall	_setLED_Initialization
  8730                           
  8731                           ;LED_B1.c: 42: setLED_Initialization(99);
  8732  0909  3063               	movlw	99
  8733  090A  158A  2187         	fcall	_setLED_Initialization
  8734  090C  0008               	return
  8735  090D                     __end_of_LED_Initialization:	
  8736                           
  8737                           	psect	text55
  8738  0987                     __ptext55:	
  8739 ;; *************** function _setLED_Initialization *****************
  8740 ;; Defined at:
  8741 ;;		line 74 in file "../src/LED_B1.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;  led             1    wreg     unsigned char 
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;  led             1    3[BANK0 ] unsigned char 
  8746 ;; Return value:  Size  Location     Type
  8747 ;;		None               void
  8748 ;; Registers used:
  8749 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8750 ;; Tracked objects:
  8751 ;;		On entry : 0/0
  8752 ;;		On exit  : 0/0
  8753 ;;		Unchanged: 0/0
  8754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8755 ;;      Params:         0       0       0       0
  8756 ;;      Locals:         0       1       0       0
  8757 ;;      Temps:          0       0       0       0
  8758 ;;      Totals:         0       1       0       0
  8759 ;;Total ram usage:        1 bytes
  8760 ;; Hardware stack levels used:    1
  8761 ;; Hardware stack levels required when called:    4
  8762 ;; This function calls:
  8763 ;;		_LedPointSelect
  8764 ;;		_setLED
  8765 ;; This function is called by:
  8766 ;;		_LED_Initialization
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           
  8771                           ;psect for function _setLED_Initialization
  8772  0987                     _setLED_Initialization:	
  8773                           
  8774                           ;incstack = 0
  8775                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8776                           ;setLED_Initialization@led stored from wreg
  8777  0987  1283               	bcf	3,5	;RP0=0, select bank0
  8778  0988  1303               	bcf	3,6	;RP1=0, select bank0
  8779  0989  00DD               	movwf	setLED_Initialization@led
  8780                           
  8781                           ;LED_B1.c: 75: LedPointSelect(led);
  8782  098A  085D               	movf	setLED_Initialization@led,w
  8783  098B  158A  22D5  158A   	fcall	_LedPointSelect
  8784                           
  8785                           ;LED_B1.c: 76: LED->Enable = 1;
  8786  098E  0872               	movf	_LED,w
  8787  098F  0084               	movwf	4
  8788  0990  1383               	bcf	3,7	;select IRP bank0
  8789  0991  1400               	bsf	0,0
  8790                           
  8791                           ;LED_B1.c: 77: setLED(led, 0);
  8792  0992  1283               	bcf	3,5	;RP0=0, select bank0
  8793  0993  1303               	bcf	3,6	;RP1=0, select bank0
  8794  0994  01DB               	clrf	setLED@command
  8795  0995  085D               	movf	setLED_Initialization@led,w
  8796  0996  158A  25E5         	fcall	_setLED
  8797  0998  0008               	return
  8798  0999                     __end_of_setLED_Initialization:	
  8799                           
  8800                           	psect	text56
  8801  061B                     __ptext56:	
  8802 ;; *************** function _Exception_Main *****************
  8803 ;; Defined at:
  8804 ;;		line 499 in file "../src/Main_B1.c"
  8805 ;; Parameters:    Size  Location     Type
  8806 ;;		None
  8807 ;; Auto vars:     Size  Location     Type
  8808 ;;  i               2   18[BANK0 ] int 
  8809 ;;  i               2   16[BANK0 ] int 
  8810 ;;  status          1   20[BANK0 ] unsigned char 
  8811 ;;  error           1   15[BANK0 ] unsigned char 
  8812 ;;  count           1   14[BANK0 ] unsigned char 
  8813 ;;  lights          1   13[BANK0 ] unsigned char 
  8814 ;; Return value:  Size  Location     Type
  8815 ;;		None               void
  8816 ;; Registers used:
  8817 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8818 ;; Tracked objects:
  8819 ;;		On entry : 0/0
  8820 ;;		On exit  : 0/0
  8821 ;;		Unchanged: 0/0
  8822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8823 ;;      Params:         0       0       0       0
  8824 ;;      Locals:         0       8       0       0
  8825 ;;      Temps:          0       1       0       0
  8826 ;;      Totals:         0       9       0       0
  8827 ;;Total ram usage:        9 bytes
  8828 ;; Hardware stack levels used:    1
  8829 ;; Hardware stack levels required when called:    5
  8830 ;; This function calls:
  8831 ;;		_getAll_Lights_Line
  8832 ;;		_getLights_Status
  8833 ;;		_getMain_All_Error_Status
  8834 ;;		_getMain_All_LightsStatus
  8835 ;;		_setBuz
  8836 ;;		_setLED
  8837 ;;		_setLights_SwOff
  8838 ;;		_setLights_SwOn
  8839 ;; This function is called by:
  8840 ;;		_main
  8841 ;; This function uses a non-reentrant model
  8842 ;;
  8843                           
  8844                           
  8845                           ;psect for function _Exception_Main
  8846  061B                     _Exception_Main:	
  8847                           
  8848                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8849                           
  8850                           ;incstack = 0
  8851                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8852  061B  3000               	movlw	0
  8853  061C  158A  249A  118A   	fcall	_getMain_All_Error_Status
  8854  061F  1283               	bcf	3,5	;RP0=0, select bank0
  8855  0620  1303               	bcf	3,6	;RP1=0, select bank0
  8856  0621  00E6               	movwf	??_Exception_Main
  8857  0622  0866               	movf	??_Exception_Main,w
  8858  0623  00E9               	movwf	Exception_Main@error
  8859                           
  8860                           ;Main_B1.c: 501: char lights = 0, count = 2;
  8861  0624  01E7               	clrf	Exception_Main@lights
  8862  0625  3002               	movlw	2
  8863  0626  00E6               	movwf	??_Exception_Main
  8864  0627  0866               	movf	??_Exception_Main,w
  8865  0628  00E8               	movwf	Exception_Main@count
  8866                           
  8867                           ;Main_B1.c: 502: char status = 0;
  8868  0629  01EE               	clrf	Exception_Main@status
  8869                           
  8870                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8871  062A  1DB3               	btfss	_myMain+2,3
  8872  062B  2E38               	goto	l7279
  8873                           
  8874                           ;Main_B1.c: 505: if (error == 0) {
  8875  062C  08E9               	movf	Exception_Main@error,f
  8876  062D  1D03               	skipz
  8877  062E  0008               	return
  8878                           
  8879                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8880  062F  11B3               	bcf	_myMain+2,3
  8881                           
  8882                           ;Main_B1.c: 509: setLED(99, 10);
  8883  0630  300A               	movlw	10
  8884  0631  00E6               	movwf	??_Exception_Main
  8885  0632  0866               	movf	??_Exception_Main,w
  8886  0633  00DB               	movwf	setLED@command
  8887  0634  3063               	movlw	99
  8888  0635  158A  25E5         	fcall	_setLED
  8889                           
  8890                           ;Main_B1.c: 523: }
  8891                           ;Main_B1.c: 524: } else {
  8892  0637  0008               	return
  8893  0638                     l7279:	
  8894                           
  8895                           ;Main_B1.c: 525: if (error != 0) {
  8896  0638  1283               	bcf	3,5	;RP0=0, select bank0
  8897  0639  1303               	bcf	3,6	;RP1=0, select bank0
  8898  063A  0869               	movf	Exception_Main@error,w
  8899  063B  1903               	btfsc	3,2
  8900  063C  0008               	return
  8901                           
  8902                           ;Main_B1.c: 526: myMain.Error_Run = 1;
  8903  063D  15B3               	bsf	_myMain+2,3
  8904                           
  8905                           ;Main_B1.c: 588: setLED(99, 11);
  8906  063E  300B               	movlw	11
  8907  063F  00E6               	movwf	??_Exception_Main
  8908  0640  0866               	movf	??_Exception_Main,w
  8909  0641  00DB               	movwf	setLED@command
  8910  0642  3063               	movlw	99
  8911  0643  158A  25E5  118A   	fcall	_setLED
  8912                           
  8913                           ;Main_B1.c: 592: switch (error) {
  8914  0646  2EE4               	goto	l7317
  8915  0647                     l7285:	
  8916                           ;Main_B1.c: 593: case 1:
  8917                           
  8918                           
  8919                           ;Main_B1.c: 594: for (int i = 0; i < count; i++) {
  8920  0647  1283               	bcf	3,5	;RP0=0, select bank0
  8921  0648  1303               	bcf	3,6	;RP1=0, select bank0
  8922  0649  01EA               	clrf	Exception_Main@i
  8923  064A  01EB               	clrf	Exception_Main@i+1
  8924  064B                     l7293:	
  8925  064B  086B               	movf	Exception_Main@i+1,w
  8926  064C  3A80               	xorlw	128
  8927  064D  00E6               	movwf	??_Exception_Main
  8928  064E  3080               	movlw	128
  8929  064F  0266               	subwf	??_Exception_Main,w
  8930  0650  1D03               	skipz
  8931  0651  2E54               	goto	u9945
  8932  0652  0868               	movf	Exception_Main@count,w
  8933  0653  026A               	subwf	Exception_Main@i,w
  8934  0654                     u9945:	
  8935  0654  1803               	btfsc	3,0
  8936  0655  2E77               	goto	u9940
  8937                           
  8938                           ;Main_B1.c: 595: if (getLights_Status(i + 1) == 1) {
  8939  0656  1283               	bcf	3,5	;RP0=0, select bank0
  8940  0657  1303               	bcf	3,6	;RP1=0, select bank0
  8941  0658  086A               	movf	Exception_Main@i,w
  8942  0659  3E01               	addlw	1
  8943  065A  158A  2165  118A   	fcall	_getLights_Status
  8944  065D  3A01               	xorlw	1
  8945  065E  1D03               	skipz
  8946  065F  2E6E               	goto	l7291
  8947                           
  8948                           ;Main_B1.c: 597: setLights_SwOn(i + 1);
  8949  0660  1283               	bcf	3,5	;RP0=0, select bank0
  8950  0661  1303               	bcf	3,6	;RP1=0, select bank0
  8951  0662  086A               	movf	Exception_Main@i,w
  8952  0663  3E01               	addlw	1
  8953  0664  158A  2352  118A   	fcall	_setLights_SwOn
  8954                           
  8955                           ;Main_B1.c: 598: setLights_SwOff(i + 1);
  8956  0667  1283               	bcf	3,5	;RP0=0, select bank0
  8957  0668  1303               	bcf	3,6	;RP1=0, select bank0
  8958  0669  086A               	movf	Exception_Main@i,w
  8959  066A  3E01               	addlw	1
  8960  066B  158A  22A0  118A   	fcall	_setLights_SwOff
  8961  066E                     l7291:	
  8962  066E  3001               	movlw	1
  8963  066F  1283               	bcf	3,5	;RP0=0, select bank0
  8964  0670  1303               	bcf	3,6	;RP1=0, select bank0
  8965  0671  07EA               	addwf	Exception_Main@i,f
  8966  0672  1803               	skipnc
  8967  0673  0AEB               	incf	Exception_Main@i+1,f
  8968  0674  3000               	movlw	0
  8969  0675  07EB               	addwf	Exception_Main@i+1,f
  8970  0676  2E4B               	goto	l7293
  8971  0677                     u9940:	
  8972  0677  1283               	bcf	3,5	;RP0=0, select bank0
  8973  0678  1303               	bcf	3,6	;RP1=0, select bank0
  8974  0679  0008               	return
  8975  067A                     l7295:	
  8976                           ;Main_B1.c: 602: case 2:
  8977                           
  8978                           ;Main_B1.c: 599: }
  8979                           ;Main_B1.c: 600: }
  8980                           ;Main_B1.c: 601: break;
  8981                           
  8982                           
  8983                           ;Main_B1.c: 603: if (getMain_All_LightsStatus() == 1) {
  8984  067A  158A  2155  118A   	fcall	_getMain_All_LightsStatus
  8985  067D  3A01               	xorlw	1
  8986  067E  1D03               	skipz
  8987  067F  2E8A               	goto	l7299
  8988                           
  8989                           ;Main_B1.c: 604: setBuz(10, 300);
  8990  0680  302C               	movlw	44
  8991  0681  1283               	bcf	3,5	;RP0=0, select bank0
  8992  0682  1303               	bcf	3,6	;RP1=0, select bank0
  8993  0683  00E2               	movwf	setBuz@time
  8994  0684  3001               	movlw	1
  8995  0685  00E3               	movwf	setBuz@time+1
  8996  0686  300A               	movlw	10
  8997  0687  158A  259E  118A   	fcall	_setBuz
  8998  068A                     l7299:	
  8999                           
  9000                           ;Main_B1.c: 605: }
  9001                           ;Main_B1.c: 607: for (int i = 0; i < count; i++) {
  9002  068A  1283               	bcf	3,5	;RP0=0, select bank0
  9003  068B  1303               	bcf	3,6	;RP1=0, select bank0
  9004  068C  01EC               	clrf	Exception_Main@i_2418
  9005  068D  01ED               	clrf	Exception_Main@i_2418+1
  9006  068E                     l7307:	
  9007  068E  086D               	movf	Exception_Main@i_2418+1,w
  9008  068F  3A80               	xorlw	128
  9009  0690  00E6               	movwf	??_Exception_Main
  9010  0691  3080               	movlw	128
  9011  0692  0266               	subwf	??_Exception_Main,w
  9012  0693  1D03               	skipz
  9013  0694  2E97               	goto	u9975
  9014  0695  0868               	movf	Exception_Main@count,w
  9015  0696  026C               	subwf	Exception_Main@i_2418,w
  9016  0697                     u9975:	
  9017  0697  1803               	btfsc	3,0
  9018  0698  2EBA               	goto	u9970
  9019                           
  9020                           ;Main_B1.c: 608: if (getLights_Status(i + 1) == 1) {
  9021  0699  1283               	bcf	3,5	;RP0=0, select bank0
  9022  069A  1303               	bcf	3,6	;RP1=0, select bank0
  9023  069B  086C               	movf	Exception_Main@i_2418,w
  9024  069C  3E01               	addlw	1
  9025  069D  158A  2165  118A   	fcall	_getLights_Status
  9026  06A0  3A01               	xorlw	1
  9027  06A1  1D03               	skipz
  9028  06A2  2EB1               	goto	l7305
  9029                           
  9030                           ;Main_B1.c: 609: setLights_SwOn(i + 1);
  9031  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  9032  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  9033  06A5  086C               	movf	Exception_Main@i_2418,w
  9034  06A6  3E01               	addlw	1
  9035  06A7  158A  2352  118A   	fcall	_setLights_SwOn
  9036                           
  9037                           ;Main_B1.c: 610: setLights_SwOff(i + 1);
  9038  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  9039  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  9040  06AC  086C               	movf	Exception_Main@i_2418,w
  9041  06AD  3E01               	addlw	1
  9042  06AE  158A  22A0  118A   	fcall	_setLights_SwOff
  9043  06B1                     l7305:	
  9044  06B1  3001               	movlw	1
  9045  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  9046  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  9047  06B4  07EC               	addwf	Exception_Main@i_2418,f
  9048  06B5  1803               	skipnc
  9049  06B6  0AED               	incf	Exception_Main@i_2418+1,f
  9050  06B7  3000               	movlw	0
  9051  06B8  07ED               	addwf	Exception_Main@i_2418+1,f
  9052  06B9  2E8E               	goto	l7307
  9053  06BA                     u9970:	
  9054  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  9055  06BB  1303               	bcf	3,6	;RP1=0, select bank0
  9056  06BC  0008               	return
  9057  06BD                     l7309:	
  9058                           ;Main_B1.c: 614: case 3:
  9059                           
  9060                           ;Main_B1.c: 611: }
  9061                           ;Main_B1.c: 612: }
  9062                           ;Main_B1.c: 613: break;
  9063                           
  9064                           
  9065                           ;Main_B1.c: 615: status = getAll_Lights_Line();
  9066  06BD  158A  239D  118A   	fcall	_getAll_Lights_Line
  9067  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  9068  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  9069  06C2  00E6               	movwf	??_Exception_Main
  9070  06C3  0866               	movf	??_Exception_Main,w
  9071  06C4  00EE               	movwf	Exception_Main@status
  9072                           
  9073                           ;Main_B1.c: 617: if (getLights_Status(status) == 1) {
  9074  06C5  086E               	movf	Exception_Main@status,w
  9075  06C6  158A  2165  118A   	fcall	_getLights_Status
  9076  06C9  3A01               	xorlw	1
  9077  06CA  1D03               	skipz
  9078  06CB  2ED8               	goto	l7313
  9079                           
  9080                           ;Main_B1.c: 618: setLights_SwOn(status);
  9081  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  9082  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  9083  06CE  086E               	movf	Exception_Main@status,w
  9084  06CF  158A  2352  118A   	fcall	_setLights_SwOn
  9085                           
  9086                           ;Main_B1.c: 619: setLights_SwOff(status);
  9087  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  9088  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  9089  06D4  086E               	movf	Exception_Main@status,w
  9090  06D5  158A  22A0  118A   	fcall	_setLights_SwOff
  9091  06D8                     l7313:	
  9092                           
  9093                           ;Main_B1.c: 621: }
  9094                           ;Main_B1.c: 623: setBuz(status, 300);
  9095  06D8  302C               	movlw	44
  9096  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  9097  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  9098  06DB  00E2               	movwf	setBuz@time
  9099  06DC  3001               	movlw	1
  9100  06DD  00E3               	movwf	setBuz@time+1
  9101  06DE  086E               	movf	Exception_Main@status,w
  9102  06DF  158A  259E         	fcall	_setBuz
  9103                           
  9104                           ;Main_B1.c: 624: break;
  9105  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  9106  06E2  1303               	bcf	3,6	;RP1=0, select bank0
  9107  06E3  0008               	return
  9108  06E4                     l7317:	
  9109                           ;Main_B1.c: 625: }
  9110                           
  9111  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  9112  06E5  1303               	bcf	3,6	;RP1=0, select bank0
  9113  06E6  0869               	movf	Exception_Main@error,w
  9114                           
  9115                           ; Switch size 1, requested type "space"
  9116                           ; Number of cases is 3, Range of values is 1 to 3
  9117                           ; switch strategies available:
  9118                           ; Name         Instructions Cycles
  9119                           ; simple_byte           10     6 (average)
  9120                           ; direct_byte           16    10 (fixed)
  9121                           ; jumptable            263     9 (fixed)
  9122                           ;	Chosen strategy is simple_byte
  9123  06E7  3A01               	xorlw	1	; case 1
  9124  06E8  1903               	skipnz
  9125  06E9  2E47               	goto	l7285
  9126  06EA  3A03               	xorlw	3	; case 2
  9127  06EB  1903               	skipnz
  9128  06EC  2E7A               	goto	l7295
  9129  06ED  3A01               	xorlw	1	; case 3
  9130  06EE  1903               	skipnz
  9131  06EF  2EBD               	goto	l7309
  9132  06F0  2EF2               	goto	l752
  9133  06F1  0008               	return
  9134  06F2                     l752:	
  9135  06F2  0008               	return
  9136  06F3                     __end_of_Exception_Main:	
  9137                           
  9138                           	psect	text57
  9139  0B52                     __ptext57:	
  9140 ;; *************** function _setLights_SwOn *****************
  9141 ;; Defined at:
  9142 ;;		line 361 in file "../src/TriacRelay_B1.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;  sw              1    wreg     unsigned char 
  9145 ;; Auto vars:     Size  Location     Type
  9146 ;;  sw              1    4[BANK0 ] unsigned char 
  9147 ;; Return value:  Size  Location     Type
  9148 ;;		None               void
  9149 ;; Registers used:
  9150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9151 ;; Tracked objects:
  9152 ;;		On entry : 0/0
  9153 ;;		On exit  : 0/0
  9154 ;;		Unchanged: 0/0
  9155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9156 ;;      Params:         0       0       0       0
  9157 ;;      Locals:         0       1       0       0
  9158 ;;      Temps:          0       0       0       0
  9159 ;;      Totals:         0       1       0       0
  9160 ;;Total ram usage:        1 bytes
  9161 ;; Hardware stack levels used:    1
  9162 ;; Hardware stack levels required when called:    4
  9163 ;; This function calls:
  9164 ;;		_LightsPointSelect
  9165 ;;		_getLights_Status
  9166 ;;		_setLights_Trigger
  9167 ;; This function is called by:
  9168 ;;		_Exception_Main
  9169 ;;		_PIR_Main
  9170 ;;		_setSw_Main
  9171 ;; This function uses a non-reentrant model
  9172 ;;
  9173                           
  9174                           
  9175                           ;psect for function _setLights_SwOn
  9176  0B52                     _setLights_SwOn:	
  9177                           
  9178                           ;incstack = 0
  9179                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9180                           ;setLights_SwOn@sw stored from wreg
  9181  0B52  1283               	bcf	3,5	;RP0=0, select bank0
  9182  0B53  1303               	bcf	3,6	;RP1=0, select bank0
  9183  0B54  00DE               	movwf	setLights_SwOn@sw
  9184                           
  9185                           ;TriacRelay_B1.c: 363: LightsPointSelect(sw);
  9186  0B55  085E               	movf	setLights_SwOn@sw,w
  9187  0B56  158A  21E7  158A   	fcall	_LightsPointSelect
  9188                           
  9189                           ;TriacRelay_B1.c: 365: Lights->SwFlag = 1;
  9190  0B59  0A74               	incf	_Lights,w
  9191  0B5A  0084               	movwf	4
  9192  0B5B  1383               	bcf	3,7	;select IRP bank0
  9193  0B5C  1500               	bsf	0,2
  9194                           
  9195                           ;TriacRelay_B1.c: 366: if (getLights_Status(sw) == 0) {
  9196  0B5D  1283               	bcf	3,5	;RP0=0, select bank0
  9197  0B5E  1303               	bcf	3,6	;RP1=0, select bank0
  9198  0B5F  085E               	movf	setLights_SwOn@sw,w
  9199  0B60  158A  2165  158A   	fcall	_getLights_Status
  9200  0B63  3800               	iorlw	0
  9201  0B64  1D03               	skipz
  9202  0B65  2B72               	goto	l6427
  9203                           
  9204                           ;TriacRelay_B1.c: 367: Lights->SwStatus = 1;
  9205  0B66  0A74               	incf	_Lights,w
  9206  0B67  0084               	movwf	4
  9207  0B68  1383               	bcf	3,7	;select IRP bank0
  9208  0B69  1580               	bsf	0,3
  9209                           
  9210                           ;TriacRelay_B1.c: 368: setLights_Trigger(sw, 1);
  9211  0B6A  1283               	bcf	3,5	;RP0=0, select bank0
  9212  0B6B  1303               	bcf	3,6	;RP1=0, select bank0
  9213  0B6C  01DB               	clrf	setLights_Trigger@command
  9214  0B6D  0ADB               	incf	setLights_Trigger@command,f
  9215  0B6E  085E               	movf	setLights_SwOn@sw,w
  9216  0B6F  158A  22BA         	fcall	_setLights_Trigger
  9217                           
  9218                           ;TriacRelay_B1.c: 369: } else {
  9219  0B71  0008               	return
  9220  0B72                     l6427:	
  9221                           
  9222                           ;TriacRelay_B1.c: 370: Lights->SwStatus = 0;
  9223  0B72  0A74               	incf	_Lights,w
  9224  0B73  0084               	movwf	4
  9225  0B74  1383               	bcf	3,7	;select IRP bank0
  9226  0B75  1180               	bcf	0,3
  9227  0B76  0008               	return
  9228  0B77                     __end_of_setLights_SwOn:	
  9229                           
  9230                           	psect	text58
  9231  0965                     __ptext58:	
  9232 ;; *************** function _getLights_Status *****************
  9233 ;; Defined at:
  9234 ;;		line 225 in file "../src/TriacRelay_B1.c"
  9235 ;; Parameters:    Size  Location     Type
  9236 ;;  lights          1    wreg     unsigned char 
  9237 ;; Auto vars:     Size  Location     Type
  9238 ;;  lights          1    1[BANK0 ] unsigned char 
  9239 ;;  status          1    2[BANK0 ] unsigned char 
  9240 ;; Return value:  Size  Location     Type
  9241 ;;                  1    wreg      unsigned char 
  9242 ;; Registers used:
  9243 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9244 ;; Tracked objects:
  9245 ;;		On entry : 0/0
  9246 ;;		On exit  : 0/0
  9247 ;;		Unchanged: 0/0
  9248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9249 ;;      Params:         0       0       0       0
  9250 ;;      Locals:         0       2       0       0
  9251 ;;      Temps:          0       0       0       0
  9252 ;;      Totals:         0       2       0       0
  9253 ;;Total ram usage:        2 bytes
  9254 ;; Hardware stack levels used:    1
  9255 ;; Hardware stack levels required when called:    3
  9256 ;; This function calls:
  9257 ;;		_LightsPointSelect
  9258 ;; This function is called by:
  9259 ;;		_Exception_Main
  9260 ;;		_PIR_Main
  9261 ;;		_setLights_SwOn
  9262 ;;		_setMain_Exception
  9263 ;;		_setLights_ErrorClose
  9264 ;; This function uses a non-reentrant model
  9265 ;;
  9266                           
  9267                           
  9268                           ;psect for function _getLights_Status
  9269  0965                     _getLights_Status:	
  9270                           
  9271                           ;incstack = 0
  9272                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9273                           ;getLights_Status@lights stored from wreg
  9274  0965  1283               	bcf	3,5	;RP0=0, select bank0
  9275  0966  1303               	bcf	3,6	;RP1=0, select bank0
  9276  0967  00DB               	movwf	getLights_Status@lights
  9277                           
  9278                           ;TriacRelay_B1.c: 226: LightsPointSelect(lights);
  9279  0968  085B               	movf	getLights_Status@lights,w
  9280  0969  158A  21E7         	fcall	_LightsPointSelect
  9281                           
  9282                           ;TriacRelay_B1.c: 227: char status = Lights->Status == 1 ? 1 : 0;
  9283  096B  0874               	movf	_Lights,w
  9284  096C  0084               	movwf	4
  9285  096D  3000               	movlw	0
  9286  096E  1383               	bcf	3,7	;select IRP bank0
  9287  096F  1900               	btfsc	0,2
  9288  0970  3001               	movlw	1
  9289  0971  1283               	bcf	3,5	;RP0=0, select bank0
  9290  0972  1303               	bcf	3,6	;RP1=0, select bank0
  9291  0973  00DC               	movwf	getLights_Status@status
  9292                           
  9293                           ;TriacRelay_B1.c: 228: return status;
  9294  0974  085C               	movf	getLights_Status@status,w
  9295  0975  0008               	return
  9296  0976                     __end_of_getLights_Status:	
  9297                           
  9298                           	psect	text59
  9299  0AA0                     __ptext59:	
  9300 ;; *************** function _setLights_SwOff *****************
  9301 ;; Defined at:
  9302 ;;		line 374 in file "../src/TriacRelay_B1.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;  sw              1    wreg     unsigned char 
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;  sw              1    4[BANK0 ] unsigned char 
  9307 ;; Return value:  Size  Location     Type
  9308 ;;		None               void
  9309 ;; Registers used:
  9310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9311 ;; Tracked objects:
  9312 ;;		On entry : 0/0
  9313 ;;		On exit  : 0/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9316 ;;      Params:         0       0       0       0
  9317 ;;      Locals:         0       1       0       0
  9318 ;;      Temps:          0       0       0       0
  9319 ;;      Totals:         0       1       0       0
  9320 ;;Total ram usage:        1 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:    4
  9323 ;; This function calls:
  9324 ;;		_LightsPointSelect
  9325 ;;		_setLights_Trigger
  9326 ;; This function is called by:
  9327 ;;		_Exception_Main
  9328 ;;		_PIR_Main
  9329 ;;		_setSw_Main
  9330 ;; This function uses a non-reentrant model
  9331 ;;
  9332                           
  9333                           
  9334                           ;psect for function _setLights_SwOff
  9335  0AA0                     _setLights_SwOff:	
  9336                           
  9337                           ;incstack = 0
  9338                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9339                           ;setLights_SwOff@sw stored from wreg
  9340  0AA0  1283               	bcf	3,5	;RP0=0, select bank0
  9341  0AA1  1303               	bcf	3,6	;RP1=0, select bank0
  9342  0AA2  00DE               	movwf	setLights_SwOff@sw
  9343                           
  9344                           ;TriacRelay_B1.c: 375: LightsPointSelect(sw);
  9345  0AA3  085E               	movf	setLights_SwOff@sw,w
  9346  0AA4  158A  21E7  158A   	fcall	_LightsPointSelect
  9347                           
  9348                           ;TriacRelay_B1.c: 377: if (Lights->SwFlag == 1) {
  9349  0AA7  0A74               	incf	_Lights,w
  9350  0AA8  0084               	movwf	4
  9351  0AA9  1383               	bcf	3,7	;select IRP bank0
  9352  0AAA  1D00               	btfss	0,2
  9353  0AAB  0008               	return
  9354                           
  9355                           ;TriacRelay_B1.c: 378: Lights->SwFlag = 0;
  9356  0AAC  0A74               	incf	_Lights,w
  9357  0AAD  0084               	movwf	4
  9358  0AAE  1100               	bcf	0,2
  9359                           
  9360                           ;TriacRelay_B1.c: 379: if (Lights->SwStatus == 0) {
  9361  0AAF  0A74               	incf	_Lights,w
  9362  0AB0  0084               	movwf	4
  9363  0AB1  1980               	btfsc	0,3
  9364  0AB2  0008               	return
  9365                           
  9366                           ;TriacRelay_B1.c: 380: setLights_Trigger(sw, 0);
  9367  0AB3  1283               	bcf	3,5	;RP0=0, select bank0
  9368  0AB4  1303               	bcf	3,6	;RP1=0, select bank0
  9369  0AB5  01DB               	clrf	setLights_Trigger@command
  9370  0AB6  085E               	movf	setLights_SwOff@sw,w
  9371  0AB7  158A  22BA         	fcall	_setLights_Trigger
  9372  0AB9  0008               	return
  9373  0ABA                     __end_of_setLights_SwOff:	
  9374                           
  9375                           	psect	text60
  9376  0ABA                     __ptext60:	
  9377 ;; *************** function _setLights_Trigger *****************
  9378 ;; Defined at:
  9379 ;;		line 232 in file "../src/TriacRelay_B1.c"
  9380 ;; Parameters:    Size  Location     Type
  9381 ;;  lights          1    wreg     unsigned char 
  9382 ;;  command         1    1[BANK0 ] unsigned char 
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;  lights          1    3[BANK0 ] unsigned char 
  9385 ;; Return value:  Size  Location     Type
  9386 ;;		None               void
  9387 ;; Registers used:
  9388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9394 ;;      Params:         0       1       0       0
  9395 ;;      Locals:         0       1       0       0
  9396 ;;      Temps:          0       1       0       0
  9397 ;;      Totals:         0       3       0       0
  9398 ;;Total ram usage:        3 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; Hardware stack levels required when called:    3
  9401 ;; This function calls:
  9402 ;;		_LightsPointSelect
  9403 ;; This function is called by:
  9404 ;;		_setLights_SwOn
  9405 ;;		_setLights_SwOff
  9406 ;;		_setMain_Exception
  9407 ;;		_setLights_ErrorClose
  9408 ;; This function uses a non-reentrant model
  9409 ;;
  9410                           
  9411                           
  9412                           ;psect for function _setLights_Trigger
  9413  0ABA                     _setLights_Trigger:	
  9414                           
  9415                           ;incstack = 0
  9416                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9417                           ;setLights_Trigger@lights stored from wreg
  9418  0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  9419  0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  9420  0ABC  00DD               	movwf	setLights_Trigger@lights
  9421                           
  9422                           ;TriacRelay_B1.c: 233: LightsPointSelect(lights);
  9423  0ABD  085D               	movf	setLights_Trigger@lights,w
  9424  0ABE  158A  21E7         	fcall	_LightsPointSelect
  9425                           
  9426                           ;TriacRelay_B1.c: 234: Lights->Trigger = 1;
  9427  0AC0  0874               	movf	_Lights,w
  9428  0AC1  0084               	movwf	4
  9429  0AC2  1383               	bcf	3,7	;select IRP bank0
  9430  0AC3  1580               	bsf	0,3
  9431                           
  9432                           ;TriacRelay_B1.c: 235: Lights->Switch = command == 1 ? 1 : 0;
  9433  0AC4  1283               	bcf	3,5	;RP0=0, select bank0
  9434  0AC5  1303               	bcf	3,6	;RP1=0, select bank0
  9435  0AC6  085B               	movf	setLights_Trigger@command,w
  9436  0AC7  3A01               	xorlw	1
  9437  0AC8  3000               	movlw	0
  9438  0AC9  1903               	skipnz
  9439  0ACA  3001               	movlw	1
  9440  0ACB  00DC               	movwf	??_setLights_Trigger
  9441  0ACC  0874               	movf	_Lights,w
  9442  0ACD  0084               	movwf	4
  9443  0ACE  0EDC               	swapf	??_setLights_Trigger,f
  9444  0ACF  0800               	movf	0,w
  9445  0AD0  065C               	xorwf	??_setLights_Trigger,w
  9446  0AD1  39EF               	andlw	-17
  9447  0AD2  065C               	xorwf	??_setLights_Trigger,w
  9448  0AD3  0080               	movwf	0
  9449  0AD4  0008               	return
  9450  0AD5                     __end_of_setLights_Trigger:	
  9451                           
  9452                           	psect	text61
  9453  0DE5                     __ptext61:	
  9454 ;; *************** function _setLED *****************
  9455 ;; Defined at:
  9456 ;;		line 81 in file "../src/LED_B1.c"
  9457 ;; Parameters:    Size  Location     Type
  9458 ;;  led             1    wreg     unsigned char 
  9459 ;;  command         1    1[BANK0 ] unsigned char 
  9460 ;; Auto vars:     Size  Location     Type
  9461 ;;  led             1    2[BANK0 ] unsigned char 
  9462 ;; Return value:  Size  Location     Type
  9463 ;;		None               void
  9464 ;; Registers used:
  9465 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9466 ;; Tracked objects:
  9467 ;;		On entry : 0/0
  9468 ;;		On exit  : 0/0
  9469 ;;		Unchanged: 0/0
  9470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9471 ;;      Params:         0       1       0       0
  9472 ;;      Locals:         0       1       0       0
  9473 ;;      Temps:          0       0       0       0
  9474 ;;      Totals:         0       2       0       0
  9475 ;;Total ram usage:        2 bytes
  9476 ;; Hardware stack levels used:    1
  9477 ;; Hardware stack levels required when called:    3
  9478 ;; This function calls:
  9479 ;;		_LedPointSelect
  9480 ;; This function is called by:
  9481 ;;		_setLED_Initialization
  9482 ;;		_Exception_Main
  9483 ;;		_setSw_Main
  9484 ;;		_setLights
  9485 ;;		_setMain_Exception
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           
  9490                           ;psect for function _setLED
  9491  0DE5                     _setLED:	
  9492                           
  9493                           ;incstack = 0
  9494                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9495                           ;setLED@led stored from wreg
  9496  0DE5  1283               	bcf	3,5	;RP0=0, select bank0
  9497  0DE6  1303               	bcf	3,6	;RP1=0, select bank0
  9498  0DE7  00DC               	movwf	setLED@led
  9499                           
  9500                           ;LED_B1.c: 82: LedPointSelect(led);
  9501  0DE8  085C               	movf	setLED@led,w
  9502  0DE9  158A  22D5  158A   	fcall	_LedPointSelect
  9503                           
  9504                           ;LED_B1.c: 83: if (command == 0) {
  9505  0DEC  1283               	bcf	3,5	;RP0=0, select bank0
  9506  0DED  1303               	bcf	3,6	;RP1=0, select bank0
  9507  0DEE  08DB               	movf	setLED@command,f
  9508  0DEF  1D03               	skipz
  9509  0DF0  2DFE               	goto	l6329
  9510                           
  9511                           ;LED_B1.c: 85: if (led == 1) {
  9512  0DF1  085C               	movf	setLED@led,w
  9513  0DF2  3A01               	xorlw	1
  9514  0DF3  1D03               	skipz
  9515  0DF4  2DF6               	goto	l6321
  9516                           
  9517                           ;LED_B1.c: 89: RC7 = 1;
  9518  0DF5  1787               	bsf	7,7	;volatile
  9519  0DF6                     l6321:	
  9520                           
  9521                           ;LED_B1.c: 91: }
  9522                           ;LED_B1.c: 94: if (led == 2) {
  9523  0DF6  085C               	movf	setLED@led,w
  9524  0DF7  3A02               	xorlw	2
  9525  0DF8  1903               	btfsc	3,2
  9526                           
  9527                           ;LED_B1.c: 98: RC6 = 1;
  9528  0DF9  1707               	bsf	7,6	;volatile
  9529                           
  9530                           ;LED_B1.c: 100: }
  9531                           ;LED_B1.c: 112: if (led == 99) {
  9532  0DFA  085C               	movf	setLED@led,w
  9533  0DFB  3A63               	xorlw	99
  9534  0DFC  1903               	btfsc	3,2
  9535                           
  9536                           ;LED_B1.c: 116: RC1 = 1;
  9537  0DFD  1487               	bsf	7,1	;volatile
  9538  0DFE                     l6329:	
  9539                           
  9540                           ;LED_B1.c: 118: }
  9541                           ;LED_B1.c: 120: }
  9542                           ;LED_B1.c: 121: if (command == 1) {
  9543  0DFE  085B               	movf	setLED@command,w
  9544  0DFF  3A01               	xorlw	1
  9545  0E00  1D03               	skipz
  9546  0E01  2E0F               	goto	l6343
  9547                           
  9548                           ;LED_B1.c: 123: if (led == 1) {
  9549  0E02  085C               	movf	setLED@led,w
  9550  0E03  3A01               	xorlw	1
  9551  0E04  1D03               	skipz
  9552  0E05  2E07               	goto	l6335
  9553                           
  9554                           ;LED_B1.c: 127: RC7 = 0;
  9555  0E06  1387               	bcf	7,7	;volatile
  9556  0E07                     l6335:	
  9557                           
  9558                           ;LED_B1.c: 129: }
  9559                           ;LED_B1.c: 132: if (led == 2) {
  9560  0E07  085C               	movf	setLED@led,w
  9561  0E08  3A02               	xorlw	2
  9562  0E09  1903               	btfsc	3,2
  9563                           
  9564                           ;LED_B1.c: 136: RC6 = 0;
  9565  0E0A  1307               	bcf	7,6	;volatile
  9566                           
  9567                           ;LED_B1.c: 138: }
  9568                           ;LED_B1.c: 150: if (led == 99) {
  9569  0E0B  085C               	movf	setLED@led,w
  9570  0E0C  3A63               	xorlw	99
  9571  0E0D  1903               	btfsc	3,2
  9572                           
  9573                           ;LED_B1.c: 154: RC1 = 0;
  9574  0E0E  1087               	bcf	7,1	;volatile
  9575  0E0F                     l6343:	
  9576                           
  9577                           ;LED_B1.c: 156: }
  9578                           ;LED_B1.c: 158: }
  9579                           ;LED_B1.c: 159: if (command == 10) {
  9580  0E0F  085B               	movf	setLED@command,w
  9581  0E10  3A0A               	xorlw	10
  9582  0E11  1D03               	skipz
  9583  0E12  2E2A               	goto	l6361
  9584                           
  9585                           ;LED_B1.c: 160: LED->GO = 0;
  9586  0E13  0872               	movf	_LED,w
  9587  0E14  0084               	movwf	4
  9588  0E15  1383               	bcf	3,7	;select IRP bank0
  9589  0E16  1080               	bcf	0,1
  9590                           
  9591                           ;LED_B1.c: 161: LED->Time = 0;
  9592  0E17  0A72               	incf	_LED,w
  9593  0E18  0084               	movwf	4
  9594  0E19  0180               	clrf	0
  9595  0E1A  0A84               	incf	4,f
  9596  0E1B  0180               	clrf	0
  9597                           
  9598                           ;LED_B1.c: 163: if (led == 1) {
  9599  0E1C  085C               	movf	setLED@led,w
  9600  0E1D  3A01               	xorlw	1
  9601  0E1E  1D03               	skipz
  9602  0E1F  2E22               	goto	l6353
  9603                           
  9604                           ;LED_B1.c: 167: RC7 = 1;
  9605  0E20  1787               	bsf	7,7	;volatile
  9606                           
  9607                           ;LED_B1.c: 169: }
  9608  0E21  2E26               	goto	l6357
  9609  0E22                     l6353:	
  9610                           
  9611                           ;LED_B1.c: 172: else if (led == 2) {
  9612  0E22  085C               	movf	setLED@led,w
  9613  0E23  3A02               	xorlw	2
  9614  0E24  1903               	btfsc	3,2
  9615                           
  9616                           ;LED_B1.c: 176: RC6 = 1;
  9617  0E25  1707               	bsf	7,6	;volatile
  9618  0E26                     l6357:	
  9619                           
  9620                           ;LED_B1.c: 178: }
  9621                           ;LED_B1.c: 190: if (led == 99) {
  9622  0E26  085C               	movf	setLED@led,w
  9623  0E27  3A63               	xorlw	99
  9624  0E28  1903               	btfsc	3,2
  9625                           
  9626                           ;LED_B1.c: 194: RC1 = 1;
  9627  0E29  1487               	bsf	7,1	;volatile
  9628  0E2A                     l6361:	
  9629                           
  9630                           ;LED_B1.c: 196: }
  9631                           ;LED_B1.c: 198: }
  9632                           ;LED_B1.c: 199: if (command == 11) {
  9633  0E2A  085B               	movf	setLED@command,w
  9634  0E2B  3A0B               	xorlw	11
  9635  0E2C  1D03               	skipz
  9636  0E2D  0008               	return
  9637                           
  9638                           ;LED_B1.c: 200: LED->GO = 1;
  9639  0E2E  0872               	movf	_LED,w
  9640  0E2F  0084               	movwf	4
  9641  0E30  1383               	bcf	3,7	;select IRP bank0
  9642  0E31  1480               	bsf	0,1
  9643  0E32  0008               	return
  9644  0E33                     __end_of_setLED:	
  9645                           
  9646                           	psect	text62
  9647  0AD5                     __ptext62:	
  9648 ;; *************** function _LedPointSelect *****************
  9649 ;; Defined at:
  9650 ;;		line 7 in file "../src/LED_B1.c"
  9651 ;; Parameters:    Size  Location     Type
  9652 ;;  led             1    wreg     unsigned char 
  9653 ;; Auto vars:     Size  Location     Type
  9654 ;;  led             1    0[BANK0 ] unsigned char 
  9655 ;; Return value:  Size  Location     Type
  9656 ;;		None               void
  9657 ;; Registers used:
  9658 ;;		wreg
  9659 ;; Tracked objects:
  9660 ;;		On entry : 0/0
  9661 ;;		On exit  : 0/0
  9662 ;;		Unchanged: 0/0
  9663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9664 ;;      Params:         0       0       0       0
  9665 ;;      Locals:         0       1       0       0
  9666 ;;      Temps:          1       0       0       0
  9667 ;;      Totals:         1       1       0       0
  9668 ;;Total ram usage:        2 bytes
  9669 ;; Hardware stack levels used:    1
  9670 ;; Hardware stack levels required when called:    2
  9671 ;; This function calls:
  9672 ;;		Nothing
  9673 ;; This function is called by:
  9674 ;;		_setLED_Initialization
  9675 ;;		_setLED
  9676 ;;		_setLED_Main
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           
  9681                           ;psect for function _LedPointSelect
  9682  0AD5                     _LedPointSelect:	
  9683                           
  9684                           ;incstack = 0
  9685                           ; Regs used in _LedPointSelect: [wreg]
  9686                           ;LedPointSelect@led stored from wreg
  9687  0AD5  1283               	bcf	3,5	;RP0=0, select bank0
  9688  0AD6  1303               	bcf	3,6	;RP1=0, select bank0
  9689  0AD7  00DA               	movwf	LedPointSelect@led
  9690                           
  9691                           ;LED_B1.c: 9: if (led == 1) {
  9692  0AD8  085A               	movf	LedPointSelect@led,w
  9693  0AD9  3A01               	xorlw	1
  9694  0ADA  1D03               	skipz
  9695  0ADB  2AE0               	goto	l349
  9696                           
  9697                           ;LED_B1.c: 10: LED = &VarLED1;
  9698  0ADC  3056               	movlw	_VarLED1& (0+255)
  9699  0ADD  00F9               	movwf	??_LedPointSelect
  9700  0ADE  0879               	movf	??_LedPointSelect,w
  9701  0ADF  00F2               	movwf	_LED
  9702  0AE0                     l349:	
  9703                           
  9704                           ;LED_B1.c: 11: }
  9705                           ;LED_B1.c: 14: if (led == 2) {
  9706  0AE0  085A               	movf	LedPointSelect@led,w
  9707  0AE1  3A02               	xorlw	2
  9708  0AE2  1D03               	skipz
  9709  0AE3  2AE8               	goto	l350
  9710                           
  9711                           ;LED_B1.c: 15: LED = &VarLED2;
  9712  0AE4  30E9               	movlw	_VarLED2& (0+255)
  9713  0AE5  00F9               	movwf	??_LedPointSelect
  9714  0AE6  0879               	movf	??_LedPointSelect,w
  9715  0AE7  00F2               	movwf	_LED
  9716  0AE8                     l350:	
  9717                           
  9718                           ;LED_B1.c: 16: }
  9719                           ;LED_B1.c: 24: if (led == 99) {
  9720  0AE8  085A               	movf	LedPointSelect@led,w
  9721  0AE9  3A63               	xorlw	99
  9722  0AEA  1D03               	skipz
  9723  0AEB  0008               	return
  9724                           
  9725                           ;LED_B1.c: 25: LED = &VarErrLED;
  9726  0AEC  3052               	movlw	_VarErrLED& (0+255)
  9727  0AED  00F9               	movwf	??_LedPointSelect
  9728  0AEE  0879               	movf	??_LedPointSelect,w
  9729  0AEF  00F2               	movwf	_LED
  9730  0AF0  0008               	return
  9731  0AF1                     __end_of_LedPointSelect:	
  9732                           
  9733                           	psect	text63
  9734  0D9E                     __ptext63:	
  9735 ;; *************** function _setBuz *****************
  9736 ;; Defined at:
  9737 ;;		line 22 in file "../src/Buzzer_B1.c"
  9738 ;; Parameters:    Size  Location     Type
  9739 ;;  count           1    wreg     unsigned char 
  9740 ;;  time            2    8[BANK0 ] int 
  9741 ;; Auto vars:     Size  Location     Type
  9742 ;;  count           1   11[BANK0 ] unsigned char 
  9743 ;; Return value:  Size  Location     Type
  9744 ;;		None               void
  9745 ;; Registers used:
  9746 ;;		wreg, status,2, status,0, pclath, cstack
  9747 ;; Tracked objects:
  9748 ;;		On entry : 0/0
  9749 ;;		On exit  : 0/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9752 ;;      Params:         0       2       0       0
  9753 ;;      Locals:         0       1       0       0
  9754 ;;      Temps:          0       1       0       0
  9755 ;;      Totals:         0       4       0       0
  9756 ;;Total ram usage:        4 bytes
  9757 ;; Hardware stack levels used:    1
  9758 ;; Hardware stack levels required when called:    3
  9759 ;; This function calls:
  9760 ;;		___awdiv
  9761 ;; This function is called by:
  9762 ;;		_my_MainTimer
  9763 ;;		_Exception_Main
  9764 ;;		_setTemp_Main
  9765 ;; This function uses a non-reentrant model
  9766 ;;
  9767                           
  9768                           
  9769                           ;psect for function _setBuz
  9770  0D9E                     _setBuz:	
  9771                           
  9772                           ;incstack = 0
  9773                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
  9774                           ;setBuz@count stored from wreg
  9775  0D9E  1283               	bcf	3,5	;RP0=0, select bank0
  9776  0D9F  1303               	bcf	3,6	;RP1=0, select bank0
  9777  0DA0  00E5               	movwf	setBuz@count
  9778                           
  9779                           ;Buzzer_B1.c: 23: time /= 20;
  9780  0DA1  3014               	movlw	20
  9781  0DA2  00DA               	movwf	___awdiv@divisor
  9782  0DA3  3000               	movlw	0
  9783  0DA4  00DB               	movwf	___awdiv@divisor+1
  9784  0DA5  0863               	movf	setBuz@time+1,w
  9785  0DA6  01DD               	clrf	___awdiv@dividend+1
  9786  0DA7  07DD               	addwf	___awdiv@dividend+1,f
  9787  0DA8  0862               	movf	setBuz@time,w
  9788  0DA9  01DC               	clrf	___awdiv@dividend
  9789  0DAA  07DC               	addwf	___awdiv@dividend,f
  9790  0DAB  158A  268F  158A   	fcall	___awdiv
  9791  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  9792  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  9793  0DB0  085B               	movf	?___awdiv+1,w
  9794  0DB1  01E3               	clrf	setBuz@time+1
  9795  0DB2  07E3               	addwf	setBuz@time+1,f
  9796  0DB3  085A               	movf	?___awdiv,w
  9797  0DB4  01E2               	clrf	setBuz@time
  9798  0DB5  07E2               	addwf	setBuz@time,f
  9799                           
  9800                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
  9801  0DB6  1C20               	btfss	_Buz1,0
  9802  0DB7  0008               	return
  9803                           
  9804                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
  9805  0DB8  18A0               	btfsc	_Buz1,1
  9806  0DB9  2DC9               	goto	l58
  9807                           
  9808                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
  9809  0DBA  14A0               	bsf	_Buz1,1
  9810                           
  9811                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
  9812  0DBB  01A1               	clrf	_Buz1+1
  9813  0DBC  01A2               	clrf	_Buz1+2
  9814                           
  9815                           ;Buzzer_B1.c: 28: Buz1.Count = count;
  9816  0DBD  0865               	movf	setBuz@count,w
  9817  0DBE  00E4               	movwf	??_setBuz
  9818  0DBF  0864               	movf	??_setBuz,w
  9819  0DC0  00A3               	movwf	_Buz1+3
  9820                           
  9821                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
  9822  0DC1  0863               	movf	setBuz@time+1,w
  9823  0DC2  01A7               	clrf	_Buz1+7
  9824  0DC3  07A7               	addwf	_Buz1+7,f
  9825  0DC4  0862               	movf	setBuz@time,w
  9826  0DC5  01A6               	clrf	_Buz1+6
  9827  0DC6  07A6               	addwf	_Buz1+6,f
  9828                           
  9829                           ;Buzzer_B1.c: 30: RC0 = 1;
  9830  0DC7  1407               	bsf	7,0	;volatile
  9831                           
  9832                           ;Buzzer_B1.c: 31: } else {
  9833  0DC8  0008               	return
  9834  0DC9                     l58:	
  9835                           
  9836                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
  9837  0DC9  19A0               	btfsc	_Buz1,3
  9838  0DCA  2DD7               	goto	l60
  9839                           
  9840                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
  9841  0DCB  15A0               	bsf	_Buz1,3
  9842                           
  9843                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
  9844  0DCC  0865               	movf	setBuz@count,w
  9845  0DCD  00E4               	movwf	??_setBuz
  9846  0DCE  0864               	movf	??_setBuz,w
  9847  0DCF  00A4               	movwf	_Buz1+4
  9848                           
  9849                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
  9850  0DD0  0863               	movf	setBuz@time+1,w
  9851  0DD1  01A9               	clrf	_Buz1+9
  9852  0DD2  07A9               	addwf	_Buz1+9,f
  9853  0DD3  0862               	movf	setBuz@time,w
  9854  0DD4  01A8               	clrf	_Buz1+8
  9855  0DD5  07A8               	addwf	_Buz1+8,f
  9856                           
  9857                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
  9858  0DD6  0008               	return
  9859  0DD7                     l60:	
  9860  0DD7  1A20               	btfsc	_Buz1,4
  9861  0DD8  0008               	return
  9862                           
  9863                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
  9864  0DD9  1620               	bsf	_Buz1,4
  9865                           
  9866                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
  9867  0DDA  0865               	movf	setBuz@count,w
  9868  0DDB  00E4               	movwf	??_setBuz
  9869  0DDC  0864               	movf	??_setBuz,w
  9870  0DDD  00A5               	movwf	_Buz1+5
  9871                           
  9872                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
  9873  0DDE  0863               	movf	setBuz@time+1,w
  9874  0DDF  01AB               	clrf	_Buz1+11
  9875  0DE0  07AB               	addwf	_Buz1+11,f
  9876  0DE1  0862               	movf	setBuz@time,w
  9877  0DE2  01AA               	clrf	_Buz1+10
  9878  0DE3  07AA               	addwf	_Buz1+10,f
  9879  0DE4  0008               	return
  9880  0DE5                     __end_of_setBuz:	
  9881                           
  9882                           	psect	text64
  9883  0E8F                     __ptext64:	
  9884 ;; *************** function ___awdiv *****************
  9885 ;; Defined at:
  9886 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  9887 ;; Parameters:    Size  Location     Type
  9888 ;;  divisor         2    0[BANK0 ] int 
  9889 ;;  dividend        2    2[BANK0 ] int 
  9890 ;; Auto vars:     Size  Location     Type
  9891 ;;  quotient        2    6[BANK0 ] int 
  9892 ;;  sign            1    5[BANK0 ] unsigned char 
  9893 ;;  counter         1    4[BANK0 ] unsigned char 
  9894 ;; Return value:  Size  Location     Type
  9895 ;;                  2    0[BANK0 ] int 
  9896 ;; Registers used:
  9897 ;;		wreg, status,2, status,0
  9898 ;; Tracked objects:
  9899 ;;		On entry : 0/0
  9900 ;;		On exit  : 0/0
  9901 ;;		Unchanged: 0/0
  9902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9903 ;;      Params:         0       4       0       0
  9904 ;;      Locals:         0       4       0       0
  9905 ;;      Temps:          1       0       0       0
  9906 ;;      Totals:         1       8       0       0
  9907 ;;Total ram usage:        9 bytes
  9908 ;; Hardware stack levels used:    1
  9909 ;; Hardware stack levels required when called:    2
  9910 ;; This function calls:
  9911 ;;		Nothing
  9912 ;; This function is called by:
  9913 ;;		_setBuz
  9914 ;;		_setTemp_Main
  9915 ;;		_getPIR_AD
  9916 ;;		_Lights_Control
  9917 ;; This function uses a non-reentrant model
  9918 ;;
  9919                           
  9920                           
  9921                           ;psect for function ___awdiv
  9922  0E8F                     ___awdiv:	
  9923                           
  9924                           ;incstack = 0
  9925                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9926  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  9927  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  9928  0E91  01DF               	clrf	___awdiv@sign
  9929  0E92  1FDB               	btfss	___awdiv@divisor+1,7
  9930  0E93  2E9B               	goto	l5179
  9931  0E94  09DA               	comf	___awdiv@divisor,f
  9932  0E95  09DB               	comf	___awdiv@divisor+1,f
  9933  0E96  0ADA               	incf	___awdiv@divisor,f
  9934  0E97  1903               	skipnz
  9935  0E98  0ADB               	incf	___awdiv@divisor+1,f
  9936  0E99  01DF               	clrf	___awdiv@sign
  9937  0E9A  0ADF               	incf	___awdiv@sign,f
  9938  0E9B                     l5179:	
  9939  0E9B  1FDD               	btfss	___awdiv@dividend+1,7
  9940  0E9C  2EA6               	goto	l5185
  9941  0E9D  09DC               	comf	___awdiv@dividend,f
  9942  0E9E  09DD               	comf	___awdiv@dividend+1,f
  9943  0E9F  0ADC               	incf	___awdiv@dividend,f
  9944  0EA0  1903               	skipnz
  9945  0EA1  0ADD               	incf	___awdiv@dividend+1,f
  9946  0EA2  3001               	movlw	1
  9947  0EA3  00F9               	movwf	??___awdiv
  9948  0EA4  0879               	movf	??___awdiv,w
  9949  0EA5  06DF               	xorwf	___awdiv@sign,f
  9950  0EA6                     l5185:	
  9951  0EA6  01E0               	clrf	___awdiv@quotient
  9952  0EA7  01E1               	clrf	___awdiv@quotient+1
  9953  0EA8  085B               	movf	___awdiv@divisor+1,w
  9954  0EA9  045A               	iorwf	___awdiv@divisor,w
  9955  0EAA  1903               	skipnz
  9956  0EAB  2EDD               	goto	l5207
  9957  0EAC  01DE               	clrf	___awdiv@counter
  9958  0EAD  0ADE               	incf	___awdiv@counter,f
  9959  0EAE                     l5195:	
  9960  0EAE  1BDB               	btfsc	___awdiv@divisor+1,7
  9961  0EAF  2EBC               	goto	l5197
  9962  0EB0  3001               	movlw	1
  9963  0EB1                     u5785:	
  9964  0EB1  1003               	clrc
  9965  0EB2  0DDA               	rlf	___awdiv@divisor,f
  9966  0EB3  0DDB               	rlf	___awdiv@divisor+1,f
  9967  0EB4  3EFF               	addlw	-1
  9968  0EB5  1D03               	skipz
  9969  0EB6  2EB1               	goto	u5785
  9970  0EB7  3001               	movlw	1
  9971  0EB8  00F9               	movwf	??___awdiv
  9972  0EB9  0879               	movf	??___awdiv,w
  9973  0EBA  07DE               	addwf	___awdiv@counter,f
  9974  0EBB  2EAE               	goto	l5195
  9975  0EBC                     l5197:	
  9976  0EBC  3001               	movlw	1
  9977  0EBD                     u5805:	
  9978  0EBD  1003               	clrc
  9979  0EBE  0DE0               	rlf	___awdiv@quotient,f
  9980  0EBF  0DE1               	rlf	___awdiv@quotient+1,f
  9981  0EC0  3EFF               	addlw	-1
  9982  0EC1  1D03               	skipz
  9983  0EC2  2EBD               	goto	u5805
  9984  0EC3  085B               	movf	___awdiv@divisor+1,w
  9985  0EC4  025D               	subwf	___awdiv@dividend+1,w
  9986  0EC5  1D03               	skipz
  9987  0EC6  2EC9               	goto	u5815
  9988  0EC7  085A               	movf	___awdiv@divisor,w
  9989  0EC8  025C               	subwf	___awdiv@dividend,w
  9990  0EC9                     u5815:	
  9991  0EC9  1C03               	skipc
  9992  0ECA  2ED2               	goto	l5203
  9993  0ECB  085A               	movf	___awdiv@divisor,w
  9994  0ECC  02DC               	subwf	___awdiv@dividend,f
  9995  0ECD  085B               	movf	___awdiv@divisor+1,w
  9996  0ECE  1C03               	skipc
  9997  0ECF  03DD               	decf	___awdiv@dividend+1,f
  9998  0ED0  02DD               	subwf	___awdiv@dividend+1,f
  9999  0ED1  1460               	bsf	___awdiv@quotient,0
 10000  0ED2                     l5203:	
 10001  0ED2  3001               	movlw	1
 10002  0ED3                     u5825:	
 10003  0ED3  1003               	clrc
 10004  0ED4  0CDB               	rrf	___awdiv@divisor+1,f
 10005  0ED5  0CDA               	rrf	___awdiv@divisor,f
 10006  0ED6  3EFF               	addlw	-1
 10007  0ED7  1D03               	skipz
 10008  0ED8  2ED3               	goto	u5825
 10009  0ED9  3001               	movlw	1
 10010  0EDA  02DE               	subwf	___awdiv@counter,f
 10011  0EDB  1D03               	btfss	3,2
 10012  0EDC  2EBC               	goto	l5197
 10013  0EDD                     l5207:	
 10014  0EDD  085F               	movf	___awdiv@sign,w
 10015  0EDE  1903               	btfsc	3,2
 10016  0EDF  2EE5               	goto	l5211
 10017  0EE0  09E0               	comf	___awdiv@quotient,f
 10018  0EE1  09E1               	comf	___awdiv@quotient+1,f
 10019  0EE2  0AE0               	incf	___awdiv@quotient,f
 10020  0EE3  1903               	skipnz
 10021  0EE4  0AE1               	incf	___awdiv@quotient+1,f
 10022  0EE5                     l5211:	
 10023  0EE5  0861               	movf	___awdiv@quotient+1,w
 10024  0EE6  01DB               	clrf	?___awdiv+1
 10025  0EE7  07DB               	addwf	?___awdiv+1,f
 10026  0EE8  0860               	movf	___awdiv@quotient,w
 10027  0EE9  01DA               	clrf	?___awdiv
 10028  0EEA  07DA               	addwf	?___awdiv,f
 10029  0EEB  0008               	return
 10030  0EEC                     __end_of___awdiv:	
 10031                           
 10032                           	psect	text65
 10033  0955                     __ptext65:	
 10034 ;; *************** function _getMain_All_LightsStatus *****************
 10035 ;; Defined at:
 10036 ;;		line 373 in file "../src/Main_B1.c"
 10037 ;; Parameters:    Size  Location     Type
 10038 ;;		None
 10039 ;; Auto vars:     Size  Location     Type
 10040 ;;  status          1    4[COMMON] unsigned char 
 10041 ;; Return value:  Size  Location     Type
 10042 ;;                  1    wreg      unsigned char 
 10043 ;; Registers used:
 10044 ;;		wreg, status,2, status,0
 10045 ;; Tracked objects:
 10046 ;;		On entry : 0/0
 10047 ;;		On exit  : 0/0
 10048 ;;		Unchanged: 0/0
 10049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10050 ;;      Params:         0       0       0       0
 10051 ;;      Locals:         1       0       0       0
 10052 ;;      Temps:          0       0       0       0
 10053 ;;      Totals:         1       0       0       0
 10054 ;;Total ram usage:        1 bytes
 10055 ;; Hardware stack levels used:    1
 10056 ;; Hardware stack levels required when called:    2
 10057 ;; This function calls:
 10058 ;;		Nothing
 10059 ;; This function is called by:
 10060 ;;		_Exception_Main
 10061 ;;		_Load_Main
 10062 ;;		_setTemp_Main
 10063 ;;		_Lights_Main
 10064 ;; This function uses a non-reentrant model
 10065 ;;
 10066                           
 10067                           
 10068                           ;psect for function _getMain_All_LightsStatus
 10069  0955                     _getMain_All_LightsStatus:	
 10070                           
 10071                           ;Main_B1.c: 374: char status = 0;
 10072                           
 10073                           ;incstack = 0
 10074                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 10075  0955  01F9               	clrf	getMain_All_LightsStatus@status
 10076                           
 10077                           ;Main_B1.c: 387: status = Lights1.Status == 1 ? 1 : 0;
 10078  0956  3000               	movlw	0
 10079  0957  1283               	bcf	3,5	;RP0=0, select bank0
 10080  0958  1303               	bcf	3,6	;RP1=0, select bank0
 10081  0959  1948               	btfsc	_Lights1,2
 10082  095A  3001               	movlw	1
 10083  095B  00F9               	movwf	getMain_All_LightsStatus@status
 10084                           
 10085                           ;Main_B1.c: 388: if (status == 0) {
 10086  095C  08F9               	movf	getMain_All_LightsStatus@status,f
 10087  095D  1D03               	skipz
 10088  095E  2963               	goto	l3775
 10089                           
 10090                           ;Main_B1.c: 389: status = Lights2.Status == 1 ? 1 : 0;
 10091  095F  3000               	movlw	0
 10092  0960  194D               	btfsc	_Lights2,2
 10093  0961  3001               	movlw	1
 10094  0962  00F9               	movwf	getMain_All_LightsStatus@status
 10095  0963                     l3775:	
 10096                           
 10097                           ;Main_B1.c: 390: }
 10098                           ;Main_B1.c: 420: return status;
 10099  0963  0879               	movf	getMain_All_LightsStatus@status,w
 10100  0964  0008               	return
 10101  0965                     __end_of_getMain_All_LightsStatus:	
 10102                           
 10103                           	psect	text66
 10104  0C9A                     __ptext66:	
 10105 ;; *************** function _getMain_All_Error_Status *****************
 10106 ;; Defined at:
 10107 ;;		line 424 in file "../src/Main_B1.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;  command         1    wreg     unsigned char 
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;  command         1    4[BANK0 ] unsigned char 
 10112 ;;  status          1    5[BANK0 ] unsigned char 
 10113 ;; Return value:  Size  Location     Type
 10114 ;;                  1    wreg      unsigned char 
 10115 ;; Registers used:
 10116 ;;		wreg, status,2, status,0
 10117 ;; Tracked objects:
 10118 ;;		On entry : 0/0
 10119 ;;		On exit  : 0/0
 10120 ;;		Unchanged: 0/0
 10121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10122 ;;      Params:         0       0       0       0
 10123 ;;      Locals:         0       6       0       0
 10124 ;;      Temps:          1       0       0       0
 10125 ;;      Totals:         1       6       0       0
 10126 ;;Total ram usage:        7 bytes
 10127 ;; Hardware stack levels used:    1
 10128 ;; Hardware stack levels required when called:    2
 10129 ;; This function calls:
 10130 ;;		Nothing
 10131 ;; This function is called by:
 10132 ;;		_Exception_Main
 10133 ;;		_Load_Main
 10134 ;;		_setTemp_Main
 10135 ;;		_PIR_Main
 10136 ;;		_setSYSC_Main
 10137 ;;		_setSw_Main
 10138 ;;		_Lights_Main
 10139 ;; This function uses a non-reentrant model
 10140 ;;
 10141                           
 10142                           
 10143                           ;psect for function _getMain_All_Error_Status
 10144  0C9A                     _getMain_All_Error_Status:	
 10145                           
 10146                           ;incstack = 0
 10147                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 10148                           ;getMain_All_Error_Status@command stored from wreg
 10149  0C9A  1283               	bcf	3,5	;RP0=0, select bank0
 10150  0C9B  1303               	bcf	3,6	;RP1=0, select bank0
 10151  0C9C  00DE               	movwf	getMain_All_Error_Status@command
 10152                           
 10153                           ;Main_B1.c: 425: char status = 0;
 10154  0C9D  01DF               	clrf	getMain_All_Error_Status@status
 10155                           
 10156                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
 10157  0C9E  08DF               	movf	getMain_All_Error_Status@status,f
 10158  0C9F  1D03               	skipz
 10159  0CA0  2CA9               	goto	l3787
 10160  0CA1  085E               	movf	getMain_All_Error_Status@command,w
 10161  0CA2  3A01               	xorlw	1
 10162  0CA3  1903               	skipnz
 10163  0CA4  2CA9               	goto	l3787
 10164                           
 10165                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
 10166  0CA5  3000               	movlw	0
 10167  0CA6  18AC               	btfsc	_SYSC,1
 10168  0CA7  3001               	movlw	1
 10169  0CA8  00DF               	movwf	getMain_All_Error_Status@status
 10170  0CA9                     l3787:	
 10171                           
 10172                           ;Main_B1.c: 430: }
 10173                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 10174  0CA9  08DF               	movf	getMain_All_Error_Status@status,f
 10175  0CAA  1D03               	skipz
 10176  0CAB  2CBD               	goto	l3797
 10177  0CAC  085E               	movf	getMain_All_Error_Status@command,w
 10178  0CAD  3A02               	xorlw	2
 10179  0CAE  1903               	skipnz
 10180  0CAF  2CBD               	goto	l3797
 10181                           
 10182                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 10183  0CB0  18C2               	btfsc	_Temp,1
 10184  0CB1  2CB5               	goto	l3795
 10185  0CB2  01DA               	clrf	_getMain_All_Error_Status$2404
 10186  0CB3  01DB               	clrf	_getMain_All_Error_Status$2404+1
 10187  0CB4  2CB9               	goto	l721
 10188  0CB5                     l3795:	
 10189  0CB5  3002               	movlw	2
 10190  0CB6  00DA               	movwf	_getMain_All_Error_Status$2404
 10191  0CB7  3000               	movlw	0
 10192  0CB8  00DB               	movwf	_getMain_All_Error_Status$2404+1
 10193  0CB9                     l721:	
 10194  0CB9  085A               	movf	_getMain_All_Error_Status$2404,w
 10195  0CBA  00F9               	movwf	??_getMain_All_Error_Status
 10196  0CBB  0879               	movf	??_getMain_All_Error_Status,w
 10197  0CBC  00DF               	movwf	getMain_All_Error_Status@status
 10198  0CBD                     l3797:	
 10199                           
 10200                           ;Main_B1.c: 438: }
 10201                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 10202  0CBD  08DF               	movf	getMain_All_Error_Status@status,f
 10203  0CBE  1D03               	skipz
 10204  0CBF  2CD6               	goto	l722
 10205  0CC0  085E               	movf	getMain_All_Error_Status@command,w
 10206  0CC1  3A03               	xorlw	3
 10207  0CC2  1903               	skipnz
 10208  0CC3  2CD6               	goto	l722
 10209                           
 10210                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 10211  0CC4  1683               	bsf	3,5	;RP0=1, select bank1
 10212  0CC5  1303               	bcf	3,6	;RP1=0, select bank1
 10213  0CC6  1ACA               	btfsc	_Load^(0+128),5
 10214  0CC7  2CCD               	goto	l3805
 10215  0CC8  1283               	bcf	3,5	;RP0=0, select bank0
 10216  0CC9  1303               	bcf	3,6	;RP1=0, select bank0
 10217  0CCA  01DC               	clrf	_getMain_All_Error_Status$2405
 10218  0CCB  01DD               	clrf	_getMain_All_Error_Status$2405+1
 10219  0CCC  2CD2               	goto	l726
 10220  0CCD                     l3805:	
 10221  0CCD  3003               	movlw	3
 10222  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
 10223  0CCF  00DC               	movwf	_getMain_All_Error_Status$2405
 10224  0CD0  3000               	movlw	0
 10225  0CD1  00DD               	movwf	_getMain_All_Error_Status$2405+1
 10226  0CD2                     l726:	
 10227  0CD2  085C               	movf	_getMain_All_Error_Status$2405,w
 10228  0CD3  00F9               	movwf	??_getMain_All_Error_Status
 10229  0CD4  0879               	movf	??_getMain_All_Error_Status,w
 10230  0CD5  00DF               	movwf	getMain_All_Error_Status@status
 10231  0CD6                     l722:	
 10232                           
 10233                           ;Main_B1.c: 445: }
 10234                           ;Main_B1.c: 455: return status;
 10235  0CD6  085F               	movf	getMain_All_Error_Status@status,w
 10236  0CD7  0008               	return
 10237  0CD8                     __end_of_getMain_All_Error_Status:	
 10238                           
 10239                           	psect	text67
 10240  0B9D                     __ptext67:	
 10241 ;; *************** function _getAll_Lights_Line *****************
 10242 ;; Defined at:
 10243 ;;		line 264 in file "../src/TriacRelay_B1.c"
 10244 ;; Parameters:    Size  Location     Type
 10245 ;;		None
 10246 ;; Auto vars:     Size  Location     Type
 10247 ;;  line            1    4[BANK0 ] unsigned char 
 10248 ;; Return value:  Size  Location     Type
 10249 ;;                  1    wreg      unsigned char 
 10250 ;; Registers used:
 10251 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10252 ;; Tracked objects:
 10253 ;;		On entry : 0/0
 10254 ;;		On exit  : 0/0
 10255 ;;		Unchanged: 0/0
 10256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10257 ;;      Params:         0       0       0       0
 10258 ;;      Locals:         0       3       0       0
 10259 ;;      Temps:          0       1       0       0
 10260 ;;      Totals:         0       4       0       0
 10261 ;;Total ram usage:        4 bytes
 10262 ;; Hardware stack levels used:    1
 10263 ;; Hardware stack levels required when called:    3
 10264 ;; This function calls:
 10265 ;;		_LightsPointSelect
 10266 ;; This function is called by:
 10267 ;;		_Exception_Main
 10268 ;;		_setMain_Exception
 10269 ;; This function uses a non-reentrant model
 10270 ;;
 10271                           
 10272                           
 10273                           ;psect for function _getAll_Lights_Line
 10274  0B9D                     _getAll_Lights_Line:	
 10275                           
 10276                           ;TriacRelay_B1.c: 265: char line = 0;
 10277                           
 10278                           ;incstack = 0
 10279                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10280  0B9D  1283               	bcf	3,5	;RP0=0, select bank0
 10281  0B9E  1303               	bcf	3,6	;RP1=0, select bank0
 10282  0B9F  01DE               	clrf	getAll_Lights_Line@line
 10283                           
 10284                           ;TriacRelay_B1.c: 267: LightsPointSelect(1);
 10285  0BA0  3001               	movlw	1
 10286  0BA1  158A  21E7  158A   	fcall	_LightsPointSelect
 10287                           
 10288                           ;TriacRelay_B1.c: 268: line = Lights->Line == 1 ? 1 : 0;
 10289  0BA4  0A74               	incf	_Lights,w
 10290  0BA5  0084               	movwf	4
 10291  0BA6  3000               	movlw	0
 10292  0BA7  1383               	bcf	3,7	;select IRP bank0
 10293  0BA8  1800               	btfsc	0,0
 10294  0BA9  3001               	movlw	1
 10295  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
 10296  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
 10297  0BAC  00DE               	movwf	getAll_Lights_Line@line
 10298                           
 10299                           ;TriacRelay_B1.c: 271: LightsPointSelect(2);
 10300  0BAD  3002               	movlw	2
 10301  0BAE  158A  21E7  158A   	fcall	_LightsPointSelect
 10302                           
 10303                           ;TriacRelay_B1.c: 272: line = Lights->Line == 1 ? 2 : 0;
 10304  0BB1  0A74               	incf	_Lights,w
 10305  0BB2  0084               	movwf	4
 10306  0BB3  1383               	bcf	3,7	;select IRP bank0
 10307  0BB4  1800               	btfsc	0,0
 10308  0BB5  2BBB               	goto	l6557
 10309  0BB6  1283               	bcf	3,5	;RP0=0, select bank0
 10310  0BB7  1303               	bcf	3,6	;RP1=0, select bank0
 10311  0BB8  01DC               	clrf	_getAll_Lights_Line$4755
 10312  0BB9  01DD               	clrf	_getAll_Lights_Line$4755+1
 10313  0BBA  2BC1               	goto	l1612
 10314  0BBB                     l6557:	
 10315  0BBB  3002               	movlw	2
 10316  0BBC  1283               	bcf	3,5	;RP0=0, select bank0
 10317  0BBD  1303               	bcf	3,6	;RP1=0, select bank0
 10318  0BBE  00DC               	movwf	_getAll_Lights_Line$4755
 10319  0BBF  3000               	movlw	0
 10320  0BC0  00DD               	movwf	_getAll_Lights_Line$4755+1
 10321  0BC1                     l1612:	
 10322  0BC1  085C               	movf	_getAll_Lights_Line$4755,w
 10323  0BC2  00DB               	movwf	??_getAll_Lights_Line
 10324  0BC3  085B               	movf	??_getAll_Lights_Line,w
 10325  0BC4  00DE               	movwf	getAll_Lights_Line@line
 10326                           
 10327                           ;TriacRelay_B1.c: 278: return line;
 10328  0BC5  085E               	movf	getAll_Lights_Line@line,w
 10329  0BC6  0008               	return
 10330  0BC7                     __end_of_getAll_Lights_Line:	
 10331                           
 10332                           	psect	text68
 10333  09E7                     __ptext68:	
 10334 ;; *************** function _LightsPointSelect *****************
 10335 ;; Defined at:
 10336 ;;		line 10 in file "../src/TriacRelay_B1.c"
 10337 ;; Parameters:    Size  Location     Type
 10338 ;;  lights          1    wreg     unsigned char 
 10339 ;; Auto vars:     Size  Location     Type
 10340 ;;  lights          1    0[BANK0 ] unsigned char 
 10341 ;; Return value:  Size  Location     Type
 10342 ;;		None               void
 10343 ;; Registers used:
 10344 ;;		wreg
 10345 ;; Tracked objects:
 10346 ;;		On entry : 0/0
 10347 ;;		On exit  : 0/0
 10348 ;;		Unchanged: 0/0
 10349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10350 ;;      Params:         0       0       0       0
 10351 ;;      Locals:         0       1       0       0
 10352 ;;      Temps:          1       0       0       0
 10353 ;;      Totals:         1       1       0       0
 10354 ;;Total ram usage:        2 bytes
 10355 ;; Hardware stack levels used:    1
 10356 ;; Hardware stack levels required when called:    2
 10357 ;; This function calls:
 10358 ;;		Nothing
 10359 ;; This function is called by:
 10360 ;;		_setLights_Initialization
 10361 ;;		_setLights_Main
 10362 ;;		_Lights_Control
 10363 ;;		_getLights_Status
 10364 ;;		_setLights_Trigger
 10365 ;;		_getAll_Lights_Line
 10366 ;;		_setLights_SwOn
 10367 ;;		_setLights_SwOff
 10368 ;; This function uses a non-reentrant model
 10369 ;;
 10370                           
 10371                           
 10372                           ;psect for function _LightsPointSelect
 10373  09E7                     _LightsPointSelect:	
 10374                           
 10375                           ;incstack = 0
 10376                           ; Regs used in _LightsPointSelect: [wreg]
 10377                           ;LightsPointSelect@lights stored from wreg
 10378  09E7  1283               	bcf	3,5	;RP0=0, select bank0
 10379  09E8  1303               	bcf	3,6	;RP1=0, select bank0
 10380  09E9  00DA               	movwf	LightsPointSelect@lights
 10381                           
 10382                           ;TriacRelay_B1.c: 13: if (lights == 1) {
 10383  09EA  085A               	movf	LightsPointSelect@lights,w
 10384  09EB  3A01               	xorlw	1
 10385  09EC  1D03               	skipz
 10386  09ED  29F3               	goto	l6309
 10387                           
 10388                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
 10389  09EE  3048               	movlw	_Lights1& (0+255)
 10390  09EF  00F9               	movwf	??_LightsPointSelect
 10391  09F0  0879               	movf	??_LightsPointSelect,w
 10392  09F1  00F4               	movwf	_Lights
 10393                           
 10394                           ;TriacRelay_B1.c: 15: }
 10395  09F2  0008               	return
 10396  09F3                     l6309:	
 10397                           
 10398                           ;TriacRelay_B1.c: 19: else if (lights == 2) {
 10399  09F3  085A               	movf	LightsPointSelect@lights,w
 10400  09F4  3A02               	xorlw	2
 10401  09F5  1D03               	skipz
 10402  09F6  0008               	return
 10403                           
 10404                           ;TriacRelay_B1.c: 20: Lights = &Lights2;
 10405  09F7  304D               	movlw	_Lights2& (0+255)
 10406  09F8  00F9               	movwf	??_LightsPointSelect
 10407  09F9  0879               	movf	??_LightsPointSelect,w
 10408  09FA  00F4               	movwf	_Lights
 10409  09FB  0008               	return
 10410  09FC                     __end_of_LightsPointSelect:	
 10411                           
 10412                           	psect	text69
 10413  090D                     __ptext69:	
 10414 ;; *************** function _DetectSYSC_Signal *****************
 10415 ;; Defined at:
 10416 ;;		line 50 in file "../src/SYSC_B1.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;		None
 10419 ;; Auto vars:     Size  Location     Type
 10420 ;;		None
 10421 ;; Return value:  Size  Location     Type
 10422 ;;		None               void
 10423 ;; Registers used:
 10424 ;;		status,2
 10425 ;; Tracked objects:
 10426 ;;		On entry : 0/0
 10427 ;;		On exit  : 0/0
 10428 ;;		Unchanged: 0/0
 10429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10430 ;;      Params:         0       0       0       0
 10431 ;;      Locals:         0       0       0       0
 10432 ;;      Temps:          0       0       0       0
 10433 ;;      Totals:         0       0       0       0
 10434 ;;Total ram usage:        0 bytes
 10435 ;; Hardware stack levels used:    1
 10436 ;; Hardware stack levels required when called:    2
 10437 ;; This function calls:
 10438 ;;		Nothing
 10439 ;; This function is called by:
 10440 ;;		_main
 10441 ;; This function uses a non-reentrant model
 10442 ;;
 10443                           
 10444                           
 10445                           ;psect for function _DetectSYSC_Signal
 10446  090D                     _DetectSYSC_Signal:	
 10447                           
 10448                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
 10449                           
 10450                           ;incstack = 0
 10451                           ; Regs used in _DetectSYSC_Signal: [status,2]
 10452  090D  1283               	bcf	3,5	;RP0=0, select bank0
 10453  090E  1303               	bcf	3,6	;RP1=0, select bank0
 10454  090F  19AC               	btfsc	_SYSC,3
 10455  0910  2917               	goto	l1299
 10456                           
 10457                           ;SYSC_B1.c: 52: if (RB2 == 1) {
 10458  0911  1D06               	btfss	6,2	;volatile
 10459  0912  0008               	return
 10460                           
 10461                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
 10462  0913  15AC               	bsf	_SYSC,3
 10463                           
 10464                           ;SYSC_B1.c: 54: SYSC.Timer = 0;
 10465  0914  01AD               	clrf	_SYSC+1
 10466  0915  01AE               	clrf	_SYSC+2
 10467                           
 10468                           ;SYSC_B1.c: 55: }
 10469                           ;SYSC_B1.c: 56: } else {
 10470  0916  0008               	return
 10471  0917                     l1299:	
 10472                           
 10473                           ;SYSC_B1.c: 57: if (RB2 == 0) {
 10474  0917  1906               	btfsc	6,2	;volatile
 10475  0918  0008               	return
 10476                           
 10477                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
 10478  0919  11AC               	bcf	_SYSC,3
 10479  091A  0008               	return
 10480  091B                     __end_of_DetectSYSC_Signal:	
 10481                           
 10482                           	psect	text70
 10483  0BF7                     __ptext70:	
 10484 ;; *************** function _CDS_Main *****************
 10485 ;; Defined at:
 10486 ;;		line 11 in file "../src/CDS_B1.c"
 10487 ;; Parameters:    Size  Location     Type
 10488 ;;		None
 10489 ;; Auto vars:     Size  Location     Type
 10490 ;;		None
 10491 ;; Return value:  Size  Location     Type
 10492 ;;		None               void
 10493 ;; Registers used:
 10494 ;;		wreg, status,2, status,0
 10495 ;; Tracked objects:
 10496 ;;		On entry : 0/0
 10497 ;;		On exit  : 0/0
 10498 ;;		Unchanged: 0/0
 10499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10500 ;;      Params:         0       0       0       0
 10501 ;;      Locals:         0       0       0       0
 10502 ;;      Temps:          0       3       0       0
 10503 ;;      Totals:         0       3       0       0
 10504 ;;Total ram usage:        3 bytes
 10505 ;; Hardware stack levels used:    1
 10506 ;; Hardware stack levels required when called:    2
 10507 ;; This function calls:
 10508 ;;		Nothing
 10509 ;; This function is called by:
 10510 ;;		_main
 10511 ;; This function uses a non-reentrant model
 10512 ;;
 10513                           
 10514                           
 10515                           ;psect for function _CDS_Main
 10516  0BF7                     _CDS_Main:	
 10517                           
 10518                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
 10519                           
 10520                           ;incstack = 0
 10521                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
 10522  0BF7  1283               	bcf	3,5	;RP0=0, select bank0
 10523  0BF8  1303               	bcf	3,6	;RP1=0, select bank0
 10524  0BF9  1C36               	btfss	__CDS,0
 10525  0BFA  0008               	return
 10526                           
 10527                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
 10528  0BFB  18B6               	btfsc	__CDS,1
 10529  0BFC  2C0A               	goto	l180
 10530                           
 10531                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
 10532  0BFD  19B6               	btfsc	__CDS,3
 10533  0BFE  0008               	return
 10534                           
 10535                           ;CDS_B1.c: 16: _CDS.Time++;
 10536  0BFF  3001               	movlw	1
 10537  0C00  00DA               	movwf	??_CDS_Main
 10538  0C01  085A               	movf	??_CDS_Main,w
 10539  0C02  07B7               	addwf	__CDS+1,f
 10540                           
 10541                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
 10542  0C03  3005               	movlw	5
 10543  0C04  0237               	subwf	__CDS+1,w
 10544  0C05  1C03               	skipc
 10545  0C06  0008               	return
 10546                           
 10547                           ;CDS_B1.c: 18: {
 10548                           ;CDS_B1.c: 19: _CDS.Time = 0;
 10549  0C07  01B7               	clrf	__CDS+1
 10550                           
 10551                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
 10552  0C08  15B6               	bsf	__CDS,3
 10553                           
 10554                           ;CDS_B1.c: 21: }
 10555                           ;CDS_B1.c: 22: }
 10556                           ;CDS_B1.c: 23: } else {
 10557  0C09  0008               	return
 10558  0C0A                     l180:	
 10559                           
 10560                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
 10561  0C0A  1CB6               	btfss	__CDS,1
 10562  0C0B  0008               	return
 10563                           
 10564                           ;CDS_B1.c: 25: _CDS.GO = 0;
 10565  0C0C  10B6               	bcf	__CDS,1
 10566                           
 10567                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
 10568  0C0D  1A36               	btfsc	__CDS,4
 10569  0C0E  2C15               	goto	l5639
 10570                           
 10571                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
 10572  0C0F  0838               	movf	__CDS+2,w
 10573  0C10  0239               	subwf	__CDS+3,w
 10574  0C11  1C03               	skipc
 10575  0C12  0008               	return
 10576                           
 10577                           ;CDS_B1.c: 28: _CDS.Status = 1;
 10578  0C13  1636               	bsf	__CDS,4
 10579                           
 10580                           ;CDS_B1.c: 29: }
 10581                           ;CDS_B1.c: 30: } else {
 10582  0C14  0008               	return
 10583  0C15                     l5639:	
 10584                           
 10585                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
 10586  0C15  0838               	movf	__CDS+2,w
 10587  0C16  3E9C               	addlw	156
 10588  0C17  00DA               	movwf	??_CDS_Main
 10589  0C18  30FF               	movlw	255
 10590  0C19  1803               	skipnc
 10591  0C1A  3000               	movlw	0
 10592  0C1B  00DB               	movwf	??_CDS_Main+1
 10593  0C1C  085B               	movf	??_CDS_Main+1,w
 10594  0C1D  3A80               	xorlw	128
 10595  0C1E  00DC               	movwf	??_CDS_Main+2
 10596  0C1F  3080               	movlw	128
 10597  0C20  025C               	subwf	??_CDS_Main+2,w
 10598  0C21  1D03               	skipz
 10599  0C22  2C25               	goto	u6715
 10600  0C23  0839               	movf	__CDS+3,w
 10601  0C24  025A               	subwf	??_CDS_Main,w
 10602  0C25                     u6715:	
 10603  0C25  1C03               	skipc
 10604  0C26  0008               	return
 10605                           
 10606                           ;CDS_B1.c: 32: _CDS.Status = 0;
 10607  0C27  1283               	bcf	3,5	;RP0=0, select bank0
 10608  0C28  1303               	bcf	3,6	;RP1=0, select bank0
 10609  0C29  1236               	bcf	__CDS,4
 10610  0C2A  0008               	return
 10611  0C2B                     __end_of_CDS_Main:	
 10612                           
 10613                           	psect	text71
 10614  089A                     __ptext71:	
 10615 ;; *************** function _CDS_Initialization *****************
 10616 ;; Defined at:
 10617 ;;		line 7 in file "../src/CDS_B1.c"
 10618 ;; Parameters:    Size  Location     Type
 10619 ;;		None
 10620 ;; Auto vars:     Size  Location     Type
 10621 ;;		None
 10622 ;; Return value:  Size  Location     Type
 10623 ;;		None               void
 10624 ;; Registers used:
 10625 ;;		None
 10626 ;; Tracked objects:
 10627 ;;		On entry : 0/0
 10628 ;;		On exit  : 0/0
 10629 ;;		Unchanged: 0/0
 10630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10631 ;;      Params:         0       0       0       0
 10632 ;;      Locals:         0       0       0       0
 10633 ;;      Temps:          0       0       0       0
 10634 ;;      Totals:         0       0       0       0
 10635 ;;Total ram usage:        0 bytes
 10636 ;; Hardware stack levels used:    1
 10637 ;; Hardware stack levels required when called:    2
 10638 ;; This function calls:
 10639 ;;		Nothing
 10640 ;; This function is called by:
 10641 ;;		_main
 10642 ;; This function uses a non-reentrant model
 10643 ;;
 10644                           
 10645                           
 10646                           ;psect for function _CDS_Initialization
 10647  089A                     _CDS_Initialization:	
 10648                           
 10649                           ;CDS_B1.c: 8: _CDS.Enable = 1;
 10650                           
 10651                           ;incstack = 0
 10652                           ; Regs used in _CDS_Initialization: []
 10653  089A  1283               	bcf	3,5	;RP0=0, select bank0
 10654  089B  1303               	bcf	3,6	;RP1=0, select bank0
 10655  089C  1436               	bsf	__CDS,0
 10656  089D  0008               	return
 10657  089E                     __end_of_CDS_Initialization:	
 10658                           
 10659                           	psect	text72
 10660  0D5A                     __ptext72:	
 10661 ;; *************** function _Buzzer_Main *****************
 10662 ;; Defined at:
 10663 ;;		line 46 in file "../src/Buzzer_B1.c"
 10664 ;; Parameters:    Size  Location     Type
 10665 ;;		None
 10666 ;; Auto vars:     Size  Location     Type
 10667 ;;		None
 10668 ;; Return value:  Size  Location     Type
 10669 ;;		None               void
 10670 ;; Registers used:
 10671 ;;		wreg, status,2, status,0
 10672 ;; Tracked objects:
 10673 ;;		On entry : 0/0
 10674 ;;		On exit  : 0/0
 10675 ;;		Unchanged: 0/0
 10676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10677 ;;      Params:         0       0       0       0
 10678 ;;      Locals:         0       0       0       0
 10679 ;;      Temps:          1       0       0       0
 10680 ;;      Totals:         1       0       0       0
 10681 ;;Total ram usage:        1 bytes
 10682 ;; Hardware stack levels used:    1
 10683 ;; Hardware stack levels required when called:    2
 10684 ;; This function calls:
 10685 ;;		Nothing
 10686 ;; This function is called by:
 10687 ;;		_main
 10688 ;; This function uses a non-reentrant model
 10689 ;;
 10690                           
 10691                           
 10692                           ;psect for function _Buzzer_Main
 10693  0D5A                     _Buzzer_Main:	
 10694                           
 10695                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 10696                           
 10697                           ;incstack = 0
 10698                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 10699  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
 10700  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
 10701  0D5C  1CA0               	btfss	_Buz1,1
 10702  0D5D  0008               	return
 10703                           
 10704                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 10705  0D5E  3001               	movlw	1
 10706  0D5F  07A1               	addwf	_Buz1+1,f
 10707  0D60  1803               	skipnc
 10708  0D61  0AA2               	incf	_Buz1+2,f
 10709  0D62  3000               	movlw	0
 10710  0D63  07A2               	addwf	_Buz1+2,f
 10711                           
 10712                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 10713  0D64  0827               	movf	_Buz1+7,w
 10714  0D65  0222               	subwf	_Buz1+2,w
 10715  0D66  1D03               	skipz
 10716  0D67  2D6A               	goto	u4125
 10717  0D68  0826               	movf	_Buz1+6,w
 10718  0D69  0221               	subwf	_Buz1+1,w
 10719  0D6A                     u4125:	
 10720  0D6A  1C03               	skipc
 10721  0D6B  0008               	return
 10722                           
 10723                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 10724  0D6C  01A1               	clrf	_Buz1+1
 10725  0D6D  01A2               	clrf	_Buz1+2
 10726                           
 10727                           ;Buzzer_B1.c: 51: Buz1.Switch = (RC0 == 1) ? 1 : 0;
 10728  0D6E  12A0               	bcf	_Buz1,5
 10729  0D6F  1807               	btfsc	7,0	;volatile
 10730  0D70  16A0               	bsf	_Buz1,5
 10731                           
 10732                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 10733  0D71  1283               	bcf	3,5	;RP0=0, select bank0
 10734  0D72  1303               	bcf	3,6	;RP1=0, select bank0
 10735  0D73  1AA0               	btfsc	_Buz1,5
 10736  0D74  2D99               	goto	l68
 10737                           
 10738                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 10739  0D75  08A3               	movf	_Buz1+3,f
 10740  0D76  1D03               	skipz
 10741  0D77  2D96               	goto	l69
 10742                           
 10743                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 10744  0D78  1DA0               	btfss	_Buz1,3
 10745  0D79  2D86               	goto	l70
 10746                           
 10747                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 10748  0D7A  11A0               	bcf	_Buz1,3
 10749                           
 10750                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 10751  0D7B  0824               	movf	_Buz1+4,w
 10752  0D7C  00F9               	movwf	??_Buzzer_Main
 10753  0D7D  0879               	movf	??_Buzzer_Main,w
 10754  0D7E  00A3               	movwf	_Buz1+3
 10755                           
 10756                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 10757  0D7F  0829               	movf	_Buz1+9,w
 10758  0D80  01A7               	clrf	_Buz1+7
 10759  0D81  07A7               	addwf	_Buz1+7,f
 10760  0D82  0828               	movf	_Buz1+8,w
 10761  0D83  01A6               	clrf	_Buz1+6
 10762  0D84  07A6               	addwf	_Buz1+6,f
 10763                           
 10764                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 10765  0D85  0008               	return
 10766  0D86                     l70:	
 10767  0D86  1E20               	btfss	_Buz1,4
 10768  0D87  2D94               	goto	l72
 10769                           
 10770                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 10771  0D88  1220               	bcf	_Buz1,4
 10772                           
 10773                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 10774  0D89  0825               	movf	_Buz1+5,w
 10775  0D8A  00F9               	movwf	??_Buzzer_Main
 10776  0D8B  0879               	movf	??_Buzzer_Main,w
 10777  0D8C  00A3               	movwf	_Buz1+3
 10778                           
 10779                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 10780  0D8D  082B               	movf	_Buz1+11,w
 10781  0D8E  01A7               	clrf	_Buz1+7
 10782  0D8F  07A7               	addwf	_Buz1+7,f
 10783  0D90  082A               	movf	_Buz1+10,w
 10784  0D91  01A6               	clrf	_Buz1+6
 10785  0D92  07A6               	addwf	_Buz1+6,f
 10786                           
 10787                           ;Buzzer_B1.c: 62: } else {
 10788  0D93  0008               	return
 10789  0D94                     l72:	
 10790                           
 10791                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 10792  0D94  10A0               	bcf	_Buz1,1
 10793                           
 10794                           ;Buzzer_B1.c: 64: }
 10795                           ;Buzzer_B1.c: 65: } else {
 10796  0D95  0008               	return
 10797  0D96                     l69:	
 10798                           
 10799                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 10800  0D96  16A0               	bsf	_Buz1,5
 10801                           
 10802                           ;Buzzer_B1.c: 68: RC0 = 1;
 10803  0D97  1407               	bsf	7,0	;volatile
 10804                           
 10805                           ;Buzzer_B1.c: 69: }
 10806                           ;Buzzer_B1.c: 70: } else {
 10807  0D98  0008               	return
 10808  0D99                     l68:	
 10809                           
 10810                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 10811  0D99  12A0               	bcf	_Buz1,5
 10812                           
 10813                           ;Buzzer_B1.c: 73: RC0 = 0;
 10814  0D9A  1007               	bcf	7,0	;volatile
 10815                           
 10816                           ;Buzzer_B1.c: 75: Buz1.Count--;
 10817  0D9B  3001               	movlw	1
 10818  0D9C  02A3               	subwf	_Buz1+3,f
 10819  0D9D  0008               	return
 10820  0D9E                     __end_of_Buzzer_Main:	
 10821                           
 10822                           	psect	text73
 10823  0896                     __ptext73:	
 10824 ;; *************** function _Buzzer_Initialization *****************
 10825 ;; Defined at:
 10826 ;;		line 11 in file "../src/Buzzer_B1.c"
 10827 ;; Parameters:    Size  Location     Type
 10828 ;;		None
 10829 ;; Auto vars:     Size  Location     Type
 10830 ;;		None
 10831 ;; Return value:  Size  Location     Type
 10832 ;;		None               void
 10833 ;; Registers used:
 10834 ;;		None
 10835 ;; Tracked objects:
 10836 ;;		On entry : 0/0
 10837 ;;		On exit  : 0/0
 10838 ;;		Unchanged: 0/0
 10839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10840 ;;      Params:         0       0       0       0
 10841 ;;      Locals:         0       0       0       0
 10842 ;;      Temps:          0       0       0       0
 10843 ;;      Totals:         0       0       0       0
 10844 ;;Total ram usage:        0 bytes
 10845 ;; Hardware stack levels used:    1
 10846 ;; Hardware stack levels required when called:    2
 10847 ;; This function calls:
 10848 ;;		Nothing
 10849 ;; This function is called by:
 10850 ;;		_main
 10851 ;; This function uses a non-reentrant model
 10852 ;;
 10853                           
 10854                           
 10855                           ;psect for function _Buzzer_Initialization
 10856  0896                     _Buzzer_Initialization:	
 10857                           
 10858                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 10859                           
 10860                           ;incstack = 0
 10861                           ; Regs used in _Buzzer_Initialization: []
 10862  0896  1283               	bcf	3,5	;RP0=0, select bank0
 10863  0897  1303               	bcf	3,6	;RP1=0, select bank0
 10864  0898  1420               	bsf	_Buz1,0
 10865  0899  0008               	return
 10866  089A                     __end_of_Buzzer_Initialization:	
 10867                           
 10868                           	psect	text74
 10869  0A40                     __ptext74:	
 10870 ;; *************** function _ISR *****************
 10871 ;; Defined at:
 10872 ;;		line 116 in file "../src/MCU_B1.c"
 10873 ;; Parameters:    Size  Location     Type
 10874 ;;		None
 10875 ;; Auto vars:     Size  Location     Type
 10876 ;;		None
 10877 ;; Return value:  Size  Location     Type
 10878 ;;		None               void
 10879 ;; Registers used:
 10880 ;;		wreg, status,2, status,0, pclath, cstack
 10881 ;; Tracked objects:
 10882 ;;		On entry : 0/0
 10883 ;;		On exit  : 0/0
 10884 ;;		Unchanged: 0/0
 10885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10886 ;;      Params:         0       0       0       0
 10887 ;;      Locals:         0       0       0       0
 10888 ;;      Temps:          4       0       0       0
 10889 ;;      Totals:         4       0       0       0
 10890 ;;Total ram usage:        4 bytes
 10891 ;; Hardware stack levels used:    1
 10892 ;; Hardware stack levels required when called:    1
 10893 ;; This function calls:
 10894 ;;		_TMR1_ISR
 10895 ;; This function is called by:
 10896 ;;		Interrupt level 1
 10897 ;; This function uses a non-reentrant model
 10898 ;;
 10899                           
 10900                           
 10901                           ;psect for function _ISR
 10902  0A40                     _ISR:	
 10903                           
 10904                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 10905  0A40  1683               	bsf	3,5	;RP0=1, select bank1
 10906  0A41  1303               	bcf	3,6	;RP1=0, select bank1
 10907  0A42  1C0C               	btfss	12,0	;volatile
 10908  0A43  2A4B               	goto	i1l518
 10909  0A44  1283               	bcf	3,5	;RP0=0, select bank0
 10910  0A45  1303               	bcf	3,6	;RP1=0, select bank0
 10911  0A46  1C0C               	btfss	12,0	;volatile
 10912  0A47  2A4B               	goto	i1l518
 10913                           
 10914                           ;MCU_B1.c: 126: TMR1_ISR();
 10915  0A48  158A  21FC  158A   	fcall	_TMR1_ISR
 10916  0A4B                     i1l518:	
 10917                           ;MCU_B1.c: 127: }
 10918                           ;MCU_B1.c: 148: return;
 10919                           
 10920  0A4B  0878               	movf	??_ISR+3,w
 10921  0A4C  1283               	bcf	3,5	;RP0=0, select bank0
 10922  0A4D  1303               	bcf	3,6	;RP1=0, select bank0
 10923  0A4E  00FF               	movwf	127
 10924  0A4F  0877               	movf	??_ISR+2,w
 10925  0A50  008A               	movwf	10
 10926  0A51  0876               	movf	??_ISR+1,w
 10927  0A52  0084               	movwf	4
 10928  0A53  0E75               	swapf	??_ISR^(0+-128),w
 10929  0A54  0083               	movwf	3
 10930  0A55  0EFE               	swapf	126,f
 10931  0A56  0E7E               	swapf	126,w
 10932  0A57  0009               	retfie
 10933  0A58                     __end_of_ISR:	
 10934                           
 10935                           	psect	intentry
 10936  0004                     __pintentry:	
 10937                           ;incstack = 0
 10938                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
 10939                           
 10940  0004                     interrupt_function:	
 10941  007E                     saved_w	set	btemp
 10942  0004  00FE               	movwf	btemp
 10943  0005  0E03               	swapf	3,w
 10944  0006  00F5               	movwf	??_ISR
 10945  0007  0804               	movf	4,w
 10946  0008  00F6               	movwf	??_ISR+1
 10947  0009  080A               	movf	10,w
 10948  000A  00F7               	movwf	??_ISR+2
 10949  000B  1283               	bcf	3,5	;RP0=0, select bank0
 10950  000C  1303               	bcf	3,6	;RP1=0, select bank0
 10951  000D  087F               	movf	btemp+1,w
 10952  000E  00F8               	movwf	??_ISR+3
 10953  000F  158A  2A40         	ljmp	_ISR
 10954                           
 10955                           	psect	text75
 10956  09FC                     __ptext75:	
 10957 ;; *************** function _TMR1_ISR *****************
 10958 ;; Defined at:
 10959 ;;		line 236 in file "../src/MCU_B1.c"
 10960 ;; Parameters:    Size  Location     Type
 10961 ;;		None
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;		None
 10964 ;; Return value:  Size  Location     Type
 10965 ;;		None               void
 10966 ;; Registers used:
 10967 ;;		wreg, status,2
 10968 ;; Tracked objects:
 10969 ;;		On entry : 0/0
 10970 ;;		On exit  : 0/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10973 ;;      Params:         0       0       0       0
 10974 ;;      Locals:         0       0       0       0
 10975 ;;      Temps:          0       0       0       0
 10976 ;;      Totals:         0       0       0       0
 10977 ;;Total ram usage:        0 bytes
 10978 ;; Hardware stack levels used:    1
 10979 ;; This function calls:
 10980 ;;		Nothing
 10981 ;; This function is called by:
 10982 ;;		_ISR
 10983 ;; This function uses a non-reentrant model
 10984 ;;
 10985                           
 10986                           
 10987                           ;psect for function _TMR1_ISR
 10988  09FC                     _TMR1_ISR:	
 10989                           
 10990                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 10991                           
 10992                           ;incstack = 0
 10993                           ; Regs used in _TMR1_ISR: [wreg+status,2]
 10994  09FC  30FA               	movlw	250
 10995  09FD  1283               	bcf	3,5	;RP0=0, select bank0
 10996  09FE  1303               	bcf	3,6	;RP1=0, select bank0
 10997  09FF  008F               	movwf	15	;volatile
 10998                           
 10999                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 11000  0A00  3038               	movlw	56
 11001  0A01  008E               	movwf	14	;volatile
 11002                           
 11003                           ;MCU_B1.c: 240: TMR1IF = 0;
 11004  0A02  100C               	bcf	12,0	;volatile
 11005                           
 11006                           ;MCU_B1.c: 271: Timer1.Count++;
 11007  0A03  3001               	movlw	1
 11008  0A04  07BB               	addwf	_Timer1+1,f
 11009  0A05  1803               	skipnc
 11010  0A06  0ABC               	incf	_Timer1+2,f
 11011  0A07  3000               	movlw	0
 11012  0A08  07BC               	addwf	_Timer1+2,f
 11013                           
 11014                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 11015  0A09  30C8               	movlw	200
 11016  0A0A  063B               	xorwf	_Timer1+1,w
 11017  0A0B  043C               	iorwf	_Timer1+2,w
 11018  0A0C  1D03               	skipz
 11019  0A0D  0008               	return
 11020                           
 11021                           ;MCU_B1.c: 273: Timer1.Count = 0;
 11022  0A0E  01BB               	clrf	_Timer1+1
 11023  0A0F  01BC               	clrf	_Timer1+2
 11024                           
 11025                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 11026  0A10  143A               	bsf	_Timer1,0
 11027  0A11  0008               	return
 11028  0A12                     __end_of_TMR1_ISR:	
 11029  007E                     btemp	set	126	;btemp
 11030  007E                     wtemp	set	126
 11031  007E                     wtemp0	set	126
 11032  0080                     wtemp1	set	128
 11033  0082                     wtemp2	set	130
 11034  0084                     wtemp3	set	132
 11035  0086                     wtemp4	set	134
 11036  0088                     wtemp5	set	136
 11037  007F                     wtemp6	set	127
 11038  007E                     ttemp	set	126
 11039  007E                     ttemp0	set	126
 11040  0081                     ttemp1	set	129
 11041  0084                     ttemp2	set	132
 11042  0087                     ttemp3	set	135
 11043  007F                     ttemp4	set	127
 11044  007E                     ltemp	set	126
 11045  007E                     ltemp0	set	126
 11046  0082                     ltemp1	set	130
 11047  0086                     ltemp2	set	134
 11048  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         145
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     22      80
    BANK1            80      0      77
    BANK2            16      4       9

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights2(BANK0[5]), Lights1(BANK0[5]), 

    Sw	PTR struct Switch size(2) Largest target is 5
		 -> NULL(NULL[0]), Sw2(BANK2[5]), Sw1(BANK1[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK1[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_Buzzer_Main
    _main->_PIR_Initialization
    _main->_WDT_Main
    _getTemp_AD->_getAD
    _getPIR_AD->___awdiv
    _getPIR_AD->___lwdiv
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setTemp_Main->___awdiv
    _setTemp_Main->_getMain_All_Error_Status
    _setTemp_Main->_getMain_All_LightsStatus
    _setSw_Main->_SwPointSelect
    _setSw_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getCDS_Status
    _PIR_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___bmul
    _Load_Main->___lwdiv
    _Load_Main->_getLight_LoadGO
    _Load_Main->_getLight_Load_Status
    _Load_Main->_getMain_All_Error_Status
    _Load_Main->_getMain_All_LightsStatus
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _Lights_Main->_getLoad_OK
    _Lights_Main->_getMain_All_Error_Status
    _Lights_Main->_getMain_All_LightsStatus
    _setLights_Main->_LightsPointSelect
    _setLights->_setLights_Line
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _Lights_Control->___awdiv
    _setLights_Initialization->_LightsPointSelect
    _setLED_Main->_LedPointSelect
    _setLED_Initialization->_LedPointSelect
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_getMain_All_LightsStatus
    _setLights_SwOn->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _setBuz->___awdiv
    _getAll_Lights_Line->_LightsPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Exception_Main
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getPIR_AD->___awdiv
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setSw_Main
    _setSw_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _setLights_Initialization->_LightsPointSelect
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_setBuz
    _setLights_SwOn->_setLights_Trigger
    _getLights_Status->_LightsPointSelect
    _setLights_SwOff->_setLights_Trigger
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _setBuz->___awdiv
    _getAll_Lights_Line->_LightsPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   35524
                                             21 BANK0      1     1      0
                                              0 BANK2      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1883
                                             12 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0    1040
                                              1 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    3540
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1466
                                              1 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     916
                                              1 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     728
                                              4 COMMON     1     0      1
                                              0 BANK0      1     1      0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    3567
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         5     5      0    3567
                                             12 BANK0      5     5      0
                            ___awdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4185
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0    4185
                                              6 BANK0      5     5      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        1     1      0      44
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            11    11      0    2791
                                              6 BANK0     11    11      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           11    11      0    2286
                                              7 BANK0     11    11      0
                             ___bmul
                            ___lwdiv
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     284
                                              4 COMMON     1     0      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    4348
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    2552
                                              6 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    2158
                                              3 BANK0      3     2      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      88
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     142
                                              0 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1509
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0     126
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0     126
                                              1 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     294
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     294
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1844
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1844
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    6902
                                             12 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOn                                       1     1      0    1104
                                              4 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (4) _getLights_Status                                     2     2      0     174
                                              1 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOff                                      1     1      0     888
                                              4 BANK0      1     1      0
                  _LightsPointSelect
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (4) _setLights_Trigger                                    3     2      1     720
                                              1 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1634
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0     126
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1883
                                              8 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1215
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      47
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   4     4      0     198
                                              1 BANK0      4     4      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _LightsPointSelect                                    2     2      0      84
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
       _LightsPointSelect
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___bmul
     ___lwdiv
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Switch_Initialization
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setLED
         _LedPointSelect
       _setLights_SwOff
         _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
       _setLights_SwOn
         _LightsPointSelect
         _getLights_Status
           _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      B0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     16      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4D       7       96.3%
BITBANK2            10      0       0       8        0.0%
BANK2               10      4       9       9       56.3%
DATA                 0      0      B0      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Jan 15 17:38:49 2015

              __size_of_Switch_Main 000B                        _WDT_Clearing 0002  
                    ___bmul@product 005B           getMain_Lights_Count@count 005A  
                                l60 0DD7                                  l70 0D86  
                                l72 0D94                                  l58 0DC9  
                                l68 0D99                                  l69 0D96  
                      ___awdiv@sign 005F                                  _Sw 0070  
                    setTemp_Main@AD 006A                                  fsr 0004  
                               l180 0C0A                                 l350 0AE8  
                               l349 0AE0                                 l383 0C8D  
                               l384 0C93                                 l721 0CB9  
                               l722 0CD6                                 l726 0CD2  
                               l752 06F2                                 l841 01ED  
                               l851 01C6                                 l843 0068  
                               l852 01C4                                 l844 0064  
                               l845 005E                                 l980 0FF7  
                               l975 0FFC                                 _GIE 005F  
                               _RC0 0038                                 _RB2 0032  
                               _LED 0072                                 _RC1 0039  
                               _RB3 0033                                 _RB4 0034  
                               _RA6 002E                                 _RB5 0035  
                               _RA7 002F                                 _RC4 003C  
                               _RC5 003D                                 _RC6 003E  
                               _RC7 003F                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _ISR 0A40                                 _PSA 040B  
                               _WDT 003D                   ??_setLights_SwOff 007A  
                               _Cmd 003F                                 _Sw1 00E4  
                               _Sw2 0120              getAll_Lights_Line@line 005E  
                               fsr0 0004                                 indf 0000  
             _Buzzer_Initialization 0896                     __end_of_ADC_Set 08CB  
         __end_of_LightsPointSelect 09FC                   ??_getSw_KeyStatus 0079  
                  _getLights_Status 0965             __size_of_Lights_Control 009A  
                              ?_ISR 0075                          Load_Main@i 006A  
                              l1060 0246                                l1061 022C  
                              l1066 024C                                l1059 037F  
                              l1068 025D                                l1423 09DA  
                              l1612 0BC1                                l1604 0A36  
                              l1445 04D9                                l1560 0B8C  
                              l1299 0917                                l4115 0D48  
                              l4109 0D2F                      _Load_Main$2691 0064  
                              l5211 0EE5                                l5203 0ED2  
                              l5207 0EDD                                l3805 0CCD  
                              l7005 00CA                                l7031 0155  
                              l5185 0EA6                                l6321 0DF6  
                              l7041 0173                                l7201 02A3  
                              l3833 09B6                                l5195 0EAE  
                              l5179 0E9B                                l7115 0B8D  
                              l5611 0D06                                l5603 0CE2  
                              l7051 018F                                l7203 02A4  
                              l6309 09F3                                l5197 0EBC  
                              l5605 0CF0                                l7061 01A8  
                              l7037 0163                                l7045 0180  
                              l3775 0963                                l6335 0E07  
                              l6343 0E0F                                l6503 0F63  
                              l5615 0D11                                l6511 0AFE  
                              l6353 0E22                                l6361 0E2A  
                              l6329 0DFE                                l7313 06D8  
                              l7305 06B1                                l7217 02F5  
                              l7209 02E1                                l7225 0326  
                              l6513 0B01                                l3795 0CB5  
                              l3787 0CA9                                l6427 0B72  
                              l7307 068E                                l6443 0A92  
                              l6603 0FBF                                l3797 0CBD  
                              l6357 0E26                                l7309 06BD  
                              l7317 06E4                                l6461 0A21  
                              l7149 0240                                l6621 0FE7  
                              l6517 0B07                                l5639 0C15  
                              l7239 034F                                l6447 0A9C  
                              l6631 0FF6                                l7097 01DA  
                              l7185 0280                                l6801 0E52  
                              l7337 07AE                                l7291 066E  
                              l6475 0F08                                l6643 09DE  
                              l6619 0FE4                                l6557 0BBB  
                              l7293 064B                                l7285 0647  
                              l6741 0753                                l6485 0F27  
                              l7197 0297                                l6813 0E6E  
                              l7349 07D1                                l7295 067A  
                              l7279 0638                                l6719 0BF0  
                              l6647 09E4                                l6753 0787  
                              l6737 0742                                l6489 0F3A  
                              l6809 0E66                                l6921 060B  
                              l6913 05DF                                l7299 068A  
                              l6499 0F5B                                l6763 09A3  
                              l6667 03F9                                l6659 03D0  
                              l6907 05C3                                l6589 0F89  
                              l6829 0E8A                                l6845 0C4A  
                              l6759 099D                                l6679 043E  
                              l6687 0486                                l6927 0619  
                              l6943 0B48                                l6881 0560  
                              l6873 054A                                l6865 0534  
                              l6849 0C52                                l6891 0579  
                              l6877 0555                                l6869 053F  
             _myMain_Initialization 07FF                                l6983 0067  
                              l6967 0048                                l6897 0595  
                              l6999 008E                        __CFG_WDTE$ON 0000  
                              u4125 0D6A                                _PEIE 005E  
                              u3695 0D54                                u5805 0EBD  
                              u6605 0CF1                                u5815 0EC9  
                              u6615 0CFD                                u5825 0ED3  
                              u6625 0D07                                u6715 0C25  
                              u8175 09CD                                u5785 0EB1  
                              u6585 0CE5                                u9315 008C  
                              u9325 00C8                                u9335 011F  
                              u8820 074F                                u8845 0772  
                              u8790 073E                                u8775 072A  
                              u9815 0336                                u9755 02C2  
                              u9940 0677                                u9765 02DA  
                              u9945 0654                                u9865 036C  
                              u9785 030E                                u9970 06BA  
                              u9975 0697                                __CDS 0036  
           ?_setSYSC_Initialization 0075                                _WPUB 0095  
                              _SYSC 002C                                _Buz1 0020  
                              __PIR 00A0                                _Load 00CA  
                              _Temp 0042                                _main 078D  
                              btemp 007E                     __end_of_WDT_Set 0937  
                              ltemp 007E                                start 0011  
                              ttemp 007E                                wtemp 007E  
                 ___bmul@multiplier 005C                    __end_of_CDS_Main 0C2B  
      __size_of_Temp_Initialization 0003                               ??_ISR 0075  
                 _setLights_Trigger 0ABA                       ??_Lights_Main 007A  
                     __CFG_PLLEN$ON 0000                    __end_of_LED_Main 08A2  
                ?_setLights_Trigger 005B                               ?_main 0125  
                   __end_of___awdiv 0EEC                               _ADRES 001E  
                   ___awdiv@divisor 005A                               _T1CON 0010  
                   __end_of___lwdiv 0D18                               i1l518 0A4B  
                   ___awdiv@counter 005E                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                      ?_setLED_Main 0075                               _TRISA 0085  
                             _TRISB 0086                               _TRISC 0087  
           __end_of_Timeout_Counter 09D3                               _Light 0073  
               ??_setLights_Trigger 005C                    __end_of_PIR_Main 0395  
                  __end_of_TMR1_ISR 0A12                    __end_of_TMR1_Set 0929  
                             _getAD 0AF1      __end_of_setSYSC_Initialization 08A6  
    getLights_Allow_Condition@allow 005B             __end_of_getLight_LoadGO 08B1  
                     ??_Buzzer_Main 0079                    __end_of_WDT_Main 0987  
                     _LightsControl 0040                      __CFG_BOREN$OFF 0000  
      __end_of_getMain_Lights_Count 0946                               pclath 000A  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
    __size_of_setLED_Initialization 0012       __end_of_setLED_Initialization 0999  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                 Load_Main@JudgeValue 0068  
                 getPIR_AD@channel1 0067                   getPIR_AD@channel2 0062  
            ?_setLoad_AH_AL_Restore 0075                   setTemp_Main@error 0067  
                    _setLights_Main 0BC7                      _setLights_Line 0A29  
                   __initialization 0013                      _setLights_SwOn 0B52  
                __size_of_SYSC_Main 0003           __end_of_setLights_Trigger 0AD5  
                      __end_of_main 07FF                    __end_of_Fosc_Set 08AB  
    getMain_All_LightsStatus@status 0079                      _Exception_Main 061B  
                         ??_ADC_Set 0079                              ??_main 006F  
             PIR_Main@Enable_Switch 0067              ?_Buzzer_Initialization 0075  
               __end_of_Lights_Main 0B9D          __size_of_LightsPointSelect 0015  
          _getMain_All_LightsStatus 0955             ??_Switch_Initialization 0079  
                            ?_getAD 0079              ?_myMain_Initialization 0075  
                            _ADCON0 001F                              _ADCON1 009F  
                  ___awdiv@dividend 005C                           ??_WDT_Set 0079  
                            _ANSELA 0185                              _ANSELB 0186  
          _getMain_All_Error_Status 0C9A                              _FVRCON 009D  
            getLights_Status@lights 005B                              _OSCCON 0090  
                __size_of_Load_Main 01C7                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0A70  
              Exception_Main@i_2418 006C              getLights_Status@status 005C  
            __end_of_setLights_Main 0BF7              __end_of_setLights_Line 0A40  
            __end_of_setLights_SwOn 0B77        __size_of_SYSC_Initialization 0003  
        __end_of_Mcu_Initialization 0955                 __end_of_Buzzer_Main 0D9E  
                            _Lights 0074                              _Timer1 003A  
       __size_of_CDS_Initialization 0004             ??_Lights_Initialization 007A  
                            ___bmul 0999              __end_of_Exception_Main 06F3  
              Load_Main@Load_Status 0067                Exception_Main@lights 0067  
                         ??___awdiv 0079                           ??___lwdiv 0079  
              Exception_Main@status 006E                              _setLED 0DE5  
                            _myMain 0031                    ___awdiv@quotient 0060  
                            _setBuz 0D9E                  __size_of_Temp_Main 0003  
              Load_Main@LightsCount 0069         __end_of_Load_Initialization 088A  
   getLights_Allow_Condition@lights 0075                              saved_w 007E  
                  setLights_SwOn@sw 005E                    ?_Timeout_Counter 0075  
       getMain_Lights_Count@status1 005B         getMain_Lights_Count@status2 005C  
             __end_of_SwPointSelect 09BF                   __end_of_SYSC_Main 0890  
                    _Lights_Control 06F3             __size_of_LedPointSelect 001C  
                         ?_CDS_Main 0075                    ?_getLight_LoadGO 0075  
       __size_of_PIR_Initialization 000B                          _TouchPower 09D3  
           __end_of__initialization 002B                           ?_LED_Main 0075  
                     ?_my_MainTimer 0075                     ?_setLights_Main 0075  
                   ?_setLights_Line 0075                     ?_setLights_SwOn 0075  
                     ?_setSYSC_Main 0075                 ___bmul@multiplicand 0079  
                   _setLights_SwOff 0AA0          __size_of_setLights_Trigger 001B  
                    __pcstackCOMMON 0075                  __size_of_getCDS_AD 0022  
                   ?_Exception_Main 0075            __end_of_getLights_Status 0976  
                     __end_of_getAD 0B0D                           ?_PIR_Main 0075  
                         ?_TMR1_ISR 0075       __size_of_getLight_Load_Status 0006  
                         ?_TMR1_Set 0075              setLoad_AH_AL_Restore@i 005A  
                _LED_Initialization 0901                     _getSw_KeyStatus 0A88  
                __size_of_getPIR_AD 012E                         _Lights_Main 0B77  
          _setLights_Initialization 08BD                _getMain_Lights_Count 0937  
                         ?_WDT_Main 0075                   __end_of_Load_Main 01F5  
        __end_of_set_TimeoutCleared 08BD                 ?_LED_Initialization 0075  
            __end_of_Lights_Control 078D                __size_of_setLED_Main 003B  
                           ??_getAD 007A                 _Temp_Initialization 0890  
                        ??_CDS_Main 005A                          __pbssBANK0 0020  
                        __pbssBANK1 00A0                          __pbssBANK2 0120  
                         ?_Fosc_Set 0075         __size_of_getAll_Lights_Line 002A  
                       _Buzzer_Main 0D5A                   __end_of_Temp_Main 0896  
                           ?_IO_Set 0075                     __CFG_VCAPEN$DIS 0000  
                    ??_my_MainTimer 0066                          ??_LED_Main 007A  
                    ??_setSYSC_Main 007A                       ??_Switch_Main 007A  
              ??_LED_Initialization 007A                   LedPointSelect@led 005A  
                       setBuz@count 0065                          __pmaintext 078D  
        ?_getLights_Allow_Condition 0075                ?_Temp_Initialization 0075  
                           ?___bmul 0079                PIR_Main@LightsStatus 006A  
                        ??_PIR_Main 0060                          ??_TMR1_ISR 0075  
                     ?_setTemp_Main 0075                  __size_of_setLights 007D  
                        _getLoad_AD 0E33                          ??_TMR1_Set 0079  
                        __pintentry 0004                          _getLoad_OK 08D3  
                           ?_setLED 005B             setLights_Trigger@lights 005D  
             ?_getMain_Lights_Count 0075                             _ADC_Set 08C4  
                           ?_setBuz 0062                          _getTemp_AD 0C2B  
                        ??_WDT_Main 0079              __size_of_getCDS_Status 0008  
                   ?_Lights_Control 0075                   __end_of_getCDS_AD 0B2F  
                           _WDT_Set 0929                       getPIR_AD@VRAD 0069  
                        ??_Fosc_Set 0079                         ?_TouchPower 0075  
                 __end_of_getPIR_AD 061B             ??_setLoad_AH_AL_Restore 0079  
           __end_of_setLights_SwOff 0ABA      _getLights_Allow_Condition$4767 005C  
                   __size_of_IO_Set 0018                          getCDS_AD@i 005E  
                        getCDS_AD@j 005F                             _Lights1 0048  
                           _Lights2 004D                             _VarLED1 0056  
                           _VarLED2 00E9             __end_of_getSw_KeyStatus 0AA0  
             ??_Temp_Initialization 0079                      ??_setTemp_Main 0066  
                   __size_of___bmul 0013                             ___awdiv 0E8F  
               __end_of_Switch_Main 0901                             ___lwdiv 0CD8  
        ??_getMain_All_LightsStatus 0079             ??_Buzzer_Initialization 0079  
                       PIR_Main@cds 0069                     __size_of_setLED 004E  
                   __size_of_setBuz 0047                             __ptext0 0000  
                           __ptext1 0B2F                             __ptext2 07FF  
                           __ptext3 0C2B                             __ptext4 04ED  
                           __ptext5 0E33                             __ptext6 0B0D  
                           __ptext7 0AF1                             __ptext8 0976  
                           __ptext9 0002                          getPIR_AD@i 006A  
                        getPIR_AD@j 0066                        __size_of_ISR 0018  
        ??_getMain_All_Error_Status 0079                 _SYSC_Initialization 088A  
           ??_myMain_Initialization 0079            ??_setTemp_Initialization 0079  
                    _LedPointSelect 0AD5                     getTemp_AD@ADRES 005E  
                           clrloop0 08E4      __size_of_Switch_Initialization 0001  
     __end_of_Switch_Initialization 0886                   __end_of_setLights 0F69  
              end_of_initialization 002B                          _setSw_Main 0395  
                     _getCDS_Status 08DB                ?_SYSC_Initialization 0075  
             _setLED_Initialization 0987                   setLights_SwOff@sw 005E  
                       ?_getLoad_AD 0075      __size_of_Lights_Initialization 0008  
                       ?_getLoad_OK 0075              ??_getMain_Lights_Count 0079  
     __end_of_Lights_Initialization 08D3                         ?_getTemp_AD 0075  
               __size_of_TouchPower 0014            setLED_Initialization@led 005D  
           setTemp_Main@DangerValue 0069                  _Mcu_Initialization 0946  
              __end_of_my_MainTimer 0B52                __end_of_setSYSC_Main 0D5A  
            __end_of_LedPointSelect 0AF1            Load_Main@ErrorCountValue 0066  
               ?_Mcu_Initialization 0075                    ??_setLights_Main 007A  
                  ??_setLights_Line 0079                setLights_Main@lights 0060  
                  ??_setLights_SwOn 007A                           _SYSC_Main 088D  
   getMain_All_Error_Status@command 005E                   __size_of_CDS_Main 0034  
                    ?_getCDS_Status 0075                    ?_setLights_SwOff 0075  
             ??_SYSC_Initialization 0079                    ??_Exception_Main 0066  
                    __end_of_IO_Set 0A88          __end_of_CDS_Initialization 089E  
                       _Switch_Main 08F6          ??_setLights_Initialization 007A  
                 __size_of_LED_Main 0004                    ?_getSw_KeyStatus 0075  
              ??_Mcu_Initialization 007A                       ?_WDT_Clearing 0075  
                 ?_getLights_Status 0075                      __end_of___bmul 09AC  
                      ?_Lights_Main 0075                   getSw_KeyStatus@sw 005B  
                 __size_of_PIR_Main 01A0                   __size_of_TMR1_ISR 0016  
                ??_getLights_Status 007A                   __size_of_TMR1_Set 000E  
                    __end_of_setLED 0E33                      __end_of_setBuz 0DE5  
          ??_setSYSC_Initialization 0079                   __size_of_WDT_Main 0011  
               start_initialization 0013                     ?_LedPointSelect 0075  
              setLights_Line@lights 0079                           _Load_Main 002E  
                       __end_of_ISR 0A58          __end_of_PIR_Initialization 08F6  
      __size_of_Load_Initialization 0003        __end_of_getLight_Load_Status 08B7  
   __size_of_setTemp_Initialization 0001                 getCDS_Status@status 0079  
              __end_of_setTemp_Main 1000                 __size_of_getLoad_AD 005C  
                      ?_Buzzer_Main 0075                 __size_of_getLoad_OK 0008  
                        ?_SYSC_Main 0075                  _set_TimeoutCleared 08B7  
                          ??_IO_Set 0079            __size_of_Timeout_Counter 0014  
                         _VarErrLED 0052                         ?_setSw_Main 0075  
               __size_of_getTemp_AD 0034              ?_setLED_Initialization 0075  
                 __size_of_Fosc_Set 0005            __size_of_getLight_LoadGO 0006  
                         _Temp_Main 0893                     setLights@lights 005F  
               ?_set_TimeoutCleared 0075                      ??_WDT_Clearing 0079  
       ??_getLights_Allow_Condition 005A                 Exception_Main@count 0068  
                   setLights@status 005D                 Exception_Main@error 0069  
                          ??___bmul 005A              __size_of_SwPointSelect 0013  
  __end_of_getMain_All_LightsStatus 0965                            ??_setLED 007A  
                          ?_ADC_Set 0075                    ??_Lights_Control 0062  
                          ??_setBuz 0064    __end_of_getMain_All_Error_Status 0CD8  
                     ??_setLED_Main 005B                         __pbssCOMMON 0070  
                         ___latbits 0001                          ?_Load_Main 0075  
                     __pcstackBANK0 005A                       __pcstackBANK2 0125  
              ??_set_TimeoutCleared 0079          __end_of_getAll_Lights_Line 0BC7  
                          ?_WDT_Set 0075                     ??_getCDS_Status 0079  
                      ??_TouchPower 0079                       PIR_Main@error 0064  
                         _getCDS_AD 0B0D      __size_of_setLoad_AH_AL_Restore 0018  
     __end_of_setLoad_AH_AL_Restore 0A70                           _getPIR_AD 04ED  
       __size_of_LED_Initialization 000C                     Exception_Main@i 006A  
                        ?_Temp_Main 0075                    ___lwdiv@dividend 005C  
                        setBuz@time 0062                      Load_Main@error 0063  
            _setTemp_Initialization 0886                       _PIR_Main$3204 0065  
                          ?___awdiv 005A               __size_of_my_MainTimer 0023  
                          ?___lwdiv 005A               __size_of_setSYSC_Main 0042  
    __size_of_Buzzer_Initialization 0004       __end_of_Buzzer_Initialization 089A  
                __end_of_TouchPower 09E7            setLights_Trigger@command 005B  
               __size_of_setSw_Main 0158     __size_of_setSYSC_Initialization 0004  
         _getLights_Allow_Condition 0A12      __size_of_myMain_Initialization 0001  
     __end_of_myMain_Initialization 0800                      __size_of_getAD 001C  
                  ___lwdiv@quotient 005F                       _SwPointSelect 09AC  
                          _CDS_Main 0BF7                 __end_of_setLED_Main 0C9A  
                       ??_SYSC_Main 007A         __end_of_Temp_Initialization 0893  
                 interrupt_function 0004                          ?_getCDS_AD 005B  
                          _LED_Main 089E                           _setLights 0EEC  
                   SwPointSelect@sw 0079                           clear_ram0 08E3  
           _getAll_Lights_Line$4755 005C    __end_of_setLights_Initialization 08C4  
                      _my_MainTimer 0B2F                          ?_getPIR_AD 0062  
                      _setSYSC_Main 0D18                            _GO_nDONE 00F9  
                 ??_Timeout_Counter 0079                PIR_Main@TriggerValue 0068  
                          _PIR_Main 01F5                        ??_getLoad_AD 005B  
                          _TMR1_ISR 09FC                        ??_getLoad_OK 0079  
              _getLight_Load_Status 08B1                            _TMR1_Set 091B  
                 ??_getLight_LoadGO 0079                        ??_getTemp_AD 005B  
                          _WDT_Main 0976               getSw_KeyStatus@status 005A  
                  __size_of_ADC_Set 0007                      getPIR_AD@VRAD1 0068  
              __size_of_Lights_Main 0026               __size_of_setTemp_Main 0097  
                      setSw_Main@sw 0064                         ??_Load_Main 0061  
    getMain_All_Error_Status@status 005F                      ?_SwPointSelect 0075  
                       getAD@adcon0 005A                         getAD@adcon1 0079  
                    setLED_Main@led 005D                __end_of_WDT_Clearing 0004  
 __size_of_getMain_All_LightsStatus 0010           ?_getMain_All_LightsStatus 0075  
                          _Fosc_Set 08A6                    __size_of_WDT_Set 000E  
                __end_of_getLoad_AD 0E8F                  __end_of_getLoad_OK 08DB  
             _Switch_Initialization 0885   __size_of_getMain_All_Error_Status 003E  
         ?_getMain_All_Error_Status 0075                __size_of_Buzzer_Main 0044  
                        ?_setLights 005D                  __end_of_getTemp_AD 0C5F  
            _setSYSC_Initialization 08A2                        ?_Switch_Main 0075  
                 getLoad_AD@channel 005D                   _DetectSYSC_Signal 090D  
                          _SwDetect 0041                         ??_Temp_Main 007A  
     _getMain_All_Error_Status$2404 005A       _getMain_All_Error_Status$2405 005C  
               _Load_Initialization 0887                  ?_DetectSYSC_Signal 0075  
                         setLED@led 005C               ?_getLight_Load_Status 0075  
                      _setTemp_Main 0F69                    __size_of___awdiv 005D  
    getLight_Load_Status@loadstatus 0079                    __size_of___lwdiv 0040  
                  ??_LedPointSelect 0079       __size_of_getMain_Lights_Count 000F  
               ??_DetectSYSC_Signal 0079                  _CDS_Initialization 089A  
             _Lights_Initialization 08CB                   getTemp_AD@channel 005D  
                       _setLED_Main 0C5F                     ___lwdiv@divisor 005A  
              ?_Load_Initialization 0075                 ?_CDS_Initialization 0075  
                   ___lwdiv@counter 005E                            __ptext10 0893  
                          __ptext11 0F69                            __ptext20 09BF  
                          __ptext12 0890                            __ptext21 0885  
                          __ptext13 0886                            __ptext30 0929  
                          __ptext22 088D                            __ptext14 08F6  
                          __ptext31 091B                            __ptext23 0D18  
                          __ptext15 0395                            __ptext40 0999  
                          __ptext32 0A70                            __ptext24 088A  
                          __ptext16 0A88                            __ptext41 0887  
                          __ptext33 08A6                            __ptext25 08A2  
                          __ptext17 09AC                            __ptext50 08CB  
                          __ptext42 0A58                            __ptext34 08C4  
                          __ptext26 01F5                            __ptext18 09D3  
                          __ptext51 08BD                            __ptext43 0B77  
                          __ptext35 002E                            __ptext27 08DB  
                          __ptext19 08B7                            __ptext60 0ABA  
                          __ptext52 089E                            __ptext44 0BC7  
                          __ptext36 0937                            __ptext28 08EB  
                          __ptext61 0DE5                            __ptext53 0C5F  
                          __ptext45 0EEC                            __ptext37 08B1  
                          __ptext29 0946                            __ptext70 0BF7  
                          __ptext62 0AD5                            __ptext54 0901  
                          __ptext46 0A29                            __ptext38 08AB  
                          __ptext71 089A                            __ptext63 0D9E  
                          __ptext55 0987                            __ptext47 0A12  
                          __ptext39 0CD8                            __ptext72 0D5A  
                          __ptext64 0E8F                            __ptext56 061B  
                          __ptext48 08D3                            __ptext73 0896  
                          __ptext65 0955                            __ptext57 0B52  
                          __ptext49 06F3                            __ptext74 0A40  
                          __ptext66 0C9A                            __ptext58 0965  
                          __ptext75 09FC                            __ptext67 0B9D  
                          __ptext59 0AA0                            __ptext68 09E7  
                          __ptext69 090D           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 088D             ??_setLED_Initialization 007A  
                       ??_getCDS_AD 005C                        ??_setSw_Main 0060  
                     setLED@command 005B           __end_of_DetectSYSC_Signal 091B  
                     __size_of_main 0072                         ??_getPIR_AD 0063  
                _PIR_Initialization 08EB                ??_CDS_Initialization 0079  
       __size_of_Mcu_Initialization 000F            __size_of_setLights_SwOff 001A  
                      getLoad_OK@ok 0079                 ?_PIR_Initialization 0075  
                          main@argc 0125                            main@argv 0127  
          __size_of_getSw_KeyStatus 0018   __size_of_setLights_Initialization 0007  
         ?_setLights_Initialization 0075                     ??_SwPointSelect 0079  
                __end_of_setSw_Main 04ED               ??_Load_Initialization 007A  
              Lights_Control@lights 0064                ??_PIR_Initialization 0079  
                          intlevel1 0000              ?_Switch_Initialization 0075  
__size_of_getLights_Allow_Condition 0017               setTemp_Main@SafeValue 0068  
                       ??_setLights 005E             ?_setTemp_Initialization 0075  
           LightsPointSelect@lights 005A                  _getAll_Lights_Line 0B9D  
                   getLoad_AD@ADRES 0060              ??_getLight_Load_Status 0079  
                       getLoad_AD@i 0061                         getLoad_AD@j 005F  
                       getLoad_AD@k 005E             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 0017             __size_of_setLights_SwOn 0025  
               ?_getAll_Lights_Line 0075               getLight_LoadGO@loadgo 0079  
            ?_Lights_Initialization 0075             __size_of_Exception_Main 00D8  
             __size_of_WDT_Clearing 0002      setLights_Initialization@lights 005B  
       __size_of_set_TimeoutCleared 0006                   _LightsPointSelect 09E7  
              ??_getAll_Lights_Line 005B                  __CFG_FOSC$INTOSCIO 0000  
                ?_LightsPointSelect 0075                     _Timeout_Counter 09BF  
        __end_of_LED_Initialization 090D               __end_of_getCDS_Status 08E3  
    __end_of_setTemp_Initialization 0887          __size_of_DetectSYSC_Signal 000E  
                   _getLight_LoadGO 08AB                   getCDS_AD@channel1 0060  
                 getCDS_AD@channel2 005B   __end_of_getLights_Allow_Condition 0A29  
               ??_LightsPointSelect 0079               _setLoad_AH_AL_Restore 0A58  
