

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Jan 14 17:29:23 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,delta=2
    67                           	psect	intentry,global,class=CODE,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    69                           	dabs	1,0x7E,2
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  000C                     	;# 
    82  000D                     	;# 
    83  000E                     	;# 
    84  000E                     	;# 
    85  000F                     	;# 
    86  0010                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0013                     	;# 
    90  0014                     	;# 
    91  0015                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  001D                     	;# 
   102  001E                     	;# 
   103  001F                     	;# 
   104  0081                     	;# 
   105  0085                     	;# 
   106  0086                     	;# 
   107  0087                     	;# 
   108  0089                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  008F                     	;# 
   113  0090                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0094                     	;# 
   119  0095                     	;# 
   120  0095                     	;# 
   121  0096                     	;# 
   122  0096                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009F                     	;# 
   128  0108                     	;# 
   129  0109                     	;# 
   130  010C                     	;# 
   131  010C                     	;# 
   132  010D                     	;# 
   133  010D                     	;# 
   134  010E                     	;# 
   135  010F                     	;# 
   136  0185                     	;# 
   137  0186                     	;# 
   138  018C                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  000E                     	;# 
   154  000F                     	;# 
   155  0010                     	;# 
   156  0011                     	;# 
   157  0012                     	;# 
   158  0013                     	;# 
   159  0014                     	;# 
   160  0015                     	;# 
   161  0015                     	;# 
   162  0016                     	;# 
   163  0017                     	;# 
   164  0018                     	;# 
   165  0019                     	;# 
   166  001A                     	;# 
   167  001B                     	;# 
   168  001B                     	;# 
   169  001C                     	;# 
   170  001D                     	;# 
   171  001E                     	;# 
   172  001F                     	;# 
   173  0081                     	;# 
   174  0085                     	;# 
   175  0086                     	;# 
   176  0087                     	;# 
   177  0089                     	;# 
   178  008C                     	;# 
   179  008D                     	;# 
   180  008E                     	;# 
   181  008F                     	;# 
   182  0090                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0093                     	;# 
   187  0094                     	;# 
   188  0095                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0096                     	;# 
   192  0098                     	;# 
   193  0099                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009F                     	;# 
   197  0108                     	;# 
   198  0109                     	;# 
   199  010C                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  0185                     	;# 
   206  0186                     	;# 
   207  018C                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000D                     	;# 
   221  000E                     	;# 
   222  000E                     	;# 
   223  000F                     	;# 
   224  0010                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0014                     	;# 
   229  0015                     	;# 
   230  0015                     	;# 
   231  0016                     	;# 
   232  0017                     	;# 
   233  0018                     	;# 
   234  0019                     	;# 
   235  001A                     	;# 
   236  001B                     	;# 
   237  001B                     	;# 
   238  001C                     	;# 
   239  001D                     	;# 
   240  001E                     	;# 
   241  001F                     	;# 
   242  0081                     	;# 
   243  0085                     	;# 
   244  0086                     	;# 
   245  0087                     	;# 
   246  0089                     	;# 
   247  008C                     	;# 
   248  008D                     	;# 
   249  008E                     	;# 
   250  008F                     	;# 
   251  0090                     	;# 
   252  0091                     	;# 
   253  0092                     	;# 
   254  0093                     	;# 
   255  0093                     	;# 
   256  0094                     	;# 
   257  0095                     	;# 
   258  0095                     	;# 
   259  0096                     	;# 
   260  0096                     	;# 
   261  0098                     	;# 
   262  0099                     	;# 
   263  009C                     	;# 
   264  009D                     	;# 
   265  009F                     	;# 
   266  0108                     	;# 
   267  0109                     	;# 
   268  010C                     	;# 
   269  010C                     	;# 
   270  010D                     	;# 
   271  010D                     	;# 
   272  010E                     	;# 
   273  010F                     	;# 
   274  0185                     	;# 
   275  0186                     	;# 
   276  018C                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0009                     	;# 
   286  000A                     	;# 
   287  000B                     	;# 
   288  000C                     	;# 
   289  000D                     	;# 
   290  000E                     	;# 
   291  000E                     	;# 
   292  000F                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0013                     	;# 
   297  0014                     	;# 
   298  0015                     	;# 
   299  0015                     	;# 
   300  0016                     	;# 
   301  0017                     	;# 
   302  0018                     	;# 
   303  0019                     	;# 
   304  001A                     	;# 
   305  001B                     	;# 
   306  001B                     	;# 
   307  001C                     	;# 
   308  001D                     	;# 
   309  001E                     	;# 
   310  001F                     	;# 
   311  0081                     	;# 
   312  0085                     	;# 
   313  0086                     	;# 
   314  0087                     	;# 
   315  0089                     	;# 
   316  008C                     	;# 
   317  008D                     	;# 
   318  008E                     	;# 
   319  008F                     	;# 
   320  0090                     	;# 
   321  0091                     	;# 
   322  0092                     	;# 
   323  0093                     	;# 
   324  0093                     	;# 
   325  0094                     	;# 
   326  0095                     	;# 
   327  0095                     	;# 
   328  0096                     	;# 
   329  0096                     	;# 
   330  0098                     	;# 
   331  0099                     	;# 
   332  009C                     	;# 
   333  009D                     	;# 
   334  009F                     	;# 
   335  0108                     	;# 
   336  0109                     	;# 
   337  010C                     	;# 
   338  010C                     	;# 
   339  010D                     	;# 
   340  010D                     	;# 
   341  010E                     	;# 
   342  010F                     	;# 
   343  0185                     	;# 
   344  0186                     	;# 
   345  018C                     	;# 
   346  0000                     	;# 
   347  0001                     	;# 
   348  0002                     	;# 
   349  0003                     	;# 
   350  0004                     	;# 
   351  0005                     	;# 
   352  0006                     	;# 
   353  0007                     	;# 
   354  0009                     	;# 
   355  000A                     	;# 
   356  000B                     	;# 
   357  000C                     	;# 
   358  000D                     	;# 
   359  000E                     	;# 
   360  000E                     	;# 
   361  000F                     	;# 
   362  0010                     	;# 
   363  0011                     	;# 
   364  0012                     	;# 
   365  0013                     	;# 
   366  0014                     	;# 
   367  0015                     	;# 
   368  0015                     	;# 
   369  0016                     	;# 
   370  0017                     	;# 
   371  0018                     	;# 
   372  0019                     	;# 
   373  001A                     	;# 
   374  001B                     	;# 
   375  001B                     	;# 
   376  001C                     	;# 
   377  001D                     	;# 
   378  001E                     	;# 
   379  001F                     	;# 
   380  0081                     	;# 
   381  0085                     	;# 
   382  0086                     	;# 
   383  0087                     	;# 
   384  0089                     	;# 
   385  008C                     	;# 
   386  008D                     	;# 
   387  008E                     	;# 
   388  008F                     	;# 
   389  0090                     	;# 
   390  0091                     	;# 
   391  0092                     	;# 
   392  0093                     	;# 
   393  0093                     	;# 
   394  0094                     	;# 
   395  0095                     	;# 
   396  0095                     	;# 
   397  0096                     	;# 
   398  0096                     	;# 
   399  0098                     	;# 
   400  0099                     	;# 
   401  009C                     	;# 
   402  009D                     	;# 
   403  009F                     	;# 
   404  0108                     	;# 
   405  0109                     	;# 
   406  010C                     	;# 
   407  010C                     	;# 
   408  010D                     	;# 
   409  010D                     	;# 
   410  010E                     	;# 
   411  010F                     	;# 
   412  0185                     	;# 
   413  0186                     	;# 
   414  018C                     	;# 
   415  0000                     	;# 
   416  0001                     	;# 
   417  0002                     	;# 
   418  0003                     	;# 
   419  0004                     	;# 
   420  0005                     	;# 
   421  0006                     	;# 
   422  0007                     	;# 
   423  0009                     	;# 
   424  000A                     	;# 
   425  000B                     	;# 
   426  000C                     	;# 
   427  000D                     	;# 
   428  000E                     	;# 
   429  000E                     	;# 
   430  000F                     	;# 
   431  0010                     	;# 
   432  0011                     	;# 
   433  0012                     	;# 
   434  0013                     	;# 
   435  0014                     	;# 
   436  0015                     	;# 
   437  0015                     	;# 
   438  0016                     	;# 
   439  0017                     	;# 
   440  0018                     	;# 
   441  0019                     	;# 
   442  001A                     	;# 
   443  001B                     	;# 
   444  001B                     	;# 
   445  001C                     	;# 
   446  001D                     	;# 
   447  001E                     	;# 
   448  001F                     	;# 
   449  0081                     	;# 
   450  0085                     	;# 
   451  0086                     	;# 
   452  0087                     	;# 
   453  0089                     	;# 
   454  008C                     	;# 
   455  008D                     	;# 
   456  008E                     	;# 
   457  008F                     	;# 
   458  0090                     	;# 
   459  0091                     	;# 
   460  0092                     	;# 
   461  0093                     	;# 
   462  0093                     	;# 
   463  0094                     	;# 
   464  0095                     	;# 
   465  0095                     	;# 
   466  0096                     	;# 
   467  0096                     	;# 
   468  0098                     	;# 
   469  0099                     	;# 
   470  009C                     	;# 
   471  009D                     	;# 
   472  009F                     	;# 
   473  0108                     	;# 
   474  0109                     	;# 
   475  010C                     	;# 
   476  010C                     	;# 
   477  010D                     	;# 
   478  010D                     	;# 
   479  010E                     	;# 
   480  010F                     	;# 
   481  0185                     	;# 
   482  0186                     	;# 
   483  018C                     	;# 
   484  0000                     	;# 
   485  0001                     	;# 
   486  0002                     	;# 
   487  0003                     	;# 
   488  0004                     	;# 
   489  0005                     	;# 
   490  0006                     	;# 
   491  0007                     	;# 
   492  0009                     	;# 
   493  000A                     	;# 
   494  000B                     	;# 
   495  000C                     	;# 
   496  000D                     	;# 
   497  000E                     	;# 
   498  000E                     	;# 
   499  000F                     	;# 
   500  0010                     	;# 
   501  0011                     	;# 
   502  0012                     	;# 
   503  0013                     	;# 
   504  0014                     	;# 
   505  0015                     	;# 
   506  0015                     	;# 
   507  0016                     	;# 
   508  0017                     	;# 
   509  0018                     	;# 
   510  0019                     	;# 
   511  001A                     	;# 
   512  001B                     	;# 
   513  001B                     	;# 
   514  001C                     	;# 
   515  001D                     	;# 
   516  001E                     	;# 
   517  001F                     	;# 
   518  0081                     	;# 
   519  0085                     	;# 
   520  0086                     	;# 
   521  0087                     	;# 
   522  0089                     	;# 
   523  008C                     	;# 
   524  008D                     	;# 
   525  008E                     	;# 
   526  008F                     	;# 
   527  0090                     	;# 
   528  0091                     	;# 
   529  0092                     	;# 
   530  0093                     	;# 
   531  0093                     	;# 
   532  0094                     	;# 
   533  0095                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0096                     	;# 
   537  0098                     	;# 
   538  0099                     	;# 
   539  009C                     	;# 
   540  009D                     	;# 
   541  009F                     	;# 
   542  0108                     	;# 
   543  0109                     	;# 
   544  010C                     	;# 
   545  010C                     	;# 
   546  010D                     	;# 
   547  010D                     	;# 
   548  010E                     	;# 
   549  010F                     	;# 
   550  0185                     	;# 
   551  0186                     	;# 
   552  018C                     	;# 
   553  0000                     	;# 
   554  0001                     	;# 
   555  0002                     	;# 
   556  0003                     	;# 
   557  0004                     	;# 
   558  0005                     	;# 
   559  0006                     	;# 
   560  0007                     	;# 
   561  0009                     	;# 
   562  000A                     	;# 
   563  000B                     	;# 
   564  000C                     	;# 
   565  000D                     	;# 
   566  000E                     	;# 
   567  000E                     	;# 
   568  000F                     	;# 
   569  0010                     	;# 
   570  0011                     	;# 
   571  0012                     	;# 
   572  0013                     	;# 
   573  0014                     	;# 
   574  0015                     	;# 
   575  0015                     	;# 
   576  0016                     	;# 
   577  0017                     	;# 
   578  0018                     	;# 
   579  0019                     	;# 
   580  001A                     	;# 
   581  001B                     	;# 
   582  001B                     	;# 
   583  001C                     	;# 
   584  001D                     	;# 
   585  001E                     	;# 
   586  001F                     	;# 
   587  0081                     	;# 
   588  0085                     	;# 
   589  0086                     	;# 
   590  0087                     	;# 
   591  0089                     	;# 
   592  008C                     	;# 
   593  008D                     	;# 
   594  008E                     	;# 
   595  008F                     	;# 
   596  0090                     	;# 
   597  0091                     	;# 
   598  0092                     	;# 
   599  0093                     	;# 
   600  0093                     	;# 
   601  0094                     	;# 
   602  0095                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0096                     	;# 
   606  0098                     	;# 
   607  0099                     	;# 
   608  009C                     	;# 
   609  009D                     	;# 
   610  009F                     	;# 
   611  0108                     	;# 
   612  0109                     	;# 
   613  010C                     	;# 
   614  010C                     	;# 
   615  010D                     	;# 
   616  010D                     	;# 
   617  010E                     	;# 
   618  010F                     	;# 
   619  0185                     	;# 
   620  0186                     	;# 
   621  018C                     	;# 
   622  0000                     	;# 
   623  0001                     	;# 
   624  0002                     	;# 
   625  0003                     	;# 
   626  0004                     	;# 
   627  0005                     	;# 
   628  0006                     	;# 
   629  0007                     	;# 
   630  0009                     	;# 
   631  000A                     	;# 
   632  000B                     	;# 
   633  000C                     	;# 
   634  000D                     	;# 
   635  000E                     	;# 
   636  000E                     	;# 
   637  000F                     	;# 
   638  0010                     	;# 
   639  0011                     	;# 
   640  0012                     	;# 
   641  0013                     	;# 
   642  0014                     	;# 
   643  0015                     	;# 
   644  0015                     	;# 
   645  0016                     	;# 
   646  0017                     	;# 
   647  0018                     	;# 
   648  0019                     	;# 
   649  001A                     	;# 
   650  001B                     	;# 
   651  001B                     	;# 
   652  001C                     	;# 
   653  001D                     	;# 
   654  001E                     	;# 
   655  001F                     	;# 
   656  0081                     	;# 
   657  0085                     	;# 
   658  0086                     	;# 
   659  0087                     	;# 
   660  0089                     	;# 
   661  008C                     	;# 
   662  008D                     	;# 
   663  008E                     	;# 
   664  008F                     	;# 
   665  0090                     	;# 
   666  0091                     	;# 
   667  0092                     	;# 
   668  0093                     	;# 
   669  0093                     	;# 
   670  0094                     	;# 
   671  0095                     	;# 
   672  0095                     	;# 
   673  0096                     	;# 
   674  0096                     	;# 
   675  0098                     	;# 
   676  0099                     	;# 
   677  009C                     	;# 
   678  009D                     	;# 
   679  009F                     	;# 
   680  0108                     	;# 
   681  0109                     	;# 
   682  010C                     	;# 
   683  010C                     	;# 
   684  010D                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  010F                     	;# 
   688  0185                     	;# 
   689  0186                     	;# 
   690  018C                     	;# 
   691  0000                     	;# 
   692  0001                     	;# 
   693  0002                     	;# 
   694  0003                     	;# 
   695  0004                     	;# 
   696  0005                     	;# 
   697  0006                     	;# 
   698  0007                     	;# 
   699  0009                     	;# 
   700  000A                     	;# 
   701  000B                     	;# 
   702  000C                     	;# 
   703  000D                     	;# 
   704  000E                     	;# 
   705  000E                     	;# 
   706  000F                     	;# 
   707  0010                     	;# 
   708  0011                     	;# 
   709  0012                     	;# 
   710  0013                     	;# 
   711  0014                     	;# 
   712  0015                     	;# 
   713  0015                     	;# 
   714  0016                     	;# 
   715  0017                     	;# 
   716  0018                     	;# 
   717  0019                     	;# 
   718  001A                     	;# 
   719  001B                     	;# 
   720  001B                     	;# 
   721  001C                     	;# 
   722  001D                     	;# 
   723  001E                     	;# 
   724  001F                     	;# 
   725  0081                     	;# 
   726  0085                     	;# 
   727  0086                     	;# 
   728  0087                     	;# 
   729  0089                     	;# 
   730  008C                     	;# 
   731  008D                     	;# 
   732  008E                     	;# 
   733  008F                     	;# 
   734  0090                     	;# 
   735  0091                     	;# 
   736  0092                     	;# 
   737  0093                     	;# 
   738  0093                     	;# 
   739  0094                     	;# 
   740  0095                     	;# 
   741  0095                     	;# 
   742  0096                     	;# 
   743  0096                     	;# 
   744  0098                     	;# 
   745  0099                     	;# 
   746  009C                     	;# 
   747  009D                     	;# 
   748  009F                     	;# 
   749  0108                     	;# 
   750  0109                     	;# 
   751  010C                     	;# 
   752  010C                     	;# 
   753  010D                     	;# 
   754  010D                     	;# 
   755  010E                     	;# 
   756  010F                     	;# 
   757  0185                     	;# 
   758  0186                     	;# 
   759  018C                     	;# 
   760  0000                     	;# 
   761  0001                     	;# 
   762  0002                     	;# 
   763  0003                     	;# 
   764  0004                     	;# 
   765  0005                     	;# 
   766  0006                     	;# 
   767  0007                     	;# 
   768  0009                     	;# 
   769  000A                     	;# 
   770  000B                     	;# 
   771  000C                     	;# 
   772  000D                     	;# 
   773  000E                     	;# 
   774  000E                     	;# 
   775  000F                     	;# 
   776  0010                     	;# 
   777  0011                     	;# 
   778  0012                     	;# 
   779  0013                     	;# 
   780  0014                     	;# 
   781  0015                     	;# 
   782  0015                     	;# 
   783  0016                     	;# 
   784  0017                     	;# 
   785  0018                     	;# 
   786  0019                     	;# 
   787  001A                     	;# 
   788  001B                     	;# 
   789  001B                     	;# 
   790  001C                     	;# 
   791  001D                     	;# 
   792  001E                     	;# 
   793  001F                     	;# 
   794  0081                     	;# 
   795  0085                     	;# 
   796  0086                     	;# 
   797  0087                     	;# 
   798  0089                     	;# 
   799  008C                     	;# 
   800  008D                     	;# 
   801  008E                     	;# 
   802  008F                     	;# 
   803  0090                     	;# 
   804  0091                     	;# 
   805  0092                     	;# 
   806  0093                     	;# 
   807  0093                     	;# 
   808  0094                     	;# 
   809  0095                     	;# 
   810  0095                     	;# 
   811  0096                     	;# 
   812  0096                     	;# 
   813  0098                     	;# 
   814  0099                     	;# 
   815  009C                     	;# 
   816  009D                     	;# 
   817  009F                     	;# 
   818  0108                     	;# 
   819  0109                     	;# 
   820  010C                     	;# 
   821  010C                     	;# 
   822  010D                     	;# 
   823  010D                     	;# 
   824  010E                     	;# 
   825  010F                     	;# 
   826  0185                     	;# 
   827  0186                     	;# 
   828  018C                     	;# 
   829  0000                     	;# 
   830  0001                     	;# 
   831  0002                     	;# 
   832  0003                     	;# 
   833  0004                     	;# 
   834  0005                     	;# 
   835  0006                     	;# 
   836  0007                     	;# 
   837  0009                     	;# 
   838  000A                     	;# 
   839  000B                     	;# 
   840  000C                     	;# 
   841  000D                     	;# 
   842  000E                     	;# 
   843  000E                     	;# 
   844  000F                     	;# 
   845  0010                     	;# 
   846  0011                     	;# 
   847  0012                     	;# 
   848  0013                     	;# 
   849  0014                     	;# 
   850  0015                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0017                     	;# 
   854  0018                     	;# 
   855  0019                     	;# 
   856  001A                     	;# 
   857  001B                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  001D                     	;# 
   861  001E                     	;# 
   862  001F                     	;# 
   863  0081                     	;# 
   864  0085                     	;# 
   865  0086                     	;# 
   866  0087                     	;# 
   867  0089                     	;# 
   868  008C                     	;# 
   869  008D                     	;# 
   870  008E                     	;# 
   871  008F                     	;# 
   872  0090                     	;# 
   873  0091                     	;# 
   874  0092                     	;# 
   875  0093                     	;# 
   876  0093                     	;# 
   877  0094                     	;# 
   878  0095                     	;# 
   879  0095                     	;# 
   880  0096                     	;# 
   881  0096                     	;# 
   882  0098                     	;# 
   883  0099                     	;# 
   884  009C                     	;# 
   885  009D                     	;# 
   886  009F                     	;# 
   887  0108                     	;# 
   888  0109                     	;# 
   889  010C                     	;# 
   890  010C                     	;# 
   891  010D                     	;# 
   892  010D                     	;# 
   893  010E                     	;# 
   894  010F                     	;# 
   895  0185                     	;# 
   896  0186                     	;# 
   897  018C                     	;# 
   898  0000                     	;# 
   899  0001                     	;# 
   900  0002                     	;# 
   901  0003                     	;# 
   902  0004                     	;# 
   903  0005                     	;# 
   904  0006                     	;# 
   905  0007                     	;# 
   906  0009                     	;# 
   907  000A                     	;# 
   908  000B                     	;# 
   909  000C                     	;# 
   910  000D                     	;# 
   911  000E                     	;# 
   912  000E                     	;# 
   913  000F                     	;# 
   914  0010                     	;# 
   915  0011                     	;# 
   916  0012                     	;# 
   917  0013                     	;# 
   918  0014                     	;# 
   919  0015                     	;# 
   920  0015                     	;# 
   921  0016                     	;# 
   922  0017                     	;# 
   923  0018                     	;# 
   924  0019                     	;# 
   925  001A                     	;# 
   926  001B                     	;# 
   927  001B                     	;# 
   928  001C                     	;# 
   929  001D                     	;# 
   930  001E                     	;# 
   931  001F                     	;# 
   932  0081                     	;# 
   933  0085                     	;# 
   934  0086                     	;# 
   935  0087                     	;# 
   936  0089                     	;# 
   937  008C                     	;# 
   938  008D                     	;# 
   939  008E                     	;# 
   940  008F                     	;# 
   941  0090                     	;# 
   942  0091                     	;# 
   943  0092                     	;# 
   944  0093                     	;# 
   945  0093                     	;# 
   946  0094                     	;# 
   947  0095                     	;# 
   948  0095                     	;# 
   949  0096                     	;# 
   950  0096                     	;# 
   951  0098                     	;# 
   952  0099                     	;# 
   953  009C                     	;# 
   954  009D                     	;# 
   955  009F                     	;# 
   956  0108                     	;# 
   957  0109                     	;# 
   958  010C                     	;# 
   959  010C                     	;# 
   960  010D                     	;# 
   961  010D                     	;# 
   962  010E                     	;# 
   963  010F                     	;# 
   964  0185                     	;# 
   965  0186                     	;# 
   966  018C                     	;# 
   967  0000                     	;# 
   968  0001                     	;# 
   969  0002                     	;# 
   970  0003                     	;# 
   971  0004                     	;# 
   972  0005                     	;# 
   973  0006                     	;# 
   974  0007                     	;# 
   975  0009                     	;# 
   976  000A                     	;# 
   977  000B                     	;# 
   978  000C                     	;# 
   979  000D                     	;# 
   980  000E                     	;# 
   981  000E                     	;# 
   982  000F                     	;# 
   983  0010                     	;# 
   984  0011                     	;# 
   985  0012                     	;# 
   986  0013                     	;# 
   987  0014                     	;# 
   988  0015                     	;# 
   989  0015                     	;# 
   990  0016                     	;# 
   991  0017                     	;# 
   992  0018                     	;# 
   993  0019                     	;# 
   994  001A                     	;# 
   995  001B                     	;# 
   996  001B                     	;# 
   997  001C                     	;# 
   998  001D                     	;# 
   999  001E                     	;# 
  1000  001F                     	;# 
  1001  0081                     	;# 
  1002  0085                     	;# 
  1003  0086                     	;# 
  1004  0087                     	;# 
  1005  0089                     	;# 
  1006  008C                     	;# 
  1007  008D                     	;# 
  1008  008E                     	;# 
  1009  008F                     	;# 
  1010  0090                     	;# 
  1011  0091                     	;# 
  1012  0092                     	;# 
  1013  0093                     	;# 
  1014  0093                     	;# 
  1015  0094                     	;# 
  1016  0095                     	;# 
  1017  0095                     	;# 
  1018  0096                     	;# 
  1019  0096                     	;# 
  1020  0098                     	;# 
  1021  0099                     	;# 
  1022  009C                     	;# 
  1023  009D                     	;# 
  1024  009F                     	;# 
  1025  0108                     	;# 
  1026  0109                     	;# 
  1027  010C                     	;# 
  1028  010C                     	;# 
  1029  010D                     	;# 
  1030  010D                     	;# 
  1031  010E                     	;# 
  1032  010F                     	;# 
  1033  0185                     	;# 
  1034  0186                     	;# 
  1035  018C                     	;# 
  1036  0000                     	;# 
  1037  0001                     	;# 
  1038  0002                     	;# 
  1039  0003                     	;# 
  1040  0004                     	;# 
  1041  0005                     	;# 
  1042  0006                     	;# 
  1043  0007                     	;# 
  1044  0009                     	;# 
  1045  000A                     	;# 
  1046  000B                     	;# 
  1047  000C                     	;# 
  1048  000D                     	;# 
  1049  000E                     	;# 
  1050  000E                     	;# 
  1051  000F                     	;# 
  1052  0010                     	;# 
  1053  0011                     	;# 
  1054  0012                     	;# 
  1055  0013                     	;# 
  1056  0014                     	;# 
  1057  0015                     	;# 
  1058  0015                     	;# 
  1059  0016                     	;# 
  1060  0017                     	;# 
  1061  0018                     	;# 
  1062  0019                     	;# 
  1063  001A                     	;# 
  1064  001B                     	;# 
  1065  001B                     	;# 
  1066  001C                     	;# 
  1067  001D                     	;# 
  1068  001E                     	;# 
  1069  001F                     	;# 
  1070  0081                     	;# 
  1071  0085                     	;# 
  1072  0086                     	;# 
  1073  0087                     	;# 
  1074  0089                     	;# 
  1075  008C                     	;# 
  1076  008D                     	;# 
  1077  008E                     	;# 
  1078  008F                     	;# 
  1079  0090                     	;# 
  1080  0091                     	;# 
  1081  0092                     	;# 
  1082  0093                     	;# 
  1083  0093                     	;# 
  1084  0094                     	;# 
  1085  0095                     	;# 
  1086  0095                     	;# 
  1087  0096                     	;# 
  1088  0096                     	;# 
  1089  0098                     	;# 
  1090  0099                     	;# 
  1091  009C                     	;# 
  1092  009D                     	;# 
  1093  009F                     	;# 
  1094  0108                     	;# 
  1095  0109                     	;# 
  1096  010C                     	;# 
  1097  010C                     	;# 
  1098  010D                     	;# 
  1099  010D                     	;# 
  1100  010E                     	;# 
  1101  010F                     	;# 
  1102  0185                     	;# 
  1103  0186                     	;# 
  1104  018C                     	;# 
  1105  0000                     	;# 
  1106  0001                     	;# 
  1107  0002                     	;# 
  1108  0003                     	;# 
  1109  0004                     	;# 
  1110  0005                     	;# 
  1111  0006                     	;# 
  1112  0007                     	;# 
  1113  0009                     	;# 
  1114  000A                     	;# 
  1115  000B                     	;# 
  1116  000C                     	;# 
  1117  000D                     	;# 
  1118  000E                     	;# 
  1119  000E                     	;# 
  1120  000F                     	;# 
  1121  0010                     	;# 
  1122  0011                     	;# 
  1123  0012                     	;# 
  1124  0013                     	;# 
  1125  0014                     	;# 
  1126  0015                     	;# 
  1127  0015                     	;# 
  1128  0016                     	;# 
  1129  0017                     	;# 
  1130  0018                     	;# 
  1131  0019                     	;# 
  1132  001A                     	;# 
  1133  001B                     	;# 
  1134  001B                     	;# 
  1135  001C                     	;# 
  1136  001D                     	;# 
  1137  001E                     	;# 
  1138  001F                     	;# 
  1139  0081                     	;# 
  1140  0085                     	;# 
  1141  0086                     	;# 
  1142  0087                     	;# 
  1143  0089                     	;# 
  1144  008C                     	;# 
  1145  008D                     	;# 
  1146  008E                     	;# 
  1147  008F                     	;# 
  1148  0090                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0093                     	;# 
  1152  0093                     	;# 
  1153  0094                     	;# 
  1154  0095                     	;# 
  1155  0095                     	;# 
  1156  0096                     	;# 
  1157  0096                     	;# 
  1158  0098                     	;# 
  1159  0099                     	;# 
  1160  009C                     	;# 
  1161  009D                     	;# 
  1162  009F                     	;# 
  1163  0108                     	;# 
  1164  0109                     	;# 
  1165  010C                     	;# 
  1166  010C                     	;# 
  1167  010D                     	;# 
  1168  010D                     	;# 
  1169  010E                     	;# 
  1170  010F                     	;# 
  1171  0185                     	;# 
  1172  0186                     	;# 
  1173  018C                     	;# 
  1174  0000                     	;# 
  1175  0001                     	;# 
  1176  0002                     	;# 
  1177  0003                     	;# 
  1178  0004                     	;# 
  1179  0005                     	;# 
  1180  0006                     	;# 
  1181  0007                     	;# 
  1182  0009                     	;# 
  1183  000A                     	;# 
  1184  000B                     	;# 
  1185  000C                     	;# 
  1186  000D                     	;# 
  1187  000E                     	;# 
  1188  000E                     	;# 
  1189  000F                     	;# 
  1190  0010                     	;# 
  1191  0011                     	;# 
  1192  0012                     	;# 
  1193  0013                     	;# 
  1194  0014                     	;# 
  1195  0015                     	;# 
  1196  0015                     	;# 
  1197  0016                     	;# 
  1198  0017                     	;# 
  1199  0018                     	;# 
  1200  0019                     	;# 
  1201  001A                     	;# 
  1202  001B                     	;# 
  1203  001B                     	;# 
  1204  001C                     	;# 
  1205  001D                     	;# 
  1206  001E                     	;# 
  1207  001F                     	;# 
  1208  0081                     	;# 
  1209  0085                     	;# 
  1210  0086                     	;# 
  1211  0087                     	;# 
  1212  0089                     	;# 
  1213  008C                     	;# 
  1214  008D                     	;# 
  1215  008E                     	;# 
  1216  008F                     	;# 
  1217  0090                     	;# 
  1218  0091                     	;# 
  1219  0092                     	;# 
  1220  0093                     	;# 
  1221  0093                     	;# 
  1222  0094                     	;# 
  1223  0095                     	;# 
  1224  0095                     	;# 
  1225  0096                     	;# 
  1226  0096                     	;# 
  1227  0098                     	;# 
  1228  0099                     	;# 
  1229  009C                     	;# 
  1230  009D                     	;# 
  1231  009F                     	;# 
  1232  0108                     	;# 
  1233  0109                     	;# 
  1234  010C                     	;# 
  1235  010C                     	;# 
  1236  010D                     	;# 
  1237  010D                     	;# 
  1238  010E                     	;# 
  1239  010F                     	;# 
  1240  0185                     	;# 
  1241  0186                     	;# 
  1242  018C                     	;# 
  1243  0000                     	;# 
  1244  0001                     	;# 
  1245  0002                     	;# 
  1246  0003                     	;# 
  1247  0004                     	;# 
  1248  0005                     	;# 
  1249  0006                     	;# 
  1250  0007                     	;# 
  1251  0009                     	;# 
  1252  000A                     	;# 
  1253  000B                     	;# 
  1254  000C                     	;# 
  1255  000D                     	;# 
  1256  000E                     	;# 
  1257  000E                     	;# 
  1258  000F                     	;# 
  1259  0010                     	;# 
  1260  0011                     	;# 
  1261  0012                     	;# 
  1262  0013                     	;# 
  1263  0014                     	;# 
  1264  0015                     	;# 
  1265  0015                     	;# 
  1266  0016                     	;# 
  1267  0017                     	;# 
  1268  0018                     	;# 
  1269  0019                     	;# 
  1270  001A                     	;# 
  1271  001B                     	;# 
  1272  001B                     	;# 
  1273  001C                     	;# 
  1274  001D                     	;# 
  1275  001E                     	;# 
  1276  001F                     	;# 
  1277  0081                     	;# 
  1278  0085                     	;# 
  1279  0086                     	;# 
  1280  0087                     	;# 
  1281  0089                     	;# 
  1282  008C                     	;# 
  1283  008D                     	;# 
  1284  008E                     	;# 
  1285  008F                     	;# 
  1286  0090                     	;# 
  1287  0091                     	;# 
  1288  0092                     	;# 
  1289  0093                     	;# 
  1290  0093                     	;# 
  1291  0094                     	;# 
  1292  0095                     	;# 
  1293  0095                     	;# 
  1294  0096                     	;# 
  1295  0096                     	;# 
  1296  0098                     	;# 
  1297  0099                     	;# 
  1298  009C                     	;# 
  1299  009D                     	;# 
  1300  009F                     	;# 
  1301  0108                     	;# 
  1302  0109                     	;# 
  1303  010C                     	;# 
  1304  010C                     	;# 
  1305  010D                     	;# 
  1306  010D                     	;# 
  1307  010E                     	;# 
  1308  010F                     	;# 
  1309  0185                     	;# 
  1310  0186                     	;# 
  1311  018C                     	;# 
  1312  001F                     _ADCON0	set	31
  1313  001E                     _ADRES	set	30
  1314  0005                     _PORTA	set	5
  1315  0006                     _PORTB	set	6
  1316  0007                     _PORTC	set	7
  1317  0010                     _T1CON	set	16
  1318  000F                     _TMR1H	set	15
  1319  000E                     _TMR1L	set	14
  1320  005F                     _GIE	set	95
  1321  00F9                     _GO_nDONE	set	249
  1322  005E                     _PEIE	set	94
  1323  002E                     _RA6	set	46
  1324  002F                     _RA7	set	47
  1325  0034                     _RB4	set	52
  1326  0035                     _RB5	set	53
  1327  0038                     _RC0	set	56
  1328  0039                     _RC1	set	57
  1329  003C                     _RC4	set	60
  1330  003D                     _RC5	set	61
  1331  003E                     _RC6	set	62
  1332  003F                     _RC7	set	63
  1333  0060                     _TMR1IF	set	96
  1334  009F                     _ADCON1	set	159
  1335  009D                     _FVRCON	set	157
  1336  0090                     _OSCCON	set	144
  1337  0085                     _TRISA	set	133
  1338  0086                     _TRISB	set	134
  1339  0087                     _TRISC	set	135
  1340  0095                     _WPUB	set	149
  1341  0408                     _PS0	set	1032
  1342  0409                     _PS1	set	1033
  1343  040A                     _PS2	set	1034
  1344  040B                     _PSA	set	1035
  1345  0460                     _TMR1IE	set	1120
  1346  0185                     _ANSELA	set	389
  1347  0186                     _ANSELB	set	390
  1348                           
  1349                           	psect	text0
  1350  0000                     __ptext0:	
  1351                           ; #config settings
  1352                           
  1353                           
  1354                           ;psect for function _TMR1_ISR
  1355  0000                     
  1356                           	psect	cinit
  1357  0013                     start_initialization:	
  1358  0013                     __initialization:	
  1359                           
  1360                           ; Clear objects allocated to COMMON
  1361  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1362  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1363  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1364  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1365                           
  1366                           ; Clear objects allocated to BANK0
  1367  0017  1383               	bcf	3,7	;select IRP bank0
  1368  0018  3020               	movlw	low __pbssBANK0
  1369  0019  0084               	movwf	4
  1370  001A  305D               	movlw	low (__pbssBANK0+61)
  1371  001B  158A  259B  118A   	fcall	clear_ram0
  1372                           
  1373                           ; Clear objects allocated to BANK1
  1374  001E  30A0               	movlw	low __pbssBANK1
  1375  001F  0084               	movwf	4
  1376  0020  30D8               	movlw	low (__pbssBANK1+56)
  1377  0021  158A  259B         	fcall	clear_ram0
  1378  0023                     end_of_initialization:	
  1379                           ;End of C runtime variable initialization code
  1380                           
  1381  0023                     __end_of__initialization:	
  1382  0023  0183               	clrf	3
  1383  0024  118A  2E71         	ljmp	_main	;jump to C main() function
  1384                           
  1385                           	psect	bssCOMMON
  1386  0076                     __pbssCOMMON:	
  1387  0076                     _LED:	
  1388  0076                     	ds	1
  1389  0077                     _Lights:	
  1390  0077                     	ds	1
  1391  0078                     _LightsControl:	
  1392  0078                     	ds	1
  1393  0079                     _Sw:	
  1394  0079                     	ds	1
  1395                           
  1396                           	psect	bssBANK0
  1397  0020                     __pbssBANK0:	
  1398  0020                     _Buz1:	
  1399  0020                     	ds	12
  1400  002C                     _myMain:	
  1401  002C                     	ds	6
  1402  0032                     __CDS:	
  1403  0032                     	ds	5
  1404  0037                     _PIRLED:	
  1405  0037                     	ds	4
  1406  003B                     _Timer1:	
  1407  003B                     	ds	3
  1408  003E                     _WDT:	
  1409  003E                     	ds	2
  1410  0040                     _Cmd:	
  1411  0040                     	ds	1
  1412  0041                     _Light:	
  1413  0041                     	ds	1
  1414  0042                     _SwDetect:	
  1415  0042                     	ds	1
  1416  0043                     _Lights1:	
  1417  0043                     	ds	7
  1418  004A                     _Lights2:	
  1419  004A                     	ds	7
  1420  0051                     _VarErrLED:	
  1421  0051                     	ds	4
  1422  0055                     _VarLED1:	
  1423  0055                     	ds	4
  1424  0059                     _VarLED2:	
  1425  0059                     	ds	4
  1426                           
  1427                           	psect	bssBANK1
  1428  00A0                     __pbssBANK1:	
  1429  00A0                     __PIR:	
  1430  00A0                     	ds	46
  1431  00CE                     _Sw1:	
  1432  00CE                     	ds	5
  1433  00D3                     _Sw2:	
  1434  00D3                     	ds	5
  1435                           
  1436                           	psect	clrtext
  1437  0D9B                     clear_ram0:	
  1438                           ;	Called with FSR containing the base address, and
  1439                           ;	W with the last address+1
  1440                           
  1441  0D9B  0064               	clrwdt	;clear the watchdog before getting into this loop
  1442  0D9C                     clrloop0:	
  1443  0D9C  0180               	clrf	0	;clear RAM location pointed to by FSR
  1444  0D9D  0A84               	incf	4,f	;increment pointer
  1445  0D9E  0604               	xorwf	4,w	;XOR with final address
  1446  0D9F  1903               	btfsc	3,2	;have we reached the end yet?
  1447  0DA0  3400               	retlw	0	;all done for this memory range, return
  1448  0DA1  0604               	xorwf	4,w	;XOR again to restore value
  1449  0DA2  2D9C               	goto	clrloop0	;do the next byte
  1450                           
  1451                           	psect	cstackBANK1
  1452  00D8                     __pcstackBANK1:	
  1453  00D8                     ??_main:	
  1454                           
  1455                           ; 0 bytes @ 0x0
  1456  00D8                     	ds	1
  1457                           
  1458                           	psect	cstackCOMMON
  1459  0070                     __pcstackCOMMON:	
  1460  0070                     ?_setLED_Initialization:	
  1461  0070                     ?_setPIRLED_Main:	
  1462                           ; 0 bytes @ 0x0
  1463                           
  1464  0070                     ?_Fosc_Set:	
  1465                           ; 0 bytes @ 0x0
  1466                           
  1467  0070                     ?_IO_Set:	
  1468                           ; 0 bytes @ 0x0
  1469                           
  1470  0070                     ?_TMR1_Set:	
  1471                           ; 0 bytes @ 0x0
  1472                           
  1473  0070                     ?_ADC_Set:	
  1474                           ; 0 bytes @ 0x0
  1475                           
  1476  0070                     ?_WDT_Set:	
  1477                           ; 0 bytes @ 0x0
  1478                           
  1479  0070                     ?_TMR1_ISR:	
  1480                           ; 0 bytes @ 0x0
  1481                           
  1482  0070                     ??_TMR1_ISR:	
  1483                           ; 0 bytes @ 0x0
  1484                           
  1485  0070                     ?_Timeout_Counter:	
  1486                           ; 0 bytes @ 0x0
  1487                           
  1488  0070                     ?_set_TimeoutCleared:	
  1489                           ; 0 bytes @ 0x0
  1490                           
  1491  0070                     ?_WDT_Clearing:	
  1492                           ; 0 bytes @ 0x0
  1493                           
  1494  0070                     ?_myMain_Initialization:	
  1495                           ; 0 bytes @ 0x0
  1496                           
  1497  0070                     ?_Lights_Initialization:	
  1498                           ; 0 bytes @ 0x0
  1499                           
  1500  0070                     ?_PIR_Initialization:	
  1501                           ; 0 bytes @ 0x0
  1502                           
  1503  0070                     ?_Switch_Initialization:	
  1504                           ; 0 bytes @ 0x0
  1505                           
  1506  0070                     ?_my_MainTimer:	
  1507                           ; 0 bytes @ 0x0
  1508                           
  1509  0070                     ?_Lights_Main:	
  1510                           ; 0 bytes @ 0x0
  1511                           
  1512  0070                     ?_Switch_Main:	
  1513                           ; 0 bytes @ 0x0
  1514                           
  1515  0070                     ?_PIR_Main:	
  1516                           ; 0 bytes @ 0x0
  1517                           
  1518  0070                     ?_Exception_Main:	
  1519                           ; 0 bytes @ 0x0
  1520                           
  1521  0070                     ?_setSw_Main:	
  1522                           ; 0 bytes @ 0x0
  1523                           
  1524  0070                     ?_setLights_SwOn:	
  1525                           ; 0 bytes @ 0x0
  1526                           
  1527  0070                     ?_setLights_SwOff:	
  1528                           ; 0 bytes @ 0x0
  1529                           
  1530  0070                     ?_setLights_Initialization:	
  1531                           ; 0 bytes @ 0x0
  1532                           
  1533  0070                     ?_setLights_Main:	
  1534                           ; 0 bytes @ 0x0
  1535                           
  1536  0070                     ?_Lights_Control:	
  1537                           ; 0 bytes @ 0x0
  1538                           
  1539  0070                     ?_Buzzer_Initialization:	
  1540                           ; 0 bytes @ 0x0
  1541                           
  1542  0070                     ?_Buzzer_Main:	
  1543                           ; 0 bytes @ 0x0
  1544                           
  1545  0070                     ?_CDS_Initialization:	
  1546                           ; 0 bytes @ 0x0
  1547                           
  1548  0070                     ?_CDS_Main:	
  1549                           ; 0 bytes @ 0x0
  1550                           
  1551  0070                     ?_LedPointSelect:	
  1552                           ; 0 bytes @ 0x0
  1553                           
  1554  0070                     ?_LED_Initialization:	
  1555                           ; 0 bytes @ 0x0
  1556                           
  1557  0070                     ?_LED_Main:	
  1558                           ; 0 bytes @ 0x0
  1559                           
  1560  0070                     ?_Mcu_Initialization:	
  1561                           ; 0 bytes @ 0x0
  1562                           
  1563  0070                     ?_ISR:	
  1564                           ; 0 bytes @ 0x0
  1565                           
  1566  0070                     ??_ISR:	
  1567                           ; 0 bytes @ 0x0
  1568                           
  1569  0070                     ?_WDT_Main:	
  1570                           ; 0 bytes @ 0x0
  1571                           
  1572  0070                     ?_TouchPower:	
  1573                           ; 0 bytes @ 0x0
  1574                           
  1575  0070                     ?_SwPointSelect:	
  1576                           ; 0 bytes @ 0x0
  1577                           
  1578  0070                     ?_LightsPointSelect:	
  1579                           ; 0 bytes @ 0x0
  1580                           
  1581  0070                     ?_getAll_Lights_Line:	
  1582                           ; 0 bytes @ 0x0
  1583                           
  1584  0070                     ?_getLights_Status:	
  1585                           ; 1 bytes @ 0x0
  1586                           
  1587  0070                     ?_getSw_KeyStatus:	
  1588                           ; 1 bytes @ 0x0
  1589                           
  1590  0070                     ?_getLights_Allow_Condition:	
  1591                           ; 1 bytes @ 0x0
  1592                           
  1593  0070                     ?_getCDS_Status:	
  1594                           ; 1 bytes @ 0x0
  1595                           
  1596  0070                     ?_getMain_All_Error_Status:	
  1597                           ; 1 bytes @ 0x0
  1598                           
  1599  0070                     getMain_All_Error_Status@command:	
  1600                           ; 1 bytes @ 0x0
  1601                           
  1602                           
  1603                           ; 1 bytes @ 0x0
  1604  0070                     	ds	4
  1605  0074                     ??_Fosc_Set:	
  1606  0074                     ??_IO_Set:	
  1607                           ; 0 bytes @ 0x4
  1608                           
  1609  0074                     ??_TMR1_Set:	
  1610                           ; 0 bytes @ 0x4
  1611                           
  1612  0074                     ??_ADC_Set:	
  1613                           ; 0 bytes @ 0x4
  1614                           
  1615  0074                     ??_WDT_Set:	
  1616                           ; 0 bytes @ 0x4
  1617                           
  1618  0074                     ??_Timeout_Counter:	
  1619                           ; 0 bytes @ 0x4
  1620                           
  1621  0074                     ??_set_TimeoutCleared:	
  1622                           ; 0 bytes @ 0x4
  1623                           
  1624  0074                     ??_WDT_Clearing:	
  1625                           ; 0 bytes @ 0x4
  1626                           
  1627  0074                     ??_myMain_Initialization:	
  1628                           ; 0 bytes @ 0x4
  1629                           
  1630  0074                     ??_PIR_Initialization:	
  1631                           ; 0 bytes @ 0x4
  1632                           
  1633  0074                     ??_Switch_Initialization:	
  1634                           ; 0 bytes @ 0x4
  1635                           
  1636  0074                     ??_getSw_KeyStatus:	
  1637                           ; 0 bytes @ 0x4
  1638                           
  1639  0074                     ??_getLights_Allow_Condition:	
  1640                           ; 0 bytes @ 0x4
  1641                           
  1642  0074                     ??_Buzzer_Initialization:	
  1643                           ; 0 bytes @ 0x4
  1644                           
  1645  0074                     ??_Buzzer_Main:	
  1646                           ; 0 bytes @ 0x4
  1647                           
  1648  0074                     ??_CDS_Initialization:	
  1649                           ; 0 bytes @ 0x4
  1650                           
  1651  0074                     ??_getCDS_Status:	
  1652                           ; 0 bytes @ 0x4
  1653                           
  1654  0074                     ??_LedPointSelect:	
  1655                           ; 0 bytes @ 0x4
  1656                           
  1657  0074                     ??_WDT_Main:	
  1658                           ; 0 bytes @ 0x4
  1659                           
  1660  0074                     ??_getMain_All_Error_Status:	
  1661                           ; 0 bytes @ 0x4
  1662                           
  1663  0074                     ??_TouchPower:	
  1664                           ; 0 bytes @ 0x4
  1665                           
  1666  0074                     ??_SwPointSelect:	
  1667                           ; 0 bytes @ 0x4
  1668                           
  1669  0074                     ??_LightsPointSelect:	
  1670                           ; 0 bytes @ 0x4
  1671                           
  1672  0074                     ??___awdiv:	
  1673                           ; 0 bytes @ 0x4
  1674                           
  1675  0074                     ??___lwdiv:	
  1676                           ; 0 bytes @ 0x4
  1677                           
  1678  0074                     ?_getAD:	
  1679                           ; 0 bytes @ 0x4
  1680                           
  1681  0074                     getCDS_Status@status:	
  1682                           ; 1 bytes @ 0x4
  1683                           
  1684  0074                     getAD@adcon1:	
  1685                           ; 1 bytes @ 0x4
  1686                           
  1687  0074                     getMain_All_Error_Status@status:	
  1688                           ; 1 bytes @ 0x4
  1689                           
  1690  0074                     getSw_KeyStatus@status:	
  1691                           ; 1 bytes @ 0x4
  1692                           
  1693  0074                     getLights_Allow_Condition@lights:	
  1694                           ; 1 bytes @ 0x4
  1695                           
  1696                           
  1697                           ; 1 bytes @ 0x4
  1698  0074                     	ds	1
  1699  0075                     ??_getAD:	
  1700  0075                     ??_setBuz:	
  1701                           ; 0 bytes @ 0x5
  1702                           
  1703  0075                     ??_Mcu_Initialization:	
  1704                           ; 0 bytes @ 0x5
  1705                           
  1706  0075                     LedPointSelect@led:	
  1707                           ; 0 bytes @ 0x5
  1708                           
  1709  0075                     getAD@adcon0:	
  1710                           ; 1 bytes @ 0x5
  1711                           
  1712  0075                     SwPointSelect@sw:	
  1713                           ; 1 bytes @ 0x5
  1714                           
  1715  0075                     getSw_KeyStatus@sw:	
  1716                           ; 1 bytes @ 0x5
  1717                           
  1718  0075                     LightsPointSelect@lights:	
  1719                           ; 1 bytes @ 0x5
  1720                           
  1721  0075                     getLights_Allow_Condition@allow:	
  1722                           ; 1 bytes @ 0x5
  1723                           
  1724                           
  1725                           ; 1 bytes @ 0x5
  1726  0075                     	ds	1
  1727  0076                     ??_setLED_Initialization:	
  1728  0076                     ??_setLED:	
  1729                           ; 0 bytes @ 0x6
  1730                           
  1731  0076                     ??_Lights_Initialization:	
  1732                           ; 0 bytes @ 0x6
  1733                           
  1734  0076                     ??_Lights_Main:	
  1735                           ; 0 bytes @ 0x6
  1736                           
  1737  0076                     ??_Switch_Main:	
  1738                           ; 0 bytes @ 0x6
  1739                           
  1740  0076                     ??_getLights_Status:	
  1741                           ; 0 bytes @ 0x6
  1742                           
  1743  0076                     ??_setLights_SwOn:	
  1744                           ; 0 bytes @ 0x6
  1745                           
  1746  0076                     ??_setLights_SwOff:	
  1747                           ; 0 bytes @ 0x6
  1748                           
  1749  0076                     ??_setLights_Initialization:	
  1750                           ; 0 bytes @ 0x6
  1751                           
  1752  0076                     ??_setLights_Main:	
  1753                           ; 0 bytes @ 0x6
  1754                           
  1755  0076                     ??_LED_Initialization:	
  1756                           ; 0 bytes @ 0x6
  1757                           
  1758  0076                     ??_LED_Main:	
  1759                           ; 0 bytes @ 0x6
  1760                           
  1761                           
  1762                           	psect	cstackBANK0
  1763  005D                     __pcstackBANK0:	
  1764                           ; 0 bytes @ 0x6
  1765                           
  1766  005D                     ?_setLED:	
  1767  005D                     ??_getAll_Lights_Line:	
  1768                           ; 0 bytes @ 0x0
  1769                           
  1770  005D                     ?_setLights_Trigger:	
  1771                           ; 0 bytes @ 0x0
  1772                           
  1773  005D                     ??_CDS_Main:	
  1774                           ; 0 bytes @ 0x0
  1775                           
  1776  005D                     ?_getCDS_AD:	
  1777                           ; 0 bytes @ 0x0
  1778                           
  1779  005D                     ?___awdiv:	
  1780                           ; 0 bytes @ 0x0
  1781                           
  1782  005D                     ?___lwdiv:	
  1783                           ; 2 bytes @ 0x0
  1784                           
  1785  005D                     getCDS_AD@channel2:	
  1786                           ; 2 bytes @ 0x0
  1787                           
  1788  005D                     setLED@command:	
  1789                           ; 1 bytes @ 0x0
  1790                           
  1791  005D                     setLights_Initialization@lights:	
  1792                           ; 1 bytes @ 0x0
  1793                           
  1794  005D                     getLights_Status@lights:	
  1795                           ; 1 bytes @ 0x0
  1796                           
  1797  005D                     setLights_Trigger@command:	
  1798                           ; 1 bytes @ 0x0
  1799                           
  1800  005D                     ___awdiv@divisor:	
  1801                           ; 1 bytes @ 0x0
  1802                           
  1803  005D                     ___lwdiv@divisor:	
  1804                           ; 2 bytes @ 0x0
  1805                           
  1806                           
  1807                           ; 2 bytes @ 0x0
  1808  005D                     	ds	1
  1809  005E                     ??_setLights_Trigger:	
  1810  005E                     ??_getCDS_AD:	
  1811                           ; 0 bytes @ 0x1
  1812                           
  1813  005E                     setLED@led:	
  1814                           ; 0 bytes @ 0x1
  1815                           
  1816  005E                     getLights_Status@status:	
  1817                           ; 1 bytes @ 0x1
  1818                           
  1819  005E                     _getAll_Lights_Line$4308:	
  1820                           ; 1 bytes @ 0x1
  1821                           
  1822                           
  1823                           ; 2 bytes @ 0x1
  1824  005E                     	ds	1
  1825  005F                     ??_setPIRLED_Main:	
  1826  005F                     ?_setLights:	
  1827                           ; 0 bytes @ 0x2
  1828                           
  1829  005F                     setLED_Initialization@led:	
  1830                           ; 0 bytes @ 0x2
  1831                           
  1832  005F                     setLights@status:	
  1833                           ; 1 bytes @ 0x2
  1834                           
  1835  005F                     setLights_Trigger@lights:	
  1836                           ; 1 bytes @ 0x2
  1837                           
  1838  005F                     setLights_SwOn@sw:	
  1839                           ; 1 bytes @ 0x2
  1840                           
  1841  005F                     ___awdiv@dividend:	
  1842                           ; 1 bytes @ 0x2
  1843                           
  1844  005F                     ___lwdiv@dividend:	
  1845                           ; 2 bytes @ 0x2
  1846                           
  1847                           
  1848                           ; 2 bytes @ 0x2
  1849  005F                     	ds	1
  1850  0060                     ??_PIR_Main:	
  1851  0060                     ??_setLights:	
  1852                           ; 0 bytes @ 0x3
  1853                           
  1854  0060                     getCDS_AD@i:	
  1855                           ; 0 bytes @ 0x3
  1856                           
  1857  0060                     setPIRLED_Main@count:	
  1858                           ; 1 bytes @ 0x3
  1859                           
  1860  0060                     getAll_Lights_Line@line:	
  1861                           ; 1 bytes @ 0x3
  1862                           
  1863  0060                     setLights_SwOff@sw:	
  1864                           ; 1 bytes @ 0x3
  1865                           
  1866                           
  1867                           ; 1 bytes @ 0x3
  1868  0060                     	ds	1
  1869  0061                     ??_Exception_Main:	
  1870  0061                     ??_setSw_Main:	
  1871                           ; 0 bytes @ 0x4
  1872                           
  1873  0061                     getCDS_AD@j:	
  1874                           ; 0 bytes @ 0x4
  1875                           
  1876  0061                     setLights@lights:	
  1877                           ; 1 bytes @ 0x4
  1878                           
  1879  0061                     ___awdiv@counter:	
  1880                           ; 1 bytes @ 0x4
  1881                           
  1882  0061                     ___lwdiv@counter:	
  1883                           ; 1 bytes @ 0x4
  1884                           
  1885                           
  1886                           ; 1 bytes @ 0x4
  1887  0061                     	ds	1
  1888  0062                     getCDS_AD@channel1:	
  1889  0062                     Exception_Main@lights:	
  1890                           ; 1 bytes @ 0x5
  1891                           
  1892  0062                     setLights_Main@lights:	
  1893                           ; 1 bytes @ 0x5
  1894                           
  1895  0062                     ___awdiv@sign:	
  1896                           ; 1 bytes @ 0x5
  1897                           
  1898  0062                     ___lwdiv@quotient:	
  1899                           ; 1 bytes @ 0x5
  1900                           
  1901                           
  1902                           ; 2 bytes @ 0x5
  1903  0062                     	ds	1
  1904  0063                     Exception_Main@count:	
  1905  0063                     setSw_Main@sw:	
  1906                           ; 1 bytes @ 0x6
  1907                           
  1908  0063                     ___awdiv@quotient:	
  1909                           ; 1 bytes @ 0x6
  1910                           
  1911                           
  1912                           ; 2 bytes @ 0x6
  1913  0063                     	ds	1
  1914  0064                     Exception_Main@status:	
  1915  0064                     PIR_Main@error:	
  1916                           ; 1 bytes @ 0x7
  1917                           
  1918                           
  1919                           ; 1 bytes @ 0x7
  1920  0064                     	ds	1
  1921  0065                     ?_getPIR_AD:	
  1922  0065                     ??_Lights_Control:	
  1923                           ; 0 bytes @ 0x8
  1924                           
  1925  0065                     ?_setBuz:	
  1926                           ; 0 bytes @ 0x8
  1927                           
  1928  0065                     getPIR_AD@channel2:	
  1929                           ; 0 bytes @ 0x8
  1930                           
  1931  0065                     setBuz@time:	
  1932                           ; 1 bytes @ 0x8
  1933                           
  1934  0065                     Exception_Main@i:	
  1935                           ; 2 bytes @ 0x8
  1936                           
  1937  0065                     _PIR_Main$2877:	
  1938                           ; 2 bytes @ 0x8
  1939                           
  1940                           
  1941                           ; 2 bytes @ 0x8
  1942  0065                     	ds	1
  1943  0066                     ??_getPIR_AD:	
  1944                           
  1945                           ; 0 bytes @ 0x9
  1946  0066                     	ds	1
  1947  0067                     setBuz@count:	
  1948  0067                     Exception_Main@error:	
  1949                           ; 1 bytes @ 0xA
  1950                           
  1951  0067                     PIR_Main@cds:	
  1952                           ; 1 bytes @ 0xA
  1953                           
  1954  0067                     Lights_Control@lights:	
  1955                           ; 1 bytes @ 0xA
  1956                           
  1957                           
  1958                           ; 1 bytes @ 0xA
  1959  0067                     	ds	1
  1960  0068                     ??_my_MainTimer:	
  1961  0068                     PIR_Main@LightsStatus:	
  1962                           ; 0 bytes @ 0xB
  1963                           
  1964                           
  1965                           ; 1 bytes @ 0xB
  1966  0068                     	ds	1
  1967  0069                     getPIR_AD@j:	
  1968                           
  1969                           ; 1 bytes @ 0xC
  1970  0069                     	ds	1
  1971  006A                     getPIR_AD@channel1:	
  1972                           
  1973                           ; 1 bytes @ 0xD
  1974  006A                     	ds	1
  1975  006B                     getPIR_AD@i:	
  1976                           
  1977                           ; 1 bytes @ 0xE
  1978  006B                     	ds	1
  1979  006C                     ?_main:	
  1980  006C                     main@argc:	
  1981                           ; 2 bytes @ 0xF
  1982                           
  1983                           
  1984                           ; 2 bytes @ 0xF
  1985  006C                     	ds	2
  1986  006E                     main@argv:	
  1987                           
  1988                           ; 2 bytes @ 0x11
  1989  006E                     	ds	2
  1990                           
  1991                           	psect	maintext
  1992  0671                     __pmaintext:	
  1993 ;;
  1994 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1995 ;;
  1996 ;; *************** function _main *****************
  1997 ;; Defined at:
  1998 ;;		line 7 in file "../src/Main_B1.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;  argc            2   15[BANK0 ] int 
  2001 ;;  argv            2   17[BANK0 ] PTR PTR unsigned char 
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;		None
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  2   15[BANK0 ] int 
  2006 ;; Registers used:
  2007 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2008 ;; Tracked objects:
  2009 ;;		On entry : 17F/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2013 ;;      Params:         0       4       0       0
  2014 ;;      Locals:         0       0       0       0
  2015 ;;      Temps:          0       0       1       0
  2016 ;;      Totals:         0       4       1       0
  2017 ;;Total ram usage:        5 bytes
  2018 ;; Hardware stack levels required when called:    7
  2019 ;; This function calls:
  2020 ;;		_Buzzer_Initialization
  2021 ;;		_Buzzer_Main
  2022 ;;		_CDS_Initialization
  2023 ;;		_CDS_Main
  2024 ;;		_Exception_Main
  2025 ;;		_LED_Initialization
  2026 ;;		_LED_Main
  2027 ;;		_Lights_Initialization
  2028 ;;		_Lights_Main
  2029 ;;		_Mcu_Initialization
  2030 ;;		_PIR_Initialization
  2031 ;;		_PIR_Main
  2032 ;;		_Switch_Initialization
  2033 ;;		_Switch_Main
  2034 ;;		_WDT_Main
  2035 ;;		_getCDS_AD
  2036 ;;		_getPIR_AD
  2037 ;;		_myMain_Initialization
  2038 ;;		_my_MainTimer
  2039 ;; This function is called by:
  2040 ;;		Startup code after reset
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           
  2045                           ;psect for function _main
  2046  0671                     _main:	
  2047                           
  2048                           ;Main_B1.c: 8: myMain_Initialization();
  2049                           
  2050                           ;incstack = 0
  2051                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2052  0671  158A  256A  118A   	fcall	_myMain_Initialization
  2053                           
  2054                           ;Main_B1.c: 9: Mcu_Initialization();
  2055  0674  158A  25E1  118A   	fcall	_Mcu_Initialization
  2056                           
  2057                           ;Main_B1.c: 10: ;;
  2058                           ;Main_B1.c: 11: LED_Initialization();
  2059  0677  158A  25B9  118A   	fcall	_LED_Initialization
  2060                           
  2061                           ;Main_B1.c: 12: Buzzer_Initialization();
  2062  067A  158A  2571  118A   	fcall	_Buzzer_Initialization
  2063                           
  2064                           ;Main_B1.c: 14: ;;
  2065                           ;Main_B1.c: 15: ;;
  2066                           ;Main_B1.c: 16: ;;
  2067                           ;Main_B1.c: 17: ;;
  2068                           ;Main_B1.c: 18: ;;
  2069                           ;Main_B1.c: 20: ;;
  2070                           ;Main_B1.c: 21: Lights_Initialization();
  2071  067D  158A  258B  118A   	fcall	_Lights_Initialization
  2072                           
  2073                           ;Main_B1.c: 22: CDS_Initialization();
  2074  0680  158A  2575  118A   	fcall	_CDS_Initialization
  2075                           
  2076                           ;Main_B1.c: 23: PIR_Initialization();
  2077  0683  158A  25A3  118A   	fcall	_PIR_Initialization
  2078                           
  2079                           ;Main_B1.c: 24: Switch_Initialization();
  2080  0686  158A  2569  118A   	fcall	_Switch_Initialization
  2081  0689                     l4830:	
  2082                           ;Main_B1.c: 25: ;;
  2083                           ;Main_B1.c: 26: ;;
  2084                           ;Main_B1.c: 27: ;;
  2085                           ;Main_B1.c: 28: ;;
  2086                           ;Main_B1.c: 30: while (1) {
  2087                           
  2088                           
  2089                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2090  0689  1283               	bcf	3,5	;RP0=0, select bank0
  2091  068A  1303               	bcf	3,6	;RP1=0, select bank0
  2092  068B  1C2C               	btfss	_myMain,0
  2093  068C  2EA5               	goto	l4836
  2094                           
  2095                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x31);
  2096  068D  3031               	movlw	49
  2097  068E  1683               	bsf	3,5	;RP0=1, select bank1
  2098  068F  1303               	bcf	3,6	;RP1=0, select bank1
  2099  0690  00D8               	movwf	??_main^(0+128)
  2100  0691  0858               	movf	??_main^(0+128),w
  2101  0692  1283               	bcf	3,5	;RP0=0, select bank0
  2102  0693  1303               	bcf	3,6	;RP1=0, select bank0
  2103  0694  00DD               	movwf	getCDS_AD@channel2
  2104  0695  3009               	movlw	9
  2105  0696  158A  27D6  118A   	fcall	_getCDS_AD
  2106                           
  2107                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2108  0699  300D               	movlw	13
  2109  069A  1683               	bsf	3,5	;RP0=1, select bank1
  2110  069B  1303               	bcf	3,6	;RP1=0, select bank1
  2111  069C  00D8               	movwf	??_main^(0+128)
  2112  069D  0858               	movf	??_main^(0+128),w
  2113  069E  1283               	bcf	3,5	;RP0=0, select bank0
  2114  069F  1303               	bcf	3,6	;RP1=0, select bank0
  2115  06A0  00E5               	movwf	getPIR_AD@channel2
  2116  06A1  3005               	movlw	5
  2117  06A2  118A  21BC  118A   	fcall	_getPIR_AD
  2118  06A5                     l4836:	
  2119                           
  2120                           ;Main_B1.c: 57: }
  2121                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2122  06A5  1283               	bcf	3,5	;RP0=0, select bank0
  2123  06A6  1303               	bcf	3,6	;RP1=0, select bank0
  2124  06A7  1C3B               	btfss	_Timer1,0
  2125  06A8  2E89               	goto	l4830
  2126                           
  2127                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2128  06A9  103B               	bcf	_Timer1,0
  2129                           
  2130                           ;Main_B1.c: 96: my_MainTimer();
  2131  06AA  158A  2789  118A   	fcall	_my_MainTimer
  2132                           
  2133                           ;Main_B1.c: 97: WDT_Main();
  2134  06AD  158A  2611  118A   	fcall	_WDT_Main
  2135                           
  2136                           ;Main_B1.c: 98: ;;
  2137                           ;Main_B1.c: 99: ;;
  2138                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2139  06B0  1283               	bcf	3,5	;RP0=0, select bank0
  2140  06B1  1303               	bcf	3,6	;RP1=0, select bank0
  2141  06B2  1C2C               	btfss	_myMain,0
  2142  06B3  2E89               	goto	l4830
  2143                           
  2144                           ;Main_B1.c: 101: ;;
  2145                           ;Main_B1.c: 103: LED_Main();
  2146  06B4  158A  256E  118A   	fcall	_LED_Main
  2147                           
  2148                           ;Main_B1.c: 104: Buzzer_Main();
  2149  06B7  118A  2711  118A   	fcall	_Buzzer_Main
  2150                           
  2151                           ;Main_B1.c: 106: ;;
  2152                           ;Main_B1.c: 107: ;;
  2153                           ;Main_B1.c: 108: ;;
  2154                           ;Main_B1.c: 109: ;;
  2155                           ;Main_B1.c: 111: Lights_Main();
  2156  06BA  158A  25F0  118A   	fcall	_Lights_Main
  2157                           
  2158                           ;Main_B1.c: 112: ;;
  2159                           ;Main_B1.c: 113: Switch_Main();
  2160  06BD  158A  25AE  118A   	fcall	_Switch_Main
  2161                           
  2162                           ;Main_B1.c: 114: CDS_Main();
  2163  06C0  118A  2795  118A   	fcall	_CDS_Main
  2164                           
  2165                           ;Main_B1.c: 115: PIR_Main();
  2166  06C3  118A  2026  118A   	fcall	_PIR_Main
  2167                           
  2168                           ;Main_B1.c: 117: ;;
  2169                           ;Main_B1.c: 118: ;;
  2170                           ;Main_B1.c: 119: ;;
  2171                           ;Main_B1.c: 120: ;;
  2172                           ;Main_B1.c: 121: Exception_Main();
  2173  06C6  118A  244E  118A   	fcall	_Exception_Main
  2174  06C9  2E89               	goto	l4830
  2175  06CA                     __end_of_main:	
  2176                           ;Main_B1.c: 128: }
  2177                           ;Main_B1.c: 129: }
  2178                           ;Main_B1.c: 163: }
  2179                           ;Main_B1.c: 164: return (0);
  2180                           ;	Return value of _main is never used
  2181                           
  2182                           
  2183                           	psect	text1
  2184  0F89                     __ptext1:	
  2185 ;; *************** function _my_MainTimer *****************
  2186 ;; Defined at:
  2187 ;;		line 185 in file "../src/Main_B1.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;		None
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;		None
  2192 ;; Return value:  Size  Location     Type
  2193 ;;		None               void
  2194 ;; Registers used:
  2195 ;;		wreg, status,2, status,0, pclath, cstack
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2201 ;;      Params:         0       0       0       0
  2202 ;;      Locals:         0       0       0       0
  2203 ;;      Temps:          0       1       0       0
  2204 ;;      Totals:         0       1       0       0
  2205 ;;Total ram usage:        1 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    4
  2208 ;; This function calls:
  2209 ;;		_setBuz
  2210 ;; This function is called by:
  2211 ;;		_main
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           
  2216                           ;psect for function _my_MainTimer
  2217  0F89                     _my_MainTimer:	
  2218                           
  2219                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2220                           
  2221                           ;incstack = 0
  2222                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0+pclath+cstack]
  2223  0F89  1283               	bcf	3,5	;RP0=0, select bank0
  2224  0F8A  1303               	bcf	3,6	;RP1=0, select bank0
  2225  0F8B  182C               	btfsc	_myMain,0
  2226  0F8C  2FA2               	goto	l4616
  2227                           
  2228                           ;Main_B1.c: 188: myMain.PowerCount++;
  2229  0F8D  3001               	movlw	1
  2230  0F8E  00E8               	movwf	??_my_MainTimer
  2231  0F8F  0868               	movf	??_my_MainTimer,w
  2232  0F90  07AD               	addwf	_myMain+1,f
  2233                           
  2234                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2235  0F91  082D               	movf	_myMain+1,w
  2236  0F92  3A4B               	xorlw	75
  2237  0F93  1D03               	skipz
  2238  0F94  0008               	return
  2239                           
  2240                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2241  0F95  01AD               	clrf	_myMain+1
  2242                           
  2243                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2244  0F96  142C               	bsf	_myMain,0
  2245                           
  2246                           ;Main_B1.c: 196: setBuz(3, 50);
  2247  0F97  3032               	movlw	50
  2248  0F98  00E5               	movwf	setBuz@time
  2249  0F99  3000               	movlw	0
  2250  0F9A  00E6               	movwf	setBuz@time+1
  2251  0F9B  3003               	movlw	3
  2252  0F9C  118A  26CA         	fcall	_setBuz
  2253                           
  2254                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2255  0F9E  1283               	bcf	3,5	;RP0=0, select bank0
  2256  0F9F  1303               	bcf	3,6	;RP1=0, select bank0
  2257  0FA0  162C               	bsf	_myMain,4
  2258                           
  2259                           ;Main_B1.c: 206: }
  2260                           ;Main_B1.c: 207: } else {
  2261  0FA1  0008               	return
  2262  0FA2                     l4616:	
  2263                           
  2264                           ;Main_B1.c: 208: myMain.PowerCount++;
  2265  0FA2  3001               	movlw	1
  2266  0FA3  00E8               	movwf	??_my_MainTimer
  2267  0FA4  0868               	movf	??_my_MainTimer,w
  2268  0FA5  07AD               	addwf	_myMain+1,f
  2269                           
  2270                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2271  0FA6  082D               	movf	_myMain+1,w
  2272  0FA7  3A32               	xorlw	50
  2273  0FA8  1D03               	skipz
  2274  0FA9  0008               	return
  2275                           
  2276                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2277  0FAA  01AD               	clrf	_myMain+1
  2278  0FAB  0008               	return
  2279  0FAC                     __end_of_my_MainTimer:	
  2280                           
  2281                           	psect	text2
  2282  06CA                     __ptext2:	
  2283 ;; *************** function _setBuz *****************
  2284 ;; Defined at:
  2285 ;;		line 22 in file "../src/Buzzer_B1.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  count           1    wreg     unsigned char 
  2288 ;;  time            2    8[BANK0 ] int 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  count           1   10[BANK0 ] unsigned char 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;		None               void
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0, pclath, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2300 ;;      Params:         0       2       0       0
  2301 ;;      Locals:         0       1       0       0
  2302 ;;      Temps:          1       0       0       0
  2303 ;;      Totals:         1       3       0       0
  2304 ;;Total ram usage:        4 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    3
  2307 ;; This function calls:
  2308 ;;		___awdiv
  2309 ;; This function is called by:
  2310 ;;		_my_MainTimer
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           
  2315                           ;psect for function _setBuz
  2316  06CA                     _setBuz:	
  2317                           
  2318                           ;incstack = 0
  2319                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
  2320                           ;setBuz@count stored from wreg
  2321  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  2322  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  2323  06CC  00E7               	movwf	setBuz@count
  2324                           
  2325                           ;Buzzer_B1.c: 23: time /= 20;
  2326  06CD  3014               	movlw	20
  2327  06CE  00DD               	movwf	___awdiv@divisor
  2328  06CF  3000               	movlw	0
  2329  06D0  00DE               	movwf	___awdiv@divisor+1
  2330  06D1  0866               	movf	setBuz@time+1,w
  2331  06D2  01E0               	clrf	___awdiv@dividend+1
  2332  06D3  07E0               	addwf	___awdiv@dividend+1,f
  2333  06D4  0865               	movf	setBuz@time,w
  2334  06D5  01DF               	clrf	___awdiv@dividend
  2335  06D6  07DF               	addwf	___awdiv@dividend,f
  2336  06D7  118A  2614  118A   	fcall	___awdiv
  2337  06DA  1283               	bcf	3,5	;RP0=0, select bank0
  2338  06DB  1303               	bcf	3,6	;RP1=0, select bank0
  2339  06DC  085E               	movf	?___awdiv+1,w
  2340  06DD  01E6               	clrf	setBuz@time+1
  2341  06DE  07E6               	addwf	setBuz@time+1,f
  2342  06DF  085D               	movf	?___awdiv,w
  2343  06E0  01E5               	clrf	setBuz@time
  2344  06E1  07E5               	addwf	setBuz@time,f
  2345                           
  2346                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
  2347  06E2  1C20               	btfss	_Buz1,0
  2348  06E3  0008               	return
  2349                           
  2350                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
  2351  06E4  18A0               	btfsc	_Buz1,1
  2352  06E5  2EF5               	goto	l54
  2353                           
  2354                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
  2355  06E6  14A0               	bsf	_Buz1,1
  2356                           
  2357                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
  2358  06E7  01A1               	clrf	_Buz1+1
  2359  06E8  01A2               	clrf	_Buz1+2
  2360                           
  2361                           ;Buzzer_B1.c: 28: Buz1.Count = count;
  2362  06E9  0867               	movf	setBuz@count,w
  2363  06EA  00F5               	movwf	??_setBuz
  2364  06EB  0875               	movf	??_setBuz,w
  2365  06EC  00A3               	movwf	_Buz1+3
  2366                           
  2367                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
  2368  06ED  0866               	movf	setBuz@time+1,w
  2369  06EE  01A7               	clrf	_Buz1+7
  2370  06EF  07A7               	addwf	_Buz1+7,f
  2371  06F0  0865               	movf	setBuz@time,w
  2372  06F1  01A6               	clrf	_Buz1+6
  2373  06F2  07A6               	addwf	_Buz1+6,f
  2374                           
  2375                           ;Buzzer_B1.c: 30: RC0 = 1;
  2376  06F3  1407               	bsf	7,0	;volatile
  2377                           
  2378                           ;Buzzer_B1.c: 31: } else {
  2379  06F4  0008               	return
  2380  06F5                     l54:	
  2381                           
  2382                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
  2383  06F5  19A0               	btfsc	_Buz1,3
  2384  06F6  2F03               	goto	l56
  2385                           
  2386                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
  2387  06F7  15A0               	bsf	_Buz1,3
  2388                           
  2389                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
  2390  06F8  0867               	movf	setBuz@count,w
  2391  06F9  00F5               	movwf	??_setBuz
  2392  06FA  0875               	movf	??_setBuz,w
  2393  06FB  00A4               	movwf	_Buz1+4
  2394                           
  2395                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
  2396  06FC  0866               	movf	setBuz@time+1,w
  2397  06FD  01A9               	clrf	_Buz1+9
  2398  06FE  07A9               	addwf	_Buz1+9,f
  2399  06FF  0865               	movf	setBuz@time,w
  2400  0700  01A8               	clrf	_Buz1+8
  2401  0701  07A8               	addwf	_Buz1+8,f
  2402                           
  2403                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
  2404  0702  0008               	return
  2405  0703                     l56:	
  2406  0703  1A20               	btfsc	_Buz1,4
  2407  0704  0008               	return
  2408                           
  2409                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
  2410  0705  1620               	bsf	_Buz1,4
  2411                           
  2412                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
  2413  0706  0867               	movf	setBuz@count,w
  2414  0707  00F5               	movwf	??_setBuz
  2415  0708  0875               	movf	??_setBuz,w
  2416  0709  00A5               	movwf	_Buz1+5
  2417                           
  2418                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
  2419  070A  0866               	movf	setBuz@time+1,w
  2420  070B  01AB               	clrf	_Buz1+11
  2421  070C  07AB               	addwf	_Buz1+11,f
  2422  070D  0865               	movf	setBuz@time,w
  2423  070E  01AA               	clrf	_Buz1+10
  2424  070F  07AA               	addwf	_Buz1+10,f
  2425  0710  0008               	return
  2426  0711                     __end_of_setBuz:	
  2427                           
  2428                           	psect	text3
  2429  0D6A                     __ptext3:	
  2430 ;; *************** function _myMain_Initialization *****************
  2431 ;; Defined at:
  2432 ;;		line 170 in file "../src/Main_B1.c"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;		None
  2435 ;; Auto vars:     Size  Location     Type
  2436 ;;		None
  2437 ;; Return value:  Size  Location     Type
  2438 ;;		None               void
  2439 ;; Registers used:
  2440 ;;		None
  2441 ;; Tracked objects:
  2442 ;;		On entry : 0/0
  2443 ;;		On exit  : 0/0
  2444 ;;		Unchanged: 0/0
  2445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2446 ;;      Params:         0       0       0       0
  2447 ;;      Locals:         0       0       0       0
  2448 ;;      Temps:          0       0       0       0
  2449 ;;      Totals:         0       0       0       0
  2450 ;;Total ram usage:        0 bytes
  2451 ;; Hardware stack levels used:    1
  2452 ;; Hardware stack levels required when called:    2
  2453 ;; This function calls:
  2454 ;;		Nothing
  2455 ;; This function is called by:
  2456 ;;		_main
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           
  2461                           ;psect for function _myMain_Initialization
  2462  0D6A                     _myMain_Initialization:	
  2463                           
  2464                           ;incstack = 0
  2465                           ; Regs used in _myMain_Initialization: []
  2466  0D6A  0008               	return
  2467  0D6B                     __end_of_myMain_Initialization:	
  2468                           
  2469                           	psect	text4
  2470  01BC                     __ptext4:	
  2471 ;; *************** function _getPIR_AD *****************
  2472 ;; Defined at:
  2473 ;;		line 310 in file "../src/PIR_B1.c"
  2474 ;; Parameters:    Size  Location     Type
  2475 ;;  channel1        1    wreg     unsigned char 
  2476 ;;  channel2        1    8[BANK0 ] unsigned char 
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;  channel1        1   13[BANK0 ] unsigned char 
  2479 ;;  i               1   14[BANK0 ] unsigned char 
  2480 ;;  j               1   12[BANK0 ] unsigned char 
  2481 ;; Return value:  Size  Location     Type
  2482 ;;		None               void
  2483 ;; Registers used:
  2484 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2490 ;;      Params:         0       1       0       0
  2491 ;;      Locals:         0       3       0       0
  2492 ;;      Temps:          0       3       0       0
  2493 ;;      Totals:         0       7       0       0
  2494 ;;Total ram usage:        7 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    4
  2497 ;; This function calls:
  2498 ;;		___awdiv
  2499 ;;		___lwdiv
  2500 ;;		_getAD
  2501 ;; This function is called by:
  2502 ;;		_main
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           
  2507                           ;psect for function _getPIR_AD
  2508  01BC                     _getPIR_AD:	
  2509                           
  2510                           ;incstack = 0
  2511                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2512                           ;getPIR_AD@channel1 stored from wreg
  2513  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  2514  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  2515  01BE  00EA               	movwf	getPIR_AD@channel1
  2516                           
  2517                           ;PIR_B1.c: 311: char i = 0, j = 0;
  2518  01BF  01EB               	clrf	getPIR_AD@i
  2519  01C0  01E9               	clrf	getPIR_AD@j
  2520                           
  2521                           ;PIR_B1.c: 313: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2522  01C1  1683               	bsf	3,5	;RP0=1, select bank1
  2523  01C2  1303               	bcf	3,6	;RP1=0, select bank1
  2524  01C3  1CA0               	btfss	__PIR^(0+128),1
  2525  01C4  0008               	return
  2526  01C5  1920               	btfsc	__PIR^(0+128),2
  2527  01C6  0008               	return
  2528                           
  2529                           ;PIR_B1.c: 314: _PIR.GO = 1;
  2530  01C7  1520               	bsf	__PIR^(0+128),2
  2531                           
  2532                           ;PIR_B1.c: 315: _PIR.ADRES = getAD(channel1, 0x70);
  2533  01C8  3070               	movlw	112
  2534  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  2535  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  2536  01CB  00E6               	movwf	??_getPIR_AD
  2537  01CC  0866               	movf	??_getPIR_AD,w
  2538  01CD  00F4               	movwf	getAD@adcon1
  2539  01CE  086A               	movf	getPIR_AD@channel1,w
  2540  01CF  158A  272D  118A   	fcall	_getAD
  2541  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  2542  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  2543  01D4  00E7               	movwf	??_getPIR_AD+1
  2544  01D5  0867               	movf	??_getPIR_AD+1,w
  2545  01D6  1683               	bsf	3,5	;RP0=1, select bank1
  2546  01D7  1303               	bcf	3,6	;RP1=0, select bank1
  2547  01D8  00A2               	movwf	(__PIR^(0+128)+2)
  2548                           
  2549                           ;PIR_B1.c: 316: _PIR.VRAD = _PIR.ADRES / 25;
  2550  01D9  3019               	movlw	25
  2551  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  2552  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  2553  01DC  00DD               	movwf	___awdiv@divisor
  2554  01DD  3000               	movlw	0
  2555  01DE  00DE               	movwf	___awdiv@divisor+1
  2556  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  2557  01E0  1303               	bcf	3,6	;RP1=0, select bank1
  2558  01E1  0822               	movf	(__PIR^(0+128)+2),w
  2559  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  2560  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  2561  01E4  00E6               	movwf	??_getPIR_AD
  2562  01E5  01E7               	clrf	??_getPIR_AD+1
  2563  01E6  0866               	movf	??_getPIR_AD,w
  2564  01E7  00DF               	movwf	___awdiv@dividend
  2565  01E8  0867               	movf	??_getPIR_AD+1,w
  2566  01E9  00E0               	movwf	___awdiv@dividend+1
  2567  01EA  118A  2614  118A   	fcall	___awdiv
  2568  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  2569  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  2570  01EF  085D               	movf	?___awdiv,w
  2571  01F0  00E8               	movwf	??_getPIR_AD+2
  2572  01F1  0868               	movf	??_getPIR_AD+2,w
  2573  01F2  1683               	bsf	3,5	;RP0=1, select bank1
  2574  01F3  1303               	bcf	3,6	;RP1=0, select bank1
  2575  01F4  00A3               	movwf	(__PIR^(0+128)+3)
  2576                           
  2577                           ;PIR_B1.c: 317: _PIR.VRAD1 = _PIR.ADRES;
  2578  01F5  0822               	movf	(__PIR^(0+128)+2),w
  2579  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  2580  01F7  1303               	bcf	3,6	;RP1=0, select bank0
  2581  01F8  00E6               	movwf	??_getPIR_AD
  2582  01F9  0866               	movf	??_getPIR_AD,w
  2583  01FA  1683               	bsf	3,5	;RP0=1, select bank1
  2584  01FB  1303               	bcf	3,6	;RP1=0, select bank1
  2585  01FC  00A4               	movwf	(__PIR^(0+128)+4)
  2586                           
  2587                           ;PIR_B1.c: 318: _PIR.ADRES = getAD(channel2, 0x70);
  2588  01FD  3070               	movlw	112
  2589  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  2590  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  2591  0200  00E6               	movwf	??_getPIR_AD
  2592  0201  0866               	movf	??_getPIR_AD,w
  2593  0202  00F4               	movwf	getAD@adcon1
  2594  0203  0865               	movf	getPIR_AD@channel2,w
  2595  0204  158A  272D  118A   	fcall	_getAD
  2596  0207  1283               	bcf	3,5	;RP0=0, select bank0
  2597  0208  1303               	bcf	3,6	;RP1=0, select bank0
  2598  0209  00E7               	movwf	??_getPIR_AD+1
  2599  020A  0867               	movf	??_getPIR_AD+1,w
  2600  020B  1683               	bsf	3,5	;RP0=1, select bank1
  2601  020C  1303               	bcf	3,6	;RP1=0, select bank1
  2602  020D  00A2               	movwf	(__PIR^(0+128)+2)
  2603                           
  2604                           ;PIR_B1.c: 319: _PIR.SignalAD = _PIR.ADRES;
  2605  020E  0822               	movf	(__PIR^(0+128)+2),w
  2606  020F  1283               	bcf	3,5	;RP0=0, select bank0
  2607  0210  1303               	bcf	3,6	;RP1=0, select bank0
  2608  0211  00E6               	movwf	??_getPIR_AD
  2609  0212  0866               	movf	??_getPIR_AD,w
  2610  0213  1683               	bsf	3,5	;RP0=1, select bank1
  2611  0214  1303               	bcf	3,6	;RP1=0, select bank1
  2612  0215  00A1               	movwf	(__PIR^(0+128)+1)
  2613                           
  2614                           ;PIR_B1.c: 321: if (_PIR.VRAD < 1) {
  2615  0216  08A3               	movf	(__PIR^(0+128)+3),f
  2616  0217  1D03               	skipz
  2617  0218  2A1B               	goto	l4538
  2618                           
  2619                           ;PIR_B1.c: 322: _PIR.CloseTimeValue = 5;
  2620  0219  3005               	movlw	5
  2621  021A  2A20               	goto	L1
  2622  021B                     l4538:	
  2623                           ;PIR_B1.c: 323: } else if (_PIR.VRAD < 3) {
  2624                           
  2625  021B  3003               	movlw	3
  2626  021C  0223               	subwf	(__PIR^(0+128)+3),w
  2627  021D  1803               	skipnc
  2628  021E  2A23               	goto	l4542
  2629                           
  2630                           ;PIR_B1.c: 324: _PIR.CloseTimeValue = 60;
  2631  021F  303C               	movlw	60
  2632  0220                     L1:	
  2633  0220  00C7               	movwf	(__PIR^(0+128)+39)
  2634  0221  3000               	movlw	0
  2635  0222  2A3E               	goto	L5
  2636  0223                     l4542:	
  2637                           ;PIR_B1.c: 325: } else if (_PIR.VRAD < 5) {
  2638                           
  2639  0223  3005               	movlw	5
  2640  0224  0223               	subwf	(__PIR^(0+128)+3),w
  2641  0225  1803               	skipnc
  2642  0226  2A2B               	goto	l4546
  2643                           
  2644                           ;PIR_B1.c: 326: _PIR.CloseTimeValue = 300;
  2645  0227  302C               	movlw	44
  2646  0228  00C7               	movwf	(__PIR^(0+128)+39)
  2647  0229  3001               	movlw	1
  2648  022A  2A3E               	goto	L5
  2649  022B                     l4546:	
  2650                           ;PIR_B1.c: 327: } else if (_PIR.VRAD < 7) {
  2651                           
  2652  022B  3007               	movlw	7
  2653  022C  0223               	subwf	(__PIR^(0+128)+3),w
  2654  022D  1803               	skipnc
  2655  022E  2A33               	goto	l4550
  2656                           
  2657                           ;PIR_B1.c: 328: _PIR.CloseTimeValue = 600;
  2658  022F  3058               	movlw	88
  2659  0230  00C7               	movwf	(__PIR^(0+128)+39)
  2660  0231  3002               	movlw	2
  2661  0232  2A3E               	goto	L5
  2662  0233                     l4550:	
  2663                           ;PIR_B1.c: 329: } else if (_PIR.VRAD < 9) {
  2664                           
  2665  0233  3009               	movlw	9
  2666  0234  0223               	subwf	(__PIR^(0+128)+3),w
  2667  0235  1803               	skipnc
  2668  0236  2A3B               	goto	l4554
  2669                           
  2670                           ;PIR_B1.c: 330: _PIR.CloseTimeValue = 900;
  2671  0237  3084               	movlw	132
  2672  0238  00C7               	movwf	(__PIR^(0+128)+39)
  2673  0239  3003               	movlw	3
  2674  023A  2A3E               	goto	L5
  2675  023B                     l4554:	
  2676                           ;PIR_B1.c: 331: } else {
  2677                           
  2678                           
  2679                           ;PIR_B1.c: 332: _PIR.CloseTimeValue = 1200;
  2680  023B  30B0               	movlw	176
  2681  023C  00C7               	movwf	(__PIR^(0+128)+39)
  2682  023D  3004               	movlw	4
  2683  023E                     L5:	
  2684  023E  00C8               	movwf	(__PIR^(0+128)+40)
  2685                           
  2686                           ;PIR_B1.c: 333: }
  2687                           ;PIR_B1.c: 342: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2688  023F  0821               	movf	(__PIR^(0+128)+1),w
  2689  0240  1283               	bcf	3,5	;RP0=0, select bank0
  2690  0241  1303               	bcf	3,6	;RP1=0, select bank0
  2691  0242  00E6               	movwf	??_getPIR_AD
  2692  0243  1683               	bsf	3,5	;RP0=1, select bank1
  2693  0244  1303               	bcf	3,6	;RP1=0, select bank1
  2694  0245  0827               	movf	(__PIR^(0+128)+7),w
  2695  0246  3EA8               	addlw	(__PIR+8)& (0+255)
  2696  0247  0084               	movwf	4
  2697  0248  1283               	bcf	3,5	;RP0=0, select bank0
  2698  0249  1303               	bcf	3,6	;RP1=0, select bank0
  2699  024A  0866               	movf	??_getPIR_AD,w
  2700  024B  1383               	bcf	3,7	;select IRP bank1
  2701  024C  0080               	movwf	0
  2702                           
  2703                           ;PIR_B1.c: 343: for (i = 0; i < 10; i++) {
  2704  024D  01EB               	clrf	getPIR_AD@i
  2705  024E  300A               	movlw	10
  2706  024F  026B               	subwf	getPIR_AD@i,w
  2707  0250  1803               	btfsc	3,0
  2708  0251  2A6E               	goto	l4570
  2709  0252                     l4564:	
  2710                           
  2711                           ;PIR_B1.c: 344: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2712  0252  086B               	movf	getPIR_AD@i,w
  2713  0253  3EA8               	addlw	(__PIR+8)& (0+255)
  2714  0254  0084               	movwf	4
  2715  0255  0800               	movf	0,w
  2716  0256  00E6               	movwf	??_getPIR_AD
  2717  0257  01E7               	clrf	??_getPIR_AD+1
  2718  0258  0866               	movf	??_getPIR_AD,w
  2719  0259  1683               	bsf	3,5	;RP0=1, select bank1
  2720  025A  1303               	bcf	3,6	;RP1=0, select bank1
  2721  025B  07B2               	addwf	(__PIR^(0+128)+18),f
  2722  025C  1803               	skipnc
  2723  025D  0AB3               	incf	((__PIR+1)^(0+128)+18),f
  2724  025E  1283               	bcf	3,5	;RP0=0, select bank0
  2725  025F  1303               	bcf	3,6	;RP1=0, select bank0
  2726  0260  0867               	movf	??_getPIR_AD+1,w
  2727  0261  1683               	bsf	3,5	;RP0=1, select bank1
  2728  0262  1303               	bcf	3,6	;RP1=0, select bank1
  2729  0263  07B3               	addwf	((__PIR+1)^(0+128)+18),f
  2730  0264  3001               	movlw	1
  2731  0265  1283               	bcf	3,5	;RP0=0, select bank0
  2732  0266  1303               	bcf	3,6	;RP1=0, select bank0
  2733  0267  00E6               	movwf	??_getPIR_AD
  2734  0268  0866               	movf	??_getPIR_AD,w
  2735  0269  07EB               	addwf	getPIR_AD@i,f
  2736  026A  300A               	movlw	10
  2737  026B  026B               	subwf	getPIR_AD@i,w
  2738  026C  1C03               	skipc
  2739  026D  2A52               	goto	l4564
  2740  026E                     l4570:	
  2741                           
  2742                           ;PIR_B1.c: 345: }
  2743                           ;PIR_B1.c: 346: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2744  026E  300A               	movlw	10
  2745  026F  00DD               	movwf	___lwdiv@divisor
  2746  0270  3000               	movlw	0
  2747  0271  00DE               	movwf	___lwdiv@divisor+1
  2748  0272  1683               	bsf	3,5	;RP0=1, select bank1
  2749  0273  1303               	bcf	3,6	;RP1=0, select bank1
  2750  0274  0833               	movf	((__PIR+1)^(0+128)+18),w
  2751  0275  1283               	bcf	3,5	;RP0=0, select bank0
  2752  0276  1303               	bcf	3,6	;RP1=0, select bank0
  2753  0277  01E0               	clrf	___lwdiv@dividend+1
  2754  0278  07E0               	addwf	___lwdiv@dividend+1,f
  2755  0279  1683               	bsf	3,5	;RP0=1, select bank1
  2756  027A  1303               	bcf	3,6	;RP1=0, select bank1
  2757  027B  0832               	movf	(__PIR^(0+128)+18),w
  2758  027C  1283               	bcf	3,5	;RP0=0, select bank0
  2759  027D  1303               	bcf	3,6	;RP1=0, select bank0
  2760  027E  01DF               	clrf	___lwdiv@dividend
  2761  027F  07DF               	addwf	___lwdiv@dividend,f
  2762  0280  118A  2755  118A   	fcall	___lwdiv
  2763  0283  1283               	bcf	3,5	;RP0=0, select bank0
  2764  0284  1303               	bcf	3,6	;RP1=0, select bank0
  2765  0285  085D               	movf	?___lwdiv,w
  2766  0286  00E6               	movwf	??_getPIR_AD
  2767  0287  1683               	bsf	3,5	;RP0=1, select bank1
  2768  0288  1303               	bcf	3,6	;RP1=0, select bank1
  2769  0289  0834               	movf	(__PIR^(0+128)+20),w
  2770  028A  3EB5               	addlw	(__PIR+21)& (0+255)
  2771  028B  0084               	movwf	4
  2772  028C  1283               	bcf	3,5	;RP0=0, select bank0
  2773  028D  1303               	bcf	3,6	;RP1=0, select bank0
  2774  028E  0866               	movf	??_getPIR_AD,w
  2775  028F  1383               	bcf	3,7	;select IRP bank1
  2776  0290  0080               	movwf	0
  2777                           
  2778                           ;PIR_B1.c: 347: _PIR.TenAverageValue = 0;
  2779  0291  1683               	bsf	3,5	;RP0=1, select bank1
  2780  0292  1303               	bcf	3,6	;RP1=0, select bank1
  2781  0293  01B2               	clrf	(__PIR^(0+128)+18)
  2782  0294  01B3               	clrf	((__PIR+1)^(0+128)+18)
  2783                           
  2784                           ;PIR_B1.c: 349: for (i = 0; i <= 9; i++) {
  2785  0295  1283               	bcf	3,5	;RP0=0, select bank0
  2786  0296  1303               	bcf	3,6	;RP1=0, select bank0
  2787  0297  01EB               	clrf	getPIR_AD@i
  2788  0298  300A               	movlw	10
  2789  0299  026B               	subwf	getPIR_AD@i,w
  2790  029A  1803               	btfsc	3,0
  2791  029B  2AB8               	goto	l4586
  2792  029C                     l4580:	
  2793                           
  2794                           ;PIR_B1.c: 350: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2795  029C  086B               	movf	getPIR_AD@i,w
  2796  029D  3EB5               	addlw	(__PIR+21)& (0+255)
  2797  029E  0084               	movwf	4
  2798  029F  0800               	movf	0,w
  2799  02A0  00E6               	movwf	??_getPIR_AD
  2800  02A1  01E7               	clrf	??_getPIR_AD+1
  2801  02A2  0866               	movf	??_getPIR_AD,w
  2802  02A3  1683               	bsf	3,5	;RP0=1, select bank1
  2803  02A4  1303               	bcf	3,6	;RP1=0, select bank1
  2804  02A5  07BF               	addwf	(__PIR^(0+128)+31),f
  2805  02A6  1803               	skipnc
  2806  02A7  0AC0               	incf	((__PIR+1)^(0+128)+31),f
  2807  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  2808  02A9  1303               	bcf	3,6	;RP1=0, select bank0
  2809  02AA  0867               	movf	??_getPIR_AD+1,w
  2810  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  2811  02AC  1303               	bcf	3,6	;RP1=0, select bank1
  2812  02AD  07C0               	addwf	((__PIR+1)^(0+128)+31),f
  2813  02AE  3001               	movlw	1
  2814  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2815  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  2816  02B1  00E6               	movwf	??_getPIR_AD
  2817  02B2  0866               	movf	??_getPIR_AD,w
  2818  02B3  07EB               	addwf	getPIR_AD@i,f
  2819  02B4  300A               	movlw	10
  2820  02B5  026B               	subwf	getPIR_AD@i,w
  2821  02B6  1C03               	skipc
  2822  02B7  2A9C               	goto	l4580
  2823  02B8                     l4586:	
  2824                           
  2825                           ;PIR_B1.c: 351: }
  2826                           ;PIR_B1.c: 352: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2827  02B8  300A               	movlw	10
  2828  02B9  00DD               	movwf	___lwdiv@divisor
  2829  02BA  3000               	movlw	0
  2830  02BB  00DE               	movwf	___lwdiv@divisor+1
  2831  02BC  1683               	bsf	3,5	;RP0=1, select bank1
  2832  02BD  1303               	bcf	3,6	;RP1=0, select bank1
  2833  02BE  0840               	movf	((__PIR+1)^(0+128)+31),w
  2834  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  2835  02C0  1303               	bcf	3,6	;RP1=0, select bank0
  2836  02C1  01E0               	clrf	___lwdiv@dividend+1
  2837  02C2  07E0               	addwf	___lwdiv@dividend+1,f
  2838  02C3  1683               	bsf	3,5	;RP0=1, select bank1
  2839  02C4  1303               	bcf	3,6	;RP1=0, select bank1
  2840  02C5  083F               	movf	(__PIR^(0+128)+31),w
  2841  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  2842  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  2843  02C8  01DF               	clrf	___lwdiv@dividend
  2844  02C9  07DF               	addwf	___lwdiv@dividend,f
  2845  02CA  118A  2755  118A   	fcall	___lwdiv
  2846  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2847  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  2848  02CF  085D               	movf	?___lwdiv,w
  2849  02D0  00E6               	movwf	??_getPIR_AD
  2850  02D1  0866               	movf	??_getPIR_AD,w
  2851  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  2852  02D3  1303               	bcf	3,6	;RP1=0, select bank1
  2853  02D4  00A6               	movwf	(__PIR^(0+128)+6)
  2854                           
  2855                           ;PIR_B1.c: 353: _PIR.HundredAverageValue = 0;
  2856  02D5  01BF               	clrf	(__PIR^(0+128)+31)
  2857  02D6  01C0               	clrf	((__PIR+1)^(0+128)+31)
  2858                           
  2859                           ;PIR_B1.c: 355: if (_PIR.TenCount < 10) {
  2860  02D7  300A               	movlw	10
  2861  02D8  0227               	subwf	(__PIR^(0+128)+7),w
  2862  02D9  1803               	skipnc
  2863  02DA  2AE4               	goto	l4594
  2864                           
  2865                           ;PIR_B1.c: 356: _PIR.TenCount++;
  2866  02DB  3001               	movlw	1
  2867  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  2868  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  2869  02DE  00E6               	movwf	??_getPIR_AD
  2870  02DF  0866               	movf	??_getPIR_AD,w
  2871  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  2872  02E1  1303               	bcf	3,6	;RP1=0, select bank1
  2873  02E2  07A7               	addwf	(__PIR^(0+128)+7),f
  2874                           
  2875                           ;PIR_B1.c: 357: } else {
  2876  02E3  0008               	return
  2877  02E4                     l4594:	
  2878                           
  2879                           ;PIR_B1.c: 358: _PIR.TenCount = 0;
  2880  02E4  01A7               	clrf	(__PIR^(0+128)+7)
  2881                           
  2882                           ;PIR_B1.c: 359: if (_PIR.HundreCount < 10)
  2883  02E5  300A               	movlw	10
  2884  02E6  0234               	subwf	(__PIR^(0+128)+20),w
  2885  02E7  1803               	skipnc
  2886  02E8  2AF2               	goto	l4600
  2887                           
  2888                           ;PIR_B1.c: 360: _PIR.HundreCount++;
  2889  02E9  3001               	movlw	1
  2890  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  2891  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  2892  02EC  00E6               	movwf	??_getPIR_AD
  2893  02ED  0866               	movf	??_getPIR_AD,w
  2894  02EE  1683               	bsf	3,5	;RP0=1, select bank1
  2895  02EF  1303               	bcf	3,6	;RP1=0, select bank1
  2896  02F0  07B4               	addwf	(__PIR^(0+128)+20),f
  2897  02F1  0008               	return
  2898  02F2                     l4600:	
  2899                           
  2900                           ;PIR_B1.c: 361: else
  2901                           ;PIR_B1.c: 362: _PIR.HundreCount = 0;
  2902  02F2  01B4               	clrf	(__PIR^(0+128)+20)
  2903  02F3  0008               	return
  2904  02F4                     __end_of_getPIR_AD:	
  2905                           
  2906                           	psect	text5
  2907  0755                     __ptext5:	
  2908 ;; *************** function ___lwdiv *****************
  2909 ;; Defined at:
  2910 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;  divisor         2    0[BANK0 ] unsigned int 
  2913 ;;  dividend        2    2[BANK0 ] unsigned int 
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;  quotient        2    5[BANK0 ] unsigned int 
  2916 ;;  counter         1    4[BANK0 ] unsigned char 
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  2    0[BANK0 ] unsigned int 
  2919 ;; Registers used:
  2920 ;;		wreg, status,2, status,0
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2926 ;;      Params:         0       4       0       0
  2927 ;;      Locals:         0       3       0       0
  2928 ;;      Temps:          1       0       0       0
  2929 ;;      Totals:         1       7       0       0
  2930 ;;Total ram usage:        8 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    2
  2933 ;; This function calls:
  2934 ;;		Nothing
  2935 ;; This function is called by:
  2936 ;;		_getPIR_AD
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           
  2941                           ;psect for function ___lwdiv
  2942  0755                     ___lwdiv:	
  2943                           
  2944                           ;incstack = 0
  2945                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2946  0755  1283               	bcf	3,5	;RP0=0, select bank0
  2947  0756  1303               	bcf	3,6	;RP1=0, select bank0
  2948  0757  01E2               	clrf	___lwdiv@quotient
  2949  0758  01E3               	clrf	___lwdiv@quotient+1
  2950  0759  085E               	movf	___lwdiv@divisor+1,w
  2951  075A  045D               	iorwf	___lwdiv@divisor,w
  2952  075B  1903               	skipnz
  2953  075C  2F8E               	goto	l4474
  2954  075D  01E1               	clrf	___lwdiv@counter
  2955  075E  0AE1               	incf	___lwdiv@counter,f
  2956  075F                     l4462:	
  2957  075F  1BDE               	btfsc	___lwdiv@divisor+1,7
  2958  0760  2F6D               	goto	l4464
  2959  0761  3001               	movlw	1
  2960  0762                     u5125:	
  2961  0762  1003               	clrc
  2962  0763  0DDD               	rlf	___lwdiv@divisor,f
  2963  0764  0DDE               	rlf	___lwdiv@divisor+1,f
  2964  0765  3EFF               	addlw	-1
  2965  0766  1D03               	skipz
  2966  0767  2F62               	goto	u5125
  2967  0768  3001               	movlw	1
  2968  0769  00F4               	movwf	??___lwdiv
  2969  076A  0874               	movf	??___lwdiv,w
  2970  076B  07E1               	addwf	___lwdiv@counter,f
  2971  076C  2F5F               	goto	l4462
  2972  076D                     l4464:	
  2973  076D  3001               	movlw	1
  2974  076E                     u5145:	
  2975  076E  1003               	clrc
  2976  076F  0DE2               	rlf	___lwdiv@quotient,f
  2977  0770  0DE3               	rlf	___lwdiv@quotient+1,f
  2978  0771  3EFF               	addlw	-1
  2979  0772  1D03               	skipz
  2980  0773  2F6E               	goto	u5145
  2981  0774  085E               	movf	___lwdiv@divisor+1,w
  2982  0775  0260               	subwf	___lwdiv@dividend+1,w
  2983  0776  1D03               	skipz
  2984  0777  2F7A               	goto	u5155
  2985  0778  085D               	movf	___lwdiv@divisor,w
  2986  0779  025F               	subwf	___lwdiv@dividend,w
  2987  077A                     u5155:	
  2988  077A  1C03               	skipc
  2989  077B  2F83               	goto	l4470
  2990  077C  085D               	movf	___lwdiv@divisor,w
  2991  077D  02DF               	subwf	___lwdiv@dividend,f
  2992  077E  085E               	movf	___lwdiv@divisor+1,w
  2993  077F  1C03               	skipc
  2994  0780  03E0               	decf	___lwdiv@dividend+1,f
  2995  0781  02E0               	subwf	___lwdiv@dividend+1,f
  2996  0782  1462               	bsf	___lwdiv@quotient,0
  2997  0783                     l4470:	
  2998  0783  3001               	movlw	1
  2999  0784                     u5165:	
  3000  0784  1003               	clrc
  3001  0785  0CDE               	rrf	___lwdiv@divisor+1,f
  3002  0786  0CDD               	rrf	___lwdiv@divisor,f
  3003  0787  3EFF               	addlw	-1
  3004  0788  1D03               	skipz
  3005  0789  2F84               	goto	u5165
  3006  078A  3001               	movlw	1
  3007  078B  02E1               	subwf	___lwdiv@counter,f
  3008  078C  1D03               	btfss	3,2
  3009  078D  2F6D               	goto	l4464
  3010  078E                     l4474:	
  3011  078E  0863               	movf	___lwdiv@quotient+1,w
  3012  078F  01DE               	clrf	?___lwdiv+1
  3013  0790  07DE               	addwf	?___lwdiv+1,f
  3014  0791  0862               	movf	___lwdiv@quotient,w
  3015  0792  01DD               	clrf	?___lwdiv
  3016  0793  07DD               	addwf	?___lwdiv,f
  3017  0794  0008               	return
  3018  0795                     __end_of___lwdiv:	
  3019                           
  3020                           	psect	text6
  3021  0FD6                     __ptext6:	
  3022 ;; *************** function _getCDS_AD *****************
  3023 ;; Defined at:
  3024 ;;		line 48 in file "../src/CDS_B1.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  channel1        1    wreg     unsigned char 
  3027 ;;  channel2        1    0[BANK0 ] unsigned char 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;  channel1        1    5[BANK0 ] unsigned char 
  3030 ;;  j               1    4[BANK0 ] unsigned char 
  3031 ;;  i               1    3[BANK0 ] unsigned char 
  3032 ;; Return value:  Size  Location     Type
  3033 ;;		None               void
  3034 ;; Registers used:
  3035 ;;		wreg, status,2, status,0, pclath, cstack
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3041 ;;      Params:         0       1       0       0
  3042 ;;      Locals:         0       3       0       0
  3043 ;;      Temps:          0       2       0       0
  3044 ;;      Totals:         0       6       0       0
  3045 ;;Total ram usage:        6 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    4
  3048 ;; This function calls:
  3049 ;;		_getAD
  3050 ;; This function is called by:
  3051 ;;		_main
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           
  3056                           ;psect for function _getCDS_AD
  3057  0FD6                     _getCDS_AD:	
  3058                           
  3059                           ;incstack = 0
  3060                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3061                           ;getCDS_AD@channel1 stored from wreg
  3062  0FD6  1283               	bcf	3,5	;RP0=0, select bank0
  3063  0FD7  1303               	bcf	3,6	;RP1=0, select bank0
  3064  0FD8  00E2               	movwf	getCDS_AD@channel1
  3065                           
  3066                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3067  0FD9  01E0               	clrf	getCDS_AD@i
  3068  0FDA  01E1               	clrf	getCDS_AD@j
  3069                           
  3070                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3071  0FDB  1DB2               	btfss	__CDS,3
  3072  0FDC  0008               	return
  3073                           
  3074                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3075  0FDD  14B2               	bsf	__CDS,1
  3076                           
  3077                           ;CDS_B1.c: 52: _CDS.ADRES = getAD(channel1, 0x70);
  3078  0FDE  3070               	movlw	112
  3079  0FDF  00DE               	movwf	??_getCDS_AD
  3080  0FE0  085E               	movf	??_getCDS_AD,w
  3081  0FE1  00F4               	movwf	getAD@adcon1
  3082  0FE2  0862               	movf	getCDS_AD@channel1,w
  3083  0FE3  158A  272D  158A   	fcall	_getAD
  3084  0FE6  1283               	bcf	3,5	;RP0=0, select bank0
  3085  0FE7  1303               	bcf	3,6	;RP1=0, select bank0
  3086  0FE8  00DF               	movwf	??_getCDS_AD+1
  3087  0FE9  085F               	movf	??_getCDS_AD+1,w
  3088  0FEA  00B6               	movwf	__CDS+4
  3089                           
  3090                           ;CDS_B1.c: 53: _CDS.VRAD = _CDS.ADRES;
  3091  0FEB  0836               	movf	__CDS+4,w
  3092  0FEC  00DE               	movwf	??_getCDS_AD
  3093  0FED  085E               	movf	??_getCDS_AD,w
  3094  0FEE  00B4               	movwf	__CDS+2
  3095                           
  3096                           ;CDS_B1.c: 54: _CDS.ADRES = getAD(channel2, 0x70);
  3097  0FEF  3070               	movlw	112
  3098  0FF0  00DE               	movwf	??_getCDS_AD
  3099  0FF1  085E               	movf	??_getCDS_AD,w
  3100  0FF2  00F4               	movwf	getAD@adcon1
  3101  0FF3  085D               	movf	getCDS_AD@channel2,w
  3102  0FF4  158A  272D         	fcall	_getAD
  3103  0FF6  1283               	bcf	3,5	;RP0=0, select bank0
  3104  0FF7  1303               	bcf	3,6	;RP1=0, select bank0
  3105  0FF8  00DF               	movwf	??_getCDS_AD+1
  3106  0FF9  085F               	movf	??_getCDS_AD+1,w
  3107  0FFA  00B6               	movwf	__CDS+4
  3108                           
  3109                           ;CDS_B1.c: 55: _CDS.SignalAD = _CDS.ADRES;
  3110  0FFB  0836               	movf	__CDS+4,w
  3111  0FFC  00DE               	movwf	??_getCDS_AD
  3112  0FFD  085E               	movf	??_getCDS_AD,w
  3113  0FFE  00B5               	movwf	__CDS+3
  3114  0FFF  0008               	return
  3115  1000                     __end_of_getCDS_AD:	
  3116                           
  3117                           	psect	text7
  3118  0F2D                     __ptext7:	
  3119 ;; *************** function _getAD *****************
  3120 ;; Defined at:
  3121 ;;		line 432 in file "../src/MCU_B1.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  adcon0          1    wreg     unsigned char 
  3124 ;;  adcon1          1    4[COMMON] unsigned char 
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  adcon0          1    5[COMMON] unsigned char 
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      unsigned char 
  3129 ;; Registers used:
  3130 ;;		wreg, status,2, status,0, pclath, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3136 ;;      Params:         1       0       0       0
  3137 ;;      Locals:         1       0       0       0
  3138 ;;      Temps:          0       0       0       0
  3139 ;;      Totals:         2       0       0       0
  3140 ;;Total ram usage:        2 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    3
  3143 ;; This function calls:
  3144 ;;		_Timeout_Counter
  3145 ;;		_set_TimeoutCleared
  3146 ;; This function is called by:
  3147 ;;		_getCDS_AD
  3148 ;;		_getPIR_AD
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           
  3153                           ;psect for function _getAD
  3154  0F2D                     _getAD:	
  3155                           
  3156                           ;incstack = 0
  3157                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3158                           ;getAD@adcon0 stored from wreg
  3159  0F2D  00F5               	movwf	getAD@adcon0
  3160                           
  3161                           ;MCU_B1.c: 433: ADCON0 = adcon0;
  3162  0F2E  0875               	movf	getAD@adcon0,w
  3163  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
  3164  0F30  1303               	bcf	3,6	;RP1=0, select bank0
  3165  0F31  009F               	movwf	31	;volatile
  3166                           
  3167                           ;MCU_B1.c: 434: ADCON1 = adcon1;
  3168  0F32  0874               	movf	getAD@adcon1,w
  3169  0F33  1683               	bsf	3,5	;RP0=1, select bank1
  3170  0F34  1303               	bcf	3,6	;RP1=0, select bank1
  3171  0F35  009F               	movwf	31	;volatile
  3172                           
  3173                           ;MCU_B1.c: 435: GO_nDONE = 1;
  3174  0F36  1283               	bcf	3,5	;RP0=0, select bank0
  3175  0F37  1303               	bcf	3,6	;RP1=0, select bank0
  3176  0F38  149F               	bsf	31,1	;volatile
  3177                           
  3178                           ;MCU_B1.c: 436: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3179  0F39  2F3D               	goto	l3232
  3180  0F3A                     l3230:	
  3181                           
  3182                           ;MCU_B1.c: 437: Timeout_Counter();
  3183  0F3A  158A  265A  158A   	fcall	_Timeout_Counter
  3184  0F3D                     l3232:	
  3185  0F3D  1283               	bcf	3,5	;RP0=0, select bank0
  3186  0F3E  1303               	bcf	3,6	;RP1=0, select bank0
  3187  0F3F  1C9F               	btfss	31,1	;volatile
  3188  0F40  2F43               	goto	l3236
  3189  0F41  1D2F               	btfss	_myMain+3,2
  3190  0F42  2F3A               	goto	l3230
  3191  0F43                     l3236:	
  3192                           
  3193                           ;MCU_B1.c: 438: };
  3194                           ;MCU_B1.c: 439: set_TimeoutCleared();
  3195  0F43  158A  257E         	fcall	_set_TimeoutCleared
  3196                           
  3197                           ;MCU_B1.c: 440: return ADRES;
  3198  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  3199  0F46  1303               	bcf	3,6	;RP1=0, select bank0
  3200  0F47  081E               	movf	30,w	;volatile
  3201  0F48  0008               	return
  3202  0F49                     __end_of_getAD:	
  3203                           
  3204                           	psect	text8
  3205  0E11                     __ptext8:	
  3206 ;; *************** function _WDT_Main *****************
  3207 ;; Defined at:
  3208 ;;		line 1103 in file "../src/MCU_B1.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;		None
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;		None
  3213 ;; Return value:  Size  Location     Type
  3214 ;;		None               void
  3215 ;; Registers used:
  3216 ;;		wreg, status,2, status,0, pclath, cstack
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3222 ;;      Params:         0       0       0       0
  3223 ;;      Locals:         0       0       0       0
  3224 ;;      Temps:          1       0       0       0
  3225 ;;      Totals:         1       0       0       0
  3226 ;;Total ram usage:        1 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    3
  3229 ;; This function calls:
  3230 ;;		_WDT_Clearing
  3231 ;; This function is called by:
  3232 ;;		_main
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           
  3237                           ;psect for function _WDT_Main
  3238  0E11                     _WDT_Main:	
  3239                           
  3240                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  3241                           
  3242                           ;incstack = 0
  3243                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3244  0E11  1283               	bcf	3,5	;RP0=0, select bank0
  3245  0E12  1303               	bcf	3,6	;RP1=0, select bank0
  3246  0E13  1C3E               	btfss	_WDT,0
  3247  0E14  0008               	return
  3248                           
  3249                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  3250  0E15  3001               	movlw	1
  3251  0E16  02BF               	subwf	_WDT+1,f
  3252  0E17  083F               	movf	_WDT+1,w
  3253  0E18  3AFF               	xorlw	255
  3254  0E19  1903               	skipnz
  3255  0E1A  0008               	return
  3256                           
  3257                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  3258  0E1B  3064               	movlw	100
  3259  0E1C  00F4               	movwf	??_WDT_Main
  3260  0E1D  0874               	movf	??_WDT_Main,w
  3261  0E1E  00BF               	movwf	_WDT+1
  3262                           
  3263                           ;MCU_B1.c: 1107: WDT_Clearing();
  3264  0E1F  118A  2002         	fcall	_WDT_Clearing
  3265  0E21  0008               	return
  3266  0E22                     __end_of_WDT_Main:	
  3267                           
  3268                           	psect	text9
  3269  0002                     __ptext9:	
  3270 ;; *************** function _WDT_Clearing *****************
  3271 ;; Defined at:
  3272 ;;		line 1113 in file "../src/MCU_B1.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;		None
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;		None
  3277 ;; Return value:  Size  Location     Type
  3278 ;;		None               void
  3279 ;; Registers used:
  3280 ;;		None
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3286 ;;      Params:         0       0       0       0
  3287 ;;      Locals:         0       0       0       0
  3288 ;;      Temps:          0       0       0       0
  3289 ;;      Totals:         0       0       0       0
  3290 ;;Total ram usage:        0 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    2
  3293 ;; This function calls:
  3294 ;;		Nothing
  3295 ;; This function is called by:
  3296 ;;		_WDT_Main
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           
  3301                           ;psect for function _WDT_Clearing
  3302  0002                     _WDT_Clearing:	
  3303                           
  3304                           ;incstack = 0
  3305                           ; Regs used in _WDT_Clearing: []
  3306  0002  0064               	clrwdt	;# 
  3307  0003  0008               	return
  3308  0004                     __end_of_WDT_Clearing:	
  3309                           
  3310                           	psect	text10
  3311  0DAE                     __ptext10:	
  3312 ;; *************** function _Switch_Main *****************
  3313 ;; Defined at:
  3314 ;;		line 76 in file "../src/Switch_B1.c"
  3315 ;; Parameters:    Size  Location     Type
  3316 ;;		None
  3317 ;; Auto vars:     Size  Location     Type
  3318 ;;		None
  3319 ;; Return value:  Size  Location     Type
  3320 ;;		None               void
  3321 ;; Registers used:
  3322 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3323 ;; Tracked objects:
  3324 ;;		On entry : 0/0
  3325 ;;		On exit  : 0/0
  3326 ;;		Unchanged: 0/0
  3327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3328 ;;      Params:         0       0       0       0
  3329 ;;      Locals:         0       0       0       0
  3330 ;;      Temps:          0       0       0       0
  3331 ;;      Totals:         0       0       0       0
  3332 ;;Total ram usage:        0 bytes
  3333 ;; Hardware stack levels used:    1
  3334 ;; Hardware stack levels required when called:    6
  3335 ;; This function calls:
  3336 ;;		_TouchPower
  3337 ;;		_setSw_Main
  3338 ;; This function is called by:
  3339 ;;		_main
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           
  3344                           ;psect for function _Switch_Main
  3345  0DAE                     _Switch_Main:	
  3346                           
  3347                           ;Switch_B1.c: 79: setSw_Main(1);
  3348                           
  3349                           ;incstack = 0
  3350                           ; Regs used in _Switch_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3351  0DAE  3001               	movlw	1
  3352  0DAF  118A  22F4  158A   	fcall	_setSw_Main
  3353                           
  3354                           ;Switch_B1.c: 83: setSw_Main(2);
  3355  0DB2  3002               	movlw	2
  3356  0DB3  118A  22F4  158A   	fcall	_setSw_Main
  3357                           
  3358                           ;Switch_B1.c: 91: TouchPower();
  3359  0DB6  158A  266E         	fcall	_TouchPower
  3360  0DB8  0008               	return
  3361  0DB9                     __end_of_Switch_Main:	
  3362                           
  3363                           	psect	text11
  3364  02F4                     __ptext11:	
  3365 ;; *************** function _setSw_Main *****************
  3366 ;; Defined at:
  3367 ;;		line 117 in file "../src/Switch_B1.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;  sw              1    wreg     unsigned char 
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  sw              1    6[BANK0 ] unsigned char 
  3372 ;; Return value:  Size  Location     Type
  3373 ;;		None               void
  3374 ;; Registers used:
  3375 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3381 ;;      Params:         0       0       0       0
  3382 ;;      Locals:         0       1       0       0
  3383 ;;      Temps:          0       2       0       0
  3384 ;;      Totals:         0       3       0       0
  3385 ;;Total ram usage:        3 bytes
  3386 ;; Hardware stack levels used:    1
  3387 ;; Hardware stack levels required when called:    5
  3388 ;; This function calls:
  3389 ;;		_SwPointSelect
  3390 ;;		_getMain_All_Error_Status
  3391 ;;		_getSw_KeyStatus
  3392 ;;		_setLED
  3393 ;;		_setLights_SwOff
  3394 ;;		_setLights_SwOn
  3395 ;; This function is called by:
  3396 ;;		_Switch_Main
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           
  3401                           ;psect for function _setSw_Main
  3402  02F4                     _setSw_Main:	
  3403                           
  3404                           ;incstack = 0
  3405                           ; Regs used in _setSw_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3406                           ;setSw_Main@sw stored from wreg
  3407  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  3408  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  3409  02F6  00E3               	movwf	setSw_Main@sw
  3410                           
  3411                           ;Switch_B1.c: 118: SwPointSelect(sw);
  3412  02F7  0863               	movf	setSw_Main@sw,w
  3413  02F8  158A  2647  118A   	fcall	_SwPointSelect
  3414                           
  3415                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  3416  02FB  0879               	movf	_Sw,w
  3417  02FC  0084               	movwf	4
  3418  02FD  1383               	bcf	3,7	;select IRP bank0
  3419  02FE  1C00               	btfss	0,0
  3420  02FF  2BA3               	goto	l1181
  3421                           
  3422                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  3423  0300  3000               	movlw	0
  3424  0301  158A  256B  118A   	fcall	_getMain_All_Error_Status
  3425  0304  3800               	iorlw	0
  3426  0305  1D03               	skipz
  3427  0306  2B22               	goto	l4352
  3428                           
  3429                           ;Switch_B1.c: 122: Sw->Detect = 0;
  3430  0307  0A79               	incf	_Sw,w
  3431  0308  0084               	movwf	4
  3432  0309  1383               	bcf	3,7	;select IRP bank0
  3433  030A  1080               	bcf	0,1
  3434                           
  3435                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  3436  030B  1283               	bcf	3,5	;RP0=0, select bank0
  3437  030C  1303               	bcf	3,6	;RP1=0, select bank0
  3438  030D  0863               	movf	setSw_Main@sw,w
  3439  030E  158A  2682  118A   	fcall	_getSw_KeyStatus
  3440  0311  3A01               	xorlw	1
  3441  0312  3000               	movlw	0
  3442  0313  1903               	skipnz
  3443  0314  3001               	movlw	1
  3444  0315  1283               	bcf	3,5	;RP0=0, select bank0
  3445  0316  1303               	bcf	3,6	;RP1=0, select bank0
  3446  0317  00E1               	movwf	??_setSw_Main
  3447  0318  0879               	movf	_Sw,w
  3448  0319  0084               	movwf	4
  3449  031A  0DE1               	rlf	??_setSw_Main,f
  3450  031B  1383               	bcf	3,7	;select IRP bank0
  3451  031C  0800               	movf	0,w
  3452  031D  0661               	xorwf	??_setSw_Main,w
  3453  031E  39FD               	andlw	-3
  3454  031F  0661               	xorwf	??_setSw_Main,w
  3455  0320  0080               	movwf	0
  3456                           
  3457                           ;Switch_B1.c: 124: } else {
  3458  0321  2B30               	goto	l1183
  3459  0322                     l4352:	
  3460                           
  3461                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  3462  0322  0A79               	incf	_Sw,w
  3463  0323  0084               	movwf	4
  3464  0324  1383               	bcf	3,7	;select IRP bank0
  3465  0325  1880               	btfsc	0,1
  3466  0326  2B30               	goto	l1183
  3467                           
  3468                           ;Switch_B1.c: 126: Sw->Detect = 1;
  3469  0327  0A79               	incf	_Sw,w
  3470  0328  0084               	movwf	4
  3471  0329  1480               	bsf	0,1
  3472                           
  3473                           ;Switch_B1.c: 128: Sw->Touch = 0;
  3474  032A  0879               	movf	_Sw,w
  3475  032B  0084               	movwf	4
  3476  032C  1080               	bcf	0,1
  3477                           
  3478                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  3479  032D  0879               	movf	_Sw,w
  3480  032E  0084               	movwf	4
  3481  032F  1500               	bsf	0,2
  3482  0330                     l1183:	
  3483                           
  3484                           ;Switch_B1.c: 130: }
  3485                           ;Switch_B1.c: 131: }
  3486                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  3487  0330  0879               	movf	_Sw,w
  3488  0331  0084               	movwf	4
  3489  0332  1C80               	btfss	0,1
  3490  0333  2B7B               	goto	l4378
  3491                           
  3492                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  3493  0334  0879               	movf	_Sw,w
  3494  0335  0084               	movwf	4
  3495  0336  1900               	btfsc	0,2
  3496  0337  2B53               	goto	l4368
  3497                           
  3498                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  3499  0338  3001               	movlw	1
  3500  0339  1283               	bcf	3,5	;RP0=0, select bank0
  3501  033A  1303               	bcf	3,6	;RP1=0, select bank0
  3502  033B  00E1               	movwf	??_setSw_Main
  3503  033C  0879               	movf	_Sw,w
  3504  033D  3E02               	addlw	2
  3505  033E  0084               	movwf	4
  3506  033F  0861               	movf	??_setSw_Main,w
  3507  0340  0780               	addwf	0,f
  3508                           
  3509                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  3510  0341  0879               	movf	_Sw,w
  3511  0342  3E02               	addlw	2
  3512  0343  0084               	movwf	4
  3513  0344  3003               	movlw	3
  3514  0345  0200               	subwf	0,w
  3515  0346  1C03               	skipc
  3516  0347  0008               	return
  3517                           
  3518                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  3519  0348  0879               	movf	_Sw,w
  3520  0349  3E02               	addlw	2
  3521  034A  0084               	movwf	4
  3522  034B  0180               	clrf	0
  3523                           
  3524                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  3525  034C  0879               	movf	_Sw,w
  3526  034D  0084               	movwf	4
  3527  034E  1500               	bsf	0,2
  3528                           
  3529                           ;Switch_B1.c: 140: setLights_SwOn(sw);
  3530  034F  0863               	movf	setSw_Main@sw,w
  3531  0350  158A  2749         	fcall	_setLights_SwOn
  3532                           
  3533                           ;Switch_B1.c: 146: }
  3534                           ;Switch_B1.c: 147: } else {
  3535  0352  0008               	return
  3536  0353                     l4368:	
  3537                           
  3538                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  3539  0353  0879               	movf	_Sw,w
  3540  0354  0084               	movwf	4
  3541  0355  1383               	bcf	3,7	;select IRP bank0
  3542  0356  1980               	btfsc	0,3
  3543  0357  0008               	return
  3544                           
  3545                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  3546  0358  0879               	movf	_Sw,w
  3547  0359  3E03               	addlw	3
  3548  035A  0084               	movwf	4
  3549  035B  3001               	movlw	1
  3550  035C  0780               	addwf	0,f
  3551  035D  0A84               	incf	4,f
  3552  035E  1803               	skipnc
  3553  035F  0A80               	incf	0,f
  3554                           
  3555                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  3556  0360  0879               	movf	_Sw,w
  3557  0361  3E03               	addlw	3
  3558  0362  0084               	movwf	4
  3559  0363  0800               	movf	0,w
  3560  0364  1283               	bcf	3,5	;RP0=0, select bank0
  3561  0365  1303               	bcf	3,6	;RP1=0, select bank0
  3562  0366  00E1               	movwf	??_setSw_Main
  3563  0367  0A84               	incf	4,f
  3564  0368  0800               	movf	0,w
  3565  0369  00E2               	movwf	??_setSw_Main+1
  3566  036A  3000               	movlw	0
  3567  036B  0262               	subwf	??_setSw_Main+1,w
  3568  036C  304B               	movlw	75
  3569  036D  1903               	skipnz
  3570  036E  0261               	subwf	??_setSw_Main,w
  3571  036F  1C03               	skipc
  3572  0370  0008               	return
  3573                           
  3574                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  3575  0371  0879               	movf	_Sw,w
  3576  0372  3E03               	addlw	3
  3577  0373  0084               	movwf	4
  3578  0374  0180               	clrf	0
  3579  0375  0A84               	incf	4,f
  3580  0376  0180               	clrf	0
  3581                           
  3582                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  3583  0377  0879               	movf	_Sw,w
  3584  0378  0084               	movwf	4
  3585  0379  1580               	bsf	0,3
  3586                           
  3587                           ;Switch_B1.c: 194: }
  3588                           ;Switch_B1.c: 195: }
  3589                           ;Switch_B1.c: 196: } else {
  3590                           
  3591                           ;Switch_B1.c: 161: }
  3592                           ;Switch_B1.c: 162: } else {
  3593  037A  0008               	return
  3594  037B                     l4378:	
  3595                           
  3596                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  3597  037B  0879               	movf	_Sw,w
  3598  037C  0084               	movwf	4
  3599  037D  1D00               	btfss	0,2
  3600  037E  0008               	return
  3601                           
  3602                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  3603  037F  3001               	movlw	1
  3604  0380  1283               	bcf	3,5	;RP0=0, select bank0
  3605  0381  1303               	bcf	3,6	;RP1=0, select bank0
  3606  0382  00E1               	movwf	??_setSw_Main
  3607  0383  0879               	movf	_Sw,w
  3608  0384  3E02               	addlw	2
  3609  0385  0084               	movwf	4
  3610  0386  0861               	movf	??_setSw_Main,w
  3611  0387  0780               	addwf	0,f
  3612                           
  3613                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  3614  0388  0879               	movf	_Sw,w
  3615  0389  3E02               	addlw	2
  3616  038A  0084               	movwf	4
  3617  038B  3003               	movlw	3
  3618  038C  0200               	subwf	0,w
  3619  038D  1C03               	skipc
  3620  038E  0008               	return
  3621                           
  3622                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  3623  038F  0879               	movf	_Sw,w
  3624  0390  3E02               	addlw	2
  3625  0391  0084               	movwf	4
  3626  0392  0180               	clrf	0
  3627                           
  3628                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  3629  0393  0879               	movf	_Sw,w
  3630  0394  0084               	movwf	4
  3631  0395  1100               	bcf	0,2
  3632                           
  3633                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  3634  0396  0879               	movf	_Sw,w
  3635  0397  3E03               	addlw	3
  3636  0398  0084               	movwf	4
  3637  0399  0180               	clrf	0
  3638  039A  0A84               	incf	4,f
  3639  039B  0180               	clrf	0
  3640                           
  3641                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  3642  039C  0879               	movf	_Sw,w
  3643  039D  0084               	movwf	4
  3644  039E  1180               	bcf	0,3
  3645                           
  3646                           ;Switch_B1.c: 211: setLights_SwOff(sw);
  3647  039F  0863               	movf	setSw_Main@sw,w
  3648  03A0  158A  2767         	fcall	_setLights_SwOff
  3649                           
  3650                           ;Switch_B1.c: 220: }
  3651                           ;Switch_B1.c: 221: }
  3652                           ;Switch_B1.c: 222: }
  3653                           ;Switch_B1.c: 223: } else {
  3654  03A2  0008               	return
  3655  03A3                     l1181:	
  3656                           
  3657                           ;Switch_B1.c: 224: if (myMain.PowerON == 1) {
  3658  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  3659  03A4  1303               	bcf	3,6	;RP1=0, select bank0
  3660  03A5  1C2C               	btfss	_myMain,0
  3661  03A6  0008               	return
  3662                           
  3663                           ;Switch_B1.c: 225: Sw->Enable = 1;
  3664  03A7  0879               	movf	_Sw,w
  3665  03A8  0084               	movwf	4
  3666  03A9  1400               	bsf	0,0
  3667                           
  3668                           ;Switch_B1.c: 227: if (sw == 2) {
  3669  03AA  0863               	movf	setSw_Main@sw,w
  3670  03AB  3A02               	xorlw	2
  3671  03AC  1D03               	skipz
  3672  03AD  0008               	return
  3673                           
  3674                           ;Switch_B1.c: 228: setLED(1, 1);
  3675  03AE  01DD               	clrf	setLED@command
  3676  03AF  0ADD               	incf	setLED@command,f
  3677  03B0  3001               	movlw	1
  3678  03B1  118A  2537         	fcall	_setLED
  3679  03B3  0008               	return
  3680  03B4                     __end_of_setSw_Main:	
  3681                           
  3682                           	psect	text12
  3683  0F49                     __ptext12:	
  3684 ;; *************** function _setLights_SwOn *****************
  3685 ;; Defined at:
  3686 ;;		line 362 in file "../src/TriacRelay_B1.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;  sw              1    wreg     unsigned char 
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;  sw              1    2[BANK0 ] unsigned char 
  3691 ;; Return value:  Size  Location     Type
  3692 ;;		None               void
  3693 ;; Registers used:
  3694 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3700 ;;      Params:         0       0       0       0
  3701 ;;      Locals:         0       1       0       0
  3702 ;;      Temps:          0       0       0       0
  3703 ;;      Totals:         0       1       0       0
  3704 ;;Total ram usage:        1 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; Hardware stack levels required when called:    4
  3707 ;; This function calls:
  3708 ;;		_LightsPointSelect
  3709 ;;		_getLights_Status
  3710 ;; This function is called by:
  3711 ;;		_setSw_Main
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           
  3716                           ;psect for function _setLights_SwOn
  3717  0F49                     _setLights_SwOn:	
  3718                           
  3719                           ;incstack = 0
  3720                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3721                           ;setLights_SwOn@sw stored from wreg
  3722  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  3723  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  3724  0F4B  00DF               	movwf	setLights_SwOn@sw
  3725                           
  3726                           ;TriacRelay_B1.c: 364: LightsPointSelect(sw);
  3727  0F4C  085F               	movf	setLights_SwOn@sw,w
  3728  0F4D  158A  2634  158A   	fcall	_LightsPointSelect
  3729                           
  3730                           ;TriacRelay_B1.c: 366: Lights->SwFlag = 1;
  3731  0F50  0A77               	incf	_Lights,w
  3732  0F51  0084               	movwf	4
  3733  0F52  1383               	bcf	3,7	;select IRP bank0
  3734  0F53  1500               	bsf	0,2
  3735                           
  3736                           ;TriacRelay_B1.c: 367: if (getLights_Status(sw) == 0) {
  3737  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  3738  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  3739  0F56  085F               	movf	setLights_SwOn@sw,w
  3740  0F57  158A  2600  158A   	fcall	_getLights_Status
  3741  0F5A  3800               	iorlw	0
  3742  0F5B  1D03               	skipz
  3743  0F5C  2F62               	goto	l4162
  3744                           
  3745                           ;TriacRelay_B1.c: 368: Lights->SwStatus = 1;
  3746  0F5D  0A77               	incf	_Lights,w
  3747  0F5E  0084               	movwf	4
  3748  0F5F  1383               	bcf	3,7	;select IRP bank0
  3749  0F60  1580               	bsf	0,3
  3750                           
  3751                           ;TriacRelay_B1.c: 369: } else {
  3752  0F61  0008               	return
  3753  0F62                     l4162:	
  3754                           
  3755                           ;TriacRelay_B1.c: 370: Lights->SwStatus = 0;
  3756  0F62  0A77               	incf	_Lights,w
  3757  0F63  0084               	movwf	4
  3758  0F64  1383               	bcf	3,7	;select IRP bank0
  3759  0F65  1180               	bcf	0,3
  3760  0F66  0008               	return
  3761  0F67                     __end_of_setLights_SwOn:	
  3762                           
  3763                           	psect	text13
  3764  0F67                     __ptext13:	
  3765 ;; *************** function _setLights_SwOff *****************
  3766 ;; Defined at:
  3767 ;;		line 374 in file "../src/TriacRelay_B1.c"
  3768 ;; Parameters:    Size  Location     Type
  3769 ;;  sw              1    wreg     unsigned char 
  3770 ;; Auto vars:     Size  Location     Type
  3771 ;;  sw              1    3[BANK0 ] unsigned char 
  3772 ;; Return value:  Size  Location     Type
  3773 ;;		None               void
  3774 ;; Registers used:
  3775 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3776 ;; Tracked objects:
  3777 ;;		On entry : 0/0
  3778 ;;		On exit  : 0/0
  3779 ;;		Unchanged: 0/0
  3780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3781 ;;      Params:         0       0       0       0
  3782 ;;      Locals:         0       1       0       0
  3783 ;;      Temps:          0       0       0       0
  3784 ;;      Totals:         0       1       0       0
  3785 ;;Total ram usage:        1 bytes
  3786 ;; Hardware stack levels used:    1
  3787 ;; Hardware stack levels required when called:    4
  3788 ;; This function calls:
  3789 ;;		_LightsPointSelect
  3790 ;;		_setLights_Trigger
  3791 ;; This function is called by:
  3792 ;;		_setSw_Main
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           
  3797                           ;psect for function _setLights_SwOff
  3798  0F67                     _setLights_SwOff:	
  3799                           
  3800                           ;incstack = 0
  3801                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3802                           ;setLights_SwOff@sw stored from wreg
  3803  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  3804  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  3805  0F69  00E0               	movwf	setLights_SwOff@sw
  3806                           
  3807                           ;TriacRelay_B1.c: 375: LightsPointSelect(sw);
  3808  0F6A  0860               	movf	setLights_SwOff@sw,w
  3809  0F6B  158A  2634  158A   	fcall	_LightsPointSelect
  3810                           
  3811                           ;TriacRelay_B1.c: 377: if (Lights->SwFlag == 1) {
  3812  0F6E  0A77               	incf	_Lights,w
  3813  0F6F  0084               	movwf	4
  3814  0F70  1383               	bcf	3,7	;select IRP bank0
  3815  0F71  1D00               	btfss	0,2
  3816  0F72  0008               	return
  3817                           
  3818                           ;TriacRelay_B1.c: 378: Lights->SwFlag = 0;
  3819  0F73  0A77               	incf	_Lights,w
  3820  0F74  0084               	movwf	4
  3821  0F75  1100               	bcf	0,2
  3822                           
  3823                           ;TriacRelay_B1.c: 379: if (Lights->SwStatus == 1) {
  3824  0F76  0A77               	incf	_Lights,w
  3825  0F77  0084               	movwf	4
  3826  0F78  1D80               	btfss	0,3
  3827  0F79  2F82               	goto	l4172
  3828                           
  3829                           ;TriacRelay_B1.c: 380: setLights_Trigger(sw, 1);
  3830  0F7A  1283               	bcf	3,5	;RP0=0, select bank0
  3831  0F7B  1303               	bcf	3,6	;RP1=0, select bank0
  3832  0F7C  01DD               	clrf	setLights_Trigger@command
  3833  0F7D  0ADD               	incf	setLights_Trigger@command,f
  3834  0F7E  0860               	movf	setLights_SwOff@sw,w
  3835  0F7F  158A  26F6         	fcall	_setLights_Trigger
  3836                           
  3837                           ;TriacRelay_B1.c: 381: } else {
  3838  0F81  0008               	return
  3839  0F82                     l4172:	
  3840                           
  3841                           ;TriacRelay_B1.c: 382: setLights_Trigger(sw, 0);
  3842  0F82  1283               	bcf	3,5	;RP0=0, select bank0
  3843  0F83  1303               	bcf	3,6	;RP1=0, select bank0
  3844  0F84  01DD               	clrf	setLights_Trigger@command
  3845  0F85  0860               	movf	setLights_SwOff@sw,w
  3846  0F86  158A  26F6         	fcall	_setLights_Trigger
  3847  0F88  0008               	return
  3848  0F89                     __end_of_setLights_SwOff:	
  3849                           
  3850                           	psect	text14
  3851  0E82                     __ptext14:	
  3852 ;; *************** function _getSw_KeyStatus *****************
  3853 ;; Defined at:
  3854 ;;		line 236 in file "../src/Switch_B1.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;  sw              1    wreg     unsigned char 
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;  sw              1    5[COMMON] unsigned char 
  3859 ;;  status          1    4[COMMON] unsigned char 
  3860 ;; Return value:  Size  Location     Type
  3861 ;;                  1    wreg      unsigned char 
  3862 ;; Registers used:
  3863 ;;		wreg, status,2
  3864 ;; Tracked objects:
  3865 ;;		On entry : 0/0
  3866 ;;		On exit  : 0/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3869 ;;      Params:         0       0       0       0
  3870 ;;      Locals:         2       0       0       0
  3871 ;;      Temps:          0       0       0       0
  3872 ;;      Totals:         2       0       0       0
  3873 ;;Total ram usage:        2 bytes
  3874 ;; Hardware stack levels used:    1
  3875 ;; Hardware stack levels required when called:    2
  3876 ;; This function calls:
  3877 ;;		Nothing
  3878 ;; This function is called by:
  3879 ;;		_setSw_Main
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           
  3884                           ;psect for function _getSw_KeyStatus
  3885  0E82                     _getSw_KeyStatus:	
  3886                           
  3887                           ;incstack = 0
  3888                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  3889                           ;getSw_KeyStatus@sw stored from wreg
  3890  0E82  00F5               	movwf	getSw_KeyStatus@sw
  3891                           
  3892                           ;Switch_B1.c: 237: char status = 0;
  3893  0E83  01F4               	clrf	getSw_KeyStatus@status
  3894                           
  3895                           ;Switch_B1.c: 251: if (sw == 1) {
  3896  0E84  0875               	movf	getSw_KeyStatus@sw,w
  3897  0E85  3A01               	xorlw	1
  3898  0E86  1D03               	skipz
  3899  0E87  2E8A               	goto	l3068
  3900                           
  3901                           ;Switch_B1.c: 252: __nop();
  3902  0E88  0000               	nop
  3903                           
  3904                           ;Switch_B1.c: 253: } else if (sw == 2) {
  3905  0E89  2E94               	goto	l3072
  3906  0E8A                     l3068:	
  3907  0E8A  0875               	movf	getSw_KeyStatus@sw,w
  3908  0E8B  3A02               	xorlw	2
  3909  0E8C  1D03               	skipz
  3910  0E8D  2E94               	goto	l3072
  3911                           
  3912                           ;Switch_B1.c: 254: status = RB4 == 1 ? 1 : 0;
  3913  0E8E  3000               	movlw	0
  3914  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  3915  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  3916  0E91  1A06               	btfsc	6,4	;volatile
  3917  0E92  3001               	movlw	1
  3918  0E93  00F4               	movwf	getSw_KeyStatus@status
  3919  0E94                     l3072:	
  3920                           
  3921                           ;Switch_B1.c: 255: }
  3922                           ;Switch_B1.c: 274: return status;
  3923  0E94  0874               	movf	getSw_KeyStatus@status,w
  3924  0E95  0008               	return
  3925  0E96                     __end_of_getSw_KeyStatus:	
  3926                           
  3927                           	psect	text15
  3928  0E47                     __ptext15:	
  3929 ;; *************** function _SwPointSelect *****************
  3930 ;; Defined at:
  3931 ;;		line 25 in file "../src/Switch_B1.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;  sw              1    wreg     unsigned char 
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;  sw              1    5[COMMON] unsigned char 
  3936 ;; Return value:  Size  Location     Type
  3937 ;;		None               void
  3938 ;; Registers used:
  3939 ;;		wreg
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3945 ;;      Params:         0       0       0       0
  3946 ;;      Locals:         1       0       0       0
  3947 ;;      Temps:          1       0       0       0
  3948 ;;      Totals:         2       0       0       0
  3949 ;;Total ram usage:        2 bytes
  3950 ;; Hardware stack levels used:    1
  3951 ;; Hardware stack levels required when called:    2
  3952 ;; This function calls:
  3953 ;;		Nothing
  3954 ;; This function is called by:
  3955 ;;		_setSw_Main
  3956 ;; This function uses a non-reentrant model
  3957 ;;
  3958                           
  3959                           
  3960                           ;psect for function _SwPointSelect
  3961  0E47                     _SwPointSelect:	
  3962                           
  3963                           ;incstack = 0
  3964                           ; Regs used in _SwPointSelect: [wreg]
  3965                           ;SwPointSelect@sw stored from wreg
  3966  0E47  00F5               	movwf	SwPointSelect@sw
  3967                           
  3968                           ;Switch_B1.c: 28: if (sw == 1) {
  3969  0E48  0875               	movf	SwPointSelect@sw,w
  3970  0E49  3A01               	xorlw	1
  3971  0E4A  1D03               	skipz
  3972  0E4B  2E51               	goto	l3058
  3973                           
  3974                           ;Switch_B1.c: 29: Sw = &Sw1;
  3975  0E4C  30CE               	movlw	_Sw1& (0+255)
  3976  0E4D  00F4               	movwf	??_SwPointSelect
  3977  0E4E  0874               	movf	??_SwPointSelect,w
  3978  0E4F  00F9               	movwf	_Sw
  3979                           
  3980                           ;Switch_B1.c: 30: }
  3981  0E50  0008               	return
  3982  0E51                     l3058:	
  3983                           
  3984                           ;Switch_B1.c: 33: else if (sw == 2) {
  3985  0E51  0875               	movf	SwPointSelect@sw,w
  3986  0E52  3A02               	xorlw	2
  3987  0E53  1D03               	skipz
  3988  0E54  0008               	return
  3989                           
  3990                           ;Switch_B1.c: 34: Sw = &Sw2;
  3991  0E55  30D3               	movlw	_Sw2& (0+255)
  3992  0E56  00F4               	movwf	??_SwPointSelect
  3993  0E57  0874               	movf	??_SwPointSelect,w
  3994  0E58  00F9               	movwf	_Sw
  3995  0E59  0008               	return
  3996  0E5A                     __end_of_SwPointSelect:	
  3997                           
  3998                           	psect	text16
  3999  0E6E                     __ptext16:	
  4000 ;; *************** function _TouchPower *****************
  4001 ;; Defined at:
  4002 ;;		line 10 in file "../src/Switch_B1.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;		None
  4005 ;; Auto vars:     Size  Location     Type
  4006 ;;		None
  4007 ;; Return value:  Size  Location     Type
  4008 ;;		None               void
  4009 ;; Registers used:
  4010 ;;		wreg, status,2, status,0, pclath, cstack
  4011 ;; Tracked objects:
  4012 ;;		On entry : 0/0
  4013 ;;		On exit  : 0/0
  4014 ;;		Unchanged: 0/0
  4015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4016 ;;      Params:         0       0       0       0
  4017 ;;      Locals:         0       0       0       0
  4018 ;;      Temps:          0       0       0       0
  4019 ;;      Totals:         0       0       0       0
  4020 ;;Total ram usage:        0 bytes
  4021 ;; Hardware stack levels used:    1
  4022 ;; Hardware stack levels required when called:    3
  4023 ;; This function calls:
  4024 ;;		_Timeout_Counter
  4025 ;;		_set_TimeoutCleared
  4026 ;; This function is called by:
  4027 ;;		_Switch_Main
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           
  4032                           ;psect for function _TouchPower
  4033  0E6E                     _TouchPower:	
  4034                           
  4035                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  4036                           
  4037                           ;incstack = 0
  4038                           ; Regs used in _TouchPower: [wreg+status,2+status,0+pclath+cstack]
  4039  0E6E  1283               	bcf	3,5	;RP0=0, select bank0
  4040  0E6F  1303               	bcf	3,6	;RP1=0, select bank0
  4041  0E70  1C2C               	btfss	_myMain,0
  4042  0E71  0008               	return
  4043                           
  4044                           ;Switch_B1.c: 12: if (RB5 == 0) {
  4045  0E72  1A86               	btfsc	6,5	;volatile
  4046  0E73  0008               	return
  4047  0E74  2E79               	goto	l3344
  4048  0E75                     l1159:	
  4049                           ;Switch_B1.c: 13: while (RB5 == 0 && myMain.Timeout == 0) {
  4050                           
  4051                           
  4052                           ;Switch_B1.c: 14: RB5 = 1;
  4053  0E75  1686               	bsf	6,5	;volatile
  4054                           
  4055                           ;Switch_B1.c: 15: Timeout_Counter();
  4056  0E76  158A  265A  158A   	fcall	_Timeout_Counter
  4057  0E79                     l3344:	
  4058  0E79  1283               	bcf	3,5	;RP0=0, select bank0
  4059  0E7A  1303               	bcf	3,6	;RP1=0, select bank0
  4060  0E7B  1A86               	btfsc	6,5	;volatile
  4061  0E7C  2E7F               	goto	l3348
  4062  0E7D  1D2F               	btfss	_myMain+3,2
  4063  0E7E  2E75               	goto	l1159
  4064  0E7F                     l3348:	
  4065                           
  4066                           ;Switch_B1.c: 16: }
  4067                           ;Switch_B1.c: 17: set_TimeoutCleared();
  4068  0E7F  158A  257E         	fcall	_set_TimeoutCleared
  4069  0E81  0008               	return
  4070  0E82                     __end_of_TouchPower:	
  4071                           
  4072                           	psect	text17
  4073  0D7E                     __ptext17:	
  4074 ;; *************** function _set_TimeoutCleared *****************
  4075 ;; Defined at:
  4076 ;;		line 281 in file "../src/Main_B1.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;		None
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;		None
  4081 ;; Return value:  Size  Location     Type
  4082 ;;		None               void
  4083 ;; Registers used:
  4084 ;;		status,2
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4090 ;;      Params:         0       0       0       0
  4091 ;;      Locals:         0       0       0       0
  4092 ;;      Temps:          0       0       0       0
  4093 ;;      Totals:         0       0       0       0
  4094 ;;Total ram usage:        0 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    2
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_getAD
  4101 ;;		_TouchPower
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           
  4106                           ;psect for function _set_TimeoutCleared
  4107  0D7E                     _set_TimeoutCleared:	
  4108                           
  4109                           ;Main_B1.c: 282: myMain.Timeout = 0;
  4110                           
  4111                           ;incstack = 0
  4112                           ; Regs used in _set_TimeoutCleared: [status,2]
  4113  0D7E  1283               	bcf	3,5	;RP0=0, select bank0
  4114  0D7F  1303               	bcf	3,6	;RP1=0, select bank0
  4115  0D80  112F               	bcf	_myMain+3,2
  4116                           
  4117                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  4118  0D81  01B0               	clrf	_myMain+4
  4119  0D82  01B1               	clrf	_myMain+5
  4120  0D83  0008               	return
  4121  0D84                     __end_of_set_TimeoutCleared:	
  4122                           
  4123                           	psect	text18
  4124  0E5A                     __ptext18:	
  4125 ;; *************** function _Timeout_Counter *****************
  4126 ;; Defined at:
  4127 ;;		line 272 in file "../src/Main_B1.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;		None
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;		None
  4132 ;; Return value:  Size  Location     Type
  4133 ;;		None               void
  4134 ;; Registers used:
  4135 ;;		wreg, status,2
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4141 ;;      Params:         0       0       0       0
  4142 ;;      Locals:         0       0       0       0
  4143 ;;      Temps:          0       0       0       0
  4144 ;;      Totals:         0       0       0       0
  4145 ;;Total ram usage:        0 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:    2
  4148 ;; This function calls:
  4149 ;;		Nothing
  4150 ;; This function is called by:
  4151 ;;		_getAD
  4152 ;;		_TouchPower
  4153 ;; This function uses a non-reentrant model
  4154 ;;
  4155                           
  4156                           
  4157                           ;psect for function _Timeout_Counter
  4158  0E5A                     _Timeout_Counter:	
  4159                           
  4160                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  4161                           
  4162                           ;incstack = 0
  4163                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  4164  0E5A  3001               	movlw	1
  4165  0E5B  1283               	bcf	3,5	;RP0=0, select bank0
  4166  0E5C  1303               	bcf	3,6	;RP1=0, select bank0
  4167  0E5D  07B0               	addwf	_myMain+4,f
  4168  0E5E  1803               	skipnc
  4169  0E5F  0AB1               	incf	_myMain+5,f
  4170  0E60  3000               	movlw	0
  4171  0E61  07B1               	addwf	_myMain+5,f
  4172                           
  4173                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  4174  0E62  3061               	movlw	97
  4175  0E63  0631               	xorwf	_myMain+5,w
  4176  0E64  1D03               	skipz
  4177  0E65  2E68               	goto	u2355
  4178  0E66  30A8               	movlw	168
  4179  0E67  0630               	xorwf	_myMain+4,w
  4180  0E68                     u2355:	
  4181  0E68  1D03               	skipz
  4182  0E69  0008               	return
  4183                           
  4184                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  4185  0E6A  01B0               	clrf	_myMain+4
  4186  0E6B  01B1               	clrf	_myMain+5
  4187                           
  4188                           ;Main_B1.c: 276: myMain.Timeout = 1;
  4189  0E6C  152F               	bsf	_myMain+3,2
  4190  0E6D  0008               	return
  4191  0E6E                     __end_of_Timeout_Counter:	
  4192                           
  4193                           	psect	text19
  4194  0D69                     __ptext19:	
  4195 ;; *************** function _Switch_Initialization *****************
  4196 ;; Defined at:
  4197 ;;		line 46 in file "../src/Switch_B1.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;		None
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;		None
  4202 ;; Return value:  Size  Location     Type
  4203 ;;		None               void
  4204 ;; Registers used:
  4205 ;;		None
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4211 ;;      Params:         0       0       0       0
  4212 ;;      Locals:         0       0       0       0
  4213 ;;      Temps:          0       0       0       0
  4214 ;;      Totals:         0       0       0       0
  4215 ;;Total ram usage:        0 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    2
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_main
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           
  4226                           ;psect for function _Switch_Initialization
  4227  0D69                     _Switch_Initialization:	
  4228                           
  4229                           ;incstack = 0
  4230                           ; Regs used in _Switch_Initialization: []
  4231  0D69  0008               	return
  4232  0D6A                     __end_of_Switch_Initialization:	
  4233                           
  4234                           	psect	text20
  4235  0026                     __ptext20:	
  4236 ;; *************** function _PIR_Main *****************
  4237 ;; Defined at:
  4238 ;;		line 13 in file "../src/PIR_B1.c"
  4239 ;; Parameters:    Size  Location     Type
  4240 ;;		None
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;  LightsStatus    1   11[BANK0 ] unsigned char 
  4243 ;;  cds             1   10[BANK0 ] unsigned char 
  4244 ;;  error           1    7[BANK0 ] unsigned char 
  4245 ;; Return value:  Size  Location     Type
  4246 ;;		None               void
  4247 ;; Registers used:
  4248 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4254 ;;      Params:         0       0       0       0
  4255 ;;      Locals:         0       5       0       0
  4256 ;;      Temps:          0       4       0       0
  4257 ;;      Totals:         0       9       0       0
  4258 ;;Total ram usage:        9 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:    4
  4261 ;; This function calls:
  4262 ;;		_getCDS_Status
  4263 ;;		_getLights_Status
  4264 ;;		_getMain_All_Error_Status
  4265 ;;		_setLights_Trigger
  4266 ;; This function is called by:
  4267 ;;		_main
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           
  4272                           ;psect for function _PIR_Main
  4273  0026                     _PIR_Main:	
  4274                           
  4275                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4276                           
  4277                           ;incstack = 0
  4278                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4279  0026  3000               	movlw	0
  4280  0027  158A  256B  118A   	fcall	_getMain_All_Error_Status
  4281  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4282  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4283  002C  00E0               	movwf	??_PIR_Main
  4284  002D  0860               	movf	??_PIR_Main,w
  4285  002E  00E4               	movwf	PIR_Main@error
  4286                           
  4287                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4288  002F  158A  2593  118A   	fcall	_getCDS_Status
  4289  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4290  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4291  0034  00E0               	movwf	??_PIR_Main
  4292  0035  0860               	movf	??_PIR_Main,w
  4293  0036  00E7               	movwf	PIR_Main@cds
  4294                           
  4295                           ;PIR_B1.c: 16: char LightsStatus = 0;
  4296  0037  01E8               	clrf	PIR_Main@LightsStatus
  4297                           
  4298                           ;PIR_B1.c: 20: LightsStatus = getLights_Status(1);
  4299  0038  3001               	movlw	1
  4300  0039  158A  2600  118A   	fcall	_getLights_Status
  4301  003C  1283               	bcf	3,5	;RP0=0, select bank0
  4302  003D  1303               	bcf	3,6	;RP1=0, select bank0
  4303  003E  00E0               	movwf	??_PIR_Main
  4304  003F  0860               	movf	??_PIR_Main,w
  4305  0040  00E8               	movwf	PIR_Main@LightsStatus
  4306                           
  4307                           ;PIR_B1.c: 30: if (_PIR.Enable == 1) {
  4308  0041  1683               	bsf	3,5	;RP0=1, select bank1
  4309  0042  1303               	bcf	3,6	;RP1=0, select bank1
  4310  0043  1C20               	btfss	__PIR^(0+128),0
  4311  0044  29A6               	goto	l850
  4312                           
  4313                           ;PIR_B1.c: 31: if (error == 0) {
  4314  0045  1283               	bcf	3,5	;RP0=0, select bank0
  4315  0046  1303               	bcf	3,6	;RP1=0, select bank0
  4316  0047  08E4               	movf	PIR_Main@error,f
  4317  0048  1D03               	skipz
  4318  0049  286B               	goto	l851
  4319                           
  4320                           ;PIR_B1.c: 33: if (cds == 1) {
  4321  004A  0867               	movf	PIR_Main@cds,w
  4322  004B  3A01               	xorlw	1
  4323  004C  1D03               	skipz
  4324  004D  2852               	goto	l852
  4325                           
  4326                           ;PIR_B1.c: 34: _PIR.Available = 1;
  4327  004E  1683               	bsf	3,5	;RP0=1, select bank1
  4328  004F  1303               	bcf	3,6	;RP1=0, select bank1
  4329  0050  17A0               	bsf	__PIR^(0+128),7
  4330                           
  4331                           ;PIR_B1.c: 35: } else {
  4332  0051  2865               	goto	l4646
  4333  0052                     l852:	
  4334                           
  4335                           ;PIR_B1.c: 36: _PIR.Available = 0;
  4336  0052  1683               	bsf	3,5	;RP0=1, select bank1
  4337  0053  1303               	bcf	3,6	;RP1=0, select bank1
  4338  0054  13A0               	bcf	__PIR^(0+128),7
  4339                           
  4340                           ;PIR_B1.c: 37: if (_PIR.OK == 1) {
  4341  0055  1DA0               	btfss	__PIR^(0+128),3
  4342  0056  2865               	goto	l4646
  4343                           
  4344                           ;PIR_B1.c: 39: if (getLights_Status(1) == 1) {
  4345  0057  3001               	movlw	1
  4346  0058  158A  2600  118A   	fcall	_getLights_Status
  4347  005B  3A01               	xorlw	1
  4348  005C  1D03               	skipz
  4349  005D  2865               	goto	l4646
  4350                           
  4351                           ;PIR_B1.c: 40: setLights_Trigger(1, 0);
  4352  005E  1283               	bcf	3,5	;RP0=0, select bank0
  4353  005F  1303               	bcf	3,6	;RP1=0, select bank0
  4354  0060  01DD               	clrf	setLights_Trigger@command
  4355  0061  3001               	movlw	1
  4356  0062  158A  26F6  118A   	fcall	_setLights_Trigger
  4357  0065                     l4646:	
  4358                           
  4359                           ;PIR_B1.c: 41: }
  4360                           ;PIR_B1.c: 52: }
  4361                           ;PIR_B1.c: 53: }
  4362                           ;PIR_B1.c: 57: if (_PIR.Detect == 0) {
  4363  0065  1683               	bsf	3,5	;RP0=1, select bank1
  4364  0066  1303               	bcf	3,6	;RP1=0, select bank1
  4365  0067  1A20               	btfsc	__PIR^(0+128),4
  4366  0068  2871               	goto	l857
  4367                           
  4368                           ;PIR_B1.c: 58: _PIR.Detect = 1;
  4369  0069  1620               	bsf	__PIR^(0+128),4
  4370                           
  4371                           ;PIR_B1.c: 64: }
  4372                           ;PIR_B1.c: 65: } else {
  4373  006A  2871               	goto	l857
  4374  006B                     l851:	
  4375                           
  4376                           ;PIR_B1.c: 66: if (_PIR.Detect == 1) {
  4377  006B  1683               	bsf	3,5	;RP0=1, select bank1
  4378  006C  1303               	bcf	3,6	;RP1=0, select bank1
  4379  006D  1E20               	btfss	__PIR^(0+128),4
  4380  006E  2871               	goto	l857
  4381                           
  4382                           ;PIR_B1.c: 67: _PIR.Detect = 0;
  4383  006F  1220               	bcf	__PIR^(0+128),4
  4384                           
  4385                           ;PIR_B1.c: 68: _PIR.Available = 0;
  4386  0070  13A0               	bcf	__PIR^(0+128),7
  4387  0071                     l857:	
  4388                           
  4389                           ;PIR_B1.c: 86: }
  4390                           ;PIR_B1.c: 87: }
  4391                           ;PIR_B1.c: 89: if (_PIR.ADtoGO == 0) {
  4392  0071  18A0               	btfsc	__PIR^(0+128),1
  4393  0072  2882               	goto	l859
  4394                           
  4395                           ;PIR_B1.c: 90: _PIR.Time++;
  4396  0073  3001               	movlw	1
  4397  0074  1283               	bcf	3,5	;RP0=0, select bank0
  4398  0075  1303               	bcf	3,6	;RP1=0, select bank0
  4399  0076  00E0               	movwf	??_PIR_Main
  4400  0077  0860               	movf	??_PIR_Main,w
  4401  0078  1683               	bsf	3,5	;RP0=1, select bank1
  4402  0079  1303               	bcf	3,6	;RP1=0, select bank1
  4403  007A  07A5               	addwf	(__PIR^(0+128)+5),f
  4404                           
  4405                           ;PIR_B1.c: 91: if (_PIR.Time == (100 / 20)) {
  4406  007B  0825               	movf	(__PIR^(0+128)+5),w
  4407  007C  3A05               	xorlw	5
  4408  007D  1D03               	skipz
  4409  007E  294F               	goto	l4722
  4410                           
  4411                           ;PIR_B1.c: 92: _PIR.Time = 0;
  4412  007F  01A5               	clrf	(__PIR^(0+128)+5)
  4413                           
  4414                           ;PIR_B1.c: 93: _PIR.ADtoGO = 1;
  4415  0080  14A0               	bsf	__PIR^(0+128),1
  4416                           
  4417                           ;PIR_B1.c: 94: }
  4418                           ;PIR_B1.c: 95: } else {
  4419  0081  294F               	goto	l4722
  4420  0082                     l859:	
  4421                           
  4422                           ;PIR_B1.c: 96: if (_PIR.GO == 1) {
  4423  0082  1D20               	btfss	__PIR^(0+128),2
  4424  0083  294F               	goto	l4722
  4425                           
  4426                           ;PIR_B1.c: 97: _PIR.GO = 0;
  4427  0084  1120               	bcf	__PIR^(0+128),2
  4428                           
  4429                           ;PIR_B1.c: 98: _PIR.ADtoGO = 0;
  4430  0085  10A0               	bcf	__PIR^(0+128),1
  4431                           
  4432                           ;PIR_B1.c: 99: if (_PIR.Available == 1) {
  4433  0086  1BA0               	btfsc	__PIR^(0+128),7
  4434                           
  4435                           ;PIR_B1.c: 100: if (_PIR.OK == 1) {
  4436  0087  1DA0               	btfss	__PIR^(0+128),3
  4437  0088  294F               	goto	l4722
  4438                           
  4439                           ;PIR_B1.c: 102: _PIR.Time++;
  4440  0089  3001               	movlw	1
  4441  008A  1283               	bcf	3,5	;RP0=0, select bank0
  4442  008B  1303               	bcf	3,6	;RP1=0, select bank0
  4443  008C  00E0               	movwf	??_PIR_Main
  4444  008D  0860               	movf	??_PIR_Main,w
  4445  008E  1683               	bsf	3,5	;RP0=1, select bank1
  4446  008F  1303               	bcf	3,6	;RP1=0, select bank1
  4447  0090  07A5               	addwf	(__PIR^(0+128)+5),f
  4448                           
  4449                           ;PIR_B1.c: 103: if (_PIR.Time == 60) {
  4450  0091  0825               	movf	(__PIR^(0+128)+5),w
  4451  0092  3A3C               	xorlw	60
  4452  0093  1D03               	skipz
  4453  0094  28C9               	goto	l4700
  4454                           
  4455                           ;PIR_B1.c: 104: _PIR.Time = 0;
  4456  0095  01A5               	clrf	(__PIR^(0+128)+5)
  4457                           
  4458                           ;PIR_B1.c: 105: if (_PIR.RangeCount >= 90) {
  4459  0096  305A               	movlw	90
  4460  0097  024B               	subwf	(__PIR^(0+128)+43),w
  4461  0098  1C03               	skipc
  4462  0099  28A5               	goto	l4682
  4463                           
  4464                           ;PIR_B1.c: 106: _PIR.RangeTime1 = 0;
  4465  009A  01CA               	clrf	(__PIR^(0+128)+42)
  4466                           
  4467                           ;PIR_B1.c: 108: if (_PIR.RangeValue == 25) {
  4468  009B  084C               	movf	(__PIR^(0+128)+44),w
  4469  009C  3A19               	xorlw	25
  4470  009D  1903               	btfsc	3,2
  4471  009E  28BA               	goto	L9
  4472                           
  4473                           ;PIR_B1.c: 110: } else if (_PIR.RangeValue == (25+10)) {
  4474                           
  4475                           ;PIR_B1.c: 109: _PIR.RangeValue = (25+10);
  4476  009F  084C               	movf	(__PIR^(0+128)+44),w
  4477  00A0  3A23               	xorlw	35
  4478  00A1  1D03               	skipz
  4479  00A2  28C8               	goto	l4698
  4480                           
  4481                           ;PIR_B1.c: 111: _PIR.RangeValue = (25+20);
  4482  00A3  302D               	movlw	45
  4483  00A4  28C1               	goto	L8
  4484  00A5                     l4682:	
  4485                           ;PIR_B1.c: 112: }
  4486                           ;PIR_B1.c: 113: } else if (_PIR.RangeCount <= 10) {
  4487                           
  4488  00A5  300B               	movlw	11
  4489  00A6  024B               	subwf	(__PIR^(0+128)+43),w
  4490  00A7  1803               	skipnc
  4491  00A8  28C8               	goto	l4698
  4492                           
  4493                           ;PIR_B1.c: 114: _PIR.RangeTime1++;
  4494  00A9  3001               	movlw	1
  4495  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  4496  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  4497  00AC  00E0               	movwf	??_PIR_Main
  4498  00AD  0860               	movf	??_PIR_Main,w
  4499  00AE  1683               	bsf	3,5	;RP0=1, select bank1
  4500  00AF  1303               	bcf	3,6	;RP1=0, select bank1
  4501  00B0  07CA               	addwf	(__PIR^(0+128)+42),f
  4502                           
  4503                           ;PIR_B1.c: 115: if (_PIR.RangeTime1 == 2) {
  4504  00B1  084A               	movf	(__PIR^(0+128)+42),w
  4505  00B2  3A02               	xorlw	2
  4506  00B3  1D03               	skipz
  4507  00B4  28C8               	goto	l4698
  4508                           
  4509                           ;PIR_B1.c: 116: _PIR.RangeTime1 = 0;
  4510  00B5  01CA               	clrf	(__PIR^(0+128)+42)
  4511                           
  4512                           ;PIR_B1.c: 118: if (_PIR.RangeValue == (25+20)) {
  4513  00B6  084C               	movf	(__PIR^(0+128)+44),w
  4514  00B7  3A2D               	xorlw	45
  4515  00B8  1D03               	skipz
  4516  00B9  28BC               	goto	l4694
  4517  00BA                     L9:	
  4518                           
  4519                           ;PIR_B1.c: 119: _PIR.RangeValue = (25+10);
  4520  00BA  3023               	movlw	35
  4521  00BB  28C1               	goto	L8
  4522  00BC                     l4694:	
  4523                           ;PIR_B1.c: 120: } else if (_PIR.RangeValue == (25+10)) {
  4524                           
  4525  00BC  084C               	movf	(__PIR^(0+128)+44),w
  4526  00BD  3A23               	xorlw	35
  4527  00BE  1D03               	skipz
  4528  00BF  28C8               	goto	l4698
  4529                           
  4530                           ;PIR_B1.c: 121: _PIR.RangeValue = 25;
  4531  00C0  3019               	movlw	25
  4532  00C1                     L8:	
  4533  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  4534  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  4535  00C3  00E0               	movwf	??_PIR_Main
  4536  00C4  0860               	movf	??_PIR_Main,w
  4537  00C5  1683               	bsf	3,5	;RP0=1, select bank1
  4538  00C6  1303               	bcf	3,6	;RP1=0, select bank1
  4539  00C7  00CC               	movwf	(__PIR^(0+128)+44)
  4540  00C8                     l4698:	
  4541                           
  4542                           ;PIR_B1.c: 122: }
  4543                           ;PIR_B1.c: 123: }
  4544                           ;PIR_B1.c: 124: }
  4545                           ;PIR_B1.c: 125: _PIR.RangeCount = 0;
  4546  00C8  01CB               	clrf	(__PIR^(0+128)+43)
  4547  00C9                     l4700:	
  4548                           
  4549                           ;PIR_B1.c: 126: }
  4550                           ;PIR_B1.c: 129: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  4551                           ;PIR_B1.c: 130: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  4552  00C9  084C               	movf	(__PIR^(0+128)+44),w
  4553  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  4554  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  4555  00CC  00E0               	movwf	??_PIR_Main
  4556  00CD  01E1               	clrf	??_PIR_Main+1
  4557  00CE  09E0               	comf	??_PIR_Main,f
  4558  00CF  09E1               	comf	??_PIR_Main+1,f
  4559  00D0  0AE0               	incf	??_PIR_Main,f
  4560  00D1  1903               	skipnz
  4561  00D2  0AE1               	incf	??_PIR_Main+1,f
  4562  00D3  1683               	bsf	3,5	;RP0=1, select bank1
  4563  00D4  1303               	bcf	3,6	;RP1=0, select bank1
  4564  00D5  0826               	movf	(__PIR^(0+128)+6),w
  4565  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  4566  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  4567  00D8  0760               	addwf	??_PIR_Main,w
  4568  00D9  00E2               	movwf	??_PIR_Main+2
  4569  00DA  0861               	movf	??_PIR_Main+1,w
  4570  00DB  1803               	skipnc
  4571  00DC  0A61               	incf	??_PIR_Main+1,w
  4572  00DD  00E3               	movwf	??_PIR_Main+3
  4573  00DE  0863               	movf	??_PIR_Main+3,w
  4574  00DF  3A80               	xorlw	128
  4575  00E0  3C80               	sublw	128
  4576  00E1  1D03               	skipz
  4577  00E2  28E7               	goto	u5635
  4578  00E3  0862               	movf	??_PIR_Main+2,w
  4579  00E4  1683               	bsf	3,5	;RP0=1, select bank1
  4580  00E5  1303               	bcf	3,6	;RP1=0, select bank1
  4581  00E6  0221               	subwf	(__PIR^(0+128)+1),w
  4582  00E7                     u5635:	
  4583  00E7  1C03               	skipc
  4584  00E8  2906               	goto	l4706
  4585  00E9  1683               	bsf	3,5	;RP0=1, select bank1
  4586  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  4587  00EB  0826               	movf	(__PIR^(0+128)+6),w
  4588  00EC  074C               	addwf	(__PIR^(0+128)+44),w
  4589  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  4590  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  4591  00EF  00E0               	movwf	??_PIR_Main
  4592  00F0  01E1               	clrf	??_PIR_Main+1
  4593  00F1  0DE1               	rlf	??_PIR_Main+1,f
  4594  00F2  0861               	movf	??_PIR_Main+1,w
  4595  00F3  3A80               	xorlw	128
  4596  00F4  00E2               	movwf	??_PIR_Main+2
  4597  00F5  3080               	movlw	128
  4598  00F6  0262               	subwf	??_PIR_Main+2,w
  4599  00F7  1D03               	skipz
  4600  00F8  28FF               	goto	u5645
  4601  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  4602  00FA  1303               	bcf	3,6	;RP1=0, select bank1
  4603  00FB  0821               	movf	(__PIR^(0+128)+1),w
  4604  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  4605  00FD  1303               	bcf	3,6	;RP1=0, select bank0
  4606  00FE  0260               	subwf	??_PIR_Main,w
  4607  00FF                     u5645:	
  4608  00FF  1C03               	skipc
  4609  0100  2906               	goto	l4706
  4610                           
  4611                           ;PIR_B1.c: 132: _PIR.Count = 0;
  4612  0101  1683               	bsf	3,5	;RP0=1, select bank1
  4613  0102  1303               	bcf	3,6	;RP1=0, select bank1
  4614  0103  01C1               	clrf	(__PIR^(0+128)+33)
  4615  0104  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4616                           
  4617                           ;PIR_B1.c: 142: } else {
  4618  0105  294F               	goto	l4722
  4619  0106                     l4706:	
  4620                           
  4621                           ;PIR_B1.c: 145: _PIR.RangeCount++;
  4622  0106  3001               	movlw	1
  4623  0107  1283               	bcf	3,5	;RP0=0, select bank0
  4624  0108  1303               	bcf	3,6	;RP1=0, select bank0
  4625  0109  00E0               	movwf	??_PIR_Main
  4626  010A  0860               	movf	??_PIR_Main,w
  4627  010B  1683               	bsf	3,5	;RP0=1, select bank1
  4628  010C  1303               	bcf	3,6	;RP1=0, select bank1
  4629  010D  07CB               	addwf	(__PIR^(0+128)+43),f
  4630                           
  4631                           ;PIR_B1.c: 146: _PIR.Count++;
  4632  010E  3001               	movlw	1
  4633  010F  07C1               	addwf	(__PIR^(0+128)+33),f
  4634  0110  1803               	skipnc
  4635  0111  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4636  0112  3000               	movlw	0
  4637  0113  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4638                           
  4639                           ;PIR_B1.c: 148: _PIR.TriggerValue = LightsStatus == 1 ? 3 : 3;
  4640  0114  1283               	bcf	3,5	;RP0=0, select bank0
  4641  0115  1303               	bcf	3,6	;RP1=0, select bank0
  4642  0116  0868               	movf	PIR_Main@LightsStatus,w
  4643  0117  3A01               	xorlw	1
  4644  0118  1903               	skipnz
  4645  0119  291A               	goto	l4714
  4646  011A                     l4714:	
  4647  011A  3003               	movlw	3
  4648  011B  00E5               	movwf	_PIR_Main$2877
  4649  011C  3000               	movlw	0
  4650  011D  00E6               	movwf	_PIR_Main$2877+1
  4651  011E  0865               	movf	_PIR_Main$2877,w
  4652  011F  00E0               	movwf	??_PIR_Main
  4653  0120  0860               	movf	??_PIR_Main,w
  4654  0121  1683               	bsf	3,5	;RP0=1, select bank1
  4655  0122  1303               	bcf	3,6	;RP1=0, select bank1
  4656  0123  00C3               	movwf	(__PIR^(0+128)+35)
  4657                           
  4658                           ;PIR_B1.c: 150: if (_PIR.Count == _PIR.TriggerValue) {
  4659  0124  0843               	movf	(__PIR^(0+128)+35),w
  4660  0125  1283               	bcf	3,5	;RP0=0, select bank0
  4661  0126  1303               	bcf	3,6	;RP1=0, select bank0
  4662  0127  00E0               	movwf	??_PIR_Main
  4663  0128  01E1               	clrf	??_PIR_Main+1
  4664  0129  1683               	bsf	3,5	;RP0=1, select bank1
  4665  012A  1303               	bcf	3,6	;RP1=0, select bank1
  4666  012B  0842               	movf	((__PIR+1)^(0+128)+33),w
  4667  012C  1283               	bcf	3,5	;RP0=0, select bank0
  4668  012D  1303               	bcf	3,6	;RP1=0, select bank0
  4669  012E  0661               	xorwf	??_PIR_Main+1,w
  4670  012F  1D03               	skipz
  4671  0130  2937               	goto	u5665
  4672  0131  1683               	bsf	3,5	;RP0=1, select bank1
  4673  0132  1303               	bcf	3,6	;RP1=0, select bank1
  4674  0133  0841               	movf	(__PIR^(0+128)+33),w
  4675  0134  1283               	bcf	3,5	;RP0=0, select bank0
  4676  0135  1303               	bcf	3,6	;RP1=0, select bank0
  4677  0136  0660               	xorwf	??_PIR_Main,w
  4678  0137                     u5665:	
  4679  0137  1D03               	skipz
  4680  0138  294F               	goto	l4722
  4681                           
  4682                           ;PIR_B1.c: 151: _PIR.Count = 0;
  4683  0139  1683               	bsf	3,5	;RP0=1, select bank1
  4684  013A  1303               	bcf	3,6	;RP1=0, select bank1
  4685  013B  01C1               	clrf	(__PIR^(0+128)+33)
  4686  013C  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4687                           
  4688                           ;PIR_B1.c: 153: _PIR.CloseTimeSeconds = 0;
  4689  013D  01C6               	clrf	(__PIR^(0+128)+38)
  4690                           
  4691                           ;PIR_B1.c: 154: _PIR.CloseTimeMinutes = 0;
  4692  013E  01C4               	clrf	(__PIR^(0+128)+36)
  4693  013F  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4694                           
  4695                           ;PIR_B1.c: 160: if (getLights_Status(1) == 0) {
  4696  0140  3001               	movlw	1
  4697  0141  158A  2600  118A   	fcall	_getLights_Status
  4698  0144  3800               	iorlw	0
  4699  0145  1D03               	skipz
  4700  0146  294F               	goto	l4722
  4701                           
  4702                           ;PIR_B1.c: 161: setLights_Trigger(1, 1);
  4703  0147  1283               	bcf	3,5	;RP0=0, select bank0
  4704  0148  1303               	bcf	3,6	;RP1=0, select bank0
  4705  0149  01DD               	clrf	setLights_Trigger@command
  4706  014A  0ADD               	incf	setLights_Trigger@command,f
  4707  014B  3001               	movlw	1
  4708  014C  158A  26F6  118A   	fcall	_setLights_Trigger
  4709  014F                     l4722:	
  4710                           
  4711                           ;PIR_B1.c: 162: }
  4712                           ;PIR_B1.c: 220: }
  4713                           ;PIR_B1.c: 221: }
  4714                           ;PIR_B1.c: 222: }
  4715                           ;PIR_B1.c: 223: }
  4716                           ;PIR_B1.c: 224: }
  4717                           ;PIR_B1.c: 225: }
  4718                           ;PIR_B1.c: 226: if (_PIR.OK == 0) {
  4719  014F  1683               	bsf	3,5	;RP0=1, select bank1
  4720  0150  1303               	bcf	3,6	;RP1=0, select bank1
  4721  0151  19A0               	btfsc	__PIR^(0+128),3
  4722  0152  2977               	goto	l4736
  4723                           
  4724                           ;PIR_B1.c: 227: _PIR.Count++;
  4725  0153  3001               	movlw	1
  4726  0154  07C1               	addwf	(__PIR^(0+128)+33),f
  4727  0155  1803               	skipnc
  4728  0156  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4729  0157  3000               	movlw	0
  4730  0158  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4731                           
  4732                           ;PIR_B1.c: 228: if (_PIR.Count == (30000 / 20)) {
  4733  0159  3005               	movlw	5
  4734  015A  0642               	xorwf	((__PIR+1)^(0+128)+33),w
  4735  015B  1D03               	skipz
  4736  015C  295F               	goto	u5695
  4737  015D  30DC               	movlw	220
  4738  015E  0641               	xorwf	(__PIR^(0+128)+33),w
  4739  015F                     u5695:	
  4740  015F  1D03               	skipz
  4741  0160  0008               	return
  4742                           
  4743                           ;PIR_B1.c: 229: _PIR.Count = 0;
  4744  0161  01C1               	clrf	(__PIR^(0+128)+33)
  4745  0162  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4746                           
  4747                           ;PIR_B1.c: 230: _PIR.OK = 1;
  4748  0163  15A0               	bsf	__PIR^(0+128),3
  4749                           
  4750                           ;PIR_B1.c: 234: if (cds == 0) {
  4751  0164  1283               	bcf	3,5	;RP0=0, select bank0
  4752  0165  1303               	bcf	3,6	;RP1=0, select bank0
  4753  0166  08E7               	movf	PIR_Main@cds,f
  4754  0167  1D03               	skipz
  4755  0168  0008               	return
  4756                           
  4757                           ;PIR_B1.c: 237: if (getLights_Status(1) == 1) {
  4758  0169  3001               	movlw	1
  4759  016A  158A  2600  118A   	fcall	_getLights_Status
  4760  016D  3A01               	xorlw	1
  4761  016E  1D03               	skipz
  4762  016F  0008               	return
  4763                           
  4764                           ;PIR_B1.c: 238: setLights_Trigger(1, 0);
  4765  0170  1283               	bcf	3,5	;RP0=0, select bank0
  4766  0171  1303               	bcf	3,6	;RP1=0, select bank0
  4767  0172  01DD               	clrf	setLights_Trigger@command
  4768  0173  3001               	movlw	1
  4769  0174  158A  26F6         	fcall	_setLights_Trigger
  4770                           
  4771                           ;PIR_B1.c: 239: }
  4772                           ;PIR_B1.c: 251: }
  4773                           ;PIR_B1.c: 252: }
  4774                           ;PIR_B1.c: 253: } else {
  4775  0176  0008               	return
  4776  0177                     l4736:	
  4777                           
  4778                           ;PIR_B1.c: 254: if (LightsStatus == 1) {
  4779  0177  1283               	bcf	3,5	;RP0=0, select bank0
  4780  0178  1303               	bcf	3,6	;RP1=0, select bank0
  4781  0179  0868               	movf	PIR_Main@LightsStatus,w
  4782  017A  3A01               	xorlw	1
  4783  017B  1D03               	skipz
  4784  017C  0008               	return
  4785                           
  4786                           ;PIR_B1.c: 255: _PIR.CloseTimeSeconds++;
  4787  017D  3001               	movlw	1
  4788  017E  00E0               	movwf	??_PIR_Main
  4789  017F  0860               	movf	??_PIR_Main,w
  4790  0180  1683               	bsf	3,5	;RP0=1, select bank1
  4791  0181  1303               	bcf	3,6	;RP1=0, select bank1
  4792  0182  07C6               	addwf	(__PIR^(0+128)+38),f
  4793                           
  4794                           ;PIR_B1.c: 256: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  4795  0183  0846               	movf	(__PIR^(0+128)+38),w
  4796  0184  3A32               	xorlw	50
  4797  0185  1D03               	skipz
  4798  0186  0008               	return
  4799                           
  4800                           ;PIR_B1.c: 257: _PIR.CloseTimeSeconds = 0;
  4801  0187  01C6               	clrf	(__PIR^(0+128)+38)
  4802                           
  4803                           ;PIR_B1.c: 258: _PIR.CloseTimeMinutes++;
  4804  0188  3001               	movlw	1
  4805  0189  07C4               	addwf	(__PIR^(0+128)+36),f
  4806  018A  1803               	skipnc
  4807  018B  0AC5               	incf	((__PIR+1)^(0+128)+36),f
  4808  018C  3000               	movlw	0
  4809  018D  07C5               	addwf	((__PIR+1)^(0+128)+36),f
  4810                           
  4811                           ;PIR_B1.c: 259: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  4812  018E  0848               	movf	((__PIR+1)^(0+128)+39),w
  4813  018F  0645               	xorwf	((__PIR+1)^(0+128)+36),w
  4814  0190  1D03               	skipz
  4815  0191  2994               	goto	u5745
  4816  0192  0847               	movf	(__PIR^(0+128)+39),w
  4817  0193  0644               	xorwf	(__PIR^(0+128)+36),w
  4818  0194                     u5745:	
  4819  0194  1D03               	skipz
  4820  0195  0008               	return
  4821                           
  4822                           ;PIR_B1.c: 260: _PIR.CloseTimeMinutes = 0;
  4823  0196  01C4               	clrf	(__PIR^(0+128)+36)
  4824  0197  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4825                           
  4826                           ;PIR_B1.c: 266: if (getLights_Status(1) == 1) {
  4827  0198  3001               	movlw	1
  4828  0199  158A  2600  118A   	fcall	_getLights_Status
  4829  019C  3A01               	xorlw	1
  4830  019D  1D03               	skipz
  4831  019E  0008               	return
  4832                           
  4833                           ;PIR_B1.c: 267: setLights_Trigger(1, 0);
  4834  019F  1283               	bcf	3,5	;RP0=0, select bank0
  4835  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  4836  01A1  01DD               	clrf	setLights_Trigger@command
  4837  01A2  3001               	movlw	1
  4838  01A3  158A  26F6         	fcall	_setLights_Trigger
  4839                           
  4840                           ;PIR_B1.c: 268: }
  4841                           ;PIR_B1.c: 280: }
  4842                           ;PIR_B1.c: 281: }
  4843                           ;PIR_B1.c: 282: }
  4844                           ;PIR_B1.c: 283: }
  4845                           ;PIR_B1.c: 284: } else {
  4846  01A5  0008               	return
  4847  01A6                     l850:	
  4848                           
  4849                           ;PIR_B1.c: 285: if (myMain.PowerON == 1) {
  4850  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  4851  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  4852  01A8  1C2C               	btfss	_myMain,0
  4853  01A9  0008               	return
  4854                           
  4855                           ;PIR_B1.c: 286: _PIR.Enable = 1;
  4856  01AA  1683               	bsf	3,5	;RP0=1, select bank1
  4857  01AB  1303               	bcf	3,6	;RP1=0, select bank1
  4858  01AC  1420               	bsf	__PIR^(0+128),0
  4859                           
  4860                           ;PIR_B1.c: 292: if (getLights_Status(1) == 0) {
  4861  01AD  3001               	movlw	1
  4862  01AE  158A  2600  118A   	fcall	_getLights_Status
  4863  01B1  3800               	iorlw	0
  4864  01B2  1D03               	skipz
  4865  01B3  0008               	return
  4866                           
  4867                           ;PIR_B1.c: 293: setLights_Trigger(1, 1);
  4868  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  4869  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  4870  01B6  01DD               	clrf	setLights_Trigger@command
  4871  01B7  0ADD               	incf	setLights_Trigger@command,f
  4872  01B8  3001               	movlw	1
  4873  01B9  158A  26F6         	fcall	_setLights_Trigger
  4874  01BB  0008               	return
  4875  01BC                     __end_of_PIR_Main:	
  4876                           
  4877                           	psect	text21
  4878  0D93                     __ptext21:	
  4879 ;; *************** function _getCDS_Status *****************
  4880 ;; Defined at:
  4881 ;;		line 42 in file "../src/CDS_B1.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;		None
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;  status          1    4[COMMON] unsigned char 
  4886 ;; Return value:  Size  Location     Type
  4887 ;;                  1    wreg      unsigned char 
  4888 ;; Registers used:
  4889 ;;		wreg, status,2
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4895 ;;      Params:         0       0       0       0
  4896 ;;      Locals:         1       0       0       0
  4897 ;;      Temps:          0       0       0       0
  4898 ;;      Totals:         1       0       0       0
  4899 ;;Total ram usage:        1 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    2
  4902 ;; This function calls:
  4903 ;;		Nothing
  4904 ;; This function is called by:
  4905 ;;		_PIR_Main
  4906 ;; This function uses a non-reentrant model
  4907 ;;
  4908                           
  4909                           
  4910                           ;psect for function _getCDS_Status
  4911  0D93                     _getCDS_Status:	
  4912                           
  4913                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  4914                           
  4915                           ;incstack = 0
  4916                           ; Regs used in _getCDS_Status: [wreg+status,2]
  4917  0D93  3000               	movlw	0
  4918  0D94  1283               	bcf	3,5	;RP0=0, select bank0
  4919  0D95  1303               	bcf	3,6	;RP1=0, select bank0
  4920  0D96  1A32               	btfsc	__CDS,4
  4921  0D97  3001               	movlw	1
  4922  0D98  00F4               	movwf	getCDS_Status@status
  4923                           
  4924                           ;CDS_B1.c: 44: return status;
  4925  0D99  0874               	movf	getCDS_Status@status,w
  4926  0D9A  0008               	return
  4927  0D9B                     __end_of_getCDS_Status:	
  4928                           
  4929                           	psect	text22
  4930  0DA3                     __ptext22:	
  4931 ;; *************** function _PIR_Initialization *****************
  4932 ;; Defined at:
  4933 ;;		line 7 in file "../src/PIR_B1.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;		None
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;		None
  4938 ;; Return value:  Size  Location     Type
  4939 ;;		None               void
  4940 ;; Registers used:
  4941 ;;		wreg
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4947 ;;      Params:         0       0       0       0
  4948 ;;      Locals:         0       0       0       0
  4949 ;;      Temps:          1       0       0       0
  4950 ;;      Totals:         1       0       0       0
  4951 ;;Total ram usage:        1 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    2
  4954 ;; This function calls:
  4955 ;;		Nothing
  4956 ;; This function is called by:
  4957 ;;		_main
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           
  4962                           ;psect for function _PIR_Initialization
  4963  0DA3                     _PIR_Initialization:	
  4964                           
  4965                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  4966                           
  4967                           ;incstack = 0
  4968                           ; Regs used in _PIR_Initialization: [wreg]
  4969  0DA3  3019               	movlw	25
  4970  0DA4  00F4               	movwf	??_PIR_Initialization
  4971  0DA5  0874               	movf	??_PIR_Initialization,w
  4972  0DA6  1683               	bsf	3,5	;RP0=1, select bank1
  4973  0DA7  1303               	bcf	3,6	;RP1=0, select bank1
  4974  0DA8  00CC               	movwf	(__PIR^(0+128)+44)
  4975                           
  4976                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  4977  0DA9  3005               	movlw	5
  4978  0DAA  00C7               	movwf	(__PIR^(0+128)+39)
  4979  0DAB  3000               	movlw	0
  4980  0DAC  00C8               	movwf	(__PIR^(0+128)+40)
  4981  0DAD  0008               	return
  4982  0DAE                     __end_of_PIR_Initialization:	
  4983                           
  4984                           	psect	text23
  4985  0DE1                     __ptext23:	
  4986 ;; *************** function _Mcu_Initialization *****************
  4987 ;; Defined at:
  4988 ;;		line 30 in file "../src/MCU_B1.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;		None
  4991 ;; Auto vars:     Size  Location     Type
  4992 ;;		None
  4993 ;; Return value:  Size  Location     Type
  4994 ;;		None               void
  4995 ;; Registers used:
  4996 ;;		wreg, status,2, status,0, pclath, cstack
  4997 ;; Tracked objects:
  4998 ;;		On entry : 0/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5002 ;;      Params:         0       0       0       0
  5003 ;;      Locals:         0       0       0       0
  5004 ;;      Temps:          0       0       0       0
  5005 ;;      Totals:         0       0       0       0
  5006 ;;Total ram usage:        0 bytes
  5007 ;; Hardware stack levels used:    1
  5008 ;; Hardware stack levels required when called:    3
  5009 ;; This function calls:
  5010 ;;		_ADC_Set
  5011 ;;		_Fosc_Set
  5012 ;;		_IO_Set
  5013 ;;		_TMR1_Set
  5014 ;;		_WDT_Set
  5015 ;; This function is called by:
  5016 ;;		_main
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           
  5021                           ;psect for function _Mcu_Initialization
  5022  0DE1                     _Mcu_Initialization:	
  5023                           
  5024                           ;MCU_B1.c: 32: Fosc_Set();
  5025                           
  5026                           ;incstack = 0
  5027                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5028  0DE1  158A  2579  158A   	fcall	_Fosc_Set
  5029                           
  5030                           ;MCU_B1.c: 34: IO_Set();
  5031  0DE4  158A  26C4  158A   	fcall	_IO_Set
  5032                           
  5033                           ;MCU_B1.c: 36: ;;
  5034                           ;MCU_B1.c: 38: TMR1_Set();
  5035  0DE7  158A  25C5  158A   	fcall	_TMR1_Set
  5036                           
  5037                           ;MCU_B1.c: 40: ADC_Set();
  5038  0DEA  118A  27F9  158A   	fcall	_ADC_Set
  5039                           
  5040                           ;MCU_B1.c: 42: ;;
  5041                           ;MCU_B1.c: 44: ;;
  5042                           ;MCU_B1.c: 46: ;;
  5043                           ;MCU_B1.c: 48: ;;
  5044                           ;MCU_B1.c: 50: ;;
  5045                           ;MCU_B1.c: 52: WDT_Set();
  5046  0DED  158A  25D3         	fcall	_WDT_Set
  5047  0DEF  0008               	return
  5048  0DF0                     __end_of_Mcu_Initialization:	
  5049                           
  5050                           	psect	text24
  5051  0DD3                     __ptext24:	
  5052 ;; *************** function _WDT_Set *****************
  5053 ;; Defined at:
  5054 ;;		line 1089 in file "../src/MCU_B1.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;		None
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;		None
  5059 ;; Return value:  Size  Location     Type
  5060 ;;		None               void
  5061 ;; Registers used:
  5062 ;;		wreg
  5063 ;; Tracked objects:
  5064 ;;		On entry : 0/0
  5065 ;;		On exit  : 0/0
  5066 ;;		Unchanged: 0/0
  5067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5068 ;;      Params:         0       0       0       0
  5069 ;;      Locals:         0       0       0       0
  5070 ;;      Temps:          1       0       0       0
  5071 ;;      Totals:         1       0       0       0
  5072 ;;Total ram usage:        1 bytes
  5073 ;; Hardware stack levels used:    1
  5074 ;; Hardware stack levels required when called:    2
  5075 ;; This function calls:
  5076 ;;		Nothing
  5077 ;; This function is called by:
  5078 ;;		_Mcu_Initialization
  5079 ;; This function uses a non-reentrant model
  5080 ;;
  5081                           
  5082                           
  5083                           ;psect for function _WDT_Set
  5084  0DD3                     _WDT_Set:	
  5085                           
  5086                           ;MCU_B1.c: 1091: PSA = 1;
  5087                           
  5088                           ;incstack = 0
  5089                           ; Regs used in _WDT_Set: [wreg]
  5090  0DD3  1683               	bsf	3,5	;RP0=1, select bank1
  5091  0DD4  1303               	bcf	3,6	;RP1=0, select bank1
  5092  0DD5  1581               	bsf	1,3	;volatile
  5093                           
  5094                           ;MCU_B1.c: 1092: PS0 = 1;
  5095  0DD6  1401               	bsf	1,0	;volatile
  5096                           
  5097                           ;MCU_B1.c: 1093: PS1 = 1;
  5098  0DD7  1481               	bsf	1,1	;volatile
  5099                           
  5100                           ;MCU_B1.c: 1094: PS2 = 1;
  5101  0DD8  1501               	bsf	1,2	;volatile
  5102                           
  5103                           ;MCU_B1.c: 1098: WDT.Enable = 1;
  5104  0DD9  1283               	bcf	3,5	;RP0=0, select bank0
  5105  0DDA  1303               	bcf	3,6	;RP1=0, select bank0
  5106  0DDB  143E               	bsf	_WDT,0
  5107                           
  5108                           ;MCU_B1.c: 1099: WDT.Timer = 10;
  5109  0DDC  300A               	movlw	10
  5110  0DDD  00F4               	movwf	??_WDT_Set
  5111  0DDE  0874               	movf	??_WDT_Set,w
  5112  0DDF  00BF               	movwf	_WDT+1
  5113  0DE0  0008               	return
  5114  0DE1                     __end_of_WDT_Set:	
  5115                           
  5116                           	psect	text25
  5117  0DC5                     __ptext25:	
  5118 ;; *************** function _TMR1_Set *****************
  5119 ;; Defined at:
  5120 ;;		line 226 in file "../src/MCU_B1.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;		None
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;		None
  5125 ;; Return value:  Size  Location     Type
  5126 ;;		None               void
  5127 ;; Registers used:
  5128 ;;		wreg
  5129 ;; Tracked objects:
  5130 ;;		On entry : 0/0
  5131 ;;		On exit  : 0/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5134 ;;      Params:         0       0       0       0
  5135 ;;      Locals:         0       0       0       0
  5136 ;;      Temps:          0       0       0       0
  5137 ;;      Totals:         0       0       0       0
  5138 ;;Total ram usage:        0 bytes
  5139 ;; Hardware stack levels used:    1
  5140 ;; Hardware stack levels required when called:    2
  5141 ;; This function calls:
  5142 ;;		Nothing
  5143 ;; This function is called by:
  5144 ;;		_Mcu_Initialization
  5145 ;; This function uses a non-reentrant model
  5146 ;;
  5147                           
  5148                           
  5149                           ;psect for function _TMR1_Set
  5150  0DC5                     _TMR1_Set:	
  5151                           
  5152                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5153                           
  5154                           ;incstack = 0
  5155                           ; Regs used in _TMR1_Set: [wreg]
  5156  0DC5  3041               	movlw	65
  5157  0DC6  1283               	bcf	3,5	;RP0=0, select bank0
  5158  0DC7  1303               	bcf	3,6	;RP1=0, select bank0
  5159  0DC8  0090               	movwf	16	;volatile
  5160                           
  5161                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  5162  0DC9  30FA               	movlw	250
  5163  0DCA  008F               	movwf	15	;volatile
  5164                           
  5165                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  5166  0DCB  3038               	movlw	56
  5167  0DCC  008E               	movwf	14	;volatile
  5168                           
  5169                           ;MCU_B1.c: 230: TMR1IE = 1;
  5170  0DCD  1683               	bsf	3,5	;RP0=1, select bank1
  5171  0DCE  1303               	bcf	3,6	;RP1=0, select bank1
  5172  0DCF  140C               	bsf	12,0	;volatile
  5173                           
  5174                           ;MCU_B1.c: 231: PEIE = 1;
  5175  0DD0  170B               	bsf	11,6	;volatile
  5176                           
  5177                           ;MCU_B1.c: 232: GIE = 1;
  5178  0DD1  178B               	bsf	11,7	;volatile
  5179  0DD2  0008               	return
  5180  0DD3                     __end_of_TMR1_Set:	
  5181                           
  5182                           	psect	text26
  5183  0EC4                     __ptext26:	
  5184 ;; *************** function _IO_Set *****************
  5185 ;; Defined at:
  5186 ;;		line 60 in file "../src/MCU_B1.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;		None
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;		None
  5191 ;; Return value:  Size  Location     Type
  5192 ;;		None               void
  5193 ;; Registers used:
  5194 ;;		wreg, status,2
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5200 ;;      Params:         0       0       0       0
  5201 ;;      Locals:         0       0       0       0
  5202 ;;      Temps:          0       0       0       0
  5203 ;;      Totals:         0       0       0       0
  5204 ;;Total ram usage:        0 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; Hardware stack levels required when called:    2
  5207 ;; This function calls:
  5208 ;;		Nothing
  5209 ;; This function is called by:
  5210 ;;		_Mcu_Initialization
  5211 ;; This function uses a non-reentrant model
  5212 ;;
  5213                           
  5214                           
  5215                           ;psect for function _IO_Set
  5216  0EC4                     _IO_Set:	
  5217                           
  5218                           ;MCU_B1.c: 62: TRISA = 0b00101110;;
  5219                           
  5220                           ;incstack = 0
  5221                           ; Regs used in _IO_Set: [wreg+status,2]
  5222  0EC4  302E               	movlw	46
  5223  0EC5  1683               	bsf	3,5	;RP0=1, select bank1
  5224  0EC6  1303               	bcf	3,6	;RP1=0, select bank1
  5225  0EC7  0085               	movwf	5	;volatile
  5226                           
  5227                           ;MCU_B1.c: 63: TRISB = 0b00010101;;
  5228  0EC8  3015               	movlw	21
  5229  0EC9  0086               	movwf	6	;volatile
  5230                           
  5231                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  5232  0ECA  0187               	clrf	7	;volatile
  5233                           
  5234                           ;MCU_B1.c: 65: ANSELA = 0b00101110;;
  5235  0ECB  302E               	movlw	46
  5236  0ECC  1683               	bsf	3,5	;RP0=1, select bank3
  5237  0ECD  1703               	bsf	3,6	;RP1=1, select bank3
  5238  0ECE  0085               	movwf	5	;volatile
  5239                           
  5240                           ;MCU_B1.c: 66: ANSELB = 0b00000101;;
  5241  0ECF  3005               	movlw	5
  5242  0ED0  0086               	movwf	6	;volatile
  5243                           
  5244                           ;MCU_B1.c: 67: PORTA = 0b00101110;;
  5245  0ED1  302E               	movlw	46
  5246  0ED2  1283               	bcf	3,5	;RP0=0, select bank0
  5247  0ED3  1303               	bcf	3,6	;RP1=0, select bank0
  5248  0ED4  0085               	movwf	5	;volatile
  5249                           
  5250                           ;MCU_B1.c: 68: PORTB = 0b00010101;;
  5251  0ED5  3015               	movlw	21
  5252  0ED6  0086               	movwf	6	;volatile
  5253                           
  5254                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  5255  0ED7  0187               	clrf	7	;volatile
  5256                           
  5257                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  5258  0ED8  1683               	bsf	3,5	;RP0=1, select bank1
  5259  0ED9  1303               	bcf	3,6	;RP1=0, select bank1
  5260  0EDA  0195               	clrf	21	;volatile
  5261  0EDB  0008               	return
  5262  0EDC                     __end_of_IO_Set:	
  5263                           
  5264                           	psect	text27
  5265  0D79                     __ptext27:	
  5266 ;; *************** function _Fosc_Set *****************
  5267 ;; Defined at:
  5268 ;;		line 56 in file "../src/MCU_B1.c"
  5269 ;; Parameters:    Size  Location     Type
  5270 ;;		None
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;		None
  5273 ;; Return value:  Size  Location     Type
  5274 ;;		None               void
  5275 ;; Registers used:
  5276 ;;		wreg
  5277 ;; Tracked objects:
  5278 ;;		On entry : 0/0
  5279 ;;		On exit  : 0/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5282 ;;      Params:         0       0       0       0
  5283 ;;      Locals:         0       0       0       0
  5284 ;;      Temps:          0       0       0       0
  5285 ;;      Totals:         0       0       0       0
  5286 ;;Total ram usage:        0 bytes
  5287 ;; Hardware stack levels used:    1
  5288 ;; Hardware stack levels required when called:    2
  5289 ;; This function calls:
  5290 ;;		Nothing
  5291 ;; This function is called by:
  5292 ;;		_Mcu_Initialization
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           
  5297                           ;psect for function _Fosc_Set
  5298  0D79                     _Fosc_Set:	
  5299                           
  5300                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in _Fosc_Set: [wreg]
  5304  0D79  303C               	movlw	60
  5305  0D7A  1683               	bsf	3,5	;RP0=1, select bank1
  5306  0D7B  1303               	bcf	3,6	;RP1=0, select bank1
  5307  0D7C  0090               	movwf	16	;volatile
  5308  0D7D  0008               	return
  5309  0D7E                     __end_of_Fosc_Set:	
  5310                           
  5311                           	psect	text28
  5312  07F9                     __ptext28:	
  5313 ;; *************** function _ADC_Set *****************
  5314 ;; Defined at:
  5315 ;;		line 425 in file "../src/MCU_B1.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;		None
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;		None
  5320 ;; Return value:  Size  Location     Type
  5321 ;;		None               void
  5322 ;; Registers used:
  5323 ;;		wreg
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5329 ;;      Params:         0       0       0       0
  5330 ;;      Locals:         0       0       0       0
  5331 ;;      Temps:          0       0       0       0
  5332 ;;      Totals:         0       0       0       0
  5333 ;;Total ram usage:        0 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    2
  5336 ;; This function calls:
  5337 ;;		Nothing
  5338 ;; This function is called by:
  5339 ;;		_Mcu_Initialization
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           
  5344                           ;psect for function _ADC_Set
  5345  07F9                     _ADC_Set:	
  5346                           
  5347                           ;MCU_B1.c: 426: ADCON1 = 0x73;
  5348                           
  5349                           ;incstack = 0
  5350                           ; Regs used in _ADC_Set: [wreg]
  5351  07F9  3073               	movlw	115
  5352  07FA  1683               	bsf	3,5	;RP0=1, select bank1
  5353  07FB  1303               	bcf	3,6	;RP1=0, select bank1
  5354  07FC  009F               	movwf	31	;volatile
  5355                           
  5356                           ;MCU_B1.c: 427: FVRCON = 0xc1;
  5357  07FD  30C1               	movlw	193
  5358  07FE  009D               	movwf	29	;volatile
  5359  07FF  0008               	return
  5360  0800                     __end_of_ADC_Set:	
  5361                           
  5362                           	psect	text29
  5363  0DF0                     __ptext29:	
  5364 ;; *************** function _Lights_Main *****************
  5365 ;; Defined at:
  5366 ;;		line 52 in file "../src/TriacRelay_B1.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;		None
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;		None
  5371 ;; Return value:  Size  Location     Type
  5372 ;;		None               void
  5373 ;; Registers used:
  5374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5375 ;; Tracked objects:
  5376 ;;		On entry : 0/0
  5377 ;;		On exit  : 0/0
  5378 ;;		Unchanged: 0/0
  5379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5380 ;;      Params:         0       0       0       0
  5381 ;;      Locals:         0       0       0       0
  5382 ;;      Temps:          0       0       0       0
  5383 ;;      Totals:         0       0       0       0
  5384 ;;Total ram usage:        0 bytes
  5385 ;; Hardware stack levels used:    1
  5386 ;; Hardware stack levels required when called:    6
  5387 ;; This function calls:
  5388 ;;		_Lights_Control
  5389 ;;		_setLights_Main
  5390 ;; This function is called by:
  5391 ;;		_main
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           
  5396                           ;psect for function _Lights_Main
  5397  0DF0                     _Lights_Main:	
  5398                           
  5399                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  5400                           
  5401                           ;incstack = 0
  5402                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5403  0DF0  3001               	movlw	1
  5404  0DF1  118A  27C9  158A   	fcall	_setLights_Main
  5405                           
  5406                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  5407  0DF4  3001               	movlw	1
  5408  0DF5  118A  23B4  158A   	fcall	_Lights_Control
  5409                           
  5410                           ;TriacRelay_B1.c: 78: setLights_Main(2);
  5411  0DF8  3002               	movlw	2
  5412  0DF9  118A  27C9  158A   	fcall	_setLights_Main
  5413                           
  5414                           ;TriacRelay_B1.c: 79: Lights_Control(2);
  5415  0DFC  3002               	movlw	2
  5416  0DFD  118A  23B4         	fcall	_Lights_Control
  5417  0DFF  0008               	return
  5418  0E00                     __end_of_Lights_Main:	
  5419                           
  5420                           	psect	text30
  5421  07C9                     __ptext30:	
  5422 ;; *************** function _setLights_Main *****************
  5423 ;; Defined at:
  5424 ;;		line 91 in file "../src/TriacRelay_B1.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;  lights          1    wreg     unsigned char 
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;  lights          1    5[BANK0 ] unsigned char 
  5429 ;; Return value:  Size  Location     Type
  5430 ;;		None               void
  5431 ;; Registers used:
  5432 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5438 ;;      Params:         0       0       0       0
  5439 ;;      Locals:         0       1       0       0
  5440 ;;      Temps:          0       0       0       0
  5441 ;;      Totals:         0       1       0       0
  5442 ;;Total ram usage:        1 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    5
  5445 ;; This function calls:
  5446 ;;		_LightsPointSelect
  5447 ;;		_getLights_Allow_Condition
  5448 ;;		_setLights
  5449 ;; This function is called by:
  5450 ;;		_Lights_Main
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           
  5455                           ;psect for function _setLights_Main
  5456  07C9                     _setLights_Main:	
  5457                           
  5458                           ;incstack = 0
  5459                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5460                           ;setLights_Main@lights stored from wreg
  5461  07C9  1283               	bcf	3,5	;RP0=0, select bank0
  5462  07CA  1303               	bcf	3,6	;RP1=0, select bank0
  5463  07CB  00E2               	movwf	setLights_Main@lights
  5464                           
  5465                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  5466  07CC  0862               	movf	setLights_Main@lights,w
  5467  07CD  158A  2634  118A   	fcall	_LightsPointSelect
  5468                           
  5469                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  5470  07D0  0877               	movf	_Lights,w
  5471  07D1  0084               	movwf	4
  5472  07D2  1383               	bcf	3,7	;select IRP bank0
  5473  07D3  1880               	btfsc	0,1
  5474  07D4  0008               	return
  5475                           
  5476                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  5477  07D5  0877               	movf	_Lights,w
  5478  07D6  0084               	movwf	4
  5479  07D7  1D80               	btfss	0,3
  5480  07D8  0008               	return
  5481                           
  5482                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  5483  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  5484  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  5485  07DB  0862               	movf	setLights_Main@lights,w
  5486  07DC  158A  2711  118A   	fcall	_getLights_Allow_Condition
  5487  07DF  3800               	iorlw	0
  5488  07E0  1D03               	skipz
  5489  07E1  0008               	return
  5490                           
  5491                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  5492  07E2  0877               	movf	_Lights,w
  5493  07E3  0084               	movwf	4
  5494  07E4  1383               	bcf	3,7	;select IRP bank0
  5495  07E5  1180               	bcf	0,3
  5496                           
  5497                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  5498  07E6  0877               	movf	_Lights,w
  5499  07E7  0084               	movwf	4
  5500  07E8  1E00               	btfss	0,4
  5501  07E9  2FF2               	goto	l4414
  5502                           
  5503                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  5504  07EA  1283               	bcf	3,5	;RP0=0, select bank0
  5505  07EB  1303               	bcf	3,6	;RP1=0, select bank0
  5506  07EC  01DF               	clrf	setLights@status
  5507  07ED  0ADF               	incf	setLights@status,f
  5508  07EE  0862               	movf	setLights_Main@lights,w
  5509  07EF  118A  25A8         	fcall	_setLights
  5510                           
  5511                           ;TriacRelay_B1.c: 99: } else {
  5512  07F1  0008               	return
  5513  07F2                     l4414:	
  5514                           
  5515                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  5516  07F2  1283               	bcf	3,5	;RP0=0, select bank0
  5517  07F3  1303               	bcf	3,6	;RP1=0, select bank0
  5518  07F4  01DF               	clrf	setLights@status
  5519  07F5  0862               	movf	setLights_Main@lights,w
  5520  07F6  118A  25A8         	fcall	_setLights
  5521  07F8  0008               	return
  5522  07F9                     __end_of_setLights_Main:	
  5523                           
  5524                           	psect	text31
  5525  05A8                     __ptext31:	
  5526 ;; *************** function _setLights *****************
  5527 ;; Defined at:
  5528 ;;		line 108 in file "../src/TriacRelay_B1.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  lights          1    wreg     unsigned char 
  5531 ;;  status          1    2[BANK0 ] unsigned char 
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;  lights          1    4[BANK0 ] unsigned char 
  5534 ;; Return value:  Size  Location     Type
  5535 ;;		None               void
  5536 ;; Registers used:
  5537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5543 ;;      Params:         0       1       0       0
  5544 ;;      Locals:         0       1       0       0
  5545 ;;      Temps:          0       1       0       0
  5546 ;;      Totals:         0       3       0       0
  5547 ;;Total ram usage:        3 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    4
  5550 ;; This function calls:
  5551 ;;		_setLED
  5552 ;; This function is called by:
  5553 ;;		_setLights_Main
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           
  5558                           ;psect for function _setLights
  5559  05A8                     _setLights:	
  5560                           
  5561                           ;incstack = 0
  5562                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5563                           ;setLights@lights stored from wreg
  5564  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  5565  05A9  1303               	bcf	3,6	;RP1=0, select bank0
  5566  05AA  00E1               	movwf	setLights@lights
  5567                           
  5568                           ;TriacRelay_B1.c: 114: Lights->GO = 1;
  5569  05AB  0877               	movf	_Lights,w
  5570  05AC  0084               	movwf	4
  5571  05AD  1383               	bcf	3,7	;select IRP bank0
  5572  05AE  1480               	bsf	0,1
  5573                           
  5574                           ;TriacRelay_B1.c: 116: if (status == 1) {
  5575  05AF  085F               	movf	setLights@status,w
  5576  05B0  3A01               	xorlw	1
  5577  05B1  1D03               	skipz
  5578  05B2  2DD9               	goto	l4192
  5579                           
  5580                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  5581  05B3  0861               	movf	setLights@lights,w
  5582  05B4  3A02               	xorlw	2
  5583  05B5  1D03               	skipz
  5584  05B6  2DC6               	goto	l4186
  5585                           
  5586                           ;TriacRelay_B1.c: 119: RC1 = RC1 == 1 ? 0 : 1;
  5587  05B7  3002               	movlw	2
  5588  05B8  0687               	xorwf	7,f
  5589                           
  5590                           ;TriacRelay_B1.c: 120: setLED(1, 1);
  5591  05B9  01DD               	clrf	setLED@command
  5592  05BA  0ADD               	incf	setLED@command,f
  5593  05BB  3001               	movlw	1
  5594  05BC  118A  2537  118A   	fcall	_setLED
  5595                           
  5596                           ;TriacRelay_B1.c: 121: setLED(2, 0);
  5597  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  5598  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  5599  05C1  01DD               	clrf	setLED@command
  5600  05C2  3002               	movlw	2
  5601  05C3  118A  2537  118A   	fcall	_setLED
  5602  05C6                     l4186:	
  5603                           
  5604                           ;TriacRelay_B1.c: 122: }
  5605                           ;TriacRelay_B1.c: 128: if (Lights->Status == 0) {
  5606  05C6  0877               	movf	_Lights,w
  5607  05C7  0084               	movwf	4
  5608  05C8  1383               	bcf	3,7	;select IRP bank0
  5609  05C9  1900               	btfsc	0,2
  5610  05CA  2E06               	goto	l4202
  5611                           
  5612                           ;TriacRelay_B1.c: 129: Lights->Status = 1;
  5613  05CB  0877               	movf	_Lights,w
  5614  05CC  0084               	movwf	4
  5615  05CD  1500               	bsf	0,2
  5616                           
  5617                           ;TriacRelay_B1.c: 130: Lights->RelayValue = 100;
  5618  05CE  3064               	movlw	100
  5619  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  5620  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  5621  05D1  00E0               	movwf	??_setLights
  5622  05D2  0877               	movf	_Lights,w
  5623  05D3  3E06               	addlw	6
  5624  05D4  0084               	movwf	4
  5625  05D5  0860               	movf	??_setLights,w
  5626  05D6  0080               	movwf	0
  5627                           
  5628                           ;TriacRelay_B1.c: 131: Lights->TriacValue = 140;
  5629  05D7  308C               	movlw	140
  5630  05D8  2DFC               	goto	L10
  5631  05D9                     l4192:	
  5632                           ;TriacRelay_B1.c: 137: }
  5633                           ;TriacRelay_B1.c: 138: } else {
  5634                           
  5635                           ;TriacRelay_B1.c: 132: Lights->Time = 0;
  5636                           
  5637                           
  5638                           ;TriacRelay_B1.c: 141: if (lights == 2) {
  5639  05D9  0861               	movf	setLights@lights,w
  5640  05DA  3A02               	xorlw	2
  5641  05DB  1D03               	skipz
  5642  05DC  2DEA               	goto	l4196
  5643                           
  5644                           ;TriacRelay_B1.c: 142: setLED(1, 0);
  5645  05DD  01DD               	clrf	setLED@command
  5646  05DE  3001               	movlw	1
  5647  05DF  118A  2537  118A   	fcall	_setLED
  5648                           
  5649                           ;TriacRelay_B1.c: 143: setLED(2, 1);
  5650  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  5651  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  5652  05E4  01DD               	clrf	setLED@command
  5653  05E5  0ADD               	incf	setLED@command,f
  5654  05E6  3002               	movlw	2
  5655  05E7  118A  2537  118A   	fcall	_setLED
  5656  05EA                     l4196:	
  5657                           
  5658                           ;TriacRelay_B1.c: 144: }
  5659                           ;TriacRelay_B1.c: 146: if (Lights->Status == 1) {
  5660  05EA  0877               	movf	_Lights,w
  5661  05EB  0084               	movwf	4
  5662  05EC  1383               	bcf	3,7	;select IRP bank0
  5663  05ED  1D00               	btfss	0,2
  5664  05EE  2E06               	goto	l4202
  5665                           
  5666                           ;TriacRelay_B1.c: 147: Lights->Status = 0;
  5667  05EF  0877               	movf	_Lights,w
  5668  05F0  0084               	movwf	4
  5669  05F1  1100               	bcf	0,2
  5670                           
  5671                           ;TriacRelay_B1.c: 148: Lights->RelayValue = 40;
  5672  05F2  3028               	movlw	40
  5673  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  5674  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  5675  05F5  00E0               	movwf	??_setLights
  5676  05F6  0877               	movf	_Lights,w
  5677  05F7  3E06               	addlw	6
  5678  05F8  0084               	movwf	4
  5679  05F9  0860               	movf	??_setLights,w
  5680  05FA  0080               	movwf	0
  5681                           
  5682                           ;TriacRelay_B1.c: 149: Lights->TriacValue = 80;
  5683  05FB  3050               	movlw	80
  5684  05FC                     L10:	
  5685  05FC  00E0               	movwf	??_setLights
  5686  05FD  0877               	movf	_Lights,w
  5687  05FE  3E04               	addlw	4
  5688  05FF  0084               	movwf	4
  5689  0600  0860               	movf	??_setLights,w
  5690  0601  0080               	movwf	0
  5691                           
  5692                           ;TriacRelay_B1.c: 150: Lights->Time = 0;
  5693  0602  0877               	movf	_Lights,w
  5694  0603  3E02               	addlw	2
  5695  0604  0084               	movwf	4
  5696  0605  0180               	clrf	0
  5697  0606                     l4202:	
  5698                           
  5699                           ;TriacRelay_B1.c: 155: }
  5700                           ;TriacRelay_B1.c: 156: }
  5701                           ;TriacRelay_B1.c: 158: if (lights == 1) {
  5702  0606  1283               	bcf	3,5	;RP0=0, select bank0
  5703  0607  1303               	bcf	3,6	;RP1=0, select bank0
  5704  0608  0861               	movf	setLights@lights,w
  5705  0609  3A01               	xorlw	1
  5706  060A  1D03               	skipz
  5707  060B  2E0E               	goto	l4206
  5708                           
  5709                           ;TriacRelay_B1.c: 159: RA7 = 1;
  5710  060C  1785               	bsf	5,7	;volatile
  5711                           
  5712                           ;TriacRelay_B1.c: 160: }
  5713  060D  0008               	return
  5714  060E                     l4206:	
  5715                           
  5716                           ;TriacRelay_B1.c: 163: else if (lights == 2) {
  5717  060E  0861               	movf	setLights@lights,w
  5718  060F  3A02               	xorlw	2
  5719  0610  1D03               	skipz
  5720  0611  0008               	return
  5721                           
  5722                           ;TriacRelay_B1.c: 164: RC4 = 1;
  5723  0612  1607               	bsf	7,4	;volatile
  5724  0613  0008               	return
  5725  0614                     __end_of_setLights:	
  5726                           
  5727                           	psect	text32
  5728  0F11                     __ptext32:	
  5729 ;; *************** function _getLights_Allow_Condition *****************
  5730 ;; Defined at:
  5731 ;;		line 319 in file "../src/TriacRelay_B1.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;  lights          1    wreg     unsigned char 
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;  lights          1    4[COMMON] unsigned char 
  5736 ;;  allow           1    5[COMMON] unsigned char 
  5737 ;; Return value:  Size  Location     Type
  5738 ;;                  1    wreg      unsigned char 
  5739 ;; Registers used:
  5740 ;;		wreg, status,2, status,0
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5746 ;;      Params:         0       0       0       0
  5747 ;;      Locals:         2       0       0       0
  5748 ;;      Temps:          0       0       0       0
  5749 ;;      Totals:         2       0       0       0
  5750 ;;Total ram usage:        2 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:    2
  5753 ;; This function calls:
  5754 ;;		Nothing
  5755 ;; This function is called by:
  5756 ;;		_setLights_Main
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           
  5761                           ;psect for function _getLights_Allow_Condition
  5762  0F11                     _getLights_Allow_Condition:	
  5763                           
  5764                           ;incstack = 0
  5765                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+status,0]
  5766                           ;getLights_Allow_Condition@lights stored from wreg
  5767  0F11  00F4               	movwf	getLights_Allow_Condition@lights
  5768                           
  5769                           ;TriacRelay_B1.c: 320: char allow = 0;
  5770  0F12  01F5               	clrf	getLights_Allow_Condition@allow
  5771                           
  5772                           ;TriacRelay_B1.c: 327: if (allow == 0) {
  5773  0F13  08F5               	movf	getLights_Allow_Condition@allow,f
  5774  0F14  1D03               	skipz
  5775  0F15  2F2B               	goto	l3108
  5776                           
  5777                           ;TriacRelay_B1.c: 328: if (lights == 1) {
  5778  0F16  0874               	movf	getLights_Allow_Condition@lights,w
  5779  0F17  3A01               	xorlw	1
  5780  0F18  1D03               	skipz
  5781  0F19  2F21               	goto	l3104
  5782                           
  5783                           ;TriacRelay_B1.c: 329: allow = Lights2.Trigger == 1 ? 1 : 0;
  5784  0F1A  3000               	movlw	0
  5785  0F1B  1283               	bcf	3,5	;RP0=0, select bank0
  5786  0F1C  1303               	bcf	3,6	;RP1=0, select bank0
  5787  0F1D  19CA               	btfsc	_Lights2,3
  5788  0F1E  3001               	movlw	1
  5789  0F1F  00F5               	movwf	getLights_Allow_Condition@allow
  5790                           
  5791                           ;TriacRelay_B1.c: 330: } else if (lights == 2) {
  5792  0F20  2F2B               	goto	l3108
  5793  0F21                     l3104:	
  5794  0F21  0874               	movf	getLights_Allow_Condition@lights,w
  5795  0F22  3A02               	xorlw	2
  5796  0F23  1D03               	skipz
  5797  0F24  2F2B               	goto	l3108
  5798                           
  5799                           ;TriacRelay_B1.c: 331: allow = Lights1.Trigger == 1 ? 1 : 0;
  5800  0F25  3000               	movlw	0
  5801  0F26  1283               	bcf	3,5	;RP0=0, select bank0
  5802  0F27  1303               	bcf	3,6	;RP1=0, select bank0
  5803  0F28  19C3               	btfsc	_Lights1,3
  5804  0F29  3001               	movlw	1
  5805  0F2A  00F5               	movwf	getLights_Allow_Condition@allow
  5806  0F2B                     l3108:	
  5807                           
  5808                           ;TriacRelay_B1.c: 332: }
  5809                           ;TriacRelay_B1.c: 333: }
  5810                           ;TriacRelay_B1.c: 348: return allow;
  5811  0F2B  0875               	movf	getLights_Allow_Condition@allow,w
  5812  0F2C  0008               	return
  5813  0F2D                     __end_of_getLights_Allow_Condition:	
  5814                           
  5815                           	psect	text33
  5816  03B4                     __ptext33:	
  5817 ;; *************** function _Lights_Control *****************
  5818 ;; Defined at:
  5819 ;;		line 175 in file "../src/TriacRelay_B1.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;  lights          1    wreg     unsigned char 
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;  lights          1   10[BANK0 ] unsigned char 
  5824 ;; Return value:  Size  Location     Type
  5825 ;;		None               void
  5826 ;; Registers used:
  5827 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5828 ;; Tracked objects:
  5829 ;;		On entry : 0/0
  5830 ;;		On exit  : 0/0
  5831 ;;		Unchanged: 0/0
  5832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5833 ;;      Params:         0       0       0       0
  5834 ;;      Locals:         0       1       0       0
  5835 ;;      Temps:          0       2       0       0
  5836 ;;      Totals:         0       3       0       0
  5837 ;;Total ram usage:        3 bytes
  5838 ;; Hardware stack levels used:    1
  5839 ;; Hardware stack levels required when called:    3
  5840 ;; This function calls:
  5841 ;;		_LightsPointSelect
  5842 ;;		___awdiv
  5843 ;; This function is called by:
  5844 ;;		_Lights_Main
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           
  5849                           ;psect for function _Lights_Control
  5850  03B4                     _Lights_Control:	
  5851                           
  5852                           ;incstack = 0
  5853                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5854                           ;Lights_Control@lights stored from wreg
  5855  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  5856  03B5  1303               	bcf	3,6	;RP1=0, select bank0
  5857  03B6  00E7               	movwf	Lights_Control@lights
  5858                           
  5859                           ;TriacRelay_B1.c: 176: LightsPointSelect(lights);
  5860  03B7  0867               	movf	Lights_Control@lights,w
  5861  03B8  158A  2634  118A   	fcall	_LightsPointSelect
  5862                           
  5863                           ;TriacRelay_B1.c: 177: if (Lights->GO == 1) {
  5864  03BB  0877               	movf	_Lights,w
  5865  03BC  0084               	movwf	4
  5866  03BD  1383               	bcf	3,7	;select IRP bank0
  5867  03BE  1C80               	btfss	0,1
  5868  03BF  0008               	return
  5869                           
  5870                           ;TriacRelay_B1.c: 178: Lights->Time++;
  5871  03C0  3001               	movlw	1
  5872  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  5873  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  5874  03C3  00E5               	movwf	??_Lights_Control
  5875  03C4  0877               	movf	_Lights,w
  5876  03C5  3E02               	addlw	2
  5877  03C6  0084               	movwf	4
  5878  03C7  0865               	movf	??_Lights_Control,w
  5879  03C8  0780               	addwf	0,f
  5880                           
  5881                           ;TriacRelay_B1.c: 179: if (Lights->RelaySet == 0) {
  5882  03C9  0877               	movf	_Lights,w
  5883  03CA  0084               	movwf	4
  5884  03CB  1B80               	btfsc	0,7
  5885  03CC  2C14               	goto	l4436
  5886                           
  5887                           ;TriacRelay_B1.c: 180: if (Lights->Time >= (Lights->RelayValue / 20)) {
  5888  03CD  3014               	movlw	20
  5889  03CE  00DD               	movwf	___awdiv@divisor
  5890  03CF  3000               	movlw	0
  5891  03D0  00DE               	movwf	___awdiv@divisor+1
  5892  03D1  0877               	movf	_Lights,w
  5893  03D2  3E06               	addlw	6
  5894  03D3  0084               	movwf	4
  5895  03D4  0800               	movf	0,w
  5896  03D5  00E5               	movwf	??_Lights_Control
  5897  03D6  01E6               	clrf	??_Lights_Control+1
  5898  03D7  0865               	movf	??_Lights_Control,w
  5899  03D8  00DF               	movwf	___awdiv@dividend
  5900  03D9  0866               	movf	??_Lights_Control+1,w
  5901  03DA  00E0               	movwf	___awdiv@dividend+1
  5902  03DB  118A  2614  118A   	fcall	___awdiv
  5903  03DE  0877               	movf	_Lights,w
  5904  03DF  3E02               	addlw	2
  5905  03E0  0084               	movwf	4
  5906  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  5907  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  5908  03E3  085E               	movf	?___awdiv+1,w
  5909  03E4  3A80               	xorlw	128
  5910  03E5  3C80               	sublw	128
  5911  03E6  1D03               	skipz
  5912  03E7  2BEB               	goto	u5015
  5913  03E8  085D               	movf	?___awdiv,w
  5914  03E9  1383               	bcf	3,7	;select IRP bank0
  5915  03EA  0200               	subwf	0,w
  5916  03EB                     u5015:	
  5917  03EB  1C03               	skipc
  5918  03EC  0008               	return
  5919                           
  5920                           ;TriacRelay_B1.c: 181: Lights->RelaySet = 1;
  5921  03ED  0877               	movf	_Lights,w
  5922  03EE  0084               	movwf	4
  5923  03EF  1383               	bcf	3,7	;select IRP bank0
  5924  03F0  1780               	bsf	0,7
  5925                           
  5926                           ;TriacRelay_B1.c: 183: if (lights == 1) {
  5927  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  5928  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  5929  03F3  0867               	movf	Lights_Control@lights,w
  5930  03F4  3A01               	xorlw	1
  5931  03F5  1D03               	skipz
  5932  03F6  2C03               	goto	l4432
  5933                           
  5934                           ;TriacRelay_B1.c: 184: RA6 = Lights->Status == 1 ? 1 : 0;
  5935  03F7  0877               	movf	_Lights,w
  5936  03F8  0084               	movwf	4
  5937  03F9  1D00               	btfss	0,2
  5938  03FA  2BFF               	goto	u5030
  5939  03FB  1283               	bcf	3,5	;RP0=0, select bank0
  5940  03FC  1303               	bcf	3,6	;RP1=0, select bank0
  5941  03FD  1705               	bsf	5,6	;volatile
  5942  03FE  0008               	return
  5943  03FF                     u5030:	
  5944  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  5945  0400  1303               	bcf	3,6	;RP1=0, select bank0
  5946  0401  1305               	bcf	5,6	;volatile
  5947                           
  5948                           ;TriacRelay_B1.c: 185: }
  5949  0402  0008               	return
  5950  0403                     l4432:	
  5951                           
  5952                           ;TriacRelay_B1.c: 188: else if (lights == 2) {
  5953  0403  0867               	movf	Lights_Control@lights,w
  5954  0404  3A02               	xorlw	2
  5955  0405  1D03               	skipz
  5956  0406  0008               	return
  5957                           
  5958                           ;TriacRelay_B1.c: 189: RC5 = Lights->Status == 1 ? 1 : 0;
  5959  0407  0877               	movf	_Lights,w
  5960  0408  0084               	movwf	4
  5961  0409  1383               	bcf	3,7	;select IRP bank0
  5962  040A  1D00               	btfss	0,2
  5963  040B  2C10               	goto	u5060
  5964  040C  1283               	bcf	3,5	;RP0=0, select bank0
  5965  040D  1303               	bcf	3,6	;RP1=0, select bank0
  5966  040E  1687               	bsf	7,5	;volatile
  5967  040F  0008               	return
  5968  0410                     u5060:	
  5969  0410  1283               	bcf	3,5	;RP0=0, select bank0
  5970  0411  1303               	bcf	3,6	;RP1=0, select bank0
  5971  0412  1287               	bcf	7,5	;volatile
  5972                           
  5973                           ;TriacRelay_B1.c: 190: }
  5974                           ;TriacRelay_B1.c: 197: }
  5975                           ;TriacRelay_B1.c: 198: } else {
  5976  0413  0008               	return
  5977  0414                     l4436:	
  5978                           
  5979                           ;TriacRelay_B1.c: 199: if (Lights->Time >= (Lights->TriacValue / 20)) {
  5980  0414  3014               	movlw	20
  5981  0415  00DD               	movwf	___awdiv@divisor
  5982  0416  3000               	movlw	0
  5983  0417  00DE               	movwf	___awdiv@divisor+1
  5984  0418  0877               	movf	_Lights,w
  5985  0419  3E04               	addlw	4
  5986  041A  0084               	movwf	4
  5987  041B  1383               	bcf	3,7	;select IRP bank0
  5988  041C  0800               	movf	0,w
  5989  041D  00E5               	movwf	??_Lights_Control
  5990  041E  01E6               	clrf	??_Lights_Control+1
  5991  041F  0865               	movf	??_Lights_Control,w
  5992  0420  00DF               	movwf	___awdiv@dividend
  5993  0421  0866               	movf	??_Lights_Control+1,w
  5994  0422  00E0               	movwf	___awdiv@dividend+1
  5995  0423  118A  2614  118A   	fcall	___awdiv
  5996  0426  0877               	movf	_Lights,w
  5997  0427  3E02               	addlw	2
  5998  0428  0084               	movwf	4
  5999  0429  1283               	bcf	3,5	;RP0=0, select bank0
  6000  042A  1303               	bcf	3,6	;RP1=0, select bank0
  6001  042B  085E               	movf	?___awdiv+1,w
  6002  042C  3A80               	xorlw	128
  6003  042D  3C80               	sublw	128
  6004  042E  1D03               	skipz
  6005  042F  2C33               	goto	u5085
  6006  0430  085D               	movf	?___awdiv,w
  6007  0431  1383               	bcf	3,7	;select IRP bank0
  6008  0432  0200               	subwf	0,w
  6009  0433                     u5085:	
  6010  0433  1C03               	skipc
  6011  0434  0008               	return
  6012                           
  6013                           ;TriacRelay_B1.c: 200: Lights->Time = 0;
  6014  0435  0877               	movf	_Lights,w
  6015  0436  3E02               	addlw	2
  6016  0437  0084               	movwf	4
  6017  0438  1383               	bcf	3,7	;select IRP bank0
  6018  0439  0180               	clrf	0
  6019                           
  6020                           ;TriacRelay_B1.c: 201: Lights->GO = 0;
  6021  043A  0877               	movf	_Lights,w
  6022  043B  0084               	movwf	4
  6023  043C  1080               	bcf	0,1
  6024                           
  6025                           ;TriacRelay_B1.c: 202: Lights->RelaySet = 0;
  6026  043D  0877               	movf	_Lights,w
  6027  043E  0084               	movwf	4
  6028  043F  1380               	bcf	0,7
  6029                           
  6030                           ;TriacRelay_B1.c: 205: if (lights == 1) {
  6031  0440  1283               	bcf	3,5	;RP0=0, select bank0
  6032  0441  1303               	bcf	3,6	;RP1=0, select bank0
  6033  0442  0867               	movf	Lights_Control@lights,w
  6034  0443  3A01               	xorlw	1
  6035  0444  1D03               	skipz
  6036  0445  2C48               	goto	l4448
  6037                           
  6038                           ;TriacRelay_B1.c: 206: RA7 = 0;
  6039  0446  1385               	bcf	5,7	;volatile
  6040                           
  6041                           ;TriacRelay_B1.c: 207: }
  6042  0447  0008               	return
  6043  0448                     l4448:	
  6044                           
  6045                           ;TriacRelay_B1.c: 210: else if (lights == 2) {
  6046  0448  0867               	movf	Lights_Control@lights,w
  6047  0449  3A02               	xorlw	2
  6048  044A  1D03               	skipz
  6049  044B  0008               	return
  6050                           
  6051                           ;TriacRelay_B1.c: 211: RC4 = 0;
  6052  044C  1207               	bcf	7,4	;volatile
  6053  044D  0008               	return
  6054  044E                     __end_of_Lights_Control:	
  6055                           
  6056                           	psect	text34
  6057  0614                     __ptext34:	
  6058 ;; *************** function ___awdiv *****************
  6059 ;; Defined at:
  6060 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  6061 ;; Parameters:    Size  Location     Type
  6062 ;;  divisor         2    0[BANK0 ] int 
  6063 ;;  dividend        2    2[BANK0 ] int 
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;  quotient        2    6[BANK0 ] int 
  6066 ;;  sign            1    5[BANK0 ] unsigned char 
  6067 ;;  counter         1    4[BANK0 ] unsigned char 
  6068 ;; Return value:  Size  Location     Type
  6069 ;;                  2    0[BANK0 ] int 
  6070 ;; Registers used:
  6071 ;;		wreg, status,2, status,0
  6072 ;; Tracked objects:
  6073 ;;		On entry : 0/0
  6074 ;;		On exit  : 0/0
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6077 ;;      Params:         0       4       0       0
  6078 ;;      Locals:         0       4       0       0
  6079 ;;      Temps:          1       0       0       0
  6080 ;;      Totals:         1       8       0       0
  6081 ;;Total ram usage:        9 bytes
  6082 ;; Hardware stack levels used:    1
  6083 ;; Hardware stack levels required when called:    2
  6084 ;; This function calls:
  6085 ;;		Nothing
  6086 ;; This function is called by:
  6087 ;;		_setBuz
  6088 ;;		_getPIR_AD
  6089 ;;		_Lights_Control
  6090 ;; This function uses a non-reentrant model
  6091 ;;
  6092                           
  6093                           
  6094                           ;psect for function ___awdiv
  6095  0614                     ___awdiv:	
  6096                           
  6097                           ;incstack = 0
  6098                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6099  0614  1283               	bcf	3,5	;RP0=0, select bank0
  6100  0615  1303               	bcf	3,6	;RP1=0, select bank0
  6101  0616  01E2               	clrf	___awdiv@sign
  6102  0617  1FDE               	btfss	___awdiv@divisor+1,7
  6103  0618  2E20               	goto	l4218
  6104  0619  09DD               	comf	___awdiv@divisor,f
  6105  061A  09DE               	comf	___awdiv@divisor+1,f
  6106  061B  0ADD               	incf	___awdiv@divisor,f
  6107  061C  1903               	skipnz
  6108  061D  0ADE               	incf	___awdiv@divisor+1,f
  6109  061E  01E2               	clrf	___awdiv@sign
  6110  061F  0AE2               	incf	___awdiv@sign,f
  6111  0620                     l4218:	
  6112  0620  1FE0               	btfss	___awdiv@dividend+1,7
  6113  0621  2E2B               	goto	l4224
  6114  0622  09DF               	comf	___awdiv@dividend,f
  6115  0623  09E0               	comf	___awdiv@dividend+1,f
  6116  0624  0ADF               	incf	___awdiv@dividend,f
  6117  0625  1903               	skipnz
  6118  0626  0AE0               	incf	___awdiv@dividend+1,f
  6119  0627  3001               	movlw	1
  6120  0628  00F4               	movwf	??___awdiv
  6121  0629  0874               	movf	??___awdiv,w
  6122  062A  06E2               	xorwf	___awdiv@sign,f
  6123  062B                     l4224:	
  6124  062B  01E3               	clrf	___awdiv@quotient
  6125  062C  01E4               	clrf	___awdiv@quotient+1
  6126  062D  085E               	movf	___awdiv@divisor+1,w
  6127  062E  045D               	iorwf	___awdiv@divisor,w
  6128  062F  1903               	skipnz
  6129  0630  2E62               	goto	l4246
  6130  0631  01E1               	clrf	___awdiv@counter
  6131  0632  0AE1               	incf	___awdiv@counter,f
  6132  0633                     l4234:	
  6133  0633  1BDE               	btfsc	___awdiv@divisor+1,7
  6134  0634  2E41               	goto	l4236
  6135  0635  3001               	movlw	1
  6136  0636                     u4595:	
  6137  0636  1003               	clrc
  6138  0637  0DDD               	rlf	___awdiv@divisor,f
  6139  0638  0DDE               	rlf	___awdiv@divisor+1,f
  6140  0639  3EFF               	addlw	-1
  6141  063A  1D03               	skipz
  6142  063B  2E36               	goto	u4595
  6143  063C  3001               	movlw	1
  6144  063D  00F4               	movwf	??___awdiv
  6145  063E  0874               	movf	??___awdiv,w
  6146  063F  07E1               	addwf	___awdiv@counter,f
  6147  0640  2E33               	goto	l4234
  6148  0641                     l4236:	
  6149  0641  3001               	movlw	1
  6150  0642                     u4615:	
  6151  0642  1003               	clrc
  6152  0643  0DE3               	rlf	___awdiv@quotient,f
  6153  0644  0DE4               	rlf	___awdiv@quotient+1,f
  6154  0645  3EFF               	addlw	-1
  6155  0646  1D03               	skipz
  6156  0647  2E42               	goto	u4615
  6157  0648  085E               	movf	___awdiv@divisor+1,w
  6158  0649  0260               	subwf	___awdiv@dividend+1,w
  6159  064A  1D03               	skipz
  6160  064B  2E4E               	goto	u4625
  6161  064C  085D               	movf	___awdiv@divisor,w
  6162  064D  025F               	subwf	___awdiv@dividend,w
  6163  064E                     u4625:	
  6164  064E  1C03               	skipc
  6165  064F  2E57               	goto	l4242
  6166  0650  085D               	movf	___awdiv@divisor,w
  6167  0651  02DF               	subwf	___awdiv@dividend,f
  6168  0652  085E               	movf	___awdiv@divisor+1,w
  6169  0653  1C03               	skipc
  6170  0654  03E0               	decf	___awdiv@dividend+1,f
  6171  0655  02E0               	subwf	___awdiv@dividend+1,f
  6172  0656  1463               	bsf	___awdiv@quotient,0
  6173  0657                     l4242:	
  6174  0657  3001               	movlw	1
  6175  0658                     u4635:	
  6176  0658  1003               	clrc
  6177  0659  0CDE               	rrf	___awdiv@divisor+1,f
  6178  065A  0CDD               	rrf	___awdiv@divisor,f
  6179  065B  3EFF               	addlw	-1
  6180  065C  1D03               	skipz
  6181  065D  2E58               	goto	u4635
  6182  065E  3001               	movlw	1
  6183  065F  02E1               	subwf	___awdiv@counter,f
  6184  0660  1D03               	btfss	3,2
  6185  0661  2E41               	goto	l4236
  6186  0662                     l4246:	
  6187  0662  0862               	movf	___awdiv@sign,w
  6188  0663  1903               	btfsc	3,2
  6189  0664  2E6A               	goto	l4250
  6190  0665  09E3               	comf	___awdiv@quotient,f
  6191  0666  09E4               	comf	___awdiv@quotient+1,f
  6192  0667  0AE3               	incf	___awdiv@quotient,f
  6193  0668  1903               	skipnz
  6194  0669  0AE4               	incf	___awdiv@quotient+1,f
  6195  066A                     l4250:	
  6196  066A  0864               	movf	___awdiv@quotient+1,w
  6197  066B  01DE               	clrf	?___awdiv+1
  6198  066C  07DE               	addwf	?___awdiv+1,f
  6199  066D  0863               	movf	___awdiv@quotient,w
  6200  066E  01DD               	clrf	?___awdiv
  6201  066F  07DD               	addwf	?___awdiv,f
  6202  0670  0008               	return
  6203  0671                     __end_of___awdiv:	
  6204                           
  6205                           	psect	text35
  6206  0D8B                     __ptext35:	
  6207 ;; *************** function _Lights_Initialization *****************
  6208 ;; Defined at:
  6209 ;;		line 32 in file "../src/TriacRelay_B1.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;		None
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;		None
  6214 ;; Return value:  Size  Location     Type
  6215 ;;		None               void
  6216 ;; Registers used:
  6217 ;;		wreg, status,2, status,0, pclath, cstack
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6223 ;;      Params:         0       0       0       0
  6224 ;;      Locals:         0       0       0       0
  6225 ;;      Temps:          0       0       0       0
  6226 ;;      Totals:         0       0       0       0
  6227 ;;Total ram usage:        0 bytes
  6228 ;; Hardware stack levels used:    1
  6229 ;; Hardware stack levels required when called:    4
  6230 ;; This function calls:
  6231 ;;		_setLights_Initialization
  6232 ;; This function is called by:
  6233 ;;		_main
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           
  6238                           ;psect for function _Lights_Initialization
  6239  0D8B                     _Lights_Initialization:	
  6240                           
  6241                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  6242                           
  6243                           ;incstack = 0
  6244                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  6245  0D8B  3001               	movlw	1
  6246  0D8C  158A  2584  158A   	fcall	_setLights_Initialization
  6247                           
  6248                           ;TriacRelay_B1.c: 38: setLights_Initialization(2);
  6249  0D8F  3002               	movlw	2
  6250  0D90  158A  2584         	fcall	_setLights_Initialization
  6251  0D92  0008               	return
  6252  0D93                     __end_of_Lights_Initialization:	
  6253                           
  6254                           	psect	text36
  6255  0D84                     __ptext36:	
  6256 ;; *************** function _setLights_Initialization *****************
  6257 ;; Defined at:
  6258 ;;		line 47 in file "../src/TriacRelay_B1.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  lights          1    wreg     unsigned char 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  lights          1    0[BANK0 ] unsigned char 
  6263 ;; Return value:  Size  Location     Type
  6264 ;;		None               void
  6265 ;; Registers used:
  6266 ;;		wreg, status,2, status,0, pclath, cstack
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6272 ;;      Params:         0       0       0       0
  6273 ;;      Locals:         0       1       0       0
  6274 ;;      Temps:          0       0       0       0
  6275 ;;      Totals:         0       1       0       0
  6276 ;;Total ram usage:        1 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:    3
  6279 ;; This function calls:
  6280 ;;		_LightsPointSelect
  6281 ;; This function is called by:
  6282 ;;		_Lights_Initialization
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           
  6287                           ;psect for function _setLights_Initialization
  6288  0D84                     _setLights_Initialization:	
  6289                           
  6290                           ;incstack = 0
  6291                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  6292                           ;setLights_Initialization@lights stored from wreg
  6293  0D84  1283               	bcf	3,5	;RP0=0, select bank0
  6294  0D85  1303               	bcf	3,6	;RP1=0, select bank0
  6295  0D86  00DD               	movwf	setLights_Initialization@lights
  6296                           
  6297                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  6298  0D87  085D               	movf	setLights_Initialization@lights,w
  6299  0D88  158A  2634         	fcall	_LightsPointSelect
  6300  0D8A  0008               	return
  6301  0D8B                     __end_of_setLights_Initialization:	
  6302                           
  6303                           	psect	text37
  6304  0D6E                     __ptext37:	
  6305 ;; *************** function _LED_Main *****************
  6306 ;; Defined at:
  6307 ;;		line 47 in file "../src/LED_B1.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;		None
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;		None
  6312 ;; Return value:  Size  Location     Type
  6313 ;;		None               void
  6314 ;; Registers used:
  6315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6316 ;; Tracked objects:
  6317 ;;		On entry : 0/0
  6318 ;;		On exit  : 0/0
  6319 ;;		Unchanged: 0/0
  6320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6321 ;;      Params:         0       0       0       0
  6322 ;;      Locals:         0       0       0       0
  6323 ;;      Temps:          0       0       0       0
  6324 ;;      Totals:         0       0       0       0
  6325 ;;Total ram usage:        0 bytes
  6326 ;; Hardware stack levels used:    1
  6327 ;; Hardware stack levels required when called:    5
  6328 ;; This function calls:
  6329 ;;		_setPIRLED_Main
  6330 ;; This function is called by:
  6331 ;;		_main
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335                           
  6336                           ;psect for function _LED_Main
  6337  0D6E                     _LED_Main:	
  6338                           
  6339                           ;LED_B1.c: 50: setPIRLED_Main();
  6340                           
  6341                           ;incstack = 0
  6342                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6343  0D6E  118A  24C6         	fcall	_setPIRLED_Main
  6344  0D70  0008               	return
  6345  0D71                     __end_of_LED_Main:	
  6346                           
  6347                           	psect	text38
  6348  04C6                     __ptext38:	
  6349 ;; *************** function _setPIRLED_Main *****************
  6350 ;; Defined at:
  6351 ;;		line 253 in file "../src/LED_B1.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;		None
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  count           1    3[BANK0 ] unsigned char 
  6356 ;; Return value:  Size  Location     Type
  6357 ;;		None               void
  6358 ;; Registers used:
  6359 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6365 ;;      Params:         0       0       0       0
  6366 ;;      Locals:         0       1       0       0
  6367 ;;      Temps:          0       1       0       0
  6368 ;;      Totals:         0       2       0       0
  6369 ;;Total ram usage:        2 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; Hardware stack levels required when called:    4
  6372 ;; This function calls:
  6373 ;;		_setLED
  6374 ;; This function is called by:
  6375 ;;		_LED_Main
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379                           
  6380                           ;psect for function _setPIRLED_Main
  6381  04C6                     _setPIRLED_Main:	
  6382                           
  6383                           ;LED_B1.c: 254: char count;
  6384                           ;LED_B1.c: 255: if (PIRLED.GO == 1) {
  6385                           
  6386                           ;incstack = 0
  6387                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6388  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  6389  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  6390  04C8  1C37               	btfss	_PIRLED,0
  6391  04C9  0008               	return
  6392                           
  6393                           ;LED_B1.c: 256: PIRLED.Time++;
  6394  04CA  3001               	movlw	1
  6395  04CB  07B9               	addwf	_PIRLED+2,f
  6396  04CC  1803               	skipnc
  6397  04CD  0ABA               	incf	_PIRLED+3,f
  6398  04CE  3000               	movlw	0
  6399  04CF  07BA               	addwf	_PIRLED+3,f
  6400                           
  6401                           ;LED_B1.c: 257: if (PIRLED.Time >= 500 / 20) {
  6402  04D0  3000               	movlw	0
  6403  04D1  023A               	subwf	_PIRLED+3,w
  6404  04D2  3019               	movlw	25
  6405  04D3  1903               	skipnz
  6406  04D4  0239               	subwf	_PIRLED+2,w
  6407  04D5  1C03               	skipc
  6408  04D6  0008               	return
  6409                           
  6410                           ;LED_B1.c: 258: PIRLED.Time = 0;
  6411  04D7  01B9               	clrf	_PIRLED+2
  6412  04D8  01BA               	clrf	_PIRLED+3
  6413                           
  6414                           ;LED_B1.c: 259: setLED(1, 0);
  6415  04D9  01DD               	clrf	setLED@command
  6416  04DA  3001               	movlw	1
  6417  04DB  118A  2537  118A   	fcall	_setLED
  6418                           
  6419                           ;LED_B1.c: 260: setLED(2, 0);
  6420  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  6421  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  6422  04E0  01DD               	clrf	setLED@command
  6423  04E1  3002               	movlw	2
  6424  04E2  118A  2537  118A   	fcall	_setLED
  6425                           
  6426                           ;LED_B1.c: 261: if (PIRLED.GO1 == 1) {
  6427  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  6428  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  6429  04E7  1CB7               	btfss	_PIRLED,1
  6430  04E8  2CED               	goto	l4302
  6431                           
  6432                           ;LED_B1.c: 262: count = 4;
  6433  04E9  3004               	movlw	4
  6434  04EA  00DF               	movwf	??_setPIRLED_Main
  6435  04EB  085F               	movf	??_setPIRLED_Main,w
  6436  04EC  00E0               	movwf	setPIRLED_Main@count
  6437  04ED                     l4302:	
  6438                           
  6439                           ;LED_B1.c: 263: }
  6440                           ;LED_B1.c: 264: if (PIRLED.GO2 == 1) {
  6441  04ED  1D37               	btfss	_PIRLED,2
  6442  04EE  2CF3               	goto	l4306
  6443                           
  6444                           ;LED_B1.c: 265: count = 6;
  6445  04EF  3006               	movlw	6
  6446  04F0  00DF               	movwf	??_setPIRLED_Main
  6447  04F1  085F               	movf	??_setPIRLED_Main,w
  6448  04F2  00E0               	movwf	setPIRLED_Main@count
  6449  04F3                     l4306:	
  6450                           
  6451                           ;LED_B1.c: 266: }
  6452                           ;LED_B1.c: 267: if (PIRLED.GO3 == 1) {
  6453  04F3  1DB7               	btfss	_PIRLED,3
  6454  04F4  2CF9               	goto	l4310
  6455                           
  6456                           ;LED_B1.c: 268: count = 8;
  6457  04F5  3008               	movlw	8
  6458  04F6  00DF               	movwf	??_setPIRLED_Main
  6459  04F7  085F               	movf	??_setPIRLED_Main,w
  6460  04F8  00E0               	movwf	setPIRLED_Main@count
  6461  04F9                     l4310:	
  6462                           
  6463                           ;LED_B1.c: 269: }
  6464                           ;LED_B1.c: 270: PIRLED.Count++;
  6465  04F9  3001               	movlw	1
  6466  04FA  00DF               	movwf	??_setPIRLED_Main
  6467  04FB  085F               	movf	??_setPIRLED_Main,w
  6468  04FC  07B8               	addwf	_PIRLED+1,f
  6469                           
  6470                           ;LED_B1.c: 271: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  6471  04FD  0838               	movf	_PIRLED+1,w
  6472  04FE  3A01               	xorlw	1
  6473  04FF  1903               	skipnz
  6474  0500  2D05               	goto	l4316
  6475  0501  0838               	movf	_PIRLED+1,w
  6476  0502  3A02               	xorlw	2
  6477  0503  1D03               	skipz
  6478  0504  2D19               	goto	l4320
  6479  0505                     l4316:	
  6480                           
  6481                           ;LED_B1.c: 272: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  6482  0505  1003               	clrc
  6483  0506  1E37               	btfss	_PIRLED,4
  6484  0507  1403               	setc
  6485  0508  1C03               	btfss	3,0
  6486  0509  2D0E               	goto	u4770
  6487  050A  1283               	bcf	3,5	;RP0=0, select bank0
  6488  050B  1303               	bcf	3,6	;RP1=0, select bank0
  6489  050C  1637               	bsf	_PIRLED,4
  6490  050D  2D11               	goto	l4318
  6491  050E                     u4770:	
  6492  050E  1283               	bcf	3,5	;RP0=0, select bank0
  6493  050F  1303               	bcf	3,6	;RP1=0, select bank0
  6494  0510  1237               	bcf	_PIRLED,4
  6495  0511                     l4318:	
  6496                           
  6497                           ;LED_B1.c: 273: setLED(2, PIRLED.status);
  6498  0511  3000               	movlw	0
  6499  0512  1A37               	btfsc	_PIRLED,4
  6500  0513  3001               	movlw	1
  6501  0514  00DD               	movwf	setLED@command
  6502  0515  3002               	movlw	2
  6503  0516  118A  2537         	fcall	_setLED
  6504                           
  6505                           ;LED_B1.c: 274: } else {
  6506  0518  0008               	return
  6507  0519                     l4320:	
  6508                           
  6509                           ;LED_B1.c: 275: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  6510  0519  1003               	clrc
  6511  051A  1283               	bcf	3,5	;RP0=0, select bank0
  6512  051B  1303               	bcf	3,6	;RP1=0, select bank0
  6513  051C  1E37               	btfss	_PIRLED,4
  6514  051D  1403               	setc
  6515  051E  1C03               	btfss	3,0
  6516  051F  2D24               	goto	u4790
  6517  0520  1283               	bcf	3,5	;RP0=0, select bank0
  6518  0521  1303               	bcf	3,6	;RP1=0, select bank0
  6519  0522  1637               	bsf	_PIRLED,4
  6520  0523  2D27               	goto	l4322
  6521  0524                     u4790:	
  6522  0524  1283               	bcf	3,5	;RP0=0, select bank0
  6523  0525  1303               	bcf	3,6	;RP1=0, select bank0
  6524  0526  1237               	bcf	_PIRLED,4
  6525  0527                     l4322:	
  6526                           
  6527                           ;LED_B1.c: 276: setLED(1, PIRLED.status);
  6528  0527  3000               	movlw	0
  6529  0528  1A37               	btfsc	_PIRLED,4
  6530  0529  3001               	movlw	1
  6531  052A  00DD               	movwf	setLED@command
  6532  052B  3001               	movlw	1
  6533  052C  118A  2537  118A   	fcall	_setLED
  6534                           
  6535                           ;LED_B1.c: 277: if (PIRLED.Count == count) {
  6536  052F  1283               	bcf	3,5	;RP0=0, select bank0
  6537  0530  1303               	bcf	3,6	;RP1=0, select bank0
  6538  0531  0838               	movf	_PIRLED+1,w
  6539  0532  0660               	xorwf	setPIRLED_Main@count,w
  6540  0533  1D03               	skipz
  6541  0534  0008               	return
  6542                           
  6543                           ;LED_B1.c: 278: PIRLED.Count = 0;
  6544  0535  01B8               	clrf	_PIRLED+1
  6545  0536  0008               	return
  6546  0537                     __end_of_setPIRLED_Main:	
  6547                           
  6548                           	psect	text39
  6549  0DB9                     __ptext39:	
  6550 ;; *************** function _LED_Initialization *****************
  6551 ;; Defined at:
  6552 ;;		line 31 in file "../src/LED_B1.c"
  6553 ;; Parameters:    Size  Location     Type
  6554 ;;		None
  6555 ;; Auto vars:     Size  Location     Type
  6556 ;;		None
  6557 ;; Return value:  Size  Location     Type
  6558 ;;		None               void
  6559 ;; Registers used:
  6560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6561 ;; Tracked objects:
  6562 ;;		On entry : 0/0
  6563 ;;		On exit  : 0/0
  6564 ;;		Unchanged: 0/0
  6565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6566 ;;      Params:         0       0       0       0
  6567 ;;      Locals:         0       0       0       0
  6568 ;;      Temps:          0       0       0       0
  6569 ;;      Totals:         0       0       0       0
  6570 ;;Total ram usage:        0 bytes
  6571 ;; Hardware stack levels used:    1
  6572 ;; Hardware stack levels required when called:    5
  6573 ;; This function calls:
  6574 ;;		_setLED_Initialization
  6575 ;; This function is called by:
  6576 ;;		_main
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           
  6581                           ;psect for function _LED_Initialization
  6582  0DB9                     _LED_Initialization:	
  6583                           
  6584                           ;LED_B1.c: 33: setLED_Initialization(1);
  6585                           
  6586                           ;incstack = 0
  6587                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6588  0DB9  3001               	movlw	1
  6589  0DBA  158A  2622  158A   	fcall	_setLED_Initialization
  6590                           
  6591                           ;LED_B1.c: 36: setLED_Initialization(2);
  6592  0DBD  3002               	movlw	2
  6593  0DBE  158A  2622  158A   	fcall	_setLED_Initialization
  6594                           
  6595                           ;LED_B1.c: 42: setLED_Initialization(99);
  6596  0DC1  3063               	movlw	99
  6597  0DC2  158A  2622         	fcall	_setLED_Initialization
  6598  0DC4  0008               	return
  6599  0DC5                     __end_of_LED_Initialization:	
  6600                           
  6601                           	psect	text40
  6602  0E22                     __ptext40:	
  6603 ;; *************** function _setLED_Initialization *****************
  6604 ;; Defined at:
  6605 ;;		line 69 in file "../src/LED_B1.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;  led             1    wreg     unsigned char 
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;  led             1    2[BANK0 ] unsigned char 
  6610 ;; Return value:  Size  Location     Type
  6611 ;;		None               void
  6612 ;; Registers used:
  6613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6619 ;;      Params:         0       0       0       0
  6620 ;;      Locals:         0       1       0       0
  6621 ;;      Temps:          0       0       0       0
  6622 ;;      Totals:         0       1       0       0
  6623 ;;Total ram usage:        1 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; Hardware stack levels required when called:    4
  6626 ;; This function calls:
  6627 ;;		_LedPointSelect
  6628 ;;		_setLED
  6629 ;; This function is called by:
  6630 ;;		_LED_Initialization
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           
  6635                           ;psect for function _setLED_Initialization
  6636  0E22                     _setLED_Initialization:	
  6637                           
  6638                           ;incstack = 0
  6639                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6640                           ;setLED_Initialization@led stored from wreg
  6641  0E22  1283               	bcf	3,5	;RP0=0, select bank0
  6642  0E23  1303               	bcf	3,6	;RP1=0, select bank0
  6643  0E24  00DF               	movwf	setLED_Initialization@led
  6644                           
  6645                           ;LED_B1.c: 70: LedPointSelect(led);
  6646  0E25  085F               	movf	setLED_Initialization@led,w
  6647  0E26  158A  26DC  158A   	fcall	_LedPointSelect
  6648                           
  6649                           ;LED_B1.c: 71: LED->Enable = 1;
  6650  0E29  0876               	movf	_LED,w
  6651  0E2A  0084               	movwf	4
  6652  0E2B  1383               	bcf	3,7	;select IRP bank0
  6653  0E2C  1400               	bsf	0,0
  6654                           
  6655                           ;LED_B1.c: 72: setLED(led, 0);
  6656  0E2D  1283               	bcf	3,5	;RP0=0, select bank0
  6657  0E2E  1303               	bcf	3,6	;RP1=0, select bank0
  6658  0E2F  01DD               	clrf	setLED@command
  6659  0E30  085F               	movf	setLED_Initialization@led,w
  6660  0E31  118A  2537         	fcall	_setLED
  6661  0E33  0008               	return
  6662  0E34                     __end_of_setLED_Initialization:	
  6663                           
  6664                           	psect	text41
  6665  044E                     __ptext41:	
  6666 ;; *************** function _Exception_Main *****************
  6667 ;; Defined at:
  6668 ;;		line 505 in file "../src/Main_B1.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;		None
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;  i               2    8[BANK0 ] int 
  6673 ;;  status          1    7[BANK0 ] unsigned char 
  6674 ;;  error           1   10[BANK0 ] unsigned char 
  6675 ;;  count           1    6[BANK0 ] unsigned char 
  6676 ;;  lights          1    5[BANK0 ] unsigned char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;		None               void
  6679 ;; Registers used:
  6680 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6686 ;;      Params:         0       0       0       0
  6687 ;;      Locals:         0       6       0       0
  6688 ;;      Temps:          0       1       0       0
  6689 ;;      Totals:         0       7       0       0
  6690 ;;Total ram usage:        7 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    4
  6693 ;; This function calls:
  6694 ;;		_getAll_Lights_Line
  6695 ;;		_getLights_Status
  6696 ;;		_getMain_All_Error_Status
  6697 ;;		_setLED
  6698 ;;		_setLights_Trigger
  6699 ;; This function is called by:
  6700 ;;		_main
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           
  6705                           ;psect for function _Exception_Main
  6706  044E                     _Exception_Main:	
  6707                           
  6708                           ;Main_B1.c: 506: char error = getMain_All_Error_Status(0);
  6709                           
  6710                           ;incstack = 0
  6711                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6712  044E  3000               	movlw	0
  6713  044F  158A  256B  118A   	fcall	_getMain_All_Error_Status
  6714  0452  1283               	bcf	3,5	;RP0=0, select bank0
  6715  0453  1303               	bcf	3,6	;RP1=0, select bank0
  6716  0454  00E1               	movwf	??_Exception_Main
  6717  0455  0861               	movf	??_Exception_Main,w
  6718  0456  00E7               	movwf	Exception_Main@error
  6719                           
  6720                           ;Main_B1.c: 507: char lights = 0, count = 2;
  6721  0457  01E2               	clrf	Exception_Main@lights
  6722  0458  3002               	movlw	2
  6723  0459  00E1               	movwf	??_Exception_Main
  6724  045A  0861               	movf	??_Exception_Main,w
  6725  045B  00E3               	movwf	Exception_Main@count
  6726                           
  6727                           ;Main_B1.c: 508: if (myMain.Error_Run == 1) {
  6728  045C  1DAF               	btfss	_myMain+3,3
  6729  045D  2C6A               	goto	l4774
  6730                           
  6731                           ;Main_B1.c: 509: if (error == 0) {
  6732  045E  08E7               	movf	Exception_Main@error,f
  6733  045F  1D03               	skipz
  6734  0460  0008               	return
  6735                           
  6736                           ;Main_B1.c: 510: myMain.Error_Run = 0;
  6737  0461  11AF               	bcf	_myMain+3,3
  6738                           
  6739                           ;Main_B1.c: 512: setLED(error, 110);
  6740  0462  306E               	movlw	110
  6741  0463  00E1               	movwf	??_Exception_Main
  6742  0464  0861               	movf	??_Exception_Main,w
  6743  0465  00DD               	movwf	setLED@command
  6744  0466  0867               	movf	Exception_Main@error,w
  6745  0467  118A  2537         	fcall	_setLED
  6746                           
  6747                           ;Main_B1.c: 521: }
  6748                           ;Main_B1.c: 522: } else {
  6749  0469  0008               	return
  6750  046A                     l4774:	
  6751                           
  6752                           ;Main_B1.c: 523: if (error != 0) {
  6753  046A  1283               	bcf	3,5	;RP0=0, select bank0
  6754  046B  1303               	bcf	3,6	;RP1=0, select bank0
  6755  046C  0867               	movf	Exception_Main@error,w
  6756  046D  1903               	btfsc	3,2
  6757  046E  0008               	return
  6758                           
  6759                           ;Main_B1.c: 524: myMain.Error_Run = 1;
  6760  046F  15AF               	bsf	_myMain+3,3
  6761                           
  6762                           ;Main_B1.c: 585: setLED(error, 111);
  6763  0470  306F               	movlw	111
  6764  0471  00E1               	movwf	??_Exception_Main
  6765  0472  0861               	movf	??_Exception_Main,w
  6766  0473  00DD               	movwf	setLED@command
  6767  0474  0867               	movf	Exception_Main@error,w
  6768  0475  118A  2537  118A   	fcall	_setLED
  6769                           
  6770                           ;Main_B1.c: 586: if (error == 3) {
  6771  0478  1283               	bcf	3,5	;RP0=0, select bank0
  6772  0479  1303               	bcf	3,6	;RP1=0, select bank0
  6773  047A  0867               	movf	Exception_Main@error,w
  6774  047B  3A03               	xorlw	3
  6775  047C  1D03               	skipz
  6776  047D  2C99               	goto	l4786
  6777                           
  6778                           ;Main_B1.c: 587: char status = getAll_Lights_Line();
  6779  047E  158A  27AC  118A   	fcall	_getAll_Lights_Line
  6780  0481  1283               	bcf	3,5	;RP0=0, select bank0
  6781  0482  1303               	bcf	3,6	;RP1=0, select bank0
  6782  0483  00E1               	movwf	??_Exception_Main
  6783  0484  0861               	movf	??_Exception_Main,w
  6784  0485  00E4               	movwf	Exception_Main@status
  6785                           
  6786                           ;Main_B1.c: 588: if (getLights_Status(status) == 1) {
  6787  0486  0864               	movf	Exception_Main@status,w
  6788  0487  158A  2600  118A   	fcall	_getLights_Status
  6789  048A  3A01               	xorlw	1
  6790  048B  1903               	btfsc	3,2
  6791  048C  2C90               	goto	l4784
  6792  048D  1283               	bcf	3,5	;RP0=0, select bank0
  6793  048E  1303               	bcf	3,6	;RP1=0, select bank0
  6794  048F  0008               	return
  6795  0490                     l4784:	
  6796                           
  6797                           ;Main_B1.c: 589: setLights_Trigger(status, 0);
  6798  0490  1283               	bcf	3,5	;RP0=0, select bank0
  6799  0491  1303               	bcf	3,6	;RP1=0, select bank0
  6800  0492  01DD               	clrf	setLights_Trigger@command
  6801  0493  0864               	movf	Exception_Main@status,w
  6802  0494  158A  26F6         	fcall	_setLights_Trigger
  6803  0496  1283               	bcf	3,5	;RP0=0, select bank0
  6804  0497  1303               	bcf	3,6	;RP1=0, select bank0
  6805  0498  0008               	return
  6806  0499                     l4786:	
  6807                           ;Main_B1.c: 590: }
  6808                           ;Main_B1.c: 591: } else {
  6809                           
  6810                           
  6811                           ;Main_B1.c: 593: for (int i = 0; i < count; i++) {
  6812  0499  1283               	bcf	3,5	;RP0=0, select bank0
  6813  049A  1303               	bcf	3,6	;RP1=0, select bank0
  6814  049B  01E5               	clrf	Exception_Main@i
  6815  049C  01E6               	clrf	Exception_Main@i+1
  6816  049D                     l4794:	
  6817  049D  0866               	movf	Exception_Main@i+1,w
  6818  049E  3A80               	xorlw	128
  6819  049F  00E1               	movwf	??_Exception_Main
  6820  04A0  3080               	movlw	128
  6821  04A1  0261               	subwf	??_Exception_Main,w
  6822  04A2  1D03               	skipz
  6823  04A3  2CA6               	goto	u5845
  6824  04A4  0863               	movf	Exception_Main@count,w
  6825  04A5  0265               	subwf	Exception_Main@i,w
  6826  04A6                     u5845:	
  6827  04A6  1803               	btfsc	3,0
  6828  04A7  2CC3               	goto	u5840
  6829                           
  6830                           ;Main_B1.c: 594: if (getLights_Status(i + 1) == 1) {
  6831  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  6832  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  6833  04AA  0865               	movf	Exception_Main@i,w
  6834  04AB  3E01               	addlw	1
  6835  04AC  158A  2600  118A   	fcall	_getLights_Status
  6836  04AF  3A01               	xorlw	1
  6837  04B0  1D03               	skipz
  6838  04B1  2CBA               	goto	l4792
  6839                           
  6840                           ;Main_B1.c: 595: setLights_Trigger(i + 1, 0);
  6841  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  6842  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  6843  04B4  01DD               	clrf	setLights_Trigger@command
  6844  04B5  0865               	movf	Exception_Main@i,w
  6845  04B6  3E01               	addlw	1
  6846  04B7  158A  26F6  118A   	fcall	_setLights_Trigger
  6847  04BA                     l4792:	
  6848  04BA  3001               	movlw	1
  6849  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  6850  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  6851  04BD  07E5               	addwf	Exception_Main@i,f
  6852  04BE  1803               	skipnc
  6853  04BF  0AE6               	incf	Exception_Main@i+1,f
  6854  04C0  3000               	movlw	0
  6855  04C1  07E6               	addwf	Exception_Main@i+1,f
  6856  04C2  2C9D               	goto	l4794
  6857  04C3                     u5840:	
  6858  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  6859  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  6860  04C5  0008               	return
  6861  04C6                     __end_of_Exception_Main:	
  6862                           
  6863                           	psect	text42
  6864  0EF6                     __ptext42:	
  6865 ;; *************** function _setLights_Trigger *****************
  6866 ;; Defined at:
  6867 ;;		line 233 in file "../src/TriacRelay_B1.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;  lights          1    wreg     unsigned char 
  6870 ;;  command         1    0[BANK0 ] unsigned char 
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;  lights          1    2[BANK0 ] unsigned char 
  6873 ;; Return value:  Size  Location     Type
  6874 ;;		None               void
  6875 ;; Registers used:
  6876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6882 ;;      Params:         0       1       0       0
  6883 ;;      Locals:         0       1       0       0
  6884 ;;      Temps:          0       1       0       0
  6885 ;;      Totals:         0       3       0       0
  6886 ;;Total ram usage:        3 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; Hardware stack levels required when called:    3
  6889 ;; This function calls:
  6890 ;;		_LightsPointSelect
  6891 ;; This function is called by:
  6892 ;;		_Exception_Main
  6893 ;;		_PIR_Main
  6894 ;;		_setLights_SwOff
  6895 ;;		_setMain_Exception
  6896 ;;		_setLights_ErrorClose
  6897 ;; This function uses a non-reentrant model
  6898 ;;
  6899                           
  6900                           
  6901                           ;psect for function _setLights_Trigger
  6902  0EF6                     _setLights_Trigger:	
  6903                           
  6904                           ;incstack = 0
  6905                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6906                           ;setLights_Trigger@lights stored from wreg
  6907  0EF6  1283               	bcf	3,5	;RP0=0, select bank0
  6908  0EF7  1303               	bcf	3,6	;RP1=0, select bank0
  6909  0EF8  00DF               	movwf	setLights_Trigger@lights
  6910                           
  6911                           ;TriacRelay_B1.c: 234: LightsPointSelect(lights);
  6912  0EF9  085F               	movf	setLights_Trigger@lights,w
  6913  0EFA  158A  2634         	fcall	_LightsPointSelect
  6914                           
  6915                           ;TriacRelay_B1.c: 235: Lights->Trigger = 1;
  6916  0EFC  0877               	movf	_Lights,w
  6917  0EFD  0084               	movwf	4
  6918  0EFE  1383               	bcf	3,7	;select IRP bank0
  6919  0EFF  1580               	bsf	0,3
  6920                           
  6921                           ;TriacRelay_B1.c: 236: Lights->Switch = command == 1 ? 1 : 0;
  6922  0F00  1283               	bcf	3,5	;RP0=0, select bank0
  6923  0F01  1303               	bcf	3,6	;RP1=0, select bank0
  6924  0F02  085D               	movf	setLights_Trigger@command,w
  6925  0F03  3A01               	xorlw	1
  6926  0F04  3000               	movlw	0
  6927  0F05  1903               	skipnz
  6928  0F06  3001               	movlw	1
  6929  0F07  00DE               	movwf	??_setLights_Trigger
  6930  0F08  0877               	movf	_Lights,w
  6931  0F09  0084               	movwf	4
  6932  0F0A  0EDE               	swapf	??_setLights_Trigger,f
  6933  0F0B  0800               	movf	0,w
  6934  0F0C  065E               	xorwf	??_setLights_Trigger,w
  6935  0F0D  39EF               	andlw	-17
  6936  0F0E  065E               	xorwf	??_setLights_Trigger,w
  6937  0F0F  0080               	movwf	0
  6938  0F10  0008               	return
  6939  0F11                     __end_of_setLights_Trigger:	
  6940                           
  6941                           	psect	text43
  6942  0537                     __ptext43:	
  6943 ;; *************** function _setLED *****************
  6944 ;; Defined at:
  6945 ;;		line 76 in file "../src/LED_B1.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;  led             1    wreg     unsigned char 
  6948 ;;  command         1    0[BANK0 ] unsigned char 
  6949 ;; Auto vars:     Size  Location     Type
  6950 ;;  led             1    1[BANK0 ] unsigned char 
  6951 ;; Return value:  Size  Location     Type
  6952 ;;		None               void
  6953 ;; Registers used:
  6954 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6955 ;; Tracked objects:
  6956 ;;		On entry : 0/0
  6957 ;;		On exit  : 0/0
  6958 ;;		Unchanged: 0/0
  6959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6960 ;;      Params:         0       1       0       0
  6961 ;;      Locals:         0       1       0       0
  6962 ;;      Temps:          0       0       0       0
  6963 ;;      Totals:         0       2       0       0
  6964 ;;Total ram usage:        2 bytes
  6965 ;; Hardware stack levels used:    1
  6966 ;; Hardware stack levels required when called:    3
  6967 ;; This function calls:
  6968 ;;		_LedPointSelect
  6969 ;; This function is called by:
  6970 ;;		_setLED_Initialization
  6971 ;;		_setPIRLED_Main
  6972 ;;		_Exception_Main
  6973 ;;		_setSw_Main
  6974 ;;		_setLights
  6975 ;;		_setMain_Exception
  6976 ;; This function uses a non-reentrant model
  6977 ;;
  6978                           
  6979                           
  6980                           ;psect for function _setLED
  6981  0537                     _setLED:	
  6982                           
  6983                           ;incstack = 0
  6984                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6985                           ;setLED@led stored from wreg
  6986  0537  1283               	bcf	3,5	;RP0=0, select bank0
  6987  0538  1303               	bcf	3,6	;RP1=0, select bank0
  6988  0539  00DE               	movwf	setLED@led
  6989                           
  6990                           ;LED_B1.c: 77: LedPointSelect(led);
  6991  053A  085E               	movf	setLED@led,w
  6992  053B  158A  26DC  118A   	fcall	_LedPointSelect
  6993                           
  6994                           ;LED_B1.c: 78: if (command == 0) {
  6995  053E  1283               	bcf	3,5	;RP0=0, select bank0
  6996  053F  1303               	bcf	3,6	;RP1=0, select bank0
  6997  0540  08DD               	movf	setLED@command,f
  6998  0541  1D03               	skipz
  6999  0542  2D50               	goto	l4074
  7000                           
  7001                           ;LED_B1.c: 80: if (led == 1) {
  7002  0543  085E               	movf	setLED@led,w
  7003  0544  3A01               	xorlw	1
  7004  0545  1D03               	skipz
  7005  0546  2D48               	goto	l4066
  7006                           
  7007                           ;LED_B1.c: 84: RC7 = 1;
  7008  0547  1787               	bsf	7,7	;volatile
  7009  0548                     l4066:	
  7010                           
  7011                           ;LED_B1.c: 86: }
  7012                           ;LED_B1.c: 89: if (led == 2) {
  7013  0548  085E               	movf	setLED@led,w
  7014  0549  3A02               	xorlw	2
  7015  054A  1903               	btfsc	3,2
  7016                           
  7017                           ;LED_B1.c: 93: RC6 = 1;
  7018  054B  1707               	bsf	7,6	;volatile
  7019                           
  7020                           ;LED_B1.c: 95: }
  7021                           ;LED_B1.c: 107: if (led == 99) {
  7022  054C  085E               	movf	setLED@led,w
  7023  054D  3A63               	xorlw	99
  7024  054E  1903               	btfsc	3,2
  7025                           
  7026                           ;LED_B1.c: 111: RC1 = 1;
  7027  054F  1487               	bsf	7,1	;volatile
  7028  0550                     l4074:	
  7029                           
  7030                           ;LED_B1.c: 113: }
  7031                           ;LED_B1.c: 115: }
  7032                           ;LED_B1.c: 116: if (command == 1) {
  7033  0550  085D               	movf	setLED@command,w
  7034  0551  3A01               	xorlw	1
  7035  0552  1D03               	skipz
  7036  0553  2D61               	goto	l4088
  7037                           
  7038                           ;LED_B1.c: 118: if (led == 1) {
  7039  0554  085E               	movf	setLED@led,w
  7040  0555  3A01               	xorlw	1
  7041  0556  1D03               	skipz
  7042  0557  2D59               	goto	l4080
  7043                           
  7044                           ;LED_B1.c: 122: RC7 = 0;
  7045  0558  1387               	bcf	7,7	;volatile
  7046  0559                     l4080:	
  7047                           
  7048                           ;LED_B1.c: 124: }
  7049                           ;LED_B1.c: 127: if (led == 2) {
  7050  0559  085E               	movf	setLED@led,w
  7051  055A  3A02               	xorlw	2
  7052  055B  1903               	btfsc	3,2
  7053                           
  7054                           ;LED_B1.c: 131: RC6 = 0;
  7055  055C  1307               	bcf	7,6	;volatile
  7056                           
  7057                           ;LED_B1.c: 133: }
  7058                           ;LED_B1.c: 145: if (led == 99) {
  7059  055D  085E               	movf	setLED@led,w
  7060  055E  3A63               	xorlw	99
  7061  055F  1903               	btfsc	3,2
  7062                           
  7063                           ;LED_B1.c: 149: RC1 = 0;
  7064  0560  1087               	bcf	7,1	;volatile
  7065  0561                     l4088:	
  7066                           
  7067                           ;LED_B1.c: 151: }
  7068                           ;LED_B1.c: 153: }
  7069                           ;LED_B1.c: 154: if (command == 10) {
  7070  0561  085D               	movf	setLED@command,w
  7071  0562  3A0A               	xorlw	10
  7072  0563  1D03               	skipz
  7073  0564  2D7C               	goto	l4106
  7074                           
  7075                           ;LED_B1.c: 155: LED->GO = 0;
  7076  0565  0876               	movf	_LED,w
  7077  0566  0084               	movwf	4
  7078  0567  1383               	bcf	3,7	;select IRP bank0
  7079  0568  1080               	bcf	0,1
  7080                           
  7081                           ;LED_B1.c: 156: LED->Time = 0;
  7082  0569  0A76               	incf	_LED,w
  7083  056A  0084               	movwf	4
  7084  056B  0180               	clrf	0
  7085  056C  0A84               	incf	4,f
  7086  056D  0180               	clrf	0
  7087                           
  7088                           ;LED_B1.c: 158: if (led == 1) {
  7089  056E  085E               	movf	setLED@led,w
  7090  056F  3A01               	xorlw	1
  7091  0570  1D03               	skipz
  7092  0571  2D74               	goto	l4098
  7093                           
  7094                           ;LED_B1.c: 162: RC7 = 1;
  7095  0572  1787               	bsf	7,7	;volatile
  7096                           
  7097                           ;LED_B1.c: 164: }
  7098  0573  2D78               	goto	l4102
  7099  0574                     l4098:	
  7100                           
  7101                           ;LED_B1.c: 167: else if (led == 2) {
  7102  0574  085E               	movf	setLED@led,w
  7103  0575  3A02               	xorlw	2
  7104  0576  1903               	btfsc	3,2
  7105                           
  7106                           ;LED_B1.c: 171: RC6 = 1;
  7107  0577  1707               	bsf	7,6	;volatile
  7108  0578                     l4102:	
  7109                           
  7110                           ;LED_B1.c: 173: }
  7111                           ;LED_B1.c: 185: if (led == 99) {
  7112  0578  085E               	movf	setLED@led,w
  7113  0579  3A63               	xorlw	99
  7114  057A  1903               	btfsc	3,2
  7115                           
  7116                           ;LED_B1.c: 189: RC1 = 1;
  7117  057B  1487               	bsf	7,1	;volatile
  7118  057C                     l4106:	
  7119                           
  7120                           ;LED_B1.c: 191: }
  7121                           ;LED_B1.c: 193: }
  7122                           ;LED_B1.c: 194: if (command == 11) {
  7123  057C  085D               	movf	setLED@command,w
  7124  057D  3A0B               	xorlw	11
  7125  057E  1D03               	skipz
  7126  057F  2D84               	goto	l4110
  7127                           
  7128                           ;LED_B1.c: 195: LED->GO = 1;
  7129  0580  0876               	movf	_LED,w
  7130  0581  0084               	movwf	4
  7131  0582  1383               	bcf	3,7	;select IRP bank0
  7132  0583  1480               	bsf	0,1
  7133  0584                     l4110:	
  7134                           
  7135                           ;LED_B1.c: 196: }
  7136                           ;LED_B1.c: 198: if (command == 111) {
  7137  0584  085D               	movf	setLED@command,w
  7138  0585  3A6F               	xorlw	111
  7139  0586  1D03               	skipz
  7140  0587  2DA2               	goto	l4136
  7141                           
  7142                           ;LED_B1.c: 199: PIRLED.Count = 0;
  7143  0588  01B8               	clrf	_PIRLED+1
  7144                           
  7145                           ;LED_B1.c: 200: PIRLED.Time = 0;
  7146  0589  01B9               	clrf	_PIRLED+2
  7147  058A  01BA               	clrf	_PIRLED+3
  7148                           
  7149                           ;LED_B1.c: 201: PIRLED.status = 0;
  7150  058B  1237               	bcf	_PIRLED,4
  7151                           
  7152                           ;LED_B1.c: 202: PIRLED.GO = 1;
  7153  058C  1437               	bsf	_PIRLED,0
  7154                           
  7155                           ;LED_B1.c: 203: PIRLED.GO1 = 0;
  7156  058D  10B7               	bcf	_PIRLED,1
  7157                           
  7158                           ;LED_B1.c: 204: PIRLED.GO2 = 0;
  7159  058E  1137               	bcf	_PIRLED,2
  7160                           
  7161                           ;LED_B1.c: 205: PIRLED.GO3 = 0;
  7162  058F  11B7               	bcf	_PIRLED,3
  7163                           
  7164                           ;LED_B1.c: 206: if (led == 1) {
  7165  0590  085E               	movf	setLED@led,w
  7166  0591  3A01               	xorlw	1
  7167  0592  1D03               	skipz
  7168  0593  2D96               	goto	l4128
  7169                           
  7170                           ;LED_B1.c: 207: PIRLED.GO1 = 1;
  7171  0594  14B7               	bsf	_PIRLED,1
  7172                           
  7173                           ;LED_B1.c: 208: } else if (led == 2) {
  7174  0595  0008               	return
  7175  0596                     l4128:	
  7176  0596  085E               	movf	setLED@led,w
  7177  0597  3A02               	xorlw	2
  7178  0598  1D03               	skipz
  7179  0599  2D9C               	goto	l4132
  7180                           
  7181                           ;LED_B1.c: 209: PIRLED.GO2 = 1;
  7182  059A  1537               	bsf	_PIRLED,2
  7183                           
  7184                           ;LED_B1.c: 210: } else if (led == 3) {
  7185  059B  0008               	return
  7186  059C                     l4132:	
  7187  059C  085E               	movf	setLED@led,w
  7188  059D  3A03               	xorlw	3
  7189  059E  1D03               	skipz
  7190  059F  0008               	return
  7191                           
  7192                           ;LED_B1.c: 211: PIRLED.GO3 = 1;
  7193  05A0  15B7               	bsf	_PIRLED,3
  7194                           
  7195                           ;LED_B1.c: 212: }
  7196                           ;LED_B1.c: 213: } else if (command == 110) {
  7197  05A1  0008               	return
  7198  05A2                     l4136:	
  7199  05A2  085D               	movf	setLED@command,w
  7200  05A3  3A6E               	xorlw	110
  7201  05A4  1D03               	skipz
  7202  05A5  0008               	return
  7203                           
  7204                           ;LED_B1.c: 214: PIRLED.GO = 0;
  7205  05A6  1037               	bcf	_PIRLED,0
  7206  05A7  0008               	return
  7207  05A8                     __end_of_setLED:	
  7208                           
  7209                           	psect	text44
  7210  0EDC                     __ptext44:	
  7211 ;; *************** function _LedPointSelect *****************
  7212 ;; Defined at:
  7213 ;;		line 7 in file "../src/LED_B1.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;  led             1    wreg     unsigned char 
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;  led             1    5[COMMON] unsigned char 
  7218 ;; Return value:  Size  Location     Type
  7219 ;;		None               void
  7220 ;; Registers used:
  7221 ;;		wreg
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7227 ;;      Params:         0       0       0       0
  7228 ;;      Locals:         1       0       0       0
  7229 ;;      Temps:          1       0       0       0
  7230 ;;      Totals:         2       0       0       0
  7231 ;;Total ram usage:        2 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    2
  7234 ;; This function calls:
  7235 ;;		Nothing
  7236 ;; This function is called by:
  7237 ;;		_setLED_Initialization
  7238 ;;		_setLED
  7239 ;;		_setLED_Main
  7240 ;; This function uses a non-reentrant model
  7241 ;;
  7242                           
  7243                           
  7244                           ;psect for function _LedPointSelect
  7245  0EDC                     _LedPointSelect:	
  7246                           
  7247                           ;incstack = 0
  7248                           ; Regs used in _LedPointSelect: [wreg]
  7249                           ;LedPointSelect@led stored from wreg
  7250  0EDC  00F5               	movwf	LedPointSelect@led
  7251                           
  7252                           ;LED_B1.c: 9: if (led == 1) {
  7253  0EDD  0875               	movf	LedPointSelect@led,w
  7254  0EDE  3A01               	xorlw	1
  7255  0EDF  1D03               	skipz
  7256  0EE0  2EE5               	goto	l325
  7257                           
  7258                           ;LED_B1.c: 10: LED = &VarLED1;
  7259  0EE1  3055               	movlw	_VarLED1& (0+255)
  7260  0EE2  00F4               	movwf	??_LedPointSelect
  7261  0EE3  0874               	movf	??_LedPointSelect,w
  7262  0EE4  00F6               	movwf	_LED
  7263  0EE5                     l325:	
  7264                           
  7265                           ;LED_B1.c: 11: }
  7266                           ;LED_B1.c: 14: if (led == 2) {
  7267  0EE5  0875               	movf	LedPointSelect@led,w
  7268  0EE6  3A02               	xorlw	2
  7269  0EE7  1D03               	skipz
  7270  0EE8  2EED               	goto	l326
  7271                           
  7272                           ;LED_B1.c: 15: LED = &VarLED2;
  7273  0EE9  3059               	movlw	_VarLED2& (0+255)
  7274  0EEA  00F4               	movwf	??_LedPointSelect
  7275  0EEB  0874               	movf	??_LedPointSelect,w
  7276  0EEC  00F6               	movwf	_LED
  7277  0EED                     l326:	
  7278                           
  7279                           ;LED_B1.c: 16: }
  7280                           ;LED_B1.c: 24: if (led == 99) {
  7281  0EED  0875               	movf	LedPointSelect@led,w
  7282  0EEE  3A63               	xorlw	99
  7283  0EEF  1D03               	skipz
  7284  0EF0  0008               	return
  7285                           
  7286                           ;LED_B1.c: 25: LED = &VarErrLED;
  7287  0EF1  3051               	movlw	_VarErrLED& (0+255)
  7288  0EF2  00F4               	movwf	??_LedPointSelect
  7289  0EF3  0874               	movf	??_LedPointSelect,w
  7290  0EF4  00F6               	movwf	_LED
  7291  0EF5  0008               	return
  7292  0EF6                     __end_of_LedPointSelect:	
  7293                           
  7294                           	psect	text45
  7295  0D6B                     __ptext45:	
  7296 ;; *************** function _getMain_All_Error_Status *****************
  7297 ;; Defined at:
  7298 ;;		line 424 in file "../src/Main_B1.c"
  7299 ;; Parameters:    Size  Location     Type
  7300 ;;  command         1    wreg     unsigned char 
  7301 ;; Auto vars:     Size  Location     Type
  7302 ;;  command         1    0[COMMON] unsigned char 
  7303 ;;  status          1    4[COMMON] unsigned char 
  7304 ;; Return value:  Size  Location     Type
  7305 ;;                  1    wreg      unsigned char 
  7306 ;; Registers used:
  7307 ;;		wreg, status,2
  7308 ;; Tracked objects:
  7309 ;;		On entry : 0/0
  7310 ;;		On exit  : 0/0
  7311 ;;		Unchanged: 0/0
  7312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7313 ;;      Params:         0       0       0       0
  7314 ;;      Locals:         1       0       0       0
  7315 ;;      Temps:          0       0       0       0
  7316 ;;      Totals:         1       0       0       0
  7317 ;;Total ram usage:        1 bytes
  7318 ;; Hardware stack levels used:    1
  7319 ;; Hardware stack levels required when called:    2
  7320 ;; This function calls:
  7321 ;;		Nothing
  7322 ;; This function is called by:
  7323 ;;		_Exception_Main
  7324 ;;		_PIR_Main
  7325 ;;		_setSw_Main
  7326 ;; This function uses a non-reentrant model
  7327 ;;
  7328                           
  7329                           
  7330                           ;psect for function _getMain_All_Error_Status
  7331  0D6B                     _getMain_All_Error_Status:	
  7332                           
  7333                           ;Main_B1.c: 425: char status = 0;
  7334                           
  7335                           ;incstack = 0
  7336                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2]
  7337  0D6B  01F4               	clrf	getMain_All_Error_Status@status
  7338                           
  7339                           ;Main_B1.c: 461: return status;
  7340  0D6C  0874               	movf	getMain_All_Error_Status@status,w
  7341  0D6D  0008               	return
  7342  0D6E                     __end_of_getMain_All_Error_Status:	
  7343                           
  7344                           	psect	text46
  7345  0E00                     __ptext46:	
  7346 ;; *************** function _getLights_Status *****************
  7347 ;; Defined at:
  7348 ;;		line 226 in file "../src/TriacRelay_B1.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;  lights          1    wreg     unsigned char 
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;  lights          1    0[BANK0 ] unsigned char 
  7353 ;;  status          1    1[BANK0 ] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      unsigned char 
  7356 ;; Registers used:
  7357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7363 ;;      Params:         0       0       0       0
  7364 ;;      Locals:         0       2       0       0
  7365 ;;      Temps:          0       0       0       0
  7366 ;;      Totals:         0       2       0       0
  7367 ;;Total ram usage:        2 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    3
  7370 ;; This function calls:
  7371 ;;		_LightsPointSelect
  7372 ;; This function is called by:
  7373 ;;		_Exception_Main
  7374 ;;		_PIR_Main
  7375 ;;		_setLights_SwOn
  7376 ;;		_setMain_Exception
  7377 ;;		_setLights_ErrorClose
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           
  7382                           ;psect for function _getLights_Status
  7383  0E00                     _getLights_Status:	
  7384                           
  7385                           ;incstack = 0
  7386                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7387                           ;getLights_Status@lights stored from wreg
  7388  0E00  1283               	bcf	3,5	;RP0=0, select bank0
  7389  0E01  1303               	bcf	3,6	;RP1=0, select bank0
  7390  0E02  00DD               	movwf	getLights_Status@lights
  7391                           
  7392                           ;TriacRelay_B1.c: 227: LightsPointSelect(lights);
  7393  0E03  085D               	movf	getLights_Status@lights,w
  7394  0E04  158A  2634         	fcall	_LightsPointSelect
  7395                           
  7396                           ;TriacRelay_B1.c: 228: char status = Lights->Status == 1 ? 1 : 0;
  7397  0E06  0877               	movf	_Lights,w
  7398  0E07  0084               	movwf	4
  7399  0E08  3000               	movlw	0
  7400  0E09  1383               	bcf	3,7	;select IRP bank0
  7401  0E0A  1900               	btfsc	0,2
  7402  0E0B  3001               	movlw	1
  7403  0E0C  1283               	bcf	3,5	;RP0=0, select bank0
  7404  0E0D  1303               	bcf	3,6	;RP1=0, select bank0
  7405  0E0E  00DE               	movwf	getLights_Status@status
  7406                           
  7407                           ;TriacRelay_B1.c: 229: return status;
  7408  0E0F  085E               	movf	getLights_Status@status,w
  7409  0E10  0008               	return
  7410  0E11                     __end_of_getLights_Status:	
  7411                           
  7412                           	psect	text47
  7413  0FAC                     __ptext47:	
  7414 ;; *************** function _getAll_Lights_Line *****************
  7415 ;; Defined at:
  7416 ;;		line 265 in file "../src/TriacRelay_B1.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;		None
  7419 ;; Auto vars:     Size  Location     Type
  7420 ;;  line            1    3[BANK0 ] unsigned char 
  7421 ;; Return value:  Size  Location     Type
  7422 ;;                  1    wreg      unsigned char 
  7423 ;; Registers used:
  7424 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7430 ;;      Params:         0       0       0       0
  7431 ;;      Locals:         0       3       0       0
  7432 ;;      Temps:          0       1       0       0
  7433 ;;      Totals:         0       4       0       0
  7434 ;;Total ram usage:        4 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    3
  7437 ;; This function calls:
  7438 ;;		_LightsPointSelect
  7439 ;; This function is called by:
  7440 ;;		_Exception_Main
  7441 ;;		_setMain_Exception
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445                           
  7446                           ;psect for function _getAll_Lights_Line
  7447  0FAC                     _getAll_Lights_Line:	
  7448                           
  7449                           ;TriacRelay_B1.c: 266: char line = 0;
  7450                           
  7451                           ;incstack = 0
  7452                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7453  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  7454  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  7455  0FAE  01E0               	clrf	getAll_Lights_Line@line
  7456                           
  7457                           ;TriacRelay_B1.c: 268: LightsPointSelect(1);
  7458  0FAF  3001               	movlw	1
  7459  0FB0  158A  2634  158A   	fcall	_LightsPointSelect
  7460                           
  7461                           ;TriacRelay_B1.c: 269: line = Lights->Line == 1 ? 1 : 0;
  7462  0FB3  0A77               	incf	_Lights,w
  7463  0FB4  0084               	movwf	4
  7464  0FB5  3000               	movlw	0
  7465  0FB6  1383               	bcf	3,7	;select IRP bank0
  7466  0FB7  1800               	btfsc	0,0
  7467  0FB8  3001               	movlw	1
  7468  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  7469  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  7470  0FBB  00E0               	movwf	getAll_Lights_Line@line
  7471                           
  7472                           ;TriacRelay_B1.c: 272: LightsPointSelect(2);
  7473  0FBC  3002               	movlw	2
  7474  0FBD  158A  2634  158A   	fcall	_LightsPointSelect
  7475                           
  7476                           ;TriacRelay_B1.c: 273: line = Lights->Line == 1 ? 2 : 0;
  7477  0FC0  0A77               	incf	_Lights,w
  7478  0FC1  0084               	movwf	4
  7479  0FC2  1383               	bcf	3,7	;select IRP bank0
  7480  0FC3  1800               	btfsc	0,0
  7481  0FC4  2FCA               	goto	l4338
  7482  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  7483  0FC6  1303               	bcf	3,6	;RP1=0, select bank0
  7484  0FC7  01DE               	clrf	_getAll_Lights_Line$4308
  7485  0FC8  01DF               	clrf	_getAll_Lights_Line$4308+1
  7486  0FC9  2FD0               	goto	l1334
  7487  0FCA                     l4338:	
  7488  0FCA  3002               	movlw	2
  7489  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  7490  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  7491  0FCD  00DE               	movwf	_getAll_Lights_Line$4308
  7492  0FCE  3000               	movlw	0
  7493  0FCF  00DF               	movwf	_getAll_Lights_Line$4308+1
  7494  0FD0                     l1334:	
  7495  0FD0  085E               	movf	_getAll_Lights_Line$4308,w
  7496  0FD1  00DD               	movwf	??_getAll_Lights_Line
  7497  0FD2  085D               	movf	??_getAll_Lights_Line,w
  7498  0FD3  00E0               	movwf	getAll_Lights_Line@line
  7499                           
  7500                           ;TriacRelay_B1.c: 279: return line;
  7501  0FD4  0860               	movf	getAll_Lights_Line@line,w
  7502  0FD5  0008               	return
  7503  0FD6                     __end_of_getAll_Lights_Line:	
  7504                           
  7505                           	psect	text48
  7506  0E34                     __ptext48:	
  7507 ;; *************** function _LightsPointSelect *****************
  7508 ;; Defined at:
  7509 ;;		line 10 in file "../src/TriacRelay_B1.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;  lights          1    wreg     unsigned char 
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;  lights          1    5[COMMON] unsigned char 
  7514 ;; Return value:  Size  Location     Type
  7515 ;;		None               void
  7516 ;; Registers used:
  7517 ;;		wreg
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7523 ;;      Params:         0       0       0       0
  7524 ;;      Locals:         1       0       0       0
  7525 ;;      Temps:          1       0       0       0
  7526 ;;      Totals:         2       0       0       0
  7527 ;;Total ram usage:        2 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; Hardware stack levels required when called:    2
  7530 ;; This function calls:
  7531 ;;		Nothing
  7532 ;; This function is called by:
  7533 ;;		_setLights_Initialization
  7534 ;;		_setLights_Main
  7535 ;;		_Lights_Control
  7536 ;;		_getLights_Status
  7537 ;;		_setLights_Trigger
  7538 ;;		_getAll_Lights_Line
  7539 ;;		_setLights_SwOn
  7540 ;;		_setLights_SwOff
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           
  7545                           ;psect for function _LightsPointSelect
  7546  0E34                     _LightsPointSelect:	
  7547                           
  7548                           ;incstack = 0
  7549                           ; Regs used in _LightsPointSelect: [wreg]
  7550                           ;LightsPointSelect@lights stored from wreg
  7551  0E34  00F5               	movwf	LightsPointSelect@lights
  7552                           
  7553                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  7554  0E35  0875               	movf	LightsPointSelect@lights,w
  7555  0E36  3A01               	xorlw	1
  7556  0E37  1D03               	skipz
  7557  0E38  2E3E               	goto	l4054
  7558                           
  7559                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  7560  0E39  3043               	movlw	_Lights1& (0+255)
  7561  0E3A  00F4               	movwf	??_LightsPointSelect
  7562  0E3B  0874               	movf	??_LightsPointSelect,w
  7563  0E3C  00F7               	movwf	_Lights
  7564                           
  7565                           ;TriacRelay_B1.c: 15: }
  7566  0E3D  0008               	return
  7567  0E3E                     l4054:	
  7568                           
  7569                           ;TriacRelay_B1.c: 19: else if (lights == 2) {
  7570  0E3E  0875               	movf	LightsPointSelect@lights,w
  7571  0E3F  3A02               	xorlw	2
  7572  0E40  1D03               	skipz
  7573  0E41  0008               	return
  7574                           
  7575                           ;TriacRelay_B1.c: 20: Lights = &Lights2;
  7576  0E42  304A               	movlw	_Lights2& (0+255)
  7577  0E43  00F4               	movwf	??_LightsPointSelect
  7578  0E44  0874               	movf	??_LightsPointSelect,w
  7579  0E45  00F7               	movwf	_Lights
  7580  0E46  0008               	return
  7581  0E47                     __end_of_LightsPointSelect:	
  7582                           
  7583                           	psect	text49
  7584  0795                     __ptext49:	
  7585 ;; *************** function _CDS_Main *****************
  7586 ;; Defined at:
  7587 ;;		line 11 in file "../src/CDS_B1.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;		None
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;		None
  7592 ;; Return value:  Size  Location     Type
  7593 ;;		None               void
  7594 ;; Registers used:
  7595 ;;		wreg, status,2, status,0
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7601 ;;      Params:         0       0       0       0
  7602 ;;      Locals:         0       0       0       0
  7603 ;;      Temps:          0       3       0       0
  7604 ;;      Totals:         0       3       0       0
  7605 ;;Total ram usage:        3 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    2
  7608 ;; This function calls:
  7609 ;;		Nothing
  7610 ;; This function is called by:
  7611 ;;		_main
  7612 ;; This function uses a non-reentrant model
  7613 ;;
  7614                           
  7615                           
  7616                           ;psect for function _CDS_Main
  7617  0795                     _CDS_Main:	
  7618                           
  7619                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  7620                           
  7621                           ;incstack = 0
  7622                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  7623  0795  1283               	bcf	3,5	;RP0=0, select bank0
  7624  0796  1303               	bcf	3,6	;RP1=0, select bank0
  7625  0797  1C32               	btfss	__CDS,0
  7626  0798  0008               	return
  7627                           
  7628                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  7629  0799  18B2               	btfsc	__CDS,1
  7630  079A  2FA8               	goto	l168
  7631                           
  7632                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  7633  079B  19B2               	btfsc	__CDS,3
  7634  079C  0008               	return
  7635                           
  7636                           ;CDS_B1.c: 16: _CDS.Time++;
  7637  079D  3001               	movlw	1
  7638  079E  00DD               	movwf	??_CDS_Main
  7639  079F  085D               	movf	??_CDS_Main,w
  7640  07A0  07B3               	addwf	__CDS+1,f
  7641                           
  7642                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
  7643  07A1  3005               	movlw	5
  7644  07A2  0233               	subwf	__CDS+1,w
  7645  07A3  1C03               	skipc
  7646  07A4  0008               	return
  7647                           
  7648                           ;CDS_B1.c: 18: {
  7649                           ;CDS_B1.c: 19: _CDS.Time = 0;
  7650  07A5  01B3               	clrf	__CDS+1
  7651                           
  7652                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  7653  07A6  15B2               	bsf	__CDS,3
  7654                           
  7655                           ;CDS_B1.c: 21: }
  7656                           ;CDS_B1.c: 22: }
  7657                           ;CDS_B1.c: 23: } else {
  7658  07A7  0008               	return
  7659  07A8                     l168:	
  7660                           
  7661                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  7662  07A8  1CB2               	btfss	__CDS,1
  7663  07A9  0008               	return
  7664                           
  7665                           ;CDS_B1.c: 25: _CDS.GO = 0;
  7666  07AA  10B2               	bcf	__CDS,1
  7667                           
  7668                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  7669  07AB  1A32               	btfsc	__CDS,4
  7670  07AC  2FB3               	goto	l4498
  7671                           
  7672                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  7673  07AD  0834               	movf	__CDS+2,w
  7674  07AE  0235               	subwf	__CDS+3,w
  7675  07AF  1C03               	skipc
  7676  07B0  0008               	return
  7677                           
  7678                           ;CDS_B1.c: 28: _CDS.Status = 1;
  7679  07B1  1632               	bsf	__CDS,4
  7680                           
  7681                           ;CDS_B1.c: 29: }
  7682                           ;CDS_B1.c: 30: } else {
  7683  07B2  0008               	return
  7684  07B3                     l4498:	
  7685                           
  7686                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  7687  07B3  0834               	movf	__CDS+2,w
  7688  07B4  3E9C               	addlw	156
  7689  07B5  00DD               	movwf	??_CDS_Main
  7690  07B6  30FF               	movlw	255
  7691  07B7  1803               	skipnc
  7692  07B8  3000               	movlw	0
  7693  07B9  00DE               	movwf	??_CDS_Main+1
  7694  07BA  085E               	movf	??_CDS_Main+1,w
  7695  07BB  3A80               	xorlw	128
  7696  07BC  00DF               	movwf	??_CDS_Main+2
  7697  07BD  3080               	movlw	128
  7698  07BE  025F               	subwf	??_CDS_Main+2,w
  7699  07BF  1D03               	skipz
  7700  07C0  2FC3               	goto	u5255
  7701  07C1  0835               	movf	__CDS+3,w
  7702  07C2  025D               	subwf	??_CDS_Main,w
  7703  07C3                     u5255:	
  7704  07C3  1C03               	skipc
  7705  07C4  0008               	return
  7706                           
  7707                           ;CDS_B1.c: 32: _CDS.Status = 0;
  7708  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  7709  07C6  1303               	bcf	3,6	;RP1=0, select bank0
  7710  07C7  1232               	bcf	__CDS,4
  7711  07C8  0008               	return
  7712  07C9                     __end_of_CDS_Main:	
  7713                           
  7714                           	psect	text50
  7715  0D75                     __ptext50:	
  7716 ;; *************** function _CDS_Initialization *****************
  7717 ;; Defined at:
  7718 ;;		line 7 in file "../src/CDS_B1.c"
  7719 ;; Parameters:    Size  Location     Type
  7720 ;;		None
  7721 ;; Auto vars:     Size  Location     Type
  7722 ;;		None
  7723 ;; Return value:  Size  Location     Type
  7724 ;;		None               void
  7725 ;; Registers used:
  7726 ;;		None
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7732 ;;      Params:         0       0       0       0
  7733 ;;      Locals:         0       0       0       0
  7734 ;;      Temps:          0       0       0       0
  7735 ;;      Totals:         0       0       0       0
  7736 ;;Total ram usage:        0 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; Hardware stack levels required when called:    2
  7739 ;; This function calls:
  7740 ;;		Nothing
  7741 ;; This function is called by:
  7742 ;;		_main
  7743 ;; This function uses a non-reentrant model
  7744 ;;
  7745                           
  7746                           
  7747                           ;psect for function _CDS_Initialization
  7748  0D75                     _CDS_Initialization:	
  7749                           
  7750                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  7751                           
  7752                           ;incstack = 0
  7753                           ; Regs used in _CDS_Initialization: []
  7754  0D75  1283               	bcf	3,5	;RP0=0, select bank0
  7755  0D76  1303               	bcf	3,6	;RP1=0, select bank0
  7756  0D77  1432               	bsf	__CDS,0
  7757  0D78  0008               	return
  7758  0D79                     __end_of_CDS_Initialization:	
  7759                           
  7760                           	psect	text51
  7761  0711                     __ptext51:	
  7762 ;; *************** function _Buzzer_Main *****************
  7763 ;; Defined at:
  7764 ;;		line 46 in file "../src/Buzzer_B1.c"
  7765 ;; Parameters:    Size  Location     Type
  7766 ;;		None
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;		None
  7769 ;; Return value:  Size  Location     Type
  7770 ;;		None               void
  7771 ;; Registers used:
  7772 ;;		wreg, status,2, status,0
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7778 ;;      Params:         0       0       0       0
  7779 ;;      Locals:         0       0       0       0
  7780 ;;      Temps:          1       0       0       0
  7781 ;;      Totals:         1       0       0       0
  7782 ;;Total ram usage:        1 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    2
  7785 ;; This function calls:
  7786 ;;		Nothing
  7787 ;; This function is called by:
  7788 ;;		_main
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           
  7793                           ;psect for function _Buzzer_Main
  7794  0711                     _Buzzer_Main:	
  7795                           
  7796                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
  7797                           
  7798                           ;incstack = 0
  7799                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
  7800  0711  1283               	bcf	3,5	;RP0=0, select bank0
  7801  0712  1303               	bcf	3,6	;RP1=0, select bank0
  7802  0713  1CA0               	btfss	_Buz1,1
  7803  0714  0008               	return
  7804                           
  7805                           ;Buzzer_B1.c: 48: Buz1.Counter++;
  7806  0715  3001               	movlw	1
  7807  0716  07A1               	addwf	_Buz1+1,f
  7808  0717  1803               	skipnc
  7809  0718  0AA2               	incf	_Buz1+2,f
  7810  0719  3000               	movlw	0
  7811  071A  07A2               	addwf	_Buz1+2,f
  7812                           
  7813                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
  7814  071B  0827               	movf	_Buz1+7,w
  7815  071C  0222               	subwf	_Buz1+2,w
  7816  071D  1D03               	skipz
  7817  071E  2F21               	goto	u3225
  7818  071F  0826               	movf	_Buz1+6,w
  7819  0720  0221               	subwf	_Buz1+1,w
  7820  0721                     u3225:	
  7821  0721  1C03               	skipc
  7822  0722  0008               	return
  7823                           
  7824                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
  7825  0723  01A1               	clrf	_Buz1+1
  7826  0724  01A2               	clrf	_Buz1+2
  7827                           
  7828                           ;Buzzer_B1.c: 51: Buz1.Switch = (RC0 == 1) ? 1 : 0;
  7829  0725  12A0               	bcf	_Buz1,5
  7830  0726  1807               	btfsc	7,0	;volatile
  7831  0727  16A0               	bsf	_Buz1,5
  7832                           
  7833                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
  7834  0728  1283               	bcf	3,5	;RP0=0, select bank0
  7835  0729  1303               	bcf	3,6	;RP1=0, select bank0
  7836  072A  1AA0               	btfsc	_Buz1,5
  7837  072B  2F50               	goto	l64
  7838                           
  7839                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
  7840  072C  08A3               	movf	_Buz1+3,f
  7841  072D  1D03               	skipz
  7842  072E  2F4D               	goto	l65
  7843                           
  7844                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
  7845  072F  1DA0               	btfss	_Buz1,3
  7846  0730  2F3D               	goto	l66
  7847                           
  7848                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
  7849  0731  11A0               	bcf	_Buz1,3
  7850                           
  7851                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
  7852  0732  0824               	movf	_Buz1+4,w
  7853  0733  00F4               	movwf	??_Buzzer_Main
  7854  0734  0874               	movf	??_Buzzer_Main,w
  7855  0735  00A3               	movwf	_Buz1+3
  7856                           
  7857                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
  7858  0736  0829               	movf	_Buz1+9,w
  7859  0737  01A7               	clrf	_Buz1+7
  7860  0738  07A7               	addwf	_Buz1+7,f
  7861  0739  0828               	movf	_Buz1+8,w
  7862  073A  01A6               	clrf	_Buz1+6
  7863  073B  07A6               	addwf	_Buz1+6,f
  7864                           
  7865                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
  7866  073C  0008               	return
  7867  073D                     l66:	
  7868  073D  1E20               	btfss	_Buz1,4
  7869  073E  2F4B               	goto	l68
  7870                           
  7871                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
  7872  073F  1220               	bcf	_Buz1,4
  7873                           
  7874                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
  7875  0740  0825               	movf	_Buz1+5,w
  7876  0741  00F4               	movwf	??_Buzzer_Main
  7877  0742  0874               	movf	??_Buzzer_Main,w
  7878  0743  00A3               	movwf	_Buz1+3
  7879                           
  7880                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
  7881  0744  082B               	movf	_Buz1+11,w
  7882  0745  01A7               	clrf	_Buz1+7
  7883  0746  07A7               	addwf	_Buz1+7,f
  7884  0747  082A               	movf	_Buz1+10,w
  7885  0748  01A6               	clrf	_Buz1+6
  7886  0749  07A6               	addwf	_Buz1+6,f
  7887                           
  7888                           ;Buzzer_B1.c: 62: } else {
  7889  074A  0008               	return
  7890  074B                     l68:	
  7891                           
  7892                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
  7893  074B  10A0               	bcf	_Buz1,1
  7894                           
  7895                           ;Buzzer_B1.c: 64: }
  7896                           ;Buzzer_B1.c: 65: } else {
  7897  074C  0008               	return
  7898  074D                     l65:	
  7899                           
  7900                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
  7901  074D  16A0               	bsf	_Buz1,5
  7902                           
  7903                           ;Buzzer_B1.c: 68: RC0 = 1;
  7904  074E  1407               	bsf	7,0	;volatile
  7905                           
  7906                           ;Buzzer_B1.c: 69: }
  7907                           ;Buzzer_B1.c: 70: } else {
  7908  074F  0008               	return
  7909  0750                     l64:	
  7910                           
  7911                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
  7912  0750  12A0               	bcf	_Buz1,5
  7913                           
  7914                           ;Buzzer_B1.c: 73: RC0 = 0;
  7915  0751  1007               	bcf	7,0	;volatile
  7916                           
  7917                           ;Buzzer_B1.c: 75: Buz1.Count--;
  7918  0752  3001               	movlw	1
  7919  0753  02A3               	subwf	_Buz1+3,f
  7920  0754  0008               	return
  7921  0755                     __end_of_Buzzer_Main:	
  7922                           
  7923                           	psect	text52
  7924  0D71                     __ptext52:	
  7925 ;; *************** function _Buzzer_Initialization *****************
  7926 ;; Defined at:
  7927 ;;		line 11 in file "../src/Buzzer_B1.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;		None
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;		None
  7932 ;; Return value:  Size  Location     Type
  7933 ;;		None               void
  7934 ;; Registers used:
  7935 ;;		None
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7941 ;;      Params:         0       0       0       0
  7942 ;;      Locals:         0       0       0       0
  7943 ;;      Temps:          0       0       0       0
  7944 ;;      Totals:         0       0       0       0
  7945 ;;Total ram usage:        0 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    2
  7948 ;; This function calls:
  7949 ;;		Nothing
  7950 ;; This function is called by:
  7951 ;;		_main
  7952 ;; This function uses a non-reentrant model
  7953 ;;
  7954                           
  7955                           
  7956                           ;psect for function _Buzzer_Initialization
  7957  0D71                     _Buzzer_Initialization:	
  7958                           
  7959                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
  7960                           
  7961                           ;incstack = 0
  7962                           ; Regs used in _Buzzer_Initialization: []
  7963  0D71  1283               	bcf	3,5	;RP0=0, select bank0
  7964  0D72  1303               	bcf	3,6	;RP1=0, select bank0
  7965  0D73  1420               	bsf	_Buz1,0
  7966  0D74  0008               	return
  7967  0D75                     __end_of_Buzzer_Initialization:	
  7968                           
  7969                           	psect	text53
  7970  0EAC                     __ptext53:	
  7971 ;; *************** function _ISR *****************
  7972 ;; Defined at:
  7973 ;;		line 116 in file "../src/MCU_B1.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;		None
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;		None
  7978 ;; Return value:  Size  Location     Type
  7979 ;;		None               void
  7980 ;; Registers used:
  7981 ;;		wreg, status,2, status,0, pclath, cstack
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7987 ;;      Params:         0       0       0       0
  7988 ;;      Locals:         0       0       0       0
  7989 ;;      Temps:          4       0       0       0
  7990 ;;      Totals:         4       0       0       0
  7991 ;;Total ram usage:        4 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; Hardware stack levels required when called:    1
  7994 ;; This function calls:
  7995 ;;		_TMR1_ISR
  7996 ;; This function is called by:
  7997 ;;		Interrupt level 1
  7998 ;; This function uses a non-reentrant model
  7999 ;;
  8000                           
  8001                           
  8002                           ;psect for function _ISR
  8003  0EAC                     _ISR:	
  8004                           
  8005                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
  8006  0EAC  1683               	bsf	3,5	;RP0=1, select bank1
  8007  0EAD  1303               	bcf	3,6	;RP1=0, select bank1
  8008  0EAE  1C0C               	btfss	12,0	;volatile
  8009  0EAF  2EB7               	goto	i1l508
  8010  0EB0  1283               	bcf	3,5	;RP0=0, select bank0
  8011  0EB1  1303               	bcf	3,6	;RP1=0, select bank0
  8012  0EB2  1C0C               	btfss	12,0	;volatile
  8013  0EB3  2EB7               	goto	i1l508
  8014                           
  8015                           ;MCU_B1.c: 126: TMR1_ISR();
  8016  0EB4  158A  2696  158A   	fcall	_TMR1_ISR
  8017  0EB7                     i1l508:	
  8018                           ;MCU_B1.c: 127: }
  8019                           ;MCU_B1.c: 148: return;
  8020                           
  8021  0EB7  0873               	movf	??_ISR+3,w
  8022  0EB8  1283               	bcf	3,5	;RP0=0, select bank0
  8023  0EB9  1303               	bcf	3,6	;RP1=0, select bank0
  8024  0EBA  00FF               	movwf	127
  8025  0EBB  0872               	movf	??_ISR+2,w
  8026  0EBC  008A               	movwf	10
  8027  0EBD  0871               	movf	??_ISR+1,w
  8028  0EBE  0084               	movwf	4
  8029  0EBF  0E70               	swapf	??_ISR^(0+-128),w
  8030  0EC0  0083               	movwf	3
  8031  0EC1  0EFE               	swapf	126,f
  8032  0EC2  0E7E               	swapf	126,w
  8033  0EC3  0009               	retfie
  8034  0EC4                     __end_of_ISR:	
  8035                           
  8036                           	psect	intentry
  8037  0004                     __pintentry:	
  8038                           ;incstack = 0
  8039                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  8040                           
  8041  0004                     interrupt_function:	
  8042  007E                     saved_w	set	btemp
  8043  0004  00FE               	movwf	btemp
  8044  0005  0E03               	swapf	3,w
  8045  0006  00F0               	movwf	??_ISR
  8046  0007  0804               	movf	4,w
  8047  0008  00F1               	movwf	??_ISR+1
  8048  0009  080A               	movf	10,w
  8049  000A  00F2               	movwf	??_ISR+2
  8050  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8051  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8052  000D  087F               	movf	btemp+1,w
  8053  000E  00F3               	movwf	??_ISR+3
  8054  000F  158A  2EAC         	ljmp	_ISR
  8055                           
  8056                           	psect	text54
  8057  0E96                     __ptext54:	
  8058 ;; *************** function _TMR1_ISR *****************
  8059 ;; Defined at:
  8060 ;;		line 236 in file "../src/MCU_B1.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;		None
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;		None
  8065 ;; Return value:  Size  Location     Type
  8066 ;;		None               void
  8067 ;; Registers used:
  8068 ;;		wreg, status,2
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8074 ;;      Params:         0       0       0       0
  8075 ;;      Locals:         0       0       0       0
  8076 ;;      Temps:          0       0       0       0
  8077 ;;      Totals:         0       0       0       0
  8078 ;;Total ram usage:        0 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; This function calls:
  8081 ;;		Nothing
  8082 ;; This function is called by:
  8083 ;;		_ISR
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           
  8088                           ;psect for function _TMR1_ISR
  8089  0E96                     _TMR1_ISR:	
  8090                           
  8091                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
  8092                           
  8093                           ;incstack = 0
  8094                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  8095  0E96  30FA               	movlw	250
  8096  0E97  1283               	bcf	3,5	;RP0=0, select bank0
  8097  0E98  1303               	bcf	3,6	;RP1=0, select bank0
  8098  0E99  008F               	movwf	15	;volatile
  8099                           
  8100                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
  8101  0E9A  3038               	movlw	56
  8102  0E9B  008E               	movwf	14	;volatile
  8103                           
  8104                           ;MCU_B1.c: 240: TMR1IF = 0;
  8105  0E9C  100C               	bcf	12,0	;volatile
  8106                           
  8107                           ;MCU_B1.c: 271: Timer1.Count++;
  8108  0E9D  3001               	movlw	1
  8109  0E9E  07BC               	addwf	_Timer1+1,f
  8110  0E9F  1803               	skipnc
  8111  0EA0  0ABD               	incf	_Timer1+2,f
  8112  0EA1  3000               	movlw	0
  8113  0EA2  07BD               	addwf	_Timer1+2,f
  8114                           
  8115                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
  8116  0EA3  30C8               	movlw	200
  8117  0EA4  063C               	xorwf	_Timer1+1,w
  8118  0EA5  043D               	iorwf	_Timer1+2,w
  8119  0EA6  1D03               	skipz
  8120  0EA7  0008               	return
  8121                           
  8122                           ;MCU_B1.c: 273: Timer1.Count = 0;
  8123  0EA8  01BC               	clrf	_Timer1+1
  8124  0EA9  01BD               	clrf	_Timer1+2
  8125                           
  8126                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
  8127  0EAA  143B               	bsf	_Timer1,0
  8128  0EAB  0008               	return
  8129  0EAC                     __end_of_TMR1_ISR:	
  8130  007E                     btemp	set	126	;btemp
  8131  007E                     wtemp	set	126
  8132  007E                     wtemp0	set	126
  8133  0080                     wtemp1	set	128
  8134  0082                     wtemp2	set	130
  8135  0084                     wtemp3	set	132
  8136  0086                     wtemp4	set	134
  8137  0088                     wtemp5	set	136
  8138  007F                     wtemp6	set	127
  8139  007E                     ttemp	set	126
  8140  007E                     ttemp0	set	126
  8141  0081                     ttemp1	set	129
  8142  0084                     ttemp2	set	132
  8143  0087                     ttemp3	set	135
  8144  007F                     ttemp4	set	127
  8145  007E                     ltemp	set	126
  8146  007E                     ltemp0	set	126
  8147  0082                     ltemp1	set	130
  8148  0086                     ltemp2	set	134
  8149  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     19      80
    BANK1            80      1      57
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights2(BANK0[7]), Lights1(BANK0[7]), 

    Sw	PTR struct Switch size(1) Largest target is 5
		 -> NULL(NULL[0]), Sw2(BANK1[5]), Sw1(BANK1[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _my_MainTimer->_setBuz
    _setBuz->___awdiv
    _getPIR_AD->_getAD
    _getCDS_AD->_getAD
    _setSw_Main->_SwPointSelect
    _setSw_Main->_getSw_KeyStatus
    _setLights_SwOn->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _Mcu_Initialization->_WDT_Set
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _getLights_Status->_LightsPointSelect
    _getAll_Lights_Line->_LightsPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_getPIR_AD
    _my_MainTimer->_setBuz
    _setBuz->___awdiv
    _getPIR_AD->___awdiv
    _Switch_Main->_setSw_Main
    _setSw_Main->_setLights_SwOff
    _setLights_SwOn->_getLights_Status
    _setLights_SwOff->_setLights_Trigger
    _PIR_Main->_setLights_Trigger
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getAll_Lights_Line

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   20104
                                             15 BANK0      4     0      4
                                              0 BANK1      1     1      0
              _Buzzer_Initialization
                        _Buzzer_Main
                 _CDS_Initialization
                           _CDS_Main
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
                          _getCDS_AD
                          _getPIR_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1358
                                             11 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1358
                                              5 COMMON     1     1      0
                                              8 BANK0      3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2253
                                              8 BANK0      7     6      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     445
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     300
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3581
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3581
                                              4 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOn                                       1     1      0     251
                                              2 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOff                                      1     1      0    1280
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             9     9      0    1502
                                              3 BANK0      9     9      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    3624
                     _Lights_Control
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    2346
                                              5 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    2069
                                              2 BANK0      3     2      1
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            2     2      0      91
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1278
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1061
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      93
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      93
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    1800
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    1800
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1915
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1915
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       7     7      0    3533
                                              4 BANK0      7     7      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (4) _setLights_Trigger                                    3     2      1    1125
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1760
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             2     2      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getLights_Status                                     2     2      0     127
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   4     4      0     139
                                              0 BANK0      4     4      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _LightsPointSelect                                    2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CDS_Initialization
   _CDS_Main
   _Exception_Main
     _getAll_Lights_Line
       _LightsPointSelect
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
       _setLights
         _setLED
           _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLights_Trigger
       _LightsPointSelect
   _Switch_Initialization
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setLED
         _LedPointSelect
       _setLights_SwOff
         _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
       _setLights_SwOn
         _LightsPointSelect
         _getLights_Status
           _LightsPointSelect
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      93       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     13      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      1      39       7       71.3%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      93      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Jan 14 17:29:23 2015

              __size_of_Switch_Main 000B                        _WDT_Clearing 0002  
                                l54 06F5                                  l64 0750  
                                l56 0703                                  l65 074D  
                                l66 073D                                  l68 074B  
                      ___awdiv@sign 0062                                  _Sw 0079  
                                fsr 0004                                 l325 0EE5  
                               l326 0EED                                 l168 07A8  
                               l850 01A6                                 l851 006B  
                               l852 0052                                 l857 0071  
                               l859 0082                                 _GIE 005F  
                               _RC0 0038                                 _LED 0076  
                               _RC1 0039                                 _RB4 0034  
                               _RA6 002E                                 _RB5 0035  
                               _RA7 002F                                 _RC4 003C  
                               _RC5 003D                                 _RC6 003E  
                               _RC7 003F                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _ISR 0EAC                                 _PSA 040B  
                               _WDT 003E                   ??_setLights_SwOff 0076  
                               _Cmd 0040                                 _Sw1 00CE  
                               _Sw2 00D3              getAll_Lights_Line@line 0060  
                               fsr0 0004                                 indf 0000  
             _Buzzer_Initialization 0D71                     __end_of_ADC_Set 0800  
         __end_of_LightsPointSelect 0E47                   ??_getSw_KeyStatus 0074  
                  _getLights_Status 0E00             __size_of_Lights_Control 009A  
                              ?_ISR 0070                                l1181 03A3  
                              l1334 0FD0                                l1159 0E75  
                              l1183 0330                                l3104 0F21  
                              l3108 0F2B                                l4110 0584  
                              l4102 0578                                l3230 0F3A  
                              l3072 0E94                                l3232 0F3D  
                              l4106 057C                                l4202 0606  
                              l3058 0E51                                l4132 059C  
                              l3068 0E8A                                l3236 0F43  
                              l4054 0E3E                                l4310 04F9  
                              l4302 04ED                                l4206 060E  
                              l4128 0596                                l4136 05A2  
                              l4080 0559                                l4320 0519  
                              l4224 062B                                l3344 0E79  
                              l4066 0548                                l4074 0550  
                              l4322 0527                                l4306 04F3  
                              l4250 066A                                l4242 0657  
                              l4234 0633                                l4218 0620  
                              l4162 0F62                                l4316 0505  
                              l4236 0641                                l3348 0E7F  
                              l4172 0F82                                l4318 0511  
                              l4246 0662                                l4414 07F2  
                              l4088 0561                                l4432 0403  
                              l4192 05D9                                l4352 0322  
                              l4600 02F2                                l4338 0FCA  
                              l4098 0574                                l4186 05C6  
                              l4436 0414                                l4196 05EA  
                              l4700 00C9                                l4470 0783  
                              l4462 075F                                l4550 0233  
                              l4542 0223                                l4448 0448  
                              l4368 0353                                l4464 076D  
                              l4616 0FA2                                l4714 011A  
                              l4706 0106                                l4722 014F  
                              l4378 037B                                l4474 078E  
                              l4570 026E                                l4554 023B  
                              l4546 022B                                l4538 021B  
                              l4580 029C                                l4564 0252  
                              l4646 0065                                l4830 0689  
                              l4736 0177                                l4498 07B3  
                              l4682 00A5                                l4594 02E4  
                              l4586 02B8                                l4836 06A5  
                              l4774 046A                                l4694 00BC  
                              l4792 04BA                                l4784 0490  
                              l4794 049D                                l4786 0499  
                              l4698 00C8               _myMain_Initialization 0D6A  
                      __CFG_WDTE$ON 0000                                u3225 0721  
                              u2355 0E68                                u5030 03FF  
                              u5015 03EB                                u5060 0410  
                              u5125 0762                                u5145 076E  
                              u5155 077A                                _PEIE 005E  
                              u5085 0433                                u5165 0784  
                              u5255 07C3                                u4615 0642  
                              u4625 064E                                u4635 0658  
                              u4770 050E                                u4595 0636  
                              u5635 00E7                                u5645 00FF  
                              u4790 0524                                u5840 04C3  
                              u5745 0194                                u5665 0137  
                              u5845 04A6                                u5695 015F  
                              __CDS 0032                                _WPUB 0095  
                              _Buz1 0020                                __PIR 00A0  
                              _main 0671                                btemp 007E  
                   __end_of_WDT_Set 0DE1                                ltemp 007E  
                              start 0011                                ttemp 007E  
                              wtemp 007E                    __end_of_CDS_Main 07C9  
                             ??_ISR 0070                   _setLights_Trigger 0EF6  
                     ??_Lights_Main 0076                       __CFG_PLLEN$ON 0000  
                  __end_of_LED_Main 0D71                  ?_setLights_Trigger 005D  
                  ??_setPIRLED_Main 005F                               ?_main 006C  
                   __end_of___awdiv 0671                               _ADRES 001E  
                   ___awdiv@divisor 005D                               _T1CON 0010  
                   __end_of___lwdiv 0795                               i1l508 0EB7  
                   ___awdiv@counter 0061                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                             _TRISA 0085                               _TRISB 0086  
                             _TRISC 0087             __end_of_Timeout_Counter 0E6E  
                             _Light 0041                 ??_setLights_Trigger 005E  
                  __end_of_PIR_Main 01BC                    __end_of_TMR1_ISR 0EAC  
                  __end_of_TMR1_Set 0DD3                               _getAD 0F2D  
    getLights_Allow_Condition@allow 0075                       ??_Buzzer_Main 0074  
                  __end_of_WDT_Main 0E22                       _LightsControl 0078  
                    __CFG_BOREN$OFF 0000                               pclath 000A  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
    __size_of_setLED_Initialization 0012       __end_of_setLED_Initialization 0E34  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   getPIR_AD@channel1 006A  
                 getPIR_AD@channel2 0065                      _setLights_Main 07C9  
                   __initialization 0013                      _setLights_SwOn 0F49  
         __end_of_setLights_Trigger 0F11                        __end_of_main 06CA  
                  __end_of_Fosc_Set 0D7E                      _Exception_Main 044E  
                         ??_ADC_Set 0074                              ??_main 00D8  
            ?_Buzzer_Initialization 0070                 __end_of_Lights_Main 0E00  
        __size_of_LightsPointSelect 0013             ??_Switch_Initialization 0074  
                            ?_getAD 0074              ?_myMain_Initialization 0070  
                            _ADCON0 001F                              _ADCON1 009F  
                  ___awdiv@dividend 005F                           ??_WDT_Set 0074  
                            _ANSELA 0185                              _ANSELB 0186  
          _getMain_All_Error_Status 0D6B                              _FVRCON 009D  
            getLights_Status@lights 005D                              _PIRLED 0037  
                            _OSCCON 0090                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0EC4  
            getLights_Status@status 005E              __end_of_setLights_Main 07F9  
            __end_of_setLights_SwOn 0F67          __end_of_Mcu_Initialization 0DF0  
               __end_of_Buzzer_Main 0755                              _Lights 0077  
                            _Timer1 003B         __size_of_CDS_Initialization 0004  
           ??_Lights_Initialization 0076              __end_of_Exception_Main 04C6  
              Exception_Main@lights 0062                           ??___awdiv 0074  
                         ??___lwdiv 0074                Exception_Main@status 0064  
                            _setLED 0537                              _myMain 002C  
                  ___awdiv@quotient 0063                              _setBuz 06CA  
   getLights_Allow_Condition@lights 0074                              saved_w 007E  
                  setLights_SwOn@sw 005F                    ?_Timeout_Counter 0070  
             __end_of_SwPointSelect 0E5A                      _Lights_Control 03B4  
           __size_of_LedPointSelect 001A                           ?_CDS_Main 0070  
       __size_of_PIR_Initialization 000B                          _TouchPower 0E6E  
           __end_of__initialization 0023                           ?_LED_Main 0070  
                     ?_my_MainTimer 0070                     ?_setLights_Main 0070  
                   ?_setLights_SwOn 0070                     _setLights_SwOff 0F67  
        __size_of_setLights_Trigger 001B                      __pcstackCOMMON 0070  
                __size_of_getCDS_AD 002A                     ?_Exception_Main 0070  
          __end_of_getLights_Status 0E11                       __end_of_getAD 0F49  
                         ?_PIR_Main 0070                           ?_TMR1_ISR 0070  
                         ?_TMR1_Set 0070                  _LED_Initialization 0DB9  
                   _getSw_KeyStatus 0E82                  __size_of_getPIR_AD 0138  
                       _Lights_Main 0DF0            _setLights_Initialization 0D84  
                         ?_WDT_Main 0070          __end_of_set_TimeoutCleared 0D84  
               ?_LED_Initialization 0070              __end_of_Lights_Control 044E  
                           ??_getAD 0075                          ??_CDS_Main 005D  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                         ?_Fosc_Set 0070         __size_of_getAll_Lights_Line 002A  
                       _Buzzer_Main 0711                             ?_IO_Set 0070  
                   __CFG_VCAPEN$DIS 0000                      ??_my_MainTimer 0068  
                        ??_LED_Main 0076                       ??_Switch_Main 0076  
              ??_LED_Initialization 0076                   LedPointSelect@led 0075  
                       setBuz@count 0067                          __pmaintext 0671  
        ?_getLights_Allow_Condition 0070                PIR_Main@LightsStatus 0068  
                        ??_PIR_Main 0060                          ??_TMR1_ISR 0070  
                __size_of_setLights 006C                          ??_TMR1_Set 0074  
                        __pintentry 0004                             ?_setLED 005D  
           setLights_Trigger@lights 005F                             _ADC_Set 07F9  
                           ?_setBuz 0065                          ??_WDT_Main 0074  
            __size_of_getCDS_Status 0008                     ?_Lights_Control 0070  
                 __end_of_getCDS_AD 1000                             _WDT_Set 0DD3  
                        ??_Fosc_Set 0074                         ?_TouchPower 0070  
                 __end_of_getPIR_AD 02F4             __end_of_setLights_SwOff 0F89  
                   __size_of_IO_Set 0018                          getCDS_AD@i 0060  
                        getCDS_AD@j 0061                             _Lights1 0043  
                           _Lights2 004A                             _VarLED1 0055  
                           _VarLED2 0059             __end_of_getSw_KeyStatus 0E96  
                           ___awdiv 0614                 __end_of_Switch_Main 0DB9  
                           ___lwdiv 0755             ??_Buzzer_Initialization 0074  
                       PIR_Main@cds 0067                     __size_of_setLED 0071  
                   __size_of_setBuz 0047                             __ptext0 0000  
                           __ptext1 0F89                             __ptext2 06CA  
                           __ptext3 0D6A                             __ptext4 01BC  
                           __ptext5 0755                             __ptext6 0FD6  
                           __ptext7 0F2D                             __ptext8 0E11  
                           __ptext9 0002                          getPIR_AD@i 006B  
                        getPIR_AD@j 0069                        __size_of_ISR 0018  
        ??_getMain_All_Error_Status 0074             ??_myMain_Initialization 0074  
                    _LedPointSelect 0EDC                             clrloop0 0D9C  
    __size_of_Switch_Initialization 0001       __end_of_Switch_Initialization 0D6A  
                 __end_of_setLights 0614                end_of_initialization 0023  
                        _setSw_Main 02F4                       _getCDS_Status 0D93  
             _setLED_Initialization 0E22                   setLights_SwOff@sw 0060  
    __size_of_Lights_Initialization 0008       __end_of_Lights_Initialization 0D93  
               __size_of_TouchPower 0014            setLED_Initialization@led 005F  
                _Mcu_Initialization 0DE1                __end_of_my_MainTimer 0FAC  
            __end_of_LedPointSelect 0EF6                 setPIRLED_Main@count 0060  
               ?_Mcu_Initialization 0070             __size_of_setPIRLED_Main 0071  
                  ??_setLights_Main 0076                setLights_Main@lights 0062  
                  ??_setLights_SwOn 0076     getMain_All_Error_Status@command 0070  
                 __size_of_CDS_Main 0034                      ?_getCDS_Status 0070  
                  ?_setLights_SwOff 0070                    ??_Exception_Main 0061  
                    __end_of_IO_Set 0EDC          __end_of_CDS_Initialization 0D79  
                       _Switch_Main 0DAE          ??_setLights_Initialization 0076  
                 __size_of_LED_Main 0003                    ?_getSw_KeyStatus 0070  
              ??_Mcu_Initialization 0075                       ?_WDT_Clearing 0070  
                 ?_getLights_Status 0070                        ?_Lights_Main 0070  
                 getSw_KeyStatus@sw 0075                   __size_of_PIR_Main 0196  
                 __size_of_TMR1_ISR 0016                  ??_getLights_Status 0076  
                 __size_of_TMR1_Set 000E                      __end_of_setLED 05A8  
                    __end_of_setBuz 0711                   __size_of_WDT_Main 0011  
               start_initialization 0013                     ?_LedPointSelect 0070  
                       __end_of_ISR 0EC4          __end_of_PIR_Initialization 0DAE  
               getCDS_Status@status 0074                        ?_Buzzer_Main 0070  
                _set_TimeoutCleared 0D7E                            ??_IO_Set 0074  
          __size_of_Timeout_Counter 0014                           _VarErrLED 0051  
                       ?_setSw_Main 0070              ?_setLED_Initialization 0070  
                 __size_of_Fosc_Set 0005                     setLights@lights 0061  
               ?_set_TimeoutCleared 0070                      ??_WDT_Clearing 0074  
       ??_getLights_Allow_Condition 0074                 Exception_Main@count 0063  
                   setLights@status 005F                 Exception_Main@error 0067  
            __size_of_SwPointSelect 0013                            ??_setLED 0076  
                          ?_ADC_Set 0070                    ??_Lights_Control 0065  
                          ??_setBuz 0075    __end_of_getMain_All_Error_Status 0D6E  
                       __pbssCOMMON 0076                           ___latbits 0001  
                     __pcstackBANK0 005D                       __pcstackBANK1 00D8  
              ??_set_TimeoutCleared 0074          __end_of_getAll_Lights_Line 0FD6  
                          ?_WDT_Set 0070                     ??_getCDS_Status 0074  
                      ??_TouchPower 0074                       PIR_Main@error 0064  
                         _getCDS_AD 0FD6                           _getPIR_AD 01BC  
       __size_of_LED_Initialization 000C                     Exception_Main@i 0065  
                  ___lwdiv@dividend 005F                          setBuz@time 0065  
                     _PIR_Main$2877 0065                            ?___awdiv 005D  
             __size_of_my_MainTimer 0023                            ?___lwdiv 005D  
    __size_of_Buzzer_Initialization 0004       __end_of_Buzzer_Initialization 0D75  
                __end_of_TouchPower 0E82            setLights_Trigger@command 005D  
               __size_of_setSw_Main 00C0           _getLights_Allow_Condition 0F11  
    __size_of_myMain_Initialization 0001       __end_of_myMain_Initialization 0D6B  
                    __size_of_getAD 001C                    ___lwdiv@quotient 0062  
                     _SwPointSelect 0E47                      _setPIRLED_Main 04C6  
                          _CDS_Main 0795                   interrupt_function 0004  
                        ?_getCDS_AD 005D                            _LED_Main 0D6E  
                         _setLights 05A8                     SwPointSelect@sw 0075  
           _getAll_Lights_Line$4308 005E                           clear_ram0 0D9B  
  __end_of_setLights_Initialization 0D8B                        _my_MainTimer 0F89  
                        ?_getPIR_AD 0065                            _GO_nDONE 00F9  
                 ??_Timeout_Counter 0074                            _PIR_Main 0026  
                          _TMR1_ISR 0E96                            _TMR1_Set 0DC5  
                          _WDT_Main 0E11               getSw_KeyStatus@status 0074  
                  __size_of_ADC_Set 0007                __size_of_Lights_Main 0010  
                      setSw_Main@sw 0063              __end_of_setPIRLED_Main 0537  
    getMain_All_Error_Status@status 0074                      ?_SwPointSelect 0070  
                       getAD@adcon0 0075                         getAD@adcon1 0074  
              __end_of_WDT_Clearing 0004                            _Fosc_Set 0D79  
                  __size_of_WDT_Set 000E               _Switch_Initialization 0D69  
 __size_of_getMain_All_Error_Status 0003           ?_getMain_All_Error_Status 0070  
              __size_of_Buzzer_Main 0044                          ?_setLights 005F  
                      ?_Switch_Main 0070                            _SwDetect 0042  
                         setLED@led 005E                    __size_of___awdiv 005D  
                  __size_of___lwdiv 0040                    ??_LedPointSelect 0074  
                _CDS_Initialization 0D75               _Lights_Initialization 0D8B  
                   ?_setPIRLED_Main 0070                     ___lwdiv@divisor 005D  
               ?_CDS_Initialization 0070                     ___lwdiv@counter 0061  
                          __ptext10 0DAE                            __ptext11 02F4  
                          __ptext20 0026                            __ptext12 0F49  
                          __ptext21 0D93                            __ptext13 0F67  
                          __ptext30 07C9                            __ptext22 0DA3  
                          __ptext14 0E82                            __ptext31 05A8  
                          __ptext23 0DE1                            __ptext15 0E47  
                          __ptext40 0E22                            __ptext32 0F11  
                          __ptext24 0DD3                            __ptext16 0E6E  
                          __ptext41 044E                            __ptext33 03B4  
                          __ptext25 0DC5                            __ptext17 0D7E  
                          __ptext50 0D75                            __ptext42 0EF6  
                          __ptext34 0614                            __ptext26 0EC4  
                          __ptext18 0E5A                            __ptext51 0711  
                          __ptext43 0537                            __ptext35 0D8B  
                          __ptext27 0D79                            __ptext19 0D69  
                          __ptext52 0D71                            __ptext44 0EDC  
                          __ptext36 0D84                            __ptext28 07F9  
                          __ptext53 0EAC                            __ptext45 0D6B  
                          __ptext37 0D6E                            __ptext29 0DF0  
                          __ptext54 0E96                            __ptext46 0E00  
                          __ptext38 04C6                            __ptext47 0FAC  
                          __ptext39 0DB9                            __ptext48 0E34  
                          __ptext49 0795           __size_of_getLights_Status 0011  
           ??_setLED_Initialization 0076                         ??_getCDS_AD 005E  
                      ??_setSw_Main 0061                       setLED@command 005D  
                     __size_of_main 0059                         ??_getPIR_AD 0066  
                _PIR_Initialization 0DA3                ??_CDS_Initialization 0074  
       __size_of_Mcu_Initialization 000F            __size_of_setLights_SwOff 0022  
               ?_PIR_Initialization 0070                            main@argc 006C  
                          main@argv 006E            __size_of_getSw_KeyStatus 0014  
 __size_of_setLights_Initialization 0007           ?_setLights_Initialization 0070  
                   ??_SwPointSelect 0074                  __end_of_setSw_Main 03B4  
              Lights_Control@lights 0067                ??_PIR_Initialization 0074  
                          intlevel1 0000              ?_Switch_Initialization 0070  
__size_of_getLights_Allow_Condition 001C                         ??_setLights 0060  
           LightsPointSelect@lights 0075                  _getAll_Lights_Line 0FAC  
           __size_of_setLights_Main 0030             __size_of_setLights_SwOn 001E  
               ?_getAll_Lights_Line 0070              ?_Lights_Initialization 0070  
           __size_of_Exception_Main 0078               __size_of_WDT_Clearing 0002  
    setLights_Initialization@lights 005D         __size_of_set_TimeoutCleared 0006  
                 _LightsPointSelect 0E34                ??_getAll_Lights_Line 005D  
                __CFG_FOSC$INTOSCIO 0000                  ?_LightsPointSelect 0070  
                   _Timeout_Counter 0E5A          __end_of_LED_Initialization 0DC5  
             __end_of_getCDS_Status 0D9B                   getCDS_AD@channel1 0062  
                 getCDS_AD@channel2 005D   __end_of_getLights_Allow_Condition 0F2D  
               ??_LightsPointSelect 0074  
