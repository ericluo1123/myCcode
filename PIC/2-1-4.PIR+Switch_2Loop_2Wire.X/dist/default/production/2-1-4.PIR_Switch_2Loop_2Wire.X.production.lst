

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Feb 26 14:19:24 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,delta=2
    65                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,delta=2
    67                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text55,local,class=CODE,merge=1,delta=2
    69                           	psect	text56,local,class=CODE,merge=1,delta=2
    70                           	psect	text57,local,class=CODE,merge=1,delta=2
    71                           	psect	text58,local,class=CODE,merge=1,delta=2
    72                           	psect	text59,local,class=CODE,merge=1,delta=2
    73                           	psect	text60,local,class=CODE,merge=1,delta=2
    74                           	psect	text61,local,class=CODE,merge=1,delta=2
    75                           	psect	text62,local,class=CODE,merge=1,delta=2
    76                           	psect	text63,local,class=CODE,merge=1,delta=2
    77                           	psect	text64,local,class=CODE,merge=1,delta=2
    78                           	psect	text65,local,class=CODE,merge=1,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,delta=2
    80                           	psect	text67,local,class=CODE,merge=1,delta=2
    81                           	psect	text68,local,class=CODE,merge=1,delta=2
    82                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text74,local,class=CODE,merge=1,delta=2
    88                           	psect	intentry,global,class=CODE,delta=2
    89                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    90                           	dabs	1,0x7E,2
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0007                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  008F                     	;# 
   134  0090                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0093                     	;# 
   139  0094                     	;# 
   140  0095                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0096                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009C                     	;# 
   147  009D                     	;# 
   148  009F                     	;# 
   149  0108                     	;# 
   150  0109                     	;# 
   151  010C                     	;# 
   152  010C                     	;# 
   153  010D                     	;# 
   154  010D                     	;# 
   155  010E                     	;# 
   156  010F                     	;# 
   157  0185                     	;# 
   158  0186                     	;# 
   159  018C                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  000E                     	;# 
   175  000F                     	;# 
   176  0010                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0013                     	;# 
   180  0014                     	;# 
   181  0015                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  001D                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  0081                     	;# 
   195  0085                     	;# 
   196  0086                     	;# 
   197  0087                     	;# 
   198  0089                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  008F                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0093                     	;# 
   208  0094                     	;# 
   209  0095                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0096                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009F                     	;# 
   218  0108                     	;# 
   219  0109                     	;# 
   220  010C                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  010F                     	;# 
   226  0185                     	;# 
   227  0186                     	;# 
   228  018C                     	;# 
   229  0000                     	;# 
   230  0001                     	;# 
   231  0002                     	;# 
   232  0003                     	;# 
   233  0004                     	;# 
   234  0005                     	;# 
   235  0006                     	;# 
   236  0007                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0089                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  008F                     	;# 
   272  0090                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0095                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0096                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009F                     	;# 
   287  0108                     	;# 
   288  0109                     	;# 
   289  010C                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  0185                     	;# 
   296  0186                     	;# 
   297  018C                     	;# 
   298  0000                     	;# 
   299  0001                     	;# 
   300  0002                     	;# 
   301  0003                     	;# 
   302  0004                     	;# 
   303  0005                     	;# 
   304  0006                     	;# 
   305  0007                     	;# 
   306  0009                     	;# 
   307  000A                     	;# 
   308  000B                     	;# 
   309  000C                     	;# 
   310  000D                     	;# 
   311  000E                     	;# 
   312  000E                     	;# 
   313  000F                     	;# 
   314  0010                     	;# 
   315  0011                     	;# 
   316  0012                     	;# 
   317  0013                     	;# 
   318  0014                     	;# 
   319  0015                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0017                     	;# 
   323  0018                     	;# 
   324  0019                     	;# 
   325  001A                     	;# 
   326  001B                     	;# 
   327  001B                     	;# 
   328  001C                     	;# 
   329  001D                     	;# 
   330  001E                     	;# 
   331  001F                     	;# 
   332  0081                     	;# 
   333  0085                     	;# 
   334  0086                     	;# 
   335  0087                     	;# 
   336  0089                     	;# 
   337  008C                     	;# 
   338  008D                     	;# 
   339  008E                     	;# 
   340  008F                     	;# 
   341  0090                     	;# 
   342  0091                     	;# 
   343  0092                     	;# 
   344  0093                     	;# 
   345  0093                     	;# 
   346  0094                     	;# 
   347  0095                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0096                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009F                     	;# 
   356  0108                     	;# 
   357  0109                     	;# 
   358  010C                     	;# 
   359  010C                     	;# 
   360  010D                     	;# 
   361  010D                     	;# 
   362  010E                     	;# 
   363  010F                     	;# 
   364  0185                     	;# 
   365  0186                     	;# 
   366  018C                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0009                     	;# 
   376  000A                     	;# 
   377  000B                     	;# 
   378  000C                     	;# 
   379  000D                     	;# 
   380  000E                     	;# 
   381  000E                     	;# 
   382  000F                     	;# 
   383  0010                     	;# 
   384  0011                     	;# 
   385  0012                     	;# 
   386  0013                     	;# 
   387  0014                     	;# 
   388  0015                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0017                     	;# 
   392  0018                     	;# 
   393  0019                     	;# 
   394  001A                     	;# 
   395  001B                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  001D                     	;# 
   399  001E                     	;# 
   400  001F                     	;# 
   401  0081                     	;# 
   402  0085                     	;# 
   403  0086                     	;# 
   404  0087                     	;# 
   405  0089                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  008F                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0094                     	;# 
   416  0095                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0096                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009F                     	;# 
   425  0108                     	;# 
   426  0109                     	;# 
   427  010C                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  010F                     	;# 
   433  0185                     	;# 
   434  0186                     	;# 
   435  018C                     	;# 
   436  0000                     	;# 
   437  0001                     	;# 
   438  0002                     	;# 
   439  0003                     	;# 
   440  0004                     	;# 
   441  0005                     	;# 
   442  0006                     	;# 
   443  0007                     	;# 
   444  0009                     	;# 
   445  000A                     	;# 
   446  000B                     	;# 
   447  000C                     	;# 
   448  000D                     	;# 
   449  000E                     	;# 
   450  000E                     	;# 
   451  000F                     	;# 
   452  0010                     	;# 
   453  0011                     	;# 
   454  0012                     	;# 
   455  0013                     	;# 
   456  0014                     	;# 
   457  0015                     	;# 
   458  0015                     	;# 
   459  0016                     	;# 
   460  0017                     	;# 
   461  0018                     	;# 
   462  0019                     	;# 
   463  001A                     	;# 
   464  001B                     	;# 
   465  001B                     	;# 
   466  001C                     	;# 
   467  001D                     	;# 
   468  001E                     	;# 
   469  001F                     	;# 
   470  0081                     	;# 
   471  0085                     	;# 
   472  0086                     	;# 
   473  0087                     	;# 
   474  0089                     	;# 
   475  008C                     	;# 
   476  008D                     	;# 
   477  008E                     	;# 
   478  008F                     	;# 
   479  0090                     	;# 
   480  0091                     	;# 
   481  0092                     	;# 
   482  0093                     	;# 
   483  0093                     	;# 
   484  0094                     	;# 
   485  0095                     	;# 
   486  0095                     	;# 
   487  0096                     	;# 
   488  0096                     	;# 
   489  0098                     	;# 
   490  0099                     	;# 
   491  009C                     	;# 
   492  009D                     	;# 
   493  009F                     	;# 
   494  0108                     	;# 
   495  0109                     	;# 
   496  010C                     	;# 
   497  010C                     	;# 
   498  010D                     	;# 
   499  010D                     	;# 
   500  010E                     	;# 
   501  010F                     	;# 
   502  0185                     	;# 
   503  0186                     	;# 
   504  018C                     	;# 
   505  0000                     	;# 
   506  0001                     	;# 
   507  0002                     	;# 
   508  0003                     	;# 
   509  0004                     	;# 
   510  0005                     	;# 
   511  0006                     	;# 
   512  0007                     	;# 
   513  0009                     	;# 
   514  000A                     	;# 
   515  000B                     	;# 
   516  000C                     	;# 
   517  000D                     	;# 
   518  000E                     	;# 
   519  000E                     	;# 
   520  000F                     	;# 
   521  0010                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0013                     	;# 
   525  0014                     	;# 
   526  0015                     	;# 
   527  0015                     	;# 
   528  0016                     	;# 
   529  0017                     	;# 
   530  0018                     	;# 
   531  0019                     	;# 
   532  001A                     	;# 
   533  001B                     	;# 
   534  001B                     	;# 
   535  001C                     	;# 
   536  001D                     	;# 
   537  001E                     	;# 
   538  001F                     	;# 
   539  0081                     	;# 
   540  0085                     	;# 
   541  0086                     	;# 
   542  0087                     	;# 
   543  0089                     	;# 
   544  008C                     	;# 
   545  008D                     	;# 
   546  008E                     	;# 
   547  008F                     	;# 
   548  0090                     	;# 
   549  0091                     	;# 
   550  0092                     	;# 
   551  0093                     	;# 
   552  0093                     	;# 
   553  0094                     	;# 
   554  0095                     	;# 
   555  0095                     	;# 
   556  0096                     	;# 
   557  0096                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009F                     	;# 
   563  0108                     	;# 
   564  0109                     	;# 
   565  010C                     	;# 
   566  010C                     	;# 
   567  010D                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  010F                     	;# 
   571  0185                     	;# 
   572  0186                     	;# 
   573  018C                     	;# 
   574  0000                     	;# 
   575  0001                     	;# 
   576  0002                     	;# 
   577  0003                     	;# 
   578  0004                     	;# 
   579  0005                     	;# 
   580  0006                     	;# 
   581  0007                     	;# 
   582  0009                     	;# 
   583  000A                     	;# 
   584  000B                     	;# 
   585  000C                     	;# 
   586  000D                     	;# 
   587  000E                     	;# 
   588  000E                     	;# 
   589  000F                     	;# 
   590  0010                     	;# 
   591  0011                     	;# 
   592  0012                     	;# 
   593  0013                     	;# 
   594  0014                     	;# 
   595  0015                     	;# 
   596  0015                     	;# 
   597  0016                     	;# 
   598  0017                     	;# 
   599  0018                     	;# 
   600  0019                     	;# 
   601  001A                     	;# 
   602  001B                     	;# 
   603  001B                     	;# 
   604  001C                     	;# 
   605  001D                     	;# 
   606  001E                     	;# 
   607  001F                     	;# 
   608  0081                     	;# 
   609  0085                     	;# 
   610  0086                     	;# 
   611  0087                     	;# 
   612  0089                     	;# 
   613  008C                     	;# 
   614  008D                     	;# 
   615  008E                     	;# 
   616  008F                     	;# 
   617  0090                     	;# 
   618  0091                     	;# 
   619  0092                     	;# 
   620  0093                     	;# 
   621  0093                     	;# 
   622  0094                     	;# 
   623  0095                     	;# 
   624  0095                     	;# 
   625  0096                     	;# 
   626  0096                     	;# 
   627  0098                     	;# 
   628  0099                     	;# 
   629  009C                     	;# 
   630  009D                     	;# 
   631  009F                     	;# 
   632  0108                     	;# 
   633  0109                     	;# 
   634  010C                     	;# 
   635  010C                     	;# 
   636  010D                     	;# 
   637  010D                     	;# 
   638  010E                     	;# 
   639  010F                     	;# 
   640  0185                     	;# 
   641  0186                     	;# 
   642  018C                     	;# 
   643  0000                     	;# 
   644  0001                     	;# 
   645  0002                     	;# 
   646  0003                     	;# 
   647  0004                     	;# 
   648  0005                     	;# 
   649  0006                     	;# 
   650  0007                     	;# 
   651  0009                     	;# 
   652  000A                     	;# 
   653  000B                     	;# 
   654  000C                     	;# 
   655  000D                     	;# 
   656  000E                     	;# 
   657  000E                     	;# 
   658  000F                     	;# 
   659  0010                     	;# 
   660  0011                     	;# 
   661  0012                     	;# 
   662  0013                     	;# 
   663  0014                     	;# 
   664  0015                     	;# 
   665  0015                     	;# 
   666  0016                     	;# 
   667  0017                     	;# 
   668  0018                     	;# 
   669  0019                     	;# 
   670  001A                     	;# 
   671  001B                     	;# 
   672  001B                     	;# 
   673  001C                     	;# 
   674  001D                     	;# 
   675  001E                     	;# 
   676  001F                     	;# 
   677  0081                     	;# 
   678  0085                     	;# 
   679  0086                     	;# 
   680  0087                     	;# 
   681  0089                     	;# 
   682  008C                     	;# 
   683  008D                     	;# 
   684  008E                     	;# 
   685  008F                     	;# 
   686  0090                     	;# 
   687  0091                     	;# 
   688  0092                     	;# 
   689  0093                     	;# 
   690  0093                     	;# 
   691  0094                     	;# 
   692  0095                     	;# 
   693  0095                     	;# 
   694  0096                     	;# 
   695  0096                     	;# 
   696  0098                     	;# 
   697  0099                     	;# 
   698  009C                     	;# 
   699  009D                     	;# 
   700  009F                     	;# 
   701  0108                     	;# 
   702  0109                     	;# 
   703  010C                     	;# 
   704  010C                     	;# 
   705  010D                     	;# 
   706  010D                     	;# 
   707  010E                     	;# 
   708  010F                     	;# 
   709  0185                     	;# 
   710  0186                     	;# 
   711  018C                     	;# 
   712  0000                     	;# 
   713  0001                     	;# 
   714  0002                     	;# 
   715  0003                     	;# 
   716  0004                     	;# 
   717  0005                     	;# 
   718  0006                     	;# 
   719  0007                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  000E                     	;# 
   727  000F                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0013                     	;# 
   732  0014                     	;# 
   733  0015                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0017                     	;# 
   737  0018                     	;# 
   738  0019                     	;# 
   739  001A                     	;# 
   740  001B                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  001D                     	;# 
   744  001E                     	;# 
   745  001F                     	;# 
   746  0081                     	;# 
   747  0085                     	;# 
   748  0086                     	;# 
   749  0087                     	;# 
   750  0089                     	;# 
   751  008C                     	;# 
   752  008D                     	;# 
   753  008E                     	;# 
   754  008F                     	;# 
   755  0090                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0093                     	;# 
   759  0093                     	;# 
   760  0094                     	;# 
   761  0095                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0096                     	;# 
   765  0098                     	;# 
   766  0099                     	;# 
   767  009C                     	;# 
   768  009D                     	;# 
   769  009F                     	;# 
   770  0108                     	;# 
   771  0109                     	;# 
   772  010C                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  010D                     	;# 
   776  010E                     	;# 
   777  010F                     	;# 
   778  0185                     	;# 
   779  0186                     	;# 
   780  018C                     	;# 
   781  0000                     	;# 
   782  0001                     	;# 
   783  0002                     	;# 
   784  0003                     	;# 
   785  0004                     	;# 
   786  0005                     	;# 
   787  0006                     	;# 
   788  0007                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000D                     	;# 
   794  000E                     	;# 
   795  000E                     	;# 
   796  000F                     	;# 
   797  0010                     	;# 
   798  0011                     	;# 
   799  0012                     	;# 
   800  0013                     	;# 
   801  0014                     	;# 
   802  0015                     	;# 
   803  0015                     	;# 
   804  0016                     	;# 
   805  0017                     	;# 
   806  0018                     	;# 
   807  0019                     	;# 
   808  001A                     	;# 
   809  001B                     	;# 
   810  001B                     	;# 
   811  001C                     	;# 
   812  001D                     	;# 
   813  001E                     	;# 
   814  001F                     	;# 
   815  0081                     	;# 
   816  0085                     	;# 
   817  0086                     	;# 
   818  0087                     	;# 
   819  0089                     	;# 
   820  008C                     	;# 
   821  008D                     	;# 
   822  008E                     	;# 
   823  008F                     	;# 
   824  0090                     	;# 
   825  0091                     	;# 
   826  0092                     	;# 
   827  0093                     	;# 
   828  0093                     	;# 
   829  0094                     	;# 
   830  0095                     	;# 
   831  0095                     	;# 
   832  0096                     	;# 
   833  0096                     	;# 
   834  0098                     	;# 
   835  0099                     	;# 
   836  009C                     	;# 
   837  009D                     	;# 
   838  009F                     	;# 
   839  0108                     	;# 
   840  0109                     	;# 
   841  010C                     	;# 
   842  010C                     	;# 
   843  010D                     	;# 
   844  010D                     	;# 
   845  010E                     	;# 
   846  010F                     	;# 
   847  0185                     	;# 
   848  0186                     	;# 
   849  018C                     	;# 
   850  0000                     	;# 
   851  0001                     	;# 
   852  0002                     	;# 
   853  0003                     	;# 
   854  0004                     	;# 
   855  0005                     	;# 
   856  0006                     	;# 
   857  0007                     	;# 
   858  0009                     	;# 
   859  000A                     	;# 
   860  000B                     	;# 
   861  000C                     	;# 
   862  000D                     	;# 
   863  000E                     	;# 
   864  000E                     	;# 
   865  000F                     	;# 
   866  0010                     	;# 
   867  0011                     	;# 
   868  0012                     	;# 
   869  0013                     	;# 
   870  0014                     	;# 
   871  0015                     	;# 
   872  0015                     	;# 
   873  0016                     	;# 
   874  0017                     	;# 
   875  0018                     	;# 
   876  0019                     	;# 
   877  001A                     	;# 
   878  001B                     	;# 
   879  001B                     	;# 
   880  001C                     	;# 
   881  001D                     	;# 
   882  001E                     	;# 
   883  001F                     	;# 
   884  0081                     	;# 
   885  0085                     	;# 
   886  0086                     	;# 
   887  0087                     	;# 
   888  0089                     	;# 
   889  008C                     	;# 
   890  008D                     	;# 
   891  008E                     	;# 
   892  008F                     	;# 
   893  0090                     	;# 
   894  0091                     	;# 
   895  0092                     	;# 
   896  0093                     	;# 
   897  0093                     	;# 
   898  0094                     	;# 
   899  0095                     	;# 
   900  0095                     	;# 
   901  0096                     	;# 
   902  0096                     	;# 
   903  0098                     	;# 
   904  0099                     	;# 
   905  009C                     	;# 
   906  009D                     	;# 
   907  009F                     	;# 
   908  0108                     	;# 
   909  0109                     	;# 
   910  010C                     	;# 
   911  010C                     	;# 
   912  010D                     	;# 
   913  010D                     	;# 
   914  010E                     	;# 
   915  010F                     	;# 
   916  0185                     	;# 
   917  0186                     	;# 
   918  018C                     	;# 
   919  0000                     	;# 
   920  0001                     	;# 
   921  0002                     	;# 
   922  0003                     	;# 
   923  0004                     	;# 
   924  0005                     	;# 
   925  0006                     	;# 
   926  0007                     	;# 
   927  0009                     	;# 
   928  000A                     	;# 
   929  000B                     	;# 
   930  000C                     	;# 
   931  000D                     	;# 
   932  000E                     	;# 
   933  000E                     	;# 
   934  000F                     	;# 
   935  0010                     	;# 
   936  0011                     	;# 
   937  0012                     	;# 
   938  0013                     	;# 
   939  0014                     	;# 
   940  0015                     	;# 
   941  0015                     	;# 
   942  0016                     	;# 
   943  0017                     	;# 
   944  0018                     	;# 
   945  0019                     	;# 
   946  001A                     	;# 
   947  001B                     	;# 
   948  001B                     	;# 
   949  001C                     	;# 
   950  001D                     	;# 
   951  001E                     	;# 
   952  001F                     	;# 
   953  0081                     	;# 
   954  0085                     	;# 
   955  0086                     	;# 
   956  0087                     	;# 
   957  0089                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  008F                     	;# 
   962  0090                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0093                     	;# 
   966  0093                     	;# 
   967  0094                     	;# 
   968  0095                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0096                     	;# 
   972  0098                     	;# 
   973  0099                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009F                     	;# 
   977  0108                     	;# 
   978  0109                     	;# 
   979  010C                     	;# 
   980  010C                     	;# 
   981  010D                     	;# 
   982  010D                     	;# 
   983  010E                     	;# 
   984  010F                     	;# 
   985  0185                     	;# 
   986  0186                     	;# 
   987  018C                     	;# 
   988  0000                     	;# 
   989  0001                     	;# 
   990  0002                     	;# 
   991  0003                     	;# 
   992  0004                     	;# 
   993  0005                     	;# 
   994  0006                     	;# 
   995  0007                     	;# 
   996  0009                     	;# 
   997  000A                     	;# 
   998  000B                     	;# 
   999  000C                     	;# 
  1000  000D                     	;# 
  1001  000E                     	;# 
  1002  000E                     	;# 
  1003  000F                     	;# 
  1004  0010                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0013                     	;# 
  1008  0014                     	;# 
  1009  0015                     	;# 
  1010  0015                     	;# 
  1011  0016                     	;# 
  1012  0017                     	;# 
  1013  0018                     	;# 
  1014  0019                     	;# 
  1015  001A                     	;# 
  1016  001B                     	;# 
  1017  001B                     	;# 
  1018  001C                     	;# 
  1019  001D                     	;# 
  1020  001E                     	;# 
  1021  001F                     	;# 
  1022  0081                     	;# 
  1023  0085                     	;# 
  1024  0086                     	;# 
  1025  0087                     	;# 
  1026  0089                     	;# 
  1027  008C                     	;# 
  1028  008D                     	;# 
  1029  008E                     	;# 
  1030  008F                     	;# 
  1031  0090                     	;# 
  1032  0091                     	;# 
  1033  0092                     	;# 
  1034  0093                     	;# 
  1035  0093                     	;# 
  1036  0094                     	;# 
  1037  0095                     	;# 
  1038  0095                     	;# 
  1039  0096                     	;# 
  1040  0096                     	;# 
  1041  0098                     	;# 
  1042  0099                     	;# 
  1043  009C                     	;# 
  1044  009D                     	;# 
  1045  009F                     	;# 
  1046  0108                     	;# 
  1047  0109                     	;# 
  1048  010C                     	;# 
  1049  010C                     	;# 
  1050  010D                     	;# 
  1051  010D                     	;# 
  1052  010E                     	;# 
  1053  010F                     	;# 
  1054  0185                     	;# 
  1055  0186                     	;# 
  1056  018C                     	;# 
  1057  0000                     	;# 
  1058  0001                     	;# 
  1059  0002                     	;# 
  1060  0003                     	;# 
  1061  0004                     	;# 
  1062  0005                     	;# 
  1063  0006                     	;# 
  1064  0007                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  000E                     	;# 
  1072  000F                     	;# 
  1073  0010                     	;# 
  1074  0011                     	;# 
  1075  0012                     	;# 
  1076  0013                     	;# 
  1077  0014                     	;# 
  1078  0015                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0017                     	;# 
  1082  0018                     	;# 
  1083  0019                     	;# 
  1084  001A                     	;# 
  1085  001B                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  001D                     	;# 
  1089  001E                     	;# 
  1090  001F                     	;# 
  1091  0081                     	;# 
  1092  0085                     	;# 
  1093  0086                     	;# 
  1094  0087                     	;# 
  1095  0089                     	;# 
  1096  008C                     	;# 
  1097  008D                     	;# 
  1098  008E                     	;# 
  1099  008F                     	;# 
  1100  0090                     	;# 
  1101  0091                     	;# 
  1102  0092                     	;# 
  1103  0093                     	;# 
  1104  0093                     	;# 
  1105  0094                     	;# 
  1106  0095                     	;# 
  1107  0095                     	;# 
  1108  0096                     	;# 
  1109  0096                     	;# 
  1110  0098                     	;# 
  1111  0099                     	;# 
  1112  009C                     	;# 
  1113  009D                     	;# 
  1114  009F                     	;# 
  1115  0108                     	;# 
  1116  0109                     	;# 
  1117  010C                     	;# 
  1118  010C                     	;# 
  1119  010D                     	;# 
  1120  010D                     	;# 
  1121  010E                     	;# 
  1122  010F                     	;# 
  1123  0185                     	;# 
  1124  0186                     	;# 
  1125  018C                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0009                     	;# 
  1135  000A                     	;# 
  1136  000B                     	;# 
  1137  000C                     	;# 
  1138  000D                     	;# 
  1139  000E                     	;# 
  1140  000E                     	;# 
  1141  000F                     	;# 
  1142  0010                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0014                     	;# 
  1147  0015                     	;# 
  1148  0015                     	;# 
  1149  0016                     	;# 
  1150  0017                     	;# 
  1151  0018                     	;# 
  1152  0019                     	;# 
  1153  001A                     	;# 
  1154  001B                     	;# 
  1155  001B                     	;# 
  1156  001C                     	;# 
  1157  001D                     	;# 
  1158  001E                     	;# 
  1159  001F                     	;# 
  1160  0081                     	;# 
  1161  0085                     	;# 
  1162  0086                     	;# 
  1163  0087                     	;# 
  1164  0089                     	;# 
  1165  008C                     	;# 
  1166  008D                     	;# 
  1167  008E                     	;# 
  1168  008F                     	;# 
  1169  0090                     	;# 
  1170  0091                     	;# 
  1171  0092                     	;# 
  1172  0093                     	;# 
  1173  0093                     	;# 
  1174  0094                     	;# 
  1175  0095                     	;# 
  1176  0095                     	;# 
  1177  0096                     	;# 
  1178  0096                     	;# 
  1179  0098                     	;# 
  1180  0099                     	;# 
  1181  009C                     	;# 
  1182  009D                     	;# 
  1183  009F                     	;# 
  1184  0108                     	;# 
  1185  0109                     	;# 
  1186  010C                     	;# 
  1187  010C                     	;# 
  1188  010D                     	;# 
  1189  010D                     	;# 
  1190  010E                     	;# 
  1191  010F                     	;# 
  1192  0185                     	;# 
  1193  0186                     	;# 
  1194  018C                     	;# 
  1195  0000                     	;# 
  1196  0001                     	;# 
  1197  0002                     	;# 
  1198  0003                     	;# 
  1199  0004                     	;# 
  1200  0005                     	;# 
  1201  0006                     	;# 
  1202  0007                     	;# 
  1203  0009                     	;# 
  1204  000A                     	;# 
  1205  000B                     	;# 
  1206  000C                     	;# 
  1207  000D                     	;# 
  1208  000E                     	;# 
  1209  000E                     	;# 
  1210  000F                     	;# 
  1211  0010                     	;# 
  1212  0011                     	;# 
  1213  0012                     	;# 
  1214  0013                     	;# 
  1215  0014                     	;# 
  1216  0015                     	;# 
  1217  0015                     	;# 
  1218  0016                     	;# 
  1219  0017                     	;# 
  1220  0018                     	;# 
  1221  0019                     	;# 
  1222  001A                     	;# 
  1223  001B                     	;# 
  1224  001B                     	;# 
  1225  001C                     	;# 
  1226  001D                     	;# 
  1227  001E                     	;# 
  1228  001F                     	;# 
  1229  0081                     	;# 
  1230  0085                     	;# 
  1231  0086                     	;# 
  1232  0087                     	;# 
  1233  0089                     	;# 
  1234  008C                     	;# 
  1235  008D                     	;# 
  1236  008E                     	;# 
  1237  008F                     	;# 
  1238  0090                     	;# 
  1239  0091                     	;# 
  1240  0092                     	;# 
  1241  0093                     	;# 
  1242  0093                     	;# 
  1243  0094                     	;# 
  1244  0095                     	;# 
  1245  0095                     	;# 
  1246  0096                     	;# 
  1247  0096                     	;# 
  1248  0098                     	;# 
  1249  0099                     	;# 
  1250  009C                     	;# 
  1251  009D                     	;# 
  1252  009F                     	;# 
  1253  0108                     	;# 
  1254  0109                     	;# 
  1255  010C                     	;# 
  1256  010C                     	;# 
  1257  010D                     	;# 
  1258  010D                     	;# 
  1259  010E                     	;# 
  1260  010F                     	;# 
  1261  0185                     	;# 
  1262  0186                     	;# 
  1263  018C                     	;# 
  1264  0000                     	;# 
  1265  0001                     	;# 
  1266  0002                     	;# 
  1267  0003                     	;# 
  1268  0004                     	;# 
  1269  0005                     	;# 
  1270  0006                     	;# 
  1271  0007                     	;# 
  1272  0009                     	;# 
  1273  000A                     	;# 
  1274  000B                     	;# 
  1275  000C                     	;# 
  1276  000D                     	;# 
  1277  000E                     	;# 
  1278  000E                     	;# 
  1279  000F                     	;# 
  1280  0010                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0013                     	;# 
  1284  0014                     	;# 
  1285  0015                     	;# 
  1286  0015                     	;# 
  1287  0016                     	;# 
  1288  0017                     	;# 
  1289  0018                     	;# 
  1290  0019                     	;# 
  1291  001A                     	;# 
  1292  001B                     	;# 
  1293  001B                     	;# 
  1294  001C                     	;# 
  1295  001D                     	;# 
  1296  001E                     	;# 
  1297  001F                     	;# 
  1298  0081                     	;# 
  1299  0085                     	;# 
  1300  0086                     	;# 
  1301  0087                     	;# 
  1302  0089                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  008F                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0093                     	;# 
  1311  0093                     	;# 
  1312  0094                     	;# 
  1313  0095                     	;# 
  1314  0095                     	;# 
  1315  0096                     	;# 
  1316  0096                     	;# 
  1317  0098                     	;# 
  1318  0099                     	;# 
  1319  009C                     	;# 
  1320  009D                     	;# 
  1321  009F                     	;# 
  1322  0108                     	;# 
  1323  0109                     	;# 
  1324  010C                     	;# 
  1325  010C                     	;# 
  1326  010D                     	;# 
  1327  010D                     	;# 
  1328  010E                     	;# 
  1329  010F                     	;# 
  1330  0185                     	;# 
  1331  0186                     	;# 
  1332  018C                     	;# 
  1333  001F                     _ADCON0	set	31
  1334  001E                     _ADRES	set	30
  1335  0005                     _PORTA	set	5
  1336  0006                     _PORTB	set	6
  1337  0007                     _PORTC	set	7
  1338  0010                     _T1CON	set	16
  1339  000F                     _TMR1H	set	15
  1340  000E                     _TMR1L	set	14
  1341  005F                     _GIE	set	95
  1342  00F9                     _GO_nDONE	set	249
  1343  005E                     _PEIE	set	94
  1344  002E                     _RA6	set	46
  1345  002F                     _RA7	set	47
  1346  0032                     _RB2	set	50
  1347  0033                     _RB3	set	51
  1348  0034                     _RB4	set	52
  1349  0035                     _RB5	set	53
  1350  0038                     _RC0	set	56
  1351  0039                     _RC1	set	57
  1352  003C                     _RC4	set	60
  1353  003D                     _RC5	set	61
  1354  003E                     _RC6	set	62
  1355  003F                     _RC7	set	63
  1356  0060                     _TMR1IF	set	96
  1357  009F                     _ADCON1	set	159
  1358  009D                     _FVRCON	set	157
  1359  0090                     _OSCCON	set	144
  1360  0085                     _TRISA	set	133
  1361  0086                     _TRISB	set	134
  1362  0087                     _TRISC	set	135
  1363  0095                     _WPUB	set	149
  1364  0408                     _PS0	set	1032
  1365  0409                     _PS1	set	1033
  1366  040A                     _PS2	set	1034
  1367  040B                     _PSA	set	1035
  1368  0460                     _TMR1IE	set	1120
  1369  0185                     _ANSELA	set	389
  1370  0186                     _ANSELB	set	390
  1371                           
  1372                           	psect	text0
  1373  0000                     __ptext0:	
  1374                           ; #config settings
  1375                           
  1376                           
  1377                           ;psect for function _TMR1_ISR
  1378  0000                     
  1379                           	psect	cinit
  1380  0013                     start_initialization:	
  1381  0013                     __initialization:	
  1382                           
  1383                           ; Clear objects allocated to COMMON
  1384  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1385  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1386  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1387  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1388                           
  1389                           ; Clear objects allocated to BANK0
  1390  0017  1383               	bcf	3,7	;select IRP bank0
  1391  0018  3020               	movlw	low __pbssBANK0
  1392  0019  0084               	movwf	4
  1393  001A  3057               	movlw	low (__pbssBANK0+55)
  1394  001B  158A  217C  118A   	fcall	clear_ram0
  1395                           
  1396                           ; Clear objects allocated to BANK1
  1397  001E  30A0               	movlw	low __pbssBANK1
  1398  001F  0084               	movwf	4
  1399  0020  30EE               	movlw	low (__pbssBANK1+78)
  1400  0021  158A  217C  118A   	fcall	clear_ram0
  1401                           
  1402                           ; Clear objects allocated to BANK2
  1403  0024  1783               	bsf	3,7	;select IRP bank2
  1404  0025  3020               	movlw	low __pbssBANK2
  1405  0026  0084               	movwf	4
  1406  0027  302A               	movlw	low (__pbssBANK2+10)
  1407  0028  158A  217C         	fcall	clear_ram0
  1408  002A                     end_of_initialization:	
  1409                           ;End of C runtime variable initialization code
  1410                           
  1411  002A                     __end_of__initialization:	
  1412  002A  0183               	clrf	3
  1413  002B  158A  2F04         	ljmp	_main	;jump to C main() function
  1414                           
  1415                           	psect	bssCOMMON
  1416  0076                     __pbssCOMMON:	
  1417  0076                     _LED:	
  1418  0076                     	ds	1
  1419  0077                     _Light:	
  1420  0077                     	ds	1
  1421  0078                     _Lights:	
  1422  0078                     	ds	1
  1423  0079                     _Sw:	
  1424  0079                     	ds	1
  1425                           
  1426                           	psect	bssBANK0
  1427  0020                     __pbssBANK0:	
  1428  0020                     _Buz1:	
  1429  0020                     	ds	12
  1430  002C                     _SYSC:	
  1431  002C                     	ds	5
  1432  0031                     _myMain:	
  1433  0031                     	ds	5
  1434  0036                     __CDS:	
  1435  0036                     	ds	4
  1436  003A                     _Timer1:	
  1437  003A                     	ds	3
  1438  003D                     _WDT:	
  1439  003D                     	ds	2
  1440  003F                     _Cmd:	
  1441  003F                     	ds	1
  1442  0040                     _LightsControl:	
  1443  0040                     	ds	1
  1444  0041                     _SwDetect:	
  1445  0041                     	ds	1
  1446  0042                     _Temp:	
  1447  0042                     	ds	7
  1448  0049                     _Lights1:	
  1449  0049                     	ds	5
  1450  004E                     _Lights2:	
  1451  004E                     	ds	5
  1452  0053                     _VarErrLED:	
  1453  0053                     	ds	4
  1454                           
  1455                           	psect	bssBANK1
  1456  00A0                     __pbssBANK1:	
  1457  00A0                     __PIR:	
  1458  00A0                     	ds	42
  1459  00CA                     _Load:	
  1460  00CA                     	ds	28
  1461  00E6                     _VarLED1:	
  1462  00E6                     	ds	4
  1463  00EA                     _VarLED2:	
  1464  00EA                     	ds	4
  1465                           
  1466                           	psect	bssBANK2
  1467  0120                     __pbssBANK2:	
  1468  0120                     _Sw1:	
  1469  0120                     	ds	5
  1470  0125                     _Sw2:	
  1471  0125                     	ds	5
  1472                           
  1473                           	psect	clrtext
  1474  097C                     clear_ram0:	
  1475                           ;	Called with FSR containing the base address, and
  1476                           ;	W with the last address+1
  1477                           
  1478  097C  0064               	clrwdt	;clear the watchdog before getting into this loop
  1479  097D                     clrloop0:	
  1480  097D  0180               	clrf	0	;clear RAM location pointed to by FSR
  1481  097E  0A84               	incf	4,f	;increment pointer
  1482  097F  0604               	xorwf	4,w	;XOR with final address
  1483  0980  1903               	btfsc	3,2	;have we reached the end yet?
  1484  0981  3400               	retlw	0	;all done for this memory range, return
  1485  0982  0604               	xorwf	4,w	;XOR again to restore value
  1486  0983  297D               	goto	clrloop0	;do the next byte
  1487                           
  1488                           	psect	cstackCOMMON
  1489  0070                     __pcstackCOMMON:	
  1490  0070                     ?_setLED_Initialization:	
  1491  0070                     ?_setLED_Main:	
  1492                           ; 0 bytes @ 0x0
  1493                           
  1494  0070                     ?_Fosc_Set:	
  1495                           ; 0 bytes @ 0x0
  1496                           
  1497  0070                     ?_IO_Set:	
  1498                           ; 0 bytes @ 0x0
  1499                           
  1500  0070                     ?_TMR1_Set:	
  1501                           ; 0 bytes @ 0x0
  1502                           
  1503  0070                     ?_ADC_Set:	
  1504                           ; 0 bytes @ 0x0
  1505                           
  1506  0070                     ?_WDT_Set:	
  1507                           ; 0 bytes @ 0x0
  1508                           
  1509  0070                     ?_TMR1_ISR:	
  1510                           ; 0 bytes @ 0x0
  1511                           
  1512  0070                     ??_TMR1_ISR:	
  1513                           ; 0 bytes @ 0x0
  1514                           
  1515  0070                     ?_Timeout_Counter:	
  1516                           ; 0 bytes @ 0x0
  1517                           
  1518  0070                     ?_set_TimeoutCleared:	
  1519                           ; 0 bytes @ 0x0
  1520                           
  1521  0070                     ?_WDT_Clearing:	
  1522                           ; 0 bytes @ 0x0
  1523                           
  1524  0070                     ?_myMain_Initialization:	
  1525                           ; 0 bytes @ 0x0
  1526                           
  1527  0070                     ?_SYSC_Initialization:	
  1528                           ; 0 bytes @ 0x0
  1529                           
  1530  0070                     ?_Temp_Initialization:	
  1531                           ; 0 bytes @ 0x0
  1532                           
  1533  0070                     ?_Load_Initialization:	
  1534                           ; 0 bytes @ 0x0
  1535                           
  1536  0070                     ?_Lights_Initialization:	
  1537                           ; 0 bytes @ 0x0
  1538                           
  1539  0070                     ?_PIR_Initialization:	
  1540                           ; 0 bytes @ 0x0
  1541                           
  1542  0070                     ?_Switch_Initialization:	
  1543                           ; 0 bytes @ 0x0
  1544                           
  1545  0070                     ?_DetectSYSC_Signal:	
  1546                           ; 0 bytes @ 0x0
  1547                           
  1548  0070                     ?_getLoad_AD:	
  1549                           ; 0 bytes @ 0x0
  1550                           
  1551  0070                     ?_getTemp_AD:	
  1552                           ; 0 bytes @ 0x0
  1553                           
  1554  0070                     ?_my_MainTimer:	
  1555                           ; 0 bytes @ 0x0
  1556                           
  1557  0070                     ?_SYSC_Main:	
  1558                           ; 0 bytes @ 0x0
  1559                           
  1560  0070                     ?_Temp_Main:	
  1561                           ; 0 bytes @ 0x0
  1562                           
  1563  0070                     ?_Load_Main:	
  1564                           ; 0 bytes @ 0x0
  1565                           
  1566  0070                     ?_Lights_Main:	
  1567                           ; 0 bytes @ 0x0
  1568                           
  1569  0070                     ?_Switch_Main:	
  1570                           ; 0 bytes @ 0x0
  1571                           
  1572  0070                     ?_PIR_Main:	
  1573                           ; 0 bytes @ 0x0
  1574                           
  1575  0070                     ?_Exception_Main:	
  1576                           ; 0 bytes @ 0x0
  1577                           
  1578  0070                     ?_setLights_SwOn:	
  1579                           ; 0 bytes @ 0x0
  1580                           
  1581  0070                     ?_setLights_SwOff:	
  1582                           ; 0 bytes @ 0x0
  1583                           
  1584  0070                     ?_setLoad_AH_AL_Restore:	
  1585                           ; 0 bytes @ 0x0
  1586                           
  1587  0070                     ?_setTemp_Initialization:	
  1588                           ; 0 bytes @ 0x0
  1589                           
  1590  0070                     ?_setTemp_Main:	
  1591                           ; 0 bytes @ 0x0
  1592                           
  1593  0070                     ?_setSYSC_Initialization:	
  1594                           ; 0 bytes @ 0x0
  1595                           
  1596  0070                     ?_setSYSC_Main:	
  1597                           ; 0 bytes @ 0x0
  1598                           
  1599  0070                     ?_setSw_Main:	
  1600                           ; 0 bytes @ 0x0
  1601                           
  1602  0070                     ?_setLights_Initialization:	
  1603                           ; 0 bytes @ 0x0
  1604                           
  1605  0070                     ?_setLights_Main:	
  1606                           ; 0 bytes @ 0x0
  1607                           
  1608  0070                     ?_Lights_Control:	
  1609                           ; 0 bytes @ 0x0
  1610                           
  1611  0070                     ?_setLights_Line:	
  1612                           ; 0 bytes @ 0x0
  1613                           
  1614  0070                     ?_Buzzer_Initialization:	
  1615                           ; 0 bytes @ 0x0
  1616                           
  1617  0070                     ?_Buzzer_Main:	
  1618                           ; 0 bytes @ 0x0
  1619                           
  1620  0070                     ?_CDS_Initialization:	
  1621                           ; 0 bytes @ 0x0
  1622                           
  1623  0070                     ?_CDS_Main:	
  1624                           ; 0 bytes @ 0x0
  1625                           
  1626  0070                     ?_LedPointSelect:	
  1627                           ; 0 bytes @ 0x0
  1628                           
  1629  0070                     ?_LED_Initialization:	
  1630                           ; 0 bytes @ 0x0
  1631                           
  1632  0070                     ?_LED_Main:	
  1633                           ; 0 bytes @ 0x0
  1634                           
  1635  0070                     ?_Mcu_Initialization:	
  1636                           ; 0 bytes @ 0x0
  1637                           
  1638  0070                     ?_ISR:	
  1639                           ; 0 bytes @ 0x0
  1640                           
  1641  0070                     ??_ISR:	
  1642                           ; 0 bytes @ 0x0
  1643                           
  1644  0070                     ?_WDT_Main:	
  1645                           ; 0 bytes @ 0x0
  1646                           
  1647  0070                     ?_TouchPower:	
  1648                           ; 0 bytes @ 0x0
  1649                           
  1650  0070                     ?_SwPointSelect:	
  1651                           ; 0 bytes @ 0x0
  1652                           
  1653  0070                     ?_LightsPointSelect:	
  1654                           ; 0 bytes @ 0x0
  1655                           
  1656  0070                     ?_getLights_Status:	
  1657                           ; 0 bytes @ 0x0
  1658                           
  1659  0070                     ?_getAll_Lights_Line:	
  1660                           ; 1 bytes @ 0x0
  1661                           
  1662  0070                     ?_getLight_LoadGO:	
  1663                           ; 1 bytes @ 0x0
  1664                           
  1665  0070                     ?_getLight_Load_Status:	
  1666                           ; 1 bytes @ 0x0
  1667                           
  1668  0070                     ?_getSw_KeyStatus:	
  1669                           ; 1 bytes @ 0x0
  1670                           
  1671  0070                     ?_getLights_Allow_Condition:	
  1672                           ; 1 bytes @ 0x0
  1673                           
  1674  0070                     ?_getCDS_Status:	
  1675                           ; 1 bytes @ 0x0
  1676                           
  1677  0070                     ?_getMain_All_LightsStatus:	
  1678                           ; 1 bytes @ 0x0
  1679                           
  1680  0070                     ?_getMain_All_Error_Status:	
  1681                           ; 1 bytes @ 0x0
  1682                           
  1683  0070                     ?_getMain_Lights_Count:	
  1684                           ; 1 bytes @ 0x0
  1685                           
  1686  0070                     ?_getLoad_OK:	
  1687                           ; 1 bytes @ 0x0
  1688                           
  1689  0070                     getLights_Allow_Condition@lights:	
  1690                           ; 1 bytes @ 0x0
  1691                           
  1692                           
  1693                           ; 1 bytes @ 0x0
  1694  0070                     	ds	4
  1695  0074                     ??_Fosc_Set:	
  1696  0074                     ??_IO_Set:	
  1697                           ; 0 bytes @ 0x4
  1698                           
  1699  0074                     ??_TMR1_Set:	
  1700                           ; 0 bytes @ 0x4
  1701                           
  1702  0074                     ??_ADC_Set:	
  1703                           ; 0 bytes @ 0x4
  1704                           
  1705  0074                     ??_WDT_Set:	
  1706                           ; 0 bytes @ 0x4
  1707                           
  1708  0074                     ??_Timeout_Counter:	
  1709                           ; 0 bytes @ 0x4
  1710                           
  1711  0074                     ??_set_TimeoutCleared:	
  1712                           ; 0 bytes @ 0x4
  1713                           
  1714  0074                     ??_WDT_Clearing:	
  1715                           ; 0 bytes @ 0x4
  1716                           
  1717  0074                     ??_myMain_Initialization:	
  1718                           ; 0 bytes @ 0x4
  1719                           
  1720  0074                     ??_SYSC_Initialization:	
  1721                           ; 0 bytes @ 0x4
  1722                           
  1723  0074                     ??_Temp_Initialization:	
  1724                           ; 0 bytes @ 0x4
  1725                           
  1726  0074                     ??_PIR_Initialization:	
  1727                           ; 0 bytes @ 0x4
  1728                           
  1729  0074                     ??_Switch_Initialization:	
  1730                           ; 0 bytes @ 0x4
  1731                           
  1732  0074                     ??_DetectSYSC_Signal:	
  1733                           ; 0 bytes @ 0x4
  1734                           
  1735  0074                     ??_getAll_Lights_Line:	
  1736                           ; 0 bytes @ 0x4
  1737                           
  1738  0074                     ??_setLoad_AH_AL_Restore:	
  1739                           ; 0 bytes @ 0x4
  1740                           
  1741  0074                     ??_getLight_LoadGO:	
  1742                           ; 0 bytes @ 0x4
  1743                           
  1744  0074                     ??_getLight_Load_Status:	
  1745                           ; 0 bytes @ 0x4
  1746                           
  1747  0074                     ??_setTemp_Initialization:	
  1748                           ; 0 bytes @ 0x4
  1749                           
  1750  0074                     ??_setSYSC_Initialization:	
  1751                           ; 0 bytes @ 0x4
  1752                           
  1753  0074                     ??_getSw_KeyStatus:	
  1754                           ; 0 bytes @ 0x4
  1755                           
  1756  0074                     ??_setLights_Line:	
  1757                           ; 0 bytes @ 0x4
  1758                           
  1759  0074                     ??_Buzzer_Initialization:	
  1760                           ; 0 bytes @ 0x4
  1761                           
  1762  0074                     ??_Buzzer_Main:	
  1763                           ; 0 bytes @ 0x4
  1764                           
  1765  0074                     ??_CDS_Initialization:	
  1766                           ; 0 bytes @ 0x4
  1767                           
  1768  0074                     ??_getCDS_Status:	
  1769                           ; 0 bytes @ 0x4
  1770                           
  1771  0074                     ??_LedPointSelect:	
  1772                           ; 0 bytes @ 0x4
  1773                           
  1774  0074                     ??_WDT_Main:	
  1775                           ; 0 bytes @ 0x4
  1776                           
  1777  0074                     ??_getMain_All_LightsStatus:	
  1778                           ; 0 bytes @ 0x4
  1779                           
  1780  0074                     ??_getMain_All_Error_Status:	
  1781                           ; 0 bytes @ 0x4
  1782                           
  1783  0074                     ??_getMain_Lights_Count:	
  1784                           ; 0 bytes @ 0x4
  1785                           
  1786  0074                     ??_getLoad_OK:	
  1787                           ; 0 bytes @ 0x4
  1788                           
  1789  0074                     ??_TouchPower:	
  1790                           ; 0 bytes @ 0x4
  1791                           
  1792  0074                     ??_SwPointSelect:	
  1793                           ; 0 bytes @ 0x4
  1794                           
  1795  0074                     ??_LightsPointSelect:	
  1796                           ; 0 bytes @ 0x4
  1797                           
  1798  0074                     ??___wmul:	
  1799                           ; 0 bytes @ 0x4
  1800                           
  1801  0074                     ??___awdiv:	
  1802                           ; 0 bytes @ 0x4
  1803                           
  1804  0074                     ??___lwdiv:	
  1805                           ; 0 bytes @ 0x4
  1806                           
  1807  0074                     ?_getAD:	
  1808                           ; 0 bytes @ 0x4
  1809                           
  1810  0074                     getCDS_Status@status:	
  1811                           ; 1 bytes @ 0x4
  1812                           
  1813  0074                     getAD@adcon1:	
  1814                           ; 1 bytes @ 0x4
  1815                           
  1816  0074                     getMain_All_LightsStatus@status:	
  1817                           ; 1 bytes @ 0x4
  1818                           
  1819  0074                     getLoad_OK@ok:	
  1820                           ; 1 bytes @ 0x4
  1821                           
  1822  0074                     getSw_KeyStatus@status:	
  1823                           ; 1 bytes @ 0x4
  1824                           
  1825  0074                     setLights_Line@lights:	
  1826                           ; 1 bytes @ 0x4
  1827                           
  1828  0074                     getLight_LoadGO@loadgo:	
  1829                           ; 1 bytes @ 0x4
  1830                           
  1831  0074                     getLight_Load_Status@loadstatus:	
  1832                           ; 1 bytes @ 0x4
  1833                           
  1834  0074                     ___wmul@product:	
  1835                           ; 1 bytes @ 0x4
  1836                           
  1837                           
  1838                           ; 2 bytes @ 0x4
  1839  0074                     	ds	1
  1840  0075                     ??_getAD:	
  1841  0075                     ??_SYSC_Main:	
  1842                           ; 0 bytes @ 0x5
  1843                           
  1844  0075                     ??_setSYSC_Main:	
  1845                           ; 0 bytes @ 0x5
  1846                           
  1847  0075                     ??_getLights_Allow_Condition:	
  1848                           ; 0 bytes @ 0x5
  1849                           
  1850  0075                     ??_setBuz:	
  1851                           ; 0 bytes @ 0x5
  1852                           
  1853  0075                     ??_Mcu_Initialization:	
  1854                           ; 0 bytes @ 0x5
  1855                           
  1856  0075                     LedPointSelect@led:	
  1857                           ; 0 bytes @ 0x5
  1858                           
  1859  0075                     getAD@adcon0:	
  1860                           ; 1 bytes @ 0x5
  1861                           
  1862  0075                     setLoad_AH_AL_Restore@i:	
  1863                           ; 1 bytes @ 0x5
  1864                           
  1865  0075                     SwPointSelect@sw:	
  1866                           ; 1 bytes @ 0x5
  1867                           
  1868  0075                     getSw_KeyStatus@sw:	
  1869                           ; 1 bytes @ 0x5
  1870                           
  1871  0075                     LightsPointSelect@lights:	
  1872                           ; 1 bytes @ 0x5
  1873                           
  1874  0075                     getAll_Lights_Line@line:	
  1875                           ; 1 bytes @ 0x5
  1876                           
  1877                           
  1878                           ; 1 bytes @ 0x5
  1879  0075                     	ds	1
  1880  0076                     ??_setLED_Initialization:	
  1881  0076                     ??_setLED:	
  1882                           ; 0 bytes @ 0x6
  1883                           
  1884  0076                     ??_Load_Initialization:	
  1885                           ; 0 bytes @ 0x6
  1886                           
  1887  0076                     ??_Lights_Initialization:	
  1888                           ; 0 bytes @ 0x6
  1889                           
  1890  0076                     ??_Temp_Main:	
  1891                           ; 0 bytes @ 0x6
  1892                           
  1893  0076                     ??_Lights_Main:	
  1894                           ; 0 bytes @ 0x6
  1895                           
  1896  0076                     ??_Switch_Main:	
  1897                           ; 0 bytes @ 0x6
  1898                           
  1899  0076                     ??_getLights_Status:	
  1900                           ; 0 bytes @ 0x6
  1901                           
  1902  0076                     ??_setLights_SwOn:	
  1903                           ; 0 bytes @ 0x6
  1904                           
  1905  0076                     ??_setLights_SwOff:	
  1906                           ; 0 bytes @ 0x6
  1907                           
  1908  0076                     ??_setLights_Initialization:	
  1909                           ; 0 bytes @ 0x6
  1910                           
  1911  0076                     ??_setLights_Main:	
  1912                           ; 0 bytes @ 0x6
  1913                           
  1914  0076                     ??_LED_Initialization:	
  1915                           ; 0 bytes @ 0x6
  1916                           
  1917  0076                     ??_LED_Main:	
  1918                           ; 0 bytes @ 0x6
  1919                           
  1920                           
  1921                           	psect	cstackBANK0
  1922  0057                     __pcstackBANK0:	
  1923                           ; 0 bytes @ 0x6
  1924                           
  1925  0057                     ??_setLED_Main:	
  1926  0057                     ?_setLED:	
  1927                           ; 0 bytes @ 0x0
  1928                           
  1929  0057                     ??_getLoad_AD:	
  1930                           ; 0 bytes @ 0x0
  1931                           
  1932  0057                     ??_getTemp_AD:	
  1933                           ; 0 bytes @ 0x0
  1934                           
  1935  0057                     ??_CDS_Main:	
  1936                           ; 0 bytes @ 0x0
  1937                           
  1938  0057                     ?_getCDS_AD:	
  1939                           ; 0 bytes @ 0x0
  1940                           
  1941  0057                     ?_setLights_Trigger:	
  1942                           ; 0 bytes @ 0x0
  1943                           
  1944  0057                     ?___wmul:	
  1945                           ; 0 bytes @ 0x0
  1946                           
  1947  0057                     ?___awdiv:	
  1948                           ; 2 bytes @ 0x0
  1949                           
  1950  0057                     ?___lwdiv:	
  1951                           ; 2 bytes @ 0x0
  1952                           
  1953  0057                     getCDS_AD@channel2:	
  1954                           ; 2 bytes @ 0x0
  1955                           
  1956  0057                     setLED@command:	
  1957                           ; 1 bytes @ 0x0
  1958                           
  1959  0057                     getMain_Lights_Count@count:	
  1960                           ; 1 bytes @ 0x0
  1961                           
  1962  0057                     setLights_Initialization@lights:	
  1963                           ; 1 bytes @ 0x0
  1964                           
  1965  0057                     getLights_Status@lights:	
  1966                           ; 1 bytes @ 0x0
  1967                           
  1968  0057                     setLights_Trigger@command:	
  1969                           ; 1 bytes @ 0x0
  1970                           
  1971  0057                     getLights_Allow_Condition@allow:	
  1972                           ; 1 bytes @ 0x0
  1973                           
  1974  0057                     _getMain_All_Error_Status$2426:	
  1975                           ; 1 bytes @ 0x0
  1976                           
  1977  0057                     ___wmul@multiplier:	
  1978                           ; 2 bytes @ 0x0
  1979                           
  1980  0057                     ___awdiv@divisor:	
  1981                           ; 2 bytes @ 0x0
  1982                           
  1983  0057                     ___lwdiv@divisor:	
  1984                           ; 2 bytes @ 0x0
  1985                           
  1986                           
  1987                           ; 2 bytes @ 0x0
  1988  0057                     	ds	1
  1989  0058                     ??_getCDS_AD:	
  1990  0058                     ??_setLights_Trigger:	
  1991                           ; 0 bytes @ 0x1
  1992                           
  1993  0058                     setLED@led:	
  1994                           ; 0 bytes @ 0x1
  1995                           
  1996  0058                     getMain_Lights_Count@status1:	
  1997                           ; 1 bytes @ 0x1
  1998                           
  1999  0058                     getLights_Status@status:	
  2000                           ; 1 bytes @ 0x1
  2001                           
  2002  0058                     _getLights_Allow_Condition$4827:	
  2003                           ; 1 bytes @ 0x1
  2004                           
  2005                           
  2006                           ; 1 bytes @ 0x1
  2007  0058                     	ds	1
  2008  0059                     ?_setLights:	
  2009  0059                     setLED_Initialization@led:	
  2010                           ; 0 bytes @ 0x2
  2011                           
  2012  0059                     setLED_Main@led:	
  2013                           ; 1 bytes @ 0x2
  2014                           
  2015  0059                     getMain_Lights_Count@status2:	
  2016                           ; 1 bytes @ 0x2
  2017                           
  2018  0059                     getLoad_AD@channel:	
  2019                           ; 1 bytes @ 0x2
  2020                           
  2021  0059                     getTemp_AD@channel:	
  2022                           ; 1 bytes @ 0x2
  2023                           
  2024  0059                     setLights@status:	
  2025                           ; 1 bytes @ 0x2
  2026                           
  2027  0059                     setLights_Trigger@lights:	
  2028                           ; 1 bytes @ 0x2
  2029                           
  2030  0059                     _getMain_All_Error_Status$2427:	
  2031                           ; 1 bytes @ 0x2
  2032                           
  2033  0059                     ___wmul@multiplicand:	
  2034                           ; 2 bytes @ 0x2
  2035                           
  2036  0059                     ___awdiv@dividend:	
  2037                           ; 2 bytes @ 0x2
  2038                           
  2039  0059                     ___lwdiv@dividend:	
  2040                           ; 2 bytes @ 0x2
  2041                           
  2042                           
  2043                           ; 2 bytes @ 0x2
  2044  0059                     	ds	1
  2045  005A                     ??_setLights:	
  2046  005A                     getCDS_AD@i:	
  2047                           ; 0 bytes @ 0x3
  2048                           
  2049  005A                     getLoad_AD@k:	
  2050                           ; 1 bytes @ 0x3
  2051                           
  2052  005A                     getTemp_AD@ADRES:	
  2053                           ; 1 bytes @ 0x3
  2054                           
  2055  005A                     setLights_SwOn@sw:	
  2056                           ; 1 bytes @ 0x3
  2057                           
  2058  005A                     setLights_SwOff@sw:	
  2059                           ; 1 bytes @ 0x3
  2060                           
  2061                           
  2062                           ; 1 bytes @ 0x3
  2063  005A                     	ds	1
  2064  005B                     getCDS_AD@j:	
  2065  005B                     getMain_All_Error_Status@command:	
  2066                           ; 1 bytes @ 0x4
  2067                           
  2068  005B                     getLoad_AD@j:	
  2069                           ; 1 bytes @ 0x4
  2070                           
  2071  005B                     setLights@lights:	
  2072                           ; 1 bytes @ 0x4
  2073                           
  2074  005B                     ___awdiv@counter:	
  2075                           ; 1 bytes @ 0x4
  2076                           
  2077  005B                     ___lwdiv@counter:	
  2078                           ; 1 bytes @ 0x4
  2079                           
  2080                           
  2081                           ; 1 bytes @ 0x4
  2082  005B                     	ds	1
  2083  005C                     getCDS_AD@channel1:	
  2084  005C                     getMain_All_Error_Status@status:	
  2085                           ; 1 bytes @ 0x5
  2086                           
  2087  005C                     getLoad_AD@ADRES:	
  2088                           ; 1 bytes @ 0x5
  2089                           
  2090  005C                     setLights_Main@lights:	
  2091                           ; 1 bytes @ 0x5
  2092                           
  2093  005C                     ___awdiv@sign:	
  2094                           ; 1 bytes @ 0x5
  2095                           
  2096  005C                     ___lwdiv@quotient:	
  2097                           ; 1 bytes @ 0x5
  2098                           
  2099                           
  2100                           ; 2 bytes @ 0x5
  2101  005C                     	ds	1
  2102  005D                     ??_PIR_Main:	
  2103  005D                     ??_setSw_Main:	
  2104                           ; 0 bytes @ 0x6
  2105                           
  2106  005D                     getLoad_AD@i:	
  2107                           ; 0 bytes @ 0x6
  2108                           
  2109  005D                     ___awdiv@quotient:	
  2110                           ; 1 bytes @ 0x6
  2111                           
  2112                           
  2113                           ; 2 bytes @ 0x6
  2114  005D                     	ds	1
  2115  005E                     ??_Load_Main:	
  2116                           
  2117                           ; 0 bytes @ 0x7
  2118  005E                     	ds	1
  2119  005F                     ?_getPIR_AD:	
  2120  005F                     ??_Lights_Control:	
  2121                           ; 0 bytes @ 0x8
  2122                           
  2123  005F                     ?_setBuz:	
  2124                           ; 0 bytes @ 0x8
  2125                           
  2126  005F                     getPIR_AD@channel2:	
  2127                           ; 0 bytes @ 0x8
  2128                           
  2129  005F                     setSw_Main@sw:	
  2130                           ; 1 bytes @ 0x8
  2131                           
  2132  005F                     setBuz@time:	
  2133                           ; 1 bytes @ 0x8
  2134                           
  2135                           
  2136                           ; 2 bytes @ 0x8
  2137  005F                     	ds	1
  2138  0060                     ??_getPIR_AD:	
  2139  0060                     Load_Main@error:	
  2140                           ; 0 bytes @ 0x9
  2141                           
  2142                           
  2143                           ; 1 bytes @ 0x9
  2144  0060                     	ds	1
  2145  0061                     setBuz@count:	
  2146  0061                     PIR_Main@error:	
  2147                           ; 1 bytes @ 0xA
  2148                           
  2149  0061                     Lights_Control@lights:	
  2150                           ; 1 bytes @ 0xA
  2151                           
  2152  0061                     _Load_Main$2716:	
  2153                           ; 1 bytes @ 0xA
  2154                           
  2155                           
  2156                           ; 2 bytes @ 0xA
  2157  0061                     	ds	1
  2158  0062                     ??_my_MainTimer:	
  2159  0062                     ??_Exception_Main:	
  2160                           ; 0 bytes @ 0xB
  2161                           
  2162  0062                     ??_setTemp_Main:	
  2163                           ; 0 bytes @ 0xB
  2164                           
  2165  0062                     PIR_Main@cds:	
  2166                           ; 0 bytes @ 0xB
  2167                           
  2168                           
  2169                           ; 1 bytes @ 0xB
  2170  0062                     	ds	1
  2171  0063                     Exception_Main@lights:	
  2172  0063                     Load_Main@ErrorCountValue:	
  2173                           ; 1 bytes @ 0xC
  2174                           
  2175  0063                     setTemp_Main@error:	
  2176                           ; 1 bytes @ 0xC
  2177                           
  2178  0063                     getPIR_AD@j:	
  2179                           ; 1 bytes @ 0xC
  2180                           
  2181  0063                     _PIR_Main$3238:	
  2182                           ; 1 bytes @ 0xC
  2183                           
  2184                           
  2185                           ; 2 bytes @ 0xC
  2186  0063                     	ds	1
  2187  0064                     Exception_Main@count:	
  2188  0064                     Load_Main@Load_RunStatus:	
  2189                           ; 1 bytes @ 0xD
  2190                           
  2191  0064                     setTemp_Main@TempGO:	
  2192                           ; 1 bytes @ 0xD
  2193                           
  2194  0064                     getPIR_AD@channel1:	
  2195                           ; 1 bytes @ 0xD
  2196                           
  2197                           
  2198                           ; 1 bytes @ 0xD
  2199  0064                     	ds	1
  2200  0065                     Exception_Main@error:	
  2201  0065                     Load_Main@LightsCount:	
  2202                           ; 1 bytes @ 0xE
  2203                           
  2204  0065                     setTemp_Main@SafeValue:	
  2205                           ; 1 bytes @ 0xE
  2206                           
  2207  0065                     PIR_Main@Enable_Switch:	
  2208                           ; 1 bytes @ 0xE
  2209                           
  2210  0065                     getPIR_AD@VRAD1:	
  2211                           ; 1 bytes @ 0xE
  2212                           
  2213                           
  2214                           ; 1 bytes @ 0xE
  2215  0065                     	ds	1
  2216  0066                     Exception_Main@status:	
  2217  0066                     setTemp_Main@DangerValue:	
  2218                           ; 1 bytes @ 0xF
  2219                           
  2220  0066                     PIR_Main@TriggerValue:	
  2221                           ; 1 bytes @ 0xF
  2222                           
  2223  0066                     getPIR_AD@VRAD:	
  2224                           ; 1 bytes @ 0xF
  2225                           
  2226  0066                     Load_Main@i:	
  2227                           ; 1 bytes @ 0xF
  2228                           
  2229                           
  2230                           ; 2 bytes @ 0xF
  2231  0066                     	ds	1
  2232  0067                     setTemp_Main@AD:	
  2233  0067                     PIR_Main@LightsStatus:	
  2234                           ; 1 bytes @ 0x10
  2235                           
  2236  0067                     getPIR_AD@i:	
  2237                           ; 1 bytes @ 0x10
  2238                           
  2239  0067                     Exception_Main@i:	
  2240                           ; 1 bytes @ 0x10
  2241                           
  2242                           
  2243                           ; 2 bytes @ 0x10
  2244  0067                     	ds	2
  2245  0069                     Exception_Main@i_2440:	
  2246                           
  2247                           ; 2 bytes @ 0x12
  2248  0069                     	ds	2
  2249  006B                     ?_main:	
  2250  006B                     main@argc:	
  2251                           ; 2 bytes @ 0x14
  2252                           
  2253                           
  2254                           ; 2 bytes @ 0x14
  2255  006B                     	ds	2
  2256  006D                     main@argv:	
  2257                           
  2258                           ; 2 bytes @ 0x16
  2259  006D                     	ds	2
  2260  006F                     ??_main:	
  2261                           
  2262                           ; 0 bytes @ 0x18
  2263  006F                     	ds	1
  2264                           
  2265                           	psect	maintext
  2266  0F04                     __pmaintext:	
  2267 ;;
  2268 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2269 ;;
  2270 ;; *************** function _main *****************
  2271 ;; Defined at:
  2272 ;;		line 7 in file "../src/Main_B1.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;  argc            2   20[BANK0 ] int 
  2275 ;;  argv            2   22[BANK0 ] PTR PTR unsigned char 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;		None
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  2   20[BANK0 ] int 
  2280 ;; Registers used:
  2281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 17F/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2287 ;;      Params:         0       4       0       0
  2288 ;;      Locals:         0       0       0       0
  2289 ;;      Temps:          0       1       0       0
  2290 ;;      Totals:         0       5       0       0
  2291 ;;Total ram usage:        5 bytes
  2292 ;; Hardware stack levels required when called:    7
  2293 ;; This function calls:
  2294 ;;		_Buzzer_Initialization
  2295 ;;		_Buzzer_Main
  2296 ;;		_CDS_Initialization
  2297 ;;		_CDS_Main
  2298 ;;		_DetectSYSC_Signal
  2299 ;;		_Exception_Main
  2300 ;;		_LED_Initialization
  2301 ;;		_LED_Main
  2302 ;;		_Lights_Initialization
  2303 ;;		_Lights_Main
  2304 ;;		_Load_Initialization
  2305 ;;		_Load_Main
  2306 ;;		_Mcu_Initialization
  2307 ;;		_PIR_Initialization
  2308 ;;		_PIR_Main
  2309 ;;		_SYSC_Initialization
  2310 ;;		_SYSC_Main
  2311 ;;		_Switch_Initialization
  2312 ;;		_Switch_Main
  2313 ;;		_Temp_Initialization
  2314 ;;		_Temp_Main
  2315 ;;		_WDT_Main
  2316 ;;		_getCDS_AD
  2317 ;;		_getLoad_AD
  2318 ;;		_getPIR_AD
  2319 ;;		_getTemp_AD
  2320 ;;		_myMain_Initialization
  2321 ;;		_my_MainTimer
  2322 ;; This function is called by:
  2323 ;;		Startup code after reset
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           
  2328                           ;psect for function _main
  2329  0F04                     _main:	
  2330                           
  2331                           ;Main_B1.c: 8: myMain_Initialization();
  2332                           
  2333                           ;incstack = 0
  2334                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2335  0F04  158A  211F  158A   	fcall	_myMain_Initialization
  2336                           
  2337                           ;Main_B1.c: 9: Mcu_Initialization();
  2338  0F07  158A  21DF  158A   	fcall	_Mcu_Initialization
  2339                           
  2340                           ;Main_B1.c: 10: ;;
  2341                           ;Main_B1.c: 11: LED_Initialization();
  2342  0F0A  158A  219A  158A   	fcall	_LED_Initialization
  2343                           
  2344                           ;Main_B1.c: 12: Buzzer_Initialization();
  2345  0F0D  158A  212F  158A   	fcall	_Buzzer_Initialization
  2346                           
  2347                           ;Main_B1.c: 14: SYSC_Initialization();
  2348  0F10  158A  2123  158A   	fcall	_SYSC_Initialization
  2349                           
  2350                           ;Main_B1.c: 15: Temp_Initialization();
  2351  0F13  158A  2129  158A   	fcall	_Temp_Initialization
  2352                           
  2353                           ;Main_B1.c: 16: Load_Initialization();
  2354  0F16  158A  2120  158A   	fcall	_Load_Initialization
  2355                           
  2356                           ;Main_B1.c: 17: ;;
  2357                           ;Main_B1.c: 18: ;;
  2358                           ;Main_B1.c: 20: ;;
  2359                           ;Main_B1.c: 21: Lights_Initialization();
  2360  0F19  158A  2164  158A   	fcall	_Lights_Initialization
  2361                           
  2362                           ;Main_B1.c: 22: CDS_Initialization();
  2363  0F1C  158A  2133  158A   	fcall	_CDS_Initialization
  2364                           
  2365                           ;Main_B1.c: 23: PIR_Initialization();
  2366  0F1F  158A  2184  158A   	fcall	_PIR_Initialization
  2367                           
  2368                           ;Main_B1.c: 24: Switch_Initialization();
  2369  0F22  158A  211D  158A   	fcall	_Switch_Initialization
  2370  0F25                     l6167:	
  2371                           ;Main_B1.c: 25: ;;
  2372                           ;Main_B1.c: 26: ;;
  2373                           ;Main_B1.c: 27: ;;
  2374                           ;Main_B1.c: 28: ;;
  2375                           ;Main_B1.c: 30: while (1) {
  2376                           
  2377                           
  2378                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2379  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0F27  1C31               	btfss	_myMain,0
  2382  0F28  2F48               	goto	l6179
  2383                           
  2384                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2385  0F29  158A  21A6  158A   	fcall	_DetectSYSC_Signal
  2386                           
  2387                           ;Main_B1.c: 38: getLoad_AD(0x31);
  2388  0F2C  3031               	movlw	49
  2389  0F2D  118A  27A4  158A   	fcall	_getLoad_AD
  2390                           
  2391                           ;Main_B1.c: 42: getTemp_AD(0x21);
  2392  0F30  3021               	movlw	33
  2393  0F31  158A  2399  158A   	fcall	_getTemp_AD
  2394                           
  2395                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x11);
  2396  0F34  3011               	movlw	17
  2397  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  2398  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  2399  0F37  00EF               	movwf	??_main
  2400  0F38  086F               	movf	??_main,w
  2401  0F39  00D7               	movwf	getCDS_AD@channel2
  2402  0F3A  3009               	movlw	9
  2403  0F3B  158A  23B8  158A   	fcall	_getCDS_AD
  2404                           
  2405                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2406  0F3E  300D               	movlw	13
  2407  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  2408  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  2409  0F41  00EF               	movwf	??_main
  2410  0F42  086F               	movf	??_main,w
  2411  0F43  00DF               	movwf	getPIR_AD@channel2
  2412  0F44  3005               	movlw	5
  2413  0F45  118A  23B5  158A   	fcall	_getPIR_AD
  2414  0F48                     l6179:	
  2415                           
  2416                           ;Main_B1.c: 57: }
  2417                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2418  0F48  1283               	bcf	3,5	;RP0=0, select bank0
  2419  0F49  1303               	bcf	3,6	;RP1=0, select bank0
  2420  0F4A  1C3A               	btfss	_Timer1,0
  2421  0F4B  2F25               	goto	l6167
  2422                           
  2423                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2424  0F4C  103A               	bcf	_Timer1,0
  2425                           
  2426                           ;Main_B1.c: 96: my_MainTimer();
  2427  0F4D  158A  23DA  158A   	fcall	_my_MainTimer
  2428                           
  2429                           ;Main_B1.c: 97: WDT_Main();
  2430  0F50  158A  221F  158A   	fcall	_WDT_Main
  2431                           
  2432                           ;Main_B1.c: 98: ;;
  2433                           ;Main_B1.c: 99: ;;
  2434                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2435  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  2436  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  2437  0F55  1C31               	btfss	_myMain,0
  2438  0F56  2F25               	goto	l6167
  2439                           
  2440                           ;Main_B1.c: 101: ;;
  2441                           ;Main_B1.c: 103: LED_Main();
  2442  0F57  158A  2137  158A   	fcall	_LED_Main
  2443                           
  2444                           ;Main_B1.c: 104: Buzzer_Main();
  2445  0F5A  158A  258A  158A   	fcall	_Buzzer_Main
  2446                           
  2447                           ;Main_B1.c: 106: SYSC_Main();
  2448  0F5D  158A  2126  158A   	fcall	_SYSC_Main
  2449                           
  2450                           ;Main_B1.c: 107: Temp_Main();
  2451  0F60  158A  212C  158A   	fcall	_Temp_Main
  2452                           
  2453                           ;Main_B1.c: 108: Load_Main();
  2454  0F63  118A  202D  158A   	fcall	_Load_Main
  2455                           
  2456                           ;Main_B1.c: 109: ;;
  2457                           ;Main_B1.c: 111: Lights_Main();
  2458  0F66  158A  2447  158A   	fcall	_Lights_Main
  2459                           
  2460                           ;Main_B1.c: 112: ;;
  2461                           ;Main_B1.c: 113: Switch_Main();
  2462  0F69  158A  218F  158A   	fcall	_Switch_Main
  2463                           
  2464                           ;Main_B1.c: 114: CDS_Main();
  2465  0F6C  158A  249D  158A   	fcall	_CDS_Main
  2466                           
  2467                           ;Main_B1.c: 115: PIR_Main();
  2468  0F6F  118A  2217  158A   	fcall	_PIR_Main
  2469                           
  2470                           ;Main_B1.c: 117: ;;
  2471                           ;Main_B1.c: 118: ;;
  2472                           ;Main_B1.c: 119: ;;
  2473                           ;Main_B1.c: 120: ;;
  2474                           ;Main_B1.c: 121: Exception_Main();
  2475  0F72  118A  24E3  158A   	fcall	_Exception_Main
  2476  0F75  2F25               	goto	l6167
  2477  0F76                     __end_of_main:	
  2478                           ;Main_B1.c: 128: }
  2479                           ;Main_B1.c: 129: }
  2480                           ;Main_B1.c: 163: }
  2481                           ;Main_B1.c: 164: return (0);
  2482                           ;	Return value of _main is never used
  2483                           
  2484                           
  2485                           	psect	text1
  2486  0BDA                     __ptext1:	
  2487 ;; *************** function _my_MainTimer *****************
  2488 ;; Defined at:
  2489 ;;		line 185 in file "../src/Main_B1.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;		None
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;		None
  2494 ;; Return value:  Size  Location     Type
  2495 ;;		None               void
  2496 ;; Registers used:
  2497 ;;		wreg, status,2, status,0, pclath, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2503 ;;      Params:         0       0       0       0
  2504 ;;      Locals:         0       0       0       0
  2505 ;;      Temps:          0       1       0       0
  2506 ;;      Totals:         0       1       0       0
  2507 ;;Total ram usage:        1 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    4
  2510 ;; This function calls:
  2511 ;;		_setBuz
  2512 ;; This function is called by:
  2513 ;;		_main
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           
  2518                           ;psect for function _my_MainTimer
  2519  0BDA                     _my_MainTimer:	
  2520                           
  2521                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2522                           
  2523                           ;incstack = 0
  2524                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0+pclath+cstack]
  2525  0BDA  1283               	bcf	3,5	;RP0=0, select bank0
  2526  0BDB  1303               	bcf	3,6	;RP1=0, select bank0
  2527  0BDC  1831               	btfsc	_myMain,0
  2528  0BDD  2BF3               	goto	l5775
  2529                           
  2530                           ;Main_B1.c: 188: myMain.PowerCount++;
  2531  0BDE  3001               	movlw	1
  2532  0BDF  00E2               	movwf	??_my_MainTimer
  2533  0BE0  0862               	movf	??_my_MainTimer,w
  2534  0BE1  07B2               	addwf	_myMain+1,f
  2535                           
  2536                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2537  0BE2  0832               	movf	_myMain+1,w
  2538  0BE3  3A4B               	xorlw	75
  2539  0BE4  1D03               	skipz
  2540  0BE5  0008               	return
  2541                           
  2542                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2543  0BE6  01B2               	clrf	_myMain+1
  2544                           
  2545                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2546  0BE7  1431               	bsf	_myMain,0
  2547                           
  2548                           ;Main_B1.c: 196: setBuz(3, 50);
  2549  0BE8  3032               	movlw	50
  2550  0BE9  00DF               	movwf	setBuz@time
  2551  0BEA  3000               	movlw	0
  2552  0BEB  00E0               	movwf	setBuz@time+1
  2553  0BEC  3003               	movlw	3
  2554  0BED  158A  2612         	fcall	_setBuz
  2555                           
  2556                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2557  0BEF  1283               	bcf	3,5	;RP0=0, select bank0
  2558  0BF0  1303               	bcf	3,6	;RP1=0, select bank0
  2559  0BF1  1631               	bsf	_myMain,4
  2560                           
  2561                           ;Main_B1.c: 206: }
  2562                           ;Main_B1.c: 207: } else {
  2563  0BF2  0008               	return
  2564  0BF3                     l5775:	
  2565                           
  2566                           ;Main_B1.c: 208: myMain.PowerCount++;
  2567  0BF3  3001               	movlw	1
  2568  0BF4  00E2               	movwf	??_my_MainTimer
  2569  0BF5  0862               	movf	??_my_MainTimer,w
  2570  0BF6  07B2               	addwf	_myMain+1,f
  2571                           
  2572                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2573  0BF7  0832               	movf	_myMain+1,w
  2574  0BF8  3A32               	xorlw	50
  2575  0BF9  1D03               	skipz
  2576  0BFA  0008               	return
  2577                           
  2578                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2579  0BFB  01B2               	clrf	_myMain+1
  2580  0BFC  0008               	return
  2581  0BFD                     __end_of_my_MainTimer:	
  2582                           
  2583                           	psect	text2
  2584  091F                     __ptext2:	
  2585 ;; *************** function _myMain_Initialization *****************
  2586 ;; Defined at:
  2587 ;;		line 170 in file "../src/Main_B1.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;		None
  2590 ;; Auto vars:     Size  Location     Type
  2591 ;;		None
  2592 ;; Return value:  Size  Location     Type
  2593 ;;		None               void
  2594 ;; Registers used:
  2595 ;;		None
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2601 ;;      Params:         0       0       0       0
  2602 ;;      Locals:         0       0       0       0
  2603 ;;      Temps:          0       0       0       0
  2604 ;;      Totals:         0       0       0       0
  2605 ;;Total ram usage:        0 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:    2
  2608 ;; This function calls:
  2609 ;;		Nothing
  2610 ;; This function is called by:
  2611 ;;		_main
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           
  2616                           ;psect for function _myMain_Initialization
  2617  091F                     _myMain_Initialization:	
  2618                           
  2619                           ;incstack = 0
  2620                           ; Regs used in _myMain_Initialization: []
  2621  091F  0008               	return
  2622  0920                     __end_of_myMain_Initialization:	
  2623                           
  2624                           	psect	text3
  2625  0B99                     __ptext3:	
  2626 ;; *************** function _getTemp_AD *****************
  2627 ;; Defined at:
  2628 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;  channel         1    wreg     unsigned char 
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;  channel         1    2[BANK0 ] unsigned char 
  2633 ;;  ADRES           1    3[BANK0 ] unsigned char 
  2634 ;; Return value:  Size  Location     Type
  2635 ;;		None               void
  2636 ;; Registers used:
  2637 ;;		wreg, status,2, status,0, pclath, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2643 ;;      Params:         0       0       0       0
  2644 ;;      Locals:         0       2       0       0
  2645 ;;      Temps:          0       2       0       0
  2646 ;;      Totals:         0       4       0       0
  2647 ;;Total ram usage:        4 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    4
  2650 ;; This function calls:
  2651 ;;		_getAD
  2652 ;; This function is called by:
  2653 ;;		_main
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           
  2658                           ;psect for function _getTemp_AD
  2659  0B99                     _getTemp_AD:	
  2660                           
  2661                           ;incstack = 0
  2662                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2663                           ;getTemp_AD@channel stored from wreg
  2664  0B99  1283               	bcf	3,5	;RP0=0, select bank0
  2665  0B9A  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0B9B  00D9               	movwf	getTemp_AD@channel
  2667                           
  2668                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2669  0B9C  01DA               	clrf	getTemp_AD@ADRES
  2670                           
  2671                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2672  0B9D  1D42               	btfss	_Temp,2
  2673  0B9E  0008               	return
  2674                           
  2675                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2676  0B9F  3070               	movlw	112
  2677  0BA0  00D7               	movwf	??_getTemp_AD
  2678  0BA1  0857               	movf	??_getTemp_AD,w
  2679  0BA2  00F4               	movwf	getAD@adcon1
  2680  0BA3  0859               	movf	getTemp_AD@channel,w
  2681  0BA4  158A  237D  158A   	fcall	_getAD
  2682  0BA7  1283               	bcf	3,5	;RP0=0, select bank0
  2683  0BA8  1303               	bcf	3,6	;RP1=0, select bank0
  2684  0BA9  00D8               	movwf	??_getTemp_AD+1
  2685  0BAA  0858               	movf	??_getTemp_AD+1,w
  2686  0BAB  00DA               	movwf	getTemp_AD@ADRES
  2687                           
  2688                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  2689  0BAC  085A               	movf	getTemp_AD@ADRES,w
  2690  0BAD  1903               	btfsc	3,2
  2691  0BAE  0008               	return
  2692                           
  2693                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  2694  0BAF  085A               	movf	getTemp_AD@ADRES,w
  2695  0BB0  0248               	subwf	_Temp+6,w
  2696  0BB1  1803               	skipnc
  2697  0BB2  0008               	return
  2698                           
  2699                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  2700  0BB3  085A               	movf	getTemp_AD@ADRES,w
  2701  0BB4  00D7               	movwf	??_getTemp_AD
  2702  0BB5  0857               	movf	??_getTemp_AD,w
  2703  0BB6  00C8               	movwf	_Temp+6
  2704  0BB7  0008               	return
  2705  0BB8                     __end_of_getTemp_AD:	
  2706                           
  2707                           	psect	text4
  2708  03B5                     __ptext4:	
  2709 ;; *************** function _getPIR_AD *****************
  2710 ;; Defined at:
  2711 ;;		line 342 in file "../src/PIR_B1.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;  channel1        1    wreg     unsigned char 
  2714 ;;  channel2        1    8[BANK0 ] unsigned char 
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;  channel1        1   13[BANK0 ] unsigned char 
  2717 ;;  i               1   16[BANK0 ] unsigned char 
  2718 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2719 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2720 ;;  j               1   12[BANK0 ] unsigned char 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;		None               void
  2723 ;; Registers used:
  2724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2730 ;;      Params:         0       1       0       0
  2731 ;;      Locals:         0       5       0       0
  2732 ;;      Temps:          0       3       0       0
  2733 ;;      Totals:         0       9       0       0
  2734 ;;Total ram usage:        9 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:    4
  2737 ;; This function calls:
  2738 ;;		___awdiv
  2739 ;;		___lwdiv
  2740 ;;		_getAD
  2741 ;; This function is called by:
  2742 ;;		_main
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           
  2747                           ;psect for function _getPIR_AD
  2748  03B5                     _getPIR_AD:	
  2749                           
  2750                           ;incstack = 0
  2751                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2752                           ;getPIR_AD@channel1 stored from wreg
  2753  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  2754  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  2755  03B7  00E4               	movwf	getPIR_AD@channel1
  2756                           
  2757                           ;PIR_B1.c: 343: char i = 0, j = 0;
  2758  03B8  01E7               	clrf	getPIR_AD@i
  2759  03B9  01E3               	clrf	getPIR_AD@j
  2760                           
  2761                           ;PIR_B1.c: 344: char VRAD = 0, VRAD1 = 0;
  2762  03BA  01E6               	clrf	getPIR_AD@VRAD
  2763  03BB  01E5               	clrf	getPIR_AD@VRAD1
  2764                           
  2765                           ;PIR_B1.c: 345: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2766  03BC  1683               	bsf	3,5	;RP0=1, select bank1
  2767  03BD  1303               	bcf	3,6	;RP1=0, select bank1
  2768  03BE  1CA0               	btfss	__PIR^(0+128),1
  2769  03BF  0008               	return
  2770  03C0  1920               	btfsc	__PIR^(0+128),2
  2771  03C1  0008               	return
  2772                           
  2773                           ;PIR_B1.c: 346: _PIR.GO = 1;
  2774  03C2  1520               	bsf	__PIR^(0+128),2
  2775                           
  2776                           ;PIR_B1.c: 353: VRAD1 = getAD(channel1, 0x70);
  2777  03C3  3070               	movlw	112
  2778  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  2779  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  2780  03C6  00E0               	movwf	??_getPIR_AD
  2781  03C7  0860               	movf	??_getPIR_AD,w
  2782  03C8  00F4               	movwf	getAD@adcon1
  2783  03C9  0864               	movf	getPIR_AD@channel1,w
  2784  03CA  158A  237D  118A   	fcall	_getAD
  2785  03CD  1283               	bcf	3,5	;RP0=0, select bank0
  2786  03CE  1303               	bcf	3,6	;RP1=0, select bank0
  2787  03CF  00E1               	movwf	??_getPIR_AD+1
  2788  03D0  0861               	movf	??_getPIR_AD+1,w
  2789  03D1  00E5               	movwf	getPIR_AD@VRAD1
  2790                           
  2791                           ;PIR_B1.c: 354: VRAD = VRAD1 / 25;
  2792  03D2  3019               	movlw	25
  2793  03D3  00D7               	movwf	___awdiv@divisor
  2794  03D4  3000               	movlw	0
  2795  03D5  00D8               	movwf	___awdiv@divisor+1
  2796  03D6  0865               	movf	getPIR_AD@VRAD1,w
  2797  03D7  00E0               	movwf	??_getPIR_AD
  2798  03D8  01E1               	clrf	??_getPIR_AD+1
  2799  03D9  0860               	movf	??_getPIR_AD,w
  2800  03DA  00D9               	movwf	___awdiv@dividend
  2801  03DB  0861               	movf	??_getPIR_AD+1,w
  2802  03DC  00DA               	movwf	___awdiv@dividend+1
  2803  03DD  158A  26A7  118A   	fcall	___awdiv
  2804  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  2805  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  2806  03E2  0857               	movf	?___awdiv,w
  2807  03E3  00E2               	movwf	??_getPIR_AD+2
  2808  03E4  0862               	movf	??_getPIR_AD+2,w
  2809  03E5  00E6               	movwf	getPIR_AD@VRAD
  2810                           
  2811                           ;PIR_B1.c: 355: _PIR.SignalAD = getAD(channel2, 0x70);
  2812  03E6  3070               	movlw	112
  2813  03E7  00E0               	movwf	??_getPIR_AD
  2814  03E8  0860               	movf	??_getPIR_AD,w
  2815  03E9  00F4               	movwf	getAD@adcon1
  2816  03EA  085F               	movf	getPIR_AD@channel2,w
  2817  03EB  158A  237D  118A   	fcall	_getAD
  2818  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  2819  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  2820  03F0  00E1               	movwf	??_getPIR_AD+1
  2821  03F1  0861               	movf	??_getPIR_AD+1,w
  2822  03F2  1683               	bsf	3,5	;RP0=1, select bank1
  2823  03F3  1303               	bcf	3,6	;RP1=0, select bank1
  2824  03F4  00A1               	movwf	(__PIR^(0+128)+1)
  2825                           
  2826                           ;PIR_B1.c: 369: if (VRAD < 1) {
  2827  03F5  1283               	bcf	3,5	;RP0=0, select bank0
  2828  03F6  1303               	bcf	3,6	;RP1=0, select bank0
  2829  03F7  08E6               	movf	getPIR_AD@VRAD,f
  2830  03F8  1D03               	skipz
  2831  03F9  2BFC               	goto	l5697
  2832                           
  2833                           ;PIR_B1.c: 370: _PIR.CloseTimeValue = 5;
  2834  03FA  3005               	movlw	5
  2835  03FB  2C02               	goto	L1
  2836  03FC                     l5697:	
  2837                           ;PIR_B1.c: 371: } else if (VRAD < 3) {
  2838                           
  2839  03FC  3003               	movlw	3
  2840  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  2841  03FE  0266               	subwf	getPIR_AD@VRAD,w
  2842  03FF  1803               	skipnc
  2843  0400  2C07               	goto	l5701
  2844                           
  2845                           ;PIR_B1.c: 372: _PIR.CloseTimeValue = 60;
  2846  0401  303C               	movlw	60
  2847  0402                     L1:	
  2848  0402  1683               	bsf	3,5	;RP0=1, select bank1
  2849  0403  1303               	bcf	3,6	;RP1=0, select bank1
  2850  0404  00C3               	movwf	(__PIR^(0+128)+35)
  2851  0405  3000               	movlw	0
  2852  0406  2C2D               	goto	L5
  2853  0407                     l5701:	
  2854                           ;PIR_B1.c: 373: } else if (VRAD < 5) {
  2855                           
  2856  0407  3005               	movlw	5
  2857  0408  1283               	bcf	3,5	;RP0=0, select bank0
  2858  0409  0266               	subwf	getPIR_AD@VRAD,w
  2859  040A  1803               	skipnc
  2860  040B  2C12               	goto	l5705
  2861                           
  2862                           ;PIR_B1.c: 374: _PIR.CloseTimeValue = 300;
  2863  040C  302C               	movlw	44
  2864  040D  1683               	bsf	3,5	;RP0=1, select bank1
  2865  040E  1303               	bcf	3,6	;RP1=0, select bank1
  2866  040F  00C3               	movwf	(__PIR^(0+128)+35)
  2867  0410  3001               	movlw	1
  2868  0411  2C2D               	goto	L5
  2869  0412                     l5705:	
  2870                           ;PIR_B1.c: 375: } else if (VRAD < 7) {
  2871                           
  2872  0412  3007               	movlw	7
  2873  0413  1283               	bcf	3,5	;RP0=0, select bank0
  2874  0414  0266               	subwf	getPIR_AD@VRAD,w
  2875  0415  1803               	skipnc
  2876  0416  2C1D               	goto	l5709
  2877                           
  2878                           ;PIR_B1.c: 376: _PIR.CloseTimeValue = 600;
  2879  0417  3058               	movlw	88
  2880  0418  1683               	bsf	3,5	;RP0=1, select bank1
  2881  0419  1303               	bcf	3,6	;RP1=0, select bank1
  2882  041A  00C3               	movwf	(__PIR^(0+128)+35)
  2883  041B  3002               	movlw	2
  2884  041C  2C2D               	goto	L5
  2885  041D                     l5709:	
  2886                           ;PIR_B1.c: 377: } else if (VRAD < 9) {
  2887                           
  2888  041D  3009               	movlw	9
  2889  041E  1283               	bcf	3,5	;RP0=0, select bank0
  2890  041F  0266               	subwf	getPIR_AD@VRAD,w
  2891  0420  1803               	skipnc
  2892  0421  2C28               	goto	l5713
  2893                           
  2894                           ;PIR_B1.c: 378: _PIR.CloseTimeValue = 900;
  2895  0422  3084               	movlw	132
  2896  0423  1683               	bsf	3,5	;RP0=1, select bank1
  2897  0424  1303               	bcf	3,6	;RP1=0, select bank1
  2898  0425  00C3               	movwf	(__PIR^(0+128)+35)
  2899  0426  3003               	movlw	3
  2900  0427  2C2D               	goto	L5
  2901  0428                     l5713:	
  2902                           ;PIR_B1.c: 379: } else {
  2903                           
  2904                           
  2905                           ;PIR_B1.c: 380: _PIR.CloseTimeValue = 1200;
  2906  0428  30B0               	movlw	176
  2907  0429  1683               	bsf	3,5	;RP0=1, select bank1
  2908  042A  1303               	bcf	3,6	;RP1=0, select bank1
  2909  042B  00C3               	movwf	(__PIR^(0+128)+35)
  2910  042C  3004               	movlw	4
  2911  042D                     L5:	
  2912  042D  00C4               	movwf	(__PIR^(0+128)+36)
  2913                           
  2914                           ;PIR_B1.c: 381: }
  2915                           ;PIR_B1.c: 390: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2916  042E  0821               	movf	(__PIR^(0+128)+1),w
  2917  042F  1283               	bcf	3,5	;RP0=0, select bank0
  2918  0430  1303               	bcf	3,6	;RP1=0, select bank0
  2919  0431  00E0               	movwf	??_getPIR_AD
  2920  0432  1683               	bsf	3,5	;RP0=1, select bank1
  2921  0433  1303               	bcf	3,6	;RP1=0, select bank1
  2922  0434  0824               	movf	(__PIR^(0+128)+4),w
  2923  0435  3EA5               	addlw	(__PIR+5)& (0+255)
  2924  0436  0084               	movwf	4
  2925  0437  1283               	bcf	3,5	;RP0=0, select bank0
  2926  0438  1303               	bcf	3,6	;RP1=0, select bank0
  2927  0439  0860               	movf	??_getPIR_AD,w
  2928  043A  1383               	bcf	3,7	;select IRP bank1
  2929  043B  0080               	movwf	0
  2930                           
  2931                           ;PIR_B1.c: 391: for (i = 0; i < 10; i++) {
  2932  043C  01E7               	clrf	getPIR_AD@i
  2933  043D  300A               	movlw	10
  2934  043E  0267               	subwf	getPIR_AD@i,w
  2935  043F  1803               	btfsc	3,0
  2936  0440  2C5D               	goto	l5729
  2937  0441                     l5723:	
  2938                           
  2939                           ;PIR_B1.c: 392: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2940  0441  0867               	movf	getPIR_AD@i,w
  2941  0442  3EA5               	addlw	(__PIR+5)& (0+255)
  2942  0443  0084               	movwf	4
  2943  0444  0800               	movf	0,w
  2944  0445  00E0               	movwf	??_getPIR_AD
  2945  0446  01E1               	clrf	??_getPIR_AD+1
  2946  0447  0860               	movf	??_getPIR_AD,w
  2947  0448  1683               	bsf	3,5	;RP0=1, select bank1
  2948  0449  1303               	bcf	3,6	;RP1=0, select bank1
  2949  044A  07AF               	addwf	(__PIR^(0+128)+15),f
  2950  044B  1803               	skipnc
  2951  044C  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2952  044D  1283               	bcf	3,5	;RP0=0, select bank0
  2953  044E  1303               	bcf	3,6	;RP1=0, select bank0
  2954  044F  0861               	movf	??_getPIR_AD+1,w
  2955  0450  1683               	bsf	3,5	;RP0=1, select bank1
  2956  0451  1303               	bcf	3,6	;RP1=0, select bank1
  2957  0452  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2958  0453  3001               	movlw	1
  2959  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2960  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2961  0456  00E0               	movwf	??_getPIR_AD
  2962  0457  0860               	movf	??_getPIR_AD,w
  2963  0458  07E7               	addwf	getPIR_AD@i,f
  2964  0459  300A               	movlw	10
  2965  045A  0267               	subwf	getPIR_AD@i,w
  2966  045B  1C03               	skipc
  2967  045C  2C41               	goto	l5723
  2968  045D                     l5729:	
  2969                           
  2970                           ;PIR_B1.c: 393: }
  2971                           ;PIR_B1.c: 394: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2972  045D  300A               	movlw	10
  2973  045E  00D7               	movwf	___lwdiv@divisor
  2974  045F  3000               	movlw	0
  2975  0460  00D8               	movwf	___lwdiv@divisor+1
  2976  0461  1683               	bsf	3,5	;RP0=1, select bank1
  2977  0462  1303               	bcf	3,6	;RP1=0, select bank1
  2978  0463  0830               	movf	((__PIR+1)^(0+128)+15),w
  2979  0464  1283               	bcf	3,5	;RP0=0, select bank0
  2980  0465  1303               	bcf	3,6	;RP1=0, select bank0
  2981  0466  01DA               	clrf	___lwdiv@dividend+1
  2982  0467  07DA               	addwf	___lwdiv@dividend+1,f
  2983  0468  1683               	bsf	3,5	;RP0=1, select bank1
  2984  0469  1303               	bcf	3,6	;RP1=0, select bank1
  2985  046A  082F               	movf	(__PIR^(0+128)+15),w
  2986  046B  1283               	bcf	3,5	;RP0=0, select bank0
  2987  046C  1303               	bcf	3,6	;RP1=0, select bank0
  2988  046D  01D9               	clrf	___lwdiv@dividend
  2989  046E  07D9               	addwf	___lwdiv@dividend,f
  2990  046F  158A  254A  118A   	fcall	___lwdiv
  2991  0472  1283               	bcf	3,5	;RP0=0, select bank0
  2992  0473  1303               	bcf	3,6	;RP1=0, select bank0
  2993  0474  0857               	movf	?___lwdiv,w
  2994  0475  00E0               	movwf	??_getPIR_AD
  2995  0476  1683               	bsf	3,5	;RP0=1, select bank1
  2996  0477  1303               	bcf	3,6	;RP1=0, select bank1
  2997  0478  0831               	movf	(__PIR^(0+128)+17),w
  2998  0479  3EB2               	addlw	(__PIR+18)& (0+255)
  2999  047A  0084               	movwf	4
  3000  047B  1283               	bcf	3,5	;RP0=0, select bank0
  3001  047C  1303               	bcf	3,6	;RP1=0, select bank0
  3002  047D  0860               	movf	??_getPIR_AD,w
  3003  047E  1383               	bcf	3,7	;select IRP bank1
  3004  047F  0080               	movwf	0
  3005                           
  3006                           ;PIR_B1.c: 395: _PIR.TenAverageValue = 0;
  3007  0480  1683               	bsf	3,5	;RP0=1, select bank1
  3008  0481  1303               	bcf	3,6	;RP1=0, select bank1
  3009  0482  01AF               	clrf	(__PIR^(0+128)+15)
  3010  0483  01B0               	clrf	((__PIR+1)^(0+128)+15)
  3011                           
  3012                           ;PIR_B1.c: 397: for (i = 0; i <= 9; i++) {
  3013  0484  1283               	bcf	3,5	;RP0=0, select bank0
  3014  0485  1303               	bcf	3,6	;RP1=0, select bank0
  3015  0486  01E7               	clrf	getPIR_AD@i
  3016  0487  300A               	movlw	10
  3017  0488  0267               	subwf	getPIR_AD@i,w
  3018  0489  1803               	btfsc	3,0
  3019  048A  2CA7               	goto	l5745
  3020  048B                     l5739:	
  3021                           
  3022                           ;PIR_B1.c: 398: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  3023  048B  0867               	movf	getPIR_AD@i,w
  3024  048C  3EB2               	addlw	(__PIR+18)& (0+255)
  3025  048D  0084               	movwf	4
  3026  048E  0800               	movf	0,w
  3027  048F  00E0               	movwf	??_getPIR_AD
  3028  0490  01E1               	clrf	??_getPIR_AD+1
  3029  0491  0860               	movf	??_getPIR_AD,w
  3030  0492  1683               	bsf	3,5	;RP0=1, select bank1
  3031  0493  1303               	bcf	3,6	;RP1=0, select bank1
  3032  0494  07BC               	addwf	(__PIR^(0+128)+28),f
  3033  0495  1803               	skipnc
  3034  0496  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  3035  0497  1283               	bcf	3,5	;RP0=0, select bank0
  3036  0498  1303               	bcf	3,6	;RP1=0, select bank0
  3037  0499  0861               	movf	??_getPIR_AD+1,w
  3038  049A  1683               	bsf	3,5	;RP0=1, select bank1
  3039  049B  1303               	bcf	3,6	;RP1=0, select bank1
  3040  049C  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  3041  049D  3001               	movlw	1
  3042  049E  1283               	bcf	3,5	;RP0=0, select bank0
  3043  049F  1303               	bcf	3,6	;RP1=0, select bank0
  3044  04A0  00E0               	movwf	??_getPIR_AD
  3045  04A1  0860               	movf	??_getPIR_AD,w
  3046  04A2  07E7               	addwf	getPIR_AD@i,f
  3047  04A3  300A               	movlw	10
  3048  04A4  0267               	subwf	getPIR_AD@i,w
  3049  04A5  1C03               	skipc
  3050  04A6  2C8B               	goto	l5739
  3051  04A7                     l5745:	
  3052                           
  3053                           ;PIR_B1.c: 399: }
  3054                           ;PIR_B1.c: 400: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  3055  04A7  300A               	movlw	10
  3056  04A8  00D7               	movwf	___lwdiv@divisor
  3057  04A9  3000               	movlw	0
  3058  04AA  00D8               	movwf	___lwdiv@divisor+1
  3059  04AB  1683               	bsf	3,5	;RP0=1, select bank1
  3060  04AC  1303               	bcf	3,6	;RP1=0, select bank1
  3061  04AD  083D               	movf	((__PIR+1)^(0+128)+28),w
  3062  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  3063  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  3064  04B0  01DA               	clrf	___lwdiv@dividend+1
  3065  04B1  07DA               	addwf	___lwdiv@dividend+1,f
  3066  04B2  1683               	bsf	3,5	;RP0=1, select bank1
  3067  04B3  1303               	bcf	3,6	;RP1=0, select bank1
  3068  04B4  083C               	movf	(__PIR^(0+128)+28),w
  3069  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  3070  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  3071  04B7  01D9               	clrf	___lwdiv@dividend
  3072  04B8  07D9               	addwf	___lwdiv@dividend,f
  3073  04B9  158A  254A  118A   	fcall	___lwdiv
  3074  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  3075  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  3076  04BE  0857               	movf	?___lwdiv,w
  3077  04BF  00E0               	movwf	??_getPIR_AD
  3078  04C0  0860               	movf	??_getPIR_AD,w
  3079  04C1  1683               	bsf	3,5	;RP0=1, select bank1
  3080  04C2  1303               	bcf	3,6	;RP1=0, select bank1
  3081  04C3  00A3               	movwf	(__PIR^(0+128)+3)
  3082                           
  3083                           ;PIR_B1.c: 401: _PIR.HundredAverageValue = 0;
  3084  04C4  01BC               	clrf	(__PIR^(0+128)+28)
  3085  04C5  01BD               	clrf	((__PIR+1)^(0+128)+28)
  3086                           
  3087                           ;PIR_B1.c: 403: if (_PIR.TenCount < 10) {
  3088  04C6  300A               	movlw	10
  3089  04C7  0224               	subwf	(__PIR^(0+128)+4),w
  3090  04C8  1803               	skipnc
  3091  04C9  2CD3               	goto	l5753
  3092                           
  3093                           ;PIR_B1.c: 404: _PIR.TenCount++;
  3094  04CA  3001               	movlw	1
  3095  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  3096  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  3097  04CD  00E0               	movwf	??_getPIR_AD
  3098  04CE  0860               	movf	??_getPIR_AD,w
  3099  04CF  1683               	bsf	3,5	;RP0=1, select bank1
  3100  04D0  1303               	bcf	3,6	;RP1=0, select bank1
  3101  04D1  07A4               	addwf	(__PIR^(0+128)+4),f
  3102                           
  3103                           ;PIR_B1.c: 405: } else {
  3104  04D2  0008               	return
  3105  04D3                     l5753:	
  3106                           
  3107                           ;PIR_B1.c: 406: _PIR.TenCount = 0;
  3108  04D3  01A4               	clrf	(__PIR^(0+128)+4)
  3109                           
  3110                           ;PIR_B1.c: 407: if (_PIR.HundreCount < 10)
  3111  04D4  300A               	movlw	10
  3112  04D5  0231               	subwf	(__PIR^(0+128)+17),w
  3113  04D6  1803               	skipnc
  3114  04D7  2CE1               	goto	l5759
  3115                           
  3116                           ;PIR_B1.c: 408: _PIR.HundreCount++;
  3117  04D8  3001               	movlw	1
  3118  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  3119  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  3120  04DB  00E0               	movwf	??_getPIR_AD
  3121  04DC  0860               	movf	??_getPIR_AD,w
  3122  04DD  1683               	bsf	3,5	;RP0=1, select bank1
  3123  04DE  1303               	bcf	3,6	;RP1=0, select bank1
  3124  04DF  07B1               	addwf	(__PIR^(0+128)+17),f
  3125  04E0  0008               	return
  3126  04E1                     l5759:	
  3127                           
  3128                           ;PIR_B1.c: 409: else
  3129                           ;PIR_B1.c: 410: _PIR.HundreCount = 0;
  3130  04E1  01B1               	clrf	(__PIR^(0+128)+17)
  3131  04E2  0008               	return
  3132  04E3                     __end_of_getPIR_AD:	
  3133                           
  3134                           	psect	text5
  3135  07A4                     __ptext5:	
  3136 ;; *************** function _getLoad_AD *****************
  3137 ;; Defined at:
  3138 ;;		line 15 in file "../src/OverLoad_B1.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;  channel         1    wreg     unsigned char 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;  channel         1    2[BANK0 ] unsigned char 
  3143 ;;  i               1    6[BANK0 ] unsigned char 
  3144 ;;  ADRES           1    5[BANK0 ] unsigned char 
  3145 ;;  j               1    4[BANK0 ] unsigned char 
  3146 ;;  k               1    3[BANK0 ] unsigned char 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;		None               void
  3149 ;; Registers used:
  3150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3156 ;;      Params:         0       0       0       0
  3157 ;;      Locals:         0       5       0       0
  3158 ;;      Temps:          0       2       0       0
  3159 ;;      Totals:         0       7       0       0
  3160 ;;Total ram usage:        7 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    4
  3163 ;; This function calls:
  3164 ;;		_getAD
  3165 ;; This function is called by:
  3166 ;;		_main
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           
  3171                           ;psect for function _getLoad_AD
  3172  07A4                     _getLoad_AD:	
  3173                           
  3174                           ;incstack = 0
  3175                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3176                           ;getLoad_AD@channel stored from wreg
  3177  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  3178  07A5  1303               	bcf	3,6	;RP1=0, select bank0
  3179  07A6  00D9               	movwf	getLoad_AD@channel
  3180                           
  3181                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3182  07A7  01DD               	clrf	getLoad_AD@i
  3183  07A8  01DB               	clrf	getLoad_AD@j
  3184  07A9  01DA               	clrf	getLoad_AD@k
  3185                           
  3186                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  3187  07AA  01DC               	clrf	getLoad_AD@ADRES
  3188                           
  3189                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3190  07AB  1683               	bsf	3,5	;RP0=1, select bank1
  3191  07AC  1303               	bcf	3,6	;RP1=0, select bank1
  3192  07AD  1E4A               	btfss	_Load^(0+128),4
  3193  07AE  0008               	return
  3194                           
  3195                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0x73);
  3196  07AF  3073               	movlw	115
  3197  07B0  1283               	bcf	3,5	;RP0=0, select bank0
  3198  07B1  1303               	bcf	3,6	;RP1=0, select bank0
  3199  07B2  00D7               	movwf	??_getLoad_AD
  3200  07B3  0857               	movf	??_getLoad_AD,w
  3201  07B4  00F4               	movwf	getAD@adcon1
  3202  07B5  0859               	movf	getLoad_AD@channel,w
  3203  07B6  158A  237D  118A   	fcall	_getAD
  3204  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  3205  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  3206  07BB  00D8               	movwf	??_getLoad_AD+1
  3207  07BC  0858               	movf	??_getLoad_AD+1,w
  3208  07BD  00DC               	movwf	getLoad_AD@ADRES
  3209                           
  3210                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3211  07BE  01DD               	clrf	getLoad_AD@i
  3212  07BF  3004               	movlw	4
  3213  07C0  025D               	subwf	getLoad_AD@i,w
  3214  07C1  1803               	btfsc	3,0
  3215  07C2  2FDF               	goto	l5651
  3216  07C3                     l5639:	
  3217                           
  3218                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  3219  07C3  085D               	movf	getLoad_AD@i,w
  3220  07C4  3ED4               	addlw	(_Load+10)& (0+255)
  3221  07C5  0084               	movwf	4
  3222  07C6  085C               	movf	getLoad_AD@ADRES,w
  3223  07C7  1383               	bcf	3,7	;select IRP bank1
  3224  07C8  0200               	subwf	0,w
  3225  07C9  1803               	skipnc
  3226  07CA  2FD7               	goto	l5647
  3227  07CB  08DB               	movf	getLoad_AD@j,f
  3228  07CC  1D03               	skipz
  3229  07CD  2FD7               	goto	l5647
  3230                           
  3231                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  3232  07CE  085C               	movf	getLoad_AD@ADRES,w
  3233  07CF  00D7               	movwf	??_getLoad_AD
  3234  07D0  085D               	movf	getLoad_AD@i,w
  3235  07D1  3ED4               	addlw	(_Load+10)& (0+255)
  3236  07D2  0084               	movwf	4
  3237  07D3  0857               	movf	??_getLoad_AD,w
  3238  07D4  0080               	movwf	0
  3239                           
  3240                           ;OverLoad_B1.c: 24: j = 1;
  3241  07D5  01DB               	clrf	getLoad_AD@j
  3242  07D6  0ADB               	incf	getLoad_AD@j,f
  3243  07D7                     l5647:	
  3244  07D7  3001               	movlw	1
  3245  07D8  00D7               	movwf	??_getLoad_AD
  3246  07D9  0857               	movf	??_getLoad_AD,w
  3247  07DA  07DD               	addwf	getLoad_AD@i,f
  3248  07DB  3004               	movlw	4
  3249  07DC  025D               	subwf	getLoad_AD@i,w
  3250  07DD  1C03               	skipc
  3251  07DE  2FC3               	goto	l5639
  3252  07DF                     l5651:	
  3253                           
  3254                           ;OverLoad_B1.c: 25: }
  3255                           ;OverLoad_B1.c: 26: }
  3256                           ;OverLoad_B1.c: 27: if (j == 0) {
  3257  07DF  08DB               	movf	getLoad_AD@j,f
  3258  07E0  1D03               	skipz
  3259  07E1  0008               	return
  3260                           
  3261                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3262  07E2  01DD               	clrf	getLoad_AD@i
  3263  07E3                     L6:	
  3264  07E3  3004               	movlw	4
  3265  07E4  025D               	subwf	getLoad_AD@i,w
  3266  07E5  1803               	btfsc	3,0
  3267  07E6  0008               	return
  3268                           
  3269                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  3270  07E7  085D               	movf	getLoad_AD@i,w
  3271  07E8  3ED9               	addlw	(_Load+15)& (0+255)
  3272  07E9  0084               	movwf	4
  3273  07EA  1383               	bcf	3,7	;select IRP bank1
  3274  07EB  0800               	movf	0,w
  3275  07EC  025C               	subwf	getLoad_AD@ADRES,w
  3276  07ED  1803               	skipnc
  3277  07EE  2FFB               	goto	l5667
  3278  07EF  08DA               	movf	getLoad_AD@k,f
  3279  07F0  1D03               	skipz
  3280  07F1  2FFB               	goto	l5667
  3281                           
  3282                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  3283  07F2  085C               	movf	getLoad_AD@ADRES,w
  3284  07F3  00D7               	movwf	??_getLoad_AD
  3285  07F4  085D               	movf	getLoad_AD@i,w
  3286  07F5  3ED9               	addlw	(_Load+15)& (0+255)
  3287  07F6  0084               	movwf	4
  3288  07F7  0857               	movf	??_getLoad_AD,w
  3289  07F8  0080               	movwf	0
  3290                           
  3291                           ;OverLoad_B1.c: 31: k = 1;
  3292  07F9  01DA               	clrf	getLoad_AD@k
  3293  07FA  0ADA               	incf	getLoad_AD@k,f
  3294  07FB                     l5667:	
  3295  07FB  3001               	movlw	1
  3296  07FC  00D7               	movwf	??_getLoad_AD
  3297  07FD  0857               	movf	??_getLoad_AD,w
  3298  07FE  07DD               	addwf	getLoad_AD@i,f
  3299  07FF  2FE3               	goto	L6
  3300  0800                     __end_of_getLoad_AD:	
  3301                           
  3302                           	psect	text6
  3303  0BB8                     __ptext6:	
  3304 ;; *************** function _getCDS_AD *****************
  3305 ;; Defined at:
  3306 ;;		line 48 in file "../src/CDS_B1.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;  channel1        1    wreg     unsigned char 
  3309 ;;  channel2        1    0[BANK0 ] unsigned char 
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;  channel1        1    5[BANK0 ] unsigned char 
  3312 ;;  j               1    4[BANK0 ] unsigned char 
  3313 ;;  i               1    3[BANK0 ] unsigned char 
  3314 ;; Return value:  Size  Location     Type
  3315 ;;		None               void
  3316 ;; Registers used:
  3317 ;;		wreg, status,2, status,0, pclath, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3323 ;;      Params:         0       1       0       0
  3324 ;;      Locals:         0       3       0       0
  3325 ;;      Temps:          0       2       0       0
  3326 ;;      Totals:         0       6       0       0
  3327 ;;Total ram usage:        6 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    4
  3330 ;; This function calls:
  3331 ;;		_getAD
  3332 ;; This function is called by:
  3333 ;;		_main
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           
  3338                           ;psect for function _getCDS_AD
  3339  0BB8                     _getCDS_AD:	
  3340                           
  3341                           ;incstack = 0
  3342                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3343                           ;getCDS_AD@channel1 stored from wreg
  3344  0BB8  1283               	bcf	3,5	;RP0=0, select bank0
  3345  0BB9  1303               	bcf	3,6	;RP1=0, select bank0
  3346  0BBA  00DC               	movwf	getCDS_AD@channel1
  3347                           
  3348                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3349  0BBB  01DA               	clrf	getCDS_AD@i
  3350  0BBC  01DB               	clrf	getCDS_AD@j
  3351                           
  3352                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3353  0BBD  1DB6               	btfss	__CDS,3
  3354  0BBE  0008               	return
  3355                           
  3356                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3357  0BBF  14B6               	bsf	__CDS,1
  3358                           
  3359                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3360  0BC0  3070               	movlw	112
  3361  0BC1  00D8               	movwf	??_getCDS_AD
  3362  0BC2  0858               	movf	??_getCDS_AD,w
  3363  0BC3  00F4               	movwf	getAD@adcon1
  3364  0BC4  085C               	movf	getCDS_AD@channel1,w
  3365  0BC5  158A  237D  158A   	fcall	_getAD
  3366  0BC8  1283               	bcf	3,5	;RP0=0, select bank0
  3367  0BC9  1303               	bcf	3,6	;RP1=0, select bank0
  3368  0BCA  00D9               	movwf	??_getCDS_AD+1
  3369  0BCB  0859               	movf	??_getCDS_AD+1,w
  3370  0BCC  00B8               	movwf	__CDS+2
  3371                           
  3372                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3373  0BCD  3070               	movlw	112
  3374  0BCE  00D8               	movwf	??_getCDS_AD
  3375  0BCF  0858               	movf	??_getCDS_AD,w
  3376  0BD0  00F4               	movwf	getAD@adcon1
  3377  0BD1  0857               	movf	getCDS_AD@channel2,w
  3378  0BD2  158A  237D         	fcall	_getAD
  3379  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  3380  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
  3381  0BD6  00D9               	movwf	??_getCDS_AD+1
  3382  0BD7  0859               	movf	??_getCDS_AD+1,w
  3383  0BD8  00B9               	movwf	__CDS+3
  3384  0BD9  0008               	return
  3385  0BDA                     __end_of_getCDS_AD:	
  3386                           
  3387                           	psect	text7
  3388  0B7D                     __ptext7:	
  3389 ;; *************** function _getAD *****************
  3390 ;; Defined at:
  3391 ;;		line 434 in file "../src/MCU_B1.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  adcon0          1    wreg     unsigned char 
  3394 ;;  adcon1          1    4[COMMON] unsigned char 
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  adcon0          1    5[COMMON] unsigned char 
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  1    wreg      unsigned char 
  3399 ;; Registers used:
  3400 ;;		wreg, status,2, status,0, pclath, cstack
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3406 ;;      Params:         1       0       0       0
  3407 ;;      Locals:         1       0       0       0
  3408 ;;      Temps:          0       0       0       0
  3409 ;;      Totals:         2       0       0       0
  3410 ;;Total ram usage:        2 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    3
  3413 ;; This function calls:
  3414 ;;		_Timeout_Counter
  3415 ;;		_set_TimeoutCleared
  3416 ;; This function is called by:
  3417 ;;		_getCDS_AD
  3418 ;;		_getLoad_AD
  3419 ;;		_getTemp_AD
  3420 ;;		_getPIR_AD
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           
  3425                           ;psect for function _getAD
  3426  0B7D                     _getAD:	
  3427                           
  3428                           ;incstack = 0
  3429                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3430                           ;getAD@adcon0 stored from wreg
  3431  0B7D  00F5               	movwf	getAD@adcon0
  3432                           
  3433                           ;MCU_B1.c: 435: ADCON0 = adcon0;
  3434  0B7E  0875               	movf	getAD@adcon0,w
  3435  0B7F  1283               	bcf	3,5	;RP0=0, select bank0
  3436  0B80  1303               	bcf	3,6	;RP1=0, select bank0
  3437  0B81  009F               	movwf	31	;volatile
  3438                           
  3439                           ;MCU_B1.c: 436: ADCON1 = adcon1;
  3440  0B82  0874               	movf	getAD@adcon1,w
  3441  0B83  1683               	bsf	3,5	;RP0=1, select bank1
  3442  0B84  1303               	bcf	3,6	;RP1=0, select bank1
  3443  0B85  009F               	movwf	31	;volatile
  3444                           
  3445                           ;MCU_B1.c: 437: GO_nDONE = 1;
  3446  0B86  1283               	bcf	3,5	;RP0=0, select bank0
  3447  0B87  1303               	bcf	3,6	;RP1=0, select bank0
  3448  0B88  149F               	bsf	31,1	;volatile
  3449                           
  3450                           ;MCU_B1.c: 438: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3451  0B89  2B8D               	goto	l5319
  3452  0B8A                     l5317:	
  3453                           
  3454                           ;MCU_B1.c: 439: Timeout_Counter();
  3455  0B8A  158A  2268  158A   	fcall	_Timeout_Counter
  3456  0B8D                     l5319:	
  3457  0B8D  1283               	bcf	3,5	;RP0=0, select bank0
  3458  0B8E  1303               	bcf	3,6	;RP1=0, select bank0
  3459  0B8F  1C9F               	btfss	31,1	;volatile
  3460  0B90  2B93               	goto	l5323
  3461  0B91  1D33               	btfss	_myMain+2,2
  3462  0B92  2B8A               	goto	l5317
  3463  0B93                     l5323:	
  3464                           
  3465                           ;MCU_B1.c: 440: };
  3466                           ;MCU_B1.c: 441: set_TimeoutCleared();
  3467  0B93  158A  2150         	fcall	_set_TimeoutCleared
  3468                           
  3469                           ;MCU_B1.c: 442: return ADRES;
  3470  0B95  1283               	bcf	3,5	;RP0=0, select bank0
  3471  0B96  1303               	bcf	3,6	;RP1=0, select bank0
  3472  0B97  081E               	movf	30,w	;volatile
  3473  0B98  0008               	return
  3474  0B99                     __end_of_getAD:	
  3475                           
  3476                           	psect	text8
  3477  0A1F                     __ptext8:	
  3478 ;; *************** function _WDT_Main *****************
  3479 ;; Defined at:
  3480 ;;		line 1116 in file "../src/MCU_B1.c"
  3481 ;; Parameters:    Size  Location     Type
  3482 ;;		None
  3483 ;; Auto vars:     Size  Location     Type
  3484 ;;		None
  3485 ;; Return value:  Size  Location     Type
  3486 ;;		None               void
  3487 ;; Registers used:
  3488 ;;		wreg, status,2, status,0, pclath, cstack
  3489 ;; Tracked objects:
  3490 ;;		On entry : 0/0
  3491 ;;		On exit  : 0/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3494 ;;      Params:         0       0       0       0
  3495 ;;      Locals:         0       0       0       0
  3496 ;;      Temps:          1       0       0       0
  3497 ;;      Totals:         1       0       0       0
  3498 ;;Total ram usage:        1 bytes
  3499 ;; Hardware stack levels used:    1
  3500 ;; Hardware stack levels required when called:    3
  3501 ;; This function calls:
  3502 ;;		_WDT_Clearing
  3503 ;; This function is called by:
  3504 ;;		_main
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           
  3509                           ;psect for function _WDT_Main
  3510  0A1F                     _WDT_Main:	
  3511                           
  3512                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  3513                           
  3514                           ;incstack = 0
  3515                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3516  0A1F  1283               	bcf	3,5	;RP0=0, select bank0
  3517  0A20  1303               	bcf	3,6	;RP1=0, select bank0
  3518  0A21  1C3D               	btfss	_WDT,0
  3519  0A22  0008               	return
  3520                           
  3521                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  3522  0A23  3001               	movlw	1
  3523  0A24  02BE               	subwf	_WDT+1,f
  3524  0A25  083E               	movf	_WDT+1,w
  3525  0A26  3AFF               	xorlw	255
  3526  0A27  1903               	skipnz
  3527  0A28  0008               	return
  3528                           
  3529                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  3530  0A29  3064               	movlw	100
  3531  0A2A  00F4               	movwf	??_WDT_Main
  3532  0A2B  0874               	movf	??_WDT_Main,w
  3533  0A2C  00BE               	movwf	_WDT+1
  3534                           
  3535                           ;MCU_B1.c: 1120: WDT_Clearing();
  3536  0A2D  118A  2002         	fcall	_WDT_Clearing
  3537  0A2F  0008               	return
  3538  0A30                     __end_of_WDT_Main:	
  3539                           
  3540                           	psect	text9
  3541  0002                     __ptext9:	
  3542 ;; *************** function _WDT_Clearing *****************
  3543 ;; Defined at:
  3544 ;;		line 1126 in file "../src/MCU_B1.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;		None
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;		None
  3549 ;; Return value:  Size  Location     Type
  3550 ;;		None               void
  3551 ;; Registers used:
  3552 ;;		None
  3553 ;; Tracked objects:
  3554 ;;		On entry : 0/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3558 ;;      Params:         0       0       0       0
  3559 ;;      Locals:         0       0       0       0
  3560 ;;      Temps:          0       0       0       0
  3561 ;;      Totals:         0       0       0       0
  3562 ;;Total ram usage:        0 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; Hardware stack levels required when called:    2
  3565 ;; This function calls:
  3566 ;;		Nothing
  3567 ;; This function is called by:
  3568 ;;		_WDT_Main
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572                           
  3573                           ;psect for function _WDT_Clearing
  3574  0002                     _WDT_Clearing:	
  3575                           
  3576                           ;incstack = 0
  3577                           ; Regs used in _WDT_Clearing: []
  3578  0002  0064               	clrwdt	;# 
  3579  0003  0008               	return
  3580  0004                     __end_of_WDT_Clearing:	
  3581                           
  3582                           	psect	text10
  3583  092C                     __ptext10:	
  3584 ;; *************** function _Temp_Main *****************
  3585 ;; Defined at:
  3586 ;;		line 57 in file "../src/OverTemperature_B1.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;		None
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;		None
  3591 ;; Return value:  Size  Location     Type
  3592 ;;		None               void
  3593 ;; Registers used:
  3594 ;;		wreg, status,2, status,0, pclath, cstack
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3600 ;;      Params:         0       0       0       0
  3601 ;;      Locals:         0       0       0       0
  3602 ;;      Temps:          0       0       0       0
  3603 ;;      Totals:         0       0       0       0
  3604 ;;Total ram usage:        0 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    5
  3607 ;; This function calls:
  3608 ;;		_setTemp_Main
  3609 ;; This function is called by:
  3610 ;;		_main
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           
  3615                           ;psect for function _Temp_Main
  3616  092C                     _Temp_Main:	
  3617                           
  3618                           ;OverTemperature_B1.c: 59: setTemp_Main();
  3619                           
  3620                           ;incstack = 0
  3621                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3622  092C  158A  2776         	fcall	_setTemp_Main
  3623  092E  0008               	return
  3624  092F                     __end_of_Temp_Main:	
  3625                           
  3626                           	psect	text11
  3627  0F76                     __ptext11:	
  3628 ;; *************** function _setTemp_Main *****************
  3629 ;; Defined at:
  3630 ;;		line 64 in file "../src/OverTemperature_B1.c"
  3631 ;; Parameters:    Size  Location     Type
  3632 ;;		None
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;  AD              1   16[BANK0 ] unsigned char 
  3635 ;;  DangerValue     1   15[BANK0 ] unsigned char 
  3636 ;;  SafeValue       1   14[BANK0 ] unsigned char 
  3637 ;;  TempGO          1   13[BANK0 ] unsigned char 
  3638 ;;  error           1   12[BANK0 ] unsigned char 
  3639 ;; Return value:  Size  Location     Type
  3640 ;;		None               void
  3641 ;; Registers used:
  3642 ;;		wreg, status,2, status,0, pclath, cstack
  3643 ;; Tracked objects:
  3644 ;;		On entry : 0/0
  3645 ;;		On exit  : 0/0
  3646 ;;		Unchanged: 0/0
  3647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3648 ;;      Params:         0       0       0       0
  3649 ;;      Locals:         0       5       0       0
  3650 ;;      Temps:          0       1       0       0
  3651 ;;      Totals:         0       6       0       0
  3652 ;;Total ram usage:        6 bytes
  3653 ;; Hardware stack levels used:    1
  3654 ;; Hardware stack levels required when called:    4
  3655 ;; This function calls:
  3656 ;;		_getMain_All_Error_Status
  3657 ;;		_getMain_All_LightsStatus
  3658 ;;		_setBuz
  3659 ;; This function is called by:
  3660 ;;		_Temp_Main
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           
  3665                           ;psect for function _setTemp_Main
  3666  0F76                     _setTemp_Main:	
  3667                           
  3668                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  3669                           
  3670                           ;incstack = 0
  3671                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3672  0F76  3000               	movlw	0
  3673  0F77  158A  250C  158A   	fcall	_getMain_All_Error_Status
  3674  0F7A  1283               	bcf	3,5	;RP0=0, select bank0
  3675  0F7B  1303               	bcf	3,6	;RP1=0, select bank0
  3676  0F7C  00E2               	movwf	??_setTemp_Main
  3677  0F7D  0862               	movf	??_setTemp_Main,w
  3678  0F7E  00E3               	movwf	setTemp_Main@error
  3679                           
  3680                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  3681  0F7F  01E5               	clrf	setTemp_Main@SafeValue
  3682  0F80  01E6               	clrf	setTemp_Main@DangerValue
  3683                           
  3684                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  3685  0F81  158A  21FE  158A   	fcall	_getMain_All_LightsStatus
  3686  0F84  1283               	bcf	3,5	;RP0=0, select bank0
  3687  0F85  1303               	bcf	3,6	;RP1=0, select bank0
  3688  0F86  00E2               	movwf	??_setTemp_Main
  3689  0F87  0862               	movf	??_setTemp_Main,w
  3690  0F88  00E4               	movwf	setTemp_Main@TempGO
  3691                           
  3692                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  3693  0F89  1C42               	btfss	_Temp,0
  3694  0F8A  2FFC               	goto	l952
  3695                           
  3696                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  3697  0F8B  1942               	btfsc	_Temp,2
  3698  0F8C  2FA9               	goto	l5385
  3699                           
  3700                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  3701  0F8D  0864               	movf	setTemp_Main@TempGO,w
  3702  0F8E  3A01               	xorlw	1
  3703  0F8F  1D03               	skipz
  3704  0F90  2F93               	goto	l958
  3705  0F91  1CC2               	btfss	_Temp,1
  3706  0F92  2F95               	goto	l5377
  3707  0F93                     l958:	
  3708  0F93  1CC2               	btfss	_Temp,1
  3709  0F94  2FA6               	goto	l5383
  3710  0F95                     l5377:	
  3711                           
  3712                           ;OverTemperature_B1.c: 79: Temp.Time++;
  3713  0F95  3001               	movlw	1
  3714  0F96  07C3               	addwf	_Temp+1,f
  3715  0F97  1803               	skipnc
  3716  0F98  0AC4               	incf	_Temp+2,f
  3717  0F99  3000               	movlw	0
  3718  0F9A  07C4               	addwf	_Temp+2,f
  3719                           
  3720                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  3721  0F9B  3000               	movlw	0
  3722  0F9C  0244               	subwf	_Temp+2,w
  3723  0F9D  30FA               	movlw	250
  3724  0F9E  1903               	skipnz
  3725  0F9F  0243               	subwf	_Temp+1,w
  3726  0FA0  1C03               	skipc
  3727  0FA1  0008               	return
  3728                           
  3729                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  3730  0FA2  01C3               	clrf	_Temp+1
  3731  0FA3  01C4               	clrf	_Temp+2
  3732                           
  3733                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  3734  0FA4  1542               	bsf	_Temp,2
  3735                           
  3736                           ;OverTemperature_B1.c: 83: }
  3737                           ;OverTemperature_B1.c: 84: } else {
  3738  0FA5  0008               	return
  3739  0FA6                     l5383:	
  3740                           
  3741                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  3742  0FA6  01C3               	clrf	_Temp+1
  3743  0FA7  01C4               	clrf	_Temp+2
  3744                           
  3745                           ;OverTemperature_B1.c: 86: }
  3746                           ;OverTemperature_B1.c: 87: } else {
  3747  0FA8  0008               	return
  3748  0FA9                     l5385:	
  3749                           
  3750                           ;OverTemperature_B1.c: 88: Temp.Time++;
  3751  0FA9  3001               	movlw	1
  3752  0FAA  07C3               	addwf	_Temp+1,f
  3753  0FAB  1803               	skipnc
  3754  0FAC  0AC4               	incf	_Temp+2,f
  3755  0FAD  3000               	movlw	0
  3756  0FAE  07C4               	addwf	_Temp+2,f
  3757                           
  3758                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  3759  0FAF  3000               	movlw	0
  3760  0FB0  0244               	subwf	_Temp+2,w
  3761  0FB1  3005               	movlw	5
  3762  0FB2  1903               	skipnz
  3763  0FB3  0243               	subwf	_Temp+1,w
  3764  0FB4  1C03               	skipc
  3765  0FB5  0008               	return
  3766                           
  3767                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  3768  0FB6  01C3               	clrf	_Temp+1
  3769  0FB7  01C4               	clrf	_Temp+2
  3770                           
  3771                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  3772  0FB8  0848               	movf	_Temp+6,w
  3773  0FB9  1903               	btfsc	3,2
  3774  0FBA  2FF6               	goto	l963
  3775                           
  3776                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  3777  0FBB  1142               	bcf	_Temp,2
  3778                           
  3779                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  3780  0FBC  0848               	movf	_Temp+6,w
  3781  0FBD  00E2               	movwf	??_setTemp_Main
  3782  0FBE  0862               	movf	??_setTemp_Main,w
  3783  0FBF  00E7               	movwf	setTemp_Main@AD
  3784                           
  3785                           ;OverTemperature_B1.c: 106: SafeValue = 0x7c;
  3786  0FC0  307C               	movlw	124
  3787  0FC1  00E2               	movwf	??_setTemp_Main
  3788  0FC2  0862               	movf	??_setTemp_Main,w
  3789  0FC3  00E5               	movwf	setTemp_Main@SafeValue
  3790                           
  3791                           ;OverTemperature_B1.c: 107: DangerValue = 0x76;
  3792  0FC4  3076               	movlw	118
  3793  0FC5  00E2               	movwf	??_setTemp_Main
  3794  0FC6  0862               	movf	??_setTemp_Main,w
  3795  0FC7  00E6               	movwf	setTemp_Main@DangerValue
  3796                           
  3797                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  3798  0FC8  1CC2               	btfss	_Temp,1
  3799  0FC9  2FE6               	goto	l5411
  3800                           
  3801                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  3802  0FCA  0865               	movf	setTemp_Main@SafeValue,w
  3803  0FCB  0267               	subwf	setTemp_Main@AD,w
  3804  0FCC  1C03               	skipc
  3805  0FCD  2FE3               	goto	l5409
  3806                           
  3807                           ;OverTemperature_B1.c: 121: Temp.Count++;
  3808  0FCE  3001               	movlw	1
  3809  0FCF  00E2               	movwf	??_setTemp_Main
  3810  0FD0  0862               	movf	??_setTemp_Main,w
  3811  0FD1  07C5               	addwf	_Temp+3,f
  3812                           
  3813                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  3814  0FD2  3003               	movlw	3
  3815  0FD3  0245               	subwf	_Temp+3,w
  3816  0FD4  1C03               	skipc
  3817  0FD5  2FF6               	goto	l963
  3818                           
  3819                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  3820  0FD6  01C5               	clrf	_Temp+3
  3821                           
  3822                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  3823  0FD7  10C2               	bcf	_Temp,1
  3824                           
  3825                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  3826  0FD8  3064               	movlw	100
  3827  0FD9  00DF               	movwf	setBuz@time
  3828  0FDA  3000               	movlw	0
  3829  0FDB  00E0               	movwf	setBuz@time+1
  3830  0FDC  3002               	movlw	2
  3831  0FDD  158A  2612  158A   	fcall	_setBuz
  3832                           
  3833                           ;OverTemperature_B1.c: 126: }
  3834                           ;OverTemperature_B1.c: 127: } else {
  3835  0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  3836  0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  3837  0FE2  2FF6               	goto	l963
  3838  0FE3                     l5409:	
  3839                           
  3840                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  3841  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  3842  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  3843  0FE5  2FF5               	goto	l5421
  3844  0FE6                     l5411:	
  3845                           ;OverTemperature_B1.c: 129: }
  3846                           ;OverTemperature_B1.c: 130: } else {
  3847                           
  3848                           
  3849                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  3850  0FE6  0867               	movf	setTemp_Main@AD,w
  3851  0FE7  0266               	subwf	setTemp_Main@DangerValue,w
  3852  0FE8  1C03               	skipc
  3853  0FE9  2FF5               	goto	l5421
  3854                           
  3855                           ;OverTemperature_B1.c: 132: Temp.Count++;
  3856  0FEA  3001               	movlw	1
  3857  0FEB  00E2               	movwf	??_setTemp_Main
  3858  0FEC  0862               	movf	??_setTemp_Main,w
  3859  0FED  07C5               	addwf	_Temp+3,f
  3860                           
  3861                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  3862  0FEE  3003               	movlw	3
  3863  0FEF  0245               	subwf	_Temp+3,w
  3864  0FF0  1C03               	skipc
  3865  0FF1  2FF6               	goto	l963
  3866                           
  3867                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  3868  0FF2  01C5               	clrf	_Temp+3
  3869                           
  3870                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  3871  0FF3  14C2               	bsf	_Temp,1
  3872                           
  3873                           ;OverTemperature_B1.c: 136: }
  3874                           ;OverTemperature_B1.c: 137: } else {
  3875  0FF4  2FF6               	goto	l963
  3876  0FF5                     l5421:	
  3877                           
  3878                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  3879  0FF5  01C5               	clrf	_Temp+3
  3880  0FF6                     l963:	
  3881                           ;OverTemperature_B1.c: 139: }
  3882                           ;OverTemperature_B1.c: 140: }
  3883                           ;OverTemperature_B1.c: 141: ;;
  3884                           ;OverTemperature_B1.c: 142: ;;
  3885                           
  3886                           
  3887                           ;OverTemperature_B1.c: 158: }
  3888                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  3889  0FF6  1283               	bcf	3,5	;RP0=0, select bank0
  3890  0FF7  1303               	bcf	3,6	;RP1=0, select bank0
  3891  0FF8  01C6               	clrf	_Temp+4
  3892                           
  3893                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  3894  0FF9  01C7               	clrf	_Temp+5
  3895                           
  3896                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  3897  0FFA  01C8               	clrf	_Temp+6
  3898                           
  3899                           ;OverTemperature_B1.c: 162: }
  3900                           ;OverTemperature_B1.c: 163: }
  3901                           ;OverTemperature_B1.c: 166: } else {
  3902  0FFB  0008               	return
  3903  0FFC                     l952:	
  3904                           
  3905                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  3906  0FFC  1C31               	btfss	_myMain,0
  3907  0FFD  0008               	return
  3908                           
  3909                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  3910  0FFE  1442               	bsf	_Temp,0
  3911  0FFF  0008               	return
  3912  1000                     __end_of_setTemp_Main:	
  3913                           
  3914                           	psect	text12
  3915  0929                     __ptext12:	
  3916 ;; *************** function _Temp_Initialization *****************
  3917 ;; Defined at:
  3918 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;		None
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;		None
  3923 ;; Return value:  Size  Location     Type
  3924 ;;		None               void
  3925 ;; Registers used:
  3926 ;;		status,2, status,0, pclath, cstack
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3932 ;;      Params:         0       0       0       0
  3933 ;;      Locals:         0       0       0       0
  3934 ;;      Temps:          0       0       0       0
  3935 ;;      Totals:         0       0       0       0
  3936 ;;Total ram usage:        0 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:    3
  3939 ;; This function calls:
  3940 ;;		_setTemp_Initialization
  3941 ;; This function is called by:
  3942 ;;		_main
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           
  3947                           ;psect for function _Temp_Initialization
  3948  0929                     _Temp_Initialization:	
  3949                           
  3950                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3951                           
  3952                           ;incstack = 0
  3953                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3954  0929  158A  211E         	fcall	_setTemp_Initialization
  3955  092B  0008               	return
  3956  092C                     __end_of_Temp_Initialization:	
  3957                           
  3958                           	psect	text13
  3959  091E                     __ptext13:	
  3960 ;; *************** function _setTemp_Initialization *****************
  3961 ;; Defined at:
  3962 ;;		line 52 in file "../src/OverTemperature_B1.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;		None
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;		None
  3967 ;; Return value:  Size  Location     Type
  3968 ;;		None               void
  3969 ;; Registers used:
  3970 ;;		None
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3976 ;;      Params:         0       0       0       0
  3977 ;;      Locals:         0       0       0       0
  3978 ;;      Temps:          0       0       0       0
  3979 ;;      Totals:         0       0       0       0
  3980 ;;Total ram usage:        0 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    2
  3983 ;; This function calls:
  3984 ;;		Nothing
  3985 ;; This function is called by:
  3986 ;;		_Temp_Initialization
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           
  3991                           ;psect for function _setTemp_Initialization
  3992  091E                     _setTemp_Initialization:	
  3993                           
  3994                           ;incstack = 0
  3995                           ; Regs used in _setTemp_Initialization: []
  3996  091E  0008               	return
  3997  091F                     __end_of_setTemp_Initialization:	
  3998                           
  3999                           	psect	text14
  4000  098F                     __ptext14:	
  4001 ;; *************** function _Switch_Main *****************
  4002 ;; Defined at:
  4003 ;;		line 76 in file "../src/Switch_B1.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;		None
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;		None
  4008 ;; Return value:  Size  Location     Type
  4009 ;;		None               void
  4010 ;; Registers used:
  4011 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4012 ;; Tracked objects:
  4013 ;;		On entry : 0/0
  4014 ;;		On exit  : 0/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4017 ;;      Params:         0       0       0       0
  4018 ;;      Locals:         0       0       0       0
  4019 ;;      Temps:          0       0       0       0
  4020 ;;      Totals:         0       0       0       0
  4021 ;;Total ram usage:        0 bytes
  4022 ;; Hardware stack levels used:    1
  4023 ;; Hardware stack levels required when called:    6
  4024 ;; This function calls:
  4025 ;;		_TouchPower
  4026 ;;		_setSw_Main
  4027 ;; This function is called by:
  4028 ;;		_main
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           
  4033                           ;psect for function _Switch_Main
  4034  098F                     _Switch_Main:	
  4035                           
  4036                           ;Switch_B1.c: 79: setSw_Main(1);
  4037                           
  4038                           ;incstack = 0
  4039                           ; Regs used in _Switch_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4040  098F  3001               	movlw	1
  4041  0990  118A  25BB  158A   	fcall	_setSw_Main
  4042                           
  4043                           ;Switch_B1.c: 83: setSw_Main(2);
  4044  0993  3002               	movlw	2
  4045  0994  118A  25BB  158A   	fcall	_setSw_Main
  4046                           
  4047                           ;Switch_B1.c: 91: TouchPower();
  4048  0997  158A  227C         	fcall	_TouchPower
  4049  0999  0008               	return
  4050  099A                     __end_of_Switch_Main:	
  4051                           
  4052                           	psect	text15
  4053  05BB                     __ptext15:	
  4054 ;; *************** function _setSw_Main *****************
  4055 ;; Defined at:
  4056 ;;		line 117 in file "../src/Switch_B1.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;  sw              1    wreg     unsigned char 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;  sw              1    8[BANK0 ] unsigned char 
  4061 ;; Return value:  Size  Location     Type
  4062 ;;		None               void
  4063 ;; Registers used:
  4064 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4070 ;;      Params:         0       0       0       0
  4071 ;;      Locals:         0       1       0       0
  4072 ;;      Temps:          0       2       0       0
  4073 ;;      Totals:         0       3       0       0
  4074 ;;Total ram usage:        3 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    5
  4077 ;; This function calls:
  4078 ;;		_SwPointSelect
  4079 ;;		_getMain_All_Error_Status
  4080 ;;		_getSw_KeyStatus
  4081 ;;		_setLED
  4082 ;;		_setLights_SwOff
  4083 ;;		_setLights_SwOn
  4084 ;; This function is called by:
  4085 ;;		_Switch_Main
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           
  4090                           ;psect for function _setSw_Main
  4091  05BB                     _setSw_Main:	
  4092                           
  4093                           ;incstack = 0
  4094                           ; Regs used in _setSw_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4095                           ;setSw_Main@sw stored from wreg
  4096  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  4097  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  4098  05BD  00DF               	movwf	setSw_Main@sw
  4099                           
  4100                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4101  05BE  085F               	movf	setSw_Main@sw,w
  4102  05BF  158A  2255  118A   	fcall	_SwPointSelect
  4103                           
  4104                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4105  05C2  0879               	movf	_Sw,w
  4106  05C3  0084               	movwf	4
  4107  05C4  1783               	bsf	3,7	;select IRP bank2
  4108  05C5  1C00               	btfss	0,0
  4109  05C6  2E6E               	goto	l1426
  4110                           
  4111                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  4112  05C7  3000               	movlw	0
  4113  05C8  158A  250C  118A   	fcall	_getMain_All_Error_Status
  4114  05CB  3800               	iorlw	0
  4115  05CC  1D03               	skipz
  4116  05CD  2DE9               	goto	l5449
  4117                           
  4118                           ;Switch_B1.c: 122: Sw->Detect = 0;
  4119  05CE  0A79               	incf	_Sw,w
  4120  05CF  0084               	movwf	4
  4121  05D0  1783               	bsf	3,7	;select IRP bank2
  4122  05D1  1080               	bcf	0,1
  4123                           
  4124                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  4125  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  4126  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  4127  05D4  085F               	movf	setSw_Main@sw,w
  4128  05D5  158A  2290  118A   	fcall	_getSw_KeyStatus
  4129  05D8  3A01               	xorlw	1
  4130  05D9  3000               	movlw	0
  4131  05DA  1903               	skipnz
  4132  05DB  3001               	movlw	1
  4133  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  4134  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  4135  05DE  00DD               	movwf	??_setSw_Main
  4136  05DF  0879               	movf	_Sw,w
  4137  05E0  0084               	movwf	4
  4138  05E1  0DDD               	rlf	??_setSw_Main,f
  4139  05E2  1783               	bsf	3,7	;select IRP bank2
  4140  05E3  0800               	movf	0,w
  4141  05E4  065D               	xorwf	??_setSw_Main,w
  4142  05E5  39FD               	andlw	-3
  4143  05E6  065D               	xorwf	??_setSw_Main,w
  4144  05E7  0080               	movwf	0
  4145                           
  4146                           ;Switch_B1.c: 124: } else {
  4147  05E8  2DF7               	goto	l1428
  4148  05E9                     l5449:	
  4149                           
  4150                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  4151  05E9  0A79               	incf	_Sw,w
  4152  05EA  0084               	movwf	4
  4153  05EB  1783               	bsf	3,7	;select IRP bank2
  4154  05EC  1880               	btfsc	0,1
  4155  05ED  2DF7               	goto	l1428
  4156                           
  4157                           ;Switch_B1.c: 126: Sw->Detect = 1;
  4158  05EE  0A79               	incf	_Sw,w
  4159  05EF  0084               	movwf	4
  4160  05F0  1480               	bsf	0,1
  4161                           
  4162                           ;Switch_B1.c: 128: Sw->Touch = 0;
  4163  05F1  0879               	movf	_Sw,w
  4164  05F2  0084               	movwf	4
  4165  05F3  1080               	bcf	0,1
  4166                           
  4167                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  4168  05F4  0879               	movf	_Sw,w
  4169  05F5  0084               	movwf	4
  4170  05F6  1500               	bsf	0,2
  4171  05F7                     l1428:	
  4172                           
  4173                           ;Switch_B1.c: 130: }
  4174                           ;Switch_B1.c: 131: }
  4175                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  4176  05F7  0879               	movf	_Sw,w
  4177  05F8  0084               	movwf	4
  4178  05F9  1C80               	btfss	0,1
  4179  05FA  2E45               	goto	l5477
  4180                           
  4181                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  4182  05FB  0879               	movf	_Sw,w
  4183  05FC  0084               	movwf	4
  4184  05FD  1900               	btfsc	0,2
  4185  05FE  2E1A               	goto	l5465
  4186                           
  4187                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  4188  05FF  3001               	movlw	1
  4189  0600  1283               	bcf	3,5	;RP0=0, select bank0
  4190  0601  1303               	bcf	3,6	;RP1=0, select bank0
  4191  0602  00DD               	movwf	??_setSw_Main
  4192  0603  0879               	movf	_Sw,w
  4193  0604  3E02               	addlw	2
  4194  0605  0084               	movwf	4
  4195  0606  085D               	movf	??_setSw_Main,w
  4196  0607  0780               	addwf	0,f
  4197                           
  4198                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  4199  0608  0879               	movf	_Sw,w
  4200  0609  3E02               	addlw	2
  4201  060A  0084               	movwf	4
  4202  060B  3003               	movlw	3
  4203  060C  0200               	subwf	0,w
  4204  060D  1C03               	skipc
  4205  060E  0008               	return
  4206                           
  4207                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  4208  060F  0879               	movf	_Sw,w
  4209  0610  3E02               	addlw	2
  4210  0611  0084               	movwf	4
  4211  0612  0180               	clrf	0
  4212                           
  4213                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  4214  0613  0879               	movf	_Sw,w
  4215  0614  0084               	movwf	4
  4216  0615  1500               	bsf	0,2
  4217                           
  4218                           ;Switch_B1.c: 140: setLights_SwOn(sw);
  4219  0616  085F               	movf	setSw_Main@sw,w
  4220  0617  158A  23FD         	fcall	_setLights_SwOn
  4221                           
  4222                           ;Switch_B1.c: 146: }
  4223                           ;Switch_B1.c: 147: } else {
  4224  0619  0008               	return
  4225  061A                     l5465:	
  4226                           
  4227                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  4228  061A  0879               	movf	_Sw,w
  4229  061B  0084               	movwf	4
  4230  061C  1783               	bsf	3,7	;select IRP bank2
  4231  061D  1980               	btfsc	0,3
  4232  061E  0008               	return
  4233                           
  4234                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  4235  061F  0879               	movf	_Sw,w
  4236  0620  3E03               	addlw	3
  4237  0621  0084               	movwf	4
  4238  0622  3001               	movlw	1
  4239  0623  0780               	addwf	0,f
  4240  0624  0A84               	incf	4,f
  4241  0625  1803               	skipnc
  4242  0626  0A80               	incf	0,f
  4243                           
  4244                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (3000 / 20)) {
  4245  0627  0879               	movf	_Sw,w
  4246  0628  3E03               	addlw	3
  4247  0629  0084               	movwf	4
  4248  062A  0800               	movf	0,w
  4249  062B  1283               	bcf	3,5	;RP0=0, select bank0
  4250  062C  1303               	bcf	3,6	;RP1=0, select bank0
  4251  062D  00DD               	movwf	??_setSw_Main
  4252  062E  0A84               	incf	4,f
  4253  062F  0800               	movf	0,w
  4254  0630  00DE               	movwf	??_setSw_Main+1
  4255  0631  3000               	movlw	0
  4256  0632  025E               	subwf	??_setSw_Main+1,w
  4257  0633  3096               	movlw	150
  4258  0634  1903               	skipnz
  4259  0635  025D               	subwf	??_setSw_Main,w
  4260  0636  1C03               	skipc
  4261  0637  0008               	return
  4262                           
  4263                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  4264  0638  0879               	movf	_Sw,w
  4265  0639  3E03               	addlw	3
  4266  063A  0084               	movwf	4
  4267  063B  0180               	clrf	0
  4268  063C  0A84               	incf	4,f
  4269  063D  0180               	clrf	0
  4270                           
  4271                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  4272  063E  0879               	movf	_Sw,w
  4273  063F  0084               	movwf	4
  4274  0640  1580               	bsf	0,3
  4275                           
  4276                           ;Switch_B1.c: 154: setLights_SwOff(sw);
  4277  0641  085F               	movf	setSw_Main@sw,w
  4278  0642  158A  2348         	fcall	_setLights_SwOff
  4279                           
  4280                           ;Switch_B1.c: 194: }
  4281                           ;Switch_B1.c: 195: }
  4282                           ;Switch_B1.c: 196: } else {
  4283                           
  4284                           ;Switch_B1.c: 161: }
  4285                           ;Switch_B1.c: 162: } else {
  4286  0644  0008               	return
  4287  0645                     l5477:	
  4288                           
  4289                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  4290  0645  0879               	movf	_Sw,w
  4291  0646  0084               	movwf	4
  4292  0647  1783               	bsf	3,7	;select IRP bank2
  4293  0648  1D00               	btfss	0,2
  4294  0649  0008               	return
  4295                           
  4296                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  4297  064A  3001               	movlw	1
  4298  064B  1283               	bcf	3,5	;RP0=0, select bank0
  4299  064C  1303               	bcf	3,6	;RP1=0, select bank0
  4300  064D  00DD               	movwf	??_setSw_Main
  4301  064E  0879               	movf	_Sw,w
  4302  064F  3E02               	addlw	2
  4303  0650  0084               	movwf	4
  4304  0651  085D               	movf	??_setSw_Main,w
  4305  0652  0780               	addwf	0,f
  4306                           
  4307                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  4308  0653  0879               	movf	_Sw,w
  4309  0654  3E02               	addlw	2
  4310  0655  0084               	movwf	4
  4311  0656  3003               	movlw	3
  4312  0657  0200               	subwf	0,w
  4313  0658  1C03               	skipc
  4314  0659  0008               	return
  4315                           
  4316                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  4317  065A  0879               	movf	_Sw,w
  4318  065B  3E02               	addlw	2
  4319  065C  0084               	movwf	4
  4320  065D  0180               	clrf	0
  4321                           
  4322                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  4323  065E  0879               	movf	_Sw,w
  4324  065F  0084               	movwf	4
  4325  0660  1100               	bcf	0,2
  4326                           
  4327                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  4328  0661  0879               	movf	_Sw,w
  4329  0662  3E03               	addlw	3
  4330  0663  0084               	movwf	4
  4331  0664  0180               	clrf	0
  4332  0665  0A84               	incf	4,f
  4333  0666  0180               	clrf	0
  4334                           
  4335                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  4336  0667  0879               	movf	_Sw,w
  4337  0668  0084               	movwf	4
  4338  0669  1180               	bcf	0,3
  4339                           
  4340                           ;Switch_B1.c: 212: setLights_SwOff(sw);
  4341  066A  085F               	movf	setSw_Main@sw,w
  4342  066B  158A  2348         	fcall	_setLights_SwOff
  4343                           
  4344                           ;Switch_B1.c: 221: }
  4345                           ;Switch_B1.c: 222: }
  4346                           ;Switch_B1.c: 223: }
  4347                           ;Switch_B1.c: 224: } else {
  4348  066D  0008               	return
  4349  066E                     l1426:	
  4350                           
  4351                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  4352  066E  1283               	bcf	3,5	;RP0=0, select bank0
  4353  066F  1303               	bcf	3,6	;RP1=0, select bank0
  4354  0670  1C31               	btfss	_myMain,0
  4355  0671  0008               	return
  4356                           
  4357                           ;Switch_B1.c: 226: Sw->Enable = 1;
  4358  0672  0879               	movf	_Sw,w
  4359  0673  0084               	movwf	4
  4360  0674  1400               	bsf	0,0
  4361                           
  4362                           ;Switch_B1.c: 228: if (sw == 2) {
  4363  0675  085F               	movf	setSw_Main@sw,w
  4364  0676  3A02               	xorlw	2
  4365  0677  1D03               	skipz
  4366  0678  0008               	return
  4367                           
  4368                           ;Switch_B1.c: 229: setLED(1, 1);
  4369  0679  01D7               	clrf	setLED@command
  4370  067A  0AD7               	incf	setLED@command,f
  4371  067B  3001               	movlw	1
  4372  067C  158A  2659         	fcall	_setLED
  4373  067E  0008               	return
  4374  067F                     __end_of_setSw_Main:	
  4375                           
  4376                           	psect	text16
  4377  0A90                     __ptext16:	
  4378 ;; *************** function _getSw_KeyStatus *****************
  4379 ;; Defined at:
  4380 ;;		line 237 in file "../src/Switch_B1.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  sw              1    wreg     unsigned char 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;  sw              1    5[COMMON] unsigned char 
  4385 ;;  status          1    4[COMMON] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      unsigned char 
  4388 ;; Registers used:
  4389 ;;		wreg, status,2
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4395 ;;      Params:         0       0       0       0
  4396 ;;      Locals:         2       0       0       0
  4397 ;;      Temps:          0       0       0       0
  4398 ;;      Totals:         2       0       0       0
  4399 ;;Total ram usage:        2 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    2
  4402 ;; This function calls:
  4403 ;;		Nothing
  4404 ;; This function is called by:
  4405 ;;		_setSw_Main
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           
  4410                           ;psect for function _getSw_KeyStatus
  4411  0A90                     _getSw_KeyStatus:	
  4412                           
  4413                           ;incstack = 0
  4414                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  4415                           ;getSw_KeyStatus@sw stored from wreg
  4416  0A90  00F5               	movwf	getSw_KeyStatus@sw
  4417                           
  4418                           ;Switch_B1.c: 238: char status = 0;
  4419  0A91  01F4               	clrf	getSw_KeyStatus@status
  4420                           
  4421                           ;Switch_B1.c: 252: if (sw == 1) {
  4422  0A92  0875               	movf	getSw_KeyStatus@sw,w
  4423  0A93  3A01               	xorlw	1
  4424  0A94  1D03               	skipz
  4425  0A95  2A98               	goto	l3817
  4426                           
  4427                           ;Switch_B1.c: 253: __nop();
  4428  0A96  0000               	nop
  4429                           
  4430                           ;Switch_B1.c: 254: } else if (sw == 2) {
  4431  0A97  2AA2               	goto	l3821
  4432  0A98                     l3817:	
  4433  0A98  0875               	movf	getSw_KeyStatus@sw,w
  4434  0A99  3A02               	xorlw	2
  4435  0A9A  1D03               	skipz
  4436  0A9B  2AA2               	goto	l3821
  4437                           
  4438                           ;Switch_B1.c: 255: status = RB4 == 1 ? 1 : 0;
  4439  0A9C  3000               	movlw	0
  4440  0A9D  1283               	bcf	3,5	;RP0=0, select bank0
  4441  0A9E  1303               	bcf	3,6	;RP1=0, select bank0
  4442  0A9F  1A06               	btfsc	6,4	;volatile
  4443  0AA0  3001               	movlw	1
  4444  0AA1  00F4               	movwf	getSw_KeyStatus@status
  4445  0AA2                     l3821:	
  4446                           
  4447                           ;Switch_B1.c: 256: }
  4448                           ;Switch_B1.c: 275: return status;
  4449  0AA2  0874               	movf	getSw_KeyStatus@status,w
  4450  0AA3  0008               	return
  4451  0AA4                     __end_of_getSw_KeyStatus:	
  4452                           
  4453                           	psect	text17
  4454  0A55                     __ptext17:	
  4455 ;; *************** function _SwPointSelect *****************
  4456 ;; Defined at:
  4457 ;;		line 25 in file "../src/Switch_B1.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  sw              1    wreg     unsigned char 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  sw              1    5[COMMON] unsigned char 
  4462 ;; Return value:  Size  Location     Type
  4463 ;;		None               void
  4464 ;; Registers used:
  4465 ;;		wreg
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4471 ;;      Params:         0       0       0       0
  4472 ;;      Locals:         1       0       0       0
  4473 ;;      Temps:          1       0       0       0
  4474 ;;      Totals:         2       0       0       0
  4475 ;;Total ram usage:        2 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    2
  4478 ;; This function calls:
  4479 ;;		Nothing
  4480 ;; This function is called by:
  4481 ;;		_setSw_Main
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           
  4486                           ;psect for function _SwPointSelect
  4487  0A55                     _SwPointSelect:	
  4488                           
  4489                           ;incstack = 0
  4490                           ; Regs used in _SwPointSelect: [wreg]
  4491                           ;SwPointSelect@sw stored from wreg
  4492  0A55  00F5               	movwf	SwPointSelect@sw
  4493                           
  4494                           ;Switch_B1.c: 28: if (sw == 1) {
  4495  0A56  0875               	movf	SwPointSelect@sw,w
  4496  0A57  3A01               	xorlw	1
  4497  0A58  1D03               	skipz
  4498  0A59  2A5F               	goto	l3807
  4499                           
  4500                           ;Switch_B1.c: 29: Sw = &Sw1;
  4501  0A5A  3020               	movlw	_Sw1& (0+255)
  4502  0A5B  00F4               	movwf	??_SwPointSelect
  4503  0A5C  0874               	movf	??_SwPointSelect,w
  4504  0A5D  00F9               	movwf	_Sw
  4505                           
  4506                           ;Switch_B1.c: 30: }
  4507  0A5E  0008               	return
  4508  0A5F                     l3807:	
  4509                           
  4510                           ;Switch_B1.c: 33: else if (sw == 2) {
  4511  0A5F  0875               	movf	SwPointSelect@sw,w
  4512  0A60  3A02               	xorlw	2
  4513  0A61  1D03               	skipz
  4514  0A62  0008               	return
  4515                           
  4516                           ;Switch_B1.c: 34: Sw = &Sw2;
  4517  0A63  3025               	movlw	_Sw2& (0+255)
  4518  0A64  00F4               	movwf	??_SwPointSelect
  4519  0A65  0874               	movf	??_SwPointSelect,w
  4520  0A66  00F9               	movwf	_Sw
  4521  0A67  0008               	return
  4522  0A68                     __end_of_SwPointSelect:	
  4523                           
  4524                           	psect	text18
  4525  0A7C                     __ptext18:	
  4526 ;; *************** function _TouchPower *****************
  4527 ;; Defined at:
  4528 ;;		line 10 in file "../src/Switch_B1.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;		None
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;		None
  4533 ;; Return value:  Size  Location     Type
  4534 ;;		None               void
  4535 ;; Registers used:
  4536 ;;		wreg, status,2, status,0, pclath, cstack
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4542 ;;      Params:         0       0       0       0
  4543 ;;      Locals:         0       0       0       0
  4544 ;;      Temps:          0       0       0       0
  4545 ;;      Totals:         0       0       0       0
  4546 ;;Total ram usage:        0 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    3
  4549 ;; This function calls:
  4550 ;;		_Timeout_Counter
  4551 ;;		_set_TimeoutCleared
  4552 ;; This function is called by:
  4553 ;;		_Switch_Main
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           
  4558                           ;psect for function _TouchPower
  4559  0A7C                     _TouchPower:	
  4560                           
  4561                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  4562                           
  4563                           ;incstack = 0
  4564                           ; Regs used in _TouchPower: [wreg+status,2+status,0+pclath+cstack]
  4565  0A7C  1283               	bcf	3,5	;RP0=0, select bank0
  4566  0A7D  1303               	bcf	3,6	;RP1=0, select bank0
  4567  0A7E  1C31               	btfss	_myMain,0
  4568  0A7F  0008               	return
  4569                           
  4570                           ;Switch_B1.c: 12: if (RB5 == 0) {
  4571  0A80  1A86               	btfsc	6,5	;volatile
  4572  0A81  0008               	return
  4573  0A82  2A87               	goto	l5433
  4574  0A83                     l1404:	
  4575                           ;Switch_B1.c: 13: while (RB5 == 0 && myMain.Timeout == 0) {
  4576                           
  4577                           
  4578                           ;Switch_B1.c: 14: RB5 = 1;
  4579  0A83  1686               	bsf	6,5	;volatile
  4580                           
  4581                           ;Switch_B1.c: 15: Timeout_Counter();
  4582  0A84  158A  2268  158A   	fcall	_Timeout_Counter
  4583  0A87                     l5433:	
  4584  0A87  1283               	bcf	3,5	;RP0=0, select bank0
  4585  0A88  1303               	bcf	3,6	;RP1=0, select bank0
  4586  0A89  1A86               	btfsc	6,5	;volatile
  4587  0A8A  2A8D               	goto	l5437
  4588  0A8B  1D33               	btfss	_myMain+2,2
  4589  0A8C  2A83               	goto	l1404
  4590  0A8D                     l5437:	
  4591                           
  4592                           ;Switch_B1.c: 16: }
  4593                           ;Switch_B1.c: 17: set_TimeoutCleared();
  4594  0A8D  158A  2150         	fcall	_set_TimeoutCleared
  4595  0A8F  0008               	return
  4596  0A90                     __end_of_TouchPower:	
  4597                           
  4598                           	psect	text19
  4599  0950                     __ptext19:	
  4600 ;; *************** function _set_TimeoutCleared *****************
  4601 ;; Defined at:
  4602 ;;		line 281 in file "../src/Main_B1.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;		None
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;		None
  4607 ;; Return value:  Size  Location     Type
  4608 ;;		None               void
  4609 ;; Registers used:
  4610 ;;		status,2
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4616 ;;      Params:         0       0       0       0
  4617 ;;      Locals:         0       0       0       0
  4618 ;;      Temps:          0       0       0       0
  4619 ;;      Totals:         0       0       0       0
  4620 ;;Total ram usage:        0 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; Hardware stack levels required when called:    2
  4623 ;; This function calls:
  4624 ;;		Nothing
  4625 ;; This function is called by:
  4626 ;;		_getAD
  4627 ;;		_TouchPower
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           
  4632                           ;psect for function _set_TimeoutCleared
  4633  0950                     _set_TimeoutCleared:	
  4634                           
  4635                           ;Main_B1.c: 282: myMain.Timeout = 0;
  4636                           
  4637                           ;incstack = 0
  4638                           ; Regs used in _set_TimeoutCleared: [status,2]
  4639  0950  1283               	bcf	3,5	;RP0=0, select bank0
  4640  0951  1303               	bcf	3,6	;RP1=0, select bank0
  4641  0952  1133               	bcf	_myMain+2,2
  4642                           
  4643                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  4644  0953  01B4               	clrf	_myMain+3
  4645  0954  01B5               	clrf	_myMain+4
  4646  0955  0008               	return
  4647  0956                     __end_of_set_TimeoutCleared:	
  4648                           
  4649                           	psect	text20
  4650  0A68                     __ptext20:	
  4651 ;; *************** function _Timeout_Counter *****************
  4652 ;; Defined at:
  4653 ;;		line 272 in file "../src/Main_B1.c"
  4654 ;; Parameters:    Size  Location     Type
  4655 ;;		None
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;		None
  4658 ;; Return value:  Size  Location     Type
  4659 ;;		None               void
  4660 ;; Registers used:
  4661 ;;		wreg, status,2
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4667 ;;      Params:         0       0       0       0
  4668 ;;      Locals:         0       0       0       0
  4669 ;;      Temps:          0       0       0       0
  4670 ;;      Totals:         0       0       0       0
  4671 ;;Total ram usage:        0 bytes
  4672 ;; Hardware stack levels used:    1
  4673 ;; Hardware stack levels required when called:    2
  4674 ;; This function calls:
  4675 ;;		Nothing
  4676 ;; This function is called by:
  4677 ;;		_getAD
  4678 ;;		_TouchPower
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           
  4683                           ;psect for function _Timeout_Counter
  4684  0A68                     _Timeout_Counter:	
  4685                           
  4686                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  4687                           
  4688                           ;incstack = 0
  4689                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  4690  0A68  3001               	movlw	1
  4691  0A69  1283               	bcf	3,5	;RP0=0, select bank0
  4692  0A6A  1303               	bcf	3,6	;RP1=0, select bank0
  4693  0A6B  07B4               	addwf	_myMain+3,f
  4694  0A6C  1803               	skipnc
  4695  0A6D  0AB5               	incf	_myMain+4,f
  4696  0A6E  3000               	movlw	0
  4697  0A6F  07B5               	addwf	_myMain+4,f
  4698                           
  4699                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  4700  0A70  3061               	movlw	97
  4701  0A71  0635               	xorwf	_myMain+4,w
  4702  0A72  1D03               	skipz
  4703  0A73  2A76               	goto	u5855
  4704  0A74  30A8               	movlw	168
  4705  0A75  0634               	xorwf	_myMain+3,w
  4706  0A76                     u5855:	
  4707  0A76  1D03               	skipz
  4708  0A77  0008               	return
  4709                           
  4710                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  4711  0A78  01B4               	clrf	_myMain+3
  4712  0A79  01B5               	clrf	_myMain+4
  4713                           
  4714                           ;Main_B1.c: 276: myMain.Timeout = 1;
  4715  0A7A  1533               	bsf	_myMain+2,2
  4716  0A7B  0008               	return
  4717  0A7C                     __end_of_Timeout_Counter:	
  4718                           
  4719                           	psect	text21
  4720  091D                     __ptext21:	
  4721 ;; *************** function _Switch_Initialization *****************
  4722 ;; Defined at:
  4723 ;;		line 46 in file "../src/Switch_B1.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;		None               void
  4730 ;; Registers used:
  4731 ;;		None
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4737 ;;      Params:         0       0       0       0
  4738 ;;      Locals:         0       0       0       0
  4739 ;;      Temps:          0       0       0       0
  4740 ;;      Totals:         0       0       0       0
  4741 ;;Total ram usage:        0 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    2
  4744 ;; This function calls:
  4745 ;;		Nothing
  4746 ;; This function is called by:
  4747 ;;		_main
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           
  4752                           ;psect for function _Switch_Initialization
  4753  091D                     _Switch_Initialization:	
  4754                           
  4755                           ;incstack = 0
  4756                           ; Regs used in _Switch_Initialization: []
  4757  091D  0008               	return
  4758  091E                     __end_of_Switch_Initialization:	
  4759                           
  4760                           	psect	text22
  4761  0926                     __ptext22:	
  4762 ;; *************** function _SYSC_Main *****************
  4763 ;; Defined at:
  4764 ;;		line 17 in file "../src/SYSC_B1.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;		None
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;		None
  4769 ;; Return value:  Size  Location     Type
  4770 ;;		None               void
  4771 ;; Registers used:
  4772 ;;		wreg, status,2, status,0, pclath, cstack
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4778 ;;      Params:         0       0       0       0
  4779 ;;      Locals:         0       0       0       0
  4780 ;;      Temps:          0       0       0       0
  4781 ;;      Totals:         0       0       0       0
  4782 ;;Total ram usage:        0 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    4
  4785 ;; This function calls:
  4786 ;;		_setSYSC_Main
  4787 ;; This function is called by:
  4788 ;;		_main
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           
  4793                           ;psect for function _SYSC_Main
  4794  0926                     _SYSC_Main:	
  4795                           
  4796                           ;SYSC_B1.c: 19: setSYSC_Main();
  4797                           
  4798                           ;incstack = 0
  4799                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4800  0926  158A  25CE         	fcall	_setSYSC_Main
  4801  0928  0008               	return
  4802  0929                     __end_of_SYSC_Main:	
  4803                           
  4804                           	psect	text23
  4805  0DCE                     __ptext23:	
  4806 ;; *************** function _setSYSC_Main *****************
  4807 ;; Defined at:
  4808 ;;		line 23 in file "../src/SYSC_B1.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;		None
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;		None
  4813 ;; Return value:  Size  Location     Type
  4814 ;;		None               void
  4815 ;; Registers used:
  4816 ;;		wreg, status,2, status,0, pclath, cstack
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4822 ;;      Params:         0       0       0       0
  4823 ;;      Locals:         0       0       0       0
  4824 ;;      Temps:          0       0       0       0
  4825 ;;      Totals:         0       0       0       0
  4826 ;;Total ram usage:        0 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    3
  4829 ;; This function calls:
  4830 ;;		_getMain_All_Error_Status
  4831 ;; This function is called by:
  4832 ;;		_SYSC_Main
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           
  4837                           ;psect for function _setSYSC_Main
  4838  0DCE                     _setSYSC_Main:	
  4839                           
  4840                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4841                           
  4842                           ;incstack = 0
  4843                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4844  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  4845  0DCF  1303               	bcf	3,6	;RP1=0, select bank0
  4846  0DD0  1C2C               	btfss	_SYSC,0
  4847  0DD1  0008               	return
  4848                           
  4849                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4850  0DD2  18AC               	btfsc	_SYSC,1
  4851  0DD3  2DE5               	goto	l4105
  4852                           
  4853                           ;SYSC_B1.c: 27: SYSC.Time++;
  4854  0DD4  3001               	movlw	1
  4855  0DD5  07AD               	addwf	_SYSC+1,f
  4856  0DD6  1803               	skipnc
  4857  0DD7  0AAE               	incf	_SYSC+2,f
  4858  0DD8  3000               	movlw	0
  4859  0DD9  07AE               	addwf	_SYSC+2,f
  4860                           
  4861                           ;SYSC_B1.c: 28: if (SYSC.Time >= (500 / 20)) {
  4862  0DDA  3000               	movlw	0
  4863  0DDB  022E               	subwf	_SYSC+2,w
  4864  0DDC  3019               	movlw	25
  4865  0DDD  1903               	skipnz
  4866  0DDE  022D               	subwf	_SYSC+1,w
  4867  0DDF  1C03               	skipc
  4868  0DE0  0008               	return
  4869                           
  4870                           ;SYSC_B1.c: 29: SYSC.Time = 0;
  4871  0DE1  01AD               	clrf	_SYSC+1
  4872  0DE2  01AE               	clrf	_SYSC+2
  4873                           
  4874                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4875  0DE3  14AC               	bsf	_SYSC,1
  4876                           
  4877                           ;SYSC_B1.c: 31: }
  4878                           ;SYSC_B1.c: 32: } else {
  4879  0DE4  0008               	return
  4880  0DE5                     l4105:	
  4881                           
  4882                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4883  0DE5  3001               	movlw	1
  4884  0DE6  158A  250C  158A   	fcall	_getMain_All_Error_Status
  4885  0DE9  3800               	iorlw	0
  4886  0DEA  1D03               	skipz
  4887  0DEB  0008               	return
  4888                           
  4889                           ;SYSC_B1.c: 34: SYSC.Time++;
  4890  0DEC  3001               	movlw	1
  4891  0DED  1283               	bcf	3,5	;RP0=0, select bank0
  4892  0DEE  1303               	bcf	3,6	;RP1=0, select bank0
  4893  0DEF  07AD               	addwf	_SYSC+1,f
  4894  0DF0  1803               	skipnc
  4895  0DF1  0AAE               	incf	_SYSC+2,f
  4896  0DF2  3000               	movlw	0
  4897  0DF3  07AE               	addwf	_SYSC+2,f
  4898                           
  4899                           ;SYSC_B1.c: 35: if (SYSC.Time >= (500 / 20)) {
  4900  0DF4  3000               	movlw	0
  4901  0DF5  022E               	subwf	_SYSC+2,w
  4902  0DF6  3019               	movlw	25
  4903  0DF7  1903               	skipnz
  4904  0DF8  022D               	subwf	_SYSC+1,w
  4905  0DF9  1C03               	skipc
  4906  0DFA  2E00               	goto	l4111
  4907                           
  4908                           ;SYSC_B1.c: 36: SYSC.Time = 0;
  4909  0DFB  01AD               	clrf	_SYSC+1
  4910  0DFC  01AE               	clrf	_SYSC+2
  4911                           
  4912                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4913  0DFD  01AF               	clrf	_SYSC+3
  4914  0DFE  01B0               	clrf	_SYSC+4
  4915                           
  4916                           ;SYSC_B1.c: 38: } else {
  4917  0DFF  0008               	return
  4918  0E00                     l4111:	
  4919                           
  4920                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4921  0E00  3001               	movlw	1
  4922  0E01  07AF               	addwf	_SYSC+3,f
  4923  0E02  1803               	skipnc
  4924  0E03  0AB0               	incf	_SYSC+4,f
  4925  0E04  3000               	movlw	0
  4926  0E05  07B0               	addwf	_SYSC+4,f
  4927                           
  4928                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4929  0E06  3001               	movlw	1
  4930  0E07  0630               	xorwf	_SYSC+4,w
  4931  0E08  1D03               	skipz
  4932  0E09  2E0C               	goto	u3715
  4933  0E0A  30F4               	movlw	244
  4934  0E0B  062F               	xorwf	_SYSC+3,w
  4935  0E0C                     u3715:	
  4936  0E0C  1D03               	skipz
  4937  0E0D  0008               	return
  4938                           
  4939                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4940  0E0E  01AF               	clrf	_SYSC+3
  4941  0E0F  01B0               	clrf	_SYSC+4
  4942                           
  4943                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4944  0E10  10AC               	bcf	_SYSC,1
  4945  0E11  0008               	return
  4946  0E12                     __end_of_setSYSC_Main:	
  4947                           
  4948                           	psect	text24
  4949  0923                     __ptext24:	
  4950 ;; *************** function _SYSC_Initialization *****************
  4951 ;; Defined at:
  4952 ;;		line 7 in file "../src/SYSC_B1.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;		None
  4955 ;; Auto vars:     Size  Location     Type
  4956 ;;		None
  4957 ;; Return value:  Size  Location     Type
  4958 ;;		None               void
  4959 ;; Registers used:
  4960 ;;		status,2, status,0, pclath, cstack
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4966 ;;      Params:         0       0       0       0
  4967 ;;      Locals:         0       0       0       0
  4968 ;;      Temps:          0       0       0       0
  4969 ;;      Totals:         0       0       0       0
  4970 ;;Total ram usage:        0 bytes
  4971 ;; Hardware stack levels used:    1
  4972 ;; Hardware stack levels required when called:    3
  4973 ;; This function calls:
  4974 ;;		_setSYSC_Initialization
  4975 ;; This function is called by:
  4976 ;;		_main
  4977 ;; This function uses a non-reentrant model
  4978 ;;
  4979                           
  4980                           
  4981                           ;psect for function _SYSC_Initialization
  4982  0923                     _SYSC_Initialization:	
  4983                           
  4984                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4985                           
  4986                           ;incstack = 0
  4987                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4988  0923  158A  213B         	fcall	_setSYSC_Initialization
  4989  0925  0008               	return
  4990  0926                     __end_of_SYSC_Initialization:	
  4991                           
  4992                           	psect	text25
  4993  093B                     __ptext25:	
  4994 ;; *************** function _setSYSC_Initialization *****************
  4995 ;; Defined at:
  4996 ;;		line 13 in file "../src/SYSC_B1.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;		None
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;		None
  5001 ;; Return value:  Size  Location     Type
  5002 ;;		None               void
  5003 ;; Registers used:
  5004 ;;		None
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5010 ;;      Params:         0       0       0       0
  5011 ;;      Locals:         0       0       0       0
  5012 ;;      Temps:          0       0       0       0
  5013 ;;      Totals:         0       0       0       0
  5014 ;;Total ram usage:        0 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    2
  5017 ;; This function calls:
  5018 ;;		Nothing
  5019 ;; This function is called by:
  5020 ;;		_SYSC_Initialization
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           
  5025                           ;psect for function _setSYSC_Initialization
  5026  093B                     _setSYSC_Initialization:	
  5027                           
  5028                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  5029                           
  5030                           ;incstack = 0
  5031                           ; Regs used in _setSYSC_Initialization: []
  5032  093B  1283               	bcf	3,5	;RP0=0, select bank0
  5033  093C  1303               	bcf	3,6	;RP1=0, select bank0
  5034  093D  142C               	bsf	_SYSC,0
  5035  093E  0008               	return
  5036  093F                     __end_of_setSYSC_Initialization:	
  5037                           
  5038                           	psect	text26
  5039  0217                     __ptext26:	
  5040 ;; *************** function _PIR_Main *****************
  5041 ;; Defined at:
  5042 ;;		line 13 in file "../src/PIR_B1.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;		None
  5045 ;; Auto vars:     Size  Location     Type
  5046 ;;  LightsStatus    1   16[BANK0 ] unsigned char 
  5047 ;;  TriggerValue    1   15[BANK0 ] unsigned char 
  5048 ;;  Enable_Switc    1   14[BANK0 ] unsigned char 
  5049 ;;  cds             1   11[BANK0 ] unsigned char 
  5050 ;;  error           1   10[BANK0 ] unsigned char 
  5051 ;; Return value:  Size  Location     Type
  5052 ;;		None               void
  5053 ;; Registers used:
  5054 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5060 ;;      Params:         0       0       0       0
  5061 ;;      Locals:         0       7       0       0
  5062 ;;      Temps:          0       4       0       0
  5063 ;;      Totals:         0      11       0       0
  5064 ;;Total ram usage:       11 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    5
  5067 ;; This function calls:
  5068 ;;		_getCDS_Status
  5069 ;;		_getLights_Status
  5070 ;;		_getMain_All_Error_Status
  5071 ;;		_setLights_SwOff
  5072 ;;		_setLights_SwOn
  5073 ;; This function is called by:
  5074 ;;		_main
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           
  5079                           ;psect for function _PIR_Main
  5080  0217                     _PIR_Main:	
  5081                           
  5082                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  5083                           
  5084                           ;incstack = 0
  5085                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5086  0217  3000               	movlw	0
  5087  0218  158A  250C  118A   	fcall	_getMain_All_Error_Status
  5088  021B  1283               	bcf	3,5	;RP0=0, select bank0
  5089  021C  1303               	bcf	3,6	;RP1=0, select bank0
  5090  021D  00DD               	movwf	??_PIR_Main
  5091  021E  085D               	movf	??_PIR_Main,w
  5092  021F  00E1               	movwf	PIR_Main@error
  5093                           
  5094                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  5095  0220  158A  2174  118A   	fcall	_getCDS_Status
  5096  0223  1283               	bcf	3,5	;RP0=0, select bank0
  5097  0224  1303               	bcf	3,6	;RP1=0, select bank0
  5098  0225  00DD               	movwf	??_PIR_Main
  5099  0226  085D               	movf	??_PIR_Main,w
  5100  0227  00E2               	movwf	PIR_Main@cds
  5101                           
  5102                           ;PIR_B1.c: 16: char LightsStatus = 0;
  5103  0228  01E7               	clrf	PIR_Main@LightsStatus
  5104                           
  5105                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  5106  0229  01E5               	clrf	PIR_Main@Enable_Switch
  5107  022A  0AE5               	incf	PIR_Main@Enable_Switch,f
  5108                           
  5109                           ;PIR_B1.c: 18: char TriggerValue = 0;
  5110  022B  01E6               	clrf	PIR_Main@TriggerValue
  5111                           
  5112                           ;PIR_B1.c: 20: Enable_Switch = RB3 == 1 ? 1 : 0;
  5113  022C  3000               	movlw	0
  5114  022D  1986               	btfsc	6,3	;volatile
  5115  022E  3001               	movlw	1
  5116  022F  00E5               	movwf	PIR_Main@Enable_Switch
  5117                           
  5118                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  5119  0230  3001               	movlw	1
  5120  0231  158A  220E  118A   	fcall	_getLights_Status
  5121  0234  1283               	bcf	3,5	;RP0=0, select bank0
  5122  0235  1303               	bcf	3,6	;RP1=0, select bank0
  5123  0236  00DD               	movwf	??_PIR_Main
  5124  0237  085D               	movf	??_PIR_Main,w
  5125  0238  00E7               	movwf	PIR_Main@LightsStatus
  5126                           
  5127                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  5128  0239  1683               	bsf	3,5	;RP0=1, select bank1
  5129  023A  1303               	bcf	3,6	;RP1=0, select bank1
  5130  023B  1C20               	btfss	__PIR^(0+128),0
  5131  023C  2B9F               	goto	l1040
  5132                           
  5133                           ;PIR_B1.c: 36: if (error == 0) {
  5134  023D  1283               	bcf	3,5	;RP0=0, select bank0
  5135  023E  1303               	bcf	3,6	;RP1=0, select bank0
  5136  023F  08E1               	movf	PIR_Main@error,f
  5137  0240  1D03               	skipz
  5138  0241  2A68               	goto	l1041
  5139                           
  5140                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  5141  0242  0862               	movf	PIR_Main@cds,w
  5142  0243  3A01               	xorlw	1
  5143  0244  1D03               	skipz
  5144  0245  2A4E               	goto	l1042
  5145  0246  0865               	movf	PIR_Main@Enable_Switch,w
  5146  0247  3A01               	xorlw	1
  5147  0248  1D03               	skipz
  5148  0249  2A4E               	goto	l1042
  5149                           
  5150                           ;PIR_B1.c: 39: _PIR.Available = 1;
  5151  024A  1683               	bsf	3,5	;RP0=1, select bank1
  5152  024B  1303               	bcf	3,6	;RP1=0, select bank1
  5153  024C  17A0               	bsf	__PIR^(0+128),7
  5154                           
  5155                           ;PIR_B1.c: 40: } else {
  5156  024D  2A62               	goto	l5977
  5157  024E                     l1042:	
  5158                           
  5159                           ;PIR_B1.c: 41: _PIR.Available = 0;
  5160  024E  1683               	bsf	3,5	;RP0=1, select bank1
  5161  024F  1303               	bcf	3,6	;RP1=0, select bank1
  5162  0250  13A0               	bcf	__PIR^(0+128),7
  5163                           
  5164                           ;PIR_B1.c: 43: if (_PIR.OK == 1) {
  5165  0251  1DA0               	btfss	__PIR^(0+128),3
  5166  0252  2A62               	goto	l5977
  5167                           
  5168                           ;PIR_B1.c: 51: if (getLights_Status(1) == 1) {
  5169  0253  3001               	movlw	1
  5170  0254  158A  220E  118A   	fcall	_getLights_Status
  5171  0257  3A01               	xorlw	1
  5172  0258  1D03               	skipz
  5173  0259  2A62               	goto	l5977
  5174                           
  5175                           ;PIR_B1.c: 52: setLights_SwOn(1);
  5176  025A  3001               	movlw	1
  5177  025B  158A  23FD  118A   	fcall	_setLights_SwOn
  5178                           
  5179                           ;PIR_B1.c: 53: setLights_SwOff(1);
  5180  025E  3001               	movlw	1
  5181  025F  158A  2348  118A   	fcall	_setLights_SwOff
  5182  0262                     l5977:	
  5183                           
  5184                           ;PIR_B1.c: 55: }
  5185                           ;PIR_B1.c: 67: }
  5186                           ;PIR_B1.c: 68: }
  5187                           ;PIR_B1.c: 72: if (_PIR.Detect == 0) {
  5188  0262  1683               	bsf	3,5	;RP0=1, select bank1
  5189  0263  1303               	bcf	3,6	;RP1=0, select bank1
  5190  0264  1A20               	btfsc	__PIR^(0+128),4
  5191  0265  2A6E               	goto	l1047
  5192                           
  5193                           ;PIR_B1.c: 73: _PIR.Detect = 1;
  5194  0266  1620               	bsf	__PIR^(0+128),4
  5195                           
  5196                           ;PIR_B1.c: 80: }
  5197                           ;PIR_B1.c: 81: } else {
  5198  0267  2A6E               	goto	l1047
  5199  0268                     l1041:	
  5200                           
  5201                           ;PIR_B1.c: 82: if (_PIR.Detect == 1) {
  5202  0268  1683               	bsf	3,5	;RP0=1, select bank1
  5203  0269  1303               	bcf	3,6	;RP1=0, select bank1
  5204  026A  1E20               	btfss	__PIR^(0+128),4
  5205  026B  2A6E               	goto	l1047
  5206                           
  5207                           ;PIR_B1.c: 83: _PIR.Detect = 0;
  5208  026C  1220               	bcf	__PIR^(0+128),4
  5209                           
  5210                           ;PIR_B1.c: 84: _PIR.Available = 0;
  5211  026D  13A0               	bcf	__PIR^(0+128),7
  5212  026E                     l1047:	
  5213                           
  5214                           ;PIR_B1.c: 102: }
  5215                           ;PIR_B1.c: 103: }
  5216                           ;PIR_B1.c: 105: if (_PIR.ADtoGO == 0) {
  5217  026E  18A0               	btfsc	__PIR^(0+128),1
  5218  026F  2A7F               	goto	l1049
  5219                           
  5220                           ;PIR_B1.c: 106: _PIR.Time++;
  5221  0270  3001               	movlw	1
  5222  0271  1283               	bcf	3,5	;RP0=0, select bank0
  5223  0272  1303               	bcf	3,6	;RP1=0, select bank0
  5224  0273  00DD               	movwf	??_PIR_Main
  5225  0274  085D               	movf	??_PIR_Main,w
  5226  0275  1683               	bsf	3,5	;RP0=1, select bank1
  5227  0276  1303               	bcf	3,6	;RP1=0, select bank1
  5228  0277  07A2               	addwf	(__PIR^(0+128)+2),f
  5229                           
  5230                           ;PIR_B1.c: 107: if (_PIR.Time == (100 / 20)) {
  5231  0278  0822               	movf	(__PIR^(0+128)+2),w
  5232  0279  3A05               	xorlw	5
  5233  027A  1D03               	skipz
  5234  027B  2B45               	goto	l6053
  5235                           
  5236                           ;PIR_B1.c: 108: _PIR.Time = 0;
  5237  027C  01A2               	clrf	(__PIR^(0+128)+2)
  5238                           
  5239                           ;PIR_B1.c: 109: _PIR.ADtoGO = 1;
  5240  027D  14A0               	bsf	__PIR^(0+128),1
  5241                           
  5242                           ;PIR_B1.c: 110: }
  5243                           ;PIR_B1.c: 111: } else {
  5244  027E  2B45               	goto	l6053
  5245  027F                     l1049:	
  5246                           
  5247                           ;PIR_B1.c: 112: if (_PIR.GO == 1) {
  5248  027F  1D20               	btfss	__PIR^(0+128),2
  5249  0280  2B45               	goto	l6053
  5250                           
  5251                           ;PIR_B1.c: 113: _PIR.GO = 0;
  5252  0281  1120               	bcf	__PIR^(0+128),2
  5253                           
  5254                           ;PIR_B1.c: 114: _PIR.ADtoGO = 0;
  5255  0282  10A0               	bcf	__PIR^(0+128),1
  5256                           
  5257                           ;PIR_B1.c: 115: if (_PIR.Available == 1) {
  5258  0283  1BA0               	btfsc	__PIR^(0+128),7
  5259                           
  5260                           ;PIR_B1.c: 116: if (_PIR.OK == 1) {
  5261  0284  1DA0               	btfss	__PIR^(0+128),3
  5262  0285  2B45               	goto	l6053
  5263                           
  5264                           ;PIR_B1.c: 118: _PIR.Time++;
  5265  0286  3001               	movlw	1
  5266  0287  1283               	bcf	3,5	;RP0=0, select bank0
  5267  0288  1303               	bcf	3,6	;RP1=0, select bank0
  5268  0289  00DD               	movwf	??_PIR_Main
  5269  028A  085D               	movf	??_PIR_Main,w
  5270  028B  1683               	bsf	3,5	;RP0=1, select bank1
  5271  028C  1303               	bcf	3,6	;RP1=0, select bank1
  5272  028D  07A2               	addwf	(__PIR^(0+128)+2),f
  5273                           
  5274                           ;PIR_B1.c: 119: if (_PIR.Time == 60) {
  5275  028E  0822               	movf	(__PIR^(0+128)+2),w
  5276  028F  3A3C               	xorlw	60
  5277  0290  1D03               	skipz
  5278  0291  2AC6               	goto	l6031
  5279                           
  5280                           ;PIR_B1.c: 120: _PIR.Time = 0;
  5281  0292  01A2               	clrf	(__PIR^(0+128)+2)
  5282                           
  5283                           ;PIR_B1.c: 121: if (_PIR.RangeCount >= 90) {
  5284  0293  305A               	movlw	90
  5285  0294  0247               	subwf	(__PIR^(0+128)+39),w
  5286  0295  1C03               	skipc
  5287  0296  2AA2               	goto	l6013
  5288                           
  5289                           ;PIR_B1.c: 122: _PIR.RangeTime1 = 0;
  5290  0297  01C6               	clrf	(__PIR^(0+128)+38)
  5291                           
  5292                           ;PIR_B1.c: 124: if (_PIR.RangeValue == 25) {
  5293  0298  0848               	movf	(__PIR^(0+128)+40),w
  5294  0299  3A19               	xorlw	25
  5295  029A  1903               	btfsc	3,2
  5296  029B  2AB7               	goto	L10
  5297                           
  5298                           ;PIR_B1.c: 126: } else if (_PIR.RangeValue == (25+10)) {
  5299                           
  5300                           ;PIR_B1.c: 125: _PIR.RangeValue = (25+10);
  5301  029C  0848               	movf	(__PIR^(0+128)+40),w
  5302  029D  3A23               	xorlw	35
  5303  029E  1D03               	skipz
  5304  029F  2AC5               	goto	l6029
  5305                           
  5306                           ;PIR_B1.c: 127: _PIR.RangeValue = (25+20);
  5307  02A0  302D               	movlw	45
  5308  02A1  2ABE               	goto	L9
  5309  02A2                     l6013:	
  5310                           ;PIR_B1.c: 128: }
  5311                           ;PIR_B1.c: 129: } else if (_PIR.RangeCount <= 10) {
  5312                           
  5313  02A2  300B               	movlw	11
  5314  02A3  0247               	subwf	(__PIR^(0+128)+39),w
  5315  02A4  1803               	skipnc
  5316  02A5  2AC5               	goto	l6029
  5317                           
  5318                           ;PIR_B1.c: 130: _PIR.RangeTime1++;
  5319  02A6  3001               	movlw	1
  5320  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  5321  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  5322  02A9  00DD               	movwf	??_PIR_Main
  5323  02AA  085D               	movf	??_PIR_Main,w
  5324  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  5325  02AC  1303               	bcf	3,6	;RP1=0, select bank1
  5326  02AD  07C6               	addwf	(__PIR^(0+128)+38),f
  5327                           
  5328                           ;PIR_B1.c: 131: if (_PIR.RangeTime1 == 2) {
  5329  02AE  0846               	movf	(__PIR^(0+128)+38),w
  5330  02AF  3A02               	xorlw	2
  5331  02B0  1D03               	skipz
  5332  02B1  2AC5               	goto	l6029
  5333                           
  5334                           ;PIR_B1.c: 132: _PIR.RangeTime1 = 0;
  5335  02B2  01C6               	clrf	(__PIR^(0+128)+38)
  5336                           
  5337                           ;PIR_B1.c: 134: if (_PIR.RangeValue == (25+20)) {
  5338  02B3  0848               	movf	(__PIR^(0+128)+40),w
  5339  02B4  3A2D               	xorlw	45
  5340  02B5  1D03               	skipz
  5341  02B6  2AB9               	goto	l6025
  5342  02B7                     L10:	
  5343                           
  5344                           ;PIR_B1.c: 135: _PIR.RangeValue = (25+10);
  5345  02B7  3023               	movlw	35
  5346  02B8  2ABE               	goto	L9
  5347  02B9                     l6025:	
  5348                           ;PIR_B1.c: 136: } else if (_PIR.RangeValue == (25+10)) {
  5349                           
  5350  02B9  0848               	movf	(__PIR^(0+128)+40),w
  5351  02BA  3A23               	xorlw	35
  5352  02BB  1D03               	skipz
  5353  02BC  2AC5               	goto	l6029
  5354                           
  5355                           ;PIR_B1.c: 137: _PIR.RangeValue = 25;
  5356  02BD  3019               	movlw	25
  5357  02BE                     L9:	
  5358  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  5359  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  5360  02C0  00DD               	movwf	??_PIR_Main
  5361  02C1  085D               	movf	??_PIR_Main,w
  5362  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  5363  02C3  1303               	bcf	3,6	;RP1=0, select bank1
  5364  02C4  00C8               	movwf	(__PIR^(0+128)+40)
  5365  02C5                     l6029:	
  5366                           
  5367                           ;PIR_B1.c: 138: }
  5368                           ;PIR_B1.c: 139: }
  5369                           ;PIR_B1.c: 140: }
  5370                           ;PIR_B1.c: 141: _PIR.RangeCount = 0;
  5371  02C5  01C7               	clrf	(__PIR^(0+128)+39)
  5372  02C6                     l6031:	
  5373                           
  5374                           ;PIR_B1.c: 142: }
  5375                           ;PIR_B1.c: 145: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  5376                           ;PIR_B1.c: 146: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  5377  02C6  0848               	movf	(__PIR^(0+128)+40),w
  5378  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  5379  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  5380  02C9  00DD               	movwf	??_PIR_Main
  5381  02CA  01DE               	clrf	??_PIR_Main+1
  5382  02CB  09DD               	comf	??_PIR_Main,f
  5383  02CC  09DE               	comf	??_PIR_Main+1,f
  5384  02CD  0ADD               	incf	??_PIR_Main,f
  5385  02CE  1903               	skipnz
  5386  02CF  0ADE               	incf	??_PIR_Main+1,f
  5387  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  5388  02D1  1303               	bcf	3,6	;RP1=0, select bank1
  5389  02D2  0823               	movf	(__PIR^(0+128)+3),w
  5390  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  5391  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  5392  02D5  075D               	addwf	??_PIR_Main,w
  5393  02D6  00DF               	movwf	??_PIR_Main+2
  5394  02D7  085E               	movf	??_PIR_Main+1,w
  5395  02D8  1803               	skipnc
  5396  02D9  0A5E               	incf	??_PIR_Main+1,w
  5397  02DA  00E0               	movwf	??_PIR_Main+3
  5398  02DB  0860               	movf	??_PIR_Main+3,w
  5399  02DC  3A80               	xorlw	128
  5400  02DD  3C80               	sublw	128
  5401  02DE  1D03               	skipz
  5402  02DF  2AE4               	goto	u7575
  5403  02E0  085F               	movf	??_PIR_Main+2,w
  5404  02E1  1683               	bsf	3,5	;RP0=1, select bank1
  5405  02E2  1303               	bcf	3,6	;RP1=0, select bank1
  5406  02E3  0221               	subwf	(__PIR^(0+128)+1),w
  5407  02E4                     u7575:	
  5408  02E4  1C03               	skipc
  5409  02E5  2B03               	goto	l6037
  5410  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  5411  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  5412  02E8  0823               	movf	(__PIR^(0+128)+3),w
  5413  02E9  0748               	addwf	(__PIR^(0+128)+40),w
  5414  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  5415  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  5416  02EC  00DD               	movwf	??_PIR_Main
  5417  02ED  01DE               	clrf	??_PIR_Main+1
  5418  02EE  0DDE               	rlf	??_PIR_Main+1,f
  5419  02EF  085E               	movf	??_PIR_Main+1,w
  5420  02F0  3A80               	xorlw	128
  5421  02F1  00DF               	movwf	??_PIR_Main+2
  5422  02F2  3080               	movlw	128
  5423  02F3  025F               	subwf	??_PIR_Main+2,w
  5424  02F4  1D03               	skipz
  5425  02F5  2AFC               	goto	u7585
  5426  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  5427  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  5428  02F8  0821               	movf	(__PIR^(0+128)+1),w
  5429  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  5430  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  5431  02FB  025D               	subwf	??_PIR_Main,w
  5432  02FC                     u7585:	
  5433  02FC  1C03               	skipc
  5434  02FD  2B03               	goto	l6037
  5435                           
  5436                           ;PIR_B1.c: 148: _PIR.Count = 0;
  5437  02FE  1683               	bsf	3,5	;RP0=1, select bank1
  5438  02FF  1303               	bcf	3,6	;RP1=0, select bank1
  5439  0300  01BE               	clrf	(__PIR^(0+128)+30)
  5440  0301  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5441                           
  5442                           ;PIR_B1.c: 159: } else {
  5443  0302  2B45               	goto	l6053
  5444  0303                     l6037:	
  5445                           
  5446                           ;PIR_B1.c: 162: _PIR.RangeCount++;
  5447  0303  3001               	movlw	1
  5448  0304  1283               	bcf	3,5	;RP0=0, select bank0
  5449  0305  1303               	bcf	3,6	;RP1=0, select bank0
  5450  0306  00DD               	movwf	??_PIR_Main
  5451  0307  085D               	movf	??_PIR_Main,w
  5452  0308  1683               	bsf	3,5	;RP0=1, select bank1
  5453  0309  1303               	bcf	3,6	;RP1=0, select bank1
  5454  030A  07C7               	addwf	(__PIR^(0+128)+39),f
  5455                           
  5456                           ;PIR_B1.c: 163: _PIR.Count++;
  5457  030B  3001               	movlw	1
  5458  030C  07BE               	addwf	(__PIR^(0+128)+30),f
  5459  030D  1803               	skipnc
  5460  030E  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5461  030F  3000               	movlw	0
  5462  0310  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5463                           
  5464                           ;PIR_B1.c: 165: TriggerValue = LightsStatus == 1 ? 3 : 3;
  5465  0311  1283               	bcf	3,5	;RP0=0, select bank0
  5466  0312  1303               	bcf	3,6	;RP1=0, select bank0
  5467  0313  0867               	movf	PIR_Main@LightsStatus,w
  5468  0314  3A01               	xorlw	1
  5469  0315  1903               	skipnz
  5470  0316  2B17               	goto	l6045
  5471  0317                     l6045:	
  5472  0317  3003               	movlw	3
  5473  0318  00E3               	movwf	_PIR_Main$3238
  5474  0319  3000               	movlw	0
  5475  031A  00E4               	movwf	_PIR_Main$3238+1
  5476  031B  0863               	movf	_PIR_Main$3238,w
  5477  031C  00DD               	movwf	??_PIR_Main
  5478  031D  085D               	movf	??_PIR_Main,w
  5479  031E  00E6               	movwf	PIR_Main@TriggerValue
  5480                           
  5481                           ;PIR_B1.c: 167: if (_PIR.Count == TriggerValue) {
  5482  031F  0866               	movf	PIR_Main@TriggerValue,w
  5483  0320  00DD               	movwf	??_PIR_Main
  5484  0321  01DE               	clrf	??_PIR_Main+1
  5485  0322  1683               	bsf	3,5	;RP0=1, select bank1
  5486  0323  1303               	bcf	3,6	;RP1=0, select bank1
  5487  0324  083F               	movf	((__PIR+1)^(0+128)+30),w
  5488  0325  1283               	bcf	3,5	;RP0=0, select bank0
  5489  0326  1303               	bcf	3,6	;RP1=0, select bank0
  5490  0327  065E               	xorwf	??_PIR_Main+1,w
  5491  0328  1D03               	skipz
  5492  0329  2B30               	goto	u7605
  5493  032A  1683               	bsf	3,5	;RP0=1, select bank1
  5494  032B  1303               	bcf	3,6	;RP1=0, select bank1
  5495  032C  083E               	movf	(__PIR^(0+128)+30),w
  5496  032D  1283               	bcf	3,5	;RP0=0, select bank0
  5497  032E  1303               	bcf	3,6	;RP1=0, select bank0
  5498  032F  065D               	xorwf	??_PIR_Main,w
  5499  0330                     u7605:	
  5500  0330  1D03               	skipz
  5501  0331  2B45               	goto	l6053
  5502                           
  5503                           ;PIR_B1.c: 168: _PIR.Count = 0;
  5504  0332  1683               	bsf	3,5	;RP0=1, select bank1
  5505  0333  1303               	bcf	3,6	;RP1=0, select bank1
  5506  0334  01BE               	clrf	(__PIR^(0+128)+30)
  5507  0335  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5508                           
  5509                           ;PIR_B1.c: 175: if (getLights_Status(1) == 0) {
  5510  0336  3001               	movlw	1
  5511  0337  158A  220E  118A   	fcall	_getLights_Status
  5512  033A  3800               	iorlw	0
  5513  033B  1D03               	skipz
  5514  033C  2B45               	goto	l6053
  5515                           
  5516                           ;PIR_B1.c: 176: setLights_SwOn(1);
  5517  033D  3001               	movlw	1
  5518  033E  158A  23FD  118A   	fcall	_setLights_SwOn
  5519                           
  5520                           ;PIR_B1.c: 177: setLights_SwOff(1);
  5521  0341  3001               	movlw	1
  5522  0342  158A  2348  118A   	fcall	_setLights_SwOff
  5523  0345                     l6053:	
  5524                           
  5525                           ;PIR_B1.c: 179: }
  5526                           ;PIR_B1.c: 241: }
  5527                           ;PIR_B1.c: 242: }
  5528                           ;PIR_B1.c: 243: }
  5529                           ;PIR_B1.c: 244: }
  5530                           ;PIR_B1.c: 245: }
  5531                           ;PIR_B1.c: 246: }
  5532                           ;PIR_B1.c: 247: if (_PIR.OK == 0) {
  5533  0345  1683               	bsf	3,5	;RP0=1, select bank1
  5534  0346  1303               	bcf	3,6	;RP1=0, select bank1
  5535  0347  19A0               	btfsc	__PIR^(0+128),3
  5536  0348  2B69               	goto	l6065
  5537                           
  5538                           ;PIR_B1.c: 248: _PIR.Count++;
  5539  0349  3001               	movlw	1
  5540  034A  07BE               	addwf	(__PIR^(0+128)+30),f
  5541  034B  1803               	skipnc
  5542  034C  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5543  034D  3000               	movlw	0
  5544  034E  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5545                           
  5546                           ;PIR_B1.c: 249: if (_PIR.Count == (30000 / 20)) {
  5547  034F  3005               	movlw	5
  5548  0350  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  5549  0351  1D03               	skipz
  5550  0352  2B55               	goto	u7635
  5551  0353  30DC               	movlw	220
  5552  0354  063E               	xorwf	(__PIR^(0+128)+30),w
  5553  0355                     u7635:	
  5554  0355  1D03               	skipz
  5555  0356  0008               	return
  5556                           
  5557                           ;PIR_B1.c: 250: _PIR.Count = 0;
  5558  0357  01BE               	clrf	(__PIR^(0+128)+30)
  5559  0358  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5560                           
  5561                           ;PIR_B1.c: 251: _PIR.OK = 1;
  5562  0359  15A0               	bsf	__PIR^(0+128),3
  5563                           
  5564                           ;PIR_B1.c: 259: if (getLights_Status(1) == 1) {
  5565  035A  3001               	movlw	1
  5566  035B  158A  220E  118A   	fcall	_getLights_Status
  5567  035E  3A01               	xorlw	1
  5568  035F  1D03               	skipz
  5569  0360  0008               	return
  5570                           
  5571                           ;PIR_B1.c: 260: setLights_SwOn(1);
  5572  0361  3001               	movlw	1
  5573  0362  158A  23FD  118A   	fcall	_setLights_SwOn
  5574                           
  5575                           ;PIR_B1.c: 261: setLights_SwOff(1);
  5576  0365  3001               	movlw	1
  5577  0366  158A  2348         	fcall	_setLights_SwOff
  5578                           
  5579                           ;PIR_B1.c: 263: }
  5580                           ;PIR_B1.c: 276: }
  5581                           ;PIR_B1.c: 277: } else {
  5582  0368  0008               	return
  5583  0369                     l6065:	
  5584                           
  5585                           ;PIR_B1.c: 278: if (LightsStatus == 1) {
  5586  0369  1283               	bcf	3,5	;RP0=0, select bank0
  5587  036A  1303               	bcf	3,6	;RP1=0, select bank0
  5588  036B  0867               	movf	PIR_Main@LightsStatus,w
  5589  036C  3A01               	xorlw	1
  5590  036D  1D03               	skipz
  5591  036E  2B99               	goto	l6083
  5592                           
  5593                           ;PIR_B1.c: 279: _PIR.CloseTimeSeconds++;
  5594  036F  3001               	movlw	1
  5595  0370  00DD               	movwf	??_PIR_Main
  5596  0371  085D               	movf	??_PIR_Main,w
  5597  0372  1683               	bsf	3,5	;RP0=1, select bank1
  5598  0373  1303               	bcf	3,6	;RP1=0, select bank1
  5599  0374  07C2               	addwf	(__PIR^(0+128)+34),f
  5600                           
  5601                           ;PIR_B1.c: 280: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  5602  0375  0842               	movf	(__PIR^(0+128)+34),w
  5603  0376  3A32               	xorlw	50
  5604  0377  1D03               	skipz
  5605  0378  0008               	return
  5606                           
  5607                           ;PIR_B1.c: 281: _PIR.CloseTimeSeconds = 0;
  5608  0379  01C2               	clrf	(__PIR^(0+128)+34)
  5609                           
  5610                           ;PIR_B1.c: 282: _PIR.CloseTimeMinutes++;
  5611  037A  3001               	movlw	1
  5612  037B  07C0               	addwf	(__PIR^(0+128)+32),f
  5613  037C  1803               	skipnc
  5614  037D  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  5615  037E  3000               	movlw	0
  5616  037F  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  5617                           
  5618                           ;PIR_B1.c: 283: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5619  0380  0844               	movf	((__PIR+1)^(0+128)+35),w
  5620  0381  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  5621  0382  1D03               	skipz
  5622  0383  2B86               	goto	u7675
  5623  0384  0843               	movf	(__PIR^(0+128)+35),w
  5624  0385  0640               	xorwf	(__PIR^(0+128)+32),w
  5625  0386                     u7675:	
  5626  0386  1D03               	skipz
  5627  0387  0008               	return
  5628                           
  5629                           ;PIR_B1.c: 284: _PIR.CloseTimeMinutes = 0;
  5630  0388  01C0               	clrf	(__PIR^(0+128)+32)
  5631  0389  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5632                           
  5633                           ;PIR_B1.c: 290: if (getLights_Status(1) == 1) {
  5634  038A  3001               	movlw	1
  5635  038B  158A  220E  118A   	fcall	_getLights_Status
  5636  038E  3A01               	xorlw	1
  5637  038F  1D03               	skipz
  5638  0390  0008               	return
  5639                           
  5640                           ;PIR_B1.c: 291: setLights_SwOn(1);
  5641  0391  3001               	movlw	1
  5642  0392  158A  23FD  118A   	fcall	_setLights_SwOn
  5643                           
  5644                           ;PIR_B1.c: 292: setLights_SwOff(1);
  5645  0395  3001               	movlw	1
  5646  0396  158A  2348         	fcall	_setLights_SwOff
  5647                           
  5648                           ;PIR_B1.c: 294: }
  5649                           ;PIR_B1.c: 306: }
  5650                           ;PIR_B1.c: 307: }
  5651                           ;PIR_B1.c: 308: } else {
  5652  0398  0008               	return
  5653  0399                     l6083:	
  5654                           
  5655                           ;PIR_B1.c: 309: _PIR.CloseTimeSeconds = 0;
  5656  0399  1683               	bsf	3,5	;RP0=1, select bank1
  5657  039A  1303               	bcf	3,6	;RP1=0, select bank1
  5658  039B  01C2               	clrf	(__PIR^(0+128)+34)
  5659                           
  5660                           ;PIR_B1.c: 310: _PIR.CloseTimeMinutes = 0;
  5661  039C  01C0               	clrf	(__PIR^(0+128)+32)
  5662  039D  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5663                           
  5664                           ;PIR_B1.c: 311: }
  5665                           ;PIR_B1.c: 312: }
  5666                           ;PIR_B1.c: 313: } else {
  5667  039E  0008               	return
  5668  039F                     l1040:	
  5669                           
  5670                           ;PIR_B1.c: 314: if (myMain.PowerON == 1) {
  5671  039F  1283               	bcf	3,5	;RP0=0, select bank0
  5672  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  5673  03A1  1C31               	btfss	_myMain,0
  5674  03A2  0008               	return
  5675                           
  5676                           ;PIR_B1.c: 315: _PIR.Enable = 1;
  5677  03A3  1683               	bsf	3,5	;RP0=1, select bank1
  5678  03A4  1303               	bcf	3,6	;RP1=0, select bank1
  5679  03A5  1420               	bsf	__PIR^(0+128),0
  5680                           
  5681                           ;PIR_B1.c: 322: if (getLights_Status(1) == 0) {
  5682  03A6  3001               	movlw	1
  5683  03A7  158A  220E  118A   	fcall	_getLights_Status
  5684  03AA  3800               	iorlw	0
  5685  03AB  1D03               	skipz
  5686  03AC  0008               	return
  5687                           
  5688                           ;PIR_B1.c: 323: setLights_SwOn(1);
  5689  03AD  3001               	movlw	1
  5690  03AE  158A  23FD  118A   	fcall	_setLights_SwOn
  5691                           
  5692                           ;PIR_B1.c: 324: setLights_SwOff(1);
  5693  03B1  3001               	movlw	1
  5694  03B2  158A  2348         	fcall	_setLights_SwOff
  5695  03B4  0008               	return
  5696  03B5                     __end_of_PIR_Main:	
  5697                           
  5698                           	psect	text27
  5699  0974                     __ptext27:	
  5700 ;; *************** function _getCDS_Status *****************
  5701 ;; Defined at:
  5702 ;;		line 42 in file "../src/CDS_B1.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;		None
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;  status          1    4[COMMON] unsigned char 
  5707 ;; Return value:  Size  Location     Type
  5708 ;;                  1    wreg      unsigned char 
  5709 ;; Registers used:
  5710 ;;		wreg, status,2
  5711 ;; Tracked objects:
  5712 ;;		On entry : 0/0
  5713 ;;		On exit  : 0/0
  5714 ;;		Unchanged: 0/0
  5715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5716 ;;      Params:         0       0       0       0
  5717 ;;      Locals:         1       0       0       0
  5718 ;;      Temps:          0       0       0       0
  5719 ;;      Totals:         1       0       0       0
  5720 ;;Total ram usage:        1 bytes
  5721 ;; Hardware stack levels used:    1
  5722 ;; Hardware stack levels required when called:    2
  5723 ;; This function calls:
  5724 ;;		Nothing
  5725 ;; This function is called by:
  5726 ;;		_PIR_Main
  5727 ;; This function uses a non-reentrant model
  5728 ;;
  5729                           
  5730                           
  5731                           ;psect for function _getCDS_Status
  5732  0974                     _getCDS_Status:	
  5733                           
  5734                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5735                           
  5736                           ;incstack = 0
  5737                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5738  0974  3000               	movlw	0
  5739  0975  1283               	bcf	3,5	;RP0=0, select bank0
  5740  0976  1303               	bcf	3,6	;RP1=0, select bank0
  5741  0977  1A36               	btfsc	__CDS,4
  5742  0978  3001               	movlw	1
  5743  0979  00F4               	movwf	getCDS_Status@status
  5744                           
  5745                           ;CDS_B1.c: 44: return status;
  5746  097A  0874               	movf	getCDS_Status@status,w
  5747  097B  0008               	return
  5748  097C                     __end_of_getCDS_Status:	
  5749                           
  5750                           	psect	text28
  5751  0984                     __ptext28:	
  5752 ;; *************** function _PIR_Initialization *****************
  5753 ;; Defined at:
  5754 ;;		line 7 in file "../src/PIR_B1.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;		None
  5757 ;; Auto vars:     Size  Location     Type
  5758 ;;		None
  5759 ;; Return value:  Size  Location     Type
  5760 ;;		None               void
  5761 ;; Registers used:
  5762 ;;		wreg
  5763 ;; Tracked objects:
  5764 ;;		On entry : 0/0
  5765 ;;		On exit  : 0/0
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5768 ;;      Params:         0       0       0       0
  5769 ;;      Locals:         0       0       0       0
  5770 ;;      Temps:          1       0       0       0
  5771 ;;      Totals:         1       0       0       0
  5772 ;;Total ram usage:        1 bytes
  5773 ;; Hardware stack levels used:    1
  5774 ;; Hardware stack levels required when called:    2
  5775 ;; This function calls:
  5776 ;;		Nothing
  5777 ;; This function is called by:
  5778 ;;		_main
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           
  5783                           ;psect for function _PIR_Initialization
  5784  0984                     _PIR_Initialization:	
  5785                           
  5786                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5787                           
  5788                           ;incstack = 0
  5789                           ; Regs used in _PIR_Initialization: [wreg]
  5790  0984  3019               	movlw	25
  5791  0985  00F4               	movwf	??_PIR_Initialization
  5792  0986  0874               	movf	??_PIR_Initialization,w
  5793  0987  1683               	bsf	3,5	;RP0=1, select bank1
  5794  0988  1303               	bcf	3,6	;RP1=0, select bank1
  5795  0989  00C8               	movwf	(__PIR^(0+128)+40)
  5796                           
  5797                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5798  098A  3005               	movlw	5
  5799  098B  00C3               	movwf	(__PIR^(0+128)+35)
  5800  098C  3000               	movlw	0
  5801  098D  00C4               	movwf	(__PIR^(0+128)+36)
  5802  098E  0008               	return
  5803  098F                     __end_of_PIR_Initialization:	
  5804                           
  5805                           	psect	text29
  5806  09DF                     __ptext29:	
  5807 ;; *************** function _Mcu_Initialization *****************
  5808 ;; Defined at:
  5809 ;;		line 30 in file "../src/MCU_B1.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;		None
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;		None
  5814 ;; Return value:  Size  Location     Type
  5815 ;;		None               void
  5816 ;; Registers used:
  5817 ;;		wreg, status,2, status,0, pclath, cstack
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5823 ;;      Params:         0       0       0       0
  5824 ;;      Locals:         0       0       0       0
  5825 ;;      Temps:          0       0       0       0
  5826 ;;      Totals:         0       0       0       0
  5827 ;;Total ram usage:        0 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    3
  5830 ;; This function calls:
  5831 ;;		_ADC_Set
  5832 ;;		_Fosc_Set
  5833 ;;		_IO_Set
  5834 ;;		_TMR1_Set
  5835 ;;		_WDT_Set
  5836 ;; This function is called by:
  5837 ;;		_main
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           
  5842                           ;psect for function _Mcu_Initialization
  5843  09DF                     _Mcu_Initialization:	
  5844                           
  5845                           ;MCU_B1.c: 32: Fosc_Set();
  5846                           
  5847                           ;incstack = 0
  5848                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5849  09DF  158A  213F  158A   	fcall	_Fosc_Set
  5850                           
  5851                           ;MCU_B1.c: 34: IO_Set();
  5852  09E2  158A  2316  158A   	fcall	_IO_Set
  5853                           
  5854                           ;MCU_B1.c: 36: ;;
  5855                           ;MCU_B1.c: 38: TMR1_Set();
  5856  09E5  158A  21B4  158A   	fcall	_TMR1_Set
  5857                           
  5858                           ;MCU_B1.c: 40: ADC_Set();
  5859  09E8  158A  215D  158A   	fcall	_ADC_Set
  5860                           
  5861                           ;MCU_B1.c: 42: ;;
  5862                           ;MCU_B1.c: 44: ;;
  5863                           ;MCU_B1.c: 46: ;;
  5864                           ;MCU_B1.c: 48: ;;
  5865                           ;MCU_B1.c: 50: ;;
  5866                           ;MCU_B1.c: 52: WDT_Set();
  5867  09EB  158A  21C2         	fcall	_WDT_Set
  5868  09ED  0008               	return
  5869  09EE                     __end_of_Mcu_Initialization:	
  5870                           
  5871                           	psect	text30
  5872  09C2                     __ptext30:	
  5873 ;; *************** function _WDT_Set *****************
  5874 ;; Defined at:
  5875 ;;		line 1102 in file "../src/MCU_B1.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;		None
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;		None
  5880 ;; Return value:  Size  Location     Type
  5881 ;;		None               void
  5882 ;; Registers used:
  5883 ;;		wreg
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5889 ;;      Params:         0       0       0       0
  5890 ;;      Locals:         0       0       0       0
  5891 ;;      Temps:          1       0       0       0
  5892 ;;      Totals:         1       0       0       0
  5893 ;;Total ram usage:        1 bytes
  5894 ;; Hardware stack levels used:    1
  5895 ;; Hardware stack levels required when called:    2
  5896 ;; This function calls:
  5897 ;;		Nothing
  5898 ;; This function is called by:
  5899 ;;		_Mcu_Initialization
  5900 ;; This function uses a non-reentrant model
  5901 ;;
  5902                           
  5903                           
  5904                           ;psect for function _WDT_Set
  5905  09C2                     _WDT_Set:	
  5906                           
  5907                           ;MCU_B1.c: 1104: PSA = 1;
  5908                           
  5909                           ;incstack = 0
  5910                           ; Regs used in _WDT_Set: [wreg]
  5911  09C2  1683               	bsf	3,5	;RP0=1, select bank1
  5912  09C3  1303               	bcf	3,6	;RP1=0, select bank1
  5913  09C4  1581               	bsf	1,3	;volatile
  5914                           
  5915                           ;MCU_B1.c: 1105: PS0 = 1;
  5916  09C5  1401               	bsf	1,0	;volatile
  5917                           
  5918                           ;MCU_B1.c: 1106: PS1 = 1;
  5919  09C6  1481               	bsf	1,1	;volatile
  5920                           
  5921                           ;MCU_B1.c: 1107: PS2 = 1;
  5922  09C7  1501               	bsf	1,2	;volatile
  5923                           
  5924                           ;MCU_B1.c: 1111: WDT.Enable = 1;
  5925  09C8  1283               	bcf	3,5	;RP0=0, select bank0
  5926  09C9  1303               	bcf	3,6	;RP1=0, select bank0
  5927  09CA  143D               	bsf	_WDT,0
  5928                           
  5929                           ;MCU_B1.c: 1112: WDT.Timer = 10;
  5930  09CB  300A               	movlw	10
  5931  09CC  00F4               	movwf	??_WDT_Set
  5932  09CD  0874               	movf	??_WDT_Set,w
  5933  09CE  00BE               	movwf	_WDT+1
  5934  09CF  0008               	return
  5935  09D0                     __end_of_WDT_Set:	
  5936                           
  5937                           	psect	text31
  5938  09B4                     __ptext31:	
  5939 ;; *************** function _TMR1_Set *****************
  5940 ;; Defined at:
  5941 ;;		line 226 in file "../src/MCU_B1.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;		None
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;		None
  5946 ;; Return value:  Size  Location     Type
  5947 ;;		None               void
  5948 ;; Registers used:
  5949 ;;		wreg
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5955 ;;      Params:         0       0       0       0
  5956 ;;      Locals:         0       0       0       0
  5957 ;;      Temps:          0       0       0       0
  5958 ;;      Totals:         0       0       0       0
  5959 ;;Total ram usage:        0 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:    2
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_Mcu_Initialization
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           
  5970                           ;psect for function _TMR1_Set
  5971  09B4                     _TMR1_Set:	
  5972                           
  5973                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5974                           
  5975                           ;incstack = 0
  5976                           ; Regs used in _TMR1_Set: [wreg]
  5977  09B4  3041               	movlw	65
  5978  09B5  1283               	bcf	3,5	;RP0=0, select bank0
  5979  09B6  1303               	bcf	3,6	;RP1=0, select bank0
  5980  09B7  0090               	movwf	16	;volatile
  5981                           
  5982                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  5983  09B8  30FA               	movlw	250
  5984  09B9  008F               	movwf	15	;volatile
  5985                           
  5986                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  5987  09BA  3038               	movlw	56
  5988  09BB  008E               	movwf	14	;volatile
  5989                           
  5990                           ;MCU_B1.c: 230: TMR1IE = 1;
  5991  09BC  1683               	bsf	3,5	;RP0=1, select bank1
  5992  09BD  1303               	bcf	3,6	;RP1=0, select bank1
  5993  09BE  140C               	bsf	12,0	;volatile
  5994                           
  5995                           ;MCU_B1.c: 231: PEIE = 1;
  5996  09BF  170B               	bsf	11,6	;volatile
  5997                           
  5998                           ;MCU_B1.c: 232: GIE = 1;
  5999  09C0  178B               	bsf	11,7	;volatile
  6000  09C1  0008               	return
  6001  09C2                     __end_of_TMR1_Set:	
  6002                           
  6003                           	psect	text32
  6004  0B16                     __ptext32:	
  6005 ;; *************** function _IO_Set *****************
  6006 ;; Defined at:
  6007 ;;		line 60 in file "../src/MCU_B1.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;		None
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;		None
  6012 ;; Return value:  Size  Location     Type
  6013 ;;		None               void
  6014 ;; Registers used:
  6015 ;;		wreg, status,2
  6016 ;; Tracked objects:
  6017 ;;		On entry : 0/0
  6018 ;;		On exit  : 0/0
  6019 ;;		Unchanged: 0/0
  6020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6021 ;;      Params:         0       0       0       0
  6022 ;;      Locals:         0       0       0       0
  6023 ;;      Temps:          0       0       0       0
  6024 ;;      Totals:         0       0       0       0
  6025 ;;Total ram usage:        0 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; Hardware stack levels required when called:    2
  6028 ;; This function calls:
  6029 ;;		Nothing
  6030 ;; This function is called by:
  6031 ;;		_Mcu_Initialization
  6032 ;; This function uses a non-reentrant model
  6033 ;;
  6034                           
  6035                           
  6036                           ;psect for function _IO_Set
  6037  0B16                     _IO_Set:	
  6038                           
  6039                           ;MCU_B1.c: 62: TRISA = 0b00101110;;
  6040                           
  6041                           ;incstack = 0
  6042                           ; Regs used in _IO_Set: [wreg+status,2]
  6043  0B16  302E               	movlw	46
  6044  0B17  1683               	bsf	3,5	;RP0=1, select bank1
  6045  0B18  1303               	bcf	3,6	;RP1=0, select bank1
  6046  0B19  0085               	movwf	5	;volatile
  6047                           
  6048                           ;MCU_B1.c: 63: TRISB = 0b00010101;;
  6049  0B1A  3015               	movlw	21
  6050  0B1B  0086               	movwf	6	;volatile
  6051                           
  6052                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  6053  0B1C  0187               	clrf	7	;volatile
  6054                           
  6055                           ;MCU_B1.c: 65: ANSELA = 0b00101110;;
  6056  0B1D  302E               	movlw	46
  6057  0B1E  1683               	bsf	3,5	;RP0=1, select bank3
  6058  0B1F  1703               	bsf	3,6	;RP1=1, select bank3
  6059  0B20  0085               	movwf	5	;volatile
  6060                           
  6061                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  6062  0B21  3001               	movlw	1
  6063  0B22  0086               	movwf	6	;volatile
  6064                           
  6065                           ;MCU_B1.c: 67: PORTA = 0b00101110;;
  6066  0B23  302E               	movlw	46
  6067  0B24  1283               	bcf	3,5	;RP0=0, select bank0
  6068  0B25  1303               	bcf	3,6	;RP1=0, select bank0
  6069  0B26  0085               	movwf	5	;volatile
  6070                           
  6071                           ;MCU_B1.c: 68: PORTB = 0b00010101;;
  6072  0B27  3015               	movlw	21
  6073  0B28  0086               	movwf	6	;volatile
  6074                           
  6075                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  6076  0B29  0187               	clrf	7	;volatile
  6077                           
  6078                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  6079  0B2A  1683               	bsf	3,5	;RP0=1, select bank1
  6080  0B2B  1303               	bcf	3,6	;RP1=0, select bank1
  6081  0B2C  0195               	clrf	21	;volatile
  6082  0B2D  0008               	return
  6083  0B2E                     __end_of_IO_Set:	
  6084                           
  6085                           	psect	text33
  6086  093F                     __ptext33:	
  6087 ;; *************** function _Fosc_Set *****************
  6088 ;; Defined at:
  6089 ;;		line 56 in file "../src/MCU_B1.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;		None
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;		None
  6094 ;; Return value:  Size  Location     Type
  6095 ;;		None               void
  6096 ;; Registers used:
  6097 ;;		wreg
  6098 ;; Tracked objects:
  6099 ;;		On entry : 0/0
  6100 ;;		On exit  : 0/0
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6103 ;;      Params:         0       0       0       0
  6104 ;;      Locals:         0       0       0       0
  6105 ;;      Temps:          0       0       0       0
  6106 ;;      Totals:         0       0       0       0
  6107 ;;Total ram usage:        0 bytes
  6108 ;; Hardware stack levels used:    1
  6109 ;; Hardware stack levels required when called:    2
  6110 ;; This function calls:
  6111 ;;		Nothing
  6112 ;; This function is called by:
  6113 ;;		_Mcu_Initialization
  6114 ;; This function uses a non-reentrant model
  6115 ;;
  6116                           
  6117                           
  6118                           ;psect for function _Fosc_Set
  6119  093F                     _Fosc_Set:	
  6120                           
  6121                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  6122                           
  6123                           ;incstack = 0
  6124                           ; Regs used in _Fosc_Set: [wreg]
  6125  093F  303C               	movlw	60
  6126  0940  1683               	bsf	3,5	;RP0=1, select bank1
  6127  0941  1303               	bcf	3,6	;RP1=0, select bank1
  6128  0942  0090               	movwf	16	;volatile
  6129  0943  0008               	return
  6130  0944                     __end_of_Fosc_Set:	
  6131                           
  6132                           	psect	text34
  6133  095D                     __ptext34:	
  6134 ;; *************** function _ADC_Set *****************
  6135 ;; Defined at:
  6136 ;;		line 427 in file "../src/MCU_B1.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;		None
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;		None
  6141 ;; Return value:  Size  Location     Type
  6142 ;;		None               void
  6143 ;; Registers used:
  6144 ;;		wreg
  6145 ;; Tracked objects:
  6146 ;;		On entry : 0/0
  6147 ;;		On exit  : 0/0
  6148 ;;		Unchanged: 0/0
  6149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6150 ;;      Params:         0       0       0       0
  6151 ;;      Locals:         0       0       0       0
  6152 ;;      Temps:          0       0       0       0
  6153 ;;      Totals:         0       0       0       0
  6154 ;;Total ram usage:        0 bytes
  6155 ;; Hardware stack levels used:    1
  6156 ;; Hardware stack levels required when called:    2
  6157 ;; This function calls:
  6158 ;;		Nothing
  6159 ;; This function is called by:
  6160 ;;		_Mcu_Initialization
  6161 ;; This function uses a non-reentrant model
  6162 ;;
  6163                           
  6164                           
  6165                           ;psect for function _ADC_Set
  6166  095D                     _ADC_Set:	
  6167                           
  6168                           ;MCU_B1.c: 428: ADCON1 = 0x73;
  6169                           
  6170                           ;incstack = 0
  6171                           ; Regs used in _ADC_Set: [wreg]
  6172  095D  3073               	movlw	115
  6173  095E  1683               	bsf	3,5	;RP0=1, select bank1
  6174  095F  1303               	bcf	3,6	;RP1=0, select bank1
  6175  0960  009F               	movwf	31	;volatile
  6176                           
  6177                           ;MCU_B1.c: 429: FVRCON = 0xc1;
  6178  0961  30C1               	movlw	193
  6179  0962  009D               	movwf	29	;volatile
  6180  0963  0008               	return
  6181  0964                     __end_of_ADC_Set:	
  6182                           
  6183                           	psect	text35
  6184  002D                     __ptext35:	
  6185 ;; *************** function _Load_Main *****************
  6186 ;; Defined at:
  6187 ;;		line 39 in file "../src/OverLoad_B1.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;		None
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;  i               2   15[BANK0 ] int 
  6192 ;;  LightsCount     1   14[BANK0 ] unsigned char 
  6193 ;;  Load_RunStat    1   13[BANK0 ] unsigned char 
  6194 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  6195 ;;  error           1    9[BANK0 ] unsigned char 
  6196 ;; Return value:  Size  Location     Type
  6197 ;;		None               void
  6198 ;; Registers used:
  6199 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6205 ;;      Params:         0       0       0       0
  6206 ;;      Locals:         0       8       0       0
  6207 ;;      Temps:          0       2       0       0
  6208 ;;      Totals:         0      10       0       0
  6209 ;;Total ram usage:       10 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    3
  6212 ;; This function calls:
  6213 ;;		___lwdiv
  6214 ;;		___wmul
  6215 ;;		_getLight_LoadGO
  6216 ;;		_getLight_Load_Status
  6217 ;;		_getMain_All_Error_Status
  6218 ;;		_getMain_All_LightsStatus
  6219 ;;		_getMain_Lights_Count
  6220 ;;		_setLoad_AH_AL_Restore
  6221 ;; This function is called by:
  6222 ;;		_main
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           
  6227                           ;psect for function _Load_Main
  6228  002D                     _Load_Main:	
  6229                           
  6230                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  6231                           
  6232                           ;incstack = 0
  6233                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6234  002D  3000               	movlw	0
  6235  002E  158A  250C  118A   	fcall	_getMain_All_Error_Status
  6236  0031  1283               	bcf	3,5	;RP0=0, select bank0
  6237  0032  1303               	bcf	3,6	;RP1=0, select bank0
  6238  0033  00DE               	movwf	??_Load_Main
  6239  0034  085E               	movf	??_Load_Main,w
  6240  0035  00E0               	movwf	Load_Main@error
  6241                           
  6242                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
  6243  0036  01E4               	clrf	Load_Main@Load_RunStatus
  6244  0037  01E3               	clrf	Load_Main@ErrorCountValue
  6245  0038  01E5               	clrf	Load_Main@LightsCount
  6246                           
  6247                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  6248  0039  1683               	bsf	3,5	;RP0=1, select bank1
  6249  003A  1303               	bcf	3,6	;RP1=0, select bank1
  6250  003B  1C4A               	btfss	_Load^(0+128),0
  6251  003C  2A0F               	goto	l820
  6252                           
  6253                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
  6254  003D  158A  21FE  118A   	fcall	_getMain_All_LightsStatus
  6255  0040  3800               	iorlw	0
  6256  0041  1D03               	skipz
  6257  0042  2846               	goto	l5797
  6258                           
  6259                           ;OverLoad_B1.c: 45: Load.GO = 0;
  6260  0043  1683               	bsf	3,5	;RP0=1, select bank1
  6261  0044  1303               	bcf	3,6	;RP1=0, select bank1
  6262  0045  2865               	goto	l5813
  6263  0046                     l5797:	
  6264                           ;OverLoad_B1.c: 46: } else {
  6265                           
  6266                           
  6267                           ;OverLoad_B1.c: 69: if (error == 0) {
  6268  0046  1283               	bcf	3,5	;RP0=0, select bank0
  6269  0047  1303               	bcf	3,6	;RP1=0, select bank0
  6270  0048  08E0               	movf	Load_Main@error,f
  6271  0049  1D03               	skipz
  6272  004A  2862               	goto	l823
  6273                           
  6274                           ;OverLoad_B1.c: 70: Load.GO = 1;
  6275  004B  1683               	bsf	3,5	;RP0=1, select bank1
  6276  004C  1303               	bcf	3,6	;RP1=0, select bank1
  6277  004D  14CA               	bsf	_Load^(0+128),1
  6278                           
  6279                           ;OverLoad_B1.c: 72: if (getLight_LoadGO() == 1) {
  6280  004E  158A  2144  118A   	fcall	_getLight_LoadGO
  6281  0051  3A01               	xorlw	1
  6282  0052  1D03               	skipz
  6283  0053  285C               	goto	l824
  6284                           
  6285                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  6286  0054  1683               	bsf	3,5	;RP0=1, select bank1
  6287  0055  1303               	bcf	3,6	;RP1=0, select bank1
  6288  0056  1DCA               	btfss	_Load^(0+128),3
  6289  0057  1BCA               	btfsc	_Load^(0+128),7
  6290  0058  2866               	goto	l822
  6291                           
  6292                           ;OverLoad_B1.c: 74: Load.Run = 1;
  6293  0059  15CA               	bsf	_Load^(0+128),3
  6294                           
  6295                           ;OverLoad_B1.c: 75: Load.Count = 0;
  6296  005A  01E3               	clrf	(_Load^(0+128)+25)
  6297                           
  6298                           ;OverLoad_B1.c: 76: }
  6299                           ;OverLoad_B1.c: 77: } else {
  6300  005B  2866               	goto	l822
  6301  005C                     l824:	
  6302                           
  6303                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  6304  005C  1683               	bsf	3,5	;RP0=1, select bank1
  6305  005D  1303               	bcf	3,6	;RP1=0, select bank1
  6306  005E  1FCA               	btfss	_Load^(0+128),7
  6307  005F  2866               	goto	l822
  6308                           
  6309                           ;OverLoad_B1.c: 79: Load.OK = 0;
  6310  0060  13CA               	bcf	_Load^(0+128),7
  6311                           
  6312                           ;OverLoad_B1.c: 80: }
  6313                           ;OverLoad_B1.c: 81: }
  6314                           ;OverLoad_B1.c: 82: } else {
  6315  0061  2866               	goto	l822
  6316  0062                     l823:	
  6317                           
  6318                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  6319  0062  1683               	bsf	3,5	;RP0=1, select bank1
  6320  0063  1303               	bcf	3,6	;RP1=0, select bank1
  6321  0064  18CA               	btfsc	_Load^(0+128),1
  6322  0065                     l5813:	
  6323                           
  6324                           ;OverLoad_B1.c: 84: Load.GO = 0;
  6325  0065  10CA               	bcf	_Load^(0+128),1
  6326  0066                     l822:	
  6327                           
  6328                           ;OverLoad_B1.c: 85: }
  6329                           ;OverLoad_B1.c: 86: }
  6330                           ;OverLoad_B1.c: 88: }
  6331                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  6332  0066  1CCA               	btfss	_Load^(0+128),1
  6333  0067  29E8               	goto	l830
  6334                           
  6335                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  6336  0068  154A               	bsf	_Load^(0+128),2
  6337                           
  6338                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  6339  0069  1E4A               	btfss	_Load^(0+128),4
  6340  006A  29E6               	goto	l831
  6341                           
  6342                           ;OverLoad_B1.c: 95: Load.Time++;
  6343  006B  3001               	movlw	1
  6344  006C  07CB               	addwf	(_Load^(0+128)+1),f
  6345  006D  1803               	skipnc
  6346  006E  0ACC               	incf	((_Load+1)^(0+128)+1),f
  6347  006F  3000               	movlw	0
  6348  0070  07CC               	addwf	((_Load+1)^(0+128)+1),f
  6349                           
  6350                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
  6351  0071  3000               	movlw	0
  6352  0072  024C               	subwf	((_Load+1)^(0+128)+1),w
  6353  0073  3002               	movlw	2
  6354  0074  1903               	skipnz
  6355  0075  024B               	subwf	(_Load^(0+128)+1),w
  6356  0076  1C03               	skipc
  6357  0077  0008               	return
  6358                           
  6359                           ;OverLoad_B1.c: 97: Load.Time = 0;
  6360  0078  01CB               	clrf	(_Load^(0+128)+1)
  6361  0079  01CC               	clrf	((_Load+1)^(0+128)+1)
  6362                           
  6363                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  6364  007A  124A               	bcf	_Load^(0+128),4
  6365                           
  6366                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  6367  007B  3001               	movlw	1
  6368  007C  1283               	bcf	3,5	;RP0=0, select bank0
  6369  007D  1303               	bcf	3,6	;RP1=0, select bank0
  6370  007E  00E6               	movwf	Load_Main@i
  6371  007F  3000               	movlw	0
  6372  0080  00E7               	movwf	Load_Main@i+1
  6373  0081  0867               	movf	Load_Main@i+1,w
  6374  0082  3A80               	xorlw	128
  6375  0083  00FF               	movwf	127
  6376  0084  3080               	movlw	128
  6377  0085  027F               	subwf	127,w
  6378  0086  1D03               	skipz
  6379  0087  288A               	goto	u7135
  6380  0088  3004               	movlw	4
  6381  0089  0266               	subwf	Load_Main@i,w
  6382  008A                     u7135:	
  6383  008A  1803               	btfsc	3,0
  6384  008B  28C8               	goto	l5835
  6385  008C                     l5829:	
  6386                           
  6387                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  6388  008C  1283               	bcf	3,5	;RP0=0, select bank0
  6389  008D  1303               	bcf	3,6	;RP1=0, select bank0
  6390  008E  0866               	movf	Load_Main@i,w
  6391  008F  3ED4               	addlw	(_Load+10)& (0+255)
  6392  0090  0084               	movwf	4
  6393  0091  1383               	bcf	3,7	;select IRP bank1
  6394  0092  0800               	movf	0,w
  6395  0093  00DE               	movwf	??_Load_Main
  6396  0094  01DF               	clrf	??_Load_Main+1
  6397  0095  085E               	movf	??_Load_Main,w
  6398  0096  1683               	bsf	3,5	;RP0=1, select bank1
  6399  0097  1303               	bcf	3,6	;RP1=0, select bank1
  6400  0098  07CF               	addwf	(_Load^(0+128)+5),f
  6401  0099  1803               	skipnc
  6402  009A  0AD0               	incf	((_Load+1)^(0+128)+5),f
  6403  009B  1283               	bcf	3,5	;RP0=0, select bank0
  6404  009C  1303               	bcf	3,6	;RP1=0, select bank0
  6405  009D  085F               	movf	??_Load_Main+1,w
  6406  009E  1683               	bsf	3,5	;RP0=1, select bank1
  6407  009F  1303               	bcf	3,6	;RP1=0, select bank1
  6408  00A0  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6409                           
  6410                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  6411  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  6412  00A2  1303               	bcf	3,6	;RP1=0, select bank0
  6413  00A3  0866               	movf	Load_Main@i,w
  6414  00A4  3ED9               	addlw	(_Load+15)& (0+255)
  6415  00A5  0084               	movwf	4
  6416  00A6  0800               	movf	0,w
  6417  00A7  00DE               	movwf	??_Load_Main
  6418  00A8  01DF               	clrf	??_Load_Main+1
  6419  00A9  085E               	movf	??_Load_Main,w
  6420  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  6421  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  6422  00AC  07D1               	addwf	(_Load^(0+128)+7),f
  6423  00AD  1803               	skipnc
  6424  00AE  0AD2               	incf	((_Load+1)^(0+128)+7),f
  6425  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  6426  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  6427  00B1  085F               	movf	??_Load_Main+1,w
  6428  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  6429  00B3  1303               	bcf	3,6	;RP1=0, select bank1
  6430  00B4  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6431  00B5  3001               	movlw	1
  6432  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  6433  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  6434  00B8  07E6               	addwf	Load_Main@i,f
  6435  00B9  1803               	skipnc
  6436  00BA  0AE7               	incf	Load_Main@i+1,f
  6437  00BB  3000               	movlw	0
  6438  00BC  07E7               	addwf	Load_Main@i+1,f
  6439  00BD  0867               	movf	Load_Main@i+1,w
  6440  00BE  3A80               	xorlw	128
  6441  00BF  00FF               	movwf	127
  6442  00C0  3080               	movlw	128
  6443  00C1  027F               	subwf	127,w
  6444  00C2  1D03               	skipz
  6445  00C3  28C6               	goto	u7145
  6446  00C4  3004               	movlw	4
  6447  00C5  0266               	subwf	Load_Main@i,w
  6448  00C6                     u7145:	
  6449  00C6  1C03               	skipc
  6450  00C7  288C               	goto	l5829
  6451  00C8                     l5835:	
  6452                           
  6453                           ;OverLoad_B1.c: 103: }
  6454                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  6455  00C8  3003               	movlw	3
  6456  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  6457  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  6458  00CB  00D7               	movwf	___lwdiv@divisor
  6459  00CC  3000               	movlw	0
  6460  00CD  00D8               	movwf	___lwdiv@divisor+1
  6461  00CE  1683               	bsf	3,5	;RP0=1, select bank1
  6462  00CF  1303               	bcf	3,6	;RP1=0, select bank1
  6463  00D0  0850               	movf	((_Load+1)^(0+128)+5),w
  6464  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  6465  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  6466  00D3  01DA               	clrf	___lwdiv@dividend+1
  6467  00D4  07DA               	addwf	___lwdiv@dividend+1,f
  6468  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  6469  00D6  1303               	bcf	3,6	;RP1=0, select bank1
  6470  00D7  084F               	movf	(_Load^(0+128)+5),w
  6471  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  6472  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  6473  00DA  01D9               	clrf	___lwdiv@dividend
  6474  00DB  07D9               	addwf	___lwdiv@dividend,f
  6475  00DC  158A  254A  118A   	fcall	___lwdiv
  6476  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  6477  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  6478  00E1  0858               	movf	?___lwdiv+1,w
  6479  00E2  1683               	bsf	3,5	;RP0=1, select bank1
  6480  00E3  1303               	bcf	3,6	;RP1=0, select bank1
  6481  00E4  01D0               	clrf	((_Load+1)^(0+128)+5)
  6482  00E5  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6483  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  6484  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  6485  00E8  0857               	movf	?___lwdiv,w
  6486  00E9  1683               	bsf	3,5	;RP0=1, select bank1
  6487  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  6488  00EB  01CF               	clrf	(_Load^(0+128)+5)
  6489  00EC  07CF               	addwf	(_Load^(0+128)+5),f
  6490                           
  6491                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  6492  00ED  3003               	movlw	3
  6493  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  6494  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  6495  00F0  00D7               	movwf	___lwdiv@divisor
  6496  00F1  3000               	movlw	0
  6497  00F2  00D8               	movwf	___lwdiv@divisor+1
  6498  00F3  1683               	bsf	3,5	;RP0=1, select bank1
  6499  00F4  1303               	bcf	3,6	;RP1=0, select bank1
  6500  00F5  0852               	movf	((_Load+1)^(0+128)+7),w
  6501  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  6502  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  6503  00F8  01DA               	clrf	___lwdiv@dividend+1
  6504  00F9  07DA               	addwf	___lwdiv@dividend+1,f
  6505  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  6506  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  6507  00FC  0851               	movf	(_Load^(0+128)+7),w
  6508  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  6509  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  6510  00FF  01D9               	clrf	___lwdiv@dividend
  6511  0100  07D9               	addwf	___lwdiv@dividend,f
  6512  0101  158A  254A  118A   	fcall	___lwdiv
  6513  0104  1283               	bcf	3,5	;RP0=0, select bank0
  6514  0105  1303               	bcf	3,6	;RP1=0, select bank0
  6515  0106  0858               	movf	?___lwdiv+1,w
  6516  0107  1683               	bsf	3,5	;RP0=1, select bank1
  6517  0108  1303               	bcf	3,6	;RP1=0, select bank1
  6518  0109  01D2               	clrf	((_Load+1)^(0+128)+7)
  6519  010A  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6520  010B  1283               	bcf	3,5	;RP0=0, select bank0
  6521  010C  1303               	bcf	3,6	;RP1=0, select bank0
  6522  010D  0857               	movf	?___lwdiv,w
  6523  010E  1683               	bsf	3,5	;RP0=1, select bank1
  6524  010F  1303               	bcf	3,6	;RP1=0, select bank1
  6525  0110  01D1               	clrf	(_Load^(0+128)+7)
  6526  0111  07D1               	addwf	(_Load^(0+128)+7),f
  6527                           
  6528                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  6529  0112  158A  22BA  118A   	fcall	_setLoad_AH_AL_Restore
  6530                           
  6531                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
  6532  0115  1683               	bsf	3,5	;RP0=1, select bank1
  6533  0116  1303               	bcf	3,6	;RP1=0, select bank1
  6534  0117  0852               	movf	((_Load+1)^(0+128)+7),w
  6535  0118  0250               	subwf	((_Load+1)^(0+128)+5),w
  6536  0119  1D03               	skipz
  6537  011A  291D               	goto	u7155
  6538  011B  0851               	movf	(_Load^(0+128)+7),w
  6539  011C  024F               	subwf	(_Load^(0+128)+5),w
  6540  011D                     u7155:	
  6541  011D  1C03               	skipc
  6542  011E  0008               	return
  6543                           
  6544                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  6545  011F  0351               	decf	(_Load^(0+128)+7),w
  6546  0120  3AFF               	xorlw	255
  6547  0121  074F               	addwf	(_Load^(0+128)+5),w
  6548  0122  1283               	bcf	3,5	;RP0=0, select bank0
  6549  0123  1303               	bcf	3,6	;RP1=0, select bank0
  6550  0124  00DE               	movwf	??_Load_Main
  6551  0125  085E               	movf	??_Load_Main,w
  6552  0126  1683               	bsf	3,5	;RP0=1, select bank1
  6553  0127  1303               	bcf	3,6	;RP1=0, select bank1
  6554  0128  00DE               	movwf	(_Load^(0+128)+20)
  6555                           
  6556                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  6557  0129  01CF               	clrf	(_Load^(0+128)+5)
  6558  012A  01D0               	clrf	((_Load+1)^(0+128)+5)
  6559                           
  6560                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  6561  012B  01D1               	clrf	(_Load^(0+128)+7)
  6562  012C  01D2               	clrf	((_Load+1)^(0+128)+7)
  6563                           
  6564                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  6565  012D  1DCA               	btfss	_Load^(0+128),3
  6566  012E  2992               	goto	l836
  6567                           
  6568                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  6569  012F  3002               	movlw	2
  6570  0130  0263               	subwf	(_Load^(0+128)+25),w
  6571  0131  1803               	skipnc
  6572  0132  2992               	goto	l836
  6573                           
  6574                           ;OverLoad_B1.c: 115: Load.Count++;
  6575  0133  3001               	movlw	1
  6576  0134  1283               	bcf	3,5	;RP0=0, select bank0
  6577  0135  1303               	bcf	3,6	;RP1=0, select bank0
  6578  0136  00DE               	movwf	??_Load_Main
  6579  0137  085E               	movf	??_Load_Main,w
  6580  0138  1683               	bsf	3,5	;RP0=1, select bank1
  6581  0139  1303               	bcf	3,6	;RP1=0, select bank1
  6582  013A  07E3               	addwf	(_Load^(0+128)+25),f
  6583                           
  6584                           ;OverLoad_B1.c: 120: Load_RunStatus = getLight_Load_Status();
  6585  013B  158A  214A  118A   	fcall	_getLight_Load_Status
  6586  013E  1283               	bcf	3,5	;RP0=0, select bank0
  6587  013F  1303               	bcf	3,6	;RP1=0, select bank0
  6588  0140  00DE               	movwf	??_Load_Main
  6589  0141  085E               	movf	??_Load_Main,w
  6590  0142  00E4               	movwf	Load_Main@Load_RunStatus
  6591                           
  6592                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
  6593  0143  158A  21D0  118A   	fcall	_getMain_Lights_Count
  6594  0146  1283               	bcf	3,5	;RP0=0, select bank0
  6595  0147  1303               	bcf	3,6	;RP1=0, select bank0
  6596  0148  00DE               	movwf	??_Load_Main
  6597  0149  085E               	movf	??_Load_Main,w
  6598  014A  00E5               	movwf	Load_Main@LightsCount
  6599                           
  6600                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
  6601  014B  1683               	bsf	3,5	;RP0=1, select bank1
  6602  014C  1303               	bcf	3,6	;RP1=0, select bank1
  6603  014D  0863               	movf	(_Load^(0+128)+25),w
  6604  014E  3A01               	xorlw	1
  6605  014F  1D03               	skipz
  6606  0150  2953               	goto	l5861
  6607                           
  6608                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(20*2.3);
  6609  0151  302E               	movlw	46
  6610  0152  2960               	goto	L11
  6611  0153                     l5861:	
  6612                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
  6613                           
  6614  0153  0863               	movf	(_Load^(0+128)+25),w
  6615  0154  3A02               	xorlw	2
  6616  0155  1D03               	skipz
  6617  0156  2992               	goto	l836
  6618                           
  6619                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
  6620  0157  1283               	bcf	3,5	;RP0=0, select bank0
  6621  0158  1303               	bcf	3,6	;RP1=0, select bank0
  6622  0159  0865               	movf	Load_Main@LightsCount,w
  6623  015A  3A01               	xorlw	1
  6624  015B  1D03               	skipz
  6625  015C  2963               	goto	l5867
  6626                           
  6627                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(4.5*2.3);
  6628  015D  300A               	movlw	10
  6629  015E  1683               	bsf	3,5	;RP0=1, select bank1
  6630  015F  1303               	bcf	3,6	;RP1=0, select bank1
  6631  0160                     L11:	
  6632  0160  00E1               	movwf	(_Load^(0+128)+23)
  6633  0161  3000               	movlw	0
  6634  0162  2991               	goto	L12
  6635  0163                     l5867:	
  6636                           ;OverLoad_B1.c: 130: } else {
  6637                           
  6638                           
  6639                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
  6640  0163  1283               	bcf	3,5	;RP0=0, select bank0
  6641  0164  08E4               	movf	Load_Main@Load_RunStatus,f
  6642  0165  1D03               	skipz
  6643  0166  2984               	goto	l5871
  6644                           
  6645                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(4.5*2.3) * LightsCount;
  6646  0167  0865               	movf	Load_Main@LightsCount,w
  6647  0168  00DE               	movwf	??_Load_Main
  6648  0169  01DF               	clrf	??_Load_Main+1
  6649  016A  085E               	movf	??_Load_Main,w
  6650  016B  00D7               	movwf	___wmul@multiplier
  6651  016C  085F               	movf	??_Load_Main+1,w
  6652  016D  00D8               	movwf	___wmul@multiplier+1
  6653  016E  300A               	movlw	10
  6654  016F  00D9               	movwf	___wmul@multiplicand
  6655  0170  3000               	movlw	0
  6656  0171  00DA               	movwf	___wmul@multiplicand+1
  6657  0172  158A  2422  118A   	fcall	___wmul
  6658  0175  1283               	bcf	3,5	;RP0=0, select bank0
  6659  0176  1303               	bcf	3,6	;RP1=0, select bank0
  6660  0177  0858               	movf	?___wmul+1,w
  6661  0178  1683               	bsf	3,5	;RP0=1, select bank1
  6662  0179  1303               	bcf	3,6	;RP1=0, select bank1
  6663  017A  01E2               	clrf	((_Load+1)^(0+128)+23)
  6664  017B  07E2               	addwf	((_Load+1)^(0+128)+23),f
  6665  017C  1283               	bcf	3,5	;RP0=0, select bank0
  6666  017D  1303               	bcf	3,6	;RP1=0, select bank0
  6667  017E  0857               	movf	?___wmul,w
  6668  017F  1683               	bsf	3,5	;RP0=1, select bank1
  6669  0180  1303               	bcf	3,6	;RP1=0, select bank1
  6670  0181  01E1               	clrf	(_Load^(0+128)+23)
  6671  0182  07E1               	addwf	(_Load^(0+128)+23),f
  6672                           
  6673                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
  6674  0183  2992               	goto	l836
  6675  0184                     l5871:	
  6676  0184  1283               	bcf	3,5	;RP0=0, select bank0
  6677  0185  0864               	movf	Load_Main@Load_RunStatus,w
  6678  0186  3A01               	xorlw	1
  6679  0187  1D03               	skipz
  6680  0188  2992               	goto	l836
  6681                           
  6682                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(4.5*2.3) + Load.TotalLoad;
  6683  0189  1683               	bsf	3,5	;RP0=1, select bank1
  6684  018A  1303               	bcf	3,6	;RP1=0, select bank1
  6685  018B  0853               	movf	(_Load^(0+128)+9),w
  6686  018C  3E0A               	addlw	10
  6687  018D  00E1               	movwf	(_Load^(0+128)+23)
  6688  018E  3000               	movlw	0
  6689  018F  1803               	skipnc
  6690  0190  3001               	movlw	1
  6691  0191                     L12:	
  6692  0191  00E2               	movwf	(_Load^(0+128)+24)
  6693  0192                     l836:	
  6694                           
  6695                           ;OverLoad_B1.c: 135: }
  6696                           ;OverLoad_B1.c: 136: }
  6697                           ;OverLoad_B1.c: 137: }
  6698                           ;OverLoad_B1.c: 138: }
  6699                           ;OverLoad_B1.c: 139: }
  6700                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
  6701  0192  1683               	bsf	3,5	;RP0=1, select bank1
  6702  0193  1303               	bcf	3,6	;RP1=0, select bank1
  6703  0194  085E               	movf	(_Load^(0+128)+20),w
  6704  0195  1283               	bcf	3,5	;RP0=0, select bank0
  6705  0196  1303               	bcf	3,6	;RP1=0, select bank0
  6706  0197  00DE               	movwf	??_Load_Main
  6707  0198  01DF               	clrf	??_Load_Main+1
  6708  0199  1683               	bsf	3,5	;RP0=1, select bank1
  6709  019A  1303               	bcf	3,6	;RP1=0, select bank1
  6710  019B  0862               	movf	((_Load+1)^(0+128)+23),w
  6711  019C  1283               	bcf	3,5	;RP0=0, select bank0
  6712  019D  1303               	bcf	3,6	;RP1=0, select bank0
  6713  019E  025F               	subwf	??_Load_Main+1,w
  6714  019F  1D03               	skipz
  6715  01A0  29A7               	goto	u7235
  6716  01A1  1683               	bsf	3,5	;RP0=1, select bank1
  6717  01A2  1303               	bcf	3,6	;RP1=0, select bank1
  6718  01A3  0861               	movf	(_Load^(0+128)+23),w
  6719  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  6720  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  6721  01A6  025E               	subwf	??_Load_Main,w
  6722  01A7                     u7235:	
  6723  01A7  1C03               	skipc
  6724  01A8  29C8               	goto	l5889
  6725                           
  6726                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6727  01A9  0865               	movf	Load_Main@LightsCount,w
  6728  01AA  3A01               	xorlw	1
  6729  01AB  1903               	skipnz
  6730  01AC  29AF               	goto	l5879
  6731  01AD  3003               	movlw	3
  6732  01AE  29B0               	goto	L13
  6733  01AF                     l5879:	
  6734  01AF  3002               	movlw	2
  6735  01B0                     L13:	
  6736  01B0  00E1               	movwf	_Load_Main$2716
  6737  01B1  3000               	movlw	0
  6738  01B2  00E2               	movwf	_Load_Main$2716+1
  6739  01B3  0861               	movf	_Load_Main$2716,w
  6740  01B4  00DE               	movwf	??_Load_Main
  6741  01B5  085E               	movf	??_Load_Main,w
  6742  01B6  00E3               	movwf	Load_Main@ErrorCountValue
  6743                           
  6744                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
  6745  01B7  3001               	movlw	1
  6746  01B8  00DE               	movwf	??_Load_Main
  6747  01B9  085E               	movf	??_Load_Main,w
  6748  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  6749  01BB  1303               	bcf	3,6	;RP1=0, select bank1
  6750  01BC  07E4               	addwf	(_Load^(0+128)+26),f
  6751                           
  6752                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
  6753  01BD  0864               	movf	(_Load^(0+128)+26),w
  6754  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  6755  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  6756  01C0  0263               	subwf	Load_Main@ErrorCountValue,w
  6757  01C1  1803               	skipnc
  6758  01C2  0008               	return
  6759                           
  6760                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
  6761  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  6762  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  6763  01C5  01E4               	clrf	(_Load^(0+128)+26)
  6764                           
  6765                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
  6766  01C6  16CA               	bsf	_Load^(0+128),5
  6767                           
  6768                           ;OverLoad_B1.c: 168: }
  6769                           ;OverLoad_B1.c: 169: } else {
  6770  01C7  0008               	return
  6771  01C8                     l5889:	
  6772                           
  6773                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
  6774  01C8  1683               	bsf	3,5	;RP0=1, select bank1
  6775  01C9  1303               	bcf	3,6	;RP1=0, select bank1
  6776  01CA  01E4               	clrf	(_Load^(0+128)+26)
  6777                           
  6778                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
  6779  01CB  1DCA               	btfss	_Load^(0+128),3
  6780  01CC  0008               	return
  6781                           
  6782                           ;OverLoad_B1.c: 172: Load.SafeCount++;
  6783  01CD  3001               	movlw	1
  6784  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  6785  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  6786  01D0  00DE               	movwf	??_Load_Main
  6787  01D1  085E               	movf	??_Load_Main,w
  6788  01D2  1683               	bsf	3,5	;RP0=1, select bank1
  6789  01D3  1303               	bcf	3,6	;RP1=0, select bank1
  6790  01D4  07E5               	addwf	(_Load^(0+128)+27),f
  6791                           
  6792                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
  6793  01D5  3003               	movlw	3
  6794  01D6  0265               	subwf	(_Load^(0+128)+27),w
  6795  01D7  1C03               	skipc
  6796  01D8  0008               	return
  6797                           
  6798                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
  6799  01D9  01E5               	clrf	(_Load^(0+128)+27)
  6800                           
  6801                           ;OverLoad_B1.c: 175: Load.OK = 1;
  6802  01DA  17CA               	bsf	_Load^(0+128),7
  6803                           
  6804                           ;OverLoad_B1.c: 176: Load.Run = 0;
  6805  01DB  11CA               	bcf	_Load^(0+128),3
  6806                           
  6807                           ;OverLoad_B1.c: 177: Load.Count = 0;
  6808  01DC  01E3               	clrf	(_Load^(0+128)+25)
  6809                           
  6810                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
  6811  01DD  085E               	movf	(_Load^(0+128)+20),w
  6812  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  6813  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  6814  01E0  00DE               	movwf	??_Load_Main
  6815  01E1  085E               	movf	??_Load_Main,w
  6816  01E2  1683               	bsf	3,5	;RP0=1, select bank1
  6817  01E3  1303               	bcf	3,6	;RP1=0, select bank1
  6818  01E4  00D3               	movwf	(_Load^(0+128)+9)
  6819                           
  6820                           ;OverLoad_B1.c: 182: }
  6821                           ;OverLoad_B1.c: 183: }
  6822                           ;OverLoad_B1.c: 206: }
  6823                           ;OverLoad_B1.c: 207: }
  6824                           ;OverLoad_B1.c: 208: }
  6825                           ;OverLoad_B1.c: 209: } else {
  6826  01E5  0008               	return
  6827  01E6                     l831:	
  6828                           
  6829                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
  6830  01E6  164A               	bsf	_Load^(0+128),4
  6831                           
  6832                           ;OverLoad_B1.c: 211: }
  6833                           ;OverLoad_B1.c: 212: } else {
  6834  01E7  0008               	return
  6835  01E8                     l830:	
  6836                           
  6837                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
  6838  01E8  1D4A               	btfss	_Load^(0+128),2
  6839  01E9  29FC               	goto	l5925
  6840                           
  6841                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
  6842  01EA  114A               	bcf	_Load^(0+128),2
  6843                           
  6844                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
  6845  01EB  124A               	bcf	_Load^(0+128),4
  6846                           
  6847                           ;OverLoad_B1.c: 218: Load.Time = 0;
  6848  01EC  01CB               	clrf	(_Load^(0+128)+1)
  6849  01ED  01CC               	clrf	((_Load+1)^(0+128)+1)
  6850                           
  6851                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
  6852  01EE  158A  22BA  118A   	fcall	_setLoad_AH_AL_Restore
  6853                           
  6854                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
  6855  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  6856  01F2  1303               	bcf	3,6	;RP1=0, select bank1
  6857  01F3  01E4               	clrf	(_Load^(0+128)+26)
  6858                           
  6859                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
  6860  01F4  01E5               	clrf	(_Load^(0+128)+27)
  6861                           
  6862                           ;OverLoad_B1.c: 224: Load.ADH = 0;
  6863  01F5  01CF               	clrf	(_Load^(0+128)+5)
  6864  01F6  01D0               	clrf	((_Load+1)^(0+128)+5)
  6865                           
  6866                           ;OverLoad_B1.c: 225: Load.ADL = 0;
  6867  01F7  01D1               	clrf	(_Load^(0+128)+7)
  6868  01F8  01D2               	clrf	((_Load+1)^(0+128)+7)
  6869                           
  6870                           ;OverLoad_B1.c: 231: Load.Run = 0;
  6871  01F9  11CA               	bcf	_Load^(0+128),3
  6872                           
  6873                           ;OverLoad_B1.c: 232: Load.Count = 0;
  6874  01FA  01E3               	clrf	(_Load^(0+128)+25)
  6875                           
  6876                           ;OverLoad_B1.c: 233: Load.OK = 0;
  6877  01FB  13CA               	bcf	_Load^(0+128),7
  6878  01FC                     l5925:	
  6879                           
  6880                           ;OverLoad_B1.c: 255: }
  6881                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
  6882  01FC  1ECA               	btfss	_Load^(0+128),5
  6883  01FD  0008               	return
  6884                           
  6885                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
  6886  01FE  3001               	movlw	1
  6887  01FF  07CD               	addwf	(_Load^(0+128)+3),f
  6888  0200  1803               	skipnc
  6889  0201  0ACE               	incf	((_Load+1)^(0+128)+3),f
  6890  0202  3000               	movlw	0
  6891  0203  07CE               	addwf	((_Load+1)^(0+128)+3),f
  6892                           
  6893                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
  6894  0204  3001               	movlw	1
  6895  0205  024E               	subwf	((_Load+1)^(0+128)+3),w
  6896  0206  30F4               	movlw	244
  6897  0207  1903               	skipnz
  6898  0208  024D               	subwf	(_Load^(0+128)+3),w
  6899  0209  1C03               	skipc
  6900  020A  0008               	return
  6901                           
  6902                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
  6903  020B  01CD               	clrf	(_Load^(0+128)+3)
  6904  020C  01CE               	clrf	((_Load+1)^(0+128)+3)
  6905                           
  6906                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
  6907  020D  12CA               	bcf	_Load^(0+128),5
  6908                           
  6909                           ;OverLoad_B1.c: 261: }
  6910                           ;OverLoad_B1.c: 262: }
  6911                           ;OverLoad_B1.c: 263: }
  6912                           ;OverLoad_B1.c: 264: } else {
  6913  020E  0008               	return
  6914  020F                     l820:	
  6915                           
  6916                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
  6917  020F  1283               	bcf	3,5	;RP0=0, select bank0
  6918  0210  1303               	bcf	3,6	;RP1=0, select bank0
  6919  0211  1C31               	btfss	_myMain,0
  6920  0212  0008               	return
  6921                           
  6922                           ;OverLoad_B1.c: 266: Load.Enable = 1;
  6923  0213  1683               	bsf	3,5	;RP0=1, select bank1
  6924  0214  1303               	bcf	3,6	;RP1=0, select bank1
  6925  0215  144A               	bsf	_Load^(0+128),0
  6926  0216  0008               	return
  6927  0217                     __end_of_Load_Main:	
  6928                           
  6929                           	psect	text36
  6930  09D0                     __ptext36:	
  6931 ;; *************** function _getMain_Lights_Count *****************
  6932 ;; Defined at:
  6933 ;;		line 459 in file "../src/Main_B1.c"
  6934 ;; Parameters:    Size  Location     Type
  6935 ;;		None
  6936 ;; Auto vars:     Size  Location     Type
  6937 ;;  status2         1    2[BANK0 ] unsigned char 
  6938 ;;  status1         1    1[BANK0 ] unsigned char 
  6939 ;;  count           1    0[BANK0 ] unsigned char 
  6940 ;; Return value:  Size  Location     Type
  6941 ;;                  1    wreg      unsigned char 
  6942 ;; Registers used:
  6943 ;;		wreg, status,2, status,0
  6944 ;; Tracked objects:
  6945 ;;		On entry : 0/0
  6946 ;;		On exit  : 0/0
  6947 ;;		Unchanged: 0/0
  6948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6949 ;;      Params:         0       0       0       0
  6950 ;;      Locals:         0       3       0       0
  6951 ;;      Temps:          0       0       0       0
  6952 ;;      Totals:         0       3       0       0
  6953 ;;Total ram usage:        3 bytes
  6954 ;; Hardware stack levels used:    1
  6955 ;; Hardware stack levels required when called:    2
  6956 ;; This function calls:
  6957 ;;		Nothing
  6958 ;; This function is called by:
  6959 ;;		_Load_Main
  6960 ;; This function uses a non-reentrant model
  6961 ;;
  6962                           
  6963                           
  6964                           ;psect for function _getMain_Lights_Count
  6965  09D0                     _getMain_Lights_Count:	
  6966                           
  6967                           ;Main_B1.c: 460: char count = 0;
  6968                           
  6969                           ;incstack = 0
  6970                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  6971  09D0  1283               	bcf	3,5	;RP0=0, select bank0
  6972  09D1  1303               	bcf	3,6	;RP1=0, select bank0
  6973  09D2  01D7               	clrf	getMain_Lights_Count@count
  6974                           
  6975                           ;Main_B1.c: 476: char status1 = Lights1.Status == 1 ? 1 : 0;
  6976  09D3  3000               	movlw	0
  6977  09D4  1949               	btfsc	_Lights1,2
  6978  09D5  3001               	movlw	1
  6979  09D6  00D8               	movwf	getMain_Lights_Count@status1
  6980                           
  6981                           ;Main_B1.c: 479: char status2 = Lights2.Status == 1 ? 1 : 0;
  6982  09D7  3000               	movlw	0
  6983  09D8  194E               	btfsc	_Lights2,2
  6984  09D9  3001               	movlw	1
  6985  09DA  00D9               	movwf	getMain_Lights_Count@status2
  6986                           
  6987                           ;Main_B1.c: 490: return count = (status1 + status2);
  6988  09DB  0859               	movf	getMain_Lights_Count@status2,w
  6989  09DC  0758               	addwf	getMain_Lights_Count@status1,w
  6990  09DD  00D7               	movwf	getMain_Lights_Count@count
  6991  09DE  0008               	return
  6992  09DF                     __end_of_getMain_Lights_Count:	
  6993                           
  6994                           	psect	text37
  6995  094A                     __ptext37:	
  6996 ;; *************** function _getLight_Load_Status *****************
  6997 ;; Defined at:
  6998 ;;		line 405 in file "../src/TriacRelay_B1.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;		None
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;  loadstatus      1    4[COMMON] unsigned char 
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  1    wreg      unsigned char 
  7005 ;; Registers used:
  7006 ;;		wreg, status,2
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7012 ;;      Params:         0       0       0       0
  7013 ;;      Locals:         1       0       0       0
  7014 ;;      Temps:          0       0       0       0
  7015 ;;      Totals:         1       0       0       0
  7016 ;;Total ram usage:        1 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:    2
  7019 ;; This function calls:
  7020 ;;		Nothing
  7021 ;; This function is called by:
  7022 ;;		_Load_Main
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           
  7027                           ;psect for function _getLight_Load_Status
  7028  094A                     _getLight_Load_Status:	
  7029                           
  7030                           ;TriacRelay_B1.c: 406: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  7031                           
  7032                           ;incstack = 0
  7033                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  7034  094A  3000               	movlw	0
  7035  094B  18F7               	btfsc	_Light,1
  7036  094C  3001               	movlw	1
  7037  094D  00F4               	movwf	getLight_Load_Status@loadstatus
  7038                           
  7039                           ;TriacRelay_B1.c: 407: return loadstatus;
  7040  094E  0874               	movf	getLight_Load_Status@loadstatus,w
  7041  094F  0008               	return
  7042  0950                     __end_of_getLight_Load_Status:	
  7043                           
  7044                           	psect	text38
  7045  0944                     __ptext38:	
  7046 ;; *************** function _getLight_LoadGO *****************
  7047 ;; Defined at:
  7048 ;;		line 400 in file "../src/TriacRelay_B1.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;		None
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;  loadgo          1    4[COMMON] unsigned char 
  7053 ;; Return value:  Size  Location     Type
  7054 ;;                  1    wreg      unsigned char 
  7055 ;; Registers used:
  7056 ;;		wreg, status,2
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7062 ;;      Params:         0       0       0       0
  7063 ;;      Locals:         1       0       0       0
  7064 ;;      Temps:          0       0       0       0
  7065 ;;      Totals:         1       0       0       0
  7066 ;;Total ram usage:        1 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:    2
  7069 ;; This function calls:
  7070 ;;		Nothing
  7071 ;; This function is called by:
  7072 ;;		_Load_Main
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           
  7077                           ;psect for function _getLight_LoadGO
  7078  0944                     _getLight_LoadGO:	
  7079                           
  7080                           ;TriacRelay_B1.c: 401: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  7081                           
  7082                           ;incstack = 0
  7083                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  7084  0944  3000               	movlw	0
  7085  0945  1877               	btfsc	_Light,0
  7086  0946  3001               	movlw	1
  7087  0947  00F4               	movwf	getLight_LoadGO@loadgo
  7088                           
  7089                           ;TriacRelay_B1.c: 402: return loadgo;
  7090  0948  0874               	movf	getLight_LoadGO@loadgo,w
  7091  0949  0008               	return
  7092  094A                     __end_of_getLight_LoadGO:	
  7093                           
  7094                           	psect	text39
  7095  0C22                     __ptext39:	
  7096 ;; *************** function ___wmul *****************
  7097 ;; Defined at:
  7098 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7101 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7102 ;; Auto vars:     Size  Location     Type
  7103 ;;  product         2    4[COMMON] unsigned int 
  7104 ;; Return value:  Size  Location     Type
  7105 ;;                  2    0[BANK0 ] unsigned int 
  7106 ;; Registers used:
  7107 ;;		wreg, status,2, status,0
  7108 ;; Tracked objects:
  7109 ;;		On entry : 0/0
  7110 ;;		On exit  : 0/0
  7111 ;;		Unchanged: 0/0
  7112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7113 ;;      Params:         0       4       0       0
  7114 ;;      Locals:         2       0       0       0
  7115 ;;      Temps:          0       0       0       0
  7116 ;;      Totals:         2       4       0       0
  7117 ;;Total ram usage:        6 bytes
  7118 ;; Hardware stack levels used:    1
  7119 ;; Hardware stack levels required when called:    2
  7120 ;; This function calls:
  7121 ;;		Nothing
  7122 ;; This function is called by:
  7123 ;;		_Load_Main
  7124 ;; This function uses a non-reentrant model
  7125 ;;
  7126                           
  7127                           
  7128                           ;psect for function ___wmul
  7129  0C22                     ___wmul:	
  7130                           
  7131                           ;incstack = 0
  7132                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7133  0C22  01F4               	clrf	___wmul@product
  7134  0C23  01F5               	clrf	___wmul@product+1
  7135  0C24                     l5553:	
  7136  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  7137  0C25  1303               	bcf	3,6	;RP1=0, select bank0
  7138  0C26  1C57               	btfss	___wmul@multiplier,0
  7139  0C27  2C2E               	goto	l1686
  7140  0C28  0859               	movf	___wmul@multiplicand,w
  7141  0C29  07F4               	addwf	___wmul@product,f
  7142  0C2A  1803               	skipnc
  7143  0C2B  0AF5               	incf	___wmul@product+1,f
  7144  0C2C  085A               	movf	___wmul@multiplicand+1,w
  7145  0C2D  07F5               	addwf	___wmul@product+1,f
  7146  0C2E                     l1686:	
  7147  0C2E  3001               	movlw	1
  7148  0C2F                     u6545:	
  7149  0C2F  1003               	clrc
  7150  0C30  0DD9               	rlf	___wmul@multiplicand,f
  7151  0C31  0DDA               	rlf	___wmul@multiplicand+1,f
  7152  0C32  3EFF               	addlw	-1
  7153  0C33  1D03               	skipz
  7154  0C34  2C2F               	goto	u6545
  7155  0C35  3001               	movlw	1
  7156  0C36                     u6555:	
  7157  0C36  1003               	clrc
  7158  0C37  0CD8               	rrf	___wmul@multiplier+1,f
  7159  0C38  0CD7               	rrf	___wmul@multiplier,f
  7160  0C39  3EFF               	addlw	-1
  7161  0C3A  1D03               	skipz
  7162  0C3B  2C36               	goto	u6555
  7163  0C3C  0858               	movf	___wmul@multiplier+1,w
  7164  0C3D  0457               	iorwf	___wmul@multiplier,w
  7165  0C3E  1D03               	skipz
  7166  0C3F  2C24               	goto	l5553
  7167  0C40  0875               	movf	___wmul@product+1,w
  7168  0C41  01D8               	clrf	?___wmul+1
  7169  0C42  07D8               	addwf	?___wmul+1,f
  7170  0C43  0874               	movf	___wmul@product,w
  7171  0C44  01D7               	clrf	?___wmul
  7172  0C45  07D7               	addwf	?___wmul,f
  7173  0C46  0008               	return
  7174  0C47                     __end_of___wmul:	
  7175                           
  7176                           	psect	text40
  7177  0D4A                     __ptext40:	
  7178 ;; *************** function ___lwdiv *****************
  7179 ;; Defined at:
  7180 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  7181 ;; Parameters:    Size  Location     Type
  7182 ;;  divisor         2    0[BANK0 ] unsigned int 
  7183 ;;  dividend        2    2[BANK0 ] unsigned int 
  7184 ;; Auto vars:     Size  Location     Type
  7185 ;;  quotient        2    5[BANK0 ] unsigned int 
  7186 ;;  counter         1    4[BANK0 ] unsigned char 
  7187 ;; Return value:  Size  Location     Type
  7188 ;;                  2    0[BANK0 ] unsigned int 
  7189 ;; Registers used:
  7190 ;;		wreg, status,2, status,0
  7191 ;; Tracked objects:
  7192 ;;		On entry : 0/0
  7193 ;;		On exit  : 0/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7196 ;;      Params:         0       4       0       0
  7197 ;;      Locals:         0       3       0       0
  7198 ;;      Temps:          1       0       0       0
  7199 ;;      Totals:         1       7       0       0
  7200 ;;Total ram usage:        8 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; Hardware stack levels required when called:    2
  7203 ;; This function calls:
  7204 ;;		Nothing
  7205 ;; This function is called by:
  7206 ;;		_Load_Main
  7207 ;;		_getPIR_AD
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           
  7212                           ;psect for function ___lwdiv
  7213  0D4A                     ___lwdiv:	
  7214                           
  7215                           ;incstack = 0
  7216                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7217  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  7218  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  7219  0D4C  01DC               	clrf	___lwdiv@quotient
  7220  0D4D  01DD               	clrf	___lwdiv@quotient+1
  7221  0D4E  0858               	movf	___lwdiv@divisor+1,w
  7222  0D4F  0457               	iorwf	___lwdiv@divisor,w
  7223  0D50  1903               	skipnz
  7224  0D51  2D83               	goto	l5585
  7225  0D52  01DB               	clrf	___lwdiv@counter
  7226  0D53  0ADB               	incf	___lwdiv@counter,f
  7227  0D54                     l5573:	
  7228  0D54  1BD8               	btfsc	___lwdiv@divisor+1,7
  7229  0D55  2D62               	goto	l5575
  7230  0D56  3001               	movlw	1
  7231  0D57                     u6585:	
  7232  0D57  1003               	clrc
  7233  0D58  0DD7               	rlf	___lwdiv@divisor,f
  7234  0D59  0DD8               	rlf	___lwdiv@divisor+1,f
  7235  0D5A  3EFF               	addlw	-1
  7236  0D5B  1D03               	skipz
  7237  0D5C  2D57               	goto	u6585
  7238  0D5D  3001               	movlw	1
  7239  0D5E  00F4               	movwf	??___lwdiv
  7240  0D5F  0874               	movf	??___lwdiv,w
  7241  0D60  07DB               	addwf	___lwdiv@counter,f
  7242  0D61  2D54               	goto	l5573
  7243  0D62                     l5575:	
  7244  0D62  3001               	movlw	1
  7245  0D63                     u6605:	
  7246  0D63  1003               	clrc
  7247  0D64  0DDC               	rlf	___lwdiv@quotient,f
  7248  0D65  0DDD               	rlf	___lwdiv@quotient+1,f
  7249  0D66  3EFF               	addlw	-1
  7250  0D67  1D03               	skipz
  7251  0D68  2D63               	goto	u6605
  7252  0D69  0858               	movf	___lwdiv@divisor+1,w
  7253  0D6A  025A               	subwf	___lwdiv@dividend+1,w
  7254  0D6B  1D03               	skipz
  7255  0D6C  2D6F               	goto	u6615
  7256  0D6D  0857               	movf	___lwdiv@divisor,w
  7257  0D6E  0259               	subwf	___lwdiv@dividend,w
  7258  0D6F                     u6615:	
  7259  0D6F  1C03               	skipc
  7260  0D70  2D78               	goto	l5581
  7261  0D71  0857               	movf	___lwdiv@divisor,w
  7262  0D72  02D9               	subwf	___lwdiv@dividend,f
  7263  0D73  0858               	movf	___lwdiv@divisor+1,w
  7264  0D74  1C03               	skipc
  7265  0D75  03DA               	decf	___lwdiv@dividend+1,f
  7266  0D76  02DA               	subwf	___lwdiv@dividend+1,f
  7267  0D77  145C               	bsf	___lwdiv@quotient,0
  7268  0D78                     l5581:	
  7269  0D78  3001               	movlw	1
  7270  0D79                     u6625:	
  7271  0D79  1003               	clrc
  7272  0D7A  0CD8               	rrf	___lwdiv@divisor+1,f
  7273  0D7B  0CD7               	rrf	___lwdiv@divisor,f
  7274  0D7C  3EFF               	addlw	-1
  7275  0D7D  1D03               	skipz
  7276  0D7E  2D79               	goto	u6625
  7277  0D7F  3001               	movlw	1
  7278  0D80  02DB               	subwf	___lwdiv@counter,f
  7279  0D81  1D03               	btfss	3,2
  7280  0D82  2D62               	goto	l5575
  7281  0D83                     l5585:	
  7282  0D83  085D               	movf	___lwdiv@quotient+1,w
  7283  0D84  01D8               	clrf	?___lwdiv+1
  7284  0D85  07D8               	addwf	?___lwdiv+1,f
  7285  0D86  085C               	movf	___lwdiv@quotient,w
  7286  0D87  01D7               	clrf	?___lwdiv
  7287  0D88  07D7               	addwf	?___lwdiv,f
  7288  0D89  0008               	return
  7289  0D8A                     __end_of___lwdiv:	
  7290                           
  7291                           	psect	text41
  7292  0920                     __ptext41:	
  7293 ;; *************** function _Load_Initialization *****************
  7294 ;; Defined at:
  7295 ;;		line 9 in file "../src/OverLoad_B1.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;		None
  7298 ;; Auto vars:     Size  Location     Type
  7299 ;;		None
  7300 ;; Return value:  Size  Location     Type
  7301 ;;		None               void
  7302 ;; Registers used:
  7303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7304 ;; Tracked objects:
  7305 ;;		On entry : 0/0
  7306 ;;		On exit  : 0/0
  7307 ;;		Unchanged: 0/0
  7308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7309 ;;      Params:         0       0       0       0
  7310 ;;      Locals:         0       0       0       0
  7311 ;;      Temps:          0       0       0       0
  7312 ;;      Totals:         0       0       0       0
  7313 ;;Total ram usage:        0 bytes
  7314 ;; Hardware stack levels used:    1
  7315 ;; Hardware stack levels required when called:    3
  7316 ;; This function calls:
  7317 ;;		_setLoad_AH_AL_Restore
  7318 ;; This function is called by:
  7319 ;;		_main
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           
  7324                           ;psect for function _Load_Initialization
  7325  0920                     _Load_Initialization:	
  7326                           
  7327                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  7328                           
  7329                           ;incstack = 0
  7330                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7331  0920  158A  22BA         	fcall	_setLoad_AH_AL_Restore
  7332  0922  0008               	return
  7333  0923                     __end_of_Load_Initialization:	
  7334                           
  7335                           	psect	text42
  7336  0ABA                     __ptext42:	
  7337 ;; *************** function _setLoad_AH_AL_Restore *****************
  7338 ;; Defined at:
  7339 ;;		line 292 in file "../src/OverLoad_B1.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;		None
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;  i               1    5[COMMON] unsigned char 
  7344 ;; Return value:  Size  Location     Type
  7345 ;;		None               void
  7346 ;; Registers used:
  7347 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7353 ;;      Params:         0       0       0       0
  7354 ;;      Locals:         1       0       0       0
  7355 ;;      Temps:          1       0       0       0
  7356 ;;      Totals:         2       0       0       0
  7357 ;;Total ram usage:        2 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    2
  7360 ;; This function calls:
  7361 ;;		Nothing
  7362 ;; This function is called by:
  7363 ;;		_Load_Initialization
  7364 ;;		_Load_Main
  7365 ;; This function uses a non-reentrant model
  7366 ;;
  7367                           
  7368                           
  7369                           ;psect for function _setLoad_AH_AL_Restore
  7370  0ABA                     _setLoad_AH_AL_Restore:	
  7371                           
  7372                           ;OverLoad_B1.c: 293: char i;
  7373                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
  7374                           
  7375                           ;incstack = 0
  7376                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  7377  0ABA  01F5               	clrf	setLoad_AH_AL_Restore@i
  7378  0ABB                     L14:	
  7379  0ABB  3005               	movlw	5
  7380  0ABC  0275               	subwf	setLoad_AH_AL_Restore@i,w
  7381  0ABD  1803               	btfsc	3,0
  7382  0ABE  0008               	return
  7383                           
  7384                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
  7385  0ABF  0875               	movf	setLoad_AH_AL_Restore@i,w
  7386  0AC0  3ED4               	addlw	(_Load+10)& (0+255)
  7387  0AC1  0084               	movwf	4
  7388  0AC2  1383               	bcf	3,7	;select IRP bank1
  7389  0AC3  0180               	clrf	0
  7390                           
  7391                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xff;
  7392  0AC4  30FF               	movlw	255
  7393  0AC5  00F4               	movwf	??_setLoad_AH_AL_Restore
  7394  0AC6  0875               	movf	setLoad_AH_AL_Restore@i,w
  7395  0AC7  3ED9               	addlw	(_Load+15)& (0+255)
  7396  0AC8  0084               	movwf	4
  7397  0AC9  0874               	movf	??_setLoad_AH_AL_Restore,w
  7398  0ACA  0080               	movwf	0
  7399  0ACB  3001               	movlw	1
  7400  0ACC  00F4               	movwf	??_setLoad_AH_AL_Restore
  7401  0ACD  0874               	movf	??_setLoad_AH_AL_Restore,w
  7402  0ACE  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  7403  0ACF  2ABB               	goto	L14
  7404  0AD0                     __end_of_setLoad_AH_AL_Restore:	
  7405                           
  7406                           	psect	text43
  7407  0C47                     __ptext43:	
  7408 ;; *************** function _Lights_Main *****************
  7409 ;; Defined at:
  7410 ;;		line 52 in file "../src/TriacRelay_B1.c"
  7411 ;; Parameters:    Size  Location     Type
  7412 ;;		None
  7413 ;; Auto vars:     Size  Location     Type
  7414 ;;		None
  7415 ;; Return value:  Size  Location     Type
  7416 ;;		None               void
  7417 ;; Registers used:
  7418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7419 ;; Tracked objects:
  7420 ;;		On entry : 0/0
  7421 ;;		On exit  : 0/0
  7422 ;;		Unchanged: 0/0
  7423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7424 ;;      Params:         0       0       0       0
  7425 ;;      Locals:         0       0       0       0
  7426 ;;      Temps:          0       0       0       0
  7427 ;;      Totals:         0       0       0       0
  7428 ;;Total ram usage:        0 bytes
  7429 ;; Hardware stack levels used:    1
  7430 ;; Hardware stack levels required when called:    6
  7431 ;; This function calls:
  7432 ;;		_Lights_Control
  7433 ;;		_getLoad_OK
  7434 ;;		_getMain_All_Error_Status
  7435 ;;		_getMain_All_LightsStatus
  7436 ;;		_setLights_Main
  7437 ;; This function is called by:
  7438 ;;		_main
  7439 ;; This function uses a non-reentrant model
  7440 ;;
  7441                           
  7442                           
  7443                           ;psect for function _Lights_Main
  7444  0C47                     _Lights_Main:	
  7445                           
  7446                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  7447                           
  7448                           ;incstack = 0
  7449                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7450  0C47  1C77               	btfss	_Light,0
  7451  0C48  2C5D               	goto	l5943
  7452                           
  7453                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  7454  0C49  158A  216C  158A   	fcall	_getLoad_OK
  7455  0C4C  3A01               	xorlw	1
  7456  0C4D  1903               	skipnz
  7457  0C4E  2C5C               	goto	l1544
  7458  0C4F  3000               	movlw	0
  7459  0C50  158A  250C  158A   	fcall	_getMain_All_Error_Status
  7460  0C53  3800               	iorlw	0
  7461  0C54  1D03               	skipz
  7462  0C55  2C5C               	goto	l1544
  7463  0C56  158A  21FE  158A   	fcall	_getMain_All_LightsStatus
  7464  0C59  3800               	iorlw	0
  7465  0C5A  1D03               	skipz
  7466  0C5B  2C5D               	goto	l5943
  7467  0C5C                     l1544:	
  7468                           
  7469                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  7470  0C5C  1077               	bcf	_Light,0
  7471  0C5D                     l5943:	
  7472                           
  7473                           ;TriacRelay_B1.c: 68: }
  7474                           ;TriacRelay_B1.c: 69: }
  7475                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  7476  0C5D  3001               	movlw	1
  7477  0C5E  158A  246D  158A   	fcall	_setLights_Main
  7478                           
  7479                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  7480  0C61  3001               	movlw	1
  7481  0C62  118A  267F  158A   	fcall	_Lights_Control
  7482                           
  7483                           ;TriacRelay_B1.c: 78: setLights_Main(2);
  7484  0C65  3002               	movlw	2
  7485  0C66  158A  246D  158A   	fcall	_setLights_Main
  7486                           
  7487                           ;TriacRelay_B1.c: 79: Lights_Control(2);
  7488  0C69  3002               	movlw	2
  7489  0C6A  118A  267F         	fcall	_Lights_Control
  7490  0C6C  0008               	return
  7491  0C6D                     __end_of_Lights_Main:	
  7492                           
  7493                           	psect	text44
  7494  0C6D                     __ptext44:	
  7495 ;; *************** function _setLights_Main *****************
  7496 ;; Defined at:
  7497 ;;		line 91 in file "../src/TriacRelay_B1.c"
  7498 ;; Parameters:    Size  Location     Type
  7499 ;;  lights          1    wreg     unsigned char 
  7500 ;; Auto vars:     Size  Location     Type
  7501 ;;  lights          1    5[BANK0 ] unsigned char 
  7502 ;; Return value:  Size  Location     Type
  7503 ;;		None               void
  7504 ;; Registers used:
  7505 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7506 ;; Tracked objects:
  7507 ;;		On entry : 0/0
  7508 ;;		On exit  : 0/0
  7509 ;;		Unchanged: 0/0
  7510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7511 ;;      Params:         0       0       0       0
  7512 ;;      Locals:         0       1       0       0
  7513 ;;      Temps:          0       0       0       0
  7514 ;;      Totals:         0       1       0       0
  7515 ;;Total ram usage:        1 bytes
  7516 ;; Hardware stack levels used:    1
  7517 ;; Hardware stack levels required when called:    5
  7518 ;; This function calls:
  7519 ;;		_LightsPointSelect
  7520 ;;		_getLights_Allow_Condition
  7521 ;;		_setLights
  7522 ;; This function is called by:
  7523 ;;		_Lights_Main
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           
  7528                           ;psect for function _setLights_Main
  7529  0C6D                     _setLights_Main:	
  7530                           
  7531                           ;incstack = 0
  7532                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7533                           ;setLights_Main@lights stored from wreg
  7534  0C6D  1283               	bcf	3,5	;RP0=0, select bank0
  7535  0C6E  1303               	bcf	3,6	;RP1=0, select bank0
  7536  0C6F  00DC               	movwf	setLights_Main@lights
  7537                           
  7538                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  7539  0C70  085C               	movf	setLights_Main@lights,w
  7540  0C71  158A  2242  158A   	fcall	_LightsPointSelect
  7541                           
  7542                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  7543  0C74  0878               	movf	_Lights,w
  7544  0C75  0084               	movwf	4
  7545  0C76  1383               	bcf	3,7	;select IRP bank0
  7546  0C77  1880               	btfsc	0,1
  7547  0C78  0008               	return
  7548                           
  7549                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  7550  0C79  0878               	movf	_Lights,w
  7551  0C7A  0084               	movwf	4
  7552  0C7B  1D80               	btfss	0,3
  7553  0C7C  0008               	return
  7554                           
  7555                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  7556  0C7D  1283               	bcf	3,5	;RP0=0, select bank0
  7557  0C7E  1303               	bcf	3,6	;RP1=0, select bank0
  7558  0C7F  085C               	movf	setLights_Main@lights,w
  7559  0C80  158A  22D0  158A   	fcall	_getLights_Allow_Condition
  7560  0C83  3800               	iorlw	0
  7561  0C84  1D03               	skipz
  7562  0C85  0008               	return
  7563                           
  7564                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  7565  0C86  0878               	movf	_Lights,w
  7566  0C87  0084               	movwf	4
  7567  0C88  1383               	bcf	3,7	;select IRP bank0
  7568  0C89  1180               	bcf	0,3
  7569                           
  7570                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  7571  0C8A  0878               	movf	_Lights,w
  7572  0C8B  0084               	movwf	4
  7573  0C8C  1E00               	btfss	0,4
  7574  0C8D  2C96               	goto	l5513
  7575                           
  7576                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  7577  0C8E  1283               	bcf	3,5	;RP0=0, select bank0
  7578  0C8F  1303               	bcf	3,6	;RP1=0, select bank0
  7579  0C90  01D9               	clrf	setLights@status
  7580  0C91  0AD9               	incf	setLights@status,f
  7581  0C92  085C               	movf	setLights_Main@lights,w
  7582  0C93  118A  2719         	fcall	_setLights
  7583                           
  7584                           ;TriacRelay_B1.c: 99: } else {
  7585  0C95  0008               	return
  7586  0C96                     l5513:	
  7587                           
  7588                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  7589  0C96  1283               	bcf	3,5	;RP0=0, select bank0
  7590  0C97  1303               	bcf	3,6	;RP1=0, select bank0
  7591  0C98  01D9               	clrf	setLights@status
  7592  0C99  085C               	movf	setLights_Main@lights,w
  7593  0C9A  118A  2719         	fcall	_setLights
  7594  0C9C  0008               	return
  7595  0C9D                     __end_of_setLights_Main:	
  7596                           
  7597                           	psect	text45
  7598  0719                     __ptext45:	
  7599 ;; *************** function _setLights *****************
  7600 ;; Defined at:
  7601 ;;		line 108 in file "../src/TriacRelay_B1.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;  lights          1    wreg     unsigned char 
  7604 ;;  status          1    2[BANK0 ] unsigned char 
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;  lights          1    4[BANK0 ] unsigned char 
  7607 ;; Return value:  Size  Location     Type
  7608 ;;		None               void
  7609 ;; Registers used:
  7610 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7616 ;;      Params:         0       1       0       0
  7617 ;;      Locals:         0       1       0       0
  7618 ;;      Temps:          0       1       0       0
  7619 ;;      Totals:         0       3       0       0
  7620 ;;Total ram usage:        3 bytes
  7621 ;; Hardware stack levels used:    1
  7622 ;; Hardware stack levels required when called:    4
  7623 ;; This function calls:
  7624 ;;		_setLED
  7625 ;;		_setLights_Line
  7626 ;; This function is called by:
  7627 ;;		_setLights_Main
  7628 ;; This function uses a non-reentrant model
  7629 ;;
  7630                           
  7631                           
  7632                           ;psect for function _setLights
  7633  0719                     _setLights:	
  7634                           
  7635                           ;incstack = 0
  7636                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7637                           ;setLights@lights stored from wreg
  7638  0719  1283               	bcf	3,5	;RP0=0, select bank0
  7639  071A  1303               	bcf	3,6	;RP1=0, select bank0
  7640  071B  00DB               	movwf	setLights@lights
  7641                           
  7642                           ;TriacRelay_B1.c: 116: if (status == 1) {
  7643  071C  0859               	movf	setLights@status,w
  7644  071D  3A01               	xorlw	1
  7645  071E  1D03               	skipz
  7646  071F  2F62               	goto	l5281
  7647                           
  7648                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  7649  0720  085B               	movf	setLights@lights,w
  7650  0721  3A02               	xorlw	2
  7651  0722  1D03               	skipz
  7652  0723  2F31               	goto	l5253
  7653                           
  7654                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  7655  0724  01D7               	clrf	setLED@command
  7656  0725  3001               	movlw	1
  7657  0726  158A  2659  118A   	fcall	_setLED
  7658                           
  7659                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  7660  0729  1283               	bcf	3,5	;RP0=0, select bank0
  7661  072A  1303               	bcf	3,6	;RP1=0, select bank0
  7662  072B  01D7               	clrf	setLED@command
  7663  072C  0AD7               	incf	setLED@command,f
  7664  072D  3002               	movlw	2
  7665  072E  158A  2659  118A   	fcall	_setLED
  7666  0731                     l5253:	
  7667                           
  7668                           ;TriacRelay_B1.c: 121: }
  7669                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  7670  0731  0878               	movf	_Lights,w
  7671  0732  0084               	movwf	4
  7672  0733  1383               	bcf	3,7	;select IRP bank0
  7673  0734  1900               	btfsc	0,2
  7674  0735  2F5B               	goto	l5277
  7675                           
  7676                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7677  0736  0878               	movf	_Lights,w
  7678  0737  0084               	movwf	4
  7679  0738  1500               	bsf	0,2
  7680                           
  7681                           ;TriacRelay_B1.c: 130: if (lights == 1) {
  7682  0739  1283               	bcf	3,5	;RP0=0, select bank0
  7683  073A  1303               	bcf	3,6	;RP1=0, select bank0
  7684  073B  085B               	movf	setLights@lights,w
  7685  073C  3A01               	xorlw	1
  7686  073D  1D03               	skipz
  7687  073E  2F41               	goto	l5267
  7688                           
  7689                           ;TriacRelay_B1.c: 131: RA7 = 1;
  7690  073F  1785               	bsf	5,7	;volatile
  7691  0740  2F46               	goto	L15
  7692  0741                     l5267:	
  7693                           ;TriacRelay_B1.c: 136: }
  7694                           
  7695                           ;TriacRelay_B1.c: 135: Lights->GO = 1;
  7696                           
  7697                           ;TriacRelay_B1.c: 134: Lights->Time = 0;
  7698                           
  7699                           ;TriacRelay_B1.c: 133: Lights->TriacValue = 140;
  7700                           
  7701                           ;TriacRelay_B1.c: 132: Lights->RelayValue = 100;
  7702                           
  7703                           
  7704                           ;TriacRelay_B1.c: 139: else if (lights == 2) {
  7705  0741  085B               	movf	setLights@lights,w
  7706  0742  3A02               	xorlw	2
  7707  0743  1D03               	skipz
  7708  0744  2F5B               	goto	l5277
  7709                           
  7710                           ;TriacRelay_B1.c: 141: RC4 = 1;
  7711  0745  1607               	bsf	7,4	;volatile
  7712  0746                     L15:	
  7713                           
  7714                           ;TriacRelay_B1.c: 142: Lights->RelayValue = 100;
  7715  0746  3064               	movlw	100
  7716  0747  00DA               	movwf	??_setLights
  7717  0748  0878               	movf	_Lights,w
  7718  0749  3E04               	addlw	4
  7719  074A  0084               	movwf	4
  7720  074B  085A               	movf	??_setLights,w
  7721  074C  0080               	movwf	0
  7722                           
  7723                           ;TriacRelay_B1.c: 143: Lights->TriacValue = 140;
  7724  074D  308C               	movlw	140
  7725  074E  00DA               	movwf	??_setLights
  7726  074F  0878               	movf	_Lights,w
  7727  0750  3E03               	addlw	3
  7728  0751  0084               	movwf	4
  7729  0752  085A               	movf	??_setLights,w
  7730  0753  0080               	movwf	0
  7731                           
  7732                           ;TriacRelay_B1.c: 144: Lights->Time = 0;
  7733  0754  0878               	movf	_Lights,w
  7734  0755  3E02               	addlw	2
  7735  0756  0084               	movwf	4
  7736  0757  0180               	clrf	0
  7737                           
  7738                           ;TriacRelay_B1.c: 145: Lights->GO = 1;
  7739  0758  0878               	movf	_Lights,w
  7740  0759  0084               	movwf	4
  7741  075A  1480               	bsf	0,1
  7742  075B                     l5277:	
  7743                           
  7744                           ;TriacRelay_B1.c: 151: }
  7745                           ;TriacRelay_B1.c: 162: }
  7746                           ;TriacRelay_B1.c: 164: Light.Load_Status = 1;
  7747  075B  14F7               	bsf	_Light,1
  7748                           
  7749                           ;TriacRelay_B1.c: 165: setLights_Line(lights);
  7750  075C  1283               	bcf	3,5	;RP0=0, select bank0
  7751  075D  1303               	bcf	3,6	;RP1=0, select bank0
  7752  075E  085B               	movf	setLights@lights,w
  7753  075F  158A  22E7         	fcall	_setLights_Line
  7754                           
  7755                           ;TriacRelay_B1.c: 167: } else {
  7756  0761  0008               	return
  7757  0762                     l5281:	
  7758                           
  7759                           ;TriacRelay_B1.c: 170: if (lights == 2) {
  7760  0762  1283               	bcf	3,5	;RP0=0, select bank0
  7761  0763  1303               	bcf	3,6	;RP1=0, select bank0
  7762  0764  085B               	movf	setLights@lights,w
  7763  0765  3A02               	xorlw	2
  7764  0766  1D03               	skipz
  7765  0767  2F75               	goto	l5285
  7766                           
  7767                           ;TriacRelay_B1.c: 171: setLED(1, 1);
  7768  0768  01D7               	clrf	setLED@command
  7769  0769  0AD7               	incf	setLED@command,f
  7770  076A  3001               	movlw	1
  7771  076B  158A  2659  118A   	fcall	_setLED
  7772                           
  7773                           ;TriacRelay_B1.c: 172: setLED(2, 0);
  7774  076E  1283               	bcf	3,5	;RP0=0, select bank0
  7775  076F  1303               	bcf	3,6	;RP1=0, select bank0
  7776  0770  01D7               	clrf	setLED@command
  7777  0771  3002               	movlw	2
  7778  0772  158A  2659  118A   	fcall	_setLED
  7779  0775                     l5285:	
  7780                           
  7781                           ;TriacRelay_B1.c: 173: }
  7782                           ;TriacRelay_B1.c: 175: if (Lights->Status == 1) {
  7783  0775  0878               	movf	_Lights,w
  7784  0776  0084               	movwf	4
  7785  0777  1383               	bcf	3,7	;select IRP bank0
  7786  0778  1D00               	btfss	0,2
  7787  0779  2F9F               	goto	l5309
  7788                           
  7789                           ;TriacRelay_B1.c: 176: Lights->Status = 0;
  7790  077A  0878               	movf	_Lights,w
  7791  077B  0084               	movwf	4
  7792  077C  1100               	bcf	0,2
  7793                           
  7794                           ;TriacRelay_B1.c: 178: if (lights == 1) {
  7795  077D  1283               	bcf	3,5	;RP0=0, select bank0
  7796  077E  1303               	bcf	3,6	;RP1=0, select bank0
  7797  077F  085B               	movf	setLights@lights,w
  7798  0780  3A01               	xorlw	1
  7799  0781  1D03               	skipz
  7800  0782  2F85               	goto	l5299
  7801                           
  7802                           ;TriacRelay_B1.c: 179: RA7 = 1;
  7803  0783  1785               	bsf	5,7	;volatile
  7804  0784  2F8A               	goto	L16
  7805  0785                     l5299:	
  7806                           ;TriacRelay_B1.c: 184: }
  7807                           
  7808                           ;TriacRelay_B1.c: 183: Lights->GO = 1;
  7809                           
  7810                           ;TriacRelay_B1.c: 182: Lights->Time = 0;
  7811                           
  7812                           ;TriacRelay_B1.c: 181: Lights->TriacValue = 80;
  7813                           
  7814                           ;TriacRelay_B1.c: 180: Lights->RelayValue = 40;
  7815                           
  7816                           
  7817                           ;TriacRelay_B1.c: 187: else if (lights == 2) {
  7818  0785  085B               	movf	setLights@lights,w
  7819  0786  3A02               	xorlw	2
  7820  0787  1D03               	skipz
  7821  0788  2F9F               	goto	l5309
  7822                           
  7823                           ;TriacRelay_B1.c: 189: RC4 = 1;
  7824  0789  1607               	bsf	7,4	;volatile
  7825  078A                     L16:	
  7826                           
  7827                           ;TriacRelay_B1.c: 190: Lights->RelayValue = 40;
  7828  078A  3028               	movlw	40
  7829  078B  00DA               	movwf	??_setLights
  7830  078C  0878               	movf	_Lights,w
  7831  078D  3E04               	addlw	4
  7832  078E  0084               	movwf	4
  7833  078F  085A               	movf	??_setLights,w
  7834  0790  0080               	movwf	0
  7835                           
  7836                           ;TriacRelay_B1.c: 191: Lights->TriacValue = 80;
  7837  0791  3050               	movlw	80
  7838  0792  00DA               	movwf	??_setLights
  7839  0793  0878               	movf	_Lights,w
  7840  0794  3E03               	addlw	3
  7841  0795  0084               	movwf	4
  7842  0796  085A               	movf	??_setLights,w
  7843  0797  0080               	movwf	0
  7844                           
  7845                           ;TriacRelay_B1.c: 192: Lights->Time = 0;
  7846  0798  0878               	movf	_Lights,w
  7847  0799  3E02               	addlw	2
  7848  079A  0084               	movwf	4
  7849  079B  0180               	clrf	0
  7850                           
  7851                           ;TriacRelay_B1.c: 193: Lights->GO = 1;
  7852  079C  0878               	movf	_Lights,w
  7853  079D  0084               	movwf	4
  7854  079E  1480               	bsf	0,1
  7855  079F                     l5309:	
  7856                           
  7857                           ;TriacRelay_B1.c: 199: }
  7858                           ;TriacRelay_B1.c: 211: }
  7859                           ;TriacRelay_B1.c: 213: Light.Load_Status = 0;
  7860  079F  10F7               	bcf	_Light,1
  7861                           
  7862                           ;TriacRelay_B1.c: 214: setLights_Line(0);
  7863  07A0  3000               	movlw	0
  7864  07A1  158A  22E7         	fcall	_setLights_Line
  7865  07A3  0008               	return
  7866  07A4                     __end_of_setLights:	
  7867                           
  7868                           	psect	text46
  7869  0AE7                     __ptext46:	
  7870 ;; *************** function _setLights_Line *****************
  7871 ;; Defined at:
  7872 ;;		line 285 in file "../src/TriacRelay_B1.c"
  7873 ;; Parameters:    Size  Location     Type
  7874 ;;  lights          1    wreg     unsigned char 
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;  lights          1    4[COMMON] unsigned char 
  7877 ;; Return value:  Size  Location     Type
  7878 ;;		None               void
  7879 ;; Registers used:
  7880 ;;		wreg
  7881 ;; Tracked objects:
  7882 ;;		On entry : 0/0
  7883 ;;		On exit  : 0/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7886 ;;      Params:         0       0       0       0
  7887 ;;      Locals:         1       0       0       0
  7888 ;;      Temps:          0       0       0       0
  7889 ;;      Totals:         1       0       0       0
  7890 ;;Total ram usage:        1 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:    2
  7893 ;; This function calls:
  7894 ;;		Nothing
  7895 ;; This function is called by:
  7896 ;;		_setLights
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           
  7901                           ;psect for function _setLights_Line
  7902  0AE7                     _setLights_Line:	
  7903                           
  7904                           ;incstack = 0
  7905                           ; Regs used in _setLights_Line: [wreg]
  7906                           ;setLights_Line@lights stored from wreg
  7907  0AE7  00F4               	movwf	setLights_Line@lights
  7908                           
  7909                           ;TriacRelay_B1.c: 286: Light.LoadGO = 1;
  7910  0AE8  1477               	bsf	_Light,0
  7911                           
  7912                           ;TriacRelay_B1.c: 288: Lights1.Line = 0;
  7913  0AE9  1283               	bcf	3,5	;RP0=0, select bank0
  7914  0AEA  1303               	bcf	3,6	;RP1=0, select bank0
  7915  0AEB  104A               	bcf	_Lights1+1,0
  7916                           
  7917                           ;TriacRelay_B1.c: 289: if (lights == 1 && lights != 0) {
  7918  0AEC  0874               	movf	setLights_Line@lights,w
  7919  0AED  3A01               	xorlw	1
  7920  0AEE  1D03               	skipz
  7921  0AEF  2AF4               	goto	l1591
  7922  0AF0  0874               	movf	setLights_Line@lights,w
  7923  0AF1  1903               	btfsc	3,2
  7924  0AF2  2AF4               	goto	l1591
  7925                           
  7926                           ;TriacRelay_B1.c: 290: Lights1.Line = 1;
  7927  0AF3  144A               	bsf	_Lights1+1,0
  7928  0AF4                     l1591:	
  7929                           
  7930                           ;TriacRelay_B1.c: 291: }
  7931                           ;TriacRelay_B1.c: 294: Lights2.Line = 0;
  7932  0AF4  104F               	bcf	_Lights2+1,0
  7933                           
  7934                           ;TriacRelay_B1.c: 295: if (lights == 2 && lights != 0) {
  7935  0AF5  0874               	movf	setLights_Line@lights,w
  7936  0AF6  3A02               	xorlw	2
  7937  0AF7  1D03               	skipz
  7938  0AF8  0008               	return
  7939  0AF9  0874               	movf	setLights_Line@lights,w
  7940  0AFA  1903               	btfsc	3,2
  7941  0AFB  0008               	return
  7942                           
  7943                           ;TriacRelay_B1.c: 296: Lights2.Line = 1;
  7944  0AFC  144F               	bsf	_Lights2+1,0
  7945  0AFD  0008               	return
  7946  0AFE                     __end_of_setLights_Line:	
  7947                           
  7948                           	psect	text47
  7949  0AD0                     __ptext47:	
  7950 ;; *************** function _getLights_Allow_Condition *****************
  7951 ;; Defined at:
  7952 ;;		line 367 in file "../src/TriacRelay_B1.c"
  7953 ;; Parameters:    Size  Location     Type
  7954 ;;  lights          1    wreg     unsigned char 
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;  lights          1    0[COMMON] unsigned char 
  7957 ;;  allow           1    0[BANK0 ] unsigned char 
  7958 ;; Return value:  Size  Location     Type
  7959 ;;                  1    wreg      unsigned char 
  7960 ;; Registers used:
  7961 ;;		wreg, status,2, pclath, cstack
  7962 ;; Tracked objects:
  7963 ;;		On entry : 0/0
  7964 ;;		On exit  : 0/0
  7965 ;;		Unchanged: 0/0
  7966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7967 ;;      Params:         0       0       0       0
  7968 ;;      Locals:         0       2       0       0
  7969 ;;      Temps:          1       0       0       0
  7970 ;;      Totals:         1       2       0       0
  7971 ;;Total ram usage:        3 bytes
  7972 ;; Hardware stack levels used:    1
  7973 ;; Hardware stack levels required when called:    3
  7974 ;; This function calls:
  7975 ;;		_getLoad_OK
  7976 ;; This function is called by:
  7977 ;;		_setLights_Main
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           
  7982                           ;psect for function _getLights_Allow_Condition
  7983  0AD0                     _getLights_Allow_Condition:	
  7984                           
  7985                           ;TriacRelay_B1.c: 368: char allow = 0;
  7986                           
  7987                           ;incstack = 0
  7988                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7989  0AD0  1283               	bcf	3,5	;RP0=0, select bank0
  7990  0AD1  1303               	bcf	3,6	;RP1=0, select bank0
  7991  0AD2  01D7               	clrf	getLights_Allow_Condition@allow
  7992                           
  7993                           ;TriacRelay_B1.c: 371: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7994  0AD3  01D8               	clrf	_getLights_Allow_Condition$4827
  7995  0AD4  0AD8               	incf	_getLights_Allow_Condition$4827,f
  7996  0AD5  158A  216C  158A   	fcall	_getLoad_OK
  7997  0AD8  3800               	iorlw	0
  7998  0AD9  1903               	btfsc	3,2
  7999  0ADA  1877               	btfsc	_Light,0
  8000  0ADB  2ADF               	goto	l5241
  8001  0ADC  1283               	bcf	3,5	;RP0=0, select bank0
  8002  0ADD  1303               	bcf	3,6	;RP1=0, select bank0
  8003  0ADE  01D8               	clrf	_getLights_Allow_Condition$4827
  8004  0ADF                     l5241:	
  8005  0ADF  1283               	bcf	3,5	;RP0=0, select bank0
  8006  0AE0  1303               	bcf	3,6	;RP1=0, select bank0
  8007  0AE1  0858               	movf	_getLights_Allow_Condition$4827,w
  8008  0AE2  00F5               	movwf	??_getLights_Allow_Condition
  8009  0AE3  0875               	movf	??_getLights_Allow_Condition,w
  8010  0AE4  00D7               	movwf	getLights_Allow_Condition@allow
  8011                           
  8012                           ;TriacRelay_B1.c: 396: return allow;
  8013  0AE5  0857               	movf	getLights_Allow_Condition@allow,w
  8014  0AE6  0008               	return
  8015  0AE7                     __end_of_getLights_Allow_Condition:	
  8016                           
  8017                           	psect	text48
  8018  096C                     __ptext48:	
  8019 ;; *************** function _getLoad_OK *****************
  8020 ;; Defined at:
  8021 ;;		line 272 in file "../src/OverLoad_B1.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;		None
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;  ok              1    4[COMMON] unsigned char 
  8026 ;; Return value:  Size  Location     Type
  8027 ;;                  1    wreg      unsigned char 
  8028 ;; Registers used:
  8029 ;;		wreg, status,2
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8035 ;;      Params:         0       0       0       0
  8036 ;;      Locals:         1       0       0       0
  8037 ;;      Temps:          0       0       0       0
  8038 ;;      Totals:         1       0       0       0
  8039 ;;Total ram usage:        1 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; Hardware stack levels required when called:    2
  8042 ;; This function calls:
  8043 ;;		Nothing
  8044 ;; This function is called by:
  8045 ;;		_Lights_Main
  8046 ;;		_getLights_Allow_Condition
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           
  8051                           ;psect for function _getLoad_OK
  8052  096C                     _getLoad_OK:	
  8053                           
  8054                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
  8055                           
  8056                           ;incstack = 0
  8057                           ; Regs used in _getLoad_OK: [wreg+status,2]
  8058  096C  3000               	movlw	0
  8059  096D  1683               	bsf	3,5	;RP0=1, select bank1
  8060  096E  1303               	bcf	3,6	;RP1=0, select bank1
  8061  096F  1BCA               	btfsc	_Load^(0+128),7
  8062  0970  3001               	movlw	1
  8063  0971  00F4               	movwf	getLoad_OK@ok
  8064                           
  8065                           ;OverLoad_B1.c: 274: return ok;
  8066  0972  0874               	movf	getLoad_OK@ok,w
  8067  0973  0008               	return
  8068  0974                     __end_of_getLoad_OK:	
  8069                           
  8070                           	psect	text49
  8071  067F                     __ptext49:	
  8072 ;; *************** function _Lights_Control *****************
  8073 ;; Defined at:
  8074 ;;		line 220 in file "../src/TriacRelay_B1.c"
  8075 ;; Parameters:    Size  Location     Type
  8076 ;;  lights          1    wreg     unsigned char 
  8077 ;; Auto vars:     Size  Location     Type
  8078 ;;  lights          1   10[BANK0 ] unsigned char 
  8079 ;; Return value:  Size  Location     Type
  8080 ;;		None               void
  8081 ;; Registers used:
  8082 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8083 ;; Tracked objects:
  8084 ;;		On entry : 0/0
  8085 ;;		On exit  : 0/0
  8086 ;;		Unchanged: 0/0
  8087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8088 ;;      Params:         0       0       0       0
  8089 ;;      Locals:         0       1       0       0
  8090 ;;      Temps:          0       2       0       0
  8091 ;;      Totals:         0       3       0       0
  8092 ;;Total ram usage:        3 bytes
  8093 ;; Hardware stack levels used:    1
  8094 ;; Hardware stack levels required when called:    3
  8095 ;; This function calls:
  8096 ;;		_LightsPointSelect
  8097 ;;		___awdiv
  8098 ;; This function is called by:
  8099 ;;		_Lights_Main
  8100 ;; This function uses a non-reentrant model
  8101 ;;
  8102                           
  8103                           
  8104                           ;psect for function _Lights_Control
  8105  067F                     _Lights_Control:	
  8106                           
  8107                           ;incstack = 0
  8108                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8109                           ;Lights_Control@lights stored from wreg
  8110  067F  1283               	bcf	3,5	;RP0=0, select bank0
  8111  0680  1303               	bcf	3,6	;RP1=0, select bank0
  8112  0681  00E1               	movwf	Lights_Control@lights
  8113                           
  8114                           ;TriacRelay_B1.c: 221: LightsPointSelect(lights);
  8115  0682  0861               	movf	Lights_Control@lights,w
  8116  0683  158A  2242  118A   	fcall	_LightsPointSelect
  8117                           
  8118                           ;TriacRelay_B1.c: 222: if (Lights->GO == 1) {
  8119  0686  0878               	movf	_Lights,w
  8120  0687  0084               	movwf	4
  8121  0688  1383               	bcf	3,7	;select IRP bank0
  8122  0689  1C80               	btfss	0,1
  8123  068A  0008               	return
  8124                           
  8125                           ;TriacRelay_B1.c: 223: Lights->Time++;
  8126  068B  3001               	movlw	1
  8127  068C  1283               	bcf	3,5	;RP0=0, select bank0
  8128  068D  1303               	bcf	3,6	;RP1=0, select bank0
  8129  068E  00DF               	movwf	??_Lights_Control
  8130  068F  0878               	movf	_Lights,w
  8131  0690  3E02               	addlw	2
  8132  0691  0084               	movwf	4
  8133  0692  085F               	movf	??_Lights_Control,w
  8134  0693  0780               	addwf	0,f
  8135                           
  8136                           ;TriacRelay_B1.c: 224: if (Lights->RelaySet == 0) {
  8137  0694  0878               	movf	_Lights,w
  8138  0695  0084               	movwf	4
  8139  0696  1B80               	btfsc	0,7
  8140  0697  2EDF               	goto	l5535
  8141                           
  8142                           ;TriacRelay_B1.c: 225: if (Lights->Time >= (Lights->RelayValue / 20)) {
  8143  0698  3014               	movlw	20
  8144  0699  00D7               	movwf	___awdiv@divisor
  8145  069A  3000               	movlw	0
  8146  069B  00D8               	movwf	___awdiv@divisor+1
  8147  069C  0878               	movf	_Lights,w
  8148  069D  3E04               	addlw	4
  8149  069E  0084               	movwf	4
  8150  069F  0800               	movf	0,w
  8151  06A0  00DF               	movwf	??_Lights_Control
  8152  06A1  01E0               	clrf	??_Lights_Control+1
  8153  06A2  085F               	movf	??_Lights_Control,w
  8154  06A3  00D9               	movwf	___awdiv@dividend
  8155  06A4  0860               	movf	??_Lights_Control+1,w
  8156  06A5  00DA               	movwf	___awdiv@dividend+1
  8157  06A6  158A  26A7  118A   	fcall	___awdiv
  8158  06A9  0878               	movf	_Lights,w
  8159  06AA  3E02               	addlw	2
  8160  06AB  0084               	movwf	4
  8161  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  8162  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  8163  06AE  0858               	movf	?___awdiv+1,w
  8164  06AF  3A80               	xorlw	128
  8165  06B0  3C80               	sublw	128
  8166  06B1  1D03               	skipz
  8167  06B2  2EB6               	goto	u6435
  8168  06B3  0857               	movf	?___awdiv,w
  8169  06B4  1383               	bcf	3,7	;select IRP bank0
  8170  06B5  0200               	subwf	0,w
  8171  06B6                     u6435:	
  8172  06B6  1C03               	skipc
  8173  06B7  0008               	return
  8174                           
  8175                           ;TriacRelay_B1.c: 226: Lights->RelaySet = 1;
  8176  06B8  0878               	movf	_Lights,w
  8177  06B9  0084               	movwf	4
  8178  06BA  1383               	bcf	3,7	;select IRP bank0
  8179  06BB  1780               	bsf	0,7
  8180                           
  8181                           ;TriacRelay_B1.c: 228: if (lights == 1) {
  8182  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  8183  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  8184  06BE  0861               	movf	Lights_Control@lights,w
  8185  06BF  3A01               	xorlw	1
  8186  06C0  1D03               	skipz
  8187  06C1  2ECE               	goto	l5531
  8188                           
  8189                           ;TriacRelay_B1.c: 229: RA6 = Lights->Status == 1 ? 1 : 0;
  8190  06C2  0878               	movf	_Lights,w
  8191  06C3  0084               	movwf	4
  8192  06C4  1D00               	btfss	0,2
  8193  06C5  2ECA               	goto	u6450
  8194  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  8195  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  8196  06C8  1705               	bsf	5,6	;volatile
  8197  06C9  0008               	return
  8198  06CA                     u6450:	
  8199  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  8200  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  8201  06CC  1305               	bcf	5,6	;volatile
  8202                           
  8203                           ;TriacRelay_B1.c: 230: }
  8204  06CD  0008               	return
  8205  06CE                     l5531:	
  8206                           
  8207                           ;TriacRelay_B1.c: 233: else if (lights == 2) {
  8208  06CE  0861               	movf	Lights_Control@lights,w
  8209  06CF  3A02               	xorlw	2
  8210  06D0  1D03               	skipz
  8211  06D1  0008               	return
  8212                           
  8213                           ;TriacRelay_B1.c: 234: RC5 = Lights->Status == 1 ? 1 : 0;
  8214  06D2  0878               	movf	_Lights,w
  8215  06D3  0084               	movwf	4
  8216  06D4  1383               	bcf	3,7	;select IRP bank0
  8217  06D5  1D00               	btfss	0,2
  8218  06D6  2EDB               	goto	u6480
  8219  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  8220  06D8  1303               	bcf	3,6	;RP1=0, select bank0
  8221  06D9  1687               	bsf	7,5	;volatile
  8222  06DA  0008               	return
  8223  06DB                     u6480:	
  8224  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  8225  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  8226  06DD  1287               	bcf	7,5	;volatile
  8227                           
  8228                           ;TriacRelay_B1.c: 235: }
  8229                           ;TriacRelay_B1.c: 242: }
  8230                           ;TriacRelay_B1.c: 243: } else {
  8231  06DE  0008               	return
  8232  06DF                     l5535:	
  8233                           
  8234                           ;TriacRelay_B1.c: 244: if (Lights->Time >= (Lights->TriacValue / 20)) {
  8235  06DF  3014               	movlw	20
  8236  06E0  00D7               	movwf	___awdiv@divisor
  8237  06E1  3000               	movlw	0
  8238  06E2  00D8               	movwf	___awdiv@divisor+1
  8239  06E3  0878               	movf	_Lights,w
  8240  06E4  3E03               	addlw	3
  8241  06E5  0084               	movwf	4
  8242  06E6  1383               	bcf	3,7	;select IRP bank0
  8243  06E7  0800               	movf	0,w
  8244  06E8  00DF               	movwf	??_Lights_Control
  8245  06E9  01E0               	clrf	??_Lights_Control+1
  8246  06EA  085F               	movf	??_Lights_Control,w
  8247  06EB  00D9               	movwf	___awdiv@dividend
  8248  06EC  0860               	movf	??_Lights_Control+1,w
  8249  06ED  00DA               	movwf	___awdiv@dividend+1
  8250  06EE  158A  26A7  118A   	fcall	___awdiv
  8251  06F1  0878               	movf	_Lights,w
  8252  06F2  3E02               	addlw	2
  8253  06F3  0084               	movwf	4
  8254  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  8255  06F5  1303               	bcf	3,6	;RP1=0, select bank0
  8256  06F6  0858               	movf	?___awdiv+1,w
  8257  06F7  3A80               	xorlw	128
  8258  06F8  3C80               	sublw	128
  8259  06F9  1D03               	skipz
  8260  06FA  2EFE               	goto	u6505
  8261  06FB  0857               	movf	?___awdiv,w
  8262  06FC  1383               	bcf	3,7	;select IRP bank0
  8263  06FD  0200               	subwf	0,w
  8264  06FE                     u6505:	
  8265  06FE  1C03               	skipc
  8266  06FF  0008               	return
  8267                           
  8268                           ;TriacRelay_B1.c: 245: Lights->Time = 0;
  8269  0700  0878               	movf	_Lights,w
  8270  0701  3E02               	addlw	2
  8271  0702  0084               	movwf	4
  8272  0703  1383               	bcf	3,7	;select IRP bank0
  8273  0704  0180               	clrf	0
  8274                           
  8275                           ;TriacRelay_B1.c: 246: Lights->GO = 0;
  8276  0705  0878               	movf	_Lights,w
  8277  0706  0084               	movwf	4
  8278  0707  1080               	bcf	0,1
  8279                           
  8280                           ;TriacRelay_B1.c: 247: Lights->RelaySet = 0;
  8281  0708  0878               	movf	_Lights,w
  8282  0709  0084               	movwf	4
  8283  070A  1380               	bcf	0,7
  8284                           
  8285                           ;TriacRelay_B1.c: 250: if (lights == 1) {
  8286  070B  1283               	bcf	3,5	;RP0=0, select bank0
  8287  070C  1303               	bcf	3,6	;RP1=0, select bank0
  8288  070D  0861               	movf	Lights_Control@lights,w
  8289  070E  3A01               	xorlw	1
  8290  070F  1D03               	skipz
  8291  0710  2F13               	goto	l5547
  8292                           
  8293                           ;TriacRelay_B1.c: 251: RA7 = 0;
  8294  0711  1385               	bcf	5,7	;volatile
  8295                           
  8296                           ;TriacRelay_B1.c: 252: }
  8297  0712  0008               	return
  8298  0713                     l5547:	
  8299                           
  8300                           ;TriacRelay_B1.c: 255: else if (lights == 2) {
  8301  0713  0861               	movf	Lights_Control@lights,w
  8302  0714  3A02               	xorlw	2
  8303  0715  1D03               	skipz
  8304  0716  0008               	return
  8305                           
  8306                           ;TriacRelay_B1.c: 256: RC4 = 0;
  8307  0717  1207               	bcf	7,4	;volatile
  8308  0718  0008               	return
  8309  0719                     __end_of_Lights_Control:	
  8310                           
  8311                           	psect	text50
  8312  0964                     __ptext50:	
  8313 ;; *************** function _Lights_Initialization *****************
  8314 ;; Defined at:
  8315 ;;		line 32 in file "../src/TriacRelay_B1.c"
  8316 ;; Parameters:    Size  Location     Type
  8317 ;;		None
  8318 ;; Auto vars:     Size  Location     Type
  8319 ;;		None
  8320 ;; Return value:  Size  Location     Type
  8321 ;;		None               void
  8322 ;; Registers used:
  8323 ;;		wreg, status,2, status,0, pclath, cstack
  8324 ;; Tracked objects:
  8325 ;;		On entry : 0/0
  8326 ;;		On exit  : 0/0
  8327 ;;		Unchanged: 0/0
  8328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8329 ;;      Params:         0       0       0       0
  8330 ;;      Locals:         0       0       0       0
  8331 ;;      Temps:          0       0       0       0
  8332 ;;      Totals:         0       0       0       0
  8333 ;;Total ram usage:        0 bytes
  8334 ;; Hardware stack levels used:    1
  8335 ;; Hardware stack levels required when called:    4
  8336 ;; This function calls:
  8337 ;;		_setLights_Initialization
  8338 ;; This function is called by:
  8339 ;;		_main
  8340 ;; This function uses a non-reentrant model
  8341 ;;
  8342                           
  8343                           
  8344                           ;psect for function _Lights_Initialization
  8345  0964                     _Lights_Initialization:	
  8346                           
  8347                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  8348                           
  8349                           ;incstack = 0
  8350                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8351  0964  3001               	movlw	1
  8352  0965  158A  2156  158A   	fcall	_setLights_Initialization
  8353                           
  8354                           ;TriacRelay_B1.c: 38: setLights_Initialization(2);
  8355  0968  3002               	movlw	2
  8356  0969  158A  2156         	fcall	_setLights_Initialization
  8357  096B  0008               	return
  8358  096C                     __end_of_Lights_Initialization:	
  8359                           
  8360                           	psect	text51
  8361  0956                     __ptext51:	
  8362 ;; *************** function _setLights_Initialization *****************
  8363 ;; Defined at:
  8364 ;;		line 47 in file "../src/TriacRelay_B1.c"
  8365 ;; Parameters:    Size  Location     Type
  8366 ;;  lights          1    wreg     unsigned char 
  8367 ;; Auto vars:     Size  Location     Type
  8368 ;;  lights          1    0[BANK0 ] unsigned char 
  8369 ;; Return value:  Size  Location     Type
  8370 ;;		None               void
  8371 ;; Registers used:
  8372 ;;		wreg, status,2, status,0, pclath, cstack
  8373 ;; Tracked objects:
  8374 ;;		On entry : 0/0
  8375 ;;		On exit  : 0/0
  8376 ;;		Unchanged: 0/0
  8377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8378 ;;      Params:         0       0       0       0
  8379 ;;      Locals:         0       1       0       0
  8380 ;;      Temps:          0       0       0       0
  8381 ;;      Totals:         0       1       0       0
  8382 ;;Total ram usage:        1 bytes
  8383 ;; Hardware stack levels used:    1
  8384 ;; Hardware stack levels required when called:    3
  8385 ;; This function calls:
  8386 ;;		_LightsPointSelect
  8387 ;; This function is called by:
  8388 ;;		_Lights_Initialization
  8389 ;; This function uses a non-reentrant model
  8390 ;;
  8391                           
  8392                           
  8393                           ;psect for function _setLights_Initialization
  8394  0956                     _setLights_Initialization:	
  8395                           
  8396                           ;incstack = 0
  8397                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8398                           ;setLights_Initialization@lights stored from wreg
  8399  0956  1283               	bcf	3,5	;RP0=0, select bank0
  8400  0957  1303               	bcf	3,6	;RP1=0, select bank0
  8401  0958  00D7               	movwf	setLights_Initialization@lights
  8402                           
  8403                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  8404  0959  0857               	movf	setLights_Initialization@lights,w
  8405  095A  158A  2242         	fcall	_LightsPointSelect
  8406  095C  0008               	return
  8407  095D                     __end_of_setLights_Initialization:	
  8408                           
  8409                           	psect	text52
  8410  0937                     __ptext52:	
  8411 ;; *************** function _LED_Main *****************
  8412 ;; Defined at:
  8413 ;;		line 47 in file "../src/LED_B1.c"
  8414 ;; Parameters:    Size  Location     Type
  8415 ;;		None
  8416 ;; Auto vars:     Size  Location     Type
  8417 ;;		None
  8418 ;; Return value:  Size  Location     Type
  8419 ;;		None               void
  8420 ;; Registers used:
  8421 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8422 ;; Tracked objects:
  8423 ;;		On entry : 0/0
  8424 ;;		On exit  : 0/0
  8425 ;;		Unchanged: 0/0
  8426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8427 ;;      Params:         0       0       0       0
  8428 ;;      Locals:         0       0       0       0
  8429 ;;      Temps:          0       0       0       0
  8430 ;;      Totals:         0       0       0       0
  8431 ;;Total ram usage:        0 bytes
  8432 ;; Hardware stack levels used:    1
  8433 ;; Hardware stack levels required when called:    4
  8434 ;; This function calls:
  8435 ;;		_setLED_Main
  8436 ;; This function is called by:
  8437 ;;		_main
  8438 ;; This function uses a non-reentrant model
  8439 ;;
  8440                           
  8441                           
  8442                           ;psect for function _LED_Main
  8443  0937                     _LED_Main:	
  8444                           
  8445                           ;LED_B1.c: 51: setLED_Main(99);
  8446                           
  8447                           ;incstack = 0
  8448                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8449  0937  3063               	movlw	99
  8450  0938  158A  24D1         	fcall	_setLED_Main
  8451  093A  0008               	return
  8452  093B                     __end_of_LED_Main:	
  8453                           
  8454                           	psect	text53
  8455  0CD1                     __ptext53:	
  8456 ;; *************** function _setLED_Main *****************
  8457 ;; Defined at:
  8458 ;;		line 229 in file "../src/LED_B1.c"
  8459 ;; Parameters:    Size  Location     Type
  8460 ;;  led             1    wreg     unsigned char 
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;  led             1    2[BANK0 ] unsigned char 
  8463 ;; Return value:  Size  Location     Type
  8464 ;;		None               void
  8465 ;; Registers used:
  8466 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8467 ;; Tracked objects:
  8468 ;;		On entry : 0/0
  8469 ;;		On exit  : 0/0
  8470 ;;		Unchanged: 0/0
  8471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8472 ;;      Params:         0       0       0       0
  8473 ;;      Locals:         0       1       0       0
  8474 ;;      Temps:          0       2       0       0
  8475 ;;      Totals:         0       3       0       0
  8476 ;;Total ram usage:        3 bytes
  8477 ;; Hardware stack levels used:    1
  8478 ;; Hardware stack levels required when called:    3
  8479 ;; This function calls:
  8480 ;;		_LedPointSelect
  8481 ;; This function is called by:
  8482 ;;		_LED_Main
  8483 ;; This function uses a non-reentrant model
  8484 ;;
  8485                           
  8486                           
  8487                           ;psect for function _setLED_Main
  8488  0CD1                     _setLED_Main:	
  8489                           
  8490                           ;incstack = 0
  8491                           ; Regs used in _setLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8492                           ;setLED_Main@led stored from wreg
  8493  0CD1  1283               	bcf	3,5	;RP0=0, select bank0
  8494  0CD2  1303               	bcf	3,6	;RP1=0, select bank0
  8495  0CD3  00D9               	movwf	setLED_Main@led
  8496                           
  8497                           ;LED_B1.c: 230: LedPointSelect(led);
  8498  0CD4  0859               	movf	setLED_Main@led,w
  8499  0CD5  158A  232E  158A   	fcall	_LedPointSelect
  8500                           
  8501                           ;LED_B1.c: 231: if (LED->GO == 1) {
  8502  0CD8  0876               	movf	_LED,w
  8503  0CD9  0084               	movwf	4
  8504  0CDA  1383               	bcf	3,7	;select IRP bank0
  8505  0CDB  1C80               	btfss	0,1
  8506  0CDC  0008               	return
  8507                           
  8508                           ;LED_B1.c: 232: LED->Time++;
  8509  0CDD  0A76               	incf	_LED,w
  8510  0CDE  0084               	movwf	4
  8511  0CDF  3001               	movlw	1
  8512  0CE0  0780               	addwf	0,f
  8513  0CE1  0A84               	incf	4,f
  8514  0CE2  1803               	skipnc
  8515  0CE3  0A80               	incf	0,f
  8516                           
  8517                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
  8518  0CE4  0A76               	incf	_LED,w
  8519  0CE5  0084               	movwf	4
  8520  0CE6  0800               	movf	0,w
  8521  0CE7  1283               	bcf	3,5	;RP0=0, select bank0
  8522  0CE8  1303               	bcf	3,6	;RP1=0, select bank0
  8523  0CE9  00D7               	movwf	??_setLED_Main
  8524  0CEA  0A84               	incf	4,f
  8525  0CEB  0800               	movf	0,w
  8526  0CEC  00D8               	movwf	??_setLED_Main+1
  8527  0CED  3000               	movlw	0
  8528  0CEE  0258               	subwf	??_setLED_Main+1,w
  8529  0CEF  3019               	movlw	25
  8530  0CF0  1903               	skipnz
  8531  0CF1  0257               	subwf	??_setLED_Main,w
  8532  0CF2  1C03               	skipc
  8533  0CF3  0008               	return
  8534                           
  8535                           ;LED_B1.c: 234: LED->Time = 0;
  8536  0CF4  0A76               	incf	_LED,w
  8537  0CF5  0084               	movwf	4
  8538  0CF6  0180               	clrf	0
  8539  0CF7  0A84               	incf	4,f
  8540  0CF8  0180               	clrf	0
  8541                           
  8542                           ;LED_B1.c: 237: if (led == 1) {
  8543  0CF9  0859               	movf	setLED_Main@led,w
  8544  0CFA  3A01               	xorlw	1
  8545  0CFB  1D03               	skipz
  8546  0CFC  2CFF               	goto	l383
  8547                           
  8548                           ;LED_B1.c: 238: RC7 = RC7 == 1 ? 0 : 1;
  8549  0CFD  3080               	movlw	128
  8550  0CFE  0687               	xorwf	7,f
  8551  0CFF                     l383:	
  8552                           
  8553                           ;LED_B1.c: 239: }
  8554                           ;LED_B1.c: 242: if (led == 2) {
  8555  0CFF  0859               	movf	setLED_Main@led,w
  8556  0D00  3A02               	xorlw	2
  8557  0D01  1D03               	skipz
  8558  0D02  2D05               	goto	l384
  8559                           
  8560                           ;LED_B1.c: 243: RC6 = RC6 == 1 ? 0 : 1;
  8561  0D03  3040               	movlw	64
  8562  0D04  0687               	xorwf	7,f
  8563  0D05                     l384:	
  8564                           
  8565                           ;LED_B1.c: 244: }
  8566                           ;LED_B1.c: 252: if (led == 99) {
  8567  0D05  0859               	movf	setLED_Main@led,w
  8568  0D06  3A63               	xorlw	99
  8569  0D07  1D03               	skipz
  8570  0D08  0008               	return
  8571                           
  8572                           ;LED_B1.c: 253: RC1 = RC1 == 1 ? 0 : 1;
  8573  0D09  3002               	movlw	2
  8574  0D0A  0687               	xorwf	7,f
  8575  0D0B  0008               	return
  8576  0D0C                     __end_of_setLED_Main:	
  8577                           
  8578                           	psect	text54
  8579  099A                     __ptext54:	
  8580 ;; *************** function _LED_Initialization *****************
  8581 ;; Defined at:
  8582 ;;		line 31 in file "../src/LED_B1.c"
  8583 ;; Parameters:    Size  Location     Type
  8584 ;;		None
  8585 ;; Auto vars:     Size  Location     Type
  8586 ;;		None
  8587 ;; Return value:  Size  Location     Type
  8588 ;;		None               void
  8589 ;; Registers used:
  8590 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8591 ;; Tracked objects:
  8592 ;;		On entry : 0/0
  8593 ;;		On exit  : 0/0
  8594 ;;		Unchanged: 0/0
  8595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8596 ;;      Params:         0       0       0       0
  8597 ;;      Locals:         0       0       0       0
  8598 ;;      Temps:          0       0       0       0
  8599 ;;      Totals:         0       0       0       0
  8600 ;;Total ram usage:        0 bytes
  8601 ;; Hardware stack levels used:    1
  8602 ;; Hardware stack levels required when called:    5
  8603 ;; This function calls:
  8604 ;;		_setLED_Initialization
  8605 ;; This function is called by:
  8606 ;;		_main
  8607 ;; This function uses a non-reentrant model
  8608 ;;
  8609                           
  8610                           
  8611                           ;psect for function _LED_Initialization
  8612  099A                     _LED_Initialization:	
  8613                           
  8614                           ;LED_B1.c: 33: setLED_Initialization(1);
  8615                           
  8616                           ;incstack = 0
  8617                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8618  099A  3001               	movlw	1
  8619  099B  158A  2230  158A   	fcall	_setLED_Initialization
  8620                           
  8621                           ;LED_B1.c: 36: setLED_Initialization(2);
  8622  099E  3002               	movlw	2
  8623  099F  158A  2230  158A   	fcall	_setLED_Initialization
  8624                           
  8625                           ;LED_B1.c: 42: setLED_Initialization(99);
  8626  09A2  3063               	movlw	99
  8627  09A3  158A  2230         	fcall	_setLED_Initialization
  8628  09A5  0008               	return
  8629  09A6                     __end_of_LED_Initialization:	
  8630                           
  8631                           	psect	text55
  8632  0A30                     __ptext55:	
  8633 ;; *************** function _setLED_Initialization *****************
  8634 ;; Defined at:
  8635 ;;		line 74 in file "../src/LED_B1.c"
  8636 ;; Parameters:    Size  Location     Type
  8637 ;;  led             1    wreg     unsigned char 
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;  led             1    2[BANK0 ] unsigned char 
  8640 ;; Return value:  Size  Location     Type
  8641 ;;		None               void
  8642 ;; Registers used:
  8643 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8649 ;;      Params:         0       0       0       0
  8650 ;;      Locals:         0       1       0       0
  8651 ;;      Temps:          0       0       0       0
  8652 ;;      Totals:         0       1       0       0
  8653 ;;Total ram usage:        1 bytes
  8654 ;; Hardware stack levels used:    1
  8655 ;; Hardware stack levels required when called:    4
  8656 ;; This function calls:
  8657 ;;		_LedPointSelect
  8658 ;;		_setLED
  8659 ;; This function is called by:
  8660 ;;		_LED_Initialization
  8661 ;; This function uses a non-reentrant model
  8662 ;;
  8663                           
  8664                           
  8665                           ;psect for function _setLED_Initialization
  8666  0A30                     _setLED_Initialization:	
  8667                           
  8668                           ;incstack = 0
  8669                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8670                           ;setLED_Initialization@led stored from wreg
  8671  0A30  1283               	bcf	3,5	;RP0=0, select bank0
  8672  0A31  1303               	bcf	3,6	;RP1=0, select bank0
  8673  0A32  00D9               	movwf	setLED_Initialization@led
  8674                           
  8675                           ;LED_B1.c: 75: LedPointSelect(led);
  8676  0A33  0859               	movf	setLED_Initialization@led,w
  8677  0A34  158A  232E  158A   	fcall	_LedPointSelect
  8678                           
  8679                           ;LED_B1.c: 76: LED->Enable = 1;
  8680  0A37  0876               	movf	_LED,w
  8681  0A38  0084               	movwf	4
  8682  0A39  1383               	bcf	3,7	;select IRP bank0
  8683  0A3A  1400               	bsf	0,0
  8684                           
  8685                           ;LED_B1.c: 77: setLED(led, 0);
  8686  0A3B  1283               	bcf	3,5	;RP0=0, select bank0
  8687  0A3C  1303               	bcf	3,6	;RP1=0, select bank0
  8688  0A3D  01D7               	clrf	setLED@command
  8689  0A3E  0859               	movf	setLED_Initialization@led,w
  8690  0A3F  158A  2659         	fcall	_setLED
  8691  0A41  0008               	return
  8692  0A42                     __end_of_setLED_Initialization:	
  8693                           
  8694                           	psect	text56
  8695  04E3                     __ptext56:	
  8696 ;; *************** function _Exception_Main *****************
  8697 ;; Defined at:
  8698 ;;		line 499 in file "../src/Main_B1.c"
  8699 ;; Parameters:    Size  Location     Type
  8700 ;;		None
  8701 ;; Auto vars:     Size  Location     Type
  8702 ;;  i               2   18[BANK0 ] int 
  8703 ;;  i               2   16[BANK0 ] int 
  8704 ;;  status          1   15[BANK0 ] unsigned char 
  8705 ;;  error           1   14[BANK0 ] unsigned char 
  8706 ;;  count           1   13[BANK0 ] unsigned char 
  8707 ;;  lights          1   12[BANK0 ] unsigned char 
  8708 ;; Return value:  Size  Location     Type
  8709 ;;		None               void
  8710 ;; Registers used:
  8711 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8712 ;; Tracked objects:
  8713 ;;		On entry : 0/0
  8714 ;;		On exit  : 0/0
  8715 ;;		Unchanged: 0/0
  8716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8717 ;;      Params:         0       0       0       0
  8718 ;;      Locals:         0       8       0       0
  8719 ;;      Temps:          0       1       0       0
  8720 ;;      Totals:         0       9       0       0
  8721 ;;Total ram usage:        9 bytes
  8722 ;; Hardware stack levels used:    1
  8723 ;; Hardware stack levels required when called:    5
  8724 ;; This function calls:
  8725 ;;		_getAll_Lights_Line
  8726 ;;		_getLights_Status
  8727 ;;		_getMain_All_Error_Status
  8728 ;;		_getMain_All_LightsStatus
  8729 ;;		_setBuz
  8730 ;;		_setLED
  8731 ;;		_setLights_SwOff
  8732 ;;		_setLights_SwOn
  8733 ;; This function is called by:
  8734 ;;		_main
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           
  8739                           ;psect for function _Exception_Main
  8740  04E3                     _Exception_Main:	
  8741                           
  8742                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8743                           
  8744                           ;incstack = 0
  8745                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8746  04E3  3000               	movlw	0
  8747  04E4  158A  250C  118A   	fcall	_getMain_All_Error_Status
  8748  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  8749  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  8750  04E9  00E2               	movwf	??_Exception_Main
  8751  04EA  0862               	movf	??_Exception_Main,w
  8752  04EB  00E5               	movwf	Exception_Main@error
  8753                           
  8754                           ;Main_B1.c: 501: char lights = 0, count = 2;
  8755  04EC  01E3               	clrf	Exception_Main@lights
  8756  04ED  3002               	movlw	2
  8757  04EE  00E2               	movwf	??_Exception_Main
  8758  04EF  0862               	movf	??_Exception_Main,w
  8759  04F0  00E4               	movwf	Exception_Main@count
  8760                           
  8761                           ;Main_B1.c: 502: char status = 0;
  8762  04F1  01E6               	clrf	Exception_Main@status
  8763                           
  8764                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8765  04F2  1DB3               	btfss	_myMain+2,3
  8766  04F3  2D00               	goto	l6107
  8767                           
  8768                           ;Main_B1.c: 505: if (error == 0) {
  8769  04F4  08E5               	movf	Exception_Main@error,f
  8770  04F5  1D03               	skipz
  8771  04F6  0008               	return
  8772                           
  8773                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8774  04F7  11B3               	bcf	_myMain+2,3
  8775                           
  8776                           ;Main_B1.c: 509: setLED(99, 10);
  8777  04F8  300A               	movlw	10
  8778  04F9  00E2               	movwf	??_Exception_Main
  8779  04FA  0862               	movf	??_Exception_Main,w
  8780  04FB  00D7               	movwf	setLED@command
  8781  04FC  3063               	movlw	99
  8782  04FD  158A  2659         	fcall	_setLED
  8783                           
  8784                           ;Main_B1.c: 522: }
  8785                           ;Main_B1.c: 523: } else {
  8786  04FF  0008               	return
  8787  0500                     l6107:	
  8788                           
  8789                           ;Main_B1.c: 524: if (error != 0) {
  8790  0500  1283               	bcf	3,5	;RP0=0, select bank0
  8791  0501  1303               	bcf	3,6	;RP1=0, select bank0
  8792  0502  0865               	movf	Exception_Main@error,w
  8793  0503  1903               	btfsc	3,2
  8794  0504  0008               	return
  8795                           
  8796                           ;Main_B1.c: 525: myMain.Error_Run = 1;
  8797  0505  15B3               	bsf	_myMain+2,3
  8798                           
  8799                           ;Main_B1.c: 527: setLED(99, 11);
  8800  0506  300B               	movlw	11
  8801  0507  00E2               	movwf	??_Exception_Main
  8802  0508  0862               	movf	??_Exception_Main,w
  8803  0509  00D7               	movwf	setLED@command
  8804  050A  3063               	movlw	99
  8805  050B  158A  2659  118A   	fcall	_setLED
  8806                           
  8807                           ;Main_B1.c: 591: switch (error) {
  8808  050E  2DAC               	goto	l6147
  8809  050F                     l6113:	
  8810                           ;Main_B1.c: 592: case 1:
  8811                           
  8812                           
  8813                           ;Main_B1.c: 593: for (int i = 0; i < count; i++) {
  8814  050F  1283               	bcf	3,5	;RP0=0, select bank0
  8815  0510  1303               	bcf	3,6	;RP1=0, select bank0
  8816  0511  01E7               	clrf	Exception_Main@i
  8817  0512  01E8               	clrf	Exception_Main@i+1
  8818  0513                     l6121:	
  8819  0513  0868               	movf	Exception_Main@i+1,w
  8820  0514  3A80               	xorlw	128
  8821  0515  00E2               	movwf	??_Exception_Main
  8822  0516  3080               	movlw	128
  8823  0517  0262               	subwf	??_Exception_Main,w
  8824  0518  1D03               	skipz
  8825  0519  2D1C               	goto	u7755
  8826  051A  0864               	movf	Exception_Main@count,w
  8827  051B  0267               	subwf	Exception_Main@i,w
  8828  051C                     u7755:	
  8829  051C  1803               	btfsc	3,0
  8830  051D  2D3F               	goto	u7750
  8831                           
  8832                           ;Main_B1.c: 594: if (getLights_Status(i + 1) == 1) {
  8833  051E  1283               	bcf	3,5	;RP0=0, select bank0
  8834  051F  1303               	bcf	3,6	;RP1=0, select bank0
  8835  0520  0867               	movf	Exception_Main@i,w
  8836  0521  3E01               	addlw	1
  8837  0522  158A  220E  118A   	fcall	_getLights_Status
  8838  0525  3A01               	xorlw	1
  8839  0526  1D03               	skipz
  8840  0527  2D36               	goto	l6119
  8841                           
  8842                           ;Main_B1.c: 596: setLights_SwOn(i + 1);
  8843  0528  1283               	bcf	3,5	;RP0=0, select bank0
  8844  0529  1303               	bcf	3,6	;RP1=0, select bank0
  8845  052A  0867               	movf	Exception_Main@i,w
  8846  052B  3E01               	addlw	1
  8847  052C  158A  23FD  118A   	fcall	_setLights_SwOn
  8848                           
  8849                           ;Main_B1.c: 597: setLights_SwOff(i + 1);
  8850  052F  1283               	bcf	3,5	;RP0=0, select bank0
  8851  0530  1303               	bcf	3,6	;RP1=0, select bank0
  8852  0531  0867               	movf	Exception_Main@i,w
  8853  0532  3E01               	addlw	1
  8854  0533  158A  2348  118A   	fcall	_setLights_SwOff
  8855  0536                     l6119:	
  8856  0536  3001               	movlw	1
  8857  0537  1283               	bcf	3,5	;RP0=0, select bank0
  8858  0538  1303               	bcf	3,6	;RP1=0, select bank0
  8859  0539  07E7               	addwf	Exception_Main@i,f
  8860  053A  1803               	skipnc
  8861  053B  0AE8               	incf	Exception_Main@i+1,f
  8862  053C  3000               	movlw	0
  8863  053D  07E8               	addwf	Exception_Main@i+1,f
  8864  053E  2D13               	goto	l6121
  8865  053F                     u7750:	
  8866  053F  1283               	bcf	3,5	;RP0=0, select bank0
  8867  0540  1303               	bcf	3,6	;RP1=0, select bank0
  8868  0541  0008               	return
  8869  0542                     l6123:	
  8870                           ;Main_B1.c: 601: case 2:
  8871                           
  8872                           ;Main_B1.c: 598: }
  8873                           ;Main_B1.c: 599: }
  8874                           ;Main_B1.c: 600: break;
  8875                           
  8876                           
  8877                           ;Main_B1.c: 602: if (getMain_All_LightsStatus() == 1) {
  8878  0542  158A  21FE  118A   	fcall	_getMain_All_LightsStatus
  8879  0545  3A01               	xorlw	1
  8880  0546  1D03               	skipz
  8881  0547  2D52               	goto	l6127
  8882                           
  8883                           ;Main_B1.c: 603: setBuz(10, 300);
  8884  0548  302C               	movlw	44
  8885  0549  1283               	bcf	3,5	;RP0=0, select bank0
  8886  054A  1303               	bcf	3,6	;RP1=0, select bank0
  8887  054B  00DF               	movwf	setBuz@time
  8888  054C  3001               	movlw	1
  8889  054D  00E0               	movwf	setBuz@time+1
  8890  054E  300A               	movlw	10
  8891  054F  158A  2612  118A   	fcall	_setBuz
  8892  0552                     l6127:	
  8893                           
  8894                           ;Main_B1.c: 604: }
  8895                           ;Main_B1.c: 606: for (int i = 0; i < count; i++) {
  8896  0552  1283               	bcf	3,5	;RP0=0, select bank0
  8897  0553  1303               	bcf	3,6	;RP1=0, select bank0
  8898  0554  01E9               	clrf	Exception_Main@i_2440
  8899  0555  01EA               	clrf	Exception_Main@i_2440+1
  8900  0556                     l6135:	
  8901  0556  086A               	movf	Exception_Main@i_2440+1,w
  8902  0557  3A80               	xorlw	128
  8903  0558  00E2               	movwf	??_Exception_Main
  8904  0559  3080               	movlw	128
  8905  055A  0262               	subwf	??_Exception_Main,w
  8906  055B  1D03               	skipz
  8907  055C  2D5F               	goto	u7785
  8908  055D  0864               	movf	Exception_Main@count,w
  8909  055E  0269               	subwf	Exception_Main@i_2440,w
  8910  055F                     u7785:	
  8911  055F  1803               	btfsc	3,0
  8912  0560  2D82               	goto	u7780
  8913                           
  8914                           ;Main_B1.c: 607: if (getLights_Status(i + 1) == 1) {
  8915  0561  1283               	bcf	3,5	;RP0=0, select bank0
  8916  0562  1303               	bcf	3,6	;RP1=0, select bank0
  8917  0563  0869               	movf	Exception_Main@i_2440,w
  8918  0564  3E01               	addlw	1
  8919  0565  158A  220E  118A   	fcall	_getLights_Status
  8920  0568  3A01               	xorlw	1
  8921  0569  1D03               	skipz
  8922  056A  2D79               	goto	l6133
  8923                           
  8924                           ;Main_B1.c: 608: setLights_SwOn(i + 1);
  8925  056B  1283               	bcf	3,5	;RP0=0, select bank0
  8926  056C  1303               	bcf	3,6	;RP1=0, select bank0
  8927  056D  0869               	movf	Exception_Main@i_2440,w
  8928  056E  3E01               	addlw	1
  8929  056F  158A  23FD  118A   	fcall	_setLights_SwOn
  8930                           
  8931                           ;Main_B1.c: 609: setLights_SwOff(i + 1);
  8932  0572  1283               	bcf	3,5	;RP0=0, select bank0
  8933  0573  1303               	bcf	3,6	;RP1=0, select bank0
  8934  0574  0869               	movf	Exception_Main@i_2440,w
  8935  0575  3E01               	addlw	1
  8936  0576  158A  2348  118A   	fcall	_setLights_SwOff
  8937  0579                     l6133:	
  8938  0579  3001               	movlw	1
  8939  057A  1283               	bcf	3,5	;RP0=0, select bank0
  8940  057B  1303               	bcf	3,6	;RP1=0, select bank0
  8941  057C  07E9               	addwf	Exception_Main@i_2440,f
  8942  057D  1803               	skipnc
  8943  057E  0AEA               	incf	Exception_Main@i_2440+1,f
  8944  057F  3000               	movlw	0
  8945  0580  07EA               	addwf	Exception_Main@i_2440+1,f
  8946  0581  2D56               	goto	l6135
  8947  0582                     u7780:	
  8948  0582  1283               	bcf	3,5	;RP0=0, select bank0
  8949  0583  1303               	bcf	3,6	;RP1=0, select bank0
  8950  0584  0008               	return
  8951  0585                     l6137:	
  8952                           ;Main_B1.c: 613: case 3:
  8953                           
  8954                           ;Main_B1.c: 610: }
  8955                           ;Main_B1.c: 611: }
  8956                           ;Main_B1.c: 612: break;
  8957                           
  8958                           
  8959                           ;Main_B1.c: 614: status = getAll_Lights_Line();
  8960  0585  158A  21EE  118A   	fcall	_getAll_Lights_Line
  8961  0588  1283               	bcf	3,5	;RP0=0, select bank0
  8962  0589  1303               	bcf	3,6	;RP1=0, select bank0
  8963  058A  00E2               	movwf	??_Exception_Main
  8964  058B  0862               	movf	??_Exception_Main,w
  8965  058C  00E6               	movwf	Exception_Main@status
  8966                           
  8967                           ;Main_B1.c: 616: if (getLights_Status(status) == 1) {
  8968  058D  0866               	movf	Exception_Main@status,w
  8969  058E  158A  220E  118A   	fcall	_getLights_Status
  8970  0591  3A01               	xorlw	1
  8971  0592  1D03               	skipz
  8972  0593  2DA0               	goto	l6143
  8973                           
  8974                           ;Main_B1.c: 617: setLights_SwOn(status);
  8975  0594  1283               	bcf	3,5	;RP0=0, select bank0
  8976  0595  1303               	bcf	3,6	;RP1=0, select bank0
  8977  0596  0866               	movf	Exception_Main@status,w
  8978  0597  158A  23FD  118A   	fcall	_setLights_SwOn
  8979                           
  8980                           ;Main_B1.c: 618: setLights_SwOff(status);
  8981  059A  1283               	bcf	3,5	;RP0=0, select bank0
  8982  059B  1303               	bcf	3,6	;RP1=0, select bank0
  8983  059C  0866               	movf	Exception_Main@status,w
  8984  059D  158A  2348  118A   	fcall	_setLights_SwOff
  8985  05A0                     l6143:	
  8986                           
  8987                           ;Main_B1.c: 620: }
  8988                           ;Main_B1.c: 621: setBuz(5, 300);
  8989  05A0  302C               	movlw	44
  8990  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  8991  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  8992  05A3  00DF               	movwf	setBuz@time
  8993  05A4  3001               	movlw	1
  8994  05A5  00E0               	movwf	setBuz@time+1
  8995  05A6  3005               	movlw	5
  8996  05A7  158A  2612         	fcall	_setBuz
  8997                           
  8998                           ;Main_B1.c: 622: break;
  8999  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  9000  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  9001  05AB  0008               	return
  9002  05AC                     l6147:	
  9003                           ;Main_B1.c: 623: }
  9004                           
  9005  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  9006  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  9007  05AE  0865               	movf	Exception_Main@error,w
  9008                           
  9009                           ; Switch size 1, requested type "space"
  9010                           ; Number of cases is 3, Range of values is 1 to 3
  9011                           ; switch strategies available:
  9012                           ; Name         Instructions Cycles
  9013                           ; simple_byte           10     6 (average)
  9014                           ; direct_byte           16    10 (fixed)
  9015                           ; jumptable            263     9 (fixed)
  9016                           ;	Chosen strategy is simple_byte
  9017  05AF  3A01               	xorlw	1	; case 1
  9018  05B0  1903               	skipnz
  9019  05B1  2D0F               	goto	l6113
  9020  05B2  3A03               	xorlw	3	; case 2
  9021  05B3  1903               	skipnz
  9022  05B4  2D42               	goto	l6123
  9023  05B5  3A01               	xorlw	1	; case 3
  9024  05B6  1903               	skipnz
  9025  05B7  2D85               	goto	l6137
  9026  05B8  2DBA               	goto	l731
  9027  05B9  0008               	return
  9028  05BA                     l731:	
  9029  05BA  0008               	return
  9030  05BB                     __end_of_Exception_Main:	
  9031                           
  9032                           	psect	text57
  9033  0BFD                     __ptext57:	
  9034 ;; *************** function _setLights_SwOn *****************
  9035 ;; Defined at:
  9036 ;;		line 410 in file "../src/TriacRelay_B1.c"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;  sw              1    wreg     unsigned char 
  9039 ;; Auto vars:     Size  Location     Type
  9040 ;;  sw              1    3[BANK0 ] unsigned char 
  9041 ;; Return value:  Size  Location     Type
  9042 ;;		None               void
  9043 ;; Registers used:
  9044 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9045 ;; Tracked objects:
  9046 ;;		On entry : 0/0
  9047 ;;		On exit  : 0/0
  9048 ;;		Unchanged: 0/0
  9049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9050 ;;      Params:         0       0       0       0
  9051 ;;      Locals:         0       1       0       0
  9052 ;;      Temps:          0       0       0       0
  9053 ;;      Totals:         0       1       0       0
  9054 ;;Total ram usage:        1 bytes
  9055 ;; Hardware stack levels used:    1
  9056 ;; Hardware stack levels required when called:    4
  9057 ;; This function calls:
  9058 ;;		_LightsPointSelect
  9059 ;;		_getLights_Status
  9060 ;;		_setLights_Trigger
  9061 ;; This function is called by:
  9062 ;;		_Exception_Main
  9063 ;;		_PIR_Main
  9064 ;;		_setSw_Main
  9065 ;; This function uses a non-reentrant model
  9066 ;;
  9067                           
  9068                           
  9069                           ;psect for function _setLights_SwOn
  9070  0BFD                     _setLights_SwOn:	
  9071                           
  9072                           ;incstack = 0
  9073                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9074                           ;setLights_SwOn@sw stored from wreg
  9075  0BFD  1283               	bcf	3,5	;RP0=0, select bank0
  9076  0BFE  1303               	bcf	3,6	;RP1=0, select bank0
  9077  0BFF  00DA               	movwf	setLights_SwOn@sw
  9078                           
  9079                           ;TriacRelay_B1.c: 411: LightsPointSelect(sw);
  9080  0C00  085A               	movf	setLights_SwOn@sw,w
  9081  0C01  158A  2242  158A   	fcall	_LightsPointSelect
  9082                           
  9083                           ;TriacRelay_B1.c: 414: Lights->SwFlag = 1;
  9084  0C04  0A78               	incf	_Lights,w
  9085  0C05  0084               	movwf	4
  9086  0C06  1383               	bcf	3,7	;select IRP bank0
  9087  0C07  1500               	bsf	0,2
  9088                           
  9089                           ;TriacRelay_B1.c: 415: if (getLights_Status(sw) == 0) {
  9090  0C08  1283               	bcf	3,5	;RP0=0, select bank0
  9091  0C09  1303               	bcf	3,6	;RP1=0, select bank0
  9092  0C0A  085A               	movf	setLights_SwOn@sw,w
  9093  0C0B  158A  220E  158A   	fcall	_getLights_Status
  9094  0C0E  3800               	iorlw	0
  9095  0C0F  1D03               	skipz
  9096  0C10  2C1D               	goto	l5221
  9097                           
  9098                           ;TriacRelay_B1.c: 416: Lights->SwStatus = 1;
  9099  0C11  0A78               	incf	_Lights,w
  9100  0C12  0084               	movwf	4
  9101  0C13  1383               	bcf	3,7	;select IRP bank0
  9102  0C14  1580               	bsf	0,3
  9103                           
  9104                           ;TriacRelay_B1.c: 417: setLights_Trigger(sw, 1);
  9105  0C15  1283               	bcf	3,5	;RP0=0, select bank0
  9106  0C16  1303               	bcf	3,6	;RP1=0, select bank0
  9107  0C17  01D7               	clrf	setLights_Trigger@command
  9108  0C18  0AD7               	incf	setLights_Trigger@command,f
  9109  0C19  085A               	movf	setLights_SwOn@sw,w
  9110  0C1A  158A  2362         	fcall	_setLights_Trigger
  9111                           
  9112                           ;TriacRelay_B1.c: 418: } else {
  9113  0C1C  0008               	return
  9114  0C1D                     l5221:	
  9115                           
  9116                           ;TriacRelay_B1.c: 419: Lights->SwStatus = 0;
  9117  0C1D  0A78               	incf	_Lights,w
  9118  0C1E  0084               	movwf	4
  9119  0C1F  1383               	bcf	3,7	;select IRP bank0
  9120  0C20  1180               	bcf	0,3
  9121  0C21  0008               	return
  9122  0C22                     __end_of_setLights_SwOn:	
  9123                           
  9124                           	psect	text58
  9125  0A0E                     __ptext58:	
  9126 ;; *************** function _getLights_Status *****************
  9127 ;; Defined at:
  9128 ;;		line 271 in file "../src/TriacRelay_B1.c"
  9129 ;; Parameters:    Size  Location     Type
  9130 ;;  lights          1    wreg     unsigned char 
  9131 ;; Auto vars:     Size  Location     Type
  9132 ;;  lights          1    0[BANK0 ] unsigned char 
  9133 ;;  status          1    1[BANK0 ] unsigned char 
  9134 ;; Return value:  Size  Location     Type
  9135 ;;                  1    wreg      unsigned char 
  9136 ;; Registers used:
  9137 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9138 ;; Tracked objects:
  9139 ;;		On entry : 0/0
  9140 ;;		On exit  : 0/0
  9141 ;;		Unchanged: 0/0
  9142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9143 ;;      Params:         0       0       0       0
  9144 ;;      Locals:         0       2       0       0
  9145 ;;      Temps:          0       0       0       0
  9146 ;;      Totals:         0       2       0       0
  9147 ;;Total ram usage:        2 bytes
  9148 ;; Hardware stack levels used:    1
  9149 ;; Hardware stack levels required when called:    3
  9150 ;; This function calls:
  9151 ;;		_LightsPointSelect
  9152 ;; This function is called by:
  9153 ;;		_Exception_Main
  9154 ;;		_PIR_Main
  9155 ;;		_setLights_SwOn
  9156 ;;		_setLights_ErrorClose
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           
  9161                           ;psect for function _getLights_Status
  9162  0A0E                     _getLights_Status:	
  9163                           
  9164                           ;incstack = 0
  9165                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9166                           ;getLights_Status@lights stored from wreg
  9167  0A0E  1283               	bcf	3,5	;RP0=0, select bank0
  9168  0A0F  1303               	bcf	3,6	;RP1=0, select bank0
  9169  0A10  00D7               	movwf	getLights_Status@lights
  9170                           
  9171                           ;TriacRelay_B1.c: 272: LightsPointSelect(lights);
  9172  0A11  0857               	movf	getLights_Status@lights,w
  9173  0A12  158A  2242         	fcall	_LightsPointSelect
  9174                           
  9175                           ;TriacRelay_B1.c: 273: char status = Lights->Status == 1 ? 1 : 0;
  9176  0A14  0878               	movf	_Lights,w
  9177  0A15  0084               	movwf	4
  9178  0A16  3000               	movlw	0
  9179  0A17  1383               	bcf	3,7	;select IRP bank0
  9180  0A18  1900               	btfsc	0,2
  9181  0A19  3001               	movlw	1
  9182  0A1A  1283               	bcf	3,5	;RP0=0, select bank0
  9183  0A1B  1303               	bcf	3,6	;RP1=0, select bank0
  9184  0A1C  00D8               	movwf	getLights_Status@status
  9185                           
  9186                           ;TriacRelay_B1.c: 274: return status;
  9187  0A1D  0858               	movf	getLights_Status@status,w
  9188  0A1E  0008               	return
  9189  0A1F                     __end_of_getLights_Status:	
  9190                           
  9191                           	psect	text59
  9192  0B48                     __ptext59:	
  9193 ;; *************** function _setLights_SwOff *****************
  9194 ;; Defined at:
  9195 ;;		line 438 in file "../src/TriacRelay_B1.c"
  9196 ;; Parameters:    Size  Location     Type
  9197 ;;  sw              1    wreg     unsigned char 
  9198 ;; Auto vars:     Size  Location     Type
  9199 ;;  sw              1    3[BANK0 ] unsigned char 
  9200 ;; Return value:  Size  Location     Type
  9201 ;;		None               void
  9202 ;; Registers used:
  9203 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9204 ;; Tracked objects:
  9205 ;;		On entry : 0/0
  9206 ;;		On exit  : 0/0
  9207 ;;		Unchanged: 0/0
  9208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9209 ;;      Params:         0       0       0       0
  9210 ;;      Locals:         0       1       0       0
  9211 ;;      Temps:          0       0       0       0
  9212 ;;      Totals:         0       1       0       0
  9213 ;;Total ram usage:        1 bytes
  9214 ;; Hardware stack levels used:    1
  9215 ;; Hardware stack levels required when called:    4
  9216 ;; This function calls:
  9217 ;;		_LightsPointSelect
  9218 ;;		_setLights_Trigger
  9219 ;; This function is called by:
  9220 ;;		_Exception_Main
  9221 ;;		_PIR_Main
  9222 ;;		_setSw_Main
  9223 ;; This function uses a non-reentrant model
  9224 ;;
  9225                           
  9226                           
  9227                           ;psect for function _setLights_SwOff
  9228  0B48                     _setLights_SwOff:	
  9229                           
  9230                           ;incstack = 0
  9231                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9232                           ;setLights_SwOff@sw stored from wreg
  9233  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  9234  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  9235  0B4A  00DA               	movwf	setLights_SwOff@sw
  9236                           
  9237                           ;TriacRelay_B1.c: 440: LightsPointSelect(sw);
  9238  0B4B  085A               	movf	setLights_SwOff@sw,w
  9239  0B4C  158A  2242  158A   	fcall	_LightsPointSelect
  9240                           
  9241                           ;TriacRelay_B1.c: 442: if (Lights->SwFlag == 1) {
  9242  0B4F  0A78               	incf	_Lights,w
  9243  0B50  0084               	movwf	4
  9244  0B51  1383               	bcf	3,7	;select IRP bank0
  9245  0B52  1D00               	btfss	0,2
  9246  0B53  0008               	return
  9247                           
  9248                           ;TriacRelay_B1.c: 443: Lights->SwFlag = 0;
  9249  0B54  0A78               	incf	_Lights,w
  9250  0B55  0084               	movwf	4
  9251  0B56  1100               	bcf	0,2
  9252                           
  9253                           ;TriacRelay_B1.c: 444: if (Lights->SwStatus == 0) {
  9254  0B57  0A78               	incf	_Lights,w
  9255  0B58  0084               	movwf	4
  9256  0B59  1980               	btfsc	0,3
  9257  0B5A  0008               	return
  9258                           
  9259                           ;TriacRelay_B1.c: 445: setLights_Trigger(sw, 0);
  9260  0B5B  1283               	bcf	3,5	;RP0=0, select bank0
  9261  0B5C  1303               	bcf	3,6	;RP1=0, select bank0
  9262  0B5D  01D7               	clrf	setLights_Trigger@command
  9263  0B5E  085A               	movf	setLights_SwOff@sw,w
  9264  0B5F  158A  2362         	fcall	_setLights_Trigger
  9265  0B61  0008               	return
  9266  0B62                     __end_of_setLights_SwOff:	
  9267                           
  9268                           	psect	text60
  9269  0B62                     __ptext60:	
  9270 ;; *************** function _setLights_Trigger *****************
  9271 ;; Defined at:
  9272 ;;		line 278 in file "../src/TriacRelay_B1.c"
  9273 ;; Parameters:    Size  Location     Type
  9274 ;;  lights          1    wreg     unsigned char 
  9275 ;;  command         1    0[BANK0 ] unsigned char 
  9276 ;; Auto vars:     Size  Location     Type
  9277 ;;  lights          1    2[BANK0 ] unsigned char 
  9278 ;; Return value:  Size  Location     Type
  9279 ;;		None               void
  9280 ;; Registers used:
  9281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9282 ;; Tracked objects:
  9283 ;;		On entry : 0/0
  9284 ;;		On exit  : 0/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9287 ;;      Params:         0       1       0       0
  9288 ;;      Locals:         0       1       0       0
  9289 ;;      Temps:          0       1       0       0
  9290 ;;      Totals:         0       3       0       0
  9291 ;;Total ram usage:        3 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; Hardware stack levels required when called:    3
  9294 ;; This function calls:
  9295 ;;		_LightsPointSelect
  9296 ;; This function is called by:
  9297 ;;		_setLights_SwOn
  9298 ;;		_setLights_SwOff
  9299 ;;		_setLights_ErrorClose
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           
  9304                           ;psect for function _setLights_Trigger
  9305  0B62                     _setLights_Trigger:	
  9306                           
  9307                           ;incstack = 0
  9308                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9309                           ;setLights_Trigger@lights stored from wreg
  9310  0B62  1283               	bcf	3,5	;RP0=0, select bank0
  9311  0B63  1303               	bcf	3,6	;RP1=0, select bank0
  9312  0B64  00D9               	movwf	setLights_Trigger@lights
  9313                           
  9314                           ;TriacRelay_B1.c: 279: LightsPointSelect(lights);
  9315  0B65  0859               	movf	setLights_Trigger@lights,w
  9316  0B66  158A  2242         	fcall	_LightsPointSelect
  9317                           
  9318                           ;TriacRelay_B1.c: 280: Lights->Trigger = 1;
  9319  0B68  0878               	movf	_Lights,w
  9320  0B69  0084               	movwf	4
  9321  0B6A  1383               	bcf	3,7	;select IRP bank0
  9322  0B6B  1580               	bsf	0,3
  9323                           
  9324                           ;TriacRelay_B1.c: 281: Lights->Switch = command == 1 ? 1 : 0;
  9325  0B6C  1283               	bcf	3,5	;RP0=0, select bank0
  9326  0B6D  1303               	bcf	3,6	;RP1=0, select bank0
  9327  0B6E  0857               	movf	setLights_Trigger@command,w
  9328  0B6F  3A01               	xorlw	1
  9329  0B70  3000               	movlw	0
  9330  0B71  1903               	skipnz
  9331  0B72  3001               	movlw	1
  9332  0B73  00D8               	movwf	??_setLights_Trigger
  9333  0B74  0878               	movf	_Lights,w
  9334  0B75  0084               	movwf	4
  9335  0B76  0ED8               	swapf	??_setLights_Trigger,f
  9336  0B77  0800               	movf	0,w
  9337  0B78  0658               	xorwf	??_setLights_Trigger,w
  9338  0B79  39EF               	andlw	-17
  9339  0B7A  0658               	xorwf	??_setLights_Trigger,w
  9340  0B7B  0080               	movwf	0
  9341  0B7C  0008               	return
  9342  0B7D                     __end_of_setLights_Trigger:	
  9343                           
  9344                           	psect	text61
  9345  0A42                     __ptext61:	
  9346 ;; *************** function _LightsPointSelect *****************
  9347 ;; Defined at:
  9348 ;;		line 10 in file "../src/TriacRelay_B1.c"
  9349 ;; Parameters:    Size  Location     Type
  9350 ;;  lights          1    wreg     unsigned char 
  9351 ;; Auto vars:     Size  Location     Type
  9352 ;;  lights          1    5[COMMON] unsigned char 
  9353 ;; Return value:  Size  Location     Type
  9354 ;;		None               void
  9355 ;; Registers used:
  9356 ;;		wreg
  9357 ;; Tracked objects:
  9358 ;;		On entry : 0/0
  9359 ;;		On exit  : 0/0
  9360 ;;		Unchanged: 0/0
  9361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9362 ;;      Params:         0       0       0       0
  9363 ;;      Locals:         1       0       0       0
  9364 ;;      Temps:          1       0       0       0
  9365 ;;      Totals:         2       0       0       0
  9366 ;;Total ram usage:        2 bytes
  9367 ;; Hardware stack levels used:    1
  9368 ;; Hardware stack levels required when called:    2
  9369 ;; This function calls:
  9370 ;;		Nothing
  9371 ;; This function is called by:
  9372 ;;		_setLights_Initialization
  9373 ;;		_setLights_Main
  9374 ;;		_Lights_Control
  9375 ;;		_getLights_Status
  9376 ;;		_setLights_Trigger
  9377 ;;		_setLights_SwOn
  9378 ;;		_setLights_SwOff
  9379 ;; This function uses a non-reentrant model
  9380 ;;
  9381                           
  9382                           
  9383                           ;psect for function _LightsPointSelect
  9384  0A42                     _LightsPointSelect:	
  9385                           
  9386                           ;incstack = 0
  9387                           ; Regs used in _LightsPointSelect: [wreg]
  9388                           ;LightsPointSelect@lights stored from wreg
  9389  0A42  00F5               	movwf	LightsPointSelect@lights
  9390                           
  9391                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  9392  0A43  0875               	movf	LightsPointSelect@lights,w
  9393  0A44  3A01               	xorlw	1
  9394  0A45  1D03               	skipz
  9395  0A46  2A4C               	goto	l5053
  9396                           
  9397                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  9398  0A47  3049               	movlw	_Lights1& (0+255)
  9399  0A48  00F4               	movwf	??_LightsPointSelect
  9400  0A49  0874               	movf	??_LightsPointSelect,w
  9401  0A4A  00F8               	movwf	_Lights
  9402                           
  9403                           ;TriacRelay_B1.c: 15: }
  9404  0A4B  0008               	return
  9405  0A4C                     l5053:	
  9406                           
  9407                           ;TriacRelay_B1.c: 19: else if (lights == 2) {
  9408  0A4C  0875               	movf	LightsPointSelect@lights,w
  9409  0A4D  3A02               	xorlw	2
  9410  0A4E  1D03               	skipz
  9411  0A4F  0008               	return
  9412                           
  9413                           ;TriacRelay_B1.c: 20: Lights = &Lights2;
  9414  0A50  304E               	movlw	_Lights2& (0+255)
  9415  0A51  00F4               	movwf	??_LightsPointSelect
  9416  0A52  0874               	movf	??_LightsPointSelect,w
  9417  0A53  00F8               	movwf	_Lights
  9418  0A54  0008               	return
  9419  0A55                     __end_of_LightsPointSelect:	
  9420                           
  9421                           	psect	text62
  9422  0E59                     __ptext62:	
  9423 ;; *************** function _setLED *****************
  9424 ;; Defined at:
  9425 ;;		line 81 in file "../src/LED_B1.c"
  9426 ;; Parameters:    Size  Location     Type
  9427 ;;  led             1    wreg     unsigned char 
  9428 ;;  command         1    0[BANK0 ] unsigned char 
  9429 ;; Auto vars:     Size  Location     Type
  9430 ;;  led             1    1[BANK0 ] unsigned char 
  9431 ;; Return value:  Size  Location     Type
  9432 ;;		None               void
  9433 ;; Registers used:
  9434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9435 ;; Tracked objects:
  9436 ;;		On entry : 0/0
  9437 ;;		On exit  : 0/0
  9438 ;;		Unchanged: 0/0
  9439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9440 ;;      Params:         0       1       0       0
  9441 ;;      Locals:         0       1       0       0
  9442 ;;      Temps:          0       0       0       0
  9443 ;;      Totals:         0       2       0       0
  9444 ;;Total ram usage:        2 bytes
  9445 ;; Hardware stack levels used:    1
  9446 ;; Hardware stack levels required when called:    3
  9447 ;; This function calls:
  9448 ;;		_LedPointSelect
  9449 ;; This function is called by:
  9450 ;;		_setLED_Initialization
  9451 ;;		_Exception_Main
  9452 ;;		_setSw_Main
  9453 ;;		_setLights
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457                           
  9458                           ;psect for function _setLED
  9459  0E59                     _setLED:	
  9460                           
  9461                           ;incstack = 0
  9462                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9463                           ;setLED@led stored from wreg
  9464  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  9465  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  9466  0E5B  00D8               	movwf	setLED@led
  9467                           
  9468                           ;LED_B1.c: 82: LedPointSelect(led);
  9469  0E5C  0858               	movf	setLED@led,w
  9470  0E5D  158A  232E  158A   	fcall	_LedPointSelect
  9471                           
  9472                           ;LED_B1.c: 83: if (command == 0) {
  9473  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  9474  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  9475  0E62  08D7               	movf	setLED@command,f
  9476  0E63  1D03               	skipz
  9477  0E64  2E72               	goto	l5073
  9478                           
  9479                           ;LED_B1.c: 85: if (led == 1) {
  9480  0E65  0858               	movf	setLED@led,w
  9481  0E66  3A01               	xorlw	1
  9482  0E67  1D03               	skipz
  9483  0E68  2E6A               	goto	l5065
  9484                           
  9485                           ;LED_B1.c: 89: RC7 = 1;
  9486  0E69  1787               	bsf	7,7	;volatile
  9487  0E6A                     l5065:	
  9488                           
  9489                           ;LED_B1.c: 91: }
  9490                           ;LED_B1.c: 94: if (led == 2) {
  9491  0E6A  0858               	movf	setLED@led,w
  9492  0E6B  3A02               	xorlw	2
  9493  0E6C  1903               	btfsc	3,2
  9494                           
  9495                           ;LED_B1.c: 98: RC6 = 1;
  9496  0E6D  1707               	bsf	7,6	;volatile
  9497                           
  9498                           ;LED_B1.c: 100: }
  9499                           ;LED_B1.c: 112: if (led == 99) {
  9500  0E6E  0858               	movf	setLED@led,w
  9501  0E6F  3A63               	xorlw	99
  9502  0E70  1903               	btfsc	3,2
  9503                           
  9504                           ;LED_B1.c: 116: RC1 = 1;
  9505  0E71  1487               	bsf	7,1	;volatile
  9506  0E72                     l5073:	
  9507                           
  9508                           ;LED_B1.c: 118: }
  9509                           ;LED_B1.c: 120: }
  9510                           ;LED_B1.c: 121: if (command == 1) {
  9511  0E72  0857               	movf	setLED@command,w
  9512  0E73  3A01               	xorlw	1
  9513  0E74  1D03               	skipz
  9514  0E75  2E83               	goto	l5087
  9515                           
  9516                           ;LED_B1.c: 123: if (led == 1) {
  9517  0E76  0858               	movf	setLED@led,w
  9518  0E77  3A01               	xorlw	1
  9519  0E78  1D03               	skipz
  9520  0E79  2E7B               	goto	l5079
  9521                           
  9522                           ;LED_B1.c: 127: RC7 = 0;
  9523  0E7A  1387               	bcf	7,7	;volatile
  9524  0E7B                     l5079:	
  9525                           
  9526                           ;LED_B1.c: 129: }
  9527                           ;LED_B1.c: 132: if (led == 2) {
  9528  0E7B  0858               	movf	setLED@led,w
  9529  0E7C  3A02               	xorlw	2
  9530  0E7D  1903               	btfsc	3,2
  9531                           
  9532                           ;LED_B1.c: 136: RC6 = 0;
  9533  0E7E  1307               	bcf	7,6	;volatile
  9534                           
  9535                           ;LED_B1.c: 138: }
  9536                           ;LED_B1.c: 150: if (led == 99) {
  9537  0E7F  0858               	movf	setLED@led,w
  9538  0E80  3A63               	xorlw	99
  9539  0E81  1903               	btfsc	3,2
  9540                           
  9541                           ;LED_B1.c: 154: RC1 = 0;
  9542  0E82  1087               	bcf	7,1	;volatile
  9543  0E83                     l5087:	
  9544                           
  9545                           ;LED_B1.c: 156: }
  9546                           ;LED_B1.c: 158: }
  9547                           ;LED_B1.c: 159: if (command == 10) {
  9548  0E83  0857               	movf	setLED@command,w
  9549  0E84  3A0A               	xorlw	10
  9550  0E85  1D03               	skipz
  9551  0E86  2E9E               	goto	l5105
  9552                           
  9553                           ;LED_B1.c: 160: LED->GO = 0;
  9554  0E87  0876               	movf	_LED,w
  9555  0E88  0084               	movwf	4
  9556  0E89  1383               	bcf	3,7	;select IRP bank0
  9557  0E8A  1080               	bcf	0,1
  9558                           
  9559                           ;LED_B1.c: 161: LED->Time = 0;
  9560  0E8B  0A76               	incf	_LED,w
  9561  0E8C  0084               	movwf	4
  9562  0E8D  0180               	clrf	0
  9563  0E8E  0A84               	incf	4,f
  9564  0E8F  0180               	clrf	0
  9565                           
  9566                           ;LED_B1.c: 163: if (led == 1) {
  9567  0E90  0858               	movf	setLED@led,w
  9568  0E91  3A01               	xorlw	1
  9569  0E92  1D03               	skipz
  9570  0E93  2E96               	goto	l5097
  9571                           
  9572                           ;LED_B1.c: 167: RC7 = 1;
  9573  0E94  1787               	bsf	7,7	;volatile
  9574                           
  9575                           ;LED_B1.c: 169: }
  9576  0E95  2E9A               	goto	l5101
  9577  0E96                     l5097:	
  9578                           
  9579                           ;LED_B1.c: 172: else if (led == 2) {
  9580  0E96  0858               	movf	setLED@led,w
  9581  0E97  3A02               	xorlw	2
  9582  0E98  1903               	btfsc	3,2
  9583                           
  9584                           ;LED_B1.c: 176: RC6 = 1;
  9585  0E99  1707               	bsf	7,6	;volatile
  9586  0E9A                     l5101:	
  9587                           
  9588                           ;LED_B1.c: 178: }
  9589                           ;LED_B1.c: 190: if (led == 99) {
  9590  0E9A  0858               	movf	setLED@led,w
  9591  0E9B  3A63               	xorlw	99
  9592  0E9C  1903               	btfsc	3,2
  9593                           
  9594                           ;LED_B1.c: 194: RC1 = 1;
  9595  0E9D  1487               	bsf	7,1	;volatile
  9596  0E9E                     l5105:	
  9597                           
  9598                           ;LED_B1.c: 196: }
  9599                           ;LED_B1.c: 198: }
  9600                           ;LED_B1.c: 199: if (command == 11) {
  9601  0E9E  0857               	movf	setLED@command,w
  9602  0E9F  3A0B               	xorlw	11
  9603  0EA0  1D03               	skipz
  9604  0EA1  0008               	return
  9605                           
  9606                           ;LED_B1.c: 200: LED->GO = 1;
  9607  0EA2  0876               	movf	_LED,w
  9608  0EA3  0084               	movwf	4
  9609  0EA4  1383               	bcf	3,7	;select IRP bank0
  9610  0EA5  1480               	bsf	0,1
  9611  0EA6  0008               	return
  9612  0EA7                     __end_of_setLED:	
  9613                           
  9614                           	psect	text63
  9615  0B2E                     __ptext63:	
  9616 ;; *************** function _LedPointSelect *****************
  9617 ;; Defined at:
  9618 ;;		line 7 in file "../src/LED_B1.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;  led             1    wreg     unsigned char 
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;  led             1    5[COMMON] unsigned char 
  9623 ;; Return value:  Size  Location     Type
  9624 ;;		None               void
  9625 ;; Registers used:
  9626 ;;		wreg
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9632 ;;      Params:         0       0       0       0
  9633 ;;      Locals:         1       0       0       0
  9634 ;;      Temps:          1       0       0       0
  9635 ;;      Totals:         2       0       0       0
  9636 ;;Total ram usage:        2 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; Hardware stack levels required when called:    2
  9639 ;; This function calls:
  9640 ;;		Nothing
  9641 ;; This function is called by:
  9642 ;;		_setLED_Initialization
  9643 ;;		_setLED
  9644 ;;		_setLED_Main
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           
  9649                           ;psect for function _LedPointSelect
  9650  0B2E                     _LedPointSelect:	
  9651                           
  9652                           ;incstack = 0
  9653                           ; Regs used in _LedPointSelect: [wreg]
  9654                           ;LedPointSelect@led stored from wreg
  9655  0B2E  00F5               	movwf	LedPointSelect@led
  9656                           
  9657                           ;LED_B1.c: 9: if (led == 1) {
  9658  0B2F  0875               	movf	LedPointSelect@led,w
  9659  0B30  3A01               	xorlw	1
  9660  0B31  1D03               	skipz
  9661  0B32  2B37               	goto	l349
  9662                           
  9663                           ;LED_B1.c: 10: LED = &VarLED1;
  9664  0B33  30E6               	movlw	_VarLED1& (0+255)
  9665  0B34  00F4               	movwf	??_LedPointSelect
  9666  0B35  0874               	movf	??_LedPointSelect,w
  9667  0B36  00F6               	movwf	_LED
  9668  0B37                     l349:	
  9669                           
  9670                           ;LED_B1.c: 11: }
  9671                           ;LED_B1.c: 14: if (led == 2) {
  9672  0B37  0875               	movf	LedPointSelect@led,w
  9673  0B38  3A02               	xorlw	2
  9674  0B39  1D03               	skipz
  9675  0B3A  2B3F               	goto	l350
  9676                           
  9677                           ;LED_B1.c: 15: LED = &VarLED2;
  9678  0B3B  30EA               	movlw	_VarLED2& (0+255)
  9679  0B3C  00F4               	movwf	??_LedPointSelect
  9680  0B3D  0874               	movf	??_LedPointSelect,w
  9681  0B3E  00F6               	movwf	_LED
  9682  0B3F                     l350:	
  9683                           
  9684                           ;LED_B1.c: 16: }
  9685                           ;LED_B1.c: 24: if (led == 99) {
  9686  0B3F  0875               	movf	LedPointSelect@led,w
  9687  0B40  3A63               	xorlw	99
  9688  0B41  1D03               	skipz
  9689  0B42  0008               	return
  9690                           
  9691                           ;LED_B1.c: 25: LED = &VarErrLED;
  9692  0B43  3053               	movlw	_VarErrLED& (0+255)
  9693  0B44  00F4               	movwf	??_LedPointSelect
  9694  0B45  0874               	movf	??_LedPointSelect,w
  9695  0B46  00F6               	movwf	_LED
  9696  0B47  0008               	return
  9697  0B48                     __end_of_LedPointSelect:	
  9698                           
  9699                           	psect	text64
  9700  0E12                     __ptext64:	
  9701 ;; *************** function _setBuz *****************
  9702 ;; Defined at:
  9703 ;;		line 22 in file "../src/Buzzer_B1.c"
  9704 ;; Parameters:    Size  Location     Type
  9705 ;;  count           1    wreg     unsigned char 
  9706 ;;  time            2    8[BANK0 ] int 
  9707 ;; Auto vars:     Size  Location     Type
  9708 ;;  count           1   10[BANK0 ] unsigned char 
  9709 ;; Return value:  Size  Location     Type
  9710 ;;		None               void
  9711 ;; Registers used:
  9712 ;;		wreg, status,2, status,0, pclath, cstack
  9713 ;; Tracked objects:
  9714 ;;		On entry : 0/0
  9715 ;;		On exit  : 0/0
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9718 ;;      Params:         0       2       0       0
  9719 ;;      Locals:         0       1       0       0
  9720 ;;      Temps:          1       0       0       0
  9721 ;;      Totals:         1       3       0       0
  9722 ;;Total ram usage:        4 bytes
  9723 ;; Hardware stack levels used:    1
  9724 ;; Hardware stack levels required when called:    3
  9725 ;; This function calls:
  9726 ;;		___awdiv
  9727 ;; This function is called by:
  9728 ;;		_my_MainTimer
  9729 ;;		_Exception_Main
  9730 ;;		_setTemp_Main
  9731 ;; This function uses a non-reentrant model
  9732 ;;
  9733                           
  9734                           
  9735                           ;psect for function _setBuz
  9736  0E12                     _setBuz:	
  9737                           
  9738                           ;incstack = 0
  9739                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
  9740                           ;setBuz@count stored from wreg
  9741  0E12  1283               	bcf	3,5	;RP0=0, select bank0
  9742  0E13  1303               	bcf	3,6	;RP1=0, select bank0
  9743  0E14  00E1               	movwf	setBuz@count
  9744                           
  9745                           ;Buzzer_B1.c: 23: time /= 20;
  9746  0E15  3014               	movlw	20
  9747  0E16  00D7               	movwf	___awdiv@divisor
  9748  0E17  3000               	movlw	0
  9749  0E18  00D8               	movwf	___awdiv@divisor+1
  9750  0E19  0860               	movf	setBuz@time+1,w
  9751  0E1A  01DA               	clrf	___awdiv@dividend+1
  9752  0E1B  07DA               	addwf	___awdiv@dividend+1,f
  9753  0E1C  085F               	movf	setBuz@time,w
  9754  0E1D  01D9               	clrf	___awdiv@dividend
  9755  0E1E  07D9               	addwf	___awdiv@dividend,f
  9756  0E1F  158A  26A7  158A   	fcall	___awdiv
  9757  0E22  1283               	bcf	3,5	;RP0=0, select bank0
  9758  0E23  1303               	bcf	3,6	;RP1=0, select bank0
  9759  0E24  0858               	movf	?___awdiv+1,w
  9760  0E25  01E0               	clrf	setBuz@time+1
  9761  0E26  07E0               	addwf	setBuz@time+1,f
  9762  0E27  0857               	movf	?___awdiv,w
  9763  0E28  01DF               	clrf	setBuz@time
  9764  0E29  07DF               	addwf	setBuz@time,f
  9765                           
  9766                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
  9767  0E2A  1C20               	btfss	_Buz1,0
  9768  0E2B  0008               	return
  9769                           
  9770                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
  9771  0E2C  18A0               	btfsc	_Buz1,1
  9772  0E2D  2E3D               	goto	l58
  9773                           
  9774                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
  9775  0E2E  14A0               	bsf	_Buz1,1
  9776                           
  9777                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
  9778  0E2F  01A1               	clrf	_Buz1+1
  9779  0E30  01A2               	clrf	_Buz1+2
  9780                           
  9781                           ;Buzzer_B1.c: 28: Buz1.Count = count;
  9782  0E31  0861               	movf	setBuz@count,w
  9783  0E32  00F5               	movwf	??_setBuz
  9784  0E33  0875               	movf	??_setBuz,w
  9785  0E34  00A3               	movwf	_Buz1+3
  9786                           
  9787                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
  9788  0E35  0860               	movf	setBuz@time+1,w
  9789  0E36  01A7               	clrf	_Buz1+7
  9790  0E37  07A7               	addwf	_Buz1+7,f
  9791  0E38  085F               	movf	setBuz@time,w
  9792  0E39  01A6               	clrf	_Buz1+6
  9793  0E3A  07A6               	addwf	_Buz1+6,f
  9794                           
  9795                           ;Buzzer_B1.c: 30: RC0 = 1;
  9796  0E3B  1407               	bsf	7,0	;volatile
  9797                           
  9798                           ;Buzzer_B1.c: 31: } else {
  9799  0E3C  0008               	return
  9800  0E3D                     l58:	
  9801                           
  9802                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
  9803  0E3D  19A0               	btfsc	_Buz1,3
  9804  0E3E  2E4B               	goto	l60
  9805                           
  9806                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
  9807  0E3F  15A0               	bsf	_Buz1,3
  9808                           
  9809                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
  9810  0E40  0861               	movf	setBuz@count,w
  9811  0E41  00F5               	movwf	??_setBuz
  9812  0E42  0875               	movf	??_setBuz,w
  9813  0E43  00A4               	movwf	_Buz1+4
  9814                           
  9815                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
  9816  0E44  0860               	movf	setBuz@time+1,w
  9817  0E45  01A9               	clrf	_Buz1+9
  9818  0E46  07A9               	addwf	_Buz1+9,f
  9819  0E47  085F               	movf	setBuz@time,w
  9820  0E48  01A8               	clrf	_Buz1+8
  9821  0E49  07A8               	addwf	_Buz1+8,f
  9822                           
  9823                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
  9824  0E4A  0008               	return
  9825  0E4B                     l60:	
  9826  0E4B  1A20               	btfsc	_Buz1,4
  9827  0E4C  0008               	return
  9828                           
  9829                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
  9830  0E4D  1620               	bsf	_Buz1,4
  9831                           
  9832                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
  9833  0E4E  0861               	movf	setBuz@count,w
  9834  0E4F  00F5               	movwf	??_setBuz
  9835  0E50  0875               	movf	??_setBuz,w
  9836  0E51  00A5               	movwf	_Buz1+5
  9837                           
  9838                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
  9839  0E52  0860               	movf	setBuz@time+1,w
  9840  0E53  01AB               	clrf	_Buz1+11
  9841  0E54  07AB               	addwf	_Buz1+11,f
  9842  0E55  085F               	movf	setBuz@time,w
  9843  0E56  01AA               	clrf	_Buz1+10
  9844  0E57  07AA               	addwf	_Buz1+10,f
  9845  0E58  0008               	return
  9846  0E59                     __end_of_setBuz:	
  9847                           
  9848                           	psect	text65
  9849  0EA7                     __ptext65:	
  9850 ;; *************** function ___awdiv *****************
  9851 ;; Defined at:
  9852 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  9853 ;; Parameters:    Size  Location     Type
  9854 ;;  divisor         2    0[BANK0 ] int 
  9855 ;;  dividend        2    2[BANK0 ] int 
  9856 ;; Auto vars:     Size  Location     Type
  9857 ;;  quotient        2    6[BANK0 ] int 
  9858 ;;  sign            1    5[BANK0 ] unsigned char 
  9859 ;;  counter         1    4[BANK0 ] unsigned char 
  9860 ;; Return value:  Size  Location     Type
  9861 ;;                  2    0[BANK0 ] int 
  9862 ;; Registers used:
  9863 ;;		wreg, status,2, status,0
  9864 ;; Tracked objects:
  9865 ;;		On entry : 0/0
  9866 ;;		On exit  : 0/0
  9867 ;;		Unchanged: 0/0
  9868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9869 ;;      Params:         0       4       0       0
  9870 ;;      Locals:         0       4       0       0
  9871 ;;      Temps:          1       0       0       0
  9872 ;;      Totals:         1       8       0       0
  9873 ;;Total ram usage:        9 bytes
  9874 ;; Hardware stack levels used:    1
  9875 ;; Hardware stack levels required when called:    2
  9876 ;; This function calls:
  9877 ;;		Nothing
  9878 ;; This function is called by:
  9879 ;;		_setBuz
  9880 ;;		_getPIR_AD
  9881 ;;		_Lights_Control
  9882 ;; This function uses a non-reentrant model
  9883 ;;
  9884                           
  9885                           
  9886                           ;psect for function ___awdiv
  9887  0EA7                     ___awdiv:	
  9888                           
  9889                           ;incstack = 0
  9890                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9891  0EA7  1283               	bcf	3,5	;RP0=0, select bank0
  9892  0EA8  1303               	bcf	3,6	;RP1=0, select bank0
  9893  0EA9  01DC               	clrf	___awdiv@sign
  9894  0EAA  1FD8               	btfss	___awdiv@divisor+1,7
  9895  0EAB  2EB3               	goto	l5137
  9896  0EAC  09D7               	comf	___awdiv@divisor,f
  9897  0EAD  09D8               	comf	___awdiv@divisor+1,f
  9898  0EAE  0AD7               	incf	___awdiv@divisor,f
  9899  0EAF  1903               	skipnz
  9900  0EB0  0AD8               	incf	___awdiv@divisor+1,f
  9901  0EB1  01DC               	clrf	___awdiv@sign
  9902  0EB2  0ADC               	incf	___awdiv@sign,f
  9903  0EB3                     l5137:	
  9904  0EB3  1FDA               	btfss	___awdiv@dividend+1,7
  9905  0EB4  2EBE               	goto	l5143
  9906  0EB5  09D9               	comf	___awdiv@dividend,f
  9907  0EB6  09DA               	comf	___awdiv@dividend+1,f
  9908  0EB7  0AD9               	incf	___awdiv@dividend,f
  9909  0EB8  1903               	skipnz
  9910  0EB9  0ADA               	incf	___awdiv@dividend+1,f
  9911  0EBA  3001               	movlw	1
  9912  0EBB  00F4               	movwf	??___awdiv
  9913  0EBC  0874               	movf	??___awdiv,w
  9914  0EBD  06DC               	xorwf	___awdiv@sign,f
  9915  0EBE                     l5143:	
  9916  0EBE  01DD               	clrf	___awdiv@quotient
  9917  0EBF  01DE               	clrf	___awdiv@quotient+1
  9918  0EC0  0858               	movf	___awdiv@divisor+1,w
  9919  0EC1  0457               	iorwf	___awdiv@divisor,w
  9920  0EC2  1903               	skipnz
  9921  0EC3  2EF5               	goto	l5165
  9922  0EC4  01DB               	clrf	___awdiv@counter
  9923  0EC5  0ADB               	incf	___awdiv@counter,f
  9924  0EC6                     l5153:	
  9925  0EC6  1BD8               	btfsc	___awdiv@divisor+1,7
  9926  0EC7  2ED4               	goto	l5155
  9927  0EC8  3001               	movlw	1
  9928  0EC9                     u5745:	
  9929  0EC9  1003               	clrc
  9930  0ECA  0DD7               	rlf	___awdiv@divisor,f
  9931  0ECB  0DD8               	rlf	___awdiv@divisor+1,f
  9932  0ECC  3EFF               	addlw	-1
  9933  0ECD  1D03               	skipz
  9934  0ECE  2EC9               	goto	u5745
  9935  0ECF  3001               	movlw	1
  9936  0ED0  00F4               	movwf	??___awdiv
  9937  0ED1  0874               	movf	??___awdiv,w
  9938  0ED2  07DB               	addwf	___awdiv@counter,f
  9939  0ED3  2EC6               	goto	l5153
  9940  0ED4                     l5155:	
  9941  0ED4  3001               	movlw	1
  9942  0ED5                     u5765:	
  9943  0ED5  1003               	clrc
  9944  0ED6  0DDD               	rlf	___awdiv@quotient,f
  9945  0ED7  0DDE               	rlf	___awdiv@quotient+1,f
  9946  0ED8  3EFF               	addlw	-1
  9947  0ED9  1D03               	skipz
  9948  0EDA  2ED5               	goto	u5765
  9949  0EDB  0858               	movf	___awdiv@divisor+1,w
  9950  0EDC  025A               	subwf	___awdiv@dividend+1,w
  9951  0EDD  1D03               	skipz
  9952  0EDE  2EE1               	goto	u5775
  9953  0EDF  0857               	movf	___awdiv@divisor,w
  9954  0EE0  0259               	subwf	___awdiv@dividend,w
  9955  0EE1                     u5775:	
  9956  0EE1  1C03               	skipc
  9957  0EE2  2EEA               	goto	l5161
  9958  0EE3  0857               	movf	___awdiv@divisor,w
  9959  0EE4  02D9               	subwf	___awdiv@dividend,f
  9960  0EE5  0858               	movf	___awdiv@divisor+1,w
  9961  0EE6  1C03               	skipc
  9962  0EE7  03DA               	decf	___awdiv@dividend+1,f
  9963  0EE8  02DA               	subwf	___awdiv@dividend+1,f
  9964  0EE9  145D               	bsf	___awdiv@quotient,0
  9965  0EEA                     l5161:	
  9966  0EEA  3001               	movlw	1
  9967  0EEB                     u5785:	
  9968  0EEB  1003               	clrc
  9969  0EEC  0CD8               	rrf	___awdiv@divisor+1,f
  9970  0EED  0CD7               	rrf	___awdiv@divisor,f
  9971  0EEE  3EFF               	addlw	-1
  9972  0EEF  1D03               	skipz
  9973  0EF0  2EEB               	goto	u5785
  9974  0EF1  3001               	movlw	1
  9975  0EF2  02DB               	subwf	___awdiv@counter,f
  9976  0EF3  1D03               	btfss	3,2
  9977  0EF4  2ED4               	goto	l5155
  9978  0EF5                     l5165:	
  9979  0EF5  085C               	movf	___awdiv@sign,w
  9980  0EF6  1903               	btfsc	3,2
  9981  0EF7  2EFD               	goto	l5169
  9982  0EF8  09DD               	comf	___awdiv@quotient,f
  9983  0EF9  09DE               	comf	___awdiv@quotient+1,f
  9984  0EFA  0ADD               	incf	___awdiv@quotient,f
  9985  0EFB  1903               	skipnz
  9986  0EFC  0ADE               	incf	___awdiv@quotient+1,f
  9987  0EFD                     l5169:	
  9988  0EFD  085E               	movf	___awdiv@quotient+1,w
  9989  0EFE  01D8               	clrf	?___awdiv+1
  9990  0EFF  07D8               	addwf	?___awdiv+1,f
  9991  0F00  085D               	movf	___awdiv@quotient,w
  9992  0F01  01D7               	clrf	?___awdiv
  9993  0F02  07D7               	addwf	?___awdiv,f
  9994  0F03  0008               	return
  9995  0F04                     __end_of___awdiv:	
  9996                           
  9997                           	psect	text66
  9998  09FE                     __ptext66:	
  9999 ;; *************** function _getMain_All_LightsStatus *****************
 10000 ;; Defined at:
 10001 ;;		line 373 in file "../src/Main_B1.c"
 10002 ;; Parameters:    Size  Location     Type
 10003 ;;		None
 10004 ;; Auto vars:     Size  Location     Type
 10005 ;;  status          1    4[COMMON] unsigned char 
 10006 ;; Return value:  Size  Location     Type
 10007 ;;                  1    wreg      unsigned char 
 10008 ;; Registers used:
 10009 ;;		wreg, status,2, status,0
 10010 ;; Tracked objects:
 10011 ;;		On entry : 0/0
 10012 ;;		On exit  : 0/0
 10013 ;;		Unchanged: 0/0
 10014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10015 ;;      Params:         0       0       0       0
 10016 ;;      Locals:         1       0       0       0
 10017 ;;      Temps:          0       0       0       0
 10018 ;;      Totals:         1       0       0       0
 10019 ;;Total ram usage:        1 bytes
 10020 ;; Hardware stack levels used:    1
 10021 ;; Hardware stack levels required when called:    2
 10022 ;; This function calls:
 10023 ;;		Nothing
 10024 ;; This function is called by:
 10025 ;;		_Exception_Main
 10026 ;;		_Load_Main
 10027 ;;		_setTemp_Main
 10028 ;;		_Lights_Main
 10029 ;; This function uses a non-reentrant model
 10030 ;;
 10031                           
 10032                           
 10033                           ;psect for function _getMain_All_LightsStatus
 10034  09FE                     _getMain_All_LightsStatus:	
 10035                           
 10036                           ;Main_B1.c: 374: char status = 0;
 10037                           
 10038                           ;incstack = 0
 10039                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 10040  09FE  01F4               	clrf	getMain_All_LightsStatus@status
 10041                           
 10042                           ;Main_B1.c: 387: status = Lights1.Status == 1 ? 1 : 0;
 10043  09FF  3000               	movlw	0
 10044  0A00  1283               	bcf	3,5	;RP0=0, select bank0
 10045  0A01  1303               	bcf	3,6	;RP1=0, select bank0
 10046  0A02  1949               	btfsc	_Lights1,2
 10047  0A03  3001               	movlw	1
 10048  0A04  00F4               	movwf	getMain_All_LightsStatus@status
 10049                           
 10050                           ;Main_B1.c: 388: if (status == 0) {
 10051  0A05  08F4               	movf	getMain_All_LightsStatus@status,f
 10052  0A06  1D03               	skipz
 10053  0A07  2A0C               	goto	l3749
 10054                           
 10055                           ;Main_B1.c: 389: status = Lights2.Status == 1 ? 1 : 0;
 10056  0A08  3000               	movlw	0
 10057  0A09  194E               	btfsc	_Lights2,2
 10058  0A0A  3001               	movlw	1
 10059  0A0B  00F4               	movwf	getMain_All_LightsStatus@status
 10060  0A0C                     l3749:	
 10061                           
 10062                           ;Main_B1.c: 390: }
 10063                           ;Main_B1.c: 420: return status;
 10064  0A0C  0874               	movf	getMain_All_LightsStatus@status,w
 10065  0A0D  0008               	return
 10066  0A0E                     __end_of_getMain_All_LightsStatus:	
 10067                           
 10068                           	psect	text67
 10069  0D0C                     __ptext67:	
 10070 ;; *************** function _getMain_All_Error_Status *****************
 10071 ;; Defined at:
 10072 ;;		line 424 in file "../src/Main_B1.c"
 10073 ;; Parameters:    Size  Location     Type
 10074 ;;  command         1    wreg     unsigned char 
 10075 ;; Auto vars:     Size  Location     Type
 10076 ;;  command         1    4[BANK0 ] unsigned char 
 10077 ;;  status          1    5[BANK0 ] unsigned char 
 10078 ;; Return value:  Size  Location     Type
 10079 ;;                  1    wreg      unsigned char 
 10080 ;; Registers used:
 10081 ;;		wreg, status,2, status,0
 10082 ;; Tracked objects:
 10083 ;;		On entry : 0/0
 10084 ;;		On exit  : 0/0
 10085 ;;		Unchanged: 0/0
 10086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10087 ;;      Params:         0       0       0       0
 10088 ;;      Locals:         0       6       0       0
 10089 ;;      Temps:          1       0       0       0
 10090 ;;      Totals:         1       6       0       0
 10091 ;;Total ram usage:        7 bytes
 10092 ;; Hardware stack levels used:    1
 10093 ;; Hardware stack levels required when called:    2
 10094 ;; This function calls:
 10095 ;;		Nothing
 10096 ;; This function is called by:
 10097 ;;		_Exception_Main
 10098 ;;		_Load_Main
 10099 ;;		_setTemp_Main
 10100 ;;		_PIR_Main
 10101 ;;		_setSYSC_Main
 10102 ;;		_setSw_Main
 10103 ;;		_Lights_Main
 10104 ;; This function uses a non-reentrant model
 10105 ;;
 10106                           
 10107                           
 10108                           ;psect for function _getMain_All_Error_Status
 10109  0D0C                     _getMain_All_Error_Status:	
 10110                           
 10111                           ;incstack = 0
 10112                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 10113                           ;getMain_All_Error_Status@command stored from wreg
 10114  0D0C  1283               	bcf	3,5	;RP0=0, select bank0
 10115  0D0D  1303               	bcf	3,6	;RP1=0, select bank0
 10116  0D0E  00DB               	movwf	getMain_All_Error_Status@command
 10117                           
 10118                           ;Main_B1.c: 425: char status = 0;
 10119  0D0F  01DC               	clrf	getMain_All_Error_Status@status
 10120                           
 10121                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
 10122  0D10  08DC               	movf	getMain_All_Error_Status@status,f
 10123  0D11  1D03               	skipz
 10124  0D12  2D1B               	goto	l3761
 10125  0D13  085B               	movf	getMain_All_Error_Status@command,w
 10126  0D14  3A01               	xorlw	1
 10127  0D15  1903               	skipnz
 10128  0D16  2D1B               	goto	l3761
 10129                           
 10130                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
 10131  0D17  3000               	movlw	0
 10132  0D18  18AC               	btfsc	_SYSC,1
 10133  0D19  3001               	movlw	1
 10134  0D1A  00DC               	movwf	getMain_All_Error_Status@status
 10135  0D1B                     l3761:	
 10136                           
 10137                           ;Main_B1.c: 430: }
 10138                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 10139  0D1B  08DC               	movf	getMain_All_Error_Status@status,f
 10140  0D1C  1D03               	skipz
 10141  0D1D  2D2F               	goto	l3771
 10142  0D1E  085B               	movf	getMain_All_Error_Status@command,w
 10143  0D1F  3A02               	xorlw	2
 10144  0D20  1903               	skipnz
 10145  0D21  2D2F               	goto	l3771
 10146                           
 10147                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 10148  0D22  18C2               	btfsc	_Temp,1
 10149  0D23  2D27               	goto	l3769
 10150  0D24  01D7               	clrf	_getMain_All_Error_Status$2426
 10151  0D25  01D8               	clrf	_getMain_All_Error_Status$2426+1
 10152  0D26  2D2B               	goto	l700
 10153  0D27                     l3769:	
 10154  0D27  3002               	movlw	2
 10155  0D28  00D7               	movwf	_getMain_All_Error_Status$2426
 10156  0D29  3000               	movlw	0
 10157  0D2A  00D8               	movwf	_getMain_All_Error_Status$2426+1
 10158  0D2B                     l700:	
 10159  0D2B  0857               	movf	_getMain_All_Error_Status$2426,w
 10160  0D2C  00F4               	movwf	??_getMain_All_Error_Status
 10161  0D2D  0874               	movf	??_getMain_All_Error_Status,w
 10162  0D2E  00DC               	movwf	getMain_All_Error_Status@status
 10163  0D2F                     l3771:	
 10164                           
 10165                           ;Main_B1.c: 438: }
 10166                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 10167  0D2F  08DC               	movf	getMain_All_Error_Status@status,f
 10168  0D30  1D03               	skipz
 10169  0D31  2D48               	goto	l701
 10170  0D32  085B               	movf	getMain_All_Error_Status@command,w
 10171  0D33  3A03               	xorlw	3
 10172  0D34  1903               	skipnz
 10173  0D35  2D48               	goto	l701
 10174                           
 10175                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 10176  0D36  1683               	bsf	3,5	;RP0=1, select bank1
 10177  0D37  1303               	bcf	3,6	;RP1=0, select bank1
 10178  0D38  1ACA               	btfsc	_Load^(0+128),5
 10179  0D39  2D3F               	goto	l3779
 10180  0D3A  1283               	bcf	3,5	;RP0=0, select bank0
 10181  0D3B  1303               	bcf	3,6	;RP1=0, select bank0
 10182  0D3C  01D9               	clrf	_getMain_All_Error_Status$2427
 10183  0D3D  01DA               	clrf	_getMain_All_Error_Status$2427+1
 10184  0D3E  2D44               	goto	l705
 10185  0D3F                     l3779:	
 10186  0D3F  3003               	movlw	3
 10187  0D40  1283               	bcf	3,5	;RP0=0, select bank0
 10188  0D41  00D9               	movwf	_getMain_All_Error_Status$2427
 10189  0D42  3000               	movlw	0
 10190  0D43  00DA               	movwf	_getMain_All_Error_Status$2427+1
 10191  0D44                     l705:	
 10192  0D44  0859               	movf	_getMain_All_Error_Status$2427,w
 10193  0D45  00F4               	movwf	??_getMain_All_Error_Status
 10194  0D46  0874               	movf	??_getMain_All_Error_Status,w
 10195  0D47  00DC               	movwf	getMain_All_Error_Status@status
 10196  0D48                     l701:	
 10197                           
 10198                           ;Main_B1.c: 445: }
 10199                           ;Main_B1.c: 455: return status;
 10200  0D48  085C               	movf	getMain_All_Error_Status@status,w
 10201  0D49  0008               	return
 10202  0D4A                     __end_of_getMain_All_Error_Status:	
 10203                           
 10204                           	psect	text68
 10205  09EE                     __ptext68:	
 10206 ;; *************** function _getAll_Lights_Line *****************
 10207 ;; Defined at:
 10208 ;;		line 310 in file "../src/TriacRelay_B1.c"
 10209 ;; Parameters:    Size  Location     Type
 10210 ;;		None
 10211 ;; Auto vars:     Size  Location     Type
 10212 ;;  line            1    5[COMMON] unsigned char 
 10213 ;; Return value:  Size  Location     Type
 10214 ;;                  1    wreg      unsigned char 
 10215 ;; Registers used:
 10216 ;;		wreg, status,2
 10217 ;; Tracked objects:
 10218 ;;		On entry : 0/0
 10219 ;;		On exit  : 0/0
 10220 ;;		Unchanged: 0/0
 10221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10222 ;;      Params:         0       0       0       0
 10223 ;;      Locals:         1       0       0       0
 10224 ;;      Temps:          1       0       0       0
 10225 ;;      Totals:         2       0       0       0
 10226 ;;Total ram usage:        2 bytes
 10227 ;; Hardware stack levels used:    1
 10228 ;; Hardware stack levels required when called:    2
 10229 ;; This function calls:
 10230 ;;		Nothing
 10231 ;; This function is called by:
 10232 ;;		_Exception_Main
 10233 ;; This function uses a non-reentrant model
 10234 ;;
 10235                           
 10236                           
 10237                           ;psect for function _getAll_Lights_Line
 10238  09EE                     _getAll_Lights_Line:	
 10239                           
 10240                           ;TriacRelay_B1.c: 311: char line = 0;
 10241                           
 10242                           ;incstack = 0
 10243                           ; Regs used in _getAll_Lights_Line: [wreg+status,2]
 10244  09EE  01F5               	clrf	getAll_Lights_Line@line
 10245                           
 10246                           ;TriacRelay_B1.c: 313: if (Lights1.Line == 1) {
 10247  09EF  1283               	bcf	3,5	;RP0=0, select bank0
 10248  09F0  1303               	bcf	3,6	;RP1=0, select bank0
 10249  09F1  1C4A               	btfss	_Lights1+1,0
 10250  09F2  29F6               	goto	l1596
 10251                           
 10252                           ;TriacRelay_B1.c: 314: line = 1;
 10253  09F3  01F5               	clrf	getAll_Lights_Line@line
 10254  09F4  0AF5               	incf	getAll_Lights_Line@line,f
 10255                           
 10256                           ;TriacRelay_B1.c: 315: }
 10257  09F5  29FC               	goto	l1597
 10258  09F6                     l1596:	
 10259                           
 10260                           ;TriacRelay_B1.c: 318: else if (Lights2.Line == 1) {
 10261  09F6  1C4F               	btfss	_Lights2+1,0
 10262  09F7  29FC               	goto	l1597
 10263                           
 10264                           ;TriacRelay_B1.c: 319: line = 2;
 10265  09F8  3002               	movlw	2
 10266  09F9  00F4               	movwf	??_getAll_Lights_Line
 10267  09FA  0874               	movf	??_getAll_Lights_Line,w
 10268  09FB  00F5               	movwf	getAll_Lights_Line@line
 10269  09FC                     l1597:	
 10270                           
 10271                           ;TriacRelay_B1.c: 320: }
 10272                           ;TriacRelay_B1.c: 327: return line;
 10273  09FC  0875               	movf	getAll_Lights_Line@line,w
 10274  09FD  0008               	return
 10275  09FE                     __end_of_getAll_Lights_Line:	
 10276                           
 10277                           	psect	text69
 10278  09A6                     __ptext69:	
 10279 ;; *************** function _DetectSYSC_Signal *****************
 10280 ;; Defined at:
 10281 ;;		line 50 in file "../src/SYSC_B1.c"
 10282 ;; Parameters:    Size  Location     Type
 10283 ;;		None
 10284 ;; Auto vars:     Size  Location     Type
 10285 ;;		None
 10286 ;; Return value:  Size  Location     Type
 10287 ;;		None               void
 10288 ;; Registers used:
 10289 ;;		status,2
 10290 ;; Tracked objects:
 10291 ;;		On entry : 0/0
 10292 ;;		On exit  : 0/0
 10293 ;;		Unchanged: 0/0
 10294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10295 ;;      Params:         0       0       0       0
 10296 ;;      Locals:         0       0       0       0
 10297 ;;      Temps:          0       0       0       0
 10298 ;;      Totals:         0       0       0       0
 10299 ;;Total ram usage:        0 bytes
 10300 ;; Hardware stack levels used:    1
 10301 ;; Hardware stack levels required when called:    2
 10302 ;; This function calls:
 10303 ;;		Nothing
 10304 ;; This function is called by:
 10305 ;;		_main
 10306 ;; This function uses a non-reentrant model
 10307 ;;
 10308                           
 10309                           
 10310                           ;psect for function _DetectSYSC_Signal
 10311  09A6                     _DetectSYSC_Signal:	
 10312                           
 10313                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
 10314                           
 10315                           ;incstack = 0
 10316                           ; Regs used in _DetectSYSC_Signal: [status,2]
 10317  09A6  1283               	bcf	3,5	;RP0=0, select bank0
 10318  09A7  1303               	bcf	3,6	;RP1=0, select bank0
 10319  09A8  19AC               	btfsc	_SYSC,3
 10320  09A9  29B0               	goto	l1280
 10321                           
 10322                           ;SYSC_B1.c: 52: if (RB2 == 1) {
 10323  09AA  1D06               	btfss	6,2	;volatile
 10324  09AB  0008               	return
 10325                           
 10326                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
 10327  09AC  15AC               	bsf	_SYSC,3
 10328                           
 10329                           ;SYSC_B1.c: 54: SYSC.Time = 0;
 10330  09AD  01AD               	clrf	_SYSC+1
 10331  09AE  01AE               	clrf	_SYSC+2
 10332                           
 10333                           ;SYSC_B1.c: 55: }
 10334                           ;SYSC_B1.c: 56: } else {
 10335  09AF  0008               	return
 10336  09B0                     l1280:	
 10337                           
 10338                           ;SYSC_B1.c: 57: if (RB2 == 0) {
 10339  09B0  1906               	btfsc	6,2	;volatile
 10340  09B1  0008               	return
 10341                           
 10342                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
 10343  09B2  11AC               	bcf	_SYSC,3
 10344  09B3  0008               	return
 10345  09B4                     __end_of_DetectSYSC_Signal:	
 10346                           
 10347                           	psect	text70
 10348  0C9D                     __ptext70:	
 10349 ;; *************** function _CDS_Main *****************
 10350 ;; Defined at:
 10351 ;;		line 11 in file "../src/CDS_B1.c"
 10352 ;; Parameters:    Size  Location     Type
 10353 ;;		None
 10354 ;; Auto vars:     Size  Location     Type
 10355 ;;		None
 10356 ;; Return value:  Size  Location     Type
 10357 ;;		None               void
 10358 ;; Registers used:
 10359 ;;		wreg, status,2, status,0
 10360 ;; Tracked objects:
 10361 ;;		On entry : 0/0
 10362 ;;		On exit  : 0/0
 10363 ;;		Unchanged: 0/0
 10364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10365 ;;      Params:         0       0       0       0
 10366 ;;      Locals:         0       0       0       0
 10367 ;;      Temps:          0       3       0       0
 10368 ;;      Totals:         0       3       0       0
 10369 ;;Total ram usage:        3 bytes
 10370 ;; Hardware stack levels used:    1
 10371 ;; Hardware stack levels required when called:    2
 10372 ;; This function calls:
 10373 ;;		Nothing
 10374 ;; This function is called by:
 10375 ;;		_main
 10376 ;; This function uses a non-reentrant model
 10377 ;;
 10378                           
 10379                           
 10380                           ;psect for function _CDS_Main
 10381  0C9D                     _CDS_Main:	
 10382                           
 10383                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
 10384                           
 10385                           ;incstack = 0
 10386                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
 10387  0C9D  1283               	bcf	3,5	;RP0=0, select bank0
 10388  0C9E  1303               	bcf	3,6	;RP1=0, select bank0
 10389  0C9F  1C36               	btfss	__CDS,0
 10390  0CA0  0008               	return
 10391                           
 10392                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
 10393  0CA1  18B6               	btfsc	__CDS,1
 10394  0CA2  2CB0               	goto	l180
 10395                           
 10396                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
 10397  0CA3  19B6               	btfsc	__CDS,3
 10398  0CA4  0008               	return
 10399                           
 10400                           ;CDS_B1.c: 16: _CDS.Time++;
 10401  0CA5  3001               	movlw	1
 10402  0CA6  00D7               	movwf	??_CDS_Main
 10403  0CA7  0857               	movf	??_CDS_Main,w
 10404  0CA8  07B7               	addwf	__CDS+1,f
 10405                           
 10406                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
 10407  0CA9  3005               	movlw	5
 10408  0CAA  0237               	subwf	__CDS+1,w
 10409  0CAB  1C03               	skipc
 10410  0CAC  0008               	return
 10411                           
 10412                           ;CDS_B1.c: 18: {
 10413                           ;CDS_B1.c: 19: _CDS.Time = 0;
 10414  0CAD  01B7               	clrf	__CDS+1
 10415                           
 10416                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
 10417  0CAE  15B6               	bsf	__CDS,3
 10418                           
 10419                           ;CDS_B1.c: 21: }
 10420                           ;CDS_B1.c: 22: }
 10421                           ;CDS_B1.c: 23: } else {
 10422  0CAF  0008               	return
 10423  0CB0                     l180:	
 10424                           
 10425                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
 10426  0CB0  1CB6               	btfss	__CDS,1
 10427  0CB1  0008               	return
 10428                           
 10429                           ;CDS_B1.c: 25: _CDS.GO = 0;
 10430  0CB2  10B6               	bcf	__CDS,1
 10431                           
 10432                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
 10433  0CB3  1A36               	btfsc	__CDS,4
 10434  0CB4  2CBB               	goto	l5609
 10435                           
 10436                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
 10437  0CB5  0838               	movf	__CDS+2,w
 10438  0CB6  0239               	subwf	__CDS+3,w
 10439  0CB7  1C03               	skipc
 10440  0CB8  0008               	return
 10441                           
 10442                           ;CDS_B1.c: 28: _CDS.Status = 1;
 10443  0CB9  1636               	bsf	__CDS,4
 10444                           
 10445                           ;CDS_B1.c: 29: }
 10446                           ;CDS_B1.c: 30: } else {
 10447  0CBA  0008               	return
 10448  0CBB                     l5609:	
 10449                           
 10450                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
 10451  0CBB  0838               	movf	__CDS+2,w
 10452  0CBC  3E9C               	addlw	156
 10453  0CBD  00D7               	movwf	??_CDS_Main
 10454  0CBE  30FF               	movlw	255
 10455  0CBF  1803               	skipnc
 10456  0CC0  3000               	movlw	0
 10457  0CC1  00D8               	movwf	??_CDS_Main+1
 10458  0CC2  0858               	movf	??_CDS_Main+1,w
 10459  0CC3  3A80               	xorlw	128
 10460  0CC4  00D9               	movwf	??_CDS_Main+2
 10461  0CC5  3080               	movlw	128
 10462  0CC6  0259               	subwf	??_CDS_Main+2,w
 10463  0CC7  1D03               	skipz
 10464  0CC8  2CCB               	goto	u6715
 10465  0CC9  0839               	movf	__CDS+3,w
 10466  0CCA  0257               	subwf	??_CDS_Main,w
 10467  0CCB                     u6715:	
 10468  0CCB  1C03               	skipc
 10469  0CCC  0008               	return
 10470                           
 10471                           ;CDS_B1.c: 32: _CDS.Status = 0;
 10472  0CCD  1283               	bcf	3,5	;RP0=0, select bank0
 10473  0CCE  1303               	bcf	3,6	;RP1=0, select bank0
 10474  0CCF  1236               	bcf	__CDS,4
 10475  0CD0  0008               	return
 10476  0CD1                     __end_of_CDS_Main:	
 10477                           
 10478                           	psect	text71
 10479  0933                     __ptext71:	
 10480 ;; *************** function _CDS_Initialization *****************
 10481 ;; Defined at:
 10482 ;;		line 7 in file "../src/CDS_B1.c"
 10483 ;; Parameters:    Size  Location     Type
 10484 ;;		None
 10485 ;; Auto vars:     Size  Location     Type
 10486 ;;		None
 10487 ;; Return value:  Size  Location     Type
 10488 ;;		None               void
 10489 ;; Registers used:
 10490 ;;		None
 10491 ;; Tracked objects:
 10492 ;;		On entry : 0/0
 10493 ;;		On exit  : 0/0
 10494 ;;		Unchanged: 0/0
 10495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10496 ;;      Params:         0       0       0       0
 10497 ;;      Locals:         0       0       0       0
 10498 ;;      Temps:          0       0       0       0
 10499 ;;      Totals:         0       0       0       0
 10500 ;;Total ram usage:        0 bytes
 10501 ;; Hardware stack levels used:    1
 10502 ;; Hardware stack levels required when called:    2
 10503 ;; This function calls:
 10504 ;;		Nothing
 10505 ;; This function is called by:
 10506 ;;		_main
 10507 ;; This function uses a non-reentrant model
 10508 ;;
 10509                           
 10510                           
 10511                           ;psect for function _CDS_Initialization
 10512  0933                     _CDS_Initialization:	
 10513                           
 10514                           ;CDS_B1.c: 8: _CDS.Enable = 1;
 10515                           
 10516                           ;incstack = 0
 10517                           ; Regs used in _CDS_Initialization: []
 10518  0933  1283               	bcf	3,5	;RP0=0, select bank0
 10519  0934  1303               	bcf	3,6	;RP1=0, select bank0
 10520  0935  1436               	bsf	__CDS,0
 10521  0936  0008               	return
 10522  0937                     __end_of_CDS_Initialization:	
 10523                           
 10524                           	psect	text72
 10525  0D8A                     __ptext72:	
 10526 ;; *************** function _Buzzer_Main *****************
 10527 ;; Defined at:
 10528 ;;		line 46 in file "../src/Buzzer_B1.c"
 10529 ;; Parameters:    Size  Location     Type
 10530 ;;		None
 10531 ;; Auto vars:     Size  Location     Type
 10532 ;;		None
 10533 ;; Return value:  Size  Location     Type
 10534 ;;		None               void
 10535 ;; Registers used:
 10536 ;;		wreg, status,2, status,0
 10537 ;; Tracked objects:
 10538 ;;		On entry : 0/0
 10539 ;;		On exit  : 0/0
 10540 ;;		Unchanged: 0/0
 10541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10542 ;;      Params:         0       0       0       0
 10543 ;;      Locals:         0       0       0       0
 10544 ;;      Temps:          1       0       0       0
 10545 ;;      Totals:         1       0       0       0
 10546 ;;Total ram usage:        1 bytes
 10547 ;; Hardware stack levels used:    1
 10548 ;; Hardware stack levels required when called:    2
 10549 ;; This function calls:
 10550 ;;		Nothing
 10551 ;; This function is called by:
 10552 ;;		_main
 10553 ;; This function uses a non-reentrant model
 10554 ;;
 10555                           
 10556                           
 10557                           ;psect for function _Buzzer_Main
 10558  0D8A                     _Buzzer_Main:	
 10559                           
 10560                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 10561                           
 10562                           ;incstack = 0
 10563                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 10564  0D8A  1283               	bcf	3,5	;RP0=0, select bank0
 10565  0D8B  1303               	bcf	3,6	;RP1=0, select bank0
 10566  0D8C  1CA0               	btfss	_Buz1,1
 10567  0D8D  0008               	return
 10568                           
 10569                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 10570  0D8E  3001               	movlw	1
 10571  0D8F  07A1               	addwf	_Buz1+1,f
 10572  0D90  1803               	skipnc
 10573  0D91  0AA2               	incf	_Buz1+2,f
 10574  0D92  3000               	movlw	0
 10575  0D93  07A2               	addwf	_Buz1+2,f
 10576                           
 10577                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 10578  0D94  0827               	movf	_Buz1+7,w
 10579  0D95  0222               	subwf	_Buz1+2,w
 10580  0D96  1D03               	skipz
 10581  0D97  2D9A               	goto	u4165
 10582  0D98  0826               	movf	_Buz1+6,w
 10583  0D99  0221               	subwf	_Buz1+1,w
 10584  0D9A                     u4165:	
 10585  0D9A  1C03               	skipc
 10586  0D9B  0008               	return
 10587                           
 10588                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 10589  0D9C  01A1               	clrf	_Buz1+1
 10590  0D9D  01A2               	clrf	_Buz1+2
 10591                           
 10592                           ;Buzzer_B1.c: 51: Buz1.Switch = (RC0 == 1) ? 1 : 0;
 10593  0D9E  12A0               	bcf	_Buz1,5
 10594  0D9F  1807               	btfsc	7,0	;volatile
 10595  0DA0  16A0               	bsf	_Buz1,5
 10596                           
 10597                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 10598  0DA1  1283               	bcf	3,5	;RP0=0, select bank0
 10599  0DA2  1303               	bcf	3,6	;RP1=0, select bank0
 10600  0DA3  1AA0               	btfsc	_Buz1,5
 10601  0DA4  2DC9               	goto	l68
 10602                           
 10603                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 10604  0DA5  08A3               	movf	_Buz1+3,f
 10605  0DA6  1D03               	skipz
 10606  0DA7  2DC6               	goto	l69
 10607                           
 10608                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 10609  0DA8  1DA0               	btfss	_Buz1,3
 10610  0DA9  2DB6               	goto	l70
 10611                           
 10612                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 10613  0DAA  11A0               	bcf	_Buz1,3
 10614                           
 10615                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 10616  0DAB  0824               	movf	_Buz1+4,w
 10617  0DAC  00F4               	movwf	??_Buzzer_Main
 10618  0DAD  0874               	movf	??_Buzzer_Main,w
 10619  0DAE  00A3               	movwf	_Buz1+3
 10620                           
 10621                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 10622  0DAF  0829               	movf	_Buz1+9,w
 10623  0DB0  01A7               	clrf	_Buz1+7
 10624  0DB1  07A7               	addwf	_Buz1+7,f
 10625  0DB2  0828               	movf	_Buz1+8,w
 10626  0DB3  01A6               	clrf	_Buz1+6
 10627  0DB4  07A6               	addwf	_Buz1+6,f
 10628                           
 10629                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 10630  0DB5  0008               	return
 10631  0DB6                     l70:	
 10632  0DB6  1E20               	btfss	_Buz1,4
 10633  0DB7  2DC4               	goto	l72
 10634                           
 10635                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 10636  0DB8  1220               	bcf	_Buz1,4
 10637                           
 10638                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 10639  0DB9  0825               	movf	_Buz1+5,w
 10640  0DBA  00F4               	movwf	??_Buzzer_Main
 10641  0DBB  0874               	movf	??_Buzzer_Main,w
 10642  0DBC  00A3               	movwf	_Buz1+3
 10643                           
 10644                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 10645  0DBD  082B               	movf	_Buz1+11,w
 10646  0DBE  01A7               	clrf	_Buz1+7
 10647  0DBF  07A7               	addwf	_Buz1+7,f
 10648  0DC0  082A               	movf	_Buz1+10,w
 10649  0DC1  01A6               	clrf	_Buz1+6
 10650  0DC2  07A6               	addwf	_Buz1+6,f
 10651                           
 10652                           ;Buzzer_B1.c: 62: } else {
 10653  0DC3  0008               	return
 10654  0DC4                     l72:	
 10655                           
 10656                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 10657  0DC4  10A0               	bcf	_Buz1,1
 10658                           
 10659                           ;Buzzer_B1.c: 64: }
 10660                           ;Buzzer_B1.c: 65: } else {
 10661  0DC5  0008               	return
 10662  0DC6                     l69:	
 10663                           
 10664                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 10665  0DC6  16A0               	bsf	_Buz1,5
 10666                           
 10667                           ;Buzzer_B1.c: 68: RC0 = 1;
 10668  0DC7  1407               	bsf	7,0	;volatile
 10669                           
 10670                           ;Buzzer_B1.c: 69: }
 10671                           ;Buzzer_B1.c: 70: } else {
 10672  0DC8  0008               	return
 10673  0DC9                     l68:	
 10674                           
 10675                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 10676  0DC9  12A0               	bcf	_Buz1,5
 10677                           
 10678                           ;Buzzer_B1.c: 73: RC0 = 0;
 10679  0DCA  1007               	bcf	7,0	;volatile
 10680                           
 10681                           ;Buzzer_B1.c: 75: Buz1.Count--;
 10682  0DCB  3001               	movlw	1
 10683  0DCC  02A3               	subwf	_Buz1+3,f
 10684  0DCD  0008               	return
 10685  0DCE                     __end_of_Buzzer_Main:	
 10686                           
 10687                           	psect	text73
 10688  092F                     __ptext73:	
 10689 ;; *************** function _Buzzer_Initialization *****************
 10690 ;; Defined at:
 10691 ;;		line 11 in file "../src/Buzzer_B1.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;		None
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;		None
 10696 ;; Return value:  Size  Location     Type
 10697 ;;		None               void
 10698 ;; Registers used:
 10699 ;;		None
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10705 ;;      Params:         0       0       0       0
 10706 ;;      Locals:         0       0       0       0
 10707 ;;      Temps:          0       0       0       0
 10708 ;;      Totals:         0       0       0       0
 10709 ;;Total ram usage:        0 bytes
 10710 ;; Hardware stack levels used:    1
 10711 ;; Hardware stack levels required when called:    2
 10712 ;; This function calls:
 10713 ;;		Nothing
 10714 ;; This function is called by:
 10715 ;;		_main
 10716 ;; This function uses a non-reentrant model
 10717 ;;
 10718                           
 10719                           
 10720                           ;psect for function _Buzzer_Initialization
 10721  092F                     _Buzzer_Initialization:	
 10722                           
 10723                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 10724                           
 10725                           ;incstack = 0
 10726                           ; Regs used in _Buzzer_Initialization: []
 10727  092F  1283               	bcf	3,5	;RP0=0, select bank0
 10728  0930  1303               	bcf	3,6	;RP1=0, select bank0
 10729  0931  1420               	bsf	_Buz1,0
 10730  0932  0008               	return
 10731  0933                     __end_of_Buzzer_Initialization:	
 10732                           
 10733                           	psect	text74
 10734  0AFE                     __ptext74:	
 10735 ;; *************** function _ISR *****************
 10736 ;; Defined at:
 10737 ;;		line 116 in file "../src/MCU_B1.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;		None
 10740 ;; Auto vars:     Size  Location     Type
 10741 ;;		None
 10742 ;; Return value:  Size  Location     Type
 10743 ;;		None               void
 10744 ;; Registers used:
 10745 ;;		wreg, status,2, status,0, pclath, cstack
 10746 ;; Tracked objects:
 10747 ;;		On entry : 0/0
 10748 ;;		On exit  : 0/0
 10749 ;;		Unchanged: 0/0
 10750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10751 ;;      Params:         0       0       0       0
 10752 ;;      Locals:         0       0       0       0
 10753 ;;      Temps:          4       0       0       0
 10754 ;;      Totals:         4       0       0       0
 10755 ;;Total ram usage:        4 bytes
 10756 ;; Hardware stack levels used:    1
 10757 ;; Hardware stack levels required when called:    1
 10758 ;; This function calls:
 10759 ;;		_TMR1_ISR
 10760 ;; This function is called by:
 10761 ;;		Interrupt level 1
 10762 ;; This function uses a non-reentrant model
 10763 ;;
 10764                           
 10765                           
 10766                           ;psect for function _ISR
 10767  0AFE                     _ISR:	
 10768                           
 10769                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 10770  0AFE  1683               	bsf	3,5	;RP0=1, select bank1
 10771  0AFF  1303               	bcf	3,6	;RP1=0, select bank1
 10772  0B00  1C0C               	btfss	12,0	;volatile
 10773  0B01  2B09               	goto	i1l515
 10774  0B02  1283               	bcf	3,5	;RP0=0, select bank0
 10775  0B03  1303               	bcf	3,6	;RP1=0, select bank0
 10776  0B04  1C0C               	btfss	12,0	;volatile
 10777  0B05  2B09               	goto	i1l515
 10778                           
 10779                           ;MCU_B1.c: 126: TMR1_ISR();
 10780  0B06  158A  22A4  158A   	fcall	_TMR1_ISR
 10781  0B09                     i1l515:	
 10782                           ;MCU_B1.c: 127: }
 10783                           ;MCU_B1.c: 148: return;
 10784                           
 10785  0B09  0873               	movf	??_ISR+3,w
 10786  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
 10787  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
 10788  0B0C  00FF               	movwf	127
 10789  0B0D  0872               	movf	??_ISR+2,w
 10790  0B0E  008A               	movwf	10
 10791  0B0F  0871               	movf	??_ISR+1,w
 10792  0B10  0084               	movwf	4
 10793  0B11  0E70               	swapf	??_ISR^(0+-128),w
 10794  0B12  0083               	movwf	3
 10795  0B13  0EFE               	swapf	126,f
 10796  0B14  0E7E               	swapf	126,w
 10797  0B15  0009               	retfie
 10798  0B16                     __end_of_ISR:	
 10799                           
 10800                           	psect	intentry
 10801  0004                     __pintentry:	
 10802                           ;incstack = 0
 10803                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
 10804                           
 10805  0004                     interrupt_function:	
 10806  007E                     saved_w	set	btemp
 10807  0004  00FE               	movwf	btemp
 10808  0005  0E03               	swapf	3,w
 10809  0006  00F0               	movwf	??_ISR
 10810  0007  0804               	movf	4,w
 10811  0008  00F1               	movwf	??_ISR+1
 10812  0009  080A               	movf	10,w
 10813  000A  00F2               	movwf	??_ISR+2
 10814  000B  1283               	bcf	3,5	;RP0=0, select bank0
 10815  000C  1303               	bcf	3,6	;RP1=0, select bank0
 10816  000D  087F               	movf	btemp+1,w
 10817  000E  00F3               	movwf	??_ISR+3
 10818  000F  158A  2AFE         	ljmp	_ISR
 10819                           
 10820                           	psect	text75
 10821  0AA4                     __ptext75:	
 10822 ;; *************** function _TMR1_ISR *****************
 10823 ;; Defined at:
 10824 ;;		line 236 in file "../src/MCU_B1.c"
 10825 ;; Parameters:    Size  Location     Type
 10826 ;;		None
 10827 ;; Auto vars:     Size  Location     Type
 10828 ;;		None
 10829 ;; Return value:  Size  Location     Type
 10830 ;;		None               void
 10831 ;; Registers used:
 10832 ;;		wreg, status,2
 10833 ;; Tracked objects:
 10834 ;;		On entry : 0/0
 10835 ;;		On exit  : 0/0
 10836 ;;		Unchanged: 0/0
 10837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10838 ;;      Params:         0       0       0       0
 10839 ;;      Locals:         0       0       0       0
 10840 ;;      Temps:          0       0       0       0
 10841 ;;      Totals:         0       0       0       0
 10842 ;;Total ram usage:        0 bytes
 10843 ;; Hardware stack levels used:    1
 10844 ;; This function calls:
 10845 ;;		Nothing
 10846 ;; This function is called by:
 10847 ;;		_ISR
 10848 ;; This function uses a non-reentrant model
 10849 ;;
 10850                           
 10851                           
 10852                           ;psect for function _TMR1_ISR
 10853  0AA4                     _TMR1_ISR:	
 10854                           
 10855                           ;MCU_B1.c: 268: Timer1.Count++;
 10856                           
 10857                           ;incstack = 0
 10858                           ; Regs used in _TMR1_ISR: [wreg+status,2]
 10859  0AA4  3001               	movlw	1
 10860  0AA5  1283               	bcf	3,5	;RP0=0, select bank0
 10861  0AA6  1303               	bcf	3,6	;RP1=0, select bank0
 10862  0AA7  07BB               	addwf	_Timer1+1,f
 10863  0AA8  1803               	skipnc
 10864  0AA9  0ABC               	incf	_Timer1+2,f
 10865  0AAA  3000               	movlw	0
 10866  0AAB  07BC               	addwf	_Timer1+2,f
 10867                           
 10868                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 10869  0AAC  30C8               	movlw	200
 10870  0AAD  063B               	xorwf	_Timer1+1,w
 10871  0AAE  043C               	iorwf	_Timer1+2,w
 10872  0AAF  1D03               	skipz
 10873  0AB0  2AB4               	goto	i1l4357
 10874                           
 10875                           ;MCU_B1.c: 270: Timer1.Count = 0;
 10876  0AB1  01BB               	clrf	_Timer1+1
 10877  0AB2  01BC               	clrf	_Timer1+2
 10878                           
 10879                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 10880  0AB3  143A               	bsf	_Timer1,0
 10881  0AB4                     i1l4357:	
 10882                           
 10883                           ;MCU_B1.c: 272: }
 10884                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 10885  0AB4  30FA               	movlw	250
 10886  0AB5  008F               	movwf	15	;volatile
 10887                           
 10888                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 10889  0AB6  3038               	movlw	56
 10890  0AB7  008E               	movwf	14	;volatile
 10891                           
 10892                           ;MCU_B1.c: 276: TMR1IF = 0;
 10893  0AB8  100C               	bcf	12,0	;volatile
 10894  0AB9  0008               	return
 10895  0ABA                     __end_of_TMR1_ISR:	
 10896  007E                     btemp	set	126	;btemp
 10897  007E                     wtemp	set	126
 10898  007E                     wtemp0	set	126
 10899  0080                     wtemp1	set	128
 10900  0082                     wtemp2	set	130
 10901  0084                     wtemp3	set	132
 10902  0086                     wtemp4	set	134
 10903  0088                     wtemp5	set	136
 10904  007F                     wtemp6	set	127
 10905  007E                     ttemp	set	126
 10906  007E                     ttemp0	set	126
 10907  0081                     ttemp1	set	129
 10908  0084                     ttemp2	set	132
 10909  0087                     ttemp3	set	135
 10910  007F                     ttemp4	set	127
 10911  007E                     ltemp	set	126
 10912  007E                     ltemp0	set	126
 10913  0082                     ltemp1	set	130
 10914  0086                     ltemp2	set	134
 10915  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         147
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     25      80
    BANK1            80      0      78
    BANK2            16      0      10

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights2(BANK0[5]), Lights1(BANK0[5]), 

    Sw	PTR struct Switch size(1) Largest target is 5
		 -> NULL(NULL[0]), Sw2(BANK2[5]), Sw1(BANK2[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 


Critical Paths under _main in COMMON

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setTemp_Main->_setBuz
    _setSw_Main->_SwPointSelect
    _setSw_Main->_getSw_KeyStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Main->_LedPointSelect
    _setLED_Initialization->_LedPointSelect
    _Exception_Main->_getAll_Lights_Line
    _Exception_Main->_setBuz
    _setLights_SwOn->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _setBuz->___awdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Exception_Main
    _my_MainTimer->_setBuz
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setSw_Main
    _setSw_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setLED_Main
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_setBuz
    _setLights_SwOn->_setLights_Trigger
    _setLights_SwOff->_setLights_Trigger
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   26097
                                             20 BANK0      5     1      4
              _Buzzer_Initialization
                        _Buzzer_Main
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1589
                                             11 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     654
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    2983
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1053
                                              0 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     669
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     524
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    2018
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         6     6      0    2018
                                             11 BANK0      6     6      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    2917
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    2917
                                              6 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            11    11      0    1873
                                              6 BANK0     11    11      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2015
                                              7 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    3492
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    1927
                                              5 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    1633
                                              2 BANK0      3     2      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      88
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1278
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      93
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      93
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              0 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1298
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1298
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    4930
                                             11 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOn                                       1     1      0     714
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (4) _getLights_Status                                     2     2      0     127
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOff                                      1     1      0     556
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (4) _setLights_Trigger                                    3     2      1     432
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _LightsPointSelect                                    2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1143
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1589
                                              5 COMMON     1     1      0
                                              8 BANK0      3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1061
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      47
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Switch_Initialization
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setLED
         _LedPointSelect
       _setLights_SwOff
         _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
       _setLights_SwOn
         _LightsPointSelect
         _getLights_Status
           _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      B2       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       A       9       62.5%
DATA                 0      0      B2      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Feb 26 14:19:24 2015

              __size_of_Switch_Main 000B                          __CFG_CP$ON 0000  
                      _WDT_Clearing 0002           getMain_Lights_Count@count 0057  
                                l60 0E4B                                  l70 0DB6  
                                l72 0DC4                                  l58 0E3D  
                                l68 0DC9                                  l69 0DC6  
                      ___awdiv@sign 005C                                  _Sw 0079  
                    setTemp_Main@AD 0067                                  fsr 0004  
               ___wmul@multiplicand 0059                                 l180 0CB0  
                               l350 0B3F                                 l700 0D2B  
                               l701 0D48                                 l349 0B37  
                               l383 0CFF                                 l384 0D05  
                               l705 0D44                                 l731 05BA  
                               l820 020F                                 l830 01E8  
                               l822 0066                                 l831 01E6  
                               l823 0062                                 l824 005C  
                               l836 0192                                 l952 0FFC  
                               l963 0FF6                                 l958 0F93  
                               _GIE 005F                                 _RC0 0038  
                               _RB2 0032                                 _LED 0076  
                               _RC1 0039                                 _RB3 0033  
                               _RB4 0034                                 _RA6 002E  
                               _RB5 0035                                 _RA7 002F  
                               _RC4 003C                                 _RC5 003D  
                               _RC6 003E                                 _RC7 003F  
                               _PS0 0408                                 _PS1 0409  
                               _PS2 040A                                 _ISR 0AFE  
                               _PSA 040B                                 _WDT 003D  
                 ??_setLights_SwOff 0076                                 _Cmd 003F  
                               _Sw1 0120                                 _Sw2 0125  
            getAll_Lights_Line@line 0075                                 fsr0 0004  
                               indf 0000               _Buzzer_Initialization 092F  
                   __end_of_ADC_Set 0964           __end_of_LightsPointSelect 0A55  
                 ??_getSw_KeyStatus 0074                    _getLights_Status 0A0E  
           __size_of_Lights_Control 009A                                ?_ISR 0070  
                        Load_Main@i 0066                                l1040 039F  
                              l1041 0268                                l1042 024E  
                              l1047 026E                                l1049 027F  
                              l1404 0A83                                l1280 09B0  
                              l1426 066E                                l1428 05F7  
                              l4111 0E00                                l1544 0C5C  
                              l4105 0DE5                      _Load_Main$2716 0061  
                              l5101 0E9A                                l1591 0AF4  
                              l5105 0E9E                                l1596 09F6  
                              l1597 09FC                                l5053 0A4C  
                              l5221 0C1D                                l6013 02A2  
                              l1686 0C2E                                l5143 0EBE  
                              l6031 02C6                                l5161 0EEA  
                              l5153 0EC6                                l5137 0EB3  
                              l5065 0E6A                                l5073 0E72  
                              l6121 0513                                l6113 050F  
                              l5241 0ADF                                l6025 02B9  
                              l5155 0ED4                                l6123 0542  
                              l6107 0500                                l5411 0FE6  
                              l5323 0B93                                l5165 0EF5  
                              l6133 0579                                l5309 079F  
                              l5253 0731                                l6045 0317  
                              l6037 0303                                l6029 02C5  
                              l6053 0345                                l3821 0AA2  
                              l5421 0FF5                                l5317 0B8A  
                              l5079 0E7B                                l5087 0E83  
                              l6143 05A0                                l6135 0556  
                              l6127 0552                                l6119 0536  
                              l3807 0A5F                                l5319 0B8D  
                              l3761 0D1B                                l5169 0EFD  
                              l5097 0E96                                l6137 0585  
                              l5281 0762                                l5513 0C96  
                              l6065 0369                                l5433 0A87  
                              l3817 0A98                                l5409 0FE3  
                              l3771 0D2F                                l6147 05AC  
                              l5531 06CE                                l5267 0741  
                              l6083 0399                                l3749 0A0C  
                              l5285 0775                                l5277 075B  
                              l5437 0A8D                                l5701 0407  
                              l5535 06DF                                l5383 0FA6  
                              l6167 0F25                                l5609 0CBB  
                              l3769 0D27                                l5553 0C24  
                              l5465 061A                                l5449 05E9  
                              l5377 0F95                                l5385 0FA9  
                              l5713 0428                                l5705 0412  
                              l3779 0D3F                                l5547 0713  
                              l5299 0785                                l5651 07DF  
                              l5723 0441                                l6179 0F48  
                              l5581 0D78                                l5573 0D54  
                              l5813 0065                                l5477 0645  
                              l5709 041D                                l5575 0D62  
                              l5647 07D7                                l5639 07C3  
                              l5585 0D83                                l5753 04D3  
                              l5745 04A7                                l5729 045D  
                              l5835 00C8                                l5667 07FB  
                              l5739 048B                                l5925 01FC  
                              l5861 0153                                l5829 008C  
                              l5943 0C5D                                l5871 0184  
                              l5759 04E1                                l5775 0BF3  
                              l5697 03FC                                l5867 0163  
                              l5797 0046                                l5879 01AF  
                              l5889 01C8                                l5977 0262  
             _myMain_Initialization 091F                        __CFG_WDTE$ON 0000  
                              u4165 0D9A                                u3715 0E0C  
                              _PEIE 005E                                u7135 008A  
                              u6505 06FE                                u7145 00C6  
                              u6450 06CA                                u6435 06B6  
                              u7235 01A7                                u7155 011D  
                              u6605 0D63                                u6615 0D6F  
                              u6480 06DB                                u5745 0EC9  
                              u6625 0D79                                u6545 0C2F  
                              u6715 0CCB                                u6555 0C36  
                              u5765 0ED5                                u7605 0330  
                              u5775 0EE1                                u5855 0A76  
                              u5785 0EEB                                u6585 0D57  
                              u7635 0355                                u7750 053F  
                              u7575 02E4                                u7585 02FC  
                              u7755 051C                                u7675 0386  
                              u7780 0582                                u7785 055F  
                              __CDS 0036             ?_setSYSC_Initialization 0070  
                              _WPUB 0095                                _SYSC 002C  
                              _Buz1 0020                                __PIR 00A0  
                              _Load 00CA                                _Temp 0042  
                              _main 0F04                                btemp 007E  
                   __end_of_WDT_Set 09D0                                ltemp 007E  
                              start 0011                                ttemp 007E  
                              wtemp 007E                    __end_of_CDS_Main 0CD1  
      __size_of_Temp_Initialization 0003                               ??_ISR 0070  
                 _setLights_Trigger 0B62                       ??_Lights_Main 0076  
                     __CFG_PLLEN$ON 0000                    __end_of_LED_Main 093B  
                ?_setLights_Trigger 0057                               ?_main 006B  
                   __end_of___awdiv 0F04                               _ADRES 001E  
                   ___awdiv@divisor 0057                               _T1CON 0010  
                   __end_of___lwdiv 0D8A                               i1l515 0B09  
                   ___awdiv@counter 005B                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                      ?_setLED_Main 0070                               _TRISA 0085  
                             _TRISB 0086                               _TRISC 0087  
           __end_of_Timeout_Counter 0A7C                               _Light 0077  
               ??_setLights_Trigger 0058                    __end_of_PIR_Main 03B5  
                  __end_of_TMR1_ISR 0ABA                    __end_of_TMR1_Set 09C2  
                             _getAD 0B7D      __end_of_setSYSC_Initialization 093F  
    getLights_Allow_Condition@allow 0057             __end_of_getLight_LoadGO 094A  
                     ??_Buzzer_Main 0074                    __end_of_WDT_Main 0A30  
                     _LightsControl 0040                      __CFG_BOREN$OFF 0000  
      __end_of_getMain_Lights_Count 09DF                               pclath 000A  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
    __size_of_setLED_Initialization 0012       __end_of_setLED_Initialization 0A42  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   getPIR_AD@channel1 0064  
                 getPIR_AD@channel2 005F              ?_setLoad_AH_AL_Restore 0070  
                 setTemp_Main@error 0063                      _setLights_Main 0C6D  
                    _setLights_Line 0AE7                     __initialization 0013  
                    _setLights_SwOn 0BFD                  __size_of_SYSC_Main 0003  
         __end_of_setLights_Trigger 0B7D                        __end_of_main 0F76  
                  __end_of_Fosc_Set 0944      getMain_All_LightsStatus@status 0074  
                    _Exception_Main 04E3                           ??_ADC_Set 0074  
                            ??_main 006F               PIR_Main@Enable_Switch 0065  
            ?_Buzzer_Initialization 0070                 __end_of_Lights_Main 0C6D  
        __size_of_LightsPointSelect 0013            _getMain_All_LightsStatus 09FE  
           ??_Switch_Initialization 0074                              ?_getAD 0074  
            ?_myMain_Initialization 0070                              _ADCON0 001F  
                            _ADCON1 009F                    ___awdiv@dividend 0059  
                         ??_WDT_Set 0074                              _ANSELA 0185  
                            _ANSELB 0186            _getMain_All_Error_Status 0D0C  
                            i1l4357 0AB4                              _FVRCON 009D  
            getLights_Status@lights 0057                              _OSCCON 0090  
                __size_of_Load_Main 01EA                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0B16  
              Exception_Main@i_2440 0069              getLights_Status@status 0058  
            __end_of_setLights_Main 0C9D              __end_of_setLights_Line 0AFE  
            __end_of_setLights_SwOn 0C22        __size_of_SYSC_Initialization 0003  
        __end_of_Mcu_Initialization 09EE                 __end_of_Buzzer_Main 0DCE  
                            _Lights 0078                              _Timer1 003A  
       __size_of_CDS_Initialization 0004             ??_Lights_Initialization 0076  
            __end_of_Exception_Main 05BB                Exception_Main@lights 0063  
                            ___wmul 0C22                           ??___awdiv 0074  
                         ??___lwdiv 0074                Exception_Main@status 0066  
                            _setLED 0E59                              _myMain 0031  
                  ___awdiv@quotient 005D                              _setBuz 0E12  
                __size_of_Temp_Main 0003                Load_Main@LightsCount 0065  
       __end_of_Load_Initialization 0923     getLights_Allow_Condition@lights 0070  
                            saved_w 007E                    setLights_SwOn@sw 005A  
                  ?_Timeout_Counter 0070         getMain_Lights_Count@status1 0058  
       getMain_Lights_Count@status2 0059               __end_of_SwPointSelect 0A68  
                 __end_of_SYSC_Main 0929                      _Lights_Control 067F  
           __size_of_LedPointSelect 001A                           ?_CDS_Main 0070  
                setTemp_Main@TempGO 0064                    ?_getLight_LoadGO 0070  
       __size_of_PIR_Initialization 000B                          _TouchPower 0A7C  
           __end_of__initialization 002A                           ?_LED_Main 0070  
                     ?_my_MainTimer 0070                     ?_setLights_Main 0070  
                   ?_setLights_Line 0070                     ?_setLights_SwOn 0070  
                     ?_setSYSC_Main 0070                     _setLights_SwOff 0B48  
        __size_of_setLights_Trigger 001B                      __pcstackCOMMON 0070  
                __size_of_getCDS_AD 0022                     ?_Exception_Main 0070  
          __end_of_getLights_Status 0A1F                       __end_of_getAD 0B99  
                         ?_PIR_Main 0070                           ?_TMR1_ISR 0070  
     __size_of_getLight_Load_Status 0006                           ?_TMR1_Set 0070  
            setLoad_AH_AL_Restore@i 0075                  _LED_Initialization 099A  
                   _getSw_KeyStatus 0A90                  __size_of_getPIR_AD 012E  
                       _Lights_Main 0C47            _setLights_Initialization 0956  
              _getMain_Lights_Count 09D0                           ?_WDT_Main 0070  
                 __end_of_Load_Main 0217          __end_of_set_TimeoutCleared 0956  
               ?_LED_Initialization 0070              __end_of_Lights_Control 0719  
              __size_of_setLED_Main 003B                             ??_getAD 0075  
               _Temp_Initialization 0929                          ??_CDS_Main 0057  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                        __pbssBANK2 0120                           ?_Fosc_Set 0070  
       __size_of_getAll_Lights_Line 0010                         _Buzzer_Main 0D8A  
                 __end_of_Temp_Main 092F                             ?_IO_Set 0070  
                   __CFG_VCAPEN$DIS 0000                      ??_my_MainTimer 0062  
                        ??_LED_Main 0076                      ??_setSYSC_Main 0075  
                     ??_Switch_Main 0076                ??_LED_Initialization 0076  
                 LedPointSelect@led 0075                         setBuz@count 0061  
                        __pmaintext 0F04          ?_getLights_Allow_Condition 0070  
              ?_Temp_Initialization 0070                PIR_Main@LightsStatus 0067  
                           ?___wmul 0057                          ??_PIR_Main 005D  
                        ??_TMR1_ISR 0070                       ?_setTemp_Main 0070  
                __size_of_setLights 008B                          _getLoad_AD 07A4  
                        ??_TMR1_Set 0074                          __pintentry 0004  
                        _getLoad_OK 096C                             ?_setLED 0057  
           setLights_Trigger@lights 0059               ?_getMain_Lights_Count 0070  
                           _ADC_Set 095D                             ?_setBuz 005F  
                        _getTemp_AD 0B99                          ??_WDT_Main 0074  
            __size_of_getCDS_Status 0008                     ?_Lights_Control 0070  
                 __end_of_getCDS_AD 0BDA                             _WDT_Set 09C2  
                     getPIR_AD@VRAD 0066                          ??_Fosc_Set 0074  
                       ?_TouchPower 0070                   __end_of_getPIR_AD 04E3  
           ??_setLoad_AH_AL_Restore 0074             __end_of_setLights_SwOff 0B62  
    _getLights_Allow_Condition$4827 0058                     __size_of_IO_Set 0018  
                        getCDS_AD@i 005A                          getCDS_AD@j 005B  
                           _Lights1 0049                             _Lights2 004E  
                           _VarLED1 00E6                             _VarLED2 00EA  
           __end_of_getSw_KeyStatus 0AA4               ??_Temp_Initialization 0074  
                    ??_setTemp_Main 0062                             ___awdiv 0EA7  
                   __size_of___wmul 0025                 __end_of_Switch_Main 099A  
                           ___lwdiv 0D4A          ??_getMain_All_LightsStatus 0074  
           ??_Buzzer_Initialization 0074                         PIR_Main@cds 0062  
                   __size_of_setLED 004E                     __size_of_setBuz 0047  
                           __ptext0 0000                             __ptext1 0BDA  
                           __ptext2 091F                             __ptext3 0B99  
                           __ptext4 03B5                             __ptext5 07A4  
                           __ptext6 0BB8                             __ptext7 0B7D  
                           __ptext8 0A1F                             __ptext9 0002  
                        getPIR_AD@i 0067                          getPIR_AD@j 0063  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0074  
               _SYSC_Initialization 0923             ??_myMain_Initialization 0074  
          ??_setTemp_Initialization 0074                      _LedPointSelect 0B2E  
                   getTemp_AD@ADRES 005A                             clrloop0 097D  
    __size_of_Switch_Initialization 0001       __end_of_Switch_Initialization 091E  
                 __end_of_setLights 07A4                end_of_initialization 002A  
                        _setSw_Main 05BB                       _getCDS_Status 0974  
              ?_SYSC_Initialization 0070               _setLED_Initialization 0A30  
                 setLights_SwOff@sw 005A                         ?_getLoad_AD 0070  
    __size_of_Lights_Initialization 0008                         ?_getLoad_OK 0070  
            ??_getMain_Lights_Count 0074       __end_of_Lights_Initialization 096C  
                       ?_getTemp_AD 0070                 __size_of_TouchPower 0014  
          setLED_Initialization@led 0059             setTemp_Main@DangerValue 0066  
                _Mcu_Initialization 09DF                __end_of_my_MainTimer 0BFD  
              __end_of_setSYSC_Main 0E12              __end_of_LedPointSelect 0B48  
          Load_Main@ErrorCountValue 0063                 ?_Mcu_Initialization 0070  
                  ??_setLights_Main 0076                    ??_setLights_Line 0074  
              setLights_Main@lights 005C                    ??_setLights_SwOn 0076  
                         _SYSC_Main 0926     getMain_All_Error_Status@command 005B  
                 __size_of_CDS_Main 0034                      ?_getCDS_Status 0070  
                  ?_setLights_SwOff 0070               ??_SYSC_Initialization 0074  
                  ??_Exception_Main 0062                      __end_of_IO_Set 0B2E  
        __end_of_CDS_Initialization 0937                         _Switch_Main 098F  
        ??_setLights_Initialization 0076                   __size_of_LED_Main 0004  
                  ?_getSw_KeyStatus 0070                ??_Mcu_Initialization 0075  
                     ?_WDT_Clearing 0070                   ?_getLights_Status 0070  
                      ?_Lights_Main 0070                      __end_of___wmul 0C47  
                 getSw_KeyStatus@sw 0075                   __size_of_PIR_Main 019E  
                 __size_of_TMR1_ISR 0016                  ??_getLights_Status 0076  
                 __size_of_TMR1_Set 000E                      __end_of_setLED 0EA7  
                    __end_of_setBuz 0E59            ??_setSYSC_Initialization 0074  
                 __size_of_WDT_Main 0011                 start_initialization 0013  
                   ?_LedPointSelect 0070                setLights_Line@lights 0074  
                         _Load_Main 002D                         __end_of_ISR 0B16  
        __end_of_PIR_Initialization 098F        __size_of_Load_Initialization 0003  
      __end_of_getLight_Load_Status 0950     __size_of_setTemp_Initialization 0001  
               getCDS_Status@status 0074                __end_of_setTemp_Main 1000  
               __size_of_getLoad_AD 005C                        ?_Buzzer_Main 0070  
               __size_of_getLoad_OK 0008                          ?_SYSC_Main 0070  
                _set_TimeoutCleared 0950                            ??_IO_Set 0074  
          __size_of_Timeout_Counter 0014                           _VarErrLED 0053  
                       ?_setSw_Main 0070                 __size_of_getTemp_AD 001F  
            ?_setLED_Initialization 0070                   __size_of_Fosc_Set 0005  
          __size_of_getLight_LoadGO 0006                           _Temp_Main 092C  
                   setLights@lights 005B                 ?_set_TimeoutCleared 0070  
                    ??_WDT_Clearing 0074         ??_getLights_Allow_Condition 0075  
               Exception_Main@count 0064                     setLights@status 0059  
               Exception_Main@error 0065                            ??___wmul 0074  
            __size_of_SwPointSelect 0013    __end_of_getMain_All_LightsStatus 0A0E  
                          ??_setLED 0076                            ?_ADC_Set 0070  
                  ??_Lights_Control 005F                            ??_setBuz 0075  
  __end_of_getMain_All_Error_Status 0D4A                       ??_setLED_Main 0057  
                       __pbssCOMMON 0076             Load_Main@Load_RunStatus 0064  
                         ___latbits 0001                          ?_Load_Main 0070  
                     __pcstackBANK0 0057                ??_set_TimeoutCleared 0074  
        __end_of_getAll_Lights_Line 09FE                            ?_WDT_Set 0070  
                   ??_getCDS_Status 0074                        ??_TouchPower 0074  
                     PIR_Main@error 0061                           _getCDS_AD 0BB8  
    __size_of_setLoad_AH_AL_Restore 0016       __end_of_setLoad_AH_AL_Restore 0AD0  
                         _getPIR_AD 03B5         __size_of_LED_Initialization 000C  
                   Exception_Main@i 0067                          ?_Temp_Main 0070  
                  ___lwdiv@dividend 0059                          setBuz@time 005F  
                    Load_Main@error 0060              _setTemp_Initialization 091E  
                     _PIR_Main$3238 0063                            ?___awdiv 0057  
             __size_of_my_MainTimer 0023                            ?___lwdiv 0057  
             __size_of_setSYSC_Main 0044      __size_of_Buzzer_Initialization 0004  
     __end_of_Buzzer_Initialization 0933                  __end_of_TouchPower 0A90  
          setLights_Trigger@command 0057                 __size_of_setSw_Main 00C4  
   __size_of_setSYSC_Initialization 0004           _getLights_Allow_Condition 0AD0  
    __size_of_myMain_Initialization 0001       __end_of_myMain_Initialization 0920  
                    __size_of_getAD 001C                    ___lwdiv@quotient 005C  
                     _SwPointSelect 0A55                            _CDS_Main 0C9D  
               __end_of_setLED_Main 0D0C                         ??_SYSC_Main 0075  
       __end_of_Temp_Initialization 092C                   interrupt_function 0004  
                        ?_getCDS_AD 0057                      ___wmul@product 0074  
                          _LED_Main 0937                           _setLights 0719  
                   SwPointSelect@sw 0075                           clear_ram0 097C  
  __end_of_setLights_Initialization 095D                        _my_MainTimer 0BDA  
                        ?_getPIR_AD 005F                        _setSYSC_Main 0DCE  
                          _GO_nDONE 00F9                   ??_Timeout_Counter 0074  
              PIR_Main@TriggerValue 0066                            _PIR_Main 0217  
                      ??_getLoad_AD 0057                            _TMR1_ISR 0AA4  
                      ??_getLoad_OK 0074                _getLight_Load_Status 094A  
                          _TMR1_Set 09B4                   ??_getLight_LoadGO 0074  
                      ??_getTemp_AD 0057                            _WDT_Main 0A1F  
             getSw_KeyStatus@status 0074                    __size_of_ADC_Set 0007  
                 ___wmul@multiplier 0057                      getPIR_AD@VRAD1 0065  
              __size_of_Lights_Main 0026               __size_of_setTemp_Main 008A  
                      setSw_Main@sw 005F                         ??_Load_Main 005E  
    getMain_All_Error_Status@status 005C                      ?_SwPointSelect 0070  
                       getAD@adcon0 0075                         getAD@adcon1 0074  
                    setLED_Main@led 0059                __end_of_WDT_Clearing 0004  
 __size_of_getMain_All_LightsStatus 0010           ?_getMain_All_LightsStatus 0070  
                          _Fosc_Set 093F                    __size_of_WDT_Set 000E  
                __end_of_getLoad_AD 0800                  __end_of_getLoad_OK 0974  
             _Switch_Initialization 091D   __size_of_getMain_All_Error_Status 003E  
         ?_getMain_All_Error_Status 0070                __size_of_Buzzer_Main 0044  
                        ?_setLights 0059                  __end_of_getTemp_AD 0BB8  
            _setSYSC_Initialization 093B                        ?_Switch_Main 0070  
                 getLoad_AD@channel 0059                   _DetectSYSC_Signal 09A6  
                          _SwDetect 0041                         ??_Temp_Main 0076  
     _getMain_All_Error_Status$2426 0057       _getMain_All_Error_Status$2427 0059  
               _Load_Initialization 0920                  ?_DetectSYSC_Signal 0070  
                         setLED@led 0058               ?_getLight_Load_Status 0070  
                      _setTemp_Main 0F76                    __size_of___awdiv 005D  
    getLight_Load_Status@loadstatus 0074                    __size_of___lwdiv 0040  
                  ??_LedPointSelect 0074       __size_of_getMain_Lights_Count 000F  
               ??_DetectSYSC_Signal 0074                  _CDS_Initialization 0933  
             _Lights_Initialization 0964                   getTemp_AD@channel 0059  
                       _setLED_Main 0CD1                     ___lwdiv@divisor 0057  
              ?_Load_Initialization 0070                 ?_CDS_Initialization 0070  
                   ___lwdiv@counter 005B                            __ptext10 092C  
                          __ptext11 0F76                            __ptext20 0A68  
                          __ptext12 0929                            __ptext21 091D  
                          __ptext13 091E                            __ptext30 09C2  
                          __ptext22 0926                            __ptext14 098F  
                          __ptext31 09B4                            __ptext23 0DCE  
                          __ptext15 05BB                            __ptext40 0D4A  
                          __ptext32 0B16                            __ptext24 0923  
                          __ptext16 0A90                            __ptext41 0920  
                          __ptext33 093F                            __ptext25 093B  
                          __ptext17 0A55                            __ptext50 0964  
                          __ptext42 0ABA                            __ptext34 095D  
                          __ptext26 0217                            __ptext18 0A7C  
                          __ptext51 0956                            __ptext43 0C47  
                          __ptext35 002D                            __ptext27 0974  
                          __ptext19 0950                            __ptext60 0B62  
                          __ptext52 0937                            __ptext44 0C6D  
                          __ptext36 09D0                            __ptext28 0984  
                          __ptext61 0A42                            __ptext53 0CD1  
                          __ptext45 0719                            __ptext37 094A  
                          __ptext29 09DF                            __ptext70 0C9D  
                          __ptext62 0E59                            __ptext54 099A  
                          __ptext46 0AE7                            __ptext38 0944  
                          __ptext71 0933                            __ptext63 0B2E  
                          __ptext55 0A30                            __ptext47 0AD0  
                          __ptext39 0C22                            __ptext72 0D8A  
                          __ptext64 0E12                            __ptext56 04E3  
                          __ptext48 096C                            __ptext73 092F  
                          __ptext65 0EA7                            __ptext57 0BFD  
                          __ptext49 067F                            __ptext74 0AFE  
                          __ptext66 09FE                            __ptext58 0A0E  
                          __ptext75 0AA4                            __ptext67 0D0C  
                          __ptext59 0B48                            __ptext68 09EE  
                          __ptext69 09A6           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 0926             ??_setLED_Initialization 0076  
                       ??_getCDS_AD 0058                        ??_setSw_Main 005D  
                     setLED@command 0057           __end_of_DetectSYSC_Signal 09B4  
                     __size_of_main 0072                         ??_getPIR_AD 0060  
                _PIR_Initialization 0984                ??_CDS_Initialization 0074  
       __size_of_Mcu_Initialization 000F            __size_of_setLights_SwOff 001A  
                      getLoad_OK@ok 0074                 ?_PIR_Initialization 0070  
                          main@argc 006B                            main@argv 006D  
          __size_of_getSw_KeyStatus 0014   __size_of_setLights_Initialization 0007  
         ?_setLights_Initialization 0070                     ??_SwPointSelect 0074  
                __end_of_setSw_Main 067F               ??_Load_Initialization 0076  
              Lights_Control@lights 0061                ??_PIR_Initialization 0074  
                          intlevel1 0000              ?_Switch_Initialization 0070  
__size_of_getLights_Allow_Condition 0017               setTemp_Main@SafeValue 0065  
                       ??_setLights 005A             ?_setTemp_Initialization 0070  
           LightsPointSelect@lights 0075                  _getAll_Lights_Line 09EE  
                   getLoad_AD@ADRES 005C              ??_getLight_Load_Status 0074  
                       getLoad_AD@i 005D                         getLoad_AD@j 005B  
                       getLoad_AD@k 005A             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 0017             __size_of_setLights_SwOn 0025  
               ?_getAll_Lights_Line 0070               getLight_LoadGO@loadgo 0074  
            ?_Lights_Initialization 0070             __size_of_Exception_Main 00D8  
             __size_of_WDT_Clearing 0002      setLights_Initialization@lights 0057  
       __size_of_set_TimeoutCleared 0006                   _LightsPointSelect 0A42  
              ??_getAll_Lights_Line 0074                  __CFG_FOSC$INTOSCIO 0000  
                ?_LightsPointSelect 0070                     _Timeout_Counter 0A68  
        __end_of_LED_Initialization 09A6               __end_of_getCDS_Status 097C  
    __end_of_setTemp_Initialization 091F          __size_of_DetectSYSC_Signal 000E  
                   _getLight_LoadGO 0944                   getCDS_AD@channel1 005C  
                 getCDS_AD@channel2 0057   __end_of_getLights_Allow_Condition 0AE7  
               ??_LightsPointSelect 0074               _setLoad_AH_AL_Restore 0ABA  
