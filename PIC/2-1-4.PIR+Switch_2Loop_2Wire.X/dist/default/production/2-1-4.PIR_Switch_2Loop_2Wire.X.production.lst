

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Jan 16 15:15:04 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,delta=2
    69                           	psect	text55,local,class=CODE,merge=1,delta=2
    70                           	psect	text56,local,class=CODE,merge=1,delta=2
    71                           	psect	text57,local,class=CODE,merge=1,delta=2
    72                           	psect	text58,local,class=CODE,merge=1,delta=2
    73                           	psect	text59,local,class=CODE,merge=1,delta=2
    74                           	psect	text60,local,class=CODE,merge=1,delta=2
    75                           	psect	text61,local,class=CODE,merge=1,delta=2
    76                           	psect	text62,local,class=CODE,merge=1,delta=2
    77                           	psect	text63,local,class=CODE,merge=1,delta=2
    78                           	psect	text64,local,class=CODE,merge=1,delta=2
    79                           	psect	text65,local,class=CODE,merge=1,delta=2
    80                           	psect	text66,local,class=CODE,merge=1,delta=2
    81                           	psect	text67,local,class=CODE,merge=1,delta=2
    82                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text73,local,class=CODE,merge=1,delta=2
    88                           	psect	intentry,global,class=CODE,delta=2
    89                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    90                           	dabs	1,0x7E,2
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0007                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  008F                     	;# 
   134  0090                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0093                     	;# 
   139  0094                     	;# 
   140  0095                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0096                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009C                     	;# 
   147  009D                     	;# 
   148  009F                     	;# 
   149  0108                     	;# 
   150  0109                     	;# 
   151  010C                     	;# 
   152  010C                     	;# 
   153  010D                     	;# 
   154  010D                     	;# 
   155  010E                     	;# 
   156  010F                     	;# 
   157  0185                     	;# 
   158  0186                     	;# 
   159  018C                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  000E                     	;# 
   175  000F                     	;# 
   176  0010                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0013                     	;# 
   180  0014                     	;# 
   181  0015                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  001D                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  0081                     	;# 
   195  0085                     	;# 
   196  0086                     	;# 
   197  0087                     	;# 
   198  0089                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  008F                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0093                     	;# 
   208  0094                     	;# 
   209  0095                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0096                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009F                     	;# 
   218  0108                     	;# 
   219  0109                     	;# 
   220  010C                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  010F                     	;# 
   226  0185                     	;# 
   227  0186                     	;# 
   228  018C                     	;# 
   229  0000                     	;# 
   230  0001                     	;# 
   231  0002                     	;# 
   232  0003                     	;# 
   233  0004                     	;# 
   234  0005                     	;# 
   235  0006                     	;# 
   236  0007                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0089                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  008F                     	;# 
   272  0090                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0095                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0096                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009F                     	;# 
   287  0108                     	;# 
   288  0109                     	;# 
   289  010C                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  0185                     	;# 
   296  0186                     	;# 
   297  018C                     	;# 
   298  0000                     	;# 
   299  0001                     	;# 
   300  0002                     	;# 
   301  0003                     	;# 
   302  0004                     	;# 
   303  0005                     	;# 
   304  0006                     	;# 
   305  0007                     	;# 
   306  0009                     	;# 
   307  000A                     	;# 
   308  000B                     	;# 
   309  000C                     	;# 
   310  000D                     	;# 
   311  000E                     	;# 
   312  000E                     	;# 
   313  000F                     	;# 
   314  0010                     	;# 
   315  0011                     	;# 
   316  0012                     	;# 
   317  0013                     	;# 
   318  0014                     	;# 
   319  0015                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0017                     	;# 
   323  0018                     	;# 
   324  0019                     	;# 
   325  001A                     	;# 
   326  001B                     	;# 
   327  001B                     	;# 
   328  001C                     	;# 
   329  001D                     	;# 
   330  001E                     	;# 
   331  001F                     	;# 
   332  0081                     	;# 
   333  0085                     	;# 
   334  0086                     	;# 
   335  0087                     	;# 
   336  0089                     	;# 
   337  008C                     	;# 
   338  008D                     	;# 
   339  008E                     	;# 
   340  008F                     	;# 
   341  0090                     	;# 
   342  0091                     	;# 
   343  0092                     	;# 
   344  0093                     	;# 
   345  0093                     	;# 
   346  0094                     	;# 
   347  0095                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0096                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009F                     	;# 
   356  0108                     	;# 
   357  0109                     	;# 
   358  010C                     	;# 
   359  010C                     	;# 
   360  010D                     	;# 
   361  010D                     	;# 
   362  010E                     	;# 
   363  010F                     	;# 
   364  0185                     	;# 
   365  0186                     	;# 
   366  018C                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0009                     	;# 
   376  000A                     	;# 
   377  000B                     	;# 
   378  000C                     	;# 
   379  000D                     	;# 
   380  000E                     	;# 
   381  000E                     	;# 
   382  000F                     	;# 
   383  0010                     	;# 
   384  0011                     	;# 
   385  0012                     	;# 
   386  0013                     	;# 
   387  0014                     	;# 
   388  0015                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0017                     	;# 
   392  0018                     	;# 
   393  0019                     	;# 
   394  001A                     	;# 
   395  001B                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  001D                     	;# 
   399  001E                     	;# 
   400  001F                     	;# 
   401  0081                     	;# 
   402  0085                     	;# 
   403  0086                     	;# 
   404  0087                     	;# 
   405  0089                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  008F                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0094                     	;# 
   416  0095                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0096                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009F                     	;# 
   425  0108                     	;# 
   426  0109                     	;# 
   427  010C                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  010F                     	;# 
   433  0185                     	;# 
   434  0186                     	;# 
   435  018C                     	;# 
   436  0000                     	;# 
   437  0001                     	;# 
   438  0002                     	;# 
   439  0003                     	;# 
   440  0004                     	;# 
   441  0005                     	;# 
   442  0006                     	;# 
   443  0007                     	;# 
   444  0009                     	;# 
   445  000A                     	;# 
   446  000B                     	;# 
   447  000C                     	;# 
   448  000D                     	;# 
   449  000E                     	;# 
   450  000E                     	;# 
   451  000F                     	;# 
   452  0010                     	;# 
   453  0011                     	;# 
   454  0012                     	;# 
   455  0013                     	;# 
   456  0014                     	;# 
   457  0015                     	;# 
   458  0015                     	;# 
   459  0016                     	;# 
   460  0017                     	;# 
   461  0018                     	;# 
   462  0019                     	;# 
   463  001A                     	;# 
   464  001B                     	;# 
   465  001B                     	;# 
   466  001C                     	;# 
   467  001D                     	;# 
   468  001E                     	;# 
   469  001F                     	;# 
   470  0081                     	;# 
   471  0085                     	;# 
   472  0086                     	;# 
   473  0087                     	;# 
   474  0089                     	;# 
   475  008C                     	;# 
   476  008D                     	;# 
   477  008E                     	;# 
   478  008F                     	;# 
   479  0090                     	;# 
   480  0091                     	;# 
   481  0092                     	;# 
   482  0093                     	;# 
   483  0093                     	;# 
   484  0094                     	;# 
   485  0095                     	;# 
   486  0095                     	;# 
   487  0096                     	;# 
   488  0096                     	;# 
   489  0098                     	;# 
   490  0099                     	;# 
   491  009C                     	;# 
   492  009D                     	;# 
   493  009F                     	;# 
   494  0108                     	;# 
   495  0109                     	;# 
   496  010C                     	;# 
   497  010C                     	;# 
   498  010D                     	;# 
   499  010D                     	;# 
   500  010E                     	;# 
   501  010F                     	;# 
   502  0185                     	;# 
   503  0186                     	;# 
   504  018C                     	;# 
   505  0000                     	;# 
   506  0001                     	;# 
   507  0002                     	;# 
   508  0003                     	;# 
   509  0004                     	;# 
   510  0005                     	;# 
   511  0006                     	;# 
   512  0007                     	;# 
   513  0009                     	;# 
   514  000A                     	;# 
   515  000B                     	;# 
   516  000C                     	;# 
   517  000D                     	;# 
   518  000E                     	;# 
   519  000E                     	;# 
   520  000F                     	;# 
   521  0010                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0013                     	;# 
   525  0014                     	;# 
   526  0015                     	;# 
   527  0015                     	;# 
   528  0016                     	;# 
   529  0017                     	;# 
   530  0018                     	;# 
   531  0019                     	;# 
   532  001A                     	;# 
   533  001B                     	;# 
   534  001B                     	;# 
   535  001C                     	;# 
   536  001D                     	;# 
   537  001E                     	;# 
   538  001F                     	;# 
   539  0081                     	;# 
   540  0085                     	;# 
   541  0086                     	;# 
   542  0087                     	;# 
   543  0089                     	;# 
   544  008C                     	;# 
   545  008D                     	;# 
   546  008E                     	;# 
   547  008F                     	;# 
   548  0090                     	;# 
   549  0091                     	;# 
   550  0092                     	;# 
   551  0093                     	;# 
   552  0093                     	;# 
   553  0094                     	;# 
   554  0095                     	;# 
   555  0095                     	;# 
   556  0096                     	;# 
   557  0096                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009F                     	;# 
   563  0108                     	;# 
   564  0109                     	;# 
   565  010C                     	;# 
   566  010C                     	;# 
   567  010D                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  010F                     	;# 
   571  0185                     	;# 
   572  0186                     	;# 
   573  018C                     	;# 
   574  0000                     	;# 
   575  0001                     	;# 
   576  0002                     	;# 
   577  0003                     	;# 
   578  0004                     	;# 
   579  0005                     	;# 
   580  0006                     	;# 
   581  0007                     	;# 
   582  0009                     	;# 
   583  000A                     	;# 
   584  000B                     	;# 
   585  000C                     	;# 
   586  000D                     	;# 
   587  000E                     	;# 
   588  000E                     	;# 
   589  000F                     	;# 
   590  0010                     	;# 
   591  0011                     	;# 
   592  0012                     	;# 
   593  0013                     	;# 
   594  0014                     	;# 
   595  0015                     	;# 
   596  0015                     	;# 
   597  0016                     	;# 
   598  0017                     	;# 
   599  0018                     	;# 
   600  0019                     	;# 
   601  001A                     	;# 
   602  001B                     	;# 
   603  001B                     	;# 
   604  001C                     	;# 
   605  001D                     	;# 
   606  001E                     	;# 
   607  001F                     	;# 
   608  0081                     	;# 
   609  0085                     	;# 
   610  0086                     	;# 
   611  0087                     	;# 
   612  0089                     	;# 
   613  008C                     	;# 
   614  008D                     	;# 
   615  008E                     	;# 
   616  008F                     	;# 
   617  0090                     	;# 
   618  0091                     	;# 
   619  0092                     	;# 
   620  0093                     	;# 
   621  0093                     	;# 
   622  0094                     	;# 
   623  0095                     	;# 
   624  0095                     	;# 
   625  0096                     	;# 
   626  0096                     	;# 
   627  0098                     	;# 
   628  0099                     	;# 
   629  009C                     	;# 
   630  009D                     	;# 
   631  009F                     	;# 
   632  0108                     	;# 
   633  0109                     	;# 
   634  010C                     	;# 
   635  010C                     	;# 
   636  010D                     	;# 
   637  010D                     	;# 
   638  010E                     	;# 
   639  010F                     	;# 
   640  0185                     	;# 
   641  0186                     	;# 
   642  018C                     	;# 
   643  0000                     	;# 
   644  0001                     	;# 
   645  0002                     	;# 
   646  0003                     	;# 
   647  0004                     	;# 
   648  0005                     	;# 
   649  0006                     	;# 
   650  0007                     	;# 
   651  0009                     	;# 
   652  000A                     	;# 
   653  000B                     	;# 
   654  000C                     	;# 
   655  000D                     	;# 
   656  000E                     	;# 
   657  000E                     	;# 
   658  000F                     	;# 
   659  0010                     	;# 
   660  0011                     	;# 
   661  0012                     	;# 
   662  0013                     	;# 
   663  0014                     	;# 
   664  0015                     	;# 
   665  0015                     	;# 
   666  0016                     	;# 
   667  0017                     	;# 
   668  0018                     	;# 
   669  0019                     	;# 
   670  001A                     	;# 
   671  001B                     	;# 
   672  001B                     	;# 
   673  001C                     	;# 
   674  001D                     	;# 
   675  001E                     	;# 
   676  001F                     	;# 
   677  0081                     	;# 
   678  0085                     	;# 
   679  0086                     	;# 
   680  0087                     	;# 
   681  0089                     	;# 
   682  008C                     	;# 
   683  008D                     	;# 
   684  008E                     	;# 
   685  008F                     	;# 
   686  0090                     	;# 
   687  0091                     	;# 
   688  0092                     	;# 
   689  0093                     	;# 
   690  0093                     	;# 
   691  0094                     	;# 
   692  0095                     	;# 
   693  0095                     	;# 
   694  0096                     	;# 
   695  0096                     	;# 
   696  0098                     	;# 
   697  0099                     	;# 
   698  009C                     	;# 
   699  009D                     	;# 
   700  009F                     	;# 
   701  0108                     	;# 
   702  0109                     	;# 
   703  010C                     	;# 
   704  010C                     	;# 
   705  010D                     	;# 
   706  010D                     	;# 
   707  010E                     	;# 
   708  010F                     	;# 
   709  0185                     	;# 
   710  0186                     	;# 
   711  018C                     	;# 
   712  0000                     	;# 
   713  0001                     	;# 
   714  0002                     	;# 
   715  0003                     	;# 
   716  0004                     	;# 
   717  0005                     	;# 
   718  0006                     	;# 
   719  0007                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  000E                     	;# 
   727  000F                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0013                     	;# 
   732  0014                     	;# 
   733  0015                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0017                     	;# 
   737  0018                     	;# 
   738  0019                     	;# 
   739  001A                     	;# 
   740  001B                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  001D                     	;# 
   744  001E                     	;# 
   745  001F                     	;# 
   746  0081                     	;# 
   747  0085                     	;# 
   748  0086                     	;# 
   749  0087                     	;# 
   750  0089                     	;# 
   751  008C                     	;# 
   752  008D                     	;# 
   753  008E                     	;# 
   754  008F                     	;# 
   755  0090                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0093                     	;# 
   759  0093                     	;# 
   760  0094                     	;# 
   761  0095                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0096                     	;# 
   765  0098                     	;# 
   766  0099                     	;# 
   767  009C                     	;# 
   768  009D                     	;# 
   769  009F                     	;# 
   770  0108                     	;# 
   771  0109                     	;# 
   772  010C                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  010D                     	;# 
   776  010E                     	;# 
   777  010F                     	;# 
   778  0185                     	;# 
   779  0186                     	;# 
   780  018C                     	;# 
   781  0000                     	;# 
   782  0001                     	;# 
   783  0002                     	;# 
   784  0003                     	;# 
   785  0004                     	;# 
   786  0005                     	;# 
   787  0006                     	;# 
   788  0007                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000D                     	;# 
   794  000E                     	;# 
   795  000E                     	;# 
   796  000F                     	;# 
   797  0010                     	;# 
   798  0011                     	;# 
   799  0012                     	;# 
   800  0013                     	;# 
   801  0014                     	;# 
   802  0015                     	;# 
   803  0015                     	;# 
   804  0016                     	;# 
   805  0017                     	;# 
   806  0018                     	;# 
   807  0019                     	;# 
   808  001A                     	;# 
   809  001B                     	;# 
   810  001B                     	;# 
   811  001C                     	;# 
   812  001D                     	;# 
   813  001E                     	;# 
   814  001F                     	;# 
   815  0081                     	;# 
   816  0085                     	;# 
   817  0086                     	;# 
   818  0087                     	;# 
   819  0089                     	;# 
   820  008C                     	;# 
   821  008D                     	;# 
   822  008E                     	;# 
   823  008F                     	;# 
   824  0090                     	;# 
   825  0091                     	;# 
   826  0092                     	;# 
   827  0093                     	;# 
   828  0093                     	;# 
   829  0094                     	;# 
   830  0095                     	;# 
   831  0095                     	;# 
   832  0096                     	;# 
   833  0096                     	;# 
   834  0098                     	;# 
   835  0099                     	;# 
   836  009C                     	;# 
   837  009D                     	;# 
   838  009F                     	;# 
   839  0108                     	;# 
   840  0109                     	;# 
   841  010C                     	;# 
   842  010C                     	;# 
   843  010D                     	;# 
   844  010D                     	;# 
   845  010E                     	;# 
   846  010F                     	;# 
   847  0185                     	;# 
   848  0186                     	;# 
   849  018C                     	;# 
   850  0000                     	;# 
   851  0001                     	;# 
   852  0002                     	;# 
   853  0003                     	;# 
   854  0004                     	;# 
   855  0005                     	;# 
   856  0006                     	;# 
   857  0007                     	;# 
   858  0009                     	;# 
   859  000A                     	;# 
   860  000B                     	;# 
   861  000C                     	;# 
   862  000D                     	;# 
   863  000E                     	;# 
   864  000E                     	;# 
   865  000F                     	;# 
   866  0010                     	;# 
   867  0011                     	;# 
   868  0012                     	;# 
   869  0013                     	;# 
   870  0014                     	;# 
   871  0015                     	;# 
   872  0015                     	;# 
   873  0016                     	;# 
   874  0017                     	;# 
   875  0018                     	;# 
   876  0019                     	;# 
   877  001A                     	;# 
   878  001B                     	;# 
   879  001B                     	;# 
   880  001C                     	;# 
   881  001D                     	;# 
   882  001E                     	;# 
   883  001F                     	;# 
   884  0081                     	;# 
   885  0085                     	;# 
   886  0086                     	;# 
   887  0087                     	;# 
   888  0089                     	;# 
   889  008C                     	;# 
   890  008D                     	;# 
   891  008E                     	;# 
   892  008F                     	;# 
   893  0090                     	;# 
   894  0091                     	;# 
   895  0092                     	;# 
   896  0093                     	;# 
   897  0093                     	;# 
   898  0094                     	;# 
   899  0095                     	;# 
   900  0095                     	;# 
   901  0096                     	;# 
   902  0096                     	;# 
   903  0098                     	;# 
   904  0099                     	;# 
   905  009C                     	;# 
   906  009D                     	;# 
   907  009F                     	;# 
   908  0108                     	;# 
   909  0109                     	;# 
   910  010C                     	;# 
   911  010C                     	;# 
   912  010D                     	;# 
   913  010D                     	;# 
   914  010E                     	;# 
   915  010F                     	;# 
   916  0185                     	;# 
   917  0186                     	;# 
   918  018C                     	;# 
   919  0000                     	;# 
   920  0001                     	;# 
   921  0002                     	;# 
   922  0003                     	;# 
   923  0004                     	;# 
   924  0005                     	;# 
   925  0006                     	;# 
   926  0007                     	;# 
   927  0009                     	;# 
   928  000A                     	;# 
   929  000B                     	;# 
   930  000C                     	;# 
   931  000D                     	;# 
   932  000E                     	;# 
   933  000E                     	;# 
   934  000F                     	;# 
   935  0010                     	;# 
   936  0011                     	;# 
   937  0012                     	;# 
   938  0013                     	;# 
   939  0014                     	;# 
   940  0015                     	;# 
   941  0015                     	;# 
   942  0016                     	;# 
   943  0017                     	;# 
   944  0018                     	;# 
   945  0019                     	;# 
   946  001A                     	;# 
   947  001B                     	;# 
   948  001B                     	;# 
   949  001C                     	;# 
   950  001D                     	;# 
   951  001E                     	;# 
   952  001F                     	;# 
   953  0081                     	;# 
   954  0085                     	;# 
   955  0086                     	;# 
   956  0087                     	;# 
   957  0089                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  008F                     	;# 
   962  0090                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0093                     	;# 
   966  0093                     	;# 
   967  0094                     	;# 
   968  0095                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0096                     	;# 
   972  0098                     	;# 
   973  0099                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009F                     	;# 
   977  0108                     	;# 
   978  0109                     	;# 
   979  010C                     	;# 
   980  010C                     	;# 
   981  010D                     	;# 
   982  010D                     	;# 
   983  010E                     	;# 
   984  010F                     	;# 
   985  0185                     	;# 
   986  0186                     	;# 
   987  018C                     	;# 
   988  0000                     	;# 
   989  0001                     	;# 
   990  0002                     	;# 
   991  0003                     	;# 
   992  0004                     	;# 
   993  0005                     	;# 
   994  0006                     	;# 
   995  0007                     	;# 
   996  0009                     	;# 
   997  000A                     	;# 
   998  000B                     	;# 
   999  000C                     	;# 
  1000  000D                     	;# 
  1001  000E                     	;# 
  1002  000E                     	;# 
  1003  000F                     	;# 
  1004  0010                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0013                     	;# 
  1008  0014                     	;# 
  1009  0015                     	;# 
  1010  0015                     	;# 
  1011  0016                     	;# 
  1012  0017                     	;# 
  1013  0018                     	;# 
  1014  0019                     	;# 
  1015  001A                     	;# 
  1016  001B                     	;# 
  1017  001B                     	;# 
  1018  001C                     	;# 
  1019  001D                     	;# 
  1020  001E                     	;# 
  1021  001F                     	;# 
  1022  0081                     	;# 
  1023  0085                     	;# 
  1024  0086                     	;# 
  1025  0087                     	;# 
  1026  0089                     	;# 
  1027  008C                     	;# 
  1028  008D                     	;# 
  1029  008E                     	;# 
  1030  008F                     	;# 
  1031  0090                     	;# 
  1032  0091                     	;# 
  1033  0092                     	;# 
  1034  0093                     	;# 
  1035  0093                     	;# 
  1036  0094                     	;# 
  1037  0095                     	;# 
  1038  0095                     	;# 
  1039  0096                     	;# 
  1040  0096                     	;# 
  1041  0098                     	;# 
  1042  0099                     	;# 
  1043  009C                     	;# 
  1044  009D                     	;# 
  1045  009F                     	;# 
  1046  0108                     	;# 
  1047  0109                     	;# 
  1048  010C                     	;# 
  1049  010C                     	;# 
  1050  010D                     	;# 
  1051  010D                     	;# 
  1052  010E                     	;# 
  1053  010F                     	;# 
  1054  0185                     	;# 
  1055  0186                     	;# 
  1056  018C                     	;# 
  1057  0000                     	;# 
  1058  0001                     	;# 
  1059  0002                     	;# 
  1060  0003                     	;# 
  1061  0004                     	;# 
  1062  0005                     	;# 
  1063  0006                     	;# 
  1064  0007                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  000E                     	;# 
  1072  000F                     	;# 
  1073  0010                     	;# 
  1074  0011                     	;# 
  1075  0012                     	;# 
  1076  0013                     	;# 
  1077  0014                     	;# 
  1078  0015                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0017                     	;# 
  1082  0018                     	;# 
  1083  0019                     	;# 
  1084  001A                     	;# 
  1085  001B                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  001D                     	;# 
  1089  001E                     	;# 
  1090  001F                     	;# 
  1091  0081                     	;# 
  1092  0085                     	;# 
  1093  0086                     	;# 
  1094  0087                     	;# 
  1095  0089                     	;# 
  1096  008C                     	;# 
  1097  008D                     	;# 
  1098  008E                     	;# 
  1099  008F                     	;# 
  1100  0090                     	;# 
  1101  0091                     	;# 
  1102  0092                     	;# 
  1103  0093                     	;# 
  1104  0093                     	;# 
  1105  0094                     	;# 
  1106  0095                     	;# 
  1107  0095                     	;# 
  1108  0096                     	;# 
  1109  0096                     	;# 
  1110  0098                     	;# 
  1111  0099                     	;# 
  1112  009C                     	;# 
  1113  009D                     	;# 
  1114  009F                     	;# 
  1115  0108                     	;# 
  1116  0109                     	;# 
  1117  010C                     	;# 
  1118  010C                     	;# 
  1119  010D                     	;# 
  1120  010D                     	;# 
  1121  010E                     	;# 
  1122  010F                     	;# 
  1123  0185                     	;# 
  1124  0186                     	;# 
  1125  018C                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0009                     	;# 
  1135  000A                     	;# 
  1136  000B                     	;# 
  1137  000C                     	;# 
  1138  000D                     	;# 
  1139  000E                     	;# 
  1140  000E                     	;# 
  1141  000F                     	;# 
  1142  0010                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0014                     	;# 
  1147  0015                     	;# 
  1148  0015                     	;# 
  1149  0016                     	;# 
  1150  0017                     	;# 
  1151  0018                     	;# 
  1152  0019                     	;# 
  1153  001A                     	;# 
  1154  001B                     	;# 
  1155  001B                     	;# 
  1156  001C                     	;# 
  1157  001D                     	;# 
  1158  001E                     	;# 
  1159  001F                     	;# 
  1160  0081                     	;# 
  1161  0085                     	;# 
  1162  0086                     	;# 
  1163  0087                     	;# 
  1164  0089                     	;# 
  1165  008C                     	;# 
  1166  008D                     	;# 
  1167  008E                     	;# 
  1168  008F                     	;# 
  1169  0090                     	;# 
  1170  0091                     	;# 
  1171  0092                     	;# 
  1172  0093                     	;# 
  1173  0093                     	;# 
  1174  0094                     	;# 
  1175  0095                     	;# 
  1176  0095                     	;# 
  1177  0096                     	;# 
  1178  0096                     	;# 
  1179  0098                     	;# 
  1180  0099                     	;# 
  1181  009C                     	;# 
  1182  009D                     	;# 
  1183  009F                     	;# 
  1184  0108                     	;# 
  1185  0109                     	;# 
  1186  010C                     	;# 
  1187  010C                     	;# 
  1188  010D                     	;# 
  1189  010D                     	;# 
  1190  010E                     	;# 
  1191  010F                     	;# 
  1192  0185                     	;# 
  1193  0186                     	;# 
  1194  018C                     	;# 
  1195  0000                     	;# 
  1196  0001                     	;# 
  1197  0002                     	;# 
  1198  0003                     	;# 
  1199  0004                     	;# 
  1200  0005                     	;# 
  1201  0006                     	;# 
  1202  0007                     	;# 
  1203  0009                     	;# 
  1204  000A                     	;# 
  1205  000B                     	;# 
  1206  000C                     	;# 
  1207  000D                     	;# 
  1208  000E                     	;# 
  1209  000E                     	;# 
  1210  000F                     	;# 
  1211  0010                     	;# 
  1212  0011                     	;# 
  1213  0012                     	;# 
  1214  0013                     	;# 
  1215  0014                     	;# 
  1216  0015                     	;# 
  1217  0015                     	;# 
  1218  0016                     	;# 
  1219  0017                     	;# 
  1220  0018                     	;# 
  1221  0019                     	;# 
  1222  001A                     	;# 
  1223  001B                     	;# 
  1224  001B                     	;# 
  1225  001C                     	;# 
  1226  001D                     	;# 
  1227  001E                     	;# 
  1228  001F                     	;# 
  1229  0081                     	;# 
  1230  0085                     	;# 
  1231  0086                     	;# 
  1232  0087                     	;# 
  1233  0089                     	;# 
  1234  008C                     	;# 
  1235  008D                     	;# 
  1236  008E                     	;# 
  1237  008F                     	;# 
  1238  0090                     	;# 
  1239  0091                     	;# 
  1240  0092                     	;# 
  1241  0093                     	;# 
  1242  0093                     	;# 
  1243  0094                     	;# 
  1244  0095                     	;# 
  1245  0095                     	;# 
  1246  0096                     	;# 
  1247  0096                     	;# 
  1248  0098                     	;# 
  1249  0099                     	;# 
  1250  009C                     	;# 
  1251  009D                     	;# 
  1252  009F                     	;# 
  1253  0108                     	;# 
  1254  0109                     	;# 
  1255  010C                     	;# 
  1256  010C                     	;# 
  1257  010D                     	;# 
  1258  010D                     	;# 
  1259  010E                     	;# 
  1260  010F                     	;# 
  1261  0185                     	;# 
  1262  0186                     	;# 
  1263  018C                     	;# 
  1264  0000                     	;# 
  1265  0001                     	;# 
  1266  0002                     	;# 
  1267  0003                     	;# 
  1268  0004                     	;# 
  1269  0005                     	;# 
  1270  0006                     	;# 
  1271  0007                     	;# 
  1272  0009                     	;# 
  1273  000A                     	;# 
  1274  000B                     	;# 
  1275  000C                     	;# 
  1276  000D                     	;# 
  1277  000E                     	;# 
  1278  000E                     	;# 
  1279  000F                     	;# 
  1280  0010                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0013                     	;# 
  1284  0014                     	;# 
  1285  0015                     	;# 
  1286  0015                     	;# 
  1287  0016                     	;# 
  1288  0017                     	;# 
  1289  0018                     	;# 
  1290  0019                     	;# 
  1291  001A                     	;# 
  1292  001B                     	;# 
  1293  001B                     	;# 
  1294  001C                     	;# 
  1295  001D                     	;# 
  1296  001E                     	;# 
  1297  001F                     	;# 
  1298  0081                     	;# 
  1299  0085                     	;# 
  1300  0086                     	;# 
  1301  0087                     	;# 
  1302  0089                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  008F                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0093                     	;# 
  1311  0093                     	;# 
  1312  0094                     	;# 
  1313  0095                     	;# 
  1314  0095                     	;# 
  1315  0096                     	;# 
  1316  0096                     	;# 
  1317  0098                     	;# 
  1318  0099                     	;# 
  1319  009C                     	;# 
  1320  009D                     	;# 
  1321  009F                     	;# 
  1322  0108                     	;# 
  1323  0109                     	;# 
  1324  010C                     	;# 
  1325  010C                     	;# 
  1326  010D                     	;# 
  1327  010D                     	;# 
  1328  010E                     	;# 
  1329  010F                     	;# 
  1330  0185                     	;# 
  1331  0186                     	;# 
  1332  018C                     	;# 
  1333  001F                     _ADCON0	set	31
  1334  001E                     _ADRES	set	30
  1335  0005                     _PORTA	set	5
  1336  0006                     _PORTB	set	6
  1337  0007                     _PORTC	set	7
  1338  0010                     _T1CON	set	16
  1339  000F                     _TMR1H	set	15
  1340  000E                     _TMR1L	set	14
  1341  005F                     _GIE	set	95
  1342  00F9                     _GO_nDONE	set	249
  1343  005E                     _PEIE	set	94
  1344  002E                     _RA6	set	46
  1345  002F                     _RA7	set	47
  1346  0032                     _RB2	set	50
  1347  0033                     _RB3	set	51
  1348  0034                     _RB4	set	52
  1349  0035                     _RB5	set	53
  1350  0038                     _RC0	set	56
  1351  0039                     _RC1	set	57
  1352  003C                     _RC4	set	60
  1353  003D                     _RC5	set	61
  1354  003E                     _RC6	set	62
  1355  003F                     _RC7	set	63
  1356  0060                     _TMR1IF	set	96
  1357  009F                     _ADCON1	set	159
  1358  009D                     _FVRCON	set	157
  1359  0090                     _OSCCON	set	144
  1360  0085                     _TRISA	set	133
  1361  0086                     _TRISB	set	134
  1362  0087                     _TRISC	set	135
  1363  0095                     _WPUB	set	149
  1364  0408                     _PS0	set	1032
  1365  0409                     _PS1	set	1033
  1366  040A                     _PS2	set	1034
  1367  040B                     _PSA	set	1035
  1368  0460                     _TMR1IE	set	1120
  1369  0185                     _ANSELA	set	389
  1370  0186                     _ANSELB	set	390
  1371                           
  1372                           	psect	text0
  1373  0000                     __ptext0:	
  1374                           ; #config settings
  1375                           
  1376                           
  1377                           ;psect for function _TMR1_ISR
  1378  0000                     
  1379                           	psect	cinit
  1380  0013                     start_initialization:	
  1381  0013                     __initialization:	
  1382                           
  1383                           ; Clear objects allocated to COMMON
  1384  0013  01F0               	clrf	__pbssCOMMON& (0+127)
  1385  0014  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1386  0015  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1387  0016  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1388  0017  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1389                           
  1390                           ; Clear objects allocated to BANK0
  1391  0018  1383               	bcf	3,7	;select IRP bank0
  1392  0019  3020               	movlw	low __pbssBANK0
  1393  001A  0084               	movwf	4
  1394  001B  305A               	movlw	low (__pbssBANK0+58)
  1395  001C  158A  20DE  118A   	fcall	clear_ram0
  1396                           
  1397                           ; Clear objects allocated to BANK1
  1398  001F  30A0               	movlw	low __pbssBANK1
  1399  0020  0084               	movwf	4
  1400  0021  30EF               	movlw	low (__pbssBANK1+79)
  1401  0022  158A  20DE         	fcall	clear_ram0
  1402                           
  1403                           ; Clear objects allocated to BANK2
  1404  0024  1283               	bcf	3,5	;RP0=0, select bank2
  1405  0025  1703               	bsf	3,6	;RP1=1, select bank2
  1406  0026  01A0               	clrf	__pbssBANK2& (0+127)
  1407  0027  01A1               	clrf	(__pbssBANK2+1)& (0+127)
  1408  0028  01A2               	clrf	(__pbssBANK2+2)& (0+127)
  1409  0029  01A3               	clrf	(__pbssBANK2+3)& (0+127)
  1410  002A  01A4               	clrf	(__pbssBANK2+4)& (0+127)
  1411  002B                     end_of_initialization:	
  1412                           ;End of C runtime variable initialization code
  1413                           
  1414  002B                     __end_of__initialization:	
  1415  002B  0183               	clrf	3
  1416  002C  158A  2E6C         	ljmp	_main	;jump to C main() function
  1417                           
  1418                           	psect	bssCOMMON
  1419  0070                     __pbssCOMMON:	
  1420  0070                     _Sw:	
  1421  0070                     	ds	2
  1422  0072                     _LED:	
  1423  0072                     	ds	1
  1424  0073                     _Light:	
  1425  0073                     	ds	1
  1426  0074                     _Lights:	
  1427  0074                     	ds	1
  1428                           
  1429                           	psect	bssBANK0
  1430  0020                     __pbssBANK0:	
  1431  0020                     _Buz1:	
  1432  0020                     	ds	12
  1433  002C                     _SYSC:	
  1434  002C                     	ds	5
  1435  0031                     _myMain:	
  1436  0031                     	ds	5
  1437  0036                     __CDS:	
  1438  0036                     	ds	4
  1439  003A                     _Timer1:	
  1440  003A                     	ds	3
  1441  003D                     _WDT:	
  1442  003D                     	ds	2
  1443  003F                     _Cmd:	
  1444  003F                     	ds	1
  1445  0040                     _LightsControl:	
  1446  0040                     	ds	1
  1447  0041                     _SwDetect:	
  1448  0041                     	ds	1
  1449  0042                     _Temp:	
  1450  0042                     	ds	6
  1451  0048                     _Lights1:	
  1452  0048                     	ds	5
  1453  004D                     _Lights2:	
  1454  004D                     	ds	5
  1455  0052                     _VarErrLED:	
  1456  0052                     	ds	4
  1457  0056                     _VarLED1:	
  1458  0056                     	ds	4
  1459                           
  1460                           	psect	bssBANK1
  1461  00A0                     __pbssBANK1:	
  1462  00A0                     __PIR:	
  1463  00A0                     	ds	42
  1464  00CA                     _Load:	
  1465  00CA                     	ds	28
  1466  00E6                     _Sw1:	
  1467  00E6                     	ds	5
  1468  00EB                     _VarLED2:	
  1469  00EB                     	ds	4
  1470                           
  1471                           	psect	bssBANK2
  1472  0120                     __pbssBANK2:	
  1473  0120                     _Sw2:	
  1474  0120                     	ds	5
  1475                           
  1476                           	psect	clrtext
  1477  08DE                     clear_ram0:	
  1478                           ;	Called with FSR containing the base address, and
  1479                           ;	W with the last address+1
  1480                           
  1481  08DE  0064               	clrwdt	;clear the watchdog before getting into this loop
  1482  08DF                     clrloop0:	
  1483  08DF  0180               	clrf	0	;clear RAM location pointed to by FSR
  1484  08E0  0A84               	incf	4,f	;increment pointer
  1485  08E1  0604               	xorwf	4,w	;XOR with final address
  1486  08E2  1903               	btfsc	3,2	;have we reached the end yet?
  1487  08E3  3400               	retlw	0	;all done for this memory range, return
  1488  08E4  0604               	xorwf	4,w	;XOR again to restore value
  1489  08E5  28DF               	goto	clrloop0	;do the next byte
  1490                           
  1491                           	psect	cstackBANK2
  1492  0125                     __pcstackBANK2:	
  1493  0125                     ?_main:	
  1494  0125                     main@argc:	
  1495                           ; 2 bytes @ 0x0
  1496                           
  1497                           
  1498                           ; 2 bytes @ 0x0
  1499  0125                     	ds	2
  1500  0127                     main@argv:	
  1501                           
  1502                           ; 2 bytes @ 0x2
  1503  0127                     	ds	2
  1504                           
  1505                           	psect	cstackCOMMON
  1506  0075                     __pcstackCOMMON:	
  1507  0075                     ?_setLED_Initialization:	
  1508  0075                     ?_setLED_Main:	
  1509                           ; 0 bytes @ 0x0
  1510                           
  1511  0075                     ?_Fosc_Set:	
  1512                           ; 0 bytes @ 0x0
  1513                           
  1514  0075                     ?_IO_Set:	
  1515                           ; 0 bytes @ 0x0
  1516                           
  1517  0075                     ?_TMR1_Set:	
  1518                           ; 0 bytes @ 0x0
  1519                           
  1520  0075                     ?_ADC_Set:	
  1521                           ; 0 bytes @ 0x0
  1522                           
  1523  0075                     ?_WDT_Set:	
  1524                           ; 0 bytes @ 0x0
  1525                           
  1526  0075                     ?_TMR1_ISR:	
  1527                           ; 0 bytes @ 0x0
  1528                           
  1529  0075                     ??_TMR1_ISR:	
  1530                           ; 0 bytes @ 0x0
  1531                           
  1532  0075                     ?_Timeout_Counter:	
  1533                           ; 0 bytes @ 0x0
  1534                           
  1535  0075                     ?_set_TimeoutCleared:	
  1536                           ; 0 bytes @ 0x0
  1537                           
  1538  0075                     ?_WDT_Clearing:	
  1539                           ; 0 bytes @ 0x0
  1540                           
  1541  0075                     ?_myMain_Initialization:	
  1542                           ; 0 bytes @ 0x0
  1543                           
  1544  0075                     ?_SYSC_Initialization:	
  1545                           ; 0 bytes @ 0x0
  1546                           
  1547  0075                     ?_Temp_Initialization:	
  1548                           ; 0 bytes @ 0x0
  1549                           
  1550  0075                     ?_Load_Initialization:	
  1551                           ; 0 bytes @ 0x0
  1552                           
  1553  0075                     ?_Lights_Initialization:	
  1554                           ; 0 bytes @ 0x0
  1555                           
  1556  0075                     ?_PIR_Initialization:	
  1557                           ; 0 bytes @ 0x0
  1558                           
  1559  0075                     ?_Switch_Initialization:	
  1560                           ; 0 bytes @ 0x0
  1561                           
  1562  0075                     ?_DetectSYSC_Signal:	
  1563                           ; 0 bytes @ 0x0
  1564                           
  1565  0075                     ?_getLoad_AD:	
  1566                           ; 0 bytes @ 0x0
  1567                           
  1568  0075                     ?_getTemp_AD:	
  1569                           ; 0 bytes @ 0x0
  1570                           
  1571  0075                     ?_my_MainTimer:	
  1572                           ; 0 bytes @ 0x0
  1573                           
  1574  0075                     ?_SYSC_Main:	
  1575                           ; 0 bytes @ 0x0
  1576                           
  1577  0075                     ?_Temp_Main:	
  1578                           ; 0 bytes @ 0x0
  1579                           
  1580  0075                     ?_Load_Main:	
  1581                           ; 0 bytes @ 0x0
  1582                           
  1583  0075                     ?_Lights_Main:	
  1584                           ; 0 bytes @ 0x0
  1585                           
  1586  0075                     ?_Switch_Main:	
  1587                           ; 0 bytes @ 0x0
  1588                           
  1589  0075                     ?_PIR_Main:	
  1590                           ; 0 bytes @ 0x0
  1591                           
  1592  0075                     ?_Exception_Main:	
  1593                           ; 0 bytes @ 0x0
  1594                           
  1595  0075                     ?_setLights_SwOn:	
  1596                           ; 0 bytes @ 0x0
  1597                           
  1598  0075                     ?_setLights_SwOff:	
  1599                           ; 0 bytes @ 0x0
  1600                           
  1601  0075                     ?_setLoad_AH_AL_Restore:	
  1602                           ; 0 bytes @ 0x0
  1603                           
  1604  0075                     ?_setTemp_Initialization:	
  1605                           ; 0 bytes @ 0x0
  1606                           
  1607  0075                     ?_setTemp_Main:	
  1608                           ; 0 bytes @ 0x0
  1609                           
  1610  0075                     ?_setSYSC_Initialization:	
  1611                           ; 0 bytes @ 0x0
  1612                           
  1613  0075                     ?_setSYSC_Main:	
  1614                           ; 0 bytes @ 0x0
  1615                           
  1616  0075                     ?_setSw_Main:	
  1617                           ; 0 bytes @ 0x0
  1618                           
  1619  0075                     ?_setLights_Initialization:	
  1620                           ; 0 bytes @ 0x0
  1621                           
  1622  0075                     ?_setLights_Main:	
  1623                           ; 0 bytes @ 0x0
  1624                           
  1625  0075                     ?_Lights_Control:	
  1626                           ; 0 bytes @ 0x0
  1627                           
  1628  0075                     ?_setLights_Line:	
  1629                           ; 0 bytes @ 0x0
  1630                           
  1631  0075                     ?_Buzzer_Initialization:	
  1632                           ; 0 bytes @ 0x0
  1633                           
  1634  0075                     ?_Buzzer_Main:	
  1635                           ; 0 bytes @ 0x0
  1636                           
  1637  0075                     ?_CDS_Initialization:	
  1638                           ; 0 bytes @ 0x0
  1639                           
  1640  0075                     ?_CDS_Main:	
  1641                           ; 0 bytes @ 0x0
  1642                           
  1643  0075                     ?_LedPointSelect:	
  1644                           ; 0 bytes @ 0x0
  1645                           
  1646  0075                     ?_LED_Initialization:	
  1647                           ; 0 bytes @ 0x0
  1648                           
  1649  0075                     ?_LED_Main:	
  1650                           ; 0 bytes @ 0x0
  1651                           
  1652  0075                     ?_Mcu_Initialization:	
  1653                           ; 0 bytes @ 0x0
  1654                           
  1655  0075                     ?_ISR:	
  1656                           ; 0 bytes @ 0x0
  1657                           
  1658  0075                     ??_ISR:	
  1659                           ; 0 bytes @ 0x0
  1660                           
  1661  0075                     ?_WDT_Main:	
  1662                           ; 0 bytes @ 0x0
  1663                           
  1664  0075                     ?_TouchPower:	
  1665                           ; 0 bytes @ 0x0
  1666                           
  1667  0075                     ?_SwPointSelect:	
  1668                           ; 0 bytes @ 0x0
  1669                           
  1670  0075                     ?_LightsPointSelect:	
  1671                           ; 0 bytes @ 0x0
  1672                           
  1673  0075                     ?_getAll_Lights_Line:	
  1674                           ; 0 bytes @ 0x0
  1675                           
  1676  0075                     ?_getLights_Status:	
  1677                           ; 1 bytes @ 0x0
  1678                           
  1679  0075                     ?_getLight_LoadGO:	
  1680                           ; 1 bytes @ 0x0
  1681                           
  1682  0075                     ?_getLight_Load_Status:	
  1683                           ; 1 bytes @ 0x0
  1684                           
  1685  0075                     ?_getSw_KeyStatus:	
  1686                           ; 1 bytes @ 0x0
  1687                           
  1688  0075                     ?_getLights_Allow_Condition:	
  1689                           ; 1 bytes @ 0x0
  1690                           
  1691  0075                     ?_getCDS_Status:	
  1692                           ; 1 bytes @ 0x0
  1693                           
  1694  0075                     ?_getMain_All_LightsStatus:	
  1695                           ; 1 bytes @ 0x0
  1696                           
  1697  0075                     ?_getMain_All_Error_Status:	
  1698                           ; 1 bytes @ 0x0
  1699                           
  1700  0075                     ?_getMain_Lights_Count:	
  1701                           ; 1 bytes @ 0x0
  1702                           
  1703  0075                     ?_getLoad_OK:	
  1704                           ; 1 bytes @ 0x0
  1705                           
  1706  0075                     getLights_Allow_Condition@lights:	
  1707                           ; 1 bytes @ 0x0
  1708                           
  1709                           
  1710                           ; 1 bytes @ 0x0
  1711  0075                     	ds	4
  1712  0079                     ??_Fosc_Set:	
  1713  0079                     ??_IO_Set:	
  1714                           ; 0 bytes @ 0x4
  1715                           
  1716  0079                     ??_TMR1_Set:	
  1717                           ; 0 bytes @ 0x4
  1718                           
  1719  0079                     ??_ADC_Set:	
  1720                           ; 0 bytes @ 0x4
  1721                           
  1722  0079                     ??_WDT_Set:	
  1723                           ; 0 bytes @ 0x4
  1724                           
  1725  0079                     ??_Timeout_Counter:	
  1726                           ; 0 bytes @ 0x4
  1727                           
  1728  0079                     ??_set_TimeoutCleared:	
  1729                           ; 0 bytes @ 0x4
  1730                           
  1731  0079                     ??_WDT_Clearing:	
  1732                           ; 0 bytes @ 0x4
  1733                           
  1734  0079                     ??_myMain_Initialization:	
  1735                           ; 0 bytes @ 0x4
  1736                           
  1737  0079                     ??_SYSC_Initialization:	
  1738                           ; 0 bytes @ 0x4
  1739                           
  1740  0079                     ??_Temp_Initialization:	
  1741                           ; 0 bytes @ 0x4
  1742                           
  1743  0079                     ??_PIR_Initialization:	
  1744                           ; 0 bytes @ 0x4
  1745                           
  1746  0079                     ??_Switch_Initialization:	
  1747                           ; 0 bytes @ 0x4
  1748                           
  1749  0079                     ??_DetectSYSC_Signal:	
  1750                           ; 0 bytes @ 0x4
  1751                           
  1752  0079                     ??_getAll_Lights_Line:	
  1753                           ; 0 bytes @ 0x4
  1754                           
  1755  0079                     ??_setLoad_AH_AL_Restore:	
  1756                           ; 0 bytes @ 0x4
  1757                           
  1758  0079                     ??_getLight_LoadGO:	
  1759                           ; 0 bytes @ 0x4
  1760                           
  1761  0079                     ??_getLight_Load_Status:	
  1762                           ; 0 bytes @ 0x4
  1763                           
  1764  0079                     ??_setTemp_Initialization:	
  1765                           ; 0 bytes @ 0x4
  1766                           
  1767  0079                     ??_setSYSC_Initialization:	
  1768                           ; 0 bytes @ 0x4
  1769                           
  1770  0079                     ??_getSw_KeyStatus:	
  1771                           ; 0 bytes @ 0x4
  1772                           
  1773  0079                     ??_setLights_Line:	
  1774                           ; 0 bytes @ 0x4
  1775                           
  1776  0079                     ??_Buzzer_Initialization:	
  1777                           ; 0 bytes @ 0x4
  1778                           
  1779  0079                     ??_Buzzer_Main:	
  1780                           ; 0 bytes @ 0x4
  1781                           
  1782  0079                     ??_CDS_Initialization:	
  1783                           ; 0 bytes @ 0x4
  1784                           
  1785  0079                     ??_getCDS_Status:	
  1786                           ; 0 bytes @ 0x4
  1787                           
  1788  0079                     ??_LedPointSelect:	
  1789                           ; 0 bytes @ 0x4
  1790                           
  1791  0079                     ??_WDT_Main:	
  1792                           ; 0 bytes @ 0x4
  1793                           
  1794  0079                     ??_getMain_All_LightsStatus:	
  1795                           ; 0 bytes @ 0x4
  1796                           
  1797  0079                     ??_getMain_All_Error_Status:	
  1798                           ; 0 bytes @ 0x4
  1799                           
  1800  0079                     ??_getMain_Lights_Count:	
  1801                           ; 0 bytes @ 0x4
  1802                           
  1803  0079                     ??_getLoad_OK:	
  1804                           ; 0 bytes @ 0x4
  1805                           
  1806  0079                     ??_TouchPower:	
  1807                           ; 0 bytes @ 0x4
  1808                           
  1809  0079                     ??_SwPointSelect:	
  1810                           ; 0 bytes @ 0x4
  1811                           
  1812  0079                     ??_LightsPointSelect:	
  1813                           ; 0 bytes @ 0x4
  1814                           
  1815  0079                     ??___awdiv:	
  1816                           ; 0 bytes @ 0x4
  1817                           
  1818  0079                     ??___lwdiv:	
  1819                           ; 0 bytes @ 0x4
  1820                           
  1821  0079                     ?_getAD:	
  1822                           ; 0 bytes @ 0x4
  1823                           
  1824  0079                     getCDS_Status@status:	
  1825                           ; 1 bytes @ 0x4
  1826                           
  1827  0079                     getAD@adcon1:	
  1828                           ; 1 bytes @ 0x4
  1829                           
  1830  0079                     getMain_All_LightsStatus@status:	
  1831                           ; 1 bytes @ 0x4
  1832                           
  1833  0079                     getLoad_OK@ok:	
  1834                           ; 1 bytes @ 0x4
  1835                           
  1836  0079                     SwPointSelect@sw:	
  1837                           ; 1 bytes @ 0x4
  1838                           
  1839  0079                     setLights_Line@lights:	
  1840                           ; 1 bytes @ 0x4
  1841                           
  1842  0079                     getLight_LoadGO@loadgo:	
  1843                           ; 1 bytes @ 0x4
  1844                           
  1845  0079                     getLight_Load_Status@loadstatus:	
  1846                           ; 1 bytes @ 0x4
  1847                           
  1848                           
  1849                           ; 1 bytes @ 0x4
  1850  0079                     	ds	1
  1851  007A                     ??_getAD:	
  1852  007A                     ??_setLED_Initialization:	
  1853                           ; 0 bytes @ 0x5
  1854                           
  1855  007A                     ??_setLED:	
  1856                           ; 0 bytes @ 0x5
  1857                           
  1858  007A                     ??_Load_Initialization:	
  1859                           ; 0 bytes @ 0x5
  1860                           
  1861  007A                     ??_Lights_Initialization:	
  1862                           ; 0 bytes @ 0x5
  1863                           
  1864  007A                     ??_SYSC_Main:	
  1865                           ; 0 bytes @ 0x5
  1866                           
  1867  007A                     ??_Temp_Main:	
  1868                           ; 0 bytes @ 0x5
  1869                           
  1870  007A                     ??_Lights_Main:	
  1871                           ; 0 bytes @ 0x5
  1872                           
  1873  007A                     ??_Switch_Main:	
  1874                           ; 0 bytes @ 0x5
  1875                           
  1876  007A                     ??_getLights_Status:	
  1877                           ; 0 bytes @ 0x5
  1878                           
  1879  007A                     ??_setLights_SwOn:	
  1880                           ; 0 bytes @ 0x5
  1881                           
  1882  007A                     ??_setLights_SwOff:	
  1883                           ; 0 bytes @ 0x5
  1884                           
  1885  007A                     ??_setSYSC_Main:	
  1886                           ; 0 bytes @ 0x5
  1887                           
  1888  007A                     ??_setLights_Initialization:	
  1889                           ; 0 bytes @ 0x5
  1890                           
  1891  007A                     ??_setLights_Main:	
  1892                           ; 0 bytes @ 0x5
  1893                           
  1894  007A                     ??_LED_Initialization:	
  1895                           ; 0 bytes @ 0x5
  1896                           
  1897  007A                     ??_LED_Main:	
  1898                           ; 0 bytes @ 0x5
  1899                           
  1900  007A                     ??_Mcu_Initialization:	
  1901                           ; 0 bytes @ 0x5
  1902                           
  1903                           
  1904                           	psect	cstackBANK0
  1905  005A                     __pcstackBANK0:	
  1906                           ; 0 bytes @ 0x5
  1907                           
  1908  005A                     ??_getLights_Allow_Condition:	
  1909  005A                     ??_CDS_Main:	
  1910                           ; 0 bytes @ 0x0
  1911                           
  1912  005A                     ?___awdiv:	
  1913                           ; 0 bytes @ 0x0
  1914                           
  1915  005A                     ?___lwdiv:	
  1916                           ; 2 bytes @ 0x0
  1917                           
  1918  005A                     LedPointSelect@led:	
  1919                           ; 2 bytes @ 0x0
  1920                           
  1921  005A                     getAD@adcon0:	
  1922                           ; 1 bytes @ 0x0
  1923                           
  1924  005A                     getMain_Lights_Count@count:	
  1925                           ; 1 bytes @ 0x0
  1926                           
  1927  005A                     setLoad_AH_AL_Restore@i:	
  1928                           ; 1 bytes @ 0x0
  1929                           
  1930  005A                     getSw_KeyStatus@status:	
  1931                           ; 1 bytes @ 0x0
  1932                           
  1933  005A                     LightsPointSelect@lights:	
  1934                           ; 1 bytes @ 0x0
  1935                           
  1936  005A                     getAll_Lights_Line@line:	
  1937                           ; 1 bytes @ 0x0
  1938                           
  1939  005A                     _getMain_All_Error_Status$2412:	
  1940                           ; 1 bytes @ 0x0
  1941                           
  1942  005A                     ___awdiv@divisor:	
  1943                           ; 2 bytes @ 0x0
  1944                           
  1945  005A                     ___lwdiv@divisor:	
  1946                           ; 2 bytes @ 0x0
  1947                           
  1948                           
  1949                           ; 2 bytes @ 0x0
  1950  005A                     	ds	1
  1951  005B                     ??_setLED_Main:	
  1952  005B                     ?_setLED:	
  1953                           ; 0 bytes @ 0x1
  1954                           
  1955  005B                     ??_getLoad_AD:	
  1956                           ; 0 bytes @ 0x1
  1957                           
  1958  005B                     ??_getTemp_AD:	
  1959                           ; 0 bytes @ 0x1
  1960                           
  1961  005B                     ?_setLights_Trigger:	
  1962                           ; 0 bytes @ 0x1
  1963                           
  1964  005B                     ?_getCDS_AD:	
  1965                           ; 0 bytes @ 0x1
  1966                           
  1967  005B                     getCDS_AD@channel2:	
  1968                           ; 0 bytes @ 0x1
  1969                           
  1970  005B                     setLED@command:	
  1971                           ; 1 bytes @ 0x1
  1972                           
  1973  005B                     getMain_Lights_Count@status1:	
  1974                           ; 1 bytes @ 0x1
  1975                           
  1976  005B                     getSw_KeyStatus@sw:	
  1977                           ; 1 bytes @ 0x1
  1978                           
  1979  005B                     setLights_Initialization@lights:	
  1980                           ; 1 bytes @ 0x1
  1981                           
  1982  005B                     getLights_Status@lights:	
  1983                           ; 1 bytes @ 0x1
  1984                           
  1985  005B                     setLights_Trigger@command:	
  1986                           ; 1 bytes @ 0x1
  1987                           
  1988  005B                     getLights_Allow_Condition@allow:	
  1989                           ; 1 bytes @ 0x1
  1990                           
  1991                           
  1992                           ; 1 bytes @ 0x1
  1993  005B                     	ds	1
  1994  005C                     ??_setLights_Trigger:	
  1995  005C                     ??_getCDS_AD:	
  1996                           ; 0 bytes @ 0x2
  1997                           
  1998  005C                     setLED@led:	
  1999                           ; 0 bytes @ 0x2
  2000                           
  2001  005C                     getMain_Lights_Count@status2:	
  2002                           ; 1 bytes @ 0x2
  2003                           
  2004  005C                     getLights_Status@status:	
  2005                           ; 1 bytes @ 0x2
  2006                           
  2007  005C                     _getLights_Allow_Condition$4782:	
  2008                           ; 1 bytes @ 0x2
  2009                           
  2010  005C                     _getMain_All_Error_Status$2413:	
  2011                           ; 1 bytes @ 0x2
  2012                           
  2013  005C                     ___awdiv@dividend:	
  2014                           ; 2 bytes @ 0x2
  2015                           
  2016  005C                     ___lwdiv@dividend:	
  2017                           ; 2 bytes @ 0x2
  2018                           
  2019                           
  2020                           ; 2 bytes @ 0x2
  2021  005C                     	ds	1
  2022  005D                     ?_setLights:	
  2023  005D                     setLED_Initialization@led:	
  2024                           ; 0 bytes @ 0x3
  2025                           
  2026  005D                     setLED_Main@led:	
  2027                           ; 1 bytes @ 0x3
  2028                           
  2029  005D                     getLoad_AD@channel:	
  2030                           ; 1 bytes @ 0x3
  2031                           
  2032  005D                     getTemp_AD@channel:	
  2033                           ; 1 bytes @ 0x3
  2034                           
  2035  005D                     setLights@status:	
  2036                           ; 1 bytes @ 0x3
  2037                           
  2038  005D                     setLights_Trigger@lights:	
  2039                           ; 1 bytes @ 0x3
  2040                           
  2041                           
  2042                           ; 1 bytes @ 0x3
  2043  005D                     	ds	1
  2044  005E                     ??_setLights:	
  2045  005E                     getCDS_AD@i:	
  2046                           ; 0 bytes @ 0x4
  2047                           
  2048  005E                     getMain_All_Error_Status@command:	
  2049                           ; 1 bytes @ 0x4
  2050                           
  2051  005E                     getLoad_AD@k:	
  2052                           ; 1 bytes @ 0x4
  2053                           
  2054  005E                     getTemp_AD@ADRES:	
  2055                           ; 1 bytes @ 0x4
  2056                           
  2057  005E                     setLights_SwOn@sw:	
  2058                           ; 1 bytes @ 0x4
  2059                           
  2060  005E                     setLights_SwOff@sw:	
  2061                           ; 1 bytes @ 0x4
  2062                           
  2063  005E                     ___awdiv@counter:	
  2064                           ; 1 bytes @ 0x4
  2065                           
  2066  005E                     ___lwdiv@counter:	
  2067                           ; 1 bytes @ 0x4
  2068                           
  2069                           
  2070                           ; 1 bytes @ 0x4
  2071  005E                     	ds	1
  2072  005F                     getCDS_AD@j:	
  2073  005F                     getMain_All_Error_Status@status:	
  2074                           ; 1 bytes @ 0x5
  2075                           
  2076  005F                     getLoad_AD@j:	
  2077                           ; 1 bytes @ 0x5
  2078                           
  2079  005F                     setLights@lights:	
  2080                           ; 1 bytes @ 0x5
  2081                           
  2082  005F                     ___awdiv@sign:	
  2083                           ; 1 bytes @ 0x5
  2084                           
  2085  005F                     ___lwdiv@quotient:	
  2086                           ; 1 bytes @ 0x5
  2087                           
  2088                           
  2089                           ; 2 bytes @ 0x5
  2090  005F                     	ds	1
  2091  0060                     ??_PIR_Main:	
  2092  0060                     ??_setSw_Main:	
  2093                           ; 0 bytes @ 0x6
  2094                           
  2095  0060                     getCDS_AD@channel1:	
  2096                           ; 0 bytes @ 0x6
  2097                           
  2098  0060                     getLoad_AD@ADRES:	
  2099                           ; 1 bytes @ 0x6
  2100                           
  2101  0060                     setLights_Main@lights:	
  2102                           ; 1 bytes @ 0x6
  2103                           
  2104  0060                     ___awdiv@quotient:	
  2105                           ; 1 bytes @ 0x6
  2106                           
  2107                           
  2108                           ; 2 bytes @ 0x6
  2109  0060                     	ds	1
  2110  0061                     ??_Load_Main:	
  2111  0061                     getLoad_AD@i:	
  2112                           ; 0 bytes @ 0x7
  2113                           
  2114                           
  2115                           ; 1 bytes @ 0x7
  2116  0061                     	ds	1
  2117  0062                     ?_getPIR_AD:	
  2118  0062                     ??_Lights_Control:	
  2119                           ; 0 bytes @ 0x8
  2120                           
  2121  0062                     ?_setBuz:	
  2122                           ; 0 bytes @ 0x8
  2123                           
  2124  0062                     getPIR_AD@channel2:	
  2125                           ; 0 bytes @ 0x8
  2126                           
  2127  0062                     setBuz@time:	
  2128                           ; 1 bytes @ 0x8
  2129                           
  2130                           
  2131                           ; 2 bytes @ 0x8
  2132  0062                     	ds	1
  2133  0063                     ??_getPIR_AD:	
  2134  0063                     Load_Main@error:	
  2135                           ; 0 bytes @ 0x9
  2136                           
  2137                           
  2138                           ; 1 bytes @ 0x9
  2139  0063                     	ds	1
  2140  0064                     ??_setBuz:	
  2141  0064                     PIR_Main@error:	
  2142                           ; 0 bytes @ 0xA
  2143                           
  2144  0064                     setSw_Main@sw:	
  2145                           ; 1 bytes @ 0xA
  2146                           
  2147  0064                     Lights_Control@lights:	
  2148                           ; 1 bytes @ 0xA
  2149                           
  2150  0064                     _Load_Main$2699:	
  2151                           ; 1 bytes @ 0xA
  2152                           
  2153                           
  2154                           ; 2 bytes @ 0xA
  2155  0064                     	ds	1
  2156  0065                     setBuz@count:	
  2157  0065                     _PIR_Main$3214:	
  2158                           ; 1 bytes @ 0xB
  2159                           
  2160                           
  2161                           ; 2 bytes @ 0xB
  2162  0065                     	ds	1
  2163  0066                     ??_my_MainTimer:	
  2164  0066                     ??_Exception_Main:	
  2165                           ; 0 bytes @ 0xC
  2166                           
  2167  0066                     ??_setTemp_Main:	
  2168                           ; 0 bytes @ 0xC
  2169                           
  2170  0066                     Load_Main@ErrorCountValue:	
  2171                           ; 0 bytes @ 0xC
  2172                           
  2173  0066                     getPIR_AD@j:	
  2174                           ; 1 bytes @ 0xC
  2175                           
  2176                           
  2177                           ; 1 bytes @ 0xC
  2178  0066                     	ds	1
  2179  0067                     Exception_Main@lights:	
  2180  0067                     Load_Main@Load_RunStatus:	
  2181                           ; 1 bytes @ 0xD
  2182                           
  2183  0067                     setTemp_Main@error:	
  2184                           ; 1 bytes @ 0xD
  2185                           
  2186  0067                     PIR_Main@Enable_Switch:	
  2187                           ; 1 bytes @ 0xD
  2188                           
  2189  0067                     getPIR_AD@channel1:	
  2190                           ; 1 bytes @ 0xD
  2191                           
  2192                           
  2193                           ; 1 bytes @ 0xD
  2194  0067                     	ds	1
  2195  0068                     Exception_Main@count:	
  2196  0068                     Load_Main@LightsCount:	
  2197                           ; 1 bytes @ 0xE
  2198                           
  2199  0068                     setTemp_Main@SafeValue:	
  2200                           ; 1 bytes @ 0xE
  2201                           
  2202  0068                     PIR_Main@TriggerValue:	
  2203                           ; 1 bytes @ 0xE
  2204                           
  2205  0068                     getPIR_AD@VRAD1:	
  2206                           ; 1 bytes @ 0xE
  2207                           
  2208                           
  2209                           ; 1 bytes @ 0xE
  2210  0068                     	ds	1
  2211  0069                     Exception_Main@error:	
  2212  0069                     setTemp_Main@DangerValue:	
  2213                           ; 1 bytes @ 0xF
  2214                           
  2215  0069                     PIR_Main@cds:	
  2216                           ; 1 bytes @ 0xF
  2217                           
  2218  0069                     getPIR_AD@VRAD:	
  2219                           ; 1 bytes @ 0xF
  2220                           
  2221  0069                     Load_Main@i:	
  2222                           ; 1 bytes @ 0xF
  2223                           
  2224                           
  2225                           ; 2 bytes @ 0xF
  2226  0069                     	ds	1
  2227  006A                     Exception_Main@status:	
  2228  006A                     setTemp_Main@AD:	
  2229                           ; 1 bytes @ 0x10
  2230                           
  2231  006A                     PIR_Main@LightsStatus:	
  2232                           ; 1 bytes @ 0x10
  2233                           
  2234  006A                     getPIR_AD@i:	
  2235                           ; 1 bytes @ 0x10
  2236                           
  2237                           
  2238                           ; 1 bytes @ 0x10
  2239  006A                     	ds	1
  2240  006B                     Exception_Main@i:	
  2241                           
  2242                           ; 2 bytes @ 0x11
  2243  006B                     	ds	2
  2244  006D                     Exception_Main@i_2426:	
  2245                           
  2246                           ; 2 bytes @ 0x13
  2247  006D                     	ds	2
  2248  006F                     ??_main:	
  2249                           
  2250                           ; 0 bytes @ 0x15
  2251  006F                     	ds	1
  2252                           
  2253                           	psect	maintext
  2254  0E6C                     __pmaintext:	
  2255 ;;
  2256 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2257 ;;
  2258 ;; *************** function _main *****************
  2259 ;; Defined at:
  2260 ;;		line 7 in file "../src/Main_B1.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;  argc            2    0[BANK2 ] int 
  2263 ;;  argv            2    2[BANK2 ] PTR PTR unsigned char 
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;		None
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  2    0[BANK2 ] int 
  2268 ;; Registers used:
  2269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 17F/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2275 ;;      Params:         0       0       0       4
  2276 ;;      Locals:         0       0       0       0
  2277 ;;      Temps:          0       1       0       0
  2278 ;;      Totals:         0       1       0       4
  2279 ;;Total ram usage:        5 bytes
  2280 ;; Hardware stack levels required when called:    7
  2281 ;; This function calls:
  2282 ;;		_Buzzer_Initialization
  2283 ;;		_Buzzer_Main
  2284 ;;		_CDS_Initialization
  2285 ;;		_CDS_Main
  2286 ;;		_DetectSYSC_Signal
  2287 ;;		_Exception_Main
  2288 ;;		_LED_Initialization
  2289 ;;		_LED_Main
  2290 ;;		_Lights_Initialization
  2291 ;;		_Lights_Main
  2292 ;;		_Load_Initialization
  2293 ;;		_Load_Main
  2294 ;;		_Mcu_Initialization
  2295 ;;		_PIR_Initialization
  2296 ;;		_PIR_Main
  2297 ;;		_SYSC_Initialization
  2298 ;;		_SYSC_Main
  2299 ;;		_Switch_Initialization
  2300 ;;		_Switch_Main
  2301 ;;		_Temp_Initialization
  2302 ;;		_Temp_Main
  2303 ;;		_WDT_Main
  2304 ;;		_getCDS_AD
  2305 ;;		_getLoad_AD
  2306 ;;		_getPIR_AD
  2307 ;;		_getTemp_AD
  2308 ;;		_myMain_Initialization
  2309 ;;		_my_MainTimer
  2310 ;; This function is called by:
  2311 ;;		Startup code after reset
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           
  2316                           ;psect for function _main
  2317  0E6C                     _main:	
  2318                           
  2319                           ;Main_B1.c: 8: myMain_Initialization();
  2320                           
  2321                           ;incstack = 0
  2322                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2323  0E6C  158A  2084  158A   	fcall	_myMain_Initialization
  2324                           
  2325                           ;Main_B1.c: 9: Mcu_Initialization();
  2326  0E6F  158A  2141  158A   	fcall	_Mcu_Initialization
  2327                           
  2328                           ;Main_B1.c: 10: ;;
  2329                           ;Main_B1.c: 11: LED_Initialization();
  2330  0E72  158A  20FC  158A   	fcall	_LED_Initialization
  2331                           
  2332                           ;Main_B1.c: 12: Buzzer_Initialization();
  2333  0E75  158A  2091  158A   	fcall	_Buzzer_Initialization
  2334                           
  2335                           ;Main_B1.c: 14: SYSC_Initialization();
  2336  0E78  158A  2088  158A   	fcall	_SYSC_Initialization
  2337                           
  2338                           ;Main_B1.c: 15: Temp_Initialization();
  2339  0E7B  158A  208E  158A   	fcall	_Temp_Initialization
  2340                           
  2341                           ;Main_B1.c: 16: Load_Initialization();
  2342  0E7E  158A  2085  158A   	fcall	_Load_Initialization
  2343                           
  2344                           ;Main_B1.c: 17: ;;
  2345                           ;Main_B1.c: 18: ;;
  2346                           ;Main_B1.c: 20: ;;
  2347                           ;Main_B1.c: 21: Lights_Initialization();
  2348  0E81  158A  20C6  158A   	fcall	_Lights_Initialization
  2349                           
  2350                           ;Main_B1.c: 22: CDS_Initialization();
  2351  0E84  158A  2095  158A   	fcall	_CDS_Initialization
  2352                           
  2353                           ;Main_B1.c: 23: PIR_Initialization();
  2354  0E87  158A  20E6  158A   	fcall	_PIR_Initialization
  2355                           
  2356                           ;Main_B1.c: 24: Switch_Initialization();
  2357  0E8A  158A  2082  158A   	fcall	_Switch_Initialization
  2358  0E8D                     l7350:	
  2359                           ;Main_B1.c: 25: ;;
  2360                           ;Main_B1.c: 26: ;;
  2361                           ;Main_B1.c: 27: ;;
  2362                           ;Main_B1.c: 28: ;;
  2363                           ;Main_B1.c: 30: while (1) {
  2364                           
  2365                           
  2366                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2367  0E8D  1283               	bcf	3,5	;RP0=0, select bank0
  2368  0E8E  1303               	bcf	3,6	;RP1=0, select bank0
  2369  0E8F  1C31               	btfss	_myMain,0
  2370  0E90  2EB0               	goto	l7362
  2371                           
  2372                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2373  0E91  158A  2108  158A   	fcall	_DetectSYSC_Signal
  2374                           
  2375                           ;Main_B1.c: 38: getLoad_AD(0x31);
  2376  0E94  3031               	movlw	49
  2377  0E95  158A  25B3  158A   	fcall	_getLoad_AD
  2378                           
  2379                           ;Main_B1.c: 42: getTemp_AD(0x21);
  2380  0E98  3021               	movlw	33
  2381  0E99  158A  23F9  158A   	fcall	_getTemp_AD
  2382                           
  2383                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x11);
  2384  0E9C  3011               	movlw	17
  2385  0E9D  1283               	bcf	3,5	;RP0=0, select bank0
  2386  0E9E  1303               	bcf	3,6	;RP1=0, select bank0
  2387  0E9F  00EF               	movwf	??_main
  2388  0EA0  086F               	movf	??_main,w
  2389  0EA1  00DB               	movwf	getCDS_AD@channel2
  2390  0EA2  3009               	movlw	9
  2391  0EA3  158A  2305  158A   	fcall	_getCDS_AD
  2392                           
  2393                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2394  0EA6  300D               	movlw	13
  2395  0EA7  1283               	bcf	3,5	;RP0=0, select bank0
  2396  0EA8  1303               	bcf	3,6	;RP1=0, select bank0
  2397  0EA9  00EF               	movwf	??_main
  2398  0EAA  086F               	movf	??_main,w
  2399  0EAB  00E2               	movwf	getPIR_AD@channel2
  2400  0EAC  3005               	movlw	5
  2401  0EAD  118A  250F  158A   	fcall	_getPIR_AD
  2402  0EB0                     l7362:	
  2403                           
  2404                           ;Main_B1.c: 57: }
  2405                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2406  0EB0  1283               	bcf	3,5	;RP0=0, select bank0
  2407  0EB1  1303               	bcf	3,6	;RP1=0, select bank0
  2408  0EB2  1C3A               	btfss	_Timer1,0
  2409  0EB3  2E8D               	goto	l7350
  2410                           
  2411                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2412  0EB4  103A               	bcf	_Timer1,0
  2413                           
  2414                           ;Main_B1.c: 96: my_MainTimer();
  2415  0EB5  158A  2327  158A   	fcall	_my_MainTimer
  2416                           
  2417                           ;Main_B1.c: 97: WDT_Main();
  2418  0EB8  158A  2181  158A   	fcall	_WDT_Main
  2419                           
  2420                           ;Main_B1.c: 98: ;;
  2421                           ;Main_B1.c: 99: ;;
  2422                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2423  0EBB  1283               	bcf	3,5	;RP0=0, select bank0
  2424  0EBC  1303               	bcf	3,6	;RP1=0, select bank0
  2425  0EBD  1C31               	btfss	_myMain,0
  2426  0EBE  2E8D               	goto	l7350
  2427                           
  2428                           ;Main_B1.c: 101: ;;
  2429                           ;Main_B1.c: 103: LED_Main();
  2430  0EBF  158A  2099  158A   	fcall	_LED_Main
  2431                           
  2432                           ;Main_B1.c: 104: Buzzer_Main();
  2433  0EC2  158A  2528  158A   	fcall	_Buzzer_Main
  2434                           
  2435                           ;Main_B1.c: 106: SYSC_Main();
  2436  0EC5  158A  208B  158A   	fcall	_SYSC_Main
  2437                           
  2438                           ;Main_B1.c: 107: Temp_Main();
  2439  0EC8  118A  27FD  158A   	fcall	_Temp_Main
  2440                           
  2441                           ;Main_B1.c: 108: Load_Main();
  2442  0ECB  118A  202E  158A   	fcall	_Load_Main
  2443                           
  2444                           ;Main_B1.c: 109: ;;
  2445                           ;Main_B1.c: 111: Lights_Main();
  2446  0ECE  158A  236F  158A   	fcall	_Lights_Main
  2447                           
  2448                           ;Main_B1.c: 112: ;;
  2449                           ;Main_B1.c: 113: Switch_Main();
  2450  0ED1  158A  20F1  158A   	fcall	_Switch_Main
  2451                           
  2452                           ;Main_B1.c: 114: CDS_Main();
  2453  0ED4  158A  23C5  158A   	fcall	_CDS_Main
  2454                           
  2455                           ;Main_B1.c: 115: PIR_Main();
  2456  0ED7  118A  2212  158A   	fcall	_PIR_Main
  2457                           
  2458                           ;Main_B1.c: 117: ;;
  2459                           ;Main_B1.c: 118: ;;
  2460                           ;Main_B1.c: 119: ;;
  2461                           ;Main_B1.c: 120: ;;
  2462                           ;Main_B1.c: 121: Exception_Main();
  2463  0EDA  118A  263D  158A   	fcall	_Exception_Main
  2464  0EDD  2E8D               	goto	l7350
  2465  0EDE                     __end_of_main:	
  2466                           ;Main_B1.c: 128: }
  2467                           ;Main_B1.c: 129: }
  2468                           ;Main_B1.c: 163: }
  2469                           ;Main_B1.c: 164: return (0);
  2470                           ;	Return value of _main is never used
  2471                           
  2472                           
  2473                           	psect	text1
  2474  0B27                     __ptext1:	
  2475 ;; *************** function _my_MainTimer *****************
  2476 ;; Defined at:
  2477 ;;		line 185 in file "../src/Main_B1.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;		None
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;		None
  2482 ;; Return value:  Size  Location     Type
  2483 ;;		None               void
  2484 ;; Registers used:
  2485 ;;		wreg, status,2, status,0, pclath, cstack
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2491 ;;      Params:         0       0       0       0
  2492 ;;      Locals:         0       0       0       0
  2493 ;;      Temps:          0       1       0       0
  2494 ;;      Totals:         0       1       0       0
  2495 ;;Total ram usage:        1 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    4
  2498 ;; This function calls:
  2499 ;;		_setBuz
  2500 ;; This function is called by:
  2501 ;;		_main
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           
  2506                           ;psect for function _my_MainTimer
  2507  0B27                     _my_MainTimer:	
  2508                           
  2509                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2510                           
  2511                           ;incstack = 0
  2512                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0+pclath+cstack]
  2513  0B27  1283               	bcf	3,5	;RP0=0, select bank0
  2514  0B28  1303               	bcf	3,6	;RP1=0, select bank0
  2515  0B29  1831               	btfsc	_myMain,0
  2516  0B2A  2B40               	goto	l6958
  2517                           
  2518                           ;Main_B1.c: 188: myMain.PowerCount++;
  2519  0B2B  3001               	movlw	1
  2520  0B2C  00E6               	movwf	??_my_MainTimer
  2521  0B2D  0866               	movf	??_my_MainTimer,w
  2522  0B2E  07B2               	addwf	_myMain+1,f
  2523                           
  2524                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2525  0B2F  0832               	movf	_myMain+1,w
  2526  0B30  3A4B               	xorlw	75
  2527  0B31  1D03               	skipz
  2528  0B32  0008               	return
  2529                           
  2530                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2531  0B33  01B2               	clrf	_myMain+1
  2532                           
  2533                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2534  0B34  1431               	bsf	_myMain,0
  2535                           
  2536                           ;Main_B1.c: 196: setBuz(3, 50);
  2537  0B35  3032               	movlw	50
  2538  0B36  00E2               	movwf	setBuz@time
  2539  0B37  3000               	movlw	0
  2540  0B38  00E3               	movwf	setBuz@time+1
  2541  0B39  3003               	movlw	3
  2542  0B3A  158A  256C         	fcall	_setBuz
  2543                           
  2544                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2545  0B3C  1283               	bcf	3,5	;RP0=0, select bank0
  2546  0B3D  1303               	bcf	3,6	;RP1=0, select bank0
  2547  0B3E  1631               	bsf	_myMain,4
  2548                           
  2549                           ;Main_B1.c: 206: }
  2550                           ;Main_B1.c: 207: } else {
  2551  0B3F  0008               	return
  2552  0B40                     l6958:	
  2553                           
  2554                           ;Main_B1.c: 208: myMain.PowerCount++;
  2555  0B40  3001               	movlw	1
  2556  0B41  00E6               	movwf	??_my_MainTimer
  2557  0B42  0866               	movf	??_my_MainTimer,w
  2558  0B43  07B2               	addwf	_myMain+1,f
  2559                           
  2560                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2561  0B44  0832               	movf	_myMain+1,w
  2562  0B45  3A32               	xorlw	50
  2563  0B46  1D03               	skipz
  2564  0B47  0008               	return
  2565                           
  2566                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2567  0B48  01B2               	clrf	_myMain+1
  2568  0B49  0008               	return
  2569  0B4A                     __end_of_my_MainTimer:	
  2570                           
  2571                           	psect	text2
  2572  0884                     __ptext2:	
  2573 ;; *************** function _myMain_Initialization *****************
  2574 ;; Defined at:
  2575 ;;		line 170 in file "../src/Main_B1.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;		None
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;		None
  2580 ;; Return value:  Size  Location     Type
  2581 ;;		None               void
  2582 ;; Registers used:
  2583 ;;		None
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2589 ;;      Params:         0       0       0       0
  2590 ;;      Locals:         0       0       0       0
  2591 ;;      Temps:          0       0       0       0
  2592 ;;      Totals:         0       0       0       0
  2593 ;;Total ram usage:        0 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    2
  2596 ;; This function calls:
  2597 ;;		Nothing
  2598 ;; This function is called by:
  2599 ;;		_main
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           
  2604                           ;psect for function _myMain_Initialization
  2605  0884                     _myMain_Initialization:	
  2606                           
  2607                           ;incstack = 0
  2608                           ; Regs used in _myMain_Initialization: []
  2609  0884  0008               	return
  2610  0885                     __end_of_myMain_Initialization:	
  2611                           
  2612                           	psect	text3
  2613  0BF9                     __ptext3:	
  2614 ;; *************** function _getTemp_AD *****************
  2615 ;; Defined at:
  2616 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2617 ;; Parameters:    Size  Location     Type
  2618 ;;  channel         1    wreg     unsigned char 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  channel         1    3[BANK0 ] unsigned char 
  2621 ;;  ADRES           1    4[BANK0 ] unsigned char 
  2622 ;; Return value:  Size  Location     Type
  2623 ;;		None               void
  2624 ;; Registers used:
  2625 ;;		wreg, status,2, status,0, pclath, cstack
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2631 ;;      Params:         0       0       0       0
  2632 ;;      Locals:         0       2       0       0
  2633 ;;      Temps:          0       2       0       0
  2634 ;;      Totals:         0       4       0       0
  2635 ;;Total ram usage:        4 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    4
  2638 ;; This function calls:
  2639 ;;		_getAD
  2640 ;; This function is called by:
  2641 ;;		_main
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           
  2646                           ;psect for function _getTemp_AD
  2647  0BF9                     _getTemp_AD:	
  2648                           
  2649                           ;incstack = 0
  2650                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2651                           ;getTemp_AD@channel stored from wreg
  2652  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
  2653  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
  2654  0BFB  00DD               	movwf	getTemp_AD@channel
  2655                           
  2656                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2657  0BFC  01DE               	clrf	getTemp_AD@ADRES
  2658                           
  2659                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2660  0BFD  1D42               	btfss	_Temp,2
  2661  0BFE  2C20               	goto	l6864
  2662                           
  2663                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2664  0BFF  3070               	movlw	112
  2665  0C00  00DB               	movwf	??_getTemp_AD
  2666  0C01  085B               	movf	??_getTemp_AD,w
  2667  0C02  00F9               	movwf	getAD@adcon1
  2668  0C03  085D               	movf	getTemp_AD@channel,w
  2669  0C04  158A  22E9  158A   	fcall	_getAD
  2670  0C07  1283               	bcf	3,5	;RP0=0, select bank0
  2671  0C08  1303               	bcf	3,6	;RP1=0, select bank0
  2672  0C09  00DC               	movwf	??_getTemp_AD+1
  2673  0C0A  085C               	movf	??_getTemp_AD+1,w
  2674  0C0B  00DE               	movwf	getTemp_AD@ADRES
  2675                           
  2676                           ;OverTemperature_B1.c: 22: if (ADRES > 0) {
  2677  0C0C  085E               	movf	getTemp_AD@ADRES,w
  2678  0C0D  1903               	btfsc	3,2
  2679  0C0E  2C20               	goto	l6864
  2680                           
  2681                           ;OverTemperature_B1.c: 23: if (Temp.ADH[0] < ADRES) {
  2682  0C0F  085E               	movf	getTemp_AD@ADRES,w
  2683  0C10  0246               	subwf	_Temp+4,w
  2684  0C11  1803               	skipnc
  2685  0C12  2C18               	goto	l6860
  2686                           
  2687                           ;OverTemperature_B1.c: 24: Temp.ADH[0] = ADRES;
  2688  0C13  085E               	movf	getTemp_AD@ADRES,w
  2689  0C14  00DB               	movwf	??_getTemp_AD
  2690  0C15  085B               	movf	??_getTemp_AD,w
  2691  0C16  00C6               	movwf	_Temp+4
  2692                           
  2693                           ;OverTemperature_B1.c: 25: } else if (Temp.ADH[1] < ADRES) {
  2694  0C17  2C20               	goto	l6864
  2695  0C18                     l6860:	
  2696  0C18  085E               	movf	getTemp_AD@ADRES,w
  2697  0C19  0247               	subwf	_Temp+5,w
  2698  0C1A  1803               	skipnc
  2699  0C1B  2C20               	goto	l6864
  2700                           
  2701                           ;OverTemperature_B1.c: 26: Temp.ADH[1] = ADRES;
  2702  0C1C  085E               	movf	getTemp_AD@ADRES,w
  2703  0C1D  00DB               	movwf	??_getTemp_AD
  2704  0C1E  085B               	movf	??_getTemp_AD,w
  2705  0C1F  00C7               	movwf	_Temp+5
  2706  0C20                     l6864:	
  2707                           
  2708                           ;OverTemperature_B1.c: 27: }
  2709                           ;OverTemperature_B1.c: 28: }
  2710                           ;OverTemperature_B1.c: 29: }
  2711                           ;OverTemperature_B1.c: 36: ADRES = getAD(channel, 0x70);
  2712  0C20  3070               	movlw	112
  2713  0C21  00DB               	movwf	??_getTemp_AD
  2714  0C22  085B               	movf	??_getTemp_AD,w
  2715  0C23  00F9               	movwf	getAD@adcon1
  2716  0C24  085D               	movf	getTemp_AD@channel,w
  2717  0C25  158A  22E9         	fcall	_getAD
  2718  0C27  1283               	bcf	3,5	;RP0=0, select bank0
  2719  0C28  1303               	bcf	3,6	;RP1=0, select bank0
  2720  0C29  00DC               	movwf	??_getTemp_AD+1
  2721  0C2A  085C               	movf	??_getTemp_AD+1,w
  2722  0C2B  00DE               	movwf	getTemp_AD@ADRES
  2723  0C2C  0008               	return
  2724  0C2D                     __end_of_getTemp_AD:	
  2725                           
  2726                           	psect	text4
  2727  050F                     __ptext4:	
  2728 ;; *************** function _getPIR_AD *****************
  2729 ;; Defined at:
  2730 ;;		line 327 in file "../src/PIR_B1.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  channel1        1    wreg     unsigned char 
  2733 ;;  channel2        1    8[BANK0 ] unsigned char 
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  channel1        1   13[BANK0 ] unsigned char 
  2736 ;;  i               1   16[BANK0 ] unsigned char 
  2737 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2738 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2739 ;;  j               1   12[BANK0 ] unsigned char 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;		None               void
  2742 ;; Registers used:
  2743 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2749 ;;      Params:         0       1       0       0
  2750 ;;      Locals:         0       5       0       0
  2751 ;;      Temps:          0       3       0       0
  2752 ;;      Totals:         0       9       0       0
  2753 ;;Total ram usage:        9 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:    4
  2756 ;; This function calls:
  2757 ;;		___awdiv
  2758 ;;		___lwdiv
  2759 ;;		_getAD
  2760 ;; This function is called by:
  2761 ;;		_main
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           
  2766                           ;psect for function _getPIR_AD
  2767  050F                     _getPIR_AD:	
  2768                           
  2769                           ;incstack = 0
  2770                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2771                           ;getPIR_AD@channel1 stored from wreg
  2772  050F  1283               	bcf	3,5	;RP0=0, select bank0
  2773  0510  1303               	bcf	3,6	;RP1=0, select bank0
  2774  0511  00E7               	movwf	getPIR_AD@channel1
  2775                           
  2776                           ;PIR_B1.c: 328: char i = 0, j = 0;
  2777  0512  01EA               	clrf	getPIR_AD@i
  2778  0513  01E6               	clrf	getPIR_AD@j
  2779                           
  2780                           ;PIR_B1.c: 329: char VRAD = 0, VRAD1 = 0;
  2781  0514  01E9               	clrf	getPIR_AD@VRAD
  2782  0515  01E8               	clrf	getPIR_AD@VRAD1
  2783                           
  2784                           ;PIR_B1.c: 330: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2785  0516  1683               	bsf	3,5	;RP0=1, select bank1
  2786  0517  1303               	bcf	3,6	;RP1=0, select bank1
  2787  0518  1CA0               	btfss	__PIR^(0+128),1
  2788  0519  0008               	return
  2789  051A  1920               	btfsc	__PIR^(0+128),2
  2790  051B  0008               	return
  2791                           
  2792                           ;PIR_B1.c: 331: _PIR.GO = 1;
  2793  051C  1520               	bsf	__PIR^(0+128),2
  2794                           
  2795                           ;PIR_B1.c: 338: VRAD1 = getAD(channel1, 0x70);
  2796  051D  3070               	movlw	112
  2797  051E  1283               	bcf	3,5	;RP0=0, select bank0
  2798  051F  1303               	bcf	3,6	;RP1=0, select bank0
  2799  0520  00E3               	movwf	??_getPIR_AD
  2800  0521  0863               	movf	??_getPIR_AD,w
  2801  0522  00F9               	movwf	getAD@adcon1
  2802  0523  0867               	movf	getPIR_AD@channel1,w
  2803  0524  158A  22E9  118A   	fcall	_getAD
  2804  0527  1283               	bcf	3,5	;RP0=0, select bank0
  2805  0528  1303               	bcf	3,6	;RP1=0, select bank0
  2806  0529  00E4               	movwf	??_getPIR_AD+1
  2807  052A  0864               	movf	??_getPIR_AD+1,w
  2808  052B  00E8               	movwf	getPIR_AD@VRAD1
  2809                           
  2810                           ;PIR_B1.c: 339: VRAD = VRAD1 / 25;
  2811  052C  3019               	movlw	25
  2812  052D  00DA               	movwf	___awdiv@divisor
  2813  052E  3000               	movlw	0
  2814  052F  00DB               	movwf	___awdiv@divisor+1
  2815  0530  0868               	movf	getPIR_AD@VRAD1,w
  2816  0531  00E3               	movwf	??_getPIR_AD
  2817  0532  01E4               	clrf	??_getPIR_AD+1
  2818  0533  0863               	movf	??_getPIR_AD,w
  2819  0534  00DC               	movwf	___awdiv@dividend
  2820  0535  0864               	movf	??_getPIR_AD+1,w
  2821  0536  00DD               	movwf	___awdiv@dividend+1
  2822  0537  158A  260F  118A   	fcall	___awdiv
  2823  053A  1283               	bcf	3,5	;RP0=0, select bank0
  2824  053B  1303               	bcf	3,6	;RP1=0, select bank0
  2825  053C  085A               	movf	?___awdiv,w
  2826  053D  00E5               	movwf	??_getPIR_AD+2
  2827  053E  0865               	movf	??_getPIR_AD+2,w
  2828  053F  00E9               	movwf	getPIR_AD@VRAD
  2829                           
  2830                           ;PIR_B1.c: 340: _PIR.SignalAD = getAD(channel2, 0x70);
  2831  0540  3070               	movlw	112
  2832  0541  00E3               	movwf	??_getPIR_AD
  2833  0542  0863               	movf	??_getPIR_AD,w
  2834  0543  00F9               	movwf	getAD@adcon1
  2835  0544  0862               	movf	getPIR_AD@channel2,w
  2836  0545  158A  22E9  118A   	fcall	_getAD
  2837  0548  1283               	bcf	3,5	;RP0=0, select bank0
  2838  0549  1303               	bcf	3,6	;RP1=0, select bank0
  2839  054A  00E4               	movwf	??_getPIR_AD+1
  2840  054B  0864               	movf	??_getPIR_AD+1,w
  2841  054C  1683               	bsf	3,5	;RP0=1, select bank1
  2842  054D  1303               	bcf	3,6	;RP1=0, select bank1
  2843  054E  00A1               	movwf	(__PIR^(0+128)+1)
  2844                           
  2845                           ;PIR_B1.c: 354: if (VRAD < 1) {
  2846  054F  1283               	bcf	3,5	;RP0=0, select bank0
  2847  0550  1303               	bcf	3,6	;RP1=0, select bank0
  2848  0551  08E9               	movf	getPIR_AD@VRAD,f
  2849  0552  1D03               	skipz
  2850  0553  2D56               	goto	l6880
  2851                           
  2852                           ;PIR_B1.c: 355: _PIR.CloseTimeValue = 5;
  2853  0554  3005               	movlw	5
  2854  0555  2D5C               	goto	L1
  2855  0556                     l6880:	
  2856                           ;PIR_B1.c: 356: } else if (VRAD < 3) {
  2857                           
  2858  0556  3003               	movlw	3
  2859  0557  1283               	bcf	3,5	;RP0=0, select bank0
  2860  0558  0269               	subwf	getPIR_AD@VRAD,w
  2861  0559  1803               	skipnc
  2862  055A  2D61               	goto	l6884
  2863                           
  2864                           ;PIR_B1.c: 357: _PIR.CloseTimeValue = 60;
  2865  055B  303C               	movlw	60
  2866  055C                     L1:	
  2867  055C  1683               	bsf	3,5	;RP0=1, select bank1
  2868  055D  1303               	bcf	3,6	;RP1=0, select bank1
  2869  055E  00C3               	movwf	(__PIR^(0+128)+35)
  2870  055F  3000               	movlw	0
  2871  0560  2D87               	goto	L5
  2872  0561                     l6884:	
  2873                           ;PIR_B1.c: 358: } else if (VRAD < 5) {
  2874                           
  2875  0561  3005               	movlw	5
  2876  0562  1283               	bcf	3,5	;RP0=0, select bank0
  2877  0563  0269               	subwf	getPIR_AD@VRAD,w
  2878  0564  1803               	skipnc
  2879  0565  2D6C               	goto	l6888
  2880                           
  2881                           ;PIR_B1.c: 359: _PIR.CloseTimeValue = 300;
  2882  0566  302C               	movlw	44
  2883  0567  1683               	bsf	3,5	;RP0=1, select bank1
  2884  0568  1303               	bcf	3,6	;RP1=0, select bank1
  2885  0569  00C3               	movwf	(__PIR^(0+128)+35)
  2886  056A  3001               	movlw	1
  2887  056B  2D87               	goto	L5
  2888  056C                     l6888:	
  2889                           ;PIR_B1.c: 360: } else if (VRAD < 7) {
  2890                           
  2891  056C  3007               	movlw	7
  2892  056D  1283               	bcf	3,5	;RP0=0, select bank0
  2893  056E  0269               	subwf	getPIR_AD@VRAD,w
  2894  056F  1803               	skipnc
  2895  0570  2D77               	goto	l6892
  2896                           
  2897                           ;PIR_B1.c: 361: _PIR.CloseTimeValue = 600;
  2898  0571  3058               	movlw	88
  2899  0572  1683               	bsf	3,5	;RP0=1, select bank1
  2900  0573  1303               	bcf	3,6	;RP1=0, select bank1
  2901  0574  00C3               	movwf	(__PIR^(0+128)+35)
  2902  0575  3002               	movlw	2
  2903  0576  2D87               	goto	L5
  2904  0577                     l6892:	
  2905                           ;PIR_B1.c: 362: } else if (VRAD < 9) {
  2906                           
  2907  0577  3009               	movlw	9
  2908  0578  1283               	bcf	3,5	;RP0=0, select bank0
  2909  0579  0269               	subwf	getPIR_AD@VRAD,w
  2910  057A  1803               	skipnc
  2911  057B  2D82               	goto	l6896
  2912                           
  2913                           ;PIR_B1.c: 363: _PIR.CloseTimeValue = 900;
  2914  057C  3084               	movlw	132
  2915  057D  1683               	bsf	3,5	;RP0=1, select bank1
  2916  057E  1303               	bcf	3,6	;RP1=0, select bank1
  2917  057F  00C3               	movwf	(__PIR^(0+128)+35)
  2918  0580  3003               	movlw	3
  2919  0581  2D87               	goto	L5
  2920  0582                     l6896:	
  2921                           ;PIR_B1.c: 364: } else {
  2922                           
  2923                           
  2924                           ;PIR_B1.c: 365: _PIR.CloseTimeValue = 1200;
  2925  0582  30B0               	movlw	176
  2926  0583  1683               	bsf	3,5	;RP0=1, select bank1
  2927  0584  1303               	bcf	3,6	;RP1=0, select bank1
  2928  0585  00C3               	movwf	(__PIR^(0+128)+35)
  2929  0586  3004               	movlw	4
  2930  0587                     L5:	
  2931  0587  00C4               	movwf	(__PIR^(0+128)+36)
  2932                           
  2933                           ;PIR_B1.c: 366: }
  2934                           ;PIR_B1.c: 375: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2935  0588  0821               	movf	(__PIR^(0+128)+1),w
  2936  0589  1283               	bcf	3,5	;RP0=0, select bank0
  2937  058A  1303               	bcf	3,6	;RP1=0, select bank0
  2938  058B  00E3               	movwf	??_getPIR_AD
  2939  058C  1683               	bsf	3,5	;RP0=1, select bank1
  2940  058D  1303               	bcf	3,6	;RP1=0, select bank1
  2941  058E  0824               	movf	(__PIR^(0+128)+4),w
  2942  058F  3EA5               	addlw	(__PIR+5)& (0+255)
  2943  0590  0084               	movwf	4
  2944  0591  1283               	bcf	3,5	;RP0=0, select bank0
  2945  0592  1303               	bcf	3,6	;RP1=0, select bank0
  2946  0593  0863               	movf	??_getPIR_AD,w
  2947  0594  1383               	bcf	3,7	;select IRP bank1
  2948  0595  0080               	movwf	0
  2949                           
  2950                           ;PIR_B1.c: 376: for (i = 0; i < 10; i++) {
  2951  0596  01EA               	clrf	getPIR_AD@i
  2952  0597  300A               	movlw	10
  2953  0598  026A               	subwf	getPIR_AD@i,w
  2954  0599  1803               	btfsc	3,0
  2955  059A  2DB7               	goto	l6912
  2956  059B                     l6906:	
  2957                           
  2958                           ;PIR_B1.c: 377: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2959  059B  086A               	movf	getPIR_AD@i,w
  2960  059C  3EA5               	addlw	(__PIR+5)& (0+255)
  2961  059D  0084               	movwf	4
  2962  059E  0800               	movf	0,w
  2963  059F  00E3               	movwf	??_getPIR_AD
  2964  05A0  01E4               	clrf	??_getPIR_AD+1
  2965  05A1  0863               	movf	??_getPIR_AD,w
  2966  05A2  1683               	bsf	3,5	;RP0=1, select bank1
  2967  05A3  1303               	bcf	3,6	;RP1=0, select bank1
  2968  05A4  07AF               	addwf	(__PIR^(0+128)+15),f
  2969  05A5  1803               	skipnc
  2970  05A6  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2971  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  2972  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  2973  05A9  0864               	movf	??_getPIR_AD+1,w
  2974  05AA  1683               	bsf	3,5	;RP0=1, select bank1
  2975  05AB  1303               	bcf	3,6	;RP1=0, select bank1
  2976  05AC  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2977  05AD  3001               	movlw	1
  2978  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  2979  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  2980  05B0  00E3               	movwf	??_getPIR_AD
  2981  05B1  0863               	movf	??_getPIR_AD,w
  2982  05B2  07EA               	addwf	getPIR_AD@i,f
  2983  05B3  300A               	movlw	10
  2984  05B4  026A               	subwf	getPIR_AD@i,w
  2985  05B5  1C03               	skipc
  2986  05B6  2D9B               	goto	l6906
  2987  05B7                     l6912:	
  2988                           
  2989                           ;PIR_B1.c: 378: }
  2990                           ;PIR_B1.c: 379: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2991  05B7  300A               	movlw	10
  2992  05B8  00DA               	movwf	___lwdiv@divisor
  2993  05B9  3000               	movlw	0
  2994  05BA  00DB               	movwf	___lwdiv@divisor+1
  2995  05BB  1683               	bsf	3,5	;RP0=1, select bank1
  2996  05BC  1303               	bcf	3,6	;RP1=0, select bank1
  2997  05BD  0830               	movf	((__PIR+1)^(0+128)+15),w
  2998  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  2999  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  3000  05C0  01DD               	clrf	___lwdiv@dividend+1
  3001  05C1  07DD               	addwf	___lwdiv@dividend+1,f
  3002  05C2  1683               	bsf	3,5	;RP0=1, select bank1
  3003  05C3  1303               	bcf	3,6	;RP1=0, select bank1
  3004  05C4  082F               	movf	(__PIR^(0+128)+15),w
  3005  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  3006  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  3007  05C7  01DC               	clrf	___lwdiv@dividend
  3008  05C8  07DC               	addwf	___lwdiv@dividend,f
  3009  05C9  158A  24A6  118A   	fcall	___lwdiv
  3010  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  3011  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  3012  05CE  085A               	movf	?___lwdiv,w
  3013  05CF  00E3               	movwf	??_getPIR_AD
  3014  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  3015  05D1  1303               	bcf	3,6	;RP1=0, select bank1
  3016  05D2  0831               	movf	(__PIR^(0+128)+17),w
  3017  05D3  3EB2               	addlw	(__PIR+18)& (0+255)
  3018  05D4  0084               	movwf	4
  3019  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  3020  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  3021  05D7  0863               	movf	??_getPIR_AD,w
  3022  05D8  1383               	bcf	3,7	;select IRP bank1
  3023  05D9  0080               	movwf	0
  3024                           
  3025                           ;PIR_B1.c: 380: _PIR.TenAverageValue = 0;
  3026  05DA  1683               	bsf	3,5	;RP0=1, select bank1
  3027  05DB  1303               	bcf	3,6	;RP1=0, select bank1
  3028  05DC  01AF               	clrf	(__PIR^(0+128)+15)
  3029  05DD  01B0               	clrf	((__PIR+1)^(0+128)+15)
  3030                           
  3031                           ;PIR_B1.c: 382: for (i = 0; i <= 9; i++) {
  3032  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  3033  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  3034  05E0  01EA               	clrf	getPIR_AD@i
  3035  05E1  300A               	movlw	10
  3036  05E2  026A               	subwf	getPIR_AD@i,w
  3037  05E3  1803               	btfsc	3,0
  3038  05E4  2E01               	goto	l6928
  3039  05E5                     l6922:	
  3040                           
  3041                           ;PIR_B1.c: 383: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  3042  05E5  086A               	movf	getPIR_AD@i,w
  3043  05E6  3EB2               	addlw	(__PIR+18)& (0+255)
  3044  05E7  0084               	movwf	4
  3045  05E8  0800               	movf	0,w
  3046  05E9  00E3               	movwf	??_getPIR_AD
  3047  05EA  01E4               	clrf	??_getPIR_AD+1
  3048  05EB  0863               	movf	??_getPIR_AD,w
  3049  05EC  1683               	bsf	3,5	;RP0=1, select bank1
  3050  05ED  1303               	bcf	3,6	;RP1=0, select bank1
  3051  05EE  07BC               	addwf	(__PIR^(0+128)+28),f
  3052  05EF  1803               	skipnc
  3053  05F0  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  3054  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  3055  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  3056  05F3  0864               	movf	??_getPIR_AD+1,w
  3057  05F4  1683               	bsf	3,5	;RP0=1, select bank1
  3058  05F5  1303               	bcf	3,6	;RP1=0, select bank1
  3059  05F6  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  3060  05F7  3001               	movlw	1
  3061  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  3062  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  3063  05FA  00E3               	movwf	??_getPIR_AD
  3064  05FB  0863               	movf	??_getPIR_AD,w
  3065  05FC  07EA               	addwf	getPIR_AD@i,f
  3066  05FD  300A               	movlw	10
  3067  05FE  026A               	subwf	getPIR_AD@i,w
  3068  05FF  1C03               	skipc
  3069  0600  2DE5               	goto	l6922
  3070  0601                     l6928:	
  3071                           
  3072                           ;PIR_B1.c: 384: }
  3073                           ;PIR_B1.c: 385: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  3074  0601  300A               	movlw	10
  3075  0602  00DA               	movwf	___lwdiv@divisor
  3076  0603  3000               	movlw	0
  3077  0604  00DB               	movwf	___lwdiv@divisor+1
  3078  0605  1683               	bsf	3,5	;RP0=1, select bank1
  3079  0606  1303               	bcf	3,6	;RP1=0, select bank1
  3080  0607  083D               	movf	((__PIR+1)^(0+128)+28),w
  3081  0608  1283               	bcf	3,5	;RP0=0, select bank0
  3082  0609  1303               	bcf	3,6	;RP1=0, select bank0
  3083  060A  01DD               	clrf	___lwdiv@dividend+1
  3084  060B  07DD               	addwf	___lwdiv@dividend+1,f
  3085  060C  1683               	bsf	3,5	;RP0=1, select bank1
  3086  060D  1303               	bcf	3,6	;RP1=0, select bank1
  3087  060E  083C               	movf	(__PIR^(0+128)+28),w
  3088  060F  1283               	bcf	3,5	;RP0=0, select bank0
  3089  0610  1303               	bcf	3,6	;RP1=0, select bank0
  3090  0611  01DC               	clrf	___lwdiv@dividend
  3091  0612  07DC               	addwf	___lwdiv@dividend,f
  3092  0613  158A  24A6  118A   	fcall	___lwdiv
  3093  0616  1283               	bcf	3,5	;RP0=0, select bank0
  3094  0617  1303               	bcf	3,6	;RP1=0, select bank0
  3095  0618  085A               	movf	?___lwdiv,w
  3096  0619  00E3               	movwf	??_getPIR_AD
  3097  061A  0863               	movf	??_getPIR_AD,w
  3098  061B  1683               	bsf	3,5	;RP0=1, select bank1
  3099  061C  1303               	bcf	3,6	;RP1=0, select bank1
  3100  061D  00A3               	movwf	(__PIR^(0+128)+3)
  3101                           
  3102                           ;PIR_B1.c: 386: _PIR.HundredAverageValue = 0;
  3103  061E  01BC               	clrf	(__PIR^(0+128)+28)
  3104  061F  01BD               	clrf	((__PIR+1)^(0+128)+28)
  3105                           
  3106                           ;PIR_B1.c: 388: if (_PIR.TenCount < 10) {
  3107  0620  300A               	movlw	10
  3108  0621  0224               	subwf	(__PIR^(0+128)+4),w
  3109  0622  1803               	skipnc
  3110  0623  2E2D               	goto	l6936
  3111                           
  3112                           ;PIR_B1.c: 389: _PIR.TenCount++;
  3113  0624  3001               	movlw	1
  3114  0625  1283               	bcf	3,5	;RP0=0, select bank0
  3115  0626  1303               	bcf	3,6	;RP1=0, select bank0
  3116  0627  00E3               	movwf	??_getPIR_AD
  3117  0628  0863               	movf	??_getPIR_AD,w
  3118  0629  1683               	bsf	3,5	;RP0=1, select bank1
  3119  062A  1303               	bcf	3,6	;RP1=0, select bank1
  3120  062B  07A4               	addwf	(__PIR^(0+128)+4),f
  3121                           
  3122                           ;PIR_B1.c: 390: } else {
  3123  062C  0008               	return
  3124  062D                     l6936:	
  3125                           
  3126                           ;PIR_B1.c: 391: _PIR.TenCount = 0;
  3127  062D  01A4               	clrf	(__PIR^(0+128)+4)
  3128                           
  3129                           ;PIR_B1.c: 392: if (_PIR.HundreCount < 10)
  3130  062E  300A               	movlw	10
  3131  062F  0231               	subwf	(__PIR^(0+128)+17),w
  3132  0630  1803               	skipnc
  3133  0631  2E3B               	goto	l6942
  3134                           
  3135                           ;PIR_B1.c: 393: _PIR.HundreCount++;
  3136  0632  3001               	movlw	1
  3137  0633  1283               	bcf	3,5	;RP0=0, select bank0
  3138  0634  1303               	bcf	3,6	;RP1=0, select bank0
  3139  0635  00E3               	movwf	??_getPIR_AD
  3140  0636  0863               	movf	??_getPIR_AD,w
  3141  0637  1683               	bsf	3,5	;RP0=1, select bank1
  3142  0638  1303               	bcf	3,6	;RP1=0, select bank1
  3143  0639  07B1               	addwf	(__PIR^(0+128)+17),f
  3144  063A  0008               	return
  3145  063B                     l6942:	
  3146                           
  3147                           ;PIR_B1.c: 394: else
  3148                           ;PIR_B1.c: 395: _PIR.HundreCount = 0;
  3149  063B  01B1               	clrf	(__PIR^(0+128)+17)
  3150  063C  0008               	return
  3151  063D                     __end_of_getPIR_AD:	
  3152                           
  3153                           	psect	text5
  3154  0DB3                     __ptext5:	
  3155 ;; *************** function _getLoad_AD *****************
  3156 ;; Defined at:
  3157 ;;		line 15 in file "../src/OverLoad_B1.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;  channel         1    wreg     unsigned char 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  channel         1    3[BANK0 ] unsigned char 
  3162 ;;  i               1    7[BANK0 ] unsigned char 
  3163 ;;  ADRES           1    6[BANK0 ] unsigned char 
  3164 ;;  j               1    5[BANK0 ] unsigned char 
  3165 ;;  k               1    4[BANK0 ] unsigned char 
  3166 ;; Return value:  Size  Location     Type
  3167 ;;		None               void
  3168 ;; Registers used:
  3169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3175 ;;      Params:         0       0       0       0
  3176 ;;      Locals:         0       5       0       0
  3177 ;;      Temps:          0       2       0       0
  3178 ;;      Totals:         0       7       0       0
  3179 ;;Total ram usage:        7 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    4
  3182 ;; This function calls:
  3183 ;;		_getAD
  3184 ;; This function is called by:
  3185 ;;		_main
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           
  3190                           ;psect for function _getLoad_AD
  3191  0DB3                     _getLoad_AD:	
  3192                           
  3193                           ;incstack = 0
  3194                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3195                           ;getLoad_AD@channel stored from wreg
  3196  0DB3  1283               	bcf	3,5	;RP0=0, select bank0
  3197  0DB4  1303               	bcf	3,6	;RP1=0, select bank0
  3198  0DB5  00DD               	movwf	getLoad_AD@channel
  3199                           
  3200                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3201  0DB6  01E1               	clrf	getLoad_AD@i
  3202  0DB7  01DF               	clrf	getLoad_AD@j
  3203  0DB8  01DE               	clrf	getLoad_AD@k
  3204                           
  3205                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  3206  0DB9  01E0               	clrf	getLoad_AD@ADRES
  3207                           
  3208                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3209  0DBA  1683               	bsf	3,5	;RP0=1, select bank1
  3210  0DBB  1303               	bcf	3,6	;RP1=0, select bank1
  3211  0DBC  1E4A               	btfss	_Load^(0+128),4
  3212  0DBD  0008               	return
  3213                           
  3214                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0x73);
  3215  0DBE  3073               	movlw	115
  3216  0DBF  1283               	bcf	3,5	;RP0=0, select bank0
  3217  0DC0  1303               	bcf	3,6	;RP1=0, select bank0
  3218  0DC1  00DB               	movwf	??_getLoad_AD
  3219  0DC2  085B               	movf	??_getLoad_AD,w
  3220  0DC3  00F9               	movwf	getAD@adcon1
  3221  0DC4  085D               	movf	getLoad_AD@channel,w
  3222  0DC5  158A  22E9  158A   	fcall	_getAD
  3223  0DC8  1283               	bcf	3,5	;RP0=0, select bank0
  3224  0DC9  1303               	bcf	3,6	;RP1=0, select bank0
  3225  0DCA  00DC               	movwf	??_getLoad_AD+1
  3226  0DCB  085C               	movf	??_getLoad_AD+1,w
  3227  0DCC  00E0               	movwf	getLoad_AD@ADRES
  3228                           
  3229                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3230  0DCD  01E1               	clrf	getLoad_AD@i
  3231  0DCE  3004               	movlw	4
  3232  0DCF  0261               	subwf	getLoad_AD@i,w
  3233  0DD0  1803               	btfsc	3,0
  3234  0DD1  2DEE               	goto	l6828
  3235  0DD2                     l6816:	
  3236                           
  3237                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  3238  0DD2  0861               	movf	getLoad_AD@i,w
  3239  0DD3  3ED4               	addlw	(_Load+10)& (0+255)
  3240  0DD4  0084               	movwf	4
  3241  0DD5  0860               	movf	getLoad_AD@ADRES,w
  3242  0DD6  1383               	bcf	3,7	;select IRP bank1
  3243  0DD7  0200               	subwf	0,w
  3244  0DD8  1803               	skipnc
  3245  0DD9  2DE6               	goto	l6824
  3246  0DDA  08DF               	movf	getLoad_AD@j,f
  3247  0DDB  1D03               	skipz
  3248  0DDC  2DE6               	goto	l6824
  3249                           
  3250                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  3251  0DDD  0860               	movf	getLoad_AD@ADRES,w
  3252  0DDE  00DB               	movwf	??_getLoad_AD
  3253  0DDF  0861               	movf	getLoad_AD@i,w
  3254  0DE0  3ED4               	addlw	(_Load+10)& (0+255)
  3255  0DE1  0084               	movwf	4
  3256  0DE2  085B               	movf	??_getLoad_AD,w
  3257  0DE3  0080               	movwf	0
  3258                           
  3259                           ;OverLoad_B1.c: 24: j = 1;
  3260  0DE4  01DF               	clrf	getLoad_AD@j
  3261  0DE5  0ADF               	incf	getLoad_AD@j,f
  3262  0DE6                     l6824:	
  3263  0DE6  3001               	movlw	1
  3264  0DE7  00DB               	movwf	??_getLoad_AD
  3265  0DE8  085B               	movf	??_getLoad_AD,w
  3266  0DE9  07E1               	addwf	getLoad_AD@i,f
  3267  0DEA  3004               	movlw	4
  3268  0DEB  0261               	subwf	getLoad_AD@i,w
  3269  0DEC  1C03               	skipc
  3270  0DED  2DD2               	goto	l6816
  3271  0DEE                     l6828:	
  3272                           
  3273                           ;OverLoad_B1.c: 25: }
  3274                           ;OverLoad_B1.c: 26: }
  3275                           ;OverLoad_B1.c: 27: if (j == 0) {
  3276  0DEE  08DF               	movf	getLoad_AD@j,f
  3277  0DEF  1D03               	skipz
  3278  0DF0  0008               	return
  3279                           
  3280                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3281  0DF1  01E1               	clrf	getLoad_AD@i
  3282  0DF2                     L6:	
  3283  0DF2  3004               	movlw	4
  3284  0DF3  0261               	subwf	getLoad_AD@i,w
  3285  0DF4  1803               	btfsc	3,0
  3286  0DF5  0008               	return
  3287                           
  3288                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  3289  0DF6  0861               	movf	getLoad_AD@i,w
  3290  0DF7  3ED9               	addlw	(_Load+15)& (0+255)
  3291  0DF8  0084               	movwf	4
  3292  0DF9  1383               	bcf	3,7	;select IRP bank1
  3293  0DFA  0800               	movf	0,w
  3294  0DFB  0260               	subwf	getLoad_AD@ADRES,w
  3295  0DFC  1803               	skipnc
  3296  0DFD  2E0A               	goto	l6844
  3297  0DFE  08DE               	movf	getLoad_AD@k,f
  3298  0DFF  1D03               	skipz
  3299  0E00  2E0A               	goto	l6844
  3300                           
  3301                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  3302  0E01  0860               	movf	getLoad_AD@ADRES,w
  3303  0E02  00DB               	movwf	??_getLoad_AD
  3304  0E03  0861               	movf	getLoad_AD@i,w
  3305  0E04  3ED9               	addlw	(_Load+15)& (0+255)
  3306  0E05  0084               	movwf	4
  3307  0E06  085B               	movf	??_getLoad_AD,w
  3308  0E07  0080               	movwf	0
  3309                           
  3310                           ;OverLoad_B1.c: 31: k = 1;
  3311  0E08  01DE               	clrf	getLoad_AD@k
  3312  0E09  0ADE               	incf	getLoad_AD@k,f
  3313  0E0A                     l6844:	
  3314  0E0A  3001               	movlw	1
  3315  0E0B  00DB               	movwf	??_getLoad_AD
  3316  0E0C  085B               	movf	??_getLoad_AD,w
  3317  0E0D  07E1               	addwf	getLoad_AD@i,f
  3318  0E0E  2DF2               	goto	L6
  3319  0E0F                     __end_of_getLoad_AD:	
  3320                           
  3321                           	psect	text6
  3322  0B05                     __ptext6:	
  3323 ;; *************** function _getCDS_AD *****************
  3324 ;; Defined at:
  3325 ;;		line 48 in file "../src/CDS_B1.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;  channel1        1    wreg     unsigned char 
  3328 ;;  channel2        1    1[BANK0 ] unsigned char 
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;  channel1        1    6[BANK0 ] unsigned char 
  3331 ;;  j               1    5[BANK0 ] unsigned char 
  3332 ;;  i               1    4[BANK0 ] unsigned char 
  3333 ;; Return value:  Size  Location     Type
  3334 ;;		None               void
  3335 ;; Registers used:
  3336 ;;		wreg, status,2, status,0, pclath, cstack
  3337 ;; Tracked objects:
  3338 ;;		On entry : 0/0
  3339 ;;		On exit  : 0/0
  3340 ;;		Unchanged: 0/0
  3341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3342 ;;      Params:         0       1       0       0
  3343 ;;      Locals:         0       3       0       0
  3344 ;;      Temps:          0       2       0       0
  3345 ;;      Totals:         0       6       0       0
  3346 ;;Total ram usage:        6 bytes
  3347 ;; Hardware stack levels used:    1
  3348 ;; Hardware stack levels required when called:    4
  3349 ;; This function calls:
  3350 ;;		_getAD
  3351 ;; This function is called by:
  3352 ;;		_main
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356                           
  3357                           ;psect for function _getCDS_AD
  3358  0B05                     _getCDS_AD:	
  3359                           
  3360                           ;incstack = 0
  3361                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3362                           ;getCDS_AD@channel1 stored from wreg
  3363  0B05  1283               	bcf	3,5	;RP0=0, select bank0
  3364  0B06  1303               	bcf	3,6	;RP1=0, select bank0
  3365  0B07  00E0               	movwf	getCDS_AD@channel1
  3366                           
  3367                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3368  0B08  01DE               	clrf	getCDS_AD@i
  3369  0B09  01DF               	clrf	getCDS_AD@j
  3370                           
  3371                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3372  0B0A  1DB6               	btfss	__CDS,3
  3373  0B0B  0008               	return
  3374                           
  3375                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3376  0B0C  14B6               	bsf	__CDS,1
  3377                           
  3378                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3379  0B0D  3070               	movlw	112
  3380  0B0E  00DC               	movwf	??_getCDS_AD
  3381  0B0F  085C               	movf	??_getCDS_AD,w
  3382  0B10  00F9               	movwf	getAD@adcon1
  3383  0B11  0860               	movf	getCDS_AD@channel1,w
  3384  0B12  158A  22E9  158A   	fcall	_getAD
  3385  0B15  1283               	bcf	3,5	;RP0=0, select bank0
  3386  0B16  1303               	bcf	3,6	;RP1=0, select bank0
  3387  0B17  00DD               	movwf	??_getCDS_AD+1
  3388  0B18  085D               	movf	??_getCDS_AD+1,w
  3389  0B19  00B8               	movwf	__CDS+2
  3390                           
  3391                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3392  0B1A  3070               	movlw	112
  3393  0B1B  00DC               	movwf	??_getCDS_AD
  3394  0B1C  085C               	movf	??_getCDS_AD,w
  3395  0B1D  00F9               	movwf	getAD@adcon1
  3396  0B1E  085B               	movf	getCDS_AD@channel2,w
  3397  0B1F  158A  22E9         	fcall	_getAD
  3398  0B21  1283               	bcf	3,5	;RP0=0, select bank0
  3399  0B22  1303               	bcf	3,6	;RP1=0, select bank0
  3400  0B23  00DD               	movwf	??_getCDS_AD+1
  3401  0B24  085D               	movf	??_getCDS_AD+1,w
  3402  0B25  00B9               	movwf	__CDS+3
  3403  0B26  0008               	return
  3404  0B27                     __end_of_getCDS_AD:	
  3405                           
  3406                           	psect	text7
  3407  0AE9                     __ptext7:	
  3408 ;; *************** function _getAD *****************
  3409 ;; Defined at:
  3410 ;;		line 432 in file "../src/MCU_B1.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;  adcon0          1    wreg     unsigned char 
  3413 ;;  adcon1          1    4[COMMON] unsigned char 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  adcon0          1    0[BANK0 ] unsigned char 
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      unsigned char 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2, status,0, pclath, cstack
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3425 ;;      Params:         1       0       0       0
  3426 ;;      Locals:         0       1       0       0
  3427 ;;      Temps:          0       0       0       0
  3428 ;;      Totals:         1       1       0       0
  3429 ;;Total ram usage:        2 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; Hardware stack levels required when called:    3
  3432 ;; This function calls:
  3433 ;;		_Timeout_Counter
  3434 ;;		_set_TimeoutCleared
  3435 ;; This function is called by:
  3436 ;;		_getCDS_AD
  3437 ;;		_getLoad_AD
  3438 ;;		_getTemp_AD
  3439 ;;		_getPIR_AD
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           
  3444                           ;psect for function _getAD
  3445  0AE9                     _getAD:	
  3446                           
  3447                           ;incstack = 0
  3448                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3449                           ;getAD@adcon0 stored from wreg
  3450  0AE9  1283               	bcf	3,5	;RP0=0, select bank0
  3451  0AEA  1303               	bcf	3,6	;RP1=0, select bank0
  3452  0AEB  00DA               	movwf	getAD@adcon0
  3453                           
  3454                           ;MCU_B1.c: 433: ADCON0 = adcon0;
  3455  0AEC  085A               	movf	getAD@adcon0,w
  3456  0AED  009F               	movwf	31	;volatile
  3457                           
  3458                           ;MCU_B1.c: 434: ADCON1 = adcon1;
  3459  0AEE  0879               	movf	getAD@adcon1,w
  3460  0AEF  1683               	bsf	3,5	;RP0=1, select bank1
  3461  0AF0  1303               	bcf	3,6	;RP1=0, select bank1
  3462  0AF1  009F               	movwf	31	;volatile
  3463                           
  3464                           ;MCU_B1.c: 435: GO_nDONE = 1;
  3465  0AF2  1283               	bcf	3,5	;RP0=0, select bank0
  3466  0AF3  1303               	bcf	3,6	;RP1=0, select bank0
  3467  0AF4  149F               	bsf	31,1	;volatile
  3468                           
  3469                           ;MCU_B1.c: 436: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3470  0AF5  2AF9               	goto	l6546
  3471  0AF6                     l6544:	
  3472                           
  3473                           ;MCU_B1.c: 437: Timeout_Counter();
  3474  0AF6  158A  21B7  158A   	fcall	_Timeout_Counter
  3475  0AF9                     l6546:	
  3476  0AF9  1283               	bcf	3,5	;RP0=0, select bank0
  3477  0AFA  1303               	bcf	3,6	;RP1=0, select bank0
  3478  0AFB  1C9F               	btfss	31,1	;volatile
  3479  0AFC  2AFF               	goto	l6550
  3480  0AFD  1D33               	btfss	_myMain+2,2
  3481  0AFE  2AF6               	goto	l6544
  3482  0AFF                     l6550:	
  3483                           
  3484                           ;MCU_B1.c: 438: };
  3485                           ;MCU_B1.c: 439: set_TimeoutCleared();
  3486  0AFF  158A  20B2         	fcall	_set_TimeoutCleared
  3487                           
  3488                           ;MCU_B1.c: 440: return ADRES;
  3489  0B01  1283               	bcf	3,5	;RP0=0, select bank0
  3490  0B02  1303               	bcf	3,6	;RP1=0, select bank0
  3491  0B03  081E               	movf	30,w	;volatile
  3492  0B04  0008               	return
  3493  0B05                     __end_of_getAD:	
  3494                           
  3495                           	psect	text8
  3496  0981                     __ptext8:	
  3497 ;; *************** function _WDT_Main *****************
  3498 ;; Defined at:
  3499 ;;		line 1103 in file "../src/MCU_B1.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;		None
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;		None
  3504 ;; Return value:  Size  Location     Type
  3505 ;;		None               void
  3506 ;; Registers used:
  3507 ;;		wreg, status,2, status,0, pclath, cstack
  3508 ;; Tracked objects:
  3509 ;;		On entry : 0/0
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3513 ;;      Params:         0       0       0       0
  3514 ;;      Locals:         0       0       0       0
  3515 ;;      Temps:          1       0       0       0
  3516 ;;      Totals:         1       0       0       0
  3517 ;;Total ram usage:        1 bytes
  3518 ;; Hardware stack levels used:    1
  3519 ;; Hardware stack levels required when called:    3
  3520 ;; This function calls:
  3521 ;;		_WDT_Clearing
  3522 ;; This function is called by:
  3523 ;;		_main
  3524 ;; This function uses a non-reentrant model
  3525 ;;
  3526                           
  3527                           
  3528                           ;psect for function _WDT_Main
  3529  0981                     _WDT_Main:	
  3530                           
  3531                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  3532                           
  3533                           ;incstack = 0
  3534                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3535  0981  1283               	bcf	3,5	;RP0=0, select bank0
  3536  0982  1303               	bcf	3,6	;RP1=0, select bank0
  3537  0983  1C3D               	btfss	_WDT,0
  3538  0984  0008               	return
  3539                           
  3540                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  3541  0985  3001               	movlw	1
  3542  0986  02BE               	subwf	_WDT+1,f
  3543  0987  083E               	movf	_WDT+1,w
  3544  0988  3AFF               	xorlw	255
  3545  0989  1903               	skipnz
  3546  098A  0008               	return
  3547                           
  3548                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  3549  098B  3064               	movlw	100
  3550  098C  00F9               	movwf	??_WDT_Main
  3551  098D  0879               	movf	??_WDT_Main,w
  3552  098E  00BE               	movwf	_WDT+1
  3553                           
  3554                           ;MCU_B1.c: 1107: WDT_Clearing();
  3555  098F  118A  2002         	fcall	_WDT_Clearing
  3556  0991  0008               	return
  3557  0992                     __end_of_WDT_Main:	
  3558                           
  3559                           	psect	text9
  3560  0002                     __ptext9:	
  3561 ;; *************** function _WDT_Clearing *****************
  3562 ;; Defined at:
  3563 ;;		line 1113 in file "../src/MCU_B1.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;		None
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;		None
  3568 ;; Return value:  Size  Location     Type
  3569 ;;		None               void
  3570 ;; Registers used:
  3571 ;;		None
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3577 ;;      Params:         0       0       0       0
  3578 ;;      Locals:         0       0       0       0
  3579 ;;      Temps:          0       0       0       0
  3580 ;;      Totals:         0       0       0       0
  3581 ;;Total ram usage:        0 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; Hardware stack levels required when called:    2
  3584 ;; This function calls:
  3585 ;;		Nothing
  3586 ;; This function is called by:
  3587 ;;		_WDT_Main
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           
  3592                           ;psect for function _WDT_Clearing
  3593  0002                     _WDT_Clearing:	
  3594                           
  3595                           ;incstack = 0
  3596                           ; Regs used in _WDT_Clearing: []
  3597  0002  0064               	clrwdt	;# 
  3598  0003  0008               	return
  3599  0004                     __end_of_WDT_Clearing:	
  3600                           
  3601                           	psect	text10
  3602  07FD                     __ptext10:	
  3603 ;; *************** function _Temp_Main *****************
  3604 ;; Defined at:
  3605 ;;		line 52 in file "../src/OverTemperature_B1.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;		None
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;		None
  3610 ;; Return value:  Size  Location     Type
  3611 ;;		None               void
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, status,0, pclath, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3619 ;;      Params:         0       0       0       0
  3620 ;;      Locals:         0       0       0       0
  3621 ;;      Temps:          0       0       0       0
  3622 ;;      Totals:         0       0       0       0
  3623 ;;Total ram usage:        0 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    5
  3626 ;; This function calls:
  3627 ;;		_setTemp_Main
  3628 ;; This function is called by:
  3629 ;;		_main
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           
  3634                           ;psect for function _Temp_Main
  3635  07FD                     _Temp_Main:	
  3636                           
  3637                           ;OverTemperature_B1.c: 54: setTemp_Main();
  3638                           
  3639                           ;incstack = 0
  3640                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3641  07FD  158A  2769         	fcall	_setTemp_Main
  3642  07FF  0008               	return
  3643  0800                     __end_of_Temp_Main:	
  3644                           
  3645                           	psect	text11
  3646  0F69                     __ptext11:	
  3647 ;; *************** function _setTemp_Main *****************
  3648 ;; Defined at:
  3649 ;;		line 59 in file "../src/OverTemperature_B1.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;		None
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  AD              1   16[BANK0 ] unsigned char 
  3654 ;;  DangerValue     1   15[BANK0 ] unsigned char 
  3655 ;;  SafeValue       1   14[BANK0 ] unsigned char 
  3656 ;;  error           1   13[BANK0 ] unsigned char 
  3657 ;; Return value:  Size  Location     Type
  3658 ;;		None               void
  3659 ;; Registers used:
  3660 ;;		wreg, status,2, status,0, pclath, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3666 ;;      Params:         0       0       0       0
  3667 ;;      Locals:         0       4       0       0
  3668 ;;      Temps:          0       1       0       0
  3669 ;;      Totals:         0       5       0       0
  3670 ;;Total ram usage:        5 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    4
  3673 ;; This function calls:
  3674 ;;		___awdiv
  3675 ;;		_getMain_All_Error_Status
  3676 ;;		_getMain_All_LightsStatus
  3677 ;;		_setBuz
  3678 ;; This function is called by:
  3679 ;;		_Temp_Main
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           
  3684                           ;psect for function _setTemp_Main
  3685  0F69                     _setTemp_Main:	
  3686                           
  3687                           ;OverTemperature_B1.c: 60: char error = getMain_All_Error_Status(0);
  3688                           
  3689                           ;incstack = 0
  3690                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3691  0F69  3000               	movlw	0
  3692  0F6A  158A  2468  158A   	fcall	_getMain_All_Error_Status
  3693  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  3694  0F6E  1303               	bcf	3,6	;RP1=0, select bank0
  3695  0F6F  00E6               	movwf	??_setTemp_Main
  3696  0F70  0866               	movf	??_setTemp_Main,w
  3697  0F71  00E7               	movwf	setTemp_Main@error
  3698                           
  3699                           ;OverTemperature_B1.c: 61: ADtype SafeValue = 0, DangerValue = 0, AD;
  3700  0F72  01E8               	clrf	setTemp_Main@SafeValue
  3701  0F73  01E9               	clrf	setTemp_Main@DangerValue
  3702                           
  3703                           ;OverTemperature_B1.c: 62: if (Temp.Enable == 1) {
  3704  0F74  1C42               	btfss	_Temp,0
  3705  0F75  2FFC               	goto	l972
  3706                           
  3707                           ;OverTemperature_B1.c: 69: if (Temp.ADtoGO == 0) {
  3708  0F76  1942               	btfsc	_Temp,2
  3709  0F77  2F89               	goto	l6618
  3710                           
  3711                           ;OverTemperature_B1.c: 70: Temp.Time++;
  3712  0F78  3001               	movlw	1
  3713  0F79  07C3               	addwf	_Temp+1,f
  3714  0F7A  1803               	skipnc
  3715  0F7B  0AC4               	incf	_Temp+2,f
  3716  0F7C  3000               	movlw	0
  3717  0F7D  07C4               	addwf	_Temp+2,f
  3718                           
  3719                           ;OverTemperature_B1.c: 71: if (Temp.Time >= (5000 / 20)) {
  3720  0F7E  3000               	movlw	0
  3721  0F7F  0244               	subwf	_Temp+2,w
  3722  0F80  30FA               	movlw	250
  3723  0F81  1903               	skipnz
  3724  0F82  0243               	subwf	_Temp+1,w
  3725  0F83  1C03               	skipc
  3726  0F84  0008               	return
  3727                           
  3728                           ;OverTemperature_B1.c: 72: Temp.Time = 0;
  3729  0F85  01C3               	clrf	_Temp+1
  3730  0F86  01C4               	clrf	_Temp+2
  3731                           
  3732                           ;OverTemperature_B1.c: 73: Temp.ADtoGO = 1;
  3733  0F87  1542               	bsf	_Temp,2
  3734                           
  3735                           ;OverTemperature_B1.c: 74: }
  3736                           ;OverTemperature_B1.c: 75: } else {
  3737  0F88  0008               	return
  3738  0F89                     l6618:	
  3739                           
  3740                           ;OverTemperature_B1.c: 76: Temp.Time++;
  3741  0F89  3001               	movlw	1
  3742  0F8A  07C3               	addwf	_Temp+1,f
  3743  0F8B  1803               	skipnc
  3744  0F8C  0AC4               	incf	_Temp+2,f
  3745  0F8D  3000               	movlw	0
  3746  0F8E  07C4               	addwf	_Temp+2,f
  3747                           
  3748                           ;OverTemperature_B1.c: 77: if (Temp.Time >= (40 / 20)) {
  3749  0F8F  3000               	movlw	0
  3750  0F90  0244               	subwf	_Temp+2,w
  3751  0F91  3002               	movlw	2
  3752  0F92  1903               	skipnz
  3753  0F93  0243               	subwf	_Temp+1,w
  3754  0F94  1C03               	skipc
  3755  0F95  0008               	return
  3756                           
  3757                           ;OverTemperature_B1.c: 78: Temp.Time = 0;
  3758  0F96  01C3               	clrf	_Temp+1
  3759  0F97  01C4               	clrf	_Temp+2
  3760                           
  3761                           ;OverTemperature_B1.c: 80: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  3762  0F98  0846               	movf	_Temp+4,w
  3763  0F99  1903               	btfsc	3,2
  3764  0F9A  2FF7               	goto	l977
  3765  0F9B  0847               	movf	_Temp+5,w
  3766  0F9C  1903               	btfsc	3,2
  3767  0F9D  2FF7               	goto	l977
  3768                           
  3769                           ;OverTemperature_B1.c: 81: Temp.ADtoGO = 0;
  3770  0F9E  1142               	bcf	_Temp,2
  3771                           
  3772                           ;OverTemperature_B1.c: 82: AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3773  0F9F  3002               	movlw	2
  3774  0FA0  00DA               	movwf	___awdiv@divisor
  3775  0FA1  3000               	movlw	0
  3776  0FA2  00DB               	movwf	___awdiv@divisor+1
  3777  0FA3  0846               	movf	_Temp+4,w
  3778  0FA4  0747               	addwf	_Temp+5,w
  3779  0FA5  00DC               	movwf	___awdiv@dividend
  3780  0FA6  01DD               	clrf	___awdiv@dividend+1
  3781  0FA7  0DDD               	rlf	___awdiv@dividend+1,f
  3782  0FA8  158A  260F  158A   	fcall	___awdiv
  3783  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  3784  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  3785  0FAD  085A               	movf	?___awdiv,w
  3786  0FAE  00E6               	movwf	??_setTemp_Main
  3787  0FAF  0866               	movf	??_setTemp_Main,w
  3788  0FB0  00EA               	movwf	setTemp_Main@AD
  3789                           
  3790                           ;OverTemperature_B1.c: 85: if (getMain_All_LightsStatus() == 1) {
  3791  0FB1  158A  2160  158A   	fcall	_getMain_All_LightsStatus
  3792  0FB4  3A01               	xorlw	1
  3793  0FB5  1D03               	skipz
  3794  0FB6  2FBF               	goto	l6632
  3795                           
  3796                           ;OverTemperature_B1.c: 86: SafeValue = 0x85;
  3797  0FB7  3085               	movlw	133
  3798  0FB8  1283               	bcf	3,5	;RP0=0, select bank0
  3799  0FB9  1303               	bcf	3,6	;RP1=0, select bank0
  3800  0FBA  00E6               	movwf	??_setTemp_Main
  3801  0FBB  0866               	movf	??_setTemp_Main,w
  3802  0FBC  00E8               	movwf	setTemp_Main@SafeValue
  3803                           
  3804                           ;OverTemperature_B1.c: 87: DangerValue = 0x70;
  3805  0FBD  3070               	movlw	112
  3806  0FBE  2FC6               	goto	L7
  3807  0FBF                     l6632:	
  3808                           ;OverTemperature_B1.c: 88: } else {
  3809                           
  3810                           
  3811                           ;OverTemperature_B1.c: 89: SafeValue = 0x4f;
  3812  0FBF  304F               	movlw	79
  3813  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  3814  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  3815  0FC2  00E6               	movwf	??_setTemp_Main
  3816  0FC3  0866               	movf	??_setTemp_Main,w
  3817  0FC4  00E8               	movwf	setTemp_Main@SafeValue
  3818                           
  3819                           ;OverTemperature_B1.c: 90: DangerValue = 0x40;
  3820  0FC5  3040               	movlw	64
  3821  0FC6                     L7:	
  3822  0FC6  00E6               	movwf	??_setTemp_Main
  3823  0FC7  0866               	movf	??_setTemp_Main,w
  3824  0FC8  00E9               	movwf	setTemp_Main@DangerValue
  3825                           
  3826                           ;OverTemperature_B1.c: 91: }
  3827                           ;OverTemperature_B1.c: 103: if (Temp.ERROR == 1) {
  3828  0FC9  1CC2               	btfss	_Temp,1
  3829  0FCA  2FE7               	goto	l6650
  3830                           
  3831                           ;OverTemperature_B1.c: 104: if (AD >= SafeValue) {
  3832  0FCB  0868               	movf	setTemp_Main@SafeValue,w
  3833  0FCC  026A               	subwf	setTemp_Main@AD,w
  3834  0FCD  1C03               	skipc
  3835  0FCE  2FE4               	goto	l6648
  3836                           
  3837                           ;OverTemperature_B1.c: 105: Temp.Count++;
  3838  0FCF  3001               	movlw	1
  3839  0FD0  00E6               	movwf	??_setTemp_Main
  3840  0FD1  0866               	movf	??_setTemp_Main,w
  3841  0FD2  07C5               	addwf	_Temp+3,f
  3842                           
  3843                           ;OverTemperature_B1.c: 106: if (Temp.Count >= 3) {
  3844  0FD3  3003               	movlw	3
  3845  0FD4  0245               	subwf	_Temp+3,w
  3846  0FD5  1C03               	skipc
  3847  0FD6  2FF7               	goto	l977
  3848                           
  3849                           ;OverTemperature_B1.c: 107: Temp.Count = 0;
  3850  0FD7  01C5               	clrf	_Temp+3
  3851                           
  3852                           ;OverTemperature_B1.c: 108: Temp.ERROR = 0;
  3853  0FD8  10C2               	bcf	_Temp,1
  3854                           
  3855                           ;OverTemperature_B1.c: 109: setBuz(2, 100);
  3856  0FD9  3064               	movlw	100
  3857  0FDA  00E2               	movwf	setBuz@time
  3858  0FDB  3000               	movlw	0
  3859  0FDC  00E3               	movwf	setBuz@time+1
  3860  0FDD  3002               	movlw	2
  3861  0FDE  158A  256C  158A   	fcall	_setBuz
  3862                           
  3863                           ;OverTemperature_B1.c: 110: }
  3864                           ;OverTemperature_B1.c: 111: } else {
  3865  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  3866  0FE2  1303               	bcf	3,6	;RP1=0, select bank0
  3867  0FE3  2FF7               	goto	l977
  3868  0FE4                     l6648:	
  3869                           
  3870                           ;OverTemperature_B1.c: 112: Temp.Count = 0;
  3871  0FE4  1283               	bcf	3,5	;RP0=0, select bank0
  3872  0FE5  1303               	bcf	3,6	;RP1=0, select bank0
  3873  0FE6  2FF6               	goto	l6660
  3874  0FE7                     l6650:	
  3875                           ;OverTemperature_B1.c: 113: }
  3876                           ;OverTemperature_B1.c: 114: } else {
  3877                           
  3878                           
  3879                           ;OverTemperature_B1.c: 115: if (AD <= DangerValue) {
  3880  0FE7  086A               	movf	setTemp_Main@AD,w
  3881  0FE8  0269               	subwf	setTemp_Main@DangerValue,w
  3882  0FE9  1C03               	skipc
  3883  0FEA  2FF6               	goto	l6660
  3884                           
  3885                           ;OverTemperature_B1.c: 116: Temp.Count++;
  3886  0FEB  3001               	movlw	1
  3887  0FEC  00E6               	movwf	??_setTemp_Main
  3888  0FED  0866               	movf	??_setTemp_Main,w
  3889  0FEE  07C5               	addwf	_Temp+3,f
  3890                           
  3891                           ;OverTemperature_B1.c: 117: if (Temp.Count >= 3) {
  3892  0FEF  3003               	movlw	3
  3893  0FF0  0245               	subwf	_Temp+3,w
  3894  0FF1  1C03               	skipc
  3895  0FF2  2FF7               	goto	l977
  3896                           
  3897                           ;OverTemperature_B1.c: 118: Temp.Count = 0;
  3898  0FF3  01C5               	clrf	_Temp+3
  3899                           
  3900                           ;OverTemperature_B1.c: 119: Temp.ERROR = 1;
  3901  0FF4  14C2               	bsf	_Temp,1
  3902                           
  3903                           ;OverTemperature_B1.c: 120: }
  3904                           ;OverTemperature_B1.c: 121: } else {
  3905  0FF5  2FF7               	goto	l977
  3906  0FF6                     l6660:	
  3907                           
  3908                           ;OverTemperature_B1.c: 122: Temp.Count = 0;
  3909  0FF6  01C5               	clrf	_Temp+3
  3910  0FF7                     l977:	
  3911                           ;OverTemperature_B1.c: 123: }
  3912                           ;OverTemperature_B1.c: 124: }
  3913                           ;OverTemperature_B1.c: 125: ;;
  3914                           ;OverTemperature_B1.c: 126: ;;
  3915                           
  3916                           
  3917                           ;OverTemperature_B1.c: 142: }
  3918                           ;OverTemperature_B1.c: 143: Temp.ADH[0] = 0;
  3919  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  3920  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  3921  0FF9  01C6               	clrf	_Temp+4
  3922                           
  3923                           ;OverTemperature_B1.c: 144: Temp.ADH[1] = 0;
  3924  0FFA  01C7               	clrf	_Temp+5
  3925                           
  3926                           ;OverTemperature_B1.c: 145: }
  3927                           ;OverTemperature_B1.c: 146: }
  3928                           ;OverTemperature_B1.c: 148: } else {
  3929  0FFB  0008               	return
  3930  0FFC                     l972:	
  3931                           
  3932                           ;OverTemperature_B1.c: 149: if (myMain.PowerON == 1) {
  3933  0FFC  1C31               	btfss	_myMain,0
  3934  0FFD  0008               	return
  3935                           
  3936                           ;OverTemperature_B1.c: 150: Temp.Enable = 1;
  3937  0FFE  1442               	bsf	_Temp,0
  3938  0FFF  0008               	return
  3939  1000                     __end_of_setTemp_Main:	
  3940                           
  3941                           	psect	text12
  3942  088E                     __ptext12:	
  3943 ;; *************** function _Temp_Initialization *****************
  3944 ;; Defined at:
  3945 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;		None
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;		None               void
  3952 ;; Registers used:
  3953 ;;		status,2, status,0, pclath, cstack
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3959 ;;      Params:         0       0       0       0
  3960 ;;      Locals:         0       0       0       0
  3961 ;;      Temps:          0       0       0       0
  3962 ;;      Totals:         0       0       0       0
  3963 ;;Total ram usage:        0 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    3
  3966 ;; This function calls:
  3967 ;;		_setTemp_Initialization
  3968 ;; This function is called by:
  3969 ;;		_main
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           
  3974                           ;psect for function _Temp_Initialization
  3975  088E                     _Temp_Initialization:	
  3976                           
  3977                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3978                           
  3979                           ;incstack = 0
  3980                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3981  088E  158A  2083         	fcall	_setTemp_Initialization
  3982  0890  0008               	return
  3983  0891                     __end_of_Temp_Initialization:	
  3984                           
  3985                           	psect	text13
  3986  0883                     __ptext13:	
  3987 ;; *************** function _setTemp_Initialization *****************
  3988 ;; Defined at:
  3989 ;;		line 47 in file "../src/OverTemperature_B1.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;		None
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;		None
  3994 ;; Return value:  Size  Location     Type
  3995 ;;		None               void
  3996 ;; Registers used:
  3997 ;;		None
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4003 ;;      Params:         0       0       0       0
  4004 ;;      Locals:         0       0       0       0
  4005 ;;      Temps:          0       0       0       0
  4006 ;;      Totals:         0       0       0       0
  4007 ;;Total ram usage:        0 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; Hardware stack levels required when called:    2
  4010 ;; This function calls:
  4011 ;;		Nothing
  4012 ;; This function is called by:
  4013 ;;		_Temp_Initialization
  4014 ;; This function uses a non-reentrant model
  4015 ;;
  4016                           
  4017                           
  4018                           ;psect for function _setTemp_Initialization
  4019  0883                     _setTemp_Initialization:	
  4020                           
  4021                           ;incstack = 0
  4022                           ; Regs used in _setTemp_Initialization: []
  4023  0883  0008               	return
  4024  0884                     __end_of_setTemp_Initialization:	
  4025                           
  4026                           	psect	text14
  4027  08F1                     __ptext14:	
  4028 ;; *************** function _Switch_Main *****************
  4029 ;; Defined at:
  4030 ;;		line 76 in file "../src/Switch_B1.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;		None
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;		None
  4035 ;; Return value:  Size  Location     Type
  4036 ;;		None               void
  4037 ;; Registers used:
  4038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4044 ;;      Params:         0       0       0       0
  4045 ;;      Locals:         0       0       0       0
  4046 ;;      Temps:          0       0       0       0
  4047 ;;      Totals:         0       0       0       0
  4048 ;;Total ram usage:        0 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    6
  4051 ;; This function calls:
  4052 ;;		_TouchPower
  4053 ;;		_setSw_Main
  4054 ;; This function is called by:
  4055 ;;		_main
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           
  4060                           ;psect for function _Switch_Main
  4061  08F1                     _Switch_Main:	
  4062                           
  4063                           ;Switch_B1.c: 79: setSw_Main(1);
  4064                           
  4065                           ;incstack = 0
  4066                           ; Regs used in _Switch_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4067  08F1  3001               	movlw	1
  4068  08F2  118A  23B2  158A   	fcall	_setSw_Main
  4069                           
  4070                           ;Switch_B1.c: 83: setSw_Main(2);
  4071  08F5  3002               	movlw	2
  4072  08F6  118A  23B2  158A   	fcall	_setSw_Main
  4073                           
  4074                           ;Switch_B1.c: 91: TouchPower();
  4075  08F9  158A  21CB         	fcall	_TouchPower
  4076  08FB  0008               	return
  4077  08FC                     __end_of_Switch_Main:	
  4078                           
  4079                           	psect	text15
  4080  03B2                     __ptext15:	
  4081 ;; *************** function _setSw_Main *****************
  4082 ;; Defined at:
  4083 ;;		line 117 in file "../src/Switch_B1.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;  sw              1    wreg     unsigned char 
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;  sw              1   10[BANK0 ] unsigned char 
  4088 ;; Return value:  Size  Location     Type
  4089 ;;		None               void
  4090 ;; Registers used:
  4091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4097 ;;      Params:         0       0       0       0
  4098 ;;      Locals:         0       1       0       0
  4099 ;;      Temps:          0       4       0       0
  4100 ;;      Totals:         0       5       0       0
  4101 ;;Total ram usage:        5 bytes
  4102 ;; Hardware stack levels used:    1
  4103 ;; Hardware stack levels required when called:    5
  4104 ;; This function calls:
  4105 ;;		_SwPointSelect
  4106 ;;		_getMain_All_Error_Status
  4107 ;;		_getSw_KeyStatus
  4108 ;;		_setLED
  4109 ;;		_setLights_SwOff
  4110 ;;		_setLights_SwOn
  4111 ;; This function is called by:
  4112 ;;		_Switch_Main
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           
  4117                           ;psect for function _setSw_Main
  4118  03B2                     _setSw_Main:	
  4119                           
  4120                           ;incstack = 0
  4121                           ; Regs used in _setSw_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4122                           ;setSw_Main@sw stored from wreg
  4123  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  4124  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  4125  03B4  00E4               	movwf	setSw_Main@sw
  4126                           
  4127                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4128  03B5  0864               	movf	setSw_Main@sw,w
  4129  03B6  158A  21A4  118A   	fcall	_SwPointSelect
  4130                           
  4131                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4132  03B9  0870               	movf	_Sw,w
  4133  03BA  0084               	movwf	4
  4134  03BB  1783               	bsf	3,7
  4135  03BC  1C71               	btfss	_Sw+1,0
  4136  03BD  1383               	bcf	3,7
  4137  03BE  1C00               	btfss	0,0
  4138  03BF  2CFB               	goto	l1442
  4139                           
  4140                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  4141  03C0  3000               	movlw	0
  4142  03C1  158A  2468  118A   	fcall	_getMain_All_Error_Status
  4143  03C4  3800               	iorlw	0
  4144  03C5  1D03               	skipz
  4145  03C6  2BED               	goto	l6688
  4146                           
  4147                           ;Switch_B1.c: 122: Sw->Detect = 0;
  4148  03C7  3001               	movlw	1
  4149  03C8  0770               	addwf	_Sw,w
  4150  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  4151  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  4152  03CB  00E0               	movwf	??_setSw_Main
  4153  03CC  0871               	movf	_Sw+1,w
  4154  03CD  1803               	skipnc
  4155  03CE  3E01               	addlw	1
  4156  03CF  00E1               	movwf	??_setSw_Main+1
  4157  03D0  0860               	movf	??_setSw_Main,w
  4158  03D1  0084               	movwf	4
  4159  03D2  1783               	bsf	3,7
  4160  03D3  1C61               	btfss	??_setSw_Main+1,0
  4161  03D4  1383               	bcf	3,7
  4162  03D5  1080               	bcf	0,1
  4163                           
  4164                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  4165  03D6  0864               	movf	setSw_Main@sw,w
  4166  03D7  158A  2280  118A   	fcall	_getSw_KeyStatus
  4167  03DA  3A01               	xorlw	1
  4168  03DB  3000               	movlw	0
  4169  03DC  1903               	skipnz
  4170  03DD  3001               	movlw	1
  4171  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  4172  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  4173  03E0  00E0               	movwf	??_setSw_Main
  4174  03E1  0870               	movf	_Sw,w
  4175  03E2  0084               	movwf	4
  4176  03E3  1783               	bsf	3,7
  4177  03E4  1C71               	btfss	_Sw+1,0
  4178  03E5  1383               	bcf	3,7
  4179  03E6  0DE0               	rlf	??_setSw_Main,f
  4180  03E7  0800               	movf	0,w
  4181  03E8  0660               	xorwf	??_setSw_Main,w
  4182  03E9  39FD               	andlw	-3
  4183  03EA  0660               	xorwf	??_setSw_Main,w
  4184  03EB  0080               	movwf	0
  4185                           
  4186                           ;Switch_B1.c: 124: } else {
  4187  03EC  2C16               	goto	l6696
  4188  03ED                     l6688:	
  4189                           
  4190                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  4191  03ED  3001               	movlw	1
  4192  03EE  0770               	addwf	_Sw,w
  4193  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  4194  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  4195  03F1  00E0               	movwf	??_setSw_Main
  4196  03F2  0871               	movf	_Sw+1,w
  4197  03F3  1803               	skipnc
  4198  03F4  3E01               	addlw	1
  4199  03F5  00E1               	movwf	??_setSw_Main+1
  4200  03F6  0860               	movf	??_setSw_Main,w
  4201  03F7  0084               	movwf	4
  4202  03F8  1783               	bsf	3,7
  4203  03F9  1C61               	btfss	??_setSw_Main+1,0
  4204  03FA  1383               	bcf	3,7
  4205  03FB  1880               	btfsc	0,1
  4206  03FC  2C16               	goto	l6696
  4207                           
  4208                           ;Switch_B1.c: 126: Sw->Detect = 1;
  4209  03FD  3001               	movlw	1
  4210  03FE  0770               	addwf	_Sw,w
  4211  03FF  00E0               	movwf	??_setSw_Main
  4212  0400  0871               	movf	_Sw+1,w
  4213  0401  1803               	skipnc
  4214  0402  3E01               	addlw	1
  4215  0403  00E1               	movwf	??_setSw_Main+1
  4216  0404  0860               	movf	??_setSw_Main,w
  4217  0405  0084               	movwf	4
  4218  0406  1783               	bsf	3,7
  4219  0407  1C61               	btfss	??_setSw_Main+1,0
  4220  0408  1383               	bcf	3,7
  4221  0409  1480               	bsf	0,1
  4222                           
  4223                           ;Switch_B1.c: 128: Sw->Touch = 0;
  4224  040A  0870               	movf	_Sw,w
  4225  040B  0084               	movwf	4
  4226  040C  1783               	bsf	3,7
  4227  040D  1C71               	btfss	_Sw+1,0
  4228  040E  1383               	bcf	3,7
  4229  040F  1080               	bcf	0,1
  4230                           
  4231                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  4232  0410  0870               	movf	_Sw,w
  4233  0411  0084               	movwf	4
  4234  0412  1783               	bsf	3,7
  4235  0413  1C71               	btfss	_Sw+1,0
  4236  0414  1383               	bcf	3,7
  4237  0415  1500               	bsf	0,2
  4238  0416                     l6696:	
  4239                           
  4240                           ;Switch_B1.c: 130: }
  4241                           ;Switch_B1.c: 131: }
  4242                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  4243  0416  0870               	movf	_Sw,w
  4244  0417  0084               	movwf	4
  4245  0418  1783               	bsf	3,7
  4246  0419  1C71               	btfss	_Sw+1,0
  4247  041A  1383               	bcf	3,7
  4248  041B  1C80               	btfss	0,1
  4249  041C  2CA6               	goto	l6718
  4250                           
  4251                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  4252  041D  0870               	movf	_Sw,w
  4253  041E  0084               	movwf	4
  4254  041F  1783               	bsf	3,7
  4255  0420  1C71               	btfss	_Sw+1,0
  4256  0421  1383               	bcf	3,7
  4257  0422  1900               	btfsc	0,2
  4258  0423  2C5B               	goto	l6708
  4259                           
  4260                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  4261  0424  3001               	movlw	1
  4262  0425  00E0               	movwf	??_setSw_Main
  4263  0426  3002               	movlw	2
  4264  0427  0770               	addwf	_Sw,w
  4265  0428  00E1               	movwf	??_setSw_Main+1
  4266  0429  0871               	movf	_Sw+1,w
  4267  042A  1803               	skipnc
  4268  042B  3E01               	addlw	1
  4269  042C  00E2               	movwf	??_setSw_Main+2
  4270  042D  0861               	movf	??_setSw_Main+1,w
  4271  042E  0084               	movwf	4
  4272  042F  1783               	bsf	3,7
  4273  0430  1C62               	btfss	??_setSw_Main+2,0
  4274  0431  1383               	bcf	3,7
  4275  0432  0860               	movf	??_setSw_Main,w
  4276  0433  0780               	addwf	0,f
  4277                           
  4278                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  4279  0434  3002               	movlw	2
  4280  0435  0770               	addwf	_Sw,w
  4281  0436  00E0               	movwf	??_setSw_Main
  4282  0437  0871               	movf	_Sw+1,w
  4283  0438  1803               	skipnc
  4284  0439  3E01               	addlw	1
  4285  043A  00E1               	movwf	??_setSw_Main+1
  4286  043B  0860               	movf	??_setSw_Main,w
  4287  043C  0084               	movwf	4
  4288  043D  1783               	bsf	3,7
  4289  043E  1C61               	btfss	??_setSw_Main+1,0
  4290  043F  1383               	bcf	3,7
  4291  0440  3003               	movlw	3
  4292  0441  0200               	subwf	0,w
  4293  0442  1C03               	skipc
  4294  0443  0008               	return
  4295                           
  4296                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  4297  0444  3002               	movlw	2
  4298  0445  0770               	addwf	_Sw,w
  4299  0446  00E0               	movwf	??_setSw_Main
  4300  0447  0871               	movf	_Sw+1,w
  4301  0448  1803               	skipnc
  4302  0449  3E01               	addlw	1
  4303  044A  00E1               	movwf	??_setSw_Main+1
  4304  044B  0860               	movf	??_setSw_Main,w
  4305  044C  0084               	movwf	4
  4306  044D  1783               	bsf	3,7
  4307  044E  1C61               	btfss	??_setSw_Main+1,0
  4308  044F  1383               	bcf	3,7
  4309  0450  0180               	clrf	0
  4310                           
  4311                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  4312  0451  0870               	movf	_Sw,w
  4313  0452  0084               	movwf	4
  4314  0453  1783               	bsf	3,7
  4315  0454  1C71               	btfss	_Sw+1,0
  4316  0455  1383               	bcf	3,7
  4317  0456  1500               	bsf	0,2
  4318                           
  4319                           ;Switch_B1.c: 140: setLights_SwOn(sw);
  4320  0457  0864               	movf	setSw_Main@sw,w
  4321  0458  158A  234A         	fcall	_setLights_SwOn
  4322                           
  4323                           ;Switch_B1.c: 146: }
  4324                           ;Switch_B1.c: 147: } else {
  4325  045A  0008               	return
  4326  045B                     l6708:	
  4327                           
  4328                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  4329  045B  0870               	movf	_Sw,w
  4330  045C  0084               	movwf	4
  4331  045D  1783               	bsf	3,7
  4332  045E  1C71               	btfss	_Sw+1,0
  4333  045F  1383               	bcf	3,7
  4334  0460  1980               	btfsc	0,3
  4335  0461  0008               	return
  4336                           
  4337                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  4338  0462  3003               	movlw	3
  4339  0463  0770               	addwf	_Sw,w
  4340  0464  1283               	bcf	3,5	;RP0=0, select bank0
  4341  0465  1303               	bcf	3,6	;RP1=0, select bank0
  4342  0466  00E0               	movwf	??_setSw_Main
  4343  0467  0871               	movf	_Sw+1,w
  4344  0468  1803               	skipnc
  4345  0469  3E01               	addlw	1
  4346  046A  00E1               	movwf	??_setSw_Main+1
  4347  046B  0860               	movf	??_setSw_Main,w
  4348  046C  0084               	movwf	4
  4349  046D  1783               	bsf	3,7
  4350  046E  1C61               	btfss	??_setSw_Main+1,0
  4351  046F  1383               	bcf	3,7
  4352  0470  3001               	movlw	1
  4353  0471  0780               	addwf	0,f
  4354  0472  0A84               	incf	4,f
  4355  0473  1803               	skipnc
  4356  0474  0A80               	incf	0,f
  4357                           
  4358                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  4359  0475  3003               	movlw	3
  4360  0476  0770               	addwf	_Sw,w
  4361  0477  00E0               	movwf	??_setSw_Main
  4362  0478  0871               	movf	_Sw+1,w
  4363  0479  1803               	skipnc
  4364  047A  3E01               	addlw	1
  4365  047B  00E1               	movwf	??_setSw_Main+1
  4366  047C  0860               	movf	??_setSw_Main,w
  4367  047D  0084               	movwf	4
  4368  047E  1783               	bsf	3,7
  4369  047F  1C61               	btfss	??_setSw_Main+1,0
  4370  0480  1383               	bcf	3,7
  4371  0481  0800               	movf	0,w
  4372  0482  00E2               	movwf	??_setSw_Main+2
  4373  0483  0A84               	incf	4,f
  4374  0484  0800               	movf	0,w
  4375  0485  00E3               	movwf	??_setSw_Main+3
  4376  0486  3000               	movlw	0
  4377  0487  0263               	subwf	??_setSw_Main+3,w
  4378  0488  304B               	movlw	75
  4379  0489  1903               	skipnz
  4380  048A  0262               	subwf	??_setSw_Main+2,w
  4381  048B  1C03               	skipc
  4382  048C  0008               	return
  4383                           
  4384                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  4385  048D  3003               	movlw	3
  4386  048E  0770               	addwf	_Sw,w
  4387  048F  00E0               	movwf	??_setSw_Main
  4388  0490  0871               	movf	_Sw+1,w
  4389  0491  1803               	skipnc
  4390  0492  3E01               	addlw	1
  4391  0493  00E1               	movwf	??_setSw_Main+1
  4392  0494  0860               	movf	??_setSw_Main,w
  4393  0495  0084               	movwf	4
  4394  0496  1783               	bsf	3,7
  4395  0497  1C61               	btfss	??_setSw_Main+1,0
  4396  0498  1383               	bcf	3,7
  4397  0499  0180               	clrf	0
  4398  049A  0A84               	incf	4,f
  4399  049B  0180               	clrf	0
  4400                           
  4401                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  4402  049C  0870               	movf	_Sw,w
  4403  049D  0084               	movwf	4
  4404  049E  1783               	bsf	3,7
  4405  049F  1C71               	btfss	_Sw+1,0
  4406  04A0  1383               	bcf	3,7
  4407  04A1  1580               	bsf	0,3
  4408                           
  4409                           ;Switch_B1.c: 154: setLights_SwOff(sw);
  4410  04A2  0864               	movf	setSw_Main@sw,w
  4411  04A3  158A  2298         	fcall	_setLights_SwOff
  4412                           
  4413                           ;Switch_B1.c: 194: }
  4414                           ;Switch_B1.c: 195: }
  4415                           ;Switch_B1.c: 196: } else {
  4416                           
  4417                           ;Switch_B1.c: 161: }
  4418                           ;Switch_B1.c: 162: } else {
  4419  04A5  0008               	return
  4420  04A6                     l6718:	
  4421                           
  4422                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  4423  04A6  0870               	movf	_Sw,w
  4424  04A7  0084               	movwf	4
  4425  04A8  1783               	bsf	3,7
  4426  04A9  1C71               	btfss	_Sw+1,0
  4427  04AA  1383               	bcf	3,7
  4428  04AB  1D00               	btfss	0,2
  4429  04AC  0008               	return
  4430                           
  4431                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  4432  04AD  3001               	movlw	1
  4433  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  4434  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  4435  04B0  00E0               	movwf	??_setSw_Main
  4436  04B1  3002               	movlw	2
  4437  04B2  0770               	addwf	_Sw,w
  4438  04B3  00E1               	movwf	??_setSw_Main+1
  4439  04B4  0871               	movf	_Sw+1,w
  4440  04B5  1803               	skipnc
  4441  04B6  3E01               	addlw	1
  4442  04B7  00E2               	movwf	??_setSw_Main+2
  4443  04B8  0861               	movf	??_setSw_Main+1,w
  4444  04B9  0084               	movwf	4
  4445  04BA  1783               	bsf	3,7
  4446  04BB  1C62               	btfss	??_setSw_Main+2,0
  4447  04BC  1383               	bcf	3,7
  4448  04BD  0860               	movf	??_setSw_Main,w
  4449  04BE  0780               	addwf	0,f
  4450                           
  4451                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  4452  04BF  3002               	movlw	2
  4453  04C0  0770               	addwf	_Sw,w
  4454  04C1  00E0               	movwf	??_setSw_Main
  4455  04C2  0871               	movf	_Sw+1,w
  4456  04C3  1803               	skipnc
  4457  04C4  3E01               	addlw	1
  4458  04C5  00E1               	movwf	??_setSw_Main+1
  4459  04C6  0860               	movf	??_setSw_Main,w
  4460  04C7  0084               	movwf	4
  4461  04C8  1783               	bsf	3,7
  4462  04C9  1C61               	btfss	??_setSw_Main+1,0
  4463  04CA  1383               	bcf	3,7
  4464  04CB  3003               	movlw	3
  4465  04CC  0200               	subwf	0,w
  4466  04CD  1C03               	skipc
  4467  04CE  0008               	return
  4468                           
  4469                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  4470  04CF  3002               	movlw	2
  4471  04D0  0770               	addwf	_Sw,w
  4472  04D1  00E0               	movwf	??_setSw_Main
  4473  04D2  0871               	movf	_Sw+1,w
  4474  04D3  1803               	skipnc
  4475  04D4  3E01               	addlw	1
  4476  04D5  00E1               	movwf	??_setSw_Main+1
  4477  04D6  0860               	movf	??_setSw_Main,w
  4478  04D7  0084               	movwf	4
  4479  04D8  1783               	bsf	3,7
  4480  04D9  1C61               	btfss	??_setSw_Main+1,0
  4481  04DA  1383               	bcf	3,7
  4482  04DB  0180               	clrf	0
  4483                           
  4484                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  4485  04DC  0870               	movf	_Sw,w
  4486  04DD  0084               	movwf	4
  4487  04DE  1783               	bsf	3,7
  4488  04DF  1C71               	btfss	_Sw+1,0
  4489  04E0  1383               	bcf	3,7
  4490  04E1  1100               	bcf	0,2
  4491                           
  4492                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  4493  04E2  3003               	movlw	3
  4494  04E3  0770               	addwf	_Sw,w
  4495  04E4  00E0               	movwf	??_setSw_Main
  4496  04E5  0871               	movf	_Sw+1,w
  4497  04E6  1803               	skipnc
  4498  04E7  3E01               	addlw	1
  4499  04E8  00E1               	movwf	??_setSw_Main+1
  4500  04E9  0860               	movf	??_setSw_Main,w
  4501  04EA  0084               	movwf	4
  4502  04EB  1783               	bsf	3,7
  4503  04EC  1C61               	btfss	??_setSw_Main+1,0
  4504  04ED  1383               	bcf	3,7
  4505  04EE  0180               	clrf	0
  4506  04EF  0A84               	incf	4,f
  4507  04F0  0180               	clrf	0
  4508                           
  4509                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  4510  04F1  0870               	movf	_Sw,w
  4511  04F2  0084               	movwf	4
  4512  04F3  1783               	bsf	3,7
  4513  04F4  1C71               	btfss	_Sw+1,0
  4514  04F5  1383               	bcf	3,7
  4515  04F6  1180               	bcf	0,3
  4516                           
  4517                           ;Switch_B1.c: 212: setLights_SwOff(sw);
  4518  04F7  0864               	movf	setSw_Main@sw,w
  4519  04F8  158A  2298         	fcall	_setLights_SwOff
  4520                           
  4521                           ;Switch_B1.c: 221: }
  4522                           ;Switch_B1.c: 222: }
  4523                           ;Switch_B1.c: 223: }
  4524                           ;Switch_B1.c: 224: } else {
  4525  04FA  0008               	return
  4526  04FB                     l1442:	
  4527                           
  4528                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  4529  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  4530  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  4531  04FD  1C31               	btfss	_myMain,0
  4532  04FE  0008               	return
  4533                           
  4534                           ;Switch_B1.c: 226: Sw->Enable = 1;
  4535  04FF  0870               	movf	_Sw,w
  4536  0500  0084               	movwf	4
  4537  0501  1783               	bsf	3,7
  4538  0502  1C71               	btfss	_Sw+1,0
  4539  0503  1383               	bcf	3,7
  4540  0504  1400               	bsf	0,0
  4541                           
  4542                           ;Switch_B1.c: 228: if (sw == 2) {
  4543  0505  0864               	movf	setSw_Main@sw,w
  4544  0506  3A02               	xorlw	2
  4545  0507  1D03               	skipz
  4546  0508  0008               	return
  4547                           
  4548                           ;Switch_B1.c: 229: setLED(1, 1);
  4549  0509  01DB               	clrf	setLED@command
  4550  050A  0ADB               	incf	setLED@command,f
  4551  050B  3001               	movlw	1
  4552  050C  118A  27AF         	fcall	_setLED
  4553  050E  0008               	return
  4554  050F                     __end_of_setSw_Main:	
  4555                           
  4556                           	psect	text16
  4557  0A80                     __ptext16:	
  4558 ;; *************** function _getSw_KeyStatus *****************
  4559 ;; Defined at:
  4560 ;;		line 237 in file "../src/Switch_B1.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;  sw              1    wreg     unsigned char 
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;  sw              1    1[BANK0 ] unsigned char 
  4565 ;;  status          1    0[BANK0 ] unsigned char 
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  1    wreg      unsigned char 
  4568 ;; Registers used:
  4569 ;;		wreg, status,2
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4575 ;;      Params:         0       0       0       0
  4576 ;;      Locals:         0       2       0       0
  4577 ;;      Temps:          0       0       0       0
  4578 ;;      Totals:         0       2       0       0
  4579 ;;Total ram usage:        2 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    2
  4582 ;; This function calls:
  4583 ;;		Nothing
  4584 ;; This function is called by:
  4585 ;;		_setSw_Main
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           
  4590                           ;psect for function _getSw_KeyStatus
  4591  0A80                     _getSw_KeyStatus:	
  4592                           
  4593                           ;incstack = 0
  4594                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  4595                           ;getSw_KeyStatus@sw stored from wreg
  4596  0A80  1283               	bcf	3,5	;RP0=0, select bank0
  4597  0A81  1303               	bcf	3,6	;RP1=0, select bank0
  4598  0A82  00DB               	movwf	getSw_KeyStatus@sw
  4599                           
  4600                           ;Switch_B1.c: 238: char status = 0;
  4601  0A83  01DA               	clrf	getSw_KeyStatus@status
  4602                           
  4603                           ;Switch_B1.c: 252: if (sw == 1) {
  4604  0A84  085B               	movf	getSw_KeyStatus@sw,w
  4605  0A85  3A01               	xorlw	1
  4606  0A86  1D03               	skipz
  4607  0A87  2A8A               	goto	l6450
  4608                           
  4609                           ;Switch_B1.c: 253: __nop();
  4610  0A88  0000               	nop
  4611                           
  4612                           ;Switch_B1.c: 254: } else if (sw == 2) {
  4613  0A89  2A94               	goto	l6454
  4614  0A8A                     l6450:	
  4615  0A8A  1283               	bcf	3,5	;RP0=0, select bank0
  4616  0A8B  1303               	bcf	3,6	;RP1=0, select bank0
  4617  0A8C  085B               	movf	getSw_KeyStatus@sw,w
  4618  0A8D  3A02               	xorlw	2
  4619  0A8E  1D03               	skipz
  4620  0A8F  2A94               	goto	l6454
  4621                           
  4622                           ;Switch_B1.c: 255: status = RB4 == 1 ? 1 : 0;
  4623  0A90  3000               	movlw	0
  4624  0A91  1A06               	btfsc	6,4	;volatile
  4625  0A92  3001               	movlw	1
  4626  0A93  00DA               	movwf	getSw_KeyStatus@status
  4627  0A94                     l6454:	
  4628                           
  4629                           ;Switch_B1.c: 256: }
  4630                           ;Switch_B1.c: 275: return status;
  4631  0A94  1283               	bcf	3,5	;RP0=0, select bank0
  4632  0A95  1303               	bcf	3,6	;RP1=0, select bank0
  4633  0A96  085A               	movf	getSw_KeyStatus@status,w
  4634  0A97  0008               	return
  4635  0A98                     __end_of_getSw_KeyStatus:	
  4636                           
  4637                           	psect	text17
  4638  09A4                     __ptext17:	
  4639 ;; *************** function _SwPointSelect *****************
  4640 ;; Defined at:
  4641 ;;		line 25 in file "../src/Switch_B1.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;  sw              1    wreg     unsigned char 
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;  sw              1    4[COMMON] unsigned char 
  4646 ;; Return value:  Size  Location     Type
  4647 ;;		None               void
  4648 ;; Registers used:
  4649 ;;		wreg, status,2, status,0
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4655 ;;      Params:         0       0       0       0
  4656 ;;      Locals:         1       0       0       0
  4657 ;;      Temps:          0       0       0       0
  4658 ;;      Totals:         1       0       0       0
  4659 ;;Total ram usage:        1 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; Hardware stack levels required when called:    2
  4662 ;; This function calls:
  4663 ;;		Nothing
  4664 ;; This function is called by:
  4665 ;;		_setSw_Main
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           
  4670                           ;psect for function _SwPointSelect
  4671  09A4                     _SwPointSelect:	
  4672                           
  4673                           ;incstack = 0
  4674                           ; Regs used in _SwPointSelect: [wreg+status,2+status,0]
  4675                           ;SwPointSelect@sw stored from wreg
  4676  09A4  00F9               	movwf	SwPointSelect@sw
  4677                           
  4678                           ;Switch_B1.c: 28: if (sw == 1) {
  4679  09A5  0879               	movf	SwPointSelect@sw,w
  4680  09A6  3A01               	xorlw	1
  4681  09A7  1D03               	skipz
  4682  09A8  29AE               	goto	l3838
  4683                           
  4684                           ;Switch_B1.c: 29: Sw = &Sw1;
  4685  09A9  30E6               	movlw	_Sw1& (0+255)
  4686  09AA  00F0               	movwf	_Sw
  4687  09AB  3000               	movlw	0
  4688  09AC  00F1               	movwf	_Sw+1
  4689                           
  4690                           ;Switch_B1.c: 30: }
  4691  09AD  0008               	return
  4692  09AE                     l3838:	
  4693                           
  4694                           ;Switch_B1.c: 33: else if (sw == 2) {
  4695  09AE  0879               	movf	SwPointSelect@sw,w
  4696  09AF  3A02               	xorlw	2
  4697  09B0  1D03               	skipz
  4698  09B1  0008               	return
  4699                           
  4700                           ;Switch_B1.c: 34: Sw = &Sw2;
  4701  09B2  3020               	movlw	_Sw2& (0+255)
  4702  09B3  00F0               	movwf	_Sw
  4703  09B4  3001               	movlw	1
  4704  09B5  00F1               	movwf	_Sw+1
  4705  09B6  0008               	return
  4706  09B7                     __end_of_SwPointSelect:	
  4707                           
  4708                           	psect	text18
  4709  09CB                     __ptext18:	
  4710 ;; *************** function _TouchPower *****************
  4711 ;; Defined at:
  4712 ;;		line 10 in file "../src/Switch_B1.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;		None
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;		None
  4717 ;; Return value:  Size  Location     Type
  4718 ;;		None               void
  4719 ;; Registers used:
  4720 ;;		wreg, status,2, status,0, pclath, cstack
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4726 ;;      Params:         0       0       0       0
  4727 ;;      Locals:         0       0       0       0
  4728 ;;      Temps:          0       0       0       0
  4729 ;;      Totals:         0       0       0       0
  4730 ;;Total ram usage:        0 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; Hardware stack levels required when called:    3
  4733 ;; This function calls:
  4734 ;;		_Timeout_Counter
  4735 ;;		_set_TimeoutCleared
  4736 ;; This function is called by:
  4737 ;;		_Switch_Main
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           
  4742                           ;psect for function _TouchPower
  4743  09CB                     _TouchPower:	
  4744                           
  4745                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  4746                           
  4747                           ;incstack = 0
  4748                           ; Regs used in _TouchPower: [wreg+status,2+status,0+pclath+cstack]
  4749  09CB  1283               	bcf	3,5	;RP0=0, select bank0
  4750  09CC  1303               	bcf	3,6	;RP1=0, select bank0
  4751  09CD  1C31               	btfss	_myMain,0
  4752  09CE  0008               	return
  4753                           
  4754                           ;Switch_B1.c: 12: if (RB5 == 0) {
  4755  09CF  1A86               	btfsc	6,5	;volatile
  4756  09D0  0008               	return
  4757  09D1  29D6               	goto	l6672
  4758  09D2                     l1420:	
  4759                           ;Switch_B1.c: 13: while (RB5 == 0 && myMain.Timeout == 0) {
  4760                           
  4761                           
  4762                           ;Switch_B1.c: 14: RB5 = 1;
  4763  09D2  1686               	bsf	6,5	;volatile
  4764                           
  4765                           ;Switch_B1.c: 15: Timeout_Counter();
  4766  09D3  158A  21B7  158A   	fcall	_Timeout_Counter
  4767  09D6                     l6672:	
  4768  09D6  1283               	bcf	3,5	;RP0=0, select bank0
  4769  09D7  1303               	bcf	3,6	;RP1=0, select bank0
  4770  09D8  1A86               	btfsc	6,5	;volatile
  4771  09D9  29DC               	goto	l6676
  4772  09DA  1D33               	btfss	_myMain+2,2
  4773  09DB  29D2               	goto	l1420
  4774  09DC                     l6676:	
  4775                           
  4776                           ;Switch_B1.c: 16: }
  4777                           ;Switch_B1.c: 17: set_TimeoutCleared();
  4778  09DC  158A  20B2         	fcall	_set_TimeoutCleared
  4779  09DE  0008               	return
  4780  09DF                     __end_of_TouchPower:	
  4781                           
  4782                           	psect	text19
  4783  08B2                     __ptext19:	
  4784 ;; *************** function _set_TimeoutCleared *****************
  4785 ;; Defined at:
  4786 ;;		line 281 in file "../src/Main_B1.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;		None
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;		None
  4791 ;; Return value:  Size  Location     Type
  4792 ;;		None               void
  4793 ;; Registers used:
  4794 ;;		status,2
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4800 ;;      Params:         0       0       0       0
  4801 ;;      Locals:         0       0       0       0
  4802 ;;      Temps:          0       0       0       0
  4803 ;;      Totals:         0       0       0       0
  4804 ;;Total ram usage:        0 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; Hardware stack levels required when called:    2
  4807 ;; This function calls:
  4808 ;;		Nothing
  4809 ;; This function is called by:
  4810 ;;		_getAD
  4811 ;;		_TouchPower
  4812 ;; This function uses a non-reentrant model
  4813 ;;
  4814                           
  4815                           
  4816                           ;psect for function _set_TimeoutCleared
  4817  08B2                     _set_TimeoutCleared:	
  4818                           
  4819                           ;Main_B1.c: 282: myMain.Timeout = 0;
  4820                           
  4821                           ;incstack = 0
  4822                           ; Regs used in _set_TimeoutCleared: [status,2]
  4823  08B2  1283               	bcf	3,5	;RP0=0, select bank0
  4824  08B3  1303               	bcf	3,6	;RP1=0, select bank0
  4825  08B4  1133               	bcf	_myMain+2,2
  4826                           
  4827                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  4828  08B5  01B4               	clrf	_myMain+3
  4829  08B6  01B5               	clrf	_myMain+4
  4830  08B7  0008               	return
  4831  08B8                     __end_of_set_TimeoutCleared:	
  4832                           
  4833                           	psect	text20
  4834  09B7                     __ptext20:	
  4835 ;; *************** function _Timeout_Counter *****************
  4836 ;; Defined at:
  4837 ;;		line 272 in file "../src/Main_B1.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;		None
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;		None
  4842 ;; Return value:  Size  Location     Type
  4843 ;;		None               void
  4844 ;; Registers used:
  4845 ;;		wreg, status,2
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4851 ;;      Params:         0       0       0       0
  4852 ;;      Locals:         0       0       0       0
  4853 ;;      Temps:          0       0       0       0
  4854 ;;      Totals:         0       0       0       0
  4855 ;;Total ram usage:        0 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    2
  4858 ;; This function calls:
  4859 ;;		Nothing
  4860 ;; This function is called by:
  4861 ;;		_getAD
  4862 ;;		_TouchPower
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           
  4867                           ;psect for function _Timeout_Counter
  4868  09B7                     _Timeout_Counter:	
  4869                           
  4870                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  4871                           
  4872                           ;incstack = 0
  4873                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  4874  09B7  3001               	movlw	1
  4875  09B8  1283               	bcf	3,5	;RP0=0, select bank0
  4876  09B9  1303               	bcf	3,6	;RP1=0, select bank0
  4877  09BA  07B4               	addwf	_myMain+3,f
  4878  09BB  1803               	skipnc
  4879  09BC  0AB5               	incf	_myMain+4,f
  4880  09BD  3000               	movlw	0
  4881  09BE  07B5               	addwf	_myMain+4,f
  4882                           
  4883                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  4884  09BF  3061               	movlw	97
  4885  09C0  0635               	xorwf	_myMain+4,w
  4886  09C1  1D03               	skipz
  4887  09C2  29C5               	goto	u8185
  4888  09C3  30A8               	movlw	168
  4889  09C4  0634               	xorwf	_myMain+3,w
  4890  09C5                     u8185:	
  4891  09C5  1D03               	skipz
  4892  09C6  0008               	return
  4893                           
  4894                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  4895  09C7  01B4               	clrf	_myMain+3
  4896  09C8  01B5               	clrf	_myMain+4
  4897                           
  4898                           ;Main_B1.c: 276: myMain.Timeout = 1;
  4899  09C9  1533               	bsf	_myMain+2,2
  4900  09CA  0008               	return
  4901  09CB                     __end_of_Timeout_Counter:	
  4902                           
  4903                           	psect	text21
  4904  0882                     __ptext21:	
  4905 ;; *************** function _Switch_Initialization *****************
  4906 ;; Defined at:
  4907 ;;		line 46 in file "../src/Switch_B1.c"
  4908 ;; Parameters:    Size  Location     Type
  4909 ;;		None
  4910 ;; Auto vars:     Size  Location     Type
  4911 ;;		None
  4912 ;; Return value:  Size  Location     Type
  4913 ;;		None               void
  4914 ;; Registers used:
  4915 ;;		None
  4916 ;; Tracked objects:
  4917 ;;		On entry : 0/0
  4918 ;;		On exit  : 0/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4921 ;;      Params:         0       0       0       0
  4922 ;;      Locals:         0       0       0       0
  4923 ;;      Temps:          0       0       0       0
  4924 ;;      Totals:         0       0       0       0
  4925 ;;Total ram usage:        0 bytes
  4926 ;; Hardware stack levels used:    1
  4927 ;; Hardware stack levels required when called:    2
  4928 ;; This function calls:
  4929 ;;		Nothing
  4930 ;; This function is called by:
  4931 ;;		_main
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935                           
  4936                           ;psect for function _Switch_Initialization
  4937  0882                     _Switch_Initialization:	
  4938                           
  4939                           ;incstack = 0
  4940                           ; Regs used in _Switch_Initialization: []
  4941  0882  0008               	return
  4942  0883                     __end_of_Switch_Initialization:	
  4943                           
  4944                           	psect	text22
  4945  088B                     __ptext22:	
  4946 ;; *************** function _SYSC_Main *****************
  4947 ;; Defined at:
  4948 ;;		line 17 in file "../src/SYSC_B1.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;		None
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;		None
  4953 ;; Return value:  Size  Location     Type
  4954 ;;		None               void
  4955 ;; Registers used:
  4956 ;;		wreg, status,2, status,0, pclath, cstack
  4957 ;; Tracked objects:
  4958 ;;		On entry : 0/0
  4959 ;;		On exit  : 0/0
  4960 ;;		Unchanged: 0/0
  4961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4962 ;;      Params:         0       0       0       0
  4963 ;;      Locals:         0       0       0       0
  4964 ;;      Temps:          0       0       0       0
  4965 ;;      Totals:         0       0       0       0
  4966 ;;Total ram usage:        0 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; Hardware stack levels required when called:    4
  4969 ;; This function calls:
  4970 ;;		_setSYSC_Main
  4971 ;; This function is called by:
  4972 ;;		_main
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           
  4977                           ;psect for function _SYSC_Main
  4978  088B                     _SYSC_Main:	
  4979                           
  4980                           ;SYSC_B1.c: 19: setSYSC_Main();
  4981                           
  4982                           ;incstack = 0
  4983                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4984  088B  158A  24E6         	fcall	_setSYSC_Main
  4985  088D  0008               	return
  4986  088E                     __end_of_SYSC_Main:	
  4987                           
  4988                           	psect	text23
  4989  0CE6                     __ptext23:	
  4990 ;; *************** function _setSYSC_Main *****************
  4991 ;; Defined at:
  4992 ;;		line 23 in file "../src/SYSC_B1.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;		None
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;		None
  4997 ;; Return value:  Size  Location     Type
  4998 ;;		None               void
  4999 ;; Registers used:
  5000 ;;		wreg, status,2, status,0, pclath, cstack
  5001 ;; Tracked objects:
  5002 ;;		On entry : 0/0
  5003 ;;		On exit  : 0/0
  5004 ;;		Unchanged: 0/0
  5005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5006 ;;      Params:         0       0       0       0
  5007 ;;      Locals:         0       0       0       0
  5008 ;;      Temps:          0       0       0       0
  5009 ;;      Totals:         0       0       0       0
  5010 ;;Total ram usage:        0 bytes
  5011 ;; Hardware stack levels used:    1
  5012 ;; Hardware stack levels required when called:    3
  5013 ;; This function calls:
  5014 ;;		_getMain_All_Error_Status
  5015 ;; This function is called by:
  5016 ;;		_SYSC_Main
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           
  5021                           ;psect for function _setSYSC_Main
  5022  0CE6                     _setSYSC_Main:	
  5023                           
  5024                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  5025                           
  5026                           ;incstack = 0
  5027                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  5028  0CE6  1283               	bcf	3,5	;RP0=0, select bank0
  5029  0CE7  1303               	bcf	3,6	;RP1=0, select bank0
  5030  0CE8  1C2C               	btfss	_SYSC,0
  5031  0CE9  0008               	return
  5032                           
  5033                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  5034  0CEA  18AC               	btfsc	_SYSC,1
  5035  0CEB  2CFD               	goto	l4136
  5036                           
  5037                           ;SYSC_B1.c: 27: SYSC.Timer++;
  5038  0CEC  3001               	movlw	1
  5039  0CED  07AD               	addwf	_SYSC+1,f
  5040  0CEE  1803               	skipnc
  5041  0CEF  0AAE               	incf	_SYSC+2,f
  5042  0CF0  3000               	movlw	0
  5043  0CF1  07AE               	addwf	_SYSC+2,f
  5044                           
  5045                           ;SYSC_B1.c: 28: if (SYSC.Timer >= (160 / 20)) {
  5046  0CF2  3000               	movlw	0
  5047  0CF3  022E               	subwf	_SYSC+2,w
  5048  0CF4  3008               	movlw	8
  5049  0CF5  1903               	skipnz
  5050  0CF6  022D               	subwf	_SYSC+1,w
  5051  0CF7  1C03               	skipc
  5052  0CF8  0008               	return
  5053                           
  5054                           ;SYSC_B1.c: 29: SYSC.Timer = 0;
  5055  0CF9  01AD               	clrf	_SYSC+1
  5056  0CFA  01AE               	clrf	_SYSC+2
  5057                           
  5058                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  5059  0CFB  14AC               	bsf	_SYSC,1
  5060                           
  5061                           ;SYSC_B1.c: 31: }
  5062                           ;SYSC_B1.c: 32: } else {
  5063  0CFC  0008               	return
  5064  0CFD                     l4136:	
  5065                           
  5066                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  5067  0CFD  3001               	movlw	1
  5068  0CFE  158A  2468  158A   	fcall	_getMain_All_Error_Status
  5069  0D01  3800               	iorlw	0
  5070  0D02  1D03               	skipz
  5071  0D03  0008               	return
  5072                           
  5073                           ;SYSC_B1.c: 34: SYSC.Timer++;
  5074  0D04  3001               	movlw	1
  5075  0D05  1283               	bcf	3,5	;RP0=0, select bank0
  5076  0D06  1303               	bcf	3,6	;RP1=0, select bank0
  5077  0D07  07AD               	addwf	_SYSC+1,f
  5078  0D08  1803               	skipnc
  5079  0D09  0AAE               	incf	_SYSC+2,f
  5080  0D0A  3000               	movlw	0
  5081  0D0B  07AE               	addwf	_SYSC+2,f
  5082                           
  5083                           ;SYSC_B1.c: 35: if (SYSC.Timer == (500 / 20)) {
  5084  0D0C  3019               	movlw	25
  5085  0D0D  062D               	xorwf	_SYSC+1,w
  5086  0D0E  042E               	iorwf	_SYSC+2,w
  5087  0D0F  1D03               	skipz
  5088  0D10  2D16               	goto	l4142
  5089                           
  5090                           ;SYSC_B1.c: 36: SYSC.Timer = 0;
  5091  0D11  01AD               	clrf	_SYSC+1
  5092  0D12  01AE               	clrf	_SYSC+2
  5093                           
  5094                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  5095  0D13  01AF               	clrf	_SYSC+3
  5096  0D14  01B0               	clrf	_SYSC+4
  5097                           
  5098                           ;SYSC_B1.c: 38: } else {
  5099  0D15  0008               	return
  5100  0D16                     l4142:	
  5101                           
  5102                           ;SYSC_B1.c: 39: SYSC.Counter++;
  5103  0D16  3001               	movlw	1
  5104  0D17  07AF               	addwf	_SYSC+3,f
  5105  0D18  1803               	skipnc
  5106  0D19  0AB0               	incf	_SYSC+4,f
  5107  0D1A  3000               	movlw	0
  5108  0D1B  07B0               	addwf	_SYSC+4,f
  5109                           
  5110                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  5111  0D1C  3001               	movlw	1
  5112  0D1D  0630               	xorwf	_SYSC+4,w
  5113  0D1E  1D03               	skipz
  5114  0D1F  2D22               	goto	u3735
  5115  0D20  30F4               	movlw	244
  5116  0D21  062F               	xorwf	_SYSC+3,w
  5117  0D22                     u3735:	
  5118  0D22  1D03               	skipz
  5119  0D23  0008               	return
  5120                           
  5121                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  5122  0D24  01AF               	clrf	_SYSC+3
  5123  0D25  01B0               	clrf	_SYSC+4
  5124                           
  5125                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  5126  0D26  10AC               	bcf	_SYSC,1
  5127  0D27  0008               	return
  5128  0D28                     __end_of_setSYSC_Main:	
  5129                           
  5130                           	psect	text24
  5131  0888                     __ptext24:	
  5132 ;; *************** function _SYSC_Initialization *****************
  5133 ;; Defined at:
  5134 ;;		line 7 in file "../src/SYSC_B1.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;		None
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;		None
  5139 ;; Return value:  Size  Location     Type
  5140 ;;		None               void
  5141 ;; Registers used:
  5142 ;;		status,2, status,0, pclath, cstack
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5148 ;;      Params:         0       0       0       0
  5149 ;;      Locals:         0       0       0       0
  5150 ;;      Temps:          0       0       0       0
  5151 ;;      Totals:         0       0       0       0
  5152 ;;Total ram usage:        0 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; Hardware stack levels required when called:    3
  5155 ;; This function calls:
  5156 ;;		_setSYSC_Initialization
  5157 ;; This function is called by:
  5158 ;;		_main
  5159 ;; This function uses a non-reentrant model
  5160 ;;
  5161                           
  5162                           
  5163                           ;psect for function _SYSC_Initialization
  5164  0888                     _SYSC_Initialization:	
  5165                           
  5166                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  5167                           
  5168                           ;incstack = 0
  5169                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  5170  0888  158A  209D         	fcall	_setSYSC_Initialization
  5171  088A  0008               	return
  5172  088B                     __end_of_SYSC_Initialization:	
  5173                           
  5174                           	psect	text25
  5175  089D                     __ptext25:	
  5176 ;; *************** function _setSYSC_Initialization *****************
  5177 ;; Defined at:
  5178 ;;		line 13 in file "../src/SYSC_B1.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;		None
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;		None
  5183 ;; Return value:  Size  Location     Type
  5184 ;;		None               void
  5185 ;; Registers used:
  5186 ;;		None
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5192 ;;      Params:         0       0       0       0
  5193 ;;      Locals:         0       0       0       0
  5194 ;;      Temps:          0       0       0       0
  5195 ;;      Totals:         0       0       0       0
  5196 ;;Total ram usage:        0 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    2
  5199 ;; This function calls:
  5200 ;;		Nothing
  5201 ;; This function is called by:
  5202 ;;		_SYSC_Initialization
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           
  5207                           ;psect for function _setSYSC_Initialization
  5208  089D                     _setSYSC_Initialization:	
  5209                           
  5210                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in _setSYSC_Initialization: []
  5214  089D  1283               	bcf	3,5	;RP0=0, select bank0
  5215  089E  1303               	bcf	3,6	;RP1=0, select bank0
  5216  089F  142C               	bsf	_SYSC,0
  5217  08A0  0008               	return
  5218  08A1                     __end_of_setSYSC_Initialization:	
  5219                           
  5220                           	psect	text26
  5221  0212                     __ptext26:	
  5222 ;; *************** function _PIR_Main *****************
  5223 ;; Defined at:
  5224 ;;		line 13 in file "../src/PIR_B1.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;		None
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  LightsStatus    1   16[BANK0 ] unsigned char 
  5229 ;;  cds             1   15[BANK0 ] unsigned char 
  5230 ;;  TriggerValue    1   14[BANK0 ] unsigned char 
  5231 ;;  Enable_Switc    1   13[BANK0 ] unsigned char 
  5232 ;;  error           1   10[BANK0 ] unsigned char 
  5233 ;; Return value:  Size  Location     Type
  5234 ;;		None               void
  5235 ;; Registers used:
  5236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5237 ;; Tracked objects:
  5238 ;;		On entry : 0/0
  5239 ;;		On exit  : 0/0
  5240 ;;		Unchanged: 0/0
  5241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5242 ;;      Params:         0       0       0       0
  5243 ;;      Locals:         0       7       0       0
  5244 ;;      Temps:          0       4       0       0
  5245 ;;      Totals:         0      11       0       0
  5246 ;;Total ram usage:       11 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; Hardware stack levels required when called:    5
  5249 ;; This function calls:
  5250 ;;		_getCDS_Status
  5251 ;;		_getLights_Status
  5252 ;;		_getMain_All_Error_Status
  5253 ;;		_setLights_SwOff
  5254 ;;		_setLights_SwOn
  5255 ;; This function is called by:
  5256 ;;		_main
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           
  5261                           ;psect for function _PIR_Main
  5262  0212                     _PIR_Main:	
  5263                           
  5264                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  5265                           
  5266                           ;incstack = 0
  5267                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5268  0212  3000               	movlw	0
  5269  0213  158A  2468  118A   	fcall	_getMain_All_Error_Status
  5270  0216  1283               	bcf	3,5	;RP0=0, select bank0
  5271  0217  1303               	bcf	3,6	;RP1=0, select bank0
  5272  0218  00E0               	movwf	??_PIR_Main
  5273  0219  0860               	movf	??_PIR_Main,w
  5274  021A  00E4               	movwf	PIR_Main@error
  5275                           
  5276                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  5277  021B  158A  20D6  118A   	fcall	_getCDS_Status
  5278  021E  1283               	bcf	3,5	;RP0=0, select bank0
  5279  021F  1303               	bcf	3,6	;RP1=0, select bank0
  5280  0220  00E0               	movwf	??_PIR_Main
  5281  0221  0860               	movf	??_PIR_Main,w
  5282  0222  00E9               	movwf	PIR_Main@cds
  5283                           
  5284                           ;PIR_B1.c: 16: char LightsStatus = 0;
  5285  0223  01EA               	clrf	PIR_Main@LightsStatus
  5286                           
  5287                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  5288  0224  01E7               	clrf	PIR_Main@Enable_Switch
  5289  0225  0AE7               	incf	PIR_Main@Enable_Switch,f
  5290                           
  5291                           ;PIR_B1.c: 18: char TriggerValue = 0;
  5292  0226  01E8               	clrf	PIR_Main@TriggerValue
  5293                           
  5294                           ;PIR_B1.c: 20: Enable_Switch = RB3 == 1 ? 1 : 0;
  5295  0227  3000               	movlw	0
  5296  0228  1986               	btfsc	6,3	;volatile
  5297  0229  3001               	movlw	1
  5298  022A  00E7               	movwf	PIR_Main@Enable_Switch
  5299                           
  5300                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  5301  022B  3001               	movlw	1
  5302  022C  158A  2170  118A   	fcall	_getLights_Status
  5303  022F  1283               	bcf	3,5	;RP0=0, select bank0
  5304  0230  1303               	bcf	3,6	;RP1=0, select bank0
  5305  0231  00E0               	movwf	??_PIR_Main
  5306  0232  0860               	movf	??_PIR_Main,w
  5307  0233  00EA               	movwf	PIR_Main@LightsStatus
  5308                           
  5309                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  5310  0234  1683               	bsf	3,5	;RP0=1, select bank1
  5311  0235  1303               	bcf	3,6	;RP1=0, select bank1
  5312  0236  1C20               	btfss	__PIR^(0+128),0
  5313  0237  2B9C               	goto	l1056
  5314                           
  5315                           ;PIR_B1.c: 36: if (error == 0) {
  5316  0238  1283               	bcf	3,5	;RP0=0, select bank0
  5317  0239  1303               	bcf	3,6	;RP1=0, select bank0
  5318  023A  08E4               	movf	PIR_Main@error,f
  5319  023B  1D03               	skipz
  5320  023C  2A63               	goto	l1057
  5321                           
  5322                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  5323  023D  0869               	movf	PIR_Main@cds,w
  5324  023E  3A01               	xorlw	1
  5325  023F  1D03               	skipz
  5326  0240  2A49               	goto	l1058
  5327  0241  0867               	movf	PIR_Main@Enable_Switch,w
  5328  0242  3A01               	xorlw	1
  5329  0243  1D03               	skipz
  5330  0244  2A49               	goto	l1058
  5331                           
  5332                           ;PIR_B1.c: 39: _PIR.Available = 1;
  5333  0245  1683               	bsf	3,5	;RP0=1, select bank1
  5334  0246  1303               	bcf	3,6	;RP1=0, select bank1
  5335  0247  17A0               	bsf	__PIR^(0+128),7
  5336                           
  5337                           ;PIR_B1.c: 40: } else {
  5338  0248  2A5D               	goto	l7160
  5339  0249                     l1058:	
  5340                           
  5341                           ;PIR_B1.c: 41: _PIR.Available = 0;
  5342  0249  1683               	bsf	3,5	;RP0=1, select bank1
  5343  024A  1303               	bcf	3,6	;RP1=0, select bank1
  5344  024B  13A0               	bcf	__PIR^(0+128),7
  5345                           
  5346                           ;PIR_B1.c: 42: if (_PIR.OK == 1) {
  5347  024C  1DA0               	btfss	__PIR^(0+128),3
  5348  024D  2A5D               	goto	l7160
  5349                           
  5350                           ;PIR_B1.c: 44: if (getLights_Status(1) == 1) {
  5351  024E  3001               	movlw	1
  5352  024F  158A  2170  118A   	fcall	_getLights_Status
  5353  0252  3A01               	xorlw	1
  5354  0253  1D03               	skipz
  5355  0254  2A5D               	goto	l7160
  5356                           
  5357                           ;PIR_B1.c: 45: setLights_SwOn(1);
  5358  0255  3001               	movlw	1
  5359  0256  158A  234A  118A   	fcall	_setLights_SwOn
  5360                           
  5361                           ;PIR_B1.c: 46: setLights_SwOff(1);
  5362  0259  3001               	movlw	1
  5363  025A  158A  2298  118A   	fcall	_setLights_SwOff
  5364  025D                     l7160:	
  5365                           
  5366                           ;PIR_B1.c: 48: }
  5367                           ;PIR_B1.c: 59: }
  5368                           ;PIR_B1.c: 60: }
  5369                           ;PIR_B1.c: 64: if (_PIR.Detect == 0) {
  5370  025D  1683               	bsf	3,5	;RP0=1, select bank1
  5371  025E  1303               	bcf	3,6	;RP1=0, select bank1
  5372  025F  1A20               	btfsc	__PIR^(0+128),4
  5373  0260  2A69               	goto	l1063
  5374                           
  5375                           ;PIR_B1.c: 65: _PIR.Detect = 1;
  5376  0261  1620               	bsf	__PIR^(0+128),4
  5377                           
  5378                           ;PIR_B1.c: 71: }
  5379                           ;PIR_B1.c: 72: } else {
  5380  0262  2A69               	goto	l1063
  5381  0263                     l1057:	
  5382                           
  5383                           ;PIR_B1.c: 73: if (_PIR.Detect == 1) {
  5384  0263  1683               	bsf	3,5	;RP0=1, select bank1
  5385  0264  1303               	bcf	3,6	;RP1=0, select bank1
  5386  0265  1E20               	btfss	__PIR^(0+128),4
  5387  0266  2A69               	goto	l1063
  5388                           
  5389                           ;PIR_B1.c: 74: _PIR.Detect = 0;
  5390  0267  1220               	bcf	__PIR^(0+128),4
  5391                           
  5392                           ;PIR_B1.c: 75: _PIR.Available = 0;
  5393  0268  13A0               	bcf	__PIR^(0+128),7
  5394  0269                     l1063:	
  5395                           
  5396                           ;PIR_B1.c: 93: }
  5397                           ;PIR_B1.c: 94: }
  5398                           ;PIR_B1.c: 96: if (_PIR.ADtoGO == 0) {
  5399  0269  18A0               	btfsc	__PIR^(0+128),1
  5400  026A  2A7A               	goto	l1065
  5401                           
  5402                           ;PIR_B1.c: 97: _PIR.Time++;
  5403  026B  3001               	movlw	1
  5404  026C  1283               	bcf	3,5	;RP0=0, select bank0
  5405  026D  1303               	bcf	3,6	;RP1=0, select bank0
  5406  026E  00E0               	movwf	??_PIR_Main
  5407  026F  0860               	movf	??_PIR_Main,w
  5408  0270  1683               	bsf	3,5	;RP0=1, select bank1
  5409  0271  1303               	bcf	3,6	;RP1=0, select bank1
  5410  0272  07A2               	addwf	(__PIR^(0+128)+2),f
  5411                           
  5412                           ;PIR_B1.c: 98: if (_PIR.Time == (100 / 20)) {
  5413  0273  0822               	movf	(__PIR^(0+128)+2),w
  5414  0274  3A05               	xorlw	5
  5415  0275  1D03               	skipz
  5416  0276  2B43               	goto	l7236
  5417                           
  5418                           ;PIR_B1.c: 99: _PIR.Time = 0;
  5419  0277  01A2               	clrf	(__PIR^(0+128)+2)
  5420                           
  5421                           ;PIR_B1.c: 100: _PIR.ADtoGO = 1;
  5422  0278  14A0               	bsf	__PIR^(0+128),1
  5423                           
  5424                           ;PIR_B1.c: 101: }
  5425                           ;PIR_B1.c: 102: } else {
  5426  0279  2B43               	goto	l7236
  5427  027A                     l1065:	
  5428                           
  5429                           ;PIR_B1.c: 103: if (_PIR.GO == 1) {
  5430  027A  1D20               	btfss	__PIR^(0+128),2
  5431  027B  2B43               	goto	l7236
  5432                           
  5433                           ;PIR_B1.c: 104: _PIR.GO = 0;
  5434  027C  1120               	bcf	__PIR^(0+128),2
  5435                           
  5436                           ;PIR_B1.c: 105: _PIR.ADtoGO = 0;
  5437  027D  10A0               	bcf	__PIR^(0+128),1
  5438                           
  5439                           ;PIR_B1.c: 106: if (_PIR.Available == 1) {
  5440  027E  1BA0               	btfsc	__PIR^(0+128),7
  5441                           
  5442                           ;PIR_B1.c: 107: if (_PIR.OK == 1) {
  5443  027F  1DA0               	btfss	__PIR^(0+128),3
  5444  0280  2B43               	goto	l7236
  5445                           
  5446                           ;PIR_B1.c: 109: _PIR.Time++;
  5447  0281  3001               	movlw	1
  5448  0282  1283               	bcf	3,5	;RP0=0, select bank0
  5449  0283  1303               	bcf	3,6	;RP1=0, select bank0
  5450  0284  00E0               	movwf	??_PIR_Main
  5451  0285  0860               	movf	??_PIR_Main,w
  5452  0286  1683               	bsf	3,5	;RP0=1, select bank1
  5453  0287  1303               	bcf	3,6	;RP1=0, select bank1
  5454  0288  07A2               	addwf	(__PIR^(0+128)+2),f
  5455                           
  5456                           ;PIR_B1.c: 110: if (_PIR.Time == 60) {
  5457  0289  0822               	movf	(__PIR^(0+128)+2),w
  5458  028A  3A3C               	xorlw	60
  5459  028B  1D03               	skipz
  5460  028C  2AC1               	goto	l7214
  5461                           
  5462                           ;PIR_B1.c: 111: _PIR.Time = 0;
  5463  028D  01A2               	clrf	(__PIR^(0+128)+2)
  5464                           
  5465                           ;PIR_B1.c: 112: if (_PIR.RangeCount >= 90) {
  5466  028E  305A               	movlw	90
  5467  028F  0247               	subwf	(__PIR^(0+128)+39),w
  5468  0290  1C03               	skipc
  5469  0291  2A9D               	goto	l7196
  5470                           
  5471                           ;PIR_B1.c: 113: _PIR.RangeTime1 = 0;
  5472  0292  01C6               	clrf	(__PIR^(0+128)+38)
  5473                           
  5474                           ;PIR_B1.c: 115: if (_PIR.RangeValue == 25) {
  5475  0293  0848               	movf	(__PIR^(0+128)+40),w
  5476  0294  3A19               	xorlw	25
  5477  0295  1903               	btfsc	3,2
  5478  0296  2AB2               	goto	L11
  5479                           
  5480                           ;PIR_B1.c: 117: } else if (_PIR.RangeValue == (25+10)) {
  5481                           
  5482                           ;PIR_B1.c: 116: _PIR.RangeValue = (25+10);
  5483  0297  0848               	movf	(__PIR^(0+128)+40),w
  5484  0298  3A23               	xorlw	35
  5485  0299  1D03               	skipz
  5486  029A  2AC0               	goto	l7212
  5487                           
  5488                           ;PIR_B1.c: 118: _PIR.RangeValue = (25+20);
  5489  029B  302D               	movlw	45
  5490  029C  2AB9               	goto	L10
  5491  029D                     l7196:	
  5492                           ;PIR_B1.c: 119: }
  5493                           ;PIR_B1.c: 120: } else if (_PIR.RangeCount <= 10) {
  5494                           
  5495  029D  300B               	movlw	11
  5496  029E  0247               	subwf	(__PIR^(0+128)+39),w
  5497  029F  1803               	skipnc
  5498  02A0  2AC0               	goto	l7212
  5499                           
  5500                           ;PIR_B1.c: 121: _PIR.RangeTime1++;
  5501  02A1  3001               	movlw	1
  5502  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  5503  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  5504  02A4  00E0               	movwf	??_PIR_Main
  5505  02A5  0860               	movf	??_PIR_Main,w
  5506  02A6  1683               	bsf	3,5	;RP0=1, select bank1
  5507  02A7  1303               	bcf	3,6	;RP1=0, select bank1
  5508  02A8  07C6               	addwf	(__PIR^(0+128)+38),f
  5509                           
  5510                           ;PIR_B1.c: 122: if (_PIR.RangeTime1 == 2) {
  5511  02A9  0846               	movf	(__PIR^(0+128)+38),w
  5512  02AA  3A02               	xorlw	2
  5513  02AB  1D03               	skipz
  5514  02AC  2AC0               	goto	l7212
  5515                           
  5516                           ;PIR_B1.c: 123: _PIR.RangeTime1 = 0;
  5517  02AD  01C6               	clrf	(__PIR^(0+128)+38)
  5518                           
  5519                           ;PIR_B1.c: 125: if (_PIR.RangeValue == (25+20)) {
  5520  02AE  0848               	movf	(__PIR^(0+128)+40),w
  5521  02AF  3A2D               	xorlw	45
  5522  02B0  1D03               	skipz
  5523  02B1  2AB4               	goto	l7208
  5524  02B2                     L11:	
  5525                           
  5526                           ;PIR_B1.c: 126: _PIR.RangeValue = (25+10);
  5527  02B2  3023               	movlw	35
  5528  02B3  2AB9               	goto	L10
  5529  02B4                     l7208:	
  5530                           ;PIR_B1.c: 127: } else if (_PIR.RangeValue == (25+10)) {
  5531                           
  5532  02B4  0848               	movf	(__PIR^(0+128)+40),w
  5533  02B5  3A23               	xorlw	35
  5534  02B6  1D03               	skipz
  5535  02B7  2AC0               	goto	l7212
  5536                           
  5537                           ;PIR_B1.c: 128: _PIR.RangeValue = 25;
  5538  02B8  3019               	movlw	25
  5539  02B9                     L10:	
  5540  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  5541  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  5542  02BB  00E0               	movwf	??_PIR_Main
  5543  02BC  0860               	movf	??_PIR_Main,w
  5544  02BD  1683               	bsf	3,5	;RP0=1, select bank1
  5545  02BE  1303               	bcf	3,6	;RP1=0, select bank1
  5546  02BF  00C8               	movwf	(__PIR^(0+128)+40)
  5547  02C0                     l7212:	
  5548                           
  5549                           ;PIR_B1.c: 129: }
  5550                           ;PIR_B1.c: 130: }
  5551                           ;PIR_B1.c: 131: }
  5552                           ;PIR_B1.c: 132: _PIR.RangeCount = 0;
  5553  02C0  01C7               	clrf	(__PIR^(0+128)+39)
  5554  02C1                     l7214:	
  5555                           
  5556                           ;PIR_B1.c: 133: }
  5557                           ;PIR_B1.c: 136: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  5558                           ;PIR_B1.c: 137: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  5559  02C1  0848               	movf	(__PIR^(0+128)+40),w
  5560  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  5561  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  5562  02C4  00E0               	movwf	??_PIR_Main
  5563  02C5  01E1               	clrf	??_PIR_Main+1
  5564  02C6  09E0               	comf	??_PIR_Main,f
  5565  02C7  09E1               	comf	??_PIR_Main+1,f
  5566  02C8  0AE0               	incf	??_PIR_Main,f
  5567  02C9  1903               	skipnz
  5568  02CA  0AE1               	incf	??_PIR_Main+1,f
  5569  02CB  1683               	bsf	3,5	;RP0=1, select bank1
  5570  02CC  1303               	bcf	3,6	;RP1=0, select bank1
  5571  02CD  0823               	movf	(__PIR^(0+128)+3),w
  5572  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  5573  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  5574  02D0  0760               	addwf	??_PIR_Main,w
  5575  02D1  00E2               	movwf	??_PIR_Main+2
  5576  02D2  0861               	movf	??_PIR_Main+1,w
  5577  02D3  1803               	skipnc
  5578  02D4  0A61               	incf	??_PIR_Main+1,w
  5579  02D5  00E3               	movwf	??_PIR_Main+3
  5580  02D6  0863               	movf	??_PIR_Main+3,w
  5581  02D7  3A80               	xorlw	128
  5582  02D8  3C80               	sublw	128
  5583  02D9  1D03               	skipz
  5584  02DA  2ADF               	goto	u9775
  5585  02DB  0862               	movf	??_PIR_Main+2,w
  5586  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  5587  02DD  1303               	bcf	3,6	;RP1=0, select bank1
  5588  02DE  0221               	subwf	(__PIR^(0+128)+1),w
  5589  02DF                     u9775:	
  5590  02DF  1C03               	skipc
  5591  02E0  2AFE               	goto	l7220
  5592  02E1  1683               	bsf	3,5	;RP0=1, select bank1
  5593  02E2  1303               	bcf	3,6	;RP1=0, select bank1
  5594  02E3  0823               	movf	(__PIR^(0+128)+3),w
  5595  02E4  0748               	addwf	(__PIR^(0+128)+40),w
  5596  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  5597  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  5598  02E7  00E0               	movwf	??_PIR_Main
  5599  02E8  01E1               	clrf	??_PIR_Main+1
  5600  02E9  0DE1               	rlf	??_PIR_Main+1,f
  5601  02EA  0861               	movf	??_PIR_Main+1,w
  5602  02EB  3A80               	xorlw	128
  5603  02EC  00E2               	movwf	??_PIR_Main+2
  5604  02ED  3080               	movlw	128
  5605  02EE  0262               	subwf	??_PIR_Main+2,w
  5606  02EF  1D03               	skipz
  5607  02F0  2AF7               	goto	u9785
  5608  02F1  1683               	bsf	3,5	;RP0=1, select bank1
  5609  02F2  1303               	bcf	3,6	;RP1=0, select bank1
  5610  02F3  0821               	movf	(__PIR^(0+128)+1),w
  5611  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  5612  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  5613  02F6  0260               	subwf	??_PIR_Main,w
  5614  02F7                     u9785:	
  5615  02F7  1C03               	skipc
  5616  02F8  2AFE               	goto	l7220
  5617                           
  5618                           ;PIR_B1.c: 139: _PIR.Count = 0;
  5619  02F9  1683               	bsf	3,5	;RP0=1, select bank1
  5620  02FA  1303               	bcf	3,6	;RP1=0, select bank1
  5621  02FB  01BE               	clrf	(__PIR^(0+128)+30)
  5622  02FC  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5623                           
  5624                           ;PIR_B1.c: 149: } else {
  5625  02FD  2B43               	goto	l7236
  5626  02FE                     l7220:	
  5627                           
  5628                           ;PIR_B1.c: 152: _PIR.RangeCount++;
  5629  02FE  3001               	movlw	1
  5630  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  5631  0300  1303               	bcf	3,6	;RP1=0, select bank0
  5632  0301  00E0               	movwf	??_PIR_Main
  5633  0302  0860               	movf	??_PIR_Main,w
  5634  0303  1683               	bsf	3,5	;RP0=1, select bank1
  5635  0304  1303               	bcf	3,6	;RP1=0, select bank1
  5636  0305  07C7               	addwf	(__PIR^(0+128)+39),f
  5637                           
  5638                           ;PIR_B1.c: 153: _PIR.Count++;
  5639  0306  3001               	movlw	1
  5640  0307  07BE               	addwf	(__PIR^(0+128)+30),f
  5641  0308  1803               	skipnc
  5642  0309  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5643  030A  3000               	movlw	0
  5644  030B  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5645                           
  5646                           ;PIR_B1.c: 155: TriggerValue = LightsStatus == 1 ? 3 : 3;
  5647  030C  1283               	bcf	3,5	;RP0=0, select bank0
  5648  030D  1303               	bcf	3,6	;RP1=0, select bank0
  5649  030E  086A               	movf	PIR_Main@LightsStatus,w
  5650  030F  3A01               	xorlw	1
  5651  0310  1903               	skipnz
  5652  0311  2B12               	goto	l7228
  5653  0312                     l7228:	
  5654  0312  3003               	movlw	3
  5655  0313  00E5               	movwf	_PIR_Main$3214
  5656  0314  3000               	movlw	0
  5657  0315  00E6               	movwf	_PIR_Main$3214+1
  5658  0316  0865               	movf	_PIR_Main$3214,w
  5659  0317  00E0               	movwf	??_PIR_Main
  5660  0318  0860               	movf	??_PIR_Main,w
  5661  0319  00E8               	movwf	PIR_Main@TriggerValue
  5662                           
  5663                           ;PIR_B1.c: 157: if (_PIR.Count == TriggerValue) {
  5664  031A  0868               	movf	PIR_Main@TriggerValue,w
  5665  031B  00E0               	movwf	??_PIR_Main
  5666  031C  01E1               	clrf	??_PIR_Main+1
  5667  031D  1683               	bsf	3,5	;RP0=1, select bank1
  5668  031E  1303               	bcf	3,6	;RP1=0, select bank1
  5669  031F  083F               	movf	((__PIR+1)^(0+128)+30),w
  5670  0320  1283               	bcf	3,5	;RP0=0, select bank0
  5671  0321  1303               	bcf	3,6	;RP1=0, select bank0
  5672  0322  0661               	xorwf	??_PIR_Main+1,w
  5673  0323  1D03               	skipz
  5674  0324  2B2B               	goto	u9805
  5675  0325  1683               	bsf	3,5	;RP0=1, select bank1
  5676  0326  1303               	bcf	3,6	;RP1=0, select bank1
  5677  0327  083E               	movf	(__PIR^(0+128)+30),w
  5678  0328  1283               	bcf	3,5	;RP0=0, select bank0
  5679  0329  1303               	bcf	3,6	;RP1=0, select bank0
  5680  032A  0660               	xorwf	??_PIR_Main,w
  5681  032B                     u9805:	
  5682  032B  1D03               	skipz
  5683  032C  2B43               	goto	l7236
  5684                           
  5685                           ;PIR_B1.c: 158: _PIR.Count = 0;
  5686  032D  1683               	bsf	3,5	;RP0=1, select bank1
  5687  032E  1303               	bcf	3,6	;RP1=0, select bank1
  5688  032F  01BE               	clrf	(__PIR^(0+128)+30)
  5689  0330  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5690                           
  5691                           ;PIR_B1.c: 160: _PIR.CloseTimeSeconds = 0;
  5692  0331  01C2               	clrf	(__PIR^(0+128)+34)
  5693                           
  5694                           ;PIR_B1.c: 161: _PIR.CloseTimeMinutes = 0;
  5695  0332  01C0               	clrf	(__PIR^(0+128)+32)
  5696  0333  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5697                           
  5698                           ;PIR_B1.c: 167: if (getLights_Status(1) == 0) {
  5699  0334  3001               	movlw	1
  5700  0335  158A  2170  118A   	fcall	_getLights_Status
  5701  0338  3800               	iorlw	0
  5702  0339  1D03               	skipz
  5703  033A  2B43               	goto	l7236
  5704                           
  5705                           ;PIR_B1.c: 168: setLights_SwOn(1);
  5706  033B  3001               	movlw	1
  5707  033C  158A  234A  118A   	fcall	_setLights_SwOn
  5708                           
  5709                           ;PIR_B1.c: 169: setLights_SwOff(1);
  5710  033F  3001               	movlw	1
  5711  0340  158A  2298  118A   	fcall	_setLights_SwOff
  5712  0343                     l7236:	
  5713                           
  5714                           ;PIR_B1.c: 171: }
  5715                           ;PIR_B1.c: 231: }
  5716                           ;PIR_B1.c: 232: }
  5717                           ;PIR_B1.c: 233: }
  5718                           ;PIR_B1.c: 234: }
  5719                           ;PIR_B1.c: 235: }
  5720                           ;PIR_B1.c: 236: }
  5721                           ;PIR_B1.c: 237: if (_PIR.OK == 0) {
  5722  0343  1683               	bsf	3,5	;RP0=1, select bank1
  5723  0344  1303               	bcf	3,6	;RP1=0, select bank1
  5724  0345  19A0               	btfsc	__PIR^(0+128),3
  5725  0346  2B6C               	goto	l7250
  5726                           
  5727                           ;PIR_B1.c: 238: _PIR.Count++;
  5728  0347  3001               	movlw	1
  5729  0348  07BE               	addwf	(__PIR^(0+128)+30),f
  5730  0349  1803               	skipnc
  5731  034A  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5732  034B  3000               	movlw	0
  5733  034C  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5734                           
  5735                           ;PIR_B1.c: 239: if (_PIR.Count == (30000 / 20)) {
  5736  034D  3005               	movlw	5
  5737  034E  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  5738  034F  1D03               	skipz
  5739  0350  2B53               	goto	u9835
  5740  0351  30DC               	movlw	220
  5741  0352  063E               	xorwf	(__PIR^(0+128)+30),w
  5742  0353                     u9835:	
  5743  0353  1D03               	skipz
  5744  0354  0008               	return
  5745                           
  5746                           ;PIR_B1.c: 240: _PIR.Count = 0;
  5747  0355  01BE               	clrf	(__PIR^(0+128)+30)
  5748  0356  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5749                           
  5750                           ;PIR_B1.c: 241: _PIR.OK = 1;
  5751  0357  15A0               	bsf	__PIR^(0+128),3
  5752                           
  5753                           ;PIR_B1.c: 245: if (cds == 0) {
  5754  0358  1283               	bcf	3,5	;RP0=0, select bank0
  5755  0359  1303               	bcf	3,6	;RP1=0, select bank0
  5756  035A  08E9               	movf	PIR_Main@cds,f
  5757  035B  1D03               	skipz
  5758  035C  0008               	return
  5759                           
  5760                           ;PIR_B1.c: 248: if (getLights_Status(1) == 1) {
  5761  035D  3001               	movlw	1
  5762  035E  158A  2170  118A   	fcall	_getLights_Status
  5763  0361  3A01               	xorlw	1
  5764  0362  1D03               	skipz
  5765  0363  0008               	return
  5766                           
  5767                           ;PIR_B1.c: 249: setLights_SwOn(1);
  5768  0364  3001               	movlw	1
  5769  0365  158A  234A  118A   	fcall	_setLights_SwOn
  5770                           
  5771                           ;PIR_B1.c: 250: setLights_SwOff(1);
  5772  0368  3001               	movlw	1
  5773  0369  158A  2298         	fcall	_setLights_SwOff
  5774                           
  5775                           ;PIR_B1.c: 252: }
  5776                           ;PIR_B1.c: 264: }
  5777                           ;PIR_B1.c: 265: }
  5778                           ;PIR_B1.c: 266: } else {
  5779  036B  0008               	return
  5780  036C                     l7250:	
  5781                           
  5782                           ;PIR_B1.c: 267: if (LightsStatus == 1) {
  5783  036C  1283               	bcf	3,5	;RP0=0, select bank0
  5784  036D  1303               	bcf	3,6	;RP1=0, select bank0
  5785  036E  086A               	movf	PIR_Main@LightsStatus,w
  5786  036F  3A01               	xorlw	1
  5787  0370  1D03               	skipz
  5788  0371  0008               	return
  5789                           
  5790                           ;PIR_B1.c: 268: _PIR.CloseTimeSeconds++;
  5791  0372  3001               	movlw	1
  5792  0373  00E0               	movwf	??_PIR_Main
  5793  0374  0860               	movf	??_PIR_Main,w
  5794  0375  1683               	bsf	3,5	;RP0=1, select bank1
  5795  0376  1303               	bcf	3,6	;RP1=0, select bank1
  5796  0377  07C2               	addwf	(__PIR^(0+128)+34),f
  5797                           
  5798                           ;PIR_B1.c: 269: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  5799  0378  0842               	movf	(__PIR^(0+128)+34),w
  5800  0379  3A32               	xorlw	50
  5801  037A  1D03               	skipz
  5802  037B  0008               	return
  5803                           
  5804                           ;PIR_B1.c: 270: _PIR.CloseTimeSeconds = 0;
  5805  037C  01C2               	clrf	(__PIR^(0+128)+34)
  5806                           
  5807                           ;PIR_B1.c: 271: _PIR.CloseTimeMinutes++;
  5808  037D  3001               	movlw	1
  5809  037E  07C0               	addwf	(__PIR^(0+128)+32),f
  5810  037F  1803               	skipnc
  5811  0380  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  5812  0381  3000               	movlw	0
  5813  0382  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  5814                           
  5815                           ;PIR_B1.c: 272: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5816  0383  0844               	movf	((__PIR+1)^(0+128)+35),w
  5817  0384  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  5818  0385  1D03               	skipz
  5819  0386  2B89               	goto	u9885
  5820  0387  0843               	movf	(__PIR^(0+128)+35),w
  5821  0388  0640               	xorwf	(__PIR^(0+128)+32),w
  5822  0389                     u9885:	
  5823  0389  1D03               	skipz
  5824  038A  0008               	return
  5825                           
  5826                           ;PIR_B1.c: 273: _PIR.CloseTimeMinutes = 0;
  5827  038B  01C0               	clrf	(__PIR^(0+128)+32)
  5828  038C  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5829                           
  5830                           ;PIR_B1.c: 279: if (getLights_Status(1) == 1) {
  5831  038D  3001               	movlw	1
  5832  038E  158A  2170  118A   	fcall	_getLights_Status
  5833  0391  3A01               	xorlw	1
  5834  0392  1D03               	skipz
  5835  0393  0008               	return
  5836                           
  5837                           ;PIR_B1.c: 280: setLights_SwOn(1);
  5838  0394  3001               	movlw	1
  5839  0395  158A  234A  118A   	fcall	_setLights_SwOn
  5840                           
  5841                           ;PIR_B1.c: 281: setLights_SwOff(1);
  5842  0398  3001               	movlw	1
  5843  0399  158A  2298         	fcall	_setLights_SwOff
  5844                           
  5845                           ;PIR_B1.c: 283: }
  5846                           ;PIR_B1.c: 295: }
  5847                           ;PIR_B1.c: 296: }
  5848                           ;PIR_B1.c: 297: }
  5849                           ;PIR_B1.c: 298: }
  5850                           ;PIR_B1.c: 299: } else {
  5851  039B  0008               	return
  5852  039C                     l1056:	
  5853                           
  5854                           ;PIR_B1.c: 300: if (myMain.PowerON == 1) {
  5855  039C  1283               	bcf	3,5	;RP0=0, select bank0
  5856  039D  1303               	bcf	3,6	;RP1=0, select bank0
  5857  039E  1C31               	btfss	_myMain,0
  5858  039F  0008               	return
  5859                           
  5860                           ;PIR_B1.c: 301: _PIR.Enable = 1;
  5861  03A0  1683               	bsf	3,5	;RP0=1, select bank1
  5862  03A1  1303               	bcf	3,6	;RP1=0, select bank1
  5863  03A2  1420               	bsf	__PIR^(0+128),0
  5864                           
  5865                           ;PIR_B1.c: 307: if (getLights_Status(1) == 0) {
  5866  03A3  3001               	movlw	1
  5867  03A4  158A  2170  118A   	fcall	_getLights_Status
  5868  03A7  3800               	iorlw	0
  5869  03A8  1D03               	skipz
  5870  03A9  0008               	return
  5871                           
  5872                           ;PIR_B1.c: 308: setLights_SwOn(1);
  5873  03AA  3001               	movlw	1
  5874  03AB  158A  234A  118A   	fcall	_setLights_SwOn
  5875                           
  5876                           ;PIR_B1.c: 309: setLights_SwOff(1);
  5877  03AE  3001               	movlw	1
  5878  03AF  158A  2298         	fcall	_setLights_SwOff
  5879  03B1  0008               	return
  5880  03B2                     __end_of_PIR_Main:	
  5881                           
  5882                           	psect	text27
  5883  08D6                     __ptext27:	
  5884 ;; *************** function _getCDS_Status *****************
  5885 ;; Defined at:
  5886 ;;		line 42 in file "../src/CDS_B1.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;		None
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  status          1    4[COMMON] unsigned char 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      unsigned char 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5900 ;;      Params:         0       0       0       0
  5901 ;;      Locals:         1       0       0       0
  5902 ;;      Temps:          0       0       0       0
  5903 ;;      Totals:         1       0       0       0
  5904 ;;Total ram usage:        1 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    2
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_PIR_Main
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           
  5915                           ;psect for function _getCDS_Status
  5916  08D6                     _getCDS_Status:	
  5917                           
  5918                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5919                           
  5920                           ;incstack = 0
  5921                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5922  08D6  3000               	movlw	0
  5923  08D7  1283               	bcf	3,5	;RP0=0, select bank0
  5924  08D8  1303               	bcf	3,6	;RP1=0, select bank0
  5925  08D9  1A36               	btfsc	__CDS,4
  5926  08DA  3001               	movlw	1
  5927  08DB  00F9               	movwf	getCDS_Status@status
  5928                           
  5929                           ;CDS_B1.c: 44: return status;
  5930  08DC  0879               	movf	getCDS_Status@status,w
  5931  08DD  0008               	return
  5932  08DE                     __end_of_getCDS_Status:	
  5933                           
  5934                           	psect	text28
  5935  08E6                     __ptext28:	
  5936 ;; *************** function _PIR_Initialization *****************
  5937 ;; Defined at:
  5938 ;;		line 7 in file "../src/PIR_B1.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;		None
  5941 ;; Auto vars:     Size  Location     Type
  5942 ;;		None
  5943 ;; Return value:  Size  Location     Type
  5944 ;;		None               void
  5945 ;; Registers used:
  5946 ;;		wreg
  5947 ;; Tracked objects:
  5948 ;;		On entry : 0/0
  5949 ;;		On exit  : 0/0
  5950 ;;		Unchanged: 0/0
  5951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5952 ;;      Params:         0       0       0       0
  5953 ;;      Locals:         0       0       0       0
  5954 ;;      Temps:          1       0       0       0
  5955 ;;      Totals:         1       0       0       0
  5956 ;;Total ram usage:        1 bytes
  5957 ;; Hardware stack levels used:    1
  5958 ;; Hardware stack levels required when called:    2
  5959 ;; This function calls:
  5960 ;;		Nothing
  5961 ;; This function is called by:
  5962 ;;		_main
  5963 ;; This function uses a non-reentrant model
  5964 ;;
  5965                           
  5966                           
  5967                           ;psect for function _PIR_Initialization
  5968  08E6                     _PIR_Initialization:	
  5969                           
  5970                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5971                           
  5972                           ;incstack = 0
  5973                           ; Regs used in _PIR_Initialization: [wreg]
  5974  08E6  3019               	movlw	25
  5975  08E7  00F9               	movwf	??_PIR_Initialization
  5976  08E8  0879               	movf	??_PIR_Initialization,w
  5977  08E9  1683               	bsf	3,5	;RP0=1, select bank1
  5978  08EA  1303               	bcf	3,6	;RP1=0, select bank1
  5979  08EB  00C8               	movwf	(__PIR^(0+128)+40)
  5980                           
  5981                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5982  08EC  3005               	movlw	5
  5983  08ED  00C3               	movwf	(__PIR^(0+128)+35)
  5984  08EE  3000               	movlw	0
  5985  08EF  00C4               	movwf	(__PIR^(0+128)+36)
  5986  08F0  0008               	return
  5987  08F1                     __end_of_PIR_Initialization:	
  5988                           
  5989                           	psect	text29
  5990  0941                     __ptext29:	
  5991 ;; *************** function _Mcu_Initialization *****************
  5992 ;; Defined at:
  5993 ;;		line 30 in file "../src/MCU_B1.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;		None
  5998 ;; Return value:  Size  Location     Type
  5999 ;;		None               void
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, status,0, pclath, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6007 ;;      Params:         0       0       0       0
  6008 ;;      Locals:         0       0       0       0
  6009 ;;      Temps:          0       0       0       0
  6010 ;;      Totals:         0       0       0       0
  6011 ;;Total ram usage:        0 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    3
  6014 ;; This function calls:
  6015 ;;		_ADC_Set
  6016 ;;		_Fosc_Set
  6017 ;;		_IO_Set
  6018 ;;		_TMR1_Set
  6019 ;;		_WDT_Set
  6020 ;; This function is called by:
  6021 ;;		_main
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           
  6026                           ;psect for function _Mcu_Initialization
  6027  0941                     _Mcu_Initialization:	
  6028                           
  6029                           ;MCU_B1.c: 32: Fosc_Set();
  6030                           
  6031                           ;incstack = 0
  6032                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  6033  0941  158A  20A1  158A   	fcall	_Fosc_Set
  6034                           
  6035                           ;MCU_B1.c: 34: IO_Set();
  6036  0944  158A  2268  158A   	fcall	_IO_Set
  6037                           
  6038                           ;MCU_B1.c: 36: ;;
  6039                           ;MCU_B1.c: 38: TMR1_Set();
  6040  0947  158A  2116  158A   	fcall	_TMR1_Set
  6041                           
  6042                           ;MCU_B1.c: 40: ADC_Set();
  6043  094A  158A  20BF  158A   	fcall	_ADC_Set
  6044                           
  6045                           ;MCU_B1.c: 42: ;;
  6046                           ;MCU_B1.c: 44: ;;
  6047                           ;MCU_B1.c: 46: ;;
  6048                           ;MCU_B1.c: 48: ;;
  6049                           ;MCU_B1.c: 50: ;;
  6050                           ;MCU_B1.c: 52: WDT_Set();
  6051  094D  158A  2124         	fcall	_WDT_Set
  6052  094F  0008               	return
  6053  0950                     __end_of_Mcu_Initialization:	
  6054                           
  6055                           	psect	text30
  6056  0924                     __ptext30:	
  6057 ;; *************** function _WDT_Set *****************
  6058 ;; Defined at:
  6059 ;;		line 1089 in file "../src/MCU_B1.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;		None
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;		None
  6064 ;; Return value:  Size  Location     Type
  6065 ;;		None               void
  6066 ;; Registers used:
  6067 ;;		wreg
  6068 ;; Tracked objects:
  6069 ;;		On entry : 0/0
  6070 ;;		On exit  : 0/0
  6071 ;;		Unchanged: 0/0
  6072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6073 ;;      Params:         0       0       0       0
  6074 ;;      Locals:         0       0       0       0
  6075 ;;      Temps:          1       0       0       0
  6076 ;;      Totals:         1       0       0       0
  6077 ;;Total ram usage:        1 bytes
  6078 ;; Hardware stack levels used:    1
  6079 ;; Hardware stack levels required when called:    2
  6080 ;; This function calls:
  6081 ;;		Nothing
  6082 ;; This function is called by:
  6083 ;;		_Mcu_Initialization
  6084 ;; This function uses a non-reentrant model
  6085 ;;
  6086                           
  6087                           
  6088                           ;psect for function _WDT_Set
  6089  0924                     _WDT_Set:	
  6090                           
  6091                           ;MCU_B1.c: 1091: PSA = 1;
  6092                           
  6093                           ;incstack = 0
  6094                           ; Regs used in _WDT_Set: [wreg]
  6095  0924  1683               	bsf	3,5	;RP0=1, select bank1
  6096  0925  1303               	bcf	3,6	;RP1=0, select bank1
  6097  0926  1581               	bsf	1,3	;volatile
  6098                           
  6099                           ;MCU_B1.c: 1092: PS0 = 1;
  6100  0927  1401               	bsf	1,0	;volatile
  6101                           
  6102                           ;MCU_B1.c: 1093: PS1 = 1;
  6103  0928  1481               	bsf	1,1	;volatile
  6104                           
  6105                           ;MCU_B1.c: 1094: PS2 = 1;
  6106  0929  1501               	bsf	1,2	;volatile
  6107                           
  6108                           ;MCU_B1.c: 1098: WDT.Enable = 1;
  6109  092A  1283               	bcf	3,5	;RP0=0, select bank0
  6110  092B  1303               	bcf	3,6	;RP1=0, select bank0
  6111  092C  143D               	bsf	_WDT,0
  6112                           
  6113                           ;MCU_B1.c: 1099: WDT.Timer = 10;
  6114  092D  300A               	movlw	10
  6115  092E  00F9               	movwf	??_WDT_Set
  6116  092F  0879               	movf	??_WDT_Set,w
  6117  0930  00BE               	movwf	_WDT+1
  6118  0931  0008               	return
  6119  0932                     __end_of_WDT_Set:	
  6120                           
  6121                           	psect	text31
  6122  0916                     __ptext31:	
  6123 ;; *************** function _TMR1_Set *****************
  6124 ;; Defined at:
  6125 ;;		line 226 in file "../src/MCU_B1.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;		None
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;		None
  6130 ;; Return value:  Size  Location     Type
  6131 ;;		None               void
  6132 ;; Registers used:
  6133 ;;		wreg
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6139 ;;      Params:         0       0       0       0
  6140 ;;      Locals:         0       0       0       0
  6141 ;;      Temps:          0       0       0       0
  6142 ;;      Totals:         0       0       0       0
  6143 ;;Total ram usage:        0 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; Hardware stack levels required when called:    2
  6146 ;; This function calls:
  6147 ;;		Nothing
  6148 ;; This function is called by:
  6149 ;;		_Mcu_Initialization
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           
  6154                           ;psect for function _TMR1_Set
  6155  0916                     _TMR1_Set:	
  6156                           
  6157                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  6158                           
  6159                           ;incstack = 0
  6160                           ; Regs used in _TMR1_Set: [wreg]
  6161  0916  3041               	movlw	65
  6162  0917  1283               	bcf	3,5	;RP0=0, select bank0
  6163  0918  1303               	bcf	3,6	;RP1=0, select bank0
  6164  0919  0090               	movwf	16	;volatile
  6165                           
  6166                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  6167  091A  30FA               	movlw	250
  6168  091B  008F               	movwf	15	;volatile
  6169                           
  6170                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  6171  091C  3038               	movlw	56
  6172  091D  008E               	movwf	14	;volatile
  6173                           
  6174                           ;MCU_B1.c: 230: TMR1IE = 1;
  6175  091E  1683               	bsf	3,5	;RP0=1, select bank1
  6176  091F  1303               	bcf	3,6	;RP1=0, select bank1
  6177  0920  140C               	bsf	12,0	;volatile
  6178                           
  6179                           ;MCU_B1.c: 231: PEIE = 1;
  6180  0921  170B               	bsf	11,6	;volatile
  6181                           
  6182                           ;MCU_B1.c: 232: GIE = 1;
  6183  0922  178B               	bsf	11,7	;volatile
  6184  0923  0008               	return
  6185  0924                     __end_of_TMR1_Set:	
  6186                           
  6187                           	psect	text32
  6188  0A68                     __ptext32:	
  6189 ;; *************** function _IO_Set *****************
  6190 ;; Defined at:
  6191 ;;		line 60 in file "../src/MCU_B1.c"
  6192 ;; Parameters:    Size  Location     Type
  6193 ;;		None
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;		None
  6196 ;; Return value:  Size  Location     Type
  6197 ;;		None               void
  6198 ;; Registers used:
  6199 ;;		wreg, status,2
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6205 ;;      Params:         0       0       0       0
  6206 ;;      Locals:         0       0       0       0
  6207 ;;      Temps:          0       0       0       0
  6208 ;;      Totals:         0       0       0       0
  6209 ;;Total ram usage:        0 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    2
  6212 ;; This function calls:
  6213 ;;		Nothing
  6214 ;; This function is called by:
  6215 ;;		_Mcu_Initialization
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           
  6220                           ;psect for function _IO_Set
  6221  0A68                     _IO_Set:	
  6222                           
  6223                           ;MCU_B1.c: 62: TRISA = 0b00101110;;
  6224                           
  6225                           ;incstack = 0
  6226                           ; Regs used in _IO_Set: [wreg+status,2]
  6227  0A68  302E               	movlw	46
  6228  0A69  1683               	bsf	3,5	;RP0=1, select bank1
  6229  0A6A  1303               	bcf	3,6	;RP1=0, select bank1
  6230  0A6B  0085               	movwf	5	;volatile
  6231                           
  6232                           ;MCU_B1.c: 63: TRISB = 0b00010101;;
  6233  0A6C  3015               	movlw	21
  6234  0A6D  0086               	movwf	6	;volatile
  6235                           
  6236                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  6237  0A6E  0187               	clrf	7	;volatile
  6238                           
  6239                           ;MCU_B1.c: 65: ANSELA = 0b00101110;;
  6240  0A6F  302E               	movlw	46
  6241  0A70  1683               	bsf	3,5	;RP0=1, select bank3
  6242  0A71  1703               	bsf	3,6	;RP1=1, select bank3
  6243  0A72  0085               	movwf	5	;volatile
  6244                           
  6245                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  6246  0A73  3001               	movlw	1
  6247  0A74  0086               	movwf	6	;volatile
  6248                           
  6249                           ;MCU_B1.c: 67: PORTA = 0b00101110;;
  6250  0A75  302E               	movlw	46
  6251  0A76  1283               	bcf	3,5	;RP0=0, select bank0
  6252  0A77  1303               	bcf	3,6	;RP1=0, select bank0
  6253  0A78  0085               	movwf	5	;volatile
  6254                           
  6255                           ;MCU_B1.c: 68: PORTB = 0b00010101;;
  6256  0A79  3015               	movlw	21
  6257  0A7A  0086               	movwf	6	;volatile
  6258                           
  6259                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  6260  0A7B  0187               	clrf	7	;volatile
  6261                           
  6262                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  6263  0A7C  1683               	bsf	3,5	;RP0=1, select bank1
  6264  0A7D  1303               	bcf	3,6	;RP1=0, select bank1
  6265  0A7E  0195               	clrf	21	;volatile
  6266  0A7F  0008               	return
  6267  0A80                     __end_of_IO_Set:	
  6268                           
  6269                           	psect	text33
  6270  08A1                     __ptext33:	
  6271 ;; *************** function _Fosc_Set *****************
  6272 ;; Defined at:
  6273 ;;		line 56 in file "../src/MCU_B1.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;		None
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;		None
  6278 ;; Return value:  Size  Location     Type
  6279 ;;		None               void
  6280 ;; Registers used:
  6281 ;;		wreg
  6282 ;; Tracked objects:
  6283 ;;		On entry : 0/0
  6284 ;;		On exit  : 0/0
  6285 ;;		Unchanged: 0/0
  6286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6287 ;;      Params:         0       0       0       0
  6288 ;;      Locals:         0       0       0       0
  6289 ;;      Temps:          0       0       0       0
  6290 ;;      Totals:         0       0       0       0
  6291 ;;Total ram usage:        0 bytes
  6292 ;; Hardware stack levels used:    1
  6293 ;; Hardware stack levels required when called:    2
  6294 ;; This function calls:
  6295 ;;		Nothing
  6296 ;; This function is called by:
  6297 ;;		_Mcu_Initialization
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           
  6302                           ;psect for function _Fosc_Set
  6303  08A1                     _Fosc_Set:	
  6304                           
  6305                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  6306                           
  6307                           ;incstack = 0
  6308                           ; Regs used in _Fosc_Set: [wreg]
  6309  08A1  303C               	movlw	60
  6310  08A2  1683               	bsf	3,5	;RP0=1, select bank1
  6311  08A3  1303               	bcf	3,6	;RP1=0, select bank1
  6312  08A4  0090               	movwf	16	;volatile
  6313  08A5  0008               	return
  6314  08A6                     __end_of_Fosc_Set:	
  6315                           
  6316                           	psect	text34
  6317  08BF                     __ptext34:	
  6318 ;; *************** function _ADC_Set *****************
  6319 ;; Defined at:
  6320 ;;		line 425 in file "../src/MCU_B1.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;		None
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;		None
  6325 ;; Return value:  Size  Location     Type
  6326 ;;		None               void
  6327 ;; Registers used:
  6328 ;;		wreg
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6334 ;;      Params:         0       0       0       0
  6335 ;;      Locals:         0       0       0       0
  6336 ;;      Temps:          0       0       0       0
  6337 ;;      Totals:         0       0       0       0
  6338 ;;Total ram usage:        0 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    2
  6341 ;; This function calls:
  6342 ;;		Nothing
  6343 ;; This function is called by:
  6344 ;;		_Mcu_Initialization
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           
  6349                           ;psect for function _ADC_Set
  6350  08BF                     _ADC_Set:	
  6351                           
  6352                           ;MCU_B1.c: 426: ADCON1 = 0x73;
  6353                           
  6354                           ;incstack = 0
  6355                           ; Regs used in _ADC_Set: [wreg]
  6356  08BF  3073               	movlw	115
  6357  08C0  1683               	bsf	3,5	;RP0=1, select bank1
  6358  08C1  1303               	bcf	3,6	;RP1=0, select bank1
  6359  08C2  009F               	movwf	31	;volatile
  6360                           
  6361                           ;MCU_B1.c: 427: FVRCON = 0xc1;
  6362  08C3  30C1               	movlw	193
  6363  08C4  009D               	movwf	29	;volatile
  6364  08C5  0008               	return
  6365  08C6                     __end_of_ADC_Set:	
  6366                           
  6367                           	psect	text35
  6368  002E                     __ptext35:	
  6369 ;; *************** function _Load_Main *****************
  6370 ;; Defined at:
  6371 ;;		line 39 in file "../src/OverLoad_B1.c"
  6372 ;; Parameters:    Size  Location     Type
  6373 ;;		None
  6374 ;; Auto vars:     Size  Location     Type
  6375 ;;  i               2   15[BANK0 ] int 
  6376 ;;  LightsCount     1   14[BANK0 ] unsigned char 
  6377 ;;  Load_RunStat    1   13[BANK0 ] unsigned char 
  6378 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  6379 ;;  error           1    9[BANK0 ] unsigned char 
  6380 ;; Return value:  Size  Location     Type
  6381 ;;		None               void
  6382 ;; Registers used:
  6383 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6389 ;;      Params:         0       0       0       0
  6390 ;;      Locals:         0       8       0       0
  6391 ;;      Temps:          0       2       0       0
  6392 ;;      Totals:         0      10       0       0
  6393 ;;Total ram usage:       10 bytes
  6394 ;; Hardware stack levels used:    1
  6395 ;; Hardware stack levels required when called:    3
  6396 ;; This function calls:
  6397 ;;		___lwdiv
  6398 ;;		_getLight_LoadGO
  6399 ;;		_getLight_Load_Status
  6400 ;;		_getMain_All_Error_Status
  6401 ;;		_getMain_All_LightsStatus
  6402 ;;		_getMain_Lights_Count
  6403 ;;		_setLoad_AH_AL_Restore
  6404 ;; This function is called by:
  6405 ;;		_main
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           
  6410                           ;psect for function _Load_Main
  6411  002E                     _Load_Main:	
  6412                           
  6413                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  6414                           
  6415                           ;incstack = 0
  6416                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6417  002E  3000               	movlw	0
  6418  002F  158A  2468  118A   	fcall	_getMain_All_Error_Status
  6419  0032  1283               	bcf	3,5	;RP0=0, select bank0
  6420  0033  1303               	bcf	3,6	;RP1=0, select bank0
  6421  0034  00E1               	movwf	??_Load_Main
  6422  0035  0861               	movf	??_Load_Main,w
  6423  0036  00E3               	movwf	Load_Main@error
  6424                           
  6425                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
  6426  0037  01E7               	clrf	Load_Main@Load_RunStatus
  6427  0038  01E6               	clrf	Load_Main@ErrorCountValue
  6428  0039  01E8               	clrf	Load_Main@LightsCount
  6429                           
  6430                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  6431  003A  1683               	bsf	3,5	;RP0=1, select bank1
  6432  003B  1303               	bcf	3,6	;RP1=0, select bank1
  6433  003C  1C4A               	btfss	_Load^(0+128),0
  6434  003D  2A0A               	goto	l838
  6435                           
  6436                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
  6437  003E  158A  2160  118A   	fcall	_getMain_All_LightsStatus
  6438  0041  3800               	iorlw	0
  6439  0042  1D03               	skipz
  6440  0043  2847               	goto	l6980
  6441                           
  6442                           ;OverLoad_B1.c: 45: Load.GO = 0;
  6443  0044  1683               	bsf	3,5	;RP0=1, select bank1
  6444  0045  1303               	bcf	3,6	;RP1=0, select bank1
  6445  0046  2866               	goto	l6996
  6446  0047                     l6980:	
  6447                           ;OverLoad_B1.c: 46: } else {
  6448                           
  6449                           
  6450                           ;OverLoad_B1.c: 69: if (error == 0) {
  6451  0047  1283               	bcf	3,5	;RP0=0, select bank0
  6452  0048  1303               	bcf	3,6	;RP1=0, select bank0
  6453  0049  08E3               	movf	Load_Main@error,f
  6454  004A  1D03               	skipz
  6455  004B  2863               	goto	l841
  6456                           
  6457                           ;OverLoad_B1.c: 70: Load.GO = 1;
  6458  004C  1683               	bsf	3,5	;RP0=1, select bank1
  6459  004D  1303               	bcf	3,6	;RP1=0, select bank1
  6460  004E  14CA               	bsf	_Load^(0+128),1
  6461                           
  6462                           ;OverLoad_B1.c: 72: if (getLight_LoadGO() == 1) {
  6463  004F  158A  20A6  118A   	fcall	_getLight_LoadGO
  6464  0052  3A01               	xorlw	1
  6465  0053  1D03               	skipz
  6466  0054  285D               	goto	l842
  6467                           
  6468                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  6469  0055  1683               	bsf	3,5	;RP0=1, select bank1
  6470  0056  1303               	bcf	3,6	;RP1=0, select bank1
  6471  0057  1DCA               	btfss	_Load^(0+128),3
  6472  0058  1BCA               	btfsc	_Load^(0+128),7
  6473  0059  2867               	goto	l840
  6474                           
  6475                           ;OverLoad_B1.c: 74: Load.Run = 1;
  6476  005A  15CA               	bsf	_Load^(0+128),3
  6477                           
  6478                           ;OverLoad_B1.c: 75: Load.Count = 0;
  6479  005B  01E3               	clrf	(_Load^(0+128)+25)
  6480                           
  6481                           ;OverLoad_B1.c: 76: }
  6482                           ;OverLoad_B1.c: 77: } else {
  6483  005C  2867               	goto	l840
  6484  005D                     l842:	
  6485                           
  6486                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  6487  005D  1683               	bsf	3,5	;RP0=1, select bank1
  6488  005E  1303               	bcf	3,6	;RP1=0, select bank1
  6489  005F  1FCA               	btfss	_Load^(0+128),7
  6490  0060  2867               	goto	l840
  6491                           
  6492                           ;OverLoad_B1.c: 79: Load.OK = 0;
  6493  0061  13CA               	bcf	_Load^(0+128),7
  6494                           
  6495                           ;OverLoad_B1.c: 80: }
  6496                           ;OverLoad_B1.c: 81: }
  6497                           ;OverLoad_B1.c: 82: } else {
  6498  0062  2867               	goto	l840
  6499  0063                     l841:	
  6500                           
  6501                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  6502  0063  1683               	bsf	3,5	;RP0=1, select bank1
  6503  0064  1303               	bcf	3,6	;RP1=0, select bank1
  6504  0065  18CA               	btfsc	_Load^(0+128),1
  6505  0066                     l6996:	
  6506                           
  6507                           ;OverLoad_B1.c: 84: Load.GO = 0;
  6508  0066  10CA               	bcf	_Load^(0+128),1
  6509  0067                     l840:	
  6510                           
  6511                           ;OverLoad_B1.c: 85: }
  6512                           ;OverLoad_B1.c: 86: }
  6513                           ;OverLoad_B1.c: 88: }
  6514                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  6515  0067  1CCA               	btfss	_Load^(0+128),1
  6516  0068  29E3               	goto	l848
  6517                           
  6518                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  6519  0069  154A               	bsf	_Load^(0+128),2
  6520                           
  6521                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  6522  006A  1E4A               	btfss	_Load^(0+128),4
  6523  006B  29E1               	goto	l849
  6524                           
  6525                           ;OverLoad_B1.c: 95: Load.Time++;
  6526  006C  3001               	movlw	1
  6527  006D  07CB               	addwf	(_Load^(0+128)+1),f
  6528  006E  1803               	skipnc
  6529  006F  0ACC               	incf	((_Load+1)^(0+128)+1),f
  6530  0070  3000               	movlw	0
  6531  0071  07CC               	addwf	((_Load+1)^(0+128)+1),f
  6532                           
  6533                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
  6534  0072  3000               	movlw	0
  6535  0073  024C               	subwf	((_Load+1)^(0+128)+1),w
  6536  0074  3002               	movlw	2
  6537  0075  1903               	skipnz
  6538  0076  024B               	subwf	(_Load^(0+128)+1),w
  6539  0077  1C03               	skipc
  6540  0078  0008               	return
  6541                           
  6542                           ;OverLoad_B1.c: 97: Load.Time = 0;
  6543  0079  01CB               	clrf	(_Load^(0+128)+1)
  6544  007A  01CC               	clrf	((_Load+1)^(0+128)+1)
  6545                           
  6546                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  6547  007B  124A               	bcf	_Load^(0+128),4
  6548                           
  6549                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  6550  007C  3001               	movlw	1
  6551  007D  1283               	bcf	3,5	;RP0=0, select bank0
  6552  007E  1303               	bcf	3,6	;RP1=0, select bank0
  6553  007F  00E9               	movwf	Load_Main@i
  6554  0080  3000               	movlw	0
  6555  0081  00EA               	movwf	Load_Main@i+1
  6556  0082  086A               	movf	Load_Main@i+1,w
  6557  0083  3A80               	xorlw	128
  6558  0084  00FF               	movwf	127
  6559  0085  3080               	movlw	128
  6560  0086  027F               	subwf	127,w
  6561  0087  1D03               	skipz
  6562  0088  288B               	goto	u9335
  6563  0089  3004               	movlw	4
  6564  008A  0269               	subwf	Load_Main@i,w
  6565  008B                     u9335:	
  6566  008B  1803               	btfsc	3,0
  6567  008C  28C9               	goto	l7018
  6568  008D                     l7012:	
  6569                           
  6570                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  6571  008D  1283               	bcf	3,5	;RP0=0, select bank0
  6572  008E  1303               	bcf	3,6	;RP1=0, select bank0
  6573  008F  0869               	movf	Load_Main@i,w
  6574  0090  3ED4               	addlw	(_Load+10)& (0+255)
  6575  0091  0084               	movwf	4
  6576  0092  1383               	bcf	3,7	;select IRP bank1
  6577  0093  0800               	movf	0,w
  6578  0094  00E1               	movwf	??_Load_Main
  6579  0095  01E2               	clrf	??_Load_Main+1
  6580  0096  0861               	movf	??_Load_Main,w
  6581  0097  1683               	bsf	3,5	;RP0=1, select bank1
  6582  0098  1303               	bcf	3,6	;RP1=0, select bank1
  6583  0099  07CF               	addwf	(_Load^(0+128)+5),f
  6584  009A  1803               	skipnc
  6585  009B  0AD0               	incf	((_Load+1)^(0+128)+5),f
  6586  009C  1283               	bcf	3,5	;RP0=0, select bank0
  6587  009D  1303               	bcf	3,6	;RP1=0, select bank0
  6588  009E  0862               	movf	??_Load_Main+1,w
  6589  009F  1683               	bsf	3,5	;RP0=1, select bank1
  6590  00A0  1303               	bcf	3,6	;RP1=0, select bank1
  6591  00A1  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6592                           
  6593                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  6594  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  6595  00A3  1303               	bcf	3,6	;RP1=0, select bank0
  6596  00A4  0869               	movf	Load_Main@i,w
  6597  00A5  3ED9               	addlw	(_Load+15)& (0+255)
  6598  00A6  0084               	movwf	4
  6599  00A7  0800               	movf	0,w
  6600  00A8  00E1               	movwf	??_Load_Main
  6601  00A9  01E2               	clrf	??_Load_Main+1
  6602  00AA  0861               	movf	??_Load_Main,w
  6603  00AB  1683               	bsf	3,5	;RP0=1, select bank1
  6604  00AC  1303               	bcf	3,6	;RP1=0, select bank1
  6605  00AD  07D1               	addwf	(_Load^(0+128)+7),f
  6606  00AE  1803               	skipnc
  6607  00AF  0AD2               	incf	((_Load+1)^(0+128)+7),f
  6608  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  6609  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  6610  00B2  0862               	movf	??_Load_Main+1,w
  6611  00B3  1683               	bsf	3,5	;RP0=1, select bank1
  6612  00B4  1303               	bcf	3,6	;RP1=0, select bank1
  6613  00B5  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6614  00B6  3001               	movlw	1
  6615  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  6616  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  6617  00B9  07E9               	addwf	Load_Main@i,f
  6618  00BA  1803               	skipnc
  6619  00BB  0AEA               	incf	Load_Main@i+1,f
  6620  00BC  3000               	movlw	0
  6621  00BD  07EA               	addwf	Load_Main@i+1,f
  6622  00BE  086A               	movf	Load_Main@i+1,w
  6623  00BF  3A80               	xorlw	128
  6624  00C0  00FF               	movwf	127
  6625  00C1  3080               	movlw	128
  6626  00C2  027F               	subwf	127,w
  6627  00C3  1D03               	skipz
  6628  00C4  28C7               	goto	u9345
  6629  00C5  3004               	movlw	4
  6630  00C6  0269               	subwf	Load_Main@i,w
  6631  00C7                     u9345:	
  6632  00C7  1C03               	skipc
  6633  00C8  288D               	goto	l7012
  6634  00C9                     l7018:	
  6635                           
  6636                           ;OverLoad_B1.c: 103: }
  6637                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  6638  00C9  3003               	movlw	3
  6639  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  6640  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  6641  00CC  00DA               	movwf	___lwdiv@divisor
  6642  00CD  3000               	movlw	0
  6643  00CE  00DB               	movwf	___lwdiv@divisor+1
  6644  00CF  1683               	bsf	3,5	;RP0=1, select bank1
  6645  00D0  1303               	bcf	3,6	;RP1=0, select bank1
  6646  00D1  0850               	movf	((_Load+1)^(0+128)+5),w
  6647  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  6648  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  6649  00D4  01DD               	clrf	___lwdiv@dividend+1
  6650  00D5  07DD               	addwf	___lwdiv@dividend+1,f
  6651  00D6  1683               	bsf	3,5	;RP0=1, select bank1
  6652  00D7  1303               	bcf	3,6	;RP1=0, select bank1
  6653  00D8  084F               	movf	(_Load^(0+128)+5),w
  6654  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6655  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6656  00DB  01DC               	clrf	___lwdiv@dividend
  6657  00DC  07DC               	addwf	___lwdiv@dividend,f
  6658  00DD  158A  24A6  118A   	fcall	___lwdiv
  6659  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  6660  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  6661  00E2  085B               	movf	?___lwdiv+1,w
  6662  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  6663  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  6664  00E5  01D0               	clrf	((_Load+1)^(0+128)+5)
  6665  00E6  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6666  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  6667  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  6668  00E9  085A               	movf	?___lwdiv,w
  6669  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  6670  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  6671  00EC  01CF               	clrf	(_Load^(0+128)+5)
  6672  00ED  07CF               	addwf	(_Load^(0+128)+5),f
  6673                           
  6674                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  6675  00EE  3003               	movlw	3
  6676  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  6677  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  6678  00F1  00DA               	movwf	___lwdiv@divisor
  6679  00F2  3000               	movlw	0
  6680  00F3  00DB               	movwf	___lwdiv@divisor+1
  6681  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  6682  00F5  1303               	bcf	3,6	;RP1=0, select bank1
  6683  00F6  0852               	movf	((_Load+1)^(0+128)+7),w
  6684  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6685  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6686  00F9  01DD               	clrf	___lwdiv@dividend+1
  6687  00FA  07DD               	addwf	___lwdiv@dividend+1,f
  6688  00FB  1683               	bsf	3,5	;RP0=1, select bank1
  6689  00FC  1303               	bcf	3,6	;RP1=0, select bank1
  6690  00FD  0851               	movf	(_Load^(0+128)+7),w
  6691  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  6692  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  6693  0100  01DC               	clrf	___lwdiv@dividend
  6694  0101  07DC               	addwf	___lwdiv@dividend,f
  6695  0102  158A  24A6  118A   	fcall	___lwdiv
  6696  0105  1283               	bcf	3,5	;RP0=0, select bank0
  6697  0106  1303               	bcf	3,6	;RP1=0, select bank0
  6698  0107  085B               	movf	?___lwdiv+1,w
  6699  0108  1683               	bsf	3,5	;RP0=1, select bank1
  6700  0109  1303               	bcf	3,6	;RP1=0, select bank1
  6701  010A  01D2               	clrf	((_Load+1)^(0+128)+7)
  6702  010B  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6703  010C  1283               	bcf	3,5	;RP0=0, select bank0
  6704  010D  1303               	bcf	3,6	;RP1=0, select bank0
  6705  010E  085A               	movf	?___lwdiv,w
  6706  010F  1683               	bsf	3,5	;RP0=1, select bank1
  6707  0110  1303               	bcf	3,6	;RP1=0, select bank1
  6708  0111  01D1               	clrf	(_Load^(0+128)+7)
  6709  0112  07D1               	addwf	(_Load^(0+128)+7),f
  6710                           
  6711                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  6712  0113  158A  2250  118A   	fcall	_setLoad_AH_AL_Restore
  6713                           
  6714                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
  6715  0116  1683               	bsf	3,5	;RP0=1, select bank1
  6716  0117  1303               	bcf	3,6	;RP1=0, select bank1
  6717  0118  0852               	movf	((_Load+1)^(0+128)+7),w
  6718  0119  0250               	subwf	((_Load+1)^(0+128)+5),w
  6719  011A  1D03               	skipz
  6720  011B  291E               	goto	u9355
  6721  011C  0851               	movf	(_Load^(0+128)+7),w
  6722  011D  024F               	subwf	(_Load^(0+128)+5),w
  6723  011E                     u9355:	
  6724  011E  1C03               	skipc
  6725  011F  0008               	return
  6726                           
  6727                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  6728  0120  0351               	decf	(_Load^(0+128)+7),w
  6729  0121  3AFF               	xorlw	255
  6730  0122  074F               	addwf	(_Load^(0+128)+5),w
  6731  0123  1283               	bcf	3,5	;RP0=0, select bank0
  6732  0124  1303               	bcf	3,6	;RP1=0, select bank0
  6733  0125  00E1               	movwf	??_Load_Main
  6734  0126  0861               	movf	??_Load_Main,w
  6735  0127  1683               	bsf	3,5	;RP0=1, select bank1
  6736  0128  1303               	bcf	3,6	;RP1=0, select bank1
  6737  0129  00DE               	movwf	(_Load^(0+128)+20)
  6738                           
  6739                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  6740  012A  01CF               	clrf	(_Load^(0+128)+5)
  6741  012B  01D0               	clrf	((_Load+1)^(0+128)+5)
  6742                           
  6743                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  6744  012C  01D1               	clrf	(_Load^(0+128)+7)
  6745  012D  01D2               	clrf	((_Load+1)^(0+128)+7)
  6746                           
  6747                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  6748  012E  1DCA               	btfss	_Load^(0+128),3
  6749  012F  298D               	goto	l854
  6750                           
  6751                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  6752  0130  3002               	movlw	2
  6753  0131  0263               	subwf	(_Load^(0+128)+25),w
  6754  0132  1803               	skipnc
  6755  0133  298D               	goto	l854
  6756                           
  6757                           ;OverLoad_B1.c: 115: Load.Count++;
  6758  0134  3001               	movlw	1
  6759  0135  1283               	bcf	3,5	;RP0=0, select bank0
  6760  0136  1303               	bcf	3,6	;RP1=0, select bank0
  6761  0137  00E1               	movwf	??_Load_Main
  6762  0138  0861               	movf	??_Load_Main,w
  6763  0139  1683               	bsf	3,5	;RP0=1, select bank1
  6764  013A  1303               	bcf	3,6	;RP1=0, select bank1
  6765  013B  07E3               	addwf	(_Load^(0+128)+25),f
  6766                           
  6767                           ;OverLoad_B1.c: 120: Load_RunStatus = getLight_Load_Status();
  6768  013C  158A  20AC  118A   	fcall	_getLight_Load_Status
  6769  013F  1283               	bcf	3,5	;RP0=0, select bank0
  6770  0140  1303               	bcf	3,6	;RP1=0, select bank0
  6771  0141  00E1               	movwf	??_Load_Main
  6772  0142  0861               	movf	??_Load_Main,w
  6773  0143  00E7               	movwf	Load_Main@Load_RunStatus
  6774                           
  6775                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
  6776  0144  158A  2132  118A   	fcall	_getMain_Lights_Count
  6777  0147  1283               	bcf	3,5	;RP0=0, select bank0
  6778  0148  1303               	bcf	3,6	;RP1=0, select bank0
  6779  0149  00E1               	movwf	??_Load_Main
  6780  014A  0861               	movf	??_Load_Main,w
  6781  014B  00E8               	movwf	Load_Main@LightsCount
  6782                           
  6783                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
  6784  014C  1683               	bsf	3,5	;RP0=1, select bank1
  6785  014D  1303               	bcf	3,6	;RP1=0, select bank1
  6786  014E  0863               	movf	(_Load^(0+128)+25),w
  6787  014F  3A01               	xorlw	1
  6788  0150  1D03               	skipz
  6789  0151  2954               	goto	l7044
  6790                           
  6791                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(20*2.5);
  6792  0152  3032               	movlw	50
  6793  0153  2961               	goto	L12
  6794  0154                     l7044:	
  6795                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
  6796                           
  6797  0154  0863               	movf	(_Load^(0+128)+25),w
  6798  0155  3A02               	xorlw	2
  6799  0156  1D03               	skipz
  6800  0157  298D               	goto	l854
  6801                           
  6802                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
  6803  0158  1283               	bcf	3,5	;RP0=0, select bank0
  6804  0159  1303               	bcf	3,6	;RP1=0, select bank0
  6805  015A  0868               	movf	Load_Main@LightsCount,w
  6806  015B  3A01               	xorlw	1
  6807  015C  1D03               	skipz
  6808  015D  2964               	goto	l7050
  6809                           
  6810                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(3.5*2.5);
  6811  015E  3008               	movlw	8
  6812  015F  1683               	bsf	3,5	;RP0=1, select bank1
  6813  0160  1303               	bcf	3,6	;RP1=0, select bank1
  6814  0161                     L12:	
  6815  0161  00E1               	movwf	(_Load^(0+128)+23)
  6816  0162  3000               	movlw	0
  6817  0163  298C               	goto	L13
  6818  0164                     l7050:	
  6819                           ;OverLoad_B1.c: 130: } else {
  6820                           
  6821                           
  6822                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
  6823  0164  1283               	bcf	3,5	;RP0=0, select bank0
  6824  0165  08E7               	movf	Load_Main@Load_RunStatus,f
  6825  0166  1D03               	skipz
  6826  0167  297F               	goto	l7054
  6827                           
  6828                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(3.5*2.5) * LightsCount;
  6829  0168  0868               	movf	Load_Main@LightsCount,w
  6830  0169  00E1               	movwf	??_Load_Main
  6831  016A  01E2               	clrf	??_Load_Main+1
  6832  016B  1003               	clrc
  6833  016C  0DE1               	rlf	??_Load_Main,f
  6834  016D  0DE2               	rlf	??_Load_Main+1,f
  6835  016E  1003               	clrc
  6836  016F  0DE1               	rlf	??_Load_Main,f
  6837  0170  0DE2               	rlf	??_Load_Main+1,f
  6838  0171  1003               	clrc
  6839  0172  0DE1               	rlf	??_Load_Main,f
  6840  0173  0DE2               	rlf	??_Load_Main+1,f
  6841  0174  0861               	movf	??_Load_Main,w
  6842  0175  1683               	bsf	3,5	;RP0=1, select bank1
  6843  0176  1303               	bcf	3,6	;RP1=0, select bank1
  6844  0177  00E1               	movwf	(_Load^(0+128)+23)
  6845  0178  1283               	bcf	3,5	;RP0=0, select bank0
  6846  0179  1303               	bcf	3,6	;RP1=0, select bank0
  6847  017A  0862               	movf	??_Load_Main+1,w
  6848  017B  1683               	bsf	3,5	;RP0=1, select bank1
  6849  017C  1303               	bcf	3,6	;RP1=0, select bank1
  6850  017D  00E2               	movwf	((_Load+1)^(0+128)+23)
  6851                           
  6852                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
  6853  017E  298D               	goto	l854
  6854  017F                     l7054:	
  6855  017F  1283               	bcf	3,5	;RP0=0, select bank0
  6856  0180  0867               	movf	Load_Main@Load_RunStatus,w
  6857  0181  3A01               	xorlw	1
  6858  0182  1D03               	skipz
  6859  0183  298D               	goto	l854
  6860                           
  6861                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(3.5*2.5) + Load.TotalLoad;
  6862  0184  1683               	bsf	3,5	;RP0=1, select bank1
  6863  0185  1303               	bcf	3,6	;RP1=0, select bank1
  6864  0186  0853               	movf	(_Load^(0+128)+9),w
  6865  0187  3E08               	addlw	8
  6866  0188  00E1               	movwf	(_Load^(0+128)+23)
  6867  0189  3000               	movlw	0
  6868  018A  1803               	skipnc
  6869  018B  3001               	movlw	1
  6870  018C                     L13:	
  6871  018C  00E2               	movwf	(_Load^(0+128)+24)
  6872  018D                     l854:	
  6873                           
  6874                           ;OverLoad_B1.c: 135: }
  6875                           ;OverLoad_B1.c: 136: }
  6876                           ;OverLoad_B1.c: 137: }
  6877                           ;OverLoad_B1.c: 138: }
  6878                           ;OverLoad_B1.c: 139: }
  6879                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
  6880  018D  1683               	bsf	3,5	;RP0=1, select bank1
  6881  018E  1303               	bcf	3,6	;RP1=0, select bank1
  6882  018F  085E               	movf	(_Load^(0+128)+20),w
  6883  0190  1283               	bcf	3,5	;RP0=0, select bank0
  6884  0191  1303               	bcf	3,6	;RP1=0, select bank0
  6885  0192  00E1               	movwf	??_Load_Main
  6886  0193  01E2               	clrf	??_Load_Main+1
  6887  0194  1683               	bsf	3,5	;RP0=1, select bank1
  6888  0195  1303               	bcf	3,6	;RP1=0, select bank1
  6889  0196  0862               	movf	((_Load+1)^(0+128)+23),w
  6890  0197  1283               	bcf	3,5	;RP0=0, select bank0
  6891  0198  1303               	bcf	3,6	;RP1=0, select bank0
  6892  0199  0262               	subwf	??_Load_Main+1,w
  6893  019A  1D03               	skipz
  6894  019B  29A2               	goto	u9435
  6895  019C  1683               	bsf	3,5	;RP0=1, select bank1
  6896  019D  1303               	bcf	3,6	;RP1=0, select bank1
  6897  019E  0861               	movf	(_Load^(0+128)+23),w
  6898  019F  1283               	bcf	3,5	;RP0=0, select bank0
  6899  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  6900  01A1  0261               	subwf	??_Load_Main,w
  6901  01A2                     u9435:	
  6902  01A2  1C03               	skipc
  6903  01A3  29C3               	goto	l7072
  6904                           
  6905                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6906  01A4  0868               	movf	Load_Main@LightsCount,w
  6907  01A5  3A01               	xorlw	1
  6908  01A6  1903               	skipnz
  6909  01A7  29AA               	goto	l7062
  6910  01A8  3003               	movlw	3
  6911  01A9  29AB               	goto	L14
  6912  01AA                     l7062:	
  6913  01AA  3002               	movlw	2
  6914  01AB                     L14:	
  6915  01AB  00E4               	movwf	_Load_Main$2699
  6916  01AC  3000               	movlw	0
  6917  01AD  00E5               	movwf	_Load_Main$2699+1
  6918  01AE  0864               	movf	_Load_Main$2699,w
  6919  01AF  00E1               	movwf	??_Load_Main
  6920  01B0  0861               	movf	??_Load_Main,w
  6921  01B1  00E6               	movwf	Load_Main@ErrorCountValue
  6922                           
  6923                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
  6924  01B2  3001               	movlw	1
  6925  01B3  00E1               	movwf	??_Load_Main
  6926  01B4  0861               	movf	??_Load_Main,w
  6927  01B5  1683               	bsf	3,5	;RP0=1, select bank1
  6928  01B6  1303               	bcf	3,6	;RP1=0, select bank1
  6929  01B7  07E4               	addwf	(_Load^(0+128)+26),f
  6930                           
  6931                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
  6932  01B8  0864               	movf	(_Load^(0+128)+26),w
  6933  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  6934  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  6935  01BB  0266               	subwf	Load_Main@ErrorCountValue,w
  6936  01BC  1803               	skipnc
  6937  01BD  0008               	return
  6938                           
  6939                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
  6940  01BE  1683               	bsf	3,5	;RP0=1, select bank1
  6941  01BF  1303               	bcf	3,6	;RP1=0, select bank1
  6942  01C0  01E4               	clrf	(_Load^(0+128)+26)
  6943                           
  6944                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
  6945  01C1  16CA               	bsf	_Load^(0+128),5
  6946                           
  6947                           ;OverLoad_B1.c: 168: }
  6948                           ;OverLoad_B1.c: 169: } else {
  6949  01C2  0008               	return
  6950  01C3                     l7072:	
  6951                           
  6952                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
  6953  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  6954  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  6955  01C5  01E4               	clrf	(_Load^(0+128)+26)
  6956                           
  6957                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
  6958  01C6  1DCA               	btfss	_Load^(0+128),3
  6959  01C7  0008               	return
  6960                           
  6961                           ;OverLoad_B1.c: 172: Load.SafeCount++;
  6962  01C8  3001               	movlw	1
  6963  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  6964  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  6965  01CB  00E1               	movwf	??_Load_Main
  6966  01CC  0861               	movf	??_Load_Main,w
  6967  01CD  1683               	bsf	3,5	;RP0=1, select bank1
  6968  01CE  1303               	bcf	3,6	;RP1=0, select bank1
  6969  01CF  07E5               	addwf	(_Load^(0+128)+27),f
  6970                           
  6971                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
  6972  01D0  3003               	movlw	3
  6973  01D1  0265               	subwf	(_Load^(0+128)+27),w
  6974  01D2  1C03               	skipc
  6975  01D3  0008               	return
  6976                           
  6977                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
  6978  01D4  01E5               	clrf	(_Load^(0+128)+27)
  6979                           
  6980                           ;OverLoad_B1.c: 175: Load.OK = 1;
  6981  01D5  17CA               	bsf	_Load^(0+128),7
  6982                           
  6983                           ;OverLoad_B1.c: 176: Load.Run = 0;
  6984  01D6  11CA               	bcf	_Load^(0+128),3
  6985                           
  6986                           ;OverLoad_B1.c: 177: Load.Count = 0;
  6987  01D7  01E3               	clrf	(_Load^(0+128)+25)
  6988                           
  6989                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
  6990  01D8  085E               	movf	(_Load^(0+128)+20),w
  6991  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  6992  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  6993  01DB  00E1               	movwf	??_Load_Main
  6994  01DC  0861               	movf	??_Load_Main,w
  6995  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  6996  01DE  1303               	bcf	3,6	;RP1=0, select bank1
  6997  01DF  00D3               	movwf	(_Load^(0+128)+9)
  6998                           
  6999                           ;OverLoad_B1.c: 182: }
  7000                           ;OverLoad_B1.c: 183: }
  7001                           ;OverLoad_B1.c: 206: }
  7002                           ;OverLoad_B1.c: 207: }
  7003                           ;OverLoad_B1.c: 208: }
  7004                           ;OverLoad_B1.c: 209: } else {
  7005  01E0  0008               	return
  7006  01E1                     l849:	
  7007                           
  7008                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
  7009  01E1  164A               	bsf	_Load^(0+128),4
  7010                           
  7011                           ;OverLoad_B1.c: 211: }
  7012                           ;OverLoad_B1.c: 212: } else {
  7013  01E2  0008               	return
  7014  01E3                     l848:	
  7015                           
  7016                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
  7017  01E3  1D4A               	btfss	_Load^(0+128),2
  7018  01E4  29F7               	goto	l7108
  7019                           
  7020                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
  7021  01E5  114A               	bcf	_Load^(0+128),2
  7022                           
  7023                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
  7024  01E6  124A               	bcf	_Load^(0+128),4
  7025                           
  7026                           ;OverLoad_B1.c: 218: Load.Time = 0;
  7027  01E7  01CB               	clrf	(_Load^(0+128)+1)
  7028  01E8  01CC               	clrf	((_Load+1)^(0+128)+1)
  7029                           
  7030                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
  7031  01E9  158A  2250  118A   	fcall	_setLoad_AH_AL_Restore
  7032                           
  7033                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
  7034  01EC  1683               	bsf	3,5	;RP0=1, select bank1
  7035  01ED  1303               	bcf	3,6	;RP1=0, select bank1
  7036  01EE  01E4               	clrf	(_Load^(0+128)+26)
  7037                           
  7038                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
  7039  01EF  01E5               	clrf	(_Load^(0+128)+27)
  7040                           
  7041                           ;OverLoad_B1.c: 224: Load.ADH = 0;
  7042  01F0  01CF               	clrf	(_Load^(0+128)+5)
  7043  01F1  01D0               	clrf	((_Load+1)^(0+128)+5)
  7044                           
  7045                           ;OverLoad_B1.c: 225: Load.ADL = 0;
  7046  01F2  01D1               	clrf	(_Load^(0+128)+7)
  7047  01F3  01D2               	clrf	((_Load+1)^(0+128)+7)
  7048                           
  7049                           ;OverLoad_B1.c: 231: Load.Run = 0;
  7050  01F4  11CA               	bcf	_Load^(0+128),3
  7051                           
  7052                           ;OverLoad_B1.c: 232: Load.Count = 0;
  7053  01F5  01E3               	clrf	(_Load^(0+128)+25)
  7054                           
  7055                           ;OverLoad_B1.c: 233: Load.OK = 0;
  7056  01F6  13CA               	bcf	_Load^(0+128),7
  7057  01F7                     l7108:	
  7058                           
  7059                           ;OverLoad_B1.c: 255: }
  7060                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
  7061  01F7  1ECA               	btfss	_Load^(0+128),5
  7062  01F8  0008               	return
  7063                           
  7064                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
  7065  01F9  3001               	movlw	1
  7066  01FA  07CD               	addwf	(_Load^(0+128)+3),f
  7067  01FB  1803               	skipnc
  7068  01FC  0ACE               	incf	((_Load+1)^(0+128)+3),f
  7069  01FD  3000               	movlw	0
  7070  01FE  07CE               	addwf	((_Load+1)^(0+128)+3),f
  7071                           
  7072                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
  7073  01FF  3001               	movlw	1
  7074  0200  024E               	subwf	((_Load+1)^(0+128)+3),w
  7075  0201  30F4               	movlw	244
  7076  0202  1903               	skipnz
  7077  0203  024D               	subwf	(_Load^(0+128)+3),w
  7078  0204  1C03               	skipc
  7079  0205  0008               	return
  7080                           
  7081                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
  7082  0206  01CD               	clrf	(_Load^(0+128)+3)
  7083  0207  01CE               	clrf	((_Load+1)^(0+128)+3)
  7084                           
  7085                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
  7086  0208  12CA               	bcf	_Load^(0+128),5
  7087                           
  7088                           ;OverLoad_B1.c: 261: }
  7089                           ;OverLoad_B1.c: 262: }
  7090                           ;OverLoad_B1.c: 263: }
  7091                           ;OverLoad_B1.c: 264: } else {
  7092  0209  0008               	return
  7093  020A                     l838:	
  7094                           
  7095                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
  7096  020A  1283               	bcf	3,5	;RP0=0, select bank0
  7097  020B  1303               	bcf	3,6	;RP1=0, select bank0
  7098  020C  1C31               	btfss	_myMain,0
  7099  020D  0008               	return
  7100                           
  7101                           ;OverLoad_B1.c: 266: Load.Enable = 1;
  7102  020E  1683               	bsf	3,5	;RP0=1, select bank1
  7103  020F  1303               	bcf	3,6	;RP1=0, select bank1
  7104  0210  144A               	bsf	_Load^(0+128),0
  7105  0211  0008               	return
  7106  0212                     __end_of_Load_Main:	
  7107                           
  7108                           	psect	text36
  7109  0932                     __ptext36:	
  7110 ;; *************** function _getMain_Lights_Count *****************
  7111 ;; Defined at:
  7112 ;;		line 459 in file "../src/Main_B1.c"
  7113 ;; Parameters:    Size  Location     Type
  7114 ;;		None
  7115 ;; Auto vars:     Size  Location     Type
  7116 ;;  status2         1    2[BANK0 ] unsigned char 
  7117 ;;  status1         1    1[BANK0 ] unsigned char 
  7118 ;;  count           1    0[BANK0 ] unsigned char 
  7119 ;; Return value:  Size  Location     Type
  7120 ;;                  1    wreg      unsigned char 
  7121 ;; Registers used:
  7122 ;;		wreg, status,2, status,0
  7123 ;; Tracked objects:
  7124 ;;		On entry : 0/0
  7125 ;;		On exit  : 0/0
  7126 ;;		Unchanged: 0/0
  7127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7128 ;;      Params:         0       0       0       0
  7129 ;;      Locals:         0       3       0       0
  7130 ;;      Temps:          0       0       0       0
  7131 ;;      Totals:         0       3       0       0
  7132 ;;Total ram usage:        3 bytes
  7133 ;; Hardware stack levels used:    1
  7134 ;; Hardware stack levels required when called:    2
  7135 ;; This function calls:
  7136 ;;		Nothing
  7137 ;; This function is called by:
  7138 ;;		_Load_Main
  7139 ;; This function uses a non-reentrant model
  7140 ;;
  7141                           
  7142                           
  7143                           ;psect for function _getMain_Lights_Count
  7144  0932                     _getMain_Lights_Count:	
  7145                           
  7146                           ;Main_B1.c: 460: char count = 0;
  7147                           
  7148                           ;incstack = 0
  7149                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  7150  0932  1283               	bcf	3,5	;RP0=0, select bank0
  7151  0933  1303               	bcf	3,6	;RP1=0, select bank0
  7152  0934  01DA               	clrf	getMain_Lights_Count@count
  7153                           
  7154                           ;Main_B1.c: 476: char status1 = Lights1.Status == 1 ? 1 : 0;
  7155  0935  3000               	movlw	0
  7156  0936  1948               	btfsc	_Lights1,2
  7157  0937  3001               	movlw	1
  7158  0938  00DB               	movwf	getMain_Lights_Count@status1
  7159                           
  7160                           ;Main_B1.c: 479: char status2 = Lights2.Status == 1 ? 1 : 0;
  7161  0939  3000               	movlw	0
  7162  093A  194D               	btfsc	_Lights2,2
  7163  093B  3001               	movlw	1
  7164  093C  00DC               	movwf	getMain_Lights_Count@status2
  7165                           
  7166                           ;Main_B1.c: 490: return count = (status1 + status2);
  7167  093D  085C               	movf	getMain_Lights_Count@status2,w
  7168  093E  075B               	addwf	getMain_Lights_Count@status1,w
  7169  093F  00DA               	movwf	getMain_Lights_Count@count
  7170  0940  0008               	return
  7171  0941                     __end_of_getMain_Lights_Count:	
  7172                           
  7173                           	psect	text37
  7174  08AC                     __ptext37:	
  7175 ;; *************** function _getLight_Load_Status *****************
  7176 ;; Defined at:
  7177 ;;		line 405 in file "../src/TriacRelay_B1.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;		None
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;  loadstatus      1    4[COMMON] unsigned char 
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  1    wreg      unsigned char 
  7184 ;; Registers used:
  7185 ;;		wreg, status,2
  7186 ;; Tracked objects:
  7187 ;;		On entry : 0/0
  7188 ;;		On exit  : 0/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7191 ;;      Params:         0       0       0       0
  7192 ;;      Locals:         1       0       0       0
  7193 ;;      Temps:          0       0       0       0
  7194 ;;      Totals:         1       0       0       0
  7195 ;;Total ram usage:        1 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; Hardware stack levels required when called:    2
  7198 ;; This function calls:
  7199 ;;		Nothing
  7200 ;; This function is called by:
  7201 ;;		_Load_Main
  7202 ;; This function uses a non-reentrant model
  7203 ;;
  7204                           
  7205                           
  7206                           ;psect for function _getLight_Load_Status
  7207  08AC                     _getLight_Load_Status:	
  7208                           
  7209                           ;TriacRelay_B1.c: 406: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  7210                           
  7211                           ;incstack = 0
  7212                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  7213  08AC  3000               	movlw	0
  7214  08AD  18F3               	btfsc	_Light,1
  7215  08AE  3001               	movlw	1
  7216  08AF  00F9               	movwf	getLight_Load_Status@loadstatus
  7217                           
  7218                           ;TriacRelay_B1.c: 407: return loadstatus;
  7219  08B0  0879               	movf	getLight_Load_Status@loadstatus,w
  7220  08B1  0008               	return
  7221  08B2                     __end_of_getLight_Load_Status:	
  7222                           
  7223                           	psect	text38
  7224  08A6                     __ptext38:	
  7225 ;; *************** function _getLight_LoadGO *****************
  7226 ;; Defined at:
  7227 ;;		line 400 in file "../src/TriacRelay_B1.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;		None
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;  loadgo          1    4[COMMON] unsigned char 
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  1    wreg      unsigned char 
  7234 ;; Registers used:
  7235 ;;		wreg, status,2
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7241 ;;      Params:         0       0       0       0
  7242 ;;      Locals:         1       0       0       0
  7243 ;;      Temps:          0       0       0       0
  7244 ;;      Totals:         1       0       0       0
  7245 ;;Total ram usage:        1 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:    2
  7248 ;; This function calls:
  7249 ;;		Nothing
  7250 ;; This function is called by:
  7251 ;;		_Load_Main
  7252 ;; This function uses a non-reentrant model
  7253 ;;
  7254                           
  7255                           
  7256                           ;psect for function _getLight_LoadGO
  7257  08A6                     _getLight_LoadGO:	
  7258                           
  7259                           ;TriacRelay_B1.c: 401: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  7260                           
  7261                           ;incstack = 0
  7262                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  7263  08A6  3000               	movlw	0
  7264  08A7  1873               	btfsc	_Light,0
  7265  08A8  3001               	movlw	1
  7266  08A9  00F9               	movwf	getLight_LoadGO@loadgo
  7267                           
  7268                           ;TriacRelay_B1.c: 402: return loadgo;
  7269  08AA  0879               	movf	getLight_LoadGO@loadgo,w
  7270  08AB  0008               	return
  7271  08AC                     __end_of_getLight_LoadGO:	
  7272                           
  7273                           	psect	text39
  7274  0CA6                     __ptext39:	
  7275 ;; *************** function ___lwdiv *****************
  7276 ;; Defined at:
  7277 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  7278 ;; Parameters:    Size  Location     Type
  7279 ;;  divisor         2    0[BANK0 ] unsigned int 
  7280 ;;  dividend        2    2[BANK0 ] unsigned int 
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;  quotient        2    5[BANK0 ] unsigned int 
  7283 ;;  counter         1    4[BANK0 ] unsigned char 
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  2    0[BANK0 ] unsigned int 
  7286 ;; Registers used:
  7287 ;;		wreg, status,2, status,0
  7288 ;; Tracked objects:
  7289 ;;		On entry : 0/0
  7290 ;;		On exit  : 0/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7293 ;;      Params:         0       4       0       0
  7294 ;;      Locals:         0       3       0       0
  7295 ;;      Temps:          1       0       0       0
  7296 ;;      Totals:         1       7       0       0
  7297 ;;Total ram usage:        8 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; Hardware stack levels required when called:    2
  7300 ;; This function calls:
  7301 ;;		Nothing
  7302 ;; This function is called by:
  7303 ;;		_Load_Main
  7304 ;;		_getPIR_AD
  7305 ;; This function uses a non-reentrant model
  7306 ;;
  7307                           
  7308                           
  7309                           ;psect for function ___lwdiv
  7310  0CA6                     ___lwdiv:	
  7311                           
  7312                           ;incstack = 0
  7313                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7314  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  7315  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  7316  0CA8  01DF               	clrf	___lwdiv@quotient
  7317  0CA9  01E0               	clrf	___lwdiv@quotient+1
  7318  0CAA  085B               	movf	___lwdiv@divisor+1,w
  7319  0CAB  045A               	iorwf	___lwdiv@divisor,w
  7320  0CAC  1903               	skipnz
  7321  0CAD  2CDF               	goto	l5624
  7322  0CAE  01DE               	clrf	___lwdiv@counter
  7323  0CAF  0ADE               	incf	___lwdiv@counter,f
  7324  0CB0                     l5612:	
  7325  0CB0  1BDB               	btfsc	___lwdiv@divisor+1,7
  7326  0CB1  2CBE               	goto	l5614
  7327  0CB2  3001               	movlw	1
  7328  0CB3                     u6595:	
  7329  0CB3  1003               	clrc
  7330  0CB4  0DDA               	rlf	___lwdiv@divisor,f
  7331  0CB5  0DDB               	rlf	___lwdiv@divisor+1,f
  7332  0CB6  3EFF               	addlw	-1
  7333  0CB7  1D03               	skipz
  7334  0CB8  2CB3               	goto	u6595
  7335  0CB9  3001               	movlw	1
  7336  0CBA  00F9               	movwf	??___lwdiv
  7337  0CBB  0879               	movf	??___lwdiv,w
  7338  0CBC  07DE               	addwf	___lwdiv@counter,f
  7339  0CBD  2CB0               	goto	l5612
  7340  0CBE                     l5614:	
  7341  0CBE  3001               	movlw	1
  7342  0CBF                     u6615:	
  7343  0CBF  1003               	clrc
  7344  0CC0  0DDF               	rlf	___lwdiv@quotient,f
  7345  0CC1  0DE0               	rlf	___lwdiv@quotient+1,f
  7346  0CC2  3EFF               	addlw	-1
  7347  0CC3  1D03               	skipz
  7348  0CC4  2CBF               	goto	u6615
  7349  0CC5  085B               	movf	___lwdiv@divisor+1,w
  7350  0CC6  025D               	subwf	___lwdiv@dividend+1,w
  7351  0CC7  1D03               	skipz
  7352  0CC8  2CCB               	goto	u6625
  7353  0CC9  085A               	movf	___lwdiv@divisor,w
  7354  0CCA  025C               	subwf	___lwdiv@dividend,w
  7355  0CCB                     u6625:	
  7356  0CCB  1C03               	skipc
  7357  0CCC  2CD4               	goto	l5620
  7358  0CCD  085A               	movf	___lwdiv@divisor,w
  7359  0CCE  02DC               	subwf	___lwdiv@dividend,f
  7360  0CCF  085B               	movf	___lwdiv@divisor+1,w
  7361  0CD0  1C03               	skipc
  7362  0CD1  03DD               	decf	___lwdiv@dividend+1,f
  7363  0CD2  02DD               	subwf	___lwdiv@dividend+1,f
  7364  0CD3  145F               	bsf	___lwdiv@quotient,0
  7365  0CD4                     l5620:	
  7366  0CD4  3001               	movlw	1
  7367  0CD5                     u6635:	
  7368  0CD5  1003               	clrc
  7369  0CD6  0CDB               	rrf	___lwdiv@divisor+1,f
  7370  0CD7  0CDA               	rrf	___lwdiv@divisor,f
  7371  0CD8  3EFF               	addlw	-1
  7372  0CD9  1D03               	skipz
  7373  0CDA  2CD5               	goto	u6635
  7374  0CDB  3001               	movlw	1
  7375  0CDC  02DE               	subwf	___lwdiv@counter,f
  7376  0CDD  1D03               	btfss	3,2
  7377  0CDE  2CBE               	goto	l5614
  7378  0CDF                     l5624:	
  7379  0CDF  0860               	movf	___lwdiv@quotient+1,w
  7380  0CE0  01DB               	clrf	?___lwdiv+1
  7381  0CE1  07DB               	addwf	?___lwdiv+1,f
  7382  0CE2  085F               	movf	___lwdiv@quotient,w
  7383  0CE3  01DA               	clrf	?___lwdiv
  7384  0CE4  07DA               	addwf	?___lwdiv,f
  7385  0CE5  0008               	return
  7386  0CE6                     __end_of___lwdiv:	
  7387                           
  7388                           	psect	text40
  7389  0885                     __ptext40:	
  7390 ;; *************** function _Load_Initialization *****************
  7391 ;; Defined at:
  7392 ;;		line 9 in file "../src/OverLoad_B1.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;		None
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;		None
  7397 ;; Return value:  Size  Location     Type
  7398 ;;		None               void
  7399 ;; Registers used:
  7400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7406 ;;      Params:         0       0       0       0
  7407 ;;      Locals:         0       0       0       0
  7408 ;;      Temps:          0       0       0       0
  7409 ;;      Totals:         0       0       0       0
  7410 ;;Total ram usage:        0 bytes
  7411 ;; Hardware stack levels used:    1
  7412 ;; Hardware stack levels required when called:    3
  7413 ;; This function calls:
  7414 ;;		_setLoad_AH_AL_Restore
  7415 ;; This function is called by:
  7416 ;;		_main
  7417 ;; This function uses a non-reentrant model
  7418 ;;
  7419                           
  7420                           
  7421                           ;psect for function _Load_Initialization
  7422  0885                     _Load_Initialization:	
  7423                           
  7424                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  7425                           
  7426                           ;incstack = 0
  7427                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7428  0885  158A  2250         	fcall	_setLoad_AH_AL_Restore
  7429  0887  0008               	return
  7430  0888                     __end_of_Load_Initialization:	
  7431                           
  7432                           	psect	text41
  7433  0A50                     __ptext41:	
  7434 ;; *************** function _setLoad_AH_AL_Restore *****************
  7435 ;; Defined at:
  7436 ;;		line 292 in file "../src/OverLoad_B1.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;		None
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;  i               1    0[BANK0 ] unsigned char 
  7441 ;; Return value:  Size  Location     Type
  7442 ;;		None               void
  7443 ;; Registers used:
  7444 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7450 ;;      Params:         0       0       0       0
  7451 ;;      Locals:         0       1       0       0
  7452 ;;      Temps:          1       0       0       0
  7453 ;;      Totals:         1       1       0       0
  7454 ;;Total ram usage:        2 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:    2
  7457 ;; This function calls:
  7458 ;;		Nothing
  7459 ;; This function is called by:
  7460 ;;		_Load_Initialization
  7461 ;;		_Load_Main
  7462 ;; This function uses a non-reentrant model
  7463 ;;
  7464                           
  7465                           
  7466                           ;psect for function _setLoad_AH_AL_Restore
  7467  0A50                     _setLoad_AH_AL_Restore:	
  7468                           
  7469                           ;OverLoad_B1.c: 293: char i;
  7470                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
  7471                           
  7472                           ;incstack = 0
  7473                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  7474  0A50  1283               	bcf	3,5	;RP0=0, select bank0
  7475  0A51  1303               	bcf	3,6	;RP1=0, select bank0
  7476  0A52  01DA               	clrf	setLoad_AH_AL_Restore@i
  7477  0A53                     L15:	
  7478  0A53  3005               	movlw	5
  7479  0A54  025A               	subwf	setLoad_AH_AL_Restore@i,w
  7480  0A55  1803               	btfsc	3,0
  7481  0A56  0008               	return
  7482                           
  7483                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
  7484  0A57  085A               	movf	setLoad_AH_AL_Restore@i,w
  7485  0A58  3ED4               	addlw	(_Load+10)& (0+255)
  7486  0A59  0084               	movwf	4
  7487  0A5A  1383               	bcf	3,7	;select IRP bank1
  7488  0A5B  0180               	clrf	0
  7489                           
  7490                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xff;
  7491  0A5C  30FF               	movlw	255
  7492  0A5D  00F9               	movwf	??_setLoad_AH_AL_Restore
  7493  0A5E  085A               	movf	setLoad_AH_AL_Restore@i,w
  7494  0A5F  3ED9               	addlw	(_Load+15)& (0+255)
  7495  0A60  0084               	movwf	4
  7496  0A61  0879               	movf	??_setLoad_AH_AL_Restore,w
  7497  0A62  0080               	movwf	0
  7498  0A63  3001               	movlw	1
  7499  0A64  00F9               	movwf	??_setLoad_AH_AL_Restore
  7500  0A65  0879               	movf	??_setLoad_AH_AL_Restore,w
  7501  0A66  07DA               	addwf	setLoad_AH_AL_Restore@i,f
  7502  0A67  2A53               	goto	L15
  7503  0A68                     __end_of_setLoad_AH_AL_Restore:	
  7504                           
  7505                           	psect	text42
  7506  0B6F                     __ptext42:	
  7507 ;; *************** function _Lights_Main *****************
  7508 ;; Defined at:
  7509 ;;		line 52 in file "../src/TriacRelay_B1.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;		None
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;		None
  7514 ;; Return value:  Size  Location     Type
  7515 ;;		None               void
  7516 ;; Registers used:
  7517 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7523 ;;      Params:         0       0       0       0
  7524 ;;      Locals:         0       0       0       0
  7525 ;;      Temps:          0       0       0       0
  7526 ;;      Totals:         0       0       0       0
  7527 ;;Total ram usage:        0 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; Hardware stack levels required when called:    6
  7530 ;; This function calls:
  7531 ;;		_Lights_Control
  7532 ;;		_getLoad_OK
  7533 ;;		_getMain_All_Error_Status
  7534 ;;		_getMain_All_LightsStatus
  7535 ;;		_setLights_Main
  7536 ;; This function is called by:
  7537 ;;		_main
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           
  7542                           ;psect for function _Lights_Main
  7543  0B6F                     _Lights_Main:	
  7544                           
  7545                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  7546                           
  7547                           ;incstack = 0
  7548                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7549  0B6F  1C73               	btfss	_Light,0
  7550  0B70  2B85               	goto	l7126
  7551                           
  7552                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  7553  0B71  158A  20CE  158A   	fcall	_getLoad_OK
  7554  0B74  3A01               	xorlw	1
  7555  0B75  1903               	skipnz
  7556  0B76  2B84               	goto	l1557
  7557  0B77  3000               	movlw	0
  7558  0B78  158A  2468  158A   	fcall	_getMain_All_Error_Status
  7559  0B7B  3800               	iorlw	0
  7560  0B7C  1D03               	skipz
  7561  0B7D  2B84               	goto	l1557
  7562  0B7E  158A  2160  158A   	fcall	_getMain_All_LightsStatus
  7563  0B81  3800               	iorlw	0
  7564  0B82  1D03               	skipz
  7565  0B83  2B85               	goto	l7126
  7566  0B84                     l1557:	
  7567                           
  7568                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  7569  0B84  1073               	bcf	_Light,0
  7570  0B85                     l7126:	
  7571                           
  7572                           ;TriacRelay_B1.c: 68: }
  7573                           ;TriacRelay_B1.c: 69: }
  7574                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  7575  0B85  3001               	movlw	1
  7576  0B86  158A  2395  158A   	fcall	_setLights_Main
  7577                           
  7578                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  7579  0B89  3001               	movlw	1
  7580  0B8A  118A  2715  158A   	fcall	_Lights_Control
  7581                           
  7582                           ;TriacRelay_B1.c: 78: setLights_Main(2);
  7583  0B8D  3002               	movlw	2
  7584  0B8E  158A  2395  158A   	fcall	_setLights_Main
  7585                           
  7586                           ;TriacRelay_B1.c: 79: Lights_Control(2);
  7587  0B91  3002               	movlw	2
  7588  0B92  118A  2715         	fcall	_Lights_Control
  7589  0B94  0008               	return
  7590  0B95                     __end_of_Lights_Main:	
  7591                           
  7592                           	psect	text43
  7593  0B95                     __ptext43:	
  7594 ;; *************** function _setLights_Main *****************
  7595 ;; Defined at:
  7596 ;;		line 91 in file "../src/TriacRelay_B1.c"
  7597 ;; Parameters:    Size  Location     Type
  7598 ;;  lights          1    wreg     unsigned char 
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;  lights          1    6[BANK0 ] unsigned char 
  7601 ;; Return value:  Size  Location     Type
  7602 ;;		None               void
  7603 ;; Registers used:
  7604 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7605 ;; Tracked objects:
  7606 ;;		On entry : 0/0
  7607 ;;		On exit  : 0/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7610 ;;      Params:         0       0       0       0
  7611 ;;      Locals:         0       1       0       0
  7612 ;;      Temps:          0       0       0       0
  7613 ;;      Totals:         0       1       0       0
  7614 ;;Total ram usage:        1 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:    5
  7617 ;; This function calls:
  7618 ;;		_LightsPointSelect
  7619 ;;		_getLights_Allow_Condition
  7620 ;;		_setLights
  7621 ;; This function is called by:
  7622 ;;		_Lights_Main
  7623 ;; This function uses a non-reentrant model
  7624 ;;
  7625                           
  7626                           
  7627                           ;psect for function _setLights_Main
  7628  0B95                     _setLights_Main:	
  7629                           
  7630                           ;incstack = 0
  7631                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7632                           ;setLights_Main@lights stored from wreg
  7633  0B95  1283               	bcf	3,5	;RP0=0, select bank0
  7634  0B96  1303               	bcf	3,6	;RP1=0, select bank0
  7635  0B97  00E0               	movwf	setLights_Main@lights
  7636                           
  7637                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  7638  0B98  0860               	movf	setLights_Main@lights,w
  7639  0B99  158A  21DF  158A   	fcall	_LightsPointSelect
  7640                           
  7641                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  7642  0B9C  0874               	movf	_Lights,w
  7643  0B9D  0084               	movwf	4
  7644  0B9E  1383               	bcf	3,7	;select IRP bank0
  7645  0B9F  1880               	btfsc	0,1
  7646  0BA0  0008               	return
  7647                           
  7648                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  7649  0BA1  0874               	movf	_Lights,w
  7650  0BA2  0084               	movwf	4
  7651  0BA3  1D80               	btfss	0,3
  7652  0BA4  0008               	return
  7653                           
  7654                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  7655  0BA5  1283               	bcf	3,5	;RP0=0, select bank0
  7656  0BA6  1303               	bcf	3,6	;RP1=0, select bank0
  7657  0BA7  0860               	movf	setLights_Main@lights,w
  7658  0BA8  158A  220A  158A   	fcall	_getLights_Allow_Condition
  7659  0BAB  3800               	iorlw	0
  7660  0BAC  1D03               	skipz
  7661  0BAD  0008               	return
  7662                           
  7663                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  7664  0BAE  0874               	movf	_Lights,w
  7665  0BAF  0084               	movwf	4
  7666  0BB0  1383               	bcf	3,7	;select IRP bank0
  7667  0BB1  1180               	bcf	0,3
  7668                           
  7669                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  7670  0BB2  0874               	movf	_Lights,w
  7671  0BB3  0084               	movwf	4
  7672  0BB4  1E00               	btfss	0,4
  7673  0BB5  2BBE               	goto	l6750
  7674                           
  7675                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  7676  0BB6  1283               	bcf	3,5	;RP0=0, select bank0
  7677  0BB7  1303               	bcf	3,6	;RP1=0, select bank0
  7678  0BB8  01DD               	clrf	setLights@status
  7679  0BB9  0ADD               	incf	setLights@status,f
  7680  0BBA  0860               	movf	setLights_Main@lights,w
  7681  0BBB  158A  26DE         	fcall	_setLights
  7682                           
  7683                           ;TriacRelay_B1.c: 99: } else {
  7684  0BBD  0008               	return
  7685  0BBE                     l6750:	
  7686                           
  7687                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  7688  0BBE  1283               	bcf	3,5	;RP0=0, select bank0
  7689  0BBF  1303               	bcf	3,6	;RP1=0, select bank0
  7690  0BC0  01DD               	clrf	setLights@status
  7691  0BC1  0860               	movf	setLights_Main@lights,w
  7692  0BC2  158A  26DE         	fcall	_setLights
  7693  0BC4  0008               	return
  7694  0BC5                     __end_of_setLights_Main:	
  7695                           
  7696                           	psect	text44
  7697  0EDE                     __ptext44:	
  7698 ;; *************** function _setLights *****************
  7699 ;; Defined at:
  7700 ;;		line 108 in file "../src/TriacRelay_B1.c"
  7701 ;; Parameters:    Size  Location     Type
  7702 ;;  lights          1    wreg     unsigned char 
  7703 ;;  status          1    3[BANK0 ] unsigned char 
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  lights          1    5[BANK0 ] unsigned char 
  7706 ;; Return value:  Size  Location     Type
  7707 ;;		None               void
  7708 ;; Registers used:
  7709 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7715 ;;      Params:         0       1       0       0
  7716 ;;      Locals:         0       1       0       0
  7717 ;;      Temps:          0       1       0       0
  7718 ;;      Totals:         0       3       0       0
  7719 ;;Total ram usage:        3 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:    4
  7722 ;; This function calls:
  7723 ;;		_setLED
  7724 ;;		_setLights_Line
  7725 ;; This function is called by:
  7726 ;;		_setLights_Main
  7727 ;; This function uses a non-reentrant model
  7728 ;;
  7729                           
  7730                           
  7731                           ;psect for function _setLights
  7732  0EDE                     _setLights:	
  7733                           
  7734                           ;incstack = 0
  7735                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7736                           ;setLights@lights stored from wreg
  7737  0EDE  1283               	bcf	3,5	;RP0=0, select bank0
  7738  0EDF  1303               	bcf	3,6	;RP1=0, select bank0
  7739  0EE0  00DF               	movwf	setLights@lights
  7740                           
  7741                           ;TriacRelay_B1.c: 116: if (status == 1) {
  7742  0EE1  085D               	movf	setLights@status,w
  7743  0EE2  3A01               	xorlw	1
  7744  0EE3  1D03               	skipz
  7745  0EE4  2F27               	goto	l6508
  7746                           
  7747                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  7748  0EE5  085F               	movf	setLights@lights,w
  7749  0EE6  3A02               	xorlw	2
  7750  0EE7  1D03               	skipz
  7751  0EE8  2EF6               	goto	l6480
  7752                           
  7753                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  7754  0EE9  01DB               	clrf	setLED@command
  7755  0EEA  3001               	movlw	1
  7756  0EEB  118A  27AF  158A   	fcall	_setLED
  7757                           
  7758                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  7759  0EEE  1283               	bcf	3,5	;RP0=0, select bank0
  7760  0EEF  1303               	bcf	3,6	;RP1=0, select bank0
  7761  0EF0  01DB               	clrf	setLED@command
  7762  0EF1  0ADB               	incf	setLED@command,f
  7763  0EF2  3002               	movlw	2
  7764  0EF3  118A  27AF  158A   	fcall	_setLED
  7765  0EF6                     l6480:	
  7766                           
  7767                           ;TriacRelay_B1.c: 121: }
  7768                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  7769  0EF6  0874               	movf	_Lights,w
  7770  0EF7  0084               	movwf	4
  7771  0EF8  1383               	bcf	3,7	;select IRP bank0
  7772  0EF9  1900               	btfsc	0,2
  7773  0EFA  2F20               	goto	l6504
  7774                           
  7775                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7776  0EFB  0874               	movf	_Lights,w
  7777  0EFC  0084               	movwf	4
  7778  0EFD  1500               	bsf	0,2
  7779                           
  7780                           ;TriacRelay_B1.c: 130: if (lights == 1) {
  7781  0EFE  1283               	bcf	3,5	;RP0=0, select bank0
  7782  0EFF  1303               	bcf	3,6	;RP1=0, select bank0
  7783  0F00  085F               	movf	setLights@lights,w
  7784  0F01  3A01               	xorlw	1
  7785  0F02  1D03               	skipz
  7786  0F03  2F06               	goto	l6494
  7787                           
  7788                           ;TriacRelay_B1.c: 131: RA7 = 1;
  7789  0F04  1785               	bsf	5,7	;volatile
  7790  0F05  2F0B               	goto	L16
  7791  0F06                     l6494:	
  7792                           ;TriacRelay_B1.c: 136: }
  7793                           
  7794                           ;TriacRelay_B1.c: 135: Lights->GO = 1;
  7795                           
  7796                           ;TriacRelay_B1.c: 134: Lights->Time = 0;
  7797                           
  7798                           ;TriacRelay_B1.c: 133: Lights->TriacValue = 140;
  7799                           
  7800                           ;TriacRelay_B1.c: 132: Lights->RelayValue = 100;
  7801                           
  7802                           
  7803                           ;TriacRelay_B1.c: 139: else if (lights == 2) {
  7804  0F06  085F               	movf	setLights@lights,w
  7805  0F07  3A02               	xorlw	2
  7806  0F08  1D03               	skipz
  7807  0F09  2F20               	goto	l6504
  7808                           
  7809                           ;TriacRelay_B1.c: 141: RC4 = 1;
  7810  0F0A  1607               	bsf	7,4	;volatile
  7811  0F0B                     L16:	
  7812                           
  7813                           ;TriacRelay_B1.c: 142: Lights->RelayValue = 100;
  7814  0F0B  3064               	movlw	100
  7815  0F0C  00DE               	movwf	??_setLights
  7816  0F0D  0874               	movf	_Lights,w
  7817  0F0E  3E04               	addlw	4
  7818  0F0F  0084               	movwf	4
  7819  0F10  085E               	movf	??_setLights,w
  7820  0F11  0080               	movwf	0
  7821                           
  7822                           ;TriacRelay_B1.c: 143: Lights->TriacValue = 140;
  7823  0F12  308C               	movlw	140
  7824  0F13  00DE               	movwf	??_setLights
  7825  0F14  0874               	movf	_Lights,w
  7826  0F15  3E03               	addlw	3
  7827  0F16  0084               	movwf	4
  7828  0F17  085E               	movf	??_setLights,w
  7829  0F18  0080               	movwf	0
  7830                           
  7831                           ;TriacRelay_B1.c: 144: Lights->Time = 0;
  7832  0F19  0874               	movf	_Lights,w
  7833  0F1A  3E02               	addlw	2
  7834  0F1B  0084               	movwf	4
  7835  0F1C  0180               	clrf	0
  7836                           
  7837                           ;TriacRelay_B1.c: 145: Lights->GO = 1;
  7838  0F1D  0874               	movf	_Lights,w
  7839  0F1E  0084               	movwf	4
  7840  0F1F  1480               	bsf	0,1
  7841  0F20                     l6504:	
  7842                           
  7843                           ;TriacRelay_B1.c: 151: }
  7844                           ;TriacRelay_B1.c: 162: }
  7845                           ;TriacRelay_B1.c: 164: Light.Load_Status = 1;
  7846  0F20  14F3               	bsf	_Light,1
  7847                           
  7848                           ;TriacRelay_B1.c: 165: setLights_Line(lights);
  7849  0F21  1283               	bcf	3,5	;RP0=0, select bank0
  7850  0F22  1303               	bcf	3,6	;RP1=0, select bank0
  7851  0F23  085F               	movf	setLights@lights,w
  7852  0F24  158A  2221         	fcall	_setLights_Line
  7853                           
  7854                           ;TriacRelay_B1.c: 167: } else {
  7855  0F26  0008               	return
  7856  0F27                     l6508:	
  7857                           
  7858                           ;TriacRelay_B1.c: 170: if (lights == 2) {
  7859  0F27  1283               	bcf	3,5	;RP0=0, select bank0
  7860  0F28  1303               	bcf	3,6	;RP1=0, select bank0
  7861  0F29  085F               	movf	setLights@lights,w
  7862  0F2A  3A02               	xorlw	2
  7863  0F2B  1D03               	skipz
  7864  0F2C  2F3A               	goto	l6512
  7865                           
  7866                           ;TriacRelay_B1.c: 171: setLED(1, 1);
  7867  0F2D  01DB               	clrf	setLED@command
  7868  0F2E  0ADB               	incf	setLED@command,f
  7869  0F2F  3001               	movlw	1
  7870  0F30  118A  27AF  158A   	fcall	_setLED
  7871                           
  7872                           ;TriacRelay_B1.c: 172: setLED(2, 0);
  7873  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  7874  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  7875  0F35  01DB               	clrf	setLED@command
  7876  0F36  3002               	movlw	2
  7877  0F37  118A  27AF  158A   	fcall	_setLED
  7878  0F3A                     l6512:	
  7879                           
  7880                           ;TriacRelay_B1.c: 173: }
  7881                           ;TriacRelay_B1.c: 175: if (Lights->Status == 1) {
  7882  0F3A  0874               	movf	_Lights,w
  7883  0F3B  0084               	movwf	4
  7884  0F3C  1383               	bcf	3,7	;select IRP bank0
  7885  0F3D  1D00               	btfss	0,2
  7886  0F3E  2F64               	goto	l6536
  7887                           
  7888                           ;TriacRelay_B1.c: 176: Lights->Status = 0;
  7889  0F3F  0874               	movf	_Lights,w
  7890  0F40  0084               	movwf	4
  7891  0F41  1100               	bcf	0,2
  7892                           
  7893                           ;TriacRelay_B1.c: 178: if (lights == 1) {
  7894  0F42  1283               	bcf	3,5	;RP0=0, select bank0
  7895  0F43  1303               	bcf	3,6	;RP1=0, select bank0
  7896  0F44  085F               	movf	setLights@lights,w
  7897  0F45  3A01               	xorlw	1
  7898  0F46  1D03               	skipz
  7899  0F47  2F4A               	goto	l6526
  7900                           
  7901                           ;TriacRelay_B1.c: 179: RA7 = 1;
  7902  0F48  1785               	bsf	5,7	;volatile
  7903  0F49  2F4F               	goto	L17
  7904  0F4A                     l6526:	
  7905                           ;TriacRelay_B1.c: 184: }
  7906                           
  7907                           ;TriacRelay_B1.c: 183: Lights->GO = 1;
  7908                           
  7909                           ;TriacRelay_B1.c: 182: Lights->Time = 0;
  7910                           
  7911                           ;TriacRelay_B1.c: 181: Lights->TriacValue = 80;
  7912                           
  7913                           ;TriacRelay_B1.c: 180: Lights->RelayValue = 40;
  7914                           
  7915                           
  7916                           ;TriacRelay_B1.c: 187: else if (lights == 2) {
  7917  0F4A  085F               	movf	setLights@lights,w
  7918  0F4B  3A02               	xorlw	2
  7919  0F4C  1D03               	skipz
  7920  0F4D  2F64               	goto	l6536
  7921                           
  7922                           ;TriacRelay_B1.c: 189: RC4 = 1;
  7923  0F4E  1607               	bsf	7,4	;volatile
  7924  0F4F                     L17:	
  7925                           
  7926                           ;TriacRelay_B1.c: 190: Lights->RelayValue = 40;
  7927  0F4F  3028               	movlw	40
  7928  0F50  00DE               	movwf	??_setLights
  7929  0F51  0874               	movf	_Lights,w
  7930  0F52  3E04               	addlw	4
  7931  0F53  0084               	movwf	4
  7932  0F54  085E               	movf	??_setLights,w
  7933  0F55  0080               	movwf	0
  7934                           
  7935                           ;TriacRelay_B1.c: 191: Lights->TriacValue = 80;
  7936  0F56  3050               	movlw	80
  7937  0F57  00DE               	movwf	??_setLights
  7938  0F58  0874               	movf	_Lights,w
  7939  0F59  3E03               	addlw	3
  7940  0F5A  0084               	movwf	4
  7941  0F5B  085E               	movf	??_setLights,w
  7942  0F5C  0080               	movwf	0
  7943                           
  7944                           ;TriacRelay_B1.c: 192: Lights->Time = 0;
  7945  0F5D  0874               	movf	_Lights,w
  7946  0F5E  3E02               	addlw	2
  7947  0F5F  0084               	movwf	4
  7948  0F60  0180               	clrf	0
  7949                           
  7950                           ;TriacRelay_B1.c: 193: Lights->GO = 1;
  7951  0F61  0874               	movf	_Lights,w
  7952  0F62  0084               	movwf	4
  7953  0F63  1480               	bsf	0,1
  7954  0F64                     l6536:	
  7955                           
  7956                           ;TriacRelay_B1.c: 199: }
  7957                           ;TriacRelay_B1.c: 211: }
  7958                           ;TriacRelay_B1.c: 213: Light.Load_Status = 0;
  7959  0F64  10F3               	bcf	_Light,1
  7960                           
  7961                           ;TriacRelay_B1.c: 214: setLights_Line(0);
  7962  0F65  3000               	movlw	0
  7963  0F66  158A  2221         	fcall	_setLights_Line
  7964  0F68  0008               	return
  7965  0F69                     __end_of_setLights:	
  7966                           
  7967                           	psect	text45
  7968  0A21                     __ptext45:	
  7969 ;; *************** function _setLights_Line *****************
  7970 ;; Defined at:
  7971 ;;		line 285 in file "../src/TriacRelay_B1.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;  lights          1    wreg     unsigned char 
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;  lights          1    4[COMMON] unsigned char 
  7976 ;; Return value:  Size  Location     Type
  7977 ;;		None               void
  7978 ;; Registers used:
  7979 ;;		wreg
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7985 ;;      Params:         0       0       0       0
  7986 ;;      Locals:         1       0       0       0
  7987 ;;      Temps:          0       0       0       0
  7988 ;;      Totals:         1       0       0       0
  7989 ;;Total ram usage:        1 bytes
  7990 ;; Hardware stack levels used:    1
  7991 ;; Hardware stack levels required when called:    2
  7992 ;; This function calls:
  7993 ;;		Nothing
  7994 ;; This function is called by:
  7995 ;;		_setLights
  7996 ;; This function uses a non-reentrant model
  7997 ;;
  7998                           
  7999                           
  8000                           ;psect for function _setLights_Line
  8001  0A21                     _setLights_Line:	
  8002                           
  8003                           ;incstack = 0
  8004                           ; Regs used in _setLights_Line: [wreg]
  8005                           ;setLights_Line@lights stored from wreg
  8006  0A21  00F9               	movwf	setLights_Line@lights
  8007                           
  8008                           ;TriacRelay_B1.c: 286: Light.LoadGO = 1;
  8009  0A22  1473               	bsf	_Light,0
  8010                           
  8011                           ;TriacRelay_B1.c: 288: Lights1.Line = 0;
  8012  0A23  1283               	bcf	3,5	;RP0=0, select bank0
  8013  0A24  1303               	bcf	3,6	;RP1=0, select bank0
  8014  0A25  1049               	bcf	_Lights1+1,0
  8015                           
  8016                           ;TriacRelay_B1.c: 289: if (lights == 1 && lights != 0) {
  8017  0A26  0879               	movf	setLights_Line@lights,w
  8018  0A27  3A01               	xorlw	1
  8019  0A28  1D03               	skipz
  8020  0A29  2A2E               	goto	l1604
  8021  0A2A  0879               	movf	setLights_Line@lights,w
  8022  0A2B  1903               	btfsc	3,2
  8023  0A2C  2A2E               	goto	l1604
  8024                           
  8025                           ;TriacRelay_B1.c: 290: Lights1.Line = 1;
  8026  0A2D  1449               	bsf	_Lights1+1,0
  8027  0A2E                     l1604:	
  8028                           
  8029                           ;TriacRelay_B1.c: 291: }
  8030                           ;TriacRelay_B1.c: 294: Lights2.Line = 0;
  8031  0A2E  104E               	bcf	_Lights2+1,0
  8032                           
  8033                           ;TriacRelay_B1.c: 295: if (lights == 2 && lights != 0) {
  8034  0A2F  0879               	movf	setLights_Line@lights,w
  8035  0A30  3A02               	xorlw	2
  8036  0A31  1D03               	skipz
  8037  0A32  0008               	return
  8038  0A33  0879               	movf	setLights_Line@lights,w
  8039  0A34  1903               	btfsc	3,2
  8040  0A35  0008               	return
  8041                           
  8042                           ;TriacRelay_B1.c: 296: Lights2.Line = 1;
  8043  0A36  144E               	bsf	_Lights2+1,0
  8044  0A37  0008               	return
  8045  0A38                     __end_of_setLights_Line:	
  8046                           
  8047                           	psect	text46
  8048  0A0A                     __ptext46:	
  8049 ;; *************** function _getLights_Allow_Condition *****************
  8050 ;; Defined at:
  8051 ;;		line 367 in file "../src/TriacRelay_B1.c"
  8052 ;; Parameters:    Size  Location     Type
  8053 ;;  lights          1    wreg     unsigned char 
  8054 ;; Auto vars:     Size  Location     Type
  8055 ;;  lights          1    0[COMMON] unsigned char 
  8056 ;;  allow           1    1[BANK0 ] unsigned char 
  8057 ;; Return value:  Size  Location     Type
  8058 ;;                  1    wreg      unsigned char 
  8059 ;; Registers used:
  8060 ;;		wreg, status,2, pclath, cstack
  8061 ;; Tracked objects:
  8062 ;;		On entry : 0/0
  8063 ;;		On exit  : 0/0
  8064 ;;		Unchanged: 0/0
  8065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8066 ;;      Params:         0       0       0       0
  8067 ;;      Locals:         0       2       0       0
  8068 ;;      Temps:          0       1       0       0
  8069 ;;      Totals:         0       3       0       0
  8070 ;;Total ram usage:        3 bytes
  8071 ;; Hardware stack levels used:    1
  8072 ;; Hardware stack levels required when called:    3
  8073 ;; This function calls:
  8074 ;;		_getLoad_OK
  8075 ;; This function is called by:
  8076 ;;		_setLights_Main
  8077 ;; This function uses a non-reentrant model
  8078 ;;
  8079                           
  8080                           
  8081                           ;psect for function _getLights_Allow_Condition
  8082  0A0A                     _getLights_Allow_Condition:	
  8083                           
  8084                           ;TriacRelay_B1.c: 368: char allow = 0;
  8085                           
  8086                           ;incstack = 0
  8087                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  8088  0A0A  1283               	bcf	3,5	;RP0=0, select bank0
  8089  0A0B  1303               	bcf	3,6	;RP1=0, select bank0
  8090  0A0C  01DB               	clrf	getLights_Allow_Condition@allow
  8091                           
  8092                           ;TriacRelay_B1.c: 371: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  8093  0A0D  01DC               	clrf	_getLights_Allow_Condition$4782
  8094  0A0E  0ADC               	incf	_getLights_Allow_Condition$4782,f
  8095  0A0F  158A  20CE  158A   	fcall	_getLoad_OK
  8096  0A12  3800               	iorlw	0
  8097  0A13  1903               	btfsc	3,2
  8098  0A14  1873               	btfsc	_Light,0
  8099  0A15  2A19               	goto	l6468
  8100  0A16  1283               	bcf	3,5	;RP0=0, select bank0
  8101  0A17  1303               	bcf	3,6	;RP1=0, select bank0
  8102  0A18  01DC               	clrf	_getLights_Allow_Condition$4782
  8103  0A19                     l6468:	
  8104  0A19  1283               	bcf	3,5	;RP0=0, select bank0
  8105  0A1A  1303               	bcf	3,6	;RP1=0, select bank0
  8106  0A1B  085C               	movf	_getLights_Allow_Condition$4782,w
  8107  0A1C  00DA               	movwf	??_getLights_Allow_Condition
  8108  0A1D  085A               	movf	??_getLights_Allow_Condition,w
  8109  0A1E  00DB               	movwf	getLights_Allow_Condition@allow
  8110                           
  8111                           ;TriacRelay_B1.c: 396: return allow;
  8112  0A1F  085B               	movf	getLights_Allow_Condition@allow,w
  8113  0A20  0008               	return
  8114  0A21                     __end_of_getLights_Allow_Condition:	
  8115                           
  8116                           	psect	text47
  8117  08CE                     __ptext47:	
  8118 ;; *************** function _getLoad_OK *****************
  8119 ;; Defined at:
  8120 ;;		line 272 in file "../src/OverLoad_B1.c"
  8121 ;; Parameters:    Size  Location     Type
  8122 ;;		None
  8123 ;; Auto vars:     Size  Location     Type
  8124 ;;  ok              1    4[COMMON] unsigned char 
  8125 ;; Return value:  Size  Location     Type
  8126 ;;                  1    wreg      unsigned char 
  8127 ;; Registers used:
  8128 ;;		wreg, status,2
  8129 ;; Tracked objects:
  8130 ;;		On entry : 0/0
  8131 ;;		On exit  : 0/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8134 ;;      Params:         0       0       0       0
  8135 ;;      Locals:         1       0       0       0
  8136 ;;      Temps:          0       0       0       0
  8137 ;;      Totals:         1       0       0       0
  8138 ;;Total ram usage:        1 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; Hardware stack levels required when called:    2
  8141 ;; This function calls:
  8142 ;;		Nothing
  8143 ;; This function is called by:
  8144 ;;		_Lights_Main
  8145 ;;		_getLights_Allow_Condition
  8146 ;; This function uses a non-reentrant model
  8147 ;;
  8148                           
  8149                           
  8150                           ;psect for function _getLoad_OK
  8151  08CE                     _getLoad_OK:	
  8152                           
  8153                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
  8154                           
  8155                           ;incstack = 0
  8156                           ; Regs used in _getLoad_OK: [wreg+status,2]
  8157  08CE  3000               	movlw	0
  8158  08CF  1683               	bsf	3,5	;RP0=1, select bank1
  8159  08D0  1303               	bcf	3,6	;RP1=0, select bank1
  8160  08D1  1BCA               	btfsc	_Load^(0+128),7
  8161  08D2  3001               	movlw	1
  8162  08D3  00F9               	movwf	getLoad_OK@ok
  8163                           
  8164                           ;OverLoad_B1.c: 274: return ok;
  8165  08D4  0879               	movf	getLoad_OK@ok,w
  8166  08D5  0008               	return
  8167  08D6                     __end_of_getLoad_OK:	
  8168                           
  8169                           	psect	text48
  8170  0715                     __ptext48:	
  8171 ;; *************** function _Lights_Control *****************
  8172 ;; Defined at:
  8173 ;;		line 220 in file "../src/TriacRelay_B1.c"
  8174 ;; Parameters:    Size  Location     Type
  8175 ;;  lights          1    wreg     unsigned char 
  8176 ;; Auto vars:     Size  Location     Type
  8177 ;;  lights          1   10[BANK0 ] unsigned char 
  8178 ;; Return value:  Size  Location     Type
  8179 ;;		None               void
  8180 ;; Registers used:
  8181 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8182 ;; Tracked objects:
  8183 ;;		On entry : 0/0
  8184 ;;		On exit  : 0/0
  8185 ;;		Unchanged: 0/0
  8186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8187 ;;      Params:         0       0       0       0
  8188 ;;      Locals:         0       1       0       0
  8189 ;;      Temps:          0       2       0       0
  8190 ;;      Totals:         0       3       0       0
  8191 ;;Total ram usage:        3 bytes
  8192 ;; Hardware stack levels used:    1
  8193 ;; Hardware stack levels required when called:    3
  8194 ;; This function calls:
  8195 ;;		_LightsPointSelect
  8196 ;;		___awdiv
  8197 ;; This function is called by:
  8198 ;;		_Lights_Main
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           
  8203                           ;psect for function _Lights_Control
  8204  0715                     _Lights_Control:	
  8205                           
  8206                           ;incstack = 0
  8207                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8208                           ;Lights_Control@lights stored from wreg
  8209  0715  1283               	bcf	3,5	;RP0=0, select bank0
  8210  0716  1303               	bcf	3,6	;RP1=0, select bank0
  8211  0717  00E4               	movwf	Lights_Control@lights
  8212                           
  8213                           ;TriacRelay_B1.c: 221: LightsPointSelect(lights);
  8214  0718  0864               	movf	Lights_Control@lights,w
  8215  0719  158A  21DF  118A   	fcall	_LightsPointSelect
  8216                           
  8217                           ;TriacRelay_B1.c: 222: if (Lights->GO == 1) {
  8218  071C  0874               	movf	_Lights,w
  8219  071D  0084               	movwf	4
  8220  071E  1383               	bcf	3,7	;select IRP bank0
  8221  071F  1C80               	btfss	0,1
  8222  0720  0008               	return
  8223                           
  8224                           ;TriacRelay_B1.c: 223: Lights->Time++;
  8225  0721  3001               	movlw	1
  8226  0722  1283               	bcf	3,5	;RP0=0, select bank0
  8227  0723  1303               	bcf	3,6	;RP1=0, select bank0
  8228  0724  00E2               	movwf	??_Lights_Control
  8229  0725  0874               	movf	_Lights,w
  8230  0726  3E02               	addlw	2
  8231  0727  0084               	movwf	4
  8232  0728  0862               	movf	??_Lights_Control,w
  8233  0729  0780               	addwf	0,f
  8234                           
  8235                           ;TriacRelay_B1.c: 224: if (Lights->RelaySet == 0) {
  8236  072A  0874               	movf	_Lights,w
  8237  072B  0084               	movwf	4
  8238  072C  1B80               	btfsc	0,7
  8239  072D  2F75               	goto	l6772
  8240                           
  8241                           ;TriacRelay_B1.c: 225: if (Lights->Time >= (Lights->RelayValue / 20)) {
  8242  072E  3014               	movlw	20
  8243  072F  00DA               	movwf	___awdiv@divisor
  8244  0730  3000               	movlw	0
  8245  0731  00DB               	movwf	___awdiv@divisor+1
  8246  0732  0874               	movf	_Lights,w
  8247  0733  3E04               	addlw	4
  8248  0734  0084               	movwf	4
  8249  0735  0800               	movf	0,w
  8250  0736  00E2               	movwf	??_Lights_Control
  8251  0737  01E3               	clrf	??_Lights_Control+1
  8252  0738  0862               	movf	??_Lights_Control,w
  8253  0739  00DC               	movwf	___awdiv@dividend
  8254  073A  0863               	movf	??_Lights_Control+1,w
  8255  073B  00DD               	movwf	___awdiv@dividend+1
  8256  073C  158A  260F  118A   	fcall	___awdiv
  8257  073F  0874               	movf	_Lights,w
  8258  0740  3E02               	addlw	2
  8259  0741  0084               	movwf	4
  8260  0742  1283               	bcf	3,5	;RP0=0, select bank0
  8261  0743  1303               	bcf	3,6	;RP1=0, select bank0
  8262  0744  085B               	movf	?___awdiv+1,w
  8263  0745  3A80               	xorlw	128
  8264  0746  3C80               	sublw	128
  8265  0747  1D03               	skipz
  8266  0748  2F4C               	goto	u8815
  8267  0749  085A               	movf	?___awdiv,w
  8268  074A  1383               	bcf	3,7	;select IRP bank0
  8269  074B  0200               	subwf	0,w
  8270  074C                     u8815:	
  8271  074C  1C03               	skipc
  8272  074D  0008               	return
  8273                           
  8274                           ;TriacRelay_B1.c: 226: Lights->RelaySet = 1;
  8275  074E  0874               	movf	_Lights,w
  8276  074F  0084               	movwf	4
  8277  0750  1383               	bcf	3,7	;select IRP bank0
  8278  0751  1780               	bsf	0,7
  8279                           
  8280                           ;TriacRelay_B1.c: 228: if (lights == 1) {
  8281  0752  1283               	bcf	3,5	;RP0=0, select bank0
  8282  0753  1303               	bcf	3,6	;RP1=0, select bank0
  8283  0754  0864               	movf	Lights_Control@lights,w
  8284  0755  3A01               	xorlw	1
  8285  0756  1D03               	skipz
  8286  0757  2F64               	goto	l6768
  8287                           
  8288                           ;TriacRelay_B1.c: 229: RA6 = Lights->Status == 1 ? 1 : 0;
  8289  0758  0874               	movf	_Lights,w
  8290  0759  0084               	movwf	4
  8291  075A  1D00               	btfss	0,2
  8292  075B  2F60               	goto	u8830
  8293  075C  1283               	bcf	3,5	;RP0=0, select bank0
  8294  075D  1303               	bcf	3,6	;RP1=0, select bank0
  8295  075E  1705               	bsf	5,6	;volatile
  8296  075F  0008               	return
  8297  0760                     u8830:	
  8298  0760  1283               	bcf	3,5	;RP0=0, select bank0
  8299  0761  1303               	bcf	3,6	;RP1=0, select bank0
  8300  0762  1305               	bcf	5,6	;volatile
  8301                           
  8302                           ;TriacRelay_B1.c: 230: }
  8303  0763  0008               	return
  8304  0764                     l6768:	
  8305                           
  8306                           ;TriacRelay_B1.c: 233: else if (lights == 2) {
  8307  0764  0864               	movf	Lights_Control@lights,w
  8308  0765  3A02               	xorlw	2
  8309  0766  1D03               	skipz
  8310  0767  0008               	return
  8311                           
  8312                           ;TriacRelay_B1.c: 234: RC5 = Lights->Status == 1 ? 1 : 0;
  8313  0768  0874               	movf	_Lights,w
  8314  0769  0084               	movwf	4
  8315  076A  1383               	bcf	3,7	;select IRP bank0
  8316  076B  1D00               	btfss	0,2
  8317  076C  2F71               	goto	u8860
  8318  076D  1283               	bcf	3,5	;RP0=0, select bank0
  8319  076E  1303               	bcf	3,6	;RP1=0, select bank0
  8320  076F  1687               	bsf	7,5	;volatile
  8321  0770  0008               	return
  8322  0771                     u8860:	
  8323  0771  1283               	bcf	3,5	;RP0=0, select bank0
  8324  0772  1303               	bcf	3,6	;RP1=0, select bank0
  8325  0773  1287               	bcf	7,5	;volatile
  8326                           
  8327                           ;TriacRelay_B1.c: 235: }
  8328                           ;TriacRelay_B1.c: 242: }
  8329                           ;TriacRelay_B1.c: 243: } else {
  8330  0774  0008               	return
  8331  0775                     l6772:	
  8332                           
  8333                           ;TriacRelay_B1.c: 244: if (Lights->Time >= (Lights->TriacValue / 20)) {
  8334  0775  3014               	movlw	20
  8335  0776  00DA               	movwf	___awdiv@divisor
  8336  0777  3000               	movlw	0
  8337  0778  00DB               	movwf	___awdiv@divisor+1
  8338  0779  0874               	movf	_Lights,w
  8339  077A  3E03               	addlw	3
  8340  077B  0084               	movwf	4
  8341  077C  1383               	bcf	3,7	;select IRP bank0
  8342  077D  0800               	movf	0,w
  8343  077E  00E2               	movwf	??_Lights_Control
  8344  077F  01E3               	clrf	??_Lights_Control+1
  8345  0780  0862               	movf	??_Lights_Control,w
  8346  0781  00DC               	movwf	___awdiv@dividend
  8347  0782  0863               	movf	??_Lights_Control+1,w
  8348  0783  00DD               	movwf	___awdiv@dividend+1
  8349  0784  158A  260F  118A   	fcall	___awdiv
  8350  0787  0874               	movf	_Lights,w
  8351  0788  3E02               	addlw	2
  8352  0789  0084               	movwf	4
  8353  078A  1283               	bcf	3,5	;RP0=0, select bank0
  8354  078B  1303               	bcf	3,6	;RP1=0, select bank0
  8355  078C  085B               	movf	?___awdiv+1,w
  8356  078D  3A80               	xorlw	128
  8357  078E  3C80               	sublw	128
  8358  078F  1D03               	skipz
  8359  0790  2F94               	goto	u8885
  8360  0791  085A               	movf	?___awdiv,w
  8361  0792  1383               	bcf	3,7	;select IRP bank0
  8362  0793  0200               	subwf	0,w
  8363  0794                     u8885:	
  8364  0794  1C03               	skipc
  8365  0795  0008               	return
  8366                           
  8367                           ;TriacRelay_B1.c: 245: Lights->Time = 0;
  8368  0796  0874               	movf	_Lights,w
  8369  0797  3E02               	addlw	2
  8370  0798  0084               	movwf	4
  8371  0799  1383               	bcf	3,7	;select IRP bank0
  8372  079A  0180               	clrf	0
  8373                           
  8374                           ;TriacRelay_B1.c: 246: Lights->GO = 0;
  8375  079B  0874               	movf	_Lights,w
  8376  079C  0084               	movwf	4
  8377  079D  1080               	bcf	0,1
  8378                           
  8379                           ;TriacRelay_B1.c: 247: Lights->RelaySet = 0;
  8380  079E  0874               	movf	_Lights,w
  8381  079F  0084               	movwf	4
  8382  07A0  1380               	bcf	0,7
  8383                           
  8384                           ;TriacRelay_B1.c: 250: if (lights == 1) {
  8385  07A1  1283               	bcf	3,5	;RP0=0, select bank0
  8386  07A2  1303               	bcf	3,6	;RP1=0, select bank0
  8387  07A3  0864               	movf	Lights_Control@lights,w
  8388  07A4  3A01               	xorlw	1
  8389  07A5  1D03               	skipz
  8390  07A6  2FA9               	goto	l6784
  8391                           
  8392                           ;TriacRelay_B1.c: 251: RA7 = 0;
  8393  07A7  1385               	bcf	5,7	;volatile
  8394                           
  8395                           ;TriacRelay_B1.c: 252: }
  8396  07A8  0008               	return
  8397  07A9                     l6784:	
  8398                           
  8399                           ;TriacRelay_B1.c: 255: else if (lights == 2) {
  8400  07A9  0864               	movf	Lights_Control@lights,w
  8401  07AA  3A02               	xorlw	2
  8402  07AB  1D03               	skipz
  8403  07AC  0008               	return
  8404                           
  8405                           ;TriacRelay_B1.c: 256: RC4 = 0;
  8406  07AD  1207               	bcf	7,4	;volatile
  8407  07AE  0008               	return
  8408  07AF                     __end_of_Lights_Control:	
  8409                           
  8410                           	psect	text49
  8411  08C6                     __ptext49:	
  8412 ;; *************** function _Lights_Initialization *****************
  8413 ;; Defined at:
  8414 ;;		line 32 in file "../src/TriacRelay_B1.c"
  8415 ;; Parameters:    Size  Location     Type
  8416 ;;		None
  8417 ;; Auto vars:     Size  Location     Type
  8418 ;;		None
  8419 ;; Return value:  Size  Location     Type
  8420 ;;		None               void
  8421 ;; Registers used:
  8422 ;;		wreg, status,2, status,0, pclath, cstack
  8423 ;; Tracked objects:
  8424 ;;		On entry : 0/0
  8425 ;;		On exit  : 0/0
  8426 ;;		Unchanged: 0/0
  8427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8428 ;;      Params:         0       0       0       0
  8429 ;;      Locals:         0       0       0       0
  8430 ;;      Temps:          0       0       0       0
  8431 ;;      Totals:         0       0       0       0
  8432 ;;Total ram usage:        0 bytes
  8433 ;; Hardware stack levels used:    1
  8434 ;; Hardware stack levels required when called:    4
  8435 ;; This function calls:
  8436 ;;		_setLights_Initialization
  8437 ;; This function is called by:
  8438 ;;		_main
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           
  8443                           ;psect for function _Lights_Initialization
  8444  08C6                     _Lights_Initialization:	
  8445                           
  8446                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  8447                           
  8448                           ;incstack = 0
  8449                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8450  08C6  3001               	movlw	1
  8451  08C7  158A  20B8  158A   	fcall	_setLights_Initialization
  8452                           
  8453                           ;TriacRelay_B1.c: 38: setLights_Initialization(2);
  8454  08CA  3002               	movlw	2
  8455  08CB  158A  20B8         	fcall	_setLights_Initialization
  8456  08CD  0008               	return
  8457  08CE                     __end_of_Lights_Initialization:	
  8458                           
  8459                           	psect	text50
  8460  08B8                     __ptext50:	
  8461 ;; *************** function _setLights_Initialization *****************
  8462 ;; Defined at:
  8463 ;;		line 47 in file "../src/TriacRelay_B1.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;  lights          1    wreg     unsigned char 
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;  lights          1    1[BANK0 ] unsigned char 
  8468 ;; Return value:  Size  Location     Type
  8469 ;;		None               void
  8470 ;; Registers used:
  8471 ;;		wreg, status,2, status,0, pclath, cstack
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8477 ;;      Params:         0       0       0       0
  8478 ;;      Locals:         0       1       0       0
  8479 ;;      Temps:          0       0       0       0
  8480 ;;      Totals:         0       1       0       0
  8481 ;;Total ram usage:        1 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    3
  8484 ;; This function calls:
  8485 ;;		_LightsPointSelect
  8486 ;; This function is called by:
  8487 ;;		_Lights_Initialization
  8488 ;; This function uses a non-reentrant model
  8489 ;;
  8490                           
  8491                           
  8492                           ;psect for function _setLights_Initialization
  8493  08B8                     _setLights_Initialization:	
  8494                           
  8495                           ;incstack = 0
  8496                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8497                           ;setLights_Initialization@lights stored from wreg
  8498  08B8  1283               	bcf	3,5	;RP0=0, select bank0
  8499  08B9  1303               	bcf	3,6	;RP1=0, select bank0
  8500  08BA  00DB               	movwf	setLights_Initialization@lights
  8501                           
  8502                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  8503  08BB  085B               	movf	setLights_Initialization@lights,w
  8504  08BC  158A  21DF         	fcall	_LightsPointSelect
  8505  08BE  0008               	return
  8506  08BF                     __end_of_setLights_Initialization:	
  8507                           
  8508                           	psect	text51
  8509  0899                     __ptext51:	
  8510 ;; *************** function _LED_Main *****************
  8511 ;; Defined at:
  8512 ;;		line 47 in file "../src/LED_B1.c"
  8513 ;; Parameters:    Size  Location     Type
  8514 ;;		None
  8515 ;; Auto vars:     Size  Location     Type
  8516 ;;		None
  8517 ;; Return value:  Size  Location     Type
  8518 ;;		None               void
  8519 ;; Registers used:
  8520 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8521 ;; Tracked objects:
  8522 ;;		On entry : 0/0
  8523 ;;		On exit  : 0/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8526 ;;      Params:         0       0       0       0
  8527 ;;      Locals:         0       0       0       0
  8528 ;;      Temps:          0       0       0       0
  8529 ;;      Totals:         0       0       0       0
  8530 ;;Total ram usage:        0 bytes
  8531 ;; Hardware stack levels used:    1
  8532 ;; Hardware stack levels required when called:    4
  8533 ;; This function calls:
  8534 ;;		_setLED_Main
  8535 ;; This function is called by:
  8536 ;;		_main
  8537 ;; This function uses a non-reentrant model
  8538 ;;
  8539                           
  8540                           
  8541                           ;psect for function _LED_Main
  8542  0899                     _LED_Main:	
  8543                           
  8544                           ;LED_B1.c: 51: setLED_Main(99);
  8545                           
  8546                           ;incstack = 0
  8547                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8548  0899  3063               	movlw	99
  8549  089A  158A  242D         	fcall	_setLED_Main
  8550  089C  0008               	return
  8551  089D                     __end_of_LED_Main:	
  8552                           
  8553                           	psect	text52
  8554  0C2D                     __ptext52:	
  8555 ;; *************** function _setLED_Main *****************
  8556 ;; Defined at:
  8557 ;;		line 229 in file "../src/LED_B1.c"
  8558 ;; Parameters:    Size  Location     Type
  8559 ;;  led             1    wreg     unsigned char 
  8560 ;; Auto vars:     Size  Location     Type
  8561 ;;  led             1    3[BANK0 ] unsigned char 
  8562 ;; Return value:  Size  Location     Type
  8563 ;;		None               void
  8564 ;; Registers used:
  8565 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8566 ;; Tracked objects:
  8567 ;;		On entry : 0/0
  8568 ;;		On exit  : 0/0
  8569 ;;		Unchanged: 0/0
  8570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8571 ;;      Params:         0       0       0       0
  8572 ;;      Locals:         0       1       0       0
  8573 ;;      Temps:          0       2       0       0
  8574 ;;      Totals:         0       3       0       0
  8575 ;;Total ram usage:        3 bytes
  8576 ;; Hardware stack levels used:    1
  8577 ;; Hardware stack levels required when called:    3
  8578 ;; This function calls:
  8579 ;;		_LedPointSelect
  8580 ;; This function is called by:
  8581 ;;		_LED_Main
  8582 ;; This function uses a non-reentrant model
  8583 ;;
  8584                           
  8585                           
  8586                           ;psect for function _setLED_Main
  8587  0C2D                     _setLED_Main:	
  8588                           
  8589                           ;incstack = 0
  8590                           ; Regs used in _setLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8591                           ;setLED_Main@led stored from wreg
  8592  0C2D  1283               	bcf	3,5	;RP0=0, select bank0
  8593  0C2E  1303               	bcf	3,6	;RP1=0, select bank0
  8594  0C2F  00DD               	movwf	setLED_Main@led
  8595                           
  8596                           ;LED_B1.c: 230: LedPointSelect(led);
  8597  0C30  085D               	movf	setLED_Main@led,w
  8598  0C31  158A  22CD  158A   	fcall	_LedPointSelect
  8599                           
  8600                           ;LED_B1.c: 231: if (LED->GO == 1) {
  8601  0C34  0872               	movf	_LED,w
  8602  0C35  0084               	movwf	4
  8603  0C36  1383               	bcf	3,7	;select IRP bank0
  8604  0C37  1C80               	btfss	0,1
  8605  0C38  0008               	return
  8606                           
  8607                           ;LED_B1.c: 232: LED->Time++;
  8608  0C39  0A72               	incf	_LED,w
  8609  0C3A  0084               	movwf	4
  8610  0C3B  3001               	movlw	1
  8611  0C3C  0780               	addwf	0,f
  8612  0C3D  0A84               	incf	4,f
  8613  0C3E  1803               	skipnc
  8614  0C3F  0A80               	incf	0,f
  8615                           
  8616                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
  8617  0C40  0A72               	incf	_LED,w
  8618  0C41  0084               	movwf	4
  8619  0C42  0800               	movf	0,w
  8620  0C43  1283               	bcf	3,5	;RP0=0, select bank0
  8621  0C44  1303               	bcf	3,6	;RP1=0, select bank0
  8622  0C45  00DB               	movwf	??_setLED_Main
  8623  0C46  0A84               	incf	4,f
  8624  0C47  0800               	movf	0,w
  8625  0C48  00DC               	movwf	??_setLED_Main+1
  8626  0C49  3000               	movlw	0
  8627  0C4A  025C               	subwf	??_setLED_Main+1,w
  8628  0C4B  3019               	movlw	25
  8629  0C4C  1903               	skipnz
  8630  0C4D  025B               	subwf	??_setLED_Main,w
  8631  0C4E  1C03               	skipc
  8632  0C4F  0008               	return
  8633                           
  8634                           ;LED_B1.c: 234: LED->Time = 0;
  8635  0C50  0A72               	incf	_LED,w
  8636  0C51  0084               	movwf	4
  8637  0C52  0180               	clrf	0
  8638  0C53  0A84               	incf	4,f
  8639  0C54  0180               	clrf	0
  8640                           
  8641                           ;LED_B1.c: 237: if (led == 1) {
  8642  0C55  085D               	movf	setLED_Main@led,w
  8643  0C56  3A01               	xorlw	1
  8644  0C57  1D03               	skipz
  8645  0C58  2C5B               	goto	l383
  8646                           
  8647                           ;LED_B1.c: 238: RC7 = RC7 == 1 ? 0 : 1;
  8648  0C59  3080               	movlw	128
  8649  0C5A  0687               	xorwf	7,f
  8650  0C5B                     l383:	
  8651                           
  8652                           ;LED_B1.c: 239: }
  8653                           ;LED_B1.c: 242: if (led == 2) {
  8654  0C5B  085D               	movf	setLED_Main@led,w
  8655  0C5C  3A02               	xorlw	2
  8656  0C5D  1D03               	skipz
  8657  0C5E  2C61               	goto	l384
  8658                           
  8659                           ;LED_B1.c: 243: RC6 = RC6 == 1 ? 0 : 1;
  8660  0C5F  3040               	movlw	64
  8661  0C60  0687               	xorwf	7,f
  8662  0C61                     l384:	
  8663                           
  8664                           ;LED_B1.c: 244: }
  8665                           ;LED_B1.c: 252: if (led == 99) {
  8666  0C61  085D               	movf	setLED_Main@led,w
  8667  0C62  3A63               	xorlw	99
  8668  0C63  1D03               	skipz
  8669  0C64  0008               	return
  8670                           
  8671                           ;LED_B1.c: 253: RC1 = RC1 == 1 ? 0 : 1;
  8672  0C65  3002               	movlw	2
  8673  0C66  0687               	xorwf	7,f
  8674  0C67  0008               	return
  8675  0C68                     __end_of_setLED_Main:	
  8676                           
  8677                           	psect	text53
  8678  08FC                     __ptext53:	
  8679 ;; *************** function _LED_Initialization *****************
  8680 ;; Defined at:
  8681 ;;		line 31 in file "../src/LED_B1.c"
  8682 ;; Parameters:    Size  Location     Type
  8683 ;;		None
  8684 ;; Auto vars:     Size  Location     Type
  8685 ;;		None
  8686 ;; Return value:  Size  Location     Type
  8687 ;;		None               void
  8688 ;; Registers used:
  8689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8690 ;; Tracked objects:
  8691 ;;		On entry : 0/0
  8692 ;;		On exit  : 0/0
  8693 ;;		Unchanged: 0/0
  8694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8695 ;;      Params:         0       0       0       0
  8696 ;;      Locals:         0       0       0       0
  8697 ;;      Temps:          0       0       0       0
  8698 ;;      Totals:         0       0       0       0
  8699 ;;Total ram usage:        0 bytes
  8700 ;; Hardware stack levels used:    1
  8701 ;; Hardware stack levels required when called:    5
  8702 ;; This function calls:
  8703 ;;		_setLED_Initialization
  8704 ;; This function is called by:
  8705 ;;		_main
  8706 ;; This function uses a non-reentrant model
  8707 ;;
  8708                           
  8709                           
  8710                           ;psect for function _LED_Initialization
  8711  08FC                     _LED_Initialization:	
  8712                           
  8713                           ;LED_B1.c: 33: setLED_Initialization(1);
  8714                           
  8715                           ;incstack = 0
  8716                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8717  08FC  3001               	movlw	1
  8718  08FD  158A  2192  158A   	fcall	_setLED_Initialization
  8719                           
  8720                           ;LED_B1.c: 36: setLED_Initialization(2);
  8721  0900  3002               	movlw	2
  8722  0901  158A  2192  158A   	fcall	_setLED_Initialization
  8723                           
  8724                           ;LED_B1.c: 42: setLED_Initialization(99);
  8725  0904  3063               	movlw	99
  8726  0905  158A  2192         	fcall	_setLED_Initialization
  8727  0907  0008               	return
  8728  0908                     __end_of_LED_Initialization:	
  8729                           
  8730                           	psect	text54
  8731  0992                     __ptext54:	
  8732 ;; *************** function _setLED_Initialization *****************
  8733 ;; Defined at:
  8734 ;;		line 74 in file "../src/LED_B1.c"
  8735 ;; Parameters:    Size  Location     Type
  8736 ;;  led             1    wreg     unsigned char 
  8737 ;; Auto vars:     Size  Location     Type
  8738 ;;  led             1    3[BANK0 ] unsigned char 
  8739 ;; Return value:  Size  Location     Type
  8740 ;;		None               void
  8741 ;; Registers used:
  8742 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8743 ;; Tracked objects:
  8744 ;;		On entry : 0/0
  8745 ;;		On exit  : 0/0
  8746 ;;		Unchanged: 0/0
  8747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8748 ;;      Params:         0       0       0       0
  8749 ;;      Locals:         0       1       0       0
  8750 ;;      Temps:          0       0       0       0
  8751 ;;      Totals:         0       1       0       0
  8752 ;;Total ram usage:        1 bytes
  8753 ;; Hardware stack levels used:    1
  8754 ;; Hardware stack levels required when called:    4
  8755 ;; This function calls:
  8756 ;;		_LedPointSelect
  8757 ;;		_setLED
  8758 ;; This function is called by:
  8759 ;;		_LED_Initialization
  8760 ;; This function uses a non-reentrant model
  8761 ;;
  8762                           
  8763                           
  8764                           ;psect for function _setLED_Initialization
  8765  0992                     _setLED_Initialization:	
  8766                           
  8767                           ;incstack = 0
  8768                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8769                           ;setLED_Initialization@led stored from wreg
  8770  0992  1283               	bcf	3,5	;RP0=0, select bank0
  8771  0993  1303               	bcf	3,6	;RP1=0, select bank0
  8772  0994  00DD               	movwf	setLED_Initialization@led
  8773                           
  8774                           ;LED_B1.c: 75: LedPointSelect(led);
  8775  0995  085D               	movf	setLED_Initialization@led,w
  8776  0996  158A  22CD  158A   	fcall	_LedPointSelect
  8777                           
  8778                           ;LED_B1.c: 76: LED->Enable = 1;
  8779  0999  0872               	movf	_LED,w
  8780  099A  0084               	movwf	4
  8781  099B  1383               	bcf	3,7	;select IRP bank0
  8782  099C  1400               	bsf	0,0
  8783                           
  8784                           ;LED_B1.c: 77: setLED(led, 0);
  8785  099D  1283               	bcf	3,5	;RP0=0, select bank0
  8786  099E  1303               	bcf	3,6	;RP1=0, select bank0
  8787  099F  01DB               	clrf	setLED@command
  8788  09A0  085D               	movf	setLED_Initialization@led,w
  8789  09A1  118A  27AF         	fcall	_setLED
  8790  09A3  0008               	return
  8791  09A4                     __end_of_setLED_Initialization:	
  8792                           
  8793                           	psect	text55
  8794  063D                     __ptext55:	
  8795 ;; *************** function _Exception_Main *****************
  8796 ;; Defined at:
  8797 ;;		line 499 in file "../src/Main_B1.c"
  8798 ;; Parameters:    Size  Location     Type
  8799 ;;		None
  8800 ;; Auto vars:     Size  Location     Type
  8801 ;;  i               2   19[BANK0 ] int 
  8802 ;;  i               2   17[BANK0 ] int 
  8803 ;;  status          1   16[BANK0 ] unsigned char 
  8804 ;;  error           1   15[BANK0 ] unsigned char 
  8805 ;;  count           1   14[BANK0 ] unsigned char 
  8806 ;;  lights          1   13[BANK0 ] unsigned char 
  8807 ;; Return value:  Size  Location     Type
  8808 ;;		None               void
  8809 ;; Registers used:
  8810 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8811 ;; Tracked objects:
  8812 ;;		On entry : 0/0
  8813 ;;		On exit  : 0/0
  8814 ;;		Unchanged: 0/0
  8815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8816 ;;      Params:         0       0       0       0
  8817 ;;      Locals:         0       8       0       0
  8818 ;;      Temps:          0       1       0       0
  8819 ;;      Totals:         0       9       0       0
  8820 ;;Total ram usage:        9 bytes
  8821 ;; Hardware stack levels used:    1
  8822 ;; Hardware stack levels required when called:    5
  8823 ;; This function calls:
  8824 ;;		_getAll_Lights_Line
  8825 ;;		_getLights_Status
  8826 ;;		_getMain_All_Error_Status
  8827 ;;		_getMain_All_LightsStatus
  8828 ;;		_setBuz
  8829 ;;		_setLED
  8830 ;;		_setLights_SwOff
  8831 ;;		_setLights_SwOn
  8832 ;; This function is called by:
  8833 ;;		_main
  8834 ;; This function uses a non-reentrant model
  8835 ;;
  8836                           
  8837                           
  8838                           ;psect for function _Exception_Main
  8839  063D                     _Exception_Main:	
  8840                           
  8841                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8842                           
  8843                           ;incstack = 0
  8844                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8845  063D  3000               	movlw	0
  8846  063E  158A  2468  118A   	fcall	_getMain_All_Error_Status
  8847  0641  1283               	bcf	3,5	;RP0=0, select bank0
  8848  0642  1303               	bcf	3,6	;RP1=0, select bank0
  8849  0643  00E6               	movwf	??_Exception_Main
  8850  0644  0866               	movf	??_Exception_Main,w
  8851  0645  00E9               	movwf	Exception_Main@error
  8852                           
  8853                           ;Main_B1.c: 501: char lights = 0, count = 2;
  8854  0646  01E7               	clrf	Exception_Main@lights
  8855  0647  3002               	movlw	2
  8856  0648  00E6               	movwf	??_Exception_Main
  8857  0649  0866               	movf	??_Exception_Main,w
  8858  064A  00E8               	movwf	Exception_Main@count
  8859                           
  8860                           ;Main_B1.c: 502: char status = 0;
  8861  064B  01EA               	clrf	Exception_Main@status
  8862                           
  8863                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8864  064C  1DB3               	btfss	_myMain+2,3
  8865  064D  2E5A               	goto	l7290
  8866                           
  8867                           ;Main_B1.c: 505: if (error == 0) {
  8868  064E  08E9               	movf	Exception_Main@error,f
  8869  064F  1D03               	skipz
  8870  0650  0008               	return
  8871                           
  8872                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8873  0651  11B3               	bcf	_myMain+2,3
  8874                           
  8875                           ;Main_B1.c: 509: setLED(99, 10);
  8876  0652  300A               	movlw	10
  8877  0653  00E6               	movwf	??_Exception_Main
  8878  0654  0866               	movf	??_Exception_Main,w
  8879  0655  00DB               	movwf	setLED@command
  8880  0656  3063               	movlw	99
  8881  0657  118A  27AF         	fcall	_setLED
  8882                           
  8883                           ;Main_B1.c: 521: }
  8884                           ;Main_B1.c: 522: } else {
  8885  0659  0008               	return
  8886  065A                     l7290:	
  8887                           
  8888                           ;Main_B1.c: 523: if (error != 0) {
  8889  065A  1283               	bcf	3,5	;RP0=0, select bank0
  8890  065B  1303               	bcf	3,6	;RP1=0, select bank0
  8891  065C  0869               	movf	Exception_Main@error,w
  8892  065D  1903               	btfsc	3,2
  8893  065E  0008               	return
  8894                           
  8895                           ;Main_B1.c: 524: myMain.Error_Run = 1;
  8896  065F  15B3               	bsf	_myMain+2,3
  8897                           
  8898                           ;Main_B1.c: 586: setLED(99, 11);
  8899  0660  300B               	movlw	11
  8900  0661  00E6               	movwf	??_Exception_Main
  8901  0662  0866               	movf	??_Exception_Main,w
  8902  0663  00DB               	movwf	setLED@command
  8903  0664  3063               	movlw	99
  8904  0665  118A  27AF  118A   	fcall	_setLED
  8905                           
  8906                           ;Main_B1.c: 590: switch (error) {
  8907  0668  2F06               	goto	l7330
  8908  0669                     l7296:	
  8909                           ;Main_B1.c: 591: case 1:
  8910                           
  8911                           
  8912                           ;Main_B1.c: 592: for (int i = 0; i < count; i++) {
  8913  0669  1283               	bcf	3,5	;RP0=0, select bank0
  8914  066A  1303               	bcf	3,6	;RP1=0, select bank0
  8915  066B  01EB               	clrf	Exception_Main@i
  8916  066C  01EC               	clrf	Exception_Main@i+1
  8917  066D                     l7304:	
  8918  066D  086C               	movf	Exception_Main@i+1,w
  8919  066E  3A80               	xorlw	128
  8920  066F  00E6               	movwf	??_Exception_Main
  8921  0670  3080               	movlw	128
  8922  0671  0266               	subwf	??_Exception_Main,w
  8923  0672  1D03               	skipz
  8924  0673  2E76               	goto	u9965
  8925  0674  0868               	movf	Exception_Main@count,w
  8926  0675  026B               	subwf	Exception_Main@i,w
  8927  0676                     u9965:	
  8928  0676  1803               	btfsc	3,0
  8929  0677  2E99               	goto	u9960
  8930                           
  8931                           ;Main_B1.c: 593: if (getLights_Status(i + 1) == 1) {
  8932  0678  1283               	bcf	3,5	;RP0=0, select bank0
  8933  0679  1303               	bcf	3,6	;RP1=0, select bank0
  8934  067A  086B               	movf	Exception_Main@i,w
  8935  067B  3E01               	addlw	1
  8936  067C  158A  2170  118A   	fcall	_getLights_Status
  8937  067F  3A01               	xorlw	1
  8938  0680  1D03               	skipz
  8939  0681  2E90               	goto	l7302
  8940                           
  8941                           ;Main_B1.c: 595: setLights_SwOn(i + 1);
  8942  0682  1283               	bcf	3,5	;RP0=0, select bank0
  8943  0683  1303               	bcf	3,6	;RP1=0, select bank0
  8944  0684  086B               	movf	Exception_Main@i,w
  8945  0685  3E01               	addlw	1
  8946  0686  158A  234A  118A   	fcall	_setLights_SwOn
  8947                           
  8948                           ;Main_B1.c: 596: setLights_SwOff(i + 1);
  8949  0689  1283               	bcf	3,5	;RP0=0, select bank0
  8950  068A  1303               	bcf	3,6	;RP1=0, select bank0
  8951  068B  086B               	movf	Exception_Main@i,w
  8952  068C  3E01               	addlw	1
  8953  068D  158A  2298  118A   	fcall	_setLights_SwOff
  8954  0690                     l7302:	
  8955  0690  3001               	movlw	1
  8956  0691  1283               	bcf	3,5	;RP0=0, select bank0
  8957  0692  1303               	bcf	3,6	;RP1=0, select bank0
  8958  0693  07EB               	addwf	Exception_Main@i,f
  8959  0694  1803               	skipnc
  8960  0695  0AEC               	incf	Exception_Main@i+1,f
  8961  0696  3000               	movlw	0
  8962  0697  07EC               	addwf	Exception_Main@i+1,f
  8963  0698  2E6D               	goto	l7304
  8964  0699                     u9960:	
  8965  0699  1283               	bcf	3,5	;RP0=0, select bank0
  8966  069A  1303               	bcf	3,6	;RP1=0, select bank0
  8967  069B  0008               	return
  8968  069C                     l7306:	
  8969                           ;Main_B1.c: 600: case 2:
  8970                           
  8971                           ;Main_B1.c: 597: }
  8972                           ;Main_B1.c: 598: }
  8973                           ;Main_B1.c: 599: break;
  8974                           
  8975                           
  8976                           ;Main_B1.c: 601: if (getMain_All_LightsStatus() == 1) {
  8977  069C  158A  2160  118A   	fcall	_getMain_All_LightsStatus
  8978  069F  3A01               	xorlw	1
  8979  06A0  1D03               	skipz
  8980  06A1  2EAC               	goto	l7310
  8981                           
  8982                           ;Main_B1.c: 602: setBuz(10, 300);
  8983  06A2  302C               	movlw	44
  8984  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  8985  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  8986  06A5  00E2               	movwf	setBuz@time
  8987  06A6  3001               	movlw	1
  8988  06A7  00E3               	movwf	setBuz@time+1
  8989  06A8  300A               	movlw	10
  8990  06A9  158A  256C  118A   	fcall	_setBuz
  8991  06AC                     l7310:	
  8992                           
  8993                           ;Main_B1.c: 603: }
  8994                           ;Main_B1.c: 605: for (int i = 0; i < count; i++) {
  8995  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  8996  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  8997  06AE  01ED               	clrf	Exception_Main@i_2426
  8998  06AF  01EE               	clrf	Exception_Main@i_2426+1
  8999  06B0                     l7318:	
  9000  06B0  086E               	movf	Exception_Main@i_2426+1,w
  9001  06B1  3A80               	xorlw	128
  9002  06B2  00E6               	movwf	??_Exception_Main
  9003  06B3  3080               	movlw	128
  9004  06B4  0266               	subwf	??_Exception_Main,w
  9005  06B5  1D03               	skipz
  9006  06B6  2EB9               	goto	u9995
  9007  06B7  0868               	movf	Exception_Main@count,w
  9008  06B8  026D               	subwf	Exception_Main@i_2426,w
  9009  06B9                     u9995:	
  9010  06B9  1803               	btfsc	3,0
  9011  06BA  2EDC               	goto	u9990
  9012                           
  9013                           ;Main_B1.c: 606: if (getLights_Status(i + 1) == 1) {
  9014  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  9015  06BC  1303               	bcf	3,6	;RP1=0, select bank0
  9016  06BD  086D               	movf	Exception_Main@i_2426,w
  9017  06BE  3E01               	addlw	1
  9018  06BF  158A  2170  118A   	fcall	_getLights_Status
  9019  06C2  3A01               	xorlw	1
  9020  06C3  1D03               	skipz
  9021  06C4  2ED3               	goto	l7316
  9022                           
  9023                           ;Main_B1.c: 607: setLights_SwOn(i + 1);
  9024  06C5  1283               	bcf	3,5	;RP0=0, select bank0
  9025  06C6  1303               	bcf	3,6	;RP1=0, select bank0
  9026  06C7  086D               	movf	Exception_Main@i_2426,w
  9027  06C8  3E01               	addlw	1
  9028  06C9  158A  234A  118A   	fcall	_setLights_SwOn
  9029                           
  9030                           ;Main_B1.c: 608: setLights_SwOff(i + 1);
  9031  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  9032  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  9033  06CE  086D               	movf	Exception_Main@i_2426,w
  9034  06CF  3E01               	addlw	1
  9035  06D0  158A  2298  118A   	fcall	_setLights_SwOff
  9036  06D3                     l7316:	
  9037  06D3  3001               	movlw	1
  9038  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  9039  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  9040  06D6  07ED               	addwf	Exception_Main@i_2426,f
  9041  06D7  1803               	skipnc
  9042  06D8  0AEE               	incf	Exception_Main@i_2426+1,f
  9043  06D9  3000               	movlw	0
  9044  06DA  07EE               	addwf	Exception_Main@i_2426+1,f
  9045  06DB  2EB0               	goto	l7318
  9046  06DC                     u9990:	
  9047  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  9048  06DD  1303               	bcf	3,6	;RP1=0, select bank0
  9049  06DE  0008               	return
  9050  06DF                     l7320:	
  9051                           ;Main_B1.c: 612: case 3:
  9052                           
  9053                           ;Main_B1.c: 609: }
  9054                           ;Main_B1.c: 610: }
  9055                           ;Main_B1.c: 611: break;
  9056                           
  9057                           
  9058                           ;Main_B1.c: 613: status = getAll_Lights_Line();
  9059  06DF  158A  2150  118A   	fcall	_getAll_Lights_Line
  9060  06E2  1283               	bcf	3,5	;RP0=0, select bank0
  9061  06E3  1303               	bcf	3,6	;RP1=0, select bank0
  9062  06E4  00E6               	movwf	??_Exception_Main
  9063  06E5  0866               	movf	??_Exception_Main,w
  9064  06E6  00EA               	movwf	Exception_Main@status
  9065                           
  9066                           ;Main_B1.c: 615: if (getLights_Status(status) == 1) {
  9067  06E7  086A               	movf	Exception_Main@status,w
  9068  06E8  158A  2170  118A   	fcall	_getLights_Status
  9069  06EB  3A01               	xorlw	1
  9070  06EC  1D03               	skipz
  9071  06ED  2EFA               	goto	l7326
  9072                           
  9073                           ;Main_B1.c: 616: setLights_SwOn(status);
  9074  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  9075  06EF  1303               	bcf	3,6	;RP1=0, select bank0
  9076  06F0  086A               	movf	Exception_Main@status,w
  9077  06F1  158A  234A  118A   	fcall	_setLights_SwOn
  9078                           
  9079                           ;Main_B1.c: 617: setLights_SwOff(status);
  9080  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  9081  06F5  1303               	bcf	3,6	;RP1=0, select bank0
  9082  06F6  086A               	movf	Exception_Main@status,w
  9083  06F7  158A  2298  118A   	fcall	_setLights_SwOff
  9084  06FA                     l7326:	
  9085                           
  9086                           ;Main_B1.c: 619: }
  9087                           ;Main_B1.c: 620: setBuz(5, 300);
  9088  06FA  302C               	movlw	44
  9089  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  9090  06FC  1303               	bcf	3,6	;RP1=0, select bank0
  9091  06FD  00E2               	movwf	setBuz@time
  9092  06FE  3001               	movlw	1
  9093  06FF  00E3               	movwf	setBuz@time+1
  9094  0700  3005               	movlw	5
  9095  0701  158A  256C         	fcall	_setBuz
  9096                           
  9097                           ;Main_B1.c: 621: break;
  9098  0703  1283               	bcf	3,5	;RP0=0, select bank0
  9099  0704  1303               	bcf	3,6	;RP1=0, select bank0
  9100  0705  0008               	return
  9101  0706                     l7330:	
  9102                           ;Main_B1.c: 622: }
  9103                           
  9104  0706  1283               	bcf	3,5	;RP0=0, select bank0
  9105  0707  1303               	bcf	3,6	;RP1=0, select bank0
  9106  0708  0869               	movf	Exception_Main@error,w
  9107                           
  9108                           ; Switch size 1, requested type "space"
  9109                           ; Number of cases is 3, Range of values is 1 to 3
  9110                           ; switch strategies available:
  9111                           ; Name         Instructions Cycles
  9112                           ; simple_byte           10     6 (average)
  9113                           ; direct_byte           16    10 (fixed)
  9114                           ; jumptable            263     9 (fixed)
  9115                           ;	Chosen strategy is simple_byte
  9116  0709  3A01               	xorlw	1	; case 1
  9117  070A  1903               	skipnz
  9118  070B  2E69               	goto	l7296
  9119  070C  3A03               	xorlw	3	; case 2
  9120  070D  1903               	skipnz
  9121  070E  2E9C               	goto	l7306
  9122  070F  3A01               	xorlw	1	; case 3
  9123  0710  1903               	skipnz
  9124  0711  2EDF               	goto	l7320
  9125  0712  2F14               	goto	l749
  9126  0713  0008               	return
  9127  0714                     l749:	
  9128  0714  0008               	return
  9129  0715                     __end_of_Exception_Main:	
  9130                           
  9131                           	psect	text56
  9132  0B4A                     __ptext56:	
  9133 ;; *************** function _setLights_SwOn *****************
  9134 ;; Defined at:
  9135 ;;		line 410 in file "../src/TriacRelay_B1.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;  sw              1    wreg     unsigned char 
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;  sw              1    4[BANK0 ] unsigned char 
  9140 ;; Return value:  Size  Location     Type
  9141 ;;		None               void
  9142 ;; Registers used:
  9143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9144 ;; Tracked objects:
  9145 ;;		On entry : 0/0
  9146 ;;		On exit  : 0/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9149 ;;      Params:         0       0       0       0
  9150 ;;      Locals:         0       1       0       0
  9151 ;;      Temps:          0       0       0       0
  9152 ;;      Totals:         0       1       0       0
  9153 ;;Total ram usage:        1 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; Hardware stack levels required when called:    4
  9156 ;; This function calls:
  9157 ;;		_LightsPointSelect
  9158 ;;		_getLights_Status
  9159 ;;		_setLights_Trigger
  9160 ;; This function is called by:
  9161 ;;		_Exception_Main
  9162 ;;		_PIR_Main
  9163 ;;		_setSw_Main
  9164 ;; This function uses a non-reentrant model
  9165 ;;
  9166                           
  9167                           
  9168                           ;psect for function _setLights_SwOn
  9169  0B4A                     _setLights_SwOn:	
  9170                           
  9171                           ;incstack = 0
  9172                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9173                           ;setLights_SwOn@sw stored from wreg
  9174  0B4A  1283               	bcf	3,5	;RP0=0, select bank0
  9175  0B4B  1303               	bcf	3,6	;RP1=0, select bank0
  9176  0B4C  00DE               	movwf	setLights_SwOn@sw
  9177                           
  9178                           ;TriacRelay_B1.c: 411: LightsPointSelect(sw);
  9179  0B4D  085E               	movf	setLights_SwOn@sw,w
  9180  0B4E  158A  21DF  158A   	fcall	_LightsPointSelect
  9181                           
  9182                           ;TriacRelay_B1.c: 414: Lights->SwFlag = 1;
  9183  0B51  0A74               	incf	_Lights,w
  9184  0B52  0084               	movwf	4
  9185  0B53  1383               	bcf	3,7	;select IRP bank0
  9186  0B54  1500               	bsf	0,2
  9187                           
  9188                           ;TriacRelay_B1.c: 415: if (getLights_Status(sw) == 0) {
  9189  0B55  1283               	bcf	3,5	;RP0=0, select bank0
  9190  0B56  1303               	bcf	3,6	;RP1=0, select bank0
  9191  0B57  085E               	movf	setLights_SwOn@sw,w
  9192  0B58  158A  2170  158A   	fcall	_getLights_Status
  9193  0B5B  3800               	iorlw	0
  9194  0B5C  1D03               	skipz
  9195  0B5D  2B6A               	goto	l6434
  9196                           
  9197                           ;TriacRelay_B1.c: 416: Lights->SwStatus = 1;
  9198  0B5E  0A74               	incf	_Lights,w
  9199  0B5F  0084               	movwf	4
  9200  0B60  1383               	bcf	3,7	;select IRP bank0
  9201  0B61  1580               	bsf	0,3
  9202                           
  9203                           ;TriacRelay_B1.c: 417: setLights_Trigger(sw, 1);
  9204  0B62  1283               	bcf	3,5	;RP0=0, select bank0
  9205  0B63  1303               	bcf	3,6	;RP1=0, select bank0
  9206  0B64  01DB               	clrf	setLights_Trigger@command
  9207  0B65  0ADB               	incf	setLights_Trigger@command,f
  9208  0B66  085E               	movf	setLights_SwOn@sw,w
  9209  0B67  158A  22B2         	fcall	_setLights_Trigger
  9210                           
  9211                           ;TriacRelay_B1.c: 418: } else {
  9212  0B69  0008               	return
  9213  0B6A                     l6434:	
  9214                           
  9215                           ;TriacRelay_B1.c: 419: Lights->SwStatus = 0;
  9216  0B6A  0A74               	incf	_Lights,w
  9217  0B6B  0084               	movwf	4
  9218  0B6C  1383               	bcf	3,7	;select IRP bank0
  9219  0B6D  1180               	bcf	0,3
  9220  0B6E  0008               	return
  9221  0B6F                     __end_of_setLights_SwOn:	
  9222                           
  9223                           	psect	text57
  9224  0970                     __ptext57:	
  9225 ;; *************** function _getLights_Status *****************
  9226 ;; Defined at:
  9227 ;;		line 271 in file "../src/TriacRelay_B1.c"
  9228 ;; Parameters:    Size  Location     Type
  9229 ;;  lights          1    wreg     unsigned char 
  9230 ;; Auto vars:     Size  Location     Type
  9231 ;;  lights          1    1[BANK0 ] unsigned char 
  9232 ;;  status          1    2[BANK0 ] unsigned char 
  9233 ;; Return value:  Size  Location     Type
  9234 ;;                  1    wreg      unsigned char 
  9235 ;; Registers used:
  9236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9237 ;; Tracked objects:
  9238 ;;		On entry : 0/0
  9239 ;;		On exit  : 0/0
  9240 ;;		Unchanged: 0/0
  9241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9242 ;;      Params:         0       0       0       0
  9243 ;;      Locals:         0       2       0       0
  9244 ;;      Temps:          0       0       0       0
  9245 ;;      Totals:         0       2       0       0
  9246 ;;Total ram usage:        2 bytes
  9247 ;; Hardware stack levels used:    1
  9248 ;; Hardware stack levels required when called:    3
  9249 ;; This function calls:
  9250 ;;		_LightsPointSelect
  9251 ;; This function is called by:
  9252 ;;		_Exception_Main
  9253 ;;		_PIR_Main
  9254 ;;		_setLights_SwOn
  9255 ;;		_setMain_Exception
  9256 ;;		_setLights_ErrorClose
  9257 ;; This function uses a non-reentrant model
  9258 ;;
  9259                           
  9260                           
  9261                           ;psect for function _getLights_Status
  9262  0970                     _getLights_Status:	
  9263                           
  9264                           ;incstack = 0
  9265                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9266                           ;getLights_Status@lights stored from wreg
  9267  0970  1283               	bcf	3,5	;RP0=0, select bank0
  9268  0971  1303               	bcf	3,6	;RP1=0, select bank0
  9269  0972  00DB               	movwf	getLights_Status@lights
  9270                           
  9271                           ;TriacRelay_B1.c: 272: LightsPointSelect(lights);
  9272  0973  085B               	movf	getLights_Status@lights,w
  9273  0974  158A  21DF         	fcall	_LightsPointSelect
  9274                           
  9275                           ;TriacRelay_B1.c: 273: char status = Lights->Status == 1 ? 1 : 0;
  9276  0976  0874               	movf	_Lights,w
  9277  0977  0084               	movwf	4
  9278  0978  3000               	movlw	0
  9279  0979  1383               	bcf	3,7	;select IRP bank0
  9280  097A  1900               	btfsc	0,2
  9281  097B  3001               	movlw	1
  9282  097C  1283               	bcf	3,5	;RP0=0, select bank0
  9283  097D  1303               	bcf	3,6	;RP1=0, select bank0
  9284  097E  00DC               	movwf	getLights_Status@status
  9285                           
  9286                           ;TriacRelay_B1.c: 274: return status;
  9287  097F  085C               	movf	getLights_Status@status,w
  9288  0980  0008               	return
  9289  0981                     __end_of_getLights_Status:	
  9290                           
  9291                           	psect	text58
  9292  0A98                     __ptext58:	
  9293 ;; *************** function _setLights_SwOff *****************
  9294 ;; Defined at:
  9295 ;;		line 438 in file "../src/TriacRelay_B1.c"
  9296 ;; Parameters:    Size  Location     Type
  9297 ;;  sw              1    wreg     unsigned char 
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;  sw              1    4[BANK0 ] unsigned char 
  9300 ;; Return value:  Size  Location     Type
  9301 ;;		None               void
  9302 ;; Registers used:
  9303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9304 ;; Tracked objects:
  9305 ;;		On entry : 0/0
  9306 ;;		On exit  : 0/0
  9307 ;;		Unchanged: 0/0
  9308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9309 ;;      Params:         0       0       0       0
  9310 ;;      Locals:         0       1       0       0
  9311 ;;      Temps:          0       0       0       0
  9312 ;;      Totals:         0       1       0       0
  9313 ;;Total ram usage:        1 bytes
  9314 ;; Hardware stack levels used:    1
  9315 ;; Hardware stack levels required when called:    4
  9316 ;; This function calls:
  9317 ;;		_LightsPointSelect
  9318 ;;		_setLights_Trigger
  9319 ;; This function is called by:
  9320 ;;		_Exception_Main
  9321 ;;		_PIR_Main
  9322 ;;		_setSw_Main
  9323 ;; This function uses a non-reentrant model
  9324 ;;
  9325                           
  9326                           
  9327                           ;psect for function _setLights_SwOff
  9328  0A98                     _setLights_SwOff:	
  9329                           
  9330                           ;incstack = 0
  9331                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9332                           ;setLights_SwOff@sw stored from wreg
  9333  0A98  1283               	bcf	3,5	;RP0=0, select bank0
  9334  0A99  1303               	bcf	3,6	;RP1=0, select bank0
  9335  0A9A  00DE               	movwf	setLights_SwOff@sw
  9336                           
  9337                           ;TriacRelay_B1.c: 440: LightsPointSelect(sw);
  9338  0A9B  085E               	movf	setLights_SwOff@sw,w
  9339  0A9C  158A  21DF  158A   	fcall	_LightsPointSelect
  9340                           
  9341                           ;TriacRelay_B1.c: 442: if (Lights->SwFlag == 1) {
  9342  0A9F  0A74               	incf	_Lights,w
  9343  0AA0  0084               	movwf	4
  9344  0AA1  1383               	bcf	3,7	;select IRP bank0
  9345  0AA2  1D00               	btfss	0,2
  9346  0AA3  0008               	return
  9347                           
  9348                           ;TriacRelay_B1.c: 443: Lights->SwFlag = 0;
  9349  0AA4  0A74               	incf	_Lights,w
  9350  0AA5  0084               	movwf	4
  9351  0AA6  1100               	bcf	0,2
  9352                           
  9353                           ;TriacRelay_B1.c: 444: if (Lights->SwStatus == 0) {
  9354  0AA7  0A74               	incf	_Lights,w
  9355  0AA8  0084               	movwf	4
  9356  0AA9  1980               	btfsc	0,3
  9357  0AAA  0008               	return
  9358                           
  9359                           ;TriacRelay_B1.c: 445: setLights_Trigger(sw, 0);
  9360  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  9361  0AAC  1303               	bcf	3,6	;RP1=0, select bank0
  9362  0AAD  01DB               	clrf	setLights_Trigger@command
  9363  0AAE  085E               	movf	setLights_SwOff@sw,w
  9364  0AAF  158A  22B2         	fcall	_setLights_Trigger
  9365  0AB1  0008               	return
  9366  0AB2                     __end_of_setLights_SwOff:	
  9367                           
  9368                           	psect	text59
  9369  0AB2                     __ptext59:	
  9370 ;; *************** function _setLights_Trigger *****************
  9371 ;; Defined at:
  9372 ;;		line 278 in file "../src/TriacRelay_B1.c"
  9373 ;; Parameters:    Size  Location     Type
  9374 ;;  lights          1    wreg     unsigned char 
  9375 ;;  command         1    1[BANK0 ] unsigned char 
  9376 ;; Auto vars:     Size  Location     Type
  9377 ;;  lights          1    3[BANK0 ] unsigned char 
  9378 ;; Return value:  Size  Location     Type
  9379 ;;		None               void
  9380 ;; Registers used:
  9381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9382 ;; Tracked objects:
  9383 ;;		On entry : 0/0
  9384 ;;		On exit  : 0/0
  9385 ;;		Unchanged: 0/0
  9386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9387 ;;      Params:         0       1       0       0
  9388 ;;      Locals:         0       1       0       0
  9389 ;;      Temps:          0       1       0       0
  9390 ;;      Totals:         0       3       0       0
  9391 ;;Total ram usage:        3 bytes
  9392 ;; Hardware stack levels used:    1
  9393 ;; Hardware stack levels required when called:    3
  9394 ;; This function calls:
  9395 ;;		_LightsPointSelect
  9396 ;; This function is called by:
  9397 ;;		_setLights_SwOn
  9398 ;;		_setLights_SwOff
  9399 ;;		_setMain_Exception
  9400 ;;		_setLights_ErrorClose
  9401 ;; This function uses a non-reentrant model
  9402 ;;
  9403                           
  9404                           
  9405                           ;psect for function _setLights_Trigger
  9406  0AB2                     _setLights_Trigger:	
  9407                           
  9408                           ;incstack = 0
  9409                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9410                           ;setLights_Trigger@lights stored from wreg
  9411  0AB2  1283               	bcf	3,5	;RP0=0, select bank0
  9412  0AB3  1303               	bcf	3,6	;RP1=0, select bank0
  9413  0AB4  00DD               	movwf	setLights_Trigger@lights
  9414                           
  9415                           ;TriacRelay_B1.c: 279: LightsPointSelect(lights);
  9416  0AB5  085D               	movf	setLights_Trigger@lights,w
  9417  0AB6  158A  21DF         	fcall	_LightsPointSelect
  9418                           
  9419                           ;TriacRelay_B1.c: 280: Lights->Trigger = 1;
  9420  0AB8  0874               	movf	_Lights,w
  9421  0AB9  0084               	movwf	4
  9422  0ABA  1383               	bcf	3,7	;select IRP bank0
  9423  0ABB  1580               	bsf	0,3
  9424                           
  9425                           ;TriacRelay_B1.c: 281: Lights->Switch = command == 1 ? 1 : 0;
  9426  0ABC  1283               	bcf	3,5	;RP0=0, select bank0
  9427  0ABD  1303               	bcf	3,6	;RP1=0, select bank0
  9428  0ABE  085B               	movf	setLights_Trigger@command,w
  9429  0ABF  3A01               	xorlw	1
  9430  0AC0  3000               	movlw	0
  9431  0AC1  1903               	skipnz
  9432  0AC2  3001               	movlw	1
  9433  0AC3  00DC               	movwf	??_setLights_Trigger
  9434  0AC4  0874               	movf	_Lights,w
  9435  0AC5  0084               	movwf	4
  9436  0AC6  0EDC               	swapf	??_setLights_Trigger,f
  9437  0AC7  0800               	movf	0,w
  9438  0AC8  065C               	xorwf	??_setLights_Trigger,w
  9439  0AC9  39EF               	andlw	-17
  9440  0ACA  065C               	xorwf	??_setLights_Trigger,w
  9441  0ACB  0080               	movwf	0
  9442  0ACC  0008               	return
  9443  0ACD                     __end_of_setLights_Trigger:	
  9444                           
  9445                           	psect	text60
  9446  09DF                     __ptext60:	
  9447 ;; *************** function _LightsPointSelect *****************
  9448 ;; Defined at:
  9449 ;;		line 10 in file "../src/TriacRelay_B1.c"
  9450 ;; Parameters:    Size  Location     Type
  9451 ;;  lights          1    wreg     unsigned char 
  9452 ;; Auto vars:     Size  Location     Type
  9453 ;;  lights          1    0[BANK0 ] unsigned char 
  9454 ;; Return value:  Size  Location     Type
  9455 ;;		None               void
  9456 ;; Registers used:
  9457 ;;		wreg
  9458 ;; Tracked objects:
  9459 ;;		On entry : 0/0
  9460 ;;		On exit  : 0/0
  9461 ;;		Unchanged: 0/0
  9462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9463 ;;      Params:         0       0       0       0
  9464 ;;      Locals:         0       1       0       0
  9465 ;;      Temps:          1       0       0       0
  9466 ;;      Totals:         1       1       0       0
  9467 ;;Total ram usage:        2 bytes
  9468 ;; Hardware stack levels used:    1
  9469 ;; Hardware stack levels required when called:    2
  9470 ;; This function calls:
  9471 ;;		Nothing
  9472 ;; This function is called by:
  9473 ;;		_setLights_Initialization
  9474 ;;		_setLights_Main
  9475 ;;		_Lights_Control
  9476 ;;		_getLights_Status
  9477 ;;		_setLights_Trigger
  9478 ;;		_setLights_SwOn
  9479 ;;		_setLights_SwOff
  9480 ;; This function uses a non-reentrant model
  9481 ;;
  9482                           
  9483                           
  9484                           ;psect for function _LightsPointSelect
  9485  09DF                     _LightsPointSelect:	
  9486                           
  9487                           ;incstack = 0
  9488                           ; Regs used in _LightsPointSelect: [wreg]
  9489                           ;LightsPointSelect@lights stored from wreg
  9490  09DF  1283               	bcf	3,5	;RP0=0, select bank0
  9491  09E0  1303               	bcf	3,6	;RP1=0, select bank0
  9492  09E1  00DA               	movwf	LightsPointSelect@lights
  9493                           
  9494                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  9495  09E2  085A               	movf	LightsPointSelect@lights,w
  9496  09E3  3A01               	xorlw	1
  9497  09E4  1D03               	skipz
  9498  09E5  29EB               	goto	l6316
  9499                           
  9500                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  9501  09E6  3048               	movlw	_Lights1& (0+255)
  9502  09E7  00F9               	movwf	??_LightsPointSelect
  9503  09E8  0879               	movf	??_LightsPointSelect,w
  9504  09E9  00F4               	movwf	_Lights
  9505                           
  9506                           ;TriacRelay_B1.c: 15: }
  9507  09EA  0008               	return
  9508  09EB                     l6316:	
  9509                           
  9510                           ;TriacRelay_B1.c: 19: else if (lights == 2) {
  9511  09EB  085A               	movf	LightsPointSelect@lights,w
  9512  09EC  3A02               	xorlw	2
  9513  09ED  1D03               	skipz
  9514  09EE  0008               	return
  9515                           
  9516                           ;TriacRelay_B1.c: 20: Lights = &Lights2;
  9517  09EF  304D               	movlw	_Lights2& (0+255)
  9518  09F0  00F9               	movwf	??_LightsPointSelect
  9519  09F1  0879               	movf	??_LightsPointSelect,w
  9520  09F2  00F4               	movwf	_Lights
  9521  09F3  0008               	return
  9522  09F4                     __end_of_LightsPointSelect:	
  9523                           
  9524                           	psect	text61
  9525  07AF                     __ptext61:	
  9526 ;; *************** function _setLED *****************
  9527 ;; Defined at:
  9528 ;;		line 81 in file "../src/LED_B1.c"
  9529 ;; Parameters:    Size  Location     Type
  9530 ;;  led             1    wreg     unsigned char 
  9531 ;;  command         1    1[BANK0 ] unsigned char 
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;  led             1    2[BANK0 ] unsigned char 
  9534 ;; Return value:  Size  Location     Type
  9535 ;;		None               void
  9536 ;; Registers used:
  9537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9538 ;; Tracked objects:
  9539 ;;		On entry : 0/0
  9540 ;;		On exit  : 0/0
  9541 ;;		Unchanged: 0/0
  9542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9543 ;;      Params:         0       1       0       0
  9544 ;;      Locals:         0       1       0       0
  9545 ;;      Temps:          0       0       0       0
  9546 ;;      Totals:         0       2       0       0
  9547 ;;Total ram usage:        2 bytes
  9548 ;; Hardware stack levels used:    1
  9549 ;; Hardware stack levels required when called:    3
  9550 ;; This function calls:
  9551 ;;		_LedPointSelect
  9552 ;; This function is called by:
  9553 ;;		_setLED_Initialization
  9554 ;;		_Exception_Main
  9555 ;;		_setSw_Main
  9556 ;;		_setLights
  9557 ;;		_setMain_Exception
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           
  9562                           ;psect for function _setLED
  9563  07AF                     _setLED:	
  9564                           
  9565                           ;incstack = 0
  9566                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9567                           ;setLED@led stored from wreg
  9568  07AF  1283               	bcf	3,5	;RP0=0, select bank0
  9569  07B0  1303               	bcf	3,6	;RP1=0, select bank0
  9570  07B1  00DC               	movwf	setLED@led
  9571                           
  9572                           ;LED_B1.c: 82: LedPointSelect(led);
  9573  07B2  085C               	movf	setLED@led,w
  9574  07B3  158A  22CD  118A   	fcall	_LedPointSelect
  9575                           
  9576                           ;LED_B1.c: 83: if (command == 0) {
  9577  07B6  1283               	bcf	3,5	;RP0=0, select bank0
  9578  07B7  1303               	bcf	3,6	;RP1=0, select bank0
  9579  07B8  08DB               	movf	setLED@command,f
  9580  07B9  1D03               	skipz
  9581  07BA  2FC8               	goto	l6336
  9582                           
  9583                           ;LED_B1.c: 85: if (led == 1) {
  9584  07BB  085C               	movf	setLED@led,w
  9585  07BC  3A01               	xorlw	1
  9586  07BD  1D03               	skipz
  9587  07BE  2FC0               	goto	l6328
  9588                           
  9589                           ;LED_B1.c: 89: RC7 = 1;
  9590  07BF  1787               	bsf	7,7	;volatile
  9591  07C0                     l6328:	
  9592                           
  9593                           ;LED_B1.c: 91: }
  9594                           ;LED_B1.c: 94: if (led == 2) {
  9595  07C0  085C               	movf	setLED@led,w
  9596  07C1  3A02               	xorlw	2
  9597  07C2  1903               	btfsc	3,2
  9598                           
  9599                           ;LED_B1.c: 98: RC6 = 1;
  9600  07C3  1707               	bsf	7,6	;volatile
  9601                           
  9602                           ;LED_B1.c: 100: }
  9603                           ;LED_B1.c: 112: if (led == 99) {
  9604  07C4  085C               	movf	setLED@led,w
  9605  07C5  3A63               	xorlw	99
  9606  07C6  1903               	btfsc	3,2
  9607                           
  9608                           ;LED_B1.c: 116: RC1 = 1;
  9609  07C7  1487               	bsf	7,1	;volatile
  9610  07C8                     l6336:	
  9611                           
  9612                           ;LED_B1.c: 118: }
  9613                           ;LED_B1.c: 120: }
  9614                           ;LED_B1.c: 121: if (command == 1) {
  9615  07C8  085B               	movf	setLED@command,w
  9616  07C9  3A01               	xorlw	1
  9617  07CA  1D03               	skipz
  9618  07CB  2FD9               	goto	l6350
  9619                           
  9620                           ;LED_B1.c: 123: if (led == 1) {
  9621  07CC  085C               	movf	setLED@led,w
  9622  07CD  3A01               	xorlw	1
  9623  07CE  1D03               	skipz
  9624  07CF  2FD1               	goto	l6342
  9625                           
  9626                           ;LED_B1.c: 127: RC7 = 0;
  9627  07D0  1387               	bcf	7,7	;volatile
  9628  07D1                     l6342:	
  9629                           
  9630                           ;LED_B1.c: 129: }
  9631                           ;LED_B1.c: 132: if (led == 2) {
  9632  07D1  085C               	movf	setLED@led,w
  9633  07D2  3A02               	xorlw	2
  9634  07D3  1903               	btfsc	3,2
  9635                           
  9636                           ;LED_B1.c: 136: RC6 = 0;
  9637  07D4  1307               	bcf	7,6	;volatile
  9638                           
  9639                           ;LED_B1.c: 138: }
  9640                           ;LED_B1.c: 150: if (led == 99) {
  9641  07D5  085C               	movf	setLED@led,w
  9642  07D6  3A63               	xorlw	99
  9643  07D7  1903               	btfsc	3,2
  9644                           
  9645                           ;LED_B1.c: 154: RC1 = 0;
  9646  07D8  1087               	bcf	7,1	;volatile
  9647  07D9                     l6350:	
  9648                           
  9649                           ;LED_B1.c: 156: }
  9650                           ;LED_B1.c: 158: }
  9651                           ;LED_B1.c: 159: if (command == 10) {
  9652  07D9  085B               	movf	setLED@command,w
  9653  07DA  3A0A               	xorlw	10
  9654  07DB  1D03               	skipz
  9655  07DC  2FF4               	goto	l6368
  9656                           
  9657                           ;LED_B1.c: 160: LED->GO = 0;
  9658  07DD  0872               	movf	_LED,w
  9659  07DE  0084               	movwf	4
  9660  07DF  1383               	bcf	3,7	;select IRP bank0
  9661  07E0  1080               	bcf	0,1
  9662                           
  9663                           ;LED_B1.c: 161: LED->Time = 0;
  9664  07E1  0A72               	incf	_LED,w
  9665  07E2  0084               	movwf	4
  9666  07E3  0180               	clrf	0
  9667  07E4  0A84               	incf	4,f
  9668  07E5  0180               	clrf	0
  9669                           
  9670                           ;LED_B1.c: 163: if (led == 1) {
  9671  07E6  085C               	movf	setLED@led,w
  9672  07E7  3A01               	xorlw	1
  9673  07E8  1D03               	skipz
  9674  07E9  2FEC               	goto	l6360
  9675                           
  9676                           ;LED_B1.c: 167: RC7 = 1;
  9677  07EA  1787               	bsf	7,7	;volatile
  9678                           
  9679                           ;LED_B1.c: 169: }
  9680  07EB  2FF0               	goto	l6364
  9681  07EC                     l6360:	
  9682                           
  9683                           ;LED_B1.c: 172: else if (led == 2) {
  9684  07EC  085C               	movf	setLED@led,w
  9685  07ED  3A02               	xorlw	2
  9686  07EE  1903               	btfsc	3,2
  9687                           
  9688                           ;LED_B1.c: 176: RC6 = 1;
  9689  07EF  1707               	bsf	7,6	;volatile
  9690  07F0                     l6364:	
  9691                           
  9692                           ;LED_B1.c: 178: }
  9693                           ;LED_B1.c: 190: if (led == 99) {
  9694  07F0  085C               	movf	setLED@led,w
  9695  07F1  3A63               	xorlw	99
  9696  07F2  1903               	btfsc	3,2
  9697                           
  9698                           ;LED_B1.c: 194: RC1 = 1;
  9699  07F3  1487               	bsf	7,1	;volatile
  9700  07F4                     l6368:	
  9701                           
  9702                           ;LED_B1.c: 196: }
  9703                           ;LED_B1.c: 198: }
  9704                           ;LED_B1.c: 199: if (command == 11) {
  9705  07F4  085B               	movf	setLED@command,w
  9706  07F5  3A0B               	xorlw	11
  9707  07F6  1D03               	skipz
  9708  07F7  0008               	return
  9709                           
  9710                           ;LED_B1.c: 200: LED->GO = 1;
  9711  07F8  0872               	movf	_LED,w
  9712  07F9  0084               	movwf	4
  9713  07FA  1383               	bcf	3,7	;select IRP bank0
  9714  07FB  1480               	bsf	0,1
  9715  07FC  0008               	return
  9716  07FD                     __end_of_setLED:	
  9717                           
  9718                           	psect	text62
  9719  0ACD                     __ptext62:	
  9720 ;; *************** function _LedPointSelect *****************
  9721 ;; Defined at:
  9722 ;;		line 7 in file "../src/LED_B1.c"
  9723 ;; Parameters:    Size  Location     Type
  9724 ;;  led             1    wreg     unsigned char 
  9725 ;; Auto vars:     Size  Location     Type
  9726 ;;  led             1    0[BANK0 ] unsigned char 
  9727 ;; Return value:  Size  Location     Type
  9728 ;;		None               void
  9729 ;; Registers used:
  9730 ;;		wreg
  9731 ;; Tracked objects:
  9732 ;;		On entry : 0/0
  9733 ;;		On exit  : 0/0
  9734 ;;		Unchanged: 0/0
  9735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9736 ;;      Params:         0       0       0       0
  9737 ;;      Locals:         0       1       0       0
  9738 ;;      Temps:          1       0       0       0
  9739 ;;      Totals:         1       1       0       0
  9740 ;;Total ram usage:        2 bytes
  9741 ;; Hardware stack levels used:    1
  9742 ;; Hardware stack levels required when called:    2
  9743 ;; This function calls:
  9744 ;;		Nothing
  9745 ;; This function is called by:
  9746 ;;		_setLED_Initialization
  9747 ;;		_setLED
  9748 ;;		_setLED_Main
  9749 ;; This function uses a non-reentrant model
  9750 ;;
  9751                           
  9752                           
  9753                           ;psect for function _LedPointSelect
  9754  0ACD                     _LedPointSelect:	
  9755                           
  9756                           ;incstack = 0
  9757                           ; Regs used in _LedPointSelect: [wreg]
  9758                           ;LedPointSelect@led stored from wreg
  9759  0ACD  1283               	bcf	3,5	;RP0=0, select bank0
  9760  0ACE  1303               	bcf	3,6	;RP1=0, select bank0
  9761  0ACF  00DA               	movwf	LedPointSelect@led
  9762                           
  9763                           ;LED_B1.c: 9: if (led == 1) {
  9764  0AD0  085A               	movf	LedPointSelect@led,w
  9765  0AD1  3A01               	xorlw	1
  9766  0AD2  1D03               	skipz
  9767  0AD3  2AD8               	goto	l349
  9768                           
  9769                           ;LED_B1.c: 10: LED = &VarLED1;
  9770  0AD4  3056               	movlw	_VarLED1& (0+255)
  9771  0AD5  00F9               	movwf	??_LedPointSelect
  9772  0AD6  0879               	movf	??_LedPointSelect,w
  9773  0AD7  00F2               	movwf	_LED
  9774  0AD8                     l349:	
  9775                           
  9776                           ;LED_B1.c: 11: }
  9777                           ;LED_B1.c: 14: if (led == 2) {
  9778  0AD8  085A               	movf	LedPointSelect@led,w
  9779  0AD9  3A02               	xorlw	2
  9780  0ADA  1D03               	skipz
  9781  0ADB  2AE0               	goto	l350
  9782                           
  9783                           ;LED_B1.c: 15: LED = &VarLED2;
  9784  0ADC  30EB               	movlw	_VarLED2& (0+255)
  9785  0ADD  00F9               	movwf	??_LedPointSelect
  9786  0ADE  0879               	movf	??_LedPointSelect,w
  9787  0ADF  00F2               	movwf	_LED
  9788  0AE0                     l350:	
  9789                           
  9790                           ;LED_B1.c: 16: }
  9791                           ;LED_B1.c: 24: if (led == 99) {
  9792  0AE0  085A               	movf	LedPointSelect@led,w
  9793  0AE1  3A63               	xorlw	99
  9794  0AE2  1D03               	skipz
  9795  0AE3  0008               	return
  9796                           
  9797                           ;LED_B1.c: 25: LED = &VarErrLED;
  9798  0AE4  3052               	movlw	_VarErrLED& (0+255)
  9799  0AE5  00F9               	movwf	??_LedPointSelect
  9800  0AE6  0879               	movf	??_LedPointSelect,w
  9801  0AE7  00F2               	movwf	_LED
  9802  0AE8  0008               	return
  9803  0AE9                     __end_of_LedPointSelect:	
  9804                           
  9805                           	psect	text63
  9806  0D6C                     __ptext63:	
  9807 ;; *************** function _setBuz *****************
  9808 ;; Defined at:
  9809 ;;		line 22 in file "../src/Buzzer_B1.c"
  9810 ;; Parameters:    Size  Location     Type
  9811 ;;  count           1    wreg     unsigned char 
  9812 ;;  time            2    8[BANK0 ] int 
  9813 ;; Auto vars:     Size  Location     Type
  9814 ;;  count           1   11[BANK0 ] unsigned char 
  9815 ;; Return value:  Size  Location     Type
  9816 ;;		None               void
  9817 ;; Registers used:
  9818 ;;		wreg, status,2, status,0, pclath, cstack
  9819 ;; Tracked objects:
  9820 ;;		On entry : 0/0
  9821 ;;		On exit  : 0/0
  9822 ;;		Unchanged: 0/0
  9823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9824 ;;      Params:         0       2       0       0
  9825 ;;      Locals:         0       1       0       0
  9826 ;;      Temps:          0       1       0       0
  9827 ;;      Totals:         0       4       0       0
  9828 ;;Total ram usage:        4 bytes
  9829 ;; Hardware stack levels used:    1
  9830 ;; Hardware stack levels required when called:    3
  9831 ;; This function calls:
  9832 ;;		___awdiv
  9833 ;; This function is called by:
  9834 ;;		_my_MainTimer
  9835 ;;		_Exception_Main
  9836 ;;		_setTemp_Main
  9837 ;; This function uses a non-reentrant model
  9838 ;;
  9839                           
  9840                           
  9841                           ;psect for function _setBuz
  9842  0D6C                     _setBuz:	
  9843                           
  9844                           ;incstack = 0
  9845                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
  9846                           ;setBuz@count stored from wreg
  9847  0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  9848  0D6D  1303               	bcf	3,6	;RP1=0, select bank0
  9849  0D6E  00E5               	movwf	setBuz@count
  9850                           
  9851                           ;Buzzer_B1.c: 23: time /= 20;
  9852  0D6F  3014               	movlw	20
  9853  0D70  00DA               	movwf	___awdiv@divisor
  9854  0D71  3000               	movlw	0
  9855  0D72  00DB               	movwf	___awdiv@divisor+1
  9856  0D73  0863               	movf	setBuz@time+1,w
  9857  0D74  01DD               	clrf	___awdiv@dividend+1
  9858  0D75  07DD               	addwf	___awdiv@dividend+1,f
  9859  0D76  0862               	movf	setBuz@time,w
  9860  0D77  01DC               	clrf	___awdiv@dividend
  9861  0D78  07DC               	addwf	___awdiv@dividend,f
  9862  0D79  158A  260F  158A   	fcall	___awdiv
  9863  0D7C  1283               	bcf	3,5	;RP0=0, select bank0
  9864  0D7D  1303               	bcf	3,6	;RP1=0, select bank0
  9865  0D7E  085B               	movf	?___awdiv+1,w
  9866  0D7F  01E3               	clrf	setBuz@time+1
  9867  0D80  07E3               	addwf	setBuz@time+1,f
  9868  0D81  085A               	movf	?___awdiv,w
  9869  0D82  01E2               	clrf	setBuz@time
  9870  0D83  07E2               	addwf	setBuz@time,f
  9871                           
  9872                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
  9873  0D84  1C20               	btfss	_Buz1,0
  9874  0D85  0008               	return
  9875                           
  9876                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
  9877  0D86  18A0               	btfsc	_Buz1,1
  9878  0D87  2D97               	goto	l58
  9879                           
  9880                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
  9881  0D88  14A0               	bsf	_Buz1,1
  9882                           
  9883                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
  9884  0D89  01A1               	clrf	_Buz1+1
  9885  0D8A  01A2               	clrf	_Buz1+2
  9886                           
  9887                           ;Buzzer_B1.c: 28: Buz1.Count = count;
  9888  0D8B  0865               	movf	setBuz@count,w
  9889  0D8C  00E4               	movwf	??_setBuz
  9890  0D8D  0864               	movf	??_setBuz,w
  9891  0D8E  00A3               	movwf	_Buz1+3
  9892                           
  9893                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
  9894  0D8F  0863               	movf	setBuz@time+1,w
  9895  0D90  01A7               	clrf	_Buz1+7
  9896  0D91  07A7               	addwf	_Buz1+7,f
  9897  0D92  0862               	movf	setBuz@time,w
  9898  0D93  01A6               	clrf	_Buz1+6
  9899  0D94  07A6               	addwf	_Buz1+6,f
  9900                           
  9901                           ;Buzzer_B1.c: 30: RC0 = 1;
  9902  0D95  1407               	bsf	7,0	;volatile
  9903                           
  9904                           ;Buzzer_B1.c: 31: } else {
  9905  0D96  0008               	return
  9906  0D97                     l58:	
  9907                           
  9908                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
  9909  0D97  19A0               	btfsc	_Buz1,3
  9910  0D98  2DA5               	goto	l60
  9911                           
  9912                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
  9913  0D99  15A0               	bsf	_Buz1,3
  9914                           
  9915                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
  9916  0D9A  0865               	movf	setBuz@count,w
  9917  0D9B  00E4               	movwf	??_setBuz
  9918  0D9C  0864               	movf	??_setBuz,w
  9919  0D9D  00A4               	movwf	_Buz1+4
  9920                           
  9921                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
  9922  0D9E  0863               	movf	setBuz@time+1,w
  9923  0D9F  01A9               	clrf	_Buz1+9
  9924  0DA0  07A9               	addwf	_Buz1+9,f
  9925  0DA1  0862               	movf	setBuz@time,w
  9926  0DA2  01A8               	clrf	_Buz1+8
  9927  0DA3  07A8               	addwf	_Buz1+8,f
  9928                           
  9929                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
  9930  0DA4  0008               	return
  9931  0DA5                     l60:	
  9932  0DA5  1A20               	btfsc	_Buz1,4
  9933  0DA6  0008               	return
  9934                           
  9935                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
  9936  0DA7  1620               	bsf	_Buz1,4
  9937                           
  9938                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
  9939  0DA8  0865               	movf	setBuz@count,w
  9940  0DA9  00E4               	movwf	??_setBuz
  9941  0DAA  0864               	movf	??_setBuz,w
  9942  0DAB  00A5               	movwf	_Buz1+5
  9943                           
  9944                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
  9945  0DAC  0863               	movf	setBuz@time+1,w
  9946  0DAD  01AB               	clrf	_Buz1+11
  9947  0DAE  07AB               	addwf	_Buz1+11,f
  9948  0DAF  0862               	movf	setBuz@time,w
  9949  0DB0  01AA               	clrf	_Buz1+10
  9950  0DB1  07AA               	addwf	_Buz1+10,f
  9951  0DB2  0008               	return
  9952  0DB3                     __end_of_setBuz:	
  9953                           
  9954                           	psect	text64
  9955  0E0F                     __ptext64:	
  9956 ;; *************** function ___awdiv *****************
  9957 ;; Defined at:
  9958 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  9959 ;; Parameters:    Size  Location     Type
  9960 ;;  divisor         2    0[BANK0 ] int 
  9961 ;;  dividend        2    2[BANK0 ] int 
  9962 ;; Auto vars:     Size  Location     Type
  9963 ;;  quotient        2    6[BANK0 ] int 
  9964 ;;  sign            1    5[BANK0 ] unsigned char 
  9965 ;;  counter         1    4[BANK0 ] unsigned char 
  9966 ;; Return value:  Size  Location     Type
  9967 ;;                  2    0[BANK0 ] int 
  9968 ;; Registers used:
  9969 ;;		wreg, status,2, status,0
  9970 ;; Tracked objects:
  9971 ;;		On entry : 0/0
  9972 ;;		On exit  : 0/0
  9973 ;;		Unchanged: 0/0
  9974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9975 ;;      Params:         0       4       0       0
  9976 ;;      Locals:         0       4       0       0
  9977 ;;      Temps:          1       0       0       0
  9978 ;;      Totals:         1       8       0       0
  9979 ;;Total ram usage:        9 bytes
  9980 ;; Hardware stack levels used:    1
  9981 ;; Hardware stack levels required when called:    2
  9982 ;; This function calls:
  9983 ;;		Nothing
  9984 ;; This function is called by:
  9985 ;;		_setBuz
  9986 ;;		_setTemp_Main
  9987 ;;		_getPIR_AD
  9988 ;;		_Lights_Control
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           
  9993                           ;psect for function ___awdiv
  9994  0E0F                     ___awdiv:	
  9995                           
  9996                           ;incstack = 0
  9997                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9998  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  9999  0E10  1303               	bcf	3,6	;RP1=0, select bank0
 10000  0E11  01DF               	clrf	___awdiv@sign
 10001  0E12  1FDB               	btfss	___awdiv@divisor+1,7
 10002  0E13  2E1B               	goto	l5190
 10003  0E14  09DA               	comf	___awdiv@divisor,f
 10004  0E15  09DB               	comf	___awdiv@divisor+1,f
 10005  0E16  0ADA               	incf	___awdiv@divisor,f
 10006  0E17  1903               	skipnz
 10007  0E18  0ADB               	incf	___awdiv@divisor+1,f
 10008  0E19  01DF               	clrf	___awdiv@sign
 10009  0E1A  0ADF               	incf	___awdiv@sign,f
 10010  0E1B                     l5190:	
 10011  0E1B  1FDD               	btfss	___awdiv@dividend+1,7
 10012  0E1C  2E26               	goto	l5196
 10013  0E1D  09DC               	comf	___awdiv@dividend,f
 10014  0E1E  09DD               	comf	___awdiv@dividend+1,f
 10015  0E1F  0ADC               	incf	___awdiv@dividend,f
 10016  0E20  1903               	skipnz
 10017  0E21  0ADD               	incf	___awdiv@dividend+1,f
 10018  0E22  3001               	movlw	1
 10019  0E23  00F9               	movwf	??___awdiv
 10020  0E24  0879               	movf	??___awdiv,w
 10021  0E25  06DF               	xorwf	___awdiv@sign,f
 10022  0E26                     l5196:	
 10023  0E26  01E0               	clrf	___awdiv@quotient
 10024  0E27  01E1               	clrf	___awdiv@quotient+1
 10025  0E28  085B               	movf	___awdiv@divisor+1,w
 10026  0E29  045A               	iorwf	___awdiv@divisor,w
 10027  0E2A  1903               	skipnz
 10028  0E2B  2E5D               	goto	l5218
 10029  0E2C  01DE               	clrf	___awdiv@counter
 10030  0E2D  0ADE               	incf	___awdiv@counter,f
 10031  0E2E                     l5206:	
 10032  0E2E  1BDB               	btfsc	___awdiv@divisor+1,7
 10033  0E2F  2E3C               	goto	l5208
 10034  0E30  3001               	movlw	1
 10035  0E31                     u5805:	
 10036  0E31  1003               	clrc
 10037  0E32  0DDA               	rlf	___awdiv@divisor,f
 10038  0E33  0DDB               	rlf	___awdiv@divisor+1,f
 10039  0E34  3EFF               	addlw	-1
 10040  0E35  1D03               	skipz
 10041  0E36  2E31               	goto	u5805
 10042  0E37  3001               	movlw	1
 10043  0E38  00F9               	movwf	??___awdiv
 10044  0E39  0879               	movf	??___awdiv,w
 10045  0E3A  07DE               	addwf	___awdiv@counter,f
 10046  0E3B  2E2E               	goto	l5206
 10047  0E3C                     l5208:	
 10048  0E3C  3001               	movlw	1
 10049  0E3D                     u5825:	
 10050  0E3D  1003               	clrc
 10051  0E3E  0DE0               	rlf	___awdiv@quotient,f
 10052  0E3F  0DE1               	rlf	___awdiv@quotient+1,f
 10053  0E40  3EFF               	addlw	-1
 10054  0E41  1D03               	skipz
 10055  0E42  2E3D               	goto	u5825
 10056  0E43  085B               	movf	___awdiv@divisor+1,w
 10057  0E44  025D               	subwf	___awdiv@dividend+1,w
 10058  0E45  1D03               	skipz
 10059  0E46  2E49               	goto	u5835
 10060  0E47  085A               	movf	___awdiv@divisor,w
 10061  0E48  025C               	subwf	___awdiv@dividend,w
 10062  0E49                     u5835:	
 10063  0E49  1C03               	skipc
 10064  0E4A  2E52               	goto	l5214
 10065  0E4B  085A               	movf	___awdiv@divisor,w
 10066  0E4C  02DC               	subwf	___awdiv@dividend,f
 10067  0E4D  085B               	movf	___awdiv@divisor+1,w
 10068  0E4E  1C03               	skipc
 10069  0E4F  03DD               	decf	___awdiv@dividend+1,f
 10070  0E50  02DD               	subwf	___awdiv@dividend+1,f
 10071  0E51  1460               	bsf	___awdiv@quotient,0
 10072  0E52                     l5214:	
 10073  0E52  3001               	movlw	1
 10074  0E53                     u5845:	
 10075  0E53  1003               	clrc
 10076  0E54  0CDB               	rrf	___awdiv@divisor+1,f
 10077  0E55  0CDA               	rrf	___awdiv@divisor,f
 10078  0E56  3EFF               	addlw	-1
 10079  0E57  1D03               	skipz
 10080  0E58  2E53               	goto	u5845
 10081  0E59  3001               	movlw	1
 10082  0E5A  02DE               	subwf	___awdiv@counter,f
 10083  0E5B  1D03               	btfss	3,2
 10084  0E5C  2E3C               	goto	l5208
 10085  0E5D                     l5218:	
 10086  0E5D  085F               	movf	___awdiv@sign,w
 10087  0E5E  1903               	btfsc	3,2
 10088  0E5F  2E65               	goto	l5222
 10089  0E60  09E0               	comf	___awdiv@quotient,f
 10090  0E61  09E1               	comf	___awdiv@quotient+1,f
 10091  0E62  0AE0               	incf	___awdiv@quotient,f
 10092  0E63  1903               	skipnz
 10093  0E64  0AE1               	incf	___awdiv@quotient+1,f
 10094  0E65                     l5222:	
 10095  0E65  0861               	movf	___awdiv@quotient+1,w
 10096  0E66  01DB               	clrf	?___awdiv+1
 10097  0E67  07DB               	addwf	?___awdiv+1,f
 10098  0E68  0860               	movf	___awdiv@quotient,w
 10099  0E69  01DA               	clrf	?___awdiv
 10100  0E6A  07DA               	addwf	?___awdiv,f
 10101  0E6B  0008               	return
 10102  0E6C                     __end_of___awdiv:	
 10103                           
 10104                           	psect	text65
 10105  0960                     __ptext65:	
 10106 ;; *************** function _getMain_All_LightsStatus *****************
 10107 ;; Defined at:
 10108 ;;		line 373 in file "../src/Main_B1.c"
 10109 ;; Parameters:    Size  Location     Type
 10110 ;;		None
 10111 ;; Auto vars:     Size  Location     Type
 10112 ;;  status          1    4[COMMON] unsigned char 
 10113 ;; Return value:  Size  Location     Type
 10114 ;;                  1    wreg      unsigned char 
 10115 ;; Registers used:
 10116 ;;		wreg, status,2, status,0
 10117 ;; Tracked objects:
 10118 ;;		On entry : 0/0
 10119 ;;		On exit  : 0/0
 10120 ;;		Unchanged: 0/0
 10121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10122 ;;      Params:         0       0       0       0
 10123 ;;      Locals:         1       0       0       0
 10124 ;;      Temps:          0       0       0       0
 10125 ;;      Totals:         1       0       0       0
 10126 ;;Total ram usage:        1 bytes
 10127 ;; Hardware stack levels used:    1
 10128 ;; Hardware stack levels required when called:    2
 10129 ;; This function calls:
 10130 ;;		Nothing
 10131 ;; This function is called by:
 10132 ;;		_Exception_Main
 10133 ;;		_Load_Main
 10134 ;;		_setTemp_Main
 10135 ;;		_Lights_Main
 10136 ;; This function uses a non-reentrant model
 10137 ;;
 10138                           
 10139                           
 10140                           ;psect for function _getMain_All_LightsStatus
 10141  0960                     _getMain_All_LightsStatus:	
 10142                           
 10143                           ;Main_B1.c: 374: char status = 0;
 10144                           
 10145                           ;incstack = 0
 10146                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 10147  0960  01F9               	clrf	getMain_All_LightsStatus@status
 10148                           
 10149                           ;Main_B1.c: 387: status = Lights1.Status == 1 ? 1 : 0;
 10150  0961  3000               	movlw	0
 10151  0962  1283               	bcf	3,5	;RP0=0, select bank0
 10152  0963  1303               	bcf	3,6	;RP1=0, select bank0
 10153  0964  1948               	btfsc	_Lights1,2
 10154  0965  3001               	movlw	1
 10155  0966  00F9               	movwf	getMain_All_LightsStatus@status
 10156                           
 10157                           ;Main_B1.c: 388: if (status == 0) {
 10158  0967  08F9               	movf	getMain_All_LightsStatus@status,f
 10159  0968  1D03               	skipz
 10160  0969  296E               	goto	l3780
 10161                           
 10162                           ;Main_B1.c: 389: status = Lights2.Status == 1 ? 1 : 0;
 10163  096A  3000               	movlw	0
 10164  096B  194D               	btfsc	_Lights2,2
 10165  096C  3001               	movlw	1
 10166  096D  00F9               	movwf	getMain_All_LightsStatus@status
 10167  096E                     l3780:	
 10168                           
 10169                           ;Main_B1.c: 390: }
 10170                           ;Main_B1.c: 420: return status;
 10171  096E  0879               	movf	getMain_All_LightsStatus@status,w
 10172  096F  0008               	return
 10173  0970                     __end_of_getMain_All_LightsStatus:	
 10174                           
 10175                           	psect	text66
 10176  0C68                     __ptext66:	
 10177 ;; *************** function _getMain_All_Error_Status *****************
 10178 ;; Defined at:
 10179 ;;		line 424 in file "../src/Main_B1.c"
 10180 ;; Parameters:    Size  Location     Type
 10181 ;;  command         1    wreg     unsigned char 
 10182 ;; Auto vars:     Size  Location     Type
 10183 ;;  command         1    4[BANK0 ] unsigned char 
 10184 ;;  status          1    5[BANK0 ] unsigned char 
 10185 ;; Return value:  Size  Location     Type
 10186 ;;                  1    wreg      unsigned char 
 10187 ;; Registers used:
 10188 ;;		wreg, status,2, status,0
 10189 ;; Tracked objects:
 10190 ;;		On entry : 0/0
 10191 ;;		On exit  : 0/0
 10192 ;;		Unchanged: 0/0
 10193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10194 ;;      Params:         0       0       0       0
 10195 ;;      Locals:         0       6       0       0
 10196 ;;      Temps:          1       0       0       0
 10197 ;;      Totals:         1       6       0       0
 10198 ;;Total ram usage:        7 bytes
 10199 ;; Hardware stack levels used:    1
 10200 ;; Hardware stack levels required when called:    2
 10201 ;; This function calls:
 10202 ;;		Nothing
 10203 ;; This function is called by:
 10204 ;;		_Exception_Main
 10205 ;;		_Load_Main
 10206 ;;		_setTemp_Main
 10207 ;;		_PIR_Main
 10208 ;;		_setSYSC_Main
 10209 ;;		_setSw_Main
 10210 ;;		_Lights_Main
 10211 ;; This function uses a non-reentrant model
 10212 ;;
 10213                           
 10214                           
 10215                           ;psect for function _getMain_All_Error_Status
 10216  0C68                     _getMain_All_Error_Status:	
 10217                           
 10218                           ;incstack = 0
 10219                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 10220                           ;getMain_All_Error_Status@command stored from wreg
 10221  0C68  1283               	bcf	3,5	;RP0=0, select bank0
 10222  0C69  1303               	bcf	3,6	;RP1=0, select bank0
 10223  0C6A  00DE               	movwf	getMain_All_Error_Status@command
 10224                           
 10225                           ;Main_B1.c: 425: char status = 0;
 10226  0C6B  01DF               	clrf	getMain_All_Error_Status@status
 10227                           
 10228                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
 10229  0C6C  08DF               	movf	getMain_All_Error_Status@status,f
 10230  0C6D  1D03               	skipz
 10231  0C6E  2C77               	goto	l3792
 10232  0C6F  085E               	movf	getMain_All_Error_Status@command,w
 10233  0C70  3A01               	xorlw	1
 10234  0C71  1903               	skipnz
 10235  0C72  2C77               	goto	l3792
 10236                           
 10237                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
 10238  0C73  3000               	movlw	0
 10239  0C74  18AC               	btfsc	_SYSC,1
 10240  0C75  3001               	movlw	1
 10241  0C76  00DF               	movwf	getMain_All_Error_Status@status
 10242  0C77                     l3792:	
 10243                           
 10244                           ;Main_B1.c: 430: }
 10245                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 10246  0C77  08DF               	movf	getMain_All_Error_Status@status,f
 10247  0C78  1D03               	skipz
 10248  0C79  2C8B               	goto	l3802
 10249  0C7A  085E               	movf	getMain_All_Error_Status@command,w
 10250  0C7B  3A02               	xorlw	2
 10251  0C7C  1903               	skipnz
 10252  0C7D  2C8B               	goto	l3802
 10253                           
 10254                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 10255  0C7E  18C2               	btfsc	_Temp,1
 10256  0C7F  2C83               	goto	l3800
 10257  0C80  01DA               	clrf	_getMain_All_Error_Status$2412
 10258  0C81  01DB               	clrf	_getMain_All_Error_Status$2412+1
 10259  0C82  2C87               	goto	l718
 10260  0C83                     l3800:	
 10261  0C83  3002               	movlw	2
 10262  0C84  00DA               	movwf	_getMain_All_Error_Status$2412
 10263  0C85  3000               	movlw	0
 10264  0C86  00DB               	movwf	_getMain_All_Error_Status$2412+1
 10265  0C87                     l718:	
 10266  0C87  085A               	movf	_getMain_All_Error_Status$2412,w
 10267  0C88  00F9               	movwf	??_getMain_All_Error_Status
 10268  0C89  0879               	movf	??_getMain_All_Error_Status,w
 10269  0C8A  00DF               	movwf	getMain_All_Error_Status@status
 10270  0C8B                     l3802:	
 10271                           
 10272                           ;Main_B1.c: 438: }
 10273                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 10274  0C8B  08DF               	movf	getMain_All_Error_Status@status,f
 10275  0C8C  1D03               	skipz
 10276  0C8D  2CA4               	goto	l719
 10277  0C8E  085E               	movf	getMain_All_Error_Status@command,w
 10278  0C8F  3A03               	xorlw	3
 10279  0C90  1903               	skipnz
 10280  0C91  2CA4               	goto	l719
 10281                           
 10282                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 10283  0C92  1683               	bsf	3,5	;RP0=1, select bank1
 10284  0C93  1303               	bcf	3,6	;RP1=0, select bank1
 10285  0C94  1ACA               	btfsc	_Load^(0+128),5
 10286  0C95  2C9B               	goto	l3810
 10287  0C96  1283               	bcf	3,5	;RP0=0, select bank0
 10288  0C97  1303               	bcf	3,6	;RP1=0, select bank0
 10289  0C98  01DC               	clrf	_getMain_All_Error_Status$2413
 10290  0C99  01DD               	clrf	_getMain_All_Error_Status$2413+1
 10291  0C9A  2CA0               	goto	l723
 10292  0C9B                     l3810:	
 10293  0C9B  3003               	movlw	3
 10294  0C9C  1283               	bcf	3,5	;RP0=0, select bank0
 10295  0C9D  00DC               	movwf	_getMain_All_Error_Status$2413
 10296  0C9E  3000               	movlw	0
 10297  0C9F  00DD               	movwf	_getMain_All_Error_Status$2413+1
 10298  0CA0                     l723:	
 10299  0CA0  085C               	movf	_getMain_All_Error_Status$2413,w
 10300  0CA1  00F9               	movwf	??_getMain_All_Error_Status
 10301  0CA2  0879               	movf	??_getMain_All_Error_Status,w
 10302  0CA3  00DF               	movwf	getMain_All_Error_Status@status
 10303  0CA4                     l719:	
 10304                           
 10305                           ;Main_B1.c: 445: }
 10306                           ;Main_B1.c: 455: return status;
 10307  0CA4  085F               	movf	getMain_All_Error_Status@status,w
 10308  0CA5  0008               	return
 10309  0CA6                     __end_of_getMain_All_Error_Status:	
 10310                           
 10311                           	psect	text67
 10312  0950                     __ptext67:	
 10313 ;; *************** function _getAll_Lights_Line *****************
 10314 ;; Defined at:
 10315 ;;		line 310 in file "../src/TriacRelay_B1.c"
 10316 ;; Parameters:    Size  Location     Type
 10317 ;;		None
 10318 ;; Auto vars:     Size  Location     Type
 10319 ;;  line            1    0[BANK0 ] unsigned char 
 10320 ;; Return value:  Size  Location     Type
 10321 ;;                  1    wreg      unsigned char 
 10322 ;; Registers used:
 10323 ;;		wreg, status,2
 10324 ;; Tracked objects:
 10325 ;;		On entry : 0/0
 10326 ;;		On exit  : 0/0
 10327 ;;		Unchanged: 0/0
 10328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10329 ;;      Params:         0       0       0       0
 10330 ;;      Locals:         0       1       0       0
 10331 ;;      Temps:          1       0       0       0
 10332 ;;      Totals:         1       1       0       0
 10333 ;;Total ram usage:        2 bytes
 10334 ;; Hardware stack levels used:    1
 10335 ;; Hardware stack levels required when called:    2
 10336 ;; This function calls:
 10337 ;;		Nothing
 10338 ;; This function is called by:
 10339 ;;		_Exception_Main
 10340 ;;		_setMain_Exception
 10341 ;; This function uses a non-reentrant model
 10342 ;;
 10343                           
 10344                           
 10345                           ;psect for function _getAll_Lights_Line
 10346  0950                     _getAll_Lights_Line:	
 10347                           
 10348                           ;TriacRelay_B1.c: 311: char line = 0;
 10349                           
 10350                           ;incstack = 0
 10351                           ; Regs used in _getAll_Lights_Line: [wreg+status,2]
 10352  0950  1283               	bcf	3,5	;RP0=0, select bank0
 10353  0951  1303               	bcf	3,6	;RP1=0, select bank0
 10354  0952  01DA               	clrf	getAll_Lights_Line@line
 10355                           
 10356                           ;TriacRelay_B1.c: 313: if (Lights1.Line == 1) {
 10357  0953  1C49               	btfss	_Lights1+1,0
 10358  0954  2958               	goto	l1609
 10359                           
 10360                           ;TriacRelay_B1.c: 314: line = 1;
 10361  0955  01DA               	clrf	getAll_Lights_Line@line
 10362  0956  0ADA               	incf	getAll_Lights_Line@line,f
 10363                           
 10364                           ;TriacRelay_B1.c: 315: }
 10365  0957  295E               	goto	l1610
 10366  0958                     l1609:	
 10367                           
 10368                           ;TriacRelay_B1.c: 318: else if (Lights2.Line == 1) {
 10369  0958  1C4E               	btfss	_Lights2+1,0
 10370  0959  295E               	goto	l1610
 10371                           
 10372                           ;TriacRelay_B1.c: 319: line = 2;
 10373  095A  3002               	movlw	2
 10374  095B  00F9               	movwf	??_getAll_Lights_Line
 10375  095C  0879               	movf	??_getAll_Lights_Line,w
 10376  095D  00DA               	movwf	getAll_Lights_Line@line
 10377  095E                     l1610:	
 10378                           
 10379                           ;TriacRelay_B1.c: 320: }
 10380                           ;TriacRelay_B1.c: 327: return line;
 10381  095E  085A               	movf	getAll_Lights_Line@line,w
 10382  095F  0008               	return
 10383  0960                     __end_of_getAll_Lights_Line:	
 10384                           
 10385                           	psect	text68
 10386  0908                     __ptext68:	
 10387 ;; *************** function _DetectSYSC_Signal *****************
 10388 ;; Defined at:
 10389 ;;		line 50 in file "../src/SYSC_B1.c"
 10390 ;; Parameters:    Size  Location     Type
 10391 ;;		None
 10392 ;; Auto vars:     Size  Location     Type
 10393 ;;		None
 10394 ;; Return value:  Size  Location     Type
 10395 ;;		None               void
 10396 ;; Registers used:
 10397 ;;		status,2
 10398 ;; Tracked objects:
 10399 ;;		On entry : 0/0
 10400 ;;		On exit  : 0/0
 10401 ;;		Unchanged: 0/0
 10402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10403 ;;      Params:         0       0       0       0
 10404 ;;      Locals:         0       0       0       0
 10405 ;;      Temps:          0       0       0       0
 10406 ;;      Totals:         0       0       0       0
 10407 ;;Total ram usage:        0 bytes
 10408 ;; Hardware stack levels used:    1
 10409 ;; Hardware stack levels required when called:    2
 10410 ;; This function calls:
 10411 ;;		Nothing
 10412 ;; This function is called by:
 10413 ;;		_main
 10414 ;; This function uses a non-reentrant model
 10415 ;;
 10416                           
 10417                           
 10418                           ;psect for function _DetectSYSC_Signal
 10419  0908                     _DetectSYSC_Signal:	
 10420                           
 10421                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
 10422                           
 10423                           ;incstack = 0
 10424                           ; Regs used in _DetectSYSC_Signal: [status,2]
 10425  0908  1283               	bcf	3,5	;RP0=0, select bank0
 10426  0909  1303               	bcf	3,6	;RP1=0, select bank0
 10427  090A  19AC               	btfsc	_SYSC,3
 10428  090B  2912               	goto	l1296
 10429                           
 10430                           ;SYSC_B1.c: 52: if (RB2 == 1) {
 10431  090C  1D06               	btfss	6,2	;volatile
 10432  090D  0008               	return
 10433                           
 10434                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
 10435  090E  15AC               	bsf	_SYSC,3
 10436                           
 10437                           ;SYSC_B1.c: 54: SYSC.Timer = 0;
 10438  090F  01AD               	clrf	_SYSC+1
 10439  0910  01AE               	clrf	_SYSC+2
 10440                           
 10441                           ;SYSC_B1.c: 55: }
 10442                           ;SYSC_B1.c: 56: } else {
 10443  0911  0008               	return
 10444  0912                     l1296:	
 10445                           
 10446                           ;SYSC_B1.c: 57: if (RB2 == 0) {
 10447  0912  1906               	btfsc	6,2	;volatile
 10448  0913  0008               	return
 10449                           
 10450                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
 10451  0914  11AC               	bcf	_SYSC,3
 10452  0915  0008               	return
 10453  0916                     __end_of_DetectSYSC_Signal:	
 10454                           
 10455                           	psect	text69
 10456  0BC5                     __ptext69:	
 10457 ;; *************** function _CDS_Main *****************
 10458 ;; Defined at:
 10459 ;;		line 11 in file "../src/CDS_B1.c"
 10460 ;; Parameters:    Size  Location     Type
 10461 ;;		None
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;		None
 10464 ;; Return value:  Size  Location     Type
 10465 ;;		None               void
 10466 ;; Registers used:
 10467 ;;		wreg, status,2, status,0
 10468 ;; Tracked objects:
 10469 ;;		On entry : 0/0
 10470 ;;		On exit  : 0/0
 10471 ;;		Unchanged: 0/0
 10472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10473 ;;      Params:         0       0       0       0
 10474 ;;      Locals:         0       0       0       0
 10475 ;;      Temps:          0       3       0       0
 10476 ;;      Totals:         0       3       0       0
 10477 ;;Total ram usage:        3 bytes
 10478 ;; Hardware stack levels used:    1
 10479 ;; Hardware stack levels required when called:    2
 10480 ;; This function calls:
 10481 ;;		Nothing
 10482 ;; This function is called by:
 10483 ;;		_main
 10484 ;; This function uses a non-reentrant model
 10485 ;;
 10486                           
 10487                           
 10488                           ;psect for function _CDS_Main
 10489  0BC5                     _CDS_Main:	
 10490                           
 10491                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
 10492                           
 10493                           ;incstack = 0
 10494                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
 10495  0BC5  1283               	bcf	3,5	;RP0=0, select bank0
 10496  0BC6  1303               	bcf	3,6	;RP1=0, select bank0
 10497  0BC7  1C36               	btfss	__CDS,0
 10498  0BC8  0008               	return
 10499                           
 10500                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
 10501  0BC9  18B6               	btfsc	__CDS,1
 10502  0BCA  2BD8               	goto	l180
 10503                           
 10504                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
 10505  0BCB  19B6               	btfsc	__CDS,3
 10506  0BCC  0008               	return
 10507                           
 10508                           ;CDS_B1.c: 16: _CDS.Time++;
 10509  0BCD  3001               	movlw	1
 10510  0BCE  00DA               	movwf	??_CDS_Main
 10511  0BCF  085A               	movf	??_CDS_Main,w
 10512  0BD0  07B7               	addwf	__CDS+1,f
 10513                           
 10514                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
 10515  0BD1  3005               	movlw	5
 10516  0BD2  0237               	subwf	__CDS+1,w
 10517  0BD3  1C03               	skipc
 10518  0BD4  0008               	return
 10519                           
 10520                           ;CDS_B1.c: 18: {
 10521                           ;CDS_B1.c: 19: _CDS.Time = 0;
 10522  0BD5  01B7               	clrf	__CDS+1
 10523                           
 10524                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
 10525  0BD6  15B6               	bsf	__CDS,3
 10526                           
 10527                           ;CDS_B1.c: 21: }
 10528                           ;CDS_B1.c: 22: }
 10529                           ;CDS_B1.c: 23: } else {
 10530  0BD7  0008               	return
 10531  0BD8                     l180:	
 10532                           
 10533                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
 10534  0BD8  1CB6               	btfss	__CDS,1
 10535  0BD9  0008               	return
 10536                           
 10537                           ;CDS_B1.c: 25: _CDS.GO = 0;
 10538  0BDA  10B6               	bcf	__CDS,1
 10539                           
 10540                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
 10541  0BDB  1A36               	btfsc	__CDS,4
 10542  0BDC  2BE3               	goto	l5648
 10543                           
 10544                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
 10545  0BDD  0838               	movf	__CDS+2,w
 10546  0BDE  0239               	subwf	__CDS+3,w
 10547  0BDF  1C03               	skipc
 10548  0BE0  0008               	return
 10549                           
 10550                           ;CDS_B1.c: 28: _CDS.Status = 1;
 10551  0BE1  1636               	bsf	__CDS,4
 10552                           
 10553                           ;CDS_B1.c: 29: }
 10554                           ;CDS_B1.c: 30: } else {
 10555  0BE2  0008               	return
 10556  0BE3                     l5648:	
 10557                           
 10558                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
 10559  0BE3  0838               	movf	__CDS+2,w
 10560  0BE4  3E9C               	addlw	156
 10561  0BE5  00DA               	movwf	??_CDS_Main
 10562  0BE6  30FF               	movlw	255
 10563  0BE7  1803               	skipnc
 10564  0BE8  3000               	movlw	0
 10565  0BE9  00DB               	movwf	??_CDS_Main+1
 10566  0BEA  085B               	movf	??_CDS_Main+1,w
 10567  0BEB  3A80               	xorlw	128
 10568  0BEC  00DC               	movwf	??_CDS_Main+2
 10569  0BED  3080               	movlw	128
 10570  0BEE  025C               	subwf	??_CDS_Main+2,w
 10571  0BEF  1D03               	skipz
 10572  0BF0  2BF3               	goto	u6725
 10573  0BF1  0839               	movf	__CDS+3,w
 10574  0BF2  025A               	subwf	??_CDS_Main,w
 10575  0BF3                     u6725:	
 10576  0BF3  1C03               	skipc
 10577  0BF4  0008               	return
 10578                           
 10579                           ;CDS_B1.c: 32: _CDS.Status = 0;
 10580  0BF5  1283               	bcf	3,5	;RP0=0, select bank0
 10581  0BF6  1303               	bcf	3,6	;RP1=0, select bank0
 10582  0BF7  1236               	bcf	__CDS,4
 10583  0BF8  0008               	return
 10584  0BF9                     __end_of_CDS_Main:	
 10585                           
 10586                           	psect	text70
 10587  0895                     __ptext70:	
 10588 ;; *************** function _CDS_Initialization *****************
 10589 ;; Defined at:
 10590 ;;		line 7 in file "../src/CDS_B1.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;		None
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;		None
 10595 ;; Return value:  Size  Location     Type
 10596 ;;		None               void
 10597 ;; Registers used:
 10598 ;;		None
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10604 ;;      Params:         0       0       0       0
 10605 ;;      Locals:         0       0       0       0
 10606 ;;      Temps:          0       0       0       0
 10607 ;;      Totals:         0       0       0       0
 10608 ;;Total ram usage:        0 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; Hardware stack levels required when called:    2
 10611 ;; This function calls:
 10612 ;;		Nothing
 10613 ;; This function is called by:
 10614 ;;		_main
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           
 10619                           ;psect for function _CDS_Initialization
 10620  0895                     _CDS_Initialization:	
 10621                           
 10622                           ;CDS_B1.c: 8: _CDS.Enable = 1;
 10623                           
 10624                           ;incstack = 0
 10625                           ; Regs used in _CDS_Initialization: []
 10626  0895  1283               	bcf	3,5	;RP0=0, select bank0
 10627  0896  1303               	bcf	3,6	;RP1=0, select bank0
 10628  0897  1436               	bsf	__CDS,0
 10629  0898  0008               	return
 10630  0899                     __end_of_CDS_Initialization:	
 10631                           
 10632                           	psect	text71
 10633  0D28                     __ptext71:	
 10634 ;; *************** function _Buzzer_Main *****************
 10635 ;; Defined at:
 10636 ;;		line 46 in file "../src/Buzzer_B1.c"
 10637 ;; Parameters:    Size  Location     Type
 10638 ;;		None
 10639 ;; Auto vars:     Size  Location     Type
 10640 ;;		None
 10641 ;; Return value:  Size  Location     Type
 10642 ;;		None               void
 10643 ;; Registers used:
 10644 ;;		wreg, status,2, status,0
 10645 ;; Tracked objects:
 10646 ;;		On entry : 0/0
 10647 ;;		On exit  : 0/0
 10648 ;;		Unchanged: 0/0
 10649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10650 ;;      Params:         0       0       0       0
 10651 ;;      Locals:         0       0       0       0
 10652 ;;      Temps:          1       0       0       0
 10653 ;;      Totals:         1       0       0       0
 10654 ;;Total ram usage:        1 bytes
 10655 ;; Hardware stack levels used:    1
 10656 ;; Hardware stack levels required when called:    2
 10657 ;; This function calls:
 10658 ;;		Nothing
 10659 ;; This function is called by:
 10660 ;;		_main
 10661 ;; This function uses a non-reentrant model
 10662 ;;
 10663                           
 10664                           
 10665                           ;psect for function _Buzzer_Main
 10666  0D28                     _Buzzer_Main:	
 10667                           
 10668                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 10669                           
 10670                           ;incstack = 0
 10671                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 10672  0D28  1283               	bcf	3,5	;RP0=0, select bank0
 10673  0D29  1303               	bcf	3,6	;RP1=0, select bank0
 10674  0D2A  1CA0               	btfss	_Buz1,1
 10675  0D2B  0008               	return
 10676                           
 10677                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 10678  0D2C  3001               	movlw	1
 10679  0D2D  07A1               	addwf	_Buz1+1,f
 10680  0D2E  1803               	skipnc
 10681  0D2F  0AA2               	incf	_Buz1+2,f
 10682  0D30  3000               	movlw	0
 10683  0D31  07A2               	addwf	_Buz1+2,f
 10684                           
 10685                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 10686  0D32  0827               	movf	_Buz1+7,w
 10687  0D33  0222               	subwf	_Buz1+2,w
 10688  0D34  1D03               	skipz
 10689  0D35  2D38               	goto	u4145
 10690  0D36  0826               	movf	_Buz1+6,w
 10691  0D37  0221               	subwf	_Buz1+1,w
 10692  0D38                     u4145:	
 10693  0D38  1C03               	skipc
 10694  0D39  0008               	return
 10695                           
 10696                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 10697  0D3A  01A1               	clrf	_Buz1+1
 10698  0D3B  01A2               	clrf	_Buz1+2
 10699                           
 10700                           ;Buzzer_B1.c: 51: Buz1.Switch = (RC0 == 1) ? 1 : 0;
 10701  0D3C  12A0               	bcf	_Buz1,5
 10702  0D3D  1807               	btfsc	7,0	;volatile
 10703  0D3E  16A0               	bsf	_Buz1,5
 10704                           
 10705                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 10706  0D3F  1283               	bcf	3,5	;RP0=0, select bank0
 10707  0D40  1303               	bcf	3,6	;RP1=0, select bank0
 10708  0D41  1AA0               	btfsc	_Buz1,5
 10709  0D42  2D67               	goto	l68
 10710                           
 10711                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 10712  0D43  08A3               	movf	_Buz1+3,f
 10713  0D44  1D03               	skipz
 10714  0D45  2D64               	goto	l69
 10715                           
 10716                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 10717  0D46  1DA0               	btfss	_Buz1,3
 10718  0D47  2D54               	goto	l70
 10719                           
 10720                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 10721  0D48  11A0               	bcf	_Buz1,3
 10722                           
 10723                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 10724  0D49  0824               	movf	_Buz1+4,w
 10725  0D4A  00F9               	movwf	??_Buzzer_Main
 10726  0D4B  0879               	movf	??_Buzzer_Main,w
 10727  0D4C  00A3               	movwf	_Buz1+3
 10728                           
 10729                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 10730  0D4D  0829               	movf	_Buz1+9,w
 10731  0D4E  01A7               	clrf	_Buz1+7
 10732  0D4F  07A7               	addwf	_Buz1+7,f
 10733  0D50  0828               	movf	_Buz1+8,w
 10734  0D51  01A6               	clrf	_Buz1+6
 10735  0D52  07A6               	addwf	_Buz1+6,f
 10736                           
 10737                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 10738  0D53  0008               	return
 10739  0D54                     l70:	
 10740  0D54  1E20               	btfss	_Buz1,4
 10741  0D55  2D62               	goto	l72
 10742                           
 10743                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 10744  0D56  1220               	bcf	_Buz1,4
 10745                           
 10746                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 10747  0D57  0825               	movf	_Buz1+5,w
 10748  0D58  00F9               	movwf	??_Buzzer_Main
 10749  0D59  0879               	movf	??_Buzzer_Main,w
 10750  0D5A  00A3               	movwf	_Buz1+3
 10751                           
 10752                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 10753  0D5B  082B               	movf	_Buz1+11,w
 10754  0D5C  01A7               	clrf	_Buz1+7
 10755  0D5D  07A7               	addwf	_Buz1+7,f
 10756  0D5E  082A               	movf	_Buz1+10,w
 10757  0D5F  01A6               	clrf	_Buz1+6
 10758  0D60  07A6               	addwf	_Buz1+6,f
 10759                           
 10760                           ;Buzzer_B1.c: 62: } else {
 10761  0D61  0008               	return
 10762  0D62                     l72:	
 10763                           
 10764                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 10765  0D62  10A0               	bcf	_Buz1,1
 10766                           
 10767                           ;Buzzer_B1.c: 64: }
 10768                           ;Buzzer_B1.c: 65: } else {
 10769  0D63  0008               	return
 10770  0D64                     l69:	
 10771                           
 10772                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 10773  0D64  16A0               	bsf	_Buz1,5
 10774                           
 10775                           ;Buzzer_B1.c: 68: RC0 = 1;
 10776  0D65  1407               	bsf	7,0	;volatile
 10777                           
 10778                           ;Buzzer_B1.c: 69: }
 10779                           ;Buzzer_B1.c: 70: } else {
 10780  0D66  0008               	return
 10781  0D67                     l68:	
 10782                           
 10783                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 10784  0D67  12A0               	bcf	_Buz1,5
 10785                           
 10786                           ;Buzzer_B1.c: 73: RC0 = 0;
 10787  0D68  1007               	bcf	7,0	;volatile
 10788                           
 10789                           ;Buzzer_B1.c: 75: Buz1.Count--;
 10790  0D69  3001               	movlw	1
 10791  0D6A  02A3               	subwf	_Buz1+3,f
 10792  0D6B  0008               	return
 10793  0D6C                     __end_of_Buzzer_Main:	
 10794                           
 10795                           	psect	text72
 10796  0891                     __ptext72:	
 10797 ;; *************** function _Buzzer_Initialization *****************
 10798 ;; Defined at:
 10799 ;;		line 11 in file "../src/Buzzer_B1.c"
 10800 ;; Parameters:    Size  Location     Type
 10801 ;;		None
 10802 ;; Auto vars:     Size  Location     Type
 10803 ;;		None
 10804 ;; Return value:  Size  Location     Type
 10805 ;;		None               void
 10806 ;; Registers used:
 10807 ;;		None
 10808 ;; Tracked objects:
 10809 ;;		On entry : 0/0
 10810 ;;		On exit  : 0/0
 10811 ;;		Unchanged: 0/0
 10812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10813 ;;      Params:         0       0       0       0
 10814 ;;      Locals:         0       0       0       0
 10815 ;;      Temps:          0       0       0       0
 10816 ;;      Totals:         0       0       0       0
 10817 ;;Total ram usage:        0 bytes
 10818 ;; Hardware stack levels used:    1
 10819 ;; Hardware stack levels required when called:    2
 10820 ;; This function calls:
 10821 ;;		Nothing
 10822 ;; This function is called by:
 10823 ;;		_main
 10824 ;; This function uses a non-reentrant model
 10825 ;;
 10826                           
 10827                           
 10828                           ;psect for function _Buzzer_Initialization
 10829  0891                     _Buzzer_Initialization:	
 10830                           
 10831                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 10832                           
 10833                           ;incstack = 0
 10834                           ; Regs used in _Buzzer_Initialization: []
 10835  0891  1283               	bcf	3,5	;RP0=0, select bank0
 10836  0892  1303               	bcf	3,6	;RP1=0, select bank0
 10837  0893  1420               	bsf	_Buz1,0
 10838  0894  0008               	return
 10839  0895                     __end_of_Buzzer_Initialization:	
 10840                           
 10841                           	psect	text73
 10842  0A38                     __ptext73:	
 10843 ;; *************** function _ISR *****************
 10844 ;; Defined at:
 10845 ;;		line 116 in file "../src/MCU_B1.c"
 10846 ;; Parameters:    Size  Location     Type
 10847 ;;		None
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;		None
 10850 ;; Return value:  Size  Location     Type
 10851 ;;		None               void
 10852 ;; Registers used:
 10853 ;;		wreg, status,2, status,0, pclath, cstack
 10854 ;; Tracked objects:
 10855 ;;		On entry : 0/0
 10856 ;;		On exit  : 0/0
 10857 ;;		Unchanged: 0/0
 10858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10859 ;;      Params:         0       0       0       0
 10860 ;;      Locals:         0       0       0       0
 10861 ;;      Temps:          4       0       0       0
 10862 ;;      Totals:         4       0       0       0
 10863 ;;Total ram usage:        4 bytes
 10864 ;; Hardware stack levels used:    1
 10865 ;; Hardware stack levels required when called:    1
 10866 ;; This function calls:
 10867 ;;		_TMR1_ISR
 10868 ;; This function is called by:
 10869 ;;		Interrupt level 1
 10870 ;; This function uses a non-reentrant model
 10871 ;;
 10872                           
 10873                           
 10874                           ;psect for function _ISR
 10875  0A38                     _ISR:	
 10876                           
 10877                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 10878  0A38  1683               	bsf	3,5	;RP0=1, select bank1
 10879  0A39  1303               	bcf	3,6	;RP1=0, select bank1
 10880  0A3A  1C0C               	btfss	12,0	;volatile
 10881  0A3B  2A43               	goto	i1l515
 10882  0A3C  1283               	bcf	3,5	;RP0=0, select bank0
 10883  0A3D  1303               	bcf	3,6	;RP1=0, select bank0
 10884  0A3E  1C0C               	btfss	12,0	;volatile
 10885  0A3F  2A43               	goto	i1l515
 10886                           
 10887                           ;MCU_B1.c: 126: TMR1_ISR();
 10888  0A40  158A  21F4  158A   	fcall	_TMR1_ISR
 10889  0A43                     i1l515:	
 10890                           ;MCU_B1.c: 127: }
 10891                           ;MCU_B1.c: 148: return;
 10892                           
 10893  0A43  0878               	movf	??_ISR+3,w
 10894  0A44  1283               	bcf	3,5	;RP0=0, select bank0
 10895  0A45  1303               	bcf	3,6	;RP1=0, select bank0
 10896  0A46  00FF               	movwf	127
 10897  0A47  0877               	movf	??_ISR+2,w
 10898  0A48  008A               	movwf	10
 10899  0A49  0876               	movf	??_ISR+1,w
 10900  0A4A  0084               	movwf	4
 10901  0A4B  0E75               	swapf	??_ISR^(0+-128),w
 10902  0A4C  0083               	movwf	3
 10903  0A4D  0EFE               	swapf	126,f
 10904  0A4E  0E7E               	swapf	126,w
 10905  0A4F  0009               	retfie
 10906  0A50                     __end_of_ISR:	
 10907                           
 10908                           	psect	intentry
 10909  0004                     __pintentry:	
 10910                           ;incstack = 0
 10911                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
 10912                           
 10913  0004                     interrupt_function:	
 10914  007E                     saved_w	set	btemp
 10915  0004  00FE               	movwf	btemp
 10916  0005  0E03               	swapf	3,w
 10917  0006  00F5               	movwf	??_ISR
 10918  0007  0804               	movf	4,w
 10919  0008  00F6               	movwf	??_ISR+1
 10920  0009  080A               	movf	10,w
 10921  000A  00F7               	movwf	??_ISR+2
 10922  000B  1283               	bcf	3,5	;RP0=0, select bank0
 10923  000C  1303               	bcf	3,6	;RP1=0, select bank0
 10924  000D  087F               	movf	btemp+1,w
 10925  000E  00F8               	movwf	??_ISR+3
 10926  000F  158A  2A38         	ljmp	_ISR
 10927                           
 10928                           	psect	text74
 10929  09F4                     __ptext74:	
 10930 ;; *************** function _TMR1_ISR *****************
 10931 ;; Defined at:
 10932 ;;		line 236 in file "../src/MCU_B1.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;		None
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;		None
 10937 ;; Return value:  Size  Location     Type
 10938 ;;		None               void
 10939 ;; Registers used:
 10940 ;;		wreg, status,2
 10941 ;; Tracked objects:
 10942 ;;		On entry : 0/0
 10943 ;;		On exit  : 0/0
 10944 ;;		Unchanged: 0/0
 10945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10946 ;;      Params:         0       0       0       0
 10947 ;;      Locals:         0       0       0       0
 10948 ;;      Temps:          0       0       0       0
 10949 ;;      Totals:         0       0       0       0
 10950 ;;Total ram usage:        0 bytes
 10951 ;; Hardware stack levels used:    1
 10952 ;; This function calls:
 10953 ;;		Nothing
 10954 ;; This function is called by:
 10955 ;;		_ISR
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           
 10960                           ;psect for function _TMR1_ISR
 10961  09F4                     _TMR1_ISR:	
 10962                           
 10963                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 10964                           
 10965                           ;incstack = 0
 10966                           ; Regs used in _TMR1_ISR: [wreg+status,2]
 10967  09F4  30FA               	movlw	250
 10968  09F5  1283               	bcf	3,5	;RP0=0, select bank0
 10969  09F6  1303               	bcf	3,6	;RP1=0, select bank0
 10970  09F7  008F               	movwf	15	;volatile
 10971                           
 10972                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 10973  09F8  3038               	movlw	56
 10974  09F9  008E               	movwf	14	;volatile
 10975                           
 10976                           ;MCU_B1.c: 240: TMR1IF = 0;
 10977  09FA  100C               	bcf	12,0	;volatile
 10978                           
 10979                           ;MCU_B1.c: 271: Timer1.Count++;
 10980  09FB  3001               	movlw	1
 10981  09FC  07BB               	addwf	_Timer1+1,f
 10982  09FD  1803               	skipnc
 10983  09FE  0ABC               	incf	_Timer1+2,f
 10984  09FF  3000               	movlw	0
 10985  0A00  07BC               	addwf	_Timer1+2,f
 10986                           
 10987                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 10988  0A01  30C8               	movlw	200
 10989  0A02  063B               	xorwf	_Timer1+1,w
 10990  0A03  043C               	iorwf	_Timer1+2,w
 10991  0A04  1D03               	skipz
 10992  0A05  0008               	return
 10993                           
 10994                           ;MCU_B1.c: 273: Timer1.Count = 0;
 10995  0A06  01BB               	clrf	_Timer1+1
 10996  0A07  01BC               	clrf	_Timer1+2
 10997                           
 10998                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 10999  0A08  143A               	bsf	_Timer1,0
 11000  0A09  0008               	return
 11001  0A0A                     __end_of_TMR1_ISR:	
 11002  007E                     btemp	set	126	;btemp
 11003  007E                     wtemp	set	126
 11004  007E                     wtemp0	set	126
 11005  0080                     wtemp1	set	128
 11006  0082                     wtemp2	set	130
 11007  0084                     wtemp3	set	132
 11008  0086                     wtemp4	set	134
 11009  0088                     wtemp5	set	136
 11010  007F                     wtemp6	set	127
 11011  007E                     ttemp	set	126
 11012  007E                     ttemp0	set	126
 11013  0081                     ttemp1	set	129
 11014  0084                     ttemp2	set	132
 11015  0087                     ttemp3	set	135
 11016  007F                     ttemp4	set	127
 11017  007E                     ltemp	set	126
 11018  007E                     ltemp0	set	126
 11019  0082                     ltemp1	set	130
 11020  0086                     ltemp2	set	134
 11021  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         147
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     22      80
    BANK1            80      0      79
    BANK2            16      4       9

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights2(BANK0[5]), Lights1(BANK0[5]), 

    Sw	PTR struct Switch size(2) Largest target is 5
		 -> NULL(NULL[0]), Sw2(BANK2[5]), Sw1(BANK1[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK1[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_Buzzer_Main
    _main->_PIR_Initialization
    _main->_WDT_Main
    _getTemp_AD->_getAD
    _getPIR_AD->___awdiv
    _getPIR_AD->___lwdiv
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setTemp_Main->___awdiv
    _setTemp_Main->_getMain_All_Error_Status
    _setTemp_Main->_getMain_All_LightsStatus
    _setSw_Main->_SwPointSelect
    _setSw_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getCDS_Status
    _PIR_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Main->_getLight_LoadGO
    _Load_Main->_getLight_Load_Status
    _Load_Main->_getMain_All_Error_Status
    _Load_Main->_getMain_All_LightsStatus
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _Lights_Main->_getLoad_OK
    _Lights_Main->_getMain_All_Error_Status
    _Lights_Main->_getMain_All_LightsStatus
    _setLights_Main->_LightsPointSelect
    _setLights->_setLights_Line
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _Lights_Control->___awdiv
    _setLights_Initialization->_LightsPointSelect
    _setLED_Main->_LedPointSelect
    _setLED_Initialization->_LedPointSelect
    _Exception_Main->_getAll_Lights_Line
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_getMain_All_LightsStatus
    _setLights_SwOn->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _setBuz->___awdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Exception_Main
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getPIR_AD->___awdiv
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setSw_Main
    _setSw_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _setLights_Initialization->_LightsPointSelect
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_setBuz
    _setLights_SwOn->_setLights_Trigger
    _getLights_Status->_LightsPointSelect
    _setLights_SwOff->_setLights_Trigger
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   35094
                                             21 BANK0      1     1      0
                                              0 BANK2      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1883
                                             12 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0    1040
                                              1 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    3540
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1466
                                              1 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     916
                                              1 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     728
                                              4 COMMON     1     0      1
                                              0 BANK0      1     1      0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    3567
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         5     5      0    3567
                                             12 BANK0      5     5      0
                            ___awdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4227
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0    4227
                                              6 BANK0      5     5      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        1     1      0      44
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            11    11      0    2791
                                              6 BANK0     11    11      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    1930
                                              7 BANK0     10    10      0
                            ___lwdiv
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    4432
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    2636
                                              6 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    2242
                                              3 BANK0      3     2      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      88
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     142
                                              0 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1509
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0     126
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0     126
                                              1 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     294
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     294
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1844
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1844
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    6702
                                             12 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOn                                       1     1      0    1104
                                              4 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (4) _getLights_Status                                     2     2      0     174
                                              1 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOff                                      1     1      0     888
                                              4 BANK0      1     1      0
                  _LightsPointSelect
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (4) _setLights_Trigger                                    3     2      1     720
                                              1 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _LightsPointSelect                                    2     2      0      84
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1634
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0     126
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1883
                                              8 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1215
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      47
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   2     2      0      40
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Switch_Initialization
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setLED
         _LedPointSelect
       _setLights_SwOff
         _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
       _setLights_SwOn
         _LightsPointSelect
         _getLights_Status
           _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      B2       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     16      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK2            10      0       0       8        0.0%
BANK2               10      4       9       9       56.3%
DATA                 0      0      B2      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Jan 16 15:15:04 2015

              __size_of_Switch_Main 000B                        _WDT_Clearing 0002  
         getMain_Lights_Count@count 005A                                  l60 0DA5  
                                l70 0D54                                  l72 0D62  
                                l58 0D97                                  l68 0D67  
                                l69 0D64                        ___awdiv@sign 005F  
                                _Sw 0070                      setTemp_Main@AD 006A  
                                fsr 0004                                 l180 0BD8  
                               l350 0AE0                                 l349 0AD8  
                               l383 0C5B                                 l384 0C61  
                               l723 0CA0                                 l718 0C87  
                               l719 0CA4                                 l840 0067  
                               l841 0063                                 l842 005D  
                               l749 0714                                 l854 018D  
                               l838 020A                                 l848 01E3  
                               l849 01E1                                 l972 0FFC  
                               l977 0FF7                                 _GIE 005F  
                               _RC0 0038                                 _RB2 0032  
                               _LED 0072                                 _RC1 0039  
                               _RB3 0033                                 _RB4 0034  
                               _RA6 002E                                 _RB5 0035  
                               _RA7 002F                                 _RC4 003C  
                               _RC5 003D                                 _RC6 003E  
                               _RC7 003F                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _ISR 0A38                                 _PSA 040B  
                               _WDT 003D                   ??_setLights_SwOff 007A  
                               _Cmd 003F                                 _Sw1 00E6  
                               _Sw2 0120              getAll_Lights_Line@line 005A  
                               fsr0 0004                                 indf 0000  
             _Buzzer_Initialization 0891                     __end_of_ADC_Set 08C6  
         __end_of_LightsPointSelect 09F4                   ??_getSw_KeyStatus 0079  
                  _getLights_Status 0970             __size_of_Lights_Control 009A  
                              ?_ISR 0075                          Load_Main@i 0069  
                              l1063 0269                                l1056 039C  
                              l1065 027A                                l1057 0263  
                              l1058 0249                                l1420 09D2  
                              l1610 095E                                l1442 04FB  
                              l1604 0A2E                                l1296 0912  
                              l1609 0958                                l1557 0B84  
                              l4142 0D16                                l4136 0CFD  
                              l5222 0E65                                l5214 0E52  
                              l5206 0E2E                                l3800 0C83  
                              l5208 0E3C                      _Load_Main$2699 0064  
                              l3810 0C9B                                l3802 0C8B  
                              l5218 0E5D                                l7012 008D  
                              l5190 0E1B                                l7050 0164  
                              l7018 00C9                                l3780 096E  
                              l5196 0E26                                l6316 09EB  
                              l5620 0CD4                                l5612 0CB0  
                              l7108 01F7                                l7044 0154  
                              l7220 02FE                                l7212 02C0  
                              l6342 07D1                                l6350 07D9  
                              l7310 06AC                                l7302 0690  
                              l7126 0B85                                l5614 0CBE  
                              l7062 01AA                                l7054 017F  
                              l7214 02C1                                l3838 09AE  
                              l3792 0C77                                l6360 07EC  
                              l6328 07C0                                l6336 07C8  
                              l7320 06DF                                l7304 066D  
                              l6512 0F3A                                l6504 0F20  
                              l5624 0CDF                                l7072 01C3  
                              l7208 02B4                                l7160 025D  
                              l6434 0B6A                                l7306 069C  
                              l7330 0706                                l7250 036C  
                              l6450 0A8A                                l6364 07F0  
                              l7316 06D3                                l6508 0F27  
                              l7228 0312                                l7236 0343  
                              l7326 06FA                                l7318 06B0  
                              l6526 0F4A                                l6454 0A94  
                              l6550 0AFF                                l7350 0E8D  
                              l5648 0BE3                                l6368 07F4  
                              l6536 0F64                                l6480 0EF6  
                              l6632 0FBF                                l6544 0AF6  
                              l7290 065A                                l6650 0FE7  
                              l6618 0F89                                l6546 0AF9  
                              l7362 0EB0                                l6468 0A19  
                              l7196 029D                                l6708 045B  
                              l6660 0FF6                                l6494 0F06  
                              l6750 0BBE                                l6718 04A6  
                              l7296 0669                                l6672 09D6  
                              l6648 0FE4                                l6824 0DE6  
                              l6816 0DD2                                l6912 05B7  
                              l6922 05E5                                l6906 059B  
                              l6772 0775                                l6676 09DC  
                              l6844 0E0A                                l6828 0DEE  
                              l6860 0C18                                l6942 063B  
                              l6784 07A9                                l6768 0764  
                              l6696 0416                                l6688 03ED  
                              l6936 062D                                l6928 0601  
                              l6880 0556                                l6864 0C20  
                              l6980 0047                                l6892 0577  
                              l6884 0561               _myMain_Initialization 0884  
                              l6958 0B40                                l6896 0582  
                              l6888 056C                                l6996 0066  
                      __CFG_WDTE$ON 0000                                u4145 0D38  
                              _PEIE 005E                                u3735 0D22  
                              u5805 0E31                                u6615 0CBF  
                              u5825 0E3D                                u6625 0CCB  
                              u5835 0E49                                u6635 0CD5  
                              u6725 0BF3                                u5845 0E53  
                              u8185 09C5                                u6595 0CB3  
                              u9335 008B                                u9345 00C7  
                              u9435 01A2                                u9355 011E  
                              u8830 0760                                u8815 074C  
                              u8860 0771                                u9805 032B  
                              u9835 0353                                u8885 0794  
                              u9775 02DF                                u9960 0699  
                              u9785 02F7                                u9965 0676  
                              u9885 0389                                u9990 06DC  
                              u9995 06B9                                __CDS 0036  
           ?_setSYSC_Initialization 0075                                _WPUB 0095  
                              _SYSC 002C                                _Buz1 0020  
                              __PIR 00A0                                _Load 00CA  
                              _Temp 0042                                _main 0E6C  
                              btemp 007E                     __end_of_WDT_Set 0932  
                              ltemp 007E                                start 0011  
                              ttemp 007E                                wtemp 007E  
                  __end_of_CDS_Main 0BF9        __size_of_Temp_Initialization 0003  
                             ??_ISR 0075                   _setLights_Trigger 0AB2  
                     ??_Lights_Main 007A                       __CFG_PLLEN$ON 0000  
                  __end_of_LED_Main 089D                  ?_setLights_Trigger 005B  
                             ?_main 0125                     __end_of___awdiv 0E6C  
                             _ADRES 001E                     ___awdiv@divisor 005A  
                             _T1CON 0010                     __end_of___lwdiv 0CE6  
                             i1l515 0A43                     ___awdiv@counter 005E  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTA 0005                               _PORTB 0006  
                             _PORTC 0007                        ?_setLED_Main 0075  
                             _TRISA 0085                               _TRISB 0086  
                             _TRISC 0087             __end_of_Timeout_Counter 09CB  
                             _Light 0073                 ??_setLights_Trigger 005C  
                  __end_of_PIR_Main 03B2                    __end_of_TMR1_ISR 0A0A  
                  __end_of_TMR1_Set 0924                               _getAD 0AE9  
    __end_of_setSYSC_Initialization 08A1      getLights_Allow_Condition@allow 005B  
           __end_of_getLight_LoadGO 08AC                       ??_Buzzer_Main 0079  
                  __end_of_WDT_Main 0992                       _LightsControl 0040  
                    __CFG_BOREN$OFF 0000        __end_of_getMain_Lights_Count 0941  
                             pclath 000A                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080      __size_of_setLED_Initialization 0012  
     __end_of_setLED_Initialization 09A4                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
                 getPIR_AD@channel1 0067                   getPIR_AD@channel2 0062  
            ?_setLoad_AH_AL_Restore 0075                   setTemp_Main@error 0067  
                    _setLights_Main 0B95                      _setLights_Line 0A21  
                   __initialization 0013                      _setLights_SwOn 0B4A  
                __size_of_SYSC_Main 0003           __end_of_setLights_Trigger 0ACD  
                      __end_of_main 0EDE                    __end_of_Fosc_Set 08A6  
    getMain_All_LightsStatus@status 0079                      _Exception_Main 063D  
                         ??_ADC_Set 0079                              ??_main 006F  
             PIR_Main@Enable_Switch 0067              ?_Buzzer_Initialization 0075  
               __end_of_Lights_Main 0B95          __size_of_LightsPointSelect 0015  
          _getMain_All_LightsStatus 0960             ??_Switch_Initialization 0079  
                            ?_getAD 0079              ?_myMain_Initialization 0075  
                            _ADCON0 001F                              _ADCON1 009F  
                  ___awdiv@dividend 005C                           ??_WDT_Set 0079  
                            _ANSELA 0185                              _ANSELB 0186  
          _getMain_All_Error_Status 0C68                              _FVRCON 009D  
            getLights_Status@lights 005B                              _OSCCON 0090  
                __size_of_Load_Main 01E4                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0A68  
              Exception_Main@i_2426 006D              getLights_Status@status 005C  
            __end_of_setLights_Main 0BC5              __end_of_setLights_Line 0A38  
            __end_of_setLights_SwOn 0B6F        __size_of_SYSC_Initialization 0003  
        __end_of_Mcu_Initialization 0950                 __end_of_Buzzer_Main 0D6C  
                            _Lights 0074                              _Timer1 003A  
       __size_of_CDS_Initialization 0004             ??_Lights_Initialization 007A  
            __end_of_Exception_Main 0715                Exception_Main@lights 0067  
                         ??___awdiv 0079                           ??___lwdiv 0079  
              Exception_Main@status 006A                              _setLED 07AF  
                            _myMain 0031                    ___awdiv@quotient 0060  
                            _setBuz 0D6C                  __size_of_Temp_Main 0003  
              Load_Main@LightsCount 0068         __end_of_Load_Initialization 0888  
   getLights_Allow_Condition@lights 0075                              saved_w 007E  
                  setLights_SwOn@sw 005E                    ?_Timeout_Counter 0075  
       getMain_Lights_Count@status1 005B         getMain_Lights_Count@status2 005C  
             __end_of_SwPointSelect 09B7                   __end_of_SYSC_Main 088E  
                    _Lights_Control 0715             __size_of_LedPointSelect 001C  
                         ?_CDS_Main 0075                    ?_getLight_LoadGO 0075  
       __size_of_PIR_Initialization 000B                          _TouchPower 09CB  
           __end_of__initialization 002B                           ?_LED_Main 0075  
                     ?_my_MainTimer 0075                     ?_setLights_Main 0075  
                   ?_setLights_Line 0075                     ?_setLights_SwOn 0075  
                     ?_setSYSC_Main 0075                     _setLights_SwOff 0A98  
        __size_of_setLights_Trigger 001B                      __pcstackCOMMON 0075  
                __size_of_getCDS_AD 0022                     ?_Exception_Main 0075  
          __end_of_getLights_Status 0981                       __end_of_getAD 0B05  
                         ?_PIR_Main 0075                           ?_TMR1_ISR 0075  
     __size_of_getLight_Load_Status 0006                           ?_TMR1_Set 0075  
            setLoad_AH_AL_Restore@i 005A                  _LED_Initialization 08FC  
                   _getSw_KeyStatus 0A80                  __size_of_getPIR_AD 012E  
                       _Lights_Main 0B6F            _setLights_Initialization 08B8  
              _getMain_Lights_Count 0932                           ?_WDT_Main 0075  
                 __end_of_Load_Main 0212          __end_of_set_TimeoutCleared 08B8  
               ?_LED_Initialization 0075              __end_of_Lights_Control 07AF  
              __size_of_setLED_Main 003B                             ??_getAD 007A  
               _Temp_Initialization 088E                          ??_CDS_Main 005A  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                        __pbssBANK2 0120                           ?_Fosc_Set 0075  
       __size_of_getAll_Lights_Line 0010                         _Buzzer_Main 0D28  
                 __end_of_Temp_Main 0800                             ?_IO_Set 0075  
                   __CFG_VCAPEN$DIS 0000                      ??_my_MainTimer 0066  
                        ??_LED_Main 007A                      ??_setSYSC_Main 007A  
                     ??_Switch_Main 007A                ??_LED_Initialization 007A  
                 LedPointSelect@led 005A                         setBuz@count 0065  
                        __pmaintext 0E6C          ?_getLights_Allow_Condition 0075  
              ?_Temp_Initialization 0075                PIR_Main@LightsStatus 006A  
                        ??_PIR_Main 0060                          ??_TMR1_ISR 0075  
                     ?_setTemp_Main 0075                  __size_of_setLights 008B  
                        _getLoad_AD 0DB3                          ??_TMR1_Set 0079  
                        __pintentry 0004                          _getLoad_OK 08CE  
                           ?_setLED 005B             setLights_Trigger@lights 005D  
             ?_getMain_Lights_Count 0075                             _ADC_Set 08BF  
                           ?_setBuz 0062                          _getTemp_AD 0BF9  
                        ??_WDT_Main 0079              __size_of_getCDS_Status 0008  
                   ?_Lights_Control 0075                   __end_of_getCDS_AD 0B27  
                           _WDT_Set 0924                       getPIR_AD@VRAD 0069  
                        ??_Fosc_Set 0079                         ?_TouchPower 0075  
                 __end_of_getPIR_AD 063D             ??_setLoad_AH_AL_Restore 0079  
           __end_of_setLights_SwOff 0AB2      _getLights_Allow_Condition$4782 005C  
                   __size_of_IO_Set 0018                          getCDS_AD@i 005E  
                        getCDS_AD@j 005F                             _Lights1 0048  
                           _Lights2 004D                             _VarLED1 0056  
                           _VarLED2 00EB             __end_of_getSw_KeyStatus 0A98  
             ??_Temp_Initialization 0079                      ??_setTemp_Main 0066  
                           ___awdiv 0E0F                 __end_of_Switch_Main 08FC  
                           ___lwdiv 0CA6          ??_getMain_All_LightsStatus 0079  
           ??_Buzzer_Initialization 0079                         PIR_Main@cds 0069  
                   __size_of_setLED 004E                     __size_of_setBuz 0047  
                           __ptext0 0000                             __ptext1 0B27  
                           __ptext2 0884                             __ptext3 0BF9  
                           __ptext4 050F                             __ptext5 0DB3  
                           __ptext6 0B05                             __ptext7 0AE9  
                           __ptext8 0981                             __ptext9 0002  
                        getPIR_AD@i 006A                          getPIR_AD@j 0066  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0079  
               _SYSC_Initialization 0888             ??_myMain_Initialization 0079  
          ??_setTemp_Initialization 0079                      _LedPointSelect 0ACD  
                   getTemp_AD@ADRES 005E                             clrloop0 08DF  
    __size_of_Switch_Initialization 0001       __end_of_Switch_Initialization 0883  
                 __end_of_setLights 0F69                end_of_initialization 002B  
                        _setSw_Main 03B2                       _getCDS_Status 08D6  
              ?_SYSC_Initialization 0075               _setLED_Initialization 0992  
                 setLights_SwOff@sw 005E                         ?_getLoad_AD 0075  
    __size_of_Lights_Initialization 0008                         ?_getLoad_OK 0075  
            ??_getMain_Lights_Count 0079       __end_of_Lights_Initialization 08CE  
                       ?_getTemp_AD 0075                 __size_of_TouchPower 0014  
          setLED_Initialization@led 005D             setTemp_Main@DangerValue 0069  
                _Mcu_Initialization 0941                __end_of_my_MainTimer 0B4A  
              __end_of_setSYSC_Main 0D28              __end_of_LedPointSelect 0AE9  
          Load_Main@ErrorCountValue 0066                 ?_Mcu_Initialization 0075  
                  ??_setLights_Main 007A                    ??_setLights_Line 0079  
              setLights_Main@lights 0060                    ??_setLights_SwOn 007A  
                         _SYSC_Main 088B     getMain_All_Error_Status@command 005E  
                 __size_of_CDS_Main 0034                      ?_getCDS_Status 0075  
                  ?_setLights_SwOff 0075               ??_SYSC_Initialization 0079  
                  ??_Exception_Main 0066                      __end_of_IO_Set 0A80  
        __end_of_CDS_Initialization 0899                         _Switch_Main 08F1  
        ??_setLights_Initialization 007A                   __size_of_LED_Main 0004  
                  ?_getSw_KeyStatus 0075                ??_Mcu_Initialization 007A  
                     ?_WDT_Clearing 0075                   ?_getLights_Status 0075  
                      ?_Lights_Main 0075                   getSw_KeyStatus@sw 005B  
                 __size_of_PIR_Main 01A0                   __size_of_TMR1_ISR 0016  
                ??_getLights_Status 007A                   __size_of_TMR1_Set 000E  
                    __end_of_setLED 07FD                      __end_of_setBuz 0DB3  
          ??_setSYSC_Initialization 0079                   __size_of_WDT_Main 0011  
               start_initialization 0013                     ?_LedPointSelect 0075  
              setLights_Line@lights 0079                           _Load_Main 002E  
                       __end_of_ISR 0A50          __end_of_PIR_Initialization 08F1  
      __size_of_Load_Initialization 0003        __end_of_getLight_Load_Status 08B2  
   __size_of_setTemp_Initialization 0001                 getCDS_Status@status 0079  
              __end_of_setTemp_Main 1000                 __size_of_getLoad_AD 005C  
                      ?_Buzzer_Main 0075                 __size_of_getLoad_OK 0008  
                        ?_SYSC_Main 0075                  _set_TimeoutCleared 08B2  
                          ??_IO_Set 0079            __size_of_Timeout_Counter 0014  
                         _VarErrLED 0052                         ?_setSw_Main 0075  
               __size_of_getTemp_AD 0034              ?_setLED_Initialization 0075  
                 __size_of_Fosc_Set 0005            __size_of_getLight_LoadGO 0006  
                         _Temp_Main 07FD                     setLights@lights 005F  
               ?_set_TimeoutCleared 0075                      ??_WDT_Clearing 0079  
       ??_getLights_Allow_Condition 005A                 Exception_Main@count 0068  
                   setLights@status 005D                 Exception_Main@error 0069  
            __size_of_SwPointSelect 0013    __end_of_getMain_All_LightsStatus 0970  
                          ??_setLED 007A                            ?_ADC_Set 0075  
                  ??_Lights_Control 0062                            ??_setBuz 0064  
  __end_of_getMain_All_Error_Status 0CA6                       ??_setLED_Main 005B  
                       __pbssCOMMON 0070             Load_Main@Load_RunStatus 0067  
                         ___latbits 0001                          ?_Load_Main 0075  
                     __pcstackBANK0 005A                       __pcstackBANK2 0125  
              ??_set_TimeoutCleared 0079          __end_of_getAll_Lights_Line 0960  
                          ?_WDT_Set 0075                     ??_getCDS_Status 0079  
                      ??_TouchPower 0079                       PIR_Main@error 0064  
                         _getCDS_AD 0B05      __size_of_setLoad_AH_AL_Restore 0018  
     __end_of_setLoad_AH_AL_Restore 0A68                           _getPIR_AD 050F  
       __size_of_LED_Initialization 000C                     Exception_Main@i 006B  
                        ?_Temp_Main 0075                    ___lwdiv@dividend 005C  
                        setBuz@time 0062                      Load_Main@error 0063  
            _setTemp_Initialization 0883                       _PIR_Main$3214 0065  
                          ?___awdiv 005A               __size_of_my_MainTimer 0023  
                          ?___lwdiv 005A               __size_of_setSYSC_Main 0042  
    __size_of_Buzzer_Initialization 0004       __end_of_Buzzer_Initialization 0895  
                __end_of_TouchPower 09DF            setLights_Trigger@command 005B  
               __size_of_setSw_Main 015D     __size_of_setSYSC_Initialization 0004  
         _getLights_Allow_Condition 0A0A      __size_of_myMain_Initialization 0001  
     __end_of_myMain_Initialization 0885                      __size_of_getAD 001C  
                  ___lwdiv@quotient 005F                       _SwPointSelect 09A4  
                          _CDS_Main 0BC5                 __end_of_setLED_Main 0C68  
                       ??_SYSC_Main 007A         __end_of_Temp_Initialization 0891  
                 interrupt_function 0004                          ?_getCDS_AD 005B  
                          _LED_Main 0899                           _setLights 0EDE  
                   SwPointSelect@sw 0079                           clear_ram0 08DE  
  __end_of_setLights_Initialization 08BF                        _my_MainTimer 0B27  
                        ?_getPIR_AD 0062                        _setSYSC_Main 0CE6  
                          _GO_nDONE 00F9                   ??_Timeout_Counter 0079  
              PIR_Main@TriggerValue 0068                            _PIR_Main 0212  
                      ??_getLoad_AD 005B                            _TMR1_ISR 09F4  
                      ??_getLoad_OK 0079                _getLight_Load_Status 08AC  
                          _TMR1_Set 0916                   ??_getLight_LoadGO 0079  
                      ??_getTemp_AD 005B                            _WDT_Main 0981  
             getSw_KeyStatus@status 005A                    __size_of_ADC_Set 0007  
                    getPIR_AD@VRAD1 0068                __size_of_Lights_Main 0026  
             __size_of_setTemp_Main 0097                        setSw_Main@sw 0064  
                       ??_Load_Main 0061      getMain_All_Error_Status@status 005F  
                    ?_SwPointSelect 0075                         getAD@adcon0 005A  
                       getAD@adcon1 0079                      setLED_Main@led 005D  
              __end_of_WDT_Clearing 0004   __size_of_getMain_All_LightsStatus 0010  
         ?_getMain_All_LightsStatus 0075                            _Fosc_Set 08A1  
                  __size_of_WDT_Set 000E                  __end_of_getLoad_AD 0E0F  
                __end_of_getLoad_OK 08D6               _Switch_Initialization 0882  
 __size_of_getMain_All_Error_Status 003E           ?_getMain_All_Error_Status 0075  
              __size_of_Buzzer_Main 0044                          ?_setLights 005D  
                __end_of_getTemp_AD 0C2D              _setSYSC_Initialization 089D  
                      ?_Switch_Main 0075                   getLoad_AD@channel 005D  
                 _DetectSYSC_Signal 0908                            _SwDetect 0041  
                       ??_Temp_Main 007A       _getMain_All_Error_Status$2412 005A  
     _getMain_All_Error_Status$2413 005C                 _Load_Initialization 0885  
                ?_DetectSYSC_Signal 0075                           setLED@led 005C  
             ?_getLight_Load_Status 0075                        _setTemp_Main 0F69  
                  __size_of___awdiv 005D      getLight_Load_Status@loadstatus 0079  
                  __size_of___lwdiv 0040                    ??_LedPointSelect 0079  
     __size_of_getMain_Lights_Count 000F                 ??_DetectSYSC_Signal 0079  
                _CDS_Initialization 0895               _Lights_Initialization 08C6  
                 getTemp_AD@channel 005D                         _setLED_Main 0C2D  
                   ___lwdiv@divisor 005A                ?_Load_Initialization 0075  
               ?_CDS_Initialization 0075                     ___lwdiv@counter 005E  
                          __ptext10 07FD                            __ptext11 0F69  
                          __ptext20 09B7                            __ptext12 088E  
                          __ptext21 0882                            __ptext13 0883  
                          __ptext30 0924                            __ptext22 088B  
                          __ptext14 08F1                            __ptext31 0916  
                          __ptext23 0CE6                            __ptext15 03B2  
                          __ptext40 0885                            __ptext32 0A68  
                          __ptext24 0888                            __ptext16 0A80  
                          __ptext41 0A50                            __ptext33 08A1  
                          __ptext25 089D                            __ptext17 09A4  
                          __ptext50 08B8                            __ptext42 0B6F  
                          __ptext34 08BF                            __ptext26 0212  
                          __ptext18 09CB                            __ptext51 0899  
                          __ptext43 0B95                            __ptext35 002E  
                          __ptext27 08D6                            __ptext19 08B2  
                          __ptext60 09DF                            __ptext52 0C2D  
                          __ptext44 0EDE                            __ptext36 0932  
                          __ptext28 08E6                            __ptext61 07AF  
                          __ptext53 08FC                            __ptext45 0A21  
                          __ptext37 08AC                            __ptext29 0941  
                          __ptext70 0895                            __ptext62 0ACD  
                          __ptext54 0992                            __ptext46 0A0A  
                          __ptext38 08A6                            __ptext71 0D28  
                          __ptext63 0D6C                            __ptext55 063D  
                          __ptext47 08CE                            __ptext39 0CA6  
                          __ptext72 0891                            __ptext64 0E0F  
                          __ptext56 0B4A                            __ptext48 0715  
                          __ptext73 0A38                            __ptext65 0960  
                          __ptext57 0970                            __ptext49 08C6  
                          __ptext74 09F4                            __ptext66 0C68  
                          __ptext58 0A98                            __ptext67 0950  
                          __ptext59 0AB2                            __ptext68 0908  
                          __ptext69 0BC5           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 088B             ??_setLED_Initialization 007A  
                       ??_getCDS_AD 005C                        ??_setSw_Main 0060  
                     setLED@command 005B           __end_of_DetectSYSC_Signal 0916  
                     __size_of_main 0072                         ??_getPIR_AD 0063  
                _PIR_Initialization 08E6                ??_CDS_Initialization 0079  
       __size_of_Mcu_Initialization 000F            __size_of_setLights_SwOff 001A  
                      getLoad_OK@ok 0079                 ?_PIR_Initialization 0075  
                          main@argc 0125                            main@argv 0127  
          __size_of_getSw_KeyStatus 0018   __size_of_setLights_Initialization 0007  
         ?_setLights_Initialization 0075                     ??_SwPointSelect 0079  
                __end_of_setSw_Main 050F               ??_Load_Initialization 007A  
              Lights_Control@lights 0064                ??_PIR_Initialization 0079  
                          intlevel1 0000              ?_Switch_Initialization 0075  
__size_of_getLights_Allow_Condition 0017               setTemp_Main@SafeValue 0068  
                       ??_setLights 005E             ?_setTemp_Initialization 0075  
           LightsPointSelect@lights 005A                  _getAll_Lights_Line 0950  
                   getLoad_AD@ADRES 0060              ??_getLight_Load_Status 0079  
                       getLoad_AD@i 0061                         getLoad_AD@j 005F  
                       getLoad_AD@k 005E             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 0017             __size_of_setLights_SwOn 0025  
               ?_getAll_Lights_Line 0075               getLight_LoadGO@loadgo 0079  
            ?_Lights_Initialization 0075             __size_of_Exception_Main 00D8  
             __size_of_WDT_Clearing 0002      setLights_Initialization@lights 005B  
       __size_of_set_TimeoutCleared 0006                   _LightsPointSelect 09DF  
              ??_getAll_Lights_Line 0079                  __CFG_FOSC$INTOSCIO 0000  
                ?_LightsPointSelect 0075                     _Timeout_Counter 09B7  
        __end_of_LED_Initialization 0908               __end_of_getCDS_Status 08DE  
    __end_of_setTemp_Initialization 0884          __size_of_DetectSYSC_Signal 000E  
                   _getLight_LoadGO 08A6                   getCDS_AD@channel1 0060  
                 getCDS_AD@channel2 005B   __end_of_getLights_Allow_Condition 0A21  
               ??_LightsPointSelect 0079               _setLoad_AH_AL_Restore 0A50  
