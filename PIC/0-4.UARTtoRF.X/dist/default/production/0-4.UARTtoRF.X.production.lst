

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Nov 26 17:15:01 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1516
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	intentry,global,class=CODE,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    55                           	dabs	1,0x7E,2
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  008C                     	;# 
    84  008D                     	;# 
    85  008E                     	;# 
    86  0090                     	;# 
    87  0091                     	;# 
    88  0092                     	;# 
    89  0095                     	;# 
    90  0096                     	;# 
    91  0097                     	;# 
    92  0099                     	;# 
    93  009A                     	;# 
    94  009B                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  010C                     	;# 
   100  010D                     	;# 
   101  010E                     	;# 
   102  0116                     	;# 
   103  0117                     	;# 
   104  011D                     	;# 
   105  018C                     	;# 
   106  018D                     	;# 
   107  018E                     	;# 
   108  0191                     	;# 
   109  0191                     	;# 
   110  0192                     	;# 
   111  0193                     	;# 
   112  0193                     	;# 
   113  0194                     	;# 
   114  0195                     	;# 
   115  0196                     	;# 
   116  0197                     	;# 
   117  0199                     	;# 
   118  019A                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019B                     	;# 
   122  019B                     	;# 
   123  019C                     	;# 
   124  019C                     	;# 
   125  019D                     	;# 
   126  019E                     	;# 
   127  019F                     	;# 
   128  020D                     	;# 
   129  0210                     	;# 
   130  0211                     	;# 
   131  0211                     	;# 
   132  0212                     	;# 
   133  0212                     	;# 
   134  0213                     	;# 
   135  0213                     	;# 
   136  0214                     	;# 
   137  0214                     	;# 
   138  0215                     	;# 
   139  0215                     	;# 
   140  0215                     	;# 
   141  0216                     	;# 
   142  0216                     	;# 
   143  0217                     	;# 
   144  0217                     	;# 
   145  0291                     	;# 
   146  0291                     	;# 
   147  0292                     	;# 
   148  0293                     	;# 
   149  0298                     	;# 
   150  0298                     	;# 
   151  0299                     	;# 
   152  029A                     	;# 
   153  0394                     	;# 
   154  0395                     	;# 
   155  0396                     	;# 
   156  0FE4                     	;# 
   157  0FE5                     	;# 
   158  0FE6                     	;# 
   159  0FE7                     	;# 
   160  0FE8                     	;# 
   161  0FE9                     	;# 
   162  0FEA                     	;# 
   163  0FEB                     	;# 
   164  0FED                     	;# 
   165  0FEE                     	;# 
   166  0FEF                     	;# 
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  0116                     	;# 
   214  0117                     	;# 
   215  011D                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0194                     	;# 
   225  0195                     	;# 
   226  0196                     	;# 
   227  0197                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020D                     	;# 
   240  0210                     	;# 
   241  0211                     	;# 
   242  0211                     	;# 
   243  0212                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0213                     	;# 
   247  0214                     	;# 
   248  0214                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  0291                     	;# 
   257  0291                     	;# 
   258  0292                     	;# 
   259  0293                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  0FE4                     	;# 
   268  0FE5                     	;# 
   269  0FE6                     	;# 
   270  0FE7                     	;# 
   271  0FE8                     	;# 
   272  0FE9                     	;# 
   273  0FEA                     	;# 
   274  0FEB                     	;# 
   275  0FED                     	;# 
   276  0FEE                     	;# 
   277  0FEF                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0008                     	;# 
   287  0009                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000D                     	;# 
   292  000E                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  0116                     	;# 
   325  0117                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  018E                     	;# 
   330  0191                     	;# 
   331  0191                     	;# 
   332  0192                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0197                     	;# 
   339  0199                     	;# 
   340  019A                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019C                     	;# 
   346  019C                     	;# 
   347  019D                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  020D                     	;# 
   351  0210                     	;# 
   352  0211                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0212                     	;# 
   356  0213                     	;# 
   357  0213                     	;# 
   358  0214                     	;# 
   359  0214                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0216                     	;# 
   364  0216                     	;# 
   365  0217                     	;# 
   366  0217                     	;# 
   367  0291                     	;# 
   368  0291                     	;# 
   369  0292                     	;# 
   370  0293                     	;# 
   371  0298                     	;# 
   372  0298                     	;# 
   373  0299                     	;# 
   374  029A                     	;# 
   375  0394                     	;# 
   376  0395                     	;# 
   377  0396                     	;# 
   378  0FE4                     	;# 
   379  0FE5                     	;# 
   380  0FE6                     	;# 
   381  0FE7                     	;# 
   382  0FE8                     	;# 
   383  0FE9                     	;# 
   384  0FEA                     	;# 
   385  0FEB                     	;# 
   386  0FED                     	;# 
   387  0FEE                     	;# 
   388  0FEF                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  0090                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  011D                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440  018E                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0194                     	;# 
   447  0195                     	;# 
   448  0196                     	;# 
   449  0197                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020D                     	;# 
   462  0210                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0291                     	;# 
   479  0291                     	;# 
   480  0292                     	;# 
   481  0293                     	;# 
   482  0298                     	;# 
   483  0298                     	;# 
   484  0299                     	;# 
   485  029A                     	;# 
   486  0394                     	;# 
   487  0395                     	;# 
   488  0396                     	;# 
   489  0FE4                     	;# 
   490  0FE5                     	;# 
   491  0FE6                     	;# 
   492  0FE7                     	;# 
   493  0FE8                     	;# 
   494  0FE9                     	;# 
   495  0FEA                     	;# 
   496  0FEB                     	;# 
   497  0FED                     	;# 
   498  0FEE                     	;# 
   499  0FEF                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0008                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  0010                     	;# 
   516  0011                     	;# 
   517  0012                     	;# 
   518  0015                     	;# 
   519  0016                     	;# 
   520  0016                     	;# 
   521  0017                     	;# 
   522  0018                     	;# 
   523  0019                     	;# 
   524  001A                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  008C                     	;# 
   528  008D                     	;# 
   529  008E                     	;# 
   530  0090                     	;# 
   531  0091                     	;# 
   532  0092                     	;# 
   533  0095                     	;# 
   534  0096                     	;# 
   535  0097                     	;# 
   536  0099                     	;# 
   537  009A                     	;# 
   538  009B                     	;# 
   539  009B                     	;# 
   540  009C                     	;# 
   541  009D                     	;# 
   542  009E                     	;# 
   543  010C                     	;# 
   544  010D                     	;# 
   545  010E                     	;# 
   546  0116                     	;# 
   547  0117                     	;# 
   548  011D                     	;# 
   549  018C                     	;# 
   550  018D                     	;# 
   551  018E                     	;# 
   552  0191                     	;# 
   553  0191                     	;# 
   554  0192                     	;# 
   555  0193                     	;# 
   556  0193                     	;# 
   557  0194                     	;# 
   558  0195                     	;# 
   559  0196                     	;# 
   560  0197                     	;# 
   561  0199                     	;# 
   562  019A                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019C                     	;# 
   568  019C                     	;# 
   569  019D                     	;# 
   570  019E                     	;# 
   571  019F                     	;# 
   572  020D                     	;# 
   573  0210                     	;# 
   574  0211                     	;# 
   575  0211                     	;# 
   576  0212                     	;# 
   577  0212                     	;# 
   578  0213                     	;# 
   579  0213                     	;# 
   580  0214                     	;# 
   581  0214                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  0291                     	;# 
   590  0291                     	;# 
   591  0292                     	;# 
   592  0293                     	;# 
   593  0298                     	;# 
   594  0298                     	;# 
   595  0299                     	;# 
   596  029A                     	;# 
   597  0394                     	;# 
   598  0395                     	;# 
   599  0396                     	;# 
   600  0FE4                     	;# 
   601  0FE5                     	;# 
   602  0FE6                     	;# 
   603  0FE7                     	;# 
   604  0FE8                     	;# 
   605  0FE9                     	;# 
   606  0FEA                     	;# 
   607  0FEB                     	;# 
   608  0FED                     	;# 
   609  0FEE                     	;# 
   610  0FEF                     	;# 
   611  0000                     	;# 
   612  0001                     	;# 
   613  0002                     	;# 
   614  0003                     	;# 
   615  0004                     	;# 
   616  0005                     	;# 
   617  0006                     	;# 
   618  0007                     	;# 
   619  0008                     	;# 
   620  0009                     	;# 
   621  000A                     	;# 
   622  000B                     	;# 
   623  000C                     	;# 
   624  000D                     	;# 
   625  000E                     	;# 
   626  0010                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  008C                     	;# 
   639  008D                     	;# 
   640  008E                     	;# 
   641  0090                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0116                     	;# 
   658  0117                     	;# 
   659  011D                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0194                     	;# 
   669  0195                     	;# 
   670  0196                     	;# 
   671  0197                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019C                     	;# 
   679  019C                     	;# 
   680  019D                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  020D                     	;# 
   684  0210                     	;# 
   685  0211                     	;# 
   686  0211                     	;# 
   687  0212                     	;# 
   688  0212                     	;# 
   689  0213                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0214                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0216                     	;# 
   697  0216                     	;# 
   698  0217                     	;# 
   699  0217                     	;# 
   700  0291                     	;# 
   701  0291                     	;# 
   702  0292                     	;# 
   703  0293                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  0FE4                     	;# 
   712  0FE5                     	;# 
   713  0FE6                     	;# 
   714  0FE7                     	;# 
   715  0FE8                     	;# 
   716  0FE9                     	;# 
   717  0FEA                     	;# 
   718  0FEB                     	;# 
   719  0FED                     	;# 
   720  0FEE                     	;# 
   721  0FEF                     	;# 
   722  0000                     	;# 
   723  0001                     	;# 
   724  0002                     	;# 
   725  0003                     	;# 
   726  0004                     	;# 
   727  0005                     	;# 
   728  0006                     	;# 
   729  0007                     	;# 
   730  0008                     	;# 
   731  0009                     	;# 
   732  000A                     	;# 
   733  000B                     	;# 
   734  000C                     	;# 
   735  000D                     	;# 
   736  000E                     	;# 
   737  0010                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0015                     	;# 
   741  0016                     	;# 
   742  0016                     	;# 
   743  0017                     	;# 
   744  0018                     	;# 
   745  0019                     	;# 
   746  001A                     	;# 
   747  001B                     	;# 
   748  001C                     	;# 
   749  008C                     	;# 
   750  008D                     	;# 
   751  008E                     	;# 
   752  0090                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0095                     	;# 
   756  0096                     	;# 
   757  0097                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  011D                     	;# 
   771  018C                     	;# 
   772  018D                     	;# 
   773  018E                     	;# 
   774  0191                     	;# 
   775  0191                     	;# 
   776  0192                     	;# 
   777  0193                     	;# 
   778  0193                     	;# 
   779  0194                     	;# 
   780  0195                     	;# 
   781  0196                     	;# 
   782  0197                     	;# 
   783  0199                     	;# 
   784  019A                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019C                     	;# 
   790  019C                     	;# 
   791  019D                     	;# 
   792  019E                     	;# 
   793  019F                     	;# 
   794  020D                     	;# 
   795  0210                     	;# 
   796  0211                     	;# 
   797  0211                     	;# 
   798  0212                     	;# 
   799  0212                     	;# 
   800  0213                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0214                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0216                     	;# 
   808  0216                     	;# 
   809  0217                     	;# 
   810  0217                     	;# 
   811  0291                     	;# 
   812  0291                     	;# 
   813  0292                     	;# 
   814  0293                     	;# 
   815  0298                     	;# 
   816  0298                     	;# 
   817  0299                     	;# 
   818  029A                     	;# 
   819  0394                     	;# 
   820  0395                     	;# 
   821  0396                     	;# 
   822  0FE4                     	;# 
   823  0FE5                     	;# 
   824  0FE6                     	;# 
   825  0FE7                     	;# 
   826  0FE8                     	;# 
   827  0FE9                     	;# 
   828  0FEA                     	;# 
   829  0FEB                     	;# 
   830  0FED                     	;# 
   831  0FEE                     	;# 
   832  0FEF                     	;# 
   833  0000                     	;# 
   834  0001                     	;# 
   835  0002                     	;# 
   836  0003                     	;# 
   837  0004                     	;# 
   838  0005                     	;# 
   839  0006                     	;# 
   840  0007                     	;# 
   841  0008                     	;# 
   842  0009                     	;# 
   843  000A                     	;# 
   844  000B                     	;# 
   845  000C                     	;# 
   846  000D                     	;# 
   847  000E                     	;# 
   848  0010                     	;# 
   849  0011                     	;# 
   850  0012                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0016                     	;# 
   854  0017                     	;# 
   855  0018                     	;# 
   856  0019                     	;# 
   857  001A                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  0090                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0095                     	;# 
   867  0096                     	;# 
   868  0097                     	;# 
   869  0099                     	;# 
   870  009A                     	;# 
   871  009B                     	;# 
   872  009B                     	;# 
   873  009C                     	;# 
   874  009D                     	;# 
   875  009E                     	;# 
   876  010C                     	;# 
   877  010D                     	;# 
   878  010E                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018E                     	;# 
   885  0191                     	;# 
   886  0191                     	;# 
   887  0192                     	;# 
   888  0193                     	;# 
   889  0193                     	;# 
   890  0194                     	;# 
   891  0195                     	;# 
   892  0196                     	;# 
   893  0197                     	;# 
   894  0199                     	;# 
   895  019A                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019C                     	;# 
   901  019C                     	;# 
   902  019D                     	;# 
   903  019E                     	;# 
   904  019F                     	;# 
   905  020D                     	;# 
   906  0210                     	;# 
   907  0211                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0212                     	;# 
   911  0213                     	;# 
   912  0213                     	;# 
   913  0214                     	;# 
   914  0214                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0216                     	;# 
   919  0216                     	;# 
   920  0217                     	;# 
   921  0217                     	;# 
   922  0291                     	;# 
   923  0291                     	;# 
   924  0292                     	;# 
   925  0293                     	;# 
   926  0298                     	;# 
   927  0298                     	;# 
   928  0299                     	;# 
   929  029A                     	;# 
   930  0394                     	;# 
   931  0395                     	;# 
   932  0396                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0010                     	;# 
   960  0011                     	;# 
   961  0012                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0090                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  0116                     	;# 
   991  0117                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018D                     	;# 
   995  018E                     	;# 
   996  0191                     	;# 
   997  0191                     	;# 
   998  0192                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0197                     	;# 
  1005  0199                     	;# 
  1006  019A                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019C                     	;# 
  1012  019C                     	;# 
  1013  019D                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  020D                     	;# 
  1017  0210                     	;# 
  1018  0211                     	;# 
  1019  0211                     	;# 
  1020  0212                     	;# 
  1021  0212                     	;# 
  1022  0213                     	;# 
  1023  0213                     	;# 
  1024  0214                     	;# 
  1025  0214                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0216                     	;# 
  1030  0216                     	;# 
  1031  0217                     	;# 
  1032  0217                     	;# 
  1033  0291                     	;# 
  1034  0291                     	;# 
  1035  0292                     	;# 
  1036  0293                     	;# 
  1037  0298                     	;# 
  1038  0298                     	;# 
  1039  0299                     	;# 
  1040  029A                     	;# 
  1041  0394                     	;# 
  1042  0395                     	;# 
  1043  0396                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000D                     	;# 
  1069  000E                     	;# 
  1070  0010                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0015                     	;# 
  1074  0016                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001C                     	;# 
  1082  008C                     	;# 
  1083  008D                     	;# 
  1084  008E                     	;# 
  1085  0090                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0095                     	;# 
  1089  0096                     	;# 
  1090  0097                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010D                     	;# 
  1100  010E                     	;# 
  1101  0116                     	;# 
  1102  0117                     	;# 
  1103  011D                     	;# 
  1104  018C                     	;# 
  1105  018D                     	;# 
  1106  018E                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0197                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019E                     	;# 
  1126  019F                     	;# 
  1127  020D                     	;# 
  1128  0210                     	;# 
  1129  0211                     	;# 
  1130  0211                     	;# 
  1131  0212                     	;# 
  1132  0212                     	;# 
  1133  0213                     	;# 
  1134  0213                     	;# 
  1135  0214                     	;# 
  1136  0214                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0216                     	;# 
  1141  0216                     	;# 
  1142  0217                     	;# 
  1143  0217                     	;# 
  1144  0291                     	;# 
  1145  0291                     	;# 
  1146  0292                     	;# 
  1147  0293                     	;# 
  1148  0298                     	;# 
  1149  0298                     	;# 
  1150  0299                     	;# 
  1151  029A                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  0FE4                     	;# 
  1156  0FE5                     	;# 
  1157  0FE6                     	;# 
  1158  0FE7                     	;# 
  1159  0FE8                     	;# 
  1160  0FE9                     	;# 
  1161  0FEA                     	;# 
  1162  0FEB                     	;# 
  1163  0FED                     	;# 
  1164  0FEE                     	;# 
  1165  0FEF                     	;# 
  1166  0000                     	;# 
  1167  0001                     	;# 
  1168  0002                     	;# 
  1169  0003                     	;# 
  1170  0004                     	;# 
  1171  0005                     	;# 
  1172  0006                     	;# 
  1173  0007                     	;# 
  1174  0008                     	;# 
  1175  0009                     	;# 
  1176  000A                     	;# 
  1177  000B                     	;# 
  1178  000C                     	;# 
  1179  000D                     	;# 
  1180  000E                     	;# 
  1181  0010                     	;# 
  1182  0011                     	;# 
  1183  0012                     	;# 
  1184  0015                     	;# 
  1185  0016                     	;# 
  1186  0016                     	;# 
  1187  0017                     	;# 
  1188  0018                     	;# 
  1189  0019                     	;# 
  1190  001A                     	;# 
  1191  001B                     	;# 
  1192  001C                     	;# 
  1193  008C                     	;# 
  1194  008D                     	;# 
  1195  008E                     	;# 
  1196  0090                     	;# 
  1197  0091                     	;# 
  1198  0092                     	;# 
  1199  0095                     	;# 
  1200  0096                     	;# 
  1201  0097                     	;# 
  1202  0099                     	;# 
  1203  009A                     	;# 
  1204  009B                     	;# 
  1205  009B                     	;# 
  1206  009C                     	;# 
  1207  009D                     	;# 
  1208  009E                     	;# 
  1209  010C                     	;# 
  1210  010D                     	;# 
  1211  010E                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  011D                     	;# 
  1215  018C                     	;# 
  1216  018D                     	;# 
  1217  018E                     	;# 
  1218  0191                     	;# 
  1219  0191                     	;# 
  1220  0192                     	;# 
  1221  0193                     	;# 
  1222  0193                     	;# 
  1223  0194                     	;# 
  1224  0195                     	;# 
  1225  0196                     	;# 
  1226  0197                     	;# 
  1227  0199                     	;# 
  1228  019A                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019C                     	;# 
  1234  019C                     	;# 
  1235  019D                     	;# 
  1236  019E                     	;# 
  1237  019F                     	;# 
  1238  020D                     	;# 
  1239  0210                     	;# 
  1240  0211                     	;# 
  1241  0211                     	;# 
  1242  0212                     	;# 
  1243  0212                     	;# 
  1244  0213                     	;# 
  1245  0213                     	;# 
  1246  0214                     	;# 
  1247  0214                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0216                     	;# 
  1252  0216                     	;# 
  1253  0217                     	;# 
  1254  0217                     	;# 
  1255  0291                     	;# 
  1256  0291                     	;# 
  1257  0292                     	;# 
  1258  0293                     	;# 
  1259  0298                     	;# 
  1260  0298                     	;# 
  1261  0299                     	;# 
  1262  029A                     	;# 
  1263  0394                     	;# 
  1264  0395                     	;# 
  1265  0396                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000D                     	;# 
  1291  000E                     	;# 
  1292  0010                     	;# 
  1293  0011                     	;# 
  1294  0012                     	;# 
  1295  0015                     	;# 
  1296  0016                     	;# 
  1297  0016                     	;# 
  1298  0017                     	;# 
  1299  0018                     	;# 
  1300  0019                     	;# 
  1301  001A                     	;# 
  1302  001B                     	;# 
  1303  001C                     	;# 
  1304  008C                     	;# 
  1305  008D                     	;# 
  1306  008E                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0095                     	;# 
  1311  0096                     	;# 
  1312  0097                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0116                     	;# 
  1324  0117                     	;# 
  1325  011D                     	;# 
  1326  018C                     	;# 
  1327  018D                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  019A                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019C                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020D                     	;# 
  1350  0210                     	;# 
  1351  0211                     	;# 
  1352  0211                     	;# 
  1353  0212                     	;# 
  1354  0212                     	;# 
  1355  0213                     	;# 
  1356  0213                     	;# 
  1357  0214                     	;# 
  1358  0214                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0216                     	;# 
  1363  0216                     	;# 
  1364  0217                     	;# 
  1365  0217                     	;# 
  1366  0291                     	;# 
  1367  0291                     	;# 
  1368  0292                     	;# 
  1369  0293                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0FE4                     	;# 
  1378  0FE5                     	;# 
  1379  0FE6                     	;# 
  1380  0FE7                     	;# 
  1381  0FE8                     	;# 
  1382  0FE9                     	;# 
  1383  0FEA                     	;# 
  1384  0FEB                     	;# 
  1385  0FED                     	;# 
  1386  0FEE                     	;# 
  1387  0FEF                     	;# 
  1388  0000                     	;# 
  1389  0001                     	;# 
  1390  0002                     	;# 
  1391  0003                     	;# 
  1392  0004                     	;# 
  1393  0005                     	;# 
  1394  0006                     	;# 
  1395  0007                     	;# 
  1396  0008                     	;# 
  1397  0009                     	;# 
  1398  000A                     	;# 
  1399  000B                     	;# 
  1400  000C                     	;# 
  1401  000D                     	;# 
  1402  000E                     	;# 
  1403  0010                     	;# 
  1404  0011                     	;# 
  1405  0012                     	;# 
  1406  0015                     	;# 
  1407  0016                     	;# 
  1408  0016                     	;# 
  1409  0017                     	;# 
  1410  0018                     	;# 
  1411  0019                     	;# 
  1412  001A                     	;# 
  1413  001B                     	;# 
  1414  001C                     	;# 
  1415  008C                     	;# 
  1416  008D                     	;# 
  1417  008E                     	;# 
  1418  0090                     	;# 
  1419  0091                     	;# 
  1420  0092                     	;# 
  1421  0095                     	;# 
  1422  0096                     	;# 
  1423  0097                     	;# 
  1424  0099                     	;# 
  1425  009A                     	;# 
  1426  009B                     	;# 
  1427  009B                     	;# 
  1428  009C                     	;# 
  1429  009D                     	;# 
  1430  009E                     	;# 
  1431  010C                     	;# 
  1432  010D                     	;# 
  1433  010E                     	;# 
  1434  0116                     	;# 
  1435  0117                     	;# 
  1436  011D                     	;# 
  1437  018C                     	;# 
  1438  018D                     	;# 
  1439  018E                     	;# 
  1440  0191                     	;# 
  1441  0191                     	;# 
  1442  0192                     	;# 
  1443  0193                     	;# 
  1444  0193                     	;# 
  1445  0194                     	;# 
  1446  0195                     	;# 
  1447  0196                     	;# 
  1448  0197                     	;# 
  1449  0199                     	;# 
  1450  019A                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019C                     	;# 
  1456  019C                     	;# 
  1457  019D                     	;# 
  1458  019E                     	;# 
  1459  019F                     	;# 
  1460  020D                     	;# 
  1461  0210                     	;# 
  1462  0211                     	;# 
  1463  0211                     	;# 
  1464  0212                     	;# 
  1465  0212                     	;# 
  1466  0213                     	;# 
  1467  0213                     	;# 
  1468  0214                     	;# 
  1469  0214                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0216                     	;# 
  1474  0216                     	;# 
  1475  0217                     	;# 
  1476  0217                     	;# 
  1477  0291                     	;# 
  1478  0291                     	;# 
  1479  0292                     	;# 
  1480  0293                     	;# 
  1481  0298                     	;# 
  1482  0298                     	;# 
  1483  0299                     	;# 
  1484  029A                     	;# 
  1485  0394                     	;# 
  1486  0395                     	;# 
  1487  0396                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0010                     	;# 
  1515  0011                     	;# 
  1516  0012                     	;# 
  1517  0015                     	;# 
  1518  0016                     	;# 
  1519  0016                     	;# 
  1520  0017                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  001A                     	;# 
  1524  001B                     	;# 
  1525  001C                     	;# 
  1526  008C                     	;# 
  1527  008D                     	;# 
  1528  008E                     	;# 
  1529  0090                     	;# 
  1530  0091                     	;# 
  1531  0092                     	;# 
  1532  0095                     	;# 
  1533  0096                     	;# 
  1534  0097                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  011D                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0197                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020D                     	;# 
  1572  0210                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0291                     	;# 
  1589  0291                     	;# 
  1590  0292                     	;# 
  1591  0293                     	;# 
  1592  0298                     	;# 
  1593  0298                     	;# 
  1594  0299                     	;# 
  1595  029A                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0010                     	;# 
  1626  0011                     	;# 
  1627  0012                     	;# 
  1628  0015                     	;# 
  1629  0016                     	;# 
  1630  0016                     	;# 
  1631  0017                     	;# 
  1632  0018                     	;# 
  1633  0019                     	;# 
  1634  001A                     	;# 
  1635  001B                     	;# 
  1636  001C                     	;# 
  1637  008C                     	;# 
  1638  008D                     	;# 
  1639  008E                     	;# 
  1640  0090                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0095                     	;# 
  1644  0096                     	;# 
  1645  0097                     	;# 
  1646  0099                     	;# 
  1647  009A                     	;# 
  1648  009B                     	;# 
  1649  009B                     	;# 
  1650  009C                     	;# 
  1651  009D                     	;# 
  1652  009E                     	;# 
  1653  010C                     	;# 
  1654  010D                     	;# 
  1655  010E                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  011D                     	;# 
  1659  018C                     	;# 
  1660  018D                     	;# 
  1661  018E                     	;# 
  1662  0191                     	;# 
  1663  0191                     	;# 
  1664  0192                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0197                     	;# 
  1671  0199                     	;# 
  1672  019A                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019C                     	;# 
  1678  019C                     	;# 
  1679  019D                     	;# 
  1680  019E                     	;# 
  1681  019F                     	;# 
  1682  020D                     	;# 
  1683  0210                     	;# 
  1684  0211                     	;# 
  1685  0211                     	;# 
  1686  0212                     	;# 
  1687  0212                     	;# 
  1688  0213                     	;# 
  1689  0213                     	;# 
  1690  0214                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0216                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0217                     	;# 
  1699  0291                     	;# 
  1700  0291                     	;# 
  1701  0292                     	;# 
  1702  0293                     	;# 
  1703  0298                     	;# 
  1704  0298                     	;# 
  1705  0299                     	;# 
  1706  029A                     	;# 
  1707  0394                     	;# 
  1708  0395                     	;# 
  1709  0396                     	;# 
  1710  0FE4                     	;# 
  1711  0FE5                     	;# 
  1712  0FE6                     	;# 
  1713  0FE7                     	;# 
  1714  0FE8                     	;# 
  1715  0FE9                     	;# 
  1716  0FEA                     	;# 
  1717  0FEB                     	;# 
  1718  0FED                     	;# 
  1719  0FEE                     	;# 
  1720  0FEF                     	;# 
  1721  0000                     	;# 
  1722  0001                     	;# 
  1723  0002                     	;# 
  1724  0003                     	;# 
  1725  0004                     	;# 
  1726  0005                     	;# 
  1727  0006                     	;# 
  1728  0007                     	;# 
  1729  0008                     	;# 
  1730  0009                     	;# 
  1731  000A                     	;# 
  1732  000B                     	;# 
  1733  000C                     	;# 
  1734  000D                     	;# 
  1735  000E                     	;# 
  1736  0010                     	;# 
  1737  0011                     	;# 
  1738  0012                     	;# 
  1739  0015                     	;# 
  1740  0016                     	;# 
  1741  0016                     	;# 
  1742  0017                     	;# 
  1743  0018                     	;# 
  1744  0019                     	;# 
  1745  001A                     	;# 
  1746  001B                     	;# 
  1747  001C                     	;# 
  1748  008C                     	;# 
  1749  008D                     	;# 
  1750  008E                     	;# 
  1751  0090                     	;# 
  1752  0091                     	;# 
  1753  0092                     	;# 
  1754  0095                     	;# 
  1755  0096                     	;# 
  1756  0097                     	;# 
  1757  0099                     	;# 
  1758  009A                     	;# 
  1759  009B                     	;# 
  1760  009B                     	;# 
  1761  009C                     	;# 
  1762  009D                     	;# 
  1763  009E                     	;# 
  1764  010C                     	;# 
  1765  010D                     	;# 
  1766  010E                     	;# 
  1767  0116                     	;# 
  1768  0117                     	;# 
  1769  011D                     	;# 
  1770  018C                     	;# 
  1771  018D                     	;# 
  1772  018E                     	;# 
  1773  0191                     	;# 
  1774  0191                     	;# 
  1775  0192                     	;# 
  1776  0193                     	;# 
  1777  0193                     	;# 
  1778  0194                     	;# 
  1779  0195                     	;# 
  1780  0196                     	;# 
  1781  0197                     	;# 
  1782  0199                     	;# 
  1783  019A                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019C                     	;# 
  1789  019C                     	;# 
  1790  019D                     	;# 
  1791  019E                     	;# 
  1792  019F                     	;# 
  1793  020D                     	;# 
  1794  0210                     	;# 
  1795  0211                     	;# 
  1796  0211                     	;# 
  1797  0212                     	;# 
  1798  0212                     	;# 
  1799  0213                     	;# 
  1800  0213                     	;# 
  1801  0214                     	;# 
  1802  0214                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0216                     	;# 
  1807  0216                     	;# 
  1808  0217                     	;# 
  1809  0217                     	;# 
  1810  0291                     	;# 
  1811  0291                     	;# 
  1812  0292                     	;# 
  1813  0293                     	;# 
  1814  0298                     	;# 
  1815  0298                     	;# 
  1816  0299                     	;# 
  1817  029A                     	;# 
  1818  0394                     	;# 
  1819  0395                     	;# 
  1820  0396                     	;# 
  1821  0FE4                     	;# 
  1822  0FE5                     	;# 
  1823  0FE6                     	;# 
  1824  0FE7                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEB                     	;# 
  1829  0FED                     	;# 
  1830  0FEE                     	;# 
  1831  0FEF                     	;# 
  1832  0000                     	;# 
  1833  0001                     	;# 
  1834  0002                     	;# 
  1835  0003                     	;# 
  1836  0004                     	;# 
  1837  0005                     	;# 
  1838  0006                     	;# 
  1839  0007                     	;# 
  1840  0008                     	;# 
  1841  0009                     	;# 
  1842  000A                     	;# 
  1843  000B                     	;# 
  1844  000C                     	;# 
  1845  000D                     	;# 
  1846  000E                     	;# 
  1847  0010                     	;# 
  1848  0011                     	;# 
  1849  0012                     	;# 
  1850  0015                     	;# 
  1851  0016                     	;# 
  1852  0016                     	;# 
  1853  0017                     	;# 
  1854  0018                     	;# 
  1855  0019                     	;# 
  1856  001A                     	;# 
  1857  001B                     	;# 
  1858  001C                     	;# 
  1859  008C                     	;# 
  1860  008D                     	;# 
  1861  008E                     	;# 
  1862  0090                     	;# 
  1863  0091                     	;# 
  1864  0092                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0099                     	;# 
  1869  009A                     	;# 
  1870  009B                     	;# 
  1871  009B                     	;# 
  1872  009C                     	;# 
  1873  009D                     	;# 
  1874  009E                     	;# 
  1875  010C                     	;# 
  1876  010D                     	;# 
  1877  010E                     	;# 
  1878  0116                     	;# 
  1879  0117                     	;# 
  1880  011D                     	;# 
  1881  018C                     	;# 
  1882  018D                     	;# 
  1883  018E                     	;# 
  1884  0191                     	;# 
  1885  0191                     	;# 
  1886  0192                     	;# 
  1887  0193                     	;# 
  1888  0193                     	;# 
  1889  0194                     	;# 
  1890  0195                     	;# 
  1891  0196                     	;# 
  1892  0197                     	;# 
  1893  0199                     	;# 
  1894  019A                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019C                     	;# 
  1900  019C                     	;# 
  1901  019D                     	;# 
  1902  019E                     	;# 
  1903  019F                     	;# 
  1904  020D                     	;# 
  1905  0210                     	;# 
  1906  0211                     	;# 
  1907  0211                     	;# 
  1908  0212                     	;# 
  1909  0212                     	;# 
  1910  0213                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0214                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0216                     	;# 
  1918  0216                     	;# 
  1919  0217                     	;# 
  1920  0217                     	;# 
  1921  0291                     	;# 
  1922  0291                     	;# 
  1923  0292                     	;# 
  1924  0293                     	;# 
  1925  0298                     	;# 
  1926  0298                     	;# 
  1927  0299                     	;# 
  1928  029A                     	;# 
  1929  0394                     	;# 
  1930  0395                     	;# 
  1931  0396                     	;# 
  1932  0FE4                     	;# 
  1933  0FE5                     	;# 
  1934  0FE6                     	;# 
  1935  0FE7                     	;# 
  1936  0FE8                     	;# 
  1937  0FE9                     	;# 
  1938  0FEA                     	;# 
  1939  0FEB                     	;# 
  1940  0FED                     	;# 
  1941  0FEE                     	;# 
  1942  0FEF                     	;# 
  1943  0000                     	;# 
  1944  0001                     	;# 
  1945  0002                     	;# 
  1946  0003                     	;# 
  1947  0004                     	;# 
  1948  0005                     	;# 
  1949  0006                     	;# 
  1950  0007                     	;# 
  1951  0008                     	;# 
  1952  0009                     	;# 
  1953  000A                     	;# 
  1954  000B                     	;# 
  1955  000C                     	;# 
  1956  000D                     	;# 
  1957  000E                     	;# 
  1958  0010                     	;# 
  1959  0011                     	;# 
  1960  0012                     	;# 
  1961  0015                     	;# 
  1962  0016                     	;# 
  1963  0016                     	;# 
  1964  0017                     	;# 
  1965  0018                     	;# 
  1966  0019                     	;# 
  1967  001A                     	;# 
  1968  001B                     	;# 
  1969  001C                     	;# 
  1970  008C                     	;# 
  1971  008D                     	;# 
  1972  008E                     	;# 
  1973  0090                     	;# 
  1974  0091                     	;# 
  1975  0092                     	;# 
  1976  0095                     	;# 
  1977  0096                     	;# 
  1978  0097                     	;# 
  1979  0099                     	;# 
  1980  009A                     	;# 
  1981  009B                     	;# 
  1982  009B                     	;# 
  1983  009C                     	;# 
  1984  009D                     	;# 
  1985  009E                     	;# 
  1986  010C                     	;# 
  1987  010D                     	;# 
  1988  010E                     	;# 
  1989  0116                     	;# 
  1990  0117                     	;# 
  1991  011D                     	;# 
  1992  018C                     	;# 
  1993  018D                     	;# 
  1994  018E                     	;# 
  1995  0191                     	;# 
  1996  0191                     	;# 
  1997  0192                     	;# 
  1998  0193                     	;# 
  1999  0193                     	;# 
  2000  0194                     	;# 
  2001  0195                     	;# 
  2002  0196                     	;# 
  2003  0197                     	;# 
  2004  0199                     	;# 
  2005  019A                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019C                     	;# 
  2011  019C                     	;# 
  2012  019D                     	;# 
  2013  019E                     	;# 
  2014  019F                     	;# 
  2015  020D                     	;# 
  2016  0210                     	;# 
  2017  0211                     	;# 
  2018  0211                     	;# 
  2019  0212                     	;# 
  2020  0212                     	;# 
  2021  0213                     	;# 
  2022  0213                     	;# 
  2023  0214                     	;# 
  2024  0214                     	;# 
  2025  0215                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0216                     	;# 
  2029  0216                     	;# 
  2030  0217                     	;# 
  2031  0217                     	;# 
  2032  0291                     	;# 
  2033  0291                     	;# 
  2034  0292                     	;# 
  2035  0293                     	;# 
  2036  0298                     	;# 
  2037  0298                     	;# 
  2038  0299                     	;# 
  2039  029A                     	;# 
  2040  0394                     	;# 
  2041  0395                     	;# 
  2042  0396                     	;# 
  2043  0FE4                     	;# 
  2044  0FE5                     	;# 
  2045  0FE6                     	;# 
  2046  0FE7                     	;# 
  2047  0FE8                     	;# 
  2048  0FE9                     	;# 
  2049  0FEA                     	;# 
  2050  0FEB                     	;# 
  2051  0FED                     	;# 
  2052  0FEE                     	;# 
  2053  0FEF                     	;# 
  2054                           
  2055                           	psect	idataBANK1
  2056  04A1                     __pidataBANK1:	
  2057                           
  2058                           ;initializer for __product
  2059  04A1  3463               	retlw	99
  2060  04A2  3402               	retlw	2
  2061  04A3  3400               	retlw	0
  2062  04A4  3400               	retlw	0
  2063  04A5  3400               	retlw	0
  2064  04A6  3400               	retlw	0
  2065  04A7  3400               	retlw	0
  2066  04A8  3400               	retlw	0
  2067  04A9  3400               	retlw	0
  2068  04AA  3400               	retlw	0
  2069  04AB  3400               	retlw	0
  2070  04AC  3400               	retlw	0
  2071  04AD  34FF               	retlw	255
  2072  04AE  34FF               	retlw	255
  2073  04AF  34FF               	retlw	255
  2074  04B0  3400               	retlw	0
  2075  04B1  3400               	retlw	0
  2076  04B2  3400               	retlw	0
  2077  04B3  3400               	retlw	0
  2078  04B4  3400               	retlw	0
  2079  04B5  3400               	retlw	0
  2080  04B6  3400               	retlw	0
  2081  04B7  3400               	retlw	0
  2082  04B8  3400               	retlw	0
  2083  04B9  3400               	retlw	0
  2084  04BA  3400               	retlw	0
  2085  04BB  3400               	retlw	0
  2086  04BC  3400               	retlw	0
  2087  04BD  3400               	retlw	0
  2088  04BE  3400               	retlw	0
  2089  04BF  3400               	retlw	0
  2090  04C0  3400               	retlw	0
  2091                           
  2092                           	psect	stringtext
  2093  0200                     __pstringtext:	
  2094  0200                     _CC2500_registers_address:	
  2095  0200  3403               	retlw	3
  2096  0201  3416               	retlw	22
  2097  0202  3417               	retlw	23
  2098  0203  341E               	retlw	30
  2099  0204  341F               	retlw	31
  2100  0205  3420               	retlw	32
  2101  0206  342A               	retlw	42
  2102  0207  342B               	retlw	43
  2103  0208  340B               	retlw	11
  2104  0209  340C               	retlw	12
  2105  020A  340D               	retlw	13
  2106  020B  340E               	retlw	14
  2107  020C  340F               	retlw	15
  2108  020D  3410               	retlw	16
  2109  020E  3411               	retlw	17
  2110  020F  3412               	retlw	18
  2111  0210  3413               	retlw	19
  2112  0211  3414               	retlw	20
  2113  0212  340A               	retlw	10
  2114  0213  3415               	retlw	21
  2115  0214  3421               	retlw	33
  2116  0215  3422               	retlw	34
  2117  0216  3418               	retlw	24
  2118  0217  3419               	retlw	25
  2119  0218  341A               	retlw	26
  2120  0219  341B               	retlw	27
  2121  021A  341C               	retlw	28
  2122  021B  341D               	retlw	29
  2123  021C  3423               	retlw	35
  2124  021D  3424               	retlw	36
  2125  021E  3425               	retlw	37
  2126  021F  3426               	retlw	38
  2127  0220  3429               	retlw	41
  2128  0221  342C               	retlw	44
  2129  0222  342D               	retlw	45
  2130  0223  342E               	retlw	46
  2131  0224  3400               	retlw	0
  2132  0225  3401               	retlw	1
  2133  0226  3402               	retlw	2
  2134  0227  3407               	retlw	7
  2135  0228  3408               	retlw	8
  2136  0229  3409               	retlw	9
  2137  022A  3406               	retlw	6
  2138  022B  3404               	retlw	4
  2139  022C  3405               	retlw	5
  2140  022D  3427               	retlw	39
  2141  022E  3428               	retlw	40
  2142  022F                     __end_of_CC2500_registers_address:	
  2143  022F                     _CC2500_rfSettings:	
  2144  022F  3407               	retlw	7
  2145  0230  3407               	retlw	7
  2146  0231  3430               	retlw	48
  2147  0232  3487               	retlw	135
  2148  0233  346B               	retlw	107
  2149  0234  34F8               	retlw	248
  2150  0235  347F               	retlw	127
  2151  0236  343F               	retlw	63
  2152  0237  3409               	retlw	9
  2153  0238  3400               	retlw	0
  2154  0239  345C               	retlw	92
  2155  023A  34A7               	retlw	167
  2156  023B  3462               	retlw	98
  2157  023C  3486               	retlw	134
  2158  023D  3483               	retlw	131
  2159  023E  3403               	retlw	3
  2160  023F  3422               	retlw	34
  2161  0240  34F8               	retlw	248
  2162  0241  3400               	retlw	0
  2163  0242  3444               	retlw	68
  2164  0243  34B6               	retlw	182
  2165  0244  3410               	retlw	16
  2166  0245  3418               	retlw	24
  2167  0246  341D               	retlw	29
  2168  0247  341C               	retlw	28
  2169  0248  34C7               	retlw	199
  2170  0249  3400               	retlw	0
  2171  024A  34B2               	retlw	178
  2172  024B  34EA               	retlw	234
  2173  024C  340A               	retlw	10
  2174  024D  3400               	retlw	0
  2175  024E  3411               	retlw	17
  2176  024F  3459               	retlw	89
  2177  0250  3488               	retlw	136
  2178  0251  3431               	retlw	49
  2179  0252  340B               	retlw	11
  2180  0253  342F               	retlw	47
  2181  0254  342E               	retlw	46
  2182  0255  3406               	retlw	6
  2183  0256  3404               	retlw	4
  2184  0257  3405               	retlw	5
  2185  0258  3400               	retlw	0
  2186  0259  3430               	retlw	48
  2187  025A  34D3               	retlw	211
  2188  025B  3491               	retlw	145
  2189  025C  3441               	retlw	65
  2190  025D  3400               	retlw	0
  2191  025E                     __end_of_CC2500_rfSettings:	
  2192  025E                     _CC2500_patable_vaule:	
  2193  025E  34FE               	retlw	254
  2194  025F  34FE               	retlw	254
  2195  0260  34FE               	retlw	254
  2196  0261  34FE               	retlw	254
  2197  0262  34FE               	retlw	254
  2198  0263  34FE               	retlw	254
  2199  0264  34FE               	retlw	254
  2200  0265  34FE               	retlw	254
  2201  0266                     __end_of_CC2500_patable_vaule:	
  2202                           
  2203                           	psect	nvCOMMON
  2204  007B                     __pnvCOMMON:	
  2205  007B                     _product:	
  2206  007B                     	ds	1
  2207                           
  2208                           	psect	nvBANK0
  2209  006C                     __pnvBANK0:	
  2210  006C                     _Tx_Length:	
  2211  006C                     	ds	1
  2212  000C                     _PORTA	set	12
  2213  000D                     _PORTB	set	13
  2214  000E                     _PORTC	set	14
  2215  0018                     _T1CON	set	24
  2216  0017                     _TMR1H	set	23
  2217  0016                     _TMR1L	set	22
  2218  005F                     _GIE	set	95
  2219  005E                     _PEIE	set	94
  2220  0060                     _RA0	set	96
  2221  0061                     _RA1	set	97
  2222  0062                     _RA2	set	98
  2223  0070                     _RC0	set	112
  2224  0071                     _RC1	set	113
  2225  0073                     _RC3	set	115
  2226  0074                     _RC4	set	116
  2227  0075                     _RC5	set	117
  2228  0088                     _TMR1IF	set	136
  2229  0099                     _OSCCON	set	153
  2230  008C                     _TRISA	set	140
  2231  008D                     _TRISB	set	141
  2232  008E                     _TRISC	set	142
  2233  0488                     _TMR1IE	set	1160
  2234  010C                     _LATA	set	268
  2235  010D                     _LATB	set	269
  2236  010E                     _LATC	set	270
  2237  018C                     _ANSELA	set	396
  2238  018D                     _ANSELB	set	397
  2239  018E                     _ANSELC	set	398
  2240                           
  2241                           ; #config settings
  2242  0000                     
  2243                           	psect	cinit
  2244  0012                     start_initialization:	
  2245  0012                     __initialization:	
  2246                           
  2247                           ; Clear objects allocated to BITCOMMON
  2248  0012  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2249                           
  2250                           ; Clear objects allocated to COMMON
  2251  0013  01FC               	clrf	__pbssCOMMON& (0+127)
  2252                           
  2253                           ; Clear objects allocated to BANK0
  2254  0014  3020               	movlw	low __pbssBANK0
  2255  0015  0084               	movwf	4
  2256  0016  3000               	movlw	high __pbssBANK0
  2257  0017  0085               	movwf	5
  2258  0018  3045               	movlw	69
  2259  0019  3186  262F  3180   	fcall	clear_ram0
  2260                           
  2261                           ; Initialize objects allocated to BANK1
  2262  001C  30A1               	movlw	low __pidataBANK1
  2263  001D  0084               	movwf	4
  2264  001E  3084               	movlw	(high __pidataBANK1)| (0+128)
  2265  001F  0085               	movwf	5
  2266  0020  30A0               	movlw	low __pdataBANK1
  2267  0021  0086               	movwf	6
  2268  0022  3000               	movlw	high __pdataBANK1
  2269  0023  0087               	movwf	7
  2270  0024  3020               	movlw	32
  2271  0025  3186  2635         	fcall	init_ram
  2272  0027                     end_of_initialization:	
  2273                           ;End of C runtime variable initialization code
  2274                           
  2275  0027                     __end_of__initialization:	
  2276  0027  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2277  0028  0020               	movlb	0
  2278  0029  3184  2CC1         	ljmp	_main	;jump to C main() function
  2279                           
  2280                           	psect	bitbssCOMMON
  2281  03D0                     __pbitbssCOMMON:	
  2282  03D0                     _Receive_OK:	
  2283  03D0                     	ds	1
  2284  03D1                     _Transceive_OK:	
  2285  03D1                     	ds	1
  2286                           
  2287                           	psect	bssCOMMON
  2288  007C                     __pbssCOMMON:	
  2289  007C                     _SPI0Buffer:	
  2290  007C                     	ds	1
  2291                           
  2292                           	psect	bssBANK0
  2293  0020                     __pbssBANK0:	
  2294  0020                     _RF_Data:	
  2295  0020                     	ds	30
  2296  003E                     _myMain:	
  2297  003E                     	ds	15
  2298  004D                     _RF1:	
  2299  004D                     	ds	12
  2300  0059                     _Timer1:	
  2301  0059                     	ds	3
  2302  005C                     _RF_Count:	
  2303  005C                     	ds	2
  2304  005E                     _CRC:	
  2305  005E                     	ds	1
  2306  005F                     _RSSI:	
  2307  005F                     	ds	1
  2308  0060                     _Rx_Length:	
  2309  0060                     	ds	1
  2310  0061                     _SwDetect:	
  2311  0061                     	ds	1
  2312  0062                     _r_address:	
  2313  0062                     	ds	1
  2314  0063                     _r_data:	
  2315  0063                     	ds	1
  2316  0064                     _s_data:	
  2317  0064                     	ds	1
  2318                           
  2319                           	psect	dataBANK1
  2320  00A0                     __pdataBANK1:	
  2321  00A0                     __product:	
  2322  00A0                     	ds	32
  2323                           
  2324                           	psect	clrtext
  2325  062F                     clear_ram0:	
  2326                           ;	Called with FSR0 containing the base address, and
  2327                           ;	WREG with the size to clear
  2328                           
  2329  062F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2330  0630                     clrloop0:	
  2331  0630  0180               	clrf	0	;clear RAM location pointed to by FSR
  2332  0631  3101               	addfsr 0,1
  2333  0632  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2334  0633  2E30               	goto	clrloop0	;have we reached the end yet?
  2335  0634  3400               	retlw	0	;all done for this memory range, return
  2336                           
  2337                           	psect	inittext
  2338  0635                     init_ram:	
  2339  0635  00FE               	movwf	126
  2340  0636                     initloop:	
  2341  0636  0012               	moviw fsr0++
  2342  0637  001E               	movwi fsr1++
  2343  0638  0BFE               	decfsz	126,f
  2344  0639  2E36               	goto	initloop
  2345  063A  3400               	retlw	0
  2346                           
  2347                           	psect	cstackCOMMON
  2348  0070                     __pcstackCOMMON:	
  2349  0070                     ?_Timeout_Counter:	
  2350  0070                     ?_set_TimeoutCleared:	
  2351                           ; 0 bytes @ 0x0
  2352                           
  2353  0070                     ?_CC2500_WriteByte:	
  2354                           ; 0 bytes @ 0x0
  2355                           
  2356  0070                     ?_CC2500_WriteCommand:	
  2357                           ; 0 bytes @ 0x0
  2358                           
  2359  0070                     ?_CC2500_ReadStatus:	
  2360                           ; 0 bytes @ 0x0
  2361                           
  2362  0070                     ?_CC2500_ReadByte:	
  2363                           ; 0 bytes @ 0x0
  2364                           
  2365  0070                     ?_CC2500_PowerRST:	
  2366                           ; 0 bytes @ 0x0
  2367                           
  2368  0070                     ?_CC2500_InitSetREG:	
  2369                           ; 0 bytes @ 0x0
  2370                           
  2371  0070                     ?_CC2500_InitPATable:	
  2372                           ; 0 bytes @ 0x0
  2373                           
  2374  0070                     ?_CC2500_ClearTXFIFO:	
  2375                           ; 0 bytes @ 0x0
  2376                           
  2377  0070                     ?_CC2500_ClearRXFIFO:	
  2378                           ; 0 bytes @ 0x0
  2379                           
  2380  0070                     ?_CC2500_FrequencyCabr:	
  2381                           ; 0 bytes @ 0x0
  2382                           
  2383  0070                     ?_CC2500_SIDLEMode:	
  2384                           ; 0 bytes @ 0x0
  2385                           
  2386  0070                     ?_Fosc_Set:	
  2387                           ; 0 bytes @ 0x0
  2388                           
  2389  0070                     ?_IO_Set:	
  2390                           ; 0 bytes @ 0x0
  2391                           
  2392  0070                     ?_TMR1_Set:	
  2393                           ; 0 bytes @ 0x0
  2394                           
  2395  0070                     ?_TMR1_ISR:	
  2396                           ; 0 bytes @ 0x0
  2397                           
  2398  0070                     ??_TMR1_ISR:	
  2399                           ; 0 bytes @ 0x0
  2400                           
  2401  0070                     ?_myMain_Initialization:	
  2402                           ; 0 bytes @ 0x0
  2403                           
  2404  0070                     ?_RF_Initialization:	
  2405                           ; 0 bytes @ 0x0
  2406                           
  2407  0070                     ?_myUARTtoRF_Initialization:	
  2408                           ; 0 bytes @ 0x0
  2409                           
  2410  0070                     ?_my_MainTimer:	
  2411                           ; 0 bytes @ 0x0
  2412                           
  2413  0070                     ?_RF_Main:	
  2414                           ; 0 bytes @ 0x0
  2415                           
  2416  0070                     ?_myUARTtoRF_Main:	
  2417                           ; 0 bytes @ 0x0
  2418                           
  2419  0070                     ?_setTxData:	
  2420                           ; 0 bytes @ 0x0
  2421                           
  2422  0070                     ?_setRF_Initialization:	
  2423                           ; 0 bytes @ 0x0
  2424                           
  2425  0070                     ?_setRF_Main:	
  2426                           ; 0 bytes @ 0x0
  2427                           
  2428  0070                     ?_getRxData:	
  2429                           ; 0 bytes @ 0x0
  2430                           
  2431  0070                     ?_setLog_Code:	
  2432                           ; 0 bytes @ 0x0
  2433                           
  2434  0070                     ?_setControl_Lights_Table:	
  2435                           ; 0 bytes @ 0x0
  2436                           
  2437  0070                     ?_CC2500_TxData:	
  2438                           ; 0 bytes @ 0x0
  2439                           
  2440  0070                     ?_CC2500_RxData:	
  2441                           ; 0 bytes @ 0x0
  2442                           
  2443  0070                     ?_CC2500_PowerOnInitial:	
  2444                           ; 0 bytes @ 0x0
  2445                           
  2446  0070                     ?_Mcu_Initialization:	
  2447                           ; 0 bytes @ 0x0
  2448                           
  2449  0070                     ?_ISR:	
  2450                           ; 0 bytes @ 0x0
  2451                           
  2452  0070                     ??_ISR:	
  2453                           ; 0 bytes @ 0x0
  2454                           
  2455  0070                     ?_getMain_All_Error_Status:	
  2456                           ; 0 bytes @ 0x0
  2457                           
  2458  0070                     getMain_All_Error_Status@command:	
  2459                           ; 1 bytes @ 0x0
  2460                           
  2461                           
  2462                           ; 1 bytes @ 0x0
  2463  0070                     	ds	1
  2464  0071                     ??_Timeout_Counter:	
  2465  0071                     ??_set_TimeoutCleared:	
  2466                           ; 0 bytes @ 0x1
  2467                           
  2468  0071                     ??_CC2500_WriteByte:	
  2469                           ; 0 bytes @ 0x1
  2470                           
  2471  0071                     ??_CC2500_ReadByte:	
  2472                           ; 0 bytes @ 0x1
  2473                           
  2474  0071                     ?_DelayTime_1us:	
  2475                           ; 0 bytes @ 0x1
  2476                           
  2477  0071                     ??_Fosc_Set:	
  2478                           ; 0 bytes @ 0x1
  2479                           
  2480  0071                     ??_IO_Set:	
  2481                           ; 0 bytes @ 0x1
  2482                           
  2483  0071                     ??_TMR1_Set:	
  2484                           ; 0 bytes @ 0x1
  2485                           
  2486  0071                     ??_myMain_Initialization:	
  2487                           ; 0 bytes @ 0x1
  2488                           
  2489  0071                     ??_myUARTtoRF_Initialization:	
  2490                           ; 0 bytes @ 0x1
  2491                           
  2492  0071                     ??_myUARTtoRF_Main:	
  2493                           ; 0 bytes @ 0x1
  2494                           
  2495  0071                     ??_setTxData:	
  2496                           ; 0 bytes @ 0x1
  2497                           
  2498  0071                     ??_setRF_Initialization:	
  2499                           ; 0 bytes @ 0x1
  2500                           
  2501  0071                     ??_setLog_Code:	
  2502                           ; 0 bytes @ 0x1
  2503                           
  2504  0071                     ??_Mcu_Initialization:	
  2505                           ; 0 bytes @ 0x1
  2506                           
  2507  0071                     ??_getMain_All_Error_Status:	
  2508                           ; 0 bytes @ 0x1
  2509                           
  2510  0071                     getMain_All_Error_Status@status:	
  2511                           ; 0 bytes @ 0x1
  2512                           
  2513  0071                     DelayTime_1us@count:	
  2514                           ; 1 bytes @ 0x1
  2515                           
  2516                           
  2517                           ; 2 bytes @ 0x1
  2518  0071                     	ds	1
  2519  0072                     ??_RF_Initialization:	
  2520  0072                     ??_my_MainTimer:	
  2521                           ; 0 bytes @ 0x2
  2522                           
  2523  0072                     ??_getRxData:	
  2524                           ; 0 bytes @ 0x2
  2525                           
  2526  0072                     ??_setControl_Lights_Table:	
  2527                           ; 0 bytes @ 0x2
  2528                           
  2529  0072                     CC2500_WriteByte@loop_a:	
  2530                           ; 0 bytes @ 0x2
  2531                           
  2532  0072                     CC2500_ReadByte@loop_b:	
  2533                           ; 1 bytes @ 0x2
  2534                           
  2535                           
  2536                           ; 1 bytes @ 0x2
  2537  0072                     	ds	1
  2538  0073                     ??_CC2500_WriteCommand:	
  2539  0073                     ??_CC2500_ReadStatus:	
  2540                           ; 0 bytes @ 0x3
  2541                           
  2542  0073                     ??_DelayTime_1us:	
  2543                           ; 0 bytes @ 0x3
  2544                           
  2545  0073                     ?_CC2500_WriteREG:	
  2546                           ; 0 bytes @ 0x3
  2547                           
  2548  0073                     CC2500_WriteREG@value:	
  2549                           ; 0 bytes @ 0x3
  2550                           
  2551  0073                     getRxData@error:	
  2552                           ; 1 bytes @ 0x3
  2553                           
  2554  0073                     DelayTime_1us@i:	
  2555                           ; 1 bytes @ 0x3
  2556                           
  2557                           
  2558                           ; 2 bytes @ 0x3
  2559  0073                     	ds	1
  2560  0074                     ??_CC2500_WriteREG:	
  2561  0074                     CC2500_WriteCommand@command:	
  2562                           ; 0 bytes @ 0x4
  2563                           
  2564  0074                     CC2500_ReadStatus@status_addr:	
  2565                           ; 1 bytes @ 0x4
  2566                           
  2567                           
  2568                           ; 1 bytes @ 0x4
  2569  0074                     	ds	1
  2570  0075                     ??_CC2500_ClearTXFIFO:	
  2571  0075                     ??_CC2500_ClearRXFIFO:	
  2572                           ; 0 bytes @ 0x5
  2573                           
  2574  0075                     ??_CC2500_SIDLEMode:	
  2575                           ; 0 bytes @ 0x5
  2576                           
  2577  0075                     ??_CC2500_TxData:	
  2578                           ; 0 bytes @ 0x5
  2579                           
  2580  0075                     ??_CC2500_RxData:	
  2581                           ; 0 bytes @ 0x5
  2582                           
  2583  0075                     CC2500_WriteREG@w_addr:	
  2584                           ; 0 bytes @ 0x5
  2585                           
  2586  0075                     DelayTime_1us@j:	
  2587                           ; 1 bytes @ 0x5
  2588                           
  2589                           
  2590                           ; 2 bytes @ 0x5
  2591  0075                     	ds	1
  2592  0076                     ??_CC2500_InitSetREG:	
  2593  0076                     ??_CC2500_InitPATable:	
  2594                           ; 0 bytes @ 0x6
  2595                           
  2596  0076                     CC2500_TxData@loop_e:	
  2597                           ; 0 bytes @ 0x6
  2598                           
  2599  0076                     CC2500_RxData@loop_f:	
  2600                           ; 1 bytes @ 0x6
  2601                           
  2602                           
  2603                           ; 1 bytes @ 0x6
  2604  0076                     	ds	1
  2605  0077                     ??_CC2500_PowerRST:	
  2606  0077                     ??_CC2500_FrequencyCabr:	
  2607                           ; 0 bytes @ 0x7
  2608                           
  2609  0077                     ??_setRF_Main:	
  2610                           ; 0 bytes @ 0x7
  2611                           
  2612  0077                     CC2500_InitSetREG@temp1:	
  2613                           ; 0 bytes @ 0x7
  2614                           
  2615  0077                     CC2500_InitPATable@temp:	
  2616                           ; 1 bytes @ 0x7
  2617                           
  2618                           
  2619                           ; 1 bytes @ 0x7
  2620  0077                     	ds	1
  2621  0078                     ??_RF_Main:	
  2622  0078                     CC2500_InitSetREG@temp2:	
  2623                           ; 0 bytes @ 0x8
  2624                           
  2625  0078                     CC2500_InitPATable@loop_d:	
  2626                           ; 1 bytes @ 0x8
  2627                           
  2628                           
  2629                           ; 1 bytes @ 0x8
  2630  0078                     	ds	1
  2631  0079                     CC2500_InitSetREG@loop_c:	
  2632                           
  2633                           ; 1 bytes @ 0x9
  2634  0079                     	ds	1
  2635  007A                     ??_CC2500_PowerOnInitial:	
  2636  007A                     ??_main:	
  2637                           ; 0 bytes @ 0xA
  2638                           
  2639                           
  2640                           	psect	cstackBANK0
  2641  0065                     __pcstackBANK0:	
  2642                           ; 0 bytes @ 0xA
  2643                           
  2644  0065                     setRF_Main@loop_f:	
  2645                           
  2646                           ; 1 bytes @ 0x0
  2647  0065                     	ds	1
  2648  0066                     setRF_Main@Receive_OK:	
  2649                           
  2650                           ; 1 bytes @ 0x1
  2651  0066                     	ds	1
  2652  0067                     setRF_Main@error:	
  2653                           
  2654                           ; 1 bytes @ 0x2
  2655  0067                     	ds	1
  2656  0068                     ?_main:	
  2657  0068                     main@argc:	
  2658                           ; 2 bytes @ 0x3
  2659                           
  2660                           
  2661                           ; 2 bytes @ 0x3
  2662  0068                     	ds	2
  2663  006A                     main@argv:	
  2664                           
  2665                           ; 2 bytes @ 0x5
  2666  006A                     	ds	2
  2667                           
  2668                           	psect	maintext
  2669  04C1                     __pmaintext:	
  2670 ;;
  2671 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2672 ;;
  2673 ;; *************** function _main *****************
  2674 ;; Defined at:
  2675 ;;		line 7 in file "../src/Main_B1.c"
  2676 ;; Parameters:    Size  Location     Type
  2677 ;;  argc            2    3[BANK0 ] int 
  2678 ;;  argv            2    5[BANK0 ] PTR PTR unsigned char 
  2679 ;; Auto vars:     Size  Location     Type
  2680 ;;		None
  2681 ;; Return value:  Size  Location     Type
  2682 ;;                  2    3[BANK0 ] int 
  2683 ;; Registers used:
  2684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2685 ;; Tracked objects:
  2686 ;;		On entry : 17F/0
  2687 ;;		On exit  : 0/0
  2688 ;;		Unchanged: 0/0
  2689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2690 ;;      Params:         0       4       0       0       0       0       0       0
  2691 ;;      Locals:         0       0       0       0       0       0       0       0
  2692 ;;      Temps:          0       0       0       0       0       0       0       0
  2693 ;;      Totals:         0       4       0       0       0       0       0       0
  2694 ;;Total ram usage:        4 bytes
  2695 ;; Hardware stack levels required when called:    7
  2696 ;; This function calls:
  2697 ;;		_CC2500_PowerOnInitial
  2698 ;;		_Mcu_Initialization
  2699 ;;		_RF_Initialization
  2700 ;;		_RF_Main
  2701 ;;		_myMain_Initialization
  2702 ;;		_myUARTtoRF_Initialization
  2703 ;;		_myUARTtoRF_Main
  2704 ;;		_my_MainTimer
  2705 ;; This function is called by:
  2706 ;;		Startup code after reset
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           
  2711                           ;psect for function _main
  2712  04C1                     _main:	
  2713                           
  2714                           ;Main_B1.c: 8: myMain_Initialization();
  2715                           
  2716                           ;incstack = 0
  2717                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2718  04C1  3185  25F8  3184   	fcall	_myMain_Initialization
  2719                           
  2720                           ;Main_B1.c: 9: Mcu_Initialization();
  2721  04C4  3186  2626  3184   	fcall	_Mcu_Initialization
  2722                           
  2723                           ;Main_B1.c: 10: ;;
  2724                           ;Main_B1.c: 11: ;;
  2725                           ;Main_B1.c: 12: ;;
  2726                           ;Main_B1.c: 14: ;;
  2727                           ;Main_B1.c: 15: ;;
  2728                           ;Main_B1.c: 16: ;;
  2729                           ;Main_B1.c: 17: ;;
  2730                           ;Main_B1.c: 18: ;;
  2731                           ;Main_B1.c: 20: ;;
  2732                           ;Main_B1.c: 21: ;;
  2733                           ;Main_B1.c: 22: ;;
  2734                           ;Main_B1.c: 23: ;;
  2735                           ;Main_B1.c: 24: ;;
  2736                           ;Main_B1.c: 25: RF_Initialization();
  2737  04C7  3186  265B  3184   	fcall	_RF_Initialization
  2738                           
  2739                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  2740  04CA  3185  25A6  3184   	fcall	_CC2500_PowerOnInitial
  2741                           
  2742                           ;Main_B1.c: 27: ;;
  2743                           ;Main_B1.c: 28: myUARTtoRF_Initialization();
  2744  04CD  3186  263B  3184   	fcall	_myUARTtoRF_Initialization
  2745  04D0                     l575:	
  2746                           ;Main_B1.c: 30: while (1) {
  2747                           
  2748                           
  2749                           ;Main_B1.c: 57: }
  2750                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2751  04D0  0020               	movlb	0	; select bank0
  2752  04D1  1C59               	btfss	_Timer1,0
  2753  04D2  2CD0               	goto	l575
  2754                           
  2755                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2756  04D3  1059               	bcf	_Timer1,0
  2757                           
  2758                           ;Main_B1.c: 95: my_MainTimer();
  2759  04D4  3183  238B  3184   	fcall	_my_MainTimer
  2760                           
  2761                           ;Main_B1.c: 96: ;;
  2762                           ;Main_B1.c: 97: ;;
  2763                           ;Main_B1.c: 98: ;;
  2764                           ;Main_B1.c: 99: if (myMain.PowerON == 1) {
  2765  04D7  0020               	movlb	0	; select bank0
  2766  04D8  1C3E               	btfss	_myMain,0
  2767  04D9  2CD0               	goto	l575
  2768                           
  2769                           ;Main_B1.c: 100: ;;
  2770                           ;Main_B1.c: 102: ;;
  2771                           ;Main_B1.c: 103: ;;
  2772                           ;Main_B1.c: 105: ;;
  2773                           ;Main_B1.c: 106: ;;
  2774                           ;Main_B1.c: 107: ;;
  2775                           ;Main_B1.c: 108: ;;
  2776                           ;Main_B1.c: 110: ;;
  2777                           ;Main_B1.c: 111: ;;
  2778                           ;Main_B1.c: 112: ;;
  2779                           ;Main_B1.c: 113: ;;
  2780                           ;Main_B1.c: 114: ;;
  2781                           ;Main_B1.c: 116: RF_Main();
  2782  04DA  3186  2655  3184   	fcall	_RF_Main
  2783                           
  2784                           ;Main_B1.c: 117: ;;
  2785                           ;Main_B1.c: 118: ;;
  2786                           ;Main_B1.c: 119: myUARTtoRF_Main();
  2787  04DD  3186  265E  3184   	fcall	_myUARTtoRF_Main
  2788  04E0  2CD0               	goto	l575
  2789  04E1                     __end_of_main:	
  2790                           ;Main_B1.c: 126: }
  2791                           ;Main_B1.c: 127: }
  2792                           ;Main_B1.c: 161: }
  2793                           ;Main_B1.c: 162: return (0);
  2794                           ;	Return value of _main is never used
  2795                           
  2796                           
  2797                           	psect	text1
  2798  038B                     __ptext1:	
  2799 ;; *************** function _my_MainTimer *****************
  2800 ;; Defined at:
  2801 ;;		line 181 in file "../src/Main_B1.c"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;		None
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;		None
  2806 ;; Return value:  Size  Location     Type
  2807 ;;		None               void
  2808 ;; Registers used:
  2809 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2815 ;;      Params:         0       0       0       0       0       0       0       0
  2816 ;;      Locals:         0       0       0       0       0       0       0       0
  2817 ;;      Temps:          0       0       0       0       0       0       0       0
  2818 ;;      Totals:         0       0       0       0       0       0       0       0
  2819 ;;Total ram usage:        0 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; Hardware stack levels required when called:    3
  2822 ;; This function calls:
  2823 ;;		_setTxData
  2824 ;; This function is called by:
  2825 ;;		_main
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           
  2830                           ;psect for function _my_MainTimer
  2831  038B                     _my_MainTimer:	
  2832                           
  2833                           ;Main_B1.c: 183: if (myMain.PowerON == 0) {
  2834                           
  2835                           ;incstack = 0
  2836                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2837  038B  0020               	movlb	0	; select bank0
  2838  038C  183E               	btfsc	_myMain,0
  2839  038D  2BA3               	goto	l3466
  2840                           
  2841                           ;Main_B1.c: 184: myMain.PowerCount++;
  2842  038E  3001               	movlw	1
  2843  038F  07BF               	addwf	_myMain+1,f
  2844  0390  3000               	movlw	0
  2845  0391  3DC0               	addwfc	_myMain+2,f
  2846                           
  2847                           ;Main_B1.c: 185: if (myMain.PowerCount == 150)
  2848  0392  3001               	movlw	1
  2849  0393  3E3E               	addlw	_myMain& (0+255)
  2850  0394  0086               	movwf	6
  2851  0395  0187               	clrf	7
  2852  0396  3F40               	moviw [0]fsr1
  2853  0397  3A96               	xorlw	150
  2854  0398  1D03               	skipz
  2855  0399  2B9C               	goto	u2785
  2856  039A  3F41               	moviw [1]fsr1
  2857  039B  3A00               	xorlw	0
  2858  039C                     u2785:	
  2859  039C  1D03               	skipz
  2860  039D  2BBA               	goto	l3476
  2861                           
  2862                           ;Main_B1.c: 186: {
  2863                           ;Main_B1.c: 187: myMain.PowerCount = 0;
  2864  039E  01BF               	clrf	_myMain+1
  2865  039F  01C0               	clrf	_myMain+2
  2866                           
  2867                           ;Main_B1.c: 188: myMain.PowerON = 1;
  2868  03A0  143E               	bsf	_myMain,0
  2869                           
  2870                           ;Main_B1.c: 194: ;;
  2871                           ;Main_B1.c: 195: myMain.SelfTest = 1;
  2872  03A1  163E               	bsf	_myMain,4
  2873                           
  2874                           ;Main_B1.c: 204: }
  2875                           ;Main_B1.c: 205: } else {
  2876  03A2  2BBA               	goto	l3476
  2877  03A3                     l3466:	
  2878                           
  2879                           ;Main_B1.c: 213: myMain.Count1++;
  2880  03A3  3001               	movlw	1
  2881  03A4  07C3               	addwf	_myMain+5,f
  2882  03A5  3000               	movlw	0
  2883  03A6  3DC4               	addwfc	_myMain+6,f
  2884                           
  2885                           ;Main_B1.c: 214: if (myMain.Count1 == 100)
  2886  03A7  3005               	movlw	5
  2887  03A8  3E3E               	addlw	_myMain& (0+255)
  2888  03A9  0086               	movwf	6
  2889  03AA  0187               	clrf	7
  2890  03AB  3F40               	moviw [0]fsr1
  2891  03AC  3A64               	xorlw	100
  2892  03AD  1D03               	skipz
  2893  03AE  2BB1               	goto	u2795
  2894  03AF  3F41               	moviw [1]fsr1
  2895  03B0  3A00               	xorlw	0
  2896  03B1                     u2795:	
  2897  03B1  1D03               	skipz
  2898  03B2  2BBA               	goto	l3476
  2899                           
  2900                           ;Main_B1.c: 215: {
  2901                           ;Main_B1.c: 216: myMain.Count1 = 0;
  2902  03B3  01C3               	clrf	_myMain+5
  2903  03B4  01C4               	clrf	_myMain+6
  2904                           
  2905                           ;Main_B1.c: 228: if (myMain.Flag) {
  2906  03B5  1CBE               	btfss	_myMain,1
  2907  03B6  2BB9               	goto	l590
  2908                           
  2909                           ;Main_B1.c: 229: myMain.Flag = 0;
  2910  03B7  10BE               	bcf	_myMain,1
  2911                           
  2912                           ;Main_B1.c: 238: } else {
  2913  03B8  2BBA               	goto	l3476
  2914  03B9                     l590:	
  2915                           
  2916                           ;Main_B1.c: 239: myMain.Flag = 1;
  2917  03B9  14BE               	bsf	_myMain,1
  2918  03BA                     l3476:	
  2919                           
  2920                           ;Main_B1.c: 248: }
  2921                           ;Main_B1.c: 249: }
  2922                           ;Main_B1.c: 251: }
  2923                           ;Main_B1.c: 253: myMain.Count2++;
  2924  03BA  3001               	movlw	1
  2925  03BB  07C5               	addwf	_myMain+7,f
  2926  03BC  3000               	movlw	0
  2927  03BD  3DC6               	addwfc	_myMain+8,f
  2928                           
  2929                           ;Main_B1.c: 254: if (myMain.Count2 == 100) {
  2930  03BE  3007               	movlw	7
  2931  03BF  3E3E               	addlw	_myMain& (0+255)
  2932  03C0  0086               	movwf	6
  2933  03C1  0187               	clrf	7
  2934  03C2  3F40               	moviw [0]fsr1
  2935  03C3  3A64               	xorlw	100
  2936  03C4  1D03               	skipz
  2937  03C5  2BC8               	goto	u2815
  2938  03C6  3F41               	moviw [1]fsr1
  2939  03C7  3A00               	xorlw	0
  2940  03C8                     u2815:	
  2941  03C8  1D03               	skipz
  2942  03C9  0008               	return
  2943                           
  2944                           ;Main_B1.c: 255: myMain.Count2 = 0;
  2945  03CA  01C5               	clrf	_myMain+7
  2946  03CB  01C6               	clrf	_myMain+8
  2947                           
  2948                           ;Main_B1.c: 261: setTxData();
  2949  03CC  3180  20F4         	fcall	_setTxData
  2950  03CE  0008               	return
  2951  03CF                     __end_of_my_MainTimer:	
  2952                           
  2953                           	psect	text2
  2954  065E                     __ptext2:	
  2955 ;; *************** function _myUARTtoRF_Main *****************
  2956 ;; Defined at:
  2957 ;;		line 14 in file "../src/myUARTtoRF.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;		None
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;		None
  2962 ;; Return value:  Size  Location     Type
  2963 ;;		None               void
  2964 ;; Registers used:
  2965 ;;		None
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2971 ;;      Params:         0       0       0       0       0       0       0       0
  2972 ;;      Locals:         0       0       0       0       0       0       0       0
  2973 ;;      Temps:          0       0       0       0       0       0       0       0
  2974 ;;      Totals:         0       0       0       0       0       0       0       0
  2975 ;;Total ram usage:        0 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:    2
  2978 ;; This function calls:
  2979 ;;		Nothing
  2980 ;; This function is called by:
  2981 ;;		_main
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           
  2986                           ;psect for function _myUARTtoRF_Main
  2987  065E                     _myUARTtoRF_Main:	
  2988                           
  2989                           ;incstack = 0
  2990                           ; Regs used in _myUARTtoRF_Main: []
  2991  065E  0008               	return
  2992  065F                     __end_of_myUARTtoRF_Main:	
  2993                           
  2994                           	psect	text3
  2995  063B                     __ptext3:	
  2996 ;; *************** function _myUARTtoRF_Initialization *****************
  2997 ;; Defined at:
  2998 ;;		line 7 in file "../src/myUARTtoRF.c"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;		None
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;		None
  3003 ;; Return value:  Size  Location     Type
  3004 ;;		None               void
  3005 ;; Registers used:
  3006 ;;		None
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3012 ;;      Params:         0       0       0       0       0       0       0       0
  3013 ;;      Locals:         0       0       0       0       0       0       0       0
  3014 ;;      Temps:          0       0       0       0       0       0       0       0
  3015 ;;      Totals:         0       0       0       0       0       0       0       0
  3016 ;;Total ram usage:        0 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; Hardware stack levels required when called:    2
  3019 ;; This function calls:
  3020 ;;		Nothing
  3021 ;; This function is called by:
  3022 ;;		_main
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           
  3027                           ;psect for function _myUARTtoRF_Initialization
  3028  063B                     _myUARTtoRF_Initialization:	
  3029                           
  3030                           ;myUARTtoRF.c: 8: RA0 = 0;
  3031                           
  3032                           ;incstack = 0
  3033                           ; Regs used in _myUARTtoRF_Initialization: []
  3034  063B  0020               	movlb	0	; select bank0
  3035  063C  100C               	bcf	12,0	;volatile
  3036                           
  3037                           ;myUARTtoRF.c: 9: RA1 = 1;
  3038  063D  148C               	bsf	12,1	;volatile
  3039                           
  3040                           ;myUARTtoRF.c: 10: RA2 = 1;
  3041  063E  150C               	bsf	12,2	;volatile
  3042  063F  0008               	return
  3043  0640                     __end_of_myUARTtoRF_Initialization:	
  3044                           
  3045                           	psect	text4
  3046  05F8                     __ptext4:	
  3047 ;; *************** function _myMain_Initialization *****************
  3048 ;; Defined at:
  3049 ;;		line 168 in file "../src/Main_B1.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;		None
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;		None
  3054 ;; Return value:  Size  Location     Type
  3055 ;;		None               void
  3056 ;; Registers used:
  3057 ;;		wreg, fsr1l, fsr1h
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3063 ;;      Params:         0       0       0       0       0       0       0       0
  3064 ;;      Locals:         0       0       0       0       0       0       0       0
  3065 ;;      Temps:          1       0       0       0       0       0       0       0
  3066 ;;      Totals:         1       0       0       0       0       0       0       0
  3067 ;;Total ram usage:        1 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    2
  3070 ;; This function calls:
  3071 ;;		Nothing
  3072 ;; This function is called by:
  3073 ;;		_main
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           
  3078                           ;psect for function _myMain_Initialization
  3079  05F8                     _myMain_Initialization:	
  3080                           
  3081                           ;Main_B1.c: 170: product = &_product;
  3082                           
  3083                           ;incstack = 0
  3084                           ; Regs used in _myMain_Initialization: [wregfsr1]
  3085  05F8  30A0               	movlw	__product& (0+255)
  3086  05F9  00F1               	movwf	??_myMain_Initialization
  3087  05FA  0871               	movf	??_myMain_Initialization,w
  3088  05FB  00FB               	movwf	_product
  3089                           
  3090                           ;Main_B1.c: 171: product->Data[20] = 0xaa;
  3091  05FC  30AA               	movlw	170
  3092  05FD  00F1               	movwf	??_myMain_Initialization
  3093  05FE  087B               	movf	_product,w
  3094  05FF  3E14               	addlw	20
  3095  0600  0086               	movwf	6
  3096  0601  0187               	clrf	7
  3097  0602  0871               	movf	??_myMain_Initialization,w
  3098  0603  0081               	movwf	1
  3099  0604  0008               	return
  3100  0605                     __end_of_myMain_Initialization:	
  3101                           
  3102                           	psect	text5
  3103  0655                     __ptext5:	
  3104 ;; *************** function _RF_Main *****************
  3105 ;; Defined at:
  3106 ;;		line 16 in file "../src/RF_Control_B1.c"
  3107 ;; Parameters:    Size  Location     Type
  3108 ;;		None
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;		None
  3111 ;; Return value:  Size  Location     Type
  3112 ;;		None               void
  3113 ;; Registers used:
  3114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3120 ;;      Params:         0       0       0       0       0       0       0       0
  3121 ;;      Locals:         0       0       0       0       0       0       0       0
  3122 ;;      Temps:          0       0       0       0       0       0       0       0
  3123 ;;      Totals:         0       0       0       0       0       0       0       0
  3124 ;;Total ram usage:        0 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    6
  3127 ;; This function calls:
  3128 ;;		_setRF_Main
  3129 ;; This function is called by:
  3130 ;;		_main
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           
  3135                           ;psect for function _RF_Main
  3136  0655                     _RF_Main:	
  3137                           
  3138                           ;RF_Control_B1.c: 18: setRF_Main();
  3139                           
  3140                           ;incstack = 0
  3141                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3142  0655  3180  202B         	fcall	_setRF_Main
  3143  0657  0008               	return
  3144  0658                     __end_of_RF_Main:	
  3145                           
  3146                           	psect	text6
  3147  002B                     __ptext6:	
  3148 ;; *************** function _setRF_Main *****************
  3149 ;; Defined at:
  3150 ;;		line 52 in file "../src/RF_Control_B1.c"
  3151 ;; Parameters:    Size  Location     Type
  3152 ;;		None
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;  error           1    2[BANK0 ] unsigned char 
  3155 ;;  Receive_OK      1    1[BANK0 ] unsigned char 
  3156 ;;  loop_f          1    0[BANK0 ] unsigned char 
  3157 ;; Return value:  Size  Location     Type
  3158 ;;		None               void
  3159 ;; Registers used:
  3160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3166 ;;      Params:         0       0       0       0       0       0       0       0
  3167 ;;      Locals:         0       3       0       0       0       0       0       0
  3168 ;;      Temps:          1       0       0       0       0       0       0       0
  3169 ;;      Totals:         1       3       0       0       0       0       0       0
  3170 ;;Total ram usage:        4 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    5
  3173 ;; This function calls:
  3174 ;;		_CC2500_RxData
  3175 ;;		_CC2500_TxData
  3176 ;;		_CC2500_WriteCommand
  3177 ;;		_getMain_All_Error_Status
  3178 ;;		_getRxData
  3179 ;; This function is called by:
  3180 ;;		_RF_Main
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           
  3185                           ;psect for function _setRF_Main
  3186  002B                     _setRF_Main:	
  3187                           
  3188                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  3189                           
  3190                           ;incstack = 0
  3191                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3192  002B  0020               	movlb	0	; select bank0
  3193  002C  01E5               	clrf	setRF_Main@loop_f
  3194  002D  01E6               	clrf	setRF_Main@Receive_OK
  3195  002E  01E7               	clrf	setRF_Main@error
  3196                           
  3197                           ;RF_Control_B1.c: 58: if (0 == 0) {
  3198  002F  1C4D               	btfss	_RF1,0
  3199  0030  28F0               	goto	l856
  3200                           
  3201                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  3202  0031  3000               	movlw	0
  3203  0032  3186  2658  3180   	fcall	_getMain_All_Error_Status
  3204  0035  3800               	iorlw	0
  3205  0036  1D03               	skipz
  3206  0037  2838               	goto	l858
  3207  0038                     l858:	
  3208                           ;RF_Control_B1.c: 65: } else {
  3209                           
  3210                           ;RF_Control_B1.c: 63: RF1.Key = 0;
  3211                           
  3212                           
  3213                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  3214  0038  0020               	movlb	0	; select bank0
  3215  0039  13CD               	bcf	_RF1,7
  3216                           
  3217                           ;RF_Control_B1.c: 70: }
  3218                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  3219  003A  1BCD               	btfsc	_RF1,7
  3220  003B  1B4D               	btfsc	_RF1,6
  3221  003C  2842               	goto	l860
  3222                           
  3223                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  3224  003D  01CF               	clrf	_RF1+2
  3225  003E  01D0               	clrf	_RF1+3
  3226                           
  3227                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  3228  003F  14CE               	bsf	_RF1+1,1
  3229                           
  3230                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  3231  0040  11CD               	bcf	_RF1,3
  3232                           
  3233                           ;RF_Control_B1.c: 76: } else {
  3234  0041  0008               	return
  3235  0042                     l860:	
  3236                           
  3237                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  3238  0042  18CE               	btfsc	_RF1+1,1
  3239  0043  1B4D               	btfsc	_RF1,6
  3240  0044  2859               	goto	l3372
  3241                           
  3242                           ;RF_Control_B1.c: 78: RF1.Count++;
  3243  0045  3001               	movlw	1
  3244  0046  07CF               	addwf	_RF1+2,f
  3245  0047  3000               	movlw	0
  3246  0048  3DD0               	addwfc	_RF1+3,f
  3247                           
  3248                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  3249  0049  3002               	movlw	2
  3250  004A  3E4D               	addlw	_RF1& (0+255)
  3251  004B  0086               	movwf	6
  3252  004C  0187               	clrf	7
  3253  004D  3F40               	moviw [0]fsr1
  3254  004E  0654               	xorwf	_RF1+7,w
  3255  004F  1D03               	skipz
  3256  0050  2853               	goto	u2585
  3257  0051  3F41               	moviw [1]fsr1
  3258  0052  0655               	xorwf	_RF1+8,w
  3259  0053                     u2585:	
  3260  0053  1D03               	skipz
  3261  0054  28BD               	goto	l3424
  3262                           
  3263                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  3264  0055  01CF               	clrf	_RF1+2
  3265  0056  01D0               	clrf	_RF1+3
  3266                           
  3267                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  3268  0057  10CE               	bcf	_RF1+1,1
  3269                           
  3270                           ;RF_Control_B1.c: 82: }
  3271                           ;RF_Control_B1.c: 83: } else {
  3272  0058  28BD               	goto	l3424
  3273  0059                     l3372:	
  3274                           
  3275                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  3276  0059  01CF               	clrf	_RF1+2
  3277  005A  01D0               	clrf	_RF1+3
  3278                           
  3279                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  3280  005B  10CE               	bcf	_RF1+1,1
  3281                           
  3282                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  3283  005C  194D               	btfsc	_RF1,2
  3284  005D  1B4D               	btfsc	_RF1,6
  3285  005E  2875               	goto	l865
  3286                           
  3287                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  3288  005F  114D               	bcf	_RF1,2
  3289                           
  3290                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  3291  0060  11CD               	bcf	_RF1,3
  3292                           
  3293                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  3294  0061  10CD               	bcf	_RF1,1
  3295                           
  3296                           ;RF_Control_B1.c: 94: if (RF1.RxStatus == 1 || RF1.ReceiveGO == 1) {
  3297  0062  19CD               	btfsc	_RF1,3
  3298  0063  2866               	goto	l3384
  3299  0064  1CCD               	btfss	_RF1,1
  3300  0065  286E               	goto	l866
  3301  0066                     l3384:	
  3302                           
  3303                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x36);
  3304  0066  3036               	movlw	54
  3305  0067  3185  2577  3180   	fcall	_CC2500_WriteCommand
  3306                           
  3307                           ;RF_Control_B1.c: 97: CC2500_WriteCommand(0x3A);
  3308  006A  303A               	movlw	58
  3309  006B  3185  2577  3180   	fcall	_CC2500_WriteCommand
  3310  006E                     l866:	
  3311                           
  3312                           ;RF_Control_B1.c: 99: }
  3313                           ;RF_Control_B1.c: 100: CC2500_TxData();
  3314  006E  3183  232E  3180   	fcall	_CC2500_TxData
  3315                           
  3316                           ;RF_Control_B1.c: 101: RA1 = RA1 == 1 ? 0 : 1;
  3317  0071  3002               	movlw	2
  3318  0072  0020               	movlb	0	; select bank0
  3319  0073  068C               	xorwf	12,f
  3320                           
  3321                           ;RF_Control_B1.c: 103: } else {
  3322  0074  28BD               	goto	l3424
  3323  0075                     l865:	
  3324                           
  3325                           ;RF_Control_B1.c: 105: if (RF1.RxStatus == 1) {
  3326  0075  1DCD               	btfss	_RF1,3
  3327  0076  28AC               	goto	l870
  3328                           
  3329                           ;RF_Control_B1.c: 107: CC2500_RxData();
  3330  0077  3182  22CB  3180   	fcall	_CC2500_RxData
  3331                           
  3332                           ;RF_Control_B1.c: 108: if (RF1.ReceiveGO == 1) {
  3333  007A  0020               	movlb	0	; select bank0
  3334  007B  1CCD               	btfss	_RF1,1
  3335  007C  28BD               	goto	l3424
  3336                           
  3337                           ;RF_Control_B1.c: 109: RF1.ReceiveGO = 0;
  3338  007D  10CD               	bcf	_RF1,1
  3339                           
  3340                           ;RF_Control_B1.c: 110: RF1.Correction = 0;
  3341  007E  12CE               	bcf	_RF1+1,5
  3342                           
  3343                           ;RF_Control_B1.c: 111: RF1.CorrectionCounter = 0;
  3344  007F  01D7               	clrf	_RF1+10
  3345  0080  01D8               	clrf	_RF1+11
  3346                           
  3347                           ;RF_Control_B1.c: 120: getRxData();
  3348  0081  3182  2266  3180   	fcall	_getRxData
  3349                           
  3350                           ;RF_Control_B1.c: 123: RF1.Run = 1;
  3351  0084  0020               	movlb	0	; select bank0
  3352  0085  14CE               	bsf	_RF1+1,1
  3353                           
  3354                           ;RF_Control_B1.c: 125: if (RF1.Checked == 1) {
  3355  0086  1DCE               	btfss	_RF1+1,3
  3356  0087  2895               	goto	l3408
  3357                           
  3358                           ;RF_Control_B1.c: 126: if (RF1.RunTime > 10) {
  3359  0088  3000               	movlw	0
  3360  0089  0255               	subwf	_RF1+8,w
  3361  008A  300B               	movlw	11
  3362  008B  1903               	skipnz
  3363  008C  0254               	subwf	_RF1+7,w
  3364  008D  1C03               	skipc
  3365  008E  2893               	goto	l3406
  3366                           
  3367                           ;RF_Control_B1.c: 127: RF1.RunTime = 10;
  3368  008F  300A               	movlw	10
  3369  0090  00D4               	movwf	_RF1+7
  3370  0091  3000               	movlw	0
  3371  0092  00D5               	movwf	_RF1+8
  3372  0093                     l3406:	
  3373                           
  3374                           ;RF_Control_B1.c: 128: }
  3375                           ;RF_Control_B1.c: 129: RF1.CheckCount = 0;
  3376  0093  01D1               	clrf	_RF1+4
  3377                           
  3378                           ;RF_Control_B1.c: 130: } else {
  3379  0094  28BD               	goto	l3424
  3380  0095                     l3408:	
  3381                           
  3382                           ;RF_Control_B1.c: 131: RF1.CheckCount++;
  3383  0095  3001               	movlw	1
  3384  0096  00F7               	movwf	??_setRF_Main
  3385  0097  0877               	movf	??_setRF_Main,w
  3386  0098  07D1               	addwf	_RF1+4,f
  3387                           
  3388                           ;RF_Control_B1.c: 132: if (RF1.CheckCount == 2) {
  3389  0099  0851               	movf	_RF1+4,w
  3390  009A  3A02               	xorlw	2
  3391  009B  1D03               	skipz
  3392  009C  28BD               	goto	l3424
  3393                           
  3394                           ;RF_Control_B1.c: 133: RF1.CheckCount = 0;
  3395  009D  01D1               	clrf	_RF1+4
  3396                           
  3397                           ;RF_Control_B1.c: 134: RF1.CheckedCounter = 0;
  3398  009E  01D2               	clrf	_RF1+5
  3399  009F  01D3               	clrf	_RF1+6
  3400                           
  3401                           ;RF_Control_B1.c: 135: if (RF1.RunTime < 200) {
  3402  00A0  3000               	movlw	0
  3403  00A1  0255               	subwf	_RF1+8,w
  3404  00A2  30C8               	movlw	200
  3405  00A3  1903               	skipnz
  3406  00A4  0254               	subwf	_RF1+7,w
  3407  00A5  1803               	skipnc
  3408  00A6  28BD               	goto	l3424
  3409                           
  3410                           ;RF_Control_B1.c: 136: RF1.RunTime += 10;
  3411  00A7  300A               	movlw	10
  3412  00A8  07D4               	addwf	_RF1+7,f
  3413  00A9  3000               	movlw	0
  3414  00AA  3DD5               	addwfc	_RF1+8,f
  3415                           
  3416                           ;RF_Control_B1.c: 137: }
  3417                           ;RF_Control_B1.c: 138: }
  3418                           ;RF_Control_B1.c: 139: }
  3419                           ;RF_Control_B1.c: 140: }
  3420                           ;RF_Control_B1.c: 141: } else {
  3421  00AB  28BD               	goto	l3424
  3422  00AC                     l870:	
  3423                           
  3424                           ;RF_Control_B1.c: 143: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  3425  00AC  1DCD               	btfss	_RF1,3
  3426  00AD  18CD               	btfsc	_RF1,1
  3427  00AE  28BD               	goto	l3424
  3428                           
  3429                           ;RF_Control_B1.c: 144: RF1.RxStatus = 1;
  3430  00AF  15CD               	bsf	_RF1,3
  3431                           
  3432                           ;RF_Control_B1.c: 145: RF1.Correction = 1;
  3433  00B0  16CE               	bsf	_RF1+1,5
  3434                           
  3435                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x36);
  3436  00B1  3036               	movlw	54
  3437  00B2  3185  2577  3180   	fcall	_CC2500_WriteCommand
  3438                           
  3439                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x3A);
  3440  00B5  303A               	movlw	58
  3441  00B6  3185  2577  3180   	fcall	_CC2500_WriteCommand
  3442                           
  3443                           ;RF_Control_B1.c: 150: CC2500_WriteCommand(0x34);
  3444  00B9  3034               	movlw	52
  3445  00BA  3185  2577  3180   	fcall	_CC2500_WriteCommand
  3446  00BD                     l3424:	
  3447                           
  3448                           ;RF_Control_B1.c: 151: }
  3449                           ;RF_Control_B1.c: 153: }
  3450                           ;RF_Control_B1.c: 154: }
  3451                           ;RF_Control_B1.c: 155: }
  3452                           ;RF_Control_B1.c: 156: if (RF1.RxStatus == 1) {
  3453  00BD  0020               	movlb	0	; select bank0
  3454  00BE  1DCD               	btfss	_RF1,3
  3455  00BF  28DE               	goto	l3436
  3456                           
  3457                           ;RF_Control_B1.c: 157: RF1.CheckedCounter++;
  3458  00C0  3001               	movlw	1
  3459  00C1  07D2               	addwf	_RF1+5,f
  3460  00C2  3000               	movlw	0
  3461  00C3  3DD3               	addwfc	_RF1+6,f
  3462                           
  3463                           ;RF_Control_B1.c: 158: if (RF1.CheckedCounter == 100) {
  3464  00C4  3005               	movlw	5
  3465  00C5  3E4D               	addlw	_RF1& (0+255)
  3466  00C6  0086               	movwf	6
  3467  00C7  0187               	clrf	7
  3468  00C8  3F40               	moviw [0]fsr1
  3469  00C9  3A64               	xorlw	100
  3470  00CA  1D03               	skipz
  3471  00CB  28CE               	goto	u2725
  3472  00CC  3F41               	moviw [1]fsr1
  3473  00CD  3A00               	xorlw	0
  3474  00CE                     u2725:	
  3475  00CE  1D03               	skipz
  3476  00CF  28DE               	goto	l3436
  3477                           
  3478                           ;RF_Control_B1.c: 159: RF1.CheckedCounter = 0;
  3479  00D0  01D2               	clrf	_RF1+5
  3480  00D1  01D3               	clrf	_RF1+6
  3481                           
  3482                           ;RF_Control_B1.c: 160: RF1.CheckCount = 0;
  3483  00D2  01D1               	clrf	_RF1+4
  3484                           
  3485                           ;RF_Control_B1.c: 161: if (RF1.RunTime > 10) {
  3486  00D3  3000               	movlw	0
  3487  00D4  0255               	subwf	_RF1+8,w
  3488  00D5  300B               	movlw	11
  3489  00D6  1903               	skipnz
  3490  00D7  0254               	subwf	_RF1+7,w
  3491  00D8  1C03               	skipc
  3492  00D9  28DE               	goto	l3436
  3493                           
  3494                           ;RF_Control_B1.c: 162: RF1.RunTime -= 10;
  3495  00DA  300A               	movlw	10
  3496  00DB  02D4               	subwf	_RF1+7,f
  3497  00DC  3000               	movlw	0
  3498  00DD  3BD5               	subwfb	_RF1+8,f
  3499  00DE                     l3436:	
  3500                           
  3501                           ;RF_Control_B1.c: 163: }
  3502                           ;RF_Control_B1.c: 164: }
  3503                           ;RF_Control_B1.c: 165: }
  3504                           ;RF_Control_B1.c: 166: if (RF1.Correction == 1) {
  3505  00DE  1ECE               	btfss	_RF1+1,5
  3506  00DF  0008               	return
  3507                           
  3508                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter++;
  3509  00E0  3001               	movlw	1
  3510  00E1  07D7               	addwf	_RF1+10,f
  3511  00E2  3000               	movlw	0
  3512  00E3  3DD8               	addwfc	_RF1+11,f
  3513                           
  3514                           ;RF_Control_B1.c: 168: if (RF1.CorrectionCounter >= 30000) {
  3515  00E4  3075               	movlw	117
  3516  00E5  0258               	subwf	_RF1+11,w
  3517  00E6  3030               	movlw	48
  3518  00E7  1903               	skipnz
  3519  00E8  0257               	subwf	_RF1+10,w
  3520  00E9  1C03               	skipc
  3521  00EA  0008               	return
  3522                           
  3523                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter = 0;
  3524  00EB  01D7               	clrf	_RF1+10
  3525  00EC  01D8               	clrf	_RF1+11
  3526                           
  3527                           ;RF_Control_B1.c: 170: RF1.RxStatus = 0;
  3528  00ED  11CD               	bcf	_RF1,3
  3529                           
  3530                           ;RF_Control_B1.c: 171: RF1.ReceiveGO = 0;
  3531  00EE  10CD               	bcf	_RF1,1
  3532                           
  3533                           ;RF_Control_B1.c: 172: }
  3534                           ;RF_Control_B1.c: 173: }
  3535                           ;RF_Control_B1.c: 174: }
  3536                           ;RF_Control_B1.c: 175: }
  3537                           ;RF_Control_B1.c: 182: } else {
  3538  00EF  0008               	return
  3539  00F0                     l856:	
  3540                           
  3541                           ;RF_Control_B1.c: 183: if (myMain.PowerON == 1) {
  3542  00F0  1C3E               	btfss	_myMain,0
  3543  00F1  0008               	return
  3544                           
  3545                           ;RF_Control_B1.c: 184: RF1.Enable = 1;
  3546  00F2  144D               	bsf	_RF1,0
  3547  00F3  0008               	return
  3548  00F4                     __end_of_setRF_Main:	
  3549                           
  3550                           	psect	text7
  3551  0266                     __ptext7:	
  3552 ;; *************** function _getRxData *****************
  3553 ;; Defined at:
  3554 ;;		line 272 in file "../src/RF_Control_B1.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;		None
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;  error           1    3[COMMON] unsigned char 
  3559 ;; Return value:  Size  Location     Type
  3560 ;;		None               void
  3561 ;; Registers used:
  3562 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3568 ;;      Params:         0       0       0       0       0       0       0       0
  3569 ;;      Locals:         1       0       0       0       0       0       0       0
  3570 ;;      Temps:          1       0       0       0       0       0       0       0
  3571 ;;      Totals:         2       0       0       0       0       0       0       0
  3572 ;;Total ram usage:        2 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    4
  3575 ;; This function calls:
  3576 ;;		_getMain_All_Error_Status
  3577 ;;		_setControl_Lights_Table
  3578 ;;		_setLog_Code
  3579 ;; This function is called by:
  3580 ;;		_setRF_Main
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           
  3585                           ;psect for function _getRxData
  3586  0266                     _getRxData:	
  3587                           
  3588                           ;RF_Control_B1.c: 273: char error = getMain_All_Error_Status(0);
  3589                           
  3590                           ;incstack = 0
  3591                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3592  0266  3000               	movlw	0
  3593  0267  3186  2658  3182   	fcall	_getMain_All_Error_Status
  3594  026A  00F2               	movwf	??_getRxData
  3595  026B  0872               	movf	??_getRxData,w
  3596  026C  00F3               	movwf	getRxData@error
  3597                           
  3598                           ;RF_Control_B1.c: 274: if (error == 0) {
  3599  026D  08F3               	movf	getRxData@error,f
  3600  026E  1D03               	skipz
  3601  026F  0008               	return
  3602                           
  3603                           ;RF_Control_B1.c: 275: if (RF1.Learn == 1) {
  3604  0270  0020               	movlb	0	; select bank0
  3605  0271  1F4D               	btfss	_RF1,6
  3606  0272  2A81               	goto	l3240
  3607                           
  3608                           ;RF_Control_B1.c: 276: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  3609  0273  08A0               	movf	_RF_Data,f
  3610  0274  1D03               	skipz
  3611  0275  2A7F               	goto	l907
  3612  0276  0821               	movf	_RF_Data+1,w
  3613  0277  3A64               	xorlw	100
  3614  0278  1D03               	skipz
  3615  0279  2A7F               	goto	l907
  3616                           
  3617                           ;RF_Control_B1.c: 277: setLog_Code();
  3618  027A  3185  255C         	fcall	_setLog_Code
  3619                           
  3620                           ;RF_Control_B1.c: 278: RF1.Checked = 1;
  3621  027C  0020               	movlb	0	; select bank0
  3622  027D  15CE               	bsf	_RF1+1,3
  3623                           
  3624                           ;RF_Control_B1.c: 279: } else {
  3625  027E  0008               	return
  3626  027F                     l907:	
  3627                           
  3628                           ;RF_Control_B1.c: 280: RF1.Checked = 0;
  3629  027F  11CE               	bcf	_RF1+1,3
  3630                           
  3631                           ;RF_Control_B1.c: 281: }
  3632                           ;RF_Control_B1.c: 282: } else {
  3633  0280  0008               	return
  3634  0281                     l3240:	
  3635                           
  3636                           ;RF_Control_B1.c: 283: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  3637  0281  08A0               	movf	_RF_Data,f
  3638  0282  1D03               	skipz
  3639  0283  2AB5               	goto	l3262
  3640  0284  0821               	movf	_RF_Data+1,w
  3641  0285  3A02               	xorlw	2
  3642  0286  1D03               	skipz
  3643  0287  2AB5               	goto	l3262
  3644                           
  3645                           ;RF_Control_B1.c: 285: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  3646  0288  082C               	movf	_RF_Data+12,w
  3647  0289  3AFF               	xorlw	255
  3648  028A  1D03               	skipz
  3649  028B  2A98               	goto	l3252
  3650  028C  082D               	movf	_RF_Data+13,w
  3651  028D  3AFF               	xorlw	255
  3652  028E  1D03               	skipz
  3653  028F  2A98               	goto	l3252
  3654  0290  082E               	movf	_RF_Data+14,w
  3655  0291  3AFF               	xorlw	255
  3656  0292  1D03               	skipz
  3657  0293  2A98               	goto	l3252
  3658                           
  3659                           ;RF_Control_B1.c: 286: __nop();
  3660  0294  0000               	nop
  3661                           
  3662                           ;RF_Control_B1.c: 287: RF1.Checked = 0;
  3663  0295  0020               	movlb	0	; select bank0
  3664  0296  11CE               	bcf	_RF1+1,3
  3665                           
  3666                           ;RF_Control_B1.c: 288: } else {
  3667  0297  0008               	return
  3668  0298                     l3252:	
  3669                           
  3670                           ;RF_Control_B1.c: 289: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  3671  0298  087B               	movf	_product,w
  3672  0299  3E0C               	addlw	12
  3673  029A  0086               	movwf	6
  3674  029B  0187               	clrf	7
  3675  029C  082C               	movf	_RF_Data+12,w
  3676  029D  0601               	xorwf	1,w
  3677  029E  1D03               	skipz
  3678  029F  0008               	return
  3679  02A0  087B               	movf	_product,w
  3680  02A1  3E0D               	addlw	13
  3681  02A2  0086               	movwf	6
  3682  02A3  0187               	clrf	7
  3683  02A4  082D               	movf	_RF_Data+13,w
  3684  02A5  0601               	xorwf	1,w
  3685  02A6  1D03               	skipz
  3686  02A7  0008               	return
  3687  02A8  087B               	movf	_product,w
  3688  02A9  3E0E               	addlw	14
  3689  02AA  0086               	movwf	6
  3690  02AB  0187               	clrf	7
  3691  02AC  082E               	movf	_RF_Data+14,w
  3692  02AD  0601               	xorwf	1,w
  3693  02AE  1D03               	skipz
  3694  02AF  0008               	return
  3695                           
  3696                           ;RF_Control_B1.c: 290: setControl_Lights_Table();
  3697  02B0  3183  23CF         	fcall	_setControl_Lights_Table
  3698                           
  3699                           ;RF_Control_B1.c: 291: RF1.Checked = 1;
  3700  02B2  0020               	movlb	0	; select bank0
  3701  02B3  15CE               	bsf	_RF1+1,3
  3702                           
  3703                           ;RF_Control_B1.c: 292: }
  3704                           ;RF_Control_B1.c: 293: }
  3705                           ;RF_Control_B1.c: 294: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  3706  02B4  0008               	return
  3707  02B5                     l3262:	
  3708  02B5  0820               	movf	_RF_Data,w
  3709  02B6  3AFF               	xorlw	255
  3710  02B7  1D03               	skipz
  3711  02B8  2ABF               	goto	l3268
  3712  02B9  0821               	movf	_RF_Data+1,w
  3713  02BA  3A02               	xorlw	2
  3714  02BB  1D03               	skipz
  3715  02BC  2ABF               	goto	l3268
  3716                           
  3717                           ;RF_Control_B1.c: 295: __nop();
  3718  02BD  0000               	nop
  3719                           
  3720                           ;RF_Control_B1.c: 296: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  3721  02BE  0008               	return
  3722  02BF                     l3268:	
  3723  02BF  0020               	movlb	0	; select bank0
  3724  02C0  08A0               	movf	_RF_Data,f
  3725  02C1  1D03               	skipz
  3726  02C2  2AC9               	goto	l917
  3727  02C3  0821               	movf	_RF_Data+1,w
  3728  02C4  3A65               	xorlw	101
  3729  02C5  1D03               	skipz
  3730  02C6  2AC9               	goto	l917
  3731                           
  3732                           ;RF_Control_B1.c: 297: __nop();
  3733  02C7  0000               	nop
  3734                           
  3735                           ;RF_Control_B1.c: 298: } else {
  3736  02C8  0008               	return
  3737  02C9                     l917:	
  3738                           
  3739                           ;RF_Control_B1.c: 299: RF1.Checked = 0;
  3740  02C9  11CE               	bcf	_RF1+1,3
  3741                           
  3742                           ;RF_Control_B1.c: 300: }
  3743                           ;RF_Control_B1.c: 305: }
  3744                           ;RF_Control_B1.c: 306: } else {
  3745  02CA  0008               	return
  3746  02CB                     __end_of_getRxData:	
  3747                           ;RF_Control_B1.c: 307: ;
  3748                           
  3749                           
  3750                           	psect	text8
  3751  055C                     __ptext8:	
  3752 ;; *************** function _setLog_Code *****************
  3753 ;; Defined at:
  3754 ;;		line 312 in file "../src/RF_Control_B1.c"
  3755 ;; Parameters:    Size  Location     Type
  3756 ;;		None
  3757 ;; Auto vars:     Size  Location     Type
  3758 ;;		None
  3759 ;; Return value:  Size  Location     Type
  3760 ;;		None               void
  3761 ;; Registers used:
  3762 ;;		wreg, fsr1l, fsr1h
  3763 ;; Tracked objects:
  3764 ;;		On entry : 0/0
  3765 ;;		On exit  : 0/0
  3766 ;;		Unchanged: 0/0
  3767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3768 ;;      Params:         0       0       0       0       0       0       0       0
  3769 ;;      Locals:         0       0       0       0       0       0       0       0
  3770 ;;      Temps:          1       0       0       0       0       0       0       0
  3771 ;;      Totals:         1       0       0       0       0       0       0       0
  3772 ;;Total ram usage:        1 bytes
  3773 ;; Hardware stack levels used:    1
  3774 ;; Hardware stack levels required when called:    2
  3775 ;; This function calls:
  3776 ;;		Nothing
  3777 ;; This function is called by:
  3778 ;;		_getRxData
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781                           
  3782                           
  3783                           ;psect for function _setLog_Code
  3784  055C                     _setLog_Code:	
  3785                           
  3786                           ;RF_Control_B1.c: 313: RF1.Learn = 0;
  3787                           
  3788                           ;incstack = 0
  3789                           ; Regs used in _setLog_Code: [wregfsr1]
  3790  055C  0020               	movlb	0	; select bank0
  3791  055D  134D               	bcf	_RF1,6
  3792                           
  3793                           ;RF_Control_B1.c: 314: product->Data[12]=RF_Data[12];
  3794  055E  082C               	movf	_RF_Data+12,w
  3795  055F  00F1               	movwf	??_setLog_Code
  3796  0560  087B               	movf	_product,w
  3797  0561  3E0C               	addlw	12
  3798  0562  0086               	movwf	6
  3799  0563  0187               	clrf	7
  3800  0564  0871               	movf	??_setLog_Code,w
  3801  0565  0081               	movwf	1
  3802                           
  3803                           ;RF_Control_B1.c: 315: product->Data[13]=RF_Data[13];
  3804  0566  082D               	movf	_RF_Data+13,w
  3805  0567  00F1               	movwf	??_setLog_Code
  3806  0568  087B               	movf	_product,w
  3807  0569  3E0D               	addlw	13
  3808  056A  0086               	movwf	6
  3809  056B  0187               	clrf	7
  3810  056C  0871               	movf	??_setLog_Code,w
  3811  056D  0081               	movwf	1
  3812                           
  3813                           ;RF_Control_B1.c: 316: product->Data[14]=RF_Data[14];
  3814  056E  082E               	movf	_RF_Data+14,w
  3815  056F  00F1               	movwf	??_setLog_Code
  3816  0570  087B               	movf	_product,w
  3817  0571  3E0E               	addlw	14
  3818  0572  0086               	movwf	6
  3819  0573  0187               	clrf	7
  3820  0574  0871               	movf	??_setLog_Code,w
  3821  0575  0081               	movwf	1
  3822  0576  0008               	return
  3823  0577                     __end_of_setLog_Code:	
  3824                           ;RF_Control_B1.c: 319: ;;
  3825                           
  3826                           
  3827                           	psect	text9
  3828  03CF                     __ptext9:	
  3829 ;; *************** function _setControl_Lights_Table *****************
  3830 ;; Defined at:
  3831 ;;		line 325 in file "../src/RF_Control_B1.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;		None
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;		None
  3836 ;; Return value:  Size  Location     Type
  3837 ;;		None               void
  3838 ;; Registers used:
  3839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3845 ;;      Params:         0       0       0       0       0       0       0       0
  3846 ;;      Locals:         0       0       0       0       0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0       0
  3848 ;;      Totals:         0       0       0       0       0       0       0       0
  3849 ;;Total ram usage:        0 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    3
  3852 ;; This function calls:
  3853 ;;		_setTxData
  3854 ;; This function is called by:
  3855 ;;		_getRxData
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           
  3860                           ;psect for function _setControl_Lights_Table
  3861  03CF                     _setControl_Lights_Table:	
  3862                           
  3863                           ;RF_Control_B1.c: 326: switch (RF_Data[15]) {
  3864                           
  3865                           ;incstack = 0
  3866                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3867  03CF  2BF7               	goto	l3100
  3868  03D0                     l3092:	
  3869                           ;RF_Control_B1.c: 327: case 0x00:
  3870                           
  3871                           
  3872                           ;RF_Control_B1.c: 331: product->Data[9]=0;
  3873  03D0  087B               	movf	_product,w
  3874  03D1  3E09               	addlw	9
  3875  03D2  0086               	movwf	6
  3876  03D3  0187               	clrf	7
  3877  03D4  0181               	clrf	1
  3878                           
  3879                           ;RF_Control_B1.c: 332: product->Data[11]=0;
  3880  03D5  087B               	movf	_product,w
  3881  03D6  3E0B               	addlw	11
  3882  03D7  0086               	movwf	6
  3883  03D8  0187               	clrf	7
  3884  03D9  0181               	clrf	1
  3885                           
  3886                           ;RF_Control_B1.c: 333: product->Data[15]=0;
  3887  03DA  087B               	movf	_product,w
  3888  03DB  3E0F               	addlw	15
  3889  03DC  0086               	movwf	6
  3890  03DD  0187               	clrf	7
  3891  03DE  0181               	clrf	1
  3892                           
  3893                           ;RF_Control_B1.c: 334: product->Data[17]=0;
  3894  03DF  087B               	movf	_product,w
  3895  03E0  3E11               	addlw	17
  3896  03E1  0086               	movwf	6
  3897  03E2  0187               	clrf	7
  3898  03E3  0181               	clrf	1
  3899                           
  3900                           ;RF_Control_B1.c: 335: ;;
  3901                           ;RF_Control_B1.c: 337: break;
  3902  03E4  0008               	return
  3903  03E5                     l3094:	
  3904                           ;RF_Control_B1.c: 338: case 0x20:
  3905                           
  3906                           
  3907                           ;RF_Control_B1.c: 339: product->Data[9]=0;
  3908  03E5  087B               	movf	_product,w
  3909  03E6  3E09               	addlw	9
  3910  03E7  0086               	movwf	6
  3911  03E8  0187               	clrf	7
  3912  03E9  0181               	clrf	1
  3913                           
  3914                           ;RF_Control_B1.c: 340: product->Data[11]=0;
  3915  03EA  087B               	movf	_product,w
  3916  03EB  3E0B               	addlw	11
  3917  03EC  0086               	movwf	6
  3918  03ED  0187               	clrf	7
  3919  03EE  0181               	clrf	1
  3920                           
  3921                           ;RF_Control_B1.c: 341: product->Data[17]=0;
  3922  03EF  087B               	movf	_product,w
  3923  03F0  3E11               	addlw	17
  3924  03F1  0086               	movwf	6
  3925  03F2  0187               	clrf	7
  3926  03F3  0181               	clrf	1
  3927                           
  3928                           ;RF_Control_B1.c: 342: setTxData();
  3929  03F4  3180  20F4         	fcall	_setTxData
  3930                           
  3931                           ;RF_Control_B1.c: 380: }
  3932                           
  3933                           ;RF_Control_B1.c: 379: break;
  3934                           
  3935                           ;RF_Control_B1.c: 373: case 0x31:
  3936                           
  3937                           ;RF_Control_B1.c: 372: break;
  3938                           
  3939                           ;RF_Control_B1.c: 366: case 0x21:
  3940                           
  3941                           ;RF_Control_B1.c: 365: break;
  3942                           
  3943                           ;RF_Control_B1.c: 359: case 0x11:
  3944                           
  3945                           ;RF_Control_B1.c: 358: break;
  3946                           
  3947                           ;RF_Control_B1.c: 354: case 0x03:
  3948                           
  3949                           ;RF_Control_B1.c: 353: break;
  3950                           
  3951                           ;RF_Control_B1.c: 349: case 0x02:
  3952                           
  3953                           ;RF_Control_B1.c: 348: break;
  3954                           
  3955                           ;RF_Control_B1.c: 344: case 0x01:
  3956                           
  3957                           ;RF_Control_B1.c: 343: break;
  3958  03F6  0008               	return
  3959  03F7                     l3100:	
  3960  03F7  0020               	movlb	0	; select bank0
  3961  03F8  082F               	movf	_RF_Data+15,w
  3962                           
  3963                           ; Switch size 1, requested type "space"
  3964                           ; Number of cases is 8, Range of values is 0 to 49
  3965                           ; switch strategies available:
  3966                           ; Name         Instructions Cycles
  3967                           ; simple_byte           25    13 (average)
  3968                           ; direct_byte          106     6 (fixed)
  3969                           ; jumptable            260     6 (fixed)
  3970                           ;	Chosen strategy is simple_byte
  3971  03F9  3A00               	xorlw	0	; case 0
  3972  03FA  1903               	skipnz
  3973  03FB  2BD0               	goto	l3092
  3974  03FC  3A01               	xorlw	1	; case 1
  3975  03FD  1903               	skipnz
  3976  03FE  2C12               	goto	l937
  3977  03FF  3A03               	xorlw	3	; case 2
  3978  0400  1903               	skipnz
  3979  0401  2C12               	goto	l937
  3980  0402  3A01               	xorlw	1	; case 3
  3981  0403  1903               	skipnz
  3982  0404  2C12               	goto	l937
  3983  0405  3A12               	xorlw	18	; case 17
  3984  0406  1903               	skipnz
  3985  0407  2C12               	goto	l937
  3986  0408  3A31               	xorlw	49	; case 32
  3987  0409  1903               	skipnz
  3988  040A  2BE5               	goto	l3094
  3989  040B  3A01               	xorlw	1	; case 33
  3990  040C  1903               	skipnz
  3991  040D  2C12               	goto	l937
  3992  040E  3A10               	xorlw	16	; case 49
  3993  040F  1903               	skipnz
  3994  0410  2C12               	goto	l937
  3995  0411  2C12               	goto	l937
  3996  0412                     l937:	
  3997  0412  0008               	return
  3998  0413                     __end_of_setControl_Lights_Table:	
  3999                           
  4000                           	psect	text10
  4001  00F4                     __ptext10:	
  4002 ;; *************** function _setTxData *****************
  4003 ;; Defined at:
  4004 ;;		line 207 in file "../src/RF_Control_B1.c"
  4005 ;; Parameters:    Size  Location     Type
  4006 ;;		None
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  i               1    0        unsigned char 
  4009 ;; Return value:  Size  Location     Type
  4010 ;;		None               void
  4011 ;; Registers used:
  4012 ;;		wreg, fsr1l, fsr1h
  4013 ;; Tracked objects:
  4014 ;;		On entry : 0/0
  4015 ;;		On exit  : 0/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4018 ;;      Params:         0       0       0       0       0       0       0       0
  4019 ;;      Locals:         0       0       0       0       0       0       0       0
  4020 ;;      Temps:          1       0       0       0       0       0       0       0
  4021 ;;      Totals:         1       0       0       0       0       0       0       0
  4022 ;;Total ram usage:        1 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; Hardware stack levels required when called:    2
  4025 ;; This function calls:
  4026 ;;		Nothing
  4027 ;; This function is called by:
  4028 ;;		_my_MainTimer
  4029 ;;		_setControl_Lights_Table
  4030 ;;		_setRFSW_Control
  4031 ;;		_setRFSW_AdjControl
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           
  4036                           ;psect for function _setTxData
  4037  00F4                     _setTxData:	
  4038                           
  4039                           ;RF_Control_B1.c: 208: char i;
  4040                           ;RF_Control_B1.c: 209: if (RF1.Enable == 1) {
  4041                           
  4042                           ;incstack = 0
  4043                           ; Regs used in _setTxData: [wregfsr1]
  4044  00F4  0020               	movlb	0	; select bank0
  4045  00F5  1C4D               	btfss	_RF1,0
  4046  00F6  0008               	return
  4047                           
  4048                           ;RF_Control_B1.c: 211: RF1.TransceiveGO = 1;
  4049  00F7  154D               	bsf	_RF1,2
  4050                           
  4051                           ;RF_Control_B1.c: 212: RF1.RunTime = 20;
  4052  00F8  3014               	movlw	20
  4053  00F9  00D4               	movwf	_RF1+7
  4054  00FA  3000               	movlw	0
  4055  00FB  00D5               	movwf	_RF1+8
  4056                           
  4057                           ;RF_Control_B1.c: 221: RF_Data[0] = 0x63;
  4058  00FC  3063               	movlw	99
  4059  00FD  00F1               	movwf	??_setTxData
  4060  00FE  0871               	movf	??_setTxData,w
  4061  00FF  00A0               	movwf	_RF_Data
  4062                           
  4063                           ;RF_Control_B1.c: 222: RF_Data[1] = 0x02;
  4064  0100  3002               	movlw	2
  4065  0101  00F1               	movwf	??_setTxData
  4066  0102  0871               	movf	??_setTxData,w
  4067  0103  00A1               	movwf	_RF_Data+1
  4068                           
  4069                           ;RF_Control_B1.c: 223: RF_Data[2] = product->Data[2];
  4070  0104  087B               	movf	_product,w
  4071  0105  0086               	movwf	6
  4072  0106  0187               	clrf	7
  4073  0107  3F42               	moviw [2]fsr1
  4074  0108  00A2               	movwf	_RF_Data+2
  4075                           
  4076                           ;RF_Control_B1.c: 224: RF_Data[3] = product->Data[3];
  4077  0109  087B               	movf	_product,w
  4078  010A  0086               	movwf	6
  4079  010B  0187               	clrf	7
  4080  010C  3F43               	moviw [3]fsr1
  4081  010D  00A3               	movwf	_RF_Data+3
  4082                           
  4083                           ;RF_Control_B1.c: 225: RF_Data[4] = product->Data[4];
  4084  010E  087B               	movf	_product,w
  4085  010F  0086               	movwf	6
  4086  0110  0187               	clrf	7
  4087  0111  3F44               	moviw [4]fsr1
  4088  0112  00A4               	movwf	_RF_Data+4
  4089                           
  4090                           ;RF_Control_B1.c: 226: RF_Data[5] = product->Data[5];
  4091  0113  087B               	movf	_product,w
  4092  0114  0086               	movwf	6
  4093  0115  0187               	clrf	7
  4094  0116  3F45               	moviw [5]fsr1
  4095  0117  00A5               	movwf	_RF_Data+5
  4096                           
  4097                           ;RF_Control_B1.c: 227: RF_Data[6] = product->Data[6];
  4098  0118  087B               	movf	_product,w
  4099  0119  0086               	movwf	6
  4100  011A  0187               	clrf	7
  4101  011B  3F46               	moviw [6]fsr1
  4102  011C  00A6               	movwf	_RF_Data+6
  4103                           
  4104                           ;RF_Control_B1.c: 228: RF_Data[7] = product->Data[7];
  4105  011D  087B               	movf	_product,w
  4106  011E  0086               	movwf	6
  4107  011F  0187               	clrf	7
  4108  0120  3F47               	moviw [7]fsr1
  4109  0121  00A7               	movwf	_RF_Data+7
  4110                           
  4111                           ;RF_Control_B1.c: 229: RF_Data[8] = product->Data[8];
  4112  0122  087B               	movf	_product,w
  4113  0123  0086               	movwf	6
  4114  0124  0187               	clrf	7
  4115  0125  3F48               	moviw [8]fsr1
  4116  0126  00A8               	movwf	_RF_Data+8
  4117                           
  4118                           ;RF_Control_B1.c: 230: RF_Data[9] = product->Data[9];
  4119  0127  087B               	movf	_product,w
  4120  0128  0086               	movwf	6
  4121  0129  0187               	clrf	7
  4122  012A  3F49               	moviw [9]fsr1
  4123  012B  00A9               	movwf	_RF_Data+9
  4124                           
  4125                           ;RF_Control_B1.c: 231: RF_Data[10] = product->Data[10];
  4126  012C  087B               	movf	_product,w
  4127  012D  0086               	movwf	6
  4128  012E  0187               	clrf	7
  4129  012F  3F4A               	moviw [10]fsr1
  4130  0130  00AA               	movwf	_RF_Data+10
  4131                           
  4132                           ;RF_Control_B1.c: 232: RF_Data[11] = product->Data[11];
  4133  0131  087B               	movf	_product,w
  4134  0132  0086               	movwf	6
  4135  0133  0187               	clrf	7
  4136  0134  3F4B               	moviw [11]fsr1
  4137  0135  00AB               	movwf	_RF_Data+11
  4138                           
  4139                           ;RF_Control_B1.c: 233: RF_Data[12] = product->Data[12];
  4140  0136  087B               	movf	_product,w
  4141  0137  0086               	movwf	6
  4142  0138  0187               	clrf	7
  4143  0139  3F4C               	moviw [12]fsr1
  4144  013A  00AC               	movwf	_RF_Data+12
  4145                           
  4146                           ;RF_Control_B1.c: 234: RF_Data[13] = product->Data[13];
  4147  013B  087B               	movf	_product,w
  4148  013C  0086               	movwf	6
  4149  013D  0187               	clrf	7
  4150  013E  3F4D               	moviw [13]fsr1
  4151  013F  00AD               	movwf	_RF_Data+13
  4152                           
  4153                           ;RF_Control_B1.c: 235: RF_Data[14] = product->Data[14];
  4154  0140  087B               	movf	_product,w
  4155  0141  0086               	movwf	6
  4156  0142  0187               	clrf	7
  4157  0143  3F4E               	moviw [14]fsr1
  4158  0144  00AE               	movwf	_RF_Data+14
  4159                           
  4160                           ;RF_Control_B1.c: 236: RF_Data[15] = product->Data[15];
  4161  0145  087B               	movf	_product,w
  4162  0146  0086               	movwf	6
  4163  0147  0187               	clrf	7
  4164  0148  3F4F               	moviw [15]fsr1
  4165  0149  00AF               	movwf	_RF_Data+15
  4166                           
  4167                           ;RF_Control_B1.c: 237: RF_Data[16] = product->Data[16];
  4168  014A  087B               	movf	_product,w
  4169  014B  0086               	movwf	6
  4170  014C  0187               	clrf	7
  4171  014D  3F50               	moviw [16]fsr1
  4172  014E  00B0               	movwf	_RF_Data+16
  4173                           
  4174                           ;RF_Control_B1.c: 238: RF_Data[17] = product->Data[17];
  4175  014F  087B               	movf	_product,w
  4176  0150  0086               	movwf	6
  4177  0151  0187               	clrf	7
  4178  0152  3F51               	moviw [17]fsr1
  4179  0153  00B1               	movwf	_RF_Data+17
  4180                           
  4181                           ;RF_Control_B1.c: 239: RF_Data[18] = product->Data[18];
  4182  0154  087B               	movf	_product,w
  4183  0155  0086               	movwf	6
  4184  0156  0187               	clrf	7
  4185  0157  3F52               	moviw [18]fsr1
  4186  0158  00B2               	movwf	_RF_Data+18
  4187                           
  4188                           ;RF_Control_B1.c: 240: RF_Data[19] = product->Data[19];
  4189  0159  087B               	movf	_product,w
  4190  015A  0086               	movwf	6
  4191  015B  0187               	clrf	7
  4192  015C  3F53               	moviw [19]fsr1
  4193  015D  00B3               	movwf	_RF_Data+19
  4194                           
  4195                           ;RF_Control_B1.c: 241: RF_Data[20] = 0xaa;
  4196  015E  30AA               	movlw	170
  4197  015F  00F1               	movwf	??_setTxData
  4198  0160  0871               	movf	??_setTxData,w
  4199  0161  00B4               	movwf	_RF_Data+20
  4200  0162  0008               	return
  4201  0163                     __end_of_setTxData:	
  4202                           
  4203                           	psect	text11
  4204  0658                     __ptext11:	
  4205 ;; *************** function _getMain_All_Error_Status *****************
  4206 ;; Defined at:
  4207 ;;		line 370 in file "../src/Main_B1.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;  command         1    wreg     unsigned char 
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;  command         1    0[COMMON] unsigned char 
  4212 ;;  status          1    1[COMMON] unsigned char 
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      unsigned char 
  4215 ;; Registers used:
  4216 ;;		wreg, status,2
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4222 ;;      Params:         0       0       0       0       0       0       0       0
  4223 ;;      Locals:         1       0       0       0       0       0       0       0
  4224 ;;      Temps:          0       0       0       0       0       0       0       0
  4225 ;;      Totals:         1       0       0       0       0       0       0       0
  4226 ;;Total ram usage:        1 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; Hardware stack levels required when called:    2
  4229 ;; This function calls:
  4230 ;;		Nothing
  4231 ;; This function is called by:
  4232 ;;		_setRF_Main
  4233 ;;		_getRxData
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _getMain_All_Error_Status
  4239  0658                     _getMain_All_Error_Status:	
  4240                           
  4241                           ;Main_B1.c: 371: char status = 0;
  4242                           
  4243                           ;incstack = 0
  4244                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2]
  4245  0658  01F1               	clrf	getMain_All_Error_Status@status
  4246                           
  4247                           ;Main_B1.c: 407: return status;
  4248  0659  0871               	movf	getMain_All_Error_Status@status,w
  4249  065A  0008               	return
  4250  065B                     __end_of_getMain_All_Error_Status:	
  4251                           
  4252                           	psect	text12
  4253  032E                     __ptext12:	
  4254 ;; *************** function _CC2500_TxData *****************
  4255 ;; Defined at:
  4256 ;;		line 32 in file "../src/CC2500_B1.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;		None
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;  loop_e          1    6[COMMON] unsigned char 
  4261 ;; Return value:  Size  Location     Type
  4262 ;;		None               void
  4263 ;; Registers used:
  4264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4270 ;;      Params:         0       0       0       0       0       0       0       0
  4271 ;;      Locals:         1       0       0       0       0       0       0       0
  4272 ;;      Temps:          1       0       0       0       0       0       0       0
  4273 ;;      Totals:         2       0       0       0       0       0       0       0
  4274 ;;Total ram usage:        2 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    4
  4277 ;; This function calls:
  4278 ;;		_CC2500_WriteByte
  4279 ;;		_CC2500_WriteCommand
  4280 ;;		_Timeout_Counter
  4281 ;;		_set_TimeoutCleared
  4282 ;; This function is called by:
  4283 ;;		_setRF_Main
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           
  4288                           ;psect for function _CC2500_TxData
  4289  032E                     _CC2500_TxData:	
  4290                           
  4291                           ;CC2500_B1.c: 33: unsigned char loop_e;
  4292                           ;CC2500_B1.c: 35: RC0 = 0;
  4293                           
  4294                           ;incstack = 0
  4295                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4296  032E  0020               	movlb	0	; select bank0
  4297  032F  100E               	bcf	14,0	;volatile
  4298                           
  4299                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  4300  0330  307F               	movlw	127
  4301  0331  00F5               	movwf	??_CC2500_TxData
  4302  0332  0875               	movf	??_CC2500_TxData,w
  4303  0333  00FC               	movwf	_SPI0Buffer
  4304                           
  4305                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  4306  0334  2B38               	goto	l3108
  4307  0335                     l3106:	
  4308                           
  4309                           ;CC2500_B1.c: 38: Timeout_Counter();
  4310  0335  3185  25BB  3183   	fcall	_Timeout_Counter
  4311  0338                     l3108:	
  4312  0338  0020               	movlb	0	; select bank0
  4313  0339  1E8E               	btfss	14,5	;volatile
  4314  033A  2B3D               	goto	l3112
  4315  033B  1D4A               	btfss	_myMain+12,2
  4316  033C  2B35               	goto	l3106
  4317  033D                     l3112:	
  4318                           
  4319                           ;CC2500_B1.c: 39: };
  4320                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  4321  033D  3186  2640  3183   	fcall	_set_TimeoutCleared
  4322                           
  4323                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  4324  0340  3185  25D0  3183   	fcall	_CC2500_WriteByte
  4325                           
  4326                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  4327  0343  0020               	movlb	0	; select bank0
  4328  0344  086C               	movf	_Tx_Length,w
  4329  0345  00F5               	movwf	??_CC2500_TxData
  4330  0346  0875               	movf	??_CC2500_TxData,w
  4331  0347  00FC               	movwf	_SPI0Buffer
  4332                           
  4333                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  4334  0348  3185  25D0  3183   	fcall	_CC2500_WriteByte
  4335                           
  4336                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  4337  034B  01F6               	clrf	CC2500_TxData@loop_e
  4338  034C                     l3126:	
  4339  034C  0020               	movlb	0	; select bank0
  4340  034D  086C               	movf	_Tx_Length,w
  4341  034E  0276               	subwf	CC2500_TxData@loop_e,w
  4342  034F  1803               	btfsc	3,0
  4343  0350  2B61               	goto	l130
  4344                           
  4345                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  4346  0351  0876               	movf	CC2500_TxData@loop_e,w
  4347  0352  3E20               	addlw	_RF_Data& (0+255)
  4348  0353  0086               	movwf	6
  4349  0354  0187               	clrf	7
  4350  0355  0801               	movf	1,w
  4351  0356  00F5               	movwf	??_CC2500_TxData
  4352  0357  0875               	movf	??_CC2500_TxData,w
  4353  0358  00FC               	movwf	_SPI0Buffer
  4354                           
  4355                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  4356  0359  3185  25D0  3183   	fcall	_CC2500_WriteByte
  4357  035C  3001               	movlw	1
  4358  035D  00F5               	movwf	??_CC2500_TxData
  4359  035E  0875               	movf	??_CC2500_TxData,w
  4360  035F  07F6               	addwf	CC2500_TxData@loop_e,f
  4361  0360  2B4C               	goto	l3126
  4362  0361                     l130:	
  4363                           
  4364                           ;CC2500_B1.c: 48: }
  4365                           ;CC2500_B1.c: 49: RC0 = 1;
  4366  0361  140E               	bsf	14,0	;volatile
  4367                           
  4368                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  4369  0362  3035               	movlw	53
  4370  0363  3185  2577  3183   	fcall	_CC2500_WriteCommand
  4371                           
  4372                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  4373  0366  2B6A               	goto	l3132
  4374  0367                     l3130:	
  4375                           
  4376                           ;CC2500_B1.c: 52: Timeout_Counter();
  4377  0367  3185  25BB  3183   	fcall	_Timeout_Counter
  4378  036A                     l3132:	
  4379  036A  0020               	movlb	0	; select bank0
  4380  036B  188E               	btfsc	14,1	;volatile
  4381  036C  2B6F               	goto	l3136
  4382  036D  1D4A               	btfss	_myMain+12,2
  4383  036E  2B67               	goto	l3130
  4384  036F                     l3136:	
  4385                           
  4386                           ;CC2500_B1.c: 53: };
  4387                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  4388  036F  3186  2640  3183   	fcall	_set_TimeoutCleared
  4389                           
  4390                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  4391  0372  2B76               	goto	l3140
  4392  0373                     l3138:	
  4393                           
  4394                           ;CC2500_B1.c: 57: Timeout_Counter();
  4395  0373  3185  25BB  3183   	fcall	_Timeout_Counter
  4396  0376                     l3140:	
  4397  0376  0020               	movlb	0	; select bank0
  4398  0377  1C8E               	btfss	14,1	;volatile
  4399  0378  2B7B               	goto	l3144
  4400  0379  1D4A               	btfss	_myMain+12,2
  4401  037A  2B73               	goto	l3138
  4402  037B                     l3144:	
  4403                           
  4404                           ;CC2500_B1.c: 58: };
  4405                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  4406  037B  3186  2640  3183   	fcall	_set_TimeoutCleared
  4407                           
  4408                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  4409  037E  3036               	movlw	54
  4410  037F  3185  2577  3183   	fcall	_CC2500_WriteCommand
  4411                           
  4412                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  4413  0382  303B               	movlw	59
  4414  0383  3185  2577  3183   	fcall	_CC2500_WriteCommand
  4415                           
  4416                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  4417  0386  303A               	movlw	58
  4418  0387  3185  2577         	fcall	_CC2500_WriteCommand
  4419                           
  4420                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  4421  0389  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  4422  038A  0008               	return
  4423  038B                     __end_of_CC2500_TxData:	
  4424                           
  4425                           	psect	text13
  4426  02CB                     __ptext13:	
  4427 ;; *************** function _CC2500_RxData *****************
  4428 ;; Defined at:
  4429 ;;		line 70 in file "../src/CC2500_B1.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;		None
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;  loop_f          1    6[COMMON] unsigned char 
  4434 ;; Return value:  Size  Location     Type
  4435 ;;		None               void
  4436 ;; Registers used:
  4437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4443 ;;      Params:         0       0       0       0       0       0       0       0
  4444 ;;      Locals:         1       0       0       0       0       0       0       0
  4445 ;;      Temps:          1       0       0       0       0       0       0       0
  4446 ;;      Totals:         2       0       0       0       0       0       0       0
  4447 ;;Total ram usage:        2 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    4
  4450 ;; This function calls:
  4451 ;;		_CC2500_ReadByte
  4452 ;;		_CC2500_ReadStatus
  4453 ;;		_CC2500_WriteByte
  4454 ;;		_Timeout_Counter
  4455 ;;		_set_TimeoutCleared
  4456 ;; This function is called by:
  4457 ;;		_setRF_Main
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           
  4462                           ;psect for function _CC2500_RxData
  4463  02CB                     _CC2500_RxData:	
  4464                           
  4465                           ;CC2500_B1.c: 71: unsigned char loop_f;
  4466                           ;CC2500_B1.c: 75: if (RC1 == 1)
  4467                           
  4468                           ;incstack = 0
  4469                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4470  02CB  0020               	movlb	0	; select bank0
  4471  02CC  188E               	btfsc	14,1	;volatile
  4472  02CD  2AD2               	goto	l3160
  4473  02CE  2ADA               	goto	l3166
  4474  02CF                     l3158:	
  4475                           ;CC2500_B1.c: 76: {
  4476                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  4477                           
  4478                           
  4479                           ;CC2500_B1.c: 78: Timeout_Counter();
  4480  02CF  3185  25BB  3182   	fcall	_Timeout_Counter
  4481  02D2                     l3160:	
  4482  02D2  0020               	movlb	0	; select bank0
  4483  02D3  1C8E               	btfss	14,1	;volatile
  4484  02D4  2AD7               	goto	l3164
  4485  02D5  1D4A               	btfss	_myMain+12,2
  4486  02D6  2ACF               	goto	l3158
  4487  02D7                     l3164:	
  4488                           
  4489                           ;CC2500_B1.c: 79: };
  4490                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  4491  02D7  3186  2640  3182   	fcall	_set_TimeoutCleared
  4492  02DA                     l3166:	
  4493                           
  4494                           ;CC2500_B1.c: 81: }
  4495                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  4496  02DA  303B               	movlw	59
  4497  02DB  3184  24E1  3182   	fcall	_CC2500_ReadStatus
  4498                           
  4499                           ;CC2500_B1.c: 85: if (s_data != 0) {
  4500  02DE  0020               	movlb	0	; select bank0
  4501  02DF  0864               	movf	_s_data,w
  4502  02E0  1903               	btfsc	3,2
  4503  02E1  0008               	return
  4504                           
  4505                           ;CC2500_B1.c: 86: RC0 = 0;
  4506  02E2  100E               	bcf	14,0	;volatile
  4507                           
  4508                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  4509  02E3  30FF               	movlw	255
  4510  02E4  00F5               	movwf	??_CC2500_RxData
  4511  02E5  0875               	movf	??_CC2500_RxData,w
  4512  02E6  00FC               	movwf	_SPI0Buffer
  4513                           
  4514                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  4515  02E7  2AED               	goto	l3176
  4516  02E8                     l3178:	
  4517  02E8  194A               	btfsc	_myMain+12,2
  4518  02E9  2AF0               	goto	l155
  4519                           
  4520                           ;CC2500_B1.c: 89: Timeout_Counter();
  4521  02EA  3185  25BB  3182   	fcall	_Timeout_Counter
  4522  02ED                     l3176:	
  4523  02ED  0020               	movlb	0	; select bank0
  4524  02EE  1A8E               	btfsc	14,5	;volatile
  4525  02EF  2AE8               	goto	l3178
  4526  02F0                     l155:	
  4527                           
  4528                           ;CC2500_B1.c: 90: };
  4529                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  4530  02F0  194A               	btfsc	_myMain+12,2
  4531  02F1  2B29               	goto	l156
  4532                           
  4533                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  4534  02F2  3185  25D0  3182   	fcall	_CC2500_WriteByte
  4535                           
  4536                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  4537  02F5  3185  258F  3182   	fcall	_CC2500_ReadByte
  4538                           
  4539                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  4540  02F8  087C               	movf	_SPI0Buffer,w
  4541  02F9  00F5               	movwf	??_CC2500_RxData
  4542  02FA  0875               	movf	??_CC2500_RxData,w
  4543  02FB  0020               	movlb	0	; select bank0
  4544  02FC  00E0               	movwf	_Rx_Length
  4545                           
  4546                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  4547  02FD  01F6               	clrf	CC2500_RxData@loop_f
  4548  02FE                     l3192:	
  4549  02FE  0020               	movlb	0	; select bank0
  4550  02FF  0860               	movf	_Rx_Length,w
  4551  0300  0276               	subwf	CC2500_RxData@loop_f,w
  4552  0301  1803               	btfsc	3,0
  4553  0302  2B13               	goto	l3194
  4554                           
  4555                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  4556  0303  3185  258F  3182   	fcall	_CC2500_ReadByte
  4557                           
  4558                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  4559  0306  087C               	movf	_SPI0Buffer,w
  4560  0307  00F5               	movwf	??_CC2500_RxData
  4561  0308  0876               	movf	CC2500_RxData@loop_f,w
  4562  0309  3E20               	addlw	_RF_Data& (0+255)
  4563  030A  0086               	movwf	6
  4564  030B  0187               	clrf	7
  4565  030C  0875               	movf	??_CC2500_RxData,w
  4566  030D  0081               	movwf	1
  4567  030E  3001               	movlw	1
  4568  030F  00F5               	movwf	??_CC2500_RxData
  4569  0310  0875               	movf	??_CC2500_RxData,w
  4570  0311  07F6               	addwf	CC2500_RxData@loop_f,f
  4571  0312  2AFE               	goto	l3192
  4572  0313                     l3194:	
  4573                           
  4574                           ;CC2500_B1.c: 99: }
  4575                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  4576  0313  3185  258F  3182   	fcall	_CC2500_ReadByte
  4577                           
  4578                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  4579  0316  087C               	movf	_SPI0Buffer,w
  4580  0317  00F5               	movwf	??_CC2500_RxData
  4581  0318  0875               	movf	??_CC2500_RxData,w
  4582  0319  0020               	movlb	0	; select bank0
  4583  031A  00DF               	movwf	_RSSI
  4584                           
  4585                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  4586  031B  3185  258F  3182   	fcall	_CC2500_ReadByte
  4587                           
  4588                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  4589  031E  087C               	movf	_SPI0Buffer,w
  4590  031F  00F5               	movwf	??_CC2500_RxData
  4591  0320  0875               	movf	??_CC2500_RxData,w
  4592  0321  0020               	movlb	0	; select bank0
  4593  0322  00DE               	movwf	_CRC
  4594                           
  4595                           ;CC2500_B1.c: 104: RC0 = 1;
  4596  0323  140E               	bsf	14,0	;volatile
  4597                           
  4598                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  4599  0324  1BDE               	btfsc	_CRC,7
  4600                           
  4601                           ;CC2500_B1.c: 106: Receive_OK = 1;
  4602  0325  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  4603                           
  4604                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  4605  0326  11CD               	bcf	_RF1,3
  4606                           
  4607                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  4608  0327  14CD               	bsf	_RF1,1
  4609                           
  4610                           ;CC2500_B1.c: 110: } else {
  4611  0328  2B2A               	goto	l3206
  4612  0329                     l156:	
  4613                           
  4614                           ;CC2500_B1.c: 111: RC0 = 1;
  4615  0329  140E               	bsf	14,0	;volatile
  4616  032A                     l3206:	
  4617                           
  4618                           ;CC2500_B1.c: 112: }
  4619                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  4620  032A  3186  2640         	fcall	_set_TimeoutCleared
  4621  032C  0020               	movlb	0	; select bank0
  4622  032D  0008               	return
  4623  032E                     __end_of_CC2500_RxData:	
  4624                           
  4625                           	psect	text14
  4626  04E1                     __ptext14:	
  4627 ;; *************** function _CC2500_ReadStatus *****************
  4628 ;; Defined at:
  4629 ;;		line 304 in file "../src/CC2500_B1.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;  status_addr     1    wreg     unsigned char 
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;  status_addr     1    4[COMMON] unsigned char 
  4634 ;; Return value:  Size  Location     Type
  4635 ;;		None               void
  4636 ;; Registers used:
  4637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4638 ;; Tracked objects:
  4639 ;;		On entry : 0/0
  4640 ;;		On exit  : 0/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4643 ;;      Params:         0       0       0       0       0       0       0       0
  4644 ;;      Locals:         1       0       0       0       0       0       0       0
  4645 ;;      Temps:          1       0       0       0       0       0       0       0
  4646 ;;      Totals:         2       0       0       0       0       0       0       0
  4647 ;;Total ram usage:        2 bytes
  4648 ;; Hardware stack levels used:    1
  4649 ;; Hardware stack levels required when called:    3
  4650 ;; This function calls:
  4651 ;;		_CC2500_ReadByte
  4652 ;;		_CC2500_WriteByte
  4653 ;;		_Timeout_Counter
  4654 ;;		_set_TimeoutCleared
  4655 ;; This function is called by:
  4656 ;;		_CC2500_RxData
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           
  4661                           ;psect for function _CC2500_ReadStatus
  4662  04E1                     _CC2500_ReadStatus:	
  4663                           
  4664                           ;incstack = 0
  4665                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4666                           ;CC2500_ReadStatus@status_addr stored from wreg
  4667  04E1  00F4               	movwf	CC2500_ReadStatus@status_addr
  4668                           
  4669                           ;CC2500_B1.c: 305: RC0 = 0;
  4670  04E2  0020               	movlb	0	; select bank0
  4671  04E3  100E               	bcf	14,0	;volatile
  4672                           
  4673                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  4674  04E4  0874               	movf	CC2500_ReadStatus@status_addr,w
  4675  04E5  3EC0               	addlw	192
  4676  04E6  00F3               	movwf	??_CC2500_ReadStatus
  4677  04E7  0873               	movf	??_CC2500_ReadStatus,w
  4678  04E8  00FC               	movwf	_SPI0Buffer
  4679                           
  4680                           ;CC2500_B1.c: 308: while (RC5 == 1 && myMain.Timeout == 0) {
  4681  04E9  2CED               	goto	l3064
  4682  04EA                     l3062:	
  4683                           
  4684                           ;CC2500_B1.c: 309: Timeout_Counter();
  4685  04EA  3185  25BB  3184   	fcall	_Timeout_Counter
  4686  04ED                     l3064:	
  4687  04ED  0020               	movlb	0	; select bank0
  4688  04EE  1E8E               	btfss	14,5	;volatile
  4689  04EF  2CF2               	goto	l3068
  4690  04F0  1D4A               	btfss	_myMain+12,2
  4691  04F1  2CEA               	goto	l3062
  4692  04F2                     l3068:	
  4693                           
  4694                           ;CC2500_B1.c: 310: };
  4695                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  4696  04F2  3186  2640  3184   	fcall	_set_TimeoutCleared
  4697                           
  4698                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  4699  04F5  3185  25D0  3184   	fcall	_CC2500_WriteByte
  4700                           
  4701                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  4702  04F8  3185  258F         	fcall	_CC2500_ReadByte
  4703                           
  4704                           ;CC2500_B1.c: 315: RC0 = 1;
  4705  04FA  0020               	movlb	0	; select bank0
  4706  04FB  140E               	bsf	14,0	;volatile
  4707                           
  4708                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  4709  04FC  087C               	movf	_SPI0Buffer,w
  4710  04FD  00F3               	movwf	??_CC2500_ReadStatus
  4711  04FE  0873               	movf	??_CC2500_ReadStatus,w
  4712  04FF  00E4               	movwf	_s_data
  4713  0500  0008               	return
  4714  0501                     __end_of_CC2500_ReadStatus:	
  4715                           
  4716                           	psect	text15
  4717  058F                     __ptext15:	
  4718 ;; *************** function _CC2500_ReadByte *****************
  4719 ;; Defined at:
  4720 ;;		line 238 in file "../src/CC2500_B1.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;		None
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  loop_b          1    2[COMMON] unsigned char 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;		None               void
  4727 ;; Registers used:
  4728 ;;		wreg, status,2, status,0
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4734 ;;      Params:         0       0       0       0       0       0       0       0
  4735 ;;      Locals:         1       0       0       0       0       0       0       0
  4736 ;;      Temps:          1       0       0       0       0       0       0       0
  4737 ;;      Totals:         2       0       0       0       0       0       0       0
  4738 ;;Total ram usage:        2 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    2
  4741 ;; This function calls:
  4742 ;;		Nothing
  4743 ;; This function is called by:
  4744 ;;		_CC2500_RxData
  4745 ;;		_CC2500_ReadStatus
  4746 ;;		_CC2500_ReadREG
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           
  4751                           ;psect for function _CC2500_ReadByte
  4752  058F                     _CC2500_ReadByte:	
  4753                           
  4754                           ;CC2500_B1.c: 239: unsigned char loop_b;
  4755                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  4756                           
  4757                           ;incstack = 0
  4758                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  4759  058F  01F2               	clrf	CC2500_ReadByte@loop_b
  4760  0590                     L1:	
  4761  0590  3008               	movlw	8
  4762  0591  0272               	subwf	CC2500_ReadByte@loop_b,w
  4763  0592  1803               	btfsc	3,0
  4764  0593  0008               	return
  4765                           
  4766                           ;CC2500_B1.c: 241: RC3 = 1;
  4767  0594  0020               	movlb	0	; select bank0
  4768  0595  158E               	bsf	14,3	;volatile
  4769                           
  4770                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  4771  0596  1003               	clrc
  4772  0597  0DFC               	rlf	_SPI0Buffer,f
  4773                           
  4774                           ;CC2500_B1.c: 243: if (RC5 == 1)
  4775  0598  1E8E               	btfss	14,5	;volatile
  4776  0599  2D9C               	goto	l2994
  4777                           
  4778                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  4779  059A  147C               	bsf	_SPI0Buffer,0
  4780  059B  2DA0               	goto	l2996
  4781  059C                     l2994:	
  4782                           
  4783                           ;CC2500_B1.c: 245: else
  4784                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  4785  059C  30FE               	movlw	254
  4786  059D  00F1               	movwf	??_CC2500_ReadByte
  4787  059E  0871               	movf	??_CC2500_ReadByte,w
  4788  059F  05FC               	andwf	_SPI0Buffer,f
  4789  05A0                     l2996:	
  4790                           
  4791                           ;CC2500_B1.c: 247: RC3 = 0;
  4792  05A0  118E               	bcf	14,3	;volatile
  4793  05A1  3001               	movlw	1
  4794  05A2  00F1               	movwf	??_CC2500_ReadByte
  4795  05A3  0871               	movf	??_CC2500_ReadByte,w
  4796  05A4  07F2               	addwf	CC2500_ReadByte@loop_b,f
  4797  05A5  2D90               	goto	L1
  4798  05A6                     __end_of_CC2500_ReadByte:	
  4799                           
  4800                           	psect	text16
  4801  065B                     __ptext16:	
  4802 ;; *************** function _RF_Initialization *****************
  4803 ;; Defined at:
  4804 ;;		line 9 in file "../src/RF_Control_B1.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;		None
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;		None
  4809 ;; Return value:  Size  Location     Type
  4810 ;;		None               void
  4811 ;; Registers used:
  4812 ;;		wreg, status,2, status,0, pclath, cstack
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4818 ;;      Params:         0       0       0       0       0       0       0       0
  4819 ;;      Locals:         0       0       0       0       0       0       0       0
  4820 ;;      Temps:          0       0       0       0       0       0       0       0
  4821 ;;      Totals:         0       0       0       0       0       0       0       0
  4822 ;;Total ram usage:        0 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:    3
  4825 ;; This function calls:
  4826 ;;		_setRF_Initialization
  4827 ;; This function is called by:
  4828 ;;		_main
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           
  4833                           ;psect for function _RF_Initialization
  4834  065B                     _RF_Initialization:	
  4835                           
  4836                           ;RF_Control_B1.c: 11: setRF_Initialization();
  4837                           
  4838                           ;incstack = 0
  4839                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  4840  065B  3186  261C         	fcall	_setRF_Initialization
  4841  065D  0008               	return
  4842  065E                     __end_of_RF_Initialization:	
  4843                           
  4844                           	psect	text17
  4845  061C                     __ptext17:	
  4846 ;; *************** function _setRF_Initialization *****************
  4847 ;; Defined at:
  4848 ;;		line 43 in file "../src/RF_Control_B1.c"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;		None
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;		None
  4853 ;; Return value:  Size  Location     Type
  4854 ;;		None               void
  4855 ;; Registers used:
  4856 ;;		wreg
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4862 ;;      Params:         0       0       0       0       0       0       0       0
  4863 ;;      Locals:         0       0       0       0       0       0       0       0
  4864 ;;      Temps:          1       0       0       0       0       0       0       0
  4865 ;;      Totals:         1       0       0       0       0       0       0       0
  4866 ;;Total ram usage:        1 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; Hardware stack levels required when called:    2
  4869 ;; This function calls:
  4870 ;;		Nothing
  4871 ;; This function is called by:
  4872 ;;		_RF_Initialization
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           
  4877                           ;psect for function _setRF_Initialization
  4878  061C                     _setRF_Initialization:	
  4879                           
  4880                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  4881                           
  4882                           ;incstack = 0
  4883                           ; Regs used in _setRF_Initialization: [wreg]
  4884  061C  3015               	movlw	21
  4885  061D  00F1               	movwf	??_setRF_Initialization
  4886  061E  0871               	movf	??_setRF_Initialization,w
  4887  061F  0020               	movlb	0	; select bank0
  4888  0620  00EC               	movwf	_Tx_Length
  4889                           
  4890                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  4891  0621  300A               	movlw	10
  4892  0622  00D4               	movwf	_RF1+7
  4893  0623  3000               	movlw	0
  4894  0624  00D5               	movwf	_RF1+8
  4895  0625  0008               	return
  4896  0626                     __end_of_setRF_Initialization:	
  4897                           
  4898                           	psect	text18
  4899  0626                     __ptext18:	
  4900 ;; *************** function _Mcu_Initialization *****************
  4901 ;; Defined at:
  4902 ;;		line 30 in file "../src/MCU_B1.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;		None
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;		None
  4907 ;; Return value:  Size  Location     Type
  4908 ;;		None               void
  4909 ;; Registers used:
  4910 ;;		wreg, status,2, status,0, pclath, cstack
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4916 ;;      Params:         0       0       0       0       0       0       0       0
  4917 ;;      Locals:         0       0       0       0       0       0       0       0
  4918 ;;      Temps:          0       0       0       0       0       0       0       0
  4919 ;;      Totals:         0       0       0       0       0       0       0       0
  4920 ;;Total ram usage:        0 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    3
  4923 ;; This function calls:
  4924 ;;		_Fosc_Set
  4925 ;;		_IO_Set
  4926 ;;		_TMR1_Set
  4927 ;; This function is called by:
  4928 ;;		_main
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           
  4933                           ;psect for function _Mcu_Initialization
  4934  0626                     _Mcu_Initialization:	
  4935                           
  4936                           ;MCU_B1.c: 32: Fosc_Set();
  4937                           
  4938                           ;incstack = 0
  4939                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  4940  0626  3186  2645  3186   	fcall	_Fosc_Set
  4941                           
  4942                           ;MCU_B1.c: 34: IO_Set();
  4943  0629  3185  25E5  3186   	fcall	_IO_Set
  4944                           
  4945                           ;MCU_B1.c: 36: ;;
  4946                           ;MCU_B1.c: 38: TMR1_Set();
  4947  062C  3186  2605         	fcall	_TMR1_Set
  4948  062E  0008               	return
  4949  062F                     __end_of_Mcu_Initialization:	
  4950                           
  4951                           	psect	text19
  4952  0605                     __ptext19:	
  4953 ;; *************** function _TMR1_Set *****************
  4954 ;; Defined at:
  4955 ;;		line 199 in file "../src/MCU_B1.c"
  4956 ;; Parameters:    Size  Location     Type
  4957 ;;		None
  4958 ;; Auto vars:     Size  Location     Type
  4959 ;;		None
  4960 ;; Return value:  Size  Location     Type
  4961 ;;		None               void
  4962 ;; Registers used:
  4963 ;;		wreg
  4964 ;; Tracked objects:
  4965 ;;		On entry : 0/0
  4966 ;;		On exit  : 0/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4969 ;;      Params:         0       0       0       0       0       0       0       0
  4970 ;;      Locals:         0       0       0       0       0       0       0       0
  4971 ;;      Temps:          0       0       0       0       0       0       0       0
  4972 ;;      Totals:         0       0       0       0       0       0       0       0
  4973 ;;Total ram usage:        0 bytes
  4974 ;; Hardware stack levels used:    1
  4975 ;; Hardware stack levels required when called:    2
  4976 ;; This function calls:
  4977 ;;		Nothing
  4978 ;; This function is called by:
  4979 ;;		_Mcu_Initialization
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           
  4984                           ;psect for function _TMR1_Set
  4985  0605                     _TMR1_Set:	
  4986                           
  4987                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  4988                           
  4989                           ;incstack = 0
  4990                           ; Regs used in _TMR1_Set: [wreg]
  4991  0605  3041               	movlw	65
  4992  0606  0020               	movlb	0	; select bank0
  4993  0607  0098               	movwf	24	;volatile
  4994                           
  4995                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  4996  0608  30FA               	movlw	250
  4997  0609  0097               	movwf	23	;volatile
  4998                           
  4999                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  5000  060A  3038               	movlw	56
  5001  060B  0096               	movwf	22	;volatile
  5002                           
  5003                           ;MCU_B1.c: 203: TMR1IE = 1;
  5004  060C  0021               	movlb	1	; select bank1
  5005  060D  1411               	bsf	17,0	;volatile
  5006                           
  5007                           ;MCU_B1.c: 204: PEIE = 1;
  5008  060E  170B               	bsf	11,6	;volatile
  5009                           
  5010                           ;MCU_B1.c: 205: GIE = 1;
  5011  060F  178B               	bsf	11,7	;volatile
  5012  0610  0008               	return
  5013  0611                     __end_of_TMR1_Set:	
  5014                           
  5015                           	psect	text20
  5016  05E5                     __ptext20:	
  5017 ;; *************** function _IO_Set *****************
  5018 ;; Defined at:
  5019 ;;		line 60 in file "../src/MCU_B1.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;		None
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;		None
  5024 ;; Return value:  Size  Location     Type
  5025 ;;		None               void
  5026 ;; Registers used:
  5027 ;;		wreg, status,2
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5033 ;;      Params:         0       0       0       0       0       0       0       0
  5034 ;;      Locals:         0       0       0       0       0       0       0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0       0
  5036 ;;      Totals:         0       0       0       0       0       0       0       0
  5037 ;;Total ram usage:        0 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    2
  5040 ;; This function calls:
  5041 ;;		Nothing
  5042 ;; This function is called by:
  5043 ;;		_Mcu_Initialization
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           
  5048                           ;psect for function _IO_Set
  5049  05E5                     _IO_Set:	
  5050                           
  5051                           ;MCU_B1.c: 73: TRISA = 0b00000000;;
  5052                           
  5053                           ;incstack = 0
  5054                           ; Regs used in _IO_Set: [wreg+status,2]
  5055  05E5  0021               	movlb	1	; select bank1
  5056  05E6  018C               	clrf	12	;volatile
  5057                           
  5058                           ;MCU_B1.c: 74: TRISB = 0b00000000;;
  5059  05E7  018D               	clrf	13	;volatile
  5060                           
  5061                           ;MCU_B1.c: 75: TRISC = 0b00100110;;
  5062  05E8  3026               	movlw	38
  5063  05E9  008E               	movwf	14	;volatile
  5064                           
  5065                           ;MCU_B1.c: 76: LATA = 0b00000000;;
  5066  05EA  0022               	movlb	2	; select bank2
  5067  05EB  018C               	clrf	12	;volatile
  5068                           
  5069                           ;MCU_B1.c: 77: LATB = 0b00000000;;
  5070  05EC  018D               	clrf	13	;volatile
  5071                           
  5072                           ;MCU_B1.c: 78: LATC = 0b00000000;;
  5073  05ED  018E               	clrf	14	;volatile
  5074                           
  5075                           ;MCU_B1.c: 79: ANSELA = 0b00000000;;
  5076  05EE  0023               	movlb	3	; select bank3
  5077  05EF  018C               	clrf	12	;volatile
  5078                           
  5079                           ;MCU_B1.c: 80: ANSELB = 0b00000000;;
  5080  05F0  018D               	clrf	13	;volatile
  5081                           
  5082                           ;MCU_B1.c: 81: ANSELC = 0b00000000;;
  5083  05F1  018E               	clrf	14	;volatile
  5084                           
  5085                           ;MCU_B1.c: 82: PORTA = 0b00000000;;
  5086  05F2  0020               	movlb	0	; select bank0
  5087  05F3  018C               	clrf	12	;volatile
  5088                           
  5089                           ;MCU_B1.c: 83: PORTB = 0b00000000;;
  5090  05F4  018D               	clrf	13	;volatile
  5091                           
  5092                           ;MCU_B1.c: 84: PORTC = 0b00100110;;
  5093  05F5  3026               	movlw	38
  5094  05F6  008E               	movwf	14	;volatile
  5095  05F7  0008               	return
  5096  05F8                     __end_of_IO_Set:	
  5097                           
  5098                           	psect	text21
  5099  0645                     __ptext21:	
  5100 ;; *************** function _Fosc_Set *****************
  5101 ;; Defined at:
  5102 ;;		line 56 in file "../src/MCU_B1.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;		None
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;		None
  5107 ;; Return value:  Size  Location     Type
  5108 ;;		None               void
  5109 ;; Registers used:
  5110 ;;		wreg
  5111 ;; Tracked objects:
  5112 ;;		On entry : 0/0
  5113 ;;		On exit  : 0/0
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5116 ;;      Params:         0       0       0       0       0       0       0       0
  5117 ;;      Locals:         0       0       0       0       0       0       0       0
  5118 ;;      Temps:          0       0       0       0       0       0       0       0
  5119 ;;      Totals:         0       0       0       0       0       0       0       0
  5120 ;;Total ram usage:        0 bytes
  5121 ;; Hardware stack levels used:    1
  5122 ;; Hardware stack levels required when called:    2
  5123 ;; This function calls:
  5124 ;;		Nothing
  5125 ;; This function is called by:
  5126 ;;		_Mcu_Initialization
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           
  5131                           ;psect for function _Fosc_Set
  5132  0645                     _Fosc_Set:	
  5133                           
  5134                           ;MCU_B1.c: 57: OSCCON = 0x78;
  5135                           
  5136                           ;incstack = 0
  5137                           ; Regs used in _Fosc_Set: [wreg]
  5138  0645  3078               	movlw	120
  5139  0646  0021               	movlb	1	; select bank1
  5140  0647  0099               	movwf	25	;volatile
  5141  0648  0008               	return
  5142  0649                     __end_of_Fosc_Set:	
  5143                           
  5144                           	psect	text22
  5145  05A6                     __ptext22:	
  5146 ;; *************** function _CC2500_PowerOnInitial *****************
  5147 ;; Defined at:
  5148 ;;		line 122 in file "../src/CC2500_B1.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;		None
  5151 ;; Auto vars:     Size  Location     Type
  5152 ;;		None
  5153 ;; Return value:  Size  Location     Type
  5154 ;;		None               void
  5155 ;; Registers used:
  5156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5157 ;; Tracked objects:
  5158 ;;		On entry : 0/0
  5159 ;;		On exit  : 0/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5162 ;;      Params:         0       0       0       0       0       0       0       0
  5163 ;;      Locals:         0       0       0       0       0       0       0       0
  5164 ;;      Temps:          0       0       0       0       0       0       0       0
  5165 ;;      Totals:         0       0       0       0       0       0       0       0
  5166 ;;Total ram usage:        0 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; Hardware stack levels required when called:    5
  5169 ;; This function calls:
  5170 ;;		_CC2500_ClearRXFIFO
  5171 ;;		_CC2500_ClearTXFIFO
  5172 ;;		_CC2500_FrequencyCabr
  5173 ;;		_CC2500_InitPATable
  5174 ;;		_CC2500_InitSetREG
  5175 ;;		_CC2500_PowerRST
  5176 ;;		_CC2500_SIDLEMode
  5177 ;; This function is called by:
  5178 ;;		_main
  5179 ;; This function uses a non-reentrant model
  5180 ;;
  5181                           
  5182                           
  5183                           ;psect for function _CC2500_PowerOnInitial
  5184  05A6                     _CC2500_PowerOnInitial:	
  5185                           
  5186                           ;CC2500_B1.c: 123: CC2500_PowerRST();
  5187                           
  5188                           ;incstack = 0
  5189                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5190  05A6  3184  2413  3185   	fcall	_CC2500_PowerRST
  5191                           
  5192                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
  5193  05A9  3184  2454  3185   	fcall	_CC2500_InitSetREG
  5194                           
  5195                           ;CC2500_B1.c: 125: CC2500_InitPATable();
  5196  05AC  3185  253F  3185   	fcall	_CC2500_InitPATable
  5197                           
  5198                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
  5199  05AF  3186  264D  3185   	fcall	_CC2500_ClearTXFIFO
  5200                           
  5201                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
  5202  05B2  3186  2651  3185   	fcall	_CC2500_ClearRXFIFO
  5203                           
  5204                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
  5205  05B5  3186  2611  3185   	fcall	_CC2500_FrequencyCabr
  5206                           
  5207                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
  5208  05B8  3186  2649         	fcall	_CC2500_SIDLEMode
  5209  05BA  0008               	return
  5210  05BB                     __end_of_CC2500_PowerOnInitial:	
  5211                           
  5212                           	psect	text23
  5213  0649                     __ptext23:	
  5214 ;; *************** function _CC2500_SIDLEMode *****************
  5215 ;; Defined at:
  5216 ;;		line 212 in file "../src/CC2500_B1.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;		None
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;		None
  5221 ;; Return value:  Size  Location     Type
  5222 ;;		None               void
  5223 ;; Registers used:
  5224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5230 ;;      Params:         0       0       0       0       0       0       0       0
  5231 ;;      Locals:         0       0       0       0       0       0       0       0
  5232 ;;      Temps:          0       0       0       0       0       0       0       0
  5233 ;;      Totals:         0       0       0       0       0       0       0       0
  5234 ;;Total ram usage:        0 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; Hardware stack levels required when called:    4
  5237 ;; This function calls:
  5238 ;;		_CC2500_WriteCommand
  5239 ;; This function is called by:
  5240 ;;		_CC2500_PowerOnInitial
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           
  5245                           ;psect for function _CC2500_SIDLEMode
  5246  0649                     _CC2500_SIDLEMode:	
  5247                           
  5248                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
  5249                           
  5250                           ;incstack = 0
  5251                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5252  0649  3036               	movlw	54
  5253  064A  3185  2577         	fcall	_CC2500_WriteCommand
  5254  064C  0008               	return
  5255  064D                     __end_of_CC2500_SIDLEMode:	
  5256                           
  5257                           	psect	text24
  5258  0413                     __ptext24:	
  5259 ;; *************** function _CC2500_PowerRST *****************
  5260 ;; Defined at:
  5261 ;;		line 135 in file "../src/CC2500_B1.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;		None
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;		None
  5266 ;; Return value:  Size  Location     Type
  5267 ;;		None               void
  5268 ;; Registers used:
  5269 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5275 ;;      Params:         0       0       0       0       0       0       0       0
  5276 ;;      Locals:         0       0       0       0       0       0       0       0
  5277 ;;      Temps:          1       0       0       0       0       0       0       0
  5278 ;;      Totals:         1       0       0       0       0       0       0       0
  5279 ;;Total ram usage:        1 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    3
  5282 ;; This function calls:
  5283 ;;		_CC2500_WriteByte
  5284 ;;		_DelayTime_1us
  5285 ;;		_Timeout_Counter
  5286 ;;		_set_TimeoutCleared
  5287 ;; This function is called by:
  5288 ;;		_CC2500_PowerOnInitial
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           
  5293                           ;psect for function _CC2500_PowerRST
  5294  0413                     _CC2500_PowerRST:	
  5295                           
  5296                           ;CC2500_B1.c: 136: RC3 = 0;
  5297                           
  5298                           ;incstack = 0
  5299                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5300  0413  0020               	movlb	0	; select bank0
  5301  0414  118E               	bcf	14,3	;volatile
  5302                           
  5303                           ;CC2500_B1.c: 137: RC4 = 0;
  5304  0415  120E               	bcf	14,4	;volatile
  5305                           
  5306                           ;CC2500_B1.c: 138: RC0 = 1;
  5307  0416  140E               	bsf	14,0	;volatile
  5308                           
  5309                           ;CC2500_B1.c: 139: DelayTime_1us(10);
  5310  0417  300A               	movlw	10
  5311  0418  00F1               	movwf	DelayTime_1us@count
  5312  0419  3000               	movlw	0
  5313  041A  00F2               	movwf	DelayTime_1us@count+1
  5314  041B  3184  247C  3184   	fcall	_DelayTime_1us
  5315                           
  5316                           ;CC2500_B1.c: 140: RC0 = 0;
  5317  041E  0020               	movlb	0	; select bank0
  5318  041F  100E               	bcf	14,0	;volatile
  5319                           
  5320                           ;CC2500_B1.c: 141: DelayTime_1us(10);
  5321  0420  300A               	movlw	10
  5322  0421  00F1               	movwf	DelayTime_1us@count
  5323  0422  3000               	movlw	0
  5324  0423  00F2               	movwf	DelayTime_1us@count+1
  5325  0424  3184  247C  3184   	fcall	_DelayTime_1us
  5326                           
  5327                           ;CC2500_B1.c: 142: RC0 = 1;
  5328  0427  0020               	movlb	0	; select bank0
  5329  0428  140E               	bsf	14,0	;volatile
  5330                           
  5331                           ;CC2500_B1.c: 143: DelayTime_1us(40);
  5332  0429  3028               	movlw	40
  5333  042A  00F1               	movwf	DelayTime_1us@count
  5334  042B  3000               	movlw	0
  5335  042C  00F2               	movwf	DelayTime_1us@count+1
  5336  042D  3184  247C  3184   	fcall	_DelayTime_1us
  5337                           
  5338                           ;CC2500_B1.c: 144: RC0 = 0;
  5339  0430  0020               	movlb	0	; select bank0
  5340  0431  100E               	bcf	14,0	;volatile
  5341                           
  5342                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
  5343  0432  3030               	movlw	48
  5344  0433  00F7               	movwf	??_CC2500_PowerRST
  5345  0434  0877               	movf	??_CC2500_PowerRST,w
  5346  0435  00FC               	movwf	_SPI0Buffer
  5347                           
  5348                           ;CC2500_B1.c: 146: while (RC5 == 1 && myMain.Timeout == 0) {
  5349  0436  2C3A               	goto	l3288
  5350  0437                     l3286:	
  5351                           
  5352                           ;CC2500_B1.c: 147: Timeout_Counter();
  5353  0437  3185  25BB  3184   	fcall	_Timeout_Counter
  5354  043A                     l3288:	
  5355  043A  0020               	movlb	0	; select bank0
  5356  043B  1E8E               	btfss	14,5	;volatile
  5357  043C  2C3F               	goto	l3292
  5358  043D  1D4A               	btfss	_myMain+12,2
  5359  043E  2C37               	goto	l3286
  5360  043F                     l3292:	
  5361                           
  5362                           ;CC2500_B1.c: 148: };
  5363                           ;CC2500_B1.c: 149: set_TimeoutCleared();
  5364  043F  3186  2640  3184   	fcall	_set_TimeoutCleared
  5365                           
  5366                           ;CC2500_B1.c: 150: CC2500_WriteByte();
  5367  0442  3185  25D0  3184   	fcall	_CC2500_WriteByte
  5368                           
  5369                           ;CC2500_B1.c: 151: while (RC5 == 1 && myMain.Timeout == 0) {
  5370  0445  2C49               	goto	l3298
  5371  0446                     l3296:	
  5372                           
  5373                           ;CC2500_B1.c: 152: Timeout_Counter();
  5374  0446  3185  25BB  3184   	fcall	_Timeout_Counter
  5375  0449                     l3298:	
  5376  0449  0020               	movlb	0	; select bank0
  5377  044A  1E8E               	btfss	14,5	;volatile
  5378  044B  2C4E               	goto	l3302
  5379  044C  1D4A               	btfss	_myMain+12,2
  5380  044D  2C46               	goto	l3296
  5381  044E                     l3302:	
  5382                           
  5383                           ;CC2500_B1.c: 153: };
  5384                           ;CC2500_B1.c: 154: set_TimeoutCleared();
  5385  044E  3186  2640         	fcall	_set_TimeoutCleared
  5386                           
  5387                           ;CC2500_B1.c: 155: RC4 = 0;
  5388  0450  0020               	movlb	0	; select bank0
  5389  0451  120E               	bcf	14,4	;volatile
  5390                           
  5391                           ;CC2500_B1.c: 156: RC0 = 1;
  5392  0452  140E               	bsf	14,0	;volatile
  5393  0453  0008               	return
  5394  0454                     __end_of_CC2500_PowerRST:	
  5395                           
  5396                           	psect	text25
  5397  0454                     __ptext25:	
  5398 ;; *************** function _CC2500_InitSetREG *****************
  5399 ;; Defined at:
  5400 ;;		line 162 in file "../src/CC2500_B1.c"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;		None
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;  loop_c          1    9[COMMON] unsigned char 
  5405 ;;  temp2           1    8[COMMON] unsigned char 
  5406 ;;  temp1           1    7[COMMON] unsigned char 
  5407 ;; Return value:  Size  Location     Type
  5408 ;;		None               void
  5409 ;; Registers used:
  5410 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5416 ;;      Params:         0       0       0       0       0       0       0       0
  5417 ;;      Locals:         3       0       0       0       0       0       0       0
  5418 ;;      Temps:          1       0       0       0       0       0       0       0
  5419 ;;      Totals:         4       0       0       0       0       0       0       0
  5420 ;;Total ram usage:        4 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    4
  5423 ;; This function calls:
  5424 ;;		_CC2500_WriteREG
  5425 ;; This function is called by:
  5426 ;;		_CC2500_PowerOnInitial
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           
  5431                           ;psect for function _CC2500_InitSetREG
  5432  0454                     _CC2500_InitSetREG:	
  5433                           
  5434                           ;CC2500_B1.c: 163: unsigned char loop_c;
  5435                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
  5436                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
  5437                           
  5438                           ;incstack = 0
  5439                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5440  0454  01F9               	clrf	CC2500_InitSetREG@loop_c
  5441  0455                     L2:	
  5442  0455  302F               	movlw	47
  5443  0456  0279               	subwf	CC2500_InitSetREG@loop_c,w
  5444  0457  1803               	btfsc	3,0
  5445  0458  0008               	return
  5446                           
  5447                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
  5448  0459  0879               	movf	CC2500_InitSetREG@loop_c,w
  5449  045A  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  5450  045B  0084               	movwf	4
  5451  045C  3082               	movlw	high (_CC2500_registers_address| (0+32768))
  5452  045D  1803               	skipnc
  5453  045E  3E01               	addlw	1
  5454  045F  0085               	movwf	5
  5455  0460  0800               	movf	0,w	;code access
  5456  0461  00F6               	movwf	??_CC2500_InitSetREG
  5457  0462  0876               	movf	??_CC2500_InitSetREG,w
  5458  0463  00F7               	movwf	CC2500_InitSetREG@temp1
  5459                           
  5460                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
  5461  0464  0879               	movf	CC2500_InitSetREG@loop_c,w
  5462  0465  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  5463  0466  0084               	movwf	4
  5464  0467  3082               	movlw	high (_CC2500_rfSettings| (0+32768))
  5465  0468  1803               	skipnc
  5466  0469  3E01               	addlw	1
  5467  046A  0085               	movwf	5
  5468  046B  0800               	movf	0,w	;code access
  5469  046C  00F6               	movwf	??_CC2500_InitSetREG
  5470  046D  0876               	movf	??_CC2500_InitSetREG,w
  5471  046E  00F8               	movwf	CC2500_InitSetREG@temp2
  5472                           
  5473                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
  5474  046F  0878               	movf	CC2500_InitSetREG@temp2,w
  5475  0470  00F6               	movwf	??_CC2500_InitSetREG
  5476  0471  0876               	movf	??_CC2500_InitSetREG,w
  5477  0472  00F3               	movwf	CC2500_WriteREG@value
  5478  0473  0877               	movf	CC2500_InitSetREG@temp1,w
  5479  0474  3185  2501  3184   	fcall	_CC2500_WriteREG
  5480  0477  3001               	movlw	1
  5481  0478  00F6               	movwf	??_CC2500_InitSetREG
  5482  0479  0876               	movf	??_CC2500_InitSetREG,w
  5483  047A  07F9               	addwf	CC2500_InitSetREG@loop_c,f
  5484  047B  2C55               	goto	L2
  5485  047C                     __end_of_CC2500_InitSetREG:	
  5486                           
  5487                           	psect	text26
  5488  053F                     __ptext26:	
  5489 ;; *************** function _CC2500_InitPATable *****************
  5490 ;; Defined at:
  5491 ;;		line 177 in file "../src/CC2500_B1.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;		None
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;  loop_d          1    8[COMMON] unsigned char 
  5496 ;;  temp            1    7[COMMON] unsigned char 
  5497 ;; Return value:  Size  Location     Type
  5498 ;;		None               void
  5499 ;; Registers used:
  5500 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5506 ;;      Params:         0       0       0       0       0       0       0       0
  5507 ;;      Locals:         2       0       0       0       0       0       0       0
  5508 ;;      Temps:          1       0       0       0       0       0       0       0
  5509 ;;      Totals:         3       0       0       0       0       0       0       0
  5510 ;;Total ram usage:        3 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    4
  5513 ;; This function calls:
  5514 ;;		_CC2500_WriteREG
  5515 ;; This function is called by:
  5516 ;;		_CC2500_PowerOnInitial
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           
  5521                           ;psect for function _CC2500_InitPATable
  5522  053F                     _CC2500_InitPATable:	
  5523                           
  5524                           ;CC2500_B1.c: 178: unsigned char loop_d;
  5525                           ;CC2500_B1.c: 179: unsigned char temp;
  5526                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
  5527                           
  5528                           ;incstack = 0
  5529                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5530  053F  01F8               	clrf	CC2500_InitPATable@loop_d
  5531  0540                     L3:	
  5532  0540  3008               	movlw	8
  5533  0541  0278               	subwf	CC2500_InitPATable@loop_d,w
  5534  0542  1803               	btfsc	3,0
  5535  0543  0008               	return
  5536                           
  5537                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
  5538  0544  0878               	movf	CC2500_InitPATable@loop_d,w
  5539  0545  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  5540  0546  0084               	movwf	4
  5541  0547  3082               	movlw	high (_CC2500_patable_vaule| (0+32768))
  5542  0548  1803               	skipnc
  5543  0549  3E01               	addlw	1
  5544  054A  0085               	movwf	5
  5545  054B  0800               	movf	0,w	;code access
  5546  054C  00F6               	movwf	??_CC2500_InitPATable
  5547  054D  0876               	movf	??_CC2500_InitPATable,w
  5548  054E  00F7               	movwf	CC2500_InitPATable@temp
  5549                           
  5550                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
  5551  054F  0877               	movf	CC2500_InitPATable@temp,w
  5552  0550  00F6               	movwf	??_CC2500_InitPATable
  5553  0551  0876               	movf	??_CC2500_InitPATable,w
  5554  0552  00F3               	movwf	CC2500_WriteREG@value
  5555  0553  303E               	movlw	62
  5556  0554  3185  2501  3185   	fcall	_CC2500_WriteREG
  5557  0557  3001               	movlw	1
  5558  0558  00F6               	movwf	??_CC2500_InitPATable
  5559  0559  0876               	movf	??_CC2500_InitPATable,w
  5560  055A  07F8               	addwf	CC2500_InitPATable@loop_d,f
  5561  055B  2D40               	goto	L3
  5562  055C                     __end_of_CC2500_InitPATable:	
  5563                           
  5564                           	psect	text27
  5565  0501                     __ptext27:	
  5566 ;; *************** function _CC2500_WriteREG *****************
  5567 ;; Defined at:
  5568 ;;		line 254 in file "../src/CC2500_B1.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  w_addr          1    wreg     unsigned char 
  5571 ;;  value           1    3[COMMON] unsigned char 
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;  w_addr          1    5[COMMON] unsigned char 
  5574 ;; Return value:  Size  Location     Type
  5575 ;;		None               void
  5576 ;; Registers used:
  5577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5578 ;; Tracked objects:
  5579 ;;		On entry : 0/0
  5580 ;;		On exit  : 0/0
  5581 ;;		Unchanged: 0/0
  5582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5583 ;;      Params:         1       0       0       0       0       0       0       0
  5584 ;;      Locals:         1       0       0       0       0       0       0       0
  5585 ;;      Temps:          1       0       0       0       0       0       0       0
  5586 ;;      Totals:         3       0       0       0       0       0       0       0
  5587 ;;Total ram usage:        3 bytes
  5588 ;; Hardware stack levels used:    1
  5589 ;; Hardware stack levels required when called:    3
  5590 ;; This function calls:
  5591 ;;		_CC2500_WriteByte
  5592 ;;		_Timeout_Counter
  5593 ;;		_set_TimeoutCleared
  5594 ;; This function is called by:
  5595 ;;		_CC2500_InitSetREG
  5596 ;;		_CC2500_InitPATable
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           
  5601                           ;psect for function _CC2500_WriteREG
  5602  0501                     _CC2500_WriteREG:	
  5603                           
  5604                           ;incstack = 0
  5605                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5606                           ;CC2500_WriteREG@w_addr stored from wreg
  5607  0501  00F5               	movwf	CC2500_WriteREG@w_addr
  5608                           
  5609                           ;CC2500_B1.c: 255: RC0 = 0;
  5610  0502  0020               	movlb	0	; select bank0
  5611  0503  100E               	bcf	14,0	;volatile
  5612                           
  5613                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
  5614  0504  0875               	movf	CC2500_WriteREG@w_addr,w
  5615  0505  00F4               	movwf	??_CC2500_WriteREG
  5616  0506  0874               	movf	??_CC2500_WriteREG,w
  5617  0507  00FC               	movwf	_SPI0Buffer
  5618                           
  5619                           ;CC2500_B1.c: 257: while (RC5 == 1 && myMain.Timeout == 0) {
  5620  0508  2D0C               	goto	l3214
  5621  0509                     l3212:	
  5622                           
  5623                           ;CC2500_B1.c: 258: Timeout_Counter();
  5624  0509  3185  25BB  3185   	fcall	_Timeout_Counter
  5625  050C                     l3214:	
  5626  050C  0020               	movlb	0	; select bank0
  5627  050D  1E8E               	btfss	14,5	;volatile
  5628  050E  2D11               	goto	l3218
  5629  050F  1D4A               	btfss	_myMain+12,2
  5630  0510  2D09               	goto	l3212
  5631  0511                     l3218:	
  5632                           
  5633                           ;CC2500_B1.c: 259: };
  5634                           ;CC2500_B1.c: 260: set_TimeoutCleared();
  5635  0511  3186  2640  3185   	fcall	_set_TimeoutCleared
  5636                           
  5637                           ;CC2500_B1.c: 262: CC2500_WriteByte();
  5638  0514  3185  25D0  3185   	fcall	_CC2500_WriteByte
  5639                           
  5640                           ;CC2500_B1.c: 263: SPI0Buffer = value;
  5641  0517  0873               	movf	CC2500_WriteREG@value,w
  5642  0518  00F4               	movwf	??_CC2500_WriteREG
  5643  0519  0874               	movf	??_CC2500_WriteREG,w
  5644  051A  00FC               	movwf	_SPI0Buffer
  5645                           
  5646                           ;CC2500_B1.c: 264: CC2500_WriteByte();
  5647  051B  3185  25D0         	fcall	_CC2500_WriteByte
  5648                           
  5649                           ;CC2500_B1.c: 265: RC0 = 1;
  5650  051D  0020               	movlb	0	; select bank0
  5651  051E  140E               	bsf	14,0	;volatile
  5652  051F  0008               	return
  5653  0520                     __end_of_CC2500_WriteREG:	
  5654                           
  5655                           	psect	text28
  5656  0611                     __ptext28:	
  5657 ;; *************** function _CC2500_FrequencyCabr *****************
  5658 ;; Defined at:
  5659 ;;		line 204 in file "../src/CC2500_B1.c"
  5660 ;; Parameters:    Size  Location     Type
  5661 ;;		None
  5662 ;; Auto vars:     Size  Location     Type
  5663 ;;		None
  5664 ;; Return value:  Size  Location     Type
  5665 ;;		None               void
  5666 ;; Registers used:
  5667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5668 ;; Tracked objects:
  5669 ;;		On entry : 0/0
  5670 ;;		On exit  : 0/0
  5671 ;;		Unchanged: 0/0
  5672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5673 ;;      Params:         0       0       0       0       0       0       0       0
  5674 ;;      Locals:         0       0       0       0       0       0       0       0
  5675 ;;      Temps:          0       0       0       0       0       0       0       0
  5676 ;;      Totals:         0       0       0       0       0       0       0       0
  5677 ;;Total ram usage:        0 bytes
  5678 ;; Hardware stack levels used:    1
  5679 ;; Hardware stack levels required when called:    4
  5680 ;; This function calls:
  5681 ;;		_CC2500_WriteCommand
  5682 ;;		_DelayTime_1us
  5683 ;; This function is called by:
  5684 ;;		_CC2500_PowerOnInitial
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           
  5689                           ;psect for function _CC2500_FrequencyCabr
  5690  0611                     _CC2500_FrequencyCabr:	
  5691                           
  5692                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
  5693                           
  5694                           ;incstack = 0
  5695                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5696  0611  3033               	movlw	51
  5697  0612  3185  2577  3186   	fcall	_CC2500_WriteCommand
  5698                           
  5699                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
  5700  0615  30E8               	movlw	232
  5701  0616  00F1               	movwf	DelayTime_1us@count
  5702  0617  3003               	movlw	3
  5703  0618  00F2               	movwf	DelayTime_1us@count+1
  5704  0619  3184  247C         	fcall	_DelayTime_1us
  5705  061B  0008               	return
  5706  061C                     __end_of_CC2500_FrequencyCabr:	
  5707                           
  5708                           	psect	text29
  5709  047C                     __ptext29:	
  5710 ;; *************** function _DelayTime_1us *****************
  5711 ;; Defined at:
  5712 ;;		line 323 in file "../src/CC2500_B1.c"
  5713 ;; Parameters:    Size  Location     Type
  5714 ;;  count           2    1[COMMON] int 
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;  j               2    5[COMMON] unsigned int 
  5717 ;;  i               2    3[COMMON] unsigned int 
  5718 ;; Return value:  Size  Location     Type
  5719 ;;		None               void
  5720 ;; Registers used:
  5721 ;;		wreg, status,2
  5722 ;; Tracked objects:
  5723 ;;		On entry : 0/0
  5724 ;;		On exit  : 0/0
  5725 ;;		Unchanged: 0/0
  5726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5727 ;;      Params:         2       0       0       0       0       0       0       0
  5728 ;;      Locals:         4       0       0       0       0       0       0       0
  5729 ;;      Temps:          0       0       0       0       0       0       0       0
  5730 ;;      Totals:         6       0       0       0       0       0       0       0
  5731 ;;Total ram usage:        6 bytes
  5732 ;; Hardware stack levels used:    1
  5733 ;; Hardware stack levels required when called:    2
  5734 ;; This function calls:
  5735 ;;		Nothing
  5736 ;; This function is called by:
  5737 ;;		_CC2500_PowerRST
  5738 ;;		_CC2500_FrequencyCabr
  5739 ;; This function uses a non-reentrant model
  5740 ;;
  5741                           
  5742                           
  5743                           ;psect for function _DelayTime_1us
  5744  047C                     _DelayTime_1us:	
  5745                           
  5746                           ;CC2500_B1.c: 324: unsigned int i, j;
  5747                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
  5748                           
  5749                           ;incstack = 0
  5750                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  5751  047C  3001               	movlw	1
  5752  047D  00F3               	movwf	DelayTime_1us@i
  5753  047E  3000               	movlw	0
  5754  047F  00F4               	movwf	DelayTime_1us@i+1
  5755  0480                     l249:	
  5756  0480  0872               	movf	DelayTime_1us@count+1,w
  5757  0481  0274               	subwf	DelayTime_1us@i+1,w
  5758  0482  1D03               	skipz
  5759  0483  2C86               	goto	u1305
  5760  0484  0871               	movf	DelayTime_1us@count,w
  5761  0485  0273               	subwf	DelayTime_1us@i,w
  5762  0486                     u1305:	
  5763  0486  1803               	btfsc	3,0
  5764  0487  0008               	return
  5765                           
  5766                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
  5767  0488  01F5               	clrf	DelayTime_1us@j
  5768  0489  01F6               	clrf	DelayTime_1us@j+1
  5769  048A  3000               	movlw	0
  5770  048B  0276               	subwf	DelayTime_1us@j+1,w
  5771  048C  3002               	movlw	2
  5772  048D  1903               	skipnz
  5773  048E  0275               	subwf	DelayTime_1us@j,w
  5774  048F  1803               	btfsc	3,0
  5775  0490  2C9C               	goto	l2520
  5776  0491                     l2518:	
  5777  0491  3001               	movlw	1
  5778  0492  07F5               	addwf	DelayTime_1us@j,f
  5779  0493  3000               	movlw	0
  5780  0494  3DF6               	addwfc	DelayTime_1us@j+1,f
  5781  0495  3000               	movlw	0
  5782  0496  0276               	subwf	DelayTime_1us@j+1,w
  5783  0497  3002               	movlw	2
  5784  0498  1903               	skipnz
  5785  0499  0275               	subwf	DelayTime_1us@j,w
  5786  049A  1C03               	skipc
  5787  049B  2C91               	goto	l2518
  5788  049C                     l2520:	
  5789  049C  3001               	movlw	1
  5790  049D  07F3               	addwf	DelayTime_1us@i,f
  5791  049E  3000               	movlw	0
  5792  049F  3DF4               	addwfc	DelayTime_1us@i+1,f
  5793  04A0  2C80               	goto	l249
  5794  04A1                     __end_of_DelayTime_1us:	
  5795                           
  5796                           	psect	text30
  5797  064D                     __ptext30:	
  5798 ;; *************** function _CC2500_ClearTXFIFO *****************
  5799 ;; Defined at:
  5800 ;;		line 190 in file "../src/CC2500_B1.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;		None
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;		None
  5805 ;; Return value:  Size  Location     Type
  5806 ;;		None               void
  5807 ;; Registers used:
  5808 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5814 ;;      Params:         0       0       0       0       0       0       0       0
  5815 ;;      Locals:         0       0       0       0       0       0       0       0
  5816 ;;      Temps:          0       0       0       0       0       0       0       0
  5817 ;;      Totals:         0       0       0       0       0       0       0       0
  5818 ;;Total ram usage:        0 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:    4
  5821 ;; This function calls:
  5822 ;;		_CC2500_WriteCommand
  5823 ;; This function is called by:
  5824 ;;		_CC2500_PowerOnInitial
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           
  5829                           ;psect for function _CC2500_ClearTXFIFO
  5830  064D                     _CC2500_ClearTXFIFO:	
  5831                           
  5832                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
  5833                           
  5834                           ;incstack = 0
  5835                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5836  064D  303B               	movlw	59
  5837  064E  3185  2577         	fcall	_CC2500_WriteCommand
  5838  0650  0008               	return
  5839  0651                     __end_of_CC2500_ClearTXFIFO:	
  5840                           
  5841                           	psect	text31
  5842  0651                     __ptext31:	
  5843 ;; *************** function _CC2500_ClearRXFIFO *****************
  5844 ;; Defined at:
  5845 ;;		line 197 in file "../src/CC2500_B1.c"
  5846 ;; Parameters:    Size  Location     Type
  5847 ;;		None
  5848 ;; Auto vars:     Size  Location     Type
  5849 ;;		None
  5850 ;; Return value:  Size  Location     Type
  5851 ;;		None               void
  5852 ;; Registers used:
  5853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5854 ;; Tracked objects:
  5855 ;;		On entry : 0/0
  5856 ;;		On exit  : 0/0
  5857 ;;		Unchanged: 0/0
  5858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5859 ;;      Params:         0       0       0       0       0       0       0       0
  5860 ;;      Locals:         0       0       0       0       0       0       0       0
  5861 ;;      Temps:          0       0       0       0       0       0       0       0
  5862 ;;      Totals:         0       0       0       0       0       0       0       0
  5863 ;;Total ram usage:        0 bytes
  5864 ;; Hardware stack levels used:    1
  5865 ;; Hardware stack levels required when called:    4
  5866 ;; This function calls:
  5867 ;;		_CC2500_WriteCommand
  5868 ;; This function is called by:
  5869 ;;		_CC2500_PowerOnInitial
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           
  5874                           ;psect for function _CC2500_ClearRXFIFO
  5875  0651                     _CC2500_ClearRXFIFO:	
  5876                           
  5877                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
  5878                           
  5879                           ;incstack = 0
  5880                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5881  0651  303A               	movlw	58
  5882  0652  3185  2577         	fcall	_CC2500_WriteCommand
  5883  0654  0008               	return
  5884  0655                     __end_of_CC2500_ClearRXFIFO:	
  5885                           
  5886                           	psect	text32
  5887  0577                     __ptext32:	
  5888 ;; *************** function _CC2500_WriteCommand *****************
  5889 ;; Defined at:
  5890 ;;		line 288 in file "../src/CC2500_B1.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;  command         1    wreg     unsigned char 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  command         1    4[COMMON] unsigned char 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;		None               void
  5897 ;; Registers used:
  5898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5904 ;;      Params:         0       0       0       0       0       0       0       0
  5905 ;;      Locals:         1       0       0       0       0       0       0       0
  5906 ;;      Temps:          1       0       0       0       0       0       0       0
  5907 ;;      Totals:         2       0       0       0       0       0       0       0
  5908 ;;Total ram usage:        2 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    3
  5911 ;; This function calls:
  5912 ;;		_CC2500_WriteByte
  5913 ;;		_Timeout_Counter
  5914 ;;		_set_TimeoutCleared
  5915 ;; This function is called by:
  5916 ;;		_CC2500_TxData
  5917 ;;		_CC2500_ClearTXFIFO
  5918 ;;		_CC2500_ClearRXFIFO
  5919 ;;		_CC2500_FrequencyCabr
  5920 ;;		_CC2500_SIDLEMode
  5921 ;;		_setRF_Main
  5922 ;;		_RF_RxDisable
  5923 ;; This function uses a non-reentrant model
  5924 ;;
  5925                           
  5926                           
  5927                           ;psect for function _CC2500_WriteCommand
  5928  0577                     _CC2500_WriteCommand:	
  5929                           
  5930                           ;incstack = 0
  5931                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5932                           ;CC2500_WriteCommand@command stored from wreg
  5933  0577  00F4               	movwf	CC2500_WriteCommand@command
  5934                           
  5935                           ;CC2500_B1.c: 289: RC0 = 0;
  5936  0578  0020               	movlb	0	; select bank0
  5937  0579  100E               	bcf	14,0	;volatile
  5938                           
  5939                           ;CC2500_B1.c: 290: SPI0Buffer = command;
  5940  057A  0874               	movf	CC2500_WriteCommand@command,w
  5941  057B  00F3               	movwf	??_CC2500_WriteCommand
  5942  057C  0873               	movf	??_CC2500_WriteCommand,w
  5943  057D  00FC               	movwf	_SPI0Buffer
  5944                           
  5945                           ;CC2500_B1.c: 292: while (RC5 == 1 && myMain.Timeout == 0) {
  5946  057E  2D82               	goto	l3048
  5947  057F                     l3046:	
  5948                           
  5949                           ;CC2500_B1.c: 293: Timeout_Counter();
  5950  057F  3185  25BB  3185   	fcall	_Timeout_Counter
  5951  0582                     l3048:	
  5952  0582  0020               	movlb	0	; select bank0
  5953  0583  1E8E               	btfss	14,5	;volatile
  5954  0584  2D87               	goto	l3052
  5955  0585  1D4A               	btfss	_myMain+12,2
  5956  0586  2D7F               	goto	l3046
  5957  0587                     l3052:	
  5958                           
  5959                           ;CC2500_B1.c: 294: };
  5960                           ;CC2500_B1.c: 295: set_TimeoutCleared();
  5961  0587  3186  2640  3185   	fcall	_set_TimeoutCleared
  5962                           
  5963                           ;CC2500_B1.c: 297: CC2500_WriteByte();
  5964  058A  3185  25D0         	fcall	_CC2500_WriteByte
  5965                           
  5966                           ;CC2500_B1.c: 298: RC0 = 1;
  5967  058C  0020               	movlb	0	; select bank0
  5968  058D  140E               	bsf	14,0	;volatile
  5969  058E  0008               	return
  5970  058F                     __end_of_CC2500_WriteCommand:	
  5971                           
  5972                           	psect	text33
  5973  0640                     __ptext33:	
  5974 ;; *************** function _set_TimeoutCleared *****************
  5975 ;; Defined at:
  5976 ;;		line 277 in file "../src/Main_B1.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;		None
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;		None
  5981 ;; Return value:  Size  Location     Type
  5982 ;;		None               void
  5983 ;; Registers used:
  5984 ;;		status,2
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5990 ;;      Params:         0       0       0       0       0       0       0       0
  5991 ;;      Locals:         0       0       0       0       0       0       0       0
  5992 ;;      Temps:          0       0       0       0       0       0       0       0
  5993 ;;      Totals:         0       0       0       0       0       0       0       0
  5994 ;;Total ram usage:        0 bytes
  5995 ;; Hardware stack levels used:    1
  5996 ;; Hardware stack levels required when called:    2
  5997 ;; This function calls:
  5998 ;;		Nothing
  5999 ;; This function is called by:
  6000 ;;		_CC2500_TxData
  6001 ;;		_CC2500_RxData
  6002 ;;		_CC2500_PowerRST
  6003 ;;		_CC2500_WriteREG
  6004 ;;		_CC2500_WriteCommand
  6005 ;;		_CC2500_ReadStatus
  6006 ;;		_CC2500_ReadREG
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           
  6011                           ;psect for function _set_TimeoutCleared
  6012  0640                     _set_TimeoutCleared:	
  6013                           
  6014                           ;Main_B1.c: 278: myMain.Timeout = 0;
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in _set_TimeoutCleared: [status,2]
  6018  0640  0020               	movlb	0	; select bank0
  6019  0641  114A               	bcf	_myMain+12,2
  6020                           
  6021                           ;Main_B1.c: 279: myMain.Timeout_Counter = 0;
  6022  0642  01CB               	clrf	_myMain+13
  6023  0643  01CC               	clrf	_myMain+14
  6024  0644  0008               	return
  6025  0645                     __end_of_set_TimeoutCleared:	
  6026                           
  6027                           	psect	text34
  6028  05BB                     __ptext34:	
  6029 ;; *************** function _Timeout_Counter *****************
  6030 ;; Defined at:
  6031 ;;		line 268 in file "../src/Main_B1.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;		None
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;		None
  6036 ;; Return value:  Size  Location     Type
  6037 ;;		None               void
  6038 ;; Registers used:
  6039 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6045 ;;      Params:         0       0       0       0       0       0       0       0
  6046 ;;      Locals:         0       0       0       0       0       0       0       0
  6047 ;;      Temps:          0       0       0       0       0       0       0       0
  6048 ;;      Totals:         0       0       0       0       0       0       0       0
  6049 ;;Total ram usage:        0 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:    2
  6052 ;; This function calls:
  6053 ;;		Nothing
  6054 ;; This function is called by:
  6055 ;;		_CC2500_TxData
  6056 ;;		_CC2500_RxData
  6057 ;;		_CC2500_PowerRST
  6058 ;;		_CC2500_WriteREG
  6059 ;;		_CC2500_WriteCommand
  6060 ;;		_CC2500_ReadStatus
  6061 ;;		_CC2500_ReadREG
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           
  6066                           ;psect for function _Timeout_Counter
  6067  05BB                     _Timeout_Counter:	
  6068                           
  6069                           ;Main_B1.c: 269: myMain.Timeout_Counter++;
  6070                           
  6071                           ;incstack = 0
  6072                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6073  05BB  3001               	movlw	1
  6074  05BC  0020               	movlb	0	; select bank0
  6075  05BD  07CB               	addwf	_myMain+13,f
  6076  05BE  3000               	movlw	0
  6077  05BF  3DCC               	addwfc	_myMain+14,f
  6078                           
  6079                           ;Main_B1.c: 270: if (myMain.Timeout_Counter == 10000) {
  6080  05C0  300D               	movlw	13
  6081  05C1  3E3E               	addlw	_myMain& (0+255)
  6082  05C2  0086               	movwf	6
  6083  05C3  0187               	clrf	7
  6084  05C4  3F40               	moviw [0]fsr1
  6085  05C5  3A10               	xorlw	16
  6086  05C6  1D03               	skipz
  6087  05C7  2DCA               	goto	u1985
  6088  05C8  3F41               	moviw [1]fsr1
  6089  05C9  3A27               	xorlw	39
  6090  05CA                     u1985:	
  6091  05CA  1D03               	skipz
  6092  05CB  0008               	return
  6093                           
  6094                           ;Main_B1.c: 271: myMain.Timeout_Counter = 0;
  6095  05CC  01CB               	clrf	_myMain+13
  6096  05CD  01CC               	clrf	_myMain+14
  6097                           
  6098                           ;Main_B1.c: 272: myMain.Timeout = 1;
  6099  05CE  154A               	bsf	_myMain+12,2
  6100  05CF  0008               	return
  6101  05D0                     __end_of_Timeout_Counter:	
  6102                           
  6103                           	psect	text35
  6104  05D0                     __ptext35:	
  6105 ;; *************** function _CC2500_WriteByte *****************
  6106 ;; Defined at:
  6107 ;;		line 222 in file "../src/CC2500_B1.c"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;		None
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;  loop_a          1    2[COMMON] unsigned char 
  6112 ;; Return value:  Size  Location     Type
  6113 ;;		None               void
  6114 ;; Registers used:
  6115 ;;		wreg, status,2, status,0
  6116 ;; Tracked objects:
  6117 ;;		On entry : 0/0
  6118 ;;		On exit  : 0/0
  6119 ;;		Unchanged: 0/0
  6120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6121 ;;      Params:         0       0       0       0       0       0       0       0
  6122 ;;      Locals:         1       0       0       0       0       0       0       0
  6123 ;;      Temps:          1       0       0       0       0       0       0       0
  6124 ;;      Totals:         2       0       0       0       0       0       0       0
  6125 ;;Total ram usage:        2 bytes
  6126 ;; Hardware stack levels used:    1
  6127 ;; Hardware stack levels required when called:    2
  6128 ;; This function calls:
  6129 ;;		Nothing
  6130 ;; This function is called by:
  6131 ;;		_CC2500_TxData
  6132 ;;		_CC2500_RxData
  6133 ;;		_CC2500_PowerRST
  6134 ;;		_CC2500_WriteREG
  6135 ;;		_CC2500_WriteCommand
  6136 ;;		_CC2500_ReadStatus
  6137 ;;		_CC2500_ReadREG
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           
  6142                           ;psect for function _CC2500_WriteByte
  6143  05D0                     _CC2500_WriteByte:	
  6144                           
  6145                           ;CC2500_B1.c: 223: unsigned char loop_a;
  6146                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
  6147                           
  6148                           ;incstack = 0
  6149                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  6150  05D0  01F2               	clrf	CC2500_WriteByte@loop_a
  6151  05D1                     L4:	
  6152  05D1  3008               	movlw	8
  6153  05D2  0272               	subwf	CC2500_WriteByte@loop_a,w
  6154  05D3  1803               	btfsc	3,0
  6155  05D4  0008               	return
  6156                           
  6157                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
  6158  05D5  1FFC               	btfss	_SPI0Buffer,7
  6159  05D6  2DDA               	goto	l205
  6160                           
  6161                           ;CC2500_B1.c: 226: RC4 = 1;
  6162  05D7  0020               	movlb	0	; select bank0
  6163  05D8  160E               	bsf	14,4	;volatile
  6164  05D9  2DDC               	goto	l206
  6165  05DA                     l205:	
  6166                           
  6167                           ;CC2500_B1.c: 227: else
  6168                           ;CC2500_B1.c: 228: RC4 = 0;
  6169  05DA  0020               	movlb	0	; select bank0
  6170  05DB  120E               	bcf	14,4	;volatile
  6171  05DC                     l206:	
  6172                           
  6173                           ;CC2500_B1.c: 229: RC3 = 1;
  6174  05DC  158E               	bsf	14,3	;volatile
  6175                           
  6176                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
  6177  05DD  1003               	clrc
  6178  05DE  0DFC               	rlf	_SPI0Buffer,f
  6179                           
  6180                           ;CC2500_B1.c: 231: RC3 = 0;
  6181  05DF  118E               	bcf	14,3	;volatile
  6182  05E0  3001               	movlw	1
  6183  05E1  00F1               	movwf	??_CC2500_WriteByte
  6184  05E2  0871               	movf	??_CC2500_WriteByte,w
  6185  05E3  07F2               	addwf	CC2500_WriteByte@loop_a,f
  6186  05E4  2DD1               	goto	L4
  6187  05E5                     __end_of_CC2500_WriteByte:	
  6188                           
  6189                           	psect	intentry
  6190  0004                     __pintentry:	
  6191 ;; *************** function _ISR *****************
  6192 ;; Defined at:
  6193 ;;		line 107 in file "../src/MCU_B1.c"
  6194 ;; Parameters:    Size  Location     Type
  6195 ;;		None
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;		None
  6198 ;; Return value:  Size  Location     Type
  6199 ;;		None               void
  6200 ;; Registers used:
  6201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6207 ;;      Params:         0       0       0       0       0       0       0       0
  6208 ;;      Locals:         0       0       0       0       0       0       0       0
  6209 ;;      Temps:          1       0       0       0       0       0       0       0
  6210 ;;      Totals:         1       0       0       0       0       0       0       0
  6211 ;;Total ram usage:        1 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    1
  6214 ;; This function calls:
  6215 ;;		_TMR1_ISR
  6216 ;; This function is called by:
  6217 ;;		Interrupt level 1
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221  0004                     _ISR:	
  6222                           
  6223                           ;incstack = 0
  6224                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6225  0004  147E               	bsf	126,0	;set compiler interrupt flag
  6226  0005  3180               	pagesel	$
  6227  0006  0020               	movlb	0	; select bank0
  6228  0007  087F               	movf	127,w
  6229  0008  00F0               	movwf	??_ISR
  6230                           
  6231                           ;MCU_B1.c: 109: ;;
  6232                           ;MCU_B1.c: 111: ;;
  6233                           ;MCU_B1.c: 113: TMR1_ISR();
  6234  0009  3185  2520         	fcall	_TMR1_ISR
  6235  000B  0870               	movf	??_ISR,w
  6236  000C  0020               	movlb	0	; select bank0
  6237  000D  00FF               	movwf	127
  6238  000E  107E               	bcf	126,0	;clear compiler interrupt flag
  6239  000F  0009               	retfie
  6240  0010                     __end_of_ISR:	
  6241                           
  6242                           	psect	text37
  6243  0520                     __ptext37:	
  6244 ;; *************** function _TMR1_ISR *****************
  6245 ;; Defined at:
  6246 ;;		line 209 in file "../src/MCU_B1.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;		None
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;		None
  6251 ;; Return value:  Size  Location     Type
  6252 ;;		None               void
  6253 ;; Registers used:
  6254 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6260 ;;      Params:         0       0       0       0       0       0       0       0
  6261 ;;      Locals:         0       0       0       0       0       0       0       0
  6262 ;;      Temps:          0       0       0       0       0       0       0       0
  6263 ;;      Totals:         0       0       0       0       0       0       0       0
  6264 ;;Total ram usage:        0 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; This function calls:
  6267 ;;		Nothing
  6268 ;; This function is called by:
  6269 ;;		_ISR
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           
  6274                           ;psect for function _TMR1_ISR
  6275  0520                     _TMR1_ISR:	
  6276                           
  6277                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  6278                           
  6279                           ;incstack = 0
  6280                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  6281  0520  0021               	movlb	1	; select bank1
  6282  0521  1C11               	btfss	17,0	;volatile
  6283  0522  0008               	return
  6284  0523  0020               	movlb	0	; select bank0
  6285  0524  1C11               	btfss	17,0	;volatile
  6286  0525  0008               	return
  6287                           
  6288                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
  6289  0526  30FA               	movlw	250
  6290  0527  0097               	movwf	23	;volatile
  6291                           
  6292                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
  6293  0528  3038               	movlw	56
  6294  0529  0096               	movwf	22	;volatile
  6295                           
  6296                           ;MCU_B1.c: 214: TMR1IF = 0;
  6297  052A  1011               	bcf	17,0	;volatile
  6298                           
  6299                           ;MCU_B1.c: 234: Timer1.Count++;
  6300  052B  3001               	movlw	1
  6301  052C  07DA               	addwf	_Timer1+1,f
  6302  052D  3000               	movlw	0
  6303  052E  3DDB               	addwfc	_Timer1+2,f
  6304                           
  6305                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
  6306  052F  3001               	movlw	1
  6307  0530  3E59               	addlw	_Timer1& (0+255)
  6308  0531  0086               	movwf	6
  6309  0532  0187               	clrf	7
  6310  0533  3F40               	moviw [0]fsr1
  6311  0534  3A64               	xorlw	100
  6312  0535  1D03               	skipz
  6313  0536  2D39               	goto	u184_25
  6314  0537  3F41               	moviw [1]fsr1
  6315  0538  3A00               	xorlw	0
  6316  0539                     u184_25:	
  6317  0539  1D03               	skipz
  6318  053A  0008               	return
  6319                           
  6320                           ;MCU_B1.c: 236: {
  6321                           ;MCU_B1.c: 237: Timer1.Count = 0;
  6322  053B  01DA               	clrf	_Timer1+1
  6323  053C  01DB               	clrf	_Timer1+2
  6324                           
  6325                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
  6326  053D  1459               	bsf	_Timer1,0
  6327  053E  0008               	return
  6328  053F                     __end_of_TMR1_ISR:	
  6329  007E                     btemp	set	126	;btemp
  6330  007E                     pic14e$flags	set	126
  6331  007E                     wtemp	set	126
  6332  007E                     wtemp0	set	126
  6333  0080                     wtemp1	set	128
  6334  0082                     wtemp2	set	130
  6335  0084                     wtemp3	set	132
  6336  0086                     wtemp4	set	134
  6337  0088                     wtemp5	set	136
  6338  007F                     wtemp6	set	127
  6339  007E                     ttemp	set	126
  6340  007E                     ttemp0	set	126
  6341  0081                     ttemp1	set	129
  6342  0084                     ttemp2	set	132
  6343  0087                     ttemp3	set	135
  6344  007F                     ttemp4	set	127
  6345  007E                     ltemp	set	126
  6346  007E                     ltemp0	set	126
  6347  0082                     ltemp1	set	130
  6348  0086                     ltemp2	set	134
  6349  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         70
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      13
    BANK0            80      7      77
    BANK1            80      0      32
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK1[32]), 


Critical Paths under _main in COMMON

    _my_MainTimer->_setTxData
    _RF_Main->_setRF_Main
    _setRF_Main->_CC2500_RxData
    _setRF_Main->_CC2500_TxData
    _getRxData->_getMain_All_Error_Status
    _getRxData->_setLog_Code
    _setControl_Lights_Table->_setTxData
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    2875
                                              3 BANK0      4     0      4
              _CC2500_PowerOnInitial
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _myMain_Initialization
          _myUARTtoRF_Initialization
                    _myUARTtoRF_Main
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0       0
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myUARTtoRF_Main                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myUARTtoRF_Initialization                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0     816
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0     816
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
           _getMain_All_Error_Status
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0      68
                                              2 COMMON     2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0       0
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getMain_All_Error_Status                             2     2      0      34
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              5 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              5 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              3 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2059
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     416
                                              7 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              6 COMMON     4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              6 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              3 COMMON     3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     447
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              3 COMMON     2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  1     1      0       0
                                              0 COMMON     1     1      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _Mcu_Initialization
     _Fosc_Set
     _IO_Set
     _TMR1_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getMain_All_Error_Status
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setTxData
         _setLog_Code
   _myMain_Initialization
   _myUARTtoRF_Initialization
   _myUARTtoRF_Main
   _my_MainTimer
     _setTxData

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      7A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      7      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      20       8       40.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      7A      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Nov 26 17:15:01 2014

           __end_of_CC2500_WriteREG 0520                                 l130 0361  
                               l205 05DA                                 l206 05DC  
                               l155 02F0                                 l156 0329  
                               l249 0480                                 l590 03B9  
                               l575 04D0                                 l907 027F  
                               l860 0042                                 l917 02C9  
                               l870 00AC                                 l856 00F0  
                               l937 0412                                 l865 0075  
                               l866 006E                                 l858 0038  
                               _GIE 005F                                 _CRC 005E  
                               _RA0 0060                                 _RA1 0061  
                               _RA2 0062                                 _RC0 0070  
                               _RC1 0071                                 _RC3 0073  
                               _RC4 0074                                 _RC5 0075  
                               _RF1 004D                                 _ISR 0004  
          __end_of_CC2500_WriteByte 05E5                                 wreg 0009  
                              ?_ISR 0070                                l3100 03F7  
                              l3112 033D                                l3130 0367  
                              l3106 0335                                l3052 0587  
                              l3212 0509                                l3140 0376  
                              l3132 036A                                l3108 0338  
                              l3046 057F                                l3214 050C  
                              l3302 044E                                l3062 04EA  
                              l3206 032A                                l3126 034C  
                              l3048 0582                                l2520 049C  
                              l3064 04ED                                l3160 02D2  
                              l3144 037B                                l3136 036F  
                              l3240 0281                                l3218 0511  
                              l3138 0373                                l3068 04F2  
                              l3164 02D7                                l3092 03D0  
                              l3252 0298                                l2518 0491  
                              l3158 02CF                                l3166 02DA  
                              l3094 03E5                                l3262 02B5  
                              l3406 0093                                l3192 02FE  
                              l3176 02ED                                l3408 0095  
                              l3424 00BD                                l3194 0313  
                              l3178 02E8                                l3292 043F  
                              l3268 02BF                                l3436 00DE  
                              l3372 0059                                l3286 0437  
                              l3296 0446                                l3288 043A  
                              l3384 0066                                l3298 0449  
                              l3466 03A3                                l3476 03BA  
                              l2994 059C                                l2996 05A0  
             _myMain_Initialization 05F8                                u1305 0486  
                              _LATA 010C                                _LATB 010D  
                              _LATC 010E                                u2725 00CE  
                              u2815 03C8                                u2585 0053  
                              _PEIE 005E                                u1985 05CA  
                              u2785 039C                                u2795 03B1  
                              _RSSI 005F                                _main 04C1  
                   __end_of_RF_Main 0658                                fsr0h 0005  
                              fsr1h 0007                                fsr0l 0004  
                              indf0 0000                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
        ?_myUARTtoRF_Initialization 0070                                ltemp 007E  
     __size_of_setRF_Initialization 000A                                start 0010  
                              ttemp 007E                                wtemp 007E  
                             ??_ISR 0070                   ??_myUARTtoRF_Main 0071  
                             ?_main 0068                       __CFG_WDTE$OFF 0000  
                             _T1CON 0018       __size_of_CC2500_FrequencyCabr 000B  
                             _TMR1H 0017                               _TMR1L 0016  
                             _PORTA 000C                               _PORTB 000D  
                             _PORTC 000E                               _TRISA 008C  
                             _TRISB 008D                               _TRISC 008E  
           __end_of_Timeout_Counter 05D0                       __CFG_WRT$BOOT 0000  
                  __end_of_TMR1_ISR 053F        __size_of_CC2500_WriteCommand 0018  
                  __end_of_TMR1_Set 0611         __size_of_CC2500_ClearRXFIFO 0004  
       __size_of_CC2500_ClearTXFIFO 0004                 CC2500_RxData@loop_f 0076  
                    __pbitbssCOMMON 03D0                      __CFG_BOREN$OFF 0000  
                  ?_CC2500_ReadByte 0070                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   ?_CC2500_SIDLEMode 0070  
        __size_of_RF_Initialization 0003                  ??_CC2500_SIDLEMode 0075  
                   __initialization 0012                    ?_CC2500_PowerRST 0070  
                      __end_of_main 04E1                    __end_of_Fosc_Set 0649  
                  ?_CC2500_WriteREG 0073                              ??_main 007A  
                      ?_setLog_Code 0070             _setControl_Lights_Table 03CF  
                        _Receive_OK 03D0              ?_myMain_Initialization 0070  
                         ??_RF_Main 0078                              _ANSELA 018C  
                            _ANSELB 018D                              _ANSELC 018E  
          _getMain_All_Error_Status 0658                              u184_25 0539  
                            _OSCCON 0099                              _TMR1IE 0488  
                            _TMR1IF 0088                              _IO_Set 05E5  
                DelayTime_1us@count 0071      __size_of_CC2500_PowerOnInitial 0015  
     __end_of_CC2500_PowerOnInitial 05BB          __end_of_Mcu_Initialization 062F  
                            _Timer1 0059                              _r_data 0063  
                            _s_data 0064                              _myMain 003E  
                  ?_Timeout_Counter 0070         __size_of_CC2500_InitPATable 001D  
               CC2500_TxData@loop_e 0076    __end_of_CC2500_registers_address 022F  
           __end_of__initialization 0027                       ?_my_MainTimer 0070  
                    __pcstackCOMMON 0070                        __pidataBANK1 04A1  
                         ?_TMR1_ISR 0070                           ?_TMR1_Set 0070  
         ??_setControl_Lights_Table 0072          __end_of_set_TimeoutCleared 0645  
                __size_of_getRxData 0065                   ?_CC2500_WriteByte 0070  
                ??_CC2500_WriteByte 0071                          __pbssBANK0 0020  
                         ?_Fosc_Set 0070                             ?_IO_Set 0070  
                    ??_my_MainTimer 0072                     __CFG_VCAPEN$OFF 0000  
                   _myUARTtoRF_Main 065E                          __pnvCOMMON 007B  
                    DelayTime_1us@i 0073                      DelayTime_1us@j 0075  
       ??_myUARTtoRF_Initialization 0071                          __pmaintext 04C1  
               _CC2500_WriteCommand 0577                          ??_TMR1_ISR 0070  
                        ??_TMR1_Set 0071                          __pintentry 0004  
                __size_of_setTxData 006F              __size_of_DelayTime_1us 0025  
      __end_of_setRF_Initialization 0626                __size_of_setLog_Code 001B  
              ?_CC2500_WriteCommand 0070              __size_of_CC2500_RxData 0063  
            __size_of_CC2500_TxData 005D                             _RF_Data 0020  
                           _RF_Main 0655     __end_of_setControl_Lights_Table 0413  
                   setRF_Main@error 0067                          ??_Fosc_Set 0071  
      __end_of_CC2500_FrequencyCabr 061C                     __size_of_IO_Set 0013  
                 __end_of_getRxData 02CB            _CC2500_registers_address 0200  
                           __ptext1 038B                             __ptext2 065E  
                           __ptext3 063B                             __ptext4 05F8  
                           __ptext5 0655                             __ptext6 002B  
                           __ptext7 0266                             __ptext8 055C  
                           __ptext9 03CF           __size_of_CC2500_SIDLEMode 0004  
         _myUARTtoRF_Initialization 063B                        __size_of_ISR 000C  
        ??_getMain_All_Error_Status 0071                          _setRF_Main 002B  
           ??_myMain_Initialization 0071               ??_CC2500_WriteCommand 0073  
        __end_of_CC2500_ClearRXFIFO 0655          __end_of_CC2500_ClearTXFIFO 0651  
                           _product 007B             __end_of_myUARTtoRF_Main 065F  
                           clrloop0 0630                end_of_initialization 0027  
                 _CC2500_InitSetREG 0454                       _DelayTime_1us 047C  
                 __end_of_setTxData 0163                             init_ram 0635  
                ?_CC2500_InitSetREG 0070                             initloop 0636  
             CC2500_ReadByte@loop_b 0072                   _CC2500_ReadStatus 04E1  
                ?_CC2500_ReadStatus 0070            __size_of_CC2500_ReadByte 0017  
                     _CC2500_RxData 02CB                       _CC2500_TxData 032E  
               ??_CC2500_InitSetREG 0076                        __pstringtext 0200  
               ??_CC2500_ReadStatus 0073             CC2500_InitSetREG@loop_c 0079  
                _Mcu_Initialization 0626            __size_of_CC2500_PowerRST 0041  
              __end_of_my_MainTimer 03CF                    __CFG_FOSC$INTOSC 0000  
          __size_of_CC2500_WriteREG 001F           __end_of_CC2500_InitSetREG 047C  
               ?_Mcu_Initialization 0070                      ?_DelayTime_1us 0071  
         __end_of_CC2500_ReadStatus 0501     getMain_All_Error_Status@command 0070  
                    __end_of_IO_Set 05F8                _setRF_Initialization 061C  
                    ?_CC2500_RxData 0070                      ?_CC2500_TxData 0070  
             _CC2500_PowerOnInitial 05A6                ??_Mcu_Initialization 0071  
                 __size_of_TMR1_ISR 001F                   __size_of_TMR1_Set 000C  
              _CC2500_FrequencyCabr 0611                         ?_setRF_Main 0070  
               start_initialization 0012                         __end_of_ISR 0010  
        __end_of_CC2500_InitPATable 055C                    ?_myUARTtoRF_Main 0070  
                _set_TimeoutCleared 0640                            ??_IO_Set 0071  
          __size_of_Timeout_Counter 0015               ?_setRF_Initialization 0070  
                 __size_of_Fosc_Set 0004           __size_of_CC2500_WriteByte 0015  
               ?_set_TimeoutCleared 0070                           _Rx_Length 0060  
                         _Tx_Length 006C                         __pdataBANK1 00A0  
                 ??_CC2500_ReadByte 0071    __end_of_getMain_All_Error_Status 065B  
                  _CC2500_SIDLEMode 0649               ?_CC2500_FrequencyCabr 0070  
                       __pbssCOMMON 007C                           ___latbits 0002  
                     __pcstackBANK0 0065                ??_set_TimeoutCleared 0071  
                   ??_DelayTime_1us 0073          __size_of_CC2500_InitSetREG 0028  
                 ??_CC2500_PowerRST 0077                            ?_RF_Main 0070  
__size_of_myUARTtoRF_Initialization 0005          __size_of_CC2500_ReadStatus 0020  
                 ??_CC2500_WriteREG 0074               CC2500_WriteREG@w_addr 0075  
                   ??_CC2500_RxData 0075                     ??_CC2500_TxData 0075  
                         __pnvBANK0 006C                      getRxData@error 0073  
            ?_CC2500_PowerOnInitial 0070                 __size_of_setRF_Main 00C9  
          ?_setControl_Lights_Table 0070                           _getRxData 0266  
             __size_of_my_MainTimer 0044                       ??_setLog_Code 0071  
      CC2500_ReadStatus@status_addr 0074              CC2500_WriteByte@loop_a 0072  
                         _r_address 0062      __size_of_myMain_Initialization 000D  
      __end_of_CC2500_patable_vaule 0266       __end_of_myMain_Initialization 0605  
            ??_setRF_Initialization 0071   __end_of_myUARTtoRF_Initialization 0640  
                 _CC2500_rfSettings 022F                           clear_ram0 062F  
          CC2500_InitPATable@loop_d 0078                        _my_MainTimer 038B  
                         _setTxData 00F4                  _CC2500_ClearRXFIFO 0651  
                _CC2500_ClearTXFIFO 064D                   ??_Timeout_Counter 0071  
                        ?_getRxData 0070                            _TMR1_ISR 0520  
            CC2500_InitSetREG@temp1 0077              CC2500_InitSetREG@temp2 0078  
                          _TMR1_Set 0605                 ?_CC2500_ClearRXFIFO 0070  
               ?_CC2500_ClearTXFIFO 0070                            _RF_Count 005C  
       __end_of_CC2500_WriteCommand 058F              ??_CC2500_FrequencyCabr 0077  
                  setRF_Main@loop_f 0065      getMain_All_Error_Status@status 0071  
               __end_of_setLog_Code 0577                ??_CC2500_ClearRXFIFO 0075  
              ??_CC2500_ClearTXFIFO 0075           __end_of_CC2500_rfSettings 025E  
                  __size_of_RF_Main 0003                            _Fosc_Set 0645  
 __size_of_getMain_All_Error_Status 0003           ?_getMain_All_Error_Status 0070  
                        ?_setTxData 0070                    _CC2500_WriteByte 05D0  
                          _SwDetect 0061                        ??_setRF_Main 0077  
              CC2500_WriteREG@value 0073                            __ptext10 00F4  
                          __ptext11 0658                            __ptext20 05E5  
                          __ptext12 032E                            __ptext21 0645  
                          __ptext13 02CB                            __ptext30 064D  
                          __ptext22 05A6                            __ptext14 04E1  
                          __ptext31 0651                            __ptext23 0649  
                          __ptext15 058F                            __ptext32 0577  
                          __ptext24 0413                            __ptext16 065B  
                          __ptext33 0640                            __ptext25 0454  
                          __ptext17 061C                            __ptext34 05BB  
                          __ptext26 053F                            __ptext18 0626  
                          __ptext35 05D0                            __ptext27 0501  
                          __ptext19 0605                            __ptext28 0611  
                          __ptext37 0520                            __ptext29 047C  
                          __product 00A0                       __size_of_main 0020  
          __end_of_CC2500_SIDLEMode 064D          CC2500_WriteCommand@command 0074  
              setRF_Main@Receive_OK 0066                     _CC2500_ReadByte 058F  
                _CC2500_InitPATable 053F                  __end_of_setRF_Main 00F4  
       __size_of_Mcu_Initialization 0009                _CC2500_patable_vaule 025E  
                       ??_getRxData 0072                            main@argc 0068  
                          main@argv 006A                 ?_CC2500_InitPATable 0070  
                   _CC2500_PowerRST 0413                         _setLog_Code 055C  
                   _CC2500_WriteREG 0501                       _Transceive_OK 03D1  
                       pic14e$flags 007E                            intlevel1 0000  
              ??_CC2500_InitPATable 0076             ??_CC2500_PowerOnInitial 007A  
                       ??_setTxData 0071            __size_of_myUARTtoRF_Main 0001  
            CC2500_InitPATable@temp 0077                   _RF_Initialization 065B  
                ?_RF_Initialization 0070                          _SPI0Buffer 007C  
               ??_RF_Initialization 0072    __size_of_setControl_Lights_Table 0044  
       __size_of_set_TimeoutCleared 0005               __end_of_DelayTime_1us 04A1  
           __end_of_CC2500_ReadByte 05A6                     _Timeout_Counter 05BB  
         __end_of_RF_Initialization 065E               __end_of_CC2500_RxData 032E  
             __end_of_CC2500_TxData 038B             __end_of_CC2500_PowerRST 0454  
