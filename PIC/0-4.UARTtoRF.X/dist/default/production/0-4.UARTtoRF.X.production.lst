

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Mar 23 16:40:57 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1516
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,delta=2
    69                           	psect	text53,local,class=CODE,merge=1,delta=2
    70                           	psect	text54,local,class=CODE,merge=1,delta=2
    71                           	psect	text55,local,class=CODE,merge=1,delta=2
    72                           	psect	text56,local,class=CODE,merge=1,delta=2
    73                           	psect	text57,local,class=CODE,merge=1,delta=2
    74                           	psect	text58,local,class=CODE,merge=1,delta=2
    75                           	psect	text59,local,class=CODE,merge=1,delta=2
    76                           	psect	text60,local,class=CODE,merge=1,delta=2
    77                           	psect	intentry,global,class=CODE,delta=2
    78                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    79                           	dabs	1,0x7E,2
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  0090                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  0116                     	;# 
   127  0117                     	;# 
   128  011D                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  018E                     	;# 
   132  0191                     	;# 
   133  0191                     	;# 
   134  0192                     	;# 
   135  0193                     	;# 
   136  0193                     	;# 
   137  0194                     	;# 
   138  0195                     	;# 
   139  0196                     	;# 
   140  0197                     	;# 
   141  0199                     	;# 
   142  019A                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019C                     	;# 
   148  019C                     	;# 
   149  019D                     	;# 
   150  019E                     	;# 
   151  019F                     	;# 
   152  020D                     	;# 
   153  0210                     	;# 
   154  0211                     	;# 
   155  0211                     	;# 
   156  0212                     	;# 
   157  0212                     	;# 
   158  0213                     	;# 
   159  0213                     	;# 
   160  0214                     	;# 
   161  0214                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0216                     	;# 
   166  0216                     	;# 
   167  0217                     	;# 
   168  0217                     	;# 
   169  0291                     	;# 
   170  0291                     	;# 
   171  0292                     	;# 
   172  0293                     	;# 
   173  0298                     	;# 
   174  0298                     	;# 
   175  0299                     	;# 
   176  029A                     	;# 
   177  0394                     	;# 
   178  0395                     	;# 
   179  0396                     	;# 
   180  0FE4                     	;# 
   181  0FE5                     	;# 
   182  0FE6                     	;# 
   183  0FE7                     	;# 
   184  0FE8                     	;# 
   185  0FE9                     	;# 
   186  0FEA                     	;# 
   187  0FEB                     	;# 
   188  0FED                     	;# 
   189  0FEE                     	;# 
   190  0FEF                     	;# 
   191  0000                     	;# 
   192  0001                     	;# 
   193  0002                     	;# 
   194  0003                     	;# 
   195  0004                     	;# 
   196  0005                     	;# 
   197  0006                     	;# 
   198  0007                     	;# 
   199  0008                     	;# 
   200  0009                     	;# 
   201  000A                     	;# 
   202  000B                     	;# 
   203  000C                     	;# 
   204  000D                     	;# 
   205  000E                     	;# 
   206  0010                     	;# 
   207  0011                     	;# 
   208  0012                     	;# 
   209  0015                     	;# 
   210  0016                     	;# 
   211  0016                     	;# 
   212  0017                     	;# 
   213  0018                     	;# 
   214  0019                     	;# 
   215  001A                     	;# 
   216  001B                     	;# 
   217  001C                     	;# 
   218  008C                     	;# 
   219  008D                     	;# 
   220  008E                     	;# 
   221  0090                     	;# 
   222  0091                     	;# 
   223  0092                     	;# 
   224  0095                     	;# 
   225  0096                     	;# 
   226  0097                     	;# 
   227  0099                     	;# 
   228  009A                     	;# 
   229  009B                     	;# 
   230  009B                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  010C                     	;# 
   235  010D                     	;# 
   236  010E                     	;# 
   237  0116                     	;# 
   238  0117                     	;# 
   239  011D                     	;# 
   240  018C                     	;# 
   241  018D                     	;# 
   242  018E                     	;# 
   243  0191                     	;# 
   244  0191                     	;# 
   245  0192                     	;# 
   246  0193                     	;# 
   247  0193                     	;# 
   248  0194                     	;# 
   249  0195                     	;# 
   250  0196                     	;# 
   251  0197                     	;# 
   252  0199                     	;# 
   253  019A                     	;# 
   254  019B                     	;# 
   255  019B                     	;# 
   256  019B                     	;# 
   257  019B                     	;# 
   258  019C                     	;# 
   259  019C                     	;# 
   260  019D                     	;# 
   261  019E                     	;# 
   262  019F                     	;# 
   263  020D                     	;# 
   264  0210                     	;# 
   265  0211                     	;# 
   266  0211                     	;# 
   267  0212                     	;# 
   268  0212                     	;# 
   269  0213                     	;# 
   270  0213                     	;# 
   271  0214                     	;# 
   272  0214                     	;# 
   273  0215                     	;# 
   274  0215                     	;# 
   275  0215                     	;# 
   276  0216                     	;# 
   277  0216                     	;# 
   278  0217                     	;# 
   279  0217                     	;# 
   280  0291                     	;# 
   281  0291                     	;# 
   282  0292                     	;# 
   283  0293                     	;# 
   284  0298                     	;# 
   285  0298                     	;# 
   286  0299                     	;# 
   287  029A                     	;# 
   288  0394                     	;# 
   289  0395                     	;# 
   290  0396                     	;# 
   291  0FE4                     	;# 
   292  0FE5                     	;# 
   293  0FE6                     	;# 
   294  0FE7                     	;# 
   295  0FE8                     	;# 
   296  0FE9                     	;# 
   297  0FEA                     	;# 
   298  0FEB                     	;# 
   299  0FED                     	;# 
   300  0FEE                     	;# 
   301  0FEF                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0008                     	;# 
   311  0009                     	;# 
   312  000A                     	;# 
   313  000B                     	;# 
   314  000C                     	;# 
   315  000D                     	;# 
   316  000E                     	;# 
   317  0010                     	;# 
   318  0011                     	;# 
   319  0012                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0016                     	;# 
   323  0017                     	;# 
   324  0018                     	;# 
   325  0019                     	;# 
   326  001A                     	;# 
   327  001B                     	;# 
   328  001C                     	;# 
   329  008C                     	;# 
   330  008D                     	;# 
   331  008E                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0095                     	;# 
   336  0096                     	;# 
   337  0097                     	;# 
   338  0099                     	;# 
   339  009A                     	;# 
   340  009B                     	;# 
   341  009B                     	;# 
   342  009C                     	;# 
   343  009D                     	;# 
   344  009E                     	;# 
   345  010C                     	;# 
   346  010D                     	;# 
   347  010E                     	;# 
   348  0116                     	;# 
   349  0117                     	;# 
   350  011D                     	;# 
   351  018C                     	;# 
   352  018D                     	;# 
   353  018E                     	;# 
   354  0191                     	;# 
   355  0191                     	;# 
   356  0192                     	;# 
   357  0193                     	;# 
   358  0193                     	;# 
   359  0194                     	;# 
   360  0195                     	;# 
   361  0196                     	;# 
   362  0197                     	;# 
   363  0199                     	;# 
   364  019A                     	;# 
   365  019B                     	;# 
   366  019B                     	;# 
   367  019B                     	;# 
   368  019B                     	;# 
   369  019C                     	;# 
   370  019C                     	;# 
   371  019D                     	;# 
   372  019E                     	;# 
   373  019F                     	;# 
   374  020D                     	;# 
   375  0210                     	;# 
   376  0211                     	;# 
   377  0211                     	;# 
   378  0212                     	;# 
   379  0212                     	;# 
   380  0213                     	;# 
   381  0213                     	;# 
   382  0214                     	;# 
   383  0214                     	;# 
   384  0215                     	;# 
   385  0215                     	;# 
   386  0215                     	;# 
   387  0216                     	;# 
   388  0216                     	;# 
   389  0217                     	;# 
   390  0217                     	;# 
   391  0291                     	;# 
   392  0291                     	;# 
   393  0292                     	;# 
   394  0293                     	;# 
   395  0298                     	;# 
   396  0298                     	;# 
   397  0299                     	;# 
   398  029A                     	;# 
   399  0394                     	;# 
   400  0395                     	;# 
   401  0396                     	;# 
   402  0FE4                     	;# 
   403  0FE5                     	;# 
   404  0FE6                     	;# 
   405  0FE7                     	;# 
   406  0FE8                     	;# 
   407  0FE9                     	;# 
   408  0FEA                     	;# 
   409  0FEB                     	;# 
   410  0FED                     	;# 
   411  0FEE                     	;# 
   412  0FEF                     	;# 
   413  0000                     	;# 
   414  0001                     	;# 
   415  0002                     	;# 
   416  0003                     	;# 
   417  0004                     	;# 
   418  0005                     	;# 
   419  0006                     	;# 
   420  0007                     	;# 
   421  0008                     	;# 
   422  0009                     	;# 
   423  000A                     	;# 
   424  000B                     	;# 
   425  000C                     	;# 
   426  000D                     	;# 
   427  000E                     	;# 
   428  0010                     	;# 
   429  0011                     	;# 
   430  0012                     	;# 
   431  0015                     	;# 
   432  0016                     	;# 
   433  0016                     	;# 
   434  0017                     	;# 
   435  0018                     	;# 
   436  0019                     	;# 
   437  001A                     	;# 
   438  001B                     	;# 
   439  001C                     	;# 
   440  008C                     	;# 
   441  008D                     	;# 
   442  008E                     	;# 
   443  0090                     	;# 
   444  0091                     	;# 
   445  0092                     	;# 
   446  0095                     	;# 
   447  0096                     	;# 
   448  0097                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  010C                     	;# 
   457  010D                     	;# 
   458  010E                     	;# 
   459  0116                     	;# 
   460  0117                     	;# 
   461  011D                     	;# 
   462  018C                     	;# 
   463  018D                     	;# 
   464  018E                     	;# 
   465  0191                     	;# 
   466  0191                     	;# 
   467  0192                     	;# 
   468  0193                     	;# 
   469  0193                     	;# 
   470  0194                     	;# 
   471  0195                     	;# 
   472  0196                     	;# 
   473  0197                     	;# 
   474  0199                     	;# 
   475  019A                     	;# 
   476  019B                     	;# 
   477  019B                     	;# 
   478  019B                     	;# 
   479  019B                     	;# 
   480  019C                     	;# 
   481  019C                     	;# 
   482  019D                     	;# 
   483  019E                     	;# 
   484  019F                     	;# 
   485  020D                     	;# 
   486  0210                     	;# 
   487  0211                     	;# 
   488  0211                     	;# 
   489  0212                     	;# 
   490  0212                     	;# 
   491  0213                     	;# 
   492  0213                     	;# 
   493  0214                     	;# 
   494  0214                     	;# 
   495  0215                     	;# 
   496  0215                     	;# 
   497  0215                     	;# 
   498  0216                     	;# 
   499  0216                     	;# 
   500  0217                     	;# 
   501  0217                     	;# 
   502  0291                     	;# 
   503  0291                     	;# 
   504  0292                     	;# 
   505  0293                     	;# 
   506  0298                     	;# 
   507  0298                     	;# 
   508  0299                     	;# 
   509  029A                     	;# 
   510  0394                     	;# 
   511  0395                     	;# 
   512  0396                     	;# 
   513  0FE4                     	;# 
   514  0FE5                     	;# 
   515  0FE6                     	;# 
   516  0FE7                     	;# 
   517  0FE8                     	;# 
   518  0FE9                     	;# 
   519  0FEA                     	;# 
   520  0FEB                     	;# 
   521  0FED                     	;# 
   522  0FEE                     	;# 
   523  0FEF                     	;# 
   524  0000                     	;# 
   525  0001                     	;# 
   526  0002                     	;# 
   527  0003                     	;# 
   528  0004                     	;# 
   529  0005                     	;# 
   530  0006                     	;# 
   531  0007                     	;# 
   532  0008                     	;# 
   533  0009                     	;# 
   534  000A                     	;# 
   535  000B                     	;# 
   536  000C                     	;# 
   537  000D                     	;# 
   538  000E                     	;# 
   539  0010                     	;# 
   540  0011                     	;# 
   541  0012                     	;# 
   542  0015                     	;# 
   543  0016                     	;# 
   544  0016                     	;# 
   545  0017                     	;# 
   546  0018                     	;# 
   547  0019                     	;# 
   548  001A                     	;# 
   549  001B                     	;# 
   550  001C                     	;# 
   551  008C                     	;# 
   552  008D                     	;# 
   553  008E                     	;# 
   554  0090                     	;# 
   555  0091                     	;# 
   556  0092                     	;# 
   557  0095                     	;# 
   558  0096                     	;# 
   559  0097                     	;# 
   560  0099                     	;# 
   561  009A                     	;# 
   562  009B                     	;# 
   563  009B                     	;# 
   564  009C                     	;# 
   565  009D                     	;# 
   566  009E                     	;# 
   567  010C                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  0116                     	;# 
   571  0117                     	;# 
   572  011D                     	;# 
   573  018C                     	;# 
   574  018D                     	;# 
   575  018E                     	;# 
   576  0191                     	;# 
   577  0191                     	;# 
   578  0192                     	;# 
   579  0193                     	;# 
   580  0193                     	;# 
   581  0194                     	;# 
   582  0195                     	;# 
   583  0196                     	;# 
   584  0197                     	;# 
   585  0199                     	;# 
   586  019A                     	;# 
   587  019B                     	;# 
   588  019B                     	;# 
   589  019B                     	;# 
   590  019B                     	;# 
   591  019C                     	;# 
   592  019C                     	;# 
   593  019D                     	;# 
   594  019E                     	;# 
   595  019F                     	;# 
   596  020D                     	;# 
   597  0210                     	;# 
   598  0211                     	;# 
   599  0211                     	;# 
   600  0212                     	;# 
   601  0212                     	;# 
   602  0213                     	;# 
   603  0213                     	;# 
   604  0214                     	;# 
   605  0214                     	;# 
   606  0215                     	;# 
   607  0215                     	;# 
   608  0215                     	;# 
   609  0216                     	;# 
   610  0216                     	;# 
   611  0217                     	;# 
   612  0217                     	;# 
   613  0291                     	;# 
   614  0291                     	;# 
   615  0292                     	;# 
   616  0293                     	;# 
   617  0298                     	;# 
   618  0298                     	;# 
   619  0299                     	;# 
   620  029A                     	;# 
   621  0394                     	;# 
   622  0395                     	;# 
   623  0396                     	;# 
   624  0FE4                     	;# 
   625  0FE5                     	;# 
   626  0FE6                     	;# 
   627  0FE7                     	;# 
   628  0FE8                     	;# 
   629  0FE9                     	;# 
   630  0FEA                     	;# 
   631  0FEB                     	;# 
   632  0FED                     	;# 
   633  0FEE                     	;# 
   634  0FEF                     	;# 
   635  0000                     	;# 
   636  0001                     	;# 
   637  0002                     	;# 
   638  0003                     	;# 
   639  0004                     	;# 
   640  0005                     	;# 
   641  0006                     	;# 
   642  0007                     	;# 
   643  0008                     	;# 
   644  0009                     	;# 
   645  000A                     	;# 
   646  000B                     	;# 
   647  000C                     	;# 
   648  000D                     	;# 
   649  000E                     	;# 
   650  0010                     	;# 
   651  0011                     	;# 
   652  0012                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0016                     	;# 
   656  0017                     	;# 
   657  0018                     	;# 
   658  0019                     	;# 
   659  001A                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  008C                     	;# 
   663  008D                     	;# 
   664  008E                     	;# 
   665  0090                     	;# 
   666  0091                     	;# 
   667  0092                     	;# 
   668  0095                     	;# 
   669  0096                     	;# 
   670  0097                     	;# 
   671  0099                     	;# 
   672  009A                     	;# 
   673  009B                     	;# 
   674  009B                     	;# 
   675  009C                     	;# 
   676  009D                     	;# 
   677  009E                     	;# 
   678  010C                     	;# 
   679  010D                     	;# 
   680  010E                     	;# 
   681  0116                     	;# 
   682  0117                     	;# 
   683  011D                     	;# 
   684  018C                     	;# 
   685  018D                     	;# 
   686  018E                     	;# 
   687  0191                     	;# 
   688  0191                     	;# 
   689  0192                     	;# 
   690  0193                     	;# 
   691  0193                     	;# 
   692  0194                     	;# 
   693  0195                     	;# 
   694  0196                     	;# 
   695  0197                     	;# 
   696  0199                     	;# 
   697  019A                     	;# 
   698  019B                     	;# 
   699  019B                     	;# 
   700  019B                     	;# 
   701  019B                     	;# 
   702  019C                     	;# 
   703  019C                     	;# 
   704  019D                     	;# 
   705  019E                     	;# 
   706  019F                     	;# 
   707  020D                     	;# 
   708  0210                     	;# 
   709  0211                     	;# 
   710  0211                     	;# 
   711  0212                     	;# 
   712  0212                     	;# 
   713  0213                     	;# 
   714  0213                     	;# 
   715  0214                     	;# 
   716  0214                     	;# 
   717  0215                     	;# 
   718  0215                     	;# 
   719  0215                     	;# 
   720  0216                     	;# 
   721  0216                     	;# 
   722  0217                     	;# 
   723  0217                     	;# 
   724  0291                     	;# 
   725  0291                     	;# 
   726  0292                     	;# 
   727  0293                     	;# 
   728  0298                     	;# 
   729  0298                     	;# 
   730  0299                     	;# 
   731  029A                     	;# 
   732  0394                     	;# 
   733  0395                     	;# 
   734  0396                     	;# 
   735  0FE4                     	;# 
   736  0FE5                     	;# 
   737  0FE6                     	;# 
   738  0FE7                     	;# 
   739  0FE8                     	;# 
   740  0FE9                     	;# 
   741  0FEA                     	;# 
   742  0FEB                     	;# 
   743  0FED                     	;# 
   744  0FEE                     	;# 
   745  0FEF                     	;# 
   746  0000                     	;# 
   747  0001                     	;# 
   748  0002                     	;# 
   749  0003                     	;# 
   750  0004                     	;# 
   751  0005                     	;# 
   752  0006                     	;# 
   753  0007                     	;# 
   754  0008                     	;# 
   755  0009                     	;# 
   756  000A                     	;# 
   757  000B                     	;# 
   758  000C                     	;# 
   759  000D                     	;# 
   760  000E                     	;# 
   761  0010                     	;# 
   762  0011                     	;# 
   763  0012                     	;# 
   764  0015                     	;# 
   765  0016                     	;# 
   766  0016                     	;# 
   767  0017                     	;# 
   768  0018                     	;# 
   769  0019                     	;# 
   770  001A                     	;# 
   771  001B                     	;# 
   772  001C                     	;# 
   773  008C                     	;# 
   774  008D                     	;# 
   775  008E                     	;# 
   776  0090                     	;# 
   777  0091                     	;# 
   778  0092                     	;# 
   779  0095                     	;# 
   780  0096                     	;# 
   781  0097                     	;# 
   782  0099                     	;# 
   783  009A                     	;# 
   784  009B                     	;# 
   785  009B                     	;# 
   786  009C                     	;# 
   787  009D                     	;# 
   788  009E                     	;# 
   789  010C                     	;# 
   790  010D                     	;# 
   791  010E                     	;# 
   792  0116                     	;# 
   793  0117                     	;# 
   794  011D                     	;# 
   795  018C                     	;# 
   796  018D                     	;# 
   797  018E                     	;# 
   798  0191                     	;# 
   799  0191                     	;# 
   800  0192                     	;# 
   801  0193                     	;# 
   802  0193                     	;# 
   803  0194                     	;# 
   804  0195                     	;# 
   805  0196                     	;# 
   806  0197                     	;# 
   807  0199                     	;# 
   808  019A                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019B                     	;# 
   812  019B                     	;# 
   813  019C                     	;# 
   814  019C                     	;# 
   815  019D                     	;# 
   816  019E                     	;# 
   817  019F                     	;# 
   818  020D                     	;# 
   819  0210                     	;# 
   820  0211                     	;# 
   821  0211                     	;# 
   822  0212                     	;# 
   823  0212                     	;# 
   824  0213                     	;# 
   825  0213                     	;# 
   826  0214                     	;# 
   827  0214                     	;# 
   828  0215                     	;# 
   829  0215                     	;# 
   830  0215                     	;# 
   831  0216                     	;# 
   832  0216                     	;# 
   833  0217                     	;# 
   834  0217                     	;# 
   835  0291                     	;# 
   836  0291                     	;# 
   837  0292                     	;# 
   838  0293                     	;# 
   839  0298                     	;# 
   840  0298                     	;# 
   841  0299                     	;# 
   842  029A                     	;# 
   843  0394                     	;# 
   844  0395                     	;# 
   845  0396                     	;# 
   846  0FE4                     	;# 
   847  0FE5                     	;# 
   848  0FE6                     	;# 
   849  0FE7                     	;# 
   850  0FE8                     	;# 
   851  0FE9                     	;# 
   852  0FEA                     	;# 
   853  0FEB                     	;# 
   854  0FED                     	;# 
   855  0FEE                     	;# 
   856  0FEF                     	;# 
   857  0000                     	;# 
   858  0001                     	;# 
   859  0002                     	;# 
   860  0003                     	;# 
   861  0004                     	;# 
   862  0005                     	;# 
   863  0006                     	;# 
   864  0007                     	;# 
   865  0008                     	;# 
   866  0009                     	;# 
   867  000A                     	;# 
   868  000B                     	;# 
   869  000C                     	;# 
   870  000D                     	;# 
   871  000E                     	;# 
   872  0010                     	;# 
   873  0011                     	;# 
   874  0012                     	;# 
   875  0015                     	;# 
   876  0016                     	;# 
   877  0016                     	;# 
   878  0017                     	;# 
   879  0018                     	;# 
   880  0019                     	;# 
   881  001A                     	;# 
   882  001B                     	;# 
   883  001C                     	;# 
   884  008C                     	;# 
   885  008D                     	;# 
   886  008E                     	;# 
   887  0090                     	;# 
   888  0091                     	;# 
   889  0092                     	;# 
   890  0095                     	;# 
   891  0096                     	;# 
   892  0097                     	;# 
   893  0099                     	;# 
   894  009A                     	;# 
   895  009B                     	;# 
   896  009B                     	;# 
   897  009C                     	;# 
   898  009D                     	;# 
   899  009E                     	;# 
   900  010C                     	;# 
   901  010D                     	;# 
   902  010E                     	;# 
   903  0116                     	;# 
   904  0117                     	;# 
   905  011D                     	;# 
   906  018C                     	;# 
   907  018D                     	;# 
   908  018E                     	;# 
   909  0191                     	;# 
   910  0191                     	;# 
   911  0192                     	;# 
   912  0193                     	;# 
   913  0193                     	;# 
   914  0194                     	;# 
   915  0195                     	;# 
   916  0196                     	;# 
   917  0197                     	;# 
   918  0199                     	;# 
   919  019A                     	;# 
   920  019B                     	;# 
   921  019B                     	;# 
   922  019B                     	;# 
   923  019B                     	;# 
   924  019C                     	;# 
   925  019C                     	;# 
   926  019D                     	;# 
   927  019E                     	;# 
   928  019F                     	;# 
   929  020D                     	;# 
   930  0210                     	;# 
   931  0211                     	;# 
   932  0211                     	;# 
   933  0212                     	;# 
   934  0212                     	;# 
   935  0213                     	;# 
   936  0213                     	;# 
   937  0214                     	;# 
   938  0214                     	;# 
   939  0215                     	;# 
   940  0215                     	;# 
   941  0215                     	;# 
   942  0216                     	;# 
   943  0216                     	;# 
   944  0217                     	;# 
   945  0217                     	;# 
   946  0291                     	;# 
   947  0291                     	;# 
   948  0292                     	;# 
   949  0293                     	;# 
   950  0298                     	;# 
   951  0298                     	;# 
   952  0299                     	;# 
   953  029A                     	;# 
   954  0394                     	;# 
   955  0395                     	;# 
   956  0396                     	;# 
   957  0FE4                     	;# 
   958  0FE5                     	;# 
   959  0FE6                     	;# 
   960  0FE7                     	;# 
   961  0FE8                     	;# 
   962  0FE9                     	;# 
   963  0FEA                     	;# 
   964  0FEB                     	;# 
   965  0FED                     	;# 
   966  0FEE                     	;# 
   967  0FEF                     	;# 
   968  0000                     	;# 
   969  0001                     	;# 
   970  0002                     	;# 
   971  0003                     	;# 
   972  0004                     	;# 
   973  0005                     	;# 
   974  0006                     	;# 
   975  0007                     	;# 
   976  0008                     	;# 
   977  0009                     	;# 
   978  000A                     	;# 
   979  000B                     	;# 
   980  000C                     	;# 
   981  000D                     	;# 
   982  000E                     	;# 
   983  0010                     	;# 
   984  0011                     	;# 
   985  0012                     	;# 
   986  0015                     	;# 
   987  0016                     	;# 
   988  0016                     	;# 
   989  0017                     	;# 
   990  0018                     	;# 
   991  0019                     	;# 
   992  001A                     	;# 
   993  001B                     	;# 
   994  001C                     	;# 
   995  008C                     	;# 
   996  008D                     	;# 
   997  008E                     	;# 
   998  0090                     	;# 
   999  0091                     	;# 
  1000  0092                     	;# 
  1001  0095                     	;# 
  1002  0096                     	;# 
  1003  0097                     	;# 
  1004  0099                     	;# 
  1005  009A                     	;# 
  1006  009B                     	;# 
  1007  009B                     	;# 
  1008  009C                     	;# 
  1009  009D                     	;# 
  1010  009E                     	;# 
  1011  010C                     	;# 
  1012  010D                     	;# 
  1013  010E                     	;# 
  1014  0116                     	;# 
  1015  0117                     	;# 
  1016  011D                     	;# 
  1017  018C                     	;# 
  1018  018D                     	;# 
  1019  018E                     	;# 
  1020  0191                     	;# 
  1021  0191                     	;# 
  1022  0192                     	;# 
  1023  0193                     	;# 
  1024  0193                     	;# 
  1025  0194                     	;# 
  1026  0195                     	;# 
  1027  0196                     	;# 
  1028  0197                     	;# 
  1029  0199                     	;# 
  1030  019A                     	;# 
  1031  019B                     	;# 
  1032  019B                     	;# 
  1033  019B                     	;# 
  1034  019B                     	;# 
  1035  019C                     	;# 
  1036  019C                     	;# 
  1037  019D                     	;# 
  1038  019E                     	;# 
  1039  019F                     	;# 
  1040  020D                     	;# 
  1041  0210                     	;# 
  1042  0211                     	;# 
  1043  0211                     	;# 
  1044  0212                     	;# 
  1045  0212                     	;# 
  1046  0213                     	;# 
  1047  0213                     	;# 
  1048  0214                     	;# 
  1049  0214                     	;# 
  1050  0215                     	;# 
  1051  0215                     	;# 
  1052  0215                     	;# 
  1053  0216                     	;# 
  1054  0216                     	;# 
  1055  0217                     	;# 
  1056  0217                     	;# 
  1057  0291                     	;# 
  1058  0291                     	;# 
  1059  0292                     	;# 
  1060  0293                     	;# 
  1061  0298                     	;# 
  1062  0298                     	;# 
  1063  0299                     	;# 
  1064  029A                     	;# 
  1065  0394                     	;# 
  1066  0395                     	;# 
  1067  0396                     	;# 
  1068  0FE4                     	;# 
  1069  0FE5                     	;# 
  1070  0FE6                     	;# 
  1071  0FE7                     	;# 
  1072  0FE8                     	;# 
  1073  0FE9                     	;# 
  1074  0FEA                     	;# 
  1075  0FEB                     	;# 
  1076  0FED                     	;# 
  1077  0FEE                     	;# 
  1078  0FEF                     	;# 
  1079  0000                     	;# 
  1080  0001                     	;# 
  1081  0002                     	;# 
  1082  0003                     	;# 
  1083  0004                     	;# 
  1084  0005                     	;# 
  1085  0006                     	;# 
  1086  0007                     	;# 
  1087  0008                     	;# 
  1088  0009                     	;# 
  1089  000A                     	;# 
  1090  000B                     	;# 
  1091  000C                     	;# 
  1092  000D                     	;# 
  1093  000E                     	;# 
  1094  0010                     	;# 
  1095  0011                     	;# 
  1096  0012                     	;# 
  1097  0015                     	;# 
  1098  0016                     	;# 
  1099  0016                     	;# 
  1100  0017                     	;# 
  1101  0018                     	;# 
  1102  0019                     	;# 
  1103  001A                     	;# 
  1104  001B                     	;# 
  1105  001C                     	;# 
  1106  008C                     	;# 
  1107  008D                     	;# 
  1108  008E                     	;# 
  1109  0090                     	;# 
  1110  0091                     	;# 
  1111  0092                     	;# 
  1112  0095                     	;# 
  1113  0096                     	;# 
  1114  0097                     	;# 
  1115  0099                     	;# 
  1116  009A                     	;# 
  1117  009B                     	;# 
  1118  009B                     	;# 
  1119  009C                     	;# 
  1120  009D                     	;# 
  1121  009E                     	;# 
  1122  010C                     	;# 
  1123  010D                     	;# 
  1124  010E                     	;# 
  1125  0116                     	;# 
  1126  0117                     	;# 
  1127  011D                     	;# 
  1128  018C                     	;# 
  1129  018D                     	;# 
  1130  018E                     	;# 
  1131  0191                     	;# 
  1132  0191                     	;# 
  1133  0192                     	;# 
  1134  0193                     	;# 
  1135  0193                     	;# 
  1136  0194                     	;# 
  1137  0195                     	;# 
  1138  0196                     	;# 
  1139  0197                     	;# 
  1140  0199                     	;# 
  1141  019A                     	;# 
  1142  019B                     	;# 
  1143  019B                     	;# 
  1144  019B                     	;# 
  1145  019B                     	;# 
  1146  019C                     	;# 
  1147  019C                     	;# 
  1148  019D                     	;# 
  1149  019E                     	;# 
  1150  019F                     	;# 
  1151  020D                     	;# 
  1152  0210                     	;# 
  1153  0211                     	;# 
  1154  0211                     	;# 
  1155  0212                     	;# 
  1156  0212                     	;# 
  1157  0213                     	;# 
  1158  0213                     	;# 
  1159  0214                     	;# 
  1160  0214                     	;# 
  1161  0215                     	;# 
  1162  0215                     	;# 
  1163  0215                     	;# 
  1164  0216                     	;# 
  1165  0216                     	;# 
  1166  0217                     	;# 
  1167  0217                     	;# 
  1168  0291                     	;# 
  1169  0291                     	;# 
  1170  0292                     	;# 
  1171  0293                     	;# 
  1172  0298                     	;# 
  1173  0298                     	;# 
  1174  0299                     	;# 
  1175  029A                     	;# 
  1176  0394                     	;# 
  1177  0395                     	;# 
  1178  0396                     	;# 
  1179  0FE4                     	;# 
  1180  0FE5                     	;# 
  1181  0FE6                     	;# 
  1182  0FE7                     	;# 
  1183  0FE8                     	;# 
  1184  0FE9                     	;# 
  1185  0FEA                     	;# 
  1186  0FEB                     	;# 
  1187  0FED                     	;# 
  1188  0FEE                     	;# 
  1189  0FEF                     	;# 
  1190  0000                     	;# 
  1191  0001                     	;# 
  1192  0002                     	;# 
  1193  0003                     	;# 
  1194  0004                     	;# 
  1195  0005                     	;# 
  1196  0006                     	;# 
  1197  0007                     	;# 
  1198  0008                     	;# 
  1199  0009                     	;# 
  1200  000A                     	;# 
  1201  000B                     	;# 
  1202  000C                     	;# 
  1203  000D                     	;# 
  1204  000E                     	;# 
  1205  0010                     	;# 
  1206  0011                     	;# 
  1207  0012                     	;# 
  1208  0015                     	;# 
  1209  0016                     	;# 
  1210  0016                     	;# 
  1211  0017                     	;# 
  1212  0018                     	;# 
  1213  0019                     	;# 
  1214  001A                     	;# 
  1215  001B                     	;# 
  1216  001C                     	;# 
  1217  008C                     	;# 
  1218  008D                     	;# 
  1219  008E                     	;# 
  1220  0090                     	;# 
  1221  0091                     	;# 
  1222  0092                     	;# 
  1223  0095                     	;# 
  1224  0096                     	;# 
  1225  0097                     	;# 
  1226  0099                     	;# 
  1227  009A                     	;# 
  1228  009B                     	;# 
  1229  009B                     	;# 
  1230  009C                     	;# 
  1231  009D                     	;# 
  1232  009E                     	;# 
  1233  010C                     	;# 
  1234  010D                     	;# 
  1235  010E                     	;# 
  1236  0116                     	;# 
  1237  0117                     	;# 
  1238  011D                     	;# 
  1239  018C                     	;# 
  1240  018D                     	;# 
  1241  018E                     	;# 
  1242  0191                     	;# 
  1243  0191                     	;# 
  1244  0192                     	;# 
  1245  0193                     	;# 
  1246  0193                     	;# 
  1247  0194                     	;# 
  1248  0195                     	;# 
  1249  0196                     	;# 
  1250  0197                     	;# 
  1251  0199                     	;# 
  1252  019A                     	;# 
  1253  019B                     	;# 
  1254  019B                     	;# 
  1255  019B                     	;# 
  1256  019B                     	;# 
  1257  019C                     	;# 
  1258  019C                     	;# 
  1259  019D                     	;# 
  1260  019E                     	;# 
  1261  019F                     	;# 
  1262  020D                     	;# 
  1263  0210                     	;# 
  1264  0211                     	;# 
  1265  0211                     	;# 
  1266  0212                     	;# 
  1267  0212                     	;# 
  1268  0213                     	;# 
  1269  0213                     	;# 
  1270  0214                     	;# 
  1271  0214                     	;# 
  1272  0215                     	;# 
  1273  0215                     	;# 
  1274  0215                     	;# 
  1275  0216                     	;# 
  1276  0216                     	;# 
  1277  0217                     	;# 
  1278  0217                     	;# 
  1279  0291                     	;# 
  1280  0291                     	;# 
  1281  0292                     	;# 
  1282  0293                     	;# 
  1283  0298                     	;# 
  1284  0298                     	;# 
  1285  0299                     	;# 
  1286  029A                     	;# 
  1287  0394                     	;# 
  1288  0395                     	;# 
  1289  0396                     	;# 
  1290  0FE4                     	;# 
  1291  0FE5                     	;# 
  1292  0FE6                     	;# 
  1293  0FE7                     	;# 
  1294  0FE8                     	;# 
  1295  0FE9                     	;# 
  1296  0FEA                     	;# 
  1297  0FEB                     	;# 
  1298  0FED                     	;# 
  1299  0FEE                     	;# 
  1300  0FEF                     	;# 
  1301  0000                     	;# 
  1302  0001                     	;# 
  1303  0002                     	;# 
  1304  0003                     	;# 
  1305  0004                     	;# 
  1306  0005                     	;# 
  1307  0006                     	;# 
  1308  0007                     	;# 
  1309  0008                     	;# 
  1310  0009                     	;# 
  1311  000A                     	;# 
  1312  000B                     	;# 
  1313  000C                     	;# 
  1314  000D                     	;# 
  1315  000E                     	;# 
  1316  0010                     	;# 
  1317  0011                     	;# 
  1318  0012                     	;# 
  1319  0015                     	;# 
  1320  0016                     	;# 
  1321  0016                     	;# 
  1322  0017                     	;# 
  1323  0018                     	;# 
  1324  0019                     	;# 
  1325  001A                     	;# 
  1326  001B                     	;# 
  1327  001C                     	;# 
  1328  008C                     	;# 
  1329  008D                     	;# 
  1330  008E                     	;# 
  1331  0090                     	;# 
  1332  0091                     	;# 
  1333  0092                     	;# 
  1334  0095                     	;# 
  1335  0096                     	;# 
  1336  0097                     	;# 
  1337  0099                     	;# 
  1338  009A                     	;# 
  1339  009B                     	;# 
  1340  009B                     	;# 
  1341  009C                     	;# 
  1342  009D                     	;# 
  1343  009E                     	;# 
  1344  010C                     	;# 
  1345  010D                     	;# 
  1346  010E                     	;# 
  1347  0116                     	;# 
  1348  0117                     	;# 
  1349  011D                     	;# 
  1350  018C                     	;# 
  1351  018D                     	;# 
  1352  018E                     	;# 
  1353  0191                     	;# 
  1354  0191                     	;# 
  1355  0192                     	;# 
  1356  0193                     	;# 
  1357  0193                     	;# 
  1358  0194                     	;# 
  1359  0195                     	;# 
  1360  0196                     	;# 
  1361  0197                     	;# 
  1362  0199                     	;# 
  1363  019A                     	;# 
  1364  019B                     	;# 
  1365  019B                     	;# 
  1366  019B                     	;# 
  1367  019B                     	;# 
  1368  019C                     	;# 
  1369  019C                     	;# 
  1370  019D                     	;# 
  1371  019E                     	;# 
  1372  019F                     	;# 
  1373  020D                     	;# 
  1374  0210                     	;# 
  1375  0211                     	;# 
  1376  0211                     	;# 
  1377  0212                     	;# 
  1378  0212                     	;# 
  1379  0213                     	;# 
  1380  0213                     	;# 
  1381  0214                     	;# 
  1382  0214                     	;# 
  1383  0215                     	;# 
  1384  0215                     	;# 
  1385  0215                     	;# 
  1386  0216                     	;# 
  1387  0216                     	;# 
  1388  0217                     	;# 
  1389  0217                     	;# 
  1390  0291                     	;# 
  1391  0291                     	;# 
  1392  0292                     	;# 
  1393  0293                     	;# 
  1394  0298                     	;# 
  1395  0298                     	;# 
  1396  0299                     	;# 
  1397  029A                     	;# 
  1398  0394                     	;# 
  1399  0395                     	;# 
  1400  0396                     	;# 
  1401  0FE4                     	;# 
  1402  0FE5                     	;# 
  1403  0FE6                     	;# 
  1404  0FE7                     	;# 
  1405  0FE8                     	;# 
  1406  0FE9                     	;# 
  1407  0FEA                     	;# 
  1408  0FEB                     	;# 
  1409  0FED                     	;# 
  1410  0FEE                     	;# 
  1411  0FEF                     	;# 
  1412  0000                     	;# 
  1413  0001                     	;# 
  1414  0002                     	;# 
  1415  0003                     	;# 
  1416  0004                     	;# 
  1417  0005                     	;# 
  1418  0006                     	;# 
  1419  0007                     	;# 
  1420  0008                     	;# 
  1421  0009                     	;# 
  1422  000A                     	;# 
  1423  000B                     	;# 
  1424  000C                     	;# 
  1425  000D                     	;# 
  1426  000E                     	;# 
  1427  0010                     	;# 
  1428  0011                     	;# 
  1429  0012                     	;# 
  1430  0015                     	;# 
  1431  0016                     	;# 
  1432  0016                     	;# 
  1433  0017                     	;# 
  1434  0018                     	;# 
  1435  0019                     	;# 
  1436  001A                     	;# 
  1437  001B                     	;# 
  1438  001C                     	;# 
  1439  008C                     	;# 
  1440  008D                     	;# 
  1441  008E                     	;# 
  1442  0090                     	;# 
  1443  0091                     	;# 
  1444  0092                     	;# 
  1445  0095                     	;# 
  1446  0096                     	;# 
  1447  0097                     	;# 
  1448  0099                     	;# 
  1449  009A                     	;# 
  1450  009B                     	;# 
  1451  009B                     	;# 
  1452  009C                     	;# 
  1453  009D                     	;# 
  1454  009E                     	;# 
  1455  010C                     	;# 
  1456  010D                     	;# 
  1457  010E                     	;# 
  1458  0116                     	;# 
  1459  0117                     	;# 
  1460  011D                     	;# 
  1461  018C                     	;# 
  1462  018D                     	;# 
  1463  018E                     	;# 
  1464  0191                     	;# 
  1465  0191                     	;# 
  1466  0192                     	;# 
  1467  0193                     	;# 
  1468  0193                     	;# 
  1469  0194                     	;# 
  1470  0195                     	;# 
  1471  0196                     	;# 
  1472  0197                     	;# 
  1473  0199                     	;# 
  1474  019A                     	;# 
  1475  019B                     	;# 
  1476  019B                     	;# 
  1477  019B                     	;# 
  1478  019B                     	;# 
  1479  019C                     	;# 
  1480  019C                     	;# 
  1481  019D                     	;# 
  1482  019E                     	;# 
  1483  019F                     	;# 
  1484  020D                     	;# 
  1485  0210                     	;# 
  1486  0211                     	;# 
  1487  0211                     	;# 
  1488  0212                     	;# 
  1489  0212                     	;# 
  1490  0213                     	;# 
  1491  0213                     	;# 
  1492  0214                     	;# 
  1493  0214                     	;# 
  1494  0215                     	;# 
  1495  0215                     	;# 
  1496  0215                     	;# 
  1497  0216                     	;# 
  1498  0216                     	;# 
  1499  0217                     	;# 
  1500  0217                     	;# 
  1501  0291                     	;# 
  1502  0291                     	;# 
  1503  0292                     	;# 
  1504  0293                     	;# 
  1505  0298                     	;# 
  1506  0298                     	;# 
  1507  0299                     	;# 
  1508  029A                     	;# 
  1509  0394                     	;# 
  1510  0395                     	;# 
  1511  0396                     	;# 
  1512  0FE4                     	;# 
  1513  0FE5                     	;# 
  1514  0FE6                     	;# 
  1515  0FE7                     	;# 
  1516  0FE8                     	;# 
  1517  0FE9                     	;# 
  1518  0FEA                     	;# 
  1519  0FEB                     	;# 
  1520  0FED                     	;# 
  1521  0FEE                     	;# 
  1522  0FEF                     	;# 
  1523  0000                     	;# 
  1524  0001                     	;# 
  1525  0002                     	;# 
  1526  0003                     	;# 
  1527  0004                     	;# 
  1528  0005                     	;# 
  1529  0006                     	;# 
  1530  0007                     	;# 
  1531  0008                     	;# 
  1532  0009                     	;# 
  1533  000A                     	;# 
  1534  000B                     	;# 
  1535  000C                     	;# 
  1536  000D                     	;# 
  1537  000E                     	;# 
  1538  0010                     	;# 
  1539  0011                     	;# 
  1540  0012                     	;# 
  1541  0015                     	;# 
  1542  0016                     	;# 
  1543  0016                     	;# 
  1544  0017                     	;# 
  1545  0018                     	;# 
  1546  0019                     	;# 
  1547  001A                     	;# 
  1548  001B                     	;# 
  1549  001C                     	;# 
  1550  008C                     	;# 
  1551  008D                     	;# 
  1552  008E                     	;# 
  1553  0090                     	;# 
  1554  0091                     	;# 
  1555  0092                     	;# 
  1556  0095                     	;# 
  1557  0096                     	;# 
  1558  0097                     	;# 
  1559  0099                     	;# 
  1560  009A                     	;# 
  1561  009B                     	;# 
  1562  009B                     	;# 
  1563  009C                     	;# 
  1564  009D                     	;# 
  1565  009E                     	;# 
  1566  010C                     	;# 
  1567  010D                     	;# 
  1568  010E                     	;# 
  1569  0116                     	;# 
  1570  0117                     	;# 
  1571  011D                     	;# 
  1572  018C                     	;# 
  1573  018D                     	;# 
  1574  018E                     	;# 
  1575  0191                     	;# 
  1576  0191                     	;# 
  1577  0192                     	;# 
  1578  0193                     	;# 
  1579  0193                     	;# 
  1580  0194                     	;# 
  1581  0195                     	;# 
  1582  0196                     	;# 
  1583  0197                     	;# 
  1584  0199                     	;# 
  1585  019A                     	;# 
  1586  019B                     	;# 
  1587  019B                     	;# 
  1588  019B                     	;# 
  1589  019B                     	;# 
  1590  019C                     	;# 
  1591  019C                     	;# 
  1592  019D                     	;# 
  1593  019E                     	;# 
  1594  019F                     	;# 
  1595  020D                     	;# 
  1596  0210                     	;# 
  1597  0211                     	;# 
  1598  0211                     	;# 
  1599  0212                     	;# 
  1600  0212                     	;# 
  1601  0213                     	;# 
  1602  0213                     	;# 
  1603  0214                     	;# 
  1604  0214                     	;# 
  1605  0215                     	;# 
  1606  0215                     	;# 
  1607  0215                     	;# 
  1608  0216                     	;# 
  1609  0216                     	;# 
  1610  0217                     	;# 
  1611  0217                     	;# 
  1612  0291                     	;# 
  1613  0291                     	;# 
  1614  0292                     	;# 
  1615  0293                     	;# 
  1616  0298                     	;# 
  1617  0298                     	;# 
  1618  0299                     	;# 
  1619  029A                     	;# 
  1620  0394                     	;# 
  1621  0395                     	;# 
  1622  0396                     	;# 
  1623  0FE4                     	;# 
  1624  0FE5                     	;# 
  1625  0FE6                     	;# 
  1626  0FE7                     	;# 
  1627  0FE8                     	;# 
  1628  0FE9                     	;# 
  1629  0FEA                     	;# 
  1630  0FEB                     	;# 
  1631  0FED                     	;# 
  1632  0FEE                     	;# 
  1633  0FEF                     	;# 
  1634  0000                     	;# 
  1635  0001                     	;# 
  1636  0002                     	;# 
  1637  0003                     	;# 
  1638  0004                     	;# 
  1639  0005                     	;# 
  1640  0006                     	;# 
  1641  0007                     	;# 
  1642  0008                     	;# 
  1643  0009                     	;# 
  1644  000A                     	;# 
  1645  000B                     	;# 
  1646  000C                     	;# 
  1647  000D                     	;# 
  1648  000E                     	;# 
  1649  0010                     	;# 
  1650  0011                     	;# 
  1651  0012                     	;# 
  1652  0015                     	;# 
  1653  0016                     	;# 
  1654  0016                     	;# 
  1655  0017                     	;# 
  1656  0018                     	;# 
  1657  0019                     	;# 
  1658  001A                     	;# 
  1659  001B                     	;# 
  1660  001C                     	;# 
  1661  008C                     	;# 
  1662  008D                     	;# 
  1663  008E                     	;# 
  1664  0090                     	;# 
  1665  0091                     	;# 
  1666  0092                     	;# 
  1667  0095                     	;# 
  1668  0096                     	;# 
  1669  0097                     	;# 
  1670  0099                     	;# 
  1671  009A                     	;# 
  1672  009B                     	;# 
  1673  009B                     	;# 
  1674  009C                     	;# 
  1675  009D                     	;# 
  1676  009E                     	;# 
  1677  010C                     	;# 
  1678  010D                     	;# 
  1679  010E                     	;# 
  1680  0116                     	;# 
  1681  0117                     	;# 
  1682  011D                     	;# 
  1683  018C                     	;# 
  1684  018D                     	;# 
  1685  018E                     	;# 
  1686  0191                     	;# 
  1687  0191                     	;# 
  1688  0192                     	;# 
  1689  0193                     	;# 
  1690  0193                     	;# 
  1691  0194                     	;# 
  1692  0195                     	;# 
  1693  0196                     	;# 
  1694  0197                     	;# 
  1695  0199                     	;# 
  1696  019A                     	;# 
  1697  019B                     	;# 
  1698  019B                     	;# 
  1699  019B                     	;# 
  1700  019B                     	;# 
  1701  019C                     	;# 
  1702  019C                     	;# 
  1703  019D                     	;# 
  1704  019E                     	;# 
  1705  019F                     	;# 
  1706  020D                     	;# 
  1707  0210                     	;# 
  1708  0211                     	;# 
  1709  0211                     	;# 
  1710  0212                     	;# 
  1711  0212                     	;# 
  1712  0213                     	;# 
  1713  0213                     	;# 
  1714  0214                     	;# 
  1715  0214                     	;# 
  1716  0215                     	;# 
  1717  0215                     	;# 
  1718  0215                     	;# 
  1719  0216                     	;# 
  1720  0216                     	;# 
  1721  0217                     	;# 
  1722  0217                     	;# 
  1723  0291                     	;# 
  1724  0291                     	;# 
  1725  0292                     	;# 
  1726  0293                     	;# 
  1727  0298                     	;# 
  1728  0298                     	;# 
  1729  0299                     	;# 
  1730  029A                     	;# 
  1731  0394                     	;# 
  1732  0395                     	;# 
  1733  0396                     	;# 
  1734  0FE4                     	;# 
  1735  0FE5                     	;# 
  1736  0FE6                     	;# 
  1737  0FE7                     	;# 
  1738  0FE8                     	;# 
  1739  0FE9                     	;# 
  1740  0FEA                     	;# 
  1741  0FEB                     	;# 
  1742  0FED                     	;# 
  1743  0FEE                     	;# 
  1744  0FEF                     	;# 
  1745  0000                     	;# 
  1746  0001                     	;# 
  1747  0002                     	;# 
  1748  0003                     	;# 
  1749  0004                     	;# 
  1750  0005                     	;# 
  1751  0006                     	;# 
  1752  0007                     	;# 
  1753  0008                     	;# 
  1754  0009                     	;# 
  1755  000A                     	;# 
  1756  000B                     	;# 
  1757  000C                     	;# 
  1758  000D                     	;# 
  1759  000E                     	;# 
  1760  0010                     	;# 
  1761  0011                     	;# 
  1762  0012                     	;# 
  1763  0015                     	;# 
  1764  0016                     	;# 
  1765  0016                     	;# 
  1766  0017                     	;# 
  1767  0018                     	;# 
  1768  0019                     	;# 
  1769  001A                     	;# 
  1770  001B                     	;# 
  1771  001C                     	;# 
  1772  008C                     	;# 
  1773  008D                     	;# 
  1774  008E                     	;# 
  1775  0090                     	;# 
  1776  0091                     	;# 
  1777  0092                     	;# 
  1778  0095                     	;# 
  1779  0096                     	;# 
  1780  0097                     	;# 
  1781  0099                     	;# 
  1782  009A                     	;# 
  1783  009B                     	;# 
  1784  009B                     	;# 
  1785  009C                     	;# 
  1786  009D                     	;# 
  1787  009E                     	;# 
  1788  010C                     	;# 
  1789  010D                     	;# 
  1790  010E                     	;# 
  1791  0116                     	;# 
  1792  0117                     	;# 
  1793  011D                     	;# 
  1794  018C                     	;# 
  1795  018D                     	;# 
  1796  018E                     	;# 
  1797  0191                     	;# 
  1798  0191                     	;# 
  1799  0192                     	;# 
  1800  0193                     	;# 
  1801  0193                     	;# 
  1802  0194                     	;# 
  1803  0195                     	;# 
  1804  0196                     	;# 
  1805  0197                     	;# 
  1806  0199                     	;# 
  1807  019A                     	;# 
  1808  019B                     	;# 
  1809  019B                     	;# 
  1810  019B                     	;# 
  1811  019B                     	;# 
  1812  019C                     	;# 
  1813  019C                     	;# 
  1814  019D                     	;# 
  1815  019E                     	;# 
  1816  019F                     	;# 
  1817  020D                     	;# 
  1818  0210                     	;# 
  1819  0211                     	;# 
  1820  0211                     	;# 
  1821  0212                     	;# 
  1822  0212                     	;# 
  1823  0213                     	;# 
  1824  0213                     	;# 
  1825  0214                     	;# 
  1826  0214                     	;# 
  1827  0215                     	;# 
  1828  0215                     	;# 
  1829  0215                     	;# 
  1830  0216                     	;# 
  1831  0216                     	;# 
  1832  0217                     	;# 
  1833  0217                     	;# 
  1834  0291                     	;# 
  1835  0291                     	;# 
  1836  0292                     	;# 
  1837  0293                     	;# 
  1838  0298                     	;# 
  1839  0298                     	;# 
  1840  0299                     	;# 
  1841  029A                     	;# 
  1842  0394                     	;# 
  1843  0395                     	;# 
  1844  0396                     	;# 
  1845  0FE4                     	;# 
  1846  0FE5                     	;# 
  1847  0FE6                     	;# 
  1848  0FE7                     	;# 
  1849  0FE8                     	;# 
  1850  0FE9                     	;# 
  1851  0FEA                     	;# 
  1852  0FEB                     	;# 
  1853  0FED                     	;# 
  1854  0FEE                     	;# 
  1855  0FEF                     	;# 
  1856  0000                     	;# 
  1857  0001                     	;# 
  1858  0002                     	;# 
  1859  0003                     	;# 
  1860  0004                     	;# 
  1861  0005                     	;# 
  1862  0006                     	;# 
  1863  0007                     	;# 
  1864  0008                     	;# 
  1865  0009                     	;# 
  1866  000A                     	;# 
  1867  000B                     	;# 
  1868  000C                     	;# 
  1869  000D                     	;# 
  1870  000E                     	;# 
  1871  0010                     	;# 
  1872  0011                     	;# 
  1873  0012                     	;# 
  1874  0015                     	;# 
  1875  0016                     	;# 
  1876  0016                     	;# 
  1877  0017                     	;# 
  1878  0018                     	;# 
  1879  0019                     	;# 
  1880  001A                     	;# 
  1881  001B                     	;# 
  1882  001C                     	;# 
  1883  008C                     	;# 
  1884  008D                     	;# 
  1885  008E                     	;# 
  1886  0090                     	;# 
  1887  0091                     	;# 
  1888  0092                     	;# 
  1889  0095                     	;# 
  1890  0096                     	;# 
  1891  0097                     	;# 
  1892  0099                     	;# 
  1893  009A                     	;# 
  1894  009B                     	;# 
  1895  009B                     	;# 
  1896  009C                     	;# 
  1897  009D                     	;# 
  1898  009E                     	;# 
  1899  010C                     	;# 
  1900  010D                     	;# 
  1901  010E                     	;# 
  1902  0116                     	;# 
  1903  0117                     	;# 
  1904  011D                     	;# 
  1905  018C                     	;# 
  1906  018D                     	;# 
  1907  018E                     	;# 
  1908  0191                     	;# 
  1909  0191                     	;# 
  1910  0192                     	;# 
  1911  0193                     	;# 
  1912  0193                     	;# 
  1913  0194                     	;# 
  1914  0195                     	;# 
  1915  0196                     	;# 
  1916  0197                     	;# 
  1917  0199                     	;# 
  1918  019A                     	;# 
  1919  019B                     	;# 
  1920  019B                     	;# 
  1921  019B                     	;# 
  1922  019B                     	;# 
  1923  019C                     	;# 
  1924  019C                     	;# 
  1925  019D                     	;# 
  1926  019E                     	;# 
  1927  019F                     	;# 
  1928  020D                     	;# 
  1929  0210                     	;# 
  1930  0211                     	;# 
  1931  0211                     	;# 
  1932  0212                     	;# 
  1933  0212                     	;# 
  1934  0213                     	;# 
  1935  0213                     	;# 
  1936  0214                     	;# 
  1937  0214                     	;# 
  1938  0215                     	;# 
  1939  0215                     	;# 
  1940  0215                     	;# 
  1941  0216                     	;# 
  1942  0216                     	;# 
  1943  0217                     	;# 
  1944  0217                     	;# 
  1945  0291                     	;# 
  1946  0291                     	;# 
  1947  0292                     	;# 
  1948  0293                     	;# 
  1949  0298                     	;# 
  1950  0298                     	;# 
  1951  0299                     	;# 
  1952  029A                     	;# 
  1953  0394                     	;# 
  1954  0395                     	;# 
  1955  0396                     	;# 
  1956  0FE4                     	;# 
  1957  0FE5                     	;# 
  1958  0FE6                     	;# 
  1959  0FE7                     	;# 
  1960  0FE8                     	;# 
  1961  0FE9                     	;# 
  1962  0FEA                     	;# 
  1963  0FEB                     	;# 
  1964  0FED                     	;# 
  1965  0FEE                     	;# 
  1966  0FEF                     	;# 
  1967  0000                     	;# 
  1968  0001                     	;# 
  1969  0002                     	;# 
  1970  0003                     	;# 
  1971  0004                     	;# 
  1972  0005                     	;# 
  1973  0006                     	;# 
  1974  0007                     	;# 
  1975  0008                     	;# 
  1976  0009                     	;# 
  1977  000A                     	;# 
  1978  000B                     	;# 
  1979  000C                     	;# 
  1980  000D                     	;# 
  1981  000E                     	;# 
  1982  0010                     	;# 
  1983  0011                     	;# 
  1984  0012                     	;# 
  1985  0015                     	;# 
  1986  0016                     	;# 
  1987  0016                     	;# 
  1988  0017                     	;# 
  1989  0018                     	;# 
  1990  0019                     	;# 
  1991  001A                     	;# 
  1992  001B                     	;# 
  1993  001C                     	;# 
  1994  008C                     	;# 
  1995  008D                     	;# 
  1996  008E                     	;# 
  1997  0090                     	;# 
  1998  0091                     	;# 
  1999  0092                     	;# 
  2000  0095                     	;# 
  2001  0096                     	;# 
  2002  0097                     	;# 
  2003  0099                     	;# 
  2004  009A                     	;# 
  2005  009B                     	;# 
  2006  009B                     	;# 
  2007  009C                     	;# 
  2008  009D                     	;# 
  2009  009E                     	;# 
  2010  010C                     	;# 
  2011  010D                     	;# 
  2012  010E                     	;# 
  2013  0116                     	;# 
  2014  0117                     	;# 
  2015  011D                     	;# 
  2016  018C                     	;# 
  2017  018D                     	;# 
  2018  018E                     	;# 
  2019  0191                     	;# 
  2020  0191                     	;# 
  2021  0192                     	;# 
  2022  0193                     	;# 
  2023  0193                     	;# 
  2024  0194                     	;# 
  2025  0195                     	;# 
  2026  0196                     	;# 
  2027  0197                     	;# 
  2028  0199                     	;# 
  2029  019A                     	;# 
  2030  019B                     	;# 
  2031  019B                     	;# 
  2032  019B                     	;# 
  2033  019B                     	;# 
  2034  019C                     	;# 
  2035  019C                     	;# 
  2036  019D                     	;# 
  2037  019E                     	;# 
  2038  019F                     	;# 
  2039  020D                     	;# 
  2040  0210                     	;# 
  2041  0211                     	;# 
  2042  0211                     	;# 
  2043  0212                     	;# 
  2044  0212                     	;# 
  2045  0213                     	;# 
  2046  0213                     	;# 
  2047  0214                     	;# 
  2048  0214                     	;# 
  2049  0215                     	;# 
  2050  0215                     	;# 
  2051  0215                     	;# 
  2052  0216                     	;# 
  2053  0216                     	;# 
  2054  0217                     	;# 
  2055  0217                     	;# 
  2056  0291                     	;# 
  2057  0291                     	;# 
  2058  0292                     	;# 
  2059  0293                     	;# 
  2060  0298                     	;# 
  2061  0298                     	;# 
  2062  0299                     	;# 
  2063  029A                     	;# 
  2064  0394                     	;# 
  2065  0395                     	;# 
  2066  0396                     	;# 
  2067  0FE4                     	;# 
  2068  0FE5                     	;# 
  2069  0FE6                     	;# 
  2070  0FE7                     	;# 
  2071  0FE8                     	;# 
  2072  0FE9                     	;# 
  2073  0FEA                     	;# 
  2074  0FEB                     	;# 
  2075  0FED                     	;# 
  2076  0FEE                     	;# 
  2077  0FEF                     	;# 
  2078                           
  2079                           	psect	idataBANK2
  2080  03A5                     __pidataBANK2:	
  2081                           
  2082                           ;initializer for __product
  2083  03A5  3463               	retlw	99
  2084  03A6  3402               	retlw	2
  2085  03A7  3400               	retlw	0
  2086  03A8  3400               	retlw	0
  2087  03A9  3400               	retlw	0
  2088  03AA  3400               	retlw	0
  2089  03AB  3400               	retlw	0
  2090  03AC  3400               	retlw	0
  2091  03AD  3400               	retlw	0
  2092  03AE  3400               	retlw	0
  2093  03AF  3400               	retlw	0
  2094  03B0  3400               	retlw	0
  2095  03B1  34FF               	retlw	255
  2096  03B2  34FF               	retlw	255
  2097  03B3  34FF               	retlw	255
  2098  03B4  3400               	retlw	0
  2099  03B5  3400               	retlw	0
  2100  03B6  3400               	retlw	0
  2101  03B7  3400               	retlw	0
  2102  03B8  3400               	retlw	0
  2103  03B9  3400               	retlw	0
  2104  03BA  3400               	retlw	0
  2105  03BB  3400               	retlw	0
  2106  03BC  3400               	retlw	0
  2107  03BD  3400               	retlw	0
  2108  03BE  3400               	retlw	0
  2109  03BF  3400               	retlw	0
  2110  03C0  3400               	retlw	0
  2111  03C1  3400               	retlw	0
  2112  03C2  3400               	retlw	0
  2113  03C3  3400               	retlw	0
  2114  03C4  3400               	retlw	0
  2115                           
  2116                           	psect	stringtext
  2117  0400                     __pstringtext:	
  2118  0400                     _CC2500_registers_address:	
  2119  0400  3403               	retlw	3
  2120  0401  3416               	retlw	22
  2121  0402  3417               	retlw	23
  2122  0403  341E               	retlw	30
  2123  0404  341F               	retlw	31
  2124  0405  3420               	retlw	32
  2125  0406  342A               	retlw	42
  2126  0407  342B               	retlw	43
  2127  0408  340B               	retlw	11
  2128  0409  340C               	retlw	12
  2129  040A  340D               	retlw	13
  2130  040B  340E               	retlw	14
  2131  040C  340F               	retlw	15
  2132  040D  3410               	retlw	16
  2133  040E  3411               	retlw	17
  2134  040F  3412               	retlw	18
  2135  0410  3413               	retlw	19
  2136  0411  3414               	retlw	20
  2137  0412  340A               	retlw	10
  2138  0413  3415               	retlw	21
  2139  0414  3421               	retlw	33
  2140  0415  3422               	retlw	34
  2141  0416  3418               	retlw	24
  2142  0417  3419               	retlw	25
  2143  0418  341A               	retlw	26
  2144  0419  341B               	retlw	27
  2145  041A  341C               	retlw	28
  2146  041B  341D               	retlw	29
  2147  041C  3423               	retlw	35
  2148  041D  3424               	retlw	36
  2149  041E  3425               	retlw	37
  2150  041F  3426               	retlw	38
  2151  0420  3429               	retlw	41
  2152  0421  342C               	retlw	44
  2153  0422  342D               	retlw	45
  2154  0423  342E               	retlw	46
  2155  0424  3400               	retlw	0
  2156  0425  3401               	retlw	1
  2157  0426  3402               	retlw	2
  2158  0427  3407               	retlw	7
  2159  0428  3408               	retlw	8
  2160  0429  3409               	retlw	9
  2161  042A  3406               	retlw	6
  2162  042B  3404               	retlw	4
  2163  042C  3405               	retlw	5
  2164  042D  3427               	retlw	39
  2165  042E  3428               	retlw	40
  2166  042F                     __end_of_CC2500_registers_address:	
  2167  042F                     _CC2500_rfSettings:	
  2168  042F  3407               	retlw	7
  2169  0430  3407               	retlw	7
  2170  0431  3430               	retlw	48
  2171  0432  3487               	retlw	135
  2172  0433  346B               	retlw	107
  2173  0434  34F8               	retlw	248
  2174  0435  347F               	retlw	127
  2175  0436  343F               	retlw	63
  2176  0437  3409               	retlw	9
  2177  0438  3400               	retlw	0
  2178  0439  345C               	retlw	92
  2179  043A  34A7               	retlw	167
  2180  043B  3462               	retlw	98
  2181  043C  3486               	retlw	134
  2182  043D  3483               	retlw	131
  2183  043E  3403               	retlw	3
  2184  043F  3422               	retlw	34
  2185  0440  34F8               	retlw	248
  2186  0441  3400               	retlw	0
  2187  0442  3444               	retlw	68
  2188  0443  34B6               	retlw	182
  2189  0444  3410               	retlw	16
  2190  0445  3418               	retlw	24
  2191  0446  341D               	retlw	29
  2192  0447  341C               	retlw	28
  2193  0448  34C7               	retlw	199
  2194  0449  3400               	retlw	0
  2195  044A  34B2               	retlw	178
  2196  044B  34EA               	retlw	234
  2197  044C  340A               	retlw	10
  2198  044D  3400               	retlw	0
  2199  044E  3411               	retlw	17
  2200  044F  3459               	retlw	89
  2201  0450  3488               	retlw	136
  2202  0451  3431               	retlw	49
  2203  0452  340B               	retlw	11
  2204  0453  342F               	retlw	47
  2205  0454  342E               	retlw	46
  2206  0455  3406               	retlw	6
  2207  0456  3404               	retlw	4
  2208  0457  3405               	retlw	5
  2209  0458  3400               	retlw	0
  2210  0459  3430               	retlw	48
  2211  045A  34D3               	retlw	211
  2212  045B  3491               	retlw	145
  2213  045C  3441               	retlw	65
  2214  045D  3400               	retlw	0
  2215  045E                     __end_of_CC2500_rfSettings:	
  2216  045E                     _CC2500_patable_vaule:	
  2217  045E  34FE               	retlw	254
  2218  045F  34FE               	retlw	254
  2219  0460  34FE               	retlw	254
  2220  0461  34FE               	retlw	254
  2221  0462  34FE               	retlw	254
  2222  0463  34FE               	retlw	254
  2223  0464  34FE               	retlw	254
  2224  0465  34FE               	retlw	254
  2225  0466                     __end_of_CC2500_patable_vaule:	
  2226                           
  2227                           	psect	nvBANK0
  2228  0062                     __pnvBANK0:	
  2229  0062                     _product:	
  2230  0062                     	ds	1
  2231  000C                     _PORTA	set	12
  2232  000D                     _PORTB	set	13
  2233  000E                     _PORTC	set	14
  2234  0018                     _T1CON	set	24
  2235  0017                     _TMR1H	set	23
  2236  0016                     _TMR1L	set	22
  2237  005F                     _GIE	set	95
  2238  005E                     _PEIE	set	94
  2239  0060                     _RA0	set	96
  2240  0061                     _RA1	set	97
  2241  0062                     _RA2	set	98
  2242  0068                     _RB0	set	104
  2243  0070                     _RC0	set	112
  2244  0071                     _RC1	set	113
  2245  0073                     _RC3	set	115
  2246  0074                     _RC4	set	116
  2247  0075                     _RC5	set	117
  2248  0088                     _TMR1IF	set	136
  2249  0099                     _OSCCON	set	153
  2250  008C                     _TRISA	set	140
  2251  008D                     _TRISB	set	141
  2252  008E                     _TRISC	set	142
  2253  0488                     _TMR1IE	set	1160
  2254  010C                     _LATA	set	268
  2255  010D                     _LATB	set	269
  2256  010E                     _LATC	set	270
  2257  018C                     _ANSELA	set	396
  2258  018D                     _ANSELB	set	397
  2259  018E                     _ANSELC	set	398
  2260  0192                     _PMADRH	set	402
  2261  0191                     _PMADRL	set	401
  2262  0196                     _PMCON2	set	406
  2263  0194                     _PMDATH	set	404
  2264  0193                     _PMDATL	set	403
  2265  0CAE                     _CFGS	set	3246
  2266  0CAC                     _FREE	set	3244
  2267  0CAD                     _LWLO	set	3245
  2268  0CA8                     _RD	set	3240
  2269  0CA9                     _WR	set	3241
  2270  0CAA                     _WREN	set	3242
  2271  020D                     _WPUB	set	525
  2272                           
  2273                           ; #config settings
  2274  0000                     
  2275                           	psect	cinit
  2276  0018                     start_initialization:	
  2277  0018                     __initialization:	
  2278                           
  2279                           ; Clear objects allocated to BITCOMMON
  2280  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2281                           
  2282                           ; Clear objects allocated to BANK0
  2283  0019  3020               	movlw	low __pbssBANK0
  2284  001A  0084               	movwf	4
  2285  001B  3000               	movlw	high __pbssBANK0
  2286  001C  0085               	movwf	5
  2287  001D  303C               	movlw	60
  2288  001E  318E  2653  3180   	fcall	clear_ram0
  2289                           
  2290                           ; Clear objects allocated to BANK1
  2291  0021  30A0               	movlw	low __pbssBANK1
  2292  0022  0084               	movwf	4
  2293  0023  3000               	movlw	high __pbssBANK1
  2294  0024  0085               	movwf	5
  2295  0025  3043               	movlw	67
  2296  0026  318E  2653  3180   	fcall	clear_ram0
  2297                           
  2298                           ; Initialize objects allocated to BANK2
  2299  0029  30A5               	movlw	low __pidataBANK2
  2300  002A  0084               	movwf	4
  2301  002B  3083               	movlw	(high __pidataBANK2)| (0+128)
  2302  002C  0085               	movwf	5
  2303  002D  3020               	movlw	low __pdataBANK2
  2304  002E  0086               	movwf	6
  2305  002F  3001               	movlw	high __pdataBANK2
  2306  0030  0087               	movwf	7
  2307  0031  3020               	movlw	32
  2308  0032  318E  264D         	fcall	init_ram
  2309  0034                     end_of_initialization:	
  2310                           ;End of C runtime variable initialization code
  2311                           
  2312  0034                     __end_of__initialization:	
  2313  0034  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2314  0035  0020               	movlb	0
  2315  0036  3187  2F7A         	ljmp	_main	;jump to C main() function
  2316                           
  2317                           	psect	bitbssCOMMON
  2318  03E0                     __pbitbssCOMMON:	
  2319  03E0                     _Receive_OK:	
  2320  03E0                     	ds	1
  2321  03E1                     _Transceive_OK:	
  2322  03E1                     	ds	1
  2323                           
  2324                           	psect	bssBANK0
  2325  0020                     __pbssBANK0:	
  2326  0020                     _u1:	
  2327  0020                     	ds	16
  2328  0030                     _RF1:	
  2329  0030                     	ds	15
  2330  003F                     _myMain:	
  2331  003F                     	ds	13
  2332  004C                     _Timer1:	
  2333  004C                     	ds	3
  2334  004F                     _RF_Count:	
  2335  004F                     	ds	2
  2336  0051                     _CRC:	
  2337  0051                     	ds	1
  2338  0052                     _Cmd:	
  2339  0052                     	ds	1
  2340  0053                     _Light:	
  2341  0053                     	ds	1
  2342  0054                     _RSSI:	
  2343  0054                     	ds	1
  2344  0055                     _Rx_Length:	
  2345  0055                     	ds	1
  2346  0056                     _SPI0Buffer:	
  2347  0056                     	ds	1
  2348  0057                     _SwDetect:	
  2349  0057                     	ds	1
  2350  0058                     _Tx_Length:	
  2351  0058                     	ds	1
  2352  0059                     _r_address:	
  2353  0059                     	ds	1
  2354  005A                     _r_data:	
  2355  005A                     	ds	1
  2356  005B                     _s_data:	
  2357  005B                     	ds	1
  2358                           
  2359                           	psect	bssBANK1
  2360  00A0                     __pbssBANK1:	
  2361  00A0                     _RF_Data:	
  2362  00A0                     	ds	30
  2363  00BE                     _Memory:	
  2364  00BE                     	ds	37
  2365                           
  2366                           	psect	dataBANK2
  2367  0120                     __pdataBANK2:	
  2368  0120                     __product:	
  2369  0120                     	ds	32
  2370                           
  2371                           	psect	clrtext
  2372  0E53                     clear_ram0:	
  2373                           ;	Called with FSR0 containing the base address, and
  2374                           ;	WREG with the size to clear
  2375                           
  2376  0E53  0064               	clrwdt	;clear the watchdog before getting into this loop
  2377  0E54                     clrloop0:	
  2378  0E54  0180               	clrf	0	;clear RAM location pointed to by FSR
  2379  0E55  3101               	addfsr 0,1
  2380  0E56  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2381  0E57  2E54               	goto	clrloop0	;have we reached the end yet?
  2382  0E58  3400               	retlw	0	;all done for this memory range, return
  2383                           
  2384                           	psect	inittext
  2385  0E4D                     init_ram:	
  2386  0E4D  00FE               	movwf	126
  2387  0E4E                     initloop:	
  2388  0E4E  0012               	moviw fsr0++
  2389  0E4F  001E               	movwi fsr1++
  2390  0E50  0BFE               	decfsz	126,f
  2391  0E51  2E4E               	goto	initloop
  2392  0E52  3400               	retlw	0
  2393                           
  2394                           	psect	cstackCOMMON
  2395  0070                     __pcstackCOMMON:	
  2396  0070                     ?_CC2500_WriteCommand:	
  2397  0070                     ?_RF_Timeout_Counter:	
  2398                           ; 0 bytes @ 0x0
  2399                           
  2400  0070                     ?_setRF_TimeoutCleared:	
  2401                           ; 0 bytes @ 0x0
  2402                           
  2403  0070                     ?_CC2500_WriteByte:	
  2404                           ; 0 bytes @ 0x0
  2405                           
  2406  0070                     ?_CC2500_ReadStatus:	
  2407                           ; 0 bytes @ 0x0
  2408                           
  2409  0070                     ?_CC2500_ReadByte:	
  2410                           ; 0 bytes @ 0x0
  2411                           
  2412  0070                     ?_CC2500_PowerRST:	
  2413                           ; 0 bytes @ 0x0
  2414                           
  2415  0070                     ?_CC2500_InitSetREG:	
  2416                           ; 0 bytes @ 0x0
  2417                           
  2418  0070                     ?_CC2500_InitPATable:	
  2419                           ; 0 bytes @ 0x0
  2420                           
  2421  0070                     ?_CC2500_ClearTXFIFO:	
  2422                           ; 0 bytes @ 0x0
  2423                           
  2424  0070                     ?_CC2500_ClearRXFIFO:	
  2425                           ; 0 bytes @ 0x0
  2426                           
  2427  0070                     ?_CC2500_FrequencyCabr:	
  2428                           ; 0 bytes @ 0x0
  2429                           
  2430  0070                     ?_CC2500_SIDLEMode:	
  2431                           ; 0 bytes @ 0x0
  2432                           
  2433  0070                     ?_Fosc_Set:	
  2434                           ; 0 bytes @ 0x0
  2435                           
  2436  0070                     ?_IO_Set:	
  2437                           ; 0 bytes @ 0x0
  2438                           
  2439  0070                     ?_TMR1_Set:	
  2440                           ; 0 bytes @ 0x0
  2441                           
  2442  0070                     ?_TMR1_ISR:	
  2443                           ; 0 bytes @ 0x0
  2444                           
  2445  0070                     ??_TMR1_ISR:	
  2446                           ; 0 bytes @ 0x0
  2447                           
  2448  0070                     ?_Flash_Memory_Write:	
  2449                           ; 0 bytes @ 0x0
  2450                           
  2451  0070                     ?_Flash_Memory_Modify:	
  2452                           ; 0 bytes @ 0x0
  2453                           
  2454  0070                     ?_myMain_Initialization:	
  2455                           ; 0 bytes @ 0x0
  2456                           
  2457  0070                     ?_RF_Initialization:	
  2458                           ; 0 bytes @ 0x0
  2459                           
  2460  0070                     ?_myUARTtoRF_Initialization:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0070                     ?_my_MainTimer:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0070                     ?_RF_Main:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0070                     ?_myUARTtoRF_Main:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0070                     ?_Exception_Main:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0070                     ?_setRF_Initialization:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0070                     ?_setRF_Main:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0070                     ?_RF_RxDisable:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0070                     ?_getRxData:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_setLog_Code:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_setControl_Lights_Table:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_uartC_LED:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_uartC_Button:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_uartC_timer1_reset:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_CC2500_TxData:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_CC2500_RxData:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_CC2500_PowerOnInitial:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_Mcu_Initialization:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_ISR:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ??_ISR:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_Flash_Memory_Initialization:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_Flash_Memory_Main:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_Flash_Memory_Unlock:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_Flash_Memory_Erasing:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_setMemory_Modify:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_setMemory_LoopSave:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_setRF_Learn:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_setTxData:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_uartC_LED_start:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_uartC_switch_control:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_Flash_Memory_Read:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_getMain_All_LightsStatus:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556  0070                     ?_getMain_All_Error_Status:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0070                     ?_uartC_LED_close:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  0070                     getMain_All_Error_Status@command:	
  2563                           ; 2 bytes @ 0x0
  2564                           
  2565                           
  2566                           ; 1 bytes @ 0x0
  2567  0070                     	ds	1
  2568  0071                     ??_RF_Timeout_Counter:	
  2569  0071                     ??_setRF_TimeoutCleared:	
  2570                           ; 0 bytes @ 0x1
  2571                           
  2572  0071                     ??_CC2500_WriteByte:	
  2573                           ; 0 bytes @ 0x1
  2574                           
  2575  0071                     ??_CC2500_ReadByte:	
  2576                           ; 0 bytes @ 0x1
  2577                           
  2578  0071                     ?_DelayTime_1us:	
  2579                           ; 0 bytes @ 0x1
  2580                           
  2581  0071                     ??_Fosc_Set:	
  2582                           ; 0 bytes @ 0x1
  2583                           
  2584  0071                     ??_IO_Set:	
  2585                           ; 0 bytes @ 0x1
  2586                           
  2587  0071                     ??_TMR1_Set:	
  2588                           ; 0 bytes @ 0x1
  2589                           
  2590  0071                     ??_Flash_Memory_Read:	
  2591                           ; 0 bytes @ 0x1
  2592                           
  2593  0071                     ?_setMemory_Data:	
  2594                           ; 0 bytes @ 0x1
  2595                           
  2596  0071                     ??_Flash_Memory_Write:	
  2597                           ; 0 bytes @ 0x1
  2598                           
  2599  0071                     ??_getMain_All_LightsStatus:	
  2600                           ; 0 bytes @ 0x1
  2601                           
  2602  0071                     ??_myMain_Initialization:	
  2603                           ; 0 bytes @ 0x1
  2604                           
  2605  0071                     ??_myUARTtoRF_Initialization:	
  2606                           ; 0 bytes @ 0x1
  2607                           
  2608  0071                     ??_my_MainTimer:	
  2609                           ; 0 bytes @ 0x1
  2610                           
  2611  0071                     ??_setRF_Initialization:	
  2612                           ; 0 bytes @ 0x1
  2613                           
  2614  0071                     ??_uartC_LED_close:	
  2615                           ; 0 bytes @ 0x1
  2616                           
  2617  0071                     ??_uartC_timer1_reset:	
  2618                           ; 0 bytes @ 0x1
  2619                           
  2620  0071                     ??_Mcu_Initialization:	
  2621                           ; 0 bytes @ 0x1
  2622                           
  2623  0071                     ??_Flash_Memory_Unlock:	
  2624                           ; 0 bytes @ 0x1
  2625                           
  2626  0071                     ??_Flash_Memory_Erasing:	
  2627                           ; 0 bytes @ 0x1
  2628                           
  2629  0071                     ??_setMemory_Modify:	
  2630                           ; 0 bytes @ 0x1
  2631                           
  2632  0071                     ??_setMemory_LoopSave:	
  2633                           ; 0 bytes @ 0x1
  2634                           
  2635  0071                     ??_getMain_All_Error_Status:	
  2636                           ; 0 bytes @ 0x1
  2637                           
  2638  0071                     ?_setProductData:	
  2639                           ; 0 bytes @ 0x1
  2640                           
  2641  0071                     ?_setCmd_Status:	
  2642                           ; 0 bytes @ 0x1
  2643                           
  2644  0071                     ??_setRF_Learn:	
  2645                           ; 0 bytes @ 0x1
  2646                           
  2647  0071                     ??_setTxData:	
  2648                           ; 0 bytes @ 0x1
  2649                           
  2650  0071                     ??_uartC_LED_start:	
  2651                           ; 0 bytes @ 0x1
  2652                           
  2653  0071                     ?___awdiv:	
  2654                           ; 0 bytes @ 0x1
  2655                           
  2656  0071                     ?___lwdiv:	
  2657                           ; 2 bytes @ 0x1
  2658                           
  2659  0071                     setMemory_Data@data:	
  2660                           ; 2 bytes @ 0x1
  2661                           
  2662  0071                     getMain_All_LightsStatus@status:	
  2663                           ; 1 bytes @ 0x1
  2664                           
  2665  0071                     getMain_All_Error_Status@status:	
  2666                           ; 1 bytes @ 0x1
  2667                           
  2668  0071                     setProductData@value:	
  2669                           ; 1 bytes @ 0x1
  2670                           
  2671  0071                     setCmd_Status@cmd:	
  2672                           ; 1 bytes @ 0x1
  2673                           
  2674  0071                     DelayTime_1us@count:	
  2675                           ; 1 bytes @ 0x1
  2676                           
  2677  0071                     ___awdiv@divisor:	
  2678                           ; 2 bytes @ 0x1
  2679                           
  2680  0071                     ___lwdiv@divisor:	
  2681                           ; 2 bytes @ 0x1
  2682                           
  2683                           
  2684                           ; 2 bytes @ 0x1
  2685  0071                     	ds	1
  2686  0072                     ??_setMemory_Data:	
  2687  0072                     ??_RF_Initialization:	
  2688                           ; 0 bytes @ 0x2
  2689                           
  2690  0072                     ??_Exception_Main:	
  2691                           ; 0 bytes @ 0x2
  2692                           
  2693  0072                     ??_setProductData:	
  2694                           ; 0 bytes @ 0x2
  2695                           
  2696  0072                     ??_setCmd_Status:	
  2697                           ; 0 bytes @ 0x2
  2698                           
  2699  0072                     CC2500_WriteByte@loop_a:	
  2700                           ; 0 bytes @ 0x2
  2701                           
  2702  0072                     CC2500_ReadByte@loop_b:	
  2703                           ; 1 bytes @ 0x2
  2704                           
  2705  0072                     Flash_Memory_Read@i:	
  2706                           ; 1 bytes @ 0x2
  2707                           
  2708  0072                     Flash_Memory_Write@i:	
  2709                           ; 1 bytes @ 0x2
  2710                           
  2711  0072                     setMemory_Modify@command:	
  2712                           ; 1 bytes @ 0x2
  2713                           
  2714  0072                     setMemory_LoopSave@command:	
  2715                           ; 1 bytes @ 0x2
  2716                           
  2717  0072                     setRF_Learn@command:	
  2718                           ; 1 bytes @ 0x2
  2719                           
  2720  0072                     setTxData@value:	
  2721                           ; 1 bytes @ 0x2
  2722                           
  2723                           
  2724                           ; 1 bytes @ 0x2
  2725  0072                     	ds	1
  2726  0073                     ??_CC2500_WriteCommand:	
  2727  0073                     ??_CC2500_ReadStatus:	
  2728                           ; 0 bytes @ 0x3
  2729                           
  2730  0073                     ??_DelayTime_1us:	
  2731                           ; 0 bytes @ 0x3
  2732                           
  2733  0073                     ?_CC2500_WriteREG:	
  2734                           ; 0 bytes @ 0x3
  2735                           
  2736  0073                     CC2500_WriteREG@value:	
  2737                           ; 0 bytes @ 0x3
  2738                           
  2739  0073                     Flash_Memory_Read@address:	
  2740                           ; 1 bytes @ 0x3
  2741                           
  2742  0073                     setMemory_Data@address:	
  2743                           ; 1 bytes @ 0x3
  2744                           
  2745  0073                     Exception_Main@lights:	
  2746                           ; 1 bytes @ 0x3
  2747                           
  2748  0073                     setProductData@address:	
  2749                           ; 1 bytes @ 0x3
  2750                           
  2751  0073                     setCmd_Status@number:	
  2752                           ; 1 bytes @ 0x3
  2753                           
  2754  0073                     uartC_LED_start@time_ms:	
  2755                           ; 1 bytes @ 0x3
  2756                           
  2757  0073                     DelayTime_1us@i:	
  2758                           ; 1 bytes @ 0x3
  2759                           
  2760  0073                     ___awdiv@dividend:	
  2761                           ; 2 bytes @ 0x3
  2762                           
  2763  0073                     ___lwdiv@dividend:	
  2764                           ; 2 bytes @ 0x3
  2765                           
  2766                           
  2767                           ; 2 bytes @ 0x3
  2768  0073                     	ds	1
  2769  0074                     ??_CC2500_WriteREG:	
  2770  0074                     ??_setLog_Code:	
  2771                           ; 0 bytes @ 0x4
  2772                           
  2773  0074                     ??_setControl_Lights_Table:	
  2774                           ; 0 bytes @ 0x4
  2775                           
  2776  0074                     ??_uartC_switch_control:	
  2777                           ; 0 bytes @ 0x4
  2778                           
  2779  0074                     CC2500_WriteCommand@command:	
  2780                           ; 0 bytes @ 0x4
  2781                           
  2782  0074                     CC2500_ReadStatus@status_addr:	
  2783                           ; 1 bytes @ 0x4
  2784                           
  2785  0074                     Flash_Memory_Read@ret:	
  2786                           ; 1 bytes @ 0x4
  2787                           
  2788  0074                     Exception_Main@count:	
  2789                           ; 1 bytes @ 0x4
  2790                           
  2791                           
  2792                           ; 1 bytes @ 0x4
  2793  0074                     	ds	1
  2794  0075                     ??_CC2500_ClearTXFIFO:	
  2795  0075                     ??_CC2500_ClearRXFIFO:	
  2796                           ; 0 bytes @ 0x5
  2797                           
  2798  0075                     ??_CC2500_SIDLEMode:	
  2799                           ; 0 bytes @ 0x5
  2800                           
  2801  0075                     ??_Flash_Memory_Modify:	
  2802                           ; 0 bytes @ 0x5
  2803                           
  2804  0075                     ??_RF_RxDisable:	
  2805                           ; 0 bytes @ 0x5
  2806                           
  2807  0075                     ??_getRxData:	
  2808                           ; 0 bytes @ 0x5
  2809                           
  2810  0075                     ??_CC2500_TxData:	
  2811                           ; 0 bytes @ 0x5
  2812                           
  2813  0075                     ??_CC2500_RxData:	
  2814                           ; 0 bytes @ 0x5
  2815                           
  2816  0075                     ??_Flash_Memory_Initialization:	
  2817                           ; 0 bytes @ 0x5
  2818                           
  2819  0075                     ??___awdiv:	
  2820                           ; 0 bytes @ 0x5
  2821                           
  2822  0075                     ??___lwdiv:	
  2823                           ; 0 bytes @ 0x5
  2824                           
  2825  0075                     CC2500_WriteREG@w_addr:	
  2826                           ; 0 bytes @ 0x5
  2827                           
  2828  0075                     Exception_Main@status:	
  2829                           ; 1 bytes @ 0x5
  2830                           
  2831  0075                     DelayTime_1us@j:	
  2832                           ; 1 bytes @ 0x5
  2833                           
  2834                           
  2835                           ; 2 bytes @ 0x5
  2836  0075                     	ds	1
  2837  0076                     ??_CC2500_InitSetREG:	
  2838  0076                     ??_CC2500_InitPATable:	
  2839                           ; 0 bytes @ 0x6
  2840                           
  2841  0076                     CC2500_TxData@loop_e:	
  2842                           ; 0 bytes @ 0x6
  2843                           
  2844  0076                     CC2500_RxData@loop_f:	
  2845                           ; 1 bytes @ 0x6
  2846                           
  2847  0076                     Flash_Memory_Initialization@value:	
  2848                           ; 1 bytes @ 0x6
  2849                           
  2850  0076                     Flash_Memory_Modify@i:	
  2851                           ; 1 bytes @ 0x6
  2852                           
  2853  0076                     Exception_Main@error:	
  2854                           ; 1 bytes @ 0x6
  2855                           
  2856  0076                     getRxData@error:	
  2857                           ; 1 bytes @ 0x6
  2858                           
  2859  0076                     ___awdiv@counter:	
  2860                           ; 1 bytes @ 0x6
  2861                           
  2862  0076                     ___lwdiv@quotient:	
  2863                           ; 1 bytes @ 0x6
  2864                           
  2865                           
  2866                           ; 2 bytes @ 0x6
  2867  0076                     	ds	1
  2868  0077                     ??_CC2500_PowerRST:	
  2869  0077                     ??_CC2500_FrequencyCabr:	
  2870                           ; 0 bytes @ 0x7
  2871                           
  2872  0077                     ??_Flash_Memory_Main:	
  2873                           ; 0 bytes @ 0x7
  2874                           
  2875  0077                     CC2500_InitSetREG@temp1:	
  2876                           ; 0 bytes @ 0x7
  2877                           
  2878  0077                     CC2500_InitPATable@temp:	
  2879                           ; 1 bytes @ 0x7
  2880                           
  2881  0077                     Flash_Memory_Main@key_Status:	
  2882                           ; 1 bytes @ 0x7
  2883                           
  2884  0077                     ___awdiv@sign:	
  2885                           ; 1 bytes @ 0x7
  2886                           
  2887                           
  2888                           ; 1 bytes @ 0x7
  2889  0077                     	ds	1
  2890  0078                     CC2500_InitSetREG@temp2:	
  2891  0078                     CC2500_InitPATable@loop_d:	
  2892                           ; 1 bytes @ 0x8
  2893                           
  2894  0078                     _Flash_Memory_Main$1339:	
  2895                           ; 1 bytes @ 0x8
  2896                           
  2897  0078                     ___lwdiv@counter:	
  2898                           ; 1 bytes @ 0x8
  2899                           
  2900  0078                     ___awdiv@quotient:	
  2901                           ; 1 bytes @ 0x8
  2902                           
  2903                           
  2904                           ; 2 bytes @ 0x8
  2905  0078                     	ds	1
  2906  0079                     CC2500_InitSetREG@loop_c:	
  2907                           
  2908                           ; 1 bytes @ 0x9
  2909  0079                     	ds	1
  2910  007A                     ??_setRF_Main:	
  2911  007A                     ??_uartC_LED:	
  2912                           ; 0 bytes @ 0xA
  2913                           
  2914  007A                     ?_uartC_timer1:	
  2915                           ; 0 bytes @ 0xA
  2916                           
  2917  007A                     ??_CC2500_PowerOnInitial:	
  2918                           ; 0 bytes @ 0xA
  2919                           
  2920  007A                     setRF_Main@error:	
  2921                           ; 0 bytes @ 0xA
  2922                           
  2923  007A                     uartC_timer1@time_ms:	
  2924                           ; 1 bytes @ 0xA
  2925                           
  2926                           
  2927                           ; 2 bytes @ 0xA
  2928  007A                     	ds	1
  2929  007B                     ??_RF_Main:	
  2930                           
  2931                           ; 0 bytes @ 0xB
  2932  007B                     	ds	1
  2933  007C                     ??_uartC_timer1:	
  2934  007C                     ??_main:	
  2935                           ; 0 bytes @ 0xC
  2936                           
  2937                           
  2938                           	psect	cstackBANK0
  2939  005C                     __pcstackBANK0:	
  2940                           ; 0 bytes @ 0xC
  2941                           
  2942  005C                     ??_uartC_Button:	
  2943                           
  2944                           ; 0 bytes @ 0x0
  2945  005C                     	ds	1
  2946  005D                     ??_myUARTtoRF_Main:	
  2947                           
  2948                           ; 0 bytes @ 0x1
  2949  005D                     	ds	1
  2950  005E                     ?_main:	
  2951  005E                     main@argc:	
  2952                           ; 2 bytes @ 0x2
  2953                           
  2954                           
  2955                           ; 2 bytes @ 0x2
  2956  005E                     	ds	2
  2957  0060                     main@argv:	
  2958                           
  2959                           ; 2 bytes @ 0x4
  2960  0060                     	ds	2
  2961                           
  2962                           	psect	maintext
  2963  077A                     __pmaintext:	
  2964 ;;
  2965 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2966 ;;
  2967 ;; *************** function _main *****************
  2968 ;; Defined at:
  2969 ;;		line 7 in file "../src/Main_B1.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;  argc            2    2[BANK0 ] int 
  2972 ;;  argv            2    4[BANK0 ] PTR PTR unsigned char 
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;		None
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  2    2[BANK0 ] int 
  2977 ;; Registers used:
  2978 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2979 ;; Tracked objects:
  2980 ;;		On entry : 17F/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2984 ;;      Params:         0       4       0       0       0       0       0       0
  2985 ;;      Locals:         0       0       0       0       0       0       0       0
  2986 ;;      Temps:          0       0       0       0       0       0       0       0
  2987 ;;      Totals:         0       4       0       0       0       0       0       0
  2988 ;;Total ram usage:        4 bytes
  2989 ;; Hardware stack levels required when called:    8
  2990 ;; This function calls:
  2991 ;;		_CC2500_PowerOnInitial
  2992 ;;		_Exception_Main
  2993 ;;		_Flash_Memory_Initialization
  2994 ;;		_Flash_Memory_Main
  2995 ;;		_Mcu_Initialization
  2996 ;;		_RF_Initialization
  2997 ;;		_RF_Main
  2998 ;;		_myMain_Initialization
  2999 ;;		_myUARTtoRF_Initialization
  3000 ;;		_myUARTtoRF_Main
  3001 ;;		_my_MainTimer
  3002 ;; This function is called by:
  3003 ;;		Startup code after reset
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           
  3008                           ;psect for function _main
  3009  077A                     _main:	
  3010                           
  3011                           ;Main_B1.c: 8: myMain_Initialization();
  3012                           
  3013                           ;incstack = 0
  3014                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3015  077A  318E  26BE  3187   	fcall	_myMain_Initialization
  3016                           
  3017                           ;Main_B1.c: 9: Mcu_Initialization();
  3018  077D  318E  2662  3187   	fcall	_Mcu_Initialization
  3019                           
  3020                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3021  0780  3182  2272  3187   	fcall	_Flash_Memory_Initialization
  3022                           
  3023                           ;Main_B1.c: 11: ;;
  3024                           ;Main_B1.c: 12: ;;
  3025                           ;Main_B1.c: 14: ;;
  3026                           ;Main_B1.c: 15: ;;
  3027                           ;Main_B1.c: 16: ;;
  3028                           ;Main_B1.c: 17: ;;
  3029                           ;Main_B1.c: 18: ;;
  3030                           ;Main_B1.c: 20: ;;
  3031                           ;Main_B1.c: 21: ;;
  3032                           ;Main_B1.c: 22: ;;
  3033                           ;Main_B1.c: 23: ;;
  3034                           ;Main_B1.c: 24: ;;
  3035                           ;Main_B1.c: 25: RF_Initialization();
  3036  0783  318E  2624  3187   	fcall	_RF_Initialization
  3037                           
  3038                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3039  0786  318F  273B  3187   	fcall	_CC2500_PowerOnInitial
  3040                           
  3041                           ;Main_B1.c: 27: ;;
  3042                           ;Main_B1.c: 28: myUARTtoRF_Initialization();
  3043  0789  318E  2642  3187   	fcall	_myUARTtoRF_Initialization
  3044  078C                     l714:	
  3045                           ;Main_B1.c: 30: while (1) {
  3046                           
  3047                           
  3048                           ;Main_B1.c: 57: }
  3049                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  3050  078C  0020               	movlb	0	; select bank0
  3051  078D  1C4C               	btfss	_Timer1,0
  3052  078E  2F8C               	goto	l714
  3053                           
  3054                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  3055  078F  104C               	bcf	_Timer1,0
  3056                           
  3057                           ;Main_B1.c: 96: my_MainTimer();
  3058  0790  3186  26C6  3187   	fcall	_my_MainTimer
  3059                           
  3060                           ;Main_B1.c: 97: ;;
  3061                           ;Main_B1.c: 98: ;;
  3062                           ;Main_B1.c: 99: ;;
  3063                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  3064  0793  0020               	movlb	0	; select bank0
  3065  0794  1C3F               	btfss	_myMain,0
  3066  0795  2F8C               	goto	l714
  3067                           
  3068                           ;Main_B1.c: 101: Flash_Memory_Main();
  3069  0796  3186  2691  3187   	fcall	_Flash_Memory_Main
  3070                           
  3071                           ;Main_B1.c: 103: ;;
  3072                           ;Main_B1.c: 104: ;;
  3073                           ;Main_B1.c: 106: ;;
  3074                           ;Main_B1.c: 107: ;;
  3075                           ;Main_B1.c: 108: ;;
  3076                           ;Main_B1.c: 109: ;;
  3077                           ;Main_B1.c: 111: ;;
  3078                           ;Main_B1.c: 112: ;;
  3079                           ;Main_B1.c: 113: ;;
  3080                           ;Main_B1.c: 114: ;;
  3081                           ;Main_B1.c: 115: ;;
  3082                           ;Main_B1.c: 117: RF_Main();
  3083  0799  318E  2627  3187   	fcall	_RF_Main
  3084                           
  3085                           ;Main_B1.c: 118: ;;
  3086                           ;Main_B1.c: 119: ;;
  3087                           ;Main_B1.c: 120: myUARTtoRF_Main();
  3088  079C  3183  2384  3187   	fcall	_myUARTtoRF_Main
  3089                           
  3090                           ;Main_B1.c: 121: Exception_Main();
  3091  079F  318F  2765  3187   	fcall	_Exception_Main
  3092  07A2  2F8C               	goto	l714
  3093  07A3                     __end_of_main:	
  3094                           ;Main_B1.c: 128: }
  3095                           ;Main_B1.c: 129: }
  3096                           ;Main_B1.c: 163: }
  3097                           ;Main_B1.c: 164: return (0);
  3098                           ;	Return value of _main is never used
  3099                           
  3100                           
  3101                           	psect	text1
  3102  06C6                     __ptext1:	
  3103 ;; *************** function _my_MainTimer *****************
  3104 ;; Defined at:
  3105 ;;		line 185 in file "../src/Main_B1.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;		None
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;		None
  3110 ;; Return value:  Size  Location     Type
  3111 ;;		None               void
  3112 ;; Registers used:
  3113 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3119 ;;      Params:         0       0       0       0       0       0       0       0
  3120 ;;      Locals:         0       0       0       0       0       0       0       0
  3121 ;;      Temps:          1       0       0       0       0       0       0       0
  3122 ;;      Totals:         1       0       0       0       0       0       0       0
  3123 ;;Total ram usage:        1 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    2
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_main
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           
  3134                           ;psect for function _my_MainTimer
  3135  06C6                     _my_MainTimer:	
  3136                           
  3137                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  3138                           
  3139                           ;incstack = 0
  3140                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0]
  3141  06C6  0020               	movlb	0	; select bank0
  3142  06C7  183F               	btfsc	_myMain,0
  3143  06C8  2ED5               	goto	l3731
  3144                           
  3145                           ;Main_B1.c: 188: myMain.PowerCount++;
  3146  06C9  3001               	movlw	1
  3147  06CA  00F1               	movwf	??_my_MainTimer
  3148  06CB  0871               	movf	??_my_MainTimer,w
  3149  06CC  07C0               	addwf	_myMain+1,f
  3150                           
  3151                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  3152  06CD  0840               	movf	_myMain+1,w
  3153  06CE  3A4B               	xorlw	75
  3154  06CF  1D03               	skipz
  3155  06D0  0008               	return
  3156                           
  3157                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  3158  06D1  01C0               	clrf	_myMain+1
  3159                           
  3160                           ;Main_B1.c: 191: myMain.PowerON = 1;
  3161  06D2  143F               	bsf	_myMain,0
  3162                           
  3163                           ;Main_B1.c: 196: ;;
  3164                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  3165  06D3  163F               	bsf	_myMain,4
  3166                           
  3167                           ;Main_B1.c: 206: }
  3168                           ;Main_B1.c: 207: } else {
  3169  06D4  0008               	return
  3170  06D5                     l3731:	
  3171                           
  3172                           ;Main_B1.c: 208: myMain.PowerCount++;
  3173  06D5  3001               	movlw	1
  3174  06D6  00F1               	movwf	??_my_MainTimer
  3175  06D7  0871               	movf	??_my_MainTimer,w
  3176  06D8  07C0               	addwf	_myMain+1,f
  3177                           
  3178                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  3179  06D9  0840               	movf	_myMain+1,w
  3180  06DA  3A32               	xorlw	50
  3181  06DB  1903               	btfsc	3,2
  3182                           
  3183                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  3184  06DC  01C0               	clrf	_myMain+1
  3185                           
  3186                           ;Main_B1.c: 226: }
  3187                           ;Main_B1.c: 228: myMain.Count1++;
  3188  06DD  3001               	movlw	1
  3189  06DE  07C3               	addwf	_myMain+4,f
  3190  06DF  3000               	movlw	0
  3191  06E0  3DC4               	addwfc	_myMain+5,f
  3192                           
  3193                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  3194  06E1  3004               	movlw	4
  3195  06E2  3E3F               	addlw	_myMain& (0+255)
  3196  06E3  0086               	movwf	6
  3197  06E4  0187               	clrf	7
  3198  06E5  3F40               	moviw [0]fsr1
  3199  06E6  3A32               	xorlw	50
  3200  06E7  1D03               	skipz
  3201  06E8  2EEB               	goto	u2615
  3202  06E9  3F41               	moviw [1]fsr1
  3203  06EA  3A00               	xorlw	0
  3204  06EB                     u2615:	
  3205  06EB  1D03               	skipz
  3206  06EC  0008               	return
  3207                           
  3208                           ;Main_B1.c: 230: myMain.Count1 = 0;
  3209  06ED  01C3               	clrf	_myMain+4
  3210  06EE  01C4               	clrf	_myMain+5
  3211                           
  3212                           ;Main_B1.c: 242: if (myMain.Flag) {
  3213  06EF  1CBF               	btfss	_myMain,1
  3214  06F0  2EF3               	goto	l730
  3215                           
  3216                           ;Main_B1.c: 243: myMain.Flag = 0;
  3217  06F1  10BF               	bcf	_myMain,1
  3218                           
  3219                           ;Main_B1.c: 252: } else {
  3220  06F2  0008               	return
  3221  06F3                     l730:	
  3222                           
  3223                           ;Main_B1.c: 253: myMain.Flag = 1;
  3224  06F3  14BF               	bsf	_myMain,1
  3225  06F4  0008               	return
  3226  06F5                     __end_of_my_MainTimer:	
  3227                           
  3228                           	psect	text2
  3229  0384                     __ptext2:	
  3230 ;; *************** function _myUARTtoRF_Main *****************
  3231 ;; Defined at:
  3232 ;;		line 25 in file "../src/myUARTtoRF.c"
  3233 ;; Parameters:    Size  Location     Type
  3234 ;;		None
  3235 ;; Auto vars:     Size  Location     Type
  3236 ;;		None
  3237 ;; Return value:  Size  Location     Type
  3238 ;;		None               void
  3239 ;; Registers used:
  3240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3241 ;; Tracked objects:
  3242 ;;		On entry : 0/0
  3243 ;;		On exit  : 0/0
  3244 ;;		Unchanged: 0/0
  3245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3246 ;;      Params:         0       0       0       0       0       0       0       0
  3247 ;;      Locals:         0       0       0       0       0       0       0       0
  3248 ;;      Temps:          0       1       0       0       0       0       0       0
  3249 ;;      Totals:         0       1       0       0       0       0       0       0
  3250 ;;Total ram usage:        1 bytes
  3251 ;; Hardware stack levels used:    1
  3252 ;; Hardware stack levels required when called:    6
  3253 ;; This function calls:
  3254 ;;		_setRF_Learn
  3255 ;;		_uartC_Button
  3256 ;;		_uartC_LED
  3257 ;; This function is called by:
  3258 ;;		_main
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           
  3263                           ;psect for function _myUARTtoRF_Main
  3264  0384                     _myUARTtoRF_Main:	
  3265                           
  3266                           ;myUARTtoRF.c: 27: uartC_LED();
  3267                           
  3268                           ;incstack = 0
  3269                           ; Regs used in _myUARTtoRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3270  0384  3187  274F  3183   	fcall	_uartC_LED
  3271                           
  3272                           ;myUARTtoRF.c: 28: uartC_Button();
  3273  0387  3186  26F5  3183   	fcall	_uartC_Button
  3274                           
  3275                           ;myUARTtoRF.c: 30: if (u1.switch_Mode2 == 1) {
  3276  038A  0020               	movlb	0	; select bank0
  3277  038B  1E21               	btfss	_u1+1,4
  3278  038C  0008               	return
  3279                           
  3280                           ;myUARTtoRF.c: 31: u1.time3++;
  3281  038D  3001               	movlw	1
  3282  038E  07A8               	addwf	_u1+8,f
  3283  038F  3000               	movlw	0
  3284  0390  3DA9               	addwfc	_u1+9,f
  3285                           
  3286                           ;myUARTtoRF.c: 32: if (u1.time3 >= 3000 / 20) {
  3287  0391  0829               	movf	_u1+9,w
  3288  0392  3A80               	xorlw	128
  3289  0393  00DD               	movwf	??_myUARTtoRF_Main
  3290  0394  3080               	movlw	128
  3291  0395  025D               	subwf	??_myUARTtoRF_Main,w
  3292  0396  1D03               	skipz
  3293  0397  2B9A               	goto	u2815
  3294  0398  3096               	movlw	150
  3295  0399  0228               	subwf	_u1+8,w
  3296  039A                     u2815:	
  3297  039A  1C03               	skipc
  3298  039B  0008               	return
  3299                           
  3300                           ;myUARTtoRF.c: 33: u1.time3 = 0;
  3301  039C  0020               	movlb	0	; select bank0
  3302  039D  01A8               	clrf	_u1+8
  3303  039E  01A9               	clrf	_u1+9
  3304                           
  3305                           ;myUARTtoRF.c: 34: u1.switch_Mode2 = 0;
  3306  039F  1221               	bcf	_u1+1,4
  3307                           
  3308                           ;myUARTtoRF.c: 35: u1.LED_Mode1 = 1;
  3309  03A0  16A0               	bsf	_u1,5
  3310                           
  3311                           ;myUARTtoRF.c: 36: setRF_Learn(0);
  3312  03A1  3000               	movlw	0
  3313  03A2  318E  26ED         	fcall	_setRF_Learn
  3314  03A4  0008               	return
  3315  03A5                     __end_of_myUARTtoRF_Main:	
  3316                           
  3317                           	psect	text3
  3318  074F                     __ptext3:	
  3319 ;; *************** function _uartC_LED *****************
  3320 ;; Defined at:
  3321 ;;		line 41 in file "../src/myUARTtoRF.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;		None
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;		None
  3326 ;; Return value:  Size  Location     Type
  3327 ;;		None               void
  3328 ;; Registers used:
  3329 ;;		wreg, status,2, status,0, pclath, cstack
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3335 ;;      Params:         0       0       0       0       0       0       0       0
  3336 ;;      Locals:         0       0       0       0       0       0       0       0
  3337 ;;      Temps:          0       0       0       0       0       0       0       0
  3338 ;;      Totals:         0       0       0       0       0       0       0       0
  3339 ;;Total ram usage:        0 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    3
  3342 ;; This function calls:
  3343 ;;		___awdiv
  3344 ;; This function is called by:
  3345 ;;		_myUARTtoRF_Main
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           
  3350                           ;psect for function _uartC_LED
  3351  074F                     _uartC_LED:	
  3352                           
  3353                           ;myUARTtoRF.c: 43: if (u1.LED_GO == 1) {
  3354                           
  3355                           ;incstack = 0
  3356                           ; Regs used in _uartC_LED: [wreg+status,2+status,0+pclath+cstack]
  3357  074F  0020               	movlb	0	; select bank0
  3358  0750  1D21               	btfss	_u1+1,2
  3359  0751  0008               	return
  3360                           
  3361                           ;myUARTtoRF.c: 44: u1.LED_Time++;
  3362  0752  3001               	movlw	1
  3363  0753  07AA               	addwf	_u1+10,f
  3364  0754  3000               	movlw	0
  3365  0755  3DAB               	addwfc	_u1+11,f
  3366                           
  3367                           ;myUARTtoRF.c: 45: if (u1.LED_Time == u1.LED_Time_Value / 20) {
  3368  0756  3014               	movlw	20
  3369  0757  00F1               	movwf	___awdiv@divisor
  3370  0758  3000               	movlw	0
  3371  0759  00F2               	movwf	___awdiv@divisor+1
  3372  075A  082D               	movf	_u1+13,w
  3373  075B  01F4               	clrf	___awdiv@dividend+1
  3374  075C  07F4               	addwf	___awdiv@dividend+1,f
  3375  075D  082C               	movf	_u1+12,w
  3376  075E  01F3               	clrf	___awdiv@dividend
  3377  075F  07F3               	addwf	___awdiv@dividend,f
  3378  0760  3185  257B  3187   	fcall	___awdiv
  3379  0763  0020               	movlb	0	; select bank0
  3380  0764  082B               	movf	_u1+11,w
  3381  0765  0672               	xorwf	?___awdiv+1,w
  3382  0766  1D03               	skipz
  3383  0767  2F6A               	goto	u2395
  3384  0768  082A               	movf	_u1+10,w
  3385  0769  0671               	xorwf	?___awdiv,w
  3386  076A                     u2395:	
  3387  076A  1D03               	skipz
  3388  076B  0008               	return
  3389                           
  3390                           ;myUARTtoRF.c: 46: u1.LED_Time = 0;
  3391  076C  01AA               	clrf	_u1+10
  3392  076D  01AB               	clrf	_u1+11
  3393                           
  3394                           ;myUARTtoRF.c: 47: RA1 = RA1 == 1 ? 0 : 1;
  3395  076E  3002               	movlw	2
  3396  076F  068C               	xorwf	12,f
  3397                           
  3398                           ;myUARTtoRF.c: 48: if (u1.switch_Mode1 == 1) {
  3399  0770  1DA1               	btfss	_u1+1,3
  3400  0771  2F74               	goto	l1399
  3401                           
  3402                           ;myUARTtoRF.c: 49: u1.switch_Mode1 = 0;
  3403  0772  11A1               	bcf	_u1+1,3
  3404                           
  3405                           ;myUARTtoRF.c: 50: u1.LED_GO = 0;
  3406  0773  1121               	bcf	_u1+1,2
  3407  0774                     l1399:	
  3408                           
  3409                           ;myUARTtoRF.c: 51: }
  3410                           ;myUARTtoRF.c: 53: if (u1.LED_Mode1 == 1) {
  3411  0774  1EA0               	btfss	_u1,5
  3412  0775  0008               	return
  3413                           
  3414                           ;myUARTtoRF.c: 54: u1.LED_Mode1 = 0;
  3415  0776  12A0               	bcf	_u1,5
  3416                           
  3417                           ;myUARTtoRF.c: 55: u1.LED_GO = 0;
  3418  0777  1121               	bcf	_u1+1,2
  3419                           
  3420                           ;myUARTtoRF.c: 56: RA1 = 1;
  3421  0778  148C               	bsf	12,1	;volatile
  3422  0779  0008               	return
  3423  077A                     __end_of_uartC_LED:	
  3424                           
  3425                           	psect	text4
  3426  06F5                     __ptext4:	
  3427 ;; *************** function _uartC_Button *****************
  3428 ;; Defined at:
  3429 ;;		line 75 in file "../src/myUARTtoRF.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;		None
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;		None
  3434 ;; Return value:  Size  Location     Type
  3435 ;;		None               void
  3436 ;; Registers used:
  3437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3443 ;;      Params:         0       0       0       0       0       0       0       0
  3444 ;;      Locals:         0       0       0       0       0       0       0       0
  3445 ;;      Temps:          0       1       0       0       0       0       0       0
  3446 ;;      Totals:         0       1       0       0       0       0       0       0
  3447 ;;Total ram usage:        1 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; Hardware stack levels required when called:    5
  3450 ;; This function calls:
  3451 ;;		_uartC_timer1
  3452 ;;		_uartC_timer1_reset
  3453 ;; This function is called by:
  3454 ;;		_myUARTtoRF_Main
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           
  3459                           ;psect for function _uartC_Button
  3460  06F5                     _uartC_Button:	
  3461                           
  3462                           ;myUARTtoRF.c: 77: if (RB0 == 0) {
  3463                           
  3464                           ;incstack = 0
  3465                           ; Regs used in _uartC_Button: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3466  06F5  0020               	movlb	0	; select bank0
  3467  06F6  180D               	btfsc	13,0	;volatile
  3468  06F7  2F0A               	goto	l1410
  3469                           
  3470                           ;myUARTtoRF.c: 79: if (u1.switch_debounce == 0) {
  3471  06F8  1BA0               	btfsc	_u1,7
  3472  06F9  2F01               	goto	l1411
  3473                           
  3474                           ;myUARTtoRF.c: 80: uartC_timer1(100);
  3475  06FA  3064               	movlw	100
  3476  06FB  00FA               	movwf	uartC_timer1@time_ms
  3477  06FC  3000               	movlw	0
  3478  06FD  00FB               	movwf	uartC_timer1@time_ms+1
  3479  06FE  3187  2723         	fcall	_uartC_timer1
  3480                           
  3481                           ;myUARTtoRF.c: 81: } else if (u1.siwtch_debounce1 == 0) {
  3482  0700  0008               	return
  3483  0701                     l1411:	
  3484  0701  1821               	btfsc	_u1+1,0
  3485  0702  0008               	return
  3486                           
  3487                           ;myUARTtoRF.c: 82: uartC_timer1(1500);
  3488  0703  30DC               	movlw	220
  3489  0704  00FA               	movwf	uartC_timer1@time_ms
  3490  0705  3005               	movlw	5
  3491  0706  00FB               	movwf	uartC_timer1@time_ms+1
  3492  0707  3187  2723         	fcall	_uartC_timer1
  3493                           
  3494                           ;myUARTtoRF.c: 83: }
  3495                           ;myUARTtoRF.c: 85: } else {
  3496  0709  0008               	return
  3497  070A                     l1410:	
  3498                           
  3499                           ;myUARTtoRF.c: 86: if (u1.switch_debounce == 1) {
  3500  070A  1FA0               	btfss	_u1,7
  3501  070B  2F20               	goto	l3885
  3502                           
  3503                           ;myUARTtoRF.c: 87: u1.time2++;
  3504  070C  3001               	movlw	1
  3505  070D  07A6               	addwf	_u1+6,f
  3506  070E  3000               	movlw	0
  3507  070F  3DA7               	addwfc	_u1+7,f
  3508                           
  3509                           ;myUARTtoRF.c: 88: if (u1.time2 >= 100 / 20) {
  3510  0710  0827               	movf	_u1+7,w
  3511  0711  3A80               	xorlw	128
  3512  0712  00DC               	movwf	??_uartC_Button
  3513  0713  3080               	movlw	128
  3514  0714  025C               	subwf	??_uartC_Button,w
  3515  0715  1D03               	skipz
  3516  0716  2F19               	goto	u2795
  3517  0717  3005               	movlw	5
  3518  0718  0226               	subwf	_u1+6,w
  3519  0719                     u2795:	
  3520  0719  1C03               	skipc
  3521  071A  2F20               	goto	l3885
  3522                           
  3523                           ;myUARTtoRF.c: 89: u1.time2 = 0;
  3524  071B  0020               	movlb	0	; select bank0
  3525  071C  01A6               	clrf	_u1+6
  3526  071D  01A7               	clrf	_u1+7
  3527                           
  3528                           ;myUARTtoRF.c: 90: u1.switch_debounce = 0;
  3529  071E  13A0               	bcf	_u1,7
  3530                           
  3531                           ;myUARTtoRF.c: 91: u1.siwtch_debounce1 = 0;
  3532  071F  1021               	bcf	_u1+1,0
  3533  0720                     l3885:	
  3534                           
  3535                           ;myUARTtoRF.c: 92: }
  3536                           ;myUARTtoRF.c: 93: }
  3537                           ;myUARTtoRF.c: 94: uartC_timer1_reset();
  3538  0720  318E  263E         	fcall	_uartC_timer1_reset
  3539  0722  0008               	return
  3540  0723                     __end_of_uartC_Button:	
  3541                           
  3542                           	psect	text5
  3543  0E3E                     __ptext5:	
  3544 ;; *************** function _uartC_timer1_reset *****************
  3545 ;; Defined at:
  3546 ;;		line 142 in file "../src/myUARTtoRF.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;		None
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;		None
  3551 ;; Return value:  Size  Location     Type
  3552 ;;		None               void
  3553 ;; Registers used:
  3554 ;;		status,2
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3560 ;;      Params:         0       0       0       0       0       0       0       0
  3561 ;;      Locals:         0       0       0       0       0       0       0       0
  3562 ;;      Temps:          0       0       0       0       0       0       0       0
  3563 ;;      Totals:         0       0       0       0       0       0       0       0
  3564 ;;Total ram usage:        0 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; Hardware stack levels required when called:    2
  3567 ;; This function calls:
  3568 ;;		Nothing
  3569 ;; This function is called by:
  3570 ;;		_uartC_Button
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           
  3575                           ;psect for function _uartC_timer1_reset
  3576  0E3E                     _uartC_timer1_reset:	
  3577                           
  3578                           ;myUARTtoRF.c: 143: u1.time1 = 0;
  3579                           
  3580                           ;incstack = 0
  3581                           ; Regs used in _uartC_timer1_reset: [status,2]
  3582  0E3E  0020               	movlb	0	; select bank0
  3583  0E3F  01A2               	clrf	_u1+2
  3584  0E40  01A3               	clrf	_u1+3
  3585  0E41  0008               	return
  3586  0E42                     __end_of_uartC_timer1_reset:	
  3587                           
  3588                           	psect	text6
  3589  0723                     __ptext6:	
  3590 ;; *************** function _uartC_timer1 *****************
  3591 ;; Defined at:
  3592 ;;		line 116 in file "../src/myUARTtoRF.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;  time_ms         2   10[COMMON] int 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;		None
  3597 ;; Return value:  Size  Location     Type
  3598 ;;		None               void
  3599 ;; Registers used:
  3600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3606 ;;      Params:         2       0       0       0       0       0       0       0
  3607 ;;      Locals:         0       0       0       0       0       0       0       0
  3608 ;;      Temps:          0       0       0       0       0       0       0       0
  3609 ;;      Totals:         2       0       0       0       0       0       0       0
  3610 ;;Total ram usage:        2 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:    4
  3613 ;; This function calls:
  3614 ;;		___awdiv
  3615 ;;		_uartC_switch_control
  3616 ;; This function is called by:
  3617 ;;		_uartC_Button
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           
  3622                           ;psect for function _uartC_timer1
  3623  0723                     _uartC_timer1:	
  3624                           
  3625                           ;myUARTtoRF.c: 118: u1.time1++;
  3626                           
  3627                           ;incstack = 0
  3628                           ; Regs used in _uartC_timer1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3629  0723  3001               	movlw	1
  3630  0724  0020               	movlb	0	; select bank0
  3631  0725  07A2               	addwf	_u1+2,f
  3632  0726  3000               	movlw	0
  3633  0727  3DA3               	addwfc	_u1+3,f
  3634                           
  3635                           ;myUARTtoRF.c: 119: if (u1.time1 == time_ms / 20) {
  3636  0728  3014               	movlw	20
  3637  0729  00F1               	movwf	___awdiv@divisor
  3638  072A  3000               	movlw	0
  3639  072B  00F2               	movwf	___awdiv@divisor+1
  3640  072C  087B               	movf	uartC_timer1@time_ms+1,w
  3641  072D  01F4               	clrf	___awdiv@dividend+1
  3642  072E  07F4               	addwf	___awdiv@dividend+1,f
  3643  072F  087A               	movf	uartC_timer1@time_ms,w
  3644  0730  01F3               	clrf	___awdiv@dividend
  3645  0731  07F3               	addwf	___awdiv@dividend,f
  3646  0732  3185  257B  3187   	fcall	___awdiv
  3647  0735  0020               	movlb	0	; select bank0
  3648  0736  0823               	movf	_u1+3,w
  3649  0737  0672               	xorwf	?___awdiv+1,w
  3650  0738  1D03               	skipz
  3651  0739  2F3C               	goto	u2135
  3652  073A  0822               	movf	_u1+2,w
  3653  073B  0671               	xorwf	?___awdiv,w
  3654  073C                     u2135:	
  3655  073C  1D03               	skipz
  3656  073D  0008               	return
  3657                           
  3658                           ;myUARTtoRF.c: 120: u1.time1 = 0;
  3659  073E  01A2               	clrf	_u1+2
  3660  073F  01A3               	clrf	_u1+3
  3661                           
  3662                           ;myUARTtoRF.c: 122: if (u1.switch_debounce == 0) {
  3663  0740  1BA0               	btfsc	_u1,7
  3664  0741  2F45               	goto	l1428
  3665                           
  3666                           ;myUARTtoRF.c: 123: u1.switch_debounce = 1;
  3667  0742  17A0               	bsf	_u1,7
  3668                           
  3669                           ;myUARTtoRF.c: 124: u1.switch_Mode1 = 1;
  3670  0743  15A1               	bsf	_u1+1,3
  3671                           
  3672                           ;myUARTtoRF.c: 125: } else if (u1.siwtch_debounce1 == 0) {
  3673  0744  2F49               	goto	l3447
  3674  0745                     l1428:	
  3675  0745  1821               	btfsc	_u1+1,0
  3676  0746  2F49               	goto	l3447
  3677                           
  3678                           ;myUARTtoRF.c: 126: u1.siwtch_debounce1 = 1;
  3679  0747  1421               	bsf	_u1+1,0
  3680                           
  3681                           ;myUARTtoRF.c: 127: u1.switch_Mode2 = 1;
  3682  0748  1621               	bsf	_u1+1,4
  3683  0749                     l3447:	
  3684                           
  3685                           ;myUARTtoRF.c: 128: }
  3686                           ;myUARTtoRF.c: 130: uartC_switch_control();
  3687  0749  3183  2362         	fcall	_uartC_switch_control
  3688                           
  3689                           ;myUARTtoRF.c: 132: u1.time2 = 0;
  3690  074B  0020               	movlb	0	; select bank0
  3691  074C  01A6               	clrf	_u1+6
  3692  074D  01A7               	clrf	_u1+7
  3693  074E  0008               	return
  3694  074F                     __end_of_uartC_timer1:	
  3695                           
  3696                           	psect	text7
  3697  0362                     __ptext7:	
  3698 ;; *************** function _uartC_switch_control *****************
  3699 ;; Defined at:
  3700 ;;		line 98 in file "../src/myUARTtoRF.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;		None
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;		None
  3705 ;; Return value:  Size  Location     Type
  3706 ;;		None               void
  3707 ;; Registers used:
  3708 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3714 ;;      Params:         0       0       0       0       0       0       0       0
  3715 ;;      Locals:         0       0       0       0       0       0       0       0
  3716 ;;      Temps:          0       0       0       0       0       0       0       0
  3717 ;;      Totals:         0       0       0       0       0       0       0       0
  3718 ;;Total ram usage:        0 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    3
  3721 ;; This function calls:
  3722 ;;		_setRF_Learn
  3723 ;;		_setTxData
  3724 ;;		_uartC_LED_close
  3725 ;;		_uartC_LED_start
  3726 ;; This function is called by:
  3727 ;;		_uartC_timer1
  3728 ;; This function uses a non-reentrant model
  3729 ;;
  3730                           
  3731                           
  3732                           ;psect for function _uartC_switch_control
  3733  0362                     _uartC_switch_control:	
  3734                           
  3735                           ;myUARTtoRF.c: 99: if (u1.switch_Mode1 == 1) {
  3736                           
  3737                           ;incstack = 0
  3738                           ; Regs used in _uartC_switch_control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3739  0362  0020               	movlb	0	; select bank0
  3740  0363  1DA1               	btfss	_u1+1,3
  3741  0364  2B7A               	goto	l1420
  3742                           
  3743                           ;myUARTtoRF.c: 100: if (u1.switch_Mode2 == 1) {
  3744  0365  1E21               	btfss	_u1+1,4
  3745  0366  2B73               	goto	l3149
  3746                           
  3747                           ;myUARTtoRF.c: 101: u1.switch_Mode2 = 0;
  3748  0367  1221               	bcf	_u1+1,4
  3749                           
  3750                           ;myUARTtoRF.c: 102: u1.time3 = 0;
  3751  0368  01A8               	clrf	_u1+8
  3752  0369  01A9               	clrf	_u1+9
  3753                           
  3754                           ;myUARTtoRF.c: 103: uartC_LED_close();
  3755  036A  318E  2647  3183   	fcall	_uartC_LED_close
  3756                           
  3757                           ;myUARTtoRF.c: 104: setRF_Learn(0);
  3758  036D  3000               	movlw	0
  3759  036E  318E  26ED  3183   	fcall	_setRF_Learn
  3760                           
  3761                           ;myUARTtoRF.c: 105: u1.switch_dimming = 1;
  3762  0371  0020               	movlb	0	; select bank0
  3763  0372  1721               	bsf	_u1+1,6
  3764  0373                     l3149:	
  3765                           
  3766                           ;myUARTtoRF.c: 106: }
  3767                           ;myUARTtoRF.c: 107: setTxData();
  3768  0373  3180  2038  3183   	fcall	_setTxData
  3769                           
  3770                           ;myUARTtoRF.c: 108: uartC_LED_start(100);
  3771  0376  3064               	movlw	100
  3772  0377  318E  26A1         	fcall	_uartC_LED_start
  3773                           
  3774                           ;myUARTtoRF.c: 110: } else if (u1.switch_Mode2 == 1) {
  3775  0379  0008               	return
  3776  037A                     l1420:	
  3777  037A  1E21               	btfss	_u1+1,4
  3778  037B  0008               	return
  3779                           
  3780                           ;myUARTtoRF.c: 111: uartC_LED_start(300);
  3781  037C  302C               	movlw	44
  3782  037D  318E  26A1  3183   	fcall	_uartC_LED_start
  3783                           
  3784                           ;myUARTtoRF.c: 112: setRF_Learn(1);
  3785  0380  3001               	movlw	1
  3786  0381  318E  26ED         	fcall	_setRF_Learn
  3787  0383  0008               	return
  3788  0384                     __end_of_uartC_switch_control:	
  3789                           
  3790                           	psect	text8
  3791  0EA1                     __ptext8:	
  3792 ;; *************** function _uartC_LED_start *****************
  3793 ;; Defined at:
  3794 ;;		line 62 in file "../src/myUARTtoRF.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;  time_ms         1    wreg     unsigned char 
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;  time_ms         1    3[COMMON] unsigned char 
  3799 ;; Return value:  Size  Location     Type
  3800 ;;		None               void
  3801 ;; Registers used:
  3802 ;;		wreg, status,2
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3808 ;;      Params:         0       0       0       0       0       0       0       0
  3809 ;;      Locals:         1       0       0       0       0       0       0       0
  3810 ;;      Temps:          2       0       0       0       0       0       0       0
  3811 ;;      Totals:         3       0       0       0       0       0       0       0
  3812 ;;Total ram usage:        3 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    2
  3815 ;; This function calls:
  3816 ;;		Nothing
  3817 ;; This function is called by:
  3818 ;;		_uartC_switch_control
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           
  3823                           ;psect for function _uartC_LED_start
  3824  0EA1                     _uartC_LED_start:	
  3825                           
  3826                           ;incstack = 0
  3827                           ; Regs used in _uartC_LED_start: [wreg+status,2]
  3828                           ;uartC_LED_start@time_ms stored from wreg
  3829  0EA1  00F3               	movwf	uartC_LED_start@time_ms
  3830                           
  3831                           ;myUARTtoRF.c: 63: u1.LED_Time_Value = time_ms;
  3832  0EA2  0873               	movf	uartC_LED_start@time_ms,w
  3833  0EA3  00F1               	movwf	??_uartC_LED_start
  3834  0EA4  01F2               	clrf	??_uartC_LED_start+1
  3835  0EA5  0871               	movf	??_uartC_LED_start,w
  3836  0EA6  0020               	movlb	0	; select bank0
  3837  0EA7  00AC               	movwf	_u1+12
  3838  0EA8  0872               	movf	??_uartC_LED_start+1,w
  3839  0EA9  00AD               	movwf	_u1+13
  3840                           
  3841                           ;myUARTtoRF.c: 64: u1.LED_GO = 1;
  3842  0EAA  1521               	bsf	_u1+1,2
  3843                           
  3844                           ;myUARTtoRF.c: 65: u1.LED_Time = 0;
  3845  0EAB  01AA               	clrf	_u1+10
  3846  0EAC  01AB               	clrf	_u1+11
  3847                           
  3848                           ;myUARTtoRF.c: 66: RA1 = 0;
  3849  0EAD  108C               	bcf	12,1	;volatile
  3850  0EAE  0008               	return
  3851  0EAF                     __end_of_uartC_LED_start:	
  3852                           
  3853                           	psect	text9
  3854  0EED                     __ptext9:	
  3855 ;; *************** function _setRF_Learn *****************
  3856 ;; Defined at:
  3857 ;;		line 33 in file "../src/RF_Control_B1.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;  command         1    wreg     unsigned char 
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;  command         1    2[COMMON] unsigned char 
  3862 ;; Return value:  Size  Location     Type
  3863 ;;		None               void
  3864 ;; Registers used:
  3865 ;;		wreg, status,2, status,0
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3871 ;;      Params:         0       0       0       0       0       0       0       0
  3872 ;;      Locals:         1       0       0       0       0       0       0       0
  3873 ;;      Temps:          1       0       0       0       0       0       0       0
  3874 ;;      Totals:         2       0       0       0       0       0       0       0
  3875 ;;Total ram usage:        2 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    2
  3878 ;; This function calls:
  3879 ;;		Nothing
  3880 ;; This function is called by:
  3881 ;;		_myUARTtoRF_Main
  3882 ;;		_uartC_switch_control
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           
  3887                           ;psect for function _setRF_Learn
  3888  0EED                     _setRF_Learn:	
  3889                           
  3890                           ;incstack = 0
  3891                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  3892                           ;setRF_Learn@command stored from wreg
  3893  0EED  00F2               	movwf	setRF_Learn@command
  3894                           
  3895                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  3896  0EEE  0872               	movf	setRF_Learn@command,w
  3897  0EEF  3A01               	xorlw	1
  3898  0EF0  3000               	movlw	0
  3899  0EF1  1903               	skipnz
  3900  0EF2  3001               	movlw	1
  3901  0EF3  00F1               	movwf	??_setRF_Learn
  3902  0EF4  0EF1               	swapf	??_setRF_Learn,f
  3903  0EF5  0DF1               	rlf	??_setRF_Learn,f
  3904  0EF6  0DF1               	rlf	??_setRF_Learn,f
  3905  0EF7  0020               	movlb	0	; select bank0
  3906  0EF8  0830               	movf	_RF1,w
  3907  0EF9  0671               	xorwf	??_setRF_Learn,w
  3908  0EFA  39BF               	andlw	-65
  3909  0EFB  0671               	xorwf	??_setRF_Learn,w
  3910  0EFC  00B0               	movwf	_RF1
  3911  0EFD  0008               	return
  3912  0EFE                     __end_of_setRF_Learn:	
  3913                           
  3914                           	psect	text10
  3915  057B                     __ptext10:	
  3916 ;; *************** function ___awdiv *****************
  3917 ;; Defined at:
  3918 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;  divisor         2    1[COMMON] int 
  3921 ;;  dividend        2    3[COMMON] int 
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;  quotient        2    8[COMMON] int 
  3924 ;;  sign            1    7[COMMON] unsigned char 
  3925 ;;  counter         1    6[COMMON] unsigned char 
  3926 ;; Return value:  Size  Location     Type
  3927 ;;                  2    1[COMMON] int 
  3928 ;; Registers used:
  3929 ;;		wreg, status,2, status,0
  3930 ;; Tracked objects:
  3931 ;;		On entry : 0/0
  3932 ;;		On exit  : 0/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3935 ;;      Params:         4       0       0       0       0       0       0       0
  3936 ;;      Locals:         4       0       0       0       0       0       0       0
  3937 ;;      Temps:          1       0       0       0       0       0       0       0
  3938 ;;      Totals:         9       0       0       0       0       0       0       0
  3939 ;;Total ram usage:        9 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; Hardware stack levels required when called:    2
  3942 ;; This function calls:
  3943 ;;		Nothing
  3944 ;; This function is called by:
  3945 ;;		_uartC_LED
  3946 ;;		_uartC_timer1
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function ___awdiv
  3952  057B                     ___awdiv:	
  3953                           
  3954                           ;incstack = 0
  3955                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3956  057B  01F7               	clrf	___awdiv@sign
  3957  057C  1FF2               	btfss	___awdiv@divisor+1,7
  3958  057D  2D85               	goto	l3163
  3959  057E  09F1               	comf	___awdiv@divisor,f
  3960  057F  09F2               	comf	___awdiv@divisor+1,f
  3961  0580  0AF1               	incf	___awdiv@divisor,f
  3962  0581  1903               	skipnz
  3963  0582  0AF2               	incf	___awdiv@divisor+1,f
  3964  0583  01F7               	clrf	___awdiv@sign
  3965  0584  0AF7               	incf	___awdiv@sign,f
  3966  0585                     l3163:	
  3967  0585  1FF4               	btfss	___awdiv@dividend+1,7
  3968  0586  2D90               	goto	l3169
  3969  0587  09F3               	comf	___awdiv@dividend,f
  3970  0588  09F4               	comf	___awdiv@dividend+1,f
  3971  0589  0AF3               	incf	___awdiv@dividend,f
  3972  058A  1903               	skipnz
  3973  058B  0AF4               	incf	___awdiv@dividend+1,f
  3974  058C  3001               	movlw	1
  3975  058D  00F5               	movwf	??___awdiv
  3976  058E  0875               	movf	??___awdiv,w
  3977  058F  06F7               	xorwf	___awdiv@sign,f
  3978  0590                     l3169:	
  3979  0590  01F8               	clrf	___awdiv@quotient
  3980  0591  01F9               	clrf	___awdiv@quotient+1
  3981  0592  0872               	movf	___awdiv@divisor+1,w
  3982  0593  0471               	iorwf	___awdiv@divisor,w
  3983  0594  1903               	skipnz
  3984  0595  2DBF               	goto	l3191
  3985  0596  01F6               	clrf	___awdiv@counter
  3986  0597  0AF6               	incf	___awdiv@counter,f
  3987  0598                     l3179:	
  3988  0598  1BF2               	btfsc	___awdiv@divisor+1,7
  3989  0599  2DA4               	goto	l3181
  3990  059A  3001               	movlw	1
  3991  059B                     u1735:	
  3992  059B  35F1               	lslf	___awdiv@divisor,f
  3993  059C  0DF2               	rlf	___awdiv@divisor+1,f
  3994  059D  0B89               	decfsz	9,f
  3995  059E  2D9B               	goto	u1735
  3996  059F  3001               	movlw	1
  3997  05A0  00F5               	movwf	??___awdiv
  3998  05A1  0875               	movf	??___awdiv,w
  3999  05A2  07F6               	addwf	___awdiv@counter,f
  4000  05A3  2D98               	goto	l3179
  4001  05A4                     l3181:	
  4002  05A4  3001               	movlw	1
  4003  05A5                     u1755:	
  4004  05A5  35F8               	lslf	___awdiv@quotient,f
  4005  05A6  0DF9               	rlf	___awdiv@quotient+1,f
  4006  05A7  0B89               	decfsz	9,f
  4007  05A8  2DA5               	goto	u1755
  4008  05A9  0872               	movf	___awdiv@divisor+1,w
  4009  05AA  0274               	subwf	___awdiv@dividend+1,w
  4010  05AB  1D03               	skipz
  4011  05AC  2DAF               	goto	u1765
  4012  05AD  0871               	movf	___awdiv@divisor,w
  4013  05AE  0273               	subwf	___awdiv@dividend,w
  4014  05AF                     u1765:	
  4015  05AF  1C03               	skipc
  4016  05B0  2DB6               	goto	l3187
  4017  05B1  0871               	movf	___awdiv@divisor,w
  4018  05B2  02F3               	subwf	___awdiv@dividend,f
  4019  05B3  0872               	movf	___awdiv@divisor+1,w
  4020  05B4  3BF4               	subwfb	___awdiv@dividend+1,f
  4021  05B5  1478               	bsf	___awdiv@quotient,0
  4022  05B6                     l3187:	
  4023  05B6  3001               	movlw	1
  4024  05B7                     u1775:	
  4025  05B7  36F2               	lsrf	___awdiv@divisor+1,f
  4026  05B8  0CF1               	rrf	___awdiv@divisor,f
  4027  05B9  0B89               	decfsz	9,f
  4028  05BA  2DB7               	goto	u1775
  4029  05BB  3001               	movlw	1
  4030  05BC  02F6               	subwf	___awdiv@counter,f
  4031  05BD  1D03               	btfss	3,2
  4032  05BE  2DA4               	goto	l3181
  4033  05BF                     l3191:	
  4034  05BF  0877               	movf	___awdiv@sign,w
  4035  05C0  1903               	btfsc	3,2
  4036  05C1  2DC7               	goto	l3195
  4037  05C2  09F8               	comf	___awdiv@quotient,f
  4038  05C3  09F9               	comf	___awdiv@quotient+1,f
  4039  05C4  0AF8               	incf	___awdiv@quotient,f
  4040  05C5  1903               	skipnz
  4041  05C6  0AF9               	incf	___awdiv@quotient+1,f
  4042  05C7                     l3195:	
  4043  05C7  0879               	movf	___awdiv@quotient+1,w
  4044  05C8  01F2               	clrf	?___awdiv+1
  4045  05C9  07F2               	addwf	?___awdiv+1,f
  4046  05CA  0878               	movf	___awdiv@quotient,w
  4047  05CB  01F1               	clrf	?___awdiv
  4048  05CC  07F1               	addwf	?___awdiv,f
  4049  05CD  0008               	return
  4050  05CE                     __end_of___awdiv:	
  4051                           
  4052                           	psect	text11
  4053  0E42                     __ptext11:	
  4054 ;; *************** function _myUARTtoRF_Initialization *****************
  4055 ;; Defined at:
  4056 ;;		line 7 in file "../src/myUARTtoRF.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;		None
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;		None
  4061 ;; Return value:  Size  Location     Type
  4062 ;;		None               void
  4063 ;; Registers used:
  4064 ;;		None
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4070 ;;      Params:         0       0       0       0       0       0       0       0
  4071 ;;      Locals:         0       0       0       0       0       0       0       0
  4072 ;;      Temps:          0       0       0       0       0       0       0       0
  4073 ;;      Totals:         0       0       0       0       0       0       0       0
  4074 ;;Total ram usage:        0 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    2
  4077 ;; This function calls:
  4078 ;;		Nothing
  4079 ;; This function is called by:
  4080 ;;		_main
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           
  4085                           ;psect for function _myUARTtoRF_Initialization
  4086  0E42                     _myUARTtoRF_Initialization:	
  4087                           
  4088                           ;myUARTtoRF.c: 8: RA0 = 0;
  4089                           
  4090                           ;incstack = 0
  4091                           ; Regs used in _myUARTtoRF_Initialization: []
  4092  0E42  0020               	movlb	0	; select bank0
  4093  0E43  100C               	bcf	12,0	;volatile
  4094                           
  4095                           ;myUARTtoRF.c: 9: RA1 = 1;
  4096  0E44  148C               	bsf	12,1	;volatile
  4097                           
  4098                           ;myUARTtoRF.c: 10: RA2 = 1;
  4099  0E45  150C               	bsf	12,2	;volatile
  4100  0E46  0008               	return
  4101  0E47                     __end_of_myUARTtoRF_Initialization:	
  4102                           
  4103                           	psect	text12
  4104  0EBE                     __ptext12:	
  4105 ;; *************** function _myMain_Initialization *****************
  4106 ;; Defined at:
  4107 ;;		line 170 in file "../src/Main_B1.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;		None
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;		None
  4112 ;; Return value:  Size  Location     Type
  4113 ;;		None               void
  4114 ;; Registers used:
  4115 ;;		wreg, fsr1l, fsr1h
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4121 ;;      Params:         0       0       0       0       0       0       0       0
  4122 ;;      Locals:         0       0       0       0       0       0       0       0
  4123 ;;      Temps:          1       0       0       0       0       0       0       0
  4124 ;;      Totals:         1       0       0       0       0       0       0       0
  4125 ;;Total ram usage:        1 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; Hardware stack levels required when called:    2
  4128 ;; This function calls:
  4129 ;;		Nothing
  4130 ;; This function is called by:
  4131 ;;		_main
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           
  4136                           ;psect for function _myMain_Initialization
  4137  0EBE                     _myMain_Initialization:	
  4138                           
  4139                           ;Main_B1.c: 173: product = &_product;
  4140                           
  4141                           ;incstack = 0
  4142                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4143  0EBE  3020               	movlw	__product& (0+255)
  4144  0EBF  00F1               	movwf	??_myMain_Initialization
  4145  0EC0  0871               	movf	??_myMain_Initialization,w
  4146  0EC1  0020               	movlb	0	; select bank0
  4147  0EC2  00E2               	movwf	_product
  4148                           
  4149                           ;Main_B1.c: 174: product->Data[20] = 0x0a;
  4150  0EC3  300A               	movlw	10
  4151  0EC4  00F1               	movwf	??_myMain_Initialization
  4152  0EC5  0862               	movf	_product,w
  4153  0EC6  3E14               	addlw	20
  4154  0EC7  0086               	movwf	6
  4155  0EC8  3001               	movlw	1	; select bank2/3
  4156  0EC9  0087               	movwf	7
  4157  0ECA  0871               	movf	??_myMain_Initialization,w
  4158  0ECB  0081               	movwf	1
  4159  0ECC  0008               	return
  4160  0ECD                     __end_of_myMain_Initialization:	
  4161                           
  4162                           	psect	text13
  4163  0E27                     __ptext13:	
  4164 ;; *************** function _RF_Main *****************
  4165 ;; Defined at:
  4166 ;;		line 26 in file "../src/RF_Control_B1.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;		None
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;		None
  4171 ;; Return value:  Size  Location     Type
  4172 ;;		None               void
  4173 ;; Registers used:
  4174 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4180 ;;      Params:         0       0       0       0       0       0       0       0
  4181 ;;      Locals:         0       0       0       0       0       0       0       0
  4182 ;;      Temps:          0       0       0       0       0       0       0       0
  4183 ;;      Totals:         0       0       0       0       0       0       0       0
  4184 ;;Total ram usage:        0 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    7
  4187 ;; This function calls:
  4188 ;;		_setRF_Main
  4189 ;; This function is called by:
  4190 ;;		_main
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           
  4195                           ;psect for function _RF_Main
  4196  0E27                     _RF_Main:	
  4197                           
  4198                           ;RF_Control_B1.c: 28: setRF_Main();
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4202  0E27  3181  21CC         	fcall	_setRF_Main
  4203  0E29  0008               	return
  4204  0E2A                     __end_of_RF_Main:	
  4205                           
  4206                           	psect	text14
  4207  01CC                     __ptext14:	
  4208 ;; *************** function _setRF_Main *****************
  4209 ;; Defined at:
  4210 ;;		line 53 in file "../src/RF_Control_B1.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;		None
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;  error           1   10[COMMON] unsigned char 
  4215 ;; Return value:  Size  Location     Type
  4216 ;;		None               void
  4217 ;; Registers used:
  4218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4224 ;;      Params:         0       0       0       0       0       0       0       0
  4225 ;;      Locals:         1       0       0       0       0       0       0       0
  4226 ;;      Temps:          0       0       0       0       0       0       0       0
  4227 ;;      Totals:         1       0       0       0       0       0       0       0
  4228 ;;Total ram usage:        1 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    6
  4231 ;; This function calls:
  4232 ;;		_CC2500_PowerOnInitial
  4233 ;;		_CC2500_RxData
  4234 ;;		_CC2500_TxData
  4235 ;;		_CC2500_WriteCommand
  4236 ;;		_RF_RxDisable
  4237 ;;		___lwdiv
  4238 ;;		_getRxData
  4239 ;; This function is called by:
  4240 ;;		_RF_Main
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           
  4245                           ;psect for function _setRF_Main
  4246  01CC                     _setRF_Main:	
  4247                           
  4248                           ;RF_Control_B1.c: 54: char error = 0;
  4249                           
  4250                           ;incstack = 0
  4251                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4252  01CC  01FA               	clrf	setRF_Main@error
  4253                           
  4254                           ;RF_Control_B1.c: 56: if (0 == 0) {
  4255  01CD  0020               	movlb	0	; select bank0
  4256  01CE  1C30               	btfss	_RF1,0
  4257  01CF  2A6E               	goto	l1059
  4258                           
  4259                           ;RF_Control_B1.c: 61: RF1.Key = 0;
  4260  01D0  13B0               	bcf	_RF1,7
  4261                           
  4262                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  4263  01D1  1FB0               	btfss	_RF1,7
  4264  01D2  29D5               	goto	l1063
  4265  01D3  1F30               	btfss	_RF1,6
  4266  01D4  2A4F               	goto	l3579
  4267  01D5                     l1063:	
  4268                           
  4269                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  4270  01D5  1D30               	btfss	_RF1,2
  4271  01D6  2A16               	goto	l1064
  4272                           
  4273                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  4274  01D7  1B30               	btfsc	_RF1,6
  4275  01D8  2A11               	goto	l3551
  4276                           
  4277                           ;RF_Control_B1.c: 68: RF1.Count++;
  4278  01D9  3001               	movlw	1
  4279  01DA  07B3               	addwf	_RF1+3,f
  4280  01DB  3000               	movlw	0
  4281  01DC  3DB4               	addwfc	_RF1+4,f
  4282                           
  4283                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  4284  01DD  3014               	movlw	20
  4285  01DE  00F1               	movwf	___lwdiv@divisor
  4286  01DF  3000               	movlw	0
  4287  01E0  00F2               	movwf	___lwdiv@divisor+1
  4288  01E1  0839               	movf	_RF1+9,w
  4289  01E2  01F4               	clrf	___lwdiv@dividend+1
  4290  01E3  07F4               	addwf	___lwdiv@dividend+1,f
  4291  01E4  0838               	movf	_RF1+8,w
  4292  01E5  01F3               	clrf	___lwdiv@dividend
  4293  01E6  07F3               	addwf	___lwdiv@dividend,f
  4294  01E7  3186  265B  3181   	fcall	___lwdiv
  4295  01EA  0872               	movf	?___lwdiv+1,w
  4296  01EB  0020               	movlb	0	; select bank0
  4297  01EC  0234               	subwf	_RF1+4,w
  4298  01ED  1D03               	skipz
  4299  01EE  29F1               	goto	u2315
  4300  01EF  0871               	movf	?___lwdiv,w
  4301  01F0  0233               	subwf	_RF1+3,w
  4302  01F1                     u2315:	
  4303  01F1  1C03               	skipc
  4304  01F2  2A4F               	goto	l3579
  4305                           
  4306                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  4307  01F3  3014               	movlw	20
  4308  01F4  00F1               	movwf	___lwdiv@divisor
  4309  01F5  3000               	movlw	0
  4310  01F6  00F2               	movwf	___lwdiv@divisor+1
  4311  01F7  0839               	movf	_RF1+9,w
  4312  01F8  01F4               	clrf	___lwdiv@dividend+1
  4313  01F9  07F4               	addwf	___lwdiv@dividend+1,f
  4314  01FA  0838               	movf	_RF1+8,w
  4315  01FB  01F3               	clrf	___lwdiv@dividend
  4316  01FC  07F3               	addwf	___lwdiv@dividend,f
  4317  01FD  3186  265B  3181   	fcall	___lwdiv
  4318  0200  0872               	movf	?___lwdiv+1,w
  4319  0201  0020               	movlb	0	; select bank0
  4320  0202  01B4               	clrf	_RF1+4
  4321  0203  07B4               	addwf	_RF1+4,f
  4322  0204  0871               	movf	?___lwdiv,w
  4323  0205  01B3               	clrf	_RF1+3
  4324  0206  07B3               	addwf	_RF1+3,f
  4325                           
  4326                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  4327  0207  1130               	bcf	_RF1,2
  4328                           
  4329                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  4330  0208  01BB               	clrf	_RF1+11
  4331  0209  01BC               	clrf	_RF1+12
  4332                           
  4333                           ;RF_Control_B1.c: 74: RF_RxDisable();
  4334  020A  318E  26AF  3181   	fcall	_RF_RxDisable
  4335                           
  4336                           ;RF_Control_B1.c: 75: CC2500_TxData();
  4337  020D  3184  2466  3181   	fcall	_CC2500_TxData
  4338                           
  4339                           ;RF_Control_B1.c: 77: }
  4340                           ;RF_Control_B1.c: 78: } else {
  4341  0210  2A4F               	goto	l3579
  4342  0211                     l3551:	
  4343                           
  4344                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  4345  0211  0020               	movlb	0	; select bank0
  4346  0212  01B3               	clrf	_RF1+3
  4347  0213  01B4               	clrf	_RF1+4
  4348                           
  4349                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  4350  0214  1130               	bcf	_RF1,2
  4351                           
  4352                           ;RF_Control_B1.c: 81: }
  4353                           ;RF_Control_B1.c: 82: } else {
  4354  0215  2A4F               	goto	l3579
  4355  0216                     l1064:	
  4356                           
  4357                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  4358  0216  1DB0               	btfss	_RF1,3
  4359  0217  2A25               	goto	l3565
  4360                           
  4361                           ;RF_Control_B1.c: 85: CC2500_RxData();
  4362  0218  3184  24C8  3181   	fcall	_CC2500_RxData
  4363                           
  4364                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  4365  021B  0020               	movlb	0	; select bank0
  4366  021C  1CB0               	btfss	_RF1,1
  4367  021D  2A4F               	goto	l3579
  4368                           
  4369                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  4370  021E  10B0               	bcf	_RF1,1
  4371                           
  4372                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  4373  021F  01BB               	clrf	_RF1+11
  4374  0220  01BC               	clrf	_RF1+12
  4375                           
  4376                           ;RF_Control_B1.c: 97: getRxData();
  4377  0221  3181  2114  3181   	fcall	_getRxData
  4378                           
  4379                           ;RF_Control_B1.c: 100: }
  4380                           ;RF_Control_B1.c: 101: } else {
  4381  0224  2A4F               	goto	l3579
  4382  0225                     l3565:	
  4383                           
  4384                           ;RF_Control_B1.c: 102: RF1.Count++;
  4385  0225  3001               	movlw	1
  4386  0226  0020               	movlb	0	; select bank0
  4387  0227  07B3               	addwf	_RF1+3,f
  4388  0228  3000               	movlw	0
  4389  0229  3DB4               	addwfc	_RF1+4,f
  4390                           
  4391                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  4392  022A  3014               	movlw	20
  4393  022B  00F1               	movwf	___lwdiv@divisor
  4394  022C  3000               	movlw	0
  4395  022D  00F2               	movwf	___lwdiv@divisor+1
  4396  022E  0839               	movf	_RF1+9,w
  4397  022F  01F4               	clrf	___lwdiv@dividend+1
  4398  0230  07F4               	addwf	___lwdiv@dividend+1,f
  4399  0231  0838               	movf	_RF1+8,w
  4400  0232  01F3               	clrf	___lwdiv@dividend
  4401  0233  07F3               	addwf	___lwdiv@dividend,f
  4402  0234  3186  265B  3181   	fcall	___lwdiv
  4403  0237  0872               	movf	?___lwdiv+1,w
  4404  0238  0020               	movlb	0	; select bank0
  4405  0239  0234               	subwf	_RF1+4,w
  4406  023A  1D03               	skipz
  4407  023B  2A3E               	goto	u2345
  4408  023C  0871               	movf	?___lwdiv,w
  4409  023D  0233               	subwf	_RF1+3,w
  4410  023E                     u2345:	
  4411  023E  1C03               	skipc
  4412  023F  2A4F               	goto	l3579
  4413                           
  4414                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  4415  0240  01B3               	clrf	_RF1+3
  4416  0241  01B4               	clrf	_RF1+4
  4417                           
  4418                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  4419  0242  15B0               	bsf	_RF1,3
  4420                           
  4421                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  4422  0243  3036               	movlw	54
  4423  0244  318F  27AB  3181   	fcall	_CC2500_WriteCommand
  4424                           
  4425                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  4426  0247  303A               	movlw	58
  4427  0248  318F  27AB  3181   	fcall	_CC2500_WriteCommand
  4428                           
  4429                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  4430  024B  3034               	movlw	52
  4431  024C  318F  27AB  3181   	fcall	_CC2500_WriteCommand
  4432  024F                     l3579:	
  4433                           
  4434                           ;RF_Control_B1.c: 111: }
  4435                           ;RF_Control_B1.c: 112: }
  4436                           ;RF_Control_B1.c: 113: }
  4437                           ;RF_Control_B1.c: 114: }
  4438                           ;RF_Control_B1.c: 115: }
  4439                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  4440  024F  3001               	movlw	1
  4441  0250  0020               	movlb	0	; select bank0
  4442  0251  07BB               	addwf	_RF1+11,f
  4443  0252  3000               	movlw	0
  4444  0253  3DBC               	addwfc	_RF1+12,f
  4445                           
  4446                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  4447  0254  300B               	movlw	11
  4448  0255  023C               	subwf	_RF1+12,w
  4449  0256  30B9               	movlw	185
  4450  0257  1903               	skipnz
  4451  0258  023B               	subwf	_RF1+11,w
  4452  0259  1C03               	skipc
  4453  025A  2A67               	goto	l3593
  4454                           
  4455                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  4456  025B  01BB               	clrf	_RF1+11
  4457  025C  01BC               	clrf	_RF1+12
  4458                           
  4459                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  4460  025D  11B0               	bcf	_RF1,3
  4461                           
  4462                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  4463  025E  10B0               	bcf	_RF1,1
  4464                           
  4465                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  4466  025F  3036               	movlw	54
  4467  0260  318F  27AB  3181   	fcall	_CC2500_WriteCommand
  4468                           
  4469                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  4470  0263  303A               	movlw	58
  4471  0264  318F  27AB  3181   	fcall	_CC2500_WriteCommand
  4472  0267                     l3593:	
  4473                           
  4474                           ;RF_Control_B1.c: 125: }
  4475                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  4476  0267  0020               	movlb	0	; select bank0
  4477  0268  1F31               	btfss	_RF1+1,6
  4478  0269  0008               	return
  4479                           
  4480                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  4481  026A  1331               	bcf	_RF1+1,6
  4482                           
  4483                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  4484  026B  318F  273B         	fcall	_CC2500_PowerOnInitial
  4485                           
  4486                           ;RF_Control_B1.c: 130: }
  4487                           ;RF_Control_B1.c: 132: } else {
  4488  026D  0008               	return
  4489  026E                     l1059:	
  4490                           
  4491                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  4492  026E  1C3F               	btfss	_myMain,0
  4493  026F  0008               	return
  4494                           
  4495                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  4496  0270  1430               	bsf	_RF1,0
  4497  0271  0008               	return
  4498  0272                     __end_of_setRF_Main:	
  4499                           
  4500                           	psect	text15
  4501  0114                     __ptext15:	
  4502 ;; *************** function _getRxData *****************
  4503 ;; Defined at:
  4504 ;;		line 245 in file "../src/RF_Control_B1.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;		None
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;  error           1    6[COMMON] unsigned char 
  4509 ;; Return value:  Size  Location     Type
  4510 ;;		None               void
  4511 ;; Registers used:
  4512 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4518 ;;      Params:         0       0       0       0       0       0       0       0
  4519 ;;      Locals:         1       0       0       0       0       0       0       0
  4520 ;;      Temps:          1       0       0       0       0       0       0       0
  4521 ;;      Totals:         2       0       0       0       0       0       0       0
  4522 ;;Total ram usage:        2 bytes
  4523 ;; Hardware stack levels used:    1
  4524 ;; Hardware stack levels required when called:    4
  4525 ;; This function calls:
  4526 ;;		_getMain_All_Error_Status
  4527 ;;		_setControl_Lights_Table
  4528 ;;		_setLog_Code
  4529 ;;		_setMemory_LoopSave
  4530 ;;		_setMemory_Modify
  4531 ;;		_setTxData
  4532 ;;		_uartC_LED_close
  4533 ;; This function is called by:
  4534 ;;		_setRF_Main
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           
  4539                           ;psect for function _getRxData
  4540  0114                     _getRxData:	
  4541                           
  4542                           ;RF_Control_B1.c: 247: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  4543                           
  4544                           ;incstack = 0
  4545                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4546  0114  0021               	movlb	1	; select bank1
  4547  0115  0820               	movf	_RF_Data^(0+128),w
  4548  0116  3AAA               	xorlw	170
  4549  0117  1D03               	skipz
  4550  0118  292D               	goto	l3389
  4551  0119  0821               	movf	(_RF_Data^(0+128)+1),w
  4552  011A  3A01               	xorlw	1
  4553  011B  1D03               	skipz
  4554  011C  292D               	goto	l3389
  4555                           
  4556                           ;RF_Control_B1.c: 248: product->Data[2] = 0x55;
  4557  011D  3055               	movlw	85
  4558  011E  00F5               	movwf	??_getRxData
  4559  011F  0020               	movlb	0	; select bank0
  4560  0120  0862               	movf	_product,w
  4561  0121  3E02               	addlw	2
  4562  0122  0086               	movwf	6
  4563  0123  3001               	movlw	1	; select bank2/3
  4564  0124  0087               	movwf	7
  4565  0125  0875               	movf	??_getRxData,w
  4566  0126  0081               	movwf	1
  4567                           
  4568                           ;RF_Control_B1.c: 249: setTxData();
  4569  0127  3180  2038         	fcall	_setTxData
  4570                           
  4571                           ;RF_Control_B1.c: 251: RA1 = RA1 == 1 ? 0 : 1;
  4572  0129  3002               	movlw	2
  4573  012A  0020               	movlb	0	; select bank0
  4574  012B  068C               	xorwf	12,f
  4575                           
  4576                           ;RF_Control_B1.c: 253: } else {
  4577  012C  0008               	return
  4578  012D                     l3389:	
  4579                           
  4580                           ;RF_Control_B1.c: 254: char error = getMain_All_Error_Status(0);
  4581  012D  3000               	movlw	0
  4582  012E  318E  261E  3181   	fcall	_getMain_All_Error_Status
  4583  0131  00F5               	movwf	??_getRxData
  4584  0132  0875               	movf	??_getRxData,w
  4585  0133  00F6               	movwf	getRxData@error
  4586                           
  4587                           ;RF_Control_B1.c: 255: if (error == 0) {
  4588  0134  08F6               	movf	getRxData@error,f
  4589  0135  1D03               	skipz
  4590  0136  29CA               	goto	l1105
  4591                           
  4592                           ;RF_Control_B1.c: 256: if (RF1.Learn == 1) {
  4593  0137  0020               	movlb	0	; select bank0
  4594  0138  1F30               	btfss	_RF1,6
  4595  0139  2996               	goto	l3419
  4596                           
  4597                           ;RF_Control_B1.c: 258: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  4598  013A  0021               	movlb	1	; select bank1
  4599  013B  08A0               	movf	_RF_Data^(0+128),f
  4600  013C  1D03               	skipz
  4601  013D  2945               	goto	l3401
  4602  013E  0821               	movf	(_RF_Data^(0+128)+1),w
  4603  013F  3A64               	xorlw	100
  4604  0140  1D03               	skipz
  4605  0141  2945               	goto	l3401
  4606                           
  4607                           ;RF_Control_B1.c: 259: setLog_Code();
  4608  0142  3187  27CC  3181   	fcall	_setLog_Code
  4609  0145                     l3401:	
  4610                           
  4611                           ;RF_Control_B1.c: 260: }
  4612                           ;RF_Control_B1.c: 262: if (RF_Data[0] == 0x63 && RF_Data[1] == 0x02) {
  4613  0145  0021               	movlb	1	; select bank1
  4614  0146  0820               	movf	_RF_Data^(0+128),w
  4615  0147  3A63               	xorlw	99
  4616  0148  1D03               	skipz
  4617  0149  0008               	return
  4618  014A  0821               	movf	(_RF_Data^(0+128)+1),w
  4619  014B  3A02               	xorlw	2
  4620  014C  1D03               	skipz
  4621  014D  0008               	return
  4622                           
  4623                           ;RF_Control_B1.c: 263: product->Data[11] = RF_Data[11];
  4624  014E  082B               	movf	(_RF_Data^(0+128)+11),w
  4625  014F  00F5               	movwf	??_getRxData
  4626  0150  0020               	movlb	0	; select bank0
  4627  0151  0862               	movf	_product,w
  4628  0152  3E0B               	addlw	11
  4629  0153  0086               	movwf	6
  4630  0154  3001               	movlw	1	; select bank2/3
  4631  0155  0087               	movwf	7
  4632  0156  0875               	movf	??_getRxData,w
  4633  0157  0081               	movwf	1
  4634                           
  4635                           ;RF_Control_B1.c: 264: product->Data[12] = RF_Data[12];
  4636  0158  0021               	movlb	1	; select bank1
  4637  0159  082C               	movf	(_RF_Data^(0+128)+12),w
  4638  015A  00F5               	movwf	??_getRxData
  4639  015B  0020               	movlb	0	; select bank0
  4640  015C  0862               	movf	_product,w
  4641  015D  3E0C               	addlw	12
  4642  015E  0086               	movwf	6
  4643  015F  3001               	movlw	1	; select bank2/3
  4644  0160  0087               	movwf	7
  4645  0161  0875               	movf	??_getRxData,w
  4646  0162  0081               	movwf	1
  4647                           
  4648                           ;RF_Control_B1.c: 265: product->Data[13] = RF_Data[13];
  4649  0163  0021               	movlb	1	; select bank1
  4650  0164  082D               	movf	(_RF_Data^(0+128)+13),w
  4651  0165  00F5               	movwf	??_getRxData
  4652  0166  0020               	movlb	0	; select bank0
  4653  0167  0862               	movf	_product,w
  4654  0168  3E0D               	addlw	13
  4655  0169  0086               	movwf	6
  4656  016A  3001               	movlw	1	; select bank2/3
  4657  016B  0087               	movwf	7
  4658  016C  0875               	movf	??_getRxData,w
  4659  016D  0081               	movwf	1
  4660                           
  4661                           ;RF_Control_B1.c: 266: product->Data[14] = RF_Data[14];
  4662  016E  0021               	movlb	1	; select bank1
  4663  016F  082E               	movf	(_RF_Data^(0+128)+14),w
  4664  0170  00F5               	movwf	??_getRxData
  4665  0171  0020               	movlb	0	; select bank0
  4666  0172  0862               	movf	_product,w
  4667  0173  3E0E               	addlw	14
  4668  0174  0086               	movwf	6
  4669  0175  3001               	movlw	1	; select bank2/3
  4670  0176  0087               	movwf	7
  4671  0177  0875               	movf	??_getRxData,w
  4672  0178  0081               	movwf	1
  4673                           
  4674                           ;RF_Control_B1.c: 267: product->Data[15] = RF_Data[11];
  4675  0179  0021               	movlb	1	; select bank1
  4676  017A  082B               	movf	(_RF_Data^(0+128)+11),w
  4677  017B  00F5               	movwf	??_getRxData
  4678  017C  0020               	movlb	0	; select bank0
  4679  017D  0862               	movf	_product,w
  4680  017E  3E0F               	addlw	15
  4681  017F  0086               	movwf	6
  4682  0180  3001               	movlw	1	; select bank2/3
  4683  0181  0087               	movwf	7
  4684  0182  0875               	movf	??_getRxData,w
  4685  0183  0081               	movwf	1
  4686                           
  4687                           ;RF_Control_B1.c: 268: RF1.Learn = 0;
  4688  0184  1330               	bcf	_RF1,6
  4689                           
  4690                           ;RF_Control_B1.c: 269: u1.switch_Mode2 = 0;
  4691  0185  1221               	bcf	_u1+1,4
  4692                           
  4693                           ;RF_Control_B1.c: 270: u1.time3 = 0;
  4694  0186  01A8               	clrf	_u1+8
  4695  0187  01A9               	clrf	_u1+9
  4696                           
  4697                           ;RF_Control_B1.c: 271: uartC_LED_close();
  4698  0188  318E  2647  3181   	fcall	_uartC_LED_close
  4699                           
  4700                           ;RF_Control_B1.c: 272: if (myMain.First == 1) {
  4701  018B  0020               	movlb	0	; select bank0
  4702  018C  1EBF               	btfss	_myMain,5
  4703  018D  2992               	goto	l1109
  4704                           
  4705                           ;RF_Control_B1.c: 273: setMemory_LoopSave(1);
  4706  018E  3001               	movlw	1
  4707  018F  318E  26CD  3181   	fcall	_setMemory_LoopSave
  4708  0192                     l1109:	
  4709                           
  4710                           ;RF_Control_B1.c: 274: }
  4711                           ;RF_Control_B1.c: 275: setMemory_Modify(1);
  4712  0192  3001               	movlw	1
  4713  0193  318E  26DD         	fcall	_setMemory_Modify
  4714                           
  4715                           ;RF_Control_B1.c: 276: }
  4716                           ;RF_Control_B1.c: 278: } else {
  4717  0195  0008               	return
  4718  0196                     l3419:	
  4719                           
  4720                           ;RF_Control_B1.c: 279: if (RF_Data[20] == 0x0a || RF_Data[20] == 0x0a) {
  4721  0196  0021               	movlb	1	; select bank1
  4722  0197  0834               	movf	(_RF_Data^(0+128)+20),w
  4723  0198  3A0A               	xorlw	10
  4724  0199  1903               	skipnz
  4725  019A  299F               	goto	l3423
  4726  019B  0834               	movf	(_RF_Data^(0+128)+20),w
  4727  019C  3A0A               	xorlw	10
  4728  019D  1D03               	skipz
  4729  019E  0008               	return
  4730  019F                     l3423:	
  4731                           
  4732                           ;RF_Control_B1.c: 281: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  4733  019F  08A0               	movf	_RF_Data^(0+128),f
  4734  01A0  1D03               	skipz
  4735  01A1  0008               	return
  4736  01A2  0821               	movf	(_RF_Data^(0+128)+1),w
  4737  01A3  3A02               	xorlw	2
  4738  01A4  1D03               	skipz
  4739  01A5  0008               	return
  4740                           
  4741                           ;RF_Control_B1.c: 283: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  4742  01A6  0020               	movlb	0	; select bank0
  4743  01A7  0862               	movf	_product,w
  4744  01A8  3E0C               	addlw	12
  4745  01A9  0086               	movwf	6
  4746  01AA  3001               	movlw	1	; select bank2/3
  4747  01AB  0087               	movwf	7
  4748  01AC  0021               	movlb	1	; select bank1
  4749  01AD  082C               	movf	(_RF_Data^(0+128)+12),w
  4750  01AE  0601               	xorwf	1,w
  4751  01AF  1D03               	skipz
  4752  01B0  0008               	return
  4753  01B1  0020               	movlb	0	; select bank0
  4754  01B2  0862               	movf	_product,w
  4755  01B3  3E0D               	addlw	13
  4756  01B4  0086               	movwf	6
  4757  01B5  3001               	movlw	1	; select bank2/3
  4758  01B6  0087               	movwf	7
  4759  01B7  0021               	movlb	1	; select bank1
  4760  01B8  082D               	movf	(_RF_Data^(0+128)+13),w
  4761  01B9  0601               	xorwf	1,w
  4762  01BA  1D03               	skipz
  4763  01BB  0008               	return
  4764  01BC  0020               	movlb	0	; select bank0
  4765  01BD  0862               	movf	_product,w
  4766  01BE  3E0E               	addlw	14
  4767  01BF  0086               	movwf	6
  4768  01C0  3001               	movlw	1	; select bank2/3
  4769  01C1  0087               	movwf	7
  4770  01C2  0021               	movlb	1	; select bank1
  4771  01C3  082E               	movf	(_RF_Data^(0+128)+14),w
  4772  01C4  0601               	xorwf	1,w
  4773  01C5  1D03               	skipz
  4774  01C6  0008               	return
  4775                           
  4776                           ;RF_Control_B1.c: 284: setControl_Lights_Table();
  4777  01C7  3185  25CE         	fcall	_setControl_Lights_Table
  4778                           
  4779                           ;RF_Control_B1.c: 285: }
  4780                           ;RF_Control_B1.c: 288: }
  4781                           ;RF_Control_B1.c: 299: }
  4782                           ;RF_Control_B1.c: 300: }
  4783                           ;RF_Control_B1.c: 301: } else {
  4784  01C9  0008               	return
  4785  01CA                     l1105:	
  4786                           
  4787                           ;RF_Control_B1.c: 302: __nop();
  4788  01CA  0000               	nop
  4789  01CB  0008               	return
  4790  01CC                     __end_of_getRxData:	
  4791                           
  4792                           	psect	text16
  4793  0E47                     __ptext16:	
  4794 ;; *************** function _uartC_LED_close *****************
  4795 ;; Defined at:
  4796 ;;		line 69 in file "../src/myUARTtoRF.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;		None
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;		None
  4801 ;; Return value:  Size  Location     Type
  4802 ;;                  2  981[COMMON] int 
  4803 ;; Registers used:
  4804 ;;		status,2
  4805 ;; Tracked objects:
  4806 ;;		On entry : 0/0
  4807 ;;		On exit  : 0/0
  4808 ;;		Unchanged: 0/0
  4809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4810 ;;      Params:         0       0       0       0       0       0       0       0
  4811 ;;      Locals:         0       0       0       0       0       0       0       0
  4812 ;;      Temps:          0       0       0       0       0       0       0       0
  4813 ;;      Totals:         0       0       0       0       0       0       0       0
  4814 ;;Total ram usage:        0 bytes
  4815 ;; Hardware stack levels used:    1
  4816 ;; Hardware stack levels required when called:    2
  4817 ;; This function calls:
  4818 ;;		Nothing
  4819 ;; This function is called by:
  4820 ;;		_getRxData
  4821 ;;		_uartC_switch_control
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           
  4826                           ;psect for function _uartC_LED_close
  4827  0E47                     _uartC_LED_close:	
  4828                           
  4829                           ;myUARTtoRF.c: 70: u1.LED_GO = 0;
  4830                           
  4831                           ;incstack = 0
  4832                           ; Regs used in _uartC_LED_close: [status,2]
  4833  0E47  0020               	movlb	0	; select bank0
  4834  0E48  1121               	bcf	_u1+1,2
  4835                           
  4836                           ;myUARTtoRF.c: 71: u1.LED_Time = 0;
  4837  0E49  01AA               	clrf	_u1+10
  4838  0E4A  01AB               	clrf	_u1+11
  4839                           
  4840                           ;myUARTtoRF.c: 72: RA1 = 1;
  4841  0E4B  148C               	bsf	12,1	;volatile
  4842  0E4C  0008               	return
  4843  0E4D                     __end_of_uartC_LED_close:	
  4844                           
  4845                           	psect	text17
  4846  07CC                     __ptext17:	
  4847 ;; *************** function _setLog_Code *****************
  4848 ;; Defined at:
  4849 ;;		line 308 in file "../src/RF_Control_B1.c"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;		None
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;		None
  4854 ;; Return value:  Size  Location     Type
  4855 ;;		None               void
  4856 ;; Registers used:
  4857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4858 ;; Tracked objects:
  4859 ;;		On entry : 0/0
  4860 ;;		On exit  : 0/0
  4861 ;;		Unchanged: 0/0
  4862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4863 ;;      Params:         0       0       0       0       0       0       0       0
  4864 ;;      Locals:         0       0       0       0       0       0       0       0
  4865 ;;      Temps:          1       0       0       0       0       0       0       0
  4866 ;;      Totals:         1       0       0       0       0       0       0       0
  4867 ;;Total ram usage:        1 bytes
  4868 ;; Hardware stack levels used:    1
  4869 ;; Hardware stack levels required when called:    3
  4870 ;; This function calls:
  4871 ;;		_setMemory_LoopSave
  4872 ;;		_setMemory_Modify
  4873 ;;		_setProductData
  4874 ;; This function is called by:
  4875 ;;		_getRxData
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           
  4880                           ;psect for function _setLog_Code
  4881  07CC                     _setLog_Code:	
  4882                           
  4883                           ;RF_Control_B1.c: 309: RF1.Learn = 0;
  4884                           
  4885                           ;incstack = 0
  4886                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4887  07CC  0020               	movlb	0	; select bank0
  4888  07CD  1330               	bcf	_RF1,6
  4889                           
  4890                           ;RF_Control_B1.c: 310: setProductData(12, RF_Data[12]);
  4891  07CE  0021               	movlb	1	; select bank1
  4892  07CF  082C               	movf	(_RF_Data^(0+128)+12),w
  4893  07D0  00F4               	movwf	??_setLog_Code
  4894  07D1  0874               	movf	??_setLog_Code,w
  4895  07D2  00F1               	movwf	setProductData@value
  4896  07D3  300C               	movlw	12
  4897  07D4  318E  268A  3187   	fcall	_setProductData
  4898                           
  4899                           ;RF_Control_B1.c: 311: setProductData(13, RF_Data[13]);
  4900  07D7  0021               	movlb	1	; select bank1
  4901  07D8  082D               	movf	(_RF_Data^(0+128)+13),w
  4902  07D9  00F4               	movwf	??_setLog_Code
  4903  07DA  0874               	movf	??_setLog_Code,w
  4904  07DB  00F1               	movwf	setProductData@value
  4905  07DC  300D               	movlw	13
  4906  07DD  318E  268A  3187   	fcall	_setProductData
  4907                           
  4908                           ;RF_Control_B1.c: 312: setProductData(14, RF_Data[14]);
  4909  07E0  0021               	movlb	1	; select bank1
  4910  07E1  082E               	movf	(_RF_Data^(0+128)+14),w
  4911  07E2  00F4               	movwf	??_setLog_Code
  4912  07E3  0874               	movf	??_setLog_Code,w
  4913  07E4  00F1               	movwf	setProductData@value
  4914  07E5  300E               	movlw	14
  4915  07E6  318E  268A  3187   	fcall	_setProductData
  4916                           
  4917                           ;RF_Control_B1.c: 313: ;;
  4918                           ;RF_Control_B1.c: 314: if (myMain.First == 1) {
  4919  07E9  0020               	movlb	0	; select bank0
  4920  07EA  1EBF               	btfss	_myMain,5
  4921  07EB  2FF0               	goto	l1120
  4922                           
  4923                           ;RF_Control_B1.c: 315: setMemory_LoopSave(1);
  4924  07EC  3001               	movlw	1
  4925  07ED  318E  26CD  3187   	fcall	_setMemory_LoopSave
  4926  07F0                     l1120:	
  4927                           
  4928                           ;RF_Control_B1.c: 316: }
  4929                           ;RF_Control_B1.c: 317: setMemory_Modify(1);
  4930  07F0  3001               	movlw	1
  4931  07F1  318E  26DD         	fcall	_setMemory_Modify
  4932  07F3  0008               	return
  4933  07F4                     __end_of_setLog_Code:	
  4934                           
  4935                           	psect	text18
  4936  0EDD                     __ptext18:	
  4937 ;; *************** function _setMemory_Modify *****************
  4938 ;; Defined at:
  4939 ;;		line 1086 in file "../src/MCU_B1.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;  command         1    wreg     unsigned char 
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;  command         1    2[COMMON] unsigned char 
  4944 ;; Return value:  Size  Location     Type
  4945 ;;		None               void
  4946 ;; Registers used:
  4947 ;;		wreg, status,2, status,0
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4953 ;;      Params:         0       0       0       0       0       0       0       0
  4954 ;;      Locals:         1       0       0       0       0       0       0       0
  4955 ;;      Temps:          1       0       0       0       0       0       0       0
  4956 ;;      Totals:         2       0       0       0       0       0       0       0
  4957 ;;Total ram usage:        2 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    2
  4960 ;; This function calls:
  4961 ;;		Nothing
  4962 ;; This function is called by:
  4963 ;;		_getRxData
  4964 ;;		_setLog_Code
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           
  4969                           ;psect for function _setMemory_Modify
  4970  0EDD                     _setMemory_Modify:	
  4971                           
  4972                           ;incstack = 0
  4973                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  4974                           ;setMemory_Modify@command stored from wreg
  4975  0EDD  00F2               	movwf	setMemory_Modify@command
  4976                           
  4977                           ;MCU_B1.c: 1087: Memory.Modify = command == 1 ? 1 : 0;
  4978  0EDE  0872               	movf	setMemory_Modify@command,w
  4979  0EDF  3A01               	xorlw	1
  4980  0EE0  3000               	movlw	0
  4981  0EE1  1903               	skipnz
  4982  0EE2  3001               	movlw	1
  4983  0EE3  00F1               	movwf	??_setMemory_Modify
  4984  0EE4  0021               	movlb	1	; select bank1
  4985  0EE5  0862               	movf	(_Memory^(0+128)+36),w
  4986  0EE6  0671               	xorwf	??_setMemory_Modify,w
  4987  0EE7  39FE               	andlw	-2
  4988  0EE8  0671               	xorwf	??_setMemory_Modify,w
  4989  0EE9  00E2               	movwf	(_Memory^(0+128)+36)
  4990                           
  4991                           ;MCU_B1.c: 1088: Memory.Time = 0;
  4992  0EEA  01E0               	clrf	(_Memory^(0+128)+34)
  4993  0EEB  01E1               	clrf	((_Memory+1)^(0+128)+34)
  4994  0EEC  0008               	return
  4995  0EED                     __end_of_setMemory_Modify:	
  4996                           
  4997                           	psect	text19
  4998  0ECD                     __ptext19:	
  4999 ;; *************** function _setMemory_LoopSave *****************
  5000 ;; Defined at:
  5001 ;;		line 1092 in file "../src/MCU_B1.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;  command         1    wreg     unsigned char 
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;  command         1    2[COMMON] unsigned char 
  5006 ;; Return value:  Size  Location     Type
  5007 ;;		None               void
  5008 ;; Registers used:
  5009 ;;		wreg, status,2, status,0
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5015 ;;      Params:         0       0       0       0       0       0       0       0
  5016 ;;      Locals:         1       0       0       0       0       0       0       0
  5017 ;;      Temps:          1       0       0       0       0       0       0       0
  5018 ;;      Totals:         2       0       0       0       0       0       0       0
  5019 ;;Total ram usage:        2 bytes
  5020 ;; Hardware stack levels used:    1
  5021 ;; Hardware stack levels required when called:    2
  5022 ;; This function calls:
  5023 ;;		Nothing
  5024 ;; This function is called by:
  5025 ;;		_getRxData
  5026 ;;		_setLog_Code
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           
  5031                           ;psect for function _setMemory_LoopSave
  5032  0ECD                     _setMemory_LoopSave:	
  5033                           
  5034                           ;incstack = 0
  5035                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  5036                           ;setMemory_LoopSave@command stored from wreg
  5037  0ECD  00F2               	movwf	setMemory_LoopSave@command
  5038                           
  5039                           ;MCU_B1.c: 1093: Memory.LoopSave = command == 1 ? 1 : 0;
  5040  0ECE  0872               	movf	setMemory_LoopSave@command,w
  5041  0ECF  3A01               	xorlw	1
  5042  0ED0  3000               	movlw	0
  5043  0ED1  1903               	skipnz
  5044  0ED2  3001               	movlw	1
  5045  0ED3  00F1               	movwf	??_setMemory_LoopSave
  5046  0ED4  0DF1               	rlf	??_setMemory_LoopSave,f
  5047  0ED5  0DF1               	rlf	??_setMemory_LoopSave,f
  5048  0ED6  0021               	movlb	1	; select bank1
  5049  0ED7  0862               	movf	(_Memory^(0+128)+36),w
  5050  0ED8  0671               	xorwf	??_setMemory_LoopSave,w
  5051  0ED9  39FB               	andlw	-5
  5052  0EDA  0671               	xorwf	??_setMemory_LoopSave,w
  5053  0EDB  00E2               	movwf	(_Memory^(0+128)+36)
  5054  0EDC  0008               	return
  5055  0EDD                     __end_of_setMemory_LoopSave:	
  5056                           
  5057                           	psect	text20
  5058  05CE                     __ptext20:	
  5059 ;; *************** function _setControl_Lights_Table *****************
  5060 ;; Defined at:
  5061 ;;		line 321 in file "../src/RF_Control_B1.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;		None
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;		None
  5066 ;; Return value:  Size  Location     Type
  5067 ;;		None               void
  5068 ;; Registers used:
  5069 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5070 ;; Tracked objects:
  5071 ;;		On entry : 0/0
  5072 ;;		On exit  : 0/0
  5073 ;;		Unchanged: 0/0
  5074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5075 ;;      Params:         0       0       0       0       0       0       0       0
  5076 ;;      Locals:         0       0       0       0       0       0       0       0
  5077 ;;      Temps:          0       0       0       0       0       0       0       0
  5078 ;;      Totals:         0       0       0       0       0       0       0       0
  5079 ;;Total ram usage:        0 bytes
  5080 ;; Hardware stack levels used:    1
  5081 ;; Hardware stack levels required when called:    3
  5082 ;; This function calls:
  5083 ;;		_getMain_All_LightsStatus
  5084 ;;		_setCmd_Status
  5085 ;;		_setProductData
  5086 ;;		_setTxData
  5087 ;; This function is called by:
  5088 ;;		_getRxData
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           
  5093                           ;psect for function _setControl_Lights_Table
  5094  05CE                     _setControl_Lights_Table:	
  5095                           
  5096                           ;RF_Control_B1.c: 323: switch (RF_Data[15]) {
  5097                           
  5098                           ;incstack = 0
  5099                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5100  05CE  2E10               	goto	l3133
  5101  05CF                     l3123:	
  5102                           ;RF_Control_B1.c: 325: case 0x00:
  5103                           
  5104                           
  5105                           ;RF_Control_B1.c: 326: if (getMain_All_LightsStatus() == 1) {
  5106  05CF  318E  2621  3185   	fcall	_getMain_All_LightsStatus
  5107  05D2  3A01               	xorlw	1
  5108  05D3  1D03               	skipz
  5109  05D4  2DDB               	goto	l3127
  5110                           
  5111                           ;RF_Control_B1.c: 347: setCmd_Status(1, 1);
  5112  05D5  01F1               	clrf	setCmd_Status@cmd
  5113  05D6  0AF1               	incf	setCmd_Status@cmd,f
  5114  05D7  3001               	movlw	1
  5115  05D8  318F  2750         	fcall	_setCmd_Status
  5116                           
  5117                           ;RF_Control_B1.c: 348: } else {
  5118  05DA  0008               	return
  5119  05DB                     l3127:	
  5120                           
  5121                           ;RF_Control_B1.c: 349: setProductData(9, 0);
  5122  05DB  01F1               	clrf	setProductData@value
  5123  05DC  3009               	movlw	9
  5124  05DD  318E  268A  3185   	fcall	_setProductData
  5125                           
  5126                           ;RF_Control_B1.c: 350: setProductData(11, 0);
  5127  05E0  01F1               	clrf	setProductData@value
  5128  05E1  300B               	movlw	11
  5129  05E2  318E  268A  3185   	fcall	_setProductData
  5130                           
  5131                           ;RF_Control_B1.c: 351: setProductData(15, 0);
  5132  05E5  01F1               	clrf	setProductData@value
  5133  05E6  300F               	movlw	15
  5134  05E7  318E  268A  3185   	fcall	_setProductData
  5135                           
  5136                           ;RF_Control_B1.c: 352: setProductData(17, 0);
  5137  05EA  01F1               	clrf	setProductData@value
  5138  05EB  3011               	movlw	17
  5139  05EC  318E  268A  3185   	fcall	_setProductData
  5140                           
  5141                           ;RF_Control_B1.c: 353: setTxData();
  5142  05EF  3180  2038         	fcall	_setTxData
  5143                           
  5144                           ;RF_Control_B1.c: 354: }
  5145                           ;RF_Control_B1.c: 355: break;
  5146  05F1  0008               	return
  5147  05F2                     l3129:	
  5148                           ;RF_Control_B1.c: 357: case 0x20:
  5149                           
  5150                           
  5151                           ;RF_Control_B1.c: 358: setProductData(9, 0);
  5152  05F2  01F1               	clrf	setProductData@value
  5153  05F3  3009               	movlw	9
  5154  05F4  318E  268A  3185   	fcall	_setProductData
  5155                           
  5156                           ;RF_Control_B1.c: 359: setProductData(11, 0);
  5157  05F7  01F1               	clrf	setProductData@value
  5158  05F8  300B               	movlw	11
  5159  05F9  318E  268A  3185   	fcall	_setProductData
  5160                           
  5161                           ;RF_Control_B1.c: 360: setProductData(15, product->Data[15]);
  5162  05FC  0020               	movlb	0	; select bank0
  5163  05FD  0862               	movf	_product,w
  5164  05FE  0086               	movwf	6
  5165  05FF  3001               	movlw	1	; select bank2/3
  5166  0600  0087               	movwf	7
  5167  0601  3001               	movlw	1	; select bank2/3
  5168  0602  3F4F               	moviw [15]fsr1
  5169  0603  00F1               	movwf	setProductData@value
  5170  0604  300F               	movlw	15
  5171  0605  318E  268A  3185   	fcall	_setProductData
  5172                           
  5173                           ;RF_Control_B1.c: 361: setProductData(17, 0);
  5174  0608  01F1               	clrf	setProductData@value
  5175  0609  3011               	movlw	17
  5176  060A  318E  268A  3185   	fcall	_setProductData
  5177                           
  5178                           ;RF_Control_B1.c: 362: setTxData();
  5179  060D  3180  2038         	fcall	_setTxData
  5180                           
  5181                           ;RF_Control_B1.c: 411: }
  5182                           
  5183                           ;RF_Control_B1.c: 363: break;
  5184  060F  0008               	return
  5185  0610                     l3133:	
  5186  0610  0021               	movlb	1	; select bank1
  5187  0611  082F               	movf	(_RF_Data^(0+128)+15),w
  5188                           
  5189                           ; Switch size 1, requested type "space"
  5190                           ; Number of cases is 2, Range of values is 0 to 32
  5191                           ; switch strategies available:
  5192                           ; Name         Instructions Cycles
  5193                           ; simple_byte            7     4 (average)
  5194                           ; direct_byte           72     6 (fixed)
  5195                           ; jumptable            260     6 (fixed)
  5196                           ;	Chosen strategy is simple_byte
  5197  0612  3A00               	xorlw	0	; case 0
  5198  0613  1903               	skipnz
  5199  0614  2DCF               	goto	l3123
  5200  0615  3A20               	xorlw	32	; case 32
  5201  0616  1903               	skipnz
  5202  0617  2DF2               	goto	l3129
  5203  0618  2E19               	goto	l1130
  5204  0619                     l1130:	
  5205  0619  0008               	return
  5206  061A                     __end_of_setControl_Lights_Table:	
  5207                           
  5208                           	psect	text21
  5209  0038                     __ptext21:	
  5210 ;; *************** function _setTxData *****************
  5211 ;; Defined at:
  5212 ;;		line 183 in file "../src/RF_Control_B1.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;		None
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;  value           1    2[COMMON] unsigned char 
  5217 ;;  i               1    0        unsigned char 
  5218 ;; Return value:  Size  Location     Type
  5219 ;;		None               void
  5220 ;; Registers used:
  5221 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5222 ;; Tracked objects:
  5223 ;;		On entry : 0/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5227 ;;      Params:         0       0       0       0       0       0       0       0
  5228 ;;      Locals:         1       0       0       0       0       0       0       0
  5229 ;;      Temps:          1       0       0       0       0       0       0       0
  5230 ;;      Totals:         2       0       0       0       0       0       0       0
  5231 ;;Total ram usage:        2 bytes
  5232 ;; Hardware stack levels used:    1
  5233 ;; Hardware stack levels required when called:    2
  5234 ;; This function calls:
  5235 ;;		Nothing
  5236 ;; This function is called by:
  5237 ;;		_getRxData
  5238 ;;		_setControl_Lights_Table
  5239 ;;		_uartC_switch_control
  5240 ;;		_setRFSW_Control
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           
  5245                           ;psect for function _setTxData
  5246  0038                     _setTxData:	
  5247                           
  5248                           ;RF_Control_B1.c: 184: char i;
  5249                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
  5250                           
  5251                           ;incstack = 0
  5252                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0]
  5253  0038  0020               	movlb	0	; select bank0
  5254  0039  1C30               	btfss	_RF1,0
  5255  003A  0008               	return
  5256                           
  5257                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
  5258  003B  1530               	bsf	_RF1,2
  5259                           
  5260                           ;RF_Control_B1.c: 188: RF1.Count = 0;
  5261  003C  01B3               	clrf	_RF1+3
  5262  003D  01B4               	clrf	_RF1+4
  5263                           
  5264                           ;RF_Control_B1.c: 198: RF_Data[0] = 0x00;
  5265  003E  0021               	movlb	1	; select bank1
  5266  003F  01A0               	clrf	_RF_Data^(0+128)
  5267                           
  5268                           ;RF_Control_B1.c: 199: RF_Data[1] = 0x02;
  5269  0040  3002               	movlw	2
  5270  0041  00F1               	movwf	??_setTxData
  5271  0042  0871               	movf	??_setTxData,w
  5272  0043  00A1               	movwf	(_RF_Data^(0+128)+1)
  5273                           
  5274                           ;RF_Control_B1.c: 201: if (u1.switch_dimming == 1) {
  5275  0044  0020               	movlb	0	; select bank0
  5276  0045  1F21               	btfss	_u1+1,6
  5277  0046  2860               	goto	l2989
  5278                           
  5279                           ;RF_Control_B1.c: 202: u1.switch_dimming = 0;
  5280  0047  1321               	bcf	_u1+1,6
  5281                           
  5282                           ;RF_Control_B1.c: 203: if (product->Data[11] != 0) {
  5283  0048  0862               	movf	_product,w
  5284  0049  3E0B               	addlw	11
  5285  004A  0086               	movwf	6
  5286  004B  3001               	movlw	1	; select bank2/3
  5287  004C  0087               	movwf	7
  5288  004D  0801               	movf	1,w
  5289  004E  3A00               	xorlw	0
  5290  004F  1903               	skipnz
  5291  0050  286E               	goto	l1099
  5292                           
  5293                           ;RF_Control_B1.c: 204: char value = 208;
  5294  0051  30D0               	movlw	208
  5295  0052  00F1               	movwf	??_setTxData
  5296  0053  0871               	movf	??_setTxData,w
  5297  0054  00F2               	movwf	setTxData@value
  5298                           
  5299                           ;RF_Control_B1.c: 205: value += product->Data[11];
  5300  0055  0862               	movf	_product,w
  5301  0056  3E0B               	addlw	11
  5302  0057  0086               	movwf	6
  5303  0058  3001               	movlw	1	; select bank2/3
  5304  0059  0087               	movwf	7
  5305  005A  0801               	movf	1,w
  5306  005B  00F1               	movwf	??_setTxData
  5307  005C  0871               	movf	??_setTxData,w
  5308  005D  07F2               	addwf	setTxData@value,f
  5309                           
  5310                           ;RF_Control_B1.c: 206: product->Data[15] = value;
  5311  005E  0872               	movf	setTxData@value,w
  5312  005F  2866               	goto	L1
  5313  0060                     l2989:	
  5314                           ;RF_Control_B1.c: 207: }
  5315                           ;RF_Control_B1.c: 208: } else {
  5316                           
  5317                           
  5318                           ;RF_Control_B1.c: 209: product->Data[15] = product->Data[11];
  5319  0060  0862               	movf	_product,w
  5320  0061  3E0B               	addlw	11
  5321  0062  0086               	movwf	6
  5322  0063  3001               	movlw	1	; select bank2/3
  5323  0064  0087               	movwf	7
  5324  0065  0801               	movf	1,w
  5325  0066                     L1:	
  5326  0066  00F1               	movwf	??_setTxData
  5327  0067  0862               	movf	_product,w
  5328  0068  3E0F               	addlw	15
  5329  0069  0086               	movwf	6
  5330  006A  3001               	movlw	1	; select bank2/3
  5331  006B  0087               	movwf	7
  5332  006C  0871               	movf	??_setTxData,w
  5333  006D  0081               	movwf	1
  5334  006E                     l1099:	
  5335                           
  5336                           ;RF_Control_B1.c: 210: }
  5337                           ;RF_Control_B1.c: 221: RF_Data[2] = product->Data[2];
  5338  006E  0862               	movf	_product,w
  5339  006F  0086               	movwf	6
  5340  0070  3001               	movlw	1	; select bank2/3
  5341  0071  0087               	movwf	7
  5342  0072  3001               	movlw	1	; select bank2/3
  5343  0073  3F42               	moviw [2]fsr1
  5344  0074  0021               	movlb	1	; select bank1
  5345  0075  00A2               	movwf	(_RF_Data^(0+128)+2)
  5346                           
  5347                           ;RF_Control_B1.c: 222: RF_Data[3] = product->Data[3];
  5348  0076  0020               	movlb	0	; select bank0
  5349  0077  0862               	movf	_product,w
  5350  0078  0086               	movwf	6
  5351  0079  3001               	movlw	1	; select bank2/3
  5352  007A  0087               	movwf	7
  5353  007B  3001               	movlw	1	; select bank2/3
  5354  007C  3F43               	moviw [3]fsr1
  5355  007D  0021               	movlb	1	; select bank1
  5356  007E  00A3               	movwf	(_RF_Data^(0+128)+3)
  5357                           
  5358                           ;RF_Control_B1.c: 223: RF_Data[4] = product->Data[4];
  5359  007F  0020               	movlb	0	; select bank0
  5360  0080  0862               	movf	_product,w
  5361  0081  0086               	movwf	6
  5362  0082  3001               	movlw	1	; select bank2/3
  5363  0083  0087               	movwf	7
  5364  0084  3001               	movlw	1	; select bank2/3
  5365  0085  3F44               	moviw [4]fsr1
  5366  0086  0021               	movlb	1	; select bank1
  5367  0087  00A4               	movwf	(_RF_Data^(0+128)+4)
  5368                           
  5369                           ;RF_Control_B1.c: 224: RF_Data[5] = product->Data[5];
  5370  0088  0020               	movlb	0	; select bank0
  5371  0089  0862               	movf	_product,w
  5372  008A  0086               	movwf	6
  5373  008B  3001               	movlw	1	; select bank2/3
  5374  008C  0087               	movwf	7
  5375  008D  3001               	movlw	1	; select bank2/3
  5376  008E  3F45               	moviw [5]fsr1
  5377  008F  0021               	movlb	1	; select bank1
  5378  0090  00A5               	movwf	(_RF_Data^(0+128)+5)
  5379                           
  5380                           ;RF_Control_B1.c: 225: RF_Data[6] = product->Data[6];
  5381  0091  0020               	movlb	0	; select bank0
  5382  0092  0862               	movf	_product,w
  5383  0093  0086               	movwf	6
  5384  0094  3001               	movlw	1	; select bank2/3
  5385  0095  0087               	movwf	7
  5386  0096  3001               	movlw	1	; select bank2/3
  5387  0097  3F46               	moviw [6]fsr1
  5388  0098  0021               	movlb	1	; select bank1
  5389  0099  00A6               	movwf	(_RF_Data^(0+128)+6)
  5390                           
  5391                           ;RF_Control_B1.c: 226: RF_Data[7] = product->Data[7];
  5392  009A  0020               	movlb	0	; select bank0
  5393  009B  0862               	movf	_product,w
  5394  009C  0086               	movwf	6
  5395  009D  3001               	movlw	1	; select bank2/3
  5396  009E  0087               	movwf	7
  5397  009F  3001               	movlw	1	; select bank2/3
  5398  00A0  3F47               	moviw [7]fsr1
  5399  00A1  0021               	movlb	1	; select bank1
  5400  00A2  00A7               	movwf	(_RF_Data^(0+128)+7)
  5401                           
  5402                           ;RF_Control_B1.c: 227: RF_Data[8] = product->Data[8];
  5403  00A3  0020               	movlb	0	; select bank0
  5404  00A4  0862               	movf	_product,w
  5405  00A5  0086               	movwf	6
  5406  00A6  3001               	movlw	1	; select bank2/3
  5407  00A7  0087               	movwf	7
  5408  00A8  3001               	movlw	1	; select bank2/3
  5409  00A9  3F48               	moviw [8]fsr1
  5410  00AA  0021               	movlb	1	; select bank1
  5411  00AB  00A8               	movwf	(_RF_Data^(0+128)+8)
  5412                           
  5413                           ;RF_Control_B1.c: 228: RF_Data[9] = product->Data[9];
  5414  00AC  0020               	movlb	0	; select bank0
  5415  00AD  0862               	movf	_product,w
  5416  00AE  0086               	movwf	6
  5417  00AF  3001               	movlw	1	; select bank2/3
  5418  00B0  0087               	movwf	7
  5419  00B1  3001               	movlw	1	; select bank2/3
  5420  00B2  3F49               	moviw [9]fsr1
  5421  00B3  0021               	movlb	1	; select bank1
  5422  00B4  00A9               	movwf	(_RF_Data^(0+128)+9)
  5423                           
  5424                           ;RF_Control_B1.c: 229: RF_Data[10] = product->Data[10];
  5425  00B5  0020               	movlb	0	; select bank0
  5426  00B6  0862               	movf	_product,w
  5427  00B7  0086               	movwf	6
  5428  00B8  3001               	movlw	1	; select bank2/3
  5429  00B9  0087               	movwf	7
  5430  00BA  3001               	movlw	1	; select bank2/3
  5431  00BB  3F4A               	moviw [10]fsr1
  5432  00BC  0021               	movlb	1	; select bank1
  5433  00BD  00AA               	movwf	(_RF_Data^(0+128)+10)
  5434                           
  5435                           ;RF_Control_B1.c: 230: RF_Data[11] = product->Data[11];
  5436  00BE  0020               	movlb	0	; select bank0
  5437  00BF  0862               	movf	_product,w
  5438  00C0  0086               	movwf	6
  5439  00C1  3001               	movlw	1	; select bank2/3
  5440  00C2  0087               	movwf	7
  5441  00C3  3001               	movlw	1	; select bank2/3
  5442  00C4  3F4B               	moviw [11]fsr1
  5443  00C5  0021               	movlb	1	; select bank1
  5444  00C6  00AB               	movwf	(_RF_Data^(0+128)+11)
  5445                           
  5446                           ;RF_Control_B1.c: 231: RF_Data[12] = product->Data[12];
  5447  00C7  0020               	movlb	0	; select bank0
  5448  00C8  0862               	movf	_product,w
  5449  00C9  0086               	movwf	6
  5450  00CA  3001               	movlw	1	; select bank2/3
  5451  00CB  0087               	movwf	7
  5452  00CC  3001               	movlw	1	; select bank2/3
  5453  00CD  3F4C               	moviw [12]fsr1
  5454  00CE  0021               	movlb	1	; select bank1
  5455  00CF  00AC               	movwf	(_RF_Data^(0+128)+12)
  5456                           
  5457                           ;RF_Control_B1.c: 232: RF_Data[13] = product->Data[13];
  5458  00D0  0020               	movlb	0	; select bank0
  5459  00D1  0862               	movf	_product,w
  5460  00D2  0086               	movwf	6
  5461  00D3  3001               	movlw	1	; select bank2/3
  5462  00D4  0087               	movwf	7
  5463  00D5  3001               	movlw	1	; select bank2/3
  5464  00D6  3F4D               	moviw [13]fsr1
  5465  00D7  0021               	movlb	1	; select bank1
  5466  00D8  00AD               	movwf	(_RF_Data^(0+128)+13)
  5467                           
  5468                           ;RF_Control_B1.c: 233: RF_Data[14] = product->Data[14];
  5469  00D9  0020               	movlb	0	; select bank0
  5470  00DA  0862               	movf	_product,w
  5471  00DB  0086               	movwf	6
  5472  00DC  3001               	movlw	1	; select bank2/3
  5473  00DD  0087               	movwf	7
  5474  00DE  3001               	movlw	1	; select bank2/3
  5475  00DF  3F4E               	moviw [14]fsr1
  5476  00E0  0021               	movlb	1	; select bank1
  5477  00E1  00AE               	movwf	(_RF_Data^(0+128)+14)
  5478                           
  5479                           ;RF_Control_B1.c: 234: RF_Data[15] = product->Data[15];
  5480  00E2  0020               	movlb	0	; select bank0
  5481  00E3  0862               	movf	_product,w
  5482  00E4  0086               	movwf	6
  5483  00E5  3001               	movlw	1	; select bank2/3
  5484  00E6  0087               	movwf	7
  5485  00E7  3001               	movlw	1	; select bank2/3
  5486  00E8  3F4F               	moviw [15]fsr1
  5487  00E9  0021               	movlb	1	; select bank1
  5488  00EA  00AF               	movwf	(_RF_Data^(0+128)+15)
  5489                           
  5490                           ;RF_Control_B1.c: 235: RF_Data[16] = product->Data[16];
  5491  00EB  0020               	movlb	0	; select bank0
  5492  00EC  0862               	movf	_product,w
  5493  00ED  0086               	movwf	6
  5494  00EE  3001               	movlw	1	; select bank2/3
  5495  00EF  0087               	movwf	7
  5496  00F0  3001               	movlw	1	; select bank2/3
  5497  00F1  3F50               	moviw [16]fsr1
  5498  00F2  0021               	movlb	1	; select bank1
  5499  00F3  00B0               	movwf	(_RF_Data^(0+128)+16)
  5500                           
  5501                           ;RF_Control_B1.c: 236: RF_Data[17] = product->Data[17];
  5502  00F4  0020               	movlb	0	; select bank0
  5503  00F5  0862               	movf	_product,w
  5504  00F6  0086               	movwf	6
  5505  00F7  3001               	movlw	1	; select bank2/3
  5506  00F8  0087               	movwf	7
  5507  00F9  3001               	movlw	1	; select bank2/3
  5508  00FA  3F51               	moviw [17]fsr1
  5509  00FB  0021               	movlb	1	; select bank1
  5510  00FC  00B1               	movwf	(_RF_Data^(0+128)+17)
  5511                           
  5512                           ;RF_Control_B1.c: 237: RF_Data[18] = product->Data[18];
  5513  00FD  0020               	movlb	0	; select bank0
  5514  00FE  0862               	movf	_product,w
  5515  00FF  0086               	movwf	6
  5516  0100  3001               	movlw	1	; select bank2/3
  5517  0101  0087               	movwf	7
  5518  0102  3001               	movlw	1	; select bank2/3
  5519  0103  3F52               	moviw [18]fsr1
  5520  0104  0021               	movlb	1	; select bank1
  5521  0105  00B2               	movwf	(_RF_Data^(0+128)+18)
  5522                           
  5523                           ;RF_Control_B1.c: 238: RF_Data[19] = product->Data[19];
  5524  0106  0020               	movlb	0	; select bank0
  5525  0107  0862               	movf	_product,w
  5526  0108  0086               	movwf	6
  5527  0109  3001               	movlw	1	; select bank2/3
  5528  010A  0087               	movwf	7
  5529  010B  3001               	movlw	1	; select bank2/3
  5530  010C  3F53               	moviw [19]fsr1
  5531  010D  0021               	movlb	1	; select bank1
  5532  010E  00B3               	movwf	(_RF_Data^(0+128)+19)
  5533                           
  5534                           ;RF_Control_B1.c: 239: RF_Data[20] = 0x0a;
  5535  010F  300A               	movlw	10
  5536  0110  00F1               	movwf	??_setTxData
  5537  0111  0871               	movf	??_setTxData,w
  5538  0112  00B4               	movwf	(_RF_Data^(0+128)+20)
  5539  0113  0008               	return
  5540  0114                     __end_of_setTxData:	
  5541                           
  5542                           	psect	text22
  5543  0E8A                     __ptext22:	
  5544 ;; *************** function _setProductData *****************
  5545 ;; Defined at:
  5546 ;;		line 645 in file "../src/Main_B1.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  address         1    wreg     unsigned char 
  5549 ;;  value           1    1[COMMON] unsigned char 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  address         1    3[COMMON] unsigned char 
  5552 ;; Return value:  Size  Location     Type
  5553 ;;		None               void
  5554 ;; Registers used:
  5555 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5561 ;;      Params:         1       0       0       0       0       0       0       0
  5562 ;;      Locals:         1       0       0       0       0       0       0       0
  5563 ;;      Temps:          1       0       0       0       0       0       0       0
  5564 ;;      Totals:         3       0       0       0       0       0       0       0
  5565 ;;Total ram usage:        3 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    2
  5568 ;; This function calls:
  5569 ;;		Nothing
  5570 ;; This function is called by:
  5571 ;;		_setLog_Code
  5572 ;;		_setControl_Lights_Table
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           
  5577                           ;psect for function _setProductData
  5578  0E8A                     _setProductData:	
  5579                           
  5580                           ;incstack = 0
  5581                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
  5582                           ;setProductData@address stored from wreg
  5583  0E8A  00F3               	movwf	setProductData@address
  5584                           
  5585                           ;Main_B1.c: 646: _product.Data[address] = value;
  5586  0E8B  0871               	movf	setProductData@value,w
  5587  0E8C  00F2               	movwf	??_setProductData
  5588  0E8D  0873               	movf	setProductData@address,w
  5589  0E8E  3E20               	addlw	__product& (0+255)
  5590  0E8F  0086               	movwf	6
  5591  0E90  3001               	movlw	1	; select bank2/3
  5592  0E91  0087               	movwf	7
  5593  0E92  0872               	movf	??_setProductData,w
  5594  0E93  0081               	movwf	1
  5595  0E94  0008               	return
  5596  0E95                     __end_of_setProductData:	
  5597                           
  5598                           	psect	text23
  5599  0F50                     __ptext23:	
  5600 ;; *************** function _setCmd_Status *****************
  5601 ;; Defined at:
  5602 ;;		line 651 in file "../src/Main_B1.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;  number          1    wreg     unsigned char 
  5605 ;;  cmd             1    1[COMMON] unsigned char 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  number          1    3[COMMON] unsigned char 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;		None               void
  5610 ;; Registers used:
  5611 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5617 ;;      Params:         1       0       0       0       0       0       0       0
  5618 ;;      Locals:         1       0       0       0       0       0       0       0
  5619 ;;      Temps:          1       0       0       0       0       0       0       0
  5620 ;;      Totals:         3       0       0       0       0       0       0       0
  5621 ;;Total ram usage:        3 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    2
  5624 ;; This function calls:
  5625 ;;		Nothing
  5626 ;; This function is called by:
  5627 ;;		_setControl_Lights_Table
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           
  5632                           ;psect for function _setCmd_Status
  5633  0F50                     _setCmd_Status:	
  5634                           
  5635                           ;incstack = 0
  5636                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
  5637                           ;setCmd_Status@number stored from wreg
  5638  0F50  00F3               	movwf	setCmd_Status@number
  5639                           
  5640                           ;Main_B1.c: 652: switch (number) {
  5641  0F51  2F5F               	goto	l2965
  5642  0F52                     l2961:	
  5643                           ;Main_B1.c: 653: case 1:
  5644                           
  5645                           
  5646                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
  5647  0F52  0871               	movf	setCmd_Status@cmd,w
  5648  0F53  3A01               	xorlw	1
  5649  0F54  3000               	movlw	0
  5650  0F55  1903               	skipnz
  5651  0F56  3001               	movlw	1
  5652  0F57  00F2               	movwf	??_setCmd_Status
  5653  0F58  0020               	movlb	0	; select bank0
  5654  0F59  0852               	movf	_Cmd,w
  5655  0F5A  0672               	xorwf	??_setCmd_Status,w
  5656  0F5B  39FE               	andlw	-2
  5657  0F5C  0672               	xorwf	??_setCmd_Status,w
  5658  0F5D  00D2               	movwf	_Cmd
  5659                           
  5660                           ;Main_B1.c: 656: }
  5661                           
  5662                           ;Main_B1.c: 655: break;
  5663  0F5E  0008               	return
  5664  0F5F                     l2965:	
  5665  0F5F  0873               	movf	setCmd_Status@number,w
  5666                           
  5667                           ; Switch size 1, requested type "space"
  5668                           ; Number of cases is 1, Range of values is 1 to 1
  5669                           ; switch strategies available:
  5670                           ; Name         Instructions Cycles
  5671                           ; simple_byte            4     3 (average)
  5672                           ; direct_byte           11     9 (fixed)
  5673                           ; jumptable            263     9 (fixed)
  5674                           ;	Chosen strategy is simple_byte
  5675  0F60  3A01               	xorlw	1	; case 1
  5676  0F61  1903               	skipnz
  5677  0F62  2F52               	goto	l2961
  5678  0F63  2F64               	goto	l767
  5679  0F64                     l767:	
  5680  0F64  0008               	return
  5681  0F65                     __end_of_setCmd_Status:	
  5682                           
  5683                           	psect	text24
  5684  065B                     __ptext24:	
  5685 ;; *************** function ___lwdiv *****************
  5686 ;; Defined at:
  5687 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;  divisor         2    1[COMMON] unsigned int 
  5690 ;;  dividend        2    3[COMMON] unsigned int 
  5691 ;; Auto vars:     Size  Location     Type
  5692 ;;  quotient        2    6[COMMON] unsigned int 
  5693 ;;  counter         1    8[COMMON] unsigned char 
  5694 ;; Return value:  Size  Location     Type
  5695 ;;                  2    1[COMMON] unsigned int 
  5696 ;; Registers used:
  5697 ;;		wreg, status,2, status,0
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5703 ;;      Params:         4       0       0       0       0       0       0       0
  5704 ;;      Locals:         3       0       0       0       0       0       0       0
  5705 ;;      Temps:          1       0       0       0       0       0       0       0
  5706 ;;      Totals:         8       0       0       0       0       0       0       0
  5707 ;;Total ram usage:        8 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    2
  5710 ;; This function calls:
  5711 ;;		Nothing
  5712 ;; This function is called by:
  5713 ;;		_setRF_Main
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           
  5718                           ;psect for function ___lwdiv
  5719  065B                     ___lwdiv:	
  5720                           
  5721                           ;incstack = 0
  5722                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5723  065B  01F6               	clrf	___lwdiv@quotient
  5724  065C  01F7               	clrf	___lwdiv@quotient+1
  5725  065D  0872               	movf	___lwdiv@divisor+1,w
  5726  065E  0471               	iorwf	___lwdiv@divisor,w
  5727  065F  1903               	skipnz
  5728  0660  2E8A               	goto	l3475
  5729  0661  01F8               	clrf	___lwdiv@counter
  5730  0662  0AF8               	incf	___lwdiv@counter,f
  5731  0663                     l3463:	
  5732  0663  1BF2               	btfsc	___lwdiv@divisor+1,7
  5733  0664  2E6F               	goto	l3465
  5734  0665  3001               	movlw	1
  5735  0666                     u2175:	
  5736  0666  35F1               	lslf	___lwdiv@divisor,f
  5737  0667  0DF2               	rlf	___lwdiv@divisor+1,f
  5738  0668  0B89               	decfsz	9,f
  5739  0669  2E66               	goto	u2175
  5740  066A  3001               	movlw	1
  5741  066B  00F5               	movwf	??___lwdiv
  5742  066C  0875               	movf	??___lwdiv,w
  5743  066D  07F8               	addwf	___lwdiv@counter,f
  5744  066E  2E63               	goto	l3463
  5745  066F                     l3465:	
  5746  066F  3001               	movlw	1
  5747  0670                     u2195:	
  5748  0670  35F6               	lslf	___lwdiv@quotient,f
  5749  0671  0DF7               	rlf	___lwdiv@quotient+1,f
  5750  0672  0B89               	decfsz	9,f
  5751  0673  2E70               	goto	u2195
  5752  0674  0872               	movf	___lwdiv@divisor+1,w
  5753  0675  0274               	subwf	___lwdiv@dividend+1,w
  5754  0676  1D03               	skipz
  5755  0677  2E7A               	goto	u2205
  5756  0678  0871               	movf	___lwdiv@divisor,w
  5757  0679  0273               	subwf	___lwdiv@dividend,w
  5758  067A                     u2205:	
  5759  067A  1C03               	skipc
  5760  067B  2E81               	goto	l3471
  5761  067C  0871               	movf	___lwdiv@divisor,w
  5762  067D  02F3               	subwf	___lwdiv@dividend,f
  5763  067E  0872               	movf	___lwdiv@divisor+1,w
  5764  067F  3BF4               	subwfb	___lwdiv@dividend+1,f
  5765  0680  1476               	bsf	___lwdiv@quotient,0
  5766  0681                     l3471:	
  5767  0681  3001               	movlw	1
  5768  0682                     u2215:	
  5769  0682  36F2               	lsrf	___lwdiv@divisor+1,f
  5770  0683  0CF1               	rrf	___lwdiv@divisor,f
  5771  0684  0B89               	decfsz	9,f
  5772  0685  2E82               	goto	u2215
  5773  0686  3001               	movlw	1
  5774  0687  02F8               	subwf	___lwdiv@counter,f
  5775  0688  1D03               	btfss	3,2
  5776  0689  2E6F               	goto	l3465
  5777  068A                     l3475:	
  5778  068A  0877               	movf	___lwdiv@quotient+1,w
  5779  068B  01F2               	clrf	?___lwdiv+1
  5780  068C  07F2               	addwf	?___lwdiv+1,f
  5781  068D  0876               	movf	___lwdiv@quotient,w
  5782  068E  01F1               	clrf	?___lwdiv
  5783  068F  07F1               	addwf	?___lwdiv,f
  5784  0690  0008               	return
  5785  0691                     __end_of___lwdiv:	
  5786                           
  5787                           	psect	text25
  5788  0EAF                     __ptext25:	
  5789 ;; *************** function _RF_RxDisable *****************
  5790 ;; Defined at:
  5791 ;;		line 154 in file "../src/RF_Control_B1.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;		None
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;		None
  5796 ;; Return value:  Size  Location     Type
  5797 ;;		None               void
  5798 ;; Registers used:
  5799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5805 ;;      Params:         0       0       0       0       0       0       0       0
  5806 ;;      Locals:         0       0       0       0       0       0       0       0
  5807 ;;      Temps:          0       0       0       0       0       0       0       0
  5808 ;;      Totals:         0       0       0       0       0       0       0       0
  5809 ;;Total ram usage:        0 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    4
  5812 ;; This function calls:
  5813 ;;		_CC2500_WriteCommand
  5814 ;; This function is called by:
  5815 ;;		_setRF_Main
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           
  5820                           ;psect for function _RF_RxDisable
  5821  0EAF                     _RF_RxDisable:	
  5822                           
  5823                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  5824                           
  5825                           ;incstack = 0
  5826                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5827  0EAF  0020               	movlb	0	; select bank0
  5828  0EB0  18B0               	btfsc	_RF1,1
  5829  0EB1  2EB4               	goto	l1089
  5830  0EB2  1DB0               	btfss	_RF1,3
  5831  0EB3  0008               	return
  5832  0EB4                     l1089:	
  5833                           
  5834                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  5835  0EB4  11B0               	bcf	_RF1,3
  5836                           
  5837                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  5838  0EB5  10B0               	bcf	_RF1,1
  5839                           
  5840                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  5841  0EB6  3036               	movlw	54
  5842  0EB7  318F  27AB  318E   	fcall	_CC2500_WriteCommand
  5843                           
  5844                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  5845  0EBA  303A               	movlw	58
  5846  0EBB  318F  27AB         	fcall	_CC2500_WriteCommand
  5847  0EBD  0008               	return
  5848  0EBE                     __end_of_RF_RxDisable:	
  5849                           
  5850                           	psect	text26
  5851  0466                     __ptext26:	
  5852 ;; *************** function _CC2500_TxData *****************
  5853 ;; Defined at:
  5854 ;;		line 32 in file "../src/CC2500_B1.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;		None
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  loop_e          1    6[COMMON] unsigned char 
  5859 ;; Return value:  Size  Location     Type
  5860 ;;		None               void
  5861 ;; Registers used:
  5862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5868 ;;      Params:         0       0       0       0       0       0       0       0
  5869 ;;      Locals:         1       0       0       0       0       0       0       0
  5870 ;;      Temps:          1       0       0       0       0       0       0       0
  5871 ;;      Totals:         2       0       0       0       0       0       0       0
  5872 ;;Total ram usage:        2 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; Hardware stack levels required when called:    4
  5875 ;; This function calls:
  5876 ;;		_CC2500_WriteByte
  5877 ;;		_CC2500_WriteCommand
  5878 ;;		_RF_Timeout_Counter
  5879 ;;		_setRF_TimeoutCleared
  5880 ;; This function is called by:
  5881 ;;		_setRF_Main
  5882 ;; This function uses a non-reentrant model
  5883 ;;
  5884                           
  5885                           
  5886                           ;psect for function _CC2500_TxData
  5887  0466                     _CC2500_TxData:	
  5888                           
  5889                           ;CC2500_B1.c: 33: unsigned char loop_e;
  5890                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  5891                           
  5892                           ;incstack = 0
  5893                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5894  0466  3036               	movlw	54
  5895  0467  318F  27AB  3184   	fcall	_CC2500_WriteCommand
  5896                           
  5897                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  5898  046A  303B               	movlw	59
  5899  046B  318F  27AB  3184   	fcall	_CC2500_WriteCommand
  5900                           
  5901                           ;CC2500_B1.c: 38: RC0 = 0;
  5902  046E  0020               	movlb	0	; select bank0
  5903  046F  100E               	bcf	14,0	;volatile
  5904                           
  5905                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  5906  0470  307F               	movlw	127
  5907  0471  00F5               	movwf	??_CC2500_TxData
  5908  0472  0875               	movf	??_CC2500_TxData,w
  5909  0473  00D6               	movwf	_SPI0Buffer
  5910                           
  5911                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  5912  0474  2C78               	goto	l3207
  5913  0475                     l3205:	
  5914                           
  5915                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  5916  0475  318F  2726  3184   	fcall	_RF_Timeout_Counter
  5917  0478                     l3207:	
  5918  0478  0020               	movlb	0	; select bank0
  5919  0479  1E8E               	btfss	14,5	;volatile
  5920  047A  2C7D               	goto	l3211
  5921  047B  1F31               	btfss	_RF1+1,6
  5922  047C  2C75               	goto	l3205
  5923  047D                     l3211:	
  5924                           
  5925                           ;CC2500_B1.c: 42: };
  5926                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  5927  047D  318E  262E  3184   	fcall	_setRF_TimeoutCleared
  5928                           
  5929                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  5930  0480  318F  2712  3184   	fcall	_CC2500_WriteByte
  5931                           
  5932                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  5933  0483  0020               	movlb	0	; select bank0
  5934  0484  0858               	movf	_Tx_Length,w
  5935  0485  00F5               	movwf	??_CC2500_TxData
  5936  0486  0875               	movf	??_CC2500_TxData,w
  5937  0487  00D6               	movwf	_SPI0Buffer
  5938                           
  5939                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  5940  0488  318F  2712  3184   	fcall	_CC2500_WriteByte
  5941                           
  5942                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  5943  048B  01F6               	clrf	CC2500_TxData@loop_e
  5944  048C                     l3225:	
  5945  048C  0020               	movlb	0	; select bank0
  5946  048D  0858               	movf	_Tx_Length,w
  5947  048E  0276               	subwf	CC2500_TxData@loop_e,w
  5948  048F  1803               	btfsc	3,0
  5949  0490  2CA2               	goto	l146
  5950                           
  5951                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  5952  0491  0876               	movf	CC2500_TxData@loop_e,w
  5953  0492  3EA0               	addlw	_RF_Data& (0+255)
  5954  0493  0086               	movwf	6
  5955  0494  0187               	clrf	7
  5956  0495  0801               	movf	1,w
  5957  0496  00F5               	movwf	??_CC2500_TxData
  5958  0497  0875               	movf	??_CC2500_TxData,w
  5959  0498  0020               	movlb	0	; select bank0
  5960  0499  00D6               	movwf	_SPI0Buffer
  5961                           
  5962                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  5963  049A  318F  2712  3184   	fcall	_CC2500_WriteByte
  5964  049D  3001               	movlw	1
  5965  049E  00F5               	movwf	??_CC2500_TxData
  5966  049F  0875               	movf	??_CC2500_TxData,w
  5967  04A0  07F6               	addwf	CC2500_TxData@loop_e,f
  5968  04A1  2C8C               	goto	l3225
  5969  04A2                     l146:	
  5970                           
  5971                           ;CC2500_B1.c: 51: }
  5972                           ;CC2500_B1.c: 52: RC0 = 1;
  5973  04A2  140E               	bsf	14,0	;volatile
  5974                           
  5975                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  5976  04A3  3035               	movlw	53
  5977  04A4  318F  27AB  3184   	fcall	_CC2500_WriteCommand
  5978                           
  5979                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  5980  04A7  2CAB               	goto	l3231
  5981  04A8                     l3229:	
  5982                           
  5983                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  5984  04A8  318F  2726  3184   	fcall	_RF_Timeout_Counter
  5985  04AB                     l3231:	
  5986  04AB  0020               	movlb	0	; select bank0
  5987  04AC  188E               	btfsc	14,1	;volatile
  5988  04AD  2CB0               	goto	l3235
  5989  04AE  1F31               	btfss	_RF1+1,6
  5990  04AF  2CA8               	goto	l3229
  5991  04B0                     l3235:	
  5992                           
  5993                           ;CC2500_B1.c: 56: };
  5994                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  5995  04B0  318E  262E  3184   	fcall	_setRF_TimeoutCleared
  5996                           
  5997                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  5998  04B3  2CB7               	goto	l3239
  5999  04B4                     l3237:	
  6000                           
  6001                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  6002  04B4  318F  2726  3184   	fcall	_RF_Timeout_Counter
  6003  04B7                     l3239:	
  6004  04B7  0020               	movlb	0	; select bank0
  6005  04B8  1C8E               	btfss	14,1	;volatile
  6006  04B9  2CBC               	goto	l3243
  6007  04BA  1F31               	btfss	_RF1+1,6
  6008  04BB  2CB4               	goto	l3237
  6009  04BC                     l3243:	
  6010                           
  6011                           ;CC2500_B1.c: 61: };
  6012                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  6013  04BC  318E  262E  3184   	fcall	_setRF_TimeoutCleared
  6014                           
  6015                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  6016  04BF  3036               	movlw	54
  6017  04C0  318F  27AB  3184   	fcall	_CC2500_WriteCommand
  6018                           
  6019                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  6020  04C3  303B               	movlw	59
  6021  04C4  318F  27AB         	fcall	_CC2500_WriteCommand
  6022                           
  6023                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  6024  04C6  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  6025  04C7  0008               	return
  6026  04C8                     __end_of_CC2500_TxData:	
  6027                           
  6028                           	psect	text27
  6029  04C8                     __ptext27:	
  6030 ;; *************** function _CC2500_RxData *****************
  6031 ;; Defined at:
  6032 ;;		line 73 in file "../src/CC2500_B1.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;		None
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;  loop_f          1    6[COMMON] unsigned char 
  6037 ;; Return value:  Size  Location     Type
  6038 ;;		None               void
  6039 ;; Registers used:
  6040 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6041 ;; Tracked objects:
  6042 ;;		On entry : 0/0
  6043 ;;		On exit  : 0/0
  6044 ;;		Unchanged: 0/0
  6045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6046 ;;      Params:         0       0       0       0       0       0       0       0
  6047 ;;      Locals:         1       0       0       0       0       0       0       0
  6048 ;;      Temps:          1       0       0       0       0       0       0       0
  6049 ;;      Totals:         2       0       0       0       0       0       0       0
  6050 ;;Total ram usage:        2 bytes
  6051 ;; Hardware stack levels used:    1
  6052 ;; Hardware stack levels required when called:    4
  6053 ;; This function calls:
  6054 ;;		_CC2500_ReadByte
  6055 ;;		_CC2500_ReadStatus
  6056 ;;		_CC2500_WriteByte
  6057 ;;		_CC2500_WriteCommand
  6058 ;;		_RF_Timeout_Counter
  6059 ;;		_setRF_TimeoutCleared
  6060 ;; This function is called by:
  6061 ;;		_setRF_Main
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           
  6066                           ;psect for function _CC2500_RxData
  6067  04C8                     _CC2500_RxData:	
  6068                           
  6069                           ;CC2500_B1.c: 74: unsigned char loop_f;
  6070                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  6071                           
  6072                           ;incstack = 0
  6073                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6074  04C8  0020               	movlb	0	; select bank0
  6075  04C9  188E               	btfsc	14,1	;volatile
  6076  04CA  0008               	return
  6077                           
  6078                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  6079  04CB  303B               	movlw	59
  6080  04CC  3183  23C5  3184   	fcall	_CC2500_ReadStatus
  6081                           
  6082                           ;CC2500_B1.c: 89: if (s_data != 0) {
  6083  04CF  0020               	movlb	0	; select bank0
  6084  04D0  085B               	movf	_s_data,w
  6085  04D1  1903               	btfsc	3,2
  6086  04D2  0008               	return
  6087                           
  6088                           ;CC2500_B1.c: 90: RC0 = 0;
  6089  04D3  100E               	bcf	14,0	;volatile
  6090                           
  6091                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  6092  04D4  30FF               	movlw	255
  6093  04D5  00F5               	movwf	??_CC2500_RxData
  6094  04D6  0875               	movf	??_CC2500_RxData,w
  6095  04D7  00D6               	movwf	_SPI0Buffer
  6096                           
  6097                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  6098  04D8  2CDC               	goto	l3263
  6099  04D9                     l3261:	
  6100                           
  6101                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  6102  04D9  318F  2726  3184   	fcall	_RF_Timeout_Counter
  6103  04DC                     l3263:	
  6104  04DC  0020               	movlb	0	; select bank0
  6105  04DD  1E8E               	btfss	14,5	;volatile
  6106  04DE  2CE1               	goto	l3267
  6107  04DF  1F31               	btfss	_RF1+1,6
  6108  04E0  2CD9               	goto	l3261
  6109  04E1                     l3267:	
  6110                           
  6111                           ;CC2500_B1.c: 95: };
  6112                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  6113  04E1  318E  262E  3184   	fcall	_setRF_TimeoutCleared
  6114                           
  6115                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  6116  04E4  318F  2712  3184   	fcall	_CC2500_WriteByte
  6117                           
  6118                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  6119  04E7  318F  277C  3184   	fcall	_CC2500_ReadByte
  6120                           
  6121                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  6122  04EA  0020               	movlb	0	; select bank0
  6123  04EB  0856               	movf	_SPI0Buffer,w
  6124  04EC  00F5               	movwf	??_CC2500_RxData
  6125  04ED  0875               	movf	??_CC2500_RxData,w
  6126  04EE  00D5               	movwf	_Rx_Length
  6127                           
  6128                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  6129  04EF  01F6               	clrf	CC2500_RxData@loop_f
  6130  04F0                     l3283:	
  6131  04F0  0855               	movf	_Rx_Length,w
  6132  04F1  0276               	subwf	CC2500_RxData@loop_f,w
  6133  04F2  1803               	btfsc	3,0
  6134  04F3  2D05               	goto	l3285
  6135                           
  6136                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  6137  04F4  318F  277C  3184   	fcall	_CC2500_ReadByte
  6138                           
  6139                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  6140  04F7  0020               	movlb	0	; select bank0
  6141  04F8  0856               	movf	_SPI0Buffer,w
  6142  04F9  00F5               	movwf	??_CC2500_RxData
  6143  04FA  0876               	movf	CC2500_RxData@loop_f,w
  6144  04FB  3EA0               	addlw	_RF_Data& (0+255)
  6145  04FC  0086               	movwf	6
  6146  04FD  0187               	clrf	7
  6147  04FE  0875               	movf	??_CC2500_RxData,w
  6148  04FF  0081               	movwf	1
  6149  0500  3001               	movlw	1
  6150  0501  00F5               	movwf	??_CC2500_RxData
  6151  0502  0875               	movf	??_CC2500_RxData,w
  6152  0503  07F6               	addwf	CC2500_RxData@loop_f,f
  6153  0504  2CF0               	goto	l3283
  6154  0505                     l3285:	
  6155                           
  6156                           ;CC2500_B1.c: 104: }
  6157                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  6158  0505  318F  277C  3184   	fcall	_CC2500_ReadByte
  6159                           
  6160                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  6161  0508  0020               	movlb	0	; select bank0
  6162  0509  0856               	movf	_SPI0Buffer,w
  6163  050A  00F5               	movwf	??_CC2500_RxData
  6164  050B  0875               	movf	??_CC2500_RxData,w
  6165  050C  00D4               	movwf	_RSSI
  6166                           
  6167                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  6168  050D  318F  277C  3184   	fcall	_CC2500_ReadByte
  6169                           
  6170                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  6171  0510  0020               	movlb	0	; select bank0
  6172  0511  0856               	movf	_SPI0Buffer,w
  6173  0512  00F5               	movwf	??_CC2500_RxData
  6174  0513  0875               	movf	??_CC2500_RxData,w
  6175  0514  00D1               	movwf	_CRC
  6176                           
  6177                           ;CC2500_B1.c: 109: RC0 = 1;
  6178  0515  140E               	bsf	14,0	;volatile
  6179                           
  6180                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  6181  0516  1BD1               	btfsc	_CRC,7
  6182                           
  6183                           ;CC2500_B1.c: 111: Receive_OK = 1;
  6184  0517  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  6185                           
  6186                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  6187  0518  11B0               	bcf	_RF1,3
  6188                           
  6189                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  6190  0519  14B0               	bsf	_RF1,1
  6191                           
  6192                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  6193  051A  3036               	movlw	54
  6194  051B  318F  27AB  3184   	fcall	_CC2500_WriteCommand
  6195                           
  6196                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  6197  051E  303A               	movlw	58
  6198  051F  318F  27AB         	fcall	_CC2500_WriteCommand
  6199  0521  0020               	movlb	0	; select bank0
  6200  0522  0008               	return
  6201  0523                     __end_of_CC2500_RxData:	
  6202                           
  6203                           	psect	text28
  6204  03C5                     __ptext28:	
  6205 ;; *************** function _CC2500_ReadStatus *****************
  6206 ;; Defined at:
  6207 ;;		line 308 in file "../src/CC2500_B1.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;  status_addr     1    wreg     unsigned char 
  6210 ;; Auto vars:     Size  Location     Type
  6211 ;;  status_addr     1    4[COMMON] unsigned char 
  6212 ;; Return value:  Size  Location     Type
  6213 ;;		None               void
  6214 ;; Registers used:
  6215 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6221 ;;      Params:         0       0       0       0       0       0       0       0
  6222 ;;      Locals:         1       0       0       0       0       0       0       0
  6223 ;;      Temps:          1       0       0       0       0       0       0       0
  6224 ;;      Totals:         2       0       0       0       0       0       0       0
  6225 ;;Total ram usage:        2 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    3
  6228 ;; This function calls:
  6229 ;;		_CC2500_ReadByte
  6230 ;;		_CC2500_WriteByte
  6231 ;;		_RF_Timeout_Counter
  6232 ;;		_setRF_TimeoutCleared
  6233 ;; This function is called by:
  6234 ;;		_CC2500_RxData
  6235 ;; This function uses a non-reentrant model
  6236 ;;
  6237                           
  6238                           
  6239                           ;psect for function _CC2500_ReadStatus
  6240  03C5                     _CC2500_ReadStatus:	
  6241                           
  6242                           ;incstack = 0
  6243                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6244                           ;CC2500_ReadStatus@status_addr stored from wreg
  6245  03C5  00F4               	movwf	CC2500_ReadStatus@status_addr
  6246                           
  6247                           ;CC2500_B1.c: 309: RC0 = 0;
  6248  03C6  0020               	movlb	0	; select bank0
  6249  03C7  100E               	bcf	14,0	;volatile
  6250                           
  6251                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  6252  03C8  0874               	movf	CC2500_ReadStatus@status_addr,w
  6253  03C9  3EC0               	addlw	192
  6254  03CA  00F3               	movwf	??_CC2500_ReadStatus
  6255  03CB  0873               	movf	??_CC2500_ReadStatus,w
  6256  03CC  00D6               	movwf	_SPI0Buffer
  6257                           
  6258                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  6259  03CD  2BD1               	goto	l3013
  6260  03CE                     l3011:	
  6261                           
  6262                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  6263  03CE  318F  2726  3183   	fcall	_RF_Timeout_Counter
  6264  03D1                     l3013:	
  6265  03D1  0020               	movlb	0	; select bank0
  6266  03D2  1E8E               	btfss	14,5	;volatile
  6267  03D3  2BD6               	goto	l3017
  6268  03D4  1F31               	btfss	_RF1+1,6
  6269  03D5  2BCE               	goto	l3011
  6270  03D6                     l3017:	
  6271                           
  6272                           ;CC2500_B1.c: 314: };
  6273                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  6274  03D6  318E  262E  3183   	fcall	_setRF_TimeoutCleared
  6275                           
  6276                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  6277  03D9  318F  2712  3183   	fcall	_CC2500_WriteByte
  6278                           
  6279                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  6280  03DC  318F  277C         	fcall	_CC2500_ReadByte
  6281                           
  6282                           ;CC2500_B1.c: 319: RC0 = 1;
  6283  03DE  0020               	movlb	0	; select bank0
  6284  03DF  140E               	bsf	14,0	;volatile
  6285                           
  6286                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  6287  03E0  0856               	movf	_SPI0Buffer,w
  6288  03E1  00F3               	movwf	??_CC2500_ReadStatus
  6289  03E2  0873               	movf	??_CC2500_ReadStatus,w
  6290  03E3  00DB               	movwf	_s_data
  6291  03E4  0008               	return
  6292  03E5                     __end_of_CC2500_ReadStatus:	
  6293                           
  6294                           	psect	text29
  6295  0F7C                     __ptext29:	
  6296 ;; *************** function _CC2500_ReadByte *****************
  6297 ;; Defined at:
  6298 ;;		line 242 in file "../src/CC2500_B1.c"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;		None
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;  loop_b          1    2[COMMON] unsigned char 
  6303 ;; Return value:  Size  Location     Type
  6304 ;;		None               void
  6305 ;; Registers used:
  6306 ;;		wreg, status,2, status,0
  6307 ;; Tracked objects:
  6308 ;;		On entry : 0/0
  6309 ;;		On exit  : 0/0
  6310 ;;		Unchanged: 0/0
  6311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6312 ;;      Params:         0       0       0       0       0       0       0       0
  6313 ;;      Locals:         1       0       0       0       0       0       0       0
  6314 ;;      Temps:          1       0       0       0       0       0       0       0
  6315 ;;      Totals:         2       0       0       0       0       0       0       0
  6316 ;;Total ram usage:        2 bytes
  6317 ;; Hardware stack levels used:    1
  6318 ;; Hardware stack levels required when called:    2
  6319 ;; This function calls:
  6320 ;;		Nothing
  6321 ;; This function is called by:
  6322 ;;		_CC2500_RxData
  6323 ;;		_CC2500_ReadStatus
  6324 ;;		_CC2500_ReadREG
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           
  6329                           ;psect for function _CC2500_ReadByte
  6330  0F7C                     _CC2500_ReadByte:	
  6331                           
  6332                           ;CC2500_B1.c: 243: unsigned char loop_b;
  6333                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  6334                           
  6335                           ;incstack = 0
  6336                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  6337  0F7C  01F2               	clrf	CC2500_ReadByte@loop_b
  6338  0F7D                     L2:	
  6339  0F7D  3008               	movlw	8
  6340  0F7E  0272               	subwf	CC2500_ReadByte@loop_b,w
  6341  0F7F  1803               	btfsc	3,0
  6342  0F80  0008               	return
  6343                           
  6344                           ;CC2500_B1.c: 245: RC3 = 1;
  6345  0F81  0020               	movlb	0	; select bank0
  6346  0F82  158E               	bsf	14,3	;volatile
  6347                           
  6348                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  6349  0F83  1003               	clrc
  6350  0F84  0DD6               	rlf	_SPI0Buffer,f
  6351                           
  6352                           ;CC2500_B1.c: 247: if (RC5 == 1)
  6353  0F85  1E8E               	btfss	14,5	;volatile
  6354  0F86  2F89               	goto	l2909
  6355                           
  6356                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  6357  0F87  1456               	bsf	_SPI0Buffer,0
  6358  0F88  2F8D               	goto	l2911
  6359  0F89                     l2909:	
  6360                           
  6361                           ;CC2500_B1.c: 249: else
  6362                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  6363  0F89  30FE               	movlw	254
  6364  0F8A  00F1               	movwf	??_CC2500_ReadByte
  6365  0F8B  0871               	movf	??_CC2500_ReadByte,w
  6366  0F8C  05D6               	andwf	_SPI0Buffer,f
  6367  0F8D                     l2911:	
  6368                           
  6369                           ;CC2500_B1.c: 251: RC3 = 0;
  6370  0F8D  118E               	bcf	14,3	;volatile
  6371  0F8E  3001               	movlw	1
  6372  0F8F  00F1               	movwf	??_CC2500_ReadByte
  6373  0F90  0871               	movf	??_CC2500_ReadByte,w
  6374  0F91  07F2               	addwf	CC2500_ReadByte@loop_b,f
  6375  0F92  2F7D               	goto	L2
  6376  0F93                     __end_of_CC2500_ReadByte:	
  6377                           
  6378                           	psect	text30
  6379  0F3B                     __ptext30:	
  6380 ;; *************** function _CC2500_PowerOnInitial *****************
  6381 ;; Defined at:
  6382 ;;		line 126 in file "../src/CC2500_B1.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;		None
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;		None
  6387 ;; Return value:  Size  Location     Type
  6388 ;;		None               void
  6389 ;; Registers used:
  6390 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6396 ;;      Params:         0       0       0       0       0       0       0       0
  6397 ;;      Locals:         0       0       0       0       0       0       0       0
  6398 ;;      Temps:          0       0       0       0       0       0       0       0
  6399 ;;      Totals:         0       0       0       0       0       0       0       0
  6400 ;;Total ram usage:        0 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; Hardware stack levels required when called:    5
  6403 ;; This function calls:
  6404 ;;		_CC2500_ClearRXFIFO
  6405 ;;		_CC2500_ClearTXFIFO
  6406 ;;		_CC2500_FrequencyCabr
  6407 ;;		_CC2500_InitPATable
  6408 ;;		_CC2500_InitSetREG
  6409 ;;		_CC2500_PowerRST
  6410 ;;		_CC2500_SIDLEMode
  6411 ;; This function is called by:
  6412 ;;		_main
  6413 ;;		_setRF_Main
  6414 ;; This function uses a non-reentrant model
  6415 ;;
  6416                           
  6417                           
  6418                           ;psect for function _CC2500_PowerOnInitial
  6419  0F3B                     _CC2500_PowerOnInitial:	
  6420                           
  6421                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  6422                           
  6423                           ;incstack = 0
  6424                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6425  0F3B  3186  261A  318F   	fcall	_CC2500_PowerRST
  6426                           
  6427                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  6428  0F3E  3183  2315  318F   	fcall	_CC2500_InitSetREG
  6429                           
  6430                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  6431  0F41  318F  27C3  318F   	fcall	_CC2500_InitPATable
  6432                           
  6433                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  6434  0F44  318E  2636  318F   	fcall	_CC2500_ClearTXFIFO
  6435                           
  6436                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  6437  0F47  318E  2632  318F   	fcall	_CC2500_ClearRXFIFO
  6438                           
  6439                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  6440  0F4A  318E  267F  318F   	fcall	_CC2500_FrequencyCabr
  6441                           
  6442                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  6443  0F4D  318E  263A         	fcall	_CC2500_SIDLEMode
  6444  0F4F  0008               	return
  6445  0F50                     __end_of_CC2500_PowerOnInitial:	
  6446                           
  6447                           	psect	text31
  6448  0E3A                     __ptext31:	
  6449 ;; *************** function _CC2500_SIDLEMode *****************
  6450 ;; Defined at:
  6451 ;;		line 216 in file "../src/CC2500_B1.c"
  6452 ;; Parameters:    Size  Location     Type
  6453 ;;		None
  6454 ;; Auto vars:     Size  Location     Type
  6455 ;;		None
  6456 ;; Return value:  Size  Location     Type
  6457 ;;		None               void
  6458 ;; Registers used:
  6459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6460 ;; Tracked objects:
  6461 ;;		On entry : 0/0
  6462 ;;		On exit  : 0/0
  6463 ;;		Unchanged: 0/0
  6464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6465 ;;      Params:         0       0       0       0       0       0       0       0
  6466 ;;      Locals:         0       0       0       0       0       0       0       0
  6467 ;;      Temps:          0       0       0       0       0       0       0       0
  6468 ;;      Totals:         0       0       0       0       0       0       0       0
  6469 ;;Total ram usage:        0 bytes
  6470 ;; Hardware stack levels used:    1
  6471 ;; Hardware stack levels required when called:    4
  6472 ;; This function calls:
  6473 ;;		_CC2500_WriteCommand
  6474 ;; This function is called by:
  6475 ;;		_CC2500_PowerOnInitial
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           
  6480                           ;psect for function _CC2500_SIDLEMode
  6481  0E3A                     _CC2500_SIDLEMode:	
  6482                           
  6483                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  6484                           
  6485                           ;incstack = 0
  6486                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6487  0E3A  3036               	movlw	54
  6488  0E3B  318F  27AB         	fcall	_CC2500_WriteCommand
  6489  0E3D  0008               	return
  6490  0E3E                     __end_of_CC2500_SIDLEMode:	
  6491                           
  6492                           	psect	text32
  6493  061A                     __ptext32:	
  6494 ;; *************** function _CC2500_PowerRST *****************
  6495 ;; Defined at:
  6496 ;;		line 139 in file "../src/CC2500_B1.c"
  6497 ;; Parameters:    Size  Location     Type
  6498 ;;		None
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;		None
  6501 ;; Return value:  Size  Location     Type
  6502 ;;		None               void
  6503 ;; Registers used:
  6504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 0/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6510 ;;      Params:         0       0       0       0       0       0       0       0
  6511 ;;      Locals:         0       0       0       0       0       0       0       0
  6512 ;;      Temps:          1       0       0       0       0       0       0       0
  6513 ;;      Totals:         1       0       0       0       0       0       0       0
  6514 ;;Total ram usage:        1 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:    3
  6517 ;; This function calls:
  6518 ;;		_CC2500_WriteByte
  6519 ;;		_DelayTime_1us
  6520 ;;		_RF_Timeout_Counter
  6521 ;;		_setRF_TimeoutCleared
  6522 ;; This function is called by:
  6523 ;;		_CC2500_PowerOnInitial
  6524 ;; This function uses a non-reentrant model
  6525 ;;
  6526                           
  6527                           
  6528                           ;psect for function _CC2500_PowerRST
  6529  061A                     _CC2500_PowerRST:	
  6530                           
  6531                           ;CC2500_B1.c: 140: RC3 = 0;
  6532                           
  6533                           ;incstack = 0
  6534                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6535  061A  0020               	movlb	0	; select bank0
  6536  061B  118E               	bcf	14,3	;volatile
  6537                           
  6538                           ;CC2500_B1.c: 141: RC4 = 0;
  6539  061C  120E               	bcf	14,4	;volatile
  6540                           
  6541                           ;CC2500_B1.c: 142: RC0 = 1;
  6542  061D  140E               	bsf	14,0	;volatile
  6543                           
  6544                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  6545  061E  300A               	movlw	10
  6546  061F  00F1               	movwf	DelayTime_1us@count
  6547  0620  3000               	movlw	0
  6548  0621  00F2               	movwf	DelayTime_1us@count+1
  6549  0622  3183  233D  3186   	fcall	_DelayTime_1us
  6550                           
  6551                           ;CC2500_B1.c: 144: RC0 = 0;
  6552  0625  0020               	movlb	0	; select bank0
  6553  0626  100E               	bcf	14,0	;volatile
  6554                           
  6555                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  6556  0627  300A               	movlw	10
  6557  0628  00F1               	movwf	DelayTime_1us@count
  6558  0629  3000               	movlw	0
  6559  062A  00F2               	movwf	DelayTime_1us@count+1
  6560  062B  3183  233D  3186   	fcall	_DelayTime_1us
  6561                           
  6562                           ;CC2500_B1.c: 146: RC0 = 1;
  6563  062E  0020               	movlb	0	; select bank0
  6564  062F  140E               	bsf	14,0	;volatile
  6565                           
  6566                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  6567  0630  3028               	movlw	40
  6568  0631  00F1               	movwf	DelayTime_1us@count
  6569  0632  3000               	movlw	0
  6570  0633  00F2               	movwf	DelayTime_1us@count+1
  6571  0634  3183  233D  3186   	fcall	_DelayTime_1us
  6572                           
  6573                           ;CC2500_B1.c: 148: RC0 = 0;
  6574  0637  0020               	movlb	0	; select bank0
  6575  0638  100E               	bcf	14,0	;volatile
  6576                           
  6577                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  6578  0639  3030               	movlw	48
  6579  063A  00F7               	movwf	??_CC2500_PowerRST
  6580  063B  0877               	movf	??_CC2500_PowerRST,w
  6581  063C  00D6               	movwf	_SPI0Buffer
  6582                           
  6583                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  6584  063D  2E41               	goto	l3041
  6585  063E                     l3039:	
  6586                           
  6587                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  6588  063E  318F  2726  3186   	fcall	_RF_Timeout_Counter
  6589  0641                     l3041:	
  6590  0641  0020               	movlb	0	; select bank0
  6591  0642  1E8E               	btfss	14,5	;volatile
  6592  0643  2E46               	goto	l3045
  6593  0644  1F31               	btfss	_RF1+1,6
  6594  0645  2E3E               	goto	l3039
  6595  0646                     l3045:	
  6596                           
  6597                           ;CC2500_B1.c: 152: };
  6598                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  6599  0646  318E  262E  3186   	fcall	_setRF_TimeoutCleared
  6600                           
  6601                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  6602  0649  318F  2712  3186   	fcall	_CC2500_WriteByte
  6603                           
  6604                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  6605  064C  2E50               	goto	l3051
  6606  064D                     l3049:	
  6607                           
  6608                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  6609  064D  318F  2726  3186   	fcall	_RF_Timeout_Counter
  6610  0650                     l3051:	
  6611  0650  0020               	movlb	0	; select bank0
  6612  0651  1E8E               	btfss	14,5	;volatile
  6613  0652  2E55               	goto	l3055
  6614  0653  1F31               	btfss	_RF1+1,6
  6615  0654  2E4D               	goto	l3049
  6616  0655                     l3055:	
  6617                           
  6618                           ;CC2500_B1.c: 157: };
  6619                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  6620  0655  318E  262E         	fcall	_setRF_TimeoutCleared
  6621                           
  6622                           ;CC2500_B1.c: 159: RC4 = 0;
  6623  0657  0020               	movlb	0	; select bank0
  6624  0658  120E               	bcf	14,4	;volatile
  6625                           
  6626                           ;CC2500_B1.c: 160: RC0 = 1;
  6627  0659  140E               	bsf	14,0	;volatile
  6628  065A  0008               	return
  6629  065B                     __end_of_CC2500_PowerRST:	
  6630                           
  6631                           	psect	text33
  6632  0315                     __ptext33:	
  6633 ;; *************** function _CC2500_InitSetREG *****************
  6634 ;; Defined at:
  6635 ;;		line 166 in file "../src/CC2500_B1.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;		None
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;  loop_c          1    9[COMMON] unsigned char 
  6640 ;;  temp2           1    8[COMMON] unsigned char 
  6641 ;;  temp1           1    7[COMMON] unsigned char 
  6642 ;; Return value:  Size  Location     Type
  6643 ;;		None               void
  6644 ;; Registers used:
  6645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6651 ;;      Params:         0       0       0       0       0       0       0       0
  6652 ;;      Locals:         3       0       0       0       0       0       0       0
  6653 ;;      Temps:          1       0       0       0       0       0       0       0
  6654 ;;      Totals:         4       0       0       0       0       0       0       0
  6655 ;;Total ram usage:        4 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:    4
  6658 ;; This function calls:
  6659 ;;		_CC2500_WriteREG
  6660 ;; This function is called by:
  6661 ;;		_CC2500_PowerOnInitial
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           
  6666                           ;psect for function _CC2500_InitSetREG
  6667  0315                     _CC2500_InitSetREG:	
  6668                           
  6669                           ;CC2500_B1.c: 167: unsigned char loop_c;
  6670                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  6671                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  6672                           
  6673                           ;incstack = 0
  6674                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6675  0315  01F9               	clrf	CC2500_InitSetREG@loop_c
  6676  0316                     L3:	
  6677  0316  302F               	movlw	47
  6678  0317  0279               	subwf	CC2500_InitSetREG@loop_c,w
  6679  0318  1803               	btfsc	3,0
  6680  0319  0008               	return
  6681                           
  6682                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  6683  031A  0879               	movf	CC2500_InitSetREG@loop_c,w
  6684  031B  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  6685  031C  0084               	movwf	4
  6686  031D  3084               	movlw	high (_CC2500_registers_address| (0+32768))
  6687  031E  1803               	skipnc
  6688  031F  3E01               	addlw	1
  6689  0320  0085               	movwf	5
  6690  0321  0800               	movf	0,w	;code access
  6691  0322  00F6               	movwf	??_CC2500_InitSetREG
  6692  0323  0876               	movf	??_CC2500_InitSetREG,w
  6693  0324  00F7               	movwf	CC2500_InitSetREG@temp1
  6694                           
  6695                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  6696  0325  0879               	movf	CC2500_InitSetREG@loop_c,w
  6697  0326  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  6698  0327  0084               	movwf	4
  6699  0328  3084               	movlw	high (_CC2500_rfSettings| (0+32768))
  6700  0329  1803               	skipnc
  6701  032A  3E01               	addlw	1
  6702  032B  0085               	movwf	5
  6703  032C  0800               	movf	0,w	;code access
  6704  032D  00F6               	movwf	??_CC2500_InitSetREG
  6705  032E  0876               	movf	??_CC2500_InitSetREG,w
  6706  032F  00F8               	movwf	CC2500_InitSetREG@temp2
  6707                           
  6708                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  6709  0330  0878               	movf	CC2500_InitSetREG@temp2,w
  6710  0331  00F6               	movwf	??_CC2500_InitSetREG
  6711  0332  0876               	movf	??_CC2500_InitSetREG,w
  6712  0333  00F3               	movwf	CC2500_WriteREG@value
  6713  0334  0877               	movf	CC2500_InitSetREG@temp1,w
  6714  0335  318F  27E0  3183   	fcall	_CC2500_WriteREG
  6715  0338  3001               	movlw	1
  6716  0339  00F6               	movwf	??_CC2500_InitSetREG
  6717  033A  0876               	movf	??_CC2500_InitSetREG,w
  6718  033B  07F9               	addwf	CC2500_InitSetREG@loop_c,f
  6719  033C  2B16               	goto	L3
  6720  033D                     __end_of_CC2500_InitSetREG:	
  6721                           
  6722                           	psect	text34
  6723  0FC3                     __ptext34:	
  6724 ;; *************** function _CC2500_InitPATable *****************
  6725 ;; Defined at:
  6726 ;;		line 181 in file "../src/CC2500_B1.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;		None
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  loop_d          1    8[COMMON] unsigned char 
  6731 ;;  temp            1    7[COMMON] unsigned char 
  6732 ;; Return value:  Size  Location     Type
  6733 ;;		None               void
  6734 ;; Registers used:
  6735 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6736 ;; Tracked objects:
  6737 ;;		On entry : 0/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6741 ;;      Params:         0       0       0       0       0       0       0       0
  6742 ;;      Locals:         2       0       0       0       0       0       0       0
  6743 ;;      Temps:          1       0       0       0       0       0       0       0
  6744 ;;      Totals:         3       0       0       0       0       0       0       0
  6745 ;;Total ram usage:        3 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:    4
  6748 ;; This function calls:
  6749 ;;		_CC2500_WriteREG
  6750 ;; This function is called by:
  6751 ;;		_CC2500_PowerOnInitial
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           
  6756                           ;psect for function _CC2500_InitPATable
  6757  0FC3                     _CC2500_InitPATable:	
  6758                           
  6759                           ;CC2500_B1.c: 182: unsigned char loop_d;
  6760                           ;CC2500_B1.c: 183: unsigned char temp;
  6761                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  6762                           
  6763                           ;incstack = 0
  6764                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6765  0FC3  01F8               	clrf	CC2500_InitPATable@loop_d
  6766  0FC4                     L4:	
  6767  0FC4  3008               	movlw	8
  6768  0FC5  0278               	subwf	CC2500_InitPATable@loop_d,w
  6769  0FC6  1803               	btfsc	3,0
  6770  0FC7  0008               	return
  6771                           
  6772                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  6773  0FC8  0878               	movf	CC2500_InitPATable@loop_d,w
  6774  0FC9  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  6775  0FCA  0084               	movwf	4
  6776  0FCB  3084               	movlw	high (_CC2500_patable_vaule| (0+32768))
  6777  0FCC  1803               	skipnc
  6778  0FCD  3E01               	addlw	1
  6779  0FCE  0085               	movwf	5
  6780  0FCF  0800               	movf	0,w	;code access
  6781  0FD0  00F6               	movwf	??_CC2500_InitPATable
  6782  0FD1  0876               	movf	??_CC2500_InitPATable,w
  6783  0FD2  00F7               	movwf	CC2500_InitPATable@temp
  6784                           
  6785                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  6786  0FD3  0877               	movf	CC2500_InitPATable@temp,w
  6787  0FD4  00F6               	movwf	??_CC2500_InitPATable
  6788  0FD5  0876               	movf	??_CC2500_InitPATable,w
  6789  0FD6  00F3               	movwf	CC2500_WriteREG@value
  6790  0FD7  303E               	movlw	62
  6791  0FD8  318F  27E0  318F   	fcall	_CC2500_WriteREG
  6792  0FDB  3001               	movlw	1
  6793  0FDC  00F6               	movwf	??_CC2500_InitPATable
  6794  0FDD  0876               	movf	??_CC2500_InitPATable,w
  6795  0FDE  07F8               	addwf	CC2500_InitPATable@loop_d,f
  6796  0FDF  2FC4               	goto	L4
  6797  0FE0                     __end_of_CC2500_InitPATable:	
  6798                           
  6799                           	psect	text35
  6800  0FE0                     __ptext35:	
  6801 ;; *************** function _CC2500_WriteREG *****************
  6802 ;; Defined at:
  6803 ;;		line 258 in file "../src/CC2500_B1.c"
  6804 ;; Parameters:    Size  Location     Type
  6805 ;;  w_addr          1    wreg     unsigned char 
  6806 ;;  value           1    3[COMMON] unsigned char 
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;  w_addr          1    5[COMMON] unsigned char 
  6809 ;; Return value:  Size  Location     Type
  6810 ;;		None               void
  6811 ;; Registers used:
  6812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6813 ;; Tracked objects:
  6814 ;;		On entry : 0/0
  6815 ;;		On exit  : 0/0
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6818 ;;      Params:         1       0       0       0       0       0       0       0
  6819 ;;      Locals:         1       0       0       0       0       0       0       0
  6820 ;;      Temps:          1       0       0       0       0       0       0       0
  6821 ;;      Totals:         3       0       0       0       0       0       0       0
  6822 ;;Total ram usage:        3 bytes
  6823 ;; Hardware stack levels used:    1
  6824 ;; Hardware stack levels required when called:    3
  6825 ;; This function calls:
  6826 ;;		_CC2500_WriteByte
  6827 ;;		_RF_Timeout_Counter
  6828 ;;		_setRF_TimeoutCleared
  6829 ;; This function is called by:
  6830 ;;		_CC2500_InitSetREG
  6831 ;;		_CC2500_InitPATable
  6832 ;; This function uses a non-reentrant model
  6833 ;;
  6834                           
  6835                           
  6836                           ;psect for function _CC2500_WriteREG
  6837  0FE0                     _CC2500_WriteREG:	
  6838                           
  6839                           ;incstack = 0
  6840                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6841                           ;CC2500_WriteREG@w_addr stored from wreg
  6842  0FE0  00F5               	movwf	CC2500_WriteREG@w_addr
  6843                           
  6844                           ;CC2500_B1.c: 259: RC0 = 0;
  6845  0FE1  0020               	movlb	0	; select bank0
  6846  0FE2  100E               	bcf	14,0	;volatile
  6847                           
  6848                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  6849  0FE3  0875               	movf	CC2500_WriteREG@w_addr,w
  6850  0FE4  00F4               	movwf	??_CC2500_WriteREG
  6851  0FE5  0874               	movf	??_CC2500_WriteREG,w
  6852  0FE6  00D6               	movwf	_SPI0Buffer
  6853                           
  6854                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  6855  0FE7  2FEB               	goto	l2933
  6856  0FE8                     l2931:	
  6857                           
  6858                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  6859  0FE8  318F  2726  318F   	fcall	_RF_Timeout_Counter
  6860  0FEB                     l2933:	
  6861  0FEB  0020               	movlb	0	; select bank0
  6862  0FEC  1E8E               	btfss	14,5	;volatile
  6863  0FED  2FF0               	goto	l2937
  6864  0FEE  1F31               	btfss	_RF1+1,6
  6865  0FEF  2FE8               	goto	l2931
  6866  0FF0                     l2937:	
  6867                           
  6868                           ;CC2500_B1.c: 263: };
  6869                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  6870  0FF0  318E  262E  318F   	fcall	_setRF_TimeoutCleared
  6871                           
  6872                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  6873  0FF3  318F  2712  318F   	fcall	_CC2500_WriteByte
  6874                           
  6875                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  6876  0FF6  0873               	movf	CC2500_WriteREG@value,w
  6877  0FF7  00F4               	movwf	??_CC2500_WriteREG
  6878  0FF8  0874               	movf	??_CC2500_WriteREG,w
  6879  0FF9  0020               	movlb	0	; select bank0
  6880  0FFA  00D6               	movwf	_SPI0Buffer
  6881                           
  6882                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  6883  0FFB  318F  2712         	fcall	_CC2500_WriteByte
  6884                           
  6885                           ;CC2500_B1.c: 269: RC0 = 1;
  6886  0FFD  0020               	movlb	0	; select bank0
  6887  0FFE  140E               	bsf	14,0	;volatile
  6888  0FFF  0008               	return
  6889  1000                     __end_of_CC2500_WriteREG:	
  6890                           
  6891                           	psect	text36
  6892  0E7F                     __ptext36:	
  6893 ;; *************** function _CC2500_FrequencyCabr *****************
  6894 ;; Defined at:
  6895 ;;		line 208 in file "../src/CC2500_B1.c"
  6896 ;; Parameters:    Size  Location     Type
  6897 ;;		None
  6898 ;; Auto vars:     Size  Location     Type
  6899 ;;		None
  6900 ;; Return value:  Size  Location     Type
  6901 ;;		None               void
  6902 ;; Registers used:
  6903 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6904 ;; Tracked objects:
  6905 ;;		On entry : 0/0
  6906 ;;		On exit  : 0/0
  6907 ;;		Unchanged: 0/0
  6908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6909 ;;      Params:         0       0       0       0       0       0       0       0
  6910 ;;      Locals:         0       0       0       0       0       0       0       0
  6911 ;;      Temps:          0       0       0       0       0       0       0       0
  6912 ;;      Totals:         0       0       0       0       0       0       0       0
  6913 ;;Total ram usage:        0 bytes
  6914 ;; Hardware stack levels used:    1
  6915 ;; Hardware stack levels required when called:    4
  6916 ;; This function calls:
  6917 ;;		_CC2500_WriteCommand
  6918 ;;		_DelayTime_1us
  6919 ;; This function is called by:
  6920 ;;		_CC2500_PowerOnInitial
  6921 ;; This function uses a non-reentrant model
  6922 ;;
  6923                           
  6924                           
  6925                           ;psect for function _CC2500_FrequencyCabr
  6926  0E7F                     _CC2500_FrequencyCabr:	
  6927                           
  6928                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  6929                           
  6930                           ;incstack = 0
  6931                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6932  0E7F  3033               	movlw	51
  6933  0E80  318F  27AB  318E   	fcall	_CC2500_WriteCommand
  6934                           
  6935                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  6936  0E83  30E8               	movlw	232
  6937  0E84  00F1               	movwf	DelayTime_1us@count
  6938  0E85  3003               	movlw	3
  6939  0E86  00F2               	movwf	DelayTime_1us@count+1
  6940  0E87  3183  233D         	fcall	_DelayTime_1us
  6941  0E89  0008               	return
  6942  0E8A                     __end_of_CC2500_FrequencyCabr:	
  6943                           
  6944                           	psect	text37
  6945  033D                     __ptext37:	
  6946 ;; *************** function _DelayTime_1us *****************
  6947 ;; Defined at:
  6948 ;;		line 327 in file "../src/CC2500_B1.c"
  6949 ;; Parameters:    Size  Location     Type
  6950 ;;  count           2    1[COMMON] int 
  6951 ;; Auto vars:     Size  Location     Type
  6952 ;;  j               2    5[COMMON] unsigned int 
  6953 ;;  i               2    3[COMMON] unsigned int 
  6954 ;; Return value:  Size  Location     Type
  6955 ;;		None               void
  6956 ;; Registers used:
  6957 ;;		wreg, status,2
  6958 ;; Tracked objects:
  6959 ;;		On entry : 0/0
  6960 ;;		On exit  : 0/0
  6961 ;;		Unchanged: 0/0
  6962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6963 ;;      Params:         2       0       0       0       0       0       0       0
  6964 ;;      Locals:         4       0       0       0       0       0       0       0
  6965 ;;      Temps:          0       0       0       0       0       0       0       0
  6966 ;;      Totals:         6       0       0       0       0       0       0       0
  6967 ;;Total ram usage:        6 bytes
  6968 ;; Hardware stack levels used:    1
  6969 ;; Hardware stack levels required when called:    2
  6970 ;; This function calls:
  6971 ;;		Nothing
  6972 ;; This function is called by:
  6973 ;;		_CC2500_PowerRST
  6974 ;;		_CC2500_FrequencyCabr
  6975 ;; This function uses a non-reentrant model
  6976 ;;
  6977                           
  6978                           
  6979                           ;psect for function _DelayTime_1us
  6980  033D                     _DelayTime_1us:	
  6981                           
  6982                           ;CC2500_B1.c: 328: unsigned int i, j;
  6983                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  6984                           
  6985                           ;incstack = 0
  6986                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  6987  033D  3001               	movlw	1
  6988  033E  00F3               	movwf	DelayTime_1us@i
  6989  033F  3000               	movlw	0
  6990  0340  00F4               	movwf	DelayTime_1us@i+1
  6991  0341                     l258:	
  6992  0341  0872               	movf	DelayTime_1us@count+1,w
  6993  0342  0274               	subwf	DelayTime_1us@i+1,w
  6994  0343  1D03               	skipz
  6995  0344  2B47               	goto	u1495
  6996  0345  0871               	movf	DelayTime_1us@count,w
  6997  0346  0273               	subwf	DelayTime_1us@i,w
  6998  0347                     u1495:	
  6999  0347  1803               	btfsc	3,0
  7000  0348  0008               	return
  7001                           
  7002                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  7003  0349  01F5               	clrf	DelayTime_1us@j
  7004  034A  01F6               	clrf	DelayTime_1us@j+1
  7005  034B  3000               	movlw	0
  7006  034C  0276               	subwf	DelayTime_1us@j+1,w
  7007  034D  3002               	movlw	2
  7008  034E  1903               	skipnz
  7009  034F  0275               	subwf	DelayTime_1us@j,w
  7010  0350  1803               	btfsc	3,0
  7011  0351  2B5D               	goto	l2925
  7012  0352                     l2923:	
  7013  0352  3001               	movlw	1
  7014  0353  07F5               	addwf	DelayTime_1us@j,f
  7015  0354  3000               	movlw	0
  7016  0355  3DF6               	addwfc	DelayTime_1us@j+1,f
  7017  0356  3000               	movlw	0
  7018  0357  0276               	subwf	DelayTime_1us@j+1,w
  7019  0358  3002               	movlw	2
  7020  0359  1903               	skipnz
  7021  035A  0275               	subwf	DelayTime_1us@j,w
  7022  035B  1C03               	skipc
  7023  035C  2B52               	goto	l2923
  7024  035D                     l2925:	
  7025  035D  3001               	movlw	1
  7026  035E  07F3               	addwf	DelayTime_1us@i,f
  7027  035F  3000               	movlw	0
  7028  0360  3DF4               	addwfc	DelayTime_1us@i+1,f
  7029  0361  2B41               	goto	l258
  7030  0362                     __end_of_DelayTime_1us:	
  7031                           
  7032                           	psect	text38
  7033  0E36                     __ptext38:	
  7034 ;; *************** function _CC2500_ClearTXFIFO *****************
  7035 ;; Defined at:
  7036 ;;		line 194 in file "../src/CC2500_B1.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;		None
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;		None
  7041 ;; Return value:  Size  Location     Type
  7042 ;;		None               void
  7043 ;; Registers used:
  7044 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7045 ;; Tracked objects:
  7046 ;;		On entry : 0/0
  7047 ;;		On exit  : 0/0
  7048 ;;		Unchanged: 0/0
  7049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7050 ;;      Params:         0       0       0       0       0       0       0       0
  7051 ;;      Locals:         0       0       0       0       0       0       0       0
  7052 ;;      Temps:          0       0       0       0       0       0       0       0
  7053 ;;      Totals:         0       0       0       0       0       0       0       0
  7054 ;;Total ram usage:        0 bytes
  7055 ;; Hardware stack levels used:    1
  7056 ;; Hardware stack levels required when called:    4
  7057 ;; This function calls:
  7058 ;;		_CC2500_WriteCommand
  7059 ;; This function is called by:
  7060 ;;		_CC2500_PowerOnInitial
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           
  7065                           ;psect for function _CC2500_ClearTXFIFO
  7066  0E36                     _CC2500_ClearTXFIFO:	
  7067                           
  7068                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  7069                           
  7070                           ;incstack = 0
  7071                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7072  0E36  303B               	movlw	59
  7073  0E37  318F  27AB         	fcall	_CC2500_WriteCommand
  7074  0E39  0008               	return
  7075  0E3A                     __end_of_CC2500_ClearTXFIFO:	
  7076                           
  7077                           	psect	text39
  7078  0E32                     __ptext39:	
  7079 ;; *************** function _CC2500_ClearRXFIFO *****************
  7080 ;; Defined at:
  7081 ;;		line 201 in file "../src/CC2500_B1.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;		None
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;		None
  7086 ;; Return value:  Size  Location     Type
  7087 ;;		None               void
  7088 ;; Registers used:
  7089 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7095 ;;      Params:         0       0       0       0       0       0       0       0
  7096 ;;      Locals:         0       0       0       0       0       0       0       0
  7097 ;;      Temps:          0       0       0       0       0       0       0       0
  7098 ;;      Totals:         0       0       0       0       0       0       0       0
  7099 ;;Total ram usage:        0 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; Hardware stack levels required when called:    4
  7102 ;; This function calls:
  7103 ;;		_CC2500_WriteCommand
  7104 ;; This function is called by:
  7105 ;;		_CC2500_PowerOnInitial
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           
  7110                           ;psect for function _CC2500_ClearRXFIFO
  7111  0E32                     _CC2500_ClearRXFIFO:	
  7112                           
  7113                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  7114                           
  7115                           ;incstack = 0
  7116                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7117  0E32  303A               	movlw	58
  7118  0E33  318F  27AB         	fcall	_CC2500_WriteCommand
  7119  0E35  0008               	return
  7120  0E36                     __end_of_CC2500_ClearRXFIFO:	
  7121                           
  7122                           	psect	text40
  7123  0FAB                     __ptext40:	
  7124 ;; *************** function _CC2500_WriteCommand *****************
  7125 ;; Defined at:
  7126 ;;		line 292 in file "../src/CC2500_B1.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;  command         1    wreg     unsigned char 
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;  command         1    4[COMMON] unsigned char 
  7131 ;; Return value:  Size  Location     Type
  7132 ;;		None               void
  7133 ;; Registers used:
  7134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7140 ;;      Params:         0       0       0       0       0       0       0       0
  7141 ;;      Locals:         1       0       0       0       0       0       0       0
  7142 ;;      Temps:          1       0       0       0       0       0       0       0
  7143 ;;      Totals:         2       0       0       0       0       0       0       0
  7144 ;;Total ram usage:        2 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    3
  7147 ;; This function calls:
  7148 ;;		_CC2500_WriteByte
  7149 ;;		_RF_Timeout_Counter
  7150 ;;		_setRF_TimeoutCleared
  7151 ;; This function is called by:
  7152 ;;		_CC2500_TxData
  7153 ;;		_CC2500_RxData
  7154 ;;		_CC2500_ClearTXFIFO
  7155 ;;		_CC2500_ClearRXFIFO
  7156 ;;		_CC2500_FrequencyCabr
  7157 ;;		_CC2500_SIDLEMode
  7158 ;;		_setRF_Main
  7159 ;;		_RF_RxDisable
  7160 ;; This function uses a non-reentrant model
  7161 ;;
  7162                           
  7163                           
  7164                           ;psect for function _CC2500_WriteCommand
  7165  0FAB                     _CC2500_WriteCommand:	
  7166                           
  7167                           ;incstack = 0
  7168                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7169                           ;CC2500_WriteCommand@command stored from wreg
  7170  0FAB  00F4               	movwf	CC2500_WriteCommand@command
  7171                           
  7172                           ;CC2500_B1.c: 293: RC0 = 0;
  7173  0FAC  0020               	movlb	0	; select bank0
  7174  0FAD  100E               	bcf	14,0	;volatile
  7175                           
  7176                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  7177  0FAE  0874               	movf	CC2500_WriteCommand@command,w
  7178  0FAF  00F3               	movwf	??_CC2500_WriteCommand
  7179  0FB0  0873               	movf	??_CC2500_WriteCommand,w
  7180  0FB1  00D6               	movwf	_SPI0Buffer
  7181                           
  7182                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  7183  0FB2  2FB6               	goto	l2887
  7184  0FB3                     l2885:	
  7185                           
  7186                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  7187  0FB3  318F  2726  318F   	fcall	_RF_Timeout_Counter
  7188  0FB6                     l2887:	
  7189  0FB6  0020               	movlb	0	; select bank0
  7190  0FB7  1E8E               	btfss	14,5	;volatile
  7191  0FB8  2FBB               	goto	l2891
  7192  0FB9  1F31               	btfss	_RF1+1,6
  7193  0FBA  2FB3               	goto	l2885
  7194  0FBB                     l2891:	
  7195                           
  7196                           ;CC2500_B1.c: 298: };
  7197                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  7198  0FBB  318E  262E  318F   	fcall	_setRF_TimeoutCleared
  7199                           
  7200                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  7201  0FBE  318F  2712         	fcall	_CC2500_WriteByte
  7202                           
  7203                           ;CC2500_B1.c: 302: RC0 = 1;
  7204  0FC0  0020               	movlb	0	; select bank0
  7205  0FC1  140E               	bsf	14,0	;volatile
  7206  0FC2  0008               	return
  7207  0FC3                     __end_of_CC2500_WriteCommand:	
  7208                           
  7209                           	psect	text41
  7210  0E2E                     __ptext41:	
  7211 ;; *************** function _setRF_TimeoutCleared *****************
  7212 ;; Defined at:
  7213 ;;		line 149 in file "../src/RF_Control_B1.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;		None
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;		None
  7218 ;; Return value:  Size  Location     Type
  7219 ;;		None               void
  7220 ;; Registers used:
  7221 ;;		status,2
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7227 ;;      Params:         0       0       0       0       0       0       0       0
  7228 ;;      Locals:         0       0       0       0       0       0       0       0
  7229 ;;      Temps:          0       0       0       0       0       0       0       0
  7230 ;;      Totals:         0       0       0       0       0       0       0       0
  7231 ;;Total ram usage:        0 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    2
  7234 ;; This function calls:
  7235 ;;		Nothing
  7236 ;; This function is called by:
  7237 ;;		_CC2500_TxData
  7238 ;;		_CC2500_RxData
  7239 ;;		_CC2500_PowerRST
  7240 ;;		_CC2500_WriteREG
  7241 ;;		_CC2500_WriteCommand
  7242 ;;		_CC2500_ReadStatus
  7243 ;;		_CC2500_ReadREG
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           
  7248                           ;psect for function _setRF_TimeoutCleared
  7249  0E2E                     _setRF_TimeoutCleared:	
  7250                           
  7251                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  7252                           
  7253                           ;incstack = 0
  7254                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  7255  0E2E  0020               	movlb	0	; select bank0
  7256  0E2F  01BD               	clrf	_RF1+13
  7257  0E30  01BE               	clrf	_RF1+14
  7258  0E31  0008               	return
  7259  0E32                     __end_of_setRF_TimeoutCleared:	
  7260                           
  7261                           	psect	text42
  7262  0F26                     __ptext42:	
  7263 ;; *************** function _RF_Timeout_Counter *****************
  7264 ;; Defined at:
  7265 ;;		line 141 in file "../src/RF_Control_B1.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;		None
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;		None
  7270 ;; Return value:  Size  Location     Type
  7271 ;;		None               void
  7272 ;; Registers used:
  7273 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7274 ;; Tracked objects:
  7275 ;;		On entry : 0/0
  7276 ;;		On exit  : 0/0
  7277 ;;		Unchanged: 0/0
  7278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7279 ;;      Params:         0       0       0       0       0       0       0       0
  7280 ;;      Locals:         0       0       0       0       0       0       0       0
  7281 ;;      Temps:          0       0       0       0       0       0       0       0
  7282 ;;      Totals:         0       0       0       0       0       0       0       0
  7283 ;;Total ram usage:        0 bytes
  7284 ;; Hardware stack levels used:    1
  7285 ;; Hardware stack levels required when called:    2
  7286 ;; This function calls:
  7287 ;;		Nothing
  7288 ;; This function is called by:
  7289 ;;		_CC2500_TxData
  7290 ;;		_CC2500_RxData
  7291 ;;		_CC2500_PowerRST
  7292 ;;		_CC2500_WriteREG
  7293 ;;		_CC2500_WriteCommand
  7294 ;;		_CC2500_ReadStatus
  7295 ;;		_CC2500_ReadREG
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           
  7300                           ;psect for function _RF_Timeout_Counter
  7301  0F26                     _RF_Timeout_Counter:	
  7302                           
  7303                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  7304                           
  7305                           ;incstack = 0
  7306                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  7307  0F26  3001               	movlw	1
  7308  0F27  0020               	movlb	0	; select bank0
  7309  0F28  07BD               	addwf	_RF1+13,f
  7310  0F29  3000               	movlw	0
  7311  0F2A  3DBE               	addwfc	_RF1+14,f
  7312                           
  7313                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  7314  0F2B  300D               	movlw	13
  7315  0F2C  3E30               	addlw	_RF1& (0+255)
  7316  0F2D  0086               	movwf	6
  7317  0F2E  0187               	clrf	7
  7318  0F2F  3F40               	moviw [0]fsr1
  7319  0F30  3AA8               	xorlw	168
  7320  0F31  1D03               	skipz
  7321  0F32  2F35               	goto	u1385
  7322  0F33  3F41               	moviw [1]fsr1
  7323  0F34  3A61               	xorlw	97
  7324  0F35                     u1385:	
  7325  0F35  1D03               	skipz
  7326  0F36  0008               	return
  7327                           
  7328                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  7329  0F37  01BD               	clrf	_RF1+13
  7330  0F38  01BE               	clrf	_RF1+14
  7331                           
  7332                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  7333  0F39  1731               	bsf	_RF1+1,6
  7334  0F3A  0008               	return
  7335  0F3B                     __end_of_RF_Timeout_Counter:	
  7336                           
  7337                           	psect	text43
  7338  0F12                     __ptext43:	
  7339 ;; *************** function _CC2500_WriteByte *****************
  7340 ;; Defined at:
  7341 ;;		line 226 in file "../src/CC2500_B1.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;		None
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;  loop_a          1    2[COMMON] unsigned char 
  7346 ;; Return value:  Size  Location     Type
  7347 ;;		None               void
  7348 ;; Registers used:
  7349 ;;		wreg, status,2, status,0
  7350 ;; Tracked objects:
  7351 ;;		On entry : 0/0
  7352 ;;		On exit  : 0/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7355 ;;      Params:         0       0       0       0       0       0       0       0
  7356 ;;      Locals:         1       0       0       0       0       0       0       0
  7357 ;;      Temps:          1       0       0       0       0       0       0       0
  7358 ;;      Totals:         2       0       0       0       0       0       0       0
  7359 ;;Total ram usage:        2 bytes
  7360 ;; Hardware stack levels used:    1
  7361 ;; Hardware stack levels required when called:    2
  7362 ;; This function calls:
  7363 ;;		Nothing
  7364 ;; This function is called by:
  7365 ;;		_CC2500_TxData
  7366 ;;		_CC2500_RxData
  7367 ;;		_CC2500_PowerRST
  7368 ;;		_CC2500_WriteREG
  7369 ;;		_CC2500_WriteCommand
  7370 ;;		_CC2500_ReadStatus
  7371 ;;		_CC2500_ReadREG
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           
  7376                           ;psect for function _CC2500_WriteByte
  7377  0F12                     _CC2500_WriteByte:	
  7378                           
  7379                           ;CC2500_B1.c: 227: unsigned char loop_a;
  7380                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  7381                           
  7382                           ;incstack = 0
  7383                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  7384  0F12  01F2               	clrf	CC2500_WriteByte@loop_a
  7385  0F13                     L5:	
  7386  0F13  3008               	movlw	8
  7387  0F14  0272               	subwf	CC2500_WriteByte@loop_a,w
  7388  0F15  1803               	btfsc	3,0
  7389  0F16  0008               	return
  7390                           
  7391                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  7392  0F17  0020               	movlb	0	; select bank0
  7393  0F18  1FD6               	btfss	_SPI0Buffer,7
  7394  0F19  2F1C               	goto	l214
  7395                           
  7396                           ;CC2500_B1.c: 230: RC4 = 1;
  7397  0F1A  160E               	bsf	14,4	;volatile
  7398  0F1B  2F1D               	goto	l215
  7399  0F1C                     l214:	
  7400                           
  7401                           ;CC2500_B1.c: 231: else
  7402                           ;CC2500_B1.c: 232: RC4 = 0;
  7403  0F1C  120E               	bcf	14,4	;volatile
  7404  0F1D                     l215:	
  7405                           
  7406                           ;CC2500_B1.c: 233: RC3 = 1;
  7407  0F1D  158E               	bsf	14,3	;volatile
  7408                           
  7409                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  7410  0F1E  1003               	clrc
  7411  0F1F  0DD6               	rlf	_SPI0Buffer,f
  7412                           
  7413                           ;CC2500_B1.c: 235: RC3 = 0;
  7414  0F20  118E               	bcf	14,3	;volatile
  7415  0F21  3001               	movlw	1
  7416  0F22  00F1               	movwf	??_CC2500_WriteByte
  7417  0F23  0871               	movf	??_CC2500_WriteByte,w
  7418  0F24  07F2               	addwf	CC2500_WriteByte@loop_a,f
  7419  0F25  2F13               	goto	L5
  7420  0F26                     __end_of_CC2500_WriteByte:	
  7421                           
  7422                           	psect	text44
  7423  0E24                     __ptext44:	
  7424 ;; *************** function _RF_Initialization *****************
  7425 ;; Defined at:
  7426 ;;		line 9 in file "../src/RF_Control_B1.c"
  7427 ;; Parameters:    Size  Location     Type
  7428 ;;		None
  7429 ;; Auto vars:     Size  Location     Type
  7430 ;;		None
  7431 ;; Return value:  Size  Location     Type
  7432 ;;		None               void
  7433 ;; Registers used:
  7434 ;;		wreg, status,2, status,0, pclath, cstack
  7435 ;; Tracked objects:
  7436 ;;		On entry : 0/0
  7437 ;;		On exit  : 0/0
  7438 ;;		Unchanged: 0/0
  7439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7440 ;;      Params:         0       0       0       0       0       0       0       0
  7441 ;;      Locals:         0       0       0       0       0       0       0       0
  7442 ;;      Temps:          0       0       0       0       0       0       0       0
  7443 ;;      Totals:         0       0       0       0       0       0       0       0
  7444 ;;Total ram usage:        0 bytes
  7445 ;; Hardware stack levels used:    1
  7446 ;; Hardware stack levels required when called:    3
  7447 ;; This function calls:
  7448 ;;		_setRF_Initialization
  7449 ;; This function is called by:
  7450 ;;		_main
  7451 ;; This function uses a non-reentrant model
  7452 ;;
  7453                           
  7454                           
  7455                           ;psect for function _RF_Initialization
  7456  0E24                     _RF_Initialization:	
  7457                           
  7458                           ;RF_Control_B1.c: 11: setRF_Initialization();
  7459                           
  7460                           ;incstack = 0
  7461                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7462  0E24  318E  2675         	fcall	_setRF_Initialization
  7463  0E26  0008               	return
  7464  0E27                     __end_of_RF_Initialization:	
  7465                           
  7466                           	psect	text45
  7467  0E75                     __ptext45:	
  7468 ;; *************** function _setRF_Initialization *****************
  7469 ;; Defined at:
  7470 ;;		line 17 in file "../src/RF_Control_B1.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;		None
  7473 ;; Auto vars:     Size  Location     Type
  7474 ;;		None
  7475 ;; Return value:  Size  Location     Type
  7476 ;;		None               void
  7477 ;; Registers used:
  7478 ;;		wreg
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7484 ;;      Params:         0       0       0       0       0       0       0       0
  7485 ;;      Locals:         0       0       0       0       0       0       0       0
  7486 ;;      Temps:          1       0       0       0       0       0       0       0
  7487 ;;      Totals:         1       0       0       0       0       0       0       0
  7488 ;;Total ram usage:        1 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; Hardware stack levels required when called:    2
  7491 ;; This function calls:
  7492 ;;		Nothing
  7493 ;; This function is called by:
  7494 ;;		_RF_Initialization
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           
  7499                           ;psect for function _setRF_Initialization
  7500  0E75                     _setRF_Initialization:	
  7501                           
  7502                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  7503                           
  7504                           ;incstack = 0
  7505                           ; Regs used in _setRF_Initialization: [wreg]
  7506  0E75  3015               	movlw	21
  7507  0E76  00F1               	movwf	??_setRF_Initialization
  7508  0E77  0871               	movf	??_setRF_Initialization,w
  7509  0E78  0020               	movlb	0	; select bank0
  7510  0E79  00D8               	movwf	_Tx_Length
  7511                           
  7512                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
  7513  0E7A  30C8               	movlw	200
  7514  0E7B  00B8               	movwf	_RF1+8
  7515  0E7C  3000               	movlw	0
  7516  0E7D  00B9               	movwf	_RF1+9
  7517  0E7E  0008               	return
  7518  0E7F                     __end_of_setRF_Initialization:	
  7519                           
  7520                           	psect	text46
  7521  0E62                     __ptext46:	
  7522 ;; *************** function _Mcu_Initialization *****************
  7523 ;; Defined at:
  7524 ;;		line 30 in file "../src/MCU_B1.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;		None
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;		None
  7529 ;; Return value:  Size  Location     Type
  7530 ;;		None               void
  7531 ;; Registers used:
  7532 ;;		wreg, status,2, status,0, pclath, cstack
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7538 ;;      Params:         0       0       0       0       0       0       0       0
  7539 ;;      Locals:         0       0       0       0       0       0       0       0
  7540 ;;      Temps:          0       0       0       0       0       0       0       0
  7541 ;;      Totals:         0       0       0       0       0       0       0       0
  7542 ;;Total ram usage:        0 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    3
  7545 ;; This function calls:
  7546 ;;		_Fosc_Set
  7547 ;;		_IO_Set
  7548 ;;		_TMR1_Set
  7549 ;; This function is called by:
  7550 ;;		_main
  7551 ;; This function uses a non-reentrant model
  7552 ;;
  7553                           
  7554                           
  7555                           ;psect for function _Mcu_Initialization
  7556  0E62                     _Mcu_Initialization:	
  7557                           
  7558                           ;MCU_B1.c: 32: Fosc_Set();
  7559                           
  7560                           ;incstack = 0
  7561                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7562  0E62  318E  262A  318E   	fcall	_Fosc_Set
  7563                           
  7564                           ;MCU_B1.c: 34: IO_Set();
  7565  0E65  318F  2793  318E   	fcall	_IO_Set
  7566                           
  7567                           ;MCU_B1.c: 36: ;;
  7568                           ;MCU_B1.c: 38: TMR1_Set();
  7569  0E68  3187  27F4         	fcall	_TMR1_Set
  7570  0E6A  0008               	return
  7571  0E6B                     __end_of_Mcu_Initialization:	
  7572                           
  7573                           	psect	text47
  7574  07F4                     __ptext47:	
  7575 ;; *************** function _TMR1_Set *****************
  7576 ;; Defined at:
  7577 ;;		line 226 in file "../src/MCU_B1.c"
  7578 ;; Parameters:    Size  Location     Type
  7579 ;;		None
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;		None
  7582 ;; Return value:  Size  Location     Type
  7583 ;;		None               void
  7584 ;; Registers used:
  7585 ;;		wreg
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7591 ;;      Params:         0       0       0       0       0       0       0       0
  7592 ;;      Locals:         0       0       0       0       0       0       0       0
  7593 ;;      Temps:          0       0       0       0       0       0       0       0
  7594 ;;      Totals:         0       0       0       0       0       0       0       0
  7595 ;;Total ram usage:        0 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; Hardware stack levels required when called:    2
  7598 ;; This function calls:
  7599 ;;		Nothing
  7600 ;; This function is called by:
  7601 ;;		_Mcu_Initialization
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           
  7606                           ;psect for function _TMR1_Set
  7607  07F4                     _TMR1_Set:	
  7608                           
  7609                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  7610                           
  7611                           ;incstack = 0
  7612                           ; Regs used in _TMR1_Set: [wreg]
  7613  07F4  3041               	movlw	65
  7614  07F5  0020               	movlb	0	; select bank0
  7615  07F6  0098               	movwf	24	;volatile
  7616                           
  7617                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  7618  07F7  30FA               	movlw	250
  7619  07F8  0097               	movwf	23	;volatile
  7620                           
  7621                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  7622  07F9  3038               	movlw	56
  7623  07FA  0096               	movwf	22	;volatile
  7624                           
  7625                           ;MCU_B1.c: 230: TMR1IE = 1;
  7626  07FB  0021               	movlb	1	; select bank1
  7627  07FC  1411               	bsf	17,0	;volatile
  7628                           
  7629                           ;MCU_B1.c: 231: PEIE = 1;
  7630  07FD  170B               	bsf	11,6	;volatile
  7631                           
  7632                           ;MCU_B1.c: 232: GIE = 1;
  7633  07FE  178B               	bsf	11,7	;volatile
  7634  07FF  0008               	return
  7635  0800                     __end_of_TMR1_Set:	
  7636                           
  7637                           	psect	text48
  7638  0F93                     __ptext48:	
  7639 ;; *************** function _IO_Set *****************
  7640 ;; Defined at:
  7641 ;;		line 60 in file "../src/MCU_B1.c"
  7642 ;; Parameters:    Size  Location     Type
  7643 ;;		None
  7644 ;; Auto vars:     Size  Location     Type
  7645 ;;		None
  7646 ;; Return value:  Size  Location     Type
  7647 ;;		None               void
  7648 ;; Registers used:
  7649 ;;		wreg, status,2
  7650 ;; Tracked objects:
  7651 ;;		On entry : 0/0
  7652 ;;		On exit  : 0/0
  7653 ;;		Unchanged: 0/0
  7654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7655 ;;      Params:         0       0       0       0       0       0       0       0
  7656 ;;      Locals:         0       0       0       0       0       0       0       0
  7657 ;;      Temps:          0       0       0       0       0       0       0       0
  7658 ;;      Totals:         0       0       0       0       0       0       0       0
  7659 ;;Total ram usage:        0 bytes
  7660 ;; Hardware stack levels used:    1
  7661 ;; Hardware stack levels required when called:    2
  7662 ;; This function calls:
  7663 ;;		Nothing
  7664 ;; This function is called by:
  7665 ;;		_Mcu_Initialization
  7666 ;; This function uses a non-reentrant model
  7667 ;;
  7668                           
  7669                           
  7670                           ;psect for function _IO_Set
  7671  0F93                     _IO_Set:	
  7672                           
  7673                           ;MCU_B1.c: 75: TRISA = 0b00000000;;
  7674                           
  7675                           ;incstack = 0
  7676                           ; Regs used in _IO_Set: [wreg+status,2]
  7677  0F93  0021               	movlb	1	; select bank1
  7678  0F94  018C               	clrf	12	;volatile
  7679                           
  7680                           ;MCU_B1.c: 76: TRISB = 0b00000001;;
  7681  0F95  3001               	movlw	1
  7682  0F96  008D               	movwf	13	;volatile
  7683                           
  7684                           ;MCU_B1.c: 77: TRISC = 0b11100110;;
  7685  0F97  30E6               	movlw	230
  7686  0F98  008E               	movwf	14	;volatile
  7687                           
  7688                           ;MCU_B1.c: 78: LATA = 0b00000000;;
  7689  0F99  0022               	movlb	2	; select bank2
  7690  0F9A  018C               	clrf	12	;volatile
  7691                           
  7692                           ;MCU_B1.c: 79: LATB = 0b00000000;;
  7693  0F9B  018D               	clrf	13	;volatile
  7694                           
  7695                           ;MCU_B1.c: 80: LATC = 0b00000000;;
  7696  0F9C  018E               	clrf	14	;volatile
  7697                           
  7698                           ;MCU_B1.c: 81: ANSELA = 0b00000000;;
  7699  0F9D  0023               	movlb	3	; select bank3
  7700  0F9E  018C               	clrf	12	;volatile
  7701                           
  7702                           ;MCU_B1.c: 82: ANSELB = 0b00000000;;
  7703  0F9F  018D               	clrf	13	;volatile
  7704                           
  7705                           ;MCU_B1.c: 83: ANSELC = 0b00000000;;
  7706  0FA0  018E               	clrf	14	;volatile
  7707                           
  7708                           ;MCU_B1.c: 84: PORTA = 0b00000000;;
  7709  0FA1  0020               	movlb	0	; select bank0
  7710  0FA2  018C               	clrf	12	;volatile
  7711                           
  7712                           ;MCU_B1.c: 85: PORTB = 0b00000001;;
  7713  0FA3  3001               	movlw	1
  7714  0FA4  008D               	movwf	13	;volatile
  7715                           
  7716                           ;MCU_B1.c: 86: PORTC = 0b11100110;;
  7717  0FA5  30E6               	movlw	230
  7718  0FA6  008E               	movwf	14	;volatile
  7719                           
  7720                           ;MCU_B1.c: 88: WPUB = 0b00000001;;
  7721  0FA7  3001               	movlw	1
  7722  0FA8  0024               	movlb	4	; select bank4
  7723  0FA9  008D               	movwf	13	;volatile
  7724  0FAA  0008               	return
  7725  0FAB                     __end_of_IO_Set:	
  7726                           
  7727                           	psect	text49
  7728  0E2A                     __ptext49:	
  7729 ;; *************** function _Fosc_Set *****************
  7730 ;; Defined at:
  7731 ;;		line 56 in file "../src/MCU_B1.c"
  7732 ;; Parameters:    Size  Location     Type
  7733 ;;		None
  7734 ;; Auto vars:     Size  Location     Type
  7735 ;;		None
  7736 ;; Return value:  Size  Location     Type
  7737 ;;		None               void
  7738 ;; Registers used:
  7739 ;;		wreg
  7740 ;; Tracked objects:
  7741 ;;		On entry : 0/0
  7742 ;;		On exit  : 0/0
  7743 ;;		Unchanged: 0/0
  7744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7745 ;;      Params:         0       0       0       0       0       0       0       0
  7746 ;;      Locals:         0       0       0       0       0       0       0       0
  7747 ;;      Temps:          0       0       0       0       0       0       0       0
  7748 ;;      Totals:         0       0       0       0       0       0       0       0
  7749 ;;Total ram usage:        0 bytes
  7750 ;; Hardware stack levels used:    1
  7751 ;; Hardware stack levels required when called:    2
  7752 ;; This function calls:
  7753 ;;		Nothing
  7754 ;; This function is called by:
  7755 ;;		_Mcu_Initialization
  7756 ;; This function uses a non-reentrant model
  7757 ;;
  7758                           
  7759                           
  7760                           ;psect for function _Fosc_Set
  7761  0E2A                     _Fosc_Set:	
  7762                           
  7763                           ;MCU_B1.c: 57: OSCCON = 0x78;
  7764                           
  7765                           ;incstack = 0
  7766                           ; Regs used in _Fosc_Set: [wreg]
  7767  0E2A  3078               	movlw	120
  7768  0E2B  0021               	movlb	1	; select bank1
  7769  0E2C  0099               	movwf	25	;volatile
  7770  0E2D  0008               	return
  7771  0E2E                     __end_of_Fosc_Set:	
  7772                           
  7773                           	psect	text50
  7774  0691                     __ptext50:	
  7775 ;; *************** function _Flash_Memory_Main *****************
  7776 ;; Defined at:
  7777 ;;		line 978 in file "../src/MCU_B1.c"
  7778 ;; Parameters:    Size  Location     Type
  7779 ;;		None
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;  key_Status      1    7[COMMON] unsigned char 
  7782 ;; Return value:  Size  Location     Type
  7783 ;;		None               void
  7784 ;; Registers used:
  7785 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7786 ;; Tracked objects:
  7787 ;;		On entry : 0/0
  7788 ;;		On exit  : 0/0
  7789 ;;		Unchanged: 0/0
  7790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7791 ;;      Params:         0       0       0       0       0       0       0       0
  7792 ;;      Locals:         2       0       0       0       0       0       0       0
  7793 ;;      Temps:          0       0       0       0       0       0       0       0
  7794 ;;      Totals:         2       0       0       0       0       0       0       0
  7795 ;;Total ram usage:        2 bytes
  7796 ;; Hardware stack levels used:    1
  7797 ;; Hardware stack levels required when called:    5
  7798 ;; This function calls:
  7799 ;;		_Flash_Memory_Modify
  7800 ;;		_getMain_All_LightsStatus
  7801 ;; This function is called by:
  7802 ;;		_main
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           
  7807                           ;psect for function _Flash_Memory_Main
  7808  0691                     _Flash_Memory_Main:	
  7809                           
  7810                           ;MCU_B1.c: 979: char key_Status = 0;
  7811                           
  7812                           ;incstack = 0
  7813                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7814  0691  01F7               	clrf	Flash_Memory_Main@key_Status
  7815                           
  7816                           ;MCU_B1.c: 983: if (Memory.Modify == 1) {
  7817  0692  0021               	movlb	1	; select bank1
  7818  0693  1C62               	btfss	(_Memory^(0+128)+36),0
  7819  0694  0008               	return
  7820                           
  7821                           ;MCU_B1.c: 984: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
  7822  0695  01F8               	clrf	_Flash_Memory_Main$1339
  7823  0696  318E  2621  3186   	fcall	_getMain_All_LightsStatus
  7824  0699  3800               	iorlw	0
  7825  069A  1D03               	skipz
  7826  069B  2EA1               	goto	l3689
  7827  069C  08F7               	movf	Flash_Memory_Main@key_Status,f
  7828  069D  1D03               	skipz
  7829  069E  2EA1               	goto	l3689
  7830  069F  01F8               	clrf	_Flash_Memory_Main$1339
  7831  06A0  0AF8               	incf	_Flash_Memory_Main$1339,f
  7832  06A1                     l3689:	
  7833  06A1  0878               	movf	_Flash_Memory_Main$1339,w
  7834  06A2  0021               	movlb	1	; select bank1
  7835  06A3  10E2               	bcf	(_Memory^(0+128)+36),1
  7836  06A4  1D03               	skipz
  7837  06A5  14E2               	bsf	(_Memory^(0+128)+36),1
  7838                           
  7839                           ;MCU_B1.c: 985: if (Memory.GO == 1) {
  7840  06A6  1CE2               	btfss	(_Memory^(0+128)+36),1
  7841  06A7  2EC0               	goto	l609
  7842                           
  7843                           ;MCU_B1.c: 986: Memory.Runtime = 1;
  7844  06A8  15E2               	bsf	(_Memory^(0+128)+36),3
  7845                           
  7846                           ;MCU_B1.c: 987: Memory.Time++;
  7847  06A9  3001               	movlw	1
  7848  06AA  07E0               	addwf	(_Memory^(0+128)+34),f
  7849  06AB  3000               	movlw	0
  7850  06AC  3DE1               	addwfc	((_Memory+1)^(0+128)+34),f
  7851                           
  7852                           ;MCU_B1.c: 988: if (Memory.Time == (200 / 20)) {
  7853  06AD  3022               	movlw	34
  7854  06AE  3EBE               	addlw	_Memory& (0+255)
  7855  06AF  0086               	movwf	6
  7856  06B0  0187               	clrf	7
  7857  06B1  3F40               	moviw [0]fsr1
  7858  06B2  3A0A               	xorlw	10
  7859  06B3  1D03               	skipz
  7860  06B4  2EB7               	goto	u2565
  7861  06B5  3F41               	moviw [1]fsr1
  7862  06B6  3A00               	xorlw	0
  7863  06B7                     u2565:	
  7864  06B7  1D03               	skipz
  7865  06B8  0008               	return
  7866                           
  7867                           ;MCU_B1.c: 989: Memory.Time = 0;
  7868  06B9  01E0               	clrf	(_Memory^(0+128)+34)
  7869  06BA  01E1               	clrf	((_Memory+1)^(0+128)+34)
  7870                           
  7871                           ;MCU_B1.c: 990: Memory.Modify = 0;
  7872  06BB  1062               	bcf	(_Memory^(0+128)+36),0
  7873                           
  7874                           ;MCU_B1.c: 991: Memory.GO = 0;
  7875  06BC  10E2               	bcf	(_Memory^(0+128)+36),1
  7876                           
  7877                           ;MCU_B1.c: 992: Flash_Memory_Modify();
  7878  06BD  3185  2523         	fcall	_Flash_Memory_Modify
  7879                           
  7880                           ;MCU_B1.c: 993: }
  7881                           ;MCU_B1.c: 994: } else {
  7882  06BF  0008               	return
  7883  06C0                     l609:	
  7884                           
  7885                           ;MCU_B1.c: 995: if (Memory.Runtime == 1) {
  7886  06C0  1DE2               	btfss	(_Memory^(0+128)+36),3
  7887  06C1  0008               	return
  7888                           
  7889                           ;MCU_B1.c: 996: Memory.Runtime = 0;
  7890  06C2  11E2               	bcf	(_Memory^(0+128)+36),3
  7891                           
  7892                           ;MCU_B1.c: 997: Memory.Time = 0;
  7893  06C3  01E0               	clrf	(_Memory^(0+128)+34)
  7894  06C4  01E1               	clrf	((_Memory+1)^(0+128)+34)
  7895  06C5  0008               	return
  7896  06C6                     __end_of_Flash_Memory_Main:	
  7897                           
  7898                           	psect	text51
  7899  0E21                     __ptext51:	
  7900 ;; *************** function _getMain_All_LightsStatus *****************
  7901 ;; Defined at:
  7902 ;;		line 373 in file "../src/Main_B1.c"
  7903 ;; Parameters:    Size  Location     Type
  7904 ;;		None
  7905 ;; Auto vars:     Size  Location     Type
  7906 ;;  status          1    1[COMMON] unsigned char 
  7907 ;; Return value:  Size  Location     Type
  7908 ;;                  1    wreg      unsigned char 
  7909 ;; Registers used:
  7910 ;;		wreg, status,2
  7911 ;; Tracked objects:
  7912 ;;		On entry : 0/0
  7913 ;;		On exit  : 0/0
  7914 ;;		Unchanged: 0/0
  7915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7916 ;;      Params:         0       0       0       0       0       0       0       0
  7917 ;;      Locals:         1       0       0       0       0       0       0       0
  7918 ;;      Temps:          0       0       0       0       0       0       0       0
  7919 ;;      Totals:         1       0       0       0       0       0       0       0
  7920 ;;Total ram usage:        1 bytes
  7921 ;; Hardware stack levels used:    1
  7922 ;; Hardware stack levels required when called:    2
  7923 ;; This function calls:
  7924 ;;		Nothing
  7925 ;; This function is called by:
  7926 ;;		_Flash_Memory_Main
  7927 ;;		_setControl_Lights_Table
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           
  7932                           ;psect for function _getMain_All_LightsStatus
  7933  0E21                     _getMain_All_LightsStatus:	
  7934                           
  7935                           ;Main_B1.c: 374: char status = 0;
  7936                           
  7937                           ;incstack = 0
  7938                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
  7939  0E21  01F1               	clrf	getMain_All_LightsStatus@status
  7940                           
  7941                           ;Main_B1.c: 420: return status;
  7942  0E22  0871               	movf	getMain_All_LightsStatus@status,w
  7943  0E23  0008               	return
  7944  0E24                     __end_of_getMain_All_LightsStatus:	
  7945                           
  7946                           	psect	text52
  7947  0523                     __ptext52:	
  7948 ;; *************** function _Flash_Memory_Modify *****************
  7949 ;; Defined at:
  7950 ;;		line 1055 in file "../src/MCU_B1.c"
  7951 ;; Parameters:    Size  Location     Type
  7952 ;;		None
  7953 ;; Auto vars:     Size  Location     Type
  7954 ;;  i               1    6[COMMON] unsigned char 
  7955 ;; Return value:  Size  Location     Type
  7956 ;;		None               void
  7957 ;; Registers used:
  7958 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7959 ;; Tracked objects:
  7960 ;;		On entry : 0/0
  7961 ;;		On exit  : 0/0
  7962 ;;		Unchanged: 0/0
  7963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7964 ;;      Params:         0       0       0       0       0       0       0       0
  7965 ;;      Locals:         1       0       0       0       0       0       0       0
  7966 ;;      Temps:          1       0       0       0       0       0       0       0
  7967 ;;      Totals:         2       0       0       0       0       0       0       0
  7968 ;;Total ram usage:        2 bytes
  7969 ;; Hardware stack levels used:    1
  7970 ;; Hardware stack levels required when called:    4
  7971 ;; This function calls:
  7972 ;;		_Flash_Memory_Erasing
  7973 ;;		_Flash_Memory_Read
  7974 ;;		_Flash_Memory_Write
  7975 ;;		_setMemory_Data
  7976 ;; This function is called by:
  7977 ;;		_Flash_Memory_Main
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           
  7982                           ;psect for function _Flash_Memory_Modify
  7983  0523                     _Flash_Memory_Modify:	
  7984                           
  7985                           ;MCU_B1.c: 1056: char i = 0;
  7986                           
  7987                           ;incstack = 0
  7988                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7989  0523  01F6               	clrf	Flash_Memory_Modify@i
  7990                           
  7991                           ;MCU_B1.c: 1057: for (i = 0; i < 32; i++) {
  7992  0524  01F6               	clrf	Flash_Memory_Modify@i
  7993  0525  3020               	movlw	32
  7994  0526  0276               	subwf	Flash_Memory_Modify@i,w
  7995  0527  1803               	btfsc	3,0
  7996  0528  2D3C               	goto	l3513
  7997  0529                     l3507:	
  7998                           
  7999                           ;MCU_B1.c: 1058: Memory.Data[i] = Flash_Memory_Read(i);
  8000  0529  0876               	movf	Flash_Memory_Modify@i,w
  8001  052A  318E  26FE  3185   	fcall	_Flash_Memory_Read
  8002  052D  00F5               	movwf	??_Flash_Memory_Modify
  8003  052E  0876               	movf	Flash_Memory_Modify@i,w
  8004  052F  3EBE               	addlw	_Memory& (0+255)
  8005  0530  0086               	movwf	6
  8006  0531  0187               	clrf	7
  8007  0532  0875               	movf	??_Flash_Memory_Modify,w
  8008  0533  0081               	movwf	1
  8009  0534  3001               	movlw	1
  8010  0535  00F5               	movwf	??_Flash_Memory_Modify
  8011  0536  0875               	movf	??_Flash_Memory_Modify,w
  8012  0537  07F6               	addwf	Flash_Memory_Modify@i,f
  8013  0538  3020               	movlw	32
  8014  0539  0276               	subwf	Flash_Memory_Modify@i,w
  8015  053A  1C03               	skipc
  8016  053B  2D29               	goto	l3507
  8017  053C                     l3513:	
  8018                           
  8019                           ;MCU_B1.c: 1059: }
  8020                           ;MCU_B1.c: 1060: setMemory_Data(6, product->Data[11]);
  8021  053C  0020               	movlb	0	; select bank0
  8022  053D  0862               	movf	_product,w
  8023  053E  0086               	movwf	6
  8024  053F  3001               	movlw	1	; select bank2/3
  8025  0540  0087               	movwf	7
  8026  0541  3001               	movlw	1	; select bank2/3
  8027  0542  3F4B               	moviw [11]fsr1
  8028  0543  00F1               	movwf	setMemory_Data@data
  8029  0544  3006               	movlw	6
  8030  0545  318E  266B  3185   	fcall	_setMemory_Data
  8031                           
  8032                           ;MCU_B1.c: 1061: setMemory_Data(0, product->Data[12]);
  8033  0548  0020               	movlb	0	; select bank0
  8034  0549  0862               	movf	_product,w
  8035  054A  0086               	movwf	6
  8036  054B  3001               	movlw	1	; select bank2/3
  8037  054C  0087               	movwf	7
  8038  054D  3001               	movlw	1	; select bank2/3
  8039  054E  3F4C               	moviw [12]fsr1
  8040  054F  00F1               	movwf	setMemory_Data@data
  8041  0550  3000               	movlw	0
  8042  0551  318E  266B  3185   	fcall	_setMemory_Data
  8043                           
  8044                           ;MCU_B1.c: 1062: setMemory_Data(1, product->Data[13]);
  8045  0554  0020               	movlb	0	; select bank0
  8046  0555  0862               	movf	_product,w
  8047  0556  0086               	movwf	6
  8048  0557  3001               	movlw	1	; select bank2/3
  8049  0558  0087               	movwf	7
  8050  0559  3001               	movlw	1	; select bank2/3
  8051  055A  3F4D               	moviw [13]fsr1
  8052  055B  00F1               	movwf	setMemory_Data@data
  8053  055C  3001               	movlw	1
  8054  055D  318E  266B  3185   	fcall	_setMemory_Data
  8055                           
  8056                           ;MCU_B1.c: 1063: setMemory_Data(2, product->Data[14]);
  8057  0560  0020               	movlb	0	; select bank0
  8058  0561  0862               	movf	_product,w
  8059  0562  0086               	movwf	6
  8060  0563  3001               	movlw	1	; select bank2/3
  8061  0564  0087               	movwf	7
  8062  0565  3001               	movlw	1	; select bank2/3
  8063  0566  3F4E               	moviw [14]fsr1
  8064  0567  00F1               	movwf	setMemory_Data@data
  8065  0568  3002               	movlw	2
  8066  0569  318E  266B  3185   	fcall	_setMemory_Data
  8067                           
  8068                           ;MCU_B1.c: 1073: if (Memory.LoopSave == 1) {
  8069  056C  0021               	movlb	1	; select bank1
  8070  056D  1D62               	btfss	(_Memory^(0+128)+36),2
  8071  056E  2D73               	goto	l632
  8072                           
  8073                           ;MCU_B1.c: 1074: Memory.LoopSave = 0;
  8074  056F  1162               	bcf	(_Memory^(0+128)+36),2
  8075                           
  8076                           ;MCU_B1.c: 1075: myMain.FirstOpen = 0;
  8077  0570  0020               	movlb	0	; select bank0
  8078  0571  11BF               	bcf	_myMain,3
  8079                           
  8080                           ;MCU_B1.c: 1076: myMain.First = 0;
  8081  0572  12BF               	bcf	_myMain,5
  8082  0573                     l632:	
  8083                           
  8084                           ;MCU_B1.c: 1078: }
  8085                           ;MCU_B1.c: 1079: GIE = 0;
  8086  0573  138B               	bcf	11,7	;volatile
  8087                           
  8088                           ;MCU_B1.c: 1080: Flash_Memory_Erasing();
  8089  0574  318E  2695  3185   	fcall	_Flash_Memory_Erasing
  8090                           
  8091                           ;MCU_B1.c: 1081: Flash_Memory_Write();
  8092  0577  3187  27A3         	fcall	_Flash_Memory_Write
  8093                           
  8094                           ;MCU_B1.c: 1082: GIE = 1;
  8095  0579  178B               	bsf	11,7	;volatile
  8096  057A  0008               	return
  8097  057B                     __end_of_Flash_Memory_Modify:	
  8098                           
  8099                           	psect	text53
  8100  0E95                     __ptext53:	
  8101 ;; *************** function _Flash_Memory_Erasing *****************
  8102 ;; Defined at:
  8103 ;;		line 1044 in file "../src/MCU_B1.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;		None
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;		None
  8108 ;; Return value:  Size  Location     Type
  8109 ;;		None               void
  8110 ;; Registers used:
  8111 ;;		wreg, status,2, status,0, pclath, cstack
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8117 ;;      Params:         0       0       0       0       0       0       0       0
  8118 ;;      Locals:         0       0       0       0       0       0       0       0
  8119 ;;      Temps:          0       0       0       0       0       0       0       0
  8120 ;;      Totals:         0       0       0       0       0       0       0       0
  8121 ;;Total ram usage:        0 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; Hardware stack levels required when called:    3
  8124 ;; This function calls:
  8125 ;;		_Flash_Memory_Unlock
  8126 ;; This function is called by:
  8127 ;;		_Flash_Memory_Modify
  8128 ;; This function uses a non-reentrant model
  8129 ;;
  8130                           
  8131                           
  8132                           ;psect for function _Flash_Memory_Erasing
  8133  0E95                     _Flash_Memory_Erasing:	
  8134                           
  8135                           ;MCU_B1.c: 1045: CFGS = 0;
  8136                           
  8137                           ;incstack = 0
  8138                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
  8139  0E95  0023               	movlb	3	; select bank3
  8140  0E96  1315               	bcf	21,6	;volatile
  8141                           
  8142                           ;MCU_B1.c: 1046: PMADRH = 0x30;
  8143  0E97  3030               	movlw	48
  8144  0E98  0092               	movwf	18	;volatile
  8145                           
  8146                           ;MCU_B1.c: 1047: PMADRL = 0x00;
  8147  0E99  0191               	clrf	17	;volatile
  8148                           
  8149                           ;MCU_B1.c: 1048: FREE = 1;
  8150  0E9A  1615               	bsf	21,4	;volatile
  8151                           
  8152                           ;MCU_B1.c: 1049: WREN = 1;
  8153  0E9B  1515               	bsf	21,2	;volatile
  8154                           
  8155                           ;MCU_B1.c: 1050: Flash_Memory_Unlock();
  8156  0E9C  318E  2659         	fcall	_Flash_Memory_Unlock
  8157                           
  8158                           ;MCU_B1.c: 1051: WREN = 0;
  8159  0E9E  0023               	movlb	3	; select bank3
  8160  0E9F  1115               	bcf	21,2	;volatile
  8161  0EA0  0008               	return
  8162  0EA1                     __end_of_Flash_Memory_Erasing:	
  8163                           
  8164                           	psect	text54
  8165  0272                     __ptext54:	
  8166 ;; *************** function _Flash_Memory_Initialization *****************
  8167 ;; Defined at:
  8168 ;;		line 932 in file "../src/MCU_B1.c"
  8169 ;; Parameters:    Size  Location     Type
  8170 ;;		None
  8171 ;; Auto vars:     Size  Location     Type
  8172 ;;  value           1    6[COMMON] unsigned char 
  8173 ;; Return value:  Size  Location     Type
  8174 ;;		None               void
  8175 ;; Registers used:
  8176 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8177 ;; Tracked objects:
  8178 ;;		On entry : 0/0
  8179 ;;		On exit  : 0/0
  8180 ;;		Unchanged: 0/0
  8181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8182 ;;      Params:         0       0       0       0       0       0       0       0
  8183 ;;      Locals:         1       0       0       0       0       0       0       0
  8184 ;;      Temps:          1       0       0       0       0       0       0       0
  8185 ;;      Totals:         2       0       0       0       0       0       0       0
  8186 ;;Total ram usage:        2 bytes
  8187 ;; Hardware stack levels used:    1
  8188 ;; Hardware stack levels required when called:    4
  8189 ;; This function calls:
  8190 ;;		_Flash_Memory_Read
  8191 ;;		_Flash_Memory_Write
  8192 ;;		_setMemory_Data
  8193 ;; This function is called by:
  8194 ;;		_main
  8195 ;; This function uses a non-reentrant model
  8196 ;;
  8197                           
  8198                           
  8199                           ;psect for function _Flash_Memory_Initialization
  8200  0272                     _Flash_Memory_Initialization:	
  8201                           
  8202                           ;MCU_B1.c: 933: char value = 0;
  8203                           
  8204                           ;incstack = 0
  8205                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8206  0272  01F6               	clrf	Flash_Memory_Initialization@value
  8207                           
  8208                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
  8209  0273  301F               	movlw	31
  8210  0274  318E  26FE  3182   	fcall	_Flash_Memory_Read
  8211  0277  3AAA               	xorlw	170
  8212  0278  1D03               	skipz
  8213  0279  2ACC               	goto	l3665
  8214                           
  8215                           ;MCU_B1.c: 935: product->Data[11] = Flash_Memory_Read(6);
  8216  027A  3006               	movlw	6
  8217  027B  318E  26FE  3182   	fcall	_Flash_Memory_Read
  8218  027E  00F5               	movwf	??_Flash_Memory_Initialization
  8219  027F  0020               	movlb	0	; select bank0
  8220  0280  0862               	movf	_product,w
  8221  0281  3E0B               	addlw	11
  8222  0282  0086               	movwf	6
  8223  0283  3001               	movlw	1	; select bank2/3
  8224  0284  0087               	movwf	7
  8225  0285  0875               	movf	??_Flash_Memory_Initialization,w
  8226  0286  0081               	movwf	1
  8227                           
  8228                           ;MCU_B1.c: 936: product->Data[12] = Flash_Memory_Read(0);
  8229  0287  3000               	movlw	0
  8230  0288  318E  26FE  3182   	fcall	_Flash_Memory_Read
  8231  028B  00F5               	movwf	??_Flash_Memory_Initialization
  8232  028C  0020               	movlb	0	; select bank0
  8233  028D  0862               	movf	_product,w
  8234  028E  3E0C               	addlw	12
  8235  028F  0086               	movwf	6
  8236  0290  3001               	movlw	1	; select bank2/3
  8237  0291  0087               	movwf	7
  8238  0292  0875               	movf	??_Flash_Memory_Initialization,w
  8239  0293  0081               	movwf	1
  8240                           
  8241                           ;MCU_B1.c: 937: product->Data[13] = Flash_Memory_Read(1);
  8242  0294  3001               	movlw	1
  8243  0295  318E  26FE  3182   	fcall	_Flash_Memory_Read
  8244  0298  00F5               	movwf	??_Flash_Memory_Initialization
  8245  0299  0020               	movlb	0	; select bank0
  8246  029A  0862               	movf	_product,w
  8247  029B  3E0D               	addlw	13
  8248  029C  0086               	movwf	6
  8249  029D  3001               	movlw	1	; select bank2/3
  8250  029E  0087               	movwf	7
  8251  029F  0875               	movf	??_Flash_Memory_Initialization,w
  8252  02A0  0081               	movwf	1
  8253                           
  8254                           ;MCU_B1.c: 938: product->Data[14] = Flash_Memory_Read(2);
  8255  02A1  3002               	movlw	2
  8256  02A2  318E  26FE  3182   	fcall	_Flash_Memory_Read
  8257  02A5  00F5               	movwf	??_Flash_Memory_Initialization
  8258  02A6  0020               	movlb	0	; select bank0
  8259  02A7  0862               	movf	_product,w
  8260  02A8  3E0E               	addlw	14
  8261  02A9  0086               	movwf	6
  8262  02AA  3001               	movlw	1	; select bank2/3
  8263  02AB  0087               	movwf	7
  8264  02AC  0875               	movf	??_Flash_Memory_Initialization,w
  8265  02AD  0081               	movwf	1
  8266                           
  8267                           ;MCU_B1.c: 950: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
  8268  02AE  0862               	movf	_product,w
  8269  02AF  3E0C               	addlw	12
  8270  02B0  0086               	movwf	6
  8271  02B1  3001               	movlw	1	; select bank2/3
  8272  02B2  0087               	movwf	7
  8273  02B3  0801               	movf	1,w
  8274  02B4  3AFF               	xorlw	255
  8275  02B5  1D03               	skipz
  8276  02B6  0008               	return
  8277  02B7  0862               	movf	_product,w
  8278  02B8  3E0D               	addlw	13
  8279  02B9  0086               	movwf	6
  8280  02BA  3001               	movlw	1	; select bank2/3
  8281  02BB  0087               	movwf	7
  8282  02BC  0801               	movf	1,w
  8283  02BD  3AFF               	xorlw	255
  8284  02BE  1D03               	skipz
  8285  02BF  0008               	return
  8286  02C0  0862               	movf	_product,w
  8287  02C1  3E0E               	addlw	14
  8288  02C2  0086               	movwf	6
  8289  02C3  3001               	movlw	1	; select bank2/3
  8290  02C4  0087               	movwf	7
  8291  02C5  0801               	movf	1,w
  8292  02C6  3AFF               	xorlw	255
  8293  02C7  1D03               	skipz
  8294  02C8  0008               	return
  8295                           
  8296                           ;MCU_B1.c: 951: myMain.FirstOpen = 1;
  8297  02C9  15BF               	bsf	_myMain,3
  8298                           
  8299                           ;MCU_B1.c: 952: myMain.First = 1;
  8300  02CA  16BF               	bsf	_myMain,5
  8301                           
  8302                           ;MCU_B1.c: 953: }
  8303                           ;MCU_B1.c: 954: } else {
  8304  02CB  0008               	return
  8305  02CC                     l3665:	
  8306                           
  8307                           ;MCU_B1.c: 956: setMemory_Data(0, 0xff);
  8308  02CC  30FF               	movlw	255
  8309  02CD  00F5               	movwf	??_Flash_Memory_Initialization
  8310  02CE  0875               	movf	??_Flash_Memory_Initialization,w
  8311  02CF  00F1               	movwf	setMemory_Data@data
  8312  02D0  3000               	movlw	0
  8313  02D1  318E  266B  3182   	fcall	_setMemory_Data
  8314                           
  8315                           ;MCU_B1.c: 957: setMemory_Data(1, 0xff);
  8316  02D4  30FF               	movlw	255
  8317  02D5  00F5               	movwf	??_Flash_Memory_Initialization
  8318  02D6  0875               	movf	??_Flash_Memory_Initialization,w
  8319  02D7  00F1               	movwf	setMemory_Data@data
  8320  02D8  3001               	movlw	1
  8321  02D9  318E  266B  3182   	fcall	_setMemory_Data
  8322                           
  8323                           ;MCU_B1.c: 958: setMemory_Data(2, 0xff);
  8324  02DC  30FF               	movlw	255
  8325  02DD  00F5               	movwf	??_Flash_Memory_Initialization
  8326  02DE  0875               	movf	??_Flash_Memory_Initialization,w
  8327  02DF  00F1               	movwf	setMemory_Data@data
  8328  02E0  3002               	movlw	2
  8329  02E1  318E  266B  3182   	fcall	_setMemory_Data
  8330                           
  8331                           ;MCU_B1.c: 959: setMemory_Data(3, 0xff);
  8332  02E4  30FF               	movlw	255
  8333  02E5  00F5               	movwf	??_Flash_Memory_Initialization
  8334  02E6  0875               	movf	??_Flash_Memory_Initialization,w
  8335  02E7  00F1               	movwf	setMemory_Data@data
  8336  02E8  3003               	movlw	3
  8337  02E9  318E  266B  3182   	fcall	_setMemory_Data
  8338                           
  8339                           ;MCU_B1.c: 960: setMemory_Data(4, 0xff);
  8340  02EC  30FF               	movlw	255
  8341  02ED  00F5               	movwf	??_Flash_Memory_Initialization
  8342  02EE  0875               	movf	??_Flash_Memory_Initialization,w
  8343  02EF  00F1               	movwf	setMemory_Data@data
  8344  02F0  3004               	movlw	4
  8345  02F1  318E  266B  3182   	fcall	_setMemory_Data
  8346                           
  8347                           ;MCU_B1.c: 961: setMemory_Data(5, 0xff);
  8348  02F4  30FF               	movlw	255
  8349  02F5  00F5               	movwf	??_Flash_Memory_Initialization
  8350  02F6  0875               	movf	??_Flash_Memory_Initialization,w
  8351  02F7  00F1               	movwf	setMemory_Data@data
  8352  02F8  3005               	movlw	5
  8353  02F9  318E  266B  3182   	fcall	_setMemory_Data
  8354                           
  8355                           ;MCU_B1.c: 962: setMemory_Data(6, 0xff);
  8356  02FC  30FF               	movlw	255
  8357  02FD  00F5               	movwf	??_Flash_Memory_Initialization
  8358  02FE  0875               	movf	??_Flash_Memory_Initialization,w
  8359  02FF  00F1               	movwf	setMemory_Data@data
  8360  0300  3006               	movlw	6
  8361  0301  318E  266B  3182   	fcall	_setMemory_Data
  8362                           
  8363                           ;MCU_B1.c: 963: setMemory_Data(31, 0xaa);
  8364  0304  30AA               	movlw	170
  8365  0305  00F5               	movwf	??_Flash_Memory_Initialization
  8366  0306  0875               	movf	??_Flash_Memory_Initialization,w
  8367  0307  00F1               	movwf	setMemory_Data@data
  8368  0308  301F               	movlw	31
  8369  0309  318E  266B  3182   	fcall	_setMemory_Data
  8370                           
  8371                           ;MCU_B1.c: 968: GIE = 0;
  8372  030C  138B               	bcf	11,7	;volatile
  8373                           
  8374                           ;MCU_B1.c: 969: Flash_Memory_Write();
  8375  030D  3187  27A3         	fcall	_Flash_Memory_Write
  8376                           
  8377                           ;MCU_B1.c: 970: GIE = 1;
  8378  030F  178B               	bsf	11,7	;volatile
  8379                           
  8380                           ;MCU_B1.c: 971: myMain.FirstOpen = 1;
  8381  0310  0020               	movlb	0	; select bank0
  8382  0311  15BF               	bsf	_myMain,3
  8383                           
  8384                           ;MCU_B1.c: 972: myMain.First = 1;
  8385  0312  16BF               	bsf	_myMain,5
  8386                           
  8387                           ;MCU_B1.c: 973: myMain.InitDimmer = 1;
  8388  0313  1649               	bsf	_myMain+10,4
  8389  0314  0008               	return
  8390  0315                     __end_of_Flash_Memory_Initialization:	
  8391                           
  8392                           	psect	text55
  8393  0E6B                     __ptext55:	
  8394 ;; *************** function _setMemory_Data *****************
  8395 ;; Defined at:
  8396 ;;		line 1097 in file "../src/MCU_B1.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;  address         1    wreg     unsigned char 
  8399 ;;  data            1    1[COMMON] unsigned char 
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;  address         1    3[COMMON] unsigned char 
  8402 ;; Return value:  Size  Location     Type
  8403 ;;		None               void
  8404 ;; Registers used:
  8405 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8411 ;;      Params:         1       0       0       0       0       0       0       0
  8412 ;;      Locals:         1       0       0       0       0       0       0       0
  8413 ;;      Temps:          1       0       0       0       0       0       0       0
  8414 ;;      Totals:         3       0       0       0       0       0       0       0
  8415 ;;Total ram usage:        3 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    2
  8418 ;; This function calls:
  8419 ;;		Nothing
  8420 ;; This function is called by:
  8421 ;;		_Flash_Memory_Initialization
  8422 ;;		_Flash_Memory_Modify
  8423 ;; This function uses a non-reentrant model
  8424 ;;
  8425                           
  8426                           
  8427                           ;psect for function _setMemory_Data
  8428  0E6B                     _setMemory_Data:	
  8429                           
  8430                           ;incstack = 0
  8431                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
  8432                           ;setMemory_Data@address stored from wreg
  8433  0E6B  00F3               	movwf	setMemory_Data@address
  8434                           
  8435                           ;MCU_B1.c: 1098: Memory.Data[address] = data;
  8436  0E6C  0871               	movf	setMemory_Data@data,w
  8437  0E6D  00F2               	movwf	??_setMemory_Data
  8438  0E6E  0873               	movf	setMemory_Data@address,w
  8439  0E6F  3EBE               	addlw	_Memory& (0+255)
  8440  0E70  0086               	movwf	6
  8441  0E71  0187               	clrf	7
  8442  0E72  0872               	movf	??_setMemory_Data,w
  8443  0E73  0081               	movwf	1
  8444  0E74  0008               	return
  8445  0E75                     __end_of_setMemory_Data:	
  8446                           
  8447                           	psect	text56
  8448  07A3                     __ptext56:	
  8449 ;; *************** function _Flash_Memory_Write *****************
  8450 ;; Defined at:
  8451 ;;		line 1025 in file "../src/MCU_B1.c"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;		None
  8454 ;; Auto vars:     Size  Location     Type
  8455 ;;  i               1    2[COMMON] unsigned char 
  8456 ;; Return value:  Size  Location     Type
  8457 ;;		None               void
  8458 ;; Registers used:
  8459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8460 ;; Tracked objects:
  8461 ;;		On entry : 0/0
  8462 ;;		On exit  : 0/0
  8463 ;;		Unchanged: 0/0
  8464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8465 ;;      Params:         0       0       0       0       0       0       0       0
  8466 ;;      Locals:         1       0       0       0       0       0       0       0
  8467 ;;      Temps:          1       0       0       0       0       0       0       0
  8468 ;;      Totals:         2       0       0       0       0       0       0       0
  8469 ;;Total ram usage:        2 bytes
  8470 ;; Hardware stack levels used:    1
  8471 ;; Hardware stack levels required when called:    3
  8472 ;; This function calls:
  8473 ;;		_Flash_Memory_Unlock
  8474 ;; This function is called by:
  8475 ;;		_Flash_Memory_Initialization
  8476 ;;		_Flash_Memory_Modify
  8477 ;; This function uses a non-reentrant model
  8478 ;;
  8479                           
  8480                           
  8481                           ;psect for function _Flash_Memory_Write
  8482  07A3                     _Flash_Memory_Write:	
  8483                           
  8484                           ;MCU_B1.c: 1026: char i = 0;
  8485                           
  8486                           ;incstack = 0
  8487                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8488  07A3  01F2               	clrf	Flash_Memory_Write@i
  8489                           
  8490                           ;MCU_B1.c: 1027: CFGS = 0;
  8491  07A4  0023               	movlb	3	; select bank3
  8492  07A5  1315               	bcf	21,6	;volatile
  8493                           
  8494                           ;MCU_B1.c: 1028: PMADRH = 0x30;
  8495  07A6  3030               	movlw	48
  8496  07A7  0092               	movwf	18	;volatile
  8497                           
  8498                           ;MCU_B1.c: 1029: PMDATH = 0;
  8499  07A8  0194               	clrf	20	;volatile
  8500                           
  8501                           ;MCU_B1.c: 1030: FREE = 0;
  8502  07A9  1215               	bcf	21,4	;volatile
  8503                           
  8504                           ;MCU_B1.c: 1031: LWLO = 1;
  8505  07AA  1695               	bsf	21,5	;volatile
  8506                           
  8507                           ;MCU_B1.c: 1032: WREN = 1;
  8508  07AB  1515               	bsf	21,2	;volatile
  8509                           
  8510                           ;MCU_B1.c: 1033: for (i = 0; i < 32; i++) {
  8511  07AC  01F2               	clrf	Flash_Memory_Write@i
  8512  07AD  3020               	movlw	32
  8513  07AE  0272               	subwf	Flash_Memory_Write@i,w
  8514  07AF  1803               	btfsc	3,0
  8515  07B0  2FC5               	goto	l623
  8516  07B1                     l3345:	
  8517                           
  8518                           ;MCU_B1.c: 1034: PMADRL = i;
  8519  07B1  0872               	movf	Flash_Memory_Write@i,w
  8520  07B2  0023               	movlb	3	; select bank3
  8521  07B3  0091               	movwf	17	;volatile
  8522                           
  8523                           ;MCU_B1.c: 1035: PMDATL = Memory.Data[i];
  8524  07B4  0872               	movf	Flash_Memory_Write@i,w
  8525  07B5  3EBE               	addlw	_Memory& (0+255)
  8526  07B6  0086               	movwf	6
  8527  07B7  0187               	clrf	7
  8528  07B8  0801               	movf	1,w
  8529  07B9  0093               	movwf	19	;volatile
  8530                           
  8531                           ;MCU_B1.c: 1036: Flash_Memory_Unlock();
  8532  07BA  318E  2659  3187   	fcall	_Flash_Memory_Unlock
  8533  07BD  3001               	movlw	1
  8534  07BE  00F1               	movwf	??_Flash_Memory_Write
  8535  07BF  0871               	movf	??_Flash_Memory_Write,w
  8536  07C0  07F2               	addwf	Flash_Memory_Write@i,f
  8537  07C1  3020               	movlw	32
  8538  07C2  0272               	subwf	Flash_Memory_Write@i,w
  8539  07C3  1C03               	skipc
  8540  07C4  2FB1               	goto	l3345
  8541  07C5                     l623:	
  8542                           
  8543                           ;MCU_B1.c: 1037: }
  8544                           ;MCU_B1.c: 1038: LWLO = 0;
  8545  07C5  0023               	movlb	3	; select bank3
  8546  07C6  1295               	bcf	21,5	;volatile
  8547                           
  8548                           ;MCU_B1.c: 1039: Flash_Memory_Unlock();
  8549  07C7  318E  2659         	fcall	_Flash_Memory_Unlock
  8550                           
  8551                           ;MCU_B1.c: 1040: WREN = 0;
  8552  07C9  0023               	movlb	3	; select bank3
  8553  07CA  1115               	bcf	21,2	;volatile
  8554  07CB  0008               	return
  8555  07CC                     __end_of_Flash_Memory_Write:	
  8556                           
  8557                           	psect	text57
  8558  0E59                     __ptext57:	
  8559 ;; *************** function _Flash_Memory_Unlock *****************
  8560 ;; Defined at:
  8561 ;;		line 1004 in file "../src/MCU_B1.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;		None
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;		None
  8566 ;; Return value:  Size  Location     Type
  8567 ;;		None               void
  8568 ;; Registers used:
  8569 ;;		wreg
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8575 ;;      Params:         0       0       0       0       0       0       0       0
  8576 ;;      Locals:         0       0       0       0       0       0       0       0
  8577 ;;      Temps:          0       0       0       0       0       0       0       0
  8578 ;;      Totals:         0       0       0       0       0       0       0       0
  8579 ;;Total ram usage:        0 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; Hardware stack levels required when called:    2
  8582 ;; This function calls:
  8583 ;;		Nothing
  8584 ;; This function is called by:
  8585 ;;		_Flash_Memory_Write
  8586 ;;		_Flash_Memory_Erasing
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           
  8591                           ;psect for function _Flash_Memory_Unlock
  8592  0E59                     _Flash_Memory_Unlock:	
  8593                           
  8594                           ;MCU_B1.c: 1005: PMCON2 = 0x55;
  8595                           
  8596                           ;incstack = 0
  8597                           ; Regs used in _Flash_Memory_Unlock: [wreg]
  8598  0E59  3055               	movlw	85
  8599  0E5A  0023               	movlb	3	; select bank3
  8600  0E5B  0096               	movwf	22	;volatile
  8601                           
  8602                           ;MCU_B1.c: 1006: PMCON2 = 0xaa;
  8603  0E5C  30AA               	movlw	170
  8604  0E5D  0096               	movwf	22	;volatile
  8605                           
  8606                           ;MCU_B1.c: 1007: WR = 1;
  8607  0E5E  1495               	bsf	21,1	;volatile
  8608                           
  8609                           ;MCU_B1.c: 1008: __nop();
  8610  0E5F  0000               	nop
  8611                           
  8612                           ;MCU_B1.c: 1009: __nop();
  8613  0E60  0000               	nop
  8614  0E61  0008               	return
  8615  0E62                     __end_of_Flash_Memory_Unlock:	
  8616                           
  8617                           	psect	text58
  8618  0EFE                     __ptext58:	
  8619 ;; *************** function _Flash_Memory_Read *****************
  8620 ;; Defined at:
  8621 ;;		line 1013 in file "../src/MCU_B1.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;  address         1    wreg     unsigned char 
  8624 ;; Auto vars:     Size  Location     Type
  8625 ;;  address         1    3[COMMON] unsigned char 
  8626 ;;  ret             1    4[COMMON] unsigned char 
  8627 ;;  i               1    2[COMMON] unsigned char 
  8628 ;; Return value:  Size  Location     Type
  8629 ;;                  1    wreg      unsigned char 
  8630 ;; Registers used:
  8631 ;;		wreg, status,2
  8632 ;; Tracked objects:
  8633 ;;		On entry : 0/0
  8634 ;;		On exit  : 0/0
  8635 ;;		Unchanged: 0/0
  8636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8637 ;;      Params:         0       0       0       0       0       0       0       0
  8638 ;;      Locals:         3       0       0       0       0       0       0       0
  8639 ;;      Temps:          1       0       0       0       0       0       0       0
  8640 ;;      Totals:         4       0       0       0       0       0       0       0
  8641 ;;Total ram usage:        4 bytes
  8642 ;; Hardware stack levels used:    1
  8643 ;; Hardware stack levels required when called:    2
  8644 ;; This function calls:
  8645 ;;		Nothing
  8646 ;; This function is called by:
  8647 ;;		_Flash_Memory_Initialization
  8648 ;;		_Flash_Memory_Modify
  8649 ;; This function uses a non-reentrant model
  8650 ;;
  8651                           
  8652                           
  8653                           ;psect for function _Flash_Memory_Read
  8654  0EFE                     _Flash_Memory_Read:	
  8655                           
  8656                           ;incstack = 0
  8657                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
  8658                           ;Flash_Memory_Read@address stored from wreg
  8659  0EFE  00F3               	movwf	Flash_Memory_Read@address
  8660                           
  8661                           ;MCU_B1.c: 1014: char i = 0, ret = 0;
  8662  0EFF  01F2               	clrf	Flash_Memory_Read@i
  8663  0F00  01F4               	clrf	Flash_Memory_Read@ret
  8664                           
  8665                           ;MCU_B1.c: 1015: PMADRH = 0x30;
  8666  0F01  3030               	movlw	48
  8667  0F02  0023               	movlb	3	; select bank3
  8668  0F03  0092               	movwf	18	;volatile
  8669                           
  8670                           ;MCU_B1.c: 1016: PMADRL = address;
  8671  0F04  0873               	movf	Flash_Memory_Read@address,w
  8672  0F05  0091               	movwf	17	;volatile
  8673                           
  8674                           ;MCU_B1.c: 1017: CFGS = 0;
  8675  0F06  1315               	bcf	21,6	;volatile
  8676                           
  8677                           ;MCU_B1.c: 1018: RD = 1;
  8678  0F07  1415               	bsf	21,0	;volatile
  8679                           
  8680                           ;MCU_B1.c: 1019: i = PMDATH;
  8681  0F08  0814               	movf	20,w	;volatile
  8682  0F09  00F1               	movwf	??_Flash_Memory_Read
  8683  0F0A  0871               	movf	??_Flash_Memory_Read,w
  8684  0F0B  00F2               	movwf	Flash_Memory_Read@i
  8685                           
  8686                           ;MCU_B1.c: 1020: ret = PMDATL;
  8687  0F0C  0813               	movf	19,w	;volatile
  8688  0F0D  00F1               	movwf	??_Flash_Memory_Read
  8689  0F0E  0871               	movf	??_Flash_Memory_Read,w
  8690  0F0F  00F4               	movwf	Flash_Memory_Read@ret
  8691                           
  8692                           ;MCU_B1.c: 1021: return ret;
  8693  0F10  0874               	movf	Flash_Memory_Read@ret,w
  8694  0F11  0008               	return
  8695  0F12                     __end_of_Flash_Memory_Read:	
  8696                           
  8697                           	psect	text59
  8698  0F65                     __ptext59:	
  8699 ;; *************** function _Exception_Main *****************
  8700 ;; Defined at:
  8701 ;;		line 499 in file "../src/Main_B1.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;		None
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;  error           1    6[COMMON] unsigned char 
  8706 ;;  status          1    5[COMMON] unsigned char 
  8707 ;;  count           1    4[COMMON] unsigned char 
  8708 ;;  lights          1    3[COMMON] unsigned char 
  8709 ;; Return value:  Size  Location     Type
  8710 ;;		None               void
  8711 ;; Registers used:
  8712 ;;		wreg, status,2, status,0, pclath, cstack
  8713 ;; Tracked objects:
  8714 ;;		On entry : 0/0
  8715 ;;		On exit  : 0/0
  8716 ;;		Unchanged: 0/0
  8717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8718 ;;      Params:         0       0       0       0       0       0       0       0
  8719 ;;      Locals:         4       0       0       0       0       0       0       0
  8720 ;;      Temps:          1       0       0       0       0       0       0       0
  8721 ;;      Totals:         5       0       0       0       0       0       0       0
  8722 ;;Total ram usage:        5 bytes
  8723 ;; Hardware stack levels used:    1
  8724 ;; Hardware stack levels required when called:    3
  8725 ;; This function calls:
  8726 ;;		_getMain_All_Error_Status
  8727 ;; This function is called by:
  8728 ;;		_main
  8729 ;; This function uses a non-reentrant model
  8730 ;;
  8731                           
  8732                           
  8733                           ;psect for function _Exception_Main
  8734  0F65                     _Exception_Main:	
  8735                           
  8736                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8737                           
  8738                           ;incstack = 0
  8739                           ; Regs used in _Exception_Main: [wreg+status,2+status,0+pclath+cstack]
  8740  0F65  3000               	movlw	0
  8741  0F66  318E  261E  318F   	fcall	_getMain_All_Error_Status
  8742  0F69  00F2               	movwf	??_Exception_Main
  8743  0F6A  0872               	movf	??_Exception_Main,w
  8744  0F6B  00F6               	movwf	Exception_Main@error
  8745                           
  8746                           ;Main_B1.c: 501: char lights = 0, count = 0;
  8747  0F6C  01F3               	clrf	Exception_Main@lights
  8748  0F6D  01F4               	clrf	Exception_Main@count
  8749                           
  8750                           ;Main_B1.c: 502: char status = 0;
  8751  0F6E  01F5               	clrf	Exception_Main@status
  8752                           
  8753                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8754  0F6F  0020               	movlb	0	; select bank0
  8755  0F70  1DC9               	btfss	_myMain+10,3
  8756  0F71  2F77               	goto	l3779
  8757                           
  8758                           ;Main_B1.c: 505: if (error == 0) {
  8759  0F72  08F6               	movf	Exception_Main@error,f
  8760  0F73  1D03               	skipz
  8761  0F74  0008               	return
  8762                           
  8763                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8764  0F75  11C9               	bcf	_myMain+10,3
  8765                           
  8766                           ;Main_B1.c: 522: }
  8767                           ;Main_B1.c: 523: } else {
  8768                           
  8769                           ;Main_B1.c: 511: ;;
  8770  0F76  0008               	return
  8771  0F77                     l3779:	
  8772                           
  8773                           ;Main_B1.c: 524: if (error != 0) {
  8774  0F77  0876               	movf	Exception_Main@error,w
  8775  0F78  1903               	btfsc	3,2
  8776  0F79  0008               	return
  8777                           
  8778                           ;Main_B1.c: 525: myMain.Error_Run = 1;
  8779  0F7A  15C9               	bsf	_myMain+10,3
  8780                           
  8781                           ;Main_B1.c: 529: ;;
  8782  0F7B  0008               	return
  8783  0F7C                     __end_of_Exception_Main:	
  8784                           
  8785                           	psect	text60
  8786  0E1E                     __ptext60:	
  8787 ;; *************** function _getMain_All_Error_Status *****************
  8788 ;; Defined at:
  8789 ;;		line 424 in file "../src/Main_B1.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;  command         1    wreg     unsigned char 
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;  command         1    0[COMMON] unsigned char 
  8794 ;;  status          1    1[COMMON] unsigned char 
  8795 ;; Return value:  Size  Location     Type
  8796 ;;                  1    wreg      unsigned char 
  8797 ;; Registers used:
  8798 ;;		wreg, status,2
  8799 ;; Tracked objects:
  8800 ;;		On entry : 0/0
  8801 ;;		On exit  : 0/0
  8802 ;;		Unchanged: 0/0
  8803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8804 ;;      Params:         0       0       0       0       0       0       0       0
  8805 ;;      Locals:         1       0       0       0       0       0       0       0
  8806 ;;      Temps:          0       0       0       0       0       0       0       0
  8807 ;;      Totals:         1       0       0       0       0       0       0       0
  8808 ;;Total ram usage:        1 bytes
  8809 ;; Hardware stack levels used:    1
  8810 ;; Hardware stack levels required when called:    2
  8811 ;; This function calls:
  8812 ;;		Nothing
  8813 ;; This function is called by:
  8814 ;;		_Exception_Main
  8815 ;;		_getRxData
  8816 ;; This function uses a non-reentrant model
  8817 ;;
  8818                           
  8819                           
  8820                           ;psect for function _getMain_All_Error_Status
  8821  0E1E                     _getMain_All_Error_Status:	
  8822                           
  8823                           ;Main_B1.c: 425: char status = 0;
  8824                           
  8825                           ;incstack = 0
  8826                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2]
  8827  0E1E  01F1               	clrf	getMain_All_Error_Status@status
  8828                           
  8829                           ;Main_B1.c: 455: return status;
  8830  0E1F  0871               	movf	getMain_All_Error_Status@status,w
  8831  0E20  0008               	return
  8832  0E21                     __end_of_getMain_All_Error_Status:	
  8833                           
  8834                           	psect	intentry
  8835  0004                     __pintentry:	
  8836 ;; *************** function _ISR *****************
  8837 ;; Defined at:
  8838 ;;		line 116 in file "../src/MCU_B1.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;		None
  8841 ;; Auto vars:     Size  Location     Type
  8842 ;;		None
  8843 ;; Return value:  Size  Location     Type
  8844 ;;		None               void
  8845 ;; Registers used:
  8846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8847 ;; Tracked objects:
  8848 ;;		On entry : 0/0
  8849 ;;		On exit  : 0/0
  8850 ;;		Unchanged: 0/0
  8851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8852 ;;      Params:         0       0       0       0       0       0       0       0
  8853 ;;      Locals:         0       0       0       0       0       0       0       0
  8854 ;;      Temps:          1       0       0       0       0       0       0       0
  8855 ;;      Totals:         1       0       0       0       0       0       0       0
  8856 ;;Total ram usage:        1 bytes
  8857 ;; Hardware stack levels used:    1
  8858 ;; Hardware stack levels required when called:    1
  8859 ;; This function calls:
  8860 ;;		_TMR1_ISR
  8861 ;; This function is called by:
  8862 ;;		Interrupt level 1
  8863 ;; This function uses a non-reentrant model
  8864 ;;
  8865                           
  8866  0004                     _ISR:	
  8867                           
  8868                           ;incstack = 0
  8869                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8870  0004  147E               	bsf	126,0	;set compiler interrupt flag
  8871  0005  3180               	pagesel	$
  8872  0006  0020               	movlb	0	; select bank0
  8873  0007  087F               	movf	127,w
  8874  0008  00F0               	movwf	??_ISR
  8875                           
  8876                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
  8877  0009  0021               	movlb	1	; select bank1
  8878  000A  1C11               	btfss	17,0	;volatile
  8879  000B  2811               	goto	i1l590
  8880  000C  0020               	movlb	0	; select bank0
  8881  000D  1C11               	btfss	17,0	;volatile
  8882  000E  2811               	goto	i1l590
  8883                           
  8884                           ;MCU_B1.c: 126: TMR1_ISR();
  8885  000F  3183  23E5         	fcall	_TMR1_ISR
  8886  0011                     i1l590:	
  8887                           ;MCU_B1.c: 127: }
  8888                           ;MCU_B1.c: 148: return;
  8889                           
  8890  0011  0870               	movf	??_ISR,w
  8891  0012  0020               	movlb	0	; select bank0
  8892  0013  00FF               	movwf	127
  8893  0014  107E               	bcf	126,0	;clear compiler interrupt flag
  8894  0015  0009               	retfie
  8895  0016                     __end_of_ISR:	
  8896                           
  8897                           	psect	text62
  8898  03E5                     __ptext62:	
  8899 ;; *************** function _TMR1_ISR *****************
  8900 ;; Defined at:
  8901 ;;		line 236 in file "../src/MCU_B1.c"
  8902 ;; Parameters:    Size  Location     Type
  8903 ;;		None
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;		None
  8906 ;; Return value:  Size  Location     Type
  8907 ;;		None               void
  8908 ;; Registers used:
  8909 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8910 ;; Tracked objects:
  8911 ;;		On entry : 0/0
  8912 ;;		On exit  : 0/0
  8913 ;;		Unchanged: 0/0
  8914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8915 ;;      Params:         0       0       0       0       0       0       0       0
  8916 ;;      Locals:         0       0       0       0       0       0       0       0
  8917 ;;      Temps:          0       0       0       0       0       0       0       0
  8918 ;;      Totals:         0       0       0       0       0       0       0       0
  8919 ;;Total ram usage:        0 bytes
  8920 ;; Hardware stack levels used:    1
  8921 ;; This function calls:
  8922 ;;		Nothing
  8923 ;; This function is called by:
  8924 ;;		_ISR
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           
  8929                           ;psect for function _TMR1_ISR
  8930  03E5                     _TMR1_ISR:	
  8931                           
  8932                           ;MCU_B1.c: 268: Timer1.Count++;
  8933                           
  8934                           ;incstack = 0
  8935                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8936  03E5  3001               	movlw	1
  8937  03E6  0020               	movlb	0	; select bank0
  8938  03E7  07CD               	addwf	_Timer1+1,f
  8939  03E8  3000               	movlw	0
  8940  03E9  3DCE               	addwfc	_Timer1+2,f
  8941                           
  8942                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
  8943  03EA  3001               	movlw	1
  8944  03EB  3E4C               	addlw	_Timer1& (0+255)
  8945  03EC  0086               	movwf	6
  8946  03ED  0187               	clrf	7
  8947  03EE  3F40               	moviw [0]fsr1
  8948  03EF  3AC8               	xorlw	200
  8949  03F0  1D03               	skipz
  8950  03F1  2BF4               	goto	u247_25
  8951  03F2  3F41               	moviw [1]fsr1
  8952  03F3  3A00               	xorlw	0
  8953  03F4                     u247_25:	
  8954  03F4  1D03               	skipz
  8955  03F5  2BF9               	goto	i1l3645
  8956                           
  8957                           ;MCU_B1.c: 270: Timer1.Count = 0;
  8958  03F6  01CD               	clrf	_Timer1+1
  8959  03F7  01CE               	clrf	_Timer1+2
  8960                           
  8961                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
  8962  03F8  144C               	bsf	_Timer1,0
  8963  03F9                     i1l3645:	
  8964                           
  8965                           ;MCU_B1.c: 272: }
  8966                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
  8967  03F9  30FA               	movlw	250
  8968  03FA  0097               	movwf	23	;volatile
  8969                           
  8970                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
  8971  03FB  3038               	movlw	56
  8972  03FC  0096               	movwf	22	;volatile
  8973                           
  8974                           ;MCU_B1.c: 276: TMR1IF = 0;
  8975  03FD  1011               	bcf	17,0	;volatile
  8976  03FE  0008               	return
  8977  03FF                     __end_of_TMR1_ISR:	
  8978  007E                     btemp	set	126	;btemp
  8979  007E                     pic14e$flags	set	126
  8980  007E                     wtemp	set	126
  8981  007E                     wtemp0	set	126
  8982  0080                     wtemp1	set	128
  8983  0082                     wtemp2	set	130
  8984  0084                     wtemp3	set	132
  8985  0086                     wtemp4	set	134
  8986  0088                     wtemp5	set	136
  8987  007F                     wtemp6	set	127
  8988  007E                     ttemp	set	126
  8989  007E                     ttemp0	set	126
  8990  0081                     ttemp1	set	129
  8991  0084                     ttemp2	set	132
  8992  0087                     ttemp3	set	135
  8993  007F                     ttemp4	set	127
  8994  007E                     ltemp	set	126
  8995  007E                     ltemp0	set	126
  8996  0082                     ltemp1	set	130
  8997  0086                     ltemp2	set	134
  8998  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         127
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80      6      67
    BANK1            80      0      67
    BANK2            80      0      32
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK2[32]), 


Critical Paths under _main in COMMON

    _uartC_LED->___awdiv
    _uartC_Button->_uartC_timer1
    _uartC_timer1->___awdiv
    _uartC_switch_control->_uartC_LED_start
    _RF_Main->_setRF_Main
    _getRxData->_setLog_Code
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setCmd_Status
    _setControl_Lights_Table->_setProductData
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_getMain_All_Error_Status

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_myUARTtoRF_Main
    _myUARTtoRF_Main->_uartC_Button

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    8856
                                              2 BANK0      4     0      4
              _CC2500_PowerOnInitial
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _myMain_Initialization
          _myUARTtoRF_Initialization
                    _myUARTtoRF_Main
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myUARTtoRF_Main                                      1     1      0    1242
                                              1 BANK0      1     1      0
                        _setRF_Learn
                       _uartC_Button
                          _uartC_LED
 ---------------------------------------------------------------------------------
 (2) _uartC_LED                                            0     0      0     512
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _uartC_Button                                         1     1      0     708
                                              0 BANK0      1     1      0
                       _uartC_timer1
                 _uartC_timer1_reset
 ---------------------------------------------------------------------------------
 (3) _uartC_timer1_reset                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _uartC_timer1                                         2     0      2     708
                                             10 COMMON     2     0      2
                            ___awdiv
               _uartC_switch_control
 ---------------------------------------------------------------------------------
 (4) _uartC_switch_control                                 0     0      0      68
                        _setRF_Learn
                          _setTxData
                    _uartC_LED_close
                    _uartC_LED_start
 ---------------------------------------------------------------------------------
 (5) _uartC_LED_start                                      3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRF_Learn                                          2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     512
                                              1 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _myUARTtoRF_Initialization                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0    4198
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           1     1      0    4198
                                             10 COMMON     1     1      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0    1556
                                              5 COMMON     2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                 _setMemory_LoopSave
                   _setMemory_Modify
                          _setTxData
                    _uartC_LED_close
 ---------------------------------------------------------------------------------
 (5) _uartC_LED_close                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0     671
                                              4 COMMON     1     1      0
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setMemory_Modify                                     2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setMemory_LoopSave                                   2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0     771
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setTxData                                            3     3      0      24
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _setProductData                                       3     2      1     627
                                              1 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1      97
                                              1 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     480
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              5 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              5 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              3 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    1545
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     350
                                              7 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     332
                                              6 COMMON     4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     287
                                              6 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     196
                                              3 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     372
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     304
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              3 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    2     2      0     980
                                              7 COMMON     2     2      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (5) _getMain_All_LightsStatus                             1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     910
                                              5 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0     820
                                              5 COMMON     2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     680
                                              1 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              1 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       5     5      0      71
                                              2 COMMON     5     5      0
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (4) _getMain_All_Error_Status                             2     2      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  1     1      0       0
                                              0 COMMON     1     1      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _Exception_Main
     _getMain_All_Error_Status
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _Mcu_Initialization
     _Fosc_Set
     _IO_Set
     _TMR1_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getMain_All_LightsStatus
           _setCmd_Status
           _setProductData
           _setTxData
         _setLog_Code
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
         _setMemory_LoopSave
         _setMemory_Modify
         _setTxData
         _uartC_LED_close
   _myMain_Initialization
   _myUARTtoRF_Initialization
   _myUARTtoRF_Main
     _setRF_Learn
     _uartC_Button
       _uartC_timer1
         ___awdiv
         _uartC_switch_control
           _setRF_Learn
           _setTxData
           _uartC_LED_close
           _uartC_LED_start
       _uartC_timer1_reset
     _uartC_LED
       ___awdiv
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      B3       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      6      43       6       83.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      43       8       83.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      20      10       40.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      B3      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Mar 23 16:40:57 2015

               ?_Flash_Memory_Erasing 0070                            __CFG_CP$ON 0000  
               __end_of_setCmd_Status 0F65                                    _RD 0CA8  
             __end_of_CC2500_WriteREG 1000                                    _WR 0CA9  
                        ___awdiv@sign 0077                                    _u1 0020  
                                 l214 0F1C                                   l215 0F1D  
                                 l146 04A2                                   l258 0341  
                                 l623 07C5                                   l632 0573  
                                 l609 06C0                                   l730 06F3  
                                 l714 078C                                   l767 0F64  
                                 _GIE 005F                                   _CRC 0051  
                                 _RA0 0060                                   _RA1 0061  
                                 _RB0 0068                                   _RA2 0062  
                                 _RC0 0070                                   _RC1 0071  
                                 _RC3 0073                                   _RC4 0074  
                                 _RC5 0075                                   _RF1 0030  
                                 _ISR 0004                                   _Cmd 0052  
            __end_of_CC2500_WriteByte 0F26                                   wreg 0009  
                                ?_ISR 0070                                  l1120 07F0  
                                l1105 01CA                                  l1130 0619  
                                l1109 0192                                  l1063 01D5  
                                l1064 0216                                  l1410 070A  
                                l3011 03CE                                  l1059 026E  
                                l1411 0701                                  l1420 037A  
                                l3013 03D1                                  l3041 0641  
                                l3017 03D6                                  l1089 0EB4  
                                l3051 0650                                  l3211 047D  
                                l1099 006E                                  l3123 05CF  
                                l1428 0745                                  l3045 0646  
                                l3205 0475                                  l3133 0610  
                                l3055 0655                                  l3039 063E  
                                l3231 04AB                                  l3207 0478  
                                l3127 05DB                                  l3049 064D  
                                l3225 048C                                  l3129 05F2  
                                l3401 0145                                  l3243 04BC  
                                l3235 04B0                                  l3163 0585  
                                l3261 04D9                                  l3237 04B4  
                                l3229 04A8                                  l3181 05A4  
                                l3149 0373                                  l3263 04DC  
                                l3239 04B7                                  l3423 019F  
                                l3191 05BF                                  l1399 0774  
                                l3345 07B1                                  l3513 053C  
                                l3169 0590                                  l3507 0529  
                                l3283 04F0                                  l3267 04E1  
                                l3419 0196                                  l3195 05C7  
                                l3187 05B6                                  l3179 0598  
                                l3285 0505                                  l2911 0F8D  
                                l3471 0681                                  l3463 0663  
                                l3551 0211                                  l3447 0749  
                                l3465 066F                                  l2923 0352  
                                l2931 0FE8                                  l3475 068A  
                                l3731 06D5                                  l2925 035D  
                                l2933 0FEB                                  l2909 0F89  
                                l3389 012D                                  l3565 0225  
                                l3665 02CC                                  l2937 0FF0  
                                l2961 0F52                                  l3593 0267  
                                l2891 0FBB                                  l3579 024F  
                                l2885 0FB3                                  l2965 0F5F  
                                l2887 0FB6                                  l3689 06A1  
                                l3779 0F77                                  l2989 0060  
                                l3885 0720                 _myMain_Initialization 0EBE  
                                _CFGS 0CAE                                  _FREE 0CAC  
                                u2205 067A                                  _LATA 010C  
                                _LATB 010D                                  u2215 0682  
                                u2135 073C                                  _LATC 010E  
                                u2315 01F1                                  u2175 0666  
                                u1385 0F35                                  u2345 023E  
                                u2195 0670                                  u1495 0347  
                                u1735 059B                                  u2615 06EB  
                                u1755 05A5                                  u2395 076A  
                                u2565 06B7                                  u1765 05AF  
                                u1775 05B7                                  u2815 039A  
                                _PEIE 005E                                  u2795 0719  
                                _LWLO 0CAD                                  _RSSI 0054  
                                _WREN 0CAA                                  _WPUB 020D  
                                _main 077A                       __end_of_RF_Main 0E2A  
                                fsr0h 0005                                  fsr1h 0007  
                                fsr0l 0004                                  indf0 0000  
                                indf1 0001                                  fsr1l 0006  
                                btemp 007E            ?_myUARTtoRF_Initialization 0070  
                                ltemp 007E         __size_of_setRF_Initialization 000A  
                                start 0016                                  ttemp 007E  
                                wtemp 007E                                 ??_ISR 0070  
                   ??_myUARTtoRF_Main 005D                                 ?_main 005E  
                     __end_of___awdiv 05CE                         __CFG_WDTE$OFF 0000  
                     ___awdiv@divisor 0071                                 _T1CON 0018  
                     __end_of___lwdiv 0691                                 i1l590 0011  
                     ___awdiv@counter 0076         __size_of_CC2500_FrequencyCabr 000B  
                               _TMR1H 0017                                 _TMR1L 0016  
                               _PORTA 000C                                 _PORTB 000D  
                               _PORTC 000E                    setRF_Learn@command 0072  
                               _TRISA 008C                                 _TRISB 008D  
                               _TRISC 008E                         __CFG_WRT$BOOT 0000  
                               _Light 0053                      __end_of_TMR1_ISR 03FF  
             __size_of_setProductData 000B          __size_of_CC2500_WriteCommand 0018  
                    __end_of_TMR1_Set 0800            __end_of_uartC_timer1_reset 0E42  
         __size_of_CC2500_ClearRXFIFO 0004           __size_of_CC2500_ClearTXFIFO 0004  
                 CC2500_RxData@loop_f 0076                        __pbitbssCOMMON 03E0  
                      __CFG_BOREN$OFF 0000                    Flash_Memory_Read@i 0072  
                    ?_CC2500_ReadByte 0070                                 ltemp0 007E  
                               ltemp1 0082                                 ltemp2 0086  
                               ltemp3 0080              __size_of_uartC_LED_close 0006  
                               ttemp0 007E                                 ttemp1 0081  
                               ttemp2 0084                                 ttemp3 0087  
                               ttemp4 007F                          ?_setRF_Learn 0070  
                               status 0003                                 wtemp0 007E  
                               wtemp1 0080                                 wtemp2 0082  
                               wtemp3 0084                                 wtemp4 0086  
                               wtemp5 0088                                 wtemp6 007F  
            __size_of_uartC_LED_start 000E           __size_of_Flash_Memory_Write 0029  
                   ?_CC2500_SIDLEMode 0070            __size_of_RF_Initialization 0003  
              ??_Flash_Memory_Erasing 0071                    ??_CC2500_SIDLEMode 0075  
                     __initialization 0018                      ?_CC2500_PowerRST 0070  
                   ?_setMemory_Modify 0070                          __end_of_main 07A3  
                    __end_of_Fosc_Set 0E2E        getMain_All_LightsStatus@status 0071  
                  ??_setMemory_Modify 0071                        _Exception_Main 0F65  
                    ?_CC2500_WriteREG 0073                                ??_main 007C  
                        ?_setLog_Code 0070               _setControl_Lights_Table 05CE  
                      _setMemory_Data 0E6B                            _Receive_OK 03E0  
            _getMain_All_LightsStatus 0E21                    _RF_Timeout_Counter 0F26  
              ?_myMain_Initialization 0070                             ??_RF_Main 007B  
       __size_of_uartC_switch_control 0022                      ___awdiv@dividend 0073  
                              _ANSELA 018C                                _ANSELB 018D  
                              _ANSELC 018E              _getMain_All_Error_Status 0E1E  
                              i1l3645 03F9                                u247_25 03F4  
                              _PMADRH 0192                                _PMADRL 0191  
                              _PMDATH 0194                                _PMDATL 0193  
                 ?_RF_Timeout_Counter 0070                                _PMCON2 0196  
                              _OSCCON 0099                                _TMR1IE 0488  
                              _TMR1IF 0088                                _IO_Set 0F93  
                  DelayTime_1us@count 0071        __size_of_CC2500_PowerOnInitial 0015  
       __end_of_CC2500_PowerOnInitial 0F50         __size_of_setRF_TimeoutCleared 0004  
          __end_of_Mcu_Initialization 0E6B                                _Memory 00BE  
                              _Timer1 004C                __end_of_Exception_Main 0F7C  
                Exception_Main@lights 0073                             ??___awdiv 0075  
        ?_Flash_Memory_Initialization 0070                             ??___lwdiv 0075  
                              _r_data 005A                  Exception_Main@status 0075  
                              _s_data 005B                                _myMain 003F  
                ??_RF_Timeout_Counter 0071                __end_of_setMemory_Data 0E75  
                    ___awdiv@quotient 0078              Flash_Memory_Read@address 0073  
          __end_of_setMemory_LoopSave 0EDD          __size_of_Flash_Memory_Modify 0058  
                 Flash_Memory_Write@i 0072          __size_of_Flash_Memory_Unlock 0009  
         __size_of_CC2500_InitPATable 001D                   CC2500_TxData@loop_e 0076  
    __end_of_CC2500_registers_address 042F               __end_of__initialization 0034  
                       ?_my_MainTimer 0070                        __pcstackCOMMON 0070  
                   ??_uartC_LED_close 0071                       ?_Exception_Main 0070  
                        __pidataBANK2 03A5                     ??_uartC_LED_start 0071  
                           ?_TMR1_ISR 0070                             ?_TMR1_Set 0070  
           setMemory_LoopSave@command 0072             ??_setControl_Lights_Table 0074  
                     ?_setMemory_Data 0071         ??_Flash_Memory_Initialization 0075  
                  __size_of_getRxData 00B8                     ?_CC2500_WriteByte 0070  
                      _setProductData 0E8A                    ??_CC2500_WriteByte 0071  
                          __pbssBANK0 0020                            __pbssBANK1 00A0  
                           ?_Fosc_Set 0070                               ?_IO_Set 0070  
                      ??_my_MainTimer 0071                       __CFG_VCAPEN$OFF 0000  
                     _myUARTtoRF_Main 0384                        DelayTime_1us@i 0073  
                      DelayTime_1us@j 0075           ??_myUARTtoRF_Initialization 0071  
                __size_of_setRF_Learn 0011                            __pmaintext 077A  
                 _CC2500_WriteCommand 0FAB                            ??_TMR1_ISR 0070  
                          ??_TMR1_Set 0071                            __pintentry 0004  
                  __size_of_setTxData 00DC                    __size_of_uartC_LED 002B  
              __size_of_DelayTime_1us 0025          __end_of_setRF_Initialization 0E7F  
              __end_of_setProductData 0E95                         ?_uartC_Button 0070  
                __size_of_setLog_Code 0028                  ?_CC2500_WriteCommand 0070  
                   _Flash_Memory_Main 0691                     _Flash_Memory_Read 0EFE  
              __size_of_CC2500_RxData 005B                __size_of_CC2500_TxData 0062  
                             _RF_Data 00A0                               _RF_Main 0E27  
                  ?_Flash_Memory_Main 0070                    ?_Flash_Memory_Read 0070  
     __end_of_setControl_Lights_Table 061A                       setRF_Main@error 007A  
              __size_of_setCmd_Status 0015                            ??_Fosc_Set 0071  
                       ?_uartC_timer1 007A          __end_of_CC2500_FrequencyCabr 0E8A  
                     __size_of_IO_Set 0018                   setCmd_Status@number 0073  
                 ??_Flash_Memory_Main 0077                   ??_Flash_Memory_Read 0071  
                   __end_of_getRxData 01CC              _CC2500_registers_address 0400  
                  _uartC_timer1_reset 0E3E                   setProductData@value 0071  
                             ___awdiv 057B                               ___lwdiv 065B  
          ??_getMain_All_LightsStatus 0071                               __ptext1 06C6  
                             __ptext2 0384                               __ptext3 074F  
                             __ptext4 06F5                               __ptext5 0E3E  
                             __ptext6 0723                               __ptext7 0362  
                             __ptext8 0EA1                               __ptext9 0EED  
                 ?_uartC_timer1_reset 0070             __size_of_CC2500_SIDLEMode 0004  
           _myUARTtoRF_Initialization 0E42                          __size_of_ISR 0012  
          ??_getMain_All_Error_Status 0071                        ??_uartC_Button 005C  
                     ?_setProductData 0071             __end_of_Flash_Memory_Main 06C6  
           __end_of_Flash_Memory_Read 0F12                            _setRF_Main 01CC  
             ??_myMain_Initialization 0071                 ??_CC2500_WriteCommand 0073  
           __size_of_setMemory_Modify 0010            __end_of_CC2500_ClearRXFIFO 0E36  
          __end_of_CC2500_ClearTXFIFO 0E3A                               _product 0062  
             __end_of_myUARTtoRF_Main 03A5                               clrloop0 0E54  
                end_of_initialization 0034                        ??_uartC_timer1 007C  
                   _CC2500_InitSetREG 0315                         _DelayTime_1us 033D  
                   __end_of_setTxData 0114            __end_of_Flash_Memory_Write 07CC  
                   __end_of_uartC_LED 077A                  ??_uartC_timer1_reset 0071  
                             init_ram 0E4D                    ?_CC2500_InitSetREG 0070  
                Flash_Memory_Read@ret 0074                               initloop 0E4E  
               CC2500_ReadByte@loop_b 0072                     _CC2500_ReadStatus 03C5  
                Flash_Memory_Modify@i 0076                    ?_CC2500_ReadStatus 0070  
            __size_of_CC2500_ReadByte 0017                         _CC2500_RxData 04C8  
                       _CC2500_TxData 0466                   ??_CC2500_InitSetREG 0076  
        __end_of_uartC_switch_control 0384         __size_of_Flash_Memory_Erasing 000C  
                 _Flash_Memory_Modify 0523                          __pstringtext 0400  
                       _setCmd_Status 0F50                   _Flash_Memory_Unlock 0E59  
                 ??_CC2500_ReadStatus 0073               CC2500_InitSetREG@loop_c 0079  
                  _Mcu_Initialization 0E62              __size_of_CC2500_PowerRST 0041  
        __end_of_setRF_TimeoutCleared 0E32                  __end_of_my_MainTimer 06F5  
                    __CFG_FOSC$INTOSC 0000              __size_of_CC2500_WriteREG 0020  
           __end_of_CC2500_InitSetREG 033D                   ?_Mcu_Initialization 0070  
                ?_Flash_Memory_Modify 0070                        ?_DelayTime_1us 0071  
                ?_Flash_Memory_Unlock 0070                       _uartC_LED_close 0E47  
           __end_of_CC2500_ReadStatus 03E5                         ?_RF_RxDisable 0070  
     getMain_All_Error_Status@command 0070                       _uartC_LED_start 0EA1  
                    ??_Exception_Main 0072                        __end_of_IO_Set 0FAB  
                _setRF_Initialization 0E75                    _setMemory_LoopSave 0ECD  
                      ?_CC2500_RxData 0070                        ?_CC2500_TxData 0070  
                    ??_setMemory_Data 0072                 _CC2500_PowerOnInitial 0F3B  
                ??_Mcu_Initialization 0071                        ?_setCmd_Status 0071  
                 ?_setMemory_LoopSave 0070           __size_of_RF_Timeout_Counter 0015  
                   __size_of_TMR1_ISR 001A                     __size_of_TMR1_Set 000C  
                _CC2500_FrequencyCabr 0E7F            __size_of_Flash_Memory_Main 0035  
          __size_of_Flash_Memory_Read 0014                           ?_setRF_Main 0070  
                 start_initialization 0018                           __end_of_ISR 0016  
               ??_Flash_Memory_Modify 0075            __end_of_CC2500_InitPATable 0FE0  
                    ?_myUARTtoRF_Main 0070                  ??_setMemory_LoopSave 0071  
               ??_Flash_Memory_Unlock 0071                        ??_RF_RxDisable 0075  
                            ??_IO_Set 0071                 ?_setRF_Initialization 0070  
                   __size_of_Fosc_Set 0004             __size_of_CC2500_WriteByte 0014  
                __end_of_uartC_Button 0723                             _Rx_Length 0055  
               setProductData@address 0073                   Exception_Main@count 0074  
                 Exception_Main@error 0076      __end_of_getMain_All_LightsStatus 0E24  
                           _Tx_Length 0058                           __pdataBANK2 0120  
                __end_of_uartC_timer1 074F                     ??_CC2500_ReadByte 0071  
    __end_of_getMain_All_Error_Status 0E21                      _CC2500_SIDLEMode 0E3A  
                  setMemory_Data@data 0071                 ?_CC2500_FrequencyCabr 0070  
             __end_of_uartC_LED_close 0E4D                             ___latbits 0002  
                    _setMemory_Modify 0EDD                         __pcstackBANK0 005C  
             __end_of_uartC_LED_start 0EAF                       ??_DelayTime_1us 0073  
          __size_of_CC2500_InitSetREG 0028                     ??_CC2500_PowerRST 0077  
                            ?_RF_Main 0070                  _uartC_switch_control 0362  
  __size_of_myUARTtoRF_Initialization 0005            __size_of_CC2500_ReadStatus 0020  
                   ??_CC2500_WriteREG 0074                         ??_setRF_Learn 0071  
               CC2500_WriteREG@w_addr 0075                       ??_CC2500_RxData 0075  
                     ??_CC2500_TxData 0075                             __pnvBANK0 0062  
                      getRxData@error 0076                  _setRF_TimeoutCleared 0E2E  
              ?_CC2500_PowerOnInitial 0070                   __size_of_setRF_Main 00A6  
                    ___lwdiv@dividend 0073                       ??_setCmd_Status 0072  
            ?_setControl_Lights_Table 0070   __end_of_Flash_Memory_Initialization 0315  
         _Flash_Memory_Initialization 0272                              ?___awdiv 0071  
                           _getRxData 0114                 __size_of_my_MainTimer 002F  
                            ?___lwdiv 0071                      ??_setProductData 0072  
                       ??_setLog_Code 0074          CC2500_ReadStatus@status_addr 0074  
              CC2500_WriteByte@loop_a 0072                             _r_address 0059  
      __size_of_myMain_Initialization 000F          __end_of_CC2500_patable_vaule 0466  
       __end_of_myMain_Initialization 0ECD                      ___lwdiv@quotient 0076  
               ?_uartC_switch_control 0070                ??_setRF_Initialization 0071  
   __end_of_myUARTtoRF_Initialization 0E47                     _CC2500_rfSettings 042F  
                           clear_ram0 0E53              CC2500_InitPATable@loop_d 0078  
               ?_setRF_TimeoutCleared 0070                          _my_MainTimer 06C6  
                           _setTxData 0038                             _uartC_LED 074F  
              _Flash_Memory_Main$1339 0078                    _CC2500_ClearRXFIFO 0E32  
                  _CC2500_ClearTXFIFO 0E36                   __end_of_setRF_Learn 0EFE  
                  _Flash_Memory_Write 07A3                            ?_getRxData 0070  
                            _TMR1_ISR 03E5                CC2500_InitSetREG@temp1 0077  
              CC2500_InitSetREG@temp2 0078                              _TMR1_Set 07F4  
                 ?_CC2500_ClearRXFIFO 0070                   ?_CC2500_ClearTXFIFO 0070  
                            _RF_Count 004F                  __end_of_RF_RxDisable 0EBE  
         __end_of_CC2500_WriteCommand 0FC3                ??_CC2500_FrequencyCabr 0077  
                 ?_Flash_Memory_Write 0070                      ?_uartC_LED_close 0070  
      getMain_All_Error_Status@status 0071          __end_of_Flash_Memory_Erasing 0EA1  
                    ?_uartC_LED_start 0070                   __end_of_setLog_Code 07F4  
   __size_of_getMain_All_LightsStatus 0003                  ??_CC2500_ClearRXFIFO 0075  
           ?_getMain_All_LightsStatus 0070                  ??_CC2500_ClearTXFIFO 0075  
           __end_of_CC2500_rfSettings 045E                      __size_of_RF_Main 0003  
              uartC_LED_start@time_ms 0073                              _Fosc_Set 0E2A  
               __size_of_uartC_Button 002E           __size_of_uartC_timer1_reset 0004  
   __size_of_getMain_All_Error_Status 0003                  ??_Flash_Memory_Write 0071  
           ?_getMain_All_Error_Status 0070                            ?_setTxData 0070  
                    _CC2500_WriteByte 0F12                            ?_uartC_LED 0070  
                            _SwDetect 0057                      setCmd_Status@cmd 0071  
               __size_of_uartC_timer1 002C                      __size_of___awdiv 0053  
                    __size_of___lwdiv 0036                          ??_setRF_Main 007A  
                CC2500_WriteREG@value 0073                          _uartC_Button 06F5  
              ??_uartC_switch_control 0074                       ___lwdiv@divisor 0071  
                 uartC_timer1@time_ms 007A                       ___lwdiv@counter 0078  
                            __ptext10 057B                              __ptext11 0E42  
                            __ptext20 05CE                              __ptext12 0EBE  
                            __ptext21 0038                              __ptext13 0E27  
                            __ptext30 0F3B                              __ptext22 0E8A  
                            __ptext14 01CC                              __ptext31 0E3A  
                            __ptext23 0F50                              __ptext15 0114  
                            __ptext40 0FAB                              __ptext32 061A  
                            __ptext24 065B                              __ptext16 0E47  
                            __ptext41 0E2E                              __ptext33 0315  
                            __ptext25 0EAF                              __ptext17 07CC  
                            __ptext50 0691                              __ptext42 0F26  
                            __ptext34 0FC3                              __ptext26 0466  
                            __ptext18 0EDD                              __ptext51 0E21  
                            __ptext43 0F12                              __ptext35 0FE0  
                            __ptext27 04C8                              __ptext19 0ECD  
                            __ptext60 0E1E                              __ptext52 0523  
                            __ptext44 0E24                              __ptext36 0E7F  
                            __ptext28 03C5                              __ptext53 0E95  
                            __ptext45 0E75                              __ptext37 033D  
                            __ptext29 0F7C                              __ptext62 03E5  
                            __ptext54 0272                              __ptext46 0E62  
                            __ptext38 0E36                              __ptext55 0E6B  
                            __ptext47 07F4                              __ptext39 0E32  
                            __ptext56 07A3                              __ptext48 0F93  
                            __ptext57 0E59                              __ptext49 0E2A  
                            __ptext58 0EFE                              __ptext59 0F65  
                            __product 0120                          _uartC_timer1 0723  
              ??_setRF_TimeoutCleared 0071                         __size_of_main 0029  
                         _setRF_Learn 0EED              __end_of_CC2500_SIDLEMode 0E3E  
          CC2500_WriteCommand@command 0074                       _CC2500_ReadByte 0F7C  
                  _CC2500_InitPATable 0FC3              __end_of_setMemory_Modify 0EED  
                  __end_of_setRF_Main 0272           __size_of_Mcu_Initialization 0009  
                _CC2500_patable_vaule 045E                           ??_getRxData 0075  
          __end_of_RF_Timeout_Counter 0F3B           Flash_Memory_Main@key_Status 0077  
                            main@argc 005E                              main@argv 0060  
                 ?_CC2500_InitPATable 0070                       _CC2500_PowerRST 061A  
         __end_of_Flash_Memory_Modify 057B                           _setLog_Code 07CC  
         __end_of_Flash_Memory_Unlock 0E62                       _CC2500_WriteREG 0FE0  
                       _Transceive_OK 03E1                           pic14e$flags 007E  
         __size_of_setMemory_LoopSave 0010                              intlevel1 0000  
                ??_CC2500_InitPATable 0076               ??_CC2500_PowerOnInitial 007A  
                         ??_setTxData 0071              __size_of_myUARTtoRF_Main 0021  
                         ??_uartC_LED 007A                CC2500_InitPATable@temp 0077  
               __size_of_RF_RxDisable 000F                     _RF_Initialization 0E24  
                _Flash_Memory_Erasing 0E95                    ?_RF_Initialization 0070  
                          _SPI0Buffer 0056               __size_of_Exception_Main 0017  
                 ??_RF_Initialization 0072               __size_of_setMemory_Data 000A  
    __size_of_setControl_Lights_Table 004C  __size_of_Flash_Memory_Initialization 00A3  
               setMemory_Data@address 0073                 __end_of_DelayTime_1us 0362  
             __end_of_CC2500_ReadByte 0F93                        setTxData@value 0072  
                        _RF_RxDisable 0EAF      Flash_Memory_Initialization@value 0076  
             setMemory_Modify@command 0072             __end_of_RF_Initialization 0E27  
               __end_of_CC2500_RxData 0523                 __end_of_CC2500_TxData 04C8  
             __end_of_CC2500_PowerRST 065B  
