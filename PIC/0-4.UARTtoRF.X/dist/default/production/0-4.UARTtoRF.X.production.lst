

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Dec 01 13:37:34 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1516
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	intentry,global,class=CODE,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    63                           	dabs	1,0x7E,2
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  0090                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0095                     	;# 
    98  0096                     	;# 
    99  0097                     	;# 
   100  0099                     	;# 
   101  009A                     	;# 
   102  009B                     	;# 
   103  009B                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  0116                     	;# 
   111  0117                     	;# 
   112  011D                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  018E                     	;# 
   116  0191                     	;# 
   117  0191                     	;# 
   118  0192                     	;# 
   119  0193                     	;# 
   120  0193                     	;# 
   121  0194                     	;# 
   122  0195                     	;# 
   123  0196                     	;# 
   124  0197                     	;# 
   125  0199                     	;# 
   126  019A                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019B                     	;# 
   130  019B                     	;# 
   131  019C                     	;# 
   132  019C                     	;# 
   133  019D                     	;# 
   134  019E                     	;# 
   135  019F                     	;# 
   136  020D                     	;# 
   137  0210                     	;# 
   138  0211                     	;# 
   139  0211                     	;# 
   140  0212                     	;# 
   141  0212                     	;# 
   142  0213                     	;# 
   143  0213                     	;# 
   144  0214                     	;# 
   145  0214                     	;# 
   146  0215                     	;# 
   147  0215                     	;# 
   148  0215                     	;# 
   149  0216                     	;# 
   150  0216                     	;# 
   151  0217                     	;# 
   152  0217                     	;# 
   153  0291                     	;# 
   154  0291                     	;# 
   155  0292                     	;# 
   156  0293                     	;# 
   157  0298                     	;# 
   158  0298                     	;# 
   159  0299                     	;# 
   160  029A                     	;# 
   161  0394                     	;# 
   162  0395                     	;# 
   163  0396                     	;# 
   164  0FE4                     	;# 
   165  0FE5                     	;# 
   166  0FE6                     	;# 
   167  0FE7                     	;# 
   168  0FE8                     	;# 
   169  0FE9                     	;# 
   170  0FEA                     	;# 
   171  0FEB                     	;# 
   172  0FED                     	;# 
   173  0FEE                     	;# 
   174  0FEF                     	;# 
   175  0000                     	;# 
   176  0001                     	;# 
   177  0002                     	;# 
   178  0003                     	;# 
   179  0004                     	;# 
   180  0005                     	;# 
   181  0006                     	;# 
   182  0007                     	;# 
   183  0008                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  0010                     	;# 
   191  0011                     	;# 
   192  0012                     	;# 
   193  0015                     	;# 
   194  0016                     	;# 
   195  0016                     	;# 
   196  0017                     	;# 
   197  0018                     	;# 
   198  0019                     	;# 
   199  001A                     	;# 
   200  001B                     	;# 
   201  001C                     	;# 
   202  008C                     	;# 
   203  008D                     	;# 
   204  008E                     	;# 
   205  0090                     	;# 
   206  0091                     	;# 
   207  0092                     	;# 
   208  0095                     	;# 
   209  0096                     	;# 
   210  0097                     	;# 
   211  0099                     	;# 
   212  009A                     	;# 
   213  009B                     	;# 
   214  009B                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009E                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  0116                     	;# 
   222  0117                     	;# 
   223  011D                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  018E                     	;# 
   227  0191                     	;# 
   228  0191                     	;# 
   229  0192                     	;# 
   230  0193                     	;# 
   231  0193                     	;# 
   232  0194                     	;# 
   233  0195                     	;# 
   234  0196                     	;# 
   235  0197                     	;# 
   236  0199                     	;# 
   237  019A                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019C                     	;# 
   243  019C                     	;# 
   244  019D                     	;# 
   245  019E                     	;# 
   246  019F                     	;# 
   247  020D                     	;# 
   248  0210                     	;# 
   249  0211                     	;# 
   250  0211                     	;# 
   251  0212                     	;# 
   252  0212                     	;# 
   253  0213                     	;# 
   254  0213                     	;# 
   255  0214                     	;# 
   256  0214                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0215                     	;# 
   260  0216                     	;# 
   261  0216                     	;# 
   262  0217                     	;# 
   263  0217                     	;# 
   264  0291                     	;# 
   265  0291                     	;# 
   266  0292                     	;# 
   267  0293                     	;# 
   268  0298                     	;# 
   269  0298                     	;# 
   270  0299                     	;# 
   271  029A                     	;# 
   272  0394                     	;# 
   273  0395                     	;# 
   274  0396                     	;# 
   275  0FE4                     	;# 
   276  0FE5                     	;# 
   277  0FE6                     	;# 
   278  0FE7                     	;# 
   279  0FE8                     	;# 
   280  0FE9                     	;# 
   281  0FEA                     	;# 
   282  0FEB                     	;# 
   283  0FED                     	;# 
   284  0FEE                     	;# 
   285  0FEF                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  0010                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0015                     	;# 
   305  0016                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001C                     	;# 
   313  008C                     	;# 
   314  008D                     	;# 
   315  008E                     	;# 
   316  0090                     	;# 
   317  0091                     	;# 
   318  0092                     	;# 
   319  0095                     	;# 
   320  0096                     	;# 
   321  0097                     	;# 
   322  0099                     	;# 
   323  009A                     	;# 
   324  009B                     	;# 
   325  009B                     	;# 
   326  009C                     	;# 
   327  009D                     	;# 
   328  009E                     	;# 
   329  010C                     	;# 
   330  010D                     	;# 
   331  010E                     	;# 
   332  0116                     	;# 
   333  0117                     	;# 
   334  011D                     	;# 
   335  018C                     	;# 
   336  018D                     	;# 
   337  018E                     	;# 
   338  0191                     	;# 
   339  0191                     	;# 
   340  0192                     	;# 
   341  0193                     	;# 
   342  0193                     	;# 
   343  0194                     	;# 
   344  0195                     	;# 
   345  0196                     	;# 
   346  0197                     	;# 
   347  0199                     	;# 
   348  019A                     	;# 
   349  019B                     	;# 
   350  019B                     	;# 
   351  019B                     	;# 
   352  019B                     	;# 
   353  019C                     	;# 
   354  019C                     	;# 
   355  019D                     	;# 
   356  019E                     	;# 
   357  019F                     	;# 
   358  020D                     	;# 
   359  0210                     	;# 
   360  0211                     	;# 
   361  0211                     	;# 
   362  0212                     	;# 
   363  0212                     	;# 
   364  0213                     	;# 
   365  0213                     	;# 
   366  0214                     	;# 
   367  0214                     	;# 
   368  0215                     	;# 
   369  0215                     	;# 
   370  0215                     	;# 
   371  0216                     	;# 
   372  0216                     	;# 
   373  0217                     	;# 
   374  0217                     	;# 
   375  0291                     	;# 
   376  0291                     	;# 
   377  0292                     	;# 
   378  0293                     	;# 
   379  0298                     	;# 
   380  0298                     	;# 
   381  0299                     	;# 
   382  029A                     	;# 
   383  0394                     	;# 
   384  0395                     	;# 
   385  0396                     	;# 
   386  0FE4                     	;# 
   387  0FE5                     	;# 
   388  0FE6                     	;# 
   389  0FE7                     	;# 
   390  0FE8                     	;# 
   391  0FE9                     	;# 
   392  0FEA                     	;# 
   393  0FEB                     	;# 
   394  0FED                     	;# 
   395  0FEE                     	;# 
   396  0FEF                     	;# 
   397  0000                     	;# 
   398  0001                     	;# 
   399  0002                     	;# 
   400  0003                     	;# 
   401  0004                     	;# 
   402  0005                     	;# 
   403  0006                     	;# 
   404  0007                     	;# 
   405  0008                     	;# 
   406  0009                     	;# 
   407  000A                     	;# 
   408  000B                     	;# 
   409  000C                     	;# 
   410  000D                     	;# 
   411  000E                     	;# 
   412  0010                     	;# 
   413  0011                     	;# 
   414  0012                     	;# 
   415  0015                     	;# 
   416  0016                     	;# 
   417  0016                     	;# 
   418  0017                     	;# 
   419  0018                     	;# 
   420  0019                     	;# 
   421  001A                     	;# 
   422  001B                     	;# 
   423  001C                     	;# 
   424  008C                     	;# 
   425  008D                     	;# 
   426  008E                     	;# 
   427  0090                     	;# 
   428  0091                     	;# 
   429  0092                     	;# 
   430  0095                     	;# 
   431  0096                     	;# 
   432  0097                     	;# 
   433  0099                     	;# 
   434  009A                     	;# 
   435  009B                     	;# 
   436  009B                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  010C                     	;# 
   441  010D                     	;# 
   442  010E                     	;# 
   443  0116                     	;# 
   444  0117                     	;# 
   445  011D                     	;# 
   446  018C                     	;# 
   447  018D                     	;# 
   448  018E                     	;# 
   449  0191                     	;# 
   450  0191                     	;# 
   451  0192                     	;# 
   452  0193                     	;# 
   453  0193                     	;# 
   454  0194                     	;# 
   455  0195                     	;# 
   456  0196                     	;# 
   457  0197                     	;# 
   458  0199                     	;# 
   459  019A                     	;# 
   460  019B                     	;# 
   461  019B                     	;# 
   462  019B                     	;# 
   463  019B                     	;# 
   464  019C                     	;# 
   465  019C                     	;# 
   466  019D                     	;# 
   467  019E                     	;# 
   468  019F                     	;# 
   469  020D                     	;# 
   470  0210                     	;# 
   471  0211                     	;# 
   472  0211                     	;# 
   473  0212                     	;# 
   474  0212                     	;# 
   475  0213                     	;# 
   476  0213                     	;# 
   477  0214                     	;# 
   478  0214                     	;# 
   479  0215                     	;# 
   480  0215                     	;# 
   481  0215                     	;# 
   482  0216                     	;# 
   483  0216                     	;# 
   484  0217                     	;# 
   485  0217                     	;# 
   486  0291                     	;# 
   487  0291                     	;# 
   488  0292                     	;# 
   489  0293                     	;# 
   490  0298                     	;# 
   491  0298                     	;# 
   492  0299                     	;# 
   493  029A                     	;# 
   494  0394                     	;# 
   495  0395                     	;# 
   496  0396                     	;# 
   497  0FE4                     	;# 
   498  0FE5                     	;# 
   499  0FE6                     	;# 
   500  0FE7                     	;# 
   501  0FE8                     	;# 
   502  0FE9                     	;# 
   503  0FEA                     	;# 
   504  0FEB                     	;# 
   505  0FED                     	;# 
   506  0FEE                     	;# 
   507  0FEF                     	;# 
   508  0000                     	;# 
   509  0001                     	;# 
   510  0002                     	;# 
   511  0003                     	;# 
   512  0004                     	;# 
   513  0005                     	;# 
   514  0006                     	;# 
   515  0007                     	;# 
   516  0008                     	;# 
   517  0009                     	;# 
   518  000A                     	;# 
   519  000B                     	;# 
   520  000C                     	;# 
   521  000D                     	;# 
   522  000E                     	;# 
   523  0010                     	;# 
   524  0011                     	;# 
   525  0012                     	;# 
   526  0015                     	;# 
   527  0016                     	;# 
   528  0016                     	;# 
   529  0017                     	;# 
   530  0018                     	;# 
   531  0019                     	;# 
   532  001A                     	;# 
   533  001B                     	;# 
   534  001C                     	;# 
   535  008C                     	;# 
   536  008D                     	;# 
   537  008E                     	;# 
   538  0090                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0095                     	;# 
   542  0096                     	;# 
   543  0097                     	;# 
   544  0099                     	;# 
   545  009A                     	;# 
   546  009B                     	;# 
   547  009B                     	;# 
   548  009C                     	;# 
   549  009D                     	;# 
   550  009E                     	;# 
   551  010C                     	;# 
   552  010D                     	;# 
   553  010E                     	;# 
   554  0116                     	;# 
   555  0117                     	;# 
   556  011D                     	;# 
   557  018C                     	;# 
   558  018D                     	;# 
   559  018E                     	;# 
   560  0191                     	;# 
   561  0191                     	;# 
   562  0192                     	;# 
   563  0193                     	;# 
   564  0193                     	;# 
   565  0194                     	;# 
   566  0195                     	;# 
   567  0196                     	;# 
   568  0197                     	;# 
   569  0199                     	;# 
   570  019A                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019B                     	;# 
   574  019B                     	;# 
   575  019C                     	;# 
   576  019C                     	;# 
   577  019D                     	;# 
   578  019E                     	;# 
   579  019F                     	;# 
   580  020D                     	;# 
   581  0210                     	;# 
   582  0211                     	;# 
   583  0211                     	;# 
   584  0212                     	;# 
   585  0212                     	;# 
   586  0213                     	;# 
   587  0213                     	;# 
   588  0214                     	;# 
   589  0214                     	;# 
   590  0215                     	;# 
   591  0215                     	;# 
   592  0215                     	;# 
   593  0216                     	;# 
   594  0216                     	;# 
   595  0217                     	;# 
   596  0217                     	;# 
   597  0291                     	;# 
   598  0291                     	;# 
   599  0292                     	;# 
   600  0293                     	;# 
   601  0298                     	;# 
   602  0298                     	;# 
   603  0299                     	;# 
   604  029A                     	;# 
   605  0394                     	;# 
   606  0395                     	;# 
   607  0396                     	;# 
   608  0FE4                     	;# 
   609  0FE5                     	;# 
   610  0FE6                     	;# 
   611  0FE7                     	;# 
   612  0FE8                     	;# 
   613  0FE9                     	;# 
   614  0FEA                     	;# 
   615  0FEB                     	;# 
   616  0FED                     	;# 
   617  0FEE                     	;# 
   618  0FEF                     	;# 
   619  0000                     	;# 
   620  0001                     	;# 
   621  0002                     	;# 
   622  0003                     	;# 
   623  0004                     	;# 
   624  0005                     	;# 
   625  0006                     	;# 
   626  0007                     	;# 
   627  0008                     	;# 
   628  0009                     	;# 
   629  000A                     	;# 
   630  000B                     	;# 
   631  000C                     	;# 
   632  000D                     	;# 
   633  000E                     	;# 
   634  0010                     	;# 
   635  0011                     	;# 
   636  0012                     	;# 
   637  0015                     	;# 
   638  0016                     	;# 
   639  0016                     	;# 
   640  0017                     	;# 
   641  0018                     	;# 
   642  0019                     	;# 
   643  001A                     	;# 
   644  001B                     	;# 
   645  001C                     	;# 
   646  008C                     	;# 
   647  008D                     	;# 
   648  008E                     	;# 
   649  0090                     	;# 
   650  0091                     	;# 
   651  0092                     	;# 
   652  0095                     	;# 
   653  0096                     	;# 
   654  0097                     	;# 
   655  0099                     	;# 
   656  009A                     	;# 
   657  009B                     	;# 
   658  009B                     	;# 
   659  009C                     	;# 
   660  009D                     	;# 
   661  009E                     	;# 
   662  010C                     	;# 
   663  010D                     	;# 
   664  010E                     	;# 
   665  0116                     	;# 
   666  0117                     	;# 
   667  011D                     	;# 
   668  018C                     	;# 
   669  018D                     	;# 
   670  018E                     	;# 
   671  0191                     	;# 
   672  0191                     	;# 
   673  0192                     	;# 
   674  0193                     	;# 
   675  0193                     	;# 
   676  0194                     	;# 
   677  0195                     	;# 
   678  0196                     	;# 
   679  0197                     	;# 
   680  0199                     	;# 
   681  019A                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019C                     	;# 
   687  019C                     	;# 
   688  019D                     	;# 
   689  019E                     	;# 
   690  019F                     	;# 
   691  020D                     	;# 
   692  0210                     	;# 
   693  0211                     	;# 
   694  0211                     	;# 
   695  0212                     	;# 
   696  0212                     	;# 
   697  0213                     	;# 
   698  0213                     	;# 
   699  0214                     	;# 
   700  0214                     	;# 
   701  0215                     	;# 
   702  0215                     	;# 
   703  0215                     	;# 
   704  0216                     	;# 
   705  0216                     	;# 
   706  0217                     	;# 
   707  0217                     	;# 
   708  0291                     	;# 
   709  0291                     	;# 
   710  0292                     	;# 
   711  0293                     	;# 
   712  0298                     	;# 
   713  0298                     	;# 
   714  0299                     	;# 
   715  029A                     	;# 
   716  0394                     	;# 
   717  0395                     	;# 
   718  0396                     	;# 
   719  0FE4                     	;# 
   720  0FE5                     	;# 
   721  0FE6                     	;# 
   722  0FE7                     	;# 
   723  0FE8                     	;# 
   724  0FE9                     	;# 
   725  0FEA                     	;# 
   726  0FEB                     	;# 
   727  0FED                     	;# 
   728  0FEE                     	;# 
   729  0FEF                     	;# 
   730  0000                     	;# 
   731  0001                     	;# 
   732  0002                     	;# 
   733  0003                     	;# 
   734  0004                     	;# 
   735  0005                     	;# 
   736  0006                     	;# 
   737  0007                     	;# 
   738  0008                     	;# 
   739  0009                     	;# 
   740  000A                     	;# 
   741  000B                     	;# 
   742  000C                     	;# 
   743  000D                     	;# 
   744  000E                     	;# 
   745  0010                     	;# 
   746  0011                     	;# 
   747  0012                     	;# 
   748  0015                     	;# 
   749  0016                     	;# 
   750  0016                     	;# 
   751  0017                     	;# 
   752  0018                     	;# 
   753  0019                     	;# 
   754  001A                     	;# 
   755  001B                     	;# 
   756  001C                     	;# 
   757  008C                     	;# 
   758  008D                     	;# 
   759  008E                     	;# 
   760  0090                     	;# 
   761  0091                     	;# 
   762  0092                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  010E                     	;# 
   776  0116                     	;# 
   777  0117                     	;# 
   778  011D                     	;# 
   779  018C                     	;# 
   780  018D                     	;# 
   781  018E                     	;# 
   782  0191                     	;# 
   783  0191                     	;# 
   784  0192                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0194                     	;# 
   788  0195                     	;# 
   789  0196                     	;# 
   790  0197                     	;# 
   791  0199                     	;# 
   792  019A                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019B                     	;# 
   796  019B                     	;# 
   797  019C                     	;# 
   798  019C                     	;# 
   799  019D                     	;# 
   800  019E                     	;# 
   801  019F                     	;# 
   802  020D                     	;# 
   803  0210                     	;# 
   804  0211                     	;# 
   805  0211                     	;# 
   806  0212                     	;# 
   807  0212                     	;# 
   808  0213                     	;# 
   809  0213                     	;# 
   810  0214                     	;# 
   811  0214                     	;# 
   812  0215                     	;# 
   813  0215                     	;# 
   814  0215                     	;# 
   815  0216                     	;# 
   816  0216                     	;# 
   817  0217                     	;# 
   818  0217                     	;# 
   819  0291                     	;# 
   820  0291                     	;# 
   821  0292                     	;# 
   822  0293                     	;# 
   823  0298                     	;# 
   824  0298                     	;# 
   825  0299                     	;# 
   826  029A                     	;# 
   827  0394                     	;# 
   828  0395                     	;# 
   829  0396                     	;# 
   830  0FE4                     	;# 
   831  0FE5                     	;# 
   832  0FE6                     	;# 
   833  0FE7                     	;# 
   834  0FE8                     	;# 
   835  0FE9                     	;# 
   836  0FEA                     	;# 
   837  0FEB                     	;# 
   838  0FED                     	;# 
   839  0FEE                     	;# 
   840  0FEF                     	;# 
   841  0000                     	;# 
   842  0001                     	;# 
   843  0002                     	;# 
   844  0003                     	;# 
   845  0004                     	;# 
   846  0005                     	;# 
   847  0006                     	;# 
   848  0007                     	;# 
   849  0008                     	;# 
   850  0009                     	;# 
   851  000A                     	;# 
   852  000B                     	;# 
   853  000C                     	;# 
   854  000D                     	;# 
   855  000E                     	;# 
   856  0010                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0015                     	;# 
   860  0016                     	;# 
   861  0016                     	;# 
   862  0017                     	;# 
   863  0018                     	;# 
   864  0019                     	;# 
   865  001A                     	;# 
   866  001B                     	;# 
   867  001C                     	;# 
   868  008C                     	;# 
   869  008D                     	;# 
   870  008E                     	;# 
   871  0090                     	;# 
   872  0091                     	;# 
   873  0092                     	;# 
   874  0095                     	;# 
   875  0096                     	;# 
   876  0097                     	;# 
   877  0099                     	;# 
   878  009A                     	;# 
   879  009B                     	;# 
   880  009B                     	;# 
   881  009C                     	;# 
   882  009D                     	;# 
   883  009E                     	;# 
   884  010C                     	;# 
   885  010D                     	;# 
   886  010E                     	;# 
   887  0116                     	;# 
   888  0117                     	;# 
   889  011D                     	;# 
   890  018C                     	;# 
   891  018D                     	;# 
   892  018E                     	;# 
   893  0191                     	;# 
   894  0191                     	;# 
   895  0192                     	;# 
   896  0193                     	;# 
   897  0193                     	;# 
   898  0194                     	;# 
   899  0195                     	;# 
   900  0196                     	;# 
   901  0197                     	;# 
   902  0199                     	;# 
   903  019A                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019B                     	;# 
   907  019B                     	;# 
   908  019C                     	;# 
   909  019C                     	;# 
   910  019D                     	;# 
   911  019E                     	;# 
   912  019F                     	;# 
   913  020D                     	;# 
   914  0210                     	;# 
   915  0211                     	;# 
   916  0211                     	;# 
   917  0212                     	;# 
   918  0212                     	;# 
   919  0213                     	;# 
   920  0213                     	;# 
   921  0214                     	;# 
   922  0214                     	;# 
   923  0215                     	;# 
   924  0215                     	;# 
   925  0215                     	;# 
   926  0216                     	;# 
   927  0216                     	;# 
   928  0217                     	;# 
   929  0217                     	;# 
   930  0291                     	;# 
   931  0291                     	;# 
   932  0292                     	;# 
   933  0293                     	;# 
   934  0298                     	;# 
   935  0298                     	;# 
   936  0299                     	;# 
   937  029A                     	;# 
   938  0394                     	;# 
   939  0395                     	;# 
   940  0396                     	;# 
   941  0FE4                     	;# 
   942  0FE5                     	;# 
   943  0FE6                     	;# 
   944  0FE7                     	;# 
   945  0FE8                     	;# 
   946  0FE9                     	;# 
   947  0FEA                     	;# 
   948  0FEB                     	;# 
   949  0FED                     	;# 
   950  0FEE                     	;# 
   951  0FEF                     	;# 
   952  0000                     	;# 
   953  0001                     	;# 
   954  0002                     	;# 
   955  0003                     	;# 
   956  0004                     	;# 
   957  0005                     	;# 
   958  0006                     	;# 
   959  0007                     	;# 
   960  0008                     	;# 
   961  0009                     	;# 
   962  000A                     	;# 
   963  000B                     	;# 
   964  000C                     	;# 
   965  000D                     	;# 
   966  000E                     	;# 
   967  0010                     	;# 
   968  0011                     	;# 
   969  0012                     	;# 
   970  0015                     	;# 
   971  0016                     	;# 
   972  0016                     	;# 
   973  0017                     	;# 
   974  0018                     	;# 
   975  0019                     	;# 
   976  001A                     	;# 
   977  001B                     	;# 
   978  001C                     	;# 
   979  008C                     	;# 
   980  008D                     	;# 
   981  008E                     	;# 
   982  0090                     	;# 
   983  0091                     	;# 
   984  0092                     	;# 
   985  0095                     	;# 
   986  0096                     	;# 
   987  0097                     	;# 
   988  0099                     	;# 
   989  009A                     	;# 
   990  009B                     	;# 
   991  009B                     	;# 
   992  009C                     	;# 
   993  009D                     	;# 
   994  009E                     	;# 
   995  010C                     	;# 
   996  010D                     	;# 
   997  010E                     	;# 
   998  0116                     	;# 
   999  0117                     	;# 
  1000  011D                     	;# 
  1001  018C                     	;# 
  1002  018D                     	;# 
  1003  018E                     	;# 
  1004  0191                     	;# 
  1005  0191                     	;# 
  1006  0192                     	;# 
  1007  0193                     	;# 
  1008  0193                     	;# 
  1009  0194                     	;# 
  1010  0195                     	;# 
  1011  0196                     	;# 
  1012  0197                     	;# 
  1013  0199                     	;# 
  1014  019A                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019B                     	;# 
  1018  019B                     	;# 
  1019  019C                     	;# 
  1020  019C                     	;# 
  1021  019D                     	;# 
  1022  019E                     	;# 
  1023  019F                     	;# 
  1024  020D                     	;# 
  1025  0210                     	;# 
  1026  0211                     	;# 
  1027  0211                     	;# 
  1028  0212                     	;# 
  1029  0212                     	;# 
  1030  0213                     	;# 
  1031  0213                     	;# 
  1032  0214                     	;# 
  1033  0214                     	;# 
  1034  0215                     	;# 
  1035  0215                     	;# 
  1036  0215                     	;# 
  1037  0216                     	;# 
  1038  0216                     	;# 
  1039  0217                     	;# 
  1040  0217                     	;# 
  1041  0291                     	;# 
  1042  0291                     	;# 
  1043  0292                     	;# 
  1044  0293                     	;# 
  1045  0298                     	;# 
  1046  0298                     	;# 
  1047  0299                     	;# 
  1048  029A                     	;# 
  1049  0394                     	;# 
  1050  0395                     	;# 
  1051  0396                     	;# 
  1052  0FE4                     	;# 
  1053  0FE5                     	;# 
  1054  0FE6                     	;# 
  1055  0FE7                     	;# 
  1056  0FE8                     	;# 
  1057  0FE9                     	;# 
  1058  0FEA                     	;# 
  1059  0FEB                     	;# 
  1060  0FED                     	;# 
  1061  0FEE                     	;# 
  1062  0FEF                     	;# 
  1063  0000                     	;# 
  1064  0001                     	;# 
  1065  0002                     	;# 
  1066  0003                     	;# 
  1067  0004                     	;# 
  1068  0005                     	;# 
  1069  0006                     	;# 
  1070  0007                     	;# 
  1071  0008                     	;# 
  1072  0009                     	;# 
  1073  000A                     	;# 
  1074  000B                     	;# 
  1075  000C                     	;# 
  1076  000D                     	;# 
  1077  000E                     	;# 
  1078  0010                     	;# 
  1079  0011                     	;# 
  1080  0012                     	;# 
  1081  0015                     	;# 
  1082  0016                     	;# 
  1083  0016                     	;# 
  1084  0017                     	;# 
  1085  0018                     	;# 
  1086  0019                     	;# 
  1087  001A                     	;# 
  1088  001B                     	;# 
  1089  001C                     	;# 
  1090  008C                     	;# 
  1091  008D                     	;# 
  1092  008E                     	;# 
  1093  0090                     	;# 
  1094  0091                     	;# 
  1095  0092                     	;# 
  1096  0095                     	;# 
  1097  0096                     	;# 
  1098  0097                     	;# 
  1099  0099                     	;# 
  1100  009A                     	;# 
  1101  009B                     	;# 
  1102  009B                     	;# 
  1103  009C                     	;# 
  1104  009D                     	;# 
  1105  009E                     	;# 
  1106  010C                     	;# 
  1107  010D                     	;# 
  1108  010E                     	;# 
  1109  0116                     	;# 
  1110  0117                     	;# 
  1111  011D                     	;# 
  1112  018C                     	;# 
  1113  018D                     	;# 
  1114  018E                     	;# 
  1115  0191                     	;# 
  1116  0191                     	;# 
  1117  0192                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0194                     	;# 
  1121  0195                     	;# 
  1122  0196                     	;# 
  1123  0197                     	;# 
  1124  0199                     	;# 
  1125  019A                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019C                     	;# 
  1131  019C                     	;# 
  1132  019D                     	;# 
  1133  019E                     	;# 
  1134  019F                     	;# 
  1135  020D                     	;# 
  1136  0210                     	;# 
  1137  0211                     	;# 
  1138  0211                     	;# 
  1139  0212                     	;# 
  1140  0212                     	;# 
  1141  0213                     	;# 
  1142  0213                     	;# 
  1143  0214                     	;# 
  1144  0214                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0215                     	;# 
  1148  0216                     	;# 
  1149  0216                     	;# 
  1150  0217                     	;# 
  1151  0217                     	;# 
  1152  0291                     	;# 
  1153  0291                     	;# 
  1154  0292                     	;# 
  1155  0293                     	;# 
  1156  0298                     	;# 
  1157  0298                     	;# 
  1158  0299                     	;# 
  1159  029A                     	;# 
  1160  0394                     	;# 
  1161  0395                     	;# 
  1162  0396                     	;# 
  1163  0FE4                     	;# 
  1164  0FE5                     	;# 
  1165  0FE6                     	;# 
  1166  0FE7                     	;# 
  1167  0FE8                     	;# 
  1168  0FE9                     	;# 
  1169  0FEA                     	;# 
  1170  0FEB                     	;# 
  1171  0FED                     	;# 
  1172  0FEE                     	;# 
  1173  0FEF                     	;# 
  1174  0000                     	;# 
  1175  0001                     	;# 
  1176  0002                     	;# 
  1177  0003                     	;# 
  1178  0004                     	;# 
  1179  0005                     	;# 
  1180  0006                     	;# 
  1181  0007                     	;# 
  1182  0008                     	;# 
  1183  0009                     	;# 
  1184  000A                     	;# 
  1185  000B                     	;# 
  1186  000C                     	;# 
  1187  000D                     	;# 
  1188  000E                     	;# 
  1189  0010                     	;# 
  1190  0011                     	;# 
  1191  0012                     	;# 
  1192  0015                     	;# 
  1193  0016                     	;# 
  1194  0016                     	;# 
  1195  0017                     	;# 
  1196  0018                     	;# 
  1197  0019                     	;# 
  1198  001A                     	;# 
  1199  001B                     	;# 
  1200  001C                     	;# 
  1201  008C                     	;# 
  1202  008D                     	;# 
  1203  008E                     	;# 
  1204  0090                     	;# 
  1205  0091                     	;# 
  1206  0092                     	;# 
  1207  0095                     	;# 
  1208  0096                     	;# 
  1209  0097                     	;# 
  1210  0099                     	;# 
  1211  009A                     	;# 
  1212  009B                     	;# 
  1213  009B                     	;# 
  1214  009C                     	;# 
  1215  009D                     	;# 
  1216  009E                     	;# 
  1217  010C                     	;# 
  1218  010D                     	;# 
  1219  010E                     	;# 
  1220  0116                     	;# 
  1221  0117                     	;# 
  1222  011D                     	;# 
  1223  018C                     	;# 
  1224  018D                     	;# 
  1225  018E                     	;# 
  1226  0191                     	;# 
  1227  0191                     	;# 
  1228  0192                     	;# 
  1229  0193                     	;# 
  1230  0193                     	;# 
  1231  0194                     	;# 
  1232  0195                     	;# 
  1233  0196                     	;# 
  1234  0197                     	;# 
  1235  0199                     	;# 
  1236  019A                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019C                     	;# 
  1242  019C                     	;# 
  1243  019D                     	;# 
  1244  019E                     	;# 
  1245  019F                     	;# 
  1246  020D                     	;# 
  1247  0210                     	;# 
  1248  0211                     	;# 
  1249  0211                     	;# 
  1250  0212                     	;# 
  1251  0212                     	;# 
  1252  0213                     	;# 
  1253  0213                     	;# 
  1254  0214                     	;# 
  1255  0214                     	;# 
  1256  0215                     	;# 
  1257  0215                     	;# 
  1258  0215                     	;# 
  1259  0216                     	;# 
  1260  0216                     	;# 
  1261  0217                     	;# 
  1262  0217                     	;# 
  1263  0291                     	;# 
  1264  0291                     	;# 
  1265  0292                     	;# 
  1266  0293                     	;# 
  1267  0298                     	;# 
  1268  0298                     	;# 
  1269  0299                     	;# 
  1270  029A                     	;# 
  1271  0394                     	;# 
  1272  0395                     	;# 
  1273  0396                     	;# 
  1274  0FE4                     	;# 
  1275  0FE5                     	;# 
  1276  0FE6                     	;# 
  1277  0FE7                     	;# 
  1278  0FE8                     	;# 
  1279  0FE9                     	;# 
  1280  0FEA                     	;# 
  1281  0FEB                     	;# 
  1282  0FED                     	;# 
  1283  0FEE                     	;# 
  1284  0FEF                     	;# 
  1285  0000                     	;# 
  1286  0001                     	;# 
  1287  0002                     	;# 
  1288  0003                     	;# 
  1289  0004                     	;# 
  1290  0005                     	;# 
  1291  0006                     	;# 
  1292  0007                     	;# 
  1293  0008                     	;# 
  1294  0009                     	;# 
  1295  000A                     	;# 
  1296  000B                     	;# 
  1297  000C                     	;# 
  1298  000D                     	;# 
  1299  000E                     	;# 
  1300  0010                     	;# 
  1301  0011                     	;# 
  1302  0012                     	;# 
  1303  0015                     	;# 
  1304  0016                     	;# 
  1305  0016                     	;# 
  1306  0017                     	;# 
  1307  0018                     	;# 
  1308  0019                     	;# 
  1309  001A                     	;# 
  1310  001B                     	;# 
  1311  001C                     	;# 
  1312  008C                     	;# 
  1313  008D                     	;# 
  1314  008E                     	;# 
  1315  0090                     	;# 
  1316  0091                     	;# 
  1317  0092                     	;# 
  1318  0095                     	;# 
  1319  0096                     	;# 
  1320  0097                     	;# 
  1321  0099                     	;# 
  1322  009A                     	;# 
  1323  009B                     	;# 
  1324  009B                     	;# 
  1325  009C                     	;# 
  1326  009D                     	;# 
  1327  009E                     	;# 
  1328  010C                     	;# 
  1329  010D                     	;# 
  1330  010E                     	;# 
  1331  0116                     	;# 
  1332  0117                     	;# 
  1333  011D                     	;# 
  1334  018C                     	;# 
  1335  018D                     	;# 
  1336  018E                     	;# 
  1337  0191                     	;# 
  1338  0191                     	;# 
  1339  0192                     	;# 
  1340  0193                     	;# 
  1341  0193                     	;# 
  1342  0194                     	;# 
  1343  0195                     	;# 
  1344  0196                     	;# 
  1345  0197                     	;# 
  1346  0199                     	;# 
  1347  019A                     	;# 
  1348  019B                     	;# 
  1349  019B                     	;# 
  1350  019B                     	;# 
  1351  019B                     	;# 
  1352  019C                     	;# 
  1353  019C                     	;# 
  1354  019D                     	;# 
  1355  019E                     	;# 
  1356  019F                     	;# 
  1357  020D                     	;# 
  1358  0210                     	;# 
  1359  0211                     	;# 
  1360  0211                     	;# 
  1361  0212                     	;# 
  1362  0212                     	;# 
  1363  0213                     	;# 
  1364  0213                     	;# 
  1365  0214                     	;# 
  1366  0214                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0215                     	;# 
  1370  0216                     	;# 
  1371  0216                     	;# 
  1372  0217                     	;# 
  1373  0217                     	;# 
  1374  0291                     	;# 
  1375  0291                     	;# 
  1376  0292                     	;# 
  1377  0293                     	;# 
  1378  0298                     	;# 
  1379  0298                     	;# 
  1380  0299                     	;# 
  1381  029A                     	;# 
  1382  0394                     	;# 
  1383  0395                     	;# 
  1384  0396                     	;# 
  1385  0FE4                     	;# 
  1386  0FE5                     	;# 
  1387  0FE6                     	;# 
  1388  0FE7                     	;# 
  1389  0FE8                     	;# 
  1390  0FE9                     	;# 
  1391  0FEA                     	;# 
  1392  0FEB                     	;# 
  1393  0FED                     	;# 
  1394  0FEE                     	;# 
  1395  0FEF                     	;# 
  1396  0000                     	;# 
  1397  0001                     	;# 
  1398  0002                     	;# 
  1399  0003                     	;# 
  1400  0004                     	;# 
  1401  0005                     	;# 
  1402  0006                     	;# 
  1403  0007                     	;# 
  1404  0008                     	;# 
  1405  0009                     	;# 
  1406  000A                     	;# 
  1407  000B                     	;# 
  1408  000C                     	;# 
  1409  000D                     	;# 
  1410  000E                     	;# 
  1411  0010                     	;# 
  1412  0011                     	;# 
  1413  0012                     	;# 
  1414  0015                     	;# 
  1415  0016                     	;# 
  1416  0016                     	;# 
  1417  0017                     	;# 
  1418  0018                     	;# 
  1419  0019                     	;# 
  1420  001A                     	;# 
  1421  001B                     	;# 
  1422  001C                     	;# 
  1423  008C                     	;# 
  1424  008D                     	;# 
  1425  008E                     	;# 
  1426  0090                     	;# 
  1427  0091                     	;# 
  1428  0092                     	;# 
  1429  0095                     	;# 
  1430  0096                     	;# 
  1431  0097                     	;# 
  1432  0099                     	;# 
  1433  009A                     	;# 
  1434  009B                     	;# 
  1435  009B                     	;# 
  1436  009C                     	;# 
  1437  009D                     	;# 
  1438  009E                     	;# 
  1439  010C                     	;# 
  1440  010D                     	;# 
  1441  010E                     	;# 
  1442  0116                     	;# 
  1443  0117                     	;# 
  1444  011D                     	;# 
  1445  018C                     	;# 
  1446  018D                     	;# 
  1447  018E                     	;# 
  1448  0191                     	;# 
  1449  0191                     	;# 
  1450  0192                     	;# 
  1451  0193                     	;# 
  1452  0193                     	;# 
  1453  0194                     	;# 
  1454  0195                     	;# 
  1455  0196                     	;# 
  1456  0197                     	;# 
  1457  0199                     	;# 
  1458  019A                     	;# 
  1459  019B                     	;# 
  1460  019B                     	;# 
  1461  019B                     	;# 
  1462  019B                     	;# 
  1463  019C                     	;# 
  1464  019C                     	;# 
  1465  019D                     	;# 
  1466  019E                     	;# 
  1467  019F                     	;# 
  1468  020D                     	;# 
  1469  0210                     	;# 
  1470  0211                     	;# 
  1471  0211                     	;# 
  1472  0212                     	;# 
  1473  0212                     	;# 
  1474  0213                     	;# 
  1475  0213                     	;# 
  1476  0214                     	;# 
  1477  0214                     	;# 
  1478  0215                     	;# 
  1479  0215                     	;# 
  1480  0215                     	;# 
  1481  0216                     	;# 
  1482  0216                     	;# 
  1483  0217                     	;# 
  1484  0217                     	;# 
  1485  0291                     	;# 
  1486  0291                     	;# 
  1487  0292                     	;# 
  1488  0293                     	;# 
  1489  0298                     	;# 
  1490  0298                     	;# 
  1491  0299                     	;# 
  1492  029A                     	;# 
  1493  0394                     	;# 
  1494  0395                     	;# 
  1495  0396                     	;# 
  1496  0FE4                     	;# 
  1497  0FE5                     	;# 
  1498  0FE6                     	;# 
  1499  0FE7                     	;# 
  1500  0FE8                     	;# 
  1501  0FE9                     	;# 
  1502  0FEA                     	;# 
  1503  0FEB                     	;# 
  1504  0FED                     	;# 
  1505  0FEE                     	;# 
  1506  0FEF                     	;# 
  1507  0000                     	;# 
  1508  0001                     	;# 
  1509  0002                     	;# 
  1510  0003                     	;# 
  1511  0004                     	;# 
  1512  0005                     	;# 
  1513  0006                     	;# 
  1514  0007                     	;# 
  1515  0008                     	;# 
  1516  0009                     	;# 
  1517  000A                     	;# 
  1518  000B                     	;# 
  1519  000C                     	;# 
  1520  000D                     	;# 
  1521  000E                     	;# 
  1522  0010                     	;# 
  1523  0011                     	;# 
  1524  0012                     	;# 
  1525  0015                     	;# 
  1526  0016                     	;# 
  1527  0016                     	;# 
  1528  0017                     	;# 
  1529  0018                     	;# 
  1530  0019                     	;# 
  1531  001A                     	;# 
  1532  001B                     	;# 
  1533  001C                     	;# 
  1534  008C                     	;# 
  1535  008D                     	;# 
  1536  008E                     	;# 
  1537  0090                     	;# 
  1538  0091                     	;# 
  1539  0092                     	;# 
  1540  0095                     	;# 
  1541  0096                     	;# 
  1542  0097                     	;# 
  1543  0099                     	;# 
  1544  009A                     	;# 
  1545  009B                     	;# 
  1546  009B                     	;# 
  1547  009C                     	;# 
  1548  009D                     	;# 
  1549  009E                     	;# 
  1550  010C                     	;# 
  1551  010D                     	;# 
  1552  010E                     	;# 
  1553  0116                     	;# 
  1554  0117                     	;# 
  1555  011D                     	;# 
  1556  018C                     	;# 
  1557  018D                     	;# 
  1558  018E                     	;# 
  1559  0191                     	;# 
  1560  0191                     	;# 
  1561  0192                     	;# 
  1562  0193                     	;# 
  1563  0193                     	;# 
  1564  0194                     	;# 
  1565  0195                     	;# 
  1566  0196                     	;# 
  1567  0197                     	;# 
  1568  0199                     	;# 
  1569  019A                     	;# 
  1570  019B                     	;# 
  1571  019B                     	;# 
  1572  019B                     	;# 
  1573  019B                     	;# 
  1574  019C                     	;# 
  1575  019C                     	;# 
  1576  019D                     	;# 
  1577  019E                     	;# 
  1578  019F                     	;# 
  1579  020D                     	;# 
  1580  0210                     	;# 
  1581  0211                     	;# 
  1582  0211                     	;# 
  1583  0212                     	;# 
  1584  0212                     	;# 
  1585  0213                     	;# 
  1586  0213                     	;# 
  1587  0214                     	;# 
  1588  0214                     	;# 
  1589  0215                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0216                     	;# 
  1593  0216                     	;# 
  1594  0217                     	;# 
  1595  0217                     	;# 
  1596  0291                     	;# 
  1597  0291                     	;# 
  1598  0292                     	;# 
  1599  0293                     	;# 
  1600  0298                     	;# 
  1601  0298                     	;# 
  1602  0299                     	;# 
  1603  029A                     	;# 
  1604  0394                     	;# 
  1605  0395                     	;# 
  1606  0396                     	;# 
  1607  0FE4                     	;# 
  1608  0FE5                     	;# 
  1609  0FE6                     	;# 
  1610  0FE7                     	;# 
  1611  0FE8                     	;# 
  1612  0FE9                     	;# 
  1613  0FEA                     	;# 
  1614  0FEB                     	;# 
  1615  0FED                     	;# 
  1616  0FEE                     	;# 
  1617  0FEF                     	;# 
  1618  0000                     	;# 
  1619  0001                     	;# 
  1620  0002                     	;# 
  1621  0003                     	;# 
  1622  0004                     	;# 
  1623  0005                     	;# 
  1624  0006                     	;# 
  1625  0007                     	;# 
  1626  0008                     	;# 
  1627  0009                     	;# 
  1628  000A                     	;# 
  1629  000B                     	;# 
  1630  000C                     	;# 
  1631  000D                     	;# 
  1632  000E                     	;# 
  1633  0010                     	;# 
  1634  0011                     	;# 
  1635  0012                     	;# 
  1636  0015                     	;# 
  1637  0016                     	;# 
  1638  0016                     	;# 
  1639  0017                     	;# 
  1640  0018                     	;# 
  1641  0019                     	;# 
  1642  001A                     	;# 
  1643  001B                     	;# 
  1644  001C                     	;# 
  1645  008C                     	;# 
  1646  008D                     	;# 
  1647  008E                     	;# 
  1648  0090                     	;# 
  1649  0091                     	;# 
  1650  0092                     	;# 
  1651  0095                     	;# 
  1652  0096                     	;# 
  1653  0097                     	;# 
  1654  0099                     	;# 
  1655  009A                     	;# 
  1656  009B                     	;# 
  1657  009B                     	;# 
  1658  009C                     	;# 
  1659  009D                     	;# 
  1660  009E                     	;# 
  1661  010C                     	;# 
  1662  010D                     	;# 
  1663  010E                     	;# 
  1664  0116                     	;# 
  1665  0117                     	;# 
  1666  011D                     	;# 
  1667  018C                     	;# 
  1668  018D                     	;# 
  1669  018E                     	;# 
  1670  0191                     	;# 
  1671  0191                     	;# 
  1672  0192                     	;# 
  1673  0193                     	;# 
  1674  0193                     	;# 
  1675  0194                     	;# 
  1676  0195                     	;# 
  1677  0196                     	;# 
  1678  0197                     	;# 
  1679  0199                     	;# 
  1680  019A                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019B                     	;# 
  1684  019B                     	;# 
  1685  019C                     	;# 
  1686  019C                     	;# 
  1687  019D                     	;# 
  1688  019E                     	;# 
  1689  019F                     	;# 
  1690  020D                     	;# 
  1691  0210                     	;# 
  1692  0211                     	;# 
  1693  0211                     	;# 
  1694  0212                     	;# 
  1695  0212                     	;# 
  1696  0213                     	;# 
  1697  0213                     	;# 
  1698  0214                     	;# 
  1699  0214                     	;# 
  1700  0215                     	;# 
  1701  0215                     	;# 
  1702  0215                     	;# 
  1703  0216                     	;# 
  1704  0216                     	;# 
  1705  0217                     	;# 
  1706  0217                     	;# 
  1707  0291                     	;# 
  1708  0291                     	;# 
  1709  0292                     	;# 
  1710  0293                     	;# 
  1711  0298                     	;# 
  1712  0298                     	;# 
  1713  0299                     	;# 
  1714  029A                     	;# 
  1715  0394                     	;# 
  1716  0395                     	;# 
  1717  0396                     	;# 
  1718  0FE4                     	;# 
  1719  0FE5                     	;# 
  1720  0FE6                     	;# 
  1721  0FE7                     	;# 
  1722  0FE8                     	;# 
  1723  0FE9                     	;# 
  1724  0FEA                     	;# 
  1725  0FEB                     	;# 
  1726  0FED                     	;# 
  1727  0FEE                     	;# 
  1728  0FEF                     	;# 
  1729  0000                     	;# 
  1730  0001                     	;# 
  1731  0002                     	;# 
  1732  0003                     	;# 
  1733  0004                     	;# 
  1734  0005                     	;# 
  1735  0006                     	;# 
  1736  0007                     	;# 
  1737  0008                     	;# 
  1738  0009                     	;# 
  1739  000A                     	;# 
  1740  000B                     	;# 
  1741  000C                     	;# 
  1742  000D                     	;# 
  1743  000E                     	;# 
  1744  0010                     	;# 
  1745  0011                     	;# 
  1746  0012                     	;# 
  1747  0015                     	;# 
  1748  0016                     	;# 
  1749  0016                     	;# 
  1750  0017                     	;# 
  1751  0018                     	;# 
  1752  0019                     	;# 
  1753  001A                     	;# 
  1754  001B                     	;# 
  1755  001C                     	;# 
  1756  008C                     	;# 
  1757  008D                     	;# 
  1758  008E                     	;# 
  1759  0090                     	;# 
  1760  0091                     	;# 
  1761  0092                     	;# 
  1762  0095                     	;# 
  1763  0096                     	;# 
  1764  0097                     	;# 
  1765  0099                     	;# 
  1766  009A                     	;# 
  1767  009B                     	;# 
  1768  009B                     	;# 
  1769  009C                     	;# 
  1770  009D                     	;# 
  1771  009E                     	;# 
  1772  010C                     	;# 
  1773  010D                     	;# 
  1774  010E                     	;# 
  1775  0116                     	;# 
  1776  0117                     	;# 
  1777  011D                     	;# 
  1778  018C                     	;# 
  1779  018D                     	;# 
  1780  018E                     	;# 
  1781  0191                     	;# 
  1782  0191                     	;# 
  1783  0192                     	;# 
  1784  0193                     	;# 
  1785  0193                     	;# 
  1786  0194                     	;# 
  1787  0195                     	;# 
  1788  0196                     	;# 
  1789  0197                     	;# 
  1790  0199                     	;# 
  1791  019A                     	;# 
  1792  019B                     	;# 
  1793  019B                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019C                     	;# 
  1797  019C                     	;# 
  1798  019D                     	;# 
  1799  019E                     	;# 
  1800  019F                     	;# 
  1801  020D                     	;# 
  1802  0210                     	;# 
  1803  0211                     	;# 
  1804  0211                     	;# 
  1805  0212                     	;# 
  1806  0212                     	;# 
  1807  0213                     	;# 
  1808  0213                     	;# 
  1809  0214                     	;# 
  1810  0214                     	;# 
  1811  0215                     	;# 
  1812  0215                     	;# 
  1813  0215                     	;# 
  1814  0216                     	;# 
  1815  0216                     	;# 
  1816  0217                     	;# 
  1817  0217                     	;# 
  1818  0291                     	;# 
  1819  0291                     	;# 
  1820  0292                     	;# 
  1821  0293                     	;# 
  1822  0298                     	;# 
  1823  0298                     	;# 
  1824  0299                     	;# 
  1825  029A                     	;# 
  1826  0394                     	;# 
  1827  0395                     	;# 
  1828  0396                     	;# 
  1829  0FE4                     	;# 
  1830  0FE5                     	;# 
  1831  0FE6                     	;# 
  1832  0FE7                     	;# 
  1833  0FE8                     	;# 
  1834  0FE9                     	;# 
  1835  0FEA                     	;# 
  1836  0FEB                     	;# 
  1837  0FED                     	;# 
  1838  0FEE                     	;# 
  1839  0FEF                     	;# 
  1840  0000                     	;# 
  1841  0001                     	;# 
  1842  0002                     	;# 
  1843  0003                     	;# 
  1844  0004                     	;# 
  1845  0005                     	;# 
  1846  0006                     	;# 
  1847  0007                     	;# 
  1848  0008                     	;# 
  1849  0009                     	;# 
  1850  000A                     	;# 
  1851  000B                     	;# 
  1852  000C                     	;# 
  1853  000D                     	;# 
  1854  000E                     	;# 
  1855  0010                     	;# 
  1856  0011                     	;# 
  1857  0012                     	;# 
  1858  0015                     	;# 
  1859  0016                     	;# 
  1860  0016                     	;# 
  1861  0017                     	;# 
  1862  0018                     	;# 
  1863  0019                     	;# 
  1864  001A                     	;# 
  1865  001B                     	;# 
  1866  001C                     	;# 
  1867  008C                     	;# 
  1868  008D                     	;# 
  1869  008E                     	;# 
  1870  0090                     	;# 
  1871  0091                     	;# 
  1872  0092                     	;# 
  1873  0095                     	;# 
  1874  0096                     	;# 
  1875  0097                     	;# 
  1876  0099                     	;# 
  1877  009A                     	;# 
  1878  009B                     	;# 
  1879  009B                     	;# 
  1880  009C                     	;# 
  1881  009D                     	;# 
  1882  009E                     	;# 
  1883  010C                     	;# 
  1884  010D                     	;# 
  1885  010E                     	;# 
  1886  0116                     	;# 
  1887  0117                     	;# 
  1888  011D                     	;# 
  1889  018C                     	;# 
  1890  018D                     	;# 
  1891  018E                     	;# 
  1892  0191                     	;# 
  1893  0191                     	;# 
  1894  0192                     	;# 
  1895  0193                     	;# 
  1896  0193                     	;# 
  1897  0194                     	;# 
  1898  0195                     	;# 
  1899  0196                     	;# 
  1900  0197                     	;# 
  1901  0199                     	;# 
  1902  019A                     	;# 
  1903  019B                     	;# 
  1904  019B                     	;# 
  1905  019B                     	;# 
  1906  019B                     	;# 
  1907  019C                     	;# 
  1908  019C                     	;# 
  1909  019D                     	;# 
  1910  019E                     	;# 
  1911  019F                     	;# 
  1912  020D                     	;# 
  1913  0210                     	;# 
  1914  0211                     	;# 
  1915  0211                     	;# 
  1916  0212                     	;# 
  1917  0212                     	;# 
  1918  0213                     	;# 
  1919  0213                     	;# 
  1920  0214                     	;# 
  1921  0214                     	;# 
  1922  0215                     	;# 
  1923  0215                     	;# 
  1924  0215                     	;# 
  1925  0216                     	;# 
  1926  0216                     	;# 
  1927  0217                     	;# 
  1928  0217                     	;# 
  1929  0291                     	;# 
  1930  0291                     	;# 
  1931  0292                     	;# 
  1932  0293                     	;# 
  1933  0298                     	;# 
  1934  0298                     	;# 
  1935  0299                     	;# 
  1936  029A                     	;# 
  1937  0394                     	;# 
  1938  0395                     	;# 
  1939  0396                     	;# 
  1940  0FE4                     	;# 
  1941  0FE5                     	;# 
  1942  0FE6                     	;# 
  1943  0FE7                     	;# 
  1944  0FE8                     	;# 
  1945  0FE9                     	;# 
  1946  0FEA                     	;# 
  1947  0FEB                     	;# 
  1948  0FED                     	;# 
  1949  0FEE                     	;# 
  1950  0FEF                     	;# 
  1951  0000                     	;# 
  1952  0001                     	;# 
  1953  0002                     	;# 
  1954  0003                     	;# 
  1955  0004                     	;# 
  1956  0005                     	;# 
  1957  0006                     	;# 
  1958  0007                     	;# 
  1959  0008                     	;# 
  1960  0009                     	;# 
  1961  000A                     	;# 
  1962  000B                     	;# 
  1963  000C                     	;# 
  1964  000D                     	;# 
  1965  000E                     	;# 
  1966  0010                     	;# 
  1967  0011                     	;# 
  1968  0012                     	;# 
  1969  0015                     	;# 
  1970  0016                     	;# 
  1971  0016                     	;# 
  1972  0017                     	;# 
  1973  0018                     	;# 
  1974  0019                     	;# 
  1975  001A                     	;# 
  1976  001B                     	;# 
  1977  001C                     	;# 
  1978  008C                     	;# 
  1979  008D                     	;# 
  1980  008E                     	;# 
  1981  0090                     	;# 
  1982  0091                     	;# 
  1983  0092                     	;# 
  1984  0095                     	;# 
  1985  0096                     	;# 
  1986  0097                     	;# 
  1987  0099                     	;# 
  1988  009A                     	;# 
  1989  009B                     	;# 
  1990  009B                     	;# 
  1991  009C                     	;# 
  1992  009D                     	;# 
  1993  009E                     	;# 
  1994  010C                     	;# 
  1995  010D                     	;# 
  1996  010E                     	;# 
  1997  0116                     	;# 
  1998  0117                     	;# 
  1999  011D                     	;# 
  2000  018C                     	;# 
  2001  018D                     	;# 
  2002  018E                     	;# 
  2003  0191                     	;# 
  2004  0191                     	;# 
  2005  0192                     	;# 
  2006  0193                     	;# 
  2007  0193                     	;# 
  2008  0194                     	;# 
  2009  0195                     	;# 
  2010  0196                     	;# 
  2011  0197                     	;# 
  2012  0199                     	;# 
  2013  019A                     	;# 
  2014  019B                     	;# 
  2015  019B                     	;# 
  2016  019B                     	;# 
  2017  019B                     	;# 
  2018  019C                     	;# 
  2019  019C                     	;# 
  2020  019D                     	;# 
  2021  019E                     	;# 
  2022  019F                     	;# 
  2023  020D                     	;# 
  2024  0210                     	;# 
  2025  0211                     	;# 
  2026  0211                     	;# 
  2027  0212                     	;# 
  2028  0212                     	;# 
  2029  0213                     	;# 
  2030  0213                     	;# 
  2031  0214                     	;# 
  2032  0214                     	;# 
  2033  0215                     	;# 
  2034  0215                     	;# 
  2035  0215                     	;# 
  2036  0216                     	;# 
  2037  0216                     	;# 
  2038  0217                     	;# 
  2039  0217                     	;# 
  2040  0291                     	;# 
  2041  0291                     	;# 
  2042  0292                     	;# 
  2043  0293                     	;# 
  2044  0298                     	;# 
  2045  0298                     	;# 
  2046  0299                     	;# 
  2047  029A                     	;# 
  2048  0394                     	;# 
  2049  0395                     	;# 
  2050  0396                     	;# 
  2051  0FE4                     	;# 
  2052  0FE5                     	;# 
  2053  0FE6                     	;# 
  2054  0FE7                     	;# 
  2055  0FE8                     	;# 
  2056  0FE9                     	;# 
  2057  0FEA                     	;# 
  2058  0FEB                     	;# 
  2059  0FED                     	;# 
  2060  0FEE                     	;# 
  2061  0FEF                     	;# 
  2062                           
  2063                           	psect	idataBANK1
  2064  04C6                     __pidataBANK1:	
  2065                           
  2066                           ;initializer for __product
  2067  04C6  3463               	retlw	99
  2068  04C7  3402               	retlw	2
  2069  04C8  3400               	retlw	0
  2070  04C9  3400               	retlw	0
  2071  04CA  3400               	retlw	0
  2072  04CB  3400               	retlw	0
  2073  04CC  3400               	retlw	0
  2074  04CD  3400               	retlw	0
  2075  04CE  3400               	retlw	0
  2076  04CF  3400               	retlw	0
  2077  04D0  3400               	retlw	0
  2078  04D1  3400               	retlw	0
  2079  04D2  34FF               	retlw	255
  2080  04D3  34FF               	retlw	255
  2081  04D4  34FF               	retlw	255
  2082  04D5  3400               	retlw	0
  2083  04D6  3400               	retlw	0
  2084  04D7  3400               	retlw	0
  2085  04D8  3400               	retlw	0
  2086  04D9  3400               	retlw	0
  2087  04DA  3400               	retlw	0
  2088  04DB  3400               	retlw	0
  2089  04DC  3400               	retlw	0
  2090  04DD  3400               	retlw	0
  2091  04DE  3400               	retlw	0
  2092  04DF  3400               	retlw	0
  2093  04E0  3400               	retlw	0
  2094  04E1  3400               	retlw	0
  2095  04E2  3400               	retlw	0
  2096  04E3  3400               	retlw	0
  2097  04E4  3400               	retlw	0
  2098  04E5  3400               	retlw	0
  2099                           
  2100                           	psect	stringtext
  2101  0200                     __pstringtext:	
  2102  0200                     _CC2500_registers_address:	
  2103  0200  3403               	retlw	3
  2104  0201  3416               	retlw	22
  2105  0202  3417               	retlw	23
  2106  0203  341E               	retlw	30
  2107  0204  341F               	retlw	31
  2108  0205  3420               	retlw	32
  2109  0206  342A               	retlw	42
  2110  0207  342B               	retlw	43
  2111  0208  340B               	retlw	11
  2112  0209  340C               	retlw	12
  2113  020A  340D               	retlw	13
  2114  020B  340E               	retlw	14
  2115  020C  340F               	retlw	15
  2116  020D  3410               	retlw	16
  2117  020E  3411               	retlw	17
  2118  020F  3412               	retlw	18
  2119  0210  3413               	retlw	19
  2120  0211  3414               	retlw	20
  2121  0212  340A               	retlw	10
  2122  0213  3415               	retlw	21
  2123  0214  3421               	retlw	33
  2124  0215  3422               	retlw	34
  2125  0216  3418               	retlw	24
  2126  0217  3419               	retlw	25
  2127  0218  341A               	retlw	26
  2128  0219  341B               	retlw	27
  2129  021A  341C               	retlw	28
  2130  021B  341D               	retlw	29
  2131  021C  3423               	retlw	35
  2132  021D  3424               	retlw	36
  2133  021E  3425               	retlw	37
  2134  021F  3426               	retlw	38
  2135  0220  3429               	retlw	41
  2136  0221  342C               	retlw	44
  2137  0222  342D               	retlw	45
  2138  0223  342E               	retlw	46
  2139  0224  3400               	retlw	0
  2140  0225  3401               	retlw	1
  2141  0226  3402               	retlw	2
  2142  0227  3407               	retlw	7
  2143  0228  3408               	retlw	8
  2144  0229  3409               	retlw	9
  2145  022A  3406               	retlw	6
  2146  022B  3404               	retlw	4
  2147  022C  3405               	retlw	5
  2148  022D  3427               	retlw	39
  2149  022E  3428               	retlw	40
  2150  022F                     __end_of_CC2500_registers_address:	
  2151  022F                     _CC2500_rfSettings:	
  2152  022F  3407               	retlw	7
  2153  0230  3407               	retlw	7
  2154  0231  3430               	retlw	48
  2155  0232  3487               	retlw	135
  2156  0233  346B               	retlw	107
  2157  0234  34F8               	retlw	248
  2158  0235  347F               	retlw	127
  2159  0236  343F               	retlw	63
  2160  0237  3409               	retlw	9
  2161  0238  3400               	retlw	0
  2162  0239  345C               	retlw	92
  2163  023A  34A7               	retlw	167
  2164  023B  3462               	retlw	98
  2165  023C  3486               	retlw	134
  2166  023D  3483               	retlw	131
  2167  023E  3403               	retlw	3
  2168  023F  3422               	retlw	34
  2169  0240  34F8               	retlw	248
  2170  0241  3400               	retlw	0
  2171  0242  3444               	retlw	68
  2172  0243  34B6               	retlw	182
  2173  0244  3410               	retlw	16
  2174  0245  3418               	retlw	24
  2175  0246  341D               	retlw	29
  2176  0247  341C               	retlw	28
  2177  0248  34C7               	retlw	199
  2178  0249  3400               	retlw	0
  2179  024A  34B2               	retlw	178
  2180  024B  34EA               	retlw	234
  2181  024C  340A               	retlw	10
  2182  024D  3400               	retlw	0
  2183  024E  3411               	retlw	17
  2184  024F  3459               	retlw	89
  2185  0250  3488               	retlw	136
  2186  0251  3431               	retlw	49
  2187  0252  340B               	retlw	11
  2188  0253  342F               	retlw	47
  2189  0254  342E               	retlw	46
  2190  0255  3406               	retlw	6
  2191  0256  3404               	retlw	4
  2192  0257  3405               	retlw	5
  2193  0258  3400               	retlw	0
  2194  0259  3430               	retlw	48
  2195  025A  34D3               	retlw	211
  2196  025B  3491               	retlw	145
  2197  025C  3441               	retlw	65
  2198  025D  3400               	retlw	0
  2199  025E                     __end_of_CC2500_rfSettings:	
  2200  025E                     _CC2500_patable_vaule:	
  2201  025E  34FE               	retlw	254
  2202  025F  34FE               	retlw	254
  2203  0260  34FE               	retlw	254
  2204  0261  34FE               	retlw	254
  2205  0262  34FE               	retlw	254
  2206  0263  34FE               	retlw	254
  2207  0264  34FE               	retlw	254
  2208  0265  34FE               	retlw	254
  2209  0266                     __end_of_CC2500_patable_vaule:	
  2210                           
  2211                           	psect	nvCOMMON
  2212  0079                     __pnvCOMMON:	
  2213  0079                     _product:	
  2214  0079                     	ds	1
  2215                           
  2216                           	psect	nvBANK0
  2217  005E                     __pnvBANK0:	
  2218  005E                     _Tx_Length:	
  2219  005E                     	ds	1
  2220  000C                     _PORTA	set	12
  2221  000D                     _PORTB	set	13
  2222  000E                     _PORTC	set	14
  2223  0018                     _T1CON	set	24
  2224  0017                     _TMR1H	set	23
  2225  0016                     _TMR1L	set	22
  2226  005F                     _GIE	set	95
  2227  005E                     _PEIE	set	94
  2228  0060                     _RA0	set	96
  2229  0061                     _RA1	set	97
  2230  0062                     _RA2	set	98
  2231  006D                     _RB5	set	109
  2232  0070                     _RC0	set	112
  2233  0071                     _RC1	set	113
  2234  0073                     _RC3	set	115
  2235  0074                     _RC4	set	116
  2236  0075                     _RC5	set	117
  2237  008D                     _RCIF	set	141
  2238  0088                     _TMR1IF	set	136
  2239  008C                     _TXIF	set	140
  2240  0099                     _OSCCON	set	153
  2241  008C                     _TRISA	set	140
  2242  008D                     _TRISB	set	141
  2243  008E                     _TRISC	set	142
  2244  048D                     _RCIE	set	1165
  2245  0488                     _TMR1IE	set	1160
  2246  0476                     _TRISC6	set	1142
  2247  0477                     _TRISC7	set	1143
  2248  048C                     _TXIE	set	1164
  2249  010C                     _LATA	set	268
  2250  010D                     _LATB	set	269
  2251  010E                     _LATC	set	270
  2252  018C                     _ANSELA	set	396
  2253  018D                     _ANSELB	set	397
  2254  018E                     _ANSELC	set	398
  2255  0199                     _RCREG	set	409
  2256  019D                     _RCSTA	set	413
  2257  019B                     _SPBRG	set	411
  2258  019C                     _SPBRGH	set	412
  2259  019A                     _TXREG	set	410
  2260  019E                     _TXSTA	set	414
  2261  0CFB                     _BRG16	set	3323
  2262  0CEE                     _RX9	set	3310
  2263  0CF6                     _TX9	set	3318
  2264                           
  2265                           ; #config settings
  2266  0000                     
  2267                           	psect	cinit
  2268  0015                     start_initialization:	
  2269  0015                     __initialization:	
  2270                           
  2271                           ; Clear objects allocated to BITCOMMON
  2272  0015  01F6               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2273                           
  2274                           ; Clear objects allocated to COMMON
  2275  0016  01F7               	clrf	__pbssCOMMON& (0+127)
  2276  0017  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  2277                           
  2278                           ; Clear objects allocated to BANK0
  2279  0018  3020               	movlw	low __pbssBANK0
  2280  0019  0084               	movwf	4
  2281  001A  3000               	movlw	high __pbssBANK0
  2282  001B  0085               	movwf	5
  2283  001C  3032               	movlw	50
  2284  001D  3186  2680  3180   	fcall	clear_ram0
  2285                           
  2286                           ; Clear objects allocated to BANK1
  2287  0020  30C0               	movlw	low __pbssBANK1
  2288  0021  0084               	movwf	4
  2289  0022  3000               	movlw	high __pbssBANK1
  2290  0023  0085               	movwf	5
  2291  0024  301E               	movlw	30
  2292  0025  3186  2680  3180   	fcall	clear_ram0
  2293                           
  2294                           ; Initialize objects allocated to BANK1
  2295  0028  30C6               	movlw	low __pidataBANK1
  2296  0029  0084               	movwf	4
  2297  002A  3084               	movlw	(high __pidataBANK1)| (0+128)
  2298  002B  0085               	movwf	5
  2299  002C  30A0               	movlw	low __pdataBANK1
  2300  002D  0086               	movwf	6
  2301  002E  3000               	movlw	high __pdataBANK1
  2302  002F  0087               	movwf	7
  2303  0030  3020               	movlw	32
  2304  0031  3186  2686         	fcall	init_ram
  2305  0033                     end_of_initialization:	
  2306                           ;End of C runtime variable initialization code
  2307                           
  2308  0033                     __end_of__initialization:	
  2309  0033  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2310  0034  0020               	movlb	0
  2311  0035  3184  2CA3         	ljmp	_main	;jump to C main() function
  2312                           
  2313                           	psect	bitbssCOMMON
  2314  03B0                     __pbitbssCOMMON:	
  2315  03B0                     _Receive_OK:	
  2316  03B0                     	ds	1
  2317  03B1                     _Transceive_OK:	
  2318  03B1                     	ds	1
  2319                           
  2320                           	psect	bssCOMMON
  2321  0077                     __pbssCOMMON:	
  2322  0077                     _SPI0Buffer:	
  2323  0077                     	ds	1
  2324  0078                     _s_data:	
  2325  0078                     	ds	1
  2326                           
  2327                           	psect	bssBANK0
  2328  0020                     __pbssBANK0:	
  2329  0020                     _myMain:	
  2330  0020                     	ds	15
  2331  002F                     _RF1:	
  2332  002F                     	ds	12
  2333  003B                     _Timer1:	
  2334  003B                     	ds	3
  2335  003E                     _RF_Count:	
  2336  003E                     	ds	2
  2337  0040                     _CRC:	
  2338  0040                     	ds	1
  2339  0041                     _RSSI:	
  2340  0041                     	ds	1
  2341  0042                     _Rx_Length:	
  2342  0042                     	ds	1
  2343  0043                     _SwDetect:	
  2344  0043                     	ds	1
  2345  0044                     _r_address:	
  2346  0044                     	ds	1
  2347  0045                     _r_data:	
  2348  0045                     	ds	1
  2349  0046                     _UART:	
  2350  0046                     	ds	12
  2351                           
  2352                           	psect	bssBANK1
  2353  00C0                     __pbssBANK1:	
  2354  00C0                     _RF_Data:	
  2355  00C0                     	ds	30
  2356                           
  2357                           	psect	dataBANK1
  2358  00A0                     __pdataBANK1:	
  2359  00A0                     __product:	
  2360  00A0                     	ds	32
  2361                           
  2362                           	psect	clrtext
  2363  0680                     clear_ram0:	
  2364                           ;	Called with FSR0 containing the base address, and
  2365                           ;	WREG with the size to clear
  2366                           
  2367  0680  0064               	clrwdt	;clear the watchdog before getting into this loop
  2368  0681                     clrloop0:	
  2369  0681  0180               	clrf	0	;clear RAM location pointed to by FSR
  2370  0682  3101               	addfsr 0,1
  2371  0683  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2372  0684  2E81               	goto	clrloop0	;have we reached the end yet?
  2373  0685  3400               	retlw	0	;all done for this memory range, return
  2374                           
  2375                           	psect	inittext
  2376  0686                     init_ram:	
  2377  0686  00FE               	movwf	126
  2378  0687                     initloop:	
  2379  0687  0012               	moviw fsr0++
  2380  0688  001E               	movwi fsr1++
  2381  0689  0BFE               	decfsz	126,f
  2382  068A  2E87               	goto	initloop
  2383  068B  3400               	retlw	0
  2384                           
  2385                           	psect	cstackCOMMON
  2386  0070                     __pcstackCOMMON:	
  2387  0070                     ?_Timeout_Counter:	
  2388  0070                     ?_set_TimeoutCleared:	
  2389                           ; 0 bytes @ 0x0
  2390                           
  2391  0070                     ?_CC2500_WriteByte:	
  2392                           ; 0 bytes @ 0x0
  2393                           
  2394  0070                     ?_CC2500_WriteCommand:	
  2395                           ; 0 bytes @ 0x0
  2396                           
  2397  0070                     ?_CC2500_ReadStatus:	
  2398                           ; 0 bytes @ 0x0
  2399                           
  2400  0070                     ?_CC2500_ReadByte:	
  2401                           ; 0 bytes @ 0x0
  2402                           
  2403  0070                     ?_CC2500_PowerRST:	
  2404                           ; 0 bytes @ 0x0
  2405                           
  2406  0070                     ?_CC2500_InitSetREG:	
  2407                           ; 0 bytes @ 0x0
  2408                           
  2409  0070                     ?_CC2500_InitPATable:	
  2410                           ; 0 bytes @ 0x0
  2411                           
  2412  0070                     ?_CC2500_ClearTXFIFO:	
  2413                           ; 0 bytes @ 0x0
  2414                           
  2415  0070                     ?_CC2500_ClearRXFIFO:	
  2416                           ; 0 bytes @ 0x0
  2417                           
  2418  0070                     ?_CC2500_FrequencyCabr:	
  2419                           ; 0 bytes @ 0x0
  2420                           
  2421  0070                     ?_CC2500_SIDLEMode:	
  2422                           ; 0 bytes @ 0x0
  2423                           
  2424  0070                     ?_Fosc_Set:	
  2425                           ; 0 bytes @ 0x0
  2426                           
  2427  0070                     ?_IO_Set:	
  2428                           ; 0 bytes @ 0x0
  2429                           
  2430  0070                     ?_TMR1_Set:	
  2431                           ; 0 bytes @ 0x0
  2432                           
  2433  0070                     ?_UART_Set:	
  2434                           ; 0 bytes @ 0x0
  2435                           
  2436  0070                     ?_TMR1_ISR:	
  2437                           ; 0 bytes @ 0x0
  2438                           
  2439  0070                     ??_TMR1_ISR:	
  2440                           ; 0 bytes @ 0x0
  2441                           
  2442  0070                     ?_UART_ISR:	
  2443                           ; 0 bytes @ 0x0
  2444                           
  2445  0070                     ??_UART_ISR:	
  2446                           ; 0 bytes @ 0x0
  2447                           
  2448  0070                     ??_getch:	
  2449                           ; 0 bytes @ 0x0
  2450                           
  2451  0070                     ?_UART_Receive:	
  2452                           ; 0 bytes @ 0x0
  2453                           
  2454  0070                     ?_UART_Transmit:	
  2455                           ; 0 bytes @ 0x0
  2456                           
  2457  0070                     ?_putch:	
  2458                           ; 0 bytes @ 0x0
  2459                           
  2460  0070                     ?_setTxData:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0070                     ?_myMain_Initialization:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0070                     ?_RF_Initialization:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0070                     ?_myUARTtoRF_Initialization:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0070                     ?_my_MainTimer:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0070                     ?_RF_Main:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0070                     ?_myUARTtoRF_Main:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0070                     ?_setRF_Initialization:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0070                     ?_setRF_Main:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_getRxData:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_setLog_Code:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_setControl_Lights_Table:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_CC2500_TxData:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_CC2500_RxData:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_CC2500_PowerOnInitial:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_Mcu_Initialization:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_ISR:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_UART_Main:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_getch:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_getMain_All_Error_Status:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0070                     getMain_All_Error_Status@command:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523                           
  2524                           ; 1 bytes @ 0x0
  2525  0070                     	ds	1
  2526  0071                     UART_ISR@i:	
  2527                           
  2528                           ; 2 bytes @ 0x1
  2529  0071                     	ds	2
  2530  0073                     ??_ISR:	
  2531                           
  2532                           ; 0 bytes @ 0x3
  2533  0073                     	ds	1
  2534  0074                     ??_Timeout_Counter:	
  2535  0074                     ??_set_TimeoutCleared:	
  2536                           ; 0 bytes @ 0x4
  2537                           
  2538  0074                     ??_CC2500_WriteByte:	
  2539                           ; 0 bytes @ 0x4
  2540                           
  2541  0074                     ??_CC2500_ReadByte:	
  2542                           ; 0 bytes @ 0x4
  2543                           
  2544  0074                     ?_DelayTime_1us:	
  2545                           ; 0 bytes @ 0x4
  2546                           
  2547  0074                     ??_Fosc_Set:	
  2548                           ; 0 bytes @ 0x4
  2549                           
  2550  0074                     ??_IO_Set:	
  2551                           ; 0 bytes @ 0x4
  2552                           
  2553  0074                     ??_TMR1_Set:	
  2554                           ; 0 bytes @ 0x4
  2555                           
  2556  0074                     ??_UART_Set:	
  2557                           ; 0 bytes @ 0x4
  2558                           
  2559  0074                     ??_putch:	
  2560                           ; 0 bytes @ 0x4
  2561                           
  2562  0074                     ??_setTxData:	
  2563                           ; 0 bytes @ 0x4
  2564                           
  2565  0074                     ??_myMain_Initialization:	
  2566                           ; 0 bytes @ 0x4
  2567                           
  2568  0074                     ??_myUARTtoRF_Initialization:	
  2569                           ; 0 bytes @ 0x4
  2570                           
  2571  0074                     ??_my_MainTimer:	
  2572                           ; 0 bytes @ 0x4
  2573                           
  2574  0074                     ??_setRF_Initialization:	
  2575                           ; 0 bytes @ 0x4
  2576                           
  2577  0074                     ??_setLog_Code:	
  2578                           ; 0 bytes @ 0x4
  2579                           
  2580  0074                     ??_Mcu_Initialization:	
  2581                           ; 0 bytes @ 0x4
  2582                           
  2583  0074                     ??_getMain_All_Error_Status:	
  2584                           ; 0 bytes @ 0x4
  2585                           
  2586  0074                     putch@byte:	
  2587                           ; 0 bytes @ 0x4
  2588                           
  2589  0074                     getMain_All_Error_Status@status:	
  2590                           ; 1 bytes @ 0x4
  2591                           
  2592  0074                     DelayTime_1us@count:	
  2593                           ; 1 bytes @ 0x4
  2594                           
  2595                           
  2596                           ; 2 bytes @ 0x4
  2597  0074                     	ds	1
  2598  0075                     ??_UART_Receive:	
  2599  0075                     ??_UART_Transmit:	
  2600                           ; 0 bytes @ 0x5
  2601                           
  2602  0075                     ??_RF_Initialization:	
  2603                           ; 0 bytes @ 0x5
  2604                           
  2605  0075                     ??_myUARTtoRF_Main:	
  2606                           ; 0 bytes @ 0x5
  2607                           
  2608  0075                     ??_getRxData:	
  2609                           ; 0 bytes @ 0x5
  2610                           
  2611  0075                     ??_setControl_Lights_Table:	
  2612                           ; 0 bytes @ 0x5
  2613                           
  2614  0075                     CC2500_WriteByte@loop_a:	
  2615                           ; 0 bytes @ 0x5
  2616                           
  2617  0075                     CC2500_ReadByte@loop_b:	
  2618                           ; 1 bytes @ 0x5
  2619                           
  2620                           
  2621                           ; 1 bytes @ 0x5
  2622  0075                     	ds	1
  2623  0076                     ??_CC2500_ClearTXFIFO:	
  2624  0076                     ??_CC2500_ClearRXFIFO:	
  2625                           ; 0 bytes @ 0x6
  2626                           
  2627  0076                     ??_CC2500_FrequencyCabr:	
  2628                           ; 0 bytes @ 0x6
  2629                           
  2630  0076                     ??_CC2500_SIDLEMode:	
  2631                           ; 0 bytes @ 0x6
  2632                           
  2633  0076                     ??_DelayTime_1us:	
  2634                           ; 0 bytes @ 0x6
  2635                           
  2636  0076                     ??_RF_Main:	
  2637                           ; 0 bytes @ 0x6
  2638                           
  2639  0076                     ??_CC2500_PowerOnInitial:	
  2640                           ; 0 bytes @ 0x6
  2641                           
  2642  0076                     ??_UART_Main:	
  2643                           ; 0 bytes @ 0x6
  2644                           
  2645  0076                     ??_main:	
  2646                           ; 0 bytes @ 0x6
  2647                           
  2648                           
  2649                           	psect	cstackBANK0
  2650  0052                     __pcstackBANK0:	
  2651                           ; 0 bytes @ 0x6
  2652                           
  2653  0052                     ??_CC2500_WriteCommand:	
  2654  0052                     ??_CC2500_ReadStatus:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0052                     ?_CC2500_WriteREG:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0052                     CC2500_WriteREG@value:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0052                     getRxData@error:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0052                     DelayTime_1us@i:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0052                     UART_Transmit@i:	
  2670                           ; 2 bytes @ 0x0
  2671                           
  2672                           
  2673                           ; 2 bytes @ 0x0
  2674  0052                     	ds	1
  2675  0053                     ??_CC2500_WriteREG:	
  2676  0053                     CC2500_WriteCommand@command:	
  2677                           ; 0 bytes @ 0x1
  2678                           
  2679  0053                     CC2500_ReadStatus@status_addr:	
  2680                           ; 1 bytes @ 0x1
  2681                           
  2682                           
  2683                           ; 1 bytes @ 0x1
  2684  0053                     	ds	1
  2685  0054                     ??_CC2500_TxData:	
  2686  0054                     ??_CC2500_RxData:	
  2687                           ; 0 bytes @ 0x2
  2688                           
  2689  0054                     CC2500_WriteREG@w_addr:	
  2690                           ; 0 bytes @ 0x2
  2691                           
  2692  0054                     DelayTime_1us@j:	
  2693                           ; 1 bytes @ 0x2
  2694                           
  2695                           
  2696                           ; 2 bytes @ 0x2
  2697  0054                     	ds	1
  2698  0055                     ??_CC2500_InitSetREG:	
  2699  0055                     ??_CC2500_InitPATable:	
  2700                           ; 0 bytes @ 0x3
  2701                           
  2702  0055                     CC2500_TxData@loop_e:	
  2703                           ; 0 bytes @ 0x3
  2704                           
  2705  0055                     CC2500_RxData@loop_f:	
  2706                           ; 1 bytes @ 0x3
  2707                           
  2708                           
  2709                           ; 1 bytes @ 0x3
  2710  0055                     	ds	1
  2711  0056                     ??_CC2500_PowerRST:	
  2712  0056                     ??_setRF_Main:	
  2713                           ; 0 bytes @ 0x4
  2714                           
  2715  0056                     CC2500_InitSetREG@temp1:	
  2716                           ; 0 bytes @ 0x4
  2717                           
  2718  0056                     CC2500_InitPATable@temp:	
  2719                           ; 1 bytes @ 0x4
  2720                           
  2721                           
  2722                           ; 1 bytes @ 0x4
  2723  0056                     	ds	1
  2724  0057                     CC2500_InitSetREG@temp2:	
  2725  0057                     CC2500_InitPATable@loop_d:	
  2726                           ; 1 bytes @ 0x5
  2727                           
  2728  0057                     setRF_Main@loop_f:	
  2729                           ; 1 bytes @ 0x5
  2730                           
  2731                           
  2732                           ; 1 bytes @ 0x5
  2733  0057                     	ds	1
  2734  0058                     CC2500_InitSetREG@loop_c:	
  2735  0058                     setRF_Main@Receive_OK:	
  2736                           ; 1 bytes @ 0x6
  2737                           
  2738                           
  2739                           ; 1 bytes @ 0x6
  2740  0058                     	ds	1
  2741  0059                     setRF_Main@error:	
  2742                           
  2743                           ; 1 bytes @ 0x7
  2744  0059                     	ds	1
  2745  005A                     ?_main:	
  2746  005A                     main@argc:	
  2747                           ; 2 bytes @ 0x8
  2748                           
  2749                           
  2750                           ; 2 bytes @ 0x8
  2751  005A                     	ds	2
  2752  005C                     main@argv:	
  2753                           
  2754                           ; 2 bytes @ 0xA
  2755  005C                     	ds	2
  2756                           
  2757                           	psect	maintext
  2758  04A3                     __pmaintext:	
  2759 ;;
  2760 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2761 ;;
  2762 ;; *************** function _main *****************
  2763 ;; Defined at:
  2764 ;;		line 7 in file "../src/Main_B1.c"
  2765 ;; Parameters:    Size  Location     Type
  2766 ;;  argc            2    8[BANK0 ] int 
  2767 ;;  argv            2   10[BANK0 ] PTR PTR unsigned char 
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;		None
  2770 ;; Return value:  Size  Location     Type
  2771 ;;                  2    8[BANK0 ] int 
  2772 ;; Registers used:
  2773 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2774 ;; Tracked objects:
  2775 ;;		On entry : 17F/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2779 ;;      Params:         0       4       0       0       0       0       0       0
  2780 ;;      Locals:         0       0       0       0       0       0       0       0
  2781 ;;      Temps:          0       0       0       0       0       0       0       0
  2782 ;;      Totals:         0       4       0       0       0       0       0       0
  2783 ;;Total ram usage:        4 bytes
  2784 ;; Hardware stack levels required when called:    8
  2785 ;; This function calls:
  2786 ;;		_CC2500_PowerOnInitial
  2787 ;;		_Mcu_Initialization
  2788 ;;		_RF_Initialization
  2789 ;;		_RF_Main
  2790 ;;		_UART_Main
  2791 ;;		_myMain_Initialization
  2792 ;;		_myUARTtoRF_Initialization
  2793 ;;		_myUARTtoRF_Main
  2794 ;;		_my_MainTimer
  2795 ;; This function is called by:
  2796 ;;		Startup code after reset
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           
  2801                           ;psect for function _main
  2802  04A3                     _main:	
  2803                           
  2804                           ;Main_B1.c: 8: myMain_Initialization();
  2805                           
  2806                           ;incstack = 0
  2807                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2808  04A3  3186  2631  3184   	fcall	_myMain_Initialization
  2809                           
  2810                           ;Main_B1.c: 9: Mcu_Initialization();
  2811  04A6  3186  264B  3184   	fcall	_Mcu_Initialization
  2812                           
  2813                           ;Main_B1.c: 10: ;;
  2814                           ;Main_B1.c: 11: ;;
  2815                           ;Main_B1.c: 12: ;;
  2816                           ;Main_B1.c: 14: ;;
  2817                           ;Main_B1.c: 15: ;;
  2818                           ;Main_B1.c: 16: ;;
  2819                           ;Main_B1.c: 17: ;;
  2820                           ;Main_B1.c: 18: ;;
  2821                           ;Main_B1.c: 20: ;;
  2822                           ;Main_B1.c: 21: ;;
  2823                           ;Main_B1.c: 22: ;;
  2824                           ;Main_B1.c: 23: ;;
  2825                           ;Main_B1.c: 24: ;;
  2826                           ;Main_B1.c: 25: RF_Initialization();
  2827  04A9  3186  26B5  3184   	fcall	_RF_Initialization
  2828                           
  2829                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  2830  04AC  3185  25CB  3184   	fcall	_CC2500_PowerOnInitial
  2831                           
  2832                           ;Main_B1.c: 27: ;;
  2833                           ;Main_B1.c: 28: myUARTtoRF_Initialization();
  2834  04AF  3186  2692  3184   	fcall	_myUARTtoRF_Initialization
  2835  04B2                     l679:	
  2836                           ;Main_B1.c: 30: while (1) {
  2837                           
  2838                           
  2839                           ;Main_B1.c: 57: }
  2840                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2841  04B2  0020               	movlb	0	; select bank0
  2842  04B3  1C3B               	btfss	_Timer1,0
  2843  04B4  2CB2               	goto	l679
  2844                           
  2845                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2846  04B5  103B               	bcf	_Timer1,0
  2847                           
  2848                           ;Main_B1.c: 95: my_MainTimer();
  2849  04B6  3183  231E  3184   	fcall	_my_MainTimer
  2850                           
  2851                           ;Main_B1.c: 96: ;;
  2852                           ;Main_B1.c: 97: ;;
  2853                           ;Main_B1.c: 98: UART_Main();
  2854  04B9  3186  263E  3184   	fcall	_UART_Main
  2855                           
  2856                           ;Main_B1.c: 99: if (myMain.PowerON == 1) {
  2857  04BC  0020               	movlb	0	; select bank0
  2858  04BD  1C20               	btfss	_myMain,0
  2859  04BE  2CB2               	goto	l679
  2860                           
  2861                           ;Main_B1.c: 100: ;;
  2862                           ;Main_B1.c: 102: ;;
  2863                           ;Main_B1.c: 103: ;;
  2864                           ;Main_B1.c: 105: ;;
  2865                           ;Main_B1.c: 106: ;;
  2866                           ;Main_B1.c: 107: ;;
  2867                           ;Main_B1.c: 108: ;;
  2868                           ;Main_B1.c: 110: ;;
  2869                           ;Main_B1.c: 111: ;;
  2870                           ;Main_B1.c: 112: ;;
  2871                           ;Main_B1.c: 113: ;;
  2872                           ;Main_B1.c: 114: ;;
  2873                           ;Main_B1.c: 116: RF_Main();
  2874  04BF  3186  26AF  3184   	fcall	_RF_Main
  2875                           
  2876                           ;Main_B1.c: 117: ;;
  2877                           ;Main_B1.c: 118: ;;
  2878                           ;Main_B1.c: 119: myUARTtoRF_Main();
  2879  04C2  3186  26AC  3184   	fcall	_myUARTtoRF_Main
  2880  04C5  2CB2               	goto	l679
  2881  04C6                     __end_of_main:	
  2882                           ;Main_B1.c: 126: }
  2883                           ;Main_B1.c: 127: }
  2884                           ;Main_B1.c: 161: }
  2885                           ;Main_B1.c: 162: return (0);
  2886                           ;	Return value of _main is never used
  2887                           
  2888                           
  2889                           	psect	text1
  2890  031E                     __ptext1:	
  2891 ;; *************** function _my_MainTimer *****************
  2892 ;; Defined at:
  2893 ;;		line 181 in file "../src/Main_B1.c"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;		None
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;		None
  2898 ;; Return value:  Size  Location     Type
  2899 ;;		None               void
  2900 ;; Registers used:
  2901 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2907 ;;      Params:         0       0       0       0       0       0       0       0
  2908 ;;      Locals:         0       0       0       0       0       0       0       0
  2909 ;;      Temps:          0       0       0       0       0       0       0       0
  2910 ;;      Totals:         0       0       0       0       0       0       0       0
  2911 ;;Total ram usage:        0 bytes
  2912 ;; Hardware stack levels used:    1
  2913 ;; Hardware stack levels required when called:    3
  2914 ;; This function calls:
  2915 ;;		Nothing
  2916 ;; This function is called by:
  2917 ;;		_main
  2918 ;; This function uses a non-reentrant model
  2919 ;;
  2920                           
  2921                           
  2922                           ;psect for function _my_MainTimer
  2923  031E                     _my_MainTimer:	
  2924                           
  2925                           ;Main_B1.c: 183: if (myMain.PowerON == 0) {
  2926                           
  2927                           ;incstack = 0
  2928                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0]
  2929  031E  0020               	movlb	0	; select bank0
  2930  031F  1820               	btfsc	_myMain,0
  2931  0320  2B36               	goto	l3184
  2932                           
  2933                           ;Main_B1.c: 184: myMain.PowerCount++;
  2934  0321  3001               	movlw	1
  2935  0322  07A1               	addwf	_myMain+1,f
  2936  0323  3000               	movlw	0
  2937  0324  3DA2               	addwfc	_myMain+2,f
  2938                           
  2939                           ;Main_B1.c: 185: if (myMain.PowerCount == 150)
  2940  0325  3001               	movlw	1
  2941  0326  3E20               	addlw	_myMain& (0+255)
  2942  0327  0086               	movwf	6
  2943  0328  0187               	clrf	7
  2944  0329  3F40               	moviw [0]fsr1
  2945  032A  3A96               	xorlw	150
  2946  032B  1D03               	skipz
  2947  032C  2B2F               	goto	u2145
  2948  032D  3F41               	moviw [1]fsr1
  2949  032E  3A00               	xorlw	0
  2950  032F                     u2145:	
  2951  032F  1D03               	skipz
  2952  0330  2B5F               	goto	l3200
  2953                           
  2954                           ;Main_B1.c: 186: {
  2955                           ;Main_B1.c: 187: myMain.PowerCount = 0;
  2956  0331  01A1               	clrf	_myMain+1
  2957  0332  01A2               	clrf	_myMain+2
  2958                           
  2959                           ;Main_B1.c: 188: myMain.PowerON = 1;
  2960  0333  1420               	bsf	_myMain,0
  2961                           
  2962                           ;Main_B1.c: 193: ;;
  2963                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  2964  0334  1620               	bsf	_myMain,4
  2965                           
  2966                           ;Main_B1.c: 203: }
  2967                           ;Main_B1.c: 204: } else {
  2968  0335  2B5F               	goto	l3200
  2969  0336                     l3184:	
  2970                           
  2971                           ;Main_B1.c: 205: myMain.PowerCount++;
  2972  0336  3001               	movlw	1
  2973  0337  07A1               	addwf	_myMain+1,f
  2974  0338  3000               	movlw	0
  2975  0339  3DA2               	addwfc	_myMain+2,f
  2976                           
  2977                           ;Main_B1.c: 206: if (myMain.PowerCount == 100) {
  2978  033A  3001               	movlw	1
  2979  033B  3E20               	addlw	_myMain& (0+255)
  2980  033C  0086               	movwf	6
  2981  033D  0187               	clrf	7
  2982  033E  3F40               	moviw [0]fsr1
  2983  033F  3A64               	xorlw	100
  2984  0340  1D03               	skipz
  2985  0341  2B44               	goto	u2155
  2986  0342  3F41               	moviw [1]fsr1
  2987  0343  3A00               	xorlw	0
  2988  0344                     u2155:	
  2989  0344  1D03               	skipz
  2990  0345  2B48               	goto	l3190
  2991                           
  2992                           ;Main_B1.c: 207: myMain.PowerCount = 0;
  2993  0346  01A1               	clrf	_myMain+1
  2994  0347  01A2               	clrf	_myMain+2
  2995  0348                     l3190:	
  2996                           
  2997                           ;Main_B1.c: 215: }
  2998                           ;Main_B1.c: 223: myMain.Count1++;
  2999  0348  3001               	movlw	1
  3000  0349  07A5               	addwf	_myMain+5,f
  3001  034A  3000               	movlw	0
  3002  034B  3DA6               	addwfc	_myMain+6,f
  3003                           
  3004                           ;Main_B1.c: 224: if (myMain.Count1 == 100)
  3005  034C  3005               	movlw	5
  3006  034D  3E20               	addlw	_myMain& (0+255)
  3007  034E  0086               	movwf	6
  3008  034F  0187               	clrf	7
  3009  0350  3F40               	moviw [0]fsr1
  3010  0351  3A64               	xorlw	100
  3011  0352  1D03               	skipz
  3012  0353  2B56               	goto	u2165
  3013  0354  3F41               	moviw [1]fsr1
  3014  0355  3A00               	xorlw	0
  3015  0356                     u2165:	
  3016  0356  1D03               	skipz
  3017  0357  2B5F               	goto	l3200
  3018                           
  3019                           ;Main_B1.c: 225: {
  3020                           ;Main_B1.c: 226: myMain.Count1 = 0;
  3021  0358  01A5               	clrf	_myMain+5
  3022  0359  01A6               	clrf	_myMain+6
  3023                           
  3024                           ;Main_B1.c: 238: if (myMain.Flag) {
  3025  035A  1CA0               	btfss	_myMain,1
  3026  035B  2B5E               	goto	l695
  3027                           
  3028                           ;Main_B1.c: 239: myMain.Flag = 0;
  3029  035C  10A0               	bcf	_myMain,1
  3030                           
  3031                           ;Main_B1.c: 248: } else {
  3032  035D  2B5F               	goto	l3200
  3033  035E                     l695:	
  3034                           
  3035                           ;Main_B1.c: 249: myMain.Flag = 1;
  3036  035E  14A0               	bsf	_myMain,1
  3037  035F                     l3200:	
  3038                           
  3039                           ;Main_B1.c: 258: }
  3040                           ;Main_B1.c: 259: }
  3041                           ;Main_B1.c: 261: }
  3042                           ;Main_B1.c: 263: myMain.Count2++;
  3043  035F  3001               	movlw	1
  3044  0360  07A7               	addwf	_myMain+7,f
  3045  0361  3000               	movlw	0
  3046  0362  3DA8               	addwfc	_myMain+8,f
  3047                           
  3048                           ;Main_B1.c: 264: if (myMain.Count2 == 100) {
  3049  0363  3007               	movlw	7
  3050  0364  3E20               	addlw	_myMain& (0+255)
  3051  0365  0086               	movwf	6
  3052  0366  0187               	clrf	7
  3053  0367  3F40               	moviw [0]fsr1
  3054  0368  3A64               	xorlw	100
  3055  0369  1D03               	skipz
  3056  036A  2B6D               	goto	u2185
  3057  036B  3F41               	moviw [1]fsr1
  3058  036C  3A00               	xorlw	0
  3059  036D                     u2185:	
  3060  036D  1D03               	skipz
  3061  036E  0008               	return
  3062                           
  3063                           ;Main_B1.c: 265: myMain.Count2 = 0;
  3064  036F  01A7               	clrf	_myMain+7
  3065  0370  01A8               	clrf	_myMain+8
  3066  0371  0008               	return
  3067  0372                     __end_of_my_MainTimer:	
  3068                           
  3069                           	psect	text2
  3070  06AC                     __ptext2:	
  3071 ;; *************** function _myUARTtoRF_Main *****************
  3072 ;; Defined at:
  3073 ;;		line 14 in file "../src/myUARTtoRF.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;		None
  3076 ;; Auto vars:     Size  Location     Type
  3077 ;;		None
  3078 ;; Return value:  Size  Location     Type
  3079 ;;		None               void
  3080 ;; Registers used:
  3081 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3082 ;; Tracked objects:
  3083 ;;		On entry : 0/0
  3084 ;;		On exit  : 0/0
  3085 ;;		Unchanged: 0/0
  3086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3087 ;;      Params:         0       0       0       0       0       0       0       0
  3088 ;;      Locals:         0       0       0       0       0       0       0       0
  3089 ;;      Temps:          0       0       0       0       0       0       0       0
  3090 ;;      Totals:         0       0       0       0       0       0       0       0
  3091 ;;Total ram usage:        0 bytes
  3092 ;; Hardware stack levels used:    1
  3093 ;; Hardware stack levels required when called:    4
  3094 ;; This function calls:
  3095 ;;		_setTxData
  3096 ;; This function is called by:
  3097 ;;		_main
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           
  3102                           ;psect for function _myUARTtoRF_Main
  3103  06AC                     _myUARTtoRF_Main:	
  3104                           
  3105                           ;myUARTtoRF.c: 15: setTxData();
  3106                           
  3107                           ;incstack = 0
  3108                           ; Regs used in _myUARTtoRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3109  06AC  3181  218A         	fcall	_setTxData
  3110  06AE  0008               	return
  3111  06AF                     __end_of_myUARTtoRF_Main:	
  3112                           
  3113                           	psect	text3
  3114  0692                     __ptext3:	
  3115 ;; *************** function _myUARTtoRF_Initialization *****************
  3116 ;; Defined at:
  3117 ;;		line 7 in file "../src/myUARTtoRF.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;		None
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;		None
  3122 ;; Return value:  Size  Location     Type
  3123 ;;		None               void
  3124 ;; Registers used:
  3125 ;;		None
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3131 ;;      Params:         0       0       0       0       0       0       0       0
  3132 ;;      Locals:         0       0       0       0       0       0       0       0
  3133 ;;      Temps:          0       0       0       0       0       0       0       0
  3134 ;;      Totals:         0       0       0       0       0       0       0       0
  3135 ;;Total ram usage:        0 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; Hardware stack levels required when called:    3
  3138 ;; This function calls:
  3139 ;;		Nothing
  3140 ;; This function is called by:
  3141 ;;		_main
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           
  3146                           ;psect for function _myUARTtoRF_Initialization
  3147  0692                     _myUARTtoRF_Initialization:	
  3148                           
  3149                           ;myUARTtoRF.c: 8: RA0 = 0;
  3150                           
  3151                           ;incstack = 0
  3152                           ; Regs used in _myUARTtoRF_Initialization: []
  3153  0692  0020               	movlb	0	; select bank0
  3154  0693  100C               	bcf	12,0	;volatile
  3155                           
  3156                           ;myUARTtoRF.c: 9: RA1 = 1;
  3157  0694  148C               	bsf	12,1	;volatile
  3158                           
  3159                           ;myUARTtoRF.c: 10: RA2 = 1;
  3160  0695  150C               	bsf	12,2	;volatile
  3161  0696  0008               	return
  3162  0697                     __end_of_myUARTtoRF_Initialization:	
  3163                           
  3164                           	psect	text4
  3165  0631                     __ptext4:	
  3166 ;; *************** function _myMain_Initialization *****************
  3167 ;; Defined at:
  3168 ;;		line 168 in file "../src/Main_B1.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;		None
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;		None
  3173 ;; Return value:  Size  Location     Type
  3174 ;;		None               void
  3175 ;; Registers used:
  3176 ;;		wreg, fsr1l, fsr1h
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3182 ;;      Params:         0       0       0       0       0       0       0       0
  3183 ;;      Locals:         0       0       0       0       0       0       0       0
  3184 ;;      Temps:          1       0       0       0       0       0       0       0
  3185 ;;      Totals:         1       0       0       0       0       0       0       0
  3186 ;;Total ram usage:        1 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; Hardware stack levels required when called:    3
  3189 ;; This function calls:
  3190 ;;		Nothing
  3191 ;; This function is called by:
  3192 ;;		_main
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           
  3197                           ;psect for function _myMain_Initialization
  3198  0631                     _myMain_Initialization:	
  3199                           
  3200                           ;Main_B1.c: 170: product = &_product;
  3201                           
  3202                           ;incstack = 0
  3203                           ; Regs used in _myMain_Initialization: [wregfsr1]
  3204  0631  30A0               	movlw	__product& (0+255)
  3205  0632  00F4               	movwf	??_myMain_Initialization
  3206  0633  0874               	movf	??_myMain_Initialization,w
  3207  0634  00F9               	movwf	_product
  3208                           
  3209                           ;Main_B1.c: 171: product->Data[20] = 0xaa;
  3210  0635  30AA               	movlw	170
  3211  0636  00F4               	movwf	??_myMain_Initialization
  3212  0637  0879               	movf	_product,w
  3213  0638  3E14               	addlw	20
  3214  0639  0086               	movwf	6
  3215  063A  0187               	clrf	7
  3216  063B  0874               	movf	??_myMain_Initialization,w
  3217  063C  0081               	movwf	1
  3218  063D  0008               	return
  3219  063E                     __end_of_myMain_Initialization:	
  3220                           
  3221                           	psect	text5
  3222  063E                     __ptext5:	
  3223 ;; *************** function _UART_Main *****************
  3224 ;; Defined at:
  3225 ;;		line 756 in file "../src/MCU_B1.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;		None
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;		None
  3230 ;; Return value:  Size  Location     Type
  3231 ;;		None               void
  3232 ;; Registers used:
  3233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3239 ;;      Params:         0       0       0       0       0       0       0       0
  3240 ;;      Locals:         0       0       0       0       0       0       0       0
  3241 ;;      Temps:          0       0       0       0       0       0       0       0
  3242 ;;      Totals:         0       0       0       0       0       0       0       0
  3243 ;;Total ram usage:        0 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    5
  3246 ;; This function calls:
  3247 ;;		_UART_Receive
  3248 ;;		_UART_Transmit
  3249 ;; This function is called by:
  3250 ;;		_main
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           
  3255                           ;psect for function _UART_Main
  3256  063E                     _UART_Main:	
  3257                           
  3258                           ;MCU_B1.c: 757: if (UART.RxGO == 1) {
  3259                           
  3260                           ;incstack = 0
  3261                           ; Regs used in _UART_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3262  063E  0020               	movlb	0	; select bank0
  3263  063F  1CD1               	btfss	_UART+11,1
  3264  0640  2E45               	goto	l585
  3265                           
  3266                           ;MCU_B1.c: 758: UART.RxGO = 0;
  3267  0641  10D1               	bcf	_UART+11,1
  3268                           
  3269                           ;MCU_B1.c: 759: UART_Receive();
  3270  0642  3183  23F7         	fcall	_UART_Receive
  3271                           
  3272                           ;MCU_B1.c: 760: ;;
  3273                           ;MCU_B1.c: 763: } else {
  3274  0644  0008               	return
  3275  0645                     l585:	
  3276                           
  3277                           ;MCU_B1.c: 764: if (UART.TxGO == 1) {
  3278  0645  1C51               	btfss	_UART+11,0
  3279  0646  0008               	return
  3280                           
  3281                           ;MCU_B1.c: 765: UART.TxGO = 0;
  3282  0647  1051               	bcf	_UART+11,0
  3283                           
  3284                           ;MCU_B1.c: 766: UART_Transmit();
  3285  0648  3185  2564         	fcall	_UART_Transmit
  3286  064A  0008               	return
  3287  064B                     __end_of_UART_Main:	
  3288                           
  3289                           	psect	text6
  3290  0564                     __ptext6:	
  3291 ;; *************** function _UART_Transmit *****************
  3292 ;; Defined at:
  3293 ;;		line 771 in file "../src/MCU_B1.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;		None
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;  i               2    0[BANK0 ] int 
  3298 ;; Return value:  Size  Location     Type
  3299 ;;		None               void
  3300 ;; Registers used:
  3301 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3307 ;;      Params:         0       0       0       0       0       0       0       0
  3308 ;;      Locals:         0       2       0       0       0       0       0       0
  3309 ;;      Temps:          1       0       0       0       0       0       0       0
  3310 ;;      Totals:         1       2       0       0       0       0       0       0
  3311 ;;Total ram usage:        3 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    4
  3314 ;; This function calls:
  3315 ;;		_putch
  3316 ;; This function is called by:
  3317 ;;		_UART_Main
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           
  3322                           ;psect for function _UART_Transmit
  3323  0564                     _UART_Transmit:	
  3324                           
  3325                           ;MCU_B1.c: 774: for (int i = 0; i < 8; i++) {
  3326                           
  3327                           ;incstack = 0
  3328                           ; Regs used in _UART_Transmit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3329  0564  0020               	movlb	0	; select bank0
  3330  0565  01D2               	clrf	UART_Transmit@i
  3331  0566  01D3               	clrf	UART_Transmit@i+1
  3332  0567                     L1:	
  3333  0567  0853               	movf	UART_Transmit@i+1,w
  3334  0568  3A80               	xorlw	128
  3335  0569  00F5               	movwf	??_UART_Transmit
  3336  056A  3080               	movlw	128
  3337  056B  0275               	subwf	??_UART_Transmit,w
  3338  056C  3008               	movlw	8
  3339  056D  1903               	btfsc	3,2
  3340  056E  0252               	subwf	UART_Transmit@i,w
  3341  056F  1803               	btfsc	3,0
  3342  0570  0008               	return
  3343                           
  3344                           ;MCU_B1.c: 776: putch(UART.Data[i]);
  3345  0571  0020               	movlb	0	; select bank0
  3346  0572  0852               	movf	UART_Transmit@i,w
  3347  0573  3E46               	addlw	_UART& (0+255)
  3348  0574  0086               	movwf	6
  3349  0575  0187               	clrf	7
  3350  0576  0801               	movf	1,w
  3351  0577  3186  2678  3185   	fcall	_putch
  3352  057A  3001               	movlw	1
  3353  057B  0020               	movlb	0	; select bank0
  3354  057C  07D2               	addwf	UART_Transmit@i,f
  3355  057D  3000               	movlw	0
  3356  057E  3DD3               	addwfc	UART_Transmit@i+1,f
  3357  057F  2D67               	goto	L1
  3358  0580                     __end_of_UART_Transmit:	
  3359                           
  3360                           	psect	text7
  3361  0678                     __ptext7:	
  3362 ;; *************** function _putch *****************
  3363 ;; Defined at:
  3364 ;;		line 842 in file "../src/MCU_B1.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;  byte            1    wreg     unsigned char 
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;  byte            1    4[COMMON] unsigned char 
  3369 ;; Return value:  Size  Location     Type
  3370 ;;		None               void
  3371 ;; Registers used:
  3372 ;;		wreg
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3378 ;;      Params:         0       0       0       0       0       0       0       0
  3379 ;;      Locals:         1       0       0       0       0       0       0       0
  3380 ;;      Temps:          0       0       0       0       0       0       0       0
  3381 ;;      Totals:         1       0       0       0       0       0       0       0
  3382 ;;Total ram usage:        1 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    3
  3385 ;; This function calls:
  3386 ;;		Nothing
  3387 ;; This function is called by:
  3388 ;;		_UART_Transmit
  3389 ;;		_getche
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           
  3394                           ;psect for function _putch
  3395  0678                     _putch:	
  3396                           
  3397                           ;incstack = 0
  3398                           ; Regs used in _putch: [wreg]
  3399                           ;putch@byte stored from wreg
  3400  0678  00F4               	movwf	putch@byte
  3401  0679                     l605:	
  3402                           ;MCU_B1.c: 845: continue;
  3403                           
  3404                           ;MCU_B1.c: 844: while (!TXIF)
  3405                           
  3406  0679  0020               	movlb	0	; select bank0
  3407  067A  1E11               	btfss	17,4	;volatile
  3408  067B  2E79               	goto	l605
  3409                           
  3410                           ;MCU_B1.c: 846: TXREG = byte;
  3411  067C  0874               	movf	putch@byte,w
  3412  067D  0023               	movlb	3	; select bank3
  3413  067E  009A               	movwf	26	;volatile
  3414  067F  0008               	return
  3415  0680                     __end_of_putch:	
  3416                           
  3417                           	psect	text8
  3418  03F7                     __ptext8:	
  3419 ;; *************** function _UART_Receive *****************
  3420 ;; Defined at:
  3421 ;;		line 790 in file "../src/MCU_B1.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;		None
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;		None
  3426 ;; Return value:  Size  Location     Type
  3427 ;;		None               void
  3428 ;; Registers used:
  3429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3435 ;;      Params:         0       0       0       0       0       0       0       0
  3436 ;;      Locals:         0       0       0       0       0       0       0       0
  3437 ;;      Temps:          1       0       0       0       0       0       0       0
  3438 ;;      Totals:         1       0       0       0       0       0       0       0
  3439 ;;Total ram usage:        1 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:    4
  3442 ;; This function calls:
  3443 ;;		_setTxData
  3444 ;; This function is called by:
  3445 ;;		_UART_Main
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           
  3450                           ;psect for function _UART_Receive
  3451  03F7                     _UART_Receive:	
  3452                           
  3453                           ;MCU_B1.c: 797: product->Data[2] = UART.Data[0];
  3454                           
  3455                           ;incstack = 0
  3456                           ; Regs used in _UART_Receive: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3457  03F7  0020               	movlb	0	; select bank0
  3458  03F8  0846               	movf	_UART,w
  3459  03F9  00F5               	movwf	??_UART_Receive
  3460  03FA  0879               	movf	_product,w
  3461  03FB  3E02               	addlw	2
  3462  03FC  0086               	movwf	6
  3463  03FD  0187               	clrf	7
  3464  03FE  0875               	movf	??_UART_Receive,w
  3465  03FF  0081               	movwf	1
  3466                           
  3467                           ;MCU_B1.c: 798: product->Data[3] = UART.Data[1];
  3468  0400  0847               	movf	_UART+1,w
  3469  0401  00F5               	movwf	??_UART_Receive
  3470  0402  0879               	movf	_product,w
  3471  0403  3E03               	addlw	3
  3472  0404  0086               	movwf	6
  3473  0405  0187               	clrf	7
  3474  0406  0875               	movf	??_UART_Receive,w
  3475  0407  0081               	movwf	1
  3476                           
  3477                           ;MCU_B1.c: 799: product->Data[4] = UART.Data[2];
  3478  0408  0848               	movf	_UART+2,w
  3479  0409  00F5               	movwf	??_UART_Receive
  3480  040A  0879               	movf	_product,w
  3481  040B  3E04               	addlw	4
  3482  040C  0086               	movwf	6
  3483  040D  0187               	clrf	7
  3484  040E  0875               	movf	??_UART_Receive,w
  3485  040F  0081               	movwf	1
  3486                           
  3487                           ;MCU_B1.c: 800: product->Data[5] = UART.Data[3];
  3488  0410  0849               	movf	_UART+3,w
  3489  0411  00F5               	movwf	??_UART_Receive
  3490  0412  0879               	movf	_product,w
  3491  0413  3E05               	addlw	5
  3492  0414  0086               	movwf	6
  3493  0415  0187               	clrf	7
  3494  0416  0875               	movf	??_UART_Receive,w
  3495  0417  0081               	movwf	1
  3496                           
  3497                           ;MCU_B1.c: 801: product->Data[6] = UART.Data[4];
  3498  0418  084A               	movf	_UART+4,w
  3499  0419  00F5               	movwf	??_UART_Receive
  3500  041A  0879               	movf	_product,w
  3501  041B  3E06               	addlw	6
  3502  041C  0086               	movwf	6
  3503  041D  0187               	clrf	7
  3504  041E  0875               	movf	??_UART_Receive,w
  3505  041F  0081               	movwf	1
  3506                           
  3507                           ;MCU_B1.c: 802: setTxData();
  3508  0420  3181  218A         	fcall	_setTxData
  3509                           
  3510                           ;MCU_B1.c: 807: myMain.Test = 1;
  3511  0422  0020               	movlb	0	; select bank0
  3512  0423  1720               	bsf	_myMain,6
  3513  0424  0008               	return
  3514  0425                     __end_of_UART_Receive:	
  3515                           
  3516                           	psect	text9
  3517  06AF                     __ptext9:	
  3518 ;; *************** function _RF_Main *****************
  3519 ;; Defined at:
  3520 ;;		line 16 in file "../src/RF_Control_B1.c"
  3521 ;; Parameters:    Size  Location     Type
  3522 ;;		None
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;		None
  3525 ;; Return value:  Size  Location     Type
  3526 ;;		None               void
  3527 ;; Registers used:
  3528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3534 ;;      Params:         0       0       0       0       0       0       0       0
  3535 ;;      Locals:         0       0       0       0       0       0       0       0
  3536 ;;      Temps:          0       0       0       0       0       0       0       0
  3537 ;;      Totals:         0       0       0       0       0       0       0       0
  3538 ;;Total ram usage:        0 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:    7
  3541 ;; This function calls:
  3542 ;;		_setRF_Main
  3543 ;; This function is called by:
  3544 ;;		_main
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           
  3549                           ;psect for function _RF_Main
  3550  06AF                     _RF_Main:	
  3551                           
  3552                           ;RF_Control_B1.c: 18: setRF_Main();
  3553                           
  3554                           ;incstack = 0
  3555                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3556  06AF  3180  2037         	fcall	_setRF_Main
  3557  06B1  0008               	return
  3558  06B2                     __end_of_RF_Main:	
  3559                           
  3560                           	psect	text10
  3561  0037                     __ptext10:	
  3562 ;; *************** function _setRF_Main *****************
  3563 ;; Defined at:
  3564 ;;		line 52 in file "../src/RF_Control_B1.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;  error           1    7[BANK0 ] unsigned char 
  3569 ;;  Receive_OK      1    6[BANK0 ] unsigned char 
  3570 ;;  loop_f          1    5[BANK0 ] unsigned char 
  3571 ;; Return value:  Size  Location     Type
  3572 ;;		None               void
  3573 ;; Registers used:
  3574 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3575 ;; Tracked objects:
  3576 ;;		On entry : 0/0
  3577 ;;		On exit  : 0/0
  3578 ;;		Unchanged: 0/0
  3579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3580 ;;      Params:         0       0       0       0       0       0       0       0
  3581 ;;      Locals:         0       3       0       0       0       0       0       0
  3582 ;;      Temps:          0       1       0       0       0       0       0       0
  3583 ;;      Totals:         0       4       0       0       0       0       0       0
  3584 ;;Total ram usage:        4 bytes
  3585 ;; Hardware stack levels used:    1
  3586 ;; Hardware stack levels required when called:    6
  3587 ;; This function calls:
  3588 ;;		_CC2500_RxData
  3589 ;;		_CC2500_TxData
  3590 ;;		_CC2500_WriteCommand
  3591 ;;		_getMain_All_Error_Status
  3592 ;;		_getRxData
  3593 ;; This function is called by:
  3594 ;;		_RF_Main
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           
  3599                           ;psect for function _setRF_Main
  3600  0037                     _setRF_Main:	
  3601                           
  3602                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  3603                           
  3604                           ;incstack = 0
  3605                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3606  0037  0020               	movlb	0	; select bank0
  3607  0038  01D7               	clrf	setRF_Main@loop_f
  3608  0039  01D8               	clrf	setRF_Main@Receive_OK
  3609  003A  01D9               	clrf	setRF_Main@error
  3610                           
  3611                           ;RF_Control_B1.c: 58: if (0 == 0) {
  3612  003B  1C2F               	btfss	_RF1,0
  3613  003C  28FF               	goto	l971
  3614                           
  3615                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  3616  003D  3000               	movlw	0
  3617  003E  3186  26B2  3180   	fcall	_getMain_All_Error_Status
  3618  0041  3800               	iorlw	0
  3619  0042  1D03               	skipz
  3620  0043  2844               	goto	l973
  3621  0044                     l973:	
  3622                           ;RF_Control_B1.c: 65: } else {
  3623                           
  3624                           ;RF_Control_B1.c: 63: RF1.Key = 0;
  3625                           
  3626                           
  3627                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  3628  0044  0020               	movlb	0	; select bank0
  3629  0045  13AF               	bcf	_RF1,7
  3630                           
  3631                           ;RF_Control_B1.c: 70: }
  3632                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  3633  0046  1BAF               	btfsc	_RF1,7
  3634  0047  1B2F               	btfsc	_RF1,6
  3635  0048  284E               	goto	l975
  3636                           
  3637                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  3638  0049  01B1               	clrf	_RF1+2
  3639  004A  01B2               	clrf	_RF1+3
  3640                           
  3641                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  3642  004B  14B0               	bsf	_RF1+1,1
  3643                           
  3644                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  3645  004C  11AF               	bcf	_RF1,3
  3646                           
  3647                           ;RF_Control_B1.c: 76: } else {
  3648  004D  0008               	return
  3649  004E                     l975:	
  3650                           
  3651                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  3652  004E  18B0               	btfsc	_RF1+1,1
  3653  004F  1B2F               	btfsc	_RF1,6
  3654  0050  2865               	goto	l3794
  3655                           
  3656                           ;RF_Control_B1.c: 78: RF1.Count++;
  3657  0051  3001               	movlw	1
  3658  0052  07B1               	addwf	_RF1+2,f
  3659  0053  3000               	movlw	0
  3660  0054  3DB2               	addwfc	_RF1+3,f
  3661                           
  3662                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  3663  0055  3002               	movlw	2
  3664  0056  3E2F               	addlw	_RF1& (0+255)
  3665  0057  0086               	movwf	6
  3666  0058  0187               	clrf	7
  3667  0059  3F40               	moviw [0]fsr1
  3668  005A  0636               	xorwf	_RF1+7,w
  3669  005B  1D03               	skipz
  3670  005C  285F               	goto	u2985
  3671  005D  3F41               	moviw [1]fsr1
  3672  005E  0637               	xorwf	_RF1+8,w
  3673  005F                     u2985:	
  3674  005F  1D03               	skipz
  3675  0060  28CC               	goto	l3848
  3676                           
  3677                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  3678  0061  01B1               	clrf	_RF1+2
  3679  0062  01B2               	clrf	_RF1+3
  3680                           
  3681                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  3682  0063  10B0               	bcf	_RF1+1,1
  3683                           
  3684                           ;RF_Control_B1.c: 82: }
  3685                           ;RF_Control_B1.c: 83: } else {
  3686  0064  28CC               	goto	l3848
  3687  0065                     l3794:	
  3688                           
  3689                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  3690  0065  01B1               	clrf	_RF1+2
  3691  0066  01B2               	clrf	_RF1+3
  3692                           
  3693                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  3694  0067  10B0               	bcf	_RF1+1,1
  3695                           
  3696                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  3697  0068  192F               	btfsc	_RF1,2
  3698  0069  1B2F               	btfsc	_RF1,6
  3699  006A  2884               	goto	l980
  3700                           
  3701                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  3702  006B  112F               	bcf	_RF1,2
  3703                           
  3704                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  3705  006C  11AF               	bcf	_RF1,3
  3706                           
  3707                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  3708  006D  10AF               	bcf	_RF1,1
  3709                           
  3710                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  3711  006E  300A               	movlw	10
  3712  006F  00B6               	movwf	_RF1+7
  3713  0070  3000               	movlw	0
  3714  0071  00B7               	movwf	_RF1+8
  3715                           
  3716                           ;RF_Control_B1.c: 92: RA1 = RA1 == 1 ? 0 : 1;
  3717  0072  3002               	movlw	2
  3718  0073  068C               	xorwf	12,f
  3719                           
  3720                           ;RF_Control_B1.c: 95: if (RF1.RxStatus == 1 || RF1.ReceiveGO == 1) {
  3721  0074  19AF               	btfsc	_RF1,3
  3722  0075  2878               	goto	l3810
  3723  0076  1CAF               	btfss	_RF1,1
  3724  0077  2880               	goto	l981
  3725  0078                     l3810:	
  3726                           
  3727                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x36);
  3728  0078  3036               	movlw	54
  3729  0079  3185  259C  3180   	fcall	_CC2500_WriteCommand
  3730                           
  3731                           ;RF_Control_B1.c: 98: CC2500_WriteCommand(0x3A);
  3732  007C  303A               	movlw	58
  3733  007D  3185  259C  3180   	fcall	_CC2500_WriteCommand
  3734  0080                     l981:	
  3735                           
  3736                           ;RF_Control_B1.c: 100: }
  3737                           ;RF_Control_B1.c: 101: CC2500_TxData();
  3738  0080  3182  22C4  3180   	fcall	_CC2500_TxData
  3739                           
  3740                           ;RF_Control_B1.c: 103: } else {
  3741  0083  28CC               	goto	l3848
  3742  0084                     l980:	
  3743                           
  3744                           ;RF_Control_B1.c: 105: if (RF1.RxStatus == 1) {
  3745  0084  1DAF               	btfss	_RF1,3
  3746  0085  28BB               	goto	l985
  3747                           
  3748                           ;RF_Control_B1.c: 107: CC2500_RxData();
  3749  0086  3182  2266  3180   	fcall	_CC2500_RxData
  3750                           
  3751                           ;RF_Control_B1.c: 108: if (RF1.ReceiveGO == 1) {
  3752  0089  0020               	movlb	0	; select bank0
  3753  008A  1CAF               	btfss	_RF1,1
  3754  008B  28CC               	goto	l3848
  3755                           
  3756                           ;RF_Control_B1.c: 109: RF1.ReceiveGO = 0;
  3757  008C  10AF               	bcf	_RF1,1
  3758                           
  3759                           ;RF_Control_B1.c: 110: RF1.Correction = 0;
  3760  008D  12B0               	bcf	_RF1+1,5
  3761                           
  3762                           ;RF_Control_B1.c: 111: RF1.CorrectionCounter = 0;
  3763  008E  01B9               	clrf	_RF1+10
  3764  008F  01BA               	clrf	_RF1+11
  3765                           
  3766                           ;RF_Control_B1.c: 122: getRxData();
  3767  0090  3181  2103  3180   	fcall	_getRxData
  3768                           
  3769                           ;RF_Control_B1.c: 123: RF1.Run = 1;
  3770  0093  0020               	movlb	0	; select bank0
  3771  0094  14B0               	bsf	_RF1+1,1
  3772                           
  3773                           ;RF_Control_B1.c: 125: if (RF1.Checked == 1) {
  3774  0095  1DB0               	btfss	_RF1+1,3
  3775  0096  28A4               	goto	l3832
  3776                           
  3777                           ;RF_Control_B1.c: 126: if (RF1.RunTime > 10) {
  3778  0097  3000               	movlw	0
  3779  0098  0237               	subwf	_RF1+8,w
  3780  0099  300B               	movlw	11
  3781  009A  1903               	skipnz
  3782  009B  0236               	subwf	_RF1+7,w
  3783  009C  1C03               	skipc
  3784  009D  28A2               	goto	l3830
  3785                           
  3786                           ;RF_Control_B1.c: 127: RF1.RunTime = 10;
  3787  009E  300A               	movlw	10
  3788  009F  00B6               	movwf	_RF1+7
  3789  00A0  3000               	movlw	0
  3790  00A1  00B7               	movwf	_RF1+8
  3791  00A2                     l3830:	
  3792                           
  3793                           ;RF_Control_B1.c: 128: }
  3794                           ;RF_Control_B1.c: 129: RF1.CheckCount = 0;
  3795  00A2  01B3               	clrf	_RF1+4
  3796                           
  3797                           ;RF_Control_B1.c: 130: } else {
  3798  00A3  28CC               	goto	l3848
  3799  00A4                     l3832:	
  3800                           
  3801                           ;RF_Control_B1.c: 131: RF1.CheckCount++;
  3802  00A4  3001               	movlw	1
  3803  00A5  00D6               	movwf	??_setRF_Main
  3804  00A6  0856               	movf	??_setRF_Main,w
  3805  00A7  07B3               	addwf	_RF1+4,f
  3806                           
  3807                           ;RF_Control_B1.c: 132: if (RF1.CheckCount == 2) {
  3808  00A8  0833               	movf	_RF1+4,w
  3809  00A9  3A02               	xorlw	2
  3810  00AA  1D03               	skipz
  3811  00AB  28CC               	goto	l3848
  3812                           
  3813                           ;RF_Control_B1.c: 133: RF1.CheckCount = 0;
  3814  00AC  01B3               	clrf	_RF1+4
  3815                           
  3816                           ;RF_Control_B1.c: 134: RF1.CheckedCounter = 0;
  3817  00AD  01B4               	clrf	_RF1+5
  3818  00AE  01B5               	clrf	_RF1+6
  3819                           
  3820                           ;RF_Control_B1.c: 135: if (RF1.RunTime < 200) {
  3821  00AF  3000               	movlw	0
  3822  00B0  0237               	subwf	_RF1+8,w
  3823  00B1  30C8               	movlw	200
  3824  00B2  1903               	skipnz
  3825  00B3  0236               	subwf	_RF1+7,w
  3826  00B4  1803               	skipnc
  3827  00B5  28CC               	goto	l3848
  3828                           
  3829                           ;RF_Control_B1.c: 136: RF1.RunTime += 10;
  3830  00B6  300A               	movlw	10
  3831  00B7  07B6               	addwf	_RF1+7,f
  3832  00B8  3000               	movlw	0
  3833  00B9  3DB7               	addwfc	_RF1+8,f
  3834                           
  3835                           ;RF_Control_B1.c: 137: }
  3836                           ;RF_Control_B1.c: 138: }
  3837                           ;RF_Control_B1.c: 139: }
  3838                           ;RF_Control_B1.c: 140: }
  3839                           ;RF_Control_B1.c: 141: } else {
  3840  00BA  28CC               	goto	l3848
  3841  00BB                     l985:	
  3842                           
  3843                           ;RF_Control_B1.c: 143: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  3844  00BB  1DAF               	btfss	_RF1,3
  3845  00BC  18AF               	btfsc	_RF1,1
  3846  00BD  28CC               	goto	l3848
  3847                           
  3848                           ;RF_Control_B1.c: 144: RF1.RxStatus = 1;
  3849  00BE  15AF               	bsf	_RF1,3
  3850                           
  3851                           ;RF_Control_B1.c: 145: RF1.Correction = 1;
  3852  00BF  16B0               	bsf	_RF1+1,5
  3853                           
  3854                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x36);
  3855  00C0  3036               	movlw	54
  3856  00C1  3185  259C  3180   	fcall	_CC2500_WriteCommand
  3857                           
  3858                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x3A);
  3859  00C4  303A               	movlw	58
  3860  00C5  3185  259C  3180   	fcall	_CC2500_WriteCommand
  3861                           
  3862                           ;RF_Control_B1.c: 150: CC2500_WriteCommand(0x34);
  3863  00C8  3034               	movlw	52
  3864  00C9  3185  259C  3180   	fcall	_CC2500_WriteCommand
  3865  00CC                     l3848:	
  3866                           
  3867                           ;RF_Control_B1.c: 152: }
  3868                           ;RF_Control_B1.c: 154: }
  3869                           ;RF_Control_B1.c: 155: }
  3870                           ;RF_Control_B1.c: 156: }
  3871                           ;RF_Control_B1.c: 157: if (RF1.RxStatus == 1) {
  3872  00CC  0020               	movlb	0	; select bank0
  3873  00CD  1DAF               	btfss	_RF1,3
  3874  00CE  28ED               	goto	l3860
  3875                           
  3876                           ;RF_Control_B1.c: 158: RF1.CheckedCounter++;
  3877  00CF  3001               	movlw	1
  3878  00D0  07B4               	addwf	_RF1+5,f
  3879  00D1  3000               	movlw	0
  3880  00D2  3DB5               	addwfc	_RF1+6,f
  3881                           
  3882                           ;RF_Control_B1.c: 159: if (RF1.CheckedCounter == 100) {
  3883  00D3  3005               	movlw	5
  3884  00D4  3E2F               	addlw	_RF1& (0+255)
  3885  00D5  0086               	movwf	6
  3886  00D6  0187               	clrf	7
  3887  00D7  3F40               	moviw [0]fsr1
  3888  00D8  3A64               	xorlw	100
  3889  00D9  1D03               	skipz
  3890  00DA  28DD               	goto	u3125
  3891  00DB  3F41               	moviw [1]fsr1
  3892  00DC  3A00               	xorlw	0
  3893  00DD                     u3125:	
  3894  00DD  1D03               	skipz
  3895  00DE  28ED               	goto	l3860
  3896                           
  3897                           ;RF_Control_B1.c: 160: RF1.CheckedCounter = 0;
  3898  00DF  01B4               	clrf	_RF1+5
  3899  00E0  01B5               	clrf	_RF1+6
  3900                           
  3901                           ;RF_Control_B1.c: 161: RF1.CheckCount = 0;
  3902  00E1  01B3               	clrf	_RF1+4
  3903                           
  3904                           ;RF_Control_B1.c: 162: if (RF1.RunTime > 10) {
  3905  00E2  3000               	movlw	0
  3906  00E3  0237               	subwf	_RF1+8,w
  3907  00E4  300B               	movlw	11
  3908  00E5  1903               	skipnz
  3909  00E6  0236               	subwf	_RF1+7,w
  3910  00E7  1C03               	skipc
  3911  00E8  28ED               	goto	l3860
  3912                           
  3913                           ;RF_Control_B1.c: 163: RF1.RunTime -= 10;
  3914  00E9  300A               	movlw	10
  3915  00EA  02B6               	subwf	_RF1+7,f
  3916  00EB  3000               	movlw	0
  3917  00EC  3BB7               	subwfb	_RF1+8,f
  3918  00ED                     l3860:	
  3919                           
  3920                           ;RF_Control_B1.c: 164: }
  3921                           ;RF_Control_B1.c: 165: }
  3922                           ;RF_Control_B1.c: 166: }
  3923                           ;RF_Control_B1.c: 167: if (RF1.Correction == 1) {
  3924  00ED  1EB0               	btfss	_RF1+1,5
  3925  00EE  0008               	return
  3926                           
  3927                           ;RF_Control_B1.c: 168: RF1.CorrectionCounter++;
  3928  00EF  3001               	movlw	1
  3929  00F0  07B9               	addwf	_RF1+10,f
  3930  00F1  3000               	movlw	0
  3931  00F2  3DBA               	addwfc	_RF1+11,f
  3932                           
  3933                           ;RF_Control_B1.c: 169: if (RF1.CorrectionCounter >= 30000) {
  3934  00F3  3075               	movlw	117
  3935  00F4  023A               	subwf	_RF1+11,w
  3936  00F5  3030               	movlw	48
  3937  00F6  1903               	skipnz
  3938  00F7  0239               	subwf	_RF1+10,w
  3939  00F8  1C03               	skipc
  3940  00F9  0008               	return
  3941                           
  3942                           ;RF_Control_B1.c: 170: RF1.CorrectionCounter = 0;
  3943  00FA  01B9               	clrf	_RF1+10
  3944  00FB  01BA               	clrf	_RF1+11
  3945                           
  3946                           ;RF_Control_B1.c: 171: RF1.RxStatus = 0;
  3947  00FC  11AF               	bcf	_RF1,3
  3948                           
  3949                           ;RF_Control_B1.c: 172: RF1.ReceiveGO = 0;
  3950  00FD  10AF               	bcf	_RF1,1
  3951                           
  3952                           ;RF_Control_B1.c: 173: }
  3953                           ;RF_Control_B1.c: 174: }
  3954                           ;RF_Control_B1.c: 175: }
  3955                           ;RF_Control_B1.c: 176: }
  3956                           ;RF_Control_B1.c: 183: } else {
  3957  00FE  0008               	return
  3958  00FF                     l971:	
  3959                           
  3960                           ;RF_Control_B1.c: 184: if (myMain.PowerON == 1) {
  3961  00FF  1C20               	btfss	_myMain,0
  3962  0100  0008               	return
  3963                           
  3964                           ;RF_Control_B1.c: 185: RF1.Enable = 1;
  3965  0101  142F               	bsf	_RF1,0
  3966  0102  0008               	return
  3967  0103                     __end_of_setRF_Main:	
  3968                           
  3969                           	psect	text11
  3970  0103                     __ptext11:	
  3971 ;; *************** function _getRxData *****************
  3972 ;; Defined at:
  3973 ;;		line 275 in file "../src/RF_Control_B1.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;		None
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;  error           1    0[BANK0 ] unsigned char 
  3978 ;; Return value:  Size  Location     Type
  3979 ;;		None               void
  3980 ;; Registers used:
  3981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3987 ;;      Params:         0       0       0       0       0       0       0       0
  3988 ;;      Locals:         0       1       0       0       0       0       0       0
  3989 ;;      Temps:          1       0       0       0       0       0       0       0
  3990 ;;      Totals:         1       1       0       0       0       0       0       0
  3991 ;;Total ram usage:        2 bytes
  3992 ;; Hardware stack levels used:    1
  3993 ;; Hardware stack levels required when called:    5
  3994 ;; This function calls:
  3995 ;;		_getMain_All_Error_Status
  3996 ;;		_setControl_Lights_Table
  3997 ;;		_setLog_Code
  3998 ;;		_setTxData
  3999 ;; This function is called by:
  4000 ;;		_setRF_Main
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           
  4005                           ;psect for function _getRxData
  4006  0103                     _getRxData:	
  4007                           
  4008                           ;RF_Control_B1.c: 276: char error = getMain_All_Error_Status(0);
  4009                           
  4010                           ;incstack = 0
  4011                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4012  0103  3000               	movlw	0
  4013  0104  3186  26B2  3181   	fcall	_getMain_All_Error_Status
  4014  0107  00F5               	movwf	??_getRxData
  4015  0108  0875               	movf	??_getRxData,w
  4016  0109  0020               	movlb	0	; select bank0
  4017  010A  00D2               	movwf	getRxData@error
  4018                           
  4019                           ;RF_Control_B1.c: 277: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  4020  010B  0021               	movlb	1	; select bank1
  4021  010C  0840               	movf	_RF_Data^(0+128),w
  4022  010D  3AAA               	xorlw	170
  4023  010E  1D03               	skipz
  4024  010F  2926               	goto	l3632
  4025  0110  0841               	movf	(_RF_Data^(0+128)+1),w
  4026  0111  3A01               	xorlw	1
  4027  0112  1D03               	skipz
  4028  0113  2926               	goto	l3632
  4029                           
  4030                           ;RF_Control_B1.c: 279: product->Data[2] = 0x55;
  4031  0114  3055               	movlw	85
  4032  0115  00F5               	movwf	??_getRxData
  4033  0116  0879               	movf	_product,w
  4034  0117  3E02               	addlw	2
  4035  0118  0086               	movwf	6
  4036  0119  0187               	clrf	7
  4037  011A  0875               	movf	??_getRxData,w
  4038  011B  0081               	movwf	1
  4039                           
  4040                           ;RF_Control_B1.c: 280: setTxData();
  4041  011C  3181  218A         	fcall	_setTxData
  4042                           
  4043                           ;RF_Control_B1.c: 281: RF1.RunTime = 10;
  4044  011E  300A               	movlw	10
  4045  011F  0020               	movlb	0	; select bank0
  4046  0120  00B6               	movwf	_RF1+7
  4047  0121  3000               	movlw	0
  4048  0122  00B7               	movwf	_RF1+8
  4049                           
  4050                           ;RF_Control_B1.c: 284: RA1 = RA1 == 1 ? 0 : 1;
  4051  0123  3002               	movlw	2
  4052  0124  068C               	xorwf	12,f
  4053                           
  4054                           ;RF_Control_B1.c: 287: } else {
  4055  0125  0008               	return
  4056  0126                     l3632:	
  4057                           
  4058                           ;RF_Control_B1.c: 289: if (error == 0) {
  4059  0126  0020               	movlb	0	; select bank0
  4060  0127  08D2               	movf	getRxData@error,f
  4061  0128  1D03               	skipz
  4062  0129  0008               	return
  4063                           
  4064                           ;RF_Control_B1.c: 290: if (RF1.Learn == 1) {
  4065  012A  1F2F               	btfss	_RF1,6
  4066  012B  293C               	goto	l3644
  4067                           
  4068                           ;RF_Control_B1.c: 291: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  4069  012C  0021               	movlb	1	; select bank1
  4070  012D  08C0               	movf	_RF_Data^(0+128),f
  4071  012E  1D03               	skipz
  4072  012F  2939               	goto	l1025
  4073  0130  0841               	movf	(_RF_Data^(0+128)+1),w
  4074  0131  3A64               	xorlw	100
  4075  0132  1D03               	skipz
  4076  0133  2939               	goto	l1025
  4077                           
  4078                           ;RF_Control_B1.c: 292: setLog_Code();
  4079  0134  3185  2580         	fcall	_setLog_Code
  4080                           
  4081                           ;RF_Control_B1.c: 293: RF1.Checked = 1;
  4082  0136  0020               	movlb	0	; select bank0
  4083  0137  15B0               	bsf	_RF1+1,3
  4084                           
  4085                           ;RF_Control_B1.c: 294: } else {
  4086  0138  0008               	return
  4087  0139                     l1025:	
  4088                           
  4089                           ;RF_Control_B1.c: 295: RF1.Checked = 0;
  4090  0139  0020               	movlb	0	; select bank0
  4091  013A  11B0               	bcf	_RF1+1,3
  4092                           
  4093                           ;RF_Control_B1.c: 296: }
  4094                           ;RF_Control_B1.c: 297: } else {
  4095  013B  0008               	return
  4096  013C                     l3644:	
  4097                           
  4098                           ;RF_Control_B1.c: 298: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  4099  013C  0021               	movlb	1	; select bank1
  4100  013D  08C0               	movf	_RF_Data^(0+128),f
  4101  013E  1D03               	skipz
  4102  013F  2972               	goto	l3666
  4103  0140  0841               	movf	(_RF_Data^(0+128)+1),w
  4104  0141  3A02               	xorlw	2
  4105  0142  1D03               	skipz
  4106  0143  2972               	goto	l3666
  4107                           
  4108                           ;RF_Control_B1.c: 300: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  4109  0144  084C               	movf	(_RF_Data^(0+128)+12),w
  4110  0145  3AFF               	xorlw	255
  4111  0146  1D03               	skipz
  4112  0147  2954               	goto	l3656
  4113  0148  084D               	movf	(_RF_Data^(0+128)+13),w
  4114  0149  3AFF               	xorlw	255
  4115  014A  1D03               	skipz
  4116  014B  2954               	goto	l3656
  4117  014C  084E               	movf	(_RF_Data^(0+128)+14),w
  4118  014D  3AFF               	xorlw	255
  4119  014E  1D03               	skipz
  4120  014F  2954               	goto	l3656
  4121                           
  4122                           ;RF_Control_B1.c: 301: __nop();
  4123  0150  0000               	nop
  4124                           
  4125                           ;RF_Control_B1.c: 302: RF1.Checked = 0;
  4126  0151  0020               	movlb	0	; select bank0
  4127  0152  11B0               	bcf	_RF1+1,3
  4128                           
  4129                           ;RF_Control_B1.c: 303: } else {
  4130  0153  0008               	return
  4131  0154                     l3656:	
  4132                           
  4133                           ;RF_Control_B1.c: 304: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  4134  0154  0879               	movf	_product,w
  4135  0155  3E0C               	addlw	12
  4136  0156  0086               	movwf	6
  4137  0157  0187               	clrf	7
  4138  0158  0021               	movlb	1	; select bank1
  4139  0159  084C               	movf	(_RF_Data^(0+128)+12),w
  4140  015A  0601               	xorwf	1,w
  4141  015B  1D03               	skipz
  4142  015C  0008               	return
  4143  015D  0879               	movf	_product,w
  4144  015E  3E0D               	addlw	13
  4145  015F  0086               	movwf	6
  4146  0160  0187               	clrf	7
  4147  0161  084D               	movf	(_RF_Data^(0+128)+13),w
  4148  0162  0601               	xorwf	1,w
  4149  0163  1D03               	skipz
  4150  0164  0008               	return
  4151  0165  0879               	movf	_product,w
  4152  0166  3E0E               	addlw	14
  4153  0167  0086               	movwf	6
  4154  0168  0187               	clrf	7
  4155  0169  084E               	movf	(_RF_Data^(0+128)+14),w
  4156  016A  0601               	xorwf	1,w
  4157  016B  1D03               	skipz
  4158  016C  0008               	return
  4159                           
  4160                           ;RF_Control_B1.c: 305: setControl_Lights_Table();
  4161  016D  3183  2372         	fcall	_setControl_Lights_Table
  4162                           
  4163                           ;RF_Control_B1.c: 306: RF1.Checked = 1;
  4164  016F  0020               	movlb	0	; select bank0
  4165  0170  15B0               	bsf	_RF1+1,3
  4166                           
  4167                           ;RF_Control_B1.c: 307: }
  4168                           ;RF_Control_B1.c: 308: }
  4169                           ;RF_Control_B1.c: 309: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  4170  0171  0008               	return
  4171  0172                     l3666:	
  4172  0172  0021               	movlb	1	; select bank1
  4173  0173  0840               	movf	_RF_Data^(0+128),w
  4174  0174  3AFF               	xorlw	255
  4175  0175  1D03               	skipz
  4176  0176  297D               	goto	l3672
  4177  0177  0841               	movf	(_RF_Data^(0+128)+1),w
  4178  0178  3A02               	xorlw	2
  4179  0179  1D03               	skipz
  4180  017A  297D               	goto	l3672
  4181                           
  4182                           ;RF_Control_B1.c: 310: __nop();
  4183  017B  0000               	nop
  4184                           
  4185                           ;RF_Control_B1.c: 311: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  4186  017C  0008               	return
  4187  017D                     l3672:	
  4188  017D  0021               	movlb	1	; select bank1
  4189  017E  08C0               	movf	_RF_Data^(0+128),f
  4190  017F  1D03               	skipz
  4191  0180  2987               	goto	l1035
  4192  0181  0841               	movf	(_RF_Data^(0+128)+1),w
  4193  0182  3A65               	xorlw	101
  4194  0183  1D03               	skipz
  4195  0184  2987               	goto	l1035
  4196                           
  4197                           ;RF_Control_B1.c: 312: __nop();
  4198  0185  0000               	nop
  4199                           
  4200                           ;RF_Control_B1.c: 313: } else {
  4201  0186  0008               	return
  4202  0187                     l1035:	
  4203                           
  4204                           ;RF_Control_B1.c: 314: RF1.Checked = 0;
  4205  0187  0020               	movlb	0	; select bank0
  4206  0188  11B0               	bcf	_RF1+1,3
  4207                           
  4208                           ;RF_Control_B1.c: 322: ;
  4209                           
  4210                           ;RF_Control_B1.c: 315: }
  4211                           ;RF_Control_B1.c: 320: }
  4212                           ;RF_Control_B1.c: 321: } else {
  4213  0189  0008               	return
  4214  018A                     __end_of_getRxData:	
  4215                           
  4216                           	psect	text12
  4217  0580                     __ptext12:	
  4218 ;; *************** function _setLog_Code *****************
  4219 ;; Defined at:
  4220 ;;		line 328 in file "../src/RF_Control_B1.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;		None
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;		None               void
  4227 ;; Registers used:
  4228 ;;		wreg, fsr1l, fsr1h
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4234 ;;      Params:         0       0       0       0       0       0       0       0
  4235 ;;      Locals:         0       0       0       0       0       0       0       0
  4236 ;;      Temps:          1       0       0       0       0       0       0       0
  4237 ;;      Totals:         1       0       0       0       0       0       0       0
  4238 ;;Total ram usage:        1 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    3
  4241 ;; This function calls:
  4242 ;;		Nothing
  4243 ;; This function is called by:
  4244 ;;		_getRxData
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           
  4249                           ;psect for function _setLog_Code
  4250  0580                     _setLog_Code:	
  4251                           
  4252                           ;RF_Control_B1.c: 329: RF1.Learn = 0;
  4253                           
  4254                           ;incstack = 0
  4255                           ; Regs used in _setLog_Code: [wregfsr1]
  4256  0580  0020               	movlb	0	; select bank0
  4257  0581  132F               	bcf	_RF1,6
  4258                           
  4259                           ;RF_Control_B1.c: 330: product->Data[12]=RF_Data[12];
  4260  0582  0021               	movlb	1	; select bank1
  4261  0583  084C               	movf	(_RF_Data^(0+128)+12),w
  4262  0584  00F4               	movwf	??_setLog_Code
  4263  0585  0879               	movf	_product,w
  4264  0586  3E0C               	addlw	12
  4265  0587  0086               	movwf	6
  4266  0588  0187               	clrf	7
  4267  0589  0874               	movf	??_setLog_Code,w
  4268  058A  0081               	movwf	1
  4269                           
  4270                           ;RF_Control_B1.c: 331: product->Data[13]=RF_Data[13];
  4271  058B  084D               	movf	(_RF_Data^(0+128)+13),w
  4272  058C  00F4               	movwf	??_setLog_Code
  4273  058D  0879               	movf	_product,w
  4274  058E  3E0D               	addlw	13
  4275  058F  0086               	movwf	6
  4276  0590  0187               	clrf	7
  4277  0591  0874               	movf	??_setLog_Code,w
  4278  0592  0081               	movwf	1
  4279                           
  4280                           ;RF_Control_B1.c: 332: product->Data[14]=RF_Data[14];
  4281  0593  084E               	movf	(_RF_Data^(0+128)+14),w
  4282  0594  00F4               	movwf	??_setLog_Code
  4283  0595  0879               	movf	_product,w
  4284  0596  3E0E               	addlw	14
  4285  0597  0086               	movwf	6
  4286  0598  0187               	clrf	7
  4287  0599  0874               	movf	??_setLog_Code,w
  4288  059A  0081               	movwf	1
  4289  059B  0008               	return
  4290  059C                     __end_of_setLog_Code:	
  4291                           ;RF_Control_B1.c: 335: ;;
  4292                           
  4293                           
  4294                           	psect	text13
  4295  0372                     __ptext13:	
  4296 ;; *************** function _setControl_Lights_Table *****************
  4297 ;; Defined at:
  4298 ;;		line 341 in file "../src/RF_Control_B1.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;		None
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;		None
  4303 ;; Return value:  Size  Location     Type
  4304 ;;		None               void
  4305 ;; Registers used:
  4306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4312 ;;      Params:         0       0       0       0       0       0       0       0
  4313 ;;      Locals:         0       0       0       0       0       0       0       0
  4314 ;;      Temps:          0       0       0       0       0       0       0       0
  4315 ;;      Totals:         0       0       0       0       0       0       0       0
  4316 ;;Total ram usage:        0 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    4
  4319 ;; This function calls:
  4320 ;;		_setTxData
  4321 ;; This function is called by:
  4322 ;;		_getRxData
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           
  4327                           ;psect for function _setControl_Lights_Table
  4328  0372                     _setControl_Lights_Table:	
  4329                           
  4330                           ;RF_Control_B1.c: 342: switch (RF_Data[15]) {
  4331                           
  4332                           ;incstack = 0
  4333                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4334  0372  2B9A               	goto	l3476
  4335  0373                     l3468:	
  4336                           ;RF_Control_B1.c: 343: case 0x00:
  4337                           
  4338                           
  4339                           ;RF_Control_B1.c: 347: product->Data[9]=0;
  4340  0373  0879               	movf	_product,w
  4341  0374  3E09               	addlw	9
  4342  0375  0086               	movwf	6
  4343  0376  0187               	clrf	7
  4344  0377  0181               	clrf	1
  4345                           
  4346                           ;RF_Control_B1.c: 348: product->Data[11]=0;
  4347  0378  0879               	movf	_product,w
  4348  0379  3E0B               	addlw	11
  4349  037A  0086               	movwf	6
  4350  037B  0187               	clrf	7
  4351  037C  0181               	clrf	1
  4352                           
  4353                           ;RF_Control_B1.c: 349: product->Data[15]=0;
  4354  037D  0879               	movf	_product,w
  4355  037E  3E0F               	addlw	15
  4356  037F  0086               	movwf	6
  4357  0380  0187               	clrf	7
  4358  0381  0181               	clrf	1
  4359                           
  4360                           ;RF_Control_B1.c: 350: product->Data[17]=0;
  4361  0382  0879               	movf	_product,w
  4362  0383  3E11               	addlw	17
  4363  0384  0086               	movwf	6
  4364  0385  0187               	clrf	7
  4365  0386  0181               	clrf	1
  4366                           
  4367                           ;RF_Control_B1.c: 351: ;;
  4368                           ;RF_Control_B1.c: 353: break;
  4369  0387  0008               	return
  4370  0388                     l3470:	
  4371                           ;RF_Control_B1.c: 354: case 0x20:
  4372                           
  4373                           
  4374                           ;RF_Control_B1.c: 355: product->Data[9]=0;
  4375  0388  0879               	movf	_product,w
  4376  0389  3E09               	addlw	9
  4377  038A  0086               	movwf	6
  4378  038B  0187               	clrf	7
  4379  038C  0181               	clrf	1
  4380                           
  4381                           ;RF_Control_B1.c: 356: product->Data[11]=0;
  4382  038D  0879               	movf	_product,w
  4383  038E  3E0B               	addlw	11
  4384  038F  0086               	movwf	6
  4385  0390  0187               	clrf	7
  4386  0391  0181               	clrf	1
  4387                           
  4388                           ;RF_Control_B1.c: 357: product->Data[17]=0;
  4389  0392  0879               	movf	_product,w
  4390  0393  3E11               	addlw	17
  4391  0394  0086               	movwf	6
  4392  0395  0187               	clrf	7
  4393  0396  0181               	clrf	1
  4394                           
  4395                           ;RF_Control_B1.c: 358: setTxData();
  4396  0397  3181  218A         	fcall	_setTxData
  4397                           
  4398                           ;RF_Control_B1.c: 396: }
  4399                           
  4400                           ;RF_Control_B1.c: 395: break;
  4401                           
  4402                           ;RF_Control_B1.c: 389: case 0x31:
  4403                           
  4404                           ;RF_Control_B1.c: 388: break;
  4405                           
  4406                           ;RF_Control_B1.c: 382: case 0x21:
  4407                           
  4408                           ;RF_Control_B1.c: 381: break;
  4409                           
  4410                           ;RF_Control_B1.c: 375: case 0x11:
  4411                           
  4412                           ;RF_Control_B1.c: 374: break;
  4413                           
  4414                           ;RF_Control_B1.c: 370: case 0x03:
  4415                           
  4416                           ;RF_Control_B1.c: 369: break;
  4417                           
  4418                           ;RF_Control_B1.c: 365: case 0x02:
  4419                           
  4420                           ;RF_Control_B1.c: 364: break;
  4421                           
  4422                           ;RF_Control_B1.c: 360: case 0x01:
  4423                           
  4424                           ;RF_Control_B1.c: 359: break;
  4425  0399  0008               	return
  4426  039A                     l3476:	
  4427  039A  0021               	movlb	1	; select bank1
  4428  039B  084F               	movf	(_RF_Data^(0+128)+15),w
  4429                           
  4430                           ; Switch size 1, requested type "space"
  4431                           ; Number of cases is 8, Range of values is 0 to 49
  4432                           ; switch strategies available:
  4433                           ; Name         Instructions Cycles
  4434                           ; simple_byte           25    13 (average)
  4435                           ; direct_byte          106     6 (fixed)
  4436                           ; jumptable            260     6 (fixed)
  4437                           ;	Chosen strategy is simple_byte
  4438  039C  3A00               	xorlw	0	; case 0
  4439  039D  1903               	skipnz
  4440  039E  2B73               	goto	l3468
  4441  039F  3A01               	xorlw	1	; case 1
  4442  03A0  1903               	skipnz
  4443  03A1  2BB5               	goto	l1055
  4444  03A2  3A03               	xorlw	3	; case 2
  4445  03A3  1903               	skipnz
  4446  03A4  2BB5               	goto	l1055
  4447  03A5  3A01               	xorlw	1	; case 3
  4448  03A6  1903               	skipnz
  4449  03A7  2BB5               	goto	l1055
  4450  03A8  3A12               	xorlw	18	; case 17
  4451  03A9  1903               	skipnz
  4452  03AA  2BB5               	goto	l1055
  4453  03AB  3A31               	xorlw	49	; case 32
  4454  03AC  1903               	skipnz
  4455  03AD  2B88               	goto	l3470
  4456  03AE  3A01               	xorlw	1	; case 33
  4457  03AF  1903               	skipnz
  4458  03B0  2BB5               	goto	l1055
  4459  03B1  3A10               	xorlw	16	; case 49
  4460  03B2  1903               	skipnz
  4461  03B3  2BB5               	goto	l1055
  4462  03B4  2BB5               	goto	l1055
  4463  03B5                     l1055:	
  4464  03B5  0008               	return
  4465  03B6                     __end_of_setControl_Lights_Table:	
  4466                           
  4467                           	psect	text14
  4468  018A                     __ptext14:	
  4469 ;; *************** function _setTxData *****************
  4470 ;; Defined at:
  4471 ;;		line 208 in file "../src/RF_Control_B1.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;		None
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  i               1    0        unsigned char 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;		None               void
  4478 ;; Registers used:
  4479 ;;		wreg, fsr1l, fsr1h
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4485 ;;      Params:         0       0       0       0       0       0       0       0
  4486 ;;      Locals:         0       0       0       0       0       0       0       0
  4487 ;;      Temps:          1       0       0       0       0       0       0       0
  4488 ;;      Totals:         1       0       0       0       0       0       0       0
  4489 ;;Total ram usage:        1 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:    3
  4492 ;; This function calls:
  4493 ;;		Nothing
  4494 ;; This function is called by:
  4495 ;;		_UART_Receive
  4496 ;;		_getRxData
  4497 ;;		_setControl_Lights_Table
  4498 ;;		_myUARTtoRF_Main
  4499 ;;		_setRFSW_Control
  4500 ;;		_setRFSW_AdjControl
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           
  4505                           ;psect for function _setTxData
  4506  018A                     _setTxData:	
  4507                           
  4508                           ;RF_Control_B1.c: 209: char i;
  4509                           ;RF_Control_B1.c: 210: if (RF1.Enable == 1) {
  4510                           
  4511                           ;incstack = 0
  4512                           ; Regs used in _setTxData: [wregfsr1]
  4513  018A  0020               	movlb	0	; select bank0
  4514  018B  1C2F               	btfss	_RF1,0
  4515  018C  0008               	return
  4516                           
  4517                           ;RF_Control_B1.c: 212: if (RF1.TransceiveGO == 0) {
  4518  018D  192F               	btfsc	_RF1,2
  4519  018E  0008               	return
  4520                           
  4521                           ;RF_Control_B1.c: 213: RF1.TransceiveGO = 1;
  4522  018F  152F               	bsf	_RF1,2
  4523                           
  4524                           ;RF_Control_B1.c: 214: RF1.RunTime = 20;
  4525  0190  3014               	movlw	20
  4526  0191  00B6               	movwf	_RF1+7
  4527  0192  3000               	movlw	0
  4528  0193  00B7               	movwf	_RF1+8
  4529                           
  4530                           ;RF_Control_B1.c: 223: RF_Data[0] = 0x63;
  4531  0194  3063               	movlw	99
  4532  0195  00F4               	movwf	??_setTxData
  4533  0196  0874               	movf	??_setTxData,w
  4534  0197  0021               	movlb	1	; select bank1
  4535  0198  00C0               	movwf	_RF_Data^(0+128)
  4536                           
  4537                           ;RF_Control_B1.c: 224: RF_Data[1] = 0x02;
  4538  0199  3002               	movlw	2
  4539  019A  00F4               	movwf	??_setTxData
  4540  019B  0874               	movf	??_setTxData,w
  4541  019C  00C1               	movwf	(_RF_Data^(0+128)+1)
  4542                           
  4543                           ;RF_Control_B1.c: 225: RF_Data[2] = product->Data[2];
  4544  019D  0879               	movf	_product,w
  4545  019E  0086               	movwf	6
  4546  019F  0187               	clrf	7
  4547  01A0  3F42               	moviw [2]fsr1
  4548  01A1  00C2               	movwf	(_RF_Data^(0+128)+2)
  4549                           
  4550                           ;RF_Control_B1.c: 226: RF_Data[3] = product->Data[3];
  4551  01A2  0879               	movf	_product,w
  4552  01A3  0086               	movwf	6
  4553  01A4  0187               	clrf	7
  4554  01A5  3F43               	moviw [3]fsr1
  4555  01A6  00C3               	movwf	(_RF_Data^(0+128)+3)
  4556                           
  4557                           ;RF_Control_B1.c: 227: RF_Data[4] = product->Data[4];
  4558  01A7  0879               	movf	_product,w
  4559  01A8  0086               	movwf	6
  4560  01A9  0187               	clrf	7
  4561  01AA  3F44               	moviw [4]fsr1
  4562  01AB  00C4               	movwf	(_RF_Data^(0+128)+4)
  4563                           
  4564                           ;RF_Control_B1.c: 228: RF_Data[5] = product->Data[5];
  4565  01AC  0879               	movf	_product,w
  4566  01AD  0086               	movwf	6
  4567  01AE  0187               	clrf	7
  4568  01AF  3F45               	moviw [5]fsr1
  4569  01B0  00C5               	movwf	(_RF_Data^(0+128)+5)
  4570                           
  4571                           ;RF_Control_B1.c: 229: RF_Data[6] = product->Data[6];
  4572  01B1  0879               	movf	_product,w
  4573  01B2  0086               	movwf	6
  4574  01B3  0187               	clrf	7
  4575  01B4  3F46               	moviw [6]fsr1
  4576  01B5  00C6               	movwf	(_RF_Data^(0+128)+6)
  4577                           
  4578                           ;RF_Control_B1.c: 230: RF_Data[7] = product->Data[7];
  4579  01B6  0879               	movf	_product,w
  4580  01B7  0086               	movwf	6
  4581  01B8  0187               	clrf	7
  4582  01B9  3F47               	moviw [7]fsr1
  4583  01BA  00C7               	movwf	(_RF_Data^(0+128)+7)
  4584                           
  4585                           ;RF_Control_B1.c: 231: RF_Data[8] = product->Data[8];
  4586  01BB  0879               	movf	_product,w
  4587  01BC  0086               	movwf	6
  4588  01BD  0187               	clrf	7
  4589  01BE  3F48               	moviw [8]fsr1
  4590  01BF  00C8               	movwf	(_RF_Data^(0+128)+8)
  4591                           
  4592                           ;RF_Control_B1.c: 232: RF_Data[9] = product->Data[9];
  4593  01C0  0879               	movf	_product,w
  4594  01C1  0086               	movwf	6
  4595  01C2  0187               	clrf	7
  4596  01C3  3F49               	moviw [9]fsr1
  4597  01C4  00C9               	movwf	(_RF_Data^(0+128)+9)
  4598                           
  4599                           ;RF_Control_B1.c: 233: RF_Data[10] = product->Data[10];
  4600  01C5  0879               	movf	_product,w
  4601  01C6  0086               	movwf	6
  4602  01C7  0187               	clrf	7
  4603  01C8  3F4A               	moviw [10]fsr1
  4604  01C9  00CA               	movwf	(_RF_Data^(0+128)+10)
  4605                           
  4606                           ;RF_Control_B1.c: 234: RF_Data[11] = product->Data[11];
  4607  01CA  0879               	movf	_product,w
  4608  01CB  0086               	movwf	6
  4609  01CC  0187               	clrf	7
  4610  01CD  3F4B               	moviw [11]fsr1
  4611  01CE  00CB               	movwf	(_RF_Data^(0+128)+11)
  4612                           
  4613                           ;RF_Control_B1.c: 235: RF_Data[12] = product->Data[12];
  4614  01CF  0879               	movf	_product,w
  4615  01D0  0086               	movwf	6
  4616  01D1  0187               	clrf	7
  4617  01D2  3F4C               	moviw [12]fsr1
  4618  01D3  00CC               	movwf	(_RF_Data^(0+128)+12)
  4619                           
  4620                           ;RF_Control_B1.c: 236: RF_Data[13] = product->Data[13];
  4621  01D4  0879               	movf	_product,w
  4622  01D5  0086               	movwf	6
  4623  01D6  0187               	clrf	7
  4624  01D7  3F4D               	moviw [13]fsr1
  4625  01D8  00CD               	movwf	(_RF_Data^(0+128)+13)
  4626                           
  4627                           ;RF_Control_B1.c: 237: RF_Data[14] = product->Data[14];
  4628  01D9  0879               	movf	_product,w
  4629  01DA  0086               	movwf	6
  4630  01DB  0187               	clrf	7
  4631  01DC  3F4E               	moviw [14]fsr1
  4632  01DD  00CE               	movwf	(_RF_Data^(0+128)+14)
  4633                           
  4634                           ;RF_Control_B1.c: 238: RF_Data[15] = product->Data[15];
  4635  01DE  0879               	movf	_product,w
  4636  01DF  0086               	movwf	6
  4637  01E0  0187               	clrf	7
  4638  01E1  3F4F               	moviw [15]fsr1
  4639  01E2  00CF               	movwf	(_RF_Data^(0+128)+15)
  4640                           
  4641                           ;RF_Control_B1.c: 239: RF_Data[16] = product->Data[16];
  4642  01E3  0879               	movf	_product,w
  4643  01E4  0086               	movwf	6
  4644  01E5  0187               	clrf	7
  4645  01E6  3F50               	moviw [16]fsr1
  4646  01E7  00D0               	movwf	(_RF_Data^(0+128)+16)
  4647                           
  4648                           ;RF_Control_B1.c: 240: RF_Data[17] = product->Data[17];
  4649  01E8  0879               	movf	_product,w
  4650  01E9  0086               	movwf	6
  4651  01EA  0187               	clrf	7
  4652  01EB  3F51               	moviw [17]fsr1
  4653  01EC  00D1               	movwf	(_RF_Data^(0+128)+17)
  4654                           
  4655                           ;RF_Control_B1.c: 241: RF_Data[18] = product->Data[18];
  4656  01ED  0879               	movf	_product,w
  4657  01EE  0086               	movwf	6
  4658  01EF  0187               	clrf	7
  4659  01F0  3F52               	moviw [18]fsr1
  4660  01F1  00D2               	movwf	(_RF_Data^(0+128)+18)
  4661                           
  4662                           ;RF_Control_B1.c: 242: RF_Data[19] = product->Data[19];
  4663  01F2  0879               	movf	_product,w
  4664  01F3  0086               	movwf	6
  4665  01F4  0187               	clrf	7
  4666  01F5  3F53               	moviw [19]fsr1
  4667  01F6  00D3               	movwf	(_RF_Data^(0+128)+19)
  4668                           
  4669                           ;RF_Control_B1.c: 243: RF_Data[20] = 0xaa;
  4670  01F7  30AA               	movlw	170
  4671  01F8  00F4               	movwf	??_setTxData
  4672  01F9  0874               	movf	??_setTxData,w
  4673  01FA  00D4               	movwf	(_RF_Data^(0+128)+20)
  4674  01FB  0008               	return
  4675  01FC                     __end_of_setTxData:	
  4676                           
  4677                           	psect	text15
  4678  06B2                     __ptext15:	
  4679 ;; *************** function _getMain_All_Error_Status *****************
  4680 ;; Defined at:
  4681 ;;		line 376 in file "../src/Main_B1.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;  command         1    wreg     unsigned char 
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;  command         1    0[COMMON] unsigned char 
  4686 ;;  status          1    4[COMMON] unsigned char 
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  1    wreg      unsigned char 
  4689 ;; Registers used:
  4690 ;;		wreg, status,2
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4696 ;;      Params:         0       0       0       0       0       0       0       0
  4697 ;;      Locals:         1       0       0       0       0       0       0       0
  4698 ;;      Temps:          0       0       0       0       0       0       0       0
  4699 ;;      Totals:         1       0       0       0       0       0       0       0
  4700 ;;Total ram usage:        1 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; Hardware stack levels required when called:    3
  4703 ;; This function calls:
  4704 ;;		Nothing
  4705 ;; This function is called by:
  4706 ;;		_setRF_Main
  4707 ;;		_getRxData
  4708 ;; This function uses a non-reentrant model
  4709 ;;
  4710                           
  4711                           
  4712                           ;psect for function _getMain_All_Error_Status
  4713  06B2                     _getMain_All_Error_Status:	
  4714                           
  4715                           ;Main_B1.c: 377: char status = 0;
  4716                           
  4717                           ;incstack = 0
  4718                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2]
  4719  06B2  01F4               	clrf	getMain_All_Error_Status@status
  4720                           
  4721                           ;Main_B1.c: 413: return status;
  4722  06B3  0874               	movf	getMain_All_Error_Status@status,w
  4723  06B4  0008               	return
  4724  06B5                     __end_of_getMain_All_Error_Status:	
  4725                           
  4726                           	psect	text16
  4727  02C4                     __ptext16:	
  4728 ;; *************** function _CC2500_TxData *****************
  4729 ;; Defined at:
  4730 ;;		line 32 in file "../src/CC2500_B1.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;		None
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;  loop_e          1    3[BANK0 ] unsigned char 
  4735 ;; Return value:  Size  Location     Type
  4736 ;;		None               void
  4737 ;; Registers used:
  4738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4744 ;;      Params:         0       0       0       0       0       0       0       0
  4745 ;;      Locals:         0       1       0       0       0       0       0       0
  4746 ;;      Temps:          0       1       0       0       0       0       0       0
  4747 ;;      Totals:         0       2       0       0       0       0       0       0
  4748 ;;Total ram usage:        2 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; Hardware stack levels required when called:    5
  4751 ;; This function calls:
  4752 ;;		_CC2500_WriteByte
  4753 ;;		_CC2500_WriteCommand
  4754 ;;		_Timeout_Counter
  4755 ;;		_set_TimeoutCleared
  4756 ;; This function is called by:
  4757 ;;		_setRF_Main
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           
  4762                           ;psect for function _CC2500_TxData
  4763  02C4                     _CC2500_TxData:	
  4764                           
  4765                           ;CC2500_B1.c: 33: unsigned char loop_e;
  4766                           ;CC2500_B1.c: 35: RC0 = 0;
  4767                           
  4768                           ;incstack = 0
  4769                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4770  02C4  0020               	movlb	0	; select bank0
  4771  02C5  100E               	bcf	14,0	;volatile
  4772                           
  4773                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  4774  02C6  307F               	movlw	127
  4775  02C7  00D4               	movwf	??_CC2500_TxData
  4776  02C8  0854               	movf	??_CC2500_TxData,w
  4777  02C9  00F7               	movwf	_SPI0Buffer
  4778                           
  4779                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  4780  02CA  2ACE               	goto	l3484
  4781  02CB                     l3482:	
  4782                           
  4783                           ;CC2500_B1.c: 38: Timeout_Counter();
  4784  02CB  3185  25E0  3182   	fcall	_Timeout_Counter
  4785  02CE                     l3484:	
  4786  02CE  0020               	movlb	0	; select bank0
  4787  02CF  1E8E               	btfss	14,5	;volatile
  4788  02D0  2AD3               	goto	l3488
  4789  02D1  1D2C               	btfss	_myMain+12,2
  4790  02D2  2ACB               	goto	l3482
  4791  02D3                     l3488:	
  4792                           
  4793                           ;CC2500_B1.c: 39: };
  4794                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  4795  02D3  3186  2697  3182   	fcall	_set_TimeoutCleared
  4796                           
  4797                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  4798  02D6  3185  25F5  3182   	fcall	_CC2500_WriteByte
  4799                           
  4800                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  4801  02D9  0020               	movlb	0	; select bank0
  4802  02DA  085E               	movf	_Tx_Length,w
  4803  02DB  00D4               	movwf	??_CC2500_TxData
  4804  02DC  0854               	movf	??_CC2500_TxData,w
  4805  02DD  00F7               	movwf	_SPI0Buffer
  4806                           
  4807                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  4808  02DE  3185  25F5  3182   	fcall	_CC2500_WriteByte
  4809                           
  4810                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  4811  02E1  0020               	movlb	0	; select bank0
  4812  02E2  01D5               	clrf	CC2500_TxData@loop_e
  4813  02E3                     l3502:	
  4814  02E3  085E               	movf	_Tx_Length,w
  4815  02E4  0255               	subwf	CC2500_TxData@loop_e,w
  4816  02E5  1803               	btfsc	3,0
  4817  02E6  2AF8               	goto	l134
  4818                           
  4819                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  4820  02E7  0855               	movf	CC2500_TxData@loop_e,w
  4821  02E8  3EC0               	addlw	_RF_Data& (0+255)
  4822  02E9  0086               	movwf	6
  4823  02EA  0187               	clrf	7
  4824  02EB  0801               	movf	1,w
  4825  02EC  00D4               	movwf	??_CC2500_TxData
  4826  02ED  0854               	movf	??_CC2500_TxData,w
  4827  02EE  00F7               	movwf	_SPI0Buffer
  4828                           
  4829                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  4830  02EF  3185  25F5  3182   	fcall	_CC2500_WriteByte
  4831  02F2  3001               	movlw	1
  4832  02F3  0020               	movlb	0	; select bank0
  4833  02F4  00D4               	movwf	??_CC2500_TxData
  4834  02F5  0854               	movf	??_CC2500_TxData,w
  4835  02F6  07D5               	addwf	CC2500_TxData@loop_e,f
  4836  02F7  2AE3               	goto	l3502
  4837  02F8                     l134:	
  4838                           
  4839                           ;CC2500_B1.c: 48: }
  4840                           ;CC2500_B1.c: 49: RC0 = 1;
  4841  02F8  140E               	bsf	14,0	;volatile
  4842                           
  4843                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  4844  02F9  3035               	movlw	53
  4845  02FA  3185  259C  3182   	fcall	_CC2500_WriteCommand
  4846                           
  4847                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  4848  02FD  2B01               	goto	l3508
  4849  02FE                     l3506:	
  4850                           
  4851                           ;CC2500_B1.c: 52: Timeout_Counter();
  4852  02FE  3185  25E0  3182   	fcall	_Timeout_Counter
  4853  0301                     l3508:	
  4854  0301  0020               	movlb	0	; select bank0
  4855  0302  188E               	btfsc	14,1	;volatile
  4856  0303  2B06               	goto	l3512
  4857  0304  1D2C               	btfss	_myMain+12,2
  4858  0305  2AFE               	goto	l3506
  4859  0306                     l3512:	
  4860                           
  4861                           ;CC2500_B1.c: 53: };
  4862                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  4863  0306  3186  2697  3182   	fcall	_set_TimeoutCleared
  4864                           
  4865                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  4866  0309  2B0D               	goto	l3516
  4867  030A                     l3514:	
  4868                           
  4869                           ;CC2500_B1.c: 57: Timeout_Counter();
  4870  030A  3185  25E0  3182   	fcall	_Timeout_Counter
  4871  030D                     l3516:	
  4872  030D  0020               	movlb	0	; select bank0
  4873  030E  1C8E               	btfss	14,1	;volatile
  4874  030F  2B12               	goto	l3520
  4875  0310  1D2C               	btfss	_myMain+12,2
  4876  0311  2B0A               	goto	l3514
  4877  0312                     l3520:	
  4878                           
  4879                           ;CC2500_B1.c: 58: };
  4880                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  4881  0312  3186  2697  3182   	fcall	_set_TimeoutCleared
  4882                           
  4883                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  4884  0315  3036               	movlw	54
  4885  0316  3185  259C  3182   	fcall	_CC2500_WriteCommand
  4886                           
  4887                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  4888  0319  303B               	movlw	59
  4889  031A  3185  259C         	fcall	_CC2500_WriteCommand
  4890                           
  4891                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  4892  031C  14F6               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  4893  031D  0008               	return
  4894  031E                     __end_of_CC2500_TxData:	
  4895                           
  4896                           	psect	text17
  4897  0266                     __ptext17:	
  4898 ;; *************** function _CC2500_RxData *****************
  4899 ;; Defined at:
  4900 ;;		line 70 in file "../src/CC2500_B1.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;		None
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;  loop_f          1    3[BANK0 ] unsigned char 
  4905 ;; Return value:  Size  Location     Type
  4906 ;;		None               void
  4907 ;; Registers used:
  4908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4914 ;;      Params:         0       0       0       0       0       0       0       0
  4915 ;;      Locals:         0       1       0       0       0       0       0       0
  4916 ;;      Temps:          0       1       0       0       0       0       0       0
  4917 ;;      Totals:         0       2       0       0       0       0       0       0
  4918 ;;Total ram usage:        2 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:    5
  4921 ;; This function calls:
  4922 ;;		_CC2500_ReadByte
  4923 ;;		_CC2500_ReadStatus
  4924 ;;		_CC2500_WriteByte
  4925 ;;		_Timeout_Counter
  4926 ;;		_set_TimeoutCleared
  4927 ;; This function is called by:
  4928 ;;		_setRF_Main
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           
  4933                           ;psect for function _CC2500_RxData
  4934  0266                     _CC2500_RxData:	
  4935                           
  4936                           ;CC2500_B1.c: 71: unsigned char loop_f;
  4937                           ;CC2500_B1.c: 75: if (RC1 == 1)
  4938                           
  4939                           ;incstack = 0
  4940                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4941  0266  0020               	movlb	0	; select bank0
  4942  0267  188E               	btfsc	14,1	;volatile
  4943  0268  2A6D               	goto	l3534
  4944  0269  2A75               	goto	l3540
  4945  026A                     l3532:	
  4946                           ;CC2500_B1.c: 76: {
  4947                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  4948                           
  4949                           
  4950                           ;CC2500_B1.c: 78: Timeout_Counter();
  4951  026A  3185  25E0  3182   	fcall	_Timeout_Counter
  4952  026D                     l3534:	
  4953  026D  0020               	movlb	0	; select bank0
  4954  026E  1C8E               	btfss	14,1	;volatile
  4955  026F  2A72               	goto	l3538
  4956  0270  1D2C               	btfss	_myMain+12,2
  4957  0271  2A6A               	goto	l3532
  4958  0272                     l3538:	
  4959                           
  4960                           ;CC2500_B1.c: 79: };
  4961                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  4962  0272  3186  2697  3182   	fcall	_set_TimeoutCleared
  4963  0275                     l3540:	
  4964                           
  4965                           ;CC2500_B1.c: 81: }
  4966                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  4967  0275  303B               	movlw	59
  4968  0276  3184  24E6  3182   	fcall	_CC2500_ReadStatus
  4969                           
  4970                           ;CC2500_B1.c: 85: if (s_data != 0) {
  4971  0279  0878               	movf	_s_data,w
  4972  027A  1903               	btfsc	3,2
  4973  027B  0008               	return
  4974                           
  4975                           ;CC2500_B1.c: 86: RC0 = 0;
  4976  027C  0020               	movlb	0	; select bank0
  4977  027D  100E               	bcf	14,0	;volatile
  4978                           
  4979                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  4980  027E  30FF               	movlw	255
  4981  027F  00D4               	movwf	??_CC2500_RxData
  4982  0280  0854               	movf	??_CC2500_RxData,w
  4983  0281  00F7               	movwf	_SPI0Buffer
  4984                           
  4985                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  4986  0282  2A86               	goto	l3550
  4987  0283                     l3548:	
  4988                           
  4989                           ;CC2500_B1.c: 89: Timeout_Counter();
  4990  0283  3185  25E0  3182   	fcall	_Timeout_Counter
  4991  0286                     l3550:	
  4992  0286  0020               	movlb	0	; select bank0
  4993  0287  1E8E               	btfss	14,5	;volatile
  4994  0288  2A8B               	goto	l3554
  4995  0289  1D2C               	btfss	_myMain+12,2
  4996  028A  2A83               	goto	l3548
  4997  028B                     l3554:	
  4998                           
  4999                           ;CC2500_B1.c: 90: };
  5000                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  5001  028B  3186  2697  3182   	fcall	_set_TimeoutCleared
  5002                           
  5003                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  5004  028E  3185  25F5  3182   	fcall	_CC2500_WriteByte
  5005                           
  5006                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  5007  0291  3185  25B4  3182   	fcall	_CC2500_ReadByte
  5008                           
  5009                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  5010  0294  0877               	movf	_SPI0Buffer,w
  5011  0295  0020               	movlb	0	; select bank0
  5012  0296  00D4               	movwf	??_CC2500_RxData
  5013  0297  0854               	movf	??_CC2500_RxData,w
  5014  0298  00C2               	movwf	_Rx_Length
  5015                           
  5016                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  5017  0299  01D5               	clrf	CC2500_RxData@loop_f
  5018  029A                     l3570:	
  5019  029A  0842               	movf	_Rx_Length,w
  5020  029B  0255               	subwf	CC2500_RxData@loop_f,w
  5021  029C  1803               	btfsc	3,0
  5022  029D  2AAF               	goto	l3572
  5023                           
  5024                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  5025  029E  3185  25B4  3182   	fcall	_CC2500_ReadByte
  5026                           
  5027                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  5028  02A1  0877               	movf	_SPI0Buffer,w
  5029  02A2  0020               	movlb	0	; select bank0
  5030  02A3  00D4               	movwf	??_CC2500_RxData
  5031  02A4  0855               	movf	CC2500_RxData@loop_f,w
  5032  02A5  3EC0               	addlw	_RF_Data& (0+255)
  5033  02A6  0086               	movwf	6
  5034  02A7  0187               	clrf	7
  5035  02A8  0854               	movf	??_CC2500_RxData,w
  5036  02A9  0081               	movwf	1
  5037  02AA  3001               	movlw	1
  5038  02AB  00D4               	movwf	??_CC2500_RxData
  5039  02AC  0854               	movf	??_CC2500_RxData,w
  5040  02AD  07D5               	addwf	CC2500_RxData@loop_f,f
  5041  02AE  2A9A               	goto	l3570
  5042  02AF                     l3572:	
  5043                           
  5044                           ;CC2500_B1.c: 99: }
  5045                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  5046  02AF  3185  25B4  3182   	fcall	_CC2500_ReadByte
  5047                           
  5048                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  5049  02B2  0877               	movf	_SPI0Buffer,w
  5050  02B3  0020               	movlb	0	; select bank0
  5051  02B4  00D4               	movwf	??_CC2500_RxData
  5052  02B5  0854               	movf	??_CC2500_RxData,w
  5053  02B6  00C1               	movwf	_RSSI
  5054                           
  5055                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  5056  02B7  3185  25B4         	fcall	_CC2500_ReadByte
  5057                           
  5058                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  5059  02B9  0877               	movf	_SPI0Buffer,w
  5060  02BA  0020               	movlb	0	; select bank0
  5061  02BB  00D4               	movwf	??_CC2500_RxData
  5062  02BC  0854               	movf	??_CC2500_RxData,w
  5063  02BD  00C0               	movwf	_CRC
  5064                           
  5065                           ;CC2500_B1.c: 104: RC0 = 1;
  5066  02BE  140E               	bsf	14,0	;volatile
  5067                           
  5068                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  5069  02BF  1BC0               	btfsc	_CRC,7
  5070                           
  5071                           ;CC2500_B1.c: 106: Receive_OK = 1;
  5072  02C0  1476               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  5073                           
  5074                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  5075  02C1  11AF               	bcf	_RF1,3
  5076                           
  5077                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  5078  02C2  14AF               	bsf	_RF1,1
  5079  02C3  0008               	return
  5080  02C4                     __end_of_CC2500_RxData:	
  5081                           
  5082                           	psect	text18
  5083  04E6                     __ptext18:	
  5084 ;; *************** function _CC2500_ReadStatus *****************
  5085 ;; Defined at:
  5086 ;;		line 301 in file "../src/CC2500_B1.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;  status_addr     1    wreg     unsigned char 
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;  status_addr     1    1[BANK0 ] unsigned char 
  5091 ;; Return value:  Size  Location     Type
  5092 ;;		None               void
  5093 ;; Registers used:
  5094 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5100 ;;      Params:         0       0       0       0       0       0       0       0
  5101 ;;      Locals:         0       1       0       0       0       0       0       0
  5102 ;;      Temps:          0       1       0       0       0       0       0       0
  5103 ;;      Totals:         0       2       0       0       0       0       0       0
  5104 ;;Total ram usage:        2 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; Hardware stack levels required when called:    4
  5107 ;; This function calls:
  5108 ;;		_CC2500_ReadByte
  5109 ;;		_CC2500_WriteByte
  5110 ;;		_Timeout_Counter
  5111 ;;		_set_TimeoutCleared
  5112 ;; This function is called by:
  5113 ;;		_CC2500_RxData
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           
  5118                           ;psect for function _CC2500_ReadStatus
  5119  04E6                     _CC2500_ReadStatus:	
  5120                           
  5121                           ;incstack = 0
  5122                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5123                           ;CC2500_ReadStatus@status_addr stored from wreg
  5124  04E6  0020               	movlb	0	; select bank0
  5125  04E7  00D3               	movwf	CC2500_ReadStatus@status_addr
  5126                           
  5127                           ;CC2500_B1.c: 302: RC0 = 0;
  5128  04E8  100E               	bcf	14,0	;volatile
  5129                           
  5130                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  5131  04E9  0853               	movf	CC2500_ReadStatus@status_addr,w
  5132  04EA  3EC0               	addlw	192
  5133  04EB  00D2               	movwf	??_CC2500_ReadStatus
  5134  04EC  0852               	movf	??_CC2500_ReadStatus,w
  5135  04ED  00F7               	movwf	_SPI0Buffer
  5136                           
  5137                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  5138  04EE  2CF2               	goto	l3440
  5139  04EF                     l3438:	
  5140                           
  5141                           ;CC2500_B1.c: 306: Timeout_Counter();
  5142  04EF  3185  25E0  3184   	fcall	_Timeout_Counter
  5143  04F2                     l3440:	
  5144  04F2  0020               	movlb	0	; select bank0
  5145  04F3  1E8E               	btfss	14,5	;volatile
  5146  04F4  2CF7               	goto	l3444
  5147  04F5  1D2C               	btfss	_myMain+12,2
  5148  04F6  2CEF               	goto	l3438
  5149  04F7                     l3444:	
  5150                           
  5151                           ;CC2500_B1.c: 307: };
  5152                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  5153  04F7  3186  2697  3184   	fcall	_set_TimeoutCleared
  5154                           
  5155                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  5156  04FA  3185  25F5  3184   	fcall	_CC2500_WriteByte
  5157                           
  5158                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  5159  04FD  3185  25B4         	fcall	_CC2500_ReadByte
  5160                           
  5161                           ;CC2500_B1.c: 312: RC0 = 1;
  5162  04FF  0020               	movlb	0	; select bank0
  5163  0500  140E               	bsf	14,0	;volatile
  5164                           
  5165                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  5166  0501  0877               	movf	_SPI0Buffer,w
  5167  0502  00D2               	movwf	??_CC2500_ReadStatus
  5168  0503  0852               	movf	??_CC2500_ReadStatus,w
  5169  0504  00F8               	movwf	_s_data
  5170  0505  0008               	return
  5171  0506                     __end_of_CC2500_ReadStatus:	
  5172                           
  5173                           	psect	text19
  5174  05B4                     __ptext19:	
  5175 ;; *************** function _CC2500_ReadByte *****************
  5176 ;; Defined at:
  5177 ;;		line 235 in file "../src/CC2500_B1.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;		None
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;  loop_b          1    5[COMMON] unsigned char 
  5182 ;; Return value:  Size  Location     Type
  5183 ;;		None               void
  5184 ;; Registers used:
  5185 ;;		wreg, status,2, status,0
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5191 ;;      Params:         0       0       0       0       0       0       0       0
  5192 ;;      Locals:         1       0       0       0       0       0       0       0
  5193 ;;      Temps:          1       0       0       0       0       0       0       0
  5194 ;;      Totals:         2       0       0       0       0       0       0       0
  5195 ;;Total ram usage:        2 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; Hardware stack levels required when called:    3
  5198 ;; This function calls:
  5199 ;;		Nothing
  5200 ;; This function is called by:
  5201 ;;		_CC2500_RxData
  5202 ;;		_CC2500_ReadStatus
  5203 ;;		_CC2500_ReadREG
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           
  5208                           ;psect for function _CC2500_ReadByte
  5209  05B4                     _CC2500_ReadByte:	
  5210                           
  5211                           ;CC2500_B1.c: 236: unsigned char loop_b;
  5212                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  5213                           
  5214                           ;incstack = 0
  5215                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  5216  05B4  01F5               	clrf	CC2500_ReadByte@loop_b
  5217  05B5                     L2:	
  5218  05B5  3008               	movlw	8
  5219  05B6  0275               	subwf	CC2500_ReadByte@loop_b,w
  5220  05B7  1803               	btfsc	3,0
  5221  05B8  0008               	return
  5222                           
  5223                           ;CC2500_B1.c: 238: RC3 = 1;
  5224  05B9  0020               	movlb	0	; select bank0
  5225  05BA  158E               	bsf	14,3	;volatile
  5226                           
  5227                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  5228  05BB  1003               	clrc
  5229  05BC  0DF7               	rlf	_SPI0Buffer,f
  5230                           
  5231                           ;CC2500_B1.c: 240: if (RC5 == 1)
  5232  05BD  1E8E               	btfss	14,5	;volatile
  5233  05BE  2DC1               	goto	l3368
  5234                           
  5235                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  5236  05BF  1477               	bsf	_SPI0Buffer,0
  5237  05C0  2DC5               	goto	l3370
  5238  05C1                     l3368:	
  5239                           
  5240                           ;CC2500_B1.c: 242: else
  5241                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  5242  05C1  30FE               	movlw	254
  5243  05C2  00F4               	movwf	??_CC2500_ReadByte
  5244  05C3  0874               	movf	??_CC2500_ReadByte,w
  5245  05C4  05F7               	andwf	_SPI0Buffer,f
  5246  05C5                     l3370:	
  5247                           
  5248                           ;CC2500_B1.c: 244: RC3 = 0;
  5249  05C5  118E               	bcf	14,3	;volatile
  5250  05C6  3001               	movlw	1
  5251  05C7  00F4               	movwf	??_CC2500_ReadByte
  5252  05C8  0874               	movf	??_CC2500_ReadByte,w
  5253  05C9  07F5               	addwf	CC2500_ReadByte@loop_b,f
  5254  05CA  2DB5               	goto	L2
  5255  05CB                     __end_of_CC2500_ReadByte:	
  5256                           
  5257                           	psect	text20
  5258  06B5                     __ptext20:	
  5259 ;; *************** function _RF_Initialization *****************
  5260 ;; Defined at:
  5261 ;;		line 9 in file "../src/RF_Control_B1.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;		None
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;		None
  5266 ;; Return value:  Size  Location     Type
  5267 ;;		None               void
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0, pclath, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5275 ;;      Params:         0       0       0       0       0       0       0       0
  5276 ;;      Locals:         0       0       0       0       0       0       0       0
  5277 ;;      Temps:          0       0       0       0       0       0       0       0
  5278 ;;      Totals:         0       0       0       0       0       0       0       0
  5279 ;;Total ram usage:        0 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    4
  5282 ;; This function calls:
  5283 ;;		_setRF_Initialization
  5284 ;; This function is called by:
  5285 ;;		_main
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           
  5290                           ;psect for function _RF_Initialization
  5291  06B5                     _RF_Initialization:	
  5292                           
  5293                           ;RF_Control_B1.c: 11: setRF_Initialization();
  5294                           
  5295                           ;incstack = 0
  5296                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5297  06B5  3186  266E         	fcall	_setRF_Initialization
  5298  06B7  0008               	return
  5299  06B8                     __end_of_RF_Initialization:	
  5300                           
  5301                           	psect	text21
  5302  066E                     __ptext21:	
  5303 ;; *************** function _setRF_Initialization *****************
  5304 ;; Defined at:
  5305 ;;		line 43 in file "../src/RF_Control_B1.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;		None
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;		None
  5310 ;; Return value:  Size  Location     Type
  5311 ;;		None               void
  5312 ;; Registers used:
  5313 ;;		wreg
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5319 ;;      Params:         0       0       0       0       0       0       0       0
  5320 ;;      Locals:         0       0       0       0       0       0       0       0
  5321 ;;      Temps:          1       0       0       0       0       0       0       0
  5322 ;;      Totals:         1       0       0       0       0       0       0       0
  5323 ;;Total ram usage:        1 bytes
  5324 ;; Hardware stack levels used:    1
  5325 ;; Hardware stack levels required when called:    3
  5326 ;; This function calls:
  5327 ;;		Nothing
  5328 ;; This function is called by:
  5329 ;;		_RF_Initialization
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           
  5334                           ;psect for function _setRF_Initialization
  5335  066E                     _setRF_Initialization:	
  5336                           
  5337                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  5338                           
  5339                           ;incstack = 0
  5340                           ; Regs used in _setRF_Initialization: [wreg]
  5341  066E  3015               	movlw	21
  5342  066F  00F4               	movwf	??_setRF_Initialization
  5343  0670  0874               	movf	??_setRF_Initialization,w
  5344  0671  0020               	movlb	0	; select bank0
  5345  0672  00DE               	movwf	_Tx_Length
  5346                           
  5347                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  5348  0673  300A               	movlw	10
  5349  0674  00B6               	movwf	_RF1+7
  5350  0675  3000               	movlw	0
  5351  0676  00B7               	movwf	_RF1+8
  5352  0677  0008               	return
  5353  0678                     __end_of_setRF_Initialization:	
  5354                           
  5355                           	psect	text22
  5356  064B                     __ptext22:	
  5357 ;; *************** function _Mcu_Initialization *****************
  5358 ;; Defined at:
  5359 ;;		line 30 in file "../src/MCU_B1.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;		None
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;		None               void
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0, pclath, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5373 ;;      Params:         0       0       0       0       0       0       0       0
  5374 ;;      Locals:         0       0       0       0       0       0       0       0
  5375 ;;      Temps:          0       0       0       0       0       0       0       0
  5376 ;;      Totals:         0       0       0       0       0       0       0       0
  5377 ;;Total ram usage:        0 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    4
  5380 ;; This function calls:
  5381 ;;		_Fosc_Set
  5382 ;;		_IO_Set
  5383 ;;		_TMR1_Set
  5384 ;;		_UART_Set
  5385 ;; This function is called by:
  5386 ;;		_main
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           
  5391                           ;psect for function _Mcu_Initialization
  5392  064B                     _Mcu_Initialization:	
  5393                           
  5394                           ;MCU_B1.c: 32: Fosc_Set();
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5398  064B  3186  269C  3186   	fcall	_Fosc_Set
  5399                           
  5400                           ;MCU_B1.c: 34: IO_Set();
  5401  064E  3186  261E  3186   	fcall	_IO_Set
  5402                           
  5403                           ;MCU_B1.c: 36: ;;
  5404                           ;MCU_B1.c: 38: TMR1_Set();
  5405  0651  3186  2657  3186   	fcall	_TMR1_Set
  5406                           
  5407                           ;MCU_B1.c: 40: ;;
  5408                           ;MCU_B1.c: 42: ;;
  5409                           ;MCU_B1.c: 44: ;;
  5410                           ;MCU_B1.c: 46: ;;
  5411                           ;MCU_B1.c: 48: ;;
  5412                           ;MCU_B1.c: 50: UART_Set();
  5413  0654  3186  260A         	fcall	_UART_Set
  5414  0656  0008               	return
  5415  0657                     __end_of_Mcu_Initialization:	
  5416                           
  5417                           	psect	text23
  5418  060A                     __ptext23:	
  5419 ;; *************** function _UART_Set *****************
  5420 ;; Defined at:
  5421 ;;		line 719 in file "../src/MCU_B1.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;		None
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;		None
  5426 ;; Return value:  Size  Location     Type
  5427 ;;		None               void
  5428 ;; Registers used:
  5429 ;;		wreg, status,2
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5435 ;;      Params:         0       0       0       0       0       0       0       0
  5436 ;;      Locals:         0       0       0       0       0       0       0       0
  5437 ;;      Temps:          0       0       0       0       0       0       0       0
  5438 ;;      Totals:         0       0       0       0       0       0       0       0
  5439 ;;Total ram usage:        0 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; Hardware stack levels required when called:    3
  5442 ;; This function calls:
  5443 ;;		Nothing
  5444 ;; This function is called by:
  5445 ;;		_Mcu_Initialization
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           
  5450                           ;psect for function _UART_Set
  5451  060A                     _UART_Set:	
  5452                           
  5453                           ;MCU_B1.c: 721: TRISC7 = 1;
  5454                           
  5455                           ;incstack = 0
  5456                           ; Regs used in _UART_Set: [wreg+status,2]
  5457  060A  0021               	movlb	1	; select bank1
  5458  060B  178E               	bsf	14,7	;volatile
  5459                           
  5460                           ;MCU_B1.c: 722: TRISC6 = 1;
  5461  060C  170E               	bsf	14,6	;volatile
  5462                           
  5463                           ;MCU_B1.c: 723: SPBRG = ((int)(16000000L/(16UL * 19200) -1));
  5464  060D  3033               	movlw	51
  5465  060E  0023               	movlb	3	; select bank3
  5466  060F  009B               	movwf	27	;volatile
  5467                           
  5468                           ;MCU_B1.c: 725: SPBRGH = 0;
  5469  0610  019C               	clrf	28	;volatile
  5470                           
  5471                           ;MCU_B1.c: 726: BRG16 = 0;
  5472  0611  119F               	bcf	31,3	;volatile
  5473                           
  5474                           ;MCU_B1.c: 728: RCSTA = (0 | 0x90);
  5475  0612  3090               	movlw	144
  5476  0613  009D               	movwf	29	;volatile
  5477                           
  5478                           ;MCU_B1.c: 729: TXSTA = (0x4 | 0 | 0x20);
  5479  0614  3024               	movlw	36
  5480  0615  009E               	movwf	30	;volatile
  5481                           
  5482                           ;MCU_B1.c: 730: TX9 = 0;
  5483  0616  131E               	bcf	30,6	;volatile
  5484                           
  5485                           ;MCU_B1.c: 731: RX9 = 0;
  5486  0617  131D               	bcf	29,6	;volatile
  5487                           
  5488                           ;MCU_B1.c: 732: TXIE = 0;
  5489  0618  0021               	movlb	1	; select bank1
  5490  0619  1211               	bcf	17,4	;volatile
  5491                           
  5492                           ;MCU_B1.c: 733: RCIE = 1;
  5493  061A  1691               	bsf	17,5	;volatile
  5494                           
  5495                           ;MCU_B1.c: 734: PEIE = 1;
  5496  061B  170B               	bsf	11,6	;volatile
  5497                           
  5498                           ;MCU_B1.c: 735: GIE = 1;
  5499  061C  178B               	bsf	11,7	;volatile
  5500  061D  0008               	return
  5501  061E                     __end_of_UART_Set:	
  5502                           
  5503                           	psect	text24
  5504  0657                     __ptext24:	
  5505 ;; *************** function _TMR1_Set *****************
  5506 ;; Defined at:
  5507 ;;		line 199 in file "../src/MCU_B1.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;		None
  5510 ;; Auto vars:     Size  Location     Type
  5511 ;;		None
  5512 ;; Return value:  Size  Location     Type
  5513 ;;		None               void
  5514 ;; Registers used:
  5515 ;;		wreg
  5516 ;; Tracked objects:
  5517 ;;		On entry : 0/0
  5518 ;;		On exit  : 0/0
  5519 ;;		Unchanged: 0/0
  5520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5521 ;;      Params:         0       0       0       0       0       0       0       0
  5522 ;;      Locals:         0       0       0       0       0       0       0       0
  5523 ;;      Temps:          0       0       0       0       0       0       0       0
  5524 ;;      Totals:         0       0       0       0       0       0       0       0
  5525 ;;Total ram usage:        0 bytes
  5526 ;; Hardware stack levels used:    1
  5527 ;; Hardware stack levels required when called:    3
  5528 ;; This function calls:
  5529 ;;		Nothing
  5530 ;; This function is called by:
  5531 ;;		_Mcu_Initialization
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535                           
  5536                           ;psect for function _TMR1_Set
  5537  0657                     _TMR1_Set:	
  5538                           
  5539                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  5540                           
  5541                           ;incstack = 0
  5542                           ; Regs used in _TMR1_Set: [wreg]
  5543  0657  3041               	movlw	65
  5544  0658  0020               	movlb	0	; select bank0
  5545  0659  0098               	movwf	24	;volatile
  5546                           
  5547                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  5548  065A  30FA               	movlw	250
  5549  065B  0097               	movwf	23	;volatile
  5550                           
  5551                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  5552  065C  3038               	movlw	56
  5553  065D  0096               	movwf	22	;volatile
  5554                           
  5555                           ;MCU_B1.c: 203: TMR1IE = 1;
  5556  065E  0021               	movlb	1	; select bank1
  5557  065F  1411               	bsf	17,0	;volatile
  5558                           
  5559                           ;MCU_B1.c: 204: PEIE = 1;
  5560  0660  170B               	bsf	11,6	;volatile
  5561                           
  5562                           ;MCU_B1.c: 205: GIE = 1;
  5563  0661  178B               	bsf	11,7	;volatile
  5564  0662  0008               	return
  5565  0663                     __end_of_TMR1_Set:	
  5566                           
  5567                           	psect	text25
  5568  061E                     __ptext25:	
  5569 ;; *************** function _IO_Set *****************
  5570 ;; Defined at:
  5571 ;;		line 60 in file "../src/MCU_B1.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;		None
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;		None
  5576 ;; Return value:  Size  Location     Type
  5577 ;;		None               void
  5578 ;; Registers used:
  5579 ;;		wreg, status,2
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5585 ;;      Params:         0       0       0       0       0       0       0       0
  5586 ;;      Locals:         0       0       0       0       0       0       0       0
  5587 ;;      Temps:          0       0       0       0       0       0       0       0
  5588 ;;      Totals:         0       0       0       0       0       0       0       0
  5589 ;;Total ram usage:        0 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    3
  5592 ;; This function calls:
  5593 ;;		Nothing
  5594 ;; This function is called by:
  5595 ;;		_Mcu_Initialization
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           
  5600                           ;psect for function _IO_Set
  5601  061E                     _IO_Set:	
  5602                           
  5603                           ;MCU_B1.c: 73: TRISA = 0b00000000;;
  5604                           
  5605                           ;incstack = 0
  5606                           ; Regs used in _IO_Set: [wreg+status,2]
  5607  061E  0021               	movlb	1	; select bank1
  5608  061F  018C               	clrf	12	;volatile
  5609                           
  5610                           ;MCU_B1.c: 74: TRISB = 0b00000000;;
  5611  0620  018D               	clrf	13	;volatile
  5612                           
  5613                           ;MCU_B1.c: 75: TRISC = 0b11100110;;
  5614  0621  30E6               	movlw	230
  5615  0622  008E               	movwf	14	;volatile
  5616                           
  5617                           ;MCU_B1.c: 76: LATA = 0b00000000;;
  5618  0623  0022               	movlb	2	; select bank2
  5619  0624  018C               	clrf	12	;volatile
  5620                           
  5621                           ;MCU_B1.c: 77: LATB = 0b00000000;;
  5622  0625  018D               	clrf	13	;volatile
  5623                           
  5624                           ;MCU_B1.c: 78: LATC = 0b00000000;;
  5625  0626  018E               	clrf	14	;volatile
  5626                           
  5627                           ;MCU_B1.c: 79: ANSELA = 0b00000000;;
  5628  0627  0023               	movlb	3	; select bank3
  5629  0628  018C               	clrf	12	;volatile
  5630                           
  5631                           ;MCU_B1.c: 80: ANSELB = 0b00000000;;
  5632  0629  018D               	clrf	13	;volatile
  5633                           
  5634                           ;MCU_B1.c: 81: ANSELC = 0b00000000;;
  5635  062A  018E               	clrf	14	;volatile
  5636                           
  5637                           ;MCU_B1.c: 82: PORTA = 0b00000000;;
  5638  062B  0020               	movlb	0	; select bank0
  5639  062C  018C               	clrf	12	;volatile
  5640                           
  5641                           ;MCU_B1.c: 83: PORTB = 0b00000000;;
  5642  062D  018D               	clrf	13	;volatile
  5643                           
  5644                           ;MCU_B1.c: 84: PORTC = 0b11100110;;
  5645  062E  30E6               	movlw	230
  5646  062F  008E               	movwf	14	;volatile
  5647  0630  0008               	return
  5648  0631                     __end_of_IO_Set:	
  5649                           
  5650                           	psect	text26
  5651  069C                     __ptext26:	
  5652 ;; *************** function _Fosc_Set *****************
  5653 ;; Defined at:
  5654 ;;		line 56 in file "../src/MCU_B1.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;		None
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;		None
  5659 ;; Return value:  Size  Location     Type
  5660 ;;		None               void
  5661 ;; Registers used:
  5662 ;;		wreg
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5668 ;;      Params:         0       0       0       0       0       0       0       0
  5669 ;;      Locals:         0       0       0       0       0       0       0       0
  5670 ;;      Temps:          0       0       0       0       0       0       0       0
  5671 ;;      Totals:         0       0       0       0       0       0       0       0
  5672 ;;Total ram usage:        0 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    3
  5675 ;; This function calls:
  5676 ;;		Nothing
  5677 ;; This function is called by:
  5678 ;;		_Mcu_Initialization
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           
  5683                           ;psect for function _Fosc_Set
  5684  069C                     _Fosc_Set:	
  5685                           
  5686                           ;MCU_B1.c: 57: OSCCON = 0x78;
  5687                           
  5688                           ;incstack = 0
  5689                           ; Regs used in _Fosc_Set: [wreg]
  5690  069C  3078               	movlw	120
  5691  069D  0021               	movlb	1	; select bank1
  5692  069E  0099               	movwf	25	;volatile
  5693  069F  0008               	return
  5694  06A0                     __end_of_Fosc_Set:	
  5695                           
  5696                           	psect	text27
  5697  05CB                     __ptext27:	
  5698 ;; *************** function _CC2500_PowerOnInitial *****************
  5699 ;; Defined at:
  5700 ;;		line 119 in file "../src/CC2500_B1.c"
  5701 ;; Parameters:    Size  Location     Type
  5702 ;;		None
  5703 ;; Auto vars:     Size  Location     Type
  5704 ;;		None
  5705 ;; Return value:  Size  Location     Type
  5706 ;;		None               void
  5707 ;; Registers used:
  5708 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5709 ;; Tracked objects:
  5710 ;;		On entry : 0/0
  5711 ;;		On exit  : 0/0
  5712 ;;		Unchanged: 0/0
  5713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5714 ;;      Params:         0       0       0       0       0       0       0       0
  5715 ;;      Locals:         0       0       0       0       0       0       0       0
  5716 ;;      Temps:          0       0       0       0       0       0       0       0
  5717 ;;      Totals:         0       0       0       0       0       0       0       0
  5718 ;;Total ram usage:        0 bytes
  5719 ;; Hardware stack levels used:    1
  5720 ;; Hardware stack levels required when called:    6
  5721 ;; This function calls:
  5722 ;;		_CC2500_ClearRXFIFO
  5723 ;;		_CC2500_ClearTXFIFO
  5724 ;;		_CC2500_FrequencyCabr
  5725 ;;		_CC2500_InitPATable
  5726 ;;		_CC2500_InitSetREG
  5727 ;;		_CC2500_PowerRST
  5728 ;;		_CC2500_SIDLEMode
  5729 ;; This function is called by:
  5730 ;;		_main
  5731 ;; This function uses a non-reentrant model
  5732 ;;
  5733                           
  5734                           
  5735                           ;psect for function _CC2500_PowerOnInitial
  5736  05CB                     _CC2500_PowerOnInitial:	
  5737                           
  5738                           ;CC2500_B1.c: 120: CC2500_PowerRST();
  5739                           
  5740                           ;incstack = 0
  5741                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5742  05CB  3183  23B6  3185   	fcall	_CC2500_PowerRST
  5743                           
  5744                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
  5745  05CE  3184  2453  3185   	fcall	_CC2500_InitSetREG
  5746                           
  5747                           ;CC2500_B1.c: 122: CC2500_InitPATable();
  5748  05D1  3185  2526  3185   	fcall	_CC2500_InitPATable
  5749                           
  5750                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
  5751  05D4  3186  26A4  3185   	fcall	_CC2500_ClearTXFIFO
  5752                           
  5753                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
  5754  05D7  3186  26A8  3185   	fcall	_CC2500_ClearRXFIFO
  5755                           
  5756                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
  5757  05DA  3186  2663  3185   	fcall	_CC2500_FrequencyCabr
  5758                           
  5759                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
  5760  05DD  3186  26A0         	fcall	_CC2500_SIDLEMode
  5761  05DF  0008               	return
  5762  05E0                     __end_of_CC2500_PowerOnInitial:	
  5763                           
  5764                           	psect	text28
  5765  06A0                     __ptext28:	
  5766 ;; *************** function _CC2500_SIDLEMode *****************
  5767 ;; Defined at:
  5768 ;;		line 209 in file "../src/CC2500_B1.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;		None
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;		None
  5773 ;; Return value:  Size  Location     Type
  5774 ;;		None               void
  5775 ;; Registers used:
  5776 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5782 ;;      Params:         0       0       0       0       0       0       0       0
  5783 ;;      Locals:         0       0       0       0       0       0       0       0
  5784 ;;      Temps:          0       0       0       0       0       0       0       0
  5785 ;;      Totals:         0       0       0       0       0       0       0       0
  5786 ;;Total ram usage:        0 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:    5
  5789 ;; This function calls:
  5790 ;;		_CC2500_WriteCommand
  5791 ;; This function is called by:
  5792 ;;		_CC2500_PowerOnInitial
  5793 ;; This function uses a non-reentrant model
  5794 ;;
  5795                           
  5796                           
  5797                           ;psect for function _CC2500_SIDLEMode
  5798  06A0                     _CC2500_SIDLEMode:	
  5799                           
  5800                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
  5801                           
  5802                           ;incstack = 0
  5803                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5804  06A0  3036               	movlw	54
  5805  06A1  3185  259C         	fcall	_CC2500_WriteCommand
  5806  06A3  0008               	return
  5807  06A4                     __end_of_CC2500_SIDLEMode:	
  5808                           
  5809                           	psect	text29
  5810  03B6                     __ptext29:	
  5811 ;; *************** function _CC2500_PowerRST *****************
  5812 ;; Defined at:
  5813 ;;		line 132 in file "../src/CC2500_B1.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;		None
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;		None
  5818 ;; Return value:  Size  Location     Type
  5819 ;;		None               void
  5820 ;; Registers used:
  5821 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5822 ;; Tracked objects:
  5823 ;;		On entry : 0/0
  5824 ;;		On exit  : 0/0
  5825 ;;		Unchanged: 0/0
  5826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5827 ;;      Params:         0       0       0       0       0       0       0       0
  5828 ;;      Locals:         0       0       0       0       0       0       0       0
  5829 ;;      Temps:          0       1       0       0       0       0       0       0
  5830 ;;      Totals:         0       1       0       0       0       0       0       0
  5831 ;;Total ram usage:        1 bytes
  5832 ;; Hardware stack levels used:    1
  5833 ;; Hardware stack levels required when called:    4
  5834 ;; This function calls:
  5835 ;;		_CC2500_WriteByte
  5836 ;;		_DelayTime_1us
  5837 ;;		_Timeout_Counter
  5838 ;;		_set_TimeoutCleared
  5839 ;; This function is called by:
  5840 ;;		_CC2500_PowerOnInitial
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _CC2500_PowerRST
  5846  03B6                     _CC2500_PowerRST:	
  5847                           
  5848                           ;CC2500_B1.c: 133: RC3 = 0;
  5849                           
  5850                           ;incstack = 0
  5851                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5852  03B6  0020               	movlb	0	; select bank0
  5853  03B7  118E               	bcf	14,3	;volatile
  5854                           
  5855                           ;CC2500_B1.c: 134: RC4 = 0;
  5856  03B8  120E               	bcf	14,4	;volatile
  5857                           
  5858                           ;CC2500_B1.c: 135: RC0 = 1;
  5859  03B9  140E               	bsf	14,0	;volatile
  5860                           
  5861                           ;CC2500_B1.c: 136: DelayTime_1us(10);
  5862  03BA  300A               	movlw	10
  5863  03BB  00F4               	movwf	DelayTime_1us@count
  5864  03BC  3000               	movlw	0
  5865  03BD  00F5               	movwf	DelayTime_1us@count+1
  5866  03BE  3184  247D  3183   	fcall	_DelayTime_1us
  5867                           
  5868                           ;CC2500_B1.c: 137: RC0 = 0;
  5869  03C1  0020               	movlb	0	; select bank0
  5870  03C2  100E               	bcf	14,0	;volatile
  5871                           
  5872                           ;CC2500_B1.c: 138: DelayTime_1us(10);
  5873  03C3  300A               	movlw	10
  5874  03C4  00F4               	movwf	DelayTime_1us@count
  5875  03C5  3000               	movlw	0
  5876  03C6  00F5               	movwf	DelayTime_1us@count+1
  5877  03C7  3184  247D  3183   	fcall	_DelayTime_1us
  5878                           
  5879                           ;CC2500_B1.c: 139: RC0 = 1;
  5880  03CA  0020               	movlb	0	; select bank0
  5881  03CB  140E               	bsf	14,0	;volatile
  5882                           
  5883                           ;CC2500_B1.c: 140: DelayTime_1us(40);
  5884  03CC  3028               	movlw	40
  5885  03CD  00F4               	movwf	DelayTime_1us@count
  5886  03CE  3000               	movlw	0
  5887  03CF  00F5               	movwf	DelayTime_1us@count+1
  5888  03D0  3184  247D  3183   	fcall	_DelayTime_1us
  5889                           
  5890                           ;CC2500_B1.c: 141: RC0 = 0;
  5891  03D3  0020               	movlb	0	; select bank0
  5892  03D4  100E               	bcf	14,0	;volatile
  5893                           
  5894                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
  5895  03D5  3030               	movlw	48
  5896  03D6  00D6               	movwf	??_CC2500_PowerRST
  5897  03D7  0856               	movf	??_CC2500_PowerRST,w
  5898  03D8  00F7               	movwf	_SPI0Buffer
  5899                           
  5900                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
  5901  03D9  2BDD               	goto	l3692
  5902  03DA                     l3690:	
  5903                           
  5904                           ;CC2500_B1.c: 144: Timeout_Counter();
  5905  03DA  3185  25E0  3183   	fcall	_Timeout_Counter
  5906  03DD                     l3692:	
  5907  03DD  0020               	movlb	0	; select bank0
  5908  03DE  1E8E               	btfss	14,5	;volatile
  5909  03DF  2BE2               	goto	l3696
  5910  03E0  1D2C               	btfss	_myMain+12,2
  5911  03E1  2BDA               	goto	l3690
  5912  03E2                     l3696:	
  5913                           
  5914                           ;CC2500_B1.c: 145: };
  5915                           ;CC2500_B1.c: 146: set_TimeoutCleared();
  5916  03E2  3186  2697  3183   	fcall	_set_TimeoutCleared
  5917                           
  5918                           ;CC2500_B1.c: 147: CC2500_WriteByte();
  5919  03E5  3185  25F5  3183   	fcall	_CC2500_WriteByte
  5920                           
  5921                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
  5922  03E8  2BEC               	goto	l3702
  5923  03E9                     l3700:	
  5924                           
  5925                           ;CC2500_B1.c: 149: Timeout_Counter();
  5926  03E9  3185  25E0  3183   	fcall	_Timeout_Counter
  5927  03EC                     l3702:	
  5928  03EC  0020               	movlb	0	; select bank0
  5929  03ED  1E8E               	btfss	14,5	;volatile
  5930  03EE  2BF1               	goto	l3706
  5931  03EF  1D2C               	btfss	_myMain+12,2
  5932  03F0  2BE9               	goto	l3700
  5933  03F1                     l3706:	
  5934                           
  5935                           ;CC2500_B1.c: 150: };
  5936                           ;CC2500_B1.c: 151: set_TimeoutCleared();
  5937  03F1  3186  2697         	fcall	_set_TimeoutCleared
  5938                           
  5939                           ;CC2500_B1.c: 152: RC4 = 0;
  5940  03F3  0020               	movlb	0	; select bank0
  5941  03F4  120E               	bcf	14,4	;volatile
  5942                           
  5943                           ;CC2500_B1.c: 153: RC0 = 1;
  5944  03F5  140E               	bsf	14,0	;volatile
  5945  03F6  0008               	return
  5946  03F7                     __end_of_CC2500_PowerRST:	
  5947                           
  5948                           	psect	text30
  5949  0453                     __ptext30:	
  5950 ;; *************** function _CC2500_InitSetREG *****************
  5951 ;; Defined at:
  5952 ;;		line 159 in file "../src/CC2500_B1.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;		None
  5955 ;; Auto vars:     Size  Location     Type
  5956 ;;  loop_c          1    6[BANK0 ] unsigned char 
  5957 ;;  temp2           1    5[BANK0 ] unsigned char 
  5958 ;;  temp1           1    4[BANK0 ] unsigned char 
  5959 ;; Return value:  Size  Location     Type
  5960 ;;		None               void
  5961 ;; Registers used:
  5962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5968 ;;      Params:         0       0       0       0       0       0       0       0
  5969 ;;      Locals:         0       3       0       0       0       0       0       0
  5970 ;;      Temps:          0       1       0       0       0       0       0       0
  5971 ;;      Totals:         0       4       0       0       0       0       0       0
  5972 ;;Total ram usage:        4 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    5
  5975 ;; This function calls:
  5976 ;;		_CC2500_WriteREG
  5977 ;; This function is called by:
  5978 ;;		_CC2500_PowerOnInitial
  5979 ;; This function uses a non-reentrant model
  5980 ;;
  5981                           
  5982                           
  5983                           ;psect for function _CC2500_InitSetREG
  5984  0453                     _CC2500_InitSetREG:	
  5985                           
  5986                           ;CC2500_B1.c: 160: unsigned char loop_c;
  5987                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
  5988                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
  5989                           
  5990                           ;incstack = 0
  5991                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5992  0453  0020               	movlb	0	; select bank0
  5993  0454  01D8               	clrf	CC2500_InitSetREG@loop_c
  5994  0455                     L3:	
  5995  0455  302F               	movlw	47
  5996  0456  0258               	subwf	CC2500_InitSetREG@loop_c,w
  5997  0457  1803               	btfsc	3,0
  5998  0458  0008               	return
  5999                           
  6000                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
  6001  0459  0858               	movf	CC2500_InitSetREG@loop_c,w
  6002  045A  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  6003  045B  0084               	movwf	4
  6004  045C  3082               	movlw	high (_CC2500_registers_address| (0+32768))
  6005  045D  1803               	skipnc
  6006  045E  3E01               	addlw	1
  6007  045F  0085               	movwf	5
  6008  0460  0800               	movf	0,w	;code access
  6009  0461  00D5               	movwf	??_CC2500_InitSetREG
  6010  0462  0855               	movf	??_CC2500_InitSetREG,w
  6011  0463  00D6               	movwf	CC2500_InitSetREG@temp1
  6012                           
  6013                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
  6014  0464  0858               	movf	CC2500_InitSetREG@loop_c,w
  6015  0465  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  6016  0466  0084               	movwf	4
  6017  0467  3082               	movlw	high (_CC2500_rfSettings| (0+32768))
  6018  0468  1803               	skipnc
  6019  0469  3E01               	addlw	1
  6020  046A  0085               	movwf	5
  6021  046B  0800               	movf	0,w	;code access
  6022  046C  00D5               	movwf	??_CC2500_InitSetREG
  6023  046D  0855               	movf	??_CC2500_InitSetREG,w
  6024  046E  00D7               	movwf	CC2500_InitSetREG@temp2
  6025                           
  6026                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
  6027  046F  0857               	movf	CC2500_InitSetREG@temp2,w
  6028  0470  00D5               	movwf	??_CC2500_InitSetREG
  6029  0471  0855               	movf	??_CC2500_InitSetREG,w
  6030  0472  00D2               	movwf	CC2500_WriteREG@value
  6031  0473  0856               	movf	CC2500_InitSetREG@temp1,w
  6032  0474  3185  2506  3184   	fcall	_CC2500_WriteREG
  6033  0477  3001               	movlw	1
  6034  0478  0020               	movlb	0	; select bank0
  6035  0479  00D5               	movwf	??_CC2500_InitSetREG
  6036  047A  0855               	movf	??_CC2500_InitSetREG,w
  6037  047B  07D8               	addwf	CC2500_InitSetREG@loop_c,f
  6038  047C  2C55               	goto	L3
  6039  047D                     __end_of_CC2500_InitSetREG:	
  6040                           
  6041                           	psect	text31
  6042  0526                     __ptext31:	
  6043 ;; *************** function _CC2500_InitPATable *****************
  6044 ;; Defined at:
  6045 ;;		line 174 in file "../src/CC2500_B1.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;		None
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;  loop_d          1    5[BANK0 ] unsigned char 
  6050 ;;  temp            1    4[BANK0 ] unsigned char 
  6051 ;; Return value:  Size  Location     Type
  6052 ;;		None               void
  6053 ;; Registers used:
  6054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6055 ;; Tracked objects:
  6056 ;;		On entry : 0/0
  6057 ;;		On exit  : 0/0
  6058 ;;		Unchanged: 0/0
  6059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6060 ;;      Params:         0       0       0       0       0       0       0       0
  6061 ;;      Locals:         0       2       0       0       0       0       0       0
  6062 ;;      Temps:          0       1       0       0       0       0       0       0
  6063 ;;      Totals:         0       3       0       0       0       0       0       0
  6064 ;;Total ram usage:        3 bytes
  6065 ;; Hardware stack levels used:    1
  6066 ;; Hardware stack levels required when called:    5
  6067 ;; This function calls:
  6068 ;;		_CC2500_WriteREG
  6069 ;; This function is called by:
  6070 ;;		_CC2500_PowerOnInitial
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           
  6075                           ;psect for function _CC2500_InitPATable
  6076  0526                     _CC2500_InitPATable:	
  6077                           
  6078                           ;CC2500_B1.c: 175: unsigned char loop_d;
  6079                           ;CC2500_B1.c: 176: unsigned char temp;
  6080                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
  6081                           
  6082                           ;incstack = 0
  6083                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6084  0526  0020               	movlb	0	; select bank0
  6085  0527  01D7               	clrf	CC2500_InitPATable@loop_d
  6086  0528                     L4:	
  6087  0528  3008               	movlw	8
  6088  0529  0257               	subwf	CC2500_InitPATable@loop_d,w
  6089  052A  1803               	btfsc	3,0
  6090  052B  0008               	return
  6091                           
  6092                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
  6093  052C  0857               	movf	CC2500_InitPATable@loop_d,w
  6094  052D  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  6095  052E  0084               	movwf	4
  6096  052F  3082               	movlw	high (_CC2500_patable_vaule| (0+32768))
  6097  0530  1803               	skipnc
  6098  0531  3E01               	addlw	1
  6099  0532  0085               	movwf	5
  6100  0533  0800               	movf	0,w	;code access
  6101  0534  00D5               	movwf	??_CC2500_InitPATable
  6102  0535  0855               	movf	??_CC2500_InitPATable,w
  6103  0536  00D6               	movwf	CC2500_InitPATable@temp
  6104                           
  6105                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
  6106  0537  0856               	movf	CC2500_InitPATable@temp,w
  6107  0538  00D5               	movwf	??_CC2500_InitPATable
  6108  0539  0855               	movf	??_CC2500_InitPATable,w
  6109  053A  00D2               	movwf	CC2500_WriteREG@value
  6110  053B  303E               	movlw	62
  6111  053C  3185  2506  3185   	fcall	_CC2500_WriteREG
  6112  053F  3001               	movlw	1
  6113  0540  0020               	movlb	0	; select bank0
  6114  0541  00D5               	movwf	??_CC2500_InitPATable
  6115  0542  0855               	movf	??_CC2500_InitPATable,w
  6116  0543  07D7               	addwf	CC2500_InitPATable@loop_d,f
  6117  0544  2D28               	goto	L4
  6118  0545                     __end_of_CC2500_InitPATable:	
  6119                           
  6120                           	psect	text32
  6121  0506                     __ptext32:	
  6122 ;; *************** function _CC2500_WriteREG *****************
  6123 ;; Defined at:
  6124 ;;		line 251 in file "../src/CC2500_B1.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;  w_addr          1    wreg     unsigned char 
  6127 ;;  value           1    0[BANK0 ] unsigned char 
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;  w_addr          1    2[BANK0 ] unsigned char 
  6130 ;; Return value:  Size  Location     Type
  6131 ;;		None               void
  6132 ;; Registers used:
  6133 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6139 ;;      Params:         0       1       0       0       0       0       0       0
  6140 ;;      Locals:         0       1       0       0       0       0       0       0
  6141 ;;      Temps:          0       1       0       0       0       0       0       0
  6142 ;;      Totals:         0       3       0       0       0       0       0       0
  6143 ;;Total ram usage:        3 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; Hardware stack levels required when called:    4
  6146 ;; This function calls:
  6147 ;;		_CC2500_WriteByte
  6148 ;;		_Timeout_Counter
  6149 ;;		_set_TimeoutCleared
  6150 ;; This function is called by:
  6151 ;;		_CC2500_InitSetREG
  6152 ;;		_CC2500_InitPATable
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           
  6157                           ;psect for function _CC2500_WriteREG
  6158  0506                     _CC2500_WriteREG:	
  6159                           
  6160                           ;incstack = 0
  6161                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6162                           ;CC2500_WriteREG@w_addr stored from wreg
  6163  0506  0020               	movlb	0	; select bank0
  6164  0507  00D4               	movwf	CC2500_WriteREG@w_addr
  6165                           
  6166                           ;CC2500_B1.c: 252: RC0 = 0;
  6167  0508  100E               	bcf	14,0	;volatile
  6168                           
  6169                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
  6170  0509  0854               	movf	CC2500_WriteREG@w_addr,w
  6171  050A  00D3               	movwf	??_CC2500_WriteREG
  6172  050B  0853               	movf	??_CC2500_WriteREG,w
  6173  050C  00F7               	movwf	_SPI0Buffer
  6174                           
  6175                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
  6176  050D  2D11               	goto	l3602
  6177  050E                     l3600:	
  6178                           
  6179                           ;CC2500_B1.c: 255: Timeout_Counter();
  6180  050E  3185  25E0  3185   	fcall	_Timeout_Counter
  6181  0511                     l3602:	
  6182  0511  0020               	movlb	0	; select bank0
  6183  0512  1E8E               	btfss	14,5	;volatile
  6184  0513  2D16               	goto	l3606
  6185  0514  1D2C               	btfss	_myMain+12,2
  6186  0515  2D0E               	goto	l3600
  6187  0516                     l3606:	
  6188                           
  6189                           ;CC2500_B1.c: 256: };
  6190                           ;CC2500_B1.c: 257: set_TimeoutCleared();
  6191  0516  3186  2697  3185   	fcall	_set_TimeoutCleared
  6192                           
  6193                           ;CC2500_B1.c: 259: CC2500_WriteByte();
  6194  0519  3185  25F5  3185   	fcall	_CC2500_WriteByte
  6195                           
  6196                           ;CC2500_B1.c: 260: SPI0Buffer = value;
  6197  051C  0020               	movlb	0	; select bank0
  6198  051D  0852               	movf	CC2500_WriteREG@value,w
  6199  051E  00D3               	movwf	??_CC2500_WriteREG
  6200  051F  0853               	movf	??_CC2500_WriteREG,w
  6201  0520  00F7               	movwf	_SPI0Buffer
  6202                           
  6203                           ;CC2500_B1.c: 261: CC2500_WriteByte();
  6204  0521  3185  25F5         	fcall	_CC2500_WriteByte
  6205                           
  6206                           ;CC2500_B1.c: 262: RC0 = 1;
  6207  0523  0020               	movlb	0	; select bank0
  6208  0524  140E               	bsf	14,0	;volatile
  6209  0525  0008               	return
  6210  0526                     __end_of_CC2500_WriteREG:	
  6211                           
  6212                           	psect	text33
  6213  0663                     __ptext33:	
  6214 ;; *************** function _CC2500_FrequencyCabr *****************
  6215 ;; Defined at:
  6216 ;;		line 201 in file "../src/CC2500_B1.c"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;		None
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;		None
  6221 ;; Return value:  Size  Location     Type
  6222 ;;		None               void
  6223 ;; Registers used:
  6224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6225 ;; Tracked objects:
  6226 ;;		On entry : 0/0
  6227 ;;		On exit  : 0/0
  6228 ;;		Unchanged: 0/0
  6229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6230 ;;      Params:         0       0       0       0       0       0       0       0
  6231 ;;      Locals:         0       0       0       0       0       0       0       0
  6232 ;;      Temps:          0       0       0       0       0       0       0       0
  6233 ;;      Totals:         0       0       0       0       0       0       0       0
  6234 ;;Total ram usage:        0 bytes
  6235 ;; Hardware stack levels used:    1
  6236 ;; Hardware stack levels required when called:    5
  6237 ;; This function calls:
  6238 ;;		_CC2500_WriteCommand
  6239 ;;		_DelayTime_1us
  6240 ;; This function is called by:
  6241 ;;		_CC2500_PowerOnInitial
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245                           
  6246                           ;psect for function _CC2500_FrequencyCabr
  6247  0663                     _CC2500_FrequencyCabr:	
  6248                           
  6249                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
  6250                           
  6251                           ;incstack = 0
  6252                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6253  0663  3033               	movlw	51
  6254  0664  3185  259C  3186   	fcall	_CC2500_WriteCommand
  6255                           
  6256                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
  6257  0667  30E8               	movlw	232
  6258  0668  00F4               	movwf	DelayTime_1us@count
  6259  0669  3003               	movlw	3
  6260  066A  00F5               	movwf	DelayTime_1us@count+1
  6261  066B  3184  247D         	fcall	_DelayTime_1us
  6262  066D  0008               	return
  6263  066E                     __end_of_CC2500_FrequencyCabr:	
  6264                           
  6265                           	psect	text34
  6266  047D                     __ptext34:	
  6267 ;; *************** function _DelayTime_1us *****************
  6268 ;; Defined at:
  6269 ;;		line 320 in file "../src/CC2500_B1.c"
  6270 ;; Parameters:    Size  Location     Type
  6271 ;;  count           2    4[COMMON] int 
  6272 ;; Auto vars:     Size  Location     Type
  6273 ;;  j               2    2[BANK0 ] unsigned int 
  6274 ;;  i               2    0[BANK0 ] unsigned int 
  6275 ;; Return value:  Size  Location     Type
  6276 ;;		None               void
  6277 ;; Registers used:
  6278 ;;		wreg, status,2
  6279 ;; Tracked objects:
  6280 ;;		On entry : 0/0
  6281 ;;		On exit  : 0/0
  6282 ;;		Unchanged: 0/0
  6283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6284 ;;      Params:         2       0       0       0       0       0       0       0
  6285 ;;      Locals:         0       4       0       0       0       0       0       0
  6286 ;;      Temps:          0       0       0       0       0       0       0       0
  6287 ;;      Totals:         2       4       0       0       0       0       0       0
  6288 ;;Total ram usage:        6 bytes
  6289 ;; Hardware stack levels used:    1
  6290 ;; Hardware stack levels required when called:    3
  6291 ;; This function calls:
  6292 ;;		Nothing
  6293 ;; This function is called by:
  6294 ;;		_CC2500_PowerRST
  6295 ;;		_CC2500_FrequencyCabr
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           
  6300                           ;psect for function _DelayTime_1us
  6301  047D                     _DelayTime_1us:	
  6302                           
  6303                           ;CC2500_B1.c: 321: unsigned int i, j;
  6304                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
  6305                           
  6306                           ;incstack = 0
  6307                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  6308  047D  3001               	movlw	1
  6309  047E  0020               	movlb	0	; select bank0
  6310  047F  00D2               	movwf	DelayTime_1us@i
  6311  0480  3000               	movlw	0
  6312  0481  00D3               	movwf	DelayTime_1us@i+1
  6313  0482                     l251:	
  6314  0482  0875               	movf	DelayTime_1us@count+1,w
  6315  0483  0253               	subwf	DelayTime_1us@i+1,w
  6316  0484  1D03               	skipz
  6317  0485  2C88               	goto	u2605
  6318  0486  0874               	movf	DelayTime_1us@count,w
  6319  0487  0252               	subwf	DelayTime_1us@i,w
  6320  0488                     u2605:	
  6321  0488  1803               	btfsc	3,0
  6322  0489  0008               	return
  6323                           
  6324                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
  6325  048A  01D4               	clrf	DelayTime_1us@j
  6326  048B  01D5               	clrf	DelayTime_1us@j+1
  6327  048C  3000               	movlw	0
  6328  048D  0255               	subwf	DelayTime_1us@j+1,w
  6329  048E  3002               	movlw	2
  6330  048F  1903               	skipnz
  6331  0490  0254               	subwf	DelayTime_1us@j,w
  6332  0491  1803               	btfsc	3,0
  6333  0492  2C9E               	goto	l3594
  6334  0493                     l3592:	
  6335  0493  3001               	movlw	1
  6336  0494  07D4               	addwf	DelayTime_1us@j,f
  6337  0495  3000               	movlw	0
  6338  0496  3DD5               	addwfc	DelayTime_1us@j+1,f
  6339  0497  3000               	movlw	0
  6340  0498  0255               	subwf	DelayTime_1us@j+1,w
  6341  0499  3002               	movlw	2
  6342  049A  1903               	skipnz
  6343  049B  0254               	subwf	DelayTime_1us@j,w
  6344  049C  1C03               	skipc
  6345  049D  2C93               	goto	l3592
  6346  049E                     l3594:	
  6347  049E  3001               	movlw	1
  6348  049F  07D2               	addwf	DelayTime_1us@i,f
  6349  04A0  3000               	movlw	0
  6350  04A1  3DD3               	addwfc	DelayTime_1us@i+1,f
  6351  04A2  2C82               	goto	l251
  6352  04A3                     __end_of_DelayTime_1us:	
  6353                           
  6354                           	psect	text35
  6355  06A4                     __ptext35:	
  6356 ;; *************** function _CC2500_ClearTXFIFO *****************
  6357 ;; Defined at:
  6358 ;;		line 187 in file "../src/CC2500_B1.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;		None
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;		None
  6363 ;; Return value:  Size  Location     Type
  6364 ;;		None               void
  6365 ;; Registers used:
  6366 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6372 ;;      Params:         0       0       0       0       0       0       0       0
  6373 ;;      Locals:         0       0       0       0       0       0       0       0
  6374 ;;      Temps:          0       0       0       0       0       0       0       0
  6375 ;;      Totals:         0       0       0       0       0       0       0       0
  6376 ;;Total ram usage:        0 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    5
  6379 ;; This function calls:
  6380 ;;		_CC2500_WriteCommand
  6381 ;; This function is called by:
  6382 ;;		_CC2500_PowerOnInitial
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           
  6387                           ;psect for function _CC2500_ClearTXFIFO
  6388  06A4                     _CC2500_ClearTXFIFO:	
  6389                           
  6390                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
  6391                           
  6392                           ;incstack = 0
  6393                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6394  06A4  303B               	movlw	59
  6395  06A5  3185  259C         	fcall	_CC2500_WriteCommand
  6396  06A7  0008               	return
  6397  06A8                     __end_of_CC2500_ClearTXFIFO:	
  6398                           
  6399                           	psect	text36
  6400  06A8                     __ptext36:	
  6401 ;; *************** function _CC2500_ClearRXFIFO *****************
  6402 ;; Defined at:
  6403 ;;		line 194 in file "../src/CC2500_B1.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;		None
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;		None
  6408 ;; Return value:  Size  Location     Type
  6409 ;;		None               void
  6410 ;; Registers used:
  6411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6412 ;; Tracked objects:
  6413 ;;		On entry : 0/0
  6414 ;;		On exit  : 0/0
  6415 ;;		Unchanged: 0/0
  6416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6417 ;;      Params:         0       0       0       0       0       0       0       0
  6418 ;;      Locals:         0       0       0       0       0       0       0       0
  6419 ;;      Temps:          0       0       0       0       0       0       0       0
  6420 ;;      Totals:         0       0       0       0       0       0       0       0
  6421 ;;Total ram usage:        0 bytes
  6422 ;; Hardware stack levels used:    1
  6423 ;; Hardware stack levels required when called:    5
  6424 ;; This function calls:
  6425 ;;		_CC2500_WriteCommand
  6426 ;; This function is called by:
  6427 ;;		_CC2500_PowerOnInitial
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           
  6432                           ;psect for function _CC2500_ClearRXFIFO
  6433  06A8                     _CC2500_ClearRXFIFO:	
  6434                           
  6435                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
  6436                           
  6437                           ;incstack = 0
  6438                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6439  06A8  303A               	movlw	58
  6440  06A9  3185  259C         	fcall	_CC2500_WriteCommand
  6441  06AB  0008               	return
  6442  06AC                     __end_of_CC2500_ClearRXFIFO:	
  6443                           
  6444                           	psect	text37
  6445  059C                     __ptext37:	
  6446 ;; *************** function _CC2500_WriteCommand *****************
  6447 ;; Defined at:
  6448 ;;		line 285 in file "../src/CC2500_B1.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;  command         1    wreg     unsigned char 
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  command         1    1[BANK0 ] unsigned char 
  6453 ;; Return value:  Size  Location     Type
  6454 ;;		None               void
  6455 ;; Registers used:
  6456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6457 ;; Tracked objects:
  6458 ;;		On entry : 0/0
  6459 ;;		On exit  : 0/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6462 ;;      Params:         0       0       0       0       0       0       0       0
  6463 ;;      Locals:         0       1       0       0       0       0       0       0
  6464 ;;      Temps:          0       1       0       0       0       0       0       0
  6465 ;;      Totals:         0       2       0       0       0       0       0       0
  6466 ;;Total ram usage:        2 bytes
  6467 ;; Hardware stack levels used:    1
  6468 ;; Hardware stack levels required when called:    4
  6469 ;; This function calls:
  6470 ;;		_CC2500_WriteByte
  6471 ;;		_Timeout_Counter
  6472 ;;		_set_TimeoutCleared
  6473 ;; This function is called by:
  6474 ;;		_CC2500_TxData
  6475 ;;		_CC2500_ClearTXFIFO
  6476 ;;		_CC2500_ClearRXFIFO
  6477 ;;		_CC2500_FrequencyCabr
  6478 ;;		_CC2500_SIDLEMode
  6479 ;;		_setRF_Main
  6480 ;;		_RF_RxDisable
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           
  6485                           ;psect for function _CC2500_WriteCommand
  6486  059C                     _CC2500_WriteCommand:	
  6487                           
  6488                           ;incstack = 0
  6489                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6490                           ;CC2500_WriteCommand@command stored from wreg
  6491  059C  0020               	movlb	0	; select bank0
  6492  059D  00D3               	movwf	CC2500_WriteCommand@command
  6493                           
  6494                           ;CC2500_B1.c: 286: RC0 = 0;
  6495  059E  100E               	bcf	14,0	;volatile
  6496                           
  6497                           ;CC2500_B1.c: 287: SPI0Buffer = command;
  6498  059F  0853               	movf	CC2500_WriteCommand@command,w
  6499  05A0  00D2               	movwf	??_CC2500_WriteCommand
  6500  05A1  0852               	movf	??_CC2500_WriteCommand,w
  6501  05A2  00F7               	movwf	_SPI0Buffer
  6502                           
  6503                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
  6504  05A3  2DA7               	goto	l3424
  6505  05A4                     l3422:	
  6506                           
  6507                           ;CC2500_B1.c: 290: Timeout_Counter();
  6508  05A4  3185  25E0  3185   	fcall	_Timeout_Counter
  6509  05A7                     l3424:	
  6510  05A7  0020               	movlb	0	; select bank0
  6511  05A8  1E8E               	btfss	14,5	;volatile
  6512  05A9  2DAC               	goto	l3428
  6513  05AA  1D2C               	btfss	_myMain+12,2
  6514  05AB  2DA4               	goto	l3422
  6515  05AC                     l3428:	
  6516                           
  6517                           ;CC2500_B1.c: 291: };
  6518                           ;CC2500_B1.c: 292: set_TimeoutCleared();
  6519  05AC  3186  2697  3185   	fcall	_set_TimeoutCleared
  6520                           
  6521                           ;CC2500_B1.c: 294: CC2500_WriteByte();
  6522  05AF  3185  25F5         	fcall	_CC2500_WriteByte
  6523                           
  6524                           ;CC2500_B1.c: 295: RC0 = 1;
  6525  05B1  0020               	movlb	0	; select bank0
  6526  05B2  140E               	bsf	14,0	;volatile
  6527  05B3  0008               	return
  6528  05B4                     __end_of_CC2500_WriteCommand:	
  6529                           
  6530                           	psect	text38
  6531  0697                     __ptext38:	
  6532 ;; *************** function _set_TimeoutCleared *****************
  6533 ;; Defined at:
  6534 ;;		line 283 in file "../src/Main_B1.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;		None
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;		None
  6539 ;; Return value:  Size  Location     Type
  6540 ;;		None               void
  6541 ;; Registers used:
  6542 ;;		status,2
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6548 ;;      Params:         0       0       0       0       0       0       0       0
  6549 ;;      Locals:         0       0       0       0       0       0       0       0
  6550 ;;      Temps:          0       0       0       0       0       0       0       0
  6551 ;;      Totals:         0       0       0       0       0       0       0       0
  6552 ;;Total ram usage:        0 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:    3
  6555 ;; This function calls:
  6556 ;;		Nothing
  6557 ;; This function is called by:
  6558 ;;		_CC2500_TxData
  6559 ;;		_CC2500_RxData
  6560 ;;		_CC2500_PowerRST
  6561 ;;		_CC2500_WriteREG
  6562 ;;		_CC2500_WriteCommand
  6563 ;;		_CC2500_ReadStatus
  6564 ;;		_CC2500_ReadREG
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           
  6569                           ;psect for function _set_TimeoutCleared
  6570  0697                     _set_TimeoutCleared:	
  6571                           
  6572                           ;Main_B1.c: 284: myMain.Timeout = 0;
  6573                           
  6574                           ;incstack = 0
  6575                           ; Regs used in _set_TimeoutCleared: [status,2]
  6576  0697  0020               	movlb	0	; select bank0
  6577  0698  112C               	bcf	_myMain+12,2
  6578                           
  6579                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
  6580  0699  01AD               	clrf	_myMain+13
  6581  069A  01AE               	clrf	_myMain+14
  6582  069B  0008               	return
  6583  069C                     __end_of_set_TimeoutCleared:	
  6584                           
  6585                           	psect	text39
  6586  05E0                     __ptext39:	
  6587 ;; *************** function _Timeout_Counter *****************
  6588 ;; Defined at:
  6589 ;;		line 274 in file "../src/Main_B1.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;		None
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;		None
  6594 ;; Return value:  Size  Location     Type
  6595 ;;		None               void
  6596 ;; Registers used:
  6597 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6603 ;;      Params:         0       0       0       0       0       0       0       0
  6604 ;;      Locals:         0       0       0       0       0       0       0       0
  6605 ;;      Temps:          0       0       0       0       0       0       0       0
  6606 ;;      Totals:         0       0       0       0       0       0       0       0
  6607 ;;Total ram usage:        0 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    3
  6610 ;; This function calls:
  6611 ;;		Nothing
  6612 ;; This function is called by:
  6613 ;;		_CC2500_TxData
  6614 ;;		_CC2500_RxData
  6615 ;;		_CC2500_PowerRST
  6616 ;;		_CC2500_WriteREG
  6617 ;;		_CC2500_WriteCommand
  6618 ;;		_CC2500_ReadStatus
  6619 ;;		_CC2500_ReadREG
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           
  6624                           ;psect for function _Timeout_Counter
  6625  05E0                     _Timeout_Counter:	
  6626                           
  6627                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
  6628                           
  6629                           ;incstack = 0
  6630                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6631  05E0  3001               	movlw	1
  6632  05E1  0020               	movlb	0	; select bank0
  6633  05E2  07AD               	addwf	_myMain+13,f
  6634  05E3  3000               	movlw	0
  6635  05E4  3DAE               	addwfc	_myMain+14,f
  6636                           
  6637                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
  6638  05E5  300D               	movlw	13
  6639  05E6  3E20               	addlw	_myMain& (0+255)
  6640  05E7  0086               	movwf	6
  6641  05E8  0187               	clrf	7
  6642  05E9  3F40               	moviw [0]fsr1
  6643  05EA  3A10               	xorlw	16
  6644  05EB  1D03               	skipz
  6645  05EC  2DEF               	goto	u2305
  6646  05ED  3F41               	moviw [1]fsr1
  6647  05EE  3A27               	xorlw	39
  6648  05EF                     u2305:	
  6649  05EF  1D03               	skipz
  6650  05F0  0008               	return
  6651                           
  6652                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
  6653  05F1  01AD               	clrf	_myMain+13
  6654  05F2  01AE               	clrf	_myMain+14
  6655                           
  6656                           ;Main_B1.c: 278: myMain.Timeout = 1;
  6657  05F3  152C               	bsf	_myMain+12,2
  6658  05F4  0008               	return
  6659  05F5                     __end_of_Timeout_Counter:	
  6660                           
  6661                           	psect	text40
  6662  05F5                     __ptext40:	
  6663 ;; *************** function _CC2500_WriteByte *****************
  6664 ;; Defined at:
  6665 ;;		line 219 in file "../src/CC2500_B1.c"
  6666 ;; Parameters:    Size  Location     Type
  6667 ;;		None
  6668 ;; Auto vars:     Size  Location     Type
  6669 ;;  loop_a          1    5[COMMON] unsigned char 
  6670 ;; Return value:  Size  Location     Type
  6671 ;;		None               void
  6672 ;; Registers used:
  6673 ;;		wreg, status,2, status,0
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6679 ;;      Params:         0       0       0       0       0       0       0       0
  6680 ;;      Locals:         1       0       0       0       0       0       0       0
  6681 ;;      Temps:          1       0       0       0       0       0       0       0
  6682 ;;      Totals:         2       0       0       0       0       0       0       0
  6683 ;;Total ram usage:        2 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; Hardware stack levels required when called:    3
  6686 ;; This function calls:
  6687 ;;		Nothing
  6688 ;; This function is called by:
  6689 ;;		_CC2500_TxData
  6690 ;;		_CC2500_RxData
  6691 ;;		_CC2500_PowerRST
  6692 ;;		_CC2500_WriteREG
  6693 ;;		_CC2500_WriteCommand
  6694 ;;		_CC2500_ReadStatus
  6695 ;;		_CC2500_ReadREG
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           
  6700                           ;psect for function _CC2500_WriteByte
  6701  05F5                     _CC2500_WriteByte:	
  6702                           
  6703                           ;CC2500_B1.c: 220: unsigned char loop_a;
  6704                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
  6705                           
  6706                           ;incstack = 0
  6707                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  6708  05F5  01F5               	clrf	CC2500_WriteByte@loop_a
  6709  05F6                     L5:	
  6710  05F6  3008               	movlw	8
  6711  05F7  0275               	subwf	CC2500_WriteByte@loop_a,w
  6712  05F8  1803               	btfsc	3,0
  6713  05F9  0008               	return
  6714                           
  6715                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
  6716  05FA  1FF7               	btfss	_SPI0Buffer,7
  6717  05FB  2DFF               	goto	l207
  6718                           
  6719                           ;CC2500_B1.c: 223: RC4 = 1;
  6720  05FC  0020               	movlb	0	; select bank0
  6721  05FD  160E               	bsf	14,4	;volatile
  6722  05FE  2E01               	goto	l208
  6723  05FF                     l207:	
  6724                           
  6725                           ;CC2500_B1.c: 224: else
  6726                           ;CC2500_B1.c: 225: RC4 = 0;
  6727  05FF  0020               	movlb	0	; select bank0
  6728  0600  120E               	bcf	14,4	;volatile
  6729  0601                     l208:	
  6730                           
  6731                           ;CC2500_B1.c: 226: RC3 = 1;
  6732  0601  158E               	bsf	14,3	;volatile
  6733                           
  6734                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
  6735  0602  1003               	clrc
  6736  0603  0DF7               	rlf	_SPI0Buffer,f
  6737                           
  6738                           ;CC2500_B1.c: 228: RC3 = 0;
  6739  0604  118E               	bcf	14,3	;volatile
  6740  0605  3001               	movlw	1
  6741  0606  00F4               	movwf	??_CC2500_WriteByte
  6742  0607  0874               	movf	??_CC2500_WriteByte,w
  6743  0608  07F5               	addwf	CC2500_WriteByte@loop_a,f
  6744  0609  2DF6               	goto	L5
  6745  060A                     __end_of_CC2500_WriteByte:	
  6746                           
  6747                           	psect	intentry
  6748  0004                     __pintentry:	
  6749 ;; *************** function _ISR *****************
  6750 ;; Defined at:
  6751 ;;		line 107 in file "../src/MCU_B1.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;		None
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;		None
  6756 ;; Return value:  Size  Location     Type
  6757 ;;		None               void
  6758 ;; Registers used:
  6759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6765 ;;      Params:         0       0       0       0       0       0       0       0
  6766 ;;      Locals:         0       0       0       0       0       0       0       0
  6767 ;;      Temps:          1       0       0       0       0       0       0       0
  6768 ;;      Totals:         1       0       0       0       0       0       0       0
  6769 ;;Total ram usage:        1 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:    2
  6772 ;; This function calls:
  6773 ;;		_TMR1_ISR
  6774 ;;		_UART_ISR
  6775 ;; This function is called by:
  6776 ;;		Interrupt level 1
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780  0004                     _ISR:	
  6781                           
  6782                           ;incstack = 0
  6783                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6784  0004  147E               	bsf	126,0	;set compiler interrupt flag
  6785  0005  3180               	pagesel	$
  6786  0006  0020               	movlb	0	; select bank0
  6787  0007  087F               	movf	127,w
  6788  0008  00F3               	movwf	??_ISR
  6789                           
  6790                           ;MCU_B1.c: 109: ;;
  6791                           ;MCU_B1.c: 111: ;;
  6792                           ;MCU_B1.c: 113: TMR1_ISR();
  6793  0009  3185  2545  3180   	fcall	_TMR1_ISR
  6794                           
  6795                           ;MCU_B1.c: 115: ;;
  6796                           ;MCU_B1.c: 117: ;;
  6797                           ;MCU_B1.c: 119: UART_ISR();
  6798  000C  3184  2425         	fcall	_UART_ISR
  6799  000E  0873               	movf	??_ISR,w
  6800  000F  0020               	movlb	0	; select bank0
  6801  0010  00FF               	movwf	127
  6802  0011  107E               	bcf	126,0	;clear compiler interrupt flag
  6803  0012  0009               	retfie
  6804  0013                     __end_of_ISR:	
  6805                           
  6806                           	psect	text42
  6807  0425                     __ptext42:	
  6808 ;; *************** function _UART_ISR *****************
  6809 ;; Defined at:
  6810 ;;		line 739 in file "../src/MCU_B1.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;		None
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;  i               2    1[COMMON] int 
  6815 ;; Return value:  Size  Location     Type
  6816 ;;		None               void
  6817 ;; Registers used:
  6818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6819 ;; Tracked objects:
  6820 ;;		On entry : 0/0
  6821 ;;		On exit  : 0/0
  6822 ;;		Unchanged: 0/0
  6823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6824 ;;      Params:         0       0       0       0       0       0       0       0
  6825 ;;      Locals:         2       0       0       0       0       0       0       0
  6826 ;;      Temps:          1       0       0       0       0       0       0       0
  6827 ;;      Totals:         3       0       0       0       0       0       0       0
  6828 ;;Total ram usage:        3 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:    1
  6831 ;; This function calls:
  6832 ;;		_getch
  6833 ;; This function is called by:
  6834 ;;		_ISR
  6835 ;; This function uses a non-reentrant model
  6836 ;;
  6837                           
  6838                           
  6839                           ;psect for function _UART_ISR
  6840  0425                     _UART_ISR:	
  6841                           
  6842                           ;MCU_B1.c: 740: if (RCIE == 1 && RCIF == 1) {
  6843                           
  6844                           ;incstack = 0
  6845                           ; Regs used in _UART_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6846  0425  0021               	movlb	1	; select bank1
  6847  0426  1E91               	btfss	17,5	;volatile
  6848  0427  0008               	return
  6849  0428  0020               	movlb	0	; select bank0
  6850  0429  1E91               	btfss	17,5	;volatile
  6851  042A  0008               	return
  6852                           
  6853                           ;MCU_B1.c: 742: for (int i = 0; i < 8; i++) {
  6854  042B  01F1               	clrf	UART_ISR@i
  6855  042C  01F2               	clrf	UART_ISR@i+1
  6856  042D  0872               	movf	UART_ISR@i+1,w
  6857  042E  3A80               	xorlw	128
  6858  042F  00F0               	movwf	??_UART_ISR
  6859  0430  3080               	movlw	128
  6860  0431  0270               	subwf	??_UART_ISR,w
  6861  0432  3008               	movlw	8
  6862  0433  1903               	btfsc	3,2
  6863  0434  0271               	subwf	UART_ISR@i,w
  6864  0435  1803               	btfsc	3,0
  6865  0436  2C4F               	goto	i1l581
  6866  0437                     i1l3148:	
  6867                           
  6868                           ;MCU_B1.c: 743: UART.Data[i] = getch();
  6869  0437  3186  268C  3184   	fcall	_getch
  6870  043A  00F0               	movwf	??_UART_ISR
  6871  043B  0871               	movf	UART_ISR@i,w
  6872  043C  3E46               	addlw	_UART& (0+255)
  6873  043D  0086               	movwf	6
  6874  043E  0187               	clrf	7
  6875  043F  0870               	movf	??_UART_ISR,w
  6876  0440  0081               	movwf	1
  6877  0441  3001               	movlw	1
  6878  0442  07F1               	addwf	UART_ISR@i,f
  6879  0443  3000               	movlw	0
  6880  0444  3DF2               	addwfc	UART_ISR@i+1,f
  6881  0445  0872               	movf	UART_ISR@i+1,w
  6882  0446  3A80               	xorlw	128
  6883  0447  00F0               	movwf	??_UART_ISR
  6884  0448  3080               	movlw	128
  6885  0449  0270               	subwf	??_UART_ISR,w
  6886  044A  3008               	movlw	8
  6887  044B  1903               	btfsc	3,2
  6888  044C  0271               	subwf	UART_ISR@i,w
  6889  044D  1C03               	skipc
  6890  044E  2C37               	goto	i1l3148
  6891  044F                     i1l581:	
  6892                           
  6893                           ;MCU_B1.c: 744: }
  6894                           ;MCU_B1.c: 745: UART.RxGO = 1;
  6895  044F  0020               	movlb	0	; select bank0
  6896  0450  14D1               	bsf	_UART+11,1
  6897                           
  6898                           ;MCU_B1.c: 752: RCIF = 0;
  6899  0451  1291               	bcf	17,5	;volatile
  6900  0452  0008               	return
  6901  0453                     __end_of_UART_ISR:	
  6902                           
  6903                           	psect	text43
  6904  068C                     __ptext43:	
  6905 ;; *************** function _getch *****************
  6906 ;; Defined at:
  6907 ;;		line 850 in file "../src/MCU_B1.c"
  6908 ;; Parameters:    Size  Location     Type
  6909 ;;		None
  6910 ;; Auto vars:     Size  Location     Type
  6911 ;;		None
  6912 ;; Return value:  Size  Location     Type
  6913 ;;                  1    wreg      unsigned char 
  6914 ;; Registers used:
  6915 ;;		wreg
  6916 ;; Tracked objects:
  6917 ;;		On entry : 0/0
  6918 ;;		On exit  : 0/0
  6919 ;;		Unchanged: 0/0
  6920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6921 ;;      Params:         0       0       0       0       0       0       0       0
  6922 ;;      Locals:         0       0       0       0       0       0       0       0
  6923 ;;      Temps:          0       0       0       0       0       0       0       0
  6924 ;;      Totals:         0       0       0       0       0       0       0       0
  6925 ;;Total ram usage:        0 bytes
  6926 ;; Hardware stack levels used:    1
  6927 ;; This function calls:
  6928 ;;		Nothing
  6929 ;; This function is called by:
  6930 ;;		_UART_ISR
  6931 ;;		_getche
  6932 ;; This function uses a non-reentrant model
  6933 ;;
  6934                           
  6935                           
  6936                           ;psect for function _getch
  6937  068C                     _getch:	
  6938  068C                     i1l611:	
  6939                           ;MCU_B1.c: 853: continue;
  6940                           
  6941                           ;MCU_B1.c: 852: while (!RCIF)
  6942                           
  6943                           ;incstack = 0
  6944                           ; Regs used in _getch: [wreg]
  6945                           
  6946  068C  0020               	movlb	0	; select bank0
  6947  068D  1E91               	btfss	17,5	;volatile
  6948  068E  2E8C               	goto	i1l611
  6949                           
  6950                           ;MCU_B1.c: 854: return RCREG;
  6951  068F  0023               	movlb	3	; select bank3
  6952  0690  0819               	movf	25,w	;volatile
  6953  0691  0008               	return
  6954  0692                     __end_of_getch:	
  6955                           
  6956                           	psect	text44
  6957  0545                     __ptext44:	
  6958 ;; *************** function _TMR1_ISR *****************
  6959 ;; Defined at:
  6960 ;;		line 209 in file "../src/MCU_B1.c"
  6961 ;; Parameters:    Size  Location     Type
  6962 ;;		None
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;		None
  6965 ;; Return value:  Size  Location     Type
  6966 ;;		None               void
  6967 ;; Registers used:
  6968 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6969 ;; Tracked objects:
  6970 ;;		On entry : 0/0
  6971 ;;		On exit  : 0/0
  6972 ;;		Unchanged: 0/0
  6973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6974 ;;      Params:         0       0       0       0       0       0       0       0
  6975 ;;      Locals:         0       0       0       0       0       0       0       0
  6976 ;;      Temps:          0       0       0       0       0       0       0       0
  6977 ;;      Totals:         0       0       0       0       0       0       0       0
  6978 ;;Total ram usage:        0 bytes
  6979 ;; Hardware stack levels used:    1
  6980 ;; This function calls:
  6981 ;;		Nothing
  6982 ;; This function is called by:
  6983 ;;		_ISR
  6984 ;; This function uses a non-reentrant model
  6985 ;;
  6986                           
  6987                           
  6988                           ;psect for function _TMR1_ISR
  6989  0545                     _TMR1_ISR:	
  6990                           
  6991                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  6992                           
  6993                           ;incstack = 0
  6994                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  6995  0545  0021               	movlb	1	; select bank1
  6996  0546  1C11               	btfss	17,0	;volatile
  6997  0547  0008               	return
  6998  0548  0020               	movlb	0	; select bank0
  6999  0549  1C11               	btfss	17,0	;volatile
  7000  054A  0008               	return
  7001                           
  7002                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
  7003  054B  30FA               	movlw	250
  7004  054C  0097               	movwf	23	;volatile
  7005                           
  7006                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
  7007  054D  3038               	movlw	56
  7008  054E  0096               	movwf	22	;volatile
  7009                           
  7010                           ;MCU_B1.c: 214: TMR1IF = 0;
  7011  054F  1011               	bcf	17,0	;volatile
  7012                           
  7013                           ;MCU_B1.c: 234: Timer1.Count++;
  7014  0550  3001               	movlw	1
  7015  0551  07BC               	addwf	_Timer1+1,f
  7016  0552  3000               	movlw	0
  7017  0553  3DBD               	addwfc	_Timer1+2,f
  7018                           
  7019                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
  7020  0554  3001               	movlw	1
  7021  0555  3E3B               	addlw	_Timer1& (0+255)
  7022  0556  0086               	movwf	6
  7023  0557  0187               	clrf	7
  7024  0558  3F40               	moviw [0]fsr1
  7025  0559  3A64               	xorlw	100
  7026  055A  1D03               	skipz
  7027  055B  2D5E               	goto	u206_25
  7028  055C  3F41               	moviw [1]fsr1
  7029  055D  3A00               	xorlw	0
  7030  055E                     u206_25:	
  7031  055E  1D03               	skipz
  7032  055F  0008               	return
  7033                           
  7034                           ;MCU_B1.c: 236: {
  7035                           ;MCU_B1.c: 237: Timer1.Count = 0;
  7036  0560  01BC               	clrf	_Timer1+1
  7037  0561  01BD               	clrf	_Timer1+2
  7038                           
  7039                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
  7040  0562  143B               	bsf	_Timer1,0
  7041  0563  0008               	return
  7042  0564                     __end_of_TMR1_ISR:	
  7043  007E                     btemp	set	126	;btemp
  7044  007E                     pic14e$flags	set	126
  7045  007E                     wtemp	set	126
  7046  007E                     wtemp0	set	126
  7047  0080                     wtemp1	set	128
  7048  0082                     wtemp2	set	130
  7049  0084                     wtemp3	set	132
  7050  0086                     wtemp4	set	134
  7051  0088                     wtemp5	set	136
  7052  007F                     wtemp6	set	127
  7053  007E                     ttemp	set	126
  7054  007E                     ttemp0	set	126
  7055  0081                     ttemp1	set	129
  7056  0084                     ttemp2	set	132
  7057  0087                     ttemp3	set	135
  7058  007F                     ttemp4	set	127
  7059  007E                     ltemp	set	126
  7060  007E                     ltemp0	set	126
  7061  0082                     ltemp1	set	130
  7062  0086                     ltemp2	set	134
  7063  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         82
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     12      63
    BANK1            80      0      62
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK1[32]), 


Critical Paths under _main in COMMON

    _myUARTtoRF_Main->_setTxData
    _UART_Main->_UART_Receive
    _UART_Main->_UART_Transmit
    _UART_Transmit->_putch
    _UART_Receive->_setTxData
    _setRF_Main->_getRxData
    _getRxData->_getMain_All_Error_Status
    _getRxData->_setLog_Code
    _getRxData->_setTxData
    _setControl_Lights_Table->_setTxData
    _CC2500_TxData->_CC2500_WriteByte
    _CC2500_RxData->_CC2500_ReadByte
    _CC2500_RxData->_CC2500_WriteByte
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _CC2500_PowerRST->_CC2500_WriteByte
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in COMMON

    _ISR->_UART_ISR

Critical Paths under _main in BANK0

    _UART_Main->_UART_Transmit
    _RF_Main->_setRF_Main
    _setRF_Main->_CC2500_RxData
    _setRF_Main->_CC2500_TxData
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    3197
                                              8 BANK0      4     0      4
              _CC2500_PowerOnInitial
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
                          _UART_Main
              _myMain_Initialization
          _myUARTtoRF_Initialization
                    _myUARTtoRF_Main
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myUARTtoRF_Main                                      0     0      0       0
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myUARTtoRF_Initialization                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Main                                            0     0      0     130
                       _UART_Receive
                      _UART_Transmit
 ---------------------------------------------------------------------------------
 (2) _UART_Transmit                                        3     3      0     130
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Receive                                         1     1      0       0
                                              5 COMMON     1     1      0
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0     816
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0     816
                                              4 BANK0      4     4      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
           _getMain_All_Error_Status
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0      68
                                              5 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0       0
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getMain_All_Error_Status                             2     2      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              0 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                           _UART_Set
 ---------------------------------------------------------------------------------
 (2) _UART_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              4 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              3 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              3 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              0 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              4 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              0 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  1     1      0      68
                                              3 COMMON     1     1      0
                           _TMR1_ISR
                           _UART_ISR
 ---------------------------------------------------------------------------------
 (7) _UART_ISR                                             3     3      0      68
                                              0 COMMON     3     3      0
                              _getch
 ---------------------------------------------------------------------------------
 (8) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _Mcu_Initialization
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _UART_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getMain_All_Error_Status
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setTxData
         _setLog_Code
         _setTxData
   _UART_Main
     _UART_Receive
       _setTxData
     _UART_Transmit
       _putch
   _myMain_Initialization
   _myUARTtoRF_Initialization
   _myUARTtoRF_Main
     _setTxData
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR
   _UART_ISR
     _getch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      87       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      C      3F       6       78.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      3E       8       77.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      87      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Dec 01 13:37:34 2014

           __end_of_CC2500_WriteREG 0526                                 l134 02F8  
                               l207 05FF                                 l208 0601  
                               l251 0482                                 l605 0679  
                               l585 0645                                 l695 035E  
                               l679 04B2                                 l971 00FF  
                               l980 0084                                 l981 0080  
                               l973 0044                                 l975 004E  
                               l985 00BB                                 _GIE 005F  
                               _CRC 0040                                 _RA0 0060  
                               _RA1 0061                                 _RA2 0062  
                               _RC0 0070                                 _RC1 0071  
                               _RC3 0073                                 _RB5 006D  
                               _RC4 0074                                 _RC5 0075  
                               _RF1 002F                                 _ISR 0004  
                               _RX9 0CEE                                 _TX9 0CF6  
          __end_of_CC2500_WriteByte 060A                                 wreg 0009  
                              ?_ISR 0070                                l1025 0139  
                              l1035 0187                                l1055 03B5  
                              l3200 035F                                l3422 05A4  
                              l3502 02E3                                l3190 0348  
                              l3424 05A7                                l3600 050E  
                              l3440 04F2                                l3520 0312  
                              l3512 0306                                l3184 0336  
                              l3602 0511                                l3370 05C5  
                              l3514 030A                                l3506 02FE  
                              l3428 05AC                                l3700 03E9  
                              l3444 04F7                                l3532 026A  
                              l3540 0275                                l3516 030D  
                              l3508 0301                                l3606 0516  
                              l3702 03EC                                l3438 04EF  
                              l3550 0286                                l3534 026D  
                              l3470 0388                                l3368 05C1  
                              l3632 0126                                l3706 03F1  
                              l3570 029A                                l3554 028B  
                              l3538 0272                                l3482 02CB  
                              l3810 0078                                l3572 02AF  
                              l3548 0283                                l3484 02CE  
                              l3468 0373                                l3476 039A  
                              l3644 013C                                l3830 00A2  
                              l3592 0493                                l3488 02D3  
                              l3672 017D                                l3656 0154  
                              l3832 00A4                                l3594 049E  
                              l3690 03DA                                l3666 0172  
                              l3692 03DD                                l3860 00ED  
                              l3696 03E2                                l3848 00CC  
                              l3794 0065               _myMain_Initialization 0631  
                              _LATA 010C                                _LATB 010D  
                              _LATC 010E                                u2305 05EF  
                              u2145 032F                                u2155 0344  
                              u3125 00DD                                u2165 0356  
                              u2185 036D                                u2605 0488  
                              _PEIE 005E                                _RCIE 048D  
                              _RCIF 008D                                u2985 005F  
                              _UART 0046                                _RSSI 0041  
                              _TXIE 048C                                _TXIF 008C  
                              _main 04A3                     __end_of_RF_Main 06B2  
                              fsr0h 0005                                fsr1h 0007  
                              fsr0l 0004                                indf0 0000  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E          ?_myUARTtoRF_Initialization 0070  
                              ltemp 007E       __size_of_setRF_Initialization 000A  
                              start 0013                                ttemp 007E  
                              wtemp 007E                               ??_ISR 0073  
                 ??_myUARTtoRF_Main 0075                               ?_main 005A  
                             _BRG16 0CFB                       __CFG_WDTE$OFF 0000  
                             _T1CON 0018                               i1l611 068C  
                             i1l581 044F       __size_of_CC2500_FrequencyCabr 000B  
                             _RCREG 0199                               _RCSTA 019D  
                             _TMR1H 0017                               _TMR1L 0016  
                             _SPBRG 019B                               _PORTA 000C  
                             _PORTB 000D                               _PORTC 000E  
                             _TRISA 008C                               _TRISB 008D  
                             _TRISC 008E                               _TXREG 019A  
                             _TXSTA 019E             __end_of_Timeout_Counter 05F5  
                     __CFG_WRT$BOOT 0000                    __end_of_UART_ISR 0453  
                __size_of_UART_Main 000D                    __end_of_TMR1_ISR 0564  
                  __end_of_UART_Set 061E        __size_of_CC2500_WriteCommand 0018  
                  __end_of_TMR1_Set 0663                               _getch 068C  
                             _putch 0678         __size_of_CC2500_ClearRXFIFO 0004  
       __size_of_CC2500_ClearTXFIFO 0004                 CC2500_RxData@loop_f 0055  
                    __pbitbssCOMMON 03B0                      __CFG_BOREN$OFF 0000  
                  ?_CC2500_ReadByte 0070                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   ?_CC2500_SIDLEMode 0070  
        __size_of_RF_Initialization 0003                  ??_CC2500_SIDLEMode 0076  
                   __initialization 0015                    ?_CC2500_PowerRST 0070  
                      __end_of_main 04C6                    __end_of_Fosc_Set 06A0  
                  ?_CC2500_WriteREG 0052                              ??_main 0076  
                      ?_setLog_Code 0070             _setControl_Lights_Table 0372  
                        _Receive_OK 03B0              ?_myMain_Initialization 0070  
                            ?_getch 0070                           ??_RF_Main 0076  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELB 018D                              _ANSELC 018E  
          _getMain_All_Error_Status 06B2                              i1l3148 0437  
                            u206_25 055E                              _OSCCON 0099  
                            _TMR1IE 0488                              _TMR1IF 0088  
                            _SPBRGH 019C                              _IO_Set 061E  
                            _TRISC6 0476                              _TRISC7 0477  
                DelayTime_1us@count 0074      __size_of_CC2500_PowerOnInitial 0015  
     __end_of_CC2500_PowerOnInitial 05E0          __end_of_Mcu_Initialization 0657  
                            _Timer1 003B                   __end_of_UART_Main 064B  
                            _r_data 0045                              _s_data 0078  
                            _myMain 0020                    ?_Timeout_Counter 0070  
       __size_of_CC2500_InitPATable 001F                 CC2500_TxData@loop_e 0055  
  __end_of_CC2500_registers_address 022F             __end_of__initialization 0033  
                     ?_my_MainTimer 0070               __end_of_UART_Transmit 0580  
                    __pcstackCOMMON 0070                        __pidataBANK1 04C6  
                         ?_UART_ISR 0070                           ?_TMR1_ISR 0070  
                         ?_UART_Set 0070                       __end_of_getch 0692  
                         ?_TMR1_Set 0070           ??_setControl_Lights_Table 0075  
                     __end_of_putch 0680          __end_of_set_TimeoutCleared 069C  
                __size_of_getRxData 0087                   ?_CC2500_WriteByte 0070  
                ??_CC2500_WriteByte 0074                             ??_getch 0070  
                           ??_putch 0074                          __pbssBANK0 0020  
                        __pbssBANK1 00C0                           ?_Fosc_Set 0070  
                           ?_IO_Set 0070                      ??_my_MainTimer 0074  
                   __CFG_VCAPEN$OFF 0000                     _myUARTtoRF_Main 06AC  
                        __pnvCOMMON 0079                      DelayTime_1us@i 0052  
                    DelayTime_1us@j 0054         ??_myUARTtoRF_Initialization 0074  
                        __pmaintext 04A3                 _CC2500_WriteCommand 059C  
                        ??_UART_ISR 0070                          ??_TMR1_ISR 0070  
                        ??_UART_Set 0074                          ??_TMR1_Set 0074  
                        __pintentry 0004                  __size_of_setTxData 0072  
            __size_of_DelayTime_1us 0026                           UART_ISR@i 0071  
      __end_of_setRF_Initialization 0678                __size_of_setLog_Code 001C  
              ?_CC2500_WriteCommand 0070              __size_of_CC2500_RxData 005E  
            __size_of_CC2500_TxData 005A                             _RF_Data 00C0  
                           _RF_Main 06AF     __end_of_setControl_Lights_Table 03B6  
                   setRF_Main@error 0059                          ??_Fosc_Set 0074  
                     ?_UART_Receive 0070        __end_of_CC2500_FrequencyCabr 066E  
                   __size_of_IO_Set 0013                   __end_of_getRxData 018A  
          _CC2500_registers_address 0200                             __ptext1 031E  
                           __ptext2 06AC                             __ptext3 0692  
                           __ptext4 0631                             __ptext5 063E  
                           __ptext6 0564                             __ptext7 0678  
                           __ptext8 03F7                             __ptext9 06AF  
         __size_of_CC2500_SIDLEMode 0004           _myUARTtoRF_Initialization 0692  
                      __size_of_ISR 000F          ??_getMain_All_Error_Status 0074  
                        _setRF_Main 0037             ??_myMain_Initialization 0074  
             ??_CC2500_WriteCommand 0052          __end_of_CC2500_ClearRXFIFO 06AC  
        __end_of_CC2500_ClearTXFIFO 06A8                             _product 0079  
           __end_of_myUARTtoRF_Main 06AF                             clrloop0 0681  
              end_of_initialization 0033                   _CC2500_InitSetREG 0453  
                     _DelayTime_1us 047D                   __end_of_setTxData 01FC  
                    ??_UART_Receive 0075                             init_ram 0686  
                ?_CC2500_InitSetREG 0070                             initloop 0687  
             CC2500_ReadByte@loop_b 0075                   _CC2500_ReadStatus 04E6  
                    UART_Transmit@i 0052                  ?_CC2500_ReadStatus 0070  
          __size_of_CC2500_ReadByte 0017                       _CC2500_RxData 0266  
                     _CC2500_TxData 02C4                 ??_CC2500_InitSetREG 0055  
                      __pstringtext 0200                 ??_CC2500_ReadStatus 0052  
                         _UART_Main 063E             CC2500_InitSetREG@loop_c 0058  
                _Mcu_Initialization 064B            __size_of_CC2500_PowerRST 0041  
              __end_of_my_MainTimer 0372                    __CFG_FOSC$INTOSC 0000  
          __size_of_CC2500_WriteREG 0020           __end_of_CC2500_InitSetREG 047D  
               ?_Mcu_Initialization 0070                      ?_DelayTime_1us 0074  
         __end_of_CC2500_ReadStatus 0506     getMain_All_Error_Status@command 0070  
                    __end_of_IO_Set 0631                _setRF_Initialization 066E  
                    ?_CC2500_RxData 0070                      ?_CC2500_TxData 0070  
             _CC2500_PowerOnInitial 05CB                ??_Mcu_Initialization 0074  
                        ?_UART_Main 0070                   __size_of_UART_ISR 002E  
                 __size_of_TMR1_ISR 001F                   __size_of_UART_Set 0014  
                 __size_of_TMR1_Set 000C                _CC2500_FrequencyCabr 0663  
                       ?_setRF_Main 0070                 start_initialization 0015  
                       __end_of_ISR 0013          __end_of_CC2500_InitPATable 0545  
                  ?_myUARTtoRF_Main 0070                  _set_TimeoutCleared 0697  
                          ??_IO_Set 0074            __size_of_Timeout_Counter 0015  
             ?_setRF_Initialization 0070                   __size_of_Fosc_Set 0004  
         __size_of_CC2500_WriteByte 0015                 ?_set_TimeoutCleared 0070  
                         _Rx_Length 0042                           _Tx_Length 005E  
                       __pdataBANK1 00A0                   ??_CC2500_ReadByte 0074  
              __end_of_UART_Receive 0425    __end_of_getMain_All_Error_Status 06B5  
                  _CC2500_SIDLEMode 06A0               ?_CC2500_FrequencyCabr 0070  
                       __pbssCOMMON 0077                           ___latbits 0002  
            __size_of_UART_Transmit 001C                       __pcstackBANK0 0052  
              ??_set_TimeoutCleared 0074                     ??_DelayTime_1us 0076  
        __size_of_CC2500_InitSetREG 002A                   ??_CC2500_PowerRST 0056  
                          ?_RF_Main 0070  __size_of_myUARTtoRF_Initialization 0005  
        __size_of_CC2500_ReadStatus 0020                   ??_CC2500_WriteREG 0053  
             CC2500_WriteREG@w_addr 0054                     ??_CC2500_RxData 0054  
                   ??_CC2500_TxData 0054                           __pnvBANK0 005E  
                    getRxData@error 0052              ?_CC2500_PowerOnInitial 0070  
               __size_of_setRF_Main 00CC            ?_setControl_Lights_Table 0070  
                         _getRxData 0103               __size_of_my_MainTimer 0054  
                       ??_UART_Main 0076                       ??_setLog_Code 0074  
      CC2500_ReadStatus@status_addr 0053              CC2500_WriteByte@loop_a 0075  
                         _r_address 0044      __size_of_myMain_Initialization 000D  
      __end_of_CC2500_patable_vaule 0266       __end_of_myMain_Initialization 063E  
                    __size_of_getch 0006                      __size_of_putch 0008  
            ??_setRF_Initialization 0074   __end_of_myUARTtoRF_Initialization 0697  
                 _CC2500_rfSettings 022F                           clear_ram0 0680  
          CC2500_InitPATable@loop_d 0057                        _my_MainTimer 031E  
                         _setTxData 018A                  _CC2500_ClearRXFIFO 06A8  
                _CC2500_ClearTXFIFO 06A4                       _UART_Transmit 0564  
                 ??_Timeout_Counter 0074                            _UART_ISR 0425  
                        ?_getRxData 0070                            _TMR1_ISR 0545  
            CC2500_InitSetREG@temp1 0056              CC2500_InitSetREG@temp2 0057  
                          _UART_Set 060A                            _TMR1_Set 0657  
               ?_CC2500_ClearRXFIFO 0070                 ?_CC2500_ClearTXFIFO 0070  
                          _RF_Count 003E         __end_of_CC2500_WriteCommand 05B4  
            ??_CC2500_FrequencyCabr 0076                    setRF_Main@loop_f 0057  
    getMain_All_Error_Status@status 0074                 __end_of_setLog_Code 059C  
              ??_CC2500_ClearRXFIFO 0076                ??_CC2500_ClearTXFIFO 0076  
         __end_of_CC2500_rfSettings 025E                    __size_of_RF_Main 0003  
                          _Fosc_Set 069C   __size_of_getMain_All_Error_Status 0003  
         ?_getMain_All_Error_Status 0070                          ?_setTxData 0070  
                  _CC2500_WriteByte 05F5                      ?_UART_Transmit 0070  
                          _SwDetect 0043               __size_of_UART_Receive 002E  
                      ??_setRF_Main 0056                CC2500_WriteREG@value 0052  
                          __ptext10 0037                            __ptext11 0103  
                          __ptext20 06B5                            __ptext12 0580  
                          __ptext21 066E                            __ptext13 0372  
                          __ptext30 0453                            __ptext22 064B  
                          __ptext14 018A                            __ptext31 0526  
                          __ptext23 060A                            __ptext15 06B2  
                          __ptext40 05F5                            __ptext32 0506  
                          __ptext24 0657                            __ptext16 02C4  
                          __ptext33 0663                            __ptext25 061E  
                          __ptext17 0266                            __ptext42 0425  
                          __ptext34 047D                            __ptext26 069C  
                          __ptext18 04E6                            __ptext43 068C  
                          __ptext35 06A4                            __ptext27 05CB  
                          __ptext19 05B4                            __ptext44 0545  
                          __ptext36 06A8                            __ptext28 06A0  
                          __ptext37 059C                            __ptext29 03B6  
                          __ptext38 0697                            __ptext39 05E0  
                          __product 00A0                       __size_of_main 0023  
          __end_of_CC2500_SIDLEMode 06A4                        _UART_Receive 03F7  
        CC2500_WriteCommand@command 0053                setRF_Main@Receive_OK 0058  
                   _CC2500_ReadByte 05B4                  _CC2500_InitPATable 0526  
                __end_of_setRF_Main 0103         __size_of_Mcu_Initialization 000C  
              _CC2500_patable_vaule 025E                         ??_getRxData 0075  
                          main@argc 005A                            main@argv 005C  
               ?_CC2500_InitPATable 0070                     _CC2500_PowerRST 03B6  
                       _setLog_Code 0580                           putch@byte 0074  
                   _CC2500_WriteREG 0506                       _Transceive_OK 03B1  
                       pic14e$flags 007E                            intlevel1 0000  
              ??_CC2500_InitPATable 0055             ??_CC2500_PowerOnInitial 0076  
                   ??_UART_Transmit 0075                         ??_setTxData 0074  
          __size_of_myUARTtoRF_Main 0003              CC2500_InitPATable@temp 0056  
                 _RF_Initialization 06B5                  ?_RF_Initialization 0070  
                        _SPI0Buffer 0077                 ??_RF_Initialization 0075  
  __size_of_setControl_Lights_Table 0044         __size_of_set_TimeoutCleared 0005  
             __end_of_DelayTime_1us 04A3             __end_of_CC2500_ReadByte 05CB  
                   _Timeout_Counter 05E0           __end_of_RF_Initialization 06B8  
             __end_of_CC2500_RxData 02C4               __end_of_CC2500_TxData 031E  
           __end_of_CC2500_PowerRST 03F7  
