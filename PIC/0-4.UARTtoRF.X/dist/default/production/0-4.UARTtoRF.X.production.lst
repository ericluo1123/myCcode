

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Nov 28 16:48:55 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1516
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	intentry,global,class=CODE,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    62                           	dabs	1,0x7E,2
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  008C                     	;# 
    91  008D                     	;# 
    92  008E                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0095                     	;# 
    97  0096                     	;# 
    98  0097                     	;# 
    99  0099                     	;# 
   100  009A                     	;# 
   101  009B                     	;# 
   102  009B                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  0116                     	;# 
   110  0117                     	;# 
   111  011D                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  018E                     	;# 
   115  0191                     	;# 
   116  0191                     	;# 
   117  0192                     	;# 
   118  0193                     	;# 
   119  0193                     	;# 
   120  0194                     	;# 
   121  0195                     	;# 
   122  0196                     	;# 
   123  0197                     	;# 
   124  0199                     	;# 
   125  019A                     	;# 
   126  019B                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019B                     	;# 
   130  019C                     	;# 
   131  019C                     	;# 
   132  019D                     	;# 
   133  019E                     	;# 
   134  019F                     	;# 
   135  020D                     	;# 
   136  0210                     	;# 
   137  0211                     	;# 
   138  0211                     	;# 
   139  0212                     	;# 
   140  0212                     	;# 
   141  0213                     	;# 
   142  0213                     	;# 
   143  0214                     	;# 
   144  0214                     	;# 
   145  0215                     	;# 
   146  0215                     	;# 
   147  0215                     	;# 
   148  0216                     	;# 
   149  0216                     	;# 
   150  0217                     	;# 
   151  0217                     	;# 
   152  0291                     	;# 
   153  0291                     	;# 
   154  0292                     	;# 
   155  0293                     	;# 
   156  0298                     	;# 
   157  0298                     	;# 
   158  0299                     	;# 
   159  029A                     	;# 
   160  0394                     	;# 
   161  0395                     	;# 
   162  0396                     	;# 
   163  0FE4                     	;# 
   164  0FE5                     	;# 
   165  0FE6                     	;# 
   166  0FE7                     	;# 
   167  0FE8                     	;# 
   168  0FE9                     	;# 
   169  0FEA                     	;# 
   170  0FEB                     	;# 
   171  0FED                     	;# 
   172  0FEE                     	;# 
   173  0FEF                     	;# 
   174  0000                     	;# 
   175  0001                     	;# 
   176  0002                     	;# 
   177  0003                     	;# 
   178  0004                     	;# 
   179  0005                     	;# 
   180  0006                     	;# 
   181  0007                     	;# 
   182  0008                     	;# 
   183  0009                     	;# 
   184  000A                     	;# 
   185  000B                     	;# 
   186  000C                     	;# 
   187  000D                     	;# 
   188  000E                     	;# 
   189  0010                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0015                     	;# 
   193  0016                     	;# 
   194  0016                     	;# 
   195  0017                     	;# 
   196  0018                     	;# 
   197  0019                     	;# 
   198  001A                     	;# 
   199  001B                     	;# 
   200  001C                     	;# 
   201  008C                     	;# 
   202  008D                     	;# 
   203  008E                     	;# 
   204  0090                     	;# 
   205  0091                     	;# 
   206  0092                     	;# 
   207  0095                     	;# 
   208  0096                     	;# 
   209  0097                     	;# 
   210  0099                     	;# 
   211  009A                     	;# 
   212  009B                     	;# 
   213  009B                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  0116                     	;# 
   221  0117                     	;# 
   222  011D                     	;# 
   223  018C                     	;# 
   224  018D                     	;# 
   225  018E                     	;# 
   226  0191                     	;# 
   227  0191                     	;# 
   228  0192                     	;# 
   229  0193                     	;# 
   230  0193                     	;# 
   231  0194                     	;# 
   232  0195                     	;# 
   233  0196                     	;# 
   234  0197                     	;# 
   235  0199                     	;# 
   236  019A                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019C                     	;# 
   242  019C                     	;# 
   243  019D                     	;# 
   244  019E                     	;# 
   245  019F                     	;# 
   246  020D                     	;# 
   247  0210                     	;# 
   248  0211                     	;# 
   249  0211                     	;# 
   250  0212                     	;# 
   251  0212                     	;# 
   252  0213                     	;# 
   253  0213                     	;# 
   254  0214                     	;# 
   255  0214                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0216                     	;# 
   260  0216                     	;# 
   261  0217                     	;# 
   262  0217                     	;# 
   263  0291                     	;# 
   264  0291                     	;# 
   265  0292                     	;# 
   266  0293                     	;# 
   267  0298                     	;# 
   268  0298                     	;# 
   269  0299                     	;# 
   270  029A                     	;# 
   271  0394                     	;# 
   272  0395                     	;# 
   273  0396                     	;# 
   274  0FE4                     	;# 
   275  0FE5                     	;# 
   276  0FE6                     	;# 
   277  0FE7                     	;# 
   278  0FE8                     	;# 
   279  0FE9                     	;# 
   280  0FEA                     	;# 
   281  0FEB                     	;# 
   282  0FED                     	;# 
   283  0FEE                     	;# 
   284  0FEF                     	;# 
   285  0000                     	;# 
   286  0001                     	;# 
   287  0002                     	;# 
   288  0003                     	;# 
   289  0004                     	;# 
   290  0005                     	;# 
   291  0006                     	;# 
   292  0007                     	;# 
   293  0008                     	;# 
   294  0009                     	;# 
   295  000A                     	;# 
   296  000B                     	;# 
   297  000C                     	;# 
   298  000D                     	;# 
   299  000E                     	;# 
   300  0010                     	;# 
   301  0011                     	;# 
   302  0012                     	;# 
   303  0015                     	;# 
   304  0016                     	;# 
   305  0016                     	;# 
   306  0017                     	;# 
   307  0018                     	;# 
   308  0019                     	;# 
   309  001A                     	;# 
   310  001B                     	;# 
   311  001C                     	;# 
   312  008C                     	;# 
   313  008D                     	;# 
   314  008E                     	;# 
   315  0090                     	;# 
   316  0091                     	;# 
   317  0092                     	;# 
   318  0095                     	;# 
   319  0096                     	;# 
   320  0097                     	;# 
   321  0099                     	;# 
   322  009A                     	;# 
   323  009B                     	;# 
   324  009B                     	;# 
   325  009C                     	;# 
   326  009D                     	;# 
   327  009E                     	;# 
   328  010C                     	;# 
   329  010D                     	;# 
   330  010E                     	;# 
   331  0116                     	;# 
   332  0117                     	;# 
   333  011D                     	;# 
   334  018C                     	;# 
   335  018D                     	;# 
   336  018E                     	;# 
   337  0191                     	;# 
   338  0191                     	;# 
   339  0192                     	;# 
   340  0193                     	;# 
   341  0193                     	;# 
   342  0194                     	;# 
   343  0195                     	;# 
   344  0196                     	;# 
   345  0197                     	;# 
   346  0199                     	;# 
   347  019A                     	;# 
   348  019B                     	;# 
   349  019B                     	;# 
   350  019B                     	;# 
   351  019B                     	;# 
   352  019C                     	;# 
   353  019C                     	;# 
   354  019D                     	;# 
   355  019E                     	;# 
   356  019F                     	;# 
   357  020D                     	;# 
   358  0210                     	;# 
   359  0211                     	;# 
   360  0211                     	;# 
   361  0212                     	;# 
   362  0212                     	;# 
   363  0213                     	;# 
   364  0213                     	;# 
   365  0214                     	;# 
   366  0214                     	;# 
   367  0215                     	;# 
   368  0215                     	;# 
   369  0215                     	;# 
   370  0216                     	;# 
   371  0216                     	;# 
   372  0217                     	;# 
   373  0217                     	;# 
   374  0291                     	;# 
   375  0291                     	;# 
   376  0292                     	;# 
   377  0293                     	;# 
   378  0298                     	;# 
   379  0298                     	;# 
   380  0299                     	;# 
   381  029A                     	;# 
   382  0394                     	;# 
   383  0395                     	;# 
   384  0396                     	;# 
   385  0FE4                     	;# 
   386  0FE5                     	;# 
   387  0FE6                     	;# 
   388  0FE7                     	;# 
   389  0FE8                     	;# 
   390  0FE9                     	;# 
   391  0FEA                     	;# 
   392  0FEB                     	;# 
   393  0FED                     	;# 
   394  0FEE                     	;# 
   395  0FEF                     	;# 
   396  0000                     	;# 
   397  0001                     	;# 
   398  0002                     	;# 
   399  0003                     	;# 
   400  0004                     	;# 
   401  0005                     	;# 
   402  0006                     	;# 
   403  0007                     	;# 
   404  0008                     	;# 
   405  0009                     	;# 
   406  000A                     	;# 
   407  000B                     	;# 
   408  000C                     	;# 
   409  000D                     	;# 
   410  000E                     	;# 
   411  0010                     	;# 
   412  0011                     	;# 
   413  0012                     	;# 
   414  0015                     	;# 
   415  0016                     	;# 
   416  0016                     	;# 
   417  0017                     	;# 
   418  0018                     	;# 
   419  0019                     	;# 
   420  001A                     	;# 
   421  001B                     	;# 
   422  001C                     	;# 
   423  008C                     	;# 
   424  008D                     	;# 
   425  008E                     	;# 
   426  0090                     	;# 
   427  0091                     	;# 
   428  0092                     	;# 
   429  0095                     	;# 
   430  0096                     	;# 
   431  0097                     	;# 
   432  0099                     	;# 
   433  009A                     	;# 
   434  009B                     	;# 
   435  009B                     	;# 
   436  009C                     	;# 
   437  009D                     	;# 
   438  009E                     	;# 
   439  010C                     	;# 
   440  010D                     	;# 
   441  010E                     	;# 
   442  0116                     	;# 
   443  0117                     	;# 
   444  011D                     	;# 
   445  018C                     	;# 
   446  018D                     	;# 
   447  018E                     	;# 
   448  0191                     	;# 
   449  0191                     	;# 
   450  0192                     	;# 
   451  0193                     	;# 
   452  0193                     	;# 
   453  0194                     	;# 
   454  0195                     	;# 
   455  0196                     	;# 
   456  0197                     	;# 
   457  0199                     	;# 
   458  019A                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019B                     	;# 
   462  019B                     	;# 
   463  019C                     	;# 
   464  019C                     	;# 
   465  019D                     	;# 
   466  019E                     	;# 
   467  019F                     	;# 
   468  020D                     	;# 
   469  0210                     	;# 
   470  0211                     	;# 
   471  0211                     	;# 
   472  0212                     	;# 
   473  0212                     	;# 
   474  0213                     	;# 
   475  0213                     	;# 
   476  0214                     	;# 
   477  0214                     	;# 
   478  0215                     	;# 
   479  0215                     	;# 
   480  0215                     	;# 
   481  0216                     	;# 
   482  0216                     	;# 
   483  0217                     	;# 
   484  0217                     	;# 
   485  0291                     	;# 
   486  0291                     	;# 
   487  0292                     	;# 
   488  0293                     	;# 
   489  0298                     	;# 
   490  0298                     	;# 
   491  0299                     	;# 
   492  029A                     	;# 
   493  0394                     	;# 
   494  0395                     	;# 
   495  0396                     	;# 
   496  0FE4                     	;# 
   497  0FE5                     	;# 
   498  0FE6                     	;# 
   499  0FE7                     	;# 
   500  0FE8                     	;# 
   501  0FE9                     	;# 
   502  0FEA                     	;# 
   503  0FEB                     	;# 
   504  0FED                     	;# 
   505  0FEE                     	;# 
   506  0FEF                     	;# 
   507  0000                     	;# 
   508  0001                     	;# 
   509  0002                     	;# 
   510  0003                     	;# 
   511  0004                     	;# 
   512  0005                     	;# 
   513  0006                     	;# 
   514  0007                     	;# 
   515  0008                     	;# 
   516  0009                     	;# 
   517  000A                     	;# 
   518  000B                     	;# 
   519  000C                     	;# 
   520  000D                     	;# 
   521  000E                     	;# 
   522  0010                     	;# 
   523  0011                     	;# 
   524  0012                     	;# 
   525  0015                     	;# 
   526  0016                     	;# 
   527  0016                     	;# 
   528  0017                     	;# 
   529  0018                     	;# 
   530  0019                     	;# 
   531  001A                     	;# 
   532  001B                     	;# 
   533  001C                     	;# 
   534  008C                     	;# 
   535  008D                     	;# 
   536  008E                     	;# 
   537  0090                     	;# 
   538  0091                     	;# 
   539  0092                     	;# 
   540  0095                     	;# 
   541  0096                     	;# 
   542  0097                     	;# 
   543  0099                     	;# 
   544  009A                     	;# 
   545  009B                     	;# 
   546  009B                     	;# 
   547  009C                     	;# 
   548  009D                     	;# 
   549  009E                     	;# 
   550  010C                     	;# 
   551  010D                     	;# 
   552  010E                     	;# 
   553  0116                     	;# 
   554  0117                     	;# 
   555  011D                     	;# 
   556  018C                     	;# 
   557  018D                     	;# 
   558  018E                     	;# 
   559  0191                     	;# 
   560  0191                     	;# 
   561  0192                     	;# 
   562  0193                     	;# 
   563  0193                     	;# 
   564  0194                     	;# 
   565  0195                     	;# 
   566  0196                     	;# 
   567  0197                     	;# 
   568  0199                     	;# 
   569  019A                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019B                     	;# 
   574  019C                     	;# 
   575  019C                     	;# 
   576  019D                     	;# 
   577  019E                     	;# 
   578  019F                     	;# 
   579  020D                     	;# 
   580  0210                     	;# 
   581  0211                     	;# 
   582  0211                     	;# 
   583  0212                     	;# 
   584  0212                     	;# 
   585  0213                     	;# 
   586  0213                     	;# 
   587  0214                     	;# 
   588  0214                     	;# 
   589  0215                     	;# 
   590  0215                     	;# 
   591  0215                     	;# 
   592  0216                     	;# 
   593  0216                     	;# 
   594  0217                     	;# 
   595  0217                     	;# 
   596  0291                     	;# 
   597  0291                     	;# 
   598  0292                     	;# 
   599  0293                     	;# 
   600  0298                     	;# 
   601  0298                     	;# 
   602  0299                     	;# 
   603  029A                     	;# 
   604  0394                     	;# 
   605  0395                     	;# 
   606  0396                     	;# 
   607  0FE4                     	;# 
   608  0FE5                     	;# 
   609  0FE6                     	;# 
   610  0FE7                     	;# 
   611  0FE8                     	;# 
   612  0FE9                     	;# 
   613  0FEA                     	;# 
   614  0FEB                     	;# 
   615  0FED                     	;# 
   616  0FEE                     	;# 
   617  0FEF                     	;# 
   618  0000                     	;# 
   619  0001                     	;# 
   620  0002                     	;# 
   621  0003                     	;# 
   622  0004                     	;# 
   623  0005                     	;# 
   624  0006                     	;# 
   625  0007                     	;# 
   626  0008                     	;# 
   627  0009                     	;# 
   628  000A                     	;# 
   629  000B                     	;# 
   630  000C                     	;# 
   631  000D                     	;# 
   632  000E                     	;# 
   633  0010                     	;# 
   634  0011                     	;# 
   635  0012                     	;# 
   636  0015                     	;# 
   637  0016                     	;# 
   638  0016                     	;# 
   639  0017                     	;# 
   640  0018                     	;# 
   641  0019                     	;# 
   642  001A                     	;# 
   643  001B                     	;# 
   644  001C                     	;# 
   645  008C                     	;# 
   646  008D                     	;# 
   647  008E                     	;# 
   648  0090                     	;# 
   649  0091                     	;# 
   650  0092                     	;# 
   651  0095                     	;# 
   652  0096                     	;# 
   653  0097                     	;# 
   654  0099                     	;# 
   655  009A                     	;# 
   656  009B                     	;# 
   657  009B                     	;# 
   658  009C                     	;# 
   659  009D                     	;# 
   660  009E                     	;# 
   661  010C                     	;# 
   662  010D                     	;# 
   663  010E                     	;# 
   664  0116                     	;# 
   665  0117                     	;# 
   666  011D                     	;# 
   667  018C                     	;# 
   668  018D                     	;# 
   669  018E                     	;# 
   670  0191                     	;# 
   671  0191                     	;# 
   672  0192                     	;# 
   673  0193                     	;# 
   674  0193                     	;# 
   675  0194                     	;# 
   676  0195                     	;# 
   677  0196                     	;# 
   678  0197                     	;# 
   679  0199                     	;# 
   680  019A                     	;# 
   681  019B                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019C                     	;# 
   686  019C                     	;# 
   687  019D                     	;# 
   688  019E                     	;# 
   689  019F                     	;# 
   690  020D                     	;# 
   691  0210                     	;# 
   692  0211                     	;# 
   693  0211                     	;# 
   694  0212                     	;# 
   695  0212                     	;# 
   696  0213                     	;# 
   697  0213                     	;# 
   698  0214                     	;# 
   699  0214                     	;# 
   700  0215                     	;# 
   701  0215                     	;# 
   702  0215                     	;# 
   703  0216                     	;# 
   704  0216                     	;# 
   705  0217                     	;# 
   706  0217                     	;# 
   707  0291                     	;# 
   708  0291                     	;# 
   709  0292                     	;# 
   710  0293                     	;# 
   711  0298                     	;# 
   712  0298                     	;# 
   713  0299                     	;# 
   714  029A                     	;# 
   715  0394                     	;# 
   716  0395                     	;# 
   717  0396                     	;# 
   718  0FE4                     	;# 
   719  0FE5                     	;# 
   720  0FE6                     	;# 
   721  0FE7                     	;# 
   722  0FE8                     	;# 
   723  0FE9                     	;# 
   724  0FEA                     	;# 
   725  0FEB                     	;# 
   726  0FED                     	;# 
   727  0FEE                     	;# 
   728  0FEF                     	;# 
   729  0000                     	;# 
   730  0001                     	;# 
   731  0002                     	;# 
   732  0003                     	;# 
   733  0004                     	;# 
   734  0005                     	;# 
   735  0006                     	;# 
   736  0007                     	;# 
   737  0008                     	;# 
   738  0009                     	;# 
   739  000A                     	;# 
   740  000B                     	;# 
   741  000C                     	;# 
   742  000D                     	;# 
   743  000E                     	;# 
   744  0010                     	;# 
   745  0011                     	;# 
   746  0012                     	;# 
   747  0015                     	;# 
   748  0016                     	;# 
   749  0016                     	;# 
   750  0017                     	;# 
   751  0018                     	;# 
   752  0019                     	;# 
   753  001A                     	;# 
   754  001B                     	;# 
   755  001C                     	;# 
   756  008C                     	;# 
   757  008D                     	;# 
   758  008E                     	;# 
   759  0090                     	;# 
   760  0091                     	;# 
   761  0092                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0097                     	;# 
   765  0099                     	;# 
   766  009A                     	;# 
   767  009B                     	;# 
   768  009B                     	;# 
   769  009C                     	;# 
   770  009D                     	;# 
   771  009E                     	;# 
   772  010C                     	;# 
   773  010D                     	;# 
   774  010E                     	;# 
   775  0116                     	;# 
   776  0117                     	;# 
   777  011D                     	;# 
   778  018C                     	;# 
   779  018D                     	;# 
   780  018E                     	;# 
   781  0191                     	;# 
   782  0191                     	;# 
   783  0192                     	;# 
   784  0193                     	;# 
   785  0193                     	;# 
   786  0194                     	;# 
   787  0195                     	;# 
   788  0196                     	;# 
   789  0197                     	;# 
   790  0199                     	;# 
   791  019A                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019B                     	;# 
   796  019C                     	;# 
   797  019C                     	;# 
   798  019D                     	;# 
   799  019E                     	;# 
   800  019F                     	;# 
   801  020D                     	;# 
   802  0210                     	;# 
   803  0211                     	;# 
   804  0211                     	;# 
   805  0212                     	;# 
   806  0212                     	;# 
   807  0213                     	;# 
   808  0213                     	;# 
   809  0214                     	;# 
   810  0214                     	;# 
   811  0215                     	;# 
   812  0215                     	;# 
   813  0215                     	;# 
   814  0216                     	;# 
   815  0216                     	;# 
   816  0217                     	;# 
   817  0217                     	;# 
   818  0291                     	;# 
   819  0291                     	;# 
   820  0292                     	;# 
   821  0293                     	;# 
   822  0298                     	;# 
   823  0298                     	;# 
   824  0299                     	;# 
   825  029A                     	;# 
   826  0394                     	;# 
   827  0395                     	;# 
   828  0396                     	;# 
   829  0FE4                     	;# 
   830  0FE5                     	;# 
   831  0FE6                     	;# 
   832  0FE7                     	;# 
   833  0FE8                     	;# 
   834  0FE9                     	;# 
   835  0FEA                     	;# 
   836  0FEB                     	;# 
   837  0FED                     	;# 
   838  0FEE                     	;# 
   839  0FEF                     	;# 
   840  0000                     	;# 
   841  0001                     	;# 
   842  0002                     	;# 
   843  0003                     	;# 
   844  0004                     	;# 
   845  0005                     	;# 
   846  0006                     	;# 
   847  0007                     	;# 
   848  0008                     	;# 
   849  0009                     	;# 
   850  000A                     	;# 
   851  000B                     	;# 
   852  000C                     	;# 
   853  000D                     	;# 
   854  000E                     	;# 
   855  0010                     	;# 
   856  0011                     	;# 
   857  0012                     	;# 
   858  0015                     	;# 
   859  0016                     	;# 
   860  0016                     	;# 
   861  0017                     	;# 
   862  0018                     	;# 
   863  0019                     	;# 
   864  001A                     	;# 
   865  001B                     	;# 
   866  001C                     	;# 
   867  008C                     	;# 
   868  008D                     	;# 
   869  008E                     	;# 
   870  0090                     	;# 
   871  0091                     	;# 
   872  0092                     	;# 
   873  0095                     	;# 
   874  0096                     	;# 
   875  0097                     	;# 
   876  0099                     	;# 
   877  009A                     	;# 
   878  009B                     	;# 
   879  009B                     	;# 
   880  009C                     	;# 
   881  009D                     	;# 
   882  009E                     	;# 
   883  010C                     	;# 
   884  010D                     	;# 
   885  010E                     	;# 
   886  0116                     	;# 
   887  0117                     	;# 
   888  011D                     	;# 
   889  018C                     	;# 
   890  018D                     	;# 
   891  018E                     	;# 
   892  0191                     	;# 
   893  0191                     	;# 
   894  0192                     	;# 
   895  0193                     	;# 
   896  0193                     	;# 
   897  0194                     	;# 
   898  0195                     	;# 
   899  0196                     	;# 
   900  0197                     	;# 
   901  0199                     	;# 
   902  019A                     	;# 
   903  019B                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019B                     	;# 
   907  019C                     	;# 
   908  019C                     	;# 
   909  019D                     	;# 
   910  019E                     	;# 
   911  019F                     	;# 
   912  020D                     	;# 
   913  0210                     	;# 
   914  0211                     	;# 
   915  0211                     	;# 
   916  0212                     	;# 
   917  0212                     	;# 
   918  0213                     	;# 
   919  0213                     	;# 
   920  0214                     	;# 
   921  0214                     	;# 
   922  0215                     	;# 
   923  0215                     	;# 
   924  0215                     	;# 
   925  0216                     	;# 
   926  0216                     	;# 
   927  0217                     	;# 
   928  0217                     	;# 
   929  0291                     	;# 
   930  0291                     	;# 
   931  0292                     	;# 
   932  0293                     	;# 
   933  0298                     	;# 
   934  0298                     	;# 
   935  0299                     	;# 
   936  029A                     	;# 
   937  0394                     	;# 
   938  0395                     	;# 
   939  0396                     	;# 
   940  0FE4                     	;# 
   941  0FE5                     	;# 
   942  0FE6                     	;# 
   943  0FE7                     	;# 
   944  0FE8                     	;# 
   945  0FE9                     	;# 
   946  0FEA                     	;# 
   947  0FEB                     	;# 
   948  0FED                     	;# 
   949  0FEE                     	;# 
   950  0FEF                     	;# 
   951  0000                     	;# 
   952  0001                     	;# 
   953  0002                     	;# 
   954  0003                     	;# 
   955  0004                     	;# 
   956  0005                     	;# 
   957  0006                     	;# 
   958  0007                     	;# 
   959  0008                     	;# 
   960  0009                     	;# 
   961  000A                     	;# 
   962  000B                     	;# 
   963  000C                     	;# 
   964  000D                     	;# 
   965  000E                     	;# 
   966  0010                     	;# 
   967  0011                     	;# 
   968  0012                     	;# 
   969  0015                     	;# 
   970  0016                     	;# 
   971  0016                     	;# 
   972  0017                     	;# 
   973  0018                     	;# 
   974  0019                     	;# 
   975  001A                     	;# 
   976  001B                     	;# 
   977  001C                     	;# 
   978  008C                     	;# 
   979  008D                     	;# 
   980  008E                     	;# 
   981  0090                     	;# 
   982  0091                     	;# 
   983  0092                     	;# 
   984  0095                     	;# 
   985  0096                     	;# 
   986  0097                     	;# 
   987  0099                     	;# 
   988  009A                     	;# 
   989  009B                     	;# 
   990  009B                     	;# 
   991  009C                     	;# 
   992  009D                     	;# 
   993  009E                     	;# 
   994  010C                     	;# 
   995  010D                     	;# 
   996  010E                     	;# 
   997  0116                     	;# 
   998  0117                     	;# 
   999  011D                     	;# 
  1000  018C                     	;# 
  1001  018D                     	;# 
  1002  018E                     	;# 
  1003  0191                     	;# 
  1004  0191                     	;# 
  1005  0192                     	;# 
  1006  0193                     	;# 
  1007  0193                     	;# 
  1008  0194                     	;# 
  1009  0195                     	;# 
  1010  0196                     	;# 
  1011  0197                     	;# 
  1012  0199                     	;# 
  1013  019A                     	;# 
  1014  019B                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019B                     	;# 
  1018  019C                     	;# 
  1019  019C                     	;# 
  1020  019D                     	;# 
  1021  019E                     	;# 
  1022  019F                     	;# 
  1023  020D                     	;# 
  1024  0210                     	;# 
  1025  0211                     	;# 
  1026  0211                     	;# 
  1027  0212                     	;# 
  1028  0212                     	;# 
  1029  0213                     	;# 
  1030  0213                     	;# 
  1031  0214                     	;# 
  1032  0214                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0215                     	;# 
  1036  0216                     	;# 
  1037  0216                     	;# 
  1038  0217                     	;# 
  1039  0217                     	;# 
  1040  0291                     	;# 
  1041  0291                     	;# 
  1042  0292                     	;# 
  1043  0293                     	;# 
  1044  0298                     	;# 
  1045  0298                     	;# 
  1046  0299                     	;# 
  1047  029A                     	;# 
  1048  0394                     	;# 
  1049  0395                     	;# 
  1050  0396                     	;# 
  1051  0FE4                     	;# 
  1052  0FE5                     	;# 
  1053  0FE6                     	;# 
  1054  0FE7                     	;# 
  1055  0FE8                     	;# 
  1056  0FE9                     	;# 
  1057  0FEA                     	;# 
  1058  0FEB                     	;# 
  1059  0FED                     	;# 
  1060  0FEE                     	;# 
  1061  0FEF                     	;# 
  1062  0000                     	;# 
  1063  0001                     	;# 
  1064  0002                     	;# 
  1065  0003                     	;# 
  1066  0004                     	;# 
  1067  0005                     	;# 
  1068  0006                     	;# 
  1069  0007                     	;# 
  1070  0008                     	;# 
  1071  0009                     	;# 
  1072  000A                     	;# 
  1073  000B                     	;# 
  1074  000C                     	;# 
  1075  000D                     	;# 
  1076  000E                     	;# 
  1077  0010                     	;# 
  1078  0011                     	;# 
  1079  0012                     	;# 
  1080  0015                     	;# 
  1081  0016                     	;# 
  1082  0016                     	;# 
  1083  0017                     	;# 
  1084  0018                     	;# 
  1085  0019                     	;# 
  1086  001A                     	;# 
  1087  001B                     	;# 
  1088  001C                     	;# 
  1089  008C                     	;# 
  1090  008D                     	;# 
  1091  008E                     	;# 
  1092  0090                     	;# 
  1093  0091                     	;# 
  1094  0092                     	;# 
  1095  0095                     	;# 
  1096  0096                     	;# 
  1097  0097                     	;# 
  1098  0099                     	;# 
  1099  009A                     	;# 
  1100  009B                     	;# 
  1101  009B                     	;# 
  1102  009C                     	;# 
  1103  009D                     	;# 
  1104  009E                     	;# 
  1105  010C                     	;# 
  1106  010D                     	;# 
  1107  010E                     	;# 
  1108  0116                     	;# 
  1109  0117                     	;# 
  1110  011D                     	;# 
  1111  018C                     	;# 
  1112  018D                     	;# 
  1113  018E                     	;# 
  1114  0191                     	;# 
  1115  0191                     	;# 
  1116  0192                     	;# 
  1117  0193                     	;# 
  1118  0193                     	;# 
  1119  0194                     	;# 
  1120  0195                     	;# 
  1121  0196                     	;# 
  1122  0197                     	;# 
  1123  0199                     	;# 
  1124  019A                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019C                     	;# 
  1130  019C                     	;# 
  1131  019D                     	;# 
  1132  019E                     	;# 
  1133  019F                     	;# 
  1134  020D                     	;# 
  1135  0210                     	;# 
  1136  0211                     	;# 
  1137  0211                     	;# 
  1138  0212                     	;# 
  1139  0212                     	;# 
  1140  0213                     	;# 
  1141  0213                     	;# 
  1142  0214                     	;# 
  1143  0214                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0216                     	;# 
  1148  0216                     	;# 
  1149  0217                     	;# 
  1150  0217                     	;# 
  1151  0291                     	;# 
  1152  0291                     	;# 
  1153  0292                     	;# 
  1154  0293                     	;# 
  1155  0298                     	;# 
  1156  0298                     	;# 
  1157  0299                     	;# 
  1158  029A                     	;# 
  1159  0394                     	;# 
  1160  0395                     	;# 
  1161  0396                     	;# 
  1162  0FE4                     	;# 
  1163  0FE5                     	;# 
  1164  0FE6                     	;# 
  1165  0FE7                     	;# 
  1166  0FE8                     	;# 
  1167  0FE9                     	;# 
  1168  0FEA                     	;# 
  1169  0FEB                     	;# 
  1170  0FED                     	;# 
  1171  0FEE                     	;# 
  1172  0FEF                     	;# 
  1173  0000                     	;# 
  1174  0001                     	;# 
  1175  0002                     	;# 
  1176  0003                     	;# 
  1177  0004                     	;# 
  1178  0005                     	;# 
  1179  0006                     	;# 
  1180  0007                     	;# 
  1181  0008                     	;# 
  1182  0009                     	;# 
  1183  000A                     	;# 
  1184  000B                     	;# 
  1185  000C                     	;# 
  1186  000D                     	;# 
  1187  000E                     	;# 
  1188  0010                     	;# 
  1189  0011                     	;# 
  1190  0012                     	;# 
  1191  0015                     	;# 
  1192  0016                     	;# 
  1193  0016                     	;# 
  1194  0017                     	;# 
  1195  0018                     	;# 
  1196  0019                     	;# 
  1197  001A                     	;# 
  1198  001B                     	;# 
  1199  001C                     	;# 
  1200  008C                     	;# 
  1201  008D                     	;# 
  1202  008E                     	;# 
  1203  0090                     	;# 
  1204  0091                     	;# 
  1205  0092                     	;# 
  1206  0095                     	;# 
  1207  0096                     	;# 
  1208  0097                     	;# 
  1209  0099                     	;# 
  1210  009A                     	;# 
  1211  009B                     	;# 
  1212  009B                     	;# 
  1213  009C                     	;# 
  1214  009D                     	;# 
  1215  009E                     	;# 
  1216  010C                     	;# 
  1217  010D                     	;# 
  1218  010E                     	;# 
  1219  0116                     	;# 
  1220  0117                     	;# 
  1221  011D                     	;# 
  1222  018C                     	;# 
  1223  018D                     	;# 
  1224  018E                     	;# 
  1225  0191                     	;# 
  1226  0191                     	;# 
  1227  0192                     	;# 
  1228  0193                     	;# 
  1229  0193                     	;# 
  1230  0194                     	;# 
  1231  0195                     	;# 
  1232  0196                     	;# 
  1233  0197                     	;# 
  1234  0199                     	;# 
  1235  019A                     	;# 
  1236  019B                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019C                     	;# 
  1241  019C                     	;# 
  1242  019D                     	;# 
  1243  019E                     	;# 
  1244  019F                     	;# 
  1245  020D                     	;# 
  1246  0210                     	;# 
  1247  0211                     	;# 
  1248  0211                     	;# 
  1249  0212                     	;# 
  1250  0212                     	;# 
  1251  0213                     	;# 
  1252  0213                     	;# 
  1253  0214                     	;# 
  1254  0214                     	;# 
  1255  0215                     	;# 
  1256  0215                     	;# 
  1257  0215                     	;# 
  1258  0216                     	;# 
  1259  0216                     	;# 
  1260  0217                     	;# 
  1261  0217                     	;# 
  1262  0291                     	;# 
  1263  0291                     	;# 
  1264  0292                     	;# 
  1265  0293                     	;# 
  1266  0298                     	;# 
  1267  0298                     	;# 
  1268  0299                     	;# 
  1269  029A                     	;# 
  1270  0394                     	;# 
  1271  0395                     	;# 
  1272  0396                     	;# 
  1273  0FE4                     	;# 
  1274  0FE5                     	;# 
  1275  0FE6                     	;# 
  1276  0FE7                     	;# 
  1277  0FE8                     	;# 
  1278  0FE9                     	;# 
  1279  0FEA                     	;# 
  1280  0FEB                     	;# 
  1281  0FED                     	;# 
  1282  0FEE                     	;# 
  1283  0FEF                     	;# 
  1284  0000                     	;# 
  1285  0001                     	;# 
  1286  0002                     	;# 
  1287  0003                     	;# 
  1288  0004                     	;# 
  1289  0005                     	;# 
  1290  0006                     	;# 
  1291  0007                     	;# 
  1292  0008                     	;# 
  1293  0009                     	;# 
  1294  000A                     	;# 
  1295  000B                     	;# 
  1296  000C                     	;# 
  1297  000D                     	;# 
  1298  000E                     	;# 
  1299  0010                     	;# 
  1300  0011                     	;# 
  1301  0012                     	;# 
  1302  0015                     	;# 
  1303  0016                     	;# 
  1304  0016                     	;# 
  1305  0017                     	;# 
  1306  0018                     	;# 
  1307  0019                     	;# 
  1308  001A                     	;# 
  1309  001B                     	;# 
  1310  001C                     	;# 
  1311  008C                     	;# 
  1312  008D                     	;# 
  1313  008E                     	;# 
  1314  0090                     	;# 
  1315  0091                     	;# 
  1316  0092                     	;# 
  1317  0095                     	;# 
  1318  0096                     	;# 
  1319  0097                     	;# 
  1320  0099                     	;# 
  1321  009A                     	;# 
  1322  009B                     	;# 
  1323  009B                     	;# 
  1324  009C                     	;# 
  1325  009D                     	;# 
  1326  009E                     	;# 
  1327  010C                     	;# 
  1328  010D                     	;# 
  1329  010E                     	;# 
  1330  0116                     	;# 
  1331  0117                     	;# 
  1332  011D                     	;# 
  1333  018C                     	;# 
  1334  018D                     	;# 
  1335  018E                     	;# 
  1336  0191                     	;# 
  1337  0191                     	;# 
  1338  0192                     	;# 
  1339  0193                     	;# 
  1340  0193                     	;# 
  1341  0194                     	;# 
  1342  0195                     	;# 
  1343  0196                     	;# 
  1344  0197                     	;# 
  1345  0199                     	;# 
  1346  019A                     	;# 
  1347  019B                     	;# 
  1348  019B                     	;# 
  1349  019B                     	;# 
  1350  019B                     	;# 
  1351  019C                     	;# 
  1352  019C                     	;# 
  1353  019D                     	;# 
  1354  019E                     	;# 
  1355  019F                     	;# 
  1356  020D                     	;# 
  1357  0210                     	;# 
  1358  0211                     	;# 
  1359  0211                     	;# 
  1360  0212                     	;# 
  1361  0212                     	;# 
  1362  0213                     	;# 
  1363  0213                     	;# 
  1364  0214                     	;# 
  1365  0214                     	;# 
  1366  0215                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0216                     	;# 
  1370  0216                     	;# 
  1371  0217                     	;# 
  1372  0217                     	;# 
  1373  0291                     	;# 
  1374  0291                     	;# 
  1375  0292                     	;# 
  1376  0293                     	;# 
  1377  0298                     	;# 
  1378  0298                     	;# 
  1379  0299                     	;# 
  1380  029A                     	;# 
  1381  0394                     	;# 
  1382  0395                     	;# 
  1383  0396                     	;# 
  1384  0FE4                     	;# 
  1385  0FE5                     	;# 
  1386  0FE6                     	;# 
  1387  0FE7                     	;# 
  1388  0FE8                     	;# 
  1389  0FE9                     	;# 
  1390  0FEA                     	;# 
  1391  0FEB                     	;# 
  1392  0FED                     	;# 
  1393  0FEE                     	;# 
  1394  0FEF                     	;# 
  1395  0000                     	;# 
  1396  0001                     	;# 
  1397  0002                     	;# 
  1398  0003                     	;# 
  1399  0004                     	;# 
  1400  0005                     	;# 
  1401  0006                     	;# 
  1402  0007                     	;# 
  1403  0008                     	;# 
  1404  0009                     	;# 
  1405  000A                     	;# 
  1406  000B                     	;# 
  1407  000C                     	;# 
  1408  000D                     	;# 
  1409  000E                     	;# 
  1410  0010                     	;# 
  1411  0011                     	;# 
  1412  0012                     	;# 
  1413  0015                     	;# 
  1414  0016                     	;# 
  1415  0016                     	;# 
  1416  0017                     	;# 
  1417  0018                     	;# 
  1418  0019                     	;# 
  1419  001A                     	;# 
  1420  001B                     	;# 
  1421  001C                     	;# 
  1422  008C                     	;# 
  1423  008D                     	;# 
  1424  008E                     	;# 
  1425  0090                     	;# 
  1426  0091                     	;# 
  1427  0092                     	;# 
  1428  0095                     	;# 
  1429  0096                     	;# 
  1430  0097                     	;# 
  1431  0099                     	;# 
  1432  009A                     	;# 
  1433  009B                     	;# 
  1434  009B                     	;# 
  1435  009C                     	;# 
  1436  009D                     	;# 
  1437  009E                     	;# 
  1438  010C                     	;# 
  1439  010D                     	;# 
  1440  010E                     	;# 
  1441  0116                     	;# 
  1442  0117                     	;# 
  1443  011D                     	;# 
  1444  018C                     	;# 
  1445  018D                     	;# 
  1446  018E                     	;# 
  1447  0191                     	;# 
  1448  0191                     	;# 
  1449  0192                     	;# 
  1450  0193                     	;# 
  1451  0193                     	;# 
  1452  0194                     	;# 
  1453  0195                     	;# 
  1454  0196                     	;# 
  1455  0197                     	;# 
  1456  0199                     	;# 
  1457  019A                     	;# 
  1458  019B                     	;# 
  1459  019B                     	;# 
  1460  019B                     	;# 
  1461  019B                     	;# 
  1462  019C                     	;# 
  1463  019C                     	;# 
  1464  019D                     	;# 
  1465  019E                     	;# 
  1466  019F                     	;# 
  1467  020D                     	;# 
  1468  0210                     	;# 
  1469  0211                     	;# 
  1470  0211                     	;# 
  1471  0212                     	;# 
  1472  0212                     	;# 
  1473  0213                     	;# 
  1474  0213                     	;# 
  1475  0214                     	;# 
  1476  0214                     	;# 
  1477  0215                     	;# 
  1478  0215                     	;# 
  1479  0215                     	;# 
  1480  0216                     	;# 
  1481  0216                     	;# 
  1482  0217                     	;# 
  1483  0217                     	;# 
  1484  0291                     	;# 
  1485  0291                     	;# 
  1486  0292                     	;# 
  1487  0293                     	;# 
  1488  0298                     	;# 
  1489  0298                     	;# 
  1490  0299                     	;# 
  1491  029A                     	;# 
  1492  0394                     	;# 
  1493  0395                     	;# 
  1494  0396                     	;# 
  1495  0FE4                     	;# 
  1496  0FE5                     	;# 
  1497  0FE6                     	;# 
  1498  0FE7                     	;# 
  1499  0FE8                     	;# 
  1500  0FE9                     	;# 
  1501  0FEA                     	;# 
  1502  0FEB                     	;# 
  1503  0FED                     	;# 
  1504  0FEE                     	;# 
  1505  0FEF                     	;# 
  1506  0000                     	;# 
  1507  0001                     	;# 
  1508  0002                     	;# 
  1509  0003                     	;# 
  1510  0004                     	;# 
  1511  0005                     	;# 
  1512  0006                     	;# 
  1513  0007                     	;# 
  1514  0008                     	;# 
  1515  0009                     	;# 
  1516  000A                     	;# 
  1517  000B                     	;# 
  1518  000C                     	;# 
  1519  000D                     	;# 
  1520  000E                     	;# 
  1521  0010                     	;# 
  1522  0011                     	;# 
  1523  0012                     	;# 
  1524  0015                     	;# 
  1525  0016                     	;# 
  1526  0016                     	;# 
  1527  0017                     	;# 
  1528  0018                     	;# 
  1529  0019                     	;# 
  1530  001A                     	;# 
  1531  001B                     	;# 
  1532  001C                     	;# 
  1533  008C                     	;# 
  1534  008D                     	;# 
  1535  008E                     	;# 
  1536  0090                     	;# 
  1537  0091                     	;# 
  1538  0092                     	;# 
  1539  0095                     	;# 
  1540  0096                     	;# 
  1541  0097                     	;# 
  1542  0099                     	;# 
  1543  009A                     	;# 
  1544  009B                     	;# 
  1545  009B                     	;# 
  1546  009C                     	;# 
  1547  009D                     	;# 
  1548  009E                     	;# 
  1549  010C                     	;# 
  1550  010D                     	;# 
  1551  010E                     	;# 
  1552  0116                     	;# 
  1553  0117                     	;# 
  1554  011D                     	;# 
  1555  018C                     	;# 
  1556  018D                     	;# 
  1557  018E                     	;# 
  1558  0191                     	;# 
  1559  0191                     	;# 
  1560  0192                     	;# 
  1561  0193                     	;# 
  1562  0193                     	;# 
  1563  0194                     	;# 
  1564  0195                     	;# 
  1565  0196                     	;# 
  1566  0197                     	;# 
  1567  0199                     	;# 
  1568  019A                     	;# 
  1569  019B                     	;# 
  1570  019B                     	;# 
  1571  019B                     	;# 
  1572  019B                     	;# 
  1573  019C                     	;# 
  1574  019C                     	;# 
  1575  019D                     	;# 
  1576  019E                     	;# 
  1577  019F                     	;# 
  1578  020D                     	;# 
  1579  0210                     	;# 
  1580  0211                     	;# 
  1581  0211                     	;# 
  1582  0212                     	;# 
  1583  0212                     	;# 
  1584  0213                     	;# 
  1585  0213                     	;# 
  1586  0214                     	;# 
  1587  0214                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0215                     	;# 
  1591  0216                     	;# 
  1592  0216                     	;# 
  1593  0217                     	;# 
  1594  0217                     	;# 
  1595  0291                     	;# 
  1596  0291                     	;# 
  1597  0292                     	;# 
  1598  0293                     	;# 
  1599  0298                     	;# 
  1600  0298                     	;# 
  1601  0299                     	;# 
  1602  029A                     	;# 
  1603  0394                     	;# 
  1604  0395                     	;# 
  1605  0396                     	;# 
  1606  0FE4                     	;# 
  1607  0FE5                     	;# 
  1608  0FE6                     	;# 
  1609  0FE7                     	;# 
  1610  0FE8                     	;# 
  1611  0FE9                     	;# 
  1612  0FEA                     	;# 
  1613  0FEB                     	;# 
  1614  0FED                     	;# 
  1615  0FEE                     	;# 
  1616  0FEF                     	;# 
  1617  0000                     	;# 
  1618  0001                     	;# 
  1619  0002                     	;# 
  1620  0003                     	;# 
  1621  0004                     	;# 
  1622  0005                     	;# 
  1623  0006                     	;# 
  1624  0007                     	;# 
  1625  0008                     	;# 
  1626  0009                     	;# 
  1627  000A                     	;# 
  1628  000B                     	;# 
  1629  000C                     	;# 
  1630  000D                     	;# 
  1631  000E                     	;# 
  1632  0010                     	;# 
  1633  0011                     	;# 
  1634  0012                     	;# 
  1635  0015                     	;# 
  1636  0016                     	;# 
  1637  0016                     	;# 
  1638  0017                     	;# 
  1639  0018                     	;# 
  1640  0019                     	;# 
  1641  001A                     	;# 
  1642  001B                     	;# 
  1643  001C                     	;# 
  1644  008C                     	;# 
  1645  008D                     	;# 
  1646  008E                     	;# 
  1647  0090                     	;# 
  1648  0091                     	;# 
  1649  0092                     	;# 
  1650  0095                     	;# 
  1651  0096                     	;# 
  1652  0097                     	;# 
  1653  0099                     	;# 
  1654  009A                     	;# 
  1655  009B                     	;# 
  1656  009B                     	;# 
  1657  009C                     	;# 
  1658  009D                     	;# 
  1659  009E                     	;# 
  1660  010C                     	;# 
  1661  010D                     	;# 
  1662  010E                     	;# 
  1663  0116                     	;# 
  1664  0117                     	;# 
  1665  011D                     	;# 
  1666  018C                     	;# 
  1667  018D                     	;# 
  1668  018E                     	;# 
  1669  0191                     	;# 
  1670  0191                     	;# 
  1671  0192                     	;# 
  1672  0193                     	;# 
  1673  0193                     	;# 
  1674  0194                     	;# 
  1675  0195                     	;# 
  1676  0196                     	;# 
  1677  0197                     	;# 
  1678  0199                     	;# 
  1679  019A                     	;# 
  1680  019B                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019B                     	;# 
  1684  019C                     	;# 
  1685  019C                     	;# 
  1686  019D                     	;# 
  1687  019E                     	;# 
  1688  019F                     	;# 
  1689  020D                     	;# 
  1690  0210                     	;# 
  1691  0211                     	;# 
  1692  0211                     	;# 
  1693  0212                     	;# 
  1694  0212                     	;# 
  1695  0213                     	;# 
  1696  0213                     	;# 
  1697  0214                     	;# 
  1698  0214                     	;# 
  1699  0215                     	;# 
  1700  0215                     	;# 
  1701  0215                     	;# 
  1702  0216                     	;# 
  1703  0216                     	;# 
  1704  0217                     	;# 
  1705  0217                     	;# 
  1706  0291                     	;# 
  1707  0291                     	;# 
  1708  0292                     	;# 
  1709  0293                     	;# 
  1710  0298                     	;# 
  1711  0298                     	;# 
  1712  0299                     	;# 
  1713  029A                     	;# 
  1714  0394                     	;# 
  1715  0395                     	;# 
  1716  0396                     	;# 
  1717  0FE4                     	;# 
  1718  0FE5                     	;# 
  1719  0FE6                     	;# 
  1720  0FE7                     	;# 
  1721  0FE8                     	;# 
  1722  0FE9                     	;# 
  1723  0FEA                     	;# 
  1724  0FEB                     	;# 
  1725  0FED                     	;# 
  1726  0FEE                     	;# 
  1727  0FEF                     	;# 
  1728  0000                     	;# 
  1729  0001                     	;# 
  1730  0002                     	;# 
  1731  0003                     	;# 
  1732  0004                     	;# 
  1733  0005                     	;# 
  1734  0006                     	;# 
  1735  0007                     	;# 
  1736  0008                     	;# 
  1737  0009                     	;# 
  1738  000A                     	;# 
  1739  000B                     	;# 
  1740  000C                     	;# 
  1741  000D                     	;# 
  1742  000E                     	;# 
  1743  0010                     	;# 
  1744  0011                     	;# 
  1745  0012                     	;# 
  1746  0015                     	;# 
  1747  0016                     	;# 
  1748  0016                     	;# 
  1749  0017                     	;# 
  1750  0018                     	;# 
  1751  0019                     	;# 
  1752  001A                     	;# 
  1753  001B                     	;# 
  1754  001C                     	;# 
  1755  008C                     	;# 
  1756  008D                     	;# 
  1757  008E                     	;# 
  1758  0090                     	;# 
  1759  0091                     	;# 
  1760  0092                     	;# 
  1761  0095                     	;# 
  1762  0096                     	;# 
  1763  0097                     	;# 
  1764  0099                     	;# 
  1765  009A                     	;# 
  1766  009B                     	;# 
  1767  009B                     	;# 
  1768  009C                     	;# 
  1769  009D                     	;# 
  1770  009E                     	;# 
  1771  010C                     	;# 
  1772  010D                     	;# 
  1773  010E                     	;# 
  1774  0116                     	;# 
  1775  0117                     	;# 
  1776  011D                     	;# 
  1777  018C                     	;# 
  1778  018D                     	;# 
  1779  018E                     	;# 
  1780  0191                     	;# 
  1781  0191                     	;# 
  1782  0192                     	;# 
  1783  0193                     	;# 
  1784  0193                     	;# 
  1785  0194                     	;# 
  1786  0195                     	;# 
  1787  0196                     	;# 
  1788  0197                     	;# 
  1789  0199                     	;# 
  1790  019A                     	;# 
  1791  019B                     	;# 
  1792  019B                     	;# 
  1793  019B                     	;# 
  1794  019B                     	;# 
  1795  019C                     	;# 
  1796  019C                     	;# 
  1797  019D                     	;# 
  1798  019E                     	;# 
  1799  019F                     	;# 
  1800  020D                     	;# 
  1801  0210                     	;# 
  1802  0211                     	;# 
  1803  0211                     	;# 
  1804  0212                     	;# 
  1805  0212                     	;# 
  1806  0213                     	;# 
  1807  0213                     	;# 
  1808  0214                     	;# 
  1809  0214                     	;# 
  1810  0215                     	;# 
  1811  0215                     	;# 
  1812  0215                     	;# 
  1813  0216                     	;# 
  1814  0216                     	;# 
  1815  0217                     	;# 
  1816  0217                     	;# 
  1817  0291                     	;# 
  1818  0291                     	;# 
  1819  0292                     	;# 
  1820  0293                     	;# 
  1821  0298                     	;# 
  1822  0298                     	;# 
  1823  0299                     	;# 
  1824  029A                     	;# 
  1825  0394                     	;# 
  1826  0395                     	;# 
  1827  0396                     	;# 
  1828  0FE4                     	;# 
  1829  0FE5                     	;# 
  1830  0FE6                     	;# 
  1831  0FE7                     	;# 
  1832  0FE8                     	;# 
  1833  0FE9                     	;# 
  1834  0FEA                     	;# 
  1835  0FEB                     	;# 
  1836  0FED                     	;# 
  1837  0FEE                     	;# 
  1838  0FEF                     	;# 
  1839  0000                     	;# 
  1840  0001                     	;# 
  1841  0002                     	;# 
  1842  0003                     	;# 
  1843  0004                     	;# 
  1844  0005                     	;# 
  1845  0006                     	;# 
  1846  0007                     	;# 
  1847  0008                     	;# 
  1848  0009                     	;# 
  1849  000A                     	;# 
  1850  000B                     	;# 
  1851  000C                     	;# 
  1852  000D                     	;# 
  1853  000E                     	;# 
  1854  0010                     	;# 
  1855  0011                     	;# 
  1856  0012                     	;# 
  1857  0015                     	;# 
  1858  0016                     	;# 
  1859  0016                     	;# 
  1860  0017                     	;# 
  1861  0018                     	;# 
  1862  0019                     	;# 
  1863  001A                     	;# 
  1864  001B                     	;# 
  1865  001C                     	;# 
  1866  008C                     	;# 
  1867  008D                     	;# 
  1868  008E                     	;# 
  1869  0090                     	;# 
  1870  0091                     	;# 
  1871  0092                     	;# 
  1872  0095                     	;# 
  1873  0096                     	;# 
  1874  0097                     	;# 
  1875  0099                     	;# 
  1876  009A                     	;# 
  1877  009B                     	;# 
  1878  009B                     	;# 
  1879  009C                     	;# 
  1880  009D                     	;# 
  1881  009E                     	;# 
  1882  010C                     	;# 
  1883  010D                     	;# 
  1884  010E                     	;# 
  1885  0116                     	;# 
  1886  0117                     	;# 
  1887  011D                     	;# 
  1888  018C                     	;# 
  1889  018D                     	;# 
  1890  018E                     	;# 
  1891  0191                     	;# 
  1892  0191                     	;# 
  1893  0192                     	;# 
  1894  0193                     	;# 
  1895  0193                     	;# 
  1896  0194                     	;# 
  1897  0195                     	;# 
  1898  0196                     	;# 
  1899  0197                     	;# 
  1900  0199                     	;# 
  1901  019A                     	;# 
  1902  019B                     	;# 
  1903  019B                     	;# 
  1904  019B                     	;# 
  1905  019B                     	;# 
  1906  019C                     	;# 
  1907  019C                     	;# 
  1908  019D                     	;# 
  1909  019E                     	;# 
  1910  019F                     	;# 
  1911  020D                     	;# 
  1912  0210                     	;# 
  1913  0211                     	;# 
  1914  0211                     	;# 
  1915  0212                     	;# 
  1916  0212                     	;# 
  1917  0213                     	;# 
  1918  0213                     	;# 
  1919  0214                     	;# 
  1920  0214                     	;# 
  1921  0215                     	;# 
  1922  0215                     	;# 
  1923  0215                     	;# 
  1924  0216                     	;# 
  1925  0216                     	;# 
  1926  0217                     	;# 
  1927  0217                     	;# 
  1928  0291                     	;# 
  1929  0291                     	;# 
  1930  0292                     	;# 
  1931  0293                     	;# 
  1932  0298                     	;# 
  1933  0298                     	;# 
  1934  0299                     	;# 
  1935  029A                     	;# 
  1936  0394                     	;# 
  1937  0395                     	;# 
  1938  0396                     	;# 
  1939  0FE4                     	;# 
  1940  0FE5                     	;# 
  1941  0FE6                     	;# 
  1942  0FE7                     	;# 
  1943  0FE8                     	;# 
  1944  0FE9                     	;# 
  1945  0FEA                     	;# 
  1946  0FEB                     	;# 
  1947  0FED                     	;# 
  1948  0FEE                     	;# 
  1949  0FEF                     	;# 
  1950  0000                     	;# 
  1951  0001                     	;# 
  1952  0002                     	;# 
  1953  0003                     	;# 
  1954  0004                     	;# 
  1955  0005                     	;# 
  1956  0006                     	;# 
  1957  0007                     	;# 
  1958  0008                     	;# 
  1959  0009                     	;# 
  1960  000A                     	;# 
  1961  000B                     	;# 
  1962  000C                     	;# 
  1963  000D                     	;# 
  1964  000E                     	;# 
  1965  0010                     	;# 
  1966  0011                     	;# 
  1967  0012                     	;# 
  1968  0015                     	;# 
  1969  0016                     	;# 
  1970  0016                     	;# 
  1971  0017                     	;# 
  1972  0018                     	;# 
  1973  0019                     	;# 
  1974  001A                     	;# 
  1975  001B                     	;# 
  1976  001C                     	;# 
  1977  008C                     	;# 
  1978  008D                     	;# 
  1979  008E                     	;# 
  1980  0090                     	;# 
  1981  0091                     	;# 
  1982  0092                     	;# 
  1983  0095                     	;# 
  1984  0096                     	;# 
  1985  0097                     	;# 
  1986  0099                     	;# 
  1987  009A                     	;# 
  1988  009B                     	;# 
  1989  009B                     	;# 
  1990  009C                     	;# 
  1991  009D                     	;# 
  1992  009E                     	;# 
  1993  010C                     	;# 
  1994  010D                     	;# 
  1995  010E                     	;# 
  1996  0116                     	;# 
  1997  0117                     	;# 
  1998  011D                     	;# 
  1999  018C                     	;# 
  2000  018D                     	;# 
  2001  018E                     	;# 
  2002  0191                     	;# 
  2003  0191                     	;# 
  2004  0192                     	;# 
  2005  0193                     	;# 
  2006  0193                     	;# 
  2007  0194                     	;# 
  2008  0195                     	;# 
  2009  0196                     	;# 
  2010  0197                     	;# 
  2011  0199                     	;# 
  2012  019A                     	;# 
  2013  019B                     	;# 
  2014  019B                     	;# 
  2015  019B                     	;# 
  2016  019B                     	;# 
  2017  019C                     	;# 
  2018  019C                     	;# 
  2019  019D                     	;# 
  2020  019E                     	;# 
  2021  019F                     	;# 
  2022  020D                     	;# 
  2023  0210                     	;# 
  2024  0211                     	;# 
  2025  0211                     	;# 
  2026  0212                     	;# 
  2027  0212                     	;# 
  2028  0213                     	;# 
  2029  0213                     	;# 
  2030  0214                     	;# 
  2031  0214                     	;# 
  2032  0215                     	;# 
  2033  0215                     	;# 
  2034  0215                     	;# 
  2035  0216                     	;# 
  2036  0216                     	;# 
  2037  0217                     	;# 
  2038  0217                     	;# 
  2039  0291                     	;# 
  2040  0291                     	;# 
  2041  0292                     	;# 
  2042  0293                     	;# 
  2043  0298                     	;# 
  2044  0298                     	;# 
  2045  0299                     	;# 
  2046  029A                     	;# 
  2047  0394                     	;# 
  2048  0395                     	;# 
  2049  0396                     	;# 
  2050  0FE4                     	;# 
  2051  0FE5                     	;# 
  2052  0FE6                     	;# 
  2053  0FE7                     	;# 
  2054  0FE8                     	;# 
  2055  0FE9                     	;# 
  2056  0FEA                     	;# 
  2057  0FEB                     	;# 
  2058  0FED                     	;# 
  2059  0FEE                     	;# 
  2060  0FEF                     	;# 
  2061                           
  2062                           	psect	idataBANK1
  2063  0469                     __pidataBANK1:	
  2064                           
  2065                           ;initializer for __product
  2066  0469  3463               	retlw	99
  2067  046A  3402               	retlw	2
  2068  046B  3400               	retlw	0
  2069  046C  3400               	retlw	0
  2070  046D  3400               	retlw	0
  2071  046E  3400               	retlw	0
  2072  046F  3400               	retlw	0
  2073  0470  3400               	retlw	0
  2074  0471  3400               	retlw	0
  2075  0472  3400               	retlw	0
  2076  0473  3400               	retlw	0
  2077  0474  3400               	retlw	0
  2078  0475  34FF               	retlw	255
  2079  0476  34FF               	retlw	255
  2080  0477  34FF               	retlw	255
  2081  0478  3400               	retlw	0
  2082  0479  3400               	retlw	0
  2083  047A  3400               	retlw	0
  2084  047B  3400               	retlw	0
  2085  047C  3400               	retlw	0
  2086  047D  3400               	retlw	0
  2087  047E  3400               	retlw	0
  2088  047F  3400               	retlw	0
  2089  0480  3400               	retlw	0
  2090  0481  3400               	retlw	0
  2091  0482  3400               	retlw	0
  2092  0483  3400               	retlw	0
  2093  0484  3400               	retlw	0
  2094  0485  3400               	retlw	0
  2095  0486  3400               	retlw	0
  2096  0487  3400               	retlw	0
  2097  0488  3400               	retlw	0
  2098                           
  2099                           	psect	stringtext
  2100  0200                     __pstringtext:	
  2101  0200                     _CC2500_registers_address:	
  2102  0200  3403               	retlw	3
  2103  0201  3416               	retlw	22
  2104  0202  3417               	retlw	23
  2105  0203  341E               	retlw	30
  2106  0204  341F               	retlw	31
  2107  0205  3420               	retlw	32
  2108  0206  342A               	retlw	42
  2109  0207  342B               	retlw	43
  2110  0208  340B               	retlw	11
  2111  0209  340C               	retlw	12
  2112  020A  340D               	retlw	13
  2113  020B  340E               	retlw	14
  2114  020C  340F               	retlw	15
  2115  020D  3410               	retlw	16
  2116  020E  3411               	retlw	17
  2117  020F  3412               	retlw	18
  2118  0210  3413               	retlw	19
  2119  0211  3414               	retlw	20
  2120  0212  340A               	retlw	10
  2121  0213  3415               	retlw	21
  2122  0214  3421               	retlw	33
  2123  0215  3422               	retlw	34
  2124  0216  3418               	retlw	24
  2125  0217  3419               	retlw	25
  2126  0218  341A               	retlw	26
  2127  0219  341B               	retlw	27
  2128  021A  341C               	retlw	28
  2129  021B  341D               	retlw	29
  2130  021C  3423               	retlw	35
  2131  021D  3424               	retlw	36
  2132  021E  3425               	retlw	37
  2133  021F  3426               	retlw	38
  2134  0220  3429               	retlw	41
  2135  0221  342C               	retlw	44
  2136  0222  342D               	retlw	45
  2137  0223  342E               	retlw	46
  2138  0224  3400               	retlw	0
  2139  0225  3401               	retlw	1
  2140  0226  3402               	retlw	2
  2141  0227  3407               	retlw	7
  2142  0228  3408               	retlw	8
  2143  0229  3409               	retlw	9
  2144  022A  3406               	retlw	6
  2145  022B  3404               	retlw	4
  2146  022C  3405               	retlw	5
  2147  022D  3427               	retlw	39
  2148  022E  3428               	retlw	40
  2149  022F                     __end_of_CC2500_registers_address:	
  2150  022F                     _CC2500_rfSettings:	
  2151  022F  3407               	retlw	7
  2152  0230  3407               	retlw	7
  2153  0231  3430               	retlw	48
  2154  0232  3487               	retlw	135
  2155  0233  346B               	retlw	107
  2156  0234  34F8               	retlw	248
  2157  0235  347F               	retlw	127
  2158  0236  343F               	retlw	63
  2159  0237  3409               	retlw	9
  2160  0238  3400               	retlw	0
  2161  0239  345C               	retlw	92
  2162  023A  34A7               	retlw	167
  2163  023B  3462               	retlw	98
  2164  023C  3486               	retlw	134
  2165  023D  3483               	retlw	131
  2166  023E  3403               	retlw	3
  2167  023F  3422               	retlw	34
  2168  0240  34F8               	retlw	248
  2169  0241  3400               	retlw	0
  2170  0242  3444               	retlw	68
  2171  0243  34B6               	retlw	182
  2172  0244  3410               	retlw	16
  2173  0245  3418               	retlw	24
  2174  0246  341D               	retlw	29
  2175  0247  341C               	retlw	28
  2176  0248  34C7               	retlw	199
  2177  0249  3400               	retlw	0
  2178  024A  34B2               	retlw	178
  2179  024B  34EA               	retlw	234
  2180  024C  340A               	retlw	10
  2181  024D  3400               	retlw	0
  2182  024E  3411               	retlw	17
  2183  024F  3459               	retlw	89
  2184  0250  3488               	retlw	136
  2185  0251  3431               	retlw	49
  2186  0252  340B               	retlw	11
  2187  0253  342F               	retlw	47
  2188  0254  342E               	retlw	46
  2189  0255  3406               	retlw	6
  2190  0256  3404               	retlw	4
  2191  0257  3405               	retlw	5
  2192  0258  3400               	retlw	0
  2193  0259  3430               	retlw	48
  2194  025A  34D3               	retlw	211
  2195  025B  3491               	retlw	145
  2196  025C  3441               	retlw	65
  2197  025D  3400               	retlw	0
  2198  025E                     __end_of_CC2500_rfSettings:	
  2199  025E                     _CC2500_patable_vaule:	
  2200  025E  34FE               	retlw	254
  2201  025F  34FE               	retlw	254
  2202  0260  34FE               	retlw	254
  2203  0261  34FE               	retlw	254
  2204  0262  34FE               	retlw	254
  2205  0263  34FE               	retlw	254
  2206  0264  34FE               	retlw	254
  2207  0265  34FE               	retlw	254
  2208  0266                     __end_of_CC2500_patable_vaule:	
  2209                           
  2210                           	psect	nvCOMMON
  2211  007B                     __pnvCOMMON:	
  2212  007B                     _product:	
  2213  007B                     	ds	1
  2214                           
  2215                           	psect	nvBANK0
  2216  006D                     __pnvBANK0:	
  2217  006D                     _Tx_Length:	
  2218  006D                     	ds	1
  2219  000C                     _PORTA	set	12
  2220  000D                     _PORTB	set	13
  2221  000E                     _PORTC	set	14
  2222  0018                     _T1CON	set	24
  2223  0017                     _TMR1H	set	23
  2224  0016                     _TMR1L	set	22
  2225  005F                     _GIE	set	95
  2226  005E                     _PEIE	set	94
  2227  0060                     _RA0	set	96
  2228  0061                     _RA1	set	97
  2229  0062                     _RA2	set	98
  2230  0070                     _RC0	set	112
  2231  0071                     _RC1	set	113
  2232  0073                     _RC3	set	115
  2233  0074                     _RC4	set	116
  2234  0075                     _RC5	set	117
  2235  008D                     _RCIF	set	141
  2236  0088                     _TMR1IF	set	136
  2237  008C                     _TXIF	set	140
  2238  0099                     _OSCCON	set	153
  2239  008C                     _TRISA	set	140
  2240  008D                     _TRISB	set	141
  2241  008E                     _TRISC	set	142
  2242  048D                     _RCIE	set	1165
  2243  0488                     _TMR1IE	set	1160
  2244  0476                     _TRISC6	set	1142
  2245  0477                     _TRISC7	set	1143
  2246  048C                     _TXIE	set	1164
  2247  010C                     _LATA	set	268
  2248  010D                     _LATB	set	269
  2249  010E                     _LATC	set	270
  2250  018C                     _ANSELA	set	396
  2251  018D                     _ANSELB	set	397
  2252  018E                     _ANSELC	set	398
  2253  0199                     _RCREG	set	409
  2254  019D                     _RCSTA	set	413
  2255  019B                     _SPBRG	set	411
  2256  019C                     _SPBRGH	set	412
  2257  019A                     _TXREG	set	410
  2258  019E                     _TXSTA	set	414
  2259  0CFB                     _BRG16	set	3323
  2260  0CEE                     _RX9	set	3310
  2261  0CF6                     _TX9	set	3318
  2262                           
  2263                           ; #config settings
  2264  0000                     
  2265                           	psect	cinit
  2266  0015                     start_initialization:	
  2267  0015                     __initialization:	
  2268                           
  2269                           ; Clear objects allocated to BITCOMMON
  2270  0015  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2271                           
  2272                           ; Clear objects allocated to BANK0
  2273  0016  3020               	movlw	low __pbssBANK0
  2274  0017  0084               	movwf	4
  2275  0018  3000               	movlw	high __pbssBANK0
  2276  0019  0085               	movwf	5
  2277  001A  3046               	movlw	70
  2278  001B  3186  2624  3180   	fcall	clear_ram0
  2279                           
  2280                           ; Clear objects allocated to BANK1
  2281  001E  30C0               	movlw	low __pbssBANK1
  2282  001F  0084               	movwf	4
  2283  0020  3000               	movlw	high __pbssBANK1
  2284  0021  0085               	movwf	5
  2285  0022  300C               	movlw	12
  2286  0023  3186  2624  3180   	fcall	clear_ram0
  2287                           
  2288                           ; Initialize objects allocated to BANK1
  2289  0026  3069               	movlw	low __pidataBANK1
  2290  0027  0084               	movwf	4
  2291  0028  3084               	movlw	(high __pidataBANK1)| (0+128)
  2292  0029  0085               	movwf	5
  2293  002A  30A0               	movlw	low __pdataBANK1
  2294  002B  0086               	movwf	6
  2295  002C  3000               	movlw	high __pdataBANK1
  2296  002D  0087               	movwf	7
  2297  002E  3020               	movlw	32
  2298  002F  3186  262A         	fcall	init_ram
  2299  0031                     end_of_initialization:	
  2300                           ;End of C runtime variable initialization code
  2301                           
  2302  0031                     __end_of__initialization:	
  2303  0031  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2304  0032  0020               	movlb	0
  2305  0033  3184  2C46         	ljmp	_main	;jump to C main() function
  2306                           
  2307                           	psect	bitbssCOMMON
  2308  03D0                     __pbitbssCOMMON:	
  2309  03D0                     _Receive_OK:	
  2310  03D0                     	ds	1
  2311  03D1                     _Transceive_OK:	
  2312  03D1                     	ds	1
  2313                           
  2314                           	psect	bssBANK0
  2315  0020                     __pbssBANK0:	
  2316  0020                     _RF_Data:	
  2317  0020                     	ds	30
  2318  003E                     _myMain:	
  2319  003E                     	ds	15
  2320  004D                     _RF1:	
  2321  004D                     	ds	12
  2322  0059                     _Timer1:	
  2323  0059                     	ds	3
  2324  005C                     _RF_Count:	
  2325  005C                     	ds	2
  2326  005E                     _CRC:	
  2327  005E                     	ds	1
  2328  005F                     _RSSI:	
  2329  005F                     	ds	1
  2330  0060                     _Rx_Length:	
  2331  0060                     	ds	1
  2332  0061                     _SPI0Buffer:	
  2333  0061                     	ds	1
  2334  0062                     _SwDetect:	
  2335  0062                     	ds	1
  2336  0063                     _r_address:	
  2337  0063                     	ds	1
  2338  0064                     _r_data:	
  2339  0064                     	ds	1
  2340  0065                     _s_data:	
  2341  0065                     	ds	1
  2342                           
  2343                           	psect	bssBANK1
  2344  00C0                     __pbssBANK1:	
  2345  00C0                     _UART:	
  2346  00C0                     	ds	12
  2347                           
  2348                           	psect	dataBANK1
  2349  00A0                     __pdataBANK1:	
  2350  00A0                     __product:	
  2351  00A0                     	ds	32
  2352                           
  2353                           	psect	clrtext
  2354  0624                     clear_ram0:	
  2355                           ;	Called with FSR0 containing the base address, and
  2356                           ;	WREG with the size to clear
  2357                           
  2358  0624  0064               	clrwdt	;clear the watchdog before getting into this loop
  2359  0625                     clrloop0:	
  2360  0625  0180               	clrf	0	;clear RAM location pointed to by FSR
  2361  0626  3101               	addfsr 0,1
  2362  0627  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2363  0628  2E25               	goto	clrloop0	;have we reached the end yet?
  2364  0629  3400               	retlw	0	;all done for this memory range, return
  2365                           
  2366                           	psect	inittext
  2367  062A                     init_ram:	
  2368  062A  00FE               	movwf	126
  2369  062B                     initloop:	
  2370  062B  0012               	moviw fsr0++
  2371  062C  001E               	movwi fsr1++
  2372  062D  0BFE               	decfsz	126,f
  2373  062E  2E2B               	goto	initloop
  2374  062F  3400               	retlw	0
  2375                           
  2376                           	psect	cstackCOMMON
  2377  0070                     __pcstackCOMMON:	
  2378  0070                     ?_Timeout_Counter:	
  2379  0070                     ?_set_TimeoutCleared:	
  2380                           ; 0 bytes @ 0x0
  2381                           
  2382  0070                     ?_CC2500_WriteByte:	
  2383                           ; 0 bytes @ 0x0
  2384                           
  2385  0070                     ?_CC2500_WriteCommand:	
  2386                           ; 0 bytes @ 0x0
  2387                           
  2388  0070                     ?_CC2500_ReadStatus:	
  2389                           ; 0 bytes @ 0x0
  2390                           
  2391  0070                     ?_CC2500_ReadByte:	
  2392                           ; 0 bytes @ 0x0
  2393                           
  2394  0070                     ?_CC2500_PowerRST:	
  2395                           ; 0 bytes @ 0x0
  2396                           
  2397  0070                     ?_CC2500_InitSetREG:	
  2398                           ; 0 bytes @ 0x0
  2399                           
  2400  0070                     ?_CC2500_InitPATable:	
  2401                           ; 0 bytes @ 0x0
  2402                           
  2403  0070                     ?_CC2500_ClearTXFIFO:	
  2404                           ; 0 bytes @ 0x0
  2405                           
  2406  0070                     ?_CC2500_ClearRXFIFO:	
  2407                           ; 0 bytes @ 0x0
  2408                           
  2409  0070                     ?_CC2500_FrequencyCabr:	
  2410                           ; 0 bytes @ 0x0
  2411                           
  2412  0070                     ?_CC2500_SIDLEMode:	
  2413                           ; 0 bytes @ 0x0
  2414                           
  2415  0070                     ?_Fosc_Set:	
  2416                           ; 0 bytes @ 0x0
  2417                           
  2418  0070                     ?_IO_Set:	
  2419                           ; 0 bytes @ 0x0
  2420                           
  2421  0070                     ?_TMR1_Set:	
  2422                           ; 0 bytes @ 0x0
  2423                           
  2424  0070                     ?_UART_Set:	
  2425                           ; 0 bytes @ 0x0
  2426                           
  2427  0070                     ?_TMR1_ISR:	
  2428                           ; 0 bytes @ 0x0
  2429                           
  2430  0070                     ??_TMR1_ISR:	
  2431                           ; 0 bytes @ 0x0
  2432                           
  2433  0070                     ?_UART_ISR:	
  2434                           ; 0 bytes @ 0x0
  2435                           
  2436  0070                     ??_UART_ISR:	
  2437                           ; 0 bytes @ 0x0
  2438                           
  2439  0070                     ??_getch:	
  2440                           ; 0 bytes @ 0x0
  2441                           
  2442  0070                     ?_UART_Receive:	
  2443                           ; 0 bytes @ 0x0
  2444                           
  2445  0070                     ?_UART_Transmit:	
  2446                           ; 0 bytes @ 0x0
  2447                           
  2448  0070                     ?_putch:	
  2449                           ; 0 bytes @ 0x0
  2450                           
  2451  0070                     ?_setTxData:	
  2452                           ; 0 bytes @ 0x0
  2453                           
  2454  0070                     ?_myMain_Initialization:	
  2455                           ; 0 bytes @ 0x0
  2456                           
  2457  0070                     ?_RF_Initialization:	
  2458                           ; 0 bytes @ 0x0
  2459                           
  2460  0070                     ?_myUARTtoRF_Initialization:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0070                     ?_my_MainTimer:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0070                     ?_RF_Main:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0070                     ?_myUARTtoRF_Main:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0070                     ?_setRF_Initialization:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0070                     ?_setRF_Main:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0070                     ?_getRxData:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0070                     ?_setLog_Code:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0070                     ?_setControl_Lights_Table:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_CC2500_TxData:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_CC2500_RxData:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_CC2500_PowerOnInitial:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_Mcu_Initialization:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_ISR:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_UART_Main:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_getch:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_getMain_All_Error_Status:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0070                     getMain_All_Error_Status@command:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514                           
  2515                           ; 1 bytes @ 0x0
  2516  0070                     	ds	1
  2517  0071                     ??_ISR:	
  2518                           
  2519                           ; 0 bytes @ 0x1
  2520  0071                     	ds	1
  2521  0072                     ??_Timeout_Counter:	
  2522  0072                     ??_set_TimeoutCleared:	
  2523                           ; 0 bytes @ 0x2
  2524                           
  2525  0072                     ??_CC2500_WriteByte:	
  2526                           ; 0 bytes @ 0x2
  2527                           
  2528  0072                     ??_CC2500_ReadByte:	
  2529                           ; 0 bytes @ 0x2
  2530                           
  2531  0072                     ?_DelayTime_1us:	
  2532                           ; 0 bytes @ 0x2
  2533                           
  2534  0072                     ??_Fosc_Set:	
  2535                           ; 0 bytes @ 0x2
  2536                           
  2537  0072                     ??_IO_Set:	
  2538                           ; 0 bytes @ 0x2
  2539                           
  2540  0072                     ??_TMR1_Set:	
  2541                           ; 0 bytes @ 0x2
  2542                           
  2543  0072                     ??_UART_Set:	
  2544                           ; 0 bytes @ 0x2
  2545                           
  2546  0072                     ??_putch:	
  2547                           ; 0 bytes @ 0x2
  2548                           
  2549  0072                     ??_setTxData:	
  2550                           ; 0 bytes @ 0x2
  2551                           
  2552  0072                     ??_myMain_Initialization:	
  2553                           ; 0 bytes @ 0x2
  2554                           
  2555  0072                     ??_myUARTtoRF_Initialization:	
  2556                           ; 0 bytes @ 0x2
  2557                           
  2558  0072                     ??_my_MainTimer:	
  2559                           ; 0 bytes @ 0x2
  2560                           
  2561  0072                     ??_setRF_Initialization:	
  2562                           ; 0 bytes @ 0x2
  2563                           
  2564  0072                     ??_setLog_Code:	
  2565                           ; 0 bytes @ 0x2
  2566                           
  2567  0072                     ??_Mcu_Initialization:	
  2568                           ; 0 bytes @ 0x2
  2569                           
  2570  0072                     ??_getMain_All_Error_Status:	
  2571                           ; 0 bytes @ 0x2
  2572                           
  2573  0072                     putch@byte:	
  2574                           ; 0 bytes @ 0x2
  2575                           
  2576  0072                     getMain_All_Error_Status@status:	
  2577                           ; 1 bytes @ 0x2
  2578                           
  2579  0072                     DelayTime_1us@count:	
  2580                           ; 1 bytes @ 0x2
  2581                           
  2582                           
  2583                           ; 2 bytes @ 0x2
  2584  0072                     	ds	1
  2585  0073                     ??_UART_Receive:	
  2586  0073                     ??_UART_Transmit:	
  2587                           ; 0 bytes @ 0x3
  2588                           
  2589  0073                     ??_RF_Initialization:	
  2590                           ; 0 bytes @ 0x3
  2591                           
  2592  0073                     ??_myUARTtoRF_Main:	
  2593                           ; 0 bytes @ 0x3
  2594                           
  2595  0073                     ??_getRxData:	
  2596                           ; 0 bytes @ 0x3
  2597                           
  2598  0073                     ??_setControl_Lights_Table:	
  2599                           ; 0 bytes @ 0x3
  2600                           
  2601  0073                     CC2500_WriteByte@loop_a:	
  2602                           ; 0 bytes @ 0x3
  2603                           
  2604  0073                     CC2500_ReadByte@loop_b:	
  2605                           ; 1 bytes @ 0x3
  2606                           
  2607                           
  2608                           ; 1 bytes @ 0x3
  2609  0073                     	ds	1
  2610  0074                     ??_CC2500_WriteCommand:	
  2611  0074                     ??_CC2500_ReadStatus:	
  2612                           ; 0 bytes @ 0x4
  2613                           
  2614  0074                     ??_DelayTime_1us:	
  2615                           ; 0 bytes @ 0x4
  2616                           
  2617  0074                     ?_CC2500_WriteREG:	
  2618                           ; 0 bytes @ 0x4
  2619                           
  2620  0074                     ??_UART_Main:	
  2621                           ; 0 bytes @ 0x4
  2622                           
  2623  0074                     CC2500_WriteREG@value:	
  2624                           ; 0 bytes @ 0x4
  2625                           
  2626  0074                     getRxData@error:	
  2627                           ; 1 bytes @ 0x4
  2628                           
  2629  0074                     DelayTime_1us@i:	
  2630                           ; 1 bytes @ 0x4
  2631                           
  2632                           
  2633                           ; 2 bytes @ 0x4
  2634  0074                     	ds	1
  2635  0075                     ??_CC2500_WriteREG:	
  2636  0075                     CC2500_WriteCommand@command:	
  2637                           ; 0 bytes @ 0x5
  2638                           
  2639  0075                     CC2500_ReadStatus@status_addr:	
  2640                           ; 1 bytes @ 0x5
  2641                           
  2642                           
  2643                           ; 1 bytes @ 0x5
  2644  0075                     	ds	1
  2645  0076                     ??_CC2500_ClearTXFIFO:	
  2646  0076                     ??_CC2500_ClearRXFIFO:	
  2647                           ; 0 bytes @ 0x6
  2648                           
  2649  0076                     ??_CC2500_SIDLEMode:	
  2650                           ; 0 bytes @ 0x6
  2651                           
  2652  0076                     ??_CC2500_TxData:	
  2653                           ; 0 bytes @ 0x6
  2654                           
  2655  0076                     ??_CC2500_RxData:	
  2656                           ; 0 bytes @ 0x6
  2657                           
  2658  0076                     CC2500_WriteREG@w_addr:	
  2659                           ; 0 bytes @ 0x6
  2660                           
  2661  0076                     DelayTime_1us@j:	
  2662                           ; 1 bytes @ 0x6
  2663                           
  2664                           
  2665                           ; 2 bytes @ 0x6
  2666  0076                     	ds	1
  2667  0077                     ??_CC2500_InitSetREG:	
  2668  0077                     ??_CC2500_InitPATable:	
  2669                           ; 0 bytes @ 0x7
  2670                           
  2671  0077                     CC2500_TxData@loop_e:	
  2672                           ; 0 bytes @ 0x7
  2673                           
  2674  0077                     CC2500_RxData@loop_f:	
  2675                           ; 1 bytes @ 0x7
  2676                           
  2677                           
  2678                           ; 1 bytes @ 0x7
  2679  0077                     	ds	1
  2680  0078                     ??_CC2500_PowerRST:	
  2681  0078                     ??_CC2500_FrequencyCabr:	
  2682                           ; 0 bytes @ 0x8
  2683                           
  2684  0078                     ??_setRF_Main:	
  2685                           ; 0 bytes @ 0x8
  2686                           
  2687  0078                     CC2500_InitPATable@temp:	
  2688                           ; 0 bytes @ 0x8
  2689                           
  2690                           
  2691                           ; 1 bytes @ 0x8
  2692  0078                     	ds	1
  2693  0079                     ??_RF_Main:	
  2694  0079                     CC2500_InitPATable@loop_d:	
  2695                           ; 0 bytes @ 0x9
  2696                           
  2697                           
  2698                           ; 1 bytes @ 0x9
  2699  0079                     	ds	1
  2700  007A                     ??_CC2500_PowerOnInitial:	
  2701  007A                     ??_main:	
  2702                           ; 0 bytes @ 0xA
  2703                           
  2704                           
  2705                           	psect	cstackBANK0
  2706  0066                     __pcstackBANK0:	
  2707                           ; 0 bytes @ 0xA
  2708                           
  2709  0066                     CC2500_InitSetREG@temp1:	
  2710  0066                     setRF_Main@loop_f:	
  2711                           ; 1 bytes @ 0x0
  2712                           
  2713                           
  2714                           ; 1 bytes @ 0x0
  2715  0066                     	ds	1
  2716  0067                     CC2500_InitSetREG@temp2:	
  2717  0067                     setRF_Main@Receive_OK:	
  2718                           ; 1 bytes @ 0x1
  2719                           
  2720                           
  2721                           ; 1 bytes @ 0x1
  2722  0067                     	ds	1
  2723  0068                     CC2500_InitSetREG@loop_c:	
  2724  0068                     setRF_Main@error:	
  2725                           ; 1 bytes @ 0x2
  2726                           
  2727                           
  2728                           ; 1 bytes @ 0x2
  2729  0068                     	ds	1
  2730  0069                     ?_main:	
  2731  0069                     main@argc:	
  2732                           ; 2 bytes @ 0x3
  2733                           
  2734                           
  2735                           ; 2 bytes @ 0x3
  2736  0069                     	ds	2
  2737  006B                     main@argv:	
  2738                           
  2739                           ; 2 bytes @ 0x5
  2740  006B                     	ds	2
  2741                           
  2742                           	psect	maintext
  2743  0446                     __pmaintext:	
  2744 ;;
  2745 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2746 ;;
  2747 ;; *************** function _main *****************
  2748 ;; Defined at:
  2749 ;;		line 7 in file "../src/Main_B1.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;  argc            2    3[BANK0 ] int 
  2752 ;;  argv            2    5[BANK0 ] PTR PTR unsigned char 
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;		None
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  2    3[BANK0 ] int 
  2757 ;; Registers used:
  2758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2759 ;; Tracked objects:
  2760 ;;		On entry : 17F/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2764 ;;      Params:         0       4       0       0       0       0       0       0
  2765 ;;      Locals:         0       0       0       0       0       0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0       0       0
  2767 ;;      Totals:         0       4       0       0       0       0       0       0
  2768 ;;Total ram usage:        4 bytes
  2769 ;; Hardware stack levels required when called:    8
  2770 ;; This function calls:
  2771 ;;		_CC2500_PowerOnInitial
  2772 ;;		_Mcu_Initialization
  2773 ;;		_RF_Initialization
  2774 ;;		_RF_Main
  2775 ;;		_UART_Main
  2776 ;;		_myMain_Initialization
  2777 ;;		_myUARTtoRF_Initialization
  2778 ;;		_myUARTtoRF_Main
  2779 ;;		_my_MainTimer
  2780 ;; This function is called by:
  2781 ;;		Startup code after reset
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           
  2786                           ;psect for function _main
  2787  0446                     _main:	
  2788                           
  2789                           ;Main_B1.c: 8: myMain_Initialization();
  2790                           
  2791                           ;incstack = 0
  2792                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2793  0446  3185  25D5  3184   	fcall	_myMain_Initialization
  2794                           
  2795                           ;Main_B1.c: 9: Mcu_Initialization();
  2796  0449  3185  25EF  3184   	fcall	_Mcu_Initialization
  2797                           
  2798                           ;Main_B1.c: 10: ;;
  2799                           ;Main_B1.c: 11: ;;
  2800                           ;Main_B1.c: 12: ;;
  2801                           ;Main_B1.c: 14: ;;
  2802                           ;Main_B1.c: 15: ;;
  2803                           ;Main_B1.c: 16: ;;
  2804                           ;Main_B1.c: 17: ;;
  2805                           ;Main_B1.c: 18: ;;
  2806                           ;Main_B1.c: 20: ;;
  2807                           ;Main_B1.c: 21: ;;
  2808                           ;Main_B1.c: 22: ;;
  2809                           ;Main_B1.c: 23: ;;
  2810                           ;Main_B1.c: 24: ;;
  2811                           ;Main_B1.c: 25: RF_Initialization();
  2812  044C  3186  265E  3184   	fcall	_RF_Initialization
  2813                           
  2814                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  2815  044F  3185  254F  3184   	fcall	_CC2500_PowerOnInitial
  2816                           
  2817                           ;Main_B1.c: 27: ;;
  2818                           ;Main_B1.c: 28: myUARTtoRF_Initialization();
  2819  0452  3186  2636  3184   	fcall	_myUARTtoRF_Initialization
  2820  0455                     l672:	
  2821                           ;Main_B1.c: 30: while (1) {
  2822                           
  2823                           
  2824                           ;Main_B1.c: 57: }
  2825                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2826  0455  0020               	movlb	0	; select bank0
  2827  0456  1C59               	btfss	_Timer1,0
  2828  0457  2C55               	goto	l672
  2829                           
  2830                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2831  0458  1059               	bcf	_Timer1,0
  2832                           
  2833                           ;Main_B1.c: 95: my_MainTimer();
  2834  0459  3183  231E  3184   	fcall	_my_MainTimer
  2835                           
  2836                           ;Main_B1.c: 96: ;;
  2837                           ;Main_B1.c: 97: ;;
  2838                           ;Main_B1.c: 98: UART_Main();
  2839  045C  3185  25E2  3184   	fcall	_UART_Main
  2840                           
  2841                           ;Main_B1.c: 99: if (myMain.PowerON == 1) {
  2842  045F  0020               	movlb	0	; select bank0
  2843  0460  1C3E               	btfss	_myMain,0
  2844  0461  2C55               	goto	l672
  2845                           
  2846                           ;Main_B1.c: 100: ;;
  2847                           ;Main_B1.c: 102: ;;
  2848                           ;Main_B1.c: 103: ;;
  2849                           ;Main_B1.c: 105: ;;
  2850                           ;Main_B1.c: 106: ;;
  2851                           ;Main_B1.c: 107: ;;
  2852                           ;Main_B1.c: 108: ;;
  2853                           ;Main_B1.c: 110: ;;
  2854                           ;Main_B1.c: 111: ;;
  2855                           ;Main_B1.c: 112: ;;
  2856                           ;Main_B1.c: 113: ;;
  2857                           ;Main_B1.c: 114: ;;
  2858                           ;Main_B1.c: 116: RF_Main();
  2859  0462  3186  2658  3184   	fcall	_RF_Main
  2860                           
  2861                           ;Main_B1.c: 117: ;;
  2862                           ;Main_B1.c: 118: ;;
  2863                           ;Main_B1.c: 119: myUARTtoRF_Main();
  2864  0465  3186  2655  3184   	fcall	_myUARTtoRF_Main
  2865  0468  2C55               	goto	l672
  2866  0469                     __end_of_main:	
  2867                           ;Main_B1.c: 126: }
  2868                           ;Main_B1.c: 127: }
  2869                           ;Main_B1.c: 161: }
  2870                           ;Main_B1.c: 162: return (0);
  2871                           ;	Return value of _main is never used
  2872                           
  2873                           
  2874                           	psect	text1
  2875  031E                     __ptext1:	
  2876 ;; *************** function _my_MainTimer *****************
  2877 ;; Defined at:
  2878 ;;		line 181 in file "../src/Main_B1.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;		None
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;		None
  2883 ;; Return value:  Size  Location     Type
  2884 ;;		None               void
  2885 ;; Registers used:
  2886 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2892 ;;      Params:         0       0       0       0       0       0       0       0
  2893 ;;      Locals:         0       0       0       0       0       0       0       0
  2894 ;;      Temps:          0       0       0       0       0       0       0       0
  2895 ;;      Totals:         0       0       0       0       0       0       0       0
  2896 ;;Total ram usage:        0 bytes
  2897 ;; Hardware stack levels used:    1
  2898 ;; Hardware stack levels required when called:    3
  2899 ;; This function calls:
  2900 ;;		Nothing
  2901 ;; This function is called by:
  2902 ;;		_main
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           
  2907                           ;psect for function _my_MainTimer
  2908  031E                     _my_MainTimer:	
  2909                           
  2910                           ;Main_B1.c: 183: if (myMain.PowerON == 0) {
  2911                           
  2912                           ;incstack = 0
  2913                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0]
  2914  031E  0020               	movlb	0	; select bank0
  2915  031F  183E               	btfsc	_myMain,0
  2916  0320  2B36               	goto	l3129
  2917                           
  2918                           ;Main_B1.c: 184: myMain.PowerCount++;
  2919  0321  3001               	movlw	1
  2920  0322  07BF               	addwf	_myMain+1,f
  2921  0323  3000               	movlw	0
  2922  0324  3DC0               	addwfc	_myMain+2,f
  2923                           
  2924                           ;Main_B1.c: 185: if (myMain.PowerCount == 150)
  2925  0325  3001               	movlw	1
  2926  0326  3E3E               	addlw	_myMain& (0+255)
  2927  0327  0086               	movwf	6
  2928  0328  0187               	clrf	7
  2929  0329  3F40               	moviw [0]fsr1
  2930  032A  3A96               	xorlw	150
  2931  032B  1D03               	skipz
  2932  032C  2B2F               	goto	u2035
  2933  032D  3F41               	moviw [1]fsr1
  2934  032E  3A00               	xorlw	0
  2935  032F                     u2035:	
  2936  032F  1D03               	skipz
  2937  0330  2B5F               	goto	l3145
  2938                           
  2939                           ;Main_B1.c: 186: {
  2940                           ;Main_B1.c: 187: myMain.PowerCount = 0;
  2941  0331  01BF               	clrf	_myMain+1
  2942  0332  01C0               	clrf	_myMain+2
  2943                           
  2944                           ;Main_B1.c: 188: myMain.PowerON = 1;
  2945  0333  143E               	bsf	_myMain,0
  2946                           
  2947                           ;Main_B1.c: 194: ;;
  2948                           ;Main_B1.c: 195: myMain.SelfTest = 1;
  2949  0334  163E               	bsf	_myMain,4
  2950                           
  2951                           ;Main_B1.c: 204: }
  2952                           ;Main_B1.c: 205: } else {
  2953  0335  2B5F               	goto	l3145
  2954  0336                     l3129:	
  2955                           
  2956                           ;Main_B1.c: 206: myMain.PowerCount++;
  2957  0336  3001               	movlw	1
  2958  0337  07BF               	addwf	_myMain+1,f
  2959  0338  3000               	movlw	0
  2960  0339  3DC0               	addwfc	_myMain+2,f
  2961                           
  2962                           ;Main_B1.c: 207: if (myMain.PowerCount == 100) {
  2963  033A  3001               	movlw	1
  2964  033B  3E3E               	addlw	_myMain& (0+255)
  2965  033C  0086               	movwf	6
  2966  033D  0187               	clrf	7
  2967  033E  3F40               	moviw [0]fsr1
  2968  033F  3A64               	xorlw	100
  2969  0340  1D03               	skipz
  2970  0341  2B44               	goto	u2045
  2971  0342  3F41               	moviw [1]fsr1
  2972  0343  3A00               	xorlw	0
  2973  0344                     u2045:	
  2974  0344  1D03               	skipz
  2975  0345  2B48               	goto	l3135
  2976                           
  2977                           ;Main_B1.c: 208: myMain.PowerCount = 0;
  2978  0346  01BF               	clrf	_myMain+1
  2979  0347  01C0               	clrf	_myMain+2
  2980  0348                     l3135:	
  2981                           
  2982                           ;Main_B1.c: 212: }
  2983                           ;Main_B1.c: 220: myMain.Count1++;
  2984  0348  3001               	movlw	1
  2985  0349  07C3               	addwf	_myMain+5,f
  2986  034A  3000               	movlw	0
  2987  034B  3DC4               	addwfc	_myMain+6,f
  2988                           
  2989                           ;Main_B1.c: 221: if (myMain.Count1 == 100)
  2990  034C  3005               	movlw	5
  2991  034D  3E3E               	addlw	_myMain& (0+255)
  2992  034E  0086               	movwf	6
  2993  034F  0187               	clrf	7
  2994  0350  3F40               	moviw [0]fsr1
  2995  0351  3A64               	xorlw	100
  2996  0352  1D03               	skipz
  2997  0353  2B56               	goto	u2055
  2998  0354  3F41               	moviw [1]fsr1
  2999  0355  3A00               	xorlw	0
  3000  0356                     u2055:	
  3001  0356  1D03               	skipz
  3002  0357  2B5F               	goto	l3145
  3003                           
  3004                           ;Main_B1.c: 222: {
  3005                           ;Main_B1.c: 223: myMain.Count1 = 0;
  3006  0358  01C3               	clrf	_myMain+5
  3007  0359  01C4               	clrf	_myMain+6
  3008                           
  3009                           ;Main_B1.c: 235: if (myMain.Flag) {
  3010  035A  1CBE               	btfss	_myMain,1
  3011  035B  2B5E               	goto	l688
  3012                           
  3013                           ;Main_B1.c: 236: myMain.Flag = 0;
  3014  035C  10BE               	bcf	_myMain,1
  3015                           
  3016                           ;Main_B1.c: 245: } else {
  3017  035D  2B5F               	goto	l3145
  3018  035E                     l688:	
  3019                           
  3020                           ;Main_B1.c: 246: myMain.Flag = 1;
  3021  035E  14BE               	bsf	_myMain,1
  3022  035F                     l3145:	
  3023                           
  3024                           ;Main_B1.c: 255: }
  3025                           ;Main_B1.c: 256: }
  3026                           ;Main_B1.c: 258: }
  3027                           ;Main_B1.c: 260: myMain.Count2++;
  3028  035F  3001               	movlw	1
  3029  0360  07C5               	addwf	_myMain+7,f
  3030  0361  3000               	movlw	0
  3031  0362  3DC6               	addwfc	_myMain+8,f
  3032                           
  3033                           ;Main_B1.c: 261: if (myMain.Count2 == 100) {
  3034  0363  3007               	movlw	7
  3035  0364  3E3E               	addlw	_myMain& (0+255)
  3036  0365  0086               	movwf	6
  3037  0366  0187               	clrf	7
  3038  0367  3F40               	moviw [0]fsr1
  3039  0368  3A64               	xorlw	100
  3040  0369  1D03               	skipz
  3041  036A  2B6D               	goto	u2075
  3042  036B  3F41               	moviw [1]fsr1
  3043  036C  3A00               	xorlw	0
  3044  036D                     u2075:	
  3045  036D  1D03               	skipz
  3046  036E  0008               	return
  3047                           
  3048                           ;Main_B1.c: 262: myMain.Count2 = 0;
  3049  036F  01C5               	clrf	_myMain+7
  3050  0370  01C6               	clrf	_myMain+8
  3051  0371  0008               	return
  3052  0372                     __end_of_my_MainTimer:	
  3053                           
  3054                           	psect	text2
  3055  0655                     __ptext2:	
  3056 ;; *************** function _myUARTtoRF_Main *****************
  3057 ;; Defined at:
  3058 ;;		line 14 in file "../src/myUARTtoRF.c"
  3059 ;; Parameters:    Size  Location     Type
  3060 ;;		None
  3061 ;; Auto vars:     Size  Location     Type
  3062 ;;		None
  3063 ;; Return value:  Size  Location     Type
  3064 ;;		None               void
  3065 ;; Registers used:
  3066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3067 ;; Tracked objects:
  3068 ;;		On entry : 0/0
  3069 ;;		On exit  : 0/0
  3070 ;;		Unchanged: 0/0
  3071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3072 ;;      Params:         0       0       0       0       0       0       0       0
  3073 ;;      Locals:         0       0       0       0       0       0       0       0
  3074 ;;      Temps:          0       0       0       0       0       0       0       0
  3075 ;;      Totals:         0       0       0       0       0       0       0       0
  3076 ;;Total ram usage:        0 bytes
  3077 ;; Hardware stack levels used:    1
  3078 ;; Hardware stack levels required when called:    4
  3079 ;; This function calls:
  3080 ;;		_setTxData
  3081 ;; This function is called by:
  3082 ;;		_main
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           
  3087                           ;psect for function _myUARTtoRF_Main
  3088  0655                     _myUARTtoRF_Main:	
  3089                           
  3090                           ;myUARTtoRF.c: 15: setTxData();
  3091                           
  3092                           ;incstack = 0
  3093                           ; Regs used in _myUARTtoRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3094  0655  3181  217A         	fcall	_setTxData
  3095  0657  0008               	return
  3096  0658                     __end_of_myUARTtoRF_Main:	
  3097                           
  3098                           	psect	text3
  3099  0636                     __ptext3:	
  3100 ;; *************** function _myUARTtoRF_Initialization *****************
  3101 ;; Defined at:
  3102 ;;		line 7 in file "../src/myUARTtoRF.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;		None
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;		None
  3107 ;; Return value:  Size  Location     Type
  3108 ;;		None               void
  3109 ;; Registers used:
  3110 ;;		None
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3116 ;;      Params:         0       0       0       0       0       0       0       0
  3117 ;;      Locals:         0       0       0       0       0       0       0       0
  3118 ;;      Temps:          0       0       0       0       0       0       0       0
  3119 ;;      Totals:         0       0       0       0       0       0       0       0
  3120 ;;Total ram usage:        0 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; Hardware stack levels required when called:    3
  3123 ;; This function calls:
  3124 ;;		Nothing
  3125 ;; This function is called by:
  3126 ;;		_main
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           
  3131                           ;psect for function _myUARTtoRF_Initialization
  3132  0636                     _myUARTtoRF_Initialization:	
  3133                           
  3134                           ;myUARTtoRF.c: 8: RA0 = 0;
  3135                           
  3136                           ;incstack = 0
  3137                           ; Regs used in _myUARTtoRF_Initialization: []
  3138  0636  0020               	movlb	0	; select bank0
  3139  0637  100C               	bcf	12,0	;volatile
  3140                           
  3141                           ;myUARTtoRF.c: 9: RA1 = 1;
  3142  0638  148C               	bsf	12,1	;volatile
  3143                           
  3144                           ;myUARTtoRF.c: 10: RA2 = 1;
  3145  0639  150C               	bsf	12,2	;volatile
  3146  063A  0008               	return
  3147  063B                     __end_of_myUARTtoRF_Initialization:	
  3148                           
  3149                           	psect	text4
  3150  05D5                     __ptext4:	
  3151 ;; *************** function _myMain_Initialization *****************
  3152 ;; Defined at:
  3153 ;;		line 168 in file "../src/Main_B1.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;		None
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;		None
  3158 ;; Return value:  Size  Location     Type
  3159 ;;		None               void
  3160 ;; Registers used:
  3161 ;;		wreg, fsr1l, fsr1h
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3167 ;;      Params:         0       0       0       0       0       0       0       0
  3168 ;;      Locals:         0       0       0       0       0       0       0       0
  3169 ;;      Temps:          1       0       0       0       0       0       0       0
  3170 ;;      Totals:         1       0       0       0       0       0       0       0
  3171 ;;Total ram usage:        1 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:    3
  3174 ;; This function calls:
  3175 ;;		Nothing
  3176 ;; This function is called by:
  3177 ;;		_main
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           
  3182                           ;psect for function _myMain_Initialization
  3183  05D5                     _myMain_Initialization:	
  3184                           
  3185                           ;Main_B1.c: 170: product = &_product;
  3186                           
  3187                           ;incstack = 0
  3188                           ; Regs used in _myMain_Initialization: [wregfsr1]
  3189  05D5  30A0               	movlw	__product& (0+255)
  3190  05D6  00F2               	movwf	??_myMain_Initialization
  3191  05D7  0872               	movf	??_myMain_Initialization,w
  3192  05D8  00FB               	movwf	_product
  3193                           
  3194                           ;Main_B1.c: 171: product->Data[20] = 0xaa;
  3195  05D9  30AA               	movlw	170
  3196  05DA  00F2               	movwf	??_myMain_Initialization
  3197  05DB  087B               	movf	_product,w
  3198  05DC  3E14               	addlw	20
  3199  05DD  0086               	movwf	6
  3200  05DE  0187               	clrf	7
  3201  05DF  0872               	movf	??_myMain_Initialization,w
  3202  05E0  0081               	movwf	1
  3203  05E1  0008               	return
  3204  05E2                     __end_of_myMain_Initialization:	
  3205                           
  3206                           	psect	text5
  3207  05E2                     __ptext5:	
  3208 ;; *************** function _UART_Main *****************
  3209 ;; Defined at:
  3210 ;;		line 753 in file "../src/MCU_B1.c"
  3211 ;; Parameters:    Size  Location     Type
  3212 ;;		None
  3213 ;; Auto vars:     Size  Location     Type
  3214 ;;		None
  3215 ;; Return value:  Size  Location     Type
  3216 ;;		None               void
  3217 ;; Registers used:
  3218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3219 ;; Tracked objects:
  3220 ;;		On entry : 0/0
  3221 ;;		On exit  : 0/0
  3222 ;;		Unchanged: 0/0
  3223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3224 ;;      Params:         0       0       0       0       0       0       0       0
  3225 ;;      Locals:         0       0       0       0       0       0       0       0
  3226 ;;      Temps:          0       0       0       0       0       0       0       0
  3227 ;;      Totals:         0       0       0       0       0       0       0       0
  3228 ;;Total ram usage:        0 bytes
  3229 ;; Hardware stack levels used:    1
  3230 ;; Hardware stack levels required when called:    5
  3231 ;; This function calls:
  3232 ;;		_UART_Receive
  3233 ;;		_UART_Transmit
  3234 ;; This function is called by:
  3235 ;;		_main
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           
  3240                           ;psect for function _UART_Main
  3241  05E2                     _UART_Main:	
  3242                           
  3243                           ;MCU_B1.c: 754: if (UART.RxGO == 1) {
  3244                           
  3245                           ;incstack = 0
  3246                           ; Regs used in _UART_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3247  05E2  0021               	movlb	1	; select bank1
  3248  05E3  1CCB               	btfss	(_UART^(0+128)+11),1
  3249  05E4  2DE9               	goto	l583
  3250                           
  3251                           ;MCU_B1.c: 755: UART.RxGO = 0;
  3252  05E5  10CB               	bcf	(_UART^(0+128)+11),1
  3253                           
  3254                           ;MCU_B1.c: 756: UART_Receive();
  3255  05E6  3185  25B4         	fcall	_UART_Receive
  3256                           
  3257                           ;MCU_B1.c: 757: ;;
  3258                           ;MCU_B1.c: 760: } else {
  3259  05E8  0008               	return
  3260  05E9                     l583:	
  3261                           
  3262                           ;MCU_B1.c: 761: if (UART.TxGO == 1) {
  3263  05E9  1C4B               	btfss	(_UART^(0+128)+11),0
  3264  05EA  0008               	return
  3265                           
  3266                           ;MCU_B1.c: 762: UART.TxGO = 0;
  3267  05EB  104B               	bcf	(_UART^(0+128)+11),0
  3268                           
  3269                           ;MCU_B1.c: 763: UART_Transmit();
  3270  05EC  3186  263B         	fcall	_UART_Transmit
  3271  05EE  0008               	return
  3272  05EF                     __end_of_UART_Main:	
  3273                           
  3274                           	psect	text6
  3275  063B                     __ptext6:	
  3276 ;; *************** function _UART_Transmit *****************
  3277 ;; Defined at:
  3278 ;;		line 768 in file "../src/MCU_B1.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;		None
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;		None
  3283 ;; Return value:  Size  Location     Type
  3284 ;;		None               void
  3285 ;; Registers used:
  3286 ;;		wreg, status,2, status,0, pclath, cstack
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3292 ;;      Params:         0       0       0       0       0       0       0       0
  3293 ;;      Locals:         0       0       0       0       0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0       0
  3295 ;;      Totals:         0       0       0       0       0       0       0       0
  3296 ;;Total ram usage:        0 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    4
  3299 ;; This function calls:
  3300 ;;		_putch
  3301 ;; This function is called by:
  3302 ;;		_UART_Main
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           
  3307                           ;psect for function _UART_Transmit
  3308  063B                     _UART_Transmit:	
  3309                           
  3310                           ;MCU_B1.c: 770: putch(UART.Data[0]);
  3311                           
  3312                           ;incstack = 0
  3313                           ; Regs used in _UART_Transmit: [wreg+status,2+status,0+pclath+cstack]
  3314  063B  0021               	movlb	1	; select bank1
  3315  063C  0840               	movf	_UART^(0+128),w
  3316  063D  3186  261C         	fcall	_putch
  3317  063F  0008               	return
  3318  0640                     __end_of_UART_Transmit:	
  3319                           
  3320                           	psect	text7
  3321  061C                     __ptext7:	
  3322 ;; *************** function _putch *****************
  3323 ;; Defined at:
  3324 ;;		line 834 in file "../src/MCU_B1.c"
  3325 ;; Parameters:    Size  Location     Type
  3326 ;;  byte            1    wreg     unsigned char 
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  byte            1    2[COMMON] unsigned char 
  3329 ;; Return value:  Size  Location     Type
  3330 ;;		None               void
  3331 ;; Registers used:
  3332 ;;		wreg
  3333 ;; Tracked objects:
  3334 ;;		On entry : 0/0
  3335 ;;		On exit  : 0/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3338 ;;      Params:         0       0       0       0       0       0       0       0
  3339 ;;      Locals:         1       0       0       0       0       0       0       0
  3340 ;;      Temps:          0       0       0       0       0       0       0       0
  3341 ;;      Totals:         1       0       0       0       0       0       0       0
  3342 ;;Total ram usage:        1 bytes
  3343 ;; Hardware stack levels used:    1
  3344 ;; Hardware stack levels required when called:    3
  3345 ;; This function calls:
  3346 ;;		Nothing
  3347 ;; This function is called by:
  3348 ;;		_UART_Transmit
  3349 ;;		_getche
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           
  3354                           ;psect for function _putch
  3355  061C                     _putch:	
  3356                           
  3357                           ;incstack = 0
  3358                           ; Regs used in _putch: [wreg]
  3359                           ;putch@byte stored from wreg
  3360  061C  00F2               	movwf	putch@byte
  3361  061D                     l598:	
  3362                           ;MCU_B1.c: 837: continue;
  3363                           
  3364                           ;MCU_B1.c: 836: while (!TXIF)
  3365                           
  3366  061D  0020               	movlb	0	; select bank0
  3367  061E  1E11               	btfss	17,4	;volatile
  3368  061F  2E1D               	goto	l598
  3369                           
  3370                           ;MCU_B1.c: 838: TXREG = byte;
  3371  0620  0872               	movf	putch@byte,w
  3372  0621  0023               	movlb	3	; select bank3
  3373  0622  009A               	movwf	26	;volatile
  3374  0623  0008               	return
  3375  0624                     __end_of_putch:	
  3376                           
  3377                           	psect	text8
  3378  05B4                     __ptext8:	
  3379 ;; *************** function _UART_Receive *****************
  3380 ;; Defined at:
  3381 ;;		line 783 in file "../src/MCU_B1.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;		None
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  i               1    0        unsigned char 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;		None               void
  3388 ;; Registers used:
  3389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3395 ;;      Params:         0       0       0       0       0       0       0       0
  3396 ;;      Locals:         0       0       0       0       0       0       0       0
  3397 ;;      Temps:          1       0       0       0       0       0       0       0
  3398 ;;      Totals:         1       0       0       0       0       0       0       0
  3399 ;;Total ram usage:        1 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    4
  3402 ;; This function calls:
  3403 ;;		_setTxData
  3404 ;; This function is called by:
  3405 ;;		_UART_Main
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           
  3410                           ;psect for function _UART_Receive
  3411  05B4                     _UART_Receive:	
  3412                           
  3413                           ;MCU_B1.c: 784: char i;
  3414                           ;MCU_B1.c: 792: RA1 = RA1 == 1 ? 0 : 1;
  3415                           
  3416                           ;incstack = 0
  3417                           ; Regs used in _UART_Receive: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3418  05B4  3002               	movlw	2
  3419  05B5  0020               	movlb	0	; select bank0
  3420  05B6  068C               	xorwf	12,f
  3421                           
  3422                           ;MCU_B1.c: 793: product->Data[2] = UART.Data[1];
  3423  05B7  0021               	movlb	1	; select bank1
  3424  05B8  0841               	movf	(_UART^(0+128)+1),w
  3425  05B9  00F3               	movwf	??_UART_Receive
  3426  05BA  087B               	movf	_product,w
  3427  05BB  3E02               	addlw	2
  3428  05BC  0086               	movwf	6
  3429  05BD  0187               	clrf	7
  3430  05BE  0873               	movf	??_UART_Receive,w
  3431  05BF  0081               	movwf	1
  3432                           
  3433                           ;MCU_B1.c: 794: setTxData();
  3434  05C0  3181  217A         	fcall	_setTxData
  3435                           
  3436                           ;MCU_B1.c: 798: myMain.Test = 1;
  3437  05C2  0020               	movlb	0	; select bank0
  3438  05C3  173E               	bsf	_myMain,6
  3439  05C4  0008               	return
  3440  05C5                     __end_of_UART_Receive:	
  3441                           
  3442                           	psect	text9
  3443  0658                     __ptext9:	
  3444 ;; *************** function _RF_Main *****************
  3445 ;; Defined at:
  3446 ;;		line 16 in file "../src/RF_Control_B1.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;		None
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;		None
  3451 ;; Return value:  Size  Location     Type
  3452 ;;		None               void
  3453 ;; Registers used:
  3454 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3460 ;;      Params:         0       0       0       0       0       0       0       0
  3461 ;;      Locals:         0       0       0       0       0       0       0       0
  3462 ;;      Temps:          0       0       0       0       0       0       0       0
  3463 ;;      Totals:         0       0       0       0       0       0       0       0
  3464 ;;Total ram usage:        0 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    7
  3467 ;; This function calls:
  3468 ;;		_setRF_Main
  3469 ;; This function is called by:
  3470 ;;		_main
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           
  3475                           ;psect for function _RF_Main
  3476  0658                     _RF_Main:	
  3477                           
  3478                           ;RF_Control_B1.c: 18: setRF_Main();
  3479                           
  3480                           ;incstack = 0
  3481                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3482  0658  3180  2035         	fcall	_setRF_Main
  3483  065A  0008               	return
  3484  065B                     __end_of_RF_Main:	
  3485                           
  3486                           	psect	text10
  3487  0035                     __ptext10:	
  3488 ;; *************** function _setRF_Main *****************
  3489 ;; Defined at:
  3490 ;;		line 52 in file "../src/RF_Control_B1.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;		None
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;  error           1    2[BANK0 ] unsigned char 
  3495 ;;  Receive_OK      1    1[BANK0 ] unsigned char 
  3496 ;;  loop_f          1    0[BANK0 ] unsigned char 
  3497 ;; Return value:  Size  Location     Type
  3498 ;;		None               void
  3499 ;; Registers used:
  3500 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3506 ;;      Params:         0       0       0       0       0       0       0       0
  3507 ;;      Locals:         0       3       0       0       0       0       0       0
  3508 ;;      Temps:          1       0       0       0       0       0       0       0
  3509 ;;      Totals:         1       3       0       0       0       0       0       0
  3510 ;;Total ram usage:        4 bytes
  3511 ;; Hardware stack levels used:    1
  3512 ;; Hardware stack levels required when called:    6
  3513 ;; This function calls:
  3514 ;;		_CC2500_RxData
  3515 ;;		_CC2500_TxData
  3516 ;;		_CC2500_WriteCommand
  3517 ;;		_getMain_All_Error_Status
  3518 ;;		_getRxData
  3519 ;; This function is called by:
  3520 ;;		_RF_Main
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           
  3525                           ;psect for function _setRF_Main
  3526  0035                     _setRF_Main:	
  3527                           
  3528                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  3529                           
  3530                           ;incstack = 0
  3531                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3532  0035  0020               	movlb	0	; select bank0
  3533  0036  01E6               	clrf	setRF_Main@loop_f
  3534  0037  01E7               	clrf	setRF_Main@Receive_OK
  3535  0038  01E8               	clrf	setRF_Main@error
  3536                           
  3537                           ;RF_Control_B1.c: 58: if (0 == 0) {
  3538  0039  1C4D               	btfss	_RF1,0
  3539  003A  28F7               	goto	l964
  3540                           
  3541                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  3542  003B  3000               	movlw	0
  3543  003C  3186  265B  3180   	fcall	_getMain_All_Error_Status
  3544  003F  3800               	iorlw	0
  3545  0040  1D03               	skipz
  3546  0041  2842               	goto	l966
  3547  0042                     l966:	
  3548                           ;RF_Control_B1.c: 65: } else {
  3549                           
  3550                           ;RF_Control_B1.c: 63: RF1.Key = 0;
  3551                           
  3552                           
  3553                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  3554  0042  0020               	movlb	0	; select bank0
  3555  0043  13CD               	bcf	_RF1,7
  3556                           
  3557                           ;RF_Control_B1.c: 70: }
  3558                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  3559  0044  1BCD               	btfsc	_RF1,7
  3560  0045  1B4D               	btfsc	_RF1,6
  3561  0046  284C               	goto	l968
  3562                           
  3563                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  3564  0047  01CF               	clrf	_RF1+2
  3565  0048  01D0               	clrf	_RF1+3
  3566                           
  3567                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  3568  0049  14CE               	bsf	_RF1+1,1
  3569                           
  3570                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  3571  004A  11CD               	bcf	_RF1,3
  3572                           
  3573                           ;RF_Control_B1.c: 76: } else {
  3574  004B  0008               	return
  3575  004C                     l968:	
  3576                           
  3577                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  3578  004C  18CE               	btfsc	_RF1+1,1
  3579  004D  1B4D               	btfsc	_RF1,6
  3580  004E  2863               	goto	l3701
  3581                           
  3582                           ;RF_Control_B1.c: 78: RF1.Count++;
  3583  004F  3001               	movlw	1
  3584  0050  07CF               	addwf	_RF1+2,f
  3585  0051  3000               	movlw	0
  3586  0052  3DD0               	addwfc	_RF1+3,f
  3587                           
  3588                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  3589  0053  3002               	movlw	2
  3590  0054  3E4D               	addlw	_RF1& (0+255)
  3591  0055  0086               	movwf	6
  3592  0056  0187               	clrf	7
  3593  0057  3F40               	moviw [0]fsr1
  3594  0058  0654               	xorwf	_RF1+7,w
  3595  0059  1D03               	skipz
  3596  005A  285D               	goto	u2785
  3597  005B  3F41               	moviw [1]fsr1
  3598  005C  0655               	xorwf	_RF1+8,w
  3599  005D                     u2785:	
  3600  005D  1D03               	skipz
  3601  005E  28C4               	goto	l3751
  3602                           
  3603                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  3604  005F  01CF               	clrf	_RF1+2
  3605  0060  01D0               	clrf	_RF1+3
  3606                           
  3607                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  3608  0061  10CE               	bcf	_RF1+1,1
  3609                           
  3610                           ;RF_Control_B1.c: 82: }
  3611                           ;RF_Control_B1.c: 83: } else {
  3612  0062  28C4               	goto	l3751
  3613  0063                     l3701:	
  3614                           
  3615                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  3616  0063  01CF               	clrf	_RF1+2
  3617  0064  01D0               	clrf	_RF1+3
  3618                           
  3619                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  3620  0065  10CE               	bcf	_RF1+1,1
  3621                           
  3622                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  3623  0066  194D               	btfsc	_RF1,2
  3624  0067  1B4D               	btfsc	_RF1,6
  3625  0068  287C               	goto	l973
  3626                           
  3627                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  3628  0069  114D               	bcf	_RF1,2
  3629                           
  3630                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  3631  006A  11CD               	bcf	_RF1,3
  3632                           
  3633                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  3634  006B  10CD               	bcf	_RF1,1
  3635                           
  3636                           ;RF_Control_B1.c: 94: if (RF1.RxStatus == 1 || RF1.ReceiveGO == 1) {
  3637  006C  19CD               	btfsc	_RF1,3
  3638  006D  2870               	goto	l3713
  3639  006E  1CCD               	btfss	_RF1,1
  3640  006F  2878               	goto	l974
  3641  0070                     l3713:	
  3642                           
  3643                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x36);
  3644  0070  3036               	movlw	54
  3645  0071  3185  2520  3180   	fcall	_CC2500_WriteCommand
  3646                           
  3647                           ;RF_Control_B1.c: 97: CC2500_WriteCommand(0x3A);
  3648  0074  303A               	movlw	58
  3649  0075  3185  2520  3180   	fcall	_CC2500_WriteCommand
  3650  0078                     l974:	
  3651                           
  3652                           ;RF_Control_B1.c: 99: }
  3653                           ;RF_Control_B1.c: 100: CC2500_TxData();
  3654  0078  3182  22C4  3180   	fcall	_CC2500_TxData
  3655                           
  3656                           ;RF_Control_B1.c: 102: } else {
  3657  007B  28C4               	goto	l3751
  3658  007C                     l973:	
  3659                           
  3660                           ;RF_Control_B1.c: 104: if (RF1.RxStatus == 1) {
  3661  007C  1DCD               	btfss	_RF1,3
  3662  007D  28B3               	goto	l978
  3663                           
  3664                           ;RF_Control_B1.c: 106: CC2500_RxData();
  3665  007E  3182  2266  3180   	fcall	_CC2500_RxData
  3666                           
  3667                           ;RF_Control_B1.c: 107: if (RF1.ReceiveGO == 1) {
  3668  0081  0020               	movlb	0	; select bank0
  3669  0082  1CCD               	btfss	_RF1,1
  3670  0083  28C4               	goto	l3751
  3671                           
  3672                           ;RF_Control_B1.c: 108: RF1.ReceiveGO = 0;
  3673  0084  10CD               	bcf	_RF1,1
  3674                           
  3675                           ;RF_Control_B1.c: 109: RF1.Correction = 0;
  3676  0085  12CE               	bcf	_RF1+1,5
  3677                           
  3678                           ;RF_Control_B1.c: 110: RF1.CorrectionCounter = 0;
  3679  0086  01D7               	clrf	_RF1+10
  3680  0087  01D8               	clrf	_RF1+11
  3681                           
  3682                           ;RF_Control_B1.c: 121: getRxData();
  3683  0088  3180  20FB  3180   	fcall	_getRxData
  3684                           
  3685                           ;RF_Control_B1.c: 122: RF1.Run = 1;
  3686  008B  0020               	movlb	0	; select bank0
  3687  008C  14CE               	bsf	_RF1+1,1
  3688                           
  3689                           ;RF_Control_B1.c: 124: if (RF1.Checked == 1) {
  3690  008D  1DCE               	btfss	_RF1+1,3
  3691  008E  289C               	goto	l3735
  3692                           
  3693                           ;RF_Control_B1.c: 125: if (RF1.RunTime > 10) {
  3694  008F  3000               	movlw	0
  3695  0090  0255               	subwf	_RF1+8,w
  3696  0091  300B               	movlw	11
  3697  0092  1903               	skipnz
  3698  0093  0254               	subwf	_RF1+7,w
  3699  0094  1C03               	skipc
  3700  0095  289A               	goto	l3733
  3701                           
  3702                           ;RF_Control_B1.c: 126: RF1.RunTime = 10;
  3703  0096  300A               	movlw	10
  3704  0097  00D4               	movwf	_RF1+7
  3705  0098  3000               	movlw	0
  3706  0099  00D5               	movwf	_RF1+8
  3707  009A                     l3733:	
  3708                           
  3709                           ;RF_Control_B1.c: 127: }
  3710                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  3711  009A  01D1               	clrf	_RF1+4
  3712                           
  3713                           ;RF_Control_B1.c: 129: } else {
  3714  009B  28C4               	goto	l3751
  3715  009C                     l3735:	
  3716                           
  3717                           ;RF_Control_B1.c: 130: RF1.CheckCount++;
  3718  009C  3001               	movlw	1
  3719  009D  00F8               	movwf	??_setRF_Main
  3720  009E  0878               	movf	??_setRF_Main,w
  3721  009F  07D1               	addwf	_RF1+4,f
  3722                           
  3723                           ;RF_Control_B1.c: 131: if (RF1.CheckCount == 2) {
  3724  00A0  0851               	movf	_RF1+4,w
  3725  00A1  3A02               	xorlw	2
  3726  00A2  1D03               	skipz
  3727  00A3  28C4               	goto	l3751
  3728                           
  3729                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  3730  00A4  01D1               	clrf	_RF1+4
  3731                           
  3732                           ;RF_Control_B1.c: 133: RF1.CheckedCounter = 0;
  3733  00A5  01D2               	clrf	_RF1+5
  3734  00A6  01D3               	clrf	_RF1+6
  3735                           
  3736                           ;RF_Control_B1.c: 134: if (RF1.RunTime < 200) {
  3737  00A7  3000               	movlw	0
  3738  00A8  0255               	subwf	_RF1+8,w
  3739  00A9  30C8               	movlw	200
  3740  00AA  1903               	skipnz
  3741  00AB  0254               	subwf	_RF1+7,w
  3742  00AC  1803               	skipnc
  3743  00AD  28C4               	goto	l3751
  3744                           
  3745                           ;RF_Control_B1.c: 135: RF1.RunTime += 10;
  3746  00AE  300A               	movlw	10
  3747  00AF  07D4               	addwf	_RF1+7,f
  3748  00B0  3000               	movlw	0
  3749  00B1  3DD5               	addwfc	_RF1+8,f
  3750                           
  3751                           ;RF_Control_B1.c: 136: }
  3752                           ;RF_Control_B1.c: 137: }
  3753                           ;RF_Control_B1.c: 138: }
  3754                           ;RF_Control_B1.c: 139: }
  3755                           ;RF_Control_B1.c: 140: } else {
  3756  00B2  28C4               	goto	l3751
  3757  00B3                     l978:	
  3758                           
  3759                           ;RF_Control_B1.c: 142: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  3760  00B3  1DCD               	btfss	_RF1,3
  3761  00B4  18CD               	btfsc	_RF1,1
  3762  00B5  28C4               	goto	l3751
  3763                           
  3764                           ;RF_Control_B1.c: 143: RF1.RxStatus = 1;
  3765  00B6  15CD               	bsf	_RF1,3
  3766                           
  3767                           ;RF_Control_B1.c: 144: RF1.Correction = 1;
  3768  00B7  16CE               	bsf	_RF1+1,5
  3769                           
  3770                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x36);
  3771  00B8  3036               	movlw	54
  3772  00B9  3185  2520  3180   	fcall	_CC2500_WriteCommand
  3773                           
  3774                           ;RF_Control_B1.c: 148: CC2500_WriteCommand(0x3A);
  3775  00BC  303A               	movlw	58
  3776  00BD  3185  2520  3180   	fcall	_CC2500_WriteCommand
  3777                           
  3778                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x34);
  3779  00C0  3034               	movlw	52
  3780  00C1  3185  2520  3180   	fcall	_CC2500_WriteCommand
  3781  00C4                     l3751:	
  3782                           
  3783                           ;RF_Control_B1.c: 151: }
  3784                           ;RF_Control_B1.c: 153: }
  3785                           ;RF_Control_B1.c: 154: }
  3786                           ;RF_Control_B1.c: 155: }
  3787                           ;RF_Control_B1.c: 156: if (RF1.RxStatus == 1) {
  3788  00C4  0020               	movlb	0	; select bank0
  3789  00C5  1DCD               	btfss	_RF1,3
  3790  00C6  28E5               	goto	l3763
  3791                           
  3792                           ;RF_Control_B1.c: 157: RF1.CheckedCounter++;
  3793  00C7  3001               	movlw	1
  3794  00C8  07D2               	addwf	_RF1+5,f
  3795  00C9  3000               	movlw	0
  3796  00CA  3DD3               	addwfc	_RF1+6,f
  3797                           
  3798                           ;RF_Control_B1.c: 158: if (RF1.CheckedCounter == 100) {
  3799  00CB  3005               	movlw	5
  3800  00CC  3E4D               	addlw	_RF1& (0+255)
  3801  00CD  0086               	movwf	6
  3802  00CE  0187               	clrf	7
  3803  00CF  3F40               	moviw [0]fsr1
  3804  00D0  3A64               	xorlw	100
  3805  00D1  1D03               	skipz
  3806  00D2  28D5               	goto	u2925
  3807  00D3  3F41               	moviw [1]fsr1
  3808  00D4  3A00               	xorlw	0
  3809  00D5                     u2925:	
  3810  00D5  1D03               	skipz
  3811  00D6  28E5               	goto	l3763
  3812                           
  3813                           ;RF_Control_B1.c: 159: RF1.CheckedCounter = 0;
  3814  00D7  01D2               	clrf	_RF1+5
  3815  00D8  01D3               	clrf	_RF1+6
  3816                           
  3817                           ;RF_Control_B1.c: 160: RF1.CheckCount = 0;
  3818  00D9  01D1               	clrf	_RF1+4
  3819                           
  3820                           ;RF_Control_B1.c: 161: if (RF1.RunTime > 10) {
  3821  00DA  3000               	movlw	0
  3822  00DB  0255               	subwf	_RF1+8,w
  3823  00DC  300B               	movlw	11
  3824  00DD  1903               	skipnz
  3825  00DE  0254               	subwf	_RF1+7,w
  3826  00DF  1C03               	skipc
  3827  00E0  28E5               	goto	l3763
  3828                           
  3829                           ;RF_Control_B1.c: 162: RF1.RunTime -= 10;
  3830  00E1  300A               	movlw	10
  3831  00E2  02D4               	subwf	_RF1+7,f
  3832  00E3  3000               	movlw	0
  3833  00E4  3BD5               	subwfb	_RF1+8,f
  3834  00E5                     l3763:	
  3835                           
  3836                           ;RF_Control_B1.c: 163: }
  3837                           ;RF_Control_B1.c: 164: }
  3838                           ;RF_Control_B1.c: 165: }
  3839                           ;RF_Control_B1.c: 166: if (RF1.Correction == 1) {
  3840  00E5  1ECE               	btfss	_RF1+1,5
  3841  00E6  0008               	return
  3842                           
  3843                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter++;
  3844  00E7  3001               	movlw	1
  3845  00E8  07D7               	addwf	_RF1+10,f
  3846  00E9  3000               	movlw	0
  3847  00EA  3DD8               	addwfc	_RF1+11,f
  3848                           
  3849                           ;RF_Control_B1.c: 168: if (RF1.CorrectionCounter >= 30000) {
  3850  00EB  3075               	movlw	117
  3851  00EC  0258               	subwf	_RF1+11,w
  3852  00ED  3030               	movlw	48
  3853  00EE  1903               	skipnz
  3854  00EF  0257               	subwf	_RF1+10,w
  3855  00F0  1C03               	skipc
  3856  00F1  0008               	return
  3857                           
  3858                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter = 0;
  3859  00F2  01D7               	clrf	_RF1+10
  3860  00F3  01D8               	clrf	_RF1+11
  3861                           
  3862                           ;RF_Control_B1.c: 170: RF1.RxStatus = 0;
  3863  00F4  11CD               	bcf	_RF1,3
  3864                           
  3865                           ;RF_Control_B1.c: 171: RF1.ReceiveGO = 0;
  3866  00F5  10CD               	bcf	_RF1,1
  3867                           
  3868                           ;RF_Control_B1.c: 172: }
  3869                           ;RF_Control_B1.c: 173: }
  3870                           ;RF_Control_B1.c: 174: }
  3871                           ;RF_Control_B1.c: 175: }
  3872                           ;RF_Control_B1.c: 182: } else {
  3873  00F6  0008               	return
  3874  00F7                     l964:	
  3875                           
  3876                           ;RF_Control_B1.c: 183: if (myMain.PowerON == 1) {
  3877  00F7  1C3E               	btfss	_myMain,0
  3878  00F8  0008               	return
  3879                           
  3880                           ;RF_Control_B1.c: 184: RF1.Enable = 1;
  3881  00F9  144D               	bsf	_RF1,0
  3882  00FA  0008               	return
  3883  00FB                     __end_of_setRF_Main:	
  3884                           
  3885                           	psect	text11
  3886  00FB                     __ptext11:	
  3887 ;; *************** function _getRxData *****************
  3888 ;; Defined at:
  3889 ;;		line 274 in file "../src/RF_Control_B1.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;		None
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;  error           1    4[COMMON] unsigned char 
  3894 ;; Return value:  Size  Location     Type
  3895 ;;		None               void
  3896 ;; Registers used:
  3897 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3898 ;; Tracked objects:
  3899 ;;		On entry : 0/0
  3900 ;;		On exit  : 0/0
  3901 ;;		Unchanged: 0/0
  3902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3903 ;;      Params:         0       0       0       0       0       0       0       0
  3904 ;;      Locals:         1       0       0       0       0       0       0       0
  3905 ;;      Temps:          1       0       0       0       0       0       0       0
  3906 ;;      Totals:         2       0       0       0       0       0       0       0
  3907 ;;Total ram usage:        2 bytes
  3908 ;; Hardware stack levels used:    1
  3909 ;; Hardware stack levels required when called:    5
  3910 ;; This function calls:
  3911 ;;		_getMain_All_Error_Status
  3912 ;;		_setControl_Lights_Table
  3913 ;;		_setLog_Code
  3914 ;;		_setTxData
  3915 ;; This function is called by:
  3916 ;;		_setRF_Main
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           
  3921                           ;psect for function _getRxData
  3922  00FB                     _getRxData:	
  3923                           
  3924                           ;RF_Control_B1.c: 275: char error = getMain_All_Error_Status(0);
  3925                           
  3926                           ;incstack = 0
  3927                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3928  00FB  3000               	movlw	0
  3929  00FC  3186  265B  3180   	fcall	_getMain_All_Error_Status
  3930  00FF  00F3               	movwf	??_getRxData
  3931  0100  0873               	movf	??_getRxData,w
  3932  0101  00F4               	movwf	getRxData@error
  3933                           
  3934                           ;RF_Control_B1.c: 276: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  3935  0102  0020               	movlb	0	; select bank0
  3936  0103  0820               	movf	_RF_Data,w
  3937  0104  3AAA               	xorlw	170
  3938  0105  1D03               	skipz
  3939  0106  291D               	goto	l3549
  3940  0107  0821               	movf	_RF_Data+1,w
  3941  0108  3A01               	xorlw	1
  3942  0109  1D03               	skipz
  3943  010A  291D               	goto	l3549
  3944                           
  3945                           ;RF_Control_B1.c: 278: product->Data[2] = 0x55;
  3946  010B  3055               	movlw	85
  3947  010C  00F3               	movwf	??_getRxData
  3948  010D  087B               	movf	_product,w
  3949  010E  3E02               	addlw	2
  3950  010F  0086               	movwf	6
  3951  0110  0187               	clrf	7
  3952  0111  0873               	movf	??_getRxData,w
  3953  0112  0081               	movwf	1
  3954                           
  3955                           ;RF_Control_B1.c: 279: setTxData();
  3956  0113  3181  217A         	fcall	_setTxData
  3957                           
  3958                           ;RF_Control_B1.c: 280: RF1.RunTime = 10;
  3959  0115  300A               	movlw	10
  3960  0116  0020               	movlb	0	; select bank0
  3961  0117  00D4               	movwf	_RF1+7
  3962  0118  3000               	movlw	0
  3963  0119  00D5               	movwf	_RF1+8
  3964                           
  3965                           ;RF_Control_B1.c: 283: RA1 = RA1 == 1 ? 0 : 1;
  3966  011A  3002               	movlw	2
  3967  011B  068C               	xorwf	12,f
  3968                           
  3969                           ;RF_Control_B1.c: 286: } else {
  3970  011C  0008               	return
  3971  011D                     l3549:	
  3972                           
  3973                           ;RF_Control_B1.c: 288: if (error == 0) {
  3974  011D  08F4               	movf	getRxData@error,f
  3975  011E  1D03               	skipz
  3976  011F  0008               	return
  3977                           
  3978                           ;RF_Control_B1.c: 289: if (RF1.Learn == 1) {
  3979  0120  1F4D               	btfss	_RF1,6
  3980  0121  2930               	goto	l3561
  3981                           
  3982                           ;RF_Control_B1.c: 290: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  3983  0122  08A0               	movf	_RF_Data,f
  3984  0123  1D03               	skipz
  3985  0124  292E               	goto	l1018
  3986  0125  0821               	movf	_RF_Data+1,w
  3987  0126  3A64               	xorlw	100
  3988  0127  1D03               	skipz
  3989  0128  292E               	goto	l1018
  3990                           
  3991                           ;RF_Control_B1.c: 291: setLog_Code();
  3992  0129  3185  2505         	fcall	_setLog_Code
  3993                           
  3994                           ;RF_Control_B1.c: 292: RF1.Checked = 1;
  3995  012B  0020               	movlb	0	; select bank0
  3996  012C  15CE               	bsf	_RF1+1,3
  3997                           
  3998                           ;RF_Control_B1.c: 293: } else {
  3999  012D  0008               	return
  4000  012E                     l1018:	
  4001                           
  4002                           ;RF_Control_B1.c: 294: RF1.Checked = 0;
  4003  012E  11CE               	bcf	_RF1+1,3
  4004                           
  4005                           ;RF_Control_B1.c: 295: }
  4006                           ;RF_Control_B1.c: 296: } else {
  4007  012F  0008               	return
  4008  0130                     l3561:	
  4009                           
  4010                           ;RF_Control_B1.c: 297: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  4011  0130  08A0               	movf	_RF_Data,f
  4012  0131  1D03               	skipz
  4013  0132  2964               	goto	l3583
  4014  0133  0821               	movf	_RF_Data+1,w
  4015  0134  3A02               	xorlw	2
  4016  0135  1D03               	skipz
  4017  0136  2964               	goto	l3583
  4018                           
  4019                           ;RF_Control_B1.c: 299: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  4020  0137  082C               	movf	_RF_Data+12,w
  4021  0138  3AFF               	xorlw	255
  4022  0139  1D03               	skipz
  4023  013A  2947               	goto	l3573
  4024  013B  082D               	movf	_RF_Data+13,w
  4025  013C  3AFF               	xorlw	255
  4026  013D  1D03               	skipz
  4027  013E  2947               	goto	l3573
  4028  013F  082E               	movf	_RF_Data+14,w
  4029  0140  3AFF               	xorlw	255
  4030  0141  1D03               	skipz
  4031  0142  2947               	goto	l3573
  4032                           
  4033                           ;RF_Control_B1.c: 300: __nop();
  4034  0143  0000               	nop
  4035                           
  4036                           ;RF_Control_B1.c: 301: RF1.Checked = 0;
  4037  0144  0020               	movlb	0	; select bank0
  4038  0145  11CE               	bcf	_RF1+1,3
  4039                           
  4040                           ;RF_Control_B1.c: 302: } else {
  4041  0146  0008               	return
  4042  0147                     l3573:	
  4043                           
  4044                           ;RF_Control_B1.c: 303: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  4045  0147  087B               	movf	_product,w
  4046  0148  3E0C               	addlw	12
  4047  0149  0086               	movwf	6
  4048  014A  0187               	clrf	7
  4049  014B  082C               	movf	_RF_Data+12,w
  4050  014C  0601               	xorwf	1,w
  4051  014D  1D03               	skipz
  4052  014E  0008               	return
  4053  014F  087B               	movf	_product,w
  4054  0150  3E0D               	addlw	13
  4055  0151  0086               	movwf	6
  4056  0152  0187               	clrf	7
  4057  0153  082D               	movf	_RF_Data+13,w
  4058  0154  0601               	xorwf	1,w
  4059  0155  1D03               	skipz
  4060  0156  0008               	return
  4061  0157  087B               	movf	_product,w
  4062  0158  3E0E               	addlw	14
  4063  0159  0086               	movwf	6
  4064  015A  0187               	clrf	7
  4065  015B  082E               	movf	_RF_Data+14,w
  4066  015C  0601               	xorwf	1,w
  4067  015D  1D03               	skipz
  4068  015E  0008               	return
  4069                           
  4070                           ;RF_Control_B1.c: 304: setControl_Lights_Table();
  4071  015F  3183  2372         	fcall	_setControl_Lights_Table
  4072                           
  4073                           ;RF_Control_B1.c: 305: RF1.Checked = 1;
  4074  0161  0020               	movlb	0	; select bank0
  4075  0162  15CE               	bsf	_RF1+1,3
  4076                           
  4077                           ;RF_Control_B1.c: 306: }
  4078                           ;RF_Control_B1.c: 307: }
  4079                           ;RF_Control_B1.c: 308: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  4080  0163  0008               	return
  4081  0164                     l3583:	
  4082  0164  0820               	movf	_RF_Data,w
  4083  0165  3AFF               	xorlw	255
  4084  0166  1D03               	skipz
  4085  0167  296E               	goto	l3589
  4086  0168  0821               	movf	_RF_Data+1,w
  4087  0169  3A02               	xorlw	2
  4088  016A  1D03               	skipz
  4089  016B  296E               	goto	l3589
  4090                           
  4091                           ;RF_Control_B1.c: 309: __nop();
  4092  016C  0000               	nop
  4093                           
  4094                           ;RF_Control_B1.c: 310: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  4095  016D  0008               	return
  4096  016E                     l3589:	
  4097  016E  0020               	movlb	0	; select bank0
  4098  016F  08A0               	movf	_RF_Data,f
  4099  0170  1D03               	skipz
  4100  0171  2978               	goto	l1028
  4101  0172  0821               	movf	_RF_Data+1,w
  4102  0173  3A65               	xorlw	101
  4103  0174  1D03               	skipz
  4104  0175  2978               	goto	l1028
  4105                           
  4106                           ;RF_Control_B1.c: 311: __nop();
  4107  0176  0000               	nop
  4108                           
  4109                           ;RF_Control_B1.c: 312: } else {
  4110  0177  0008               	return
  4111  0178                     l1028:	
  4112                           
  4113                           ;RF_Control_B1.c: 313: RF1.Checked = 0;
  4114  0178  11CE               	bcf	_RF1+1,3
  4115                           
  4116                           ;RF_Control_B1.c: 321: ;
  4117                           
  4118                           ;RF_Control_B1.c: 314: }
  4119                           ;RF_Control_B1.c: 319: }
  4120                           ;RF_Control_B1.c: 320: } else {
  4121  0179  0008               	return
  4122  017A                     __end_of_getRxData:	
  4123                           
  4124                           	psect	text12
  4125  0505                     __ptext12:	
  4126 ;; *************** function _setLog_Code *****************
  4127 ;; Defined at:
  4128 ;;		line 327 in file "../src/RF_Control_B1.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;		None
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;		None
  4133 ;; Return value:  Size  Location     Type
  4134 ;;		None               void
  4135 ;; Registers used:
  4136 ;;		wreg, fsr1l, fsr1h
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4142 ;;      Params:         0       0       0       0       0       0       0       0
  4143 ;;      Locals:         0       0       0       0       0       0       0       0
  4144 ;;      Temps:          1       0       0       0       0       0       0       0
  4145 ;;      Totals:         1       0       0       0       0       0       0       0
  4146 ;;Total ram usage:        1 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:    3
  4149 ;; This function calls:
  4150 ;;		Nothing
  4151 ;; This function is called by:
  4152 ;;		_getRxData
  4153 ;; This function uses a non-reentrant model
  4154 ;;
  4155                           
  4156                           
  4157                           ;psect for function _setLog_Code
  4158  0505                     _setLog_Code:	
  4159                           
  4160                           ;RF_Control_B1.c: 328: RF1.Learn = 0;
  4161                           
  4162                           ;incstack = 0
  4163                           ; Regs used in _setLog_Code: [wregfsr1]
  4164  0505  0020               	movlb	0	; select bank0
  4165  0506  134D               	bcf	_RF1,6
  4166                           
  4167                           ;RF_Control_B1.c: 329: product->Data[12]=RF_Data[12];
  4168  0507  082C               	movf	_RF_Data+12,w
  4169  0508  00F2               	movwf	??_setLog_Code
  4170  0509  087B               	movf	_product,w
  4171  050A  3E0C               	addlw	12
  4172  050B  0086               	movwf	6
  4173  050C  0187               	clrf	7
  4174  050D  0872               	movf	??_setLog_Code,w
  4175  050E  0081               	movwf	1
  4176                           
  4177                           ;RF_Control_B1.c: 330: product->Data[13]=RF_Data[13];
  4178  050F  082D               	movf	_RF_Data+13,w
  4179  0510  00F2               	movwf	??_setLog_Code
  4180  0511  087B               	movf	_product,w
  4181  0512  3E0D               	addlw	13
  4182  0513  0086               	movwf	6
  4183  0514  0187               	clrf	7
  4184  0515  0872               	movf	??_setLog_Code,w
  4185  0516  0081               	movwf	1
  4186                           
  4187                           ;RF_Control_B1.c: 331: product->Data[14]=RF_Data[14];
  4188  0517  082E               	movf	_RF_Data+14,w
  4189  0518  00F2               	movwf	??_setLog_Code
  4190  0519  087B               	movf	_product,w
  4191  051A  3E0E               	addlw	14
  4192  051B  0086               	movwf	6
  4193  051C  0187               	clrf	7
  4194  051D  0872               	movf	??_setLog_Code,w
  4195  051E  0081               	movwf	1
  4196  051F  0008               	return
  4197  0520                     __end_of_setLog_Code:	
  4198                           ;RF_Control_B1.c: 334: ;;
  4199                           
  4200                           
  4201                           	psect	text13
  4202  0372                     __ptext13:	
  4203 ;; *************** function _setControl_Lights_Table *****************
  4204 ;; Defined at:
  4205 ;;		line 340 in file "../src/RF_Control_B1.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;		None
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;		None
  4210 ;; Return value:  Size  Location     Type
  4211 ;;		None               void
  4212 ;; Registers used:
  4213 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4214 ;; Tracked objects:
  4215 ;;		On entry : 0/0
  4216 ;;		On exit  : 0/0
  4217 ;;		Unchanged: 0/0
  4218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4219 ;;      Params:         0       0       0       0       0       0       0       0
  4220 ;;      Locals:         0       0       0       0       0       0       0       0
  4221 ;;      Temps:          0       0       0       0       0       0       0       0
  4222 ;;      Totals:         0       0       0       0       0       0       0       0
  4223 ;;Total ram usage:        0 bytes
  4224 ;; Hardware stack levels used:    1
  4225 ;; Hardware stack levels required when called:    4
  4226 ;; This function calls:
  4227 ;;		_setTxData
  4228 ;; This function is called by:
  4229 ;;		_getRxData
  4230 ;; This function uses a non-reentrant model
  4231 ;;
  4232                           
  4233                           
  4234                           ;psect for function _setControl_Lights_Table
  4235  0372                     _setControl_Lights_Table:	
  4236                           
  4237                           ;RF_Control_B1.c: 341: switch (RF_Data[15]) {
  4238                           
  4239                           ;incstack = 0
  4240                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4241  0372  2B9A               	goto	l3409
  4242  0373                     l3401:	
  4243                           ;RF_Control_B1.c: 342: case 0x00:
  4244                           
  4245                           
  4246                           ;RF_Control_B1.c: 346: product->Data[9]=0;
  4247  0373  087B               	movf	_product,w
  4248  0374  3E09               	addlw	9
  4249  0375  0086               	movwf	6
  4250  0376  0187               	clrf	7
  4251  0377  0181               	clrf	1
  4252                           
  4253                           ;RF_Control_B1.c: 347: product->Data[11]=0;
  4254  0378  087B               	movf	_product,w
  4255  0379  3E0B               	addlw	11
  4256  037A  0086               	movwf	6
  4257  037B  0187               	clrf	7
  4258  037C  0181               	clrf	1
  4259                           
  4260                           ;RF_Control_B1.c: 348: product->Data[15]=0;
  4261  037D  087B               	movf	_product,w
  4262  037E  3E0F               	addlw	15
  4263  037F  0086               	movwf	6
  4264  0380  0187               	clrf	7
  4265  0381  0181               	clrf	1
  4266                           
  4267                           ;RF_Control_B1.c: 349: product->Data[17]=0;
  4268  0382  087B               	movf	_product,w
  4269  0383  3E11               	addlw	17
  4270  0384  0086               	movwf	6
  4271  0385  0187               	clrf	7
  4272  0386  0181               	clrf	1
  4273                           
  4274                           ;RF_Control_B1.c: 350: ;;
  4275                           ;RF_Control_B1.c: 352: break;
  4276  0387  0008               	return
  4277  0388                     l3403:	
  4278                           ;RF_Control_B1.c: 353: case 0x20:
  4279                           
  4280                           
  4281                           ;RF_Control_B1.c: 354: product->Data[9]=0;
  4282  0388  087B               	movf	_product,w
  4283  0389  3E09               	addlw	9
  4284  038A  0086               	movwf	6
  4285  038B  0187               	clrf	7
  4286  038C  0181               	clrf	1
  4287                           
  4288                           ;RF_Control_B1.c: 355: product->Data[11]=0;
  4289  038D  087B               	movf	_product,w
  4290  038E  3E0B               	addlw	11
  4291  038F  0086               	movwf	6
  4292  0390  0187               	clrf	7
  4293  0391  0181               	clrf	1
  4294                           
  4295                           ;RF_Control_B1.c: 356: product->Data[17]=0;
  4296  0392  087B               	movf	_product,w
  4297  0393  3E11               	addlw	17
  4298  0394  0086               	movwf	6
  4299  0395  0187               	clrf	7
  4300  0396  0181               	clrf	1
  4301                           
  4302                           ;RF_Control_B1.c: 357: setTxData();
  4303  0397  3181  217A         	fcall	_setTxData
  4304                           
  4305                           ;RF_Control_B1.c: 395: }
  4306                           
  4307                           ;RF_Control_B1.c: 394: break;
  4308                           
  4309                           ;RF_Control_B1.c: 388: case 0x31:
  4310                           
  4311                           ;RF_Control_B1.c: 387: break;
  4312                           
  4313                           ;RF_Control_B1.c: 381: case 0x21:
  4314                           
  4315                           ;RF_Control_B1.c: 380: break;
  4316                           
  4317                           ;RF_Control_B1.c: 374: case 0x11:
  4318                           
  4319                           ;RF_Control_B1.c: 373: break;
  4320                           
  4321                           ;RF_Control_B1.c: 369: case 0x03:
  4322                           
  4323                           ;RF_Control_B1.c: 368: break;
  4324                           
  4325                           ;RF_Control_B1.c: 364: case 0x02:
  4326                           
  4327                           ;RF_Control_B1.c: 363: break;
  4328                           
  4329                           ;RF_Control_B1.c: 359: case 0x01:
  4330                           
  4331                           ;RF_Control_B1.c: 358: break;
  4332  0399  0008               	return
  4333  039A                     l3409:	
  4334  039A  0020               	movlb	0	; select bank0
  4335  039B  082F               	movf	_RF_Data+15,w
  4336                           
  4337                           ; Switch size 1, requested type "space"
  4338                           ; Number of cases is 8, Range of values is 0 to 49
  4339                           ; switch strategies available:
  4340                           ; Name         Instructions Cycles
  4341                           ; simple_byte           25    13 (average)
  4342                           ; direct_byte          106     6 (fixed)
  4343                           ; jumptable            260     6 (fixed)
  4344                           ;	Chosen strategy is simple_byte
  4345  039C  3A00               	xorlw	0	; case 0
  4346  039D  1903               	skipnz
  4347  039E  2B73               	goto	l3401
  4348  039F  3A01               	xorlw	1	; case 1
  4349  03A0  1903               	skipnz
  4350  03A1  2BB5               	goto	l1048
  4351  03A2  3A03               	xorlw	3	; case 2
  4352  03A3  1903               	skipnz
  4353  03A4  2BB5               	goto	l1048
  4354  03A5  3A01               	xorlw	1	; case 3
  4355  03A6  1903               	skipnz
  4356  03A7  2BB5               	goto	l1048
  4357  03A8  3A12               	xorlw	18	; case 17
  4358  03A9  1903               	skipnz
  4359  03AA  2BB5               	goto	l1048
  4360  03AB  3A31               	xorlw	49	; case 32
  4361  03AC  1903               	skipnz
  4362  03AD  2B88               	goto	l3403
  4363  03AE  3A01               	xorlw	1	; case 33
  4364  03AF  1903               	skipnz
  4365  03B0  2BB5               	goto	l1048
  4366  03B1  3A10               	xorlw	16	; case 49
  4367  03B2  1903               	skipnz
  4368  03B3  2BB5               	goto	l1048
  4369  03B4  2BB5               	goto	l1048
  4370  03B5                     l1048:	
  4371  03B5  0008               	return
  4372  03B6                     __end_of_setControl_Lights_Table:	
  4373                           
  4374                           	psect	text14
  4375  017A                     __ptext14:	
  4376 ;; *************** function _setTxData *****************
  4377 ;; Defined at:
  4378 ;;		line 207 in file "../src/RF_Control_B1.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;		None
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  i               1    0        unsigned char 
  4383 ;; Return value:  Size  Location     Type
  4384 ;;		None               void
  4385 ;; Registers used:
  4386 ;;		wreg, fsr1l, fsr1h
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4392 ;;      Params:         0       0       0       0       0       0       0       0
  4393 ;;      Locals:         0       0       0       0       0       0       0       0
  4394 ;;      Temps:          1       0       0       0       0       0       0       0
  4395 ;;      Totals:         1       0       0       0       0       0       0       0
  4396 ;;Total ram usage:        1 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:    3
  4399 ;; This function calls:
  4400 ;;		Nothing
  4401 ;; This function is called by:
  4402 ;;		_UART_Receive
  4403 ;;		_getRxData
  4404 ;;		_setControl_Lights_Table
  4405 ;;		_myUARTtoRF_Main
  4406 ;;		_setRFSW_Control
  4407 ;;		_setRFSW_AdjControl
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           
  4412                           ;psect for function _setTxData
  4413  017A                     _setTxData:	
  4414                           
  4415                           ;RF_Control_B1.c: 208: char i;
  4416                           ;RF_Control_B1.c: 209: if (RF1.Enable == 1) {
  4417                           
  4418                           ;incstack = 0
  4419                           ; Regs used in _setTxData: [wregfsr1]
  4420  017A  0020               	movlb	0	; select bank0
  4421  017B  1C4D               	btfss	_RF1,0
  4422  017C  0008               	return
  4423                           
  4424                           ;RF_Control_B1.c: 211: if (RF1.TransceiveGO == 0) {
  4425  017D  194D               	btfsc	_RF1,2
  4426  017E  0008               	return
  4427                           
  4428                           ;RF_Control_B1.c: 212: RF1.TransceiveGO = 1;
  4429  017F  154D               	bsf	_RF1,2
  4430                           
  4431                           ;RF_Control_B1.c: 213: RF1.RunTime = 20;
  4432  0180  3014               	movlw	20
  4433  0181  00D4               	movwf	_RF1+7
  4434  0182  3000               	movlw	0
  4435  0183  00D5               	movwf	_RF1+8
  4436                           
  4437                           ;RF_Control_B1.c: 222: RF_Data[0] = 0x63;
  4438  0184  3063               	movlw	99
  4439  0185  00F2               	movwf	??_setTxData
  4440  0186  0872               	movf	??_setTxData,w
  4441  0187  00A0               	movwf	_RF_Data
  4442                           
  4443                           ;RF_Control_B1.c: 223: RF_Data[1] = 0x02;
  4444  0188  3002               	movlw	2
  4445  0189  00F2               	movwf	??_setTxData
  4446  018A  0872               	movf	??_setTxData,w
  4447  018B  00A1               	movwf	_RF_Data+1
  4448                           
  4449                           ;RF_Control_B1.c: 224: RF_Data[2] = product->Data[2];
  4450  018C  087B               	movf	_product,w
  4451  018D  0086               	movwf	6
  4452  018E  0187               	clrf	7
  4453  018F  3F42               	moviw [2]fsr1
  4454  0190  00A2               	movwf	_RF_Data+2
  4455                           
  4456                           ;RF_Control_B1.c: 225: RF_Data[3] = product->Data[3];
  4457  0191  087B               	movf	_product,w
  4458  0192  0086               	movwf	6
  4459  0193  0187               	clrf	7
  4460  0194  3F43               	moviw [3]fsr1
  4461  0195  00A3               	movwf	_RF_Data+3
  4462                           
  4463                           ;RF_Control_B1.c: 226: RF_Data[4] = product->Data[4];
  4464  0196  087B               	movf	_product,w
  4465  0197  0086               	movwf	6
  4466  0198  0187               	clrf	7
  4467  0199  3F44               	moviw [4]fsr1
  4468  019A  00A4               	movwf	_RF_Data+4
  4469                           
  4470                           ;RF_Control_B1.c: 227: RF_Data[5] = product->Data[5];
  4471  019B  087B               	movf	_product,w
  4472  019C  0086               	movwf	6
  4473  019D  0187               	clrf	7
  4474  019E  3F45               	moviw [5]fsr1
  4475  019F  00A5               	movwf	_RF_Data+5
  4476                           
  4477                           ;RF_Control_B1.c: 228: RF_Data[6] = product->Data[6];
  4478  01A0  087B               	movf	_product,w
  4479  01A1  0086               	movwf	6
  4480  01A2  0187               	clrf	7
  4481  01A3  3F46               	moviw [6]fsr1
  4482  01A4  00A6               	movwf	_RF_Data+6
  4483                           
  4484                           ;RF_Control_B1.c: 229: RF_Data[7] = product->Data[7];
  4485  01A5  087B               	movf	_product,w
  4486  01A6  0086               	movwf	6
  4487  01A7  0187               	clrf	7
  4488  01A8  3F47               	moviw [7]fsr1
  4489  01A9  00A7               	movwf	_RF_Data+7
  4490                           
  4491                           ;RF_Control_B1.c: 230: RF_Data[8] = product->Data[8];
  4492  01AA  087B               	movf	_product,w
  4493  01AB  0086               	movwf	6
  4494  01AC  0187               	clrf	7
  4495  01AD  3F48               	moviw [8]fsr1
  4496  01AE  00A8               	movwf	_RF_Data+8
  4497                           
  4498                           ;RF_Control_B1.c: 231: RF_Data[9] = product->Data[9];
  4499  01AF  087B               	movf	_product,w
  4500  01B0  0086               	movwf	6
  4501  01B1  0187               	clrf	7
  4502  01B2  3F49               	moviw [9]fsr1
  4503  01B3  00A9               	movwf	_RF_Data+9
  4504                           
  4505                           ;RF_Control_B1.c: 232: RF_Data[10] = product->Data[10];
  4506  01B4  087B               	movf	_product,w
  4507  01B5  0086               	movwf	6
  4508  01B6  0187               	clrf	7
  4509  01B7  3F4A               	moviw [10]fsr1
  4510  01B8  00AA               	movwf	_RF_Data+10
  4511                           
  4512                           ;RF_Control_B1.c: 233: RF_Data[11] = product->Data[11];
  4513  01B9  087B               	movf	_product,w
  4514  01BA  0086               	movwf	6
  4515  01BB  0187               	clrf	7
  4516  01BC  3F4B               	moviw [11]fsr1
  4517  01BD  00AB               	movwf	_RF_Data+11
  4518                           
  4519                           ;RF_Control_B1.c: 234: RF_Data[12] = product->Data[12];
  4520  01BE  087B               	movf	_product,w
  4521  01BF  0086               	movwf	6
  4522  01C0  0187               	clrf	7
  4523  01C1  3F4C               	moviw [12]fsr1
  4524  01C2  00AC               	movwf	_RF_Data+12
  4525                           
  4526                           ;RF_Control_B1.c: 235: RF_Data[13] = product->Data[13];
  4527  01C3  087B               	movf	_product,w
  4528  01C4  0086               	movwf	6
  4529  01C5  0187               	clrf	7
  4530  01C6  3F4D               	moviw [13]fsr1
  4531  01C7  00AD               	movwf	_RF_Data+13
  4532                           
  4533                           ;RF_Control_B1.c: 236: RF_Data[14] = product->Data[14];
  4534  01C8  087B               	movf	_product,w
  4535  01C9  0086               	movwf	6
  4536  01CA  0187               	clrf	7
  4537  01CB  3F4E               	moviw [14]fsr1
  4538  01CC  00AE               	movwf	_RF_Data+14
  4539                           
  4540                           ;RF_Control_B1.c: 237: RF_Data[15] = product->Data[15];
  4541  01CD  087B               	movf	_product,w
  4542  01CE  0086               	movwf	6
  4543  01CF  0187               	clrf	7
  4544  01D0  3F4F               	moviw [15]fsr1
  4545  01D1  00AF               	movwf	_RF_Data+15
  4546                           
  4547                           ;RF_Control_B1.c: 238: RF_Data[16] = product->Data[16];
  4548  01D2  087B               	movf	_product,w
  4549  01D3  0086               	movwf	6
  4550  01D4  0187               	clrf	7
  4551  01D5  3F50               	moviw [16]fsr1
  4552  01D6  00B0               	movwf	_RF_Data+16
  4553                           
  4554                           ;RF_Control_B1.c: 239: RF_Data[17] = product->Data[17];
  4555  01D7  087B               	movf	_product,w
  4556  01D8  0086               	movwf	6
  4557  01D9  0187               	clrf	7
  4558  01DA  3F51               	moviw [17]fsr1
  4559  01DB  00B1               	movwf	_RF_Data+17
  4560                           
  4561                           ;RF_Control_B1.c: 240: RF_Data[18] = product->Data[18];
  4562  01DC  087B               	movf	_product,w
  4563  01DD  0086               	movwf	6
  4564  01DE  0187               	clrf	7
  4565  01DF  3F52               	moviw [18]fsr1
  4566  01E0  00B2               	movwf	_RF_Data+18
  4567                           
  4568                           ;RF_Control_B1.c: 241: RF_Data[19] = product->Data[19];
  4569  01E1  087B               	movf	_product,w
  4570  01E2  0086               	movwf	6
  4571  01E3  0187               	clrf	7
  4572  01E4  3F53               	moviw [19]fsr1
  4573  01E5  00B3               	movwf	_RF_Data+19
  4574                           
  4575                           ;RF_Control_B1.c: 242: RF_Data[20] = 0xaa;
  4576  01E6  30AA               	movlw	170
  4577  01E7  00F2               	movwf	??_setTxData
  4578  01E8  0872               	movf	??_setTxData,w
  4579  01E9  00B4               	movwf	_RF_Data+20
  4580  01EA  0008               	return
  4581  01EB                     __end_of_setTxData:	
  4582                           
  4583                           	psect	text15
  4584  065B                     __ptext15:	
  4585 ;; *************** function _getMain_All_Error_Status *****************
  4586 ;; Defined at:
  4587 ;;		line 373 in file "../src/Main_B1.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;  command         1    wreg     unsigned char 
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;  command         1    0[COMMON] unsigned char 
  4592 ;;  status          1    2[COMMON] unsigned char 
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  1    wreg      unsigned char 
  4595 ;; Registers used:
  4596 ;;		wreg, status,2
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4602 ;;      Params:         0       0       0       0       0       0       0       0
  4603 ;;      Locals:         1       0       0       0       0       0       0       0
  4604 ;;      Temps:          0       0       0       0       0       0       0       0
  4605 ;;      Totals:         1       0       0       0       0       0       0       0
  4606 ;;Total ram usage:        1 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    3
  4609 ;; This function calls:
  4610 ;;		Nothing
  4611 ;; This function is called by:
  4612 ;;		_setRF_Main
  4613 ;;		_getRxData
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           
  4618                           ;psect for function _getMain_All_Error_Status
  4619  065B                     _getMain_All_Error_Status:	
  4620                           
  4621                           ;Main_B1.c: 374: char status = 0;
  4622                           
  4623                           ;incstack = 0
  4624                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2]
  4625  065B  01F2               	clrf	getMain_All_Error_Status@status
  4626                           
  4627                           ;Main_B1.c: 410: return status;
  4628  065C  0872               	movf	getMain_All_Error_Status@status,w
  4629  065D  0008               	return
  4630  065E                     __end_of_getMain_All_Error_Status:	
  4631                           
  4632                           	psect	text16
  4633  02C4                     __ptext16:	
  4634 ;; *************** function _CC2500_TxData *****************
  4635 ;; Defined at:
  4636 ;;		line 32 in file "../src/CC2500_B1.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;		None
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  loop_e          1    7[COMMON] unsigned char 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;		None               void
  4643 ;; Registers used:
  4644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4650 ;;      Params:         0       0       0       0       0       0       0       0
  4651 ;;      Locals:         1       0       0       0       0       0       0       0
  4652 ;;      Temps:          1       0       0       0       0       0       0       0
  4653 ;;      Totals:         2       0       0       0       0       0       0       0
  4654 ;;Total ram usage:        2 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    5
  4657 ;; This function calls:
  4658 ;;		_CC2500_WriteByte
  4659 ;;		_CC2500_WriteCommand
  4660 ;;		_Timeout_Counter
  4661 ;;		_set_TimeoutCleared
  4662 ;; This function is called by:
  4663 ;;		_setRF_Main
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           
  4668                           ;psect for function _CC2500_TxData
  4669  02C4                     _CC2500_TxData:	
  4670                           
  4671                           ;CC2500_B1.c: 33: unsigned char loop_e;
  4672                           ;CC2500_B1.c: 35: RC0 = 0;
  4673                           
  4674                           ;incstack = 0
  4675                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4676  02C4  0020               	movlb	0	; select bank0
  4677  02C5  100E               	bcf	14,0	;volatile
  4678                           
  4679                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  4680  02C6  307F               	movlw	127
  4681  02C7  00F6               	movwf	??_CC2500_TxData
  4682  02C8  0876               	movf	??_CC2500_TxData,w
  4683  02C9  00E1               	movwf	_SPI0Buffer
  4684                           
  4685                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  4686  02CA  2ACE               	goto	l3417
  4687  02CB                     l3415:	
  4688                           
  4689                           ;CC2500_B1.c: 38: Timeout_Counter();
  4690  02CB  3185  2564  3182   	fcall	_Timeout_Counter
  4691  02CE                     l3417:	
  4692  02CE  0020               	movlb	0	; select bank0
  4693  02CF  1E8E               	btfss	14,5	;volatile
  4694  02D0  2AD3               	goto	l3421
  4695  02D1  1D4A               	btfss	_myMain+12,2
  4696  02D2  2ACB               	goto	l3415
  4697  02D3                     l3421:	
  4698                           
  4699                           ;CC2500_B1.c: 39: };
  4700                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  4701  02D3  3186  2640  3182   	fcall	_set_TimeoutCleared
  4702                           
  4703                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  4704  02D6  3185  258D  3182   	fcall	_CC2500_WriteByte
  4705                           
  4706                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  4707  02D9  0020               	movlb	0	; select bank0
  4708  02DA  086D               	movf	_Tx_Length,w
  4709  02DB  00F6               	movwf	??_CC2500_TxData
  4710  02DC  0876               	movf	??_CC2500_TxData,w
  4711  02DD  00E1               	movwf	_SPI0Buffer
  4712                           
  4713                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  4714  02DE  3185  258D  3182   	fcall	_CC2500_WriteByte
  4715                           
  4716                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  4717  02E1  01F7               	clrf	CC2500_TxData@loop_e
  4718  02E2                     l3435:	
  4719  02E2  0020               	movlb	0	; select bank0
  4720  02E3  086D               	movf	_Tx_Length,w
  4721  02E4  0277               	subwf	CC2500_TxData@loop_e,w
  4722  02E5  1803               	btfsc	3,0
  4723  02E6  2AF8               	goto	l134
  4724                           
  4725                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  4726  02E7  0877               	movf	CC2500_TxData@loop_e,w
  4727  02E8  3E20               	addlw	_RF_Data& (0+255)
  4728  02E9  0086               	movwf	6
  4729  02EA  0187               	clrf	7
  4730  02EB  0801               	movf	1,w
  4731  02EC  00F6               	movwf	??_CC2500_TxData
  4732  02ED  0876               	movf	??_CC2500_TxData,w
  4733  02EE  0020               	movlb	0	; select bank0
  4734  02EF  00E1               	movwf	_SPI0Buffer
  4735                           
  4736                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  4737  02F0  3185  258D  3182   	fcall	_CC2500_WriteByte
  4738  02F3  3001               	movlw	1
  4739  02F4  00F6               	movwf	??_CC2500_TxData
  4740  02F5  0876               	movf	??_CC2500_TxData,w
  4741  02F6  07F7               	addwf	CC2500_TxData@loop_e,f
  4742  02F7  2AE2               	goto	l3435
  4743  02F8                     l134:	
  4744                           
  4745                           ;CC2500_B1.c: 48: }
  4746                           ;CC2500_B1.c: 49: RC0 = 1;
  4747  02F8  140E               	bsf	14,0	;volatile
  4748                           
  4749                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  4750  02F9  3035               	movlw	53
  4751  02FA  3185  2520  3182   	fcall	_CC2500_WriteCommand
  4752                           
  4753                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  4754  02FD  2B01               	goto	l3441
  4755  02FE                     l3439:	
  4756                           
  4757                           ;CC2500_B1.c: 52: Timeout_Counter();
  4758  02FE  3185  2564  3182   	fcall	_Timeout_Counter
  4759  0301                     l3441:	
  4760  0301  0020               	movlb	0	; select bank0
  4761  0302  188E               	btfsc	14,1	;volatile
  4762  0303  2B06               	goto	l3445
  4763  0304  1D4A               	btfss	_myMain+12,2
  4764  0305  2AFE               	goto	l3439
  4765  0306                     l3445:	
  4766                           
  4767                           ;CC2500_B1.c: 53: };
  4768                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  4769  0306  3186  2640  3182   	fcall	_set_TimeoutCleared
  4770                           
  4771                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  4772  0309  2B0D               	goto	l3449
  4773  030A                     l3447:	
  4774                           
  4775                           ;CC2500_B1.c: 57: Timeout_Counter();
  4776  030A  3185  2564  3182   	fcall	_Timeout_Counter
  4777  030D                     l3449:	
  4778  030D  0020               	movlb	0	; select bank0
  4779  030E  1C8E               	btfss	14,1	;volatile
  4780  030F  2B12               	goto	l3453
  4781  0310  1D4A               	btfss	_myMain+12,2
  4782  0311  2B0A               	goto	l3447
  4783  0312                     l3453:	
  4784                           
  4785                           ;CC2500_B1.c: 58: };
  4786                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  4787  0312  3186  2640  3182   	fcall	_set_TimeoutCleared
  4788                           
  4789                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  4790  0315  3036               	movlw	54
  4791  0316  3185  2520  3182   	fcall	_CC2500_WriteCommand
  4792                           
  4793                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  4794  0319  303B               	movlw	59
  4795  031A  3185  2520         	fcall	_CC2500_WriteCommand
  4796                           
  4797                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  4798  031C  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  4799  031D  0008               	return
  4800  031E                     __end_of_CC2500_TxData:	
  4801                           
  4802                           	psect	text17
  4803  0266                     __ptext17:	
  4804 ;; *************** function _CC2500_RxData *****************
  4805 ;; Defined at:
  4806 ;;		line 70 in file "../src/CC2500_B1.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;		None
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  loop_f          1    7[COMMON] unsigned char 
  4811 ;; Return value:  Size  Location     Type
  4812 ;;		None               void
  4813 ;; Registers used:
  4814 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/0
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4820 ;;      Params:         0       0       0       0       0       0       0       0
  4821 ;;      Locals:         1       0       0       0       0       0       0       0
  4822 ;;      Temps:          1       0       0       0       0       0       0       0
  4823 ;;      Totals:         2       0       0       0       0       0       0       0
  4824 ;;Total ram usage:        2 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; Hardware stack levels required when called:    5
  4827 ;; This function calls:
  4828 ;;		_CC2500_ReadByte
  4829 ;;		_CC2500_ReadStatus
  4830 ;;		_CC2500_WriteByte
  4831 ;;		_Timeout_Counter
  4832 ;;		_set_TimeoutCleared
  4833 ;; This function is called by:
  4834 ;;		_setRF_Main
  4835 ;; This function uses a non-reentrant model
  4836 ;;
  4837                           
  4838                           
  4839                           ;psect for function _CC2500_RxData
  4840  0266                     _CC2500_RxData:	
  4841                           
  4842                           ;CC2500_B1.c: 71: unsigned char loop_f;
  4843                           ;CC2500_B1.c: 75: if (RC1 == 1)
  4844                           
  4845                           ;incstack = 0
  4846                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4847  0266  0020               	movlb	0	; select bank0
  4848  0267  188E               	btfsc	14,1	;volatile
  4849  0268  2A6D               	goto	l3467
  4850  0269  2A75               	goto	l3473
  4851  026A                     l3465:	
  4852                           ;CC2500_B1.c: 76: {
  4853                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  4854                           
  4855                           
  4856                           ;CC2500_B1.c: 78: Timeout_Counter();
  4857  026A  3185  2564  3182   	fcall	_Timeout_Counter
  4858  026D                     l3467:	
  4859  026D  0020               	movlb	0	; select bank0
  4860  026E  1C8E               	btfss	14,1	;volatile
  4861  026F  2A72               	goto	l3471
  4862  0270  1D4A               	btfss	_myMain+12,2
  4863  0271  2A6A               	goto	l3465
  4864  0272                     l3471:	
  4865                           
  4866                           ;CC2500_B1.c: 79: };
  4867                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  4868  0272  3186  2640  3182   	fcall	_set_TimeoutCleared
  4869  0275                     l3473:	
  4870                           
  4871                           ;CC2500_B1.c: 81: }
  4872                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  4873  0275  303B               	movlw	59
  4874  0276  3184  2489  3182   	fcall	_CC2500_ReadStatus
  4875                           
  4876                           ;CC2500_B1.c: 85: if (s_data != 0) {
  4877  0279  0020               	movlb	0	; select bank0
  4878  027A  0865               	movf	_s_data,w
  4879  027B  1903               	btfsc	3,2
  4880  027C  0008               	return
  4881                           
  4882                           ;CC2500_B1.c: 86: RC0 = 0;
  4883  027D  100E               	bcf	14,0	;volatile
  4884                           
  4885                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  4886  027E  30FF               	movlw	255
  4887  027F  00F6               	movwf	??_CC2500_RxData
  4888  0280  0876               	movf	??_CC2500_RxData,w
  4889  0281  00E1               	movwf	_SPI0Buffer
  4890                           
  4891                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  4892  0282  2A86               	goto	l3483
  4893  0283                     l3481:	
  4894                           
  4895                           ;CC2500_B1.c: 89: Timeout_Counter();
  4896  0283  3185  2564  3182   	fcall	_Timeout_Counter
  4897  0286                     l3483:	
  4898  0286  0020               	movlb	0	; select bank0
  4899  0287  1E8E               	btfss	14,5	;volatile
  4900  0288  2A8B               	goto	l3487
  4901  0289  1D4A               	btfss	_myMain+12,2
  4902  028A  2A83               	goto	l3481
  4903  028B                     l3487:	
  4904                           
  4905                           ;CC2500_B1.c: 90: };
  4906                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  4907  028B  3186  2640  3182   	fcall	_set_TimeoutCleared
  4908                           
  4909                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  4910  028E  3185  258D  3182   	fcall	_CC2500_WriteByte
  4911                           
  4912                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  4913  0291  3185  2538  3182   	fcall	_CC2500_ReadByte
  4914                           
  4915                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  4916  0294  0020               	movlb	0	; select bank0
  4917  0295  0861               	movf	_SPI0Buffer,w
  4918  0296  00F6               	movwf	??_CC2500_RxData
  4919  0297  0876               	movf	??_CC2500_RxData,w
  4920  0298  00E0               	movwf	_Rx_Length
  4921                           
  4922                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  4923  0299  01F7               	clrf	CC2500_RxData@loop_f
  4924  029A                     l3503:	
  4925  029A  0860               	movf	_Rx_Length,w
  4926  029B  0277               	subwf	CC2500_RxData@loop_f,w
  4927  029C  1803               	btfsc	3,0
  4928  029D  2AAF               	goto	l3505
  4929                           
  4930                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  4931  029E  3185  2538  3182   	fcall	_CC2500_ReadByte
  4932                           
  4933                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  4934  02A1  0020               	movlb	0	; select bank0
  4935  02A2  0861               	movf	_SPI0Buffer,w
  4936  02A3  00F6               	movwf	??_CC2500_RxData
  4937  02A4  0877               	movf	CC2500_RxData@loop_f,w
  4938  02A5  3E20               	addlw	_RF_Data& (0+255)
  4939  02A6  0086               	movwf	6
  4940  02A7  0187               	clrf	7
  4941  02A8  0876               	movf	??_CC2500_RxData,w
  4942  02A9  0081               	movwf	1
  4943  02AA  3001               	movlw	1
  4944  02AB  00F6               	movwf	??_CC2500_RxData
  4945  02AC  0876               	movf	??_CC2500_RxData,w
  4946  02AD  07F7               	addwf	CC2500_RxData@loop_f,f
  4947  02AE  2A9A               	goto	l3503
  4948  02AF                     l3505:	
  4949                           
  4950                           ;CC2500_B1.c: 99: }
  4951                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  4952  02AF  3185  2538  3182   	fcall	_CC2500_ReadByte
  4953                           
  4954                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  4955  02B2  0020               	movlb	0	; select bank0
  4956  02B3  0861               	movf	_SPI0Buffer,w
  4957  02B4  00F6               	movwf	??_CC2500_RxData
  4958  02B5  0876               	movf	??_CC2500_RxData,w
  4959  02B6  00DF               	movwf	_RSSI
  4960                           
  4961                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  4962  02B7  3185  2538         	fcall	_CC2500_ReadByte
  4963                           
  4964                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  4965  02B9  0020               	movlb	0	; select bank0
  4966  02BA  0861               	movf	_SPI0Buffer,w
  4967  02BB  00F6               	movwf	??_CC2500_RxData
  4968  02BC  0876               	movf	??_CC2500_RxData,w
  4969  02BD  00DE               	movwf	_CRC
  4970                           
  4971                           ;CC2500_B1.c: 104: RC0 = 1;
  4972  02BE  140E               	bsf	14,0	;volatile
  4973                           
  4974                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  4975  02BF  1BDE               	btfsc	_CRC,7
  4976                           
  4977                           ;CC2500_B1.c: 106: Receive_OK = 1;
  4978  02C0  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  4979                           
  4980                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  4981  02C1  11CD               	bcf	_RF1,3
  4982                           
  4983                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  4984  02C2  14CD               	bsf	_RF1,1
  4985  02C3  0008               	return
  4986  02C4                     __end_of_CC2500_RxData:	
  4987                           
  4988                           	psect	text18
  4989  0489                     __ptext18:	
  4990 ;; *************** function _CC2500_ReadStatus *****************
  4991 ;; Defined at:
  4992 ;;		line 301 in file "../src/CC2500_B1.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;  status_addr     1    wreg     unsigned char 
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;  status_addr     1    5[COMMON] unsigned char 
  4997 ;; Return value:  Size  Location     Type
  4998 ;;		None               void
  4999 ;; Registers used:
  5000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5001 ;; Tracked objects:
  5002 ;;		On entry : 0/0
  5003 ;;		On exit  : 0/0
  5004 ;;		Unchanged: 0/0
  5005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5006 ;;      Params:         0       0       0       0       0       0       0       0
  5007 ;;      Locals:         1       0       0       0       0       0       0       0
  5008 ;;      Temps:          1       0       0       0       0       0       0       0
  5009 ;;      Totals:         2       0       0       0       0       0       0       0
  5010 ;;Total ram usage:        2 bytes
  5011 ;; Hardware stack levels used:    1
  5012 ;; Hardware stack levels required when called:    4
  5013 ;; This function calls:
  5014 ;;		_CC2500_ReadByte
  5015 ;;		_CC2500_WriteByte
  5016 ;;		_Timeout_Counter
  5017 ;;		_set_TimeoutCleared
  5018 ;; This function is called by:
  5019 ;;		_CC2500_RxData
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           
  5024                           ;psect for function _CC2500_ReadStatus
  5025  0489                     _CC2500_ReadStatus:	
  5026                           
  5027                           ;incstack = 0
  5028                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5029                           ;CC2500_ReadStatus@status_addr stored from wreg
  5030  0489  00F5               	movwf	CC2500_ReadStatus@status_addr
  5031                           
  5032                           ;CC2500_B1.c: 302: RC0 = 0;
  5033  048A  0020               	movlb	0	; select bank0
  5034  048B  100E               	bcf	14,0	;volatile
  5035                           
  5036                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  5037  048C  0875               	movf	CC2500_ReadStatus@status_addr,w
  5038  048D  3EC0               	addlw	192
  5039  048E  00F4               	movwf	??_CC2500_ReadStatus
  5040  048F  0874               	movf	??_CC2500_ReadStatus,w
  5041  0490  00E1               	movwf	_SPI0Buffer
  5042                           
  5043                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  5044  0491  2C95               	goto	l3373
  5045  0492                     l3371:	
  5046                           
  5047                           ;CC2500_B1.c: 306: Timeout_Counter();
  5048  0492  3185  2564  3184   	fcall	_Timeout_Counter
  5049  0495                     l3373:	
  5050  0495  0020               	movlb	0	; select bank0
  5051  0496  1E8E               	btfss	14,5	;volatile
  5052  0497  2C9A               	goto	l3377
  5053  0498  1D4A               	btfss	_myMain+12,2
  5054  0499  2C92               	goto	l3371
  5055  049A                     l3377:	
  5056                           
  5057                           ;CC2500_B1.c: 307: };
  5058                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  5059  049A  3186  2640  3184   	fcall	_set_TimeoutCleared
  5060                           
  5061                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  5062  049D  3185  258D  3184   	fcall	_CC2500_WriteByte
  5063                           
  5064                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  5065  04A0  3185  2538         	fcall	_CC2500_ReadByte
  5066                           
  5067                           ;CC2500_B1.c: 312: RC0 = 1;
  5068  04A2  0020               	movlb	0	; select bank0
  5069  04A3  140E               	bsf	14,0	;volatile
  5070                           
  5071                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  5072  04A4  0861               	movf	_SPI0Buffer,w
  5073  04A5  00F4               	movwf	??_CC2500_ReadStatus
  5074  04A6  0874               	movf	??_CC2500_ReadStatus,w
  5075  04A7  00E5               	movwf	_s_data
  5076  04A8  0008               	return
  5077  04A9                     __end_of_CC2500_ReadStatus:	
  5078                           
  5079                           	psect	text19
  5080  0538                     __ptext19:	
  5081 ;; *************** function _CC2500_ReadByte *****************
  5082 ;; Defined at:
  5083 ;;		line 235 in file "../src/CC2500_B1.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;		None
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  loop_b          1    3[COMMON] unsigned char 
  5088 ;; Return value:  Size  Location     Type
  5089 ;;		None               void
  5090 ;; Registers used:
  5091 ;;		wreg, status,2, status,0
  5092 ;; Tracked objects:
  5093 ;;		On entry : 0/0
  5094 ;;		On exit  : 0/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5097 ;;      Params:         0       0       0       0       0       0       0       0
  5098 ;;      Locals:         1       0       0       0       0       0       0       0
  5099 ;;      Temps:          1       0       0       0       0       0       0       0
  5100 ;;      Totals:         2       0       0       0       0       0       0       0
  5101 ;;Total ram usage:        2 bytes
  5102 ;; Hardware stack levels used:    1
  5103 ;; Hardware stack levels required when called:    3
  5104 ;; This function calls:
  5105 ;;		Nothing
  5106 ;; This function is called by:
  5107 ;;		_CC2500_RxData
  5108 ;;		_CC2500_ReadStatus
  5109 ;;		_CC2500_ReadREG
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           
  5114                           ;psect for function _CC2500_ReadByte
  5115  0538                     _CC2500_ReadByte:	
  5116                           
  5117                           ;CC2500_B1.c: 236: unsigned char loop_b;
  5118                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  5119                           
  5120                           ;incstack = 0
  5121                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  5122  0538  01F3               	clrf	CC2500_ReadByte@loop_b
  5123  0539                     L1:	
  5124  0539  3008               	movlw	8
  5125  053A  0273               	subwf	CC2500_ReadByte@loop_b,w
  5126  053B  1803               	btfsc	3,0
  5127  053C  0008               	return
  5128                           
  5129                           ;CC2500_B1.c: 238: RC3 = 1;
  5130  053D  0020               	movlb	0	; select bank0
  5131  053E  158E               	bsf	14,3	;volatile
  5132                           
  5133                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  5134  053F  1003               	clrc
  5135  0540  0DE1               	rlf	_SPI0Buffer,f
  5136                           
  5137                           ;CC2500_B1.c: 240: if (RC5 == 1)
  5138  0541  1E8E               	btfss	14,5	;volatile
  5139  0542  2D45               	goto	l3301
  5140                           
  5141                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  5142  0543  1461               	bsf	_SPI0Buffer,0
  5143  0544  2D49               	goto	l3303
  5144  0545                     l3301:	
  5145                           
  5146                           ;CC2500_B1.c: 242: else
  5147                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  5148  0545  30FE               	movlw	254
  5149  0546  00F2               	movwf	??_CC2500_ReadByte
  5150  0547  0872               	movf	??_CC2500_ReadByte,w
  5151  0548  05E1               	andwf	_SPI0Buffer,f
  5152  0549                     l3303:	
  5153                           
  5154                           ;CC2500_B1.c: 244: RC3 = 0;
  5155  0549  118E               	bcf	14,3	;volatile
  5156  054A  3001               	movlw	1
  5157  054B  00F2               	movwf	??_CC2500_ReadByte
  5158  054C  0872               	movf	??_CC2500_ReadByte,w
  5159  054D  07F3               	addwf	CC2500_ReadByte@loop_b,f
  5160  054E  2D39               	goto	L1
  5161  054F                     __end_of_CC2500_ReadByte:	
  5162                           
  5163                           	psect	text20
  5164  065E                     __ptext20:	
  5165 ;; *************** function _RF_Initialization *****************
  5166 ;; Defined at:
  5167 ;;		line 9 in file "../src/RF_Control_B1.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;		None
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;		None
  5172 ;; Return value:  Size  Location     Type
  5173 ;;		None               void
  5174 ;; Registers used:
  5175 ;;		wreg, status,2, status,0, pclath, cstack
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5181 ;;      Params:         0       0       0       0       0       0       0       0
  5182 ;;      Locals:         0       0       0       0       0       0       0       0
  5183 ;;      Temps:          0       0       0       0       0       0       0       0
  5184 ;;      Totals:         0       0       0       0       0       0       0       0
  5185 ;;Total ram usage:        0 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    4
  5188 ;; This function calls:
  5189 ;;		_setRF_Initialization
  5190 ;; This function is called by:
  5191 ;;		_main
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           
  5196                           ;psect for function _RF_Initialization
  5197  065E                     _RF_Initialization:	
  5198                           
  5199                           ;RF_Control_B1.c: 11: setRF_Initialization();
  5200                           
  5201                           ;incstack = 0
  5202                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5203  065E  3186  2612         	fcall	_setRF_Initialization
  5204  0660  0008               	return
  5205  0661                     __end_of_RF_Initialization:	
  5206                           
  5207                           	psect	text21
  5208  0612                     __ptext21:	
  5209 ;; *************** function _setRF_Initialization *****************
  5210 ;; Defined at:
  5211 ;;		line 43 in file "../src/RF_Control_B1.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;		None
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;		None
  5216 ;; Return value:  Size  Location     Type
  5217 ;;		None               void
  5218 ;; Registers used:
  5219 ;;		wreg
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5225 ;;      Params:         0       0       0       0       0       0       0       0
  5226 ;;      Locals:         0       0       0       0       0       0       0       0
  5227 ;;      Temps:          1       0       0       0       0       0       0       0
  5228 ;;      Totals:         1       0       0       0       0       0       0       0
  5229 ;;Total ram usage:        1 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    3
  5232 ;; This function calls:
  5233 ;;		Nothing
  5234 ;; This function is called by:
  5235 ;;		_RF_Initialization
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           
  5240                           ;psect for function _setRF_Initialization
  5241  0612                     _setRF_Initialization:	
  5242                           
  5243                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  5244                           
  5245                           ;incstack = 0
  5246                           ; Regs used in _setRF_Initialization: [wreg]
  5247  0612  3015               	movlw	21
  5248  0613  00F2               	movwf	??_setRF_Initialization
  5249  0614  0872               	movf	??_setRF_Initialization,w
  5250  0615  0020               	movlb	0	; select bank0
  5251  0616  00ED               	movwf	_Tx_Length
  5252                           
  5253                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  5254  0617  300A               	movlw	10
  5255  0618  00D4               	movwf	_RF1+7
  5256  0619  3000               	movlw	0
  5257  061A  00D5               	movwf	_RF1+8
  5258  061B  0008               	return
  5259  061C                     __end_of_setRF_Initialization:	
  5260                           
  5261                           	psect	text22
  5262  05EF                     __ptext22:	
  5263 ;; *************** function _Mcu_Initialization *****************
  5264 ;; Defined at:
  5265 ;;		line 30 in file "../src/MCU_B1.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;		None
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;		None
  5270 ;; Return value:  Size  Location     Type
  5271 ;;		None               void
  5272 ;; Registers used:
  5273 ;;		wreg, status,2, status,0, pclath, cstack
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5279 ;;      Params:         0       0       0       0       0       0       0       0
  5280 ;;      Locals:         0       0       0       0       0       0       0       0
  5281 ;;      Temps:          0       0       0       0       0       0       0       0
  5282 ;;      Totals:         0       0       0       0       0       0       0       0
  5283 ;;Total ram usage:        0 bytes
  5284 ;; Hardware stack levels used:    1
  5285 ;; Hardware stack levels required when called:    4
  5286 ;; This function calls:
  5287 ;;		_Fosc_Set
  5288 ;;		_IO_Set
  5289 ;;		_TMR1_Set
  5290 ;;		_UART_Set
  5291 ;; This function is called by:
  5292 ;;		_main
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           
  5297                           ;psect for function _Mcu_Initialization
  5298  05EF                     _Mcu_Initialization:	
  5299                           
  5300                           ;MCU_B1.c: 32: Fosc_Set();
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5304  05EF  3186  2645  3185   	fcall	_Fosc_Set
  5305                           
  5306                           ;MCU_B1.c: 34: IO_Set();
  5307  05F2  3185  25A1  3185   	fcall	_IO_Set
  5308                           
  5309                           ;MCU_B1.c: 36: ;;
  5310                           ;MCU_B1.c: 38: TMR1_Set();
  5311  05F5  3185  25FB  3185   	fcall	_TMR1_Set
  5312                           
  5313                           ;MCU_B1.c: 40: ;;
  5314                           ;MCU_B1.c: 42: ;;
  5315                           ;MCU_B1.c: 44: ;;
  5316                           ;MCU_B1.c: 46: ;;
  5317                           ;MCU_B1.c: 48: ;;
  5318                           ;MCU_B1.c: 50: UART_Set();
  5319  05F8  3185  2579         	fcall	_UART_Set
  5320  05FA  0008               	return
  5321  05FB                     __end_of_Mcu_Initialization:	
  5322                           
  5323                           	psect	text23
  5324  0579                     __ptext23:	
  5325 ;; *************** function _UART_Set *****************
  5326 ;; Defined at:
  5327 ;;		line 719 in file "../src/MCU_B1.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;		None
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;		None
  5332 ;; Return value:  Size  Location     Type
  5333 ;;		None               void
  5334 ;; Registers used:
  5335 ;;		wreg, status,2
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5341 ;;      Params:         0       0       0       0       0       0       0       0
  5342 ;;      Locals:         0       0       0       0       0       0       0       0
  5343 ;;      Temps:          0       0       0       0       0       0       0       0
  5344 ;;      Totals:         0       0       0       0       0       0       0       0
  5345 ;;Total ram usage:        0 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; Hardware stack levels required when called:    3
  5348 ;; This function calls:
  5349 ;;		Nothing
  5350 ;; This function is called by:
  5351 ;;		_Mcu_Initialization
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355                           
  5356                           ;psect for function _UART_Set
  5357  0579                     _UART_Set:	
  5358                           
  5359                           ;MCU_B1.c: 721: TRISC7 = 1;
  5360                           
  5361                           ;incstack = 0
  5362                           ; Regs used in _UART_Set: [wreg+status,2]
  5363  0579  0021               	movlb	1	; select bank1
  5364  057A  178E               	bsf	14,7	;volatile
  5365                           
  5366                           ;MCU_B1.c: 722: TRISC6 = 1;
  5367  057B  170E               	bsf	14,6	;volatile
  5368                           
  5369                           ;MCU_B1.c: 723: SPBRG = ((int)(16000000L/(16UL * 19200) -1));
  5370  057C  3033               	movlw	51
  5371  057D  0023               	movlb	3	; select bank3
  5372  057E  009B               	movwf	27	;volatile
  5373                           
  5374                           ;MCU_B1.c: 725: SPBRGH = 0;
  5375  057F  019C               	clrf	28	;volatile
  5376                           
  5377                           ;MCU_B1.c: 726: BRG16 = 0;
  5378  0580  119F               	bcf	31,3	;volatile
  5379                           
  5380                           ;MCU_B1.c: 728: RCSTA = (0 | 0x90);
  5381  0581  3090               	movlw	144
  5382  0582  009D               	movwf	29	;volatile
  5383                           
  5384                           ;MCU_B1.c: 729: TXSTA = (0x4 | 0 | 0x20);
  5385  0583  3024               	movlw	36
  5386  0584  009E               	movwf	30	;volatile
  5387                           
  5388                           ;MCU_B1.c: 730: TX9 = 0;
  5389  0585  131E               	bcf	30,6	;volatile
  5390                           
  5391                           ;MCU_B1.c: 731: RX9 = 0;
  5392  0586  131D               	bcf	29,6	;volatile
  5393                           
  5394                           ;MCU_B1.c: 732: TXIE = 0;
  5395  0587  0021               	movlb	1	; select bank1
  5396  0588  1211               	bcf	17,4	;volatile
  5397                           
  5398                           ;MCU_B1.c: 733: RCIE = 1;
  5399  0589  1691               	bsf	17,5	;volatile
  5400                           
  5401                           ;MCU_B1.c: 734: PEIE = 1;
  5402  058A  170B               	bsf	11,6	;volatile
  5403                           
  5404                           ;MCU_B1.c: 735: GIE = 1;
  5405  058B  178B               	bsf	11,7	;volatile
  5406  058C  0008               	return
  5407  058D                     __end_of_UART_Set:	
  5408                           
  5409                           	psect	text24
  5410  05FB                     __ptext24:	
  5411 ;; *************** function _TMR1_Set *****************
  5412 ;; Defined at:
  5413 ;;		line 199 in file "../src/MCU_B1.c"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;		None
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;		None
  5418 ;; Return value:  Size  Location     Type
  5419 ;;		None               void
  5420 ;; Registers used:
  5421 ;;		wreg
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5427 ;;      Params:         0       0       0       0       0       0       0       0
  5428 ;;      Locals:         0       0       0       0       0       0       0       0
  5429 ;;      Temps:          0       0       0       0       0       0       0       0
  5430 ;;      Totals:         0       0       0       0       0       0       0       0
  5431 ;;Total ram usage:        0 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    3
  5434 ;; This function calls:
  5435 ;;		Nothing
  5436 ;; This function is called by:
  5437 ;;		_Mcu_Initialization
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           
  5442                           ;psect for function _TMR1_Set
  5443  05FB                     _TMR1_Set:	
  5444                           
  5445                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  5446                           
  5447                           ;incstack = 0
  5448                           ; Regs used in _TMR1_Set: [wreg]
  5449  05FB  3041               	movlw	65
  5450  05FC  0020               	movlb	0	; select bank0
  5451  05FD  0098               	movwf	24	;volatile
  5452                           
  5453                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  5454  05FE  30FA               	movlw	250
  5455  05FF  0097               	movwf	23	;volatile
  5456                           
  5457                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  5458  0600  3038               	movlw	56
  5459  0601  0096               	movwf	22	;volatile
  5460                           
  5461                           ;MCU_B1.c: 203: TMR1IE = 1;
  5462  0602  0021               	movlb	1	; select bank1
  5463  0603  1411               	bsf	17,0	;volatile
  5464                           
  5465                           ;MCU_B1.c: 204: PEIE = 1;
  5466  0604  170B               	bsf	11,6	;volatile
  5467                           
  5468                           ;MCU_B1.c: 205: GIE = 1;
  5469  0605  178B               	bsf	11,7	;volatile
  5470  0606  0008               	return
  5471  0607                     __end_of_TMR1_Set:	
  5472                           
  5473                           	psect	text25
  5474  05A1                     __ptext25:	
  5475 ;; *************** function _IO_Set *****************
  5476 ;; Defined at:
  5477 ;;		line 60 in file "../src/MCU_B1.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;		None
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;		None
  5482 ;; Return value:  Size  Location     Type
  5483 ;;		None               void
  5484 ;; Registers used:
  5485 ;;		wreg, status,2
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5491 ;;      Params:         0       0       0       0       0       0       0       0
  5492 ;;      Locals:         0       0       0       0       0       0       0       0
  5493 ;;      Temps:          0       0       0       0       0       0       0       0
  5494 ;;      Totals:         0       0       0       0       0       0       0       0
  5495 ;;Total ram usage:        0 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    3
  5498 ;; This function calls:
  5499 ;;		Nothing
  5500 ;; This function is called by:
  5501 ;;		_Mcu_Initialization
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           
  5506                           ;psect for function _IO_Set
  5507  05A1                     _IO_Set:	
  5508                           
  5509                           ;MCU_B1.c: 73: TRISA = 0b00000000;;
  5510                           
  5511                           ;incstack = 0
  5512                           ; Regs used in _IO_Set: [wreg+status,2]
  5513  05A1  0021               	movlb	1	; select bank1
  5514  05A2  018C               	clrf	12	;volatile
  5515                           
  5516                           ;MCU_B1.c: 74: TRISB = 0b00000000;;
  5517  05A3  018D               	clrf	13	;volatile
  5518                           
  5519                           ;MCU_B1.c: 75: TRISC = 0b11100110;;
  5520  05A4  30E6               	movlw	230
  5521  05A5  008E               	movwf	14	;volatile
  5522                           
  5523                           ;MCU_B1.c: 76: LATA = 0b00000000;;
  5524  05A6  0022               	movlb	2	; select bank2
  5525  05A7  018C               	clrf	12	;volatile
  5526                           
  5527                           ;MCU_B1.c: 77: LATB = 0b00000000;;
  5528  05A8  018D               	clrf	13	;volatile
  5529                           
  5530                           ;MCU_B1.c: 78: LATC = 0b00000000;;
  5531  05A9  018E               	clrf	14	;volatile
  5532                           
  5533                           ;MCU_B1.c: 79: ANSELA = 0b00000000;;
  5534  05AA  0023               	movlb	3	; select bank3
  5535  05AB  018C               	clrf	12	;volatile
  5536                           
  5537                           ;MCU_B1.c: 80: ANSELB = 0b00000000;;
  5538  05AC  018D               	clrf	13	;volatile
  5539                           
  5540                           ;MCU_B1.c: 81: ANSELC = 0b00000000;;
  5541  05AD  018E               	clrf	14	;volatile
  5542                           
  5543                           ;MCU_B1.c: 82: PORTA = 0b00000000;;
  5544  05AE  0020               	movlb	0	; select bank0
  5545  05AF  018C               	clrf	12	;volatile
  5546                           
  5547                           ;MCU_B1.c: 83: PORTB = 0b00000000;;
  5548  05B0  018D               	clrf	13	;volatile
  5549                           
  5550                           ;MCU_B1.c: 84: PORTC = 0b11100110;;
  5551  05B1  30E6               	movlw	230
  5552  05B2  008E               	movwf	14	;volatile
  5553  05B3  0008               	return
  5554  05B4                     __end_of_IO_Set:	
  5555                           
  5556                           	psect	text26
  5557  0645                     __ptext26:	
  5558 ;; *************** function _Fosc_Set *****************
  5559 ;; Defined at:
  5560 ;;		line 56 in file "../src/MCU_B1.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;		None
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;		None
  5565 ;; Return value:  Size  Location     Type
  5566 ;;		None               void
  5567 ;; Registers used:
  5568 ;;		wreg
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5574 ;;      Params:         0       0       0       0       0       0       0       0
  5575 ;;      Locals:         0       0       0       0       0       0       0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0       0
  5577 ;;      Totals:         0       0       0       0       0       0       0       0
  5578 ;;Total ram usage:        0 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    3
  5581 ;; This function calls:
  5582 ;;		Nothing
  5583 ;; This function is called by:
  5584 ;;		_Mcu_Initialization
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           
  5589                           ;psect for function _Fosc_Set
  5590  0645                     _Fosc_Set:	
  5591                           
  5592                           ;MCU_B1.c: 57: OSCCON = 0x78;
  5593                           
  5594                           ;incstack = 0
  5595                           ; Regs used in _Fosc_Set: [wreg]
  5596  0645  3078               	movlw	120
  5597  0646  0021               	movlb	1	; select bank1
  5598  0647  0099               	movwf	25	;volatile
  5599  0648  0008               	return
  5600  0649                     __end_of_Fosc_Set:	
  5601                           
  5602                           	psect	text27
  5603  054F                     __ptext27:	
  5604 ;; *************** function _CC2500_PowerOnInitial *****************
  5605 ;; Defined at:
  5606 ;;		line 119 in file "../src/CC2500_B1.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;		None
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;		None
  5611 ;; Return value:  Size  Location     Type
  5612 ;;		None               void
  5613 ;; Registers used:
  5614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5620 ;;      Params:         0       0       0       0       0       0       0       0
  5621 ;;      Locals:         0       0       0       0       0       0       0       0
  5622 ;;      Temps:          0       0       0       0       0       0       0       0
  5623 ;;      Totals:         0       0       0       0       0       0       0       0
  5624 ;;Total ram usage:        0 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    6
  5627 ;; This function calls:
  5628 ;;		_CC2500_ClearRXFIFO
  5629 ;;		_CC2500_ClearTXFIFO
  5630 ;;		_CC2500_FrequencyCabr
  5631 ;;		_CC2500_InitPATable
  5632 ;;		_CC2500_InitSetREG
  5633 ;;		_CC2500_PowerRST
  5634 ;;		_CC2500_SIDLEMode
  5635 ;; This function is called by:
  5636 ;;		_main
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           
  5641                           ;psect for function _CC2500_PowerOnInitial
  5642  054F                     _CC2500_PowerOnInitial:	
  5643                           
  5644                           ;CC2500_B1.c: 120: CC2500_PowerRST();
  5645                           
  5646                           ;incstack = 0
  5647                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5648  054F  3183  23B6  3185   	fcall	_CC2500_PowerRST
  5649                           
  5650                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
  5651  0552  3183  23F7  3185   	fcall	_CC2500_InitSetREG
  5652                           
  5653                           ;CC2500_B1.c: 122: CC2500_InitPATable();
  5654  0555  3184  24E8  3185   	fcall	_CC2500_InitPATable
  5655                           
  5656                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
  5657  0558  3186  264D  3185   	fcall	_CC2500_ClearTXFIFO
  5658                           
  5659                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
  5660  055B  3186  2651  3185   	fcall	_CC2500_ClearRXFIFO
  5661                           
  5662                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
  5663  055E  3186  2607  3185   	fcall	_CC2500_FrequencyCabr
  5664                           
  5665                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
  5666  0561  3186  2649         	fcall	_CC2500_SIDLEMode
  5667  0563  0008               	return
  5668  0564                     __end_of_CC2500_PowerOnInitial:	
  5669                           
  5670                           	psect	text28
  5671  0649                     __ptext28:	
  5672 ;; *************** function _CC2500_SIDLEMode *****************
  5673 ;; Defined at:
  5674 ;;		line 209 in file "../src/CC2500_B1.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;		None
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;		None
  5679 ;; Return value:  Size  Location     Type
  5680 ;;		None               void
  5681 ;; Registers used:
  5682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5683 ;; Tracked objects:
  5684 ;;		On entry : 0/0
  5685 ;;		On exit  : 0/0
  5686 ;;		Unchanged: 0/0
  5687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5688 ;;      Params:         0       0       0       0       0       0       0       0
  5689 ;;      Locals:         0       0       0       0       0       0       0       0
  5690 ;;      Temps:          0       0       0       0       0       0       0       0
  5691 ;;      Totals:         0       0       0       0       0       0       0       0
  5692 ;;Total ram usage:        0 bytes
  5693 ;; Hardware stack levels used:    1
  5694 ;; Hardware stack levels required when called:    5
  5695 ;; This function calls:
  5696 ;;		_CC2500_WriteCommand
  5697 ;; This function is called by:
  5698 ;;		_CC2500_PowerOnInitial
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701                           
  5702                           
  5703                           ;psect for function _CC2500_SIDLEMode
  5704  0649                     _CC2500_SIDLEMode:	
  5705                           
  5706                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
  5707                           
  5708                           ;incstack = 0
  5709                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5710  0649  3036               	movlw	54
  5711  064A  3185  2520         	fcall	_CC2500_WriteCommand
  5712  064C  0008               	return
  5713  064D                     __end_of_CC2500_SIDLEMode:	
  5714                           
  5715                           	psect	text29
  5716  03B6                     __ptext29:	
  5717 ;; *************** function _CC2500_PowerRST *****************
  5718 ;; Defined at:
  5719 ;;		line 132 in file "../src/CC2500_B1.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;		None
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;		None
  5724 ;; Return value:  Size  Location     Type
  5725 ;;		None               void
  5726 ;; Registers used:
  5727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5733 ;;      Params:         0       0       0       0       0       0       0       0
  5734 ;;      Locals:         0       0       0       0       0       0       0       0
  5735 ;;      Temps:          1       0       0       0       0       0       0       0
  5736 ;;      Totals:         1       0       0       0       0       0       0       0
  5737 ;;Total ram usage:        1 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    4
  5740 ;; This function calls:
  5741 ;;		_CC2500_WriteByte
  5742 ;;		_DelayTime_1us
  5743 ;;		_Timeout_Counter
  5744 ;;		_set_TimeoutCleared
  5745 ;; This function is called by:
  5746 ;;		_CC2500_PowerOnInitial
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           
  5751                           ;psect for function _CC2500_PowerRST
  5752  03B6                     _CC2500_PowerRST:	
  5753                           
  5754                           ;CC2500_B1.c: 133: RC3 = 0;
  5755                           
  5756                           ;incstack = 0
  5757                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5758  03B6  0020               	movlb	0	; select bank0
  5759  03B7  118E               	bcf	14,3	;volatile
  5760                           
  5761                           ;CC2500_B1.c: 134: RC4 = 0;
  5762  03B8  120E               	bcf	14,4	;volatile
  5763                           
  5764                           ;CC2500_B1.c: 135: RC0 = 1;
  5765  03B9  140E               	bsf	14,0	;volatile
  5766                           
  5767                           ;CC2500_B1.c: 136: DelayTime_1us(10);
  5768  03BA  300A               	movlw	10
  5769  03BB  00F2               	movwf	DelayTime_1us@count
  5770  03BC  3000               	movlw	0
  5771  03BD  00F3               	movwf	DelayTime_1us@count+1
  5772  03BE  3184  2421  3183   	fcall	_DelayTime_1us
  5773                           
  5774                           ;CC2500_B1.c: 137: RC0 = 0;
  5775  03C1  0020               	movlb	0	; select bank0
  5776  03C2  100E               	bcf	14,0	;volatile
  5777                           
  5778                           ;CC2500_B1.c: 138: DelayTime_1us(10);
  5779  03C3  300A               	movlw	10
  5780  03C4  00F2               	movwf	DelayTime_1us@count
  5781  03C5  3000               	movlw	0
  5782  03C6  00F3               	movwf	DelayTime_1us@count+1
  5783  03C7  3184  2421  3183   	fcall	_DelayTime_1us
  5784                           
  5785                           ;CC2500_B1.c: 139: RC0 = 1;
  5786  03CA  0020               	movlb	0	; select bank0
  5787  03CB  140E               	bsf	14,0	;volatile
  5788                           
  5789                           ;CC2500_B1.c: 140: DelayTime_1us(40);
  5790  03CC  3028               	movlw	40
  5791  03CD  00F2               	movwf	DelayTime_1us@count
  5792  03CE  3000               	movlw	0
  5793  03CF  00F3               	movwf	DelayTime_1us@count+1
  5794  03D0  3184  2421  3183   	fcall	_DelayTime_1us
  5795                           
  5796                           ;CC2500_B1.c: 141: RC0 = 0;
  5797  03D3  0020               	movlb	0	; select bank0
  5798  03D4  100E               	bcf	14,0	;volatile
  5799                           
  5800                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
  5801  03D5  3030               	movlw	48
  5802  03D6  00F8               	movwf	??_CC2500_PowerRST
  5803  03D7  0878               	movf	??_CC2500_PowerRST,w
  5804  03D8  00E1               	movwf	_SPI0Buffer
  5805                           
  5806                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
  5807  03D9  2BDD               	goto	l3609
  5808  03DA                     l3607:	
  5809                           
  5810                           ;CC2500_B1.c: 144: Timeout_Counter();
  5811  03DA  3185  2564  3183   	fcall	_Timeout_Counter
  5812  03DD                     l3609:	
  5813  03DD  0020               	movlb	0	; select bank0
  5814  03DE  1E8E               	btfss	14,5	;volatile
  5815  03DF  2BE2               	goto	l3613
  5816  03E0  1D4A               	btfss	_myMain+12,2
  5817  03E1  2BDA               	goto	l3607
  5818  03E2                     l3613:	
  5819                           
  5820                           ;CC2500_B1.c: 145: };
  5821                           ;CC2500_B1.c: 146: set_TimeoutCleared();
  5822  03E2  3186  2640  3183   	fcall	_set_TimeoutCleared
  5823                           
  5824                           ;CC2500_B1.c: 147: CC2500_WriteByte();
  5825  03E5  3185  258D  3183   	fcall	_CC2500_WriteByte
  5826                           
  5827                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
  5828  03E8  2BEC               	goto	l3619
  5829  03E9                     l3617:	
  5830                           
  5831                           ;CC2500_B1.c: 149: Timeout_Counter();
  5832  03E9  3185  2564  3183   	fcall	_Timeout_Counter
  5833  03EC                     l3619:	
  5834  03EC  0020               	movlb	0	; select bank0
  5835  03ED  1E8E               	btfss	14,5	;volatile
  5836  03EE  2BF1               	goto	l3623
  5837  03EF  1D4A               	btfss	_myMain+12,2
  5838  03F0  2BE9               	goto	l3617
  5839  03F1                     l3623:	
  5840                           
  5841                           ;CC2500_B1.c: 150: };
  5842                           ;CC2500_B1.c: 151: set_TimeoutCleared();
  5843  03F1  3186  2640         	fcall	_set_TimeoutCleared
  5844                           
  5845                           ;CC2500_B1.c: 152: RC4 = 0;
  5846  03F3  0020               	movlb	0	; select bank0
  5847  03F4  120E               	bcf	14,4	;volatile
  5848                           
  5849                           ;CC2500_B1.c: 153: RC0 = 1;
  5850  03F5  140E               	bsf	14,0	;volatile
  5851  03F6  0008               	return
  5852  03F7                     __end_of_CC2500_PowerRST:	
  5853                           
  5854                           	psect	text30
  5855  03F7                     __ptext30:	
  5856 ;; *************** function _CC2500_InitSetREG *****************
  5857 ;; Defined at:
  5858 ;;		line 159 in file "../src/CC2500_B1.c"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;		None
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;  loop_c          1    2[BANK0 ] unsigned char 
  5863 ;;  temp2           1    1[BANK0 ] unsigned char 
  5864 ;;  temp1           1    0[BANK0 ] unsigned char 
  5865 ;; Return value:  Size  Location     Type
  5866 ;;		None               void
  5867 ;; Registers used:
  5868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5874 ;;      Params:         0       0       0       0       0       0       0       0
  5875 ;;      Locals:         0       3       0       0       0       0       0       0
  5876 ;;      Temps:          1       0       0       0       0       0       0       0
  5877 ;;      Totals:         1       3       0       0       0       0       0       0
  5878 ;;Total ram usage:        4 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; Hardware stack levels required when called:    5
  5881 ;; This function calls:
  5882 ;;		_CC2500_WriteREG
  5883 ;; This function is called by:
  5884 ;;		_CC2500_PowerOnInitial
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888                           
  5889                           ;psect for function _CC2500_InitSetREG
  5890  03F7                     _CC2500_InitSetREG:	
  5891                           
  5892                           ;CC2500_B1.c: 160: unsigned char loop_c;
  5893                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
  5894                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
  5895                           
  5896                           ;incstack = 0
  5897                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5898  03F7  0020               	movlb	0	; select bank0
  5899  03F8  01E8               	clrf	CC2500_InitSetREG@loop_c
  5900  03F9                     L2:	
  5901  03F9  302F               	movlw	47
  5902  03FA  0268               	subwf	CC2500_InitSetREG@loop_c,w
  5903  03FB  1803               	btfsc	3,0
  5904  03FC  0008               	return
  5905                           
  5906                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
  5907  03FD  0868               	movf	CC2500_InitSetREG@loop_c,w
  5908  03FE  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  5909  03FF  0084               	movwf	4
  5910  0400  3082               	movlw	high (_CC2500_registers_address| (0+32768))
  5911  0401  1803               	skipnc
  5912  0402  3E01               	addlw	1
  5913  0403  0085               	movwf	5
  5914  0404  0800               	movf	0,w	;code access
  5915  0405  00F7               	movwf	??_CC2500_InitSetREG
  5916  0406  0877               	movf	??_CC2500_InitSetREG,w
  5917  0407  00E6               	movwf	CC2500_InitSetREG@temp1
  5918                           
  5919                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
  5920  0408  0868               	movf	CC2500_InitSetREG@loop_c,w
  5921  0409  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  5922  040A  0084               	movwf	4
  5923  040B  3082               	movlw	high (_CC2500_rfSettings| (0+32768))
  5924  040C  1803               	skipnc
  5925  040D  3E01               	addlw	1
  5926  040E  0085               	movwf	5
  5927  040F  0800               	movf	0,w	;code access
  5928  0410  00F7               	movwf	??_CC2500_InitSetREG
  5929  0411  0877               	movf	??_CC2500_InitSetREG,w
  5930  0412  00E7               	movwf	CC2500_InitSetREG@temp2
  5931                           
  5932                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
  5933  0413  0867               	movf	CC2500_InitSetREG@temp2,w
  5934  0414  00F7               	movwf	??_CC2500_InitSetREG
  5935  0415  0877               	movf	??_CC2500_InitSetREG,w
  5936  0416  00F4               	movwf	CC2500_WriteREG@value
  5937  0417  0866               	movf	CC2500_InitSetREG@temp1,w
  5938  0418  3184  24A9  3183   	fcall	_CC2500_WriteREG
  5939  041B  3001               	movlw	1
  5940  041C  00F7               	movwf	??_CC2500_InitSetREG
  5941  041D  0877               	movf	??_CC2500_InitSetREG,w
  5942  041E  0020               	movlb	0	; select bank0
  5943  041F  07E8               	addwf	CC2500_InitSetREG@loop_c,f
  5944  0420  2BF9               	goto	L2
  5945  0421                     __end_of_CC2500_InitSetREG:	
  5946                           
  5947                           	psect	text31
  5948  04E8                     __ptext31:	
  5949 ;; *************** function _CC2500_InitPATable *****************
  5950 ;; Defined at:
  5951 ;;		line 174 in file "../src/CC2500_B1.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;		None
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  loop_d          1    9[COMMON] unsigned char 
  5956 ;;  temp            1    8[COMMON] unsigned char 
  5957 ;; Return value:  Size  Location     Type
  5958 ;;		None               void
  5959 ;; Registers used:
  5960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5961 ;; Tracked objects:
  5962 ;;		On entry : 0/0
  5963 ;;		On exit  : 0/0
  5964 ;;		Unchanged: 0/0
  5965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5966 ;;      Params:         0       0       0       0       0       0       0       0
  5967 ;;      Locals:         2       0       0       0       0       0       0       0
  5968 ;;      Temps:          1       0       0       0       0       0       0       0
  5969 ;;      Totals:         3       0       0       0       0       0       0       0
  5970 ;;Total ram usage:        3 bytes
  5971 ;; Hardware stack levels used:    1
  5972 ;; Hardware stack levels required when called:    5
  5973 ;; This function calls:
  5974 ;;		_CC2500_WriteREG
  5975 ;; This function is called by:
  5976 ;;		_CC2500_PowerOnInitial
  5977 ;; This function uses a non-reentrant model
  5978 ;;
  5979                           
  5980                           
  5981                           ;psect for function _CC2500_InitPATable
  5982  04E8                     _CC2500_InitPATable:	
  5983                           
  5984                           ;CC2500_B1.c: 175: unsigned char loop_d;
  5985                           ;CC2500_B1.c: 176: unsigned char temp;
  5986                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
  5987                           
  5988                           ;incstack = 0
  5989                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5990  04E8  01F9               	clrf	CC2500_InitPATable@loop_d
  5991  04E9                     L3:	
  5992  04E9  3008               	movlw	8
  5993  04EA  0279               	subwf	CC2500_InitPATable@loop_d,w
  5994  04EB  1803               	btfsc	3,0
  5995  04EC  0008               	return
  5996                           
  5997                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
  5998  04ED  0879               	movf	CC2500_InitPATable@loop_d,w
  5999  04EE  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  6000  04EF  0084               	movwf	4
  6001  04F0  3082               	movlw	high (_CC2500_patable_vaule| (0+32768))
  6002  04F1  1803               	skipnc
  6003  04F2  3E01               	addlw	1
  6004  04F3  0085               	movwf	5
  6005  04F4  0800               	movf	0,w	;code access
  6006  04F5  00F7               	movwf	??_CC2500_InitPATable
  6007  04F6  0877               	movf	??_CC2500_InitPATable,w
  6008  04F7  00F8               	movwf	CC2500_InitPATable@temp
  6009                           
  6010                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
  6011  04F8  0878               	movf	CC2500_InitPATable@temp,w
  6012  04F9  00F7               	movwf	??_CC2500_InitPATable
  6013  04FA  0877               	movf	??_CC2500_InitPATable,w
  6014  04FB  00F4               	movwf	CC2500_WriteREG@value
  6015  04FC  303E               	movlw	62
  6016  04FD  3184  24A9  3184   	fcall	_CC2500_WriteREG
  6017  0500  3001               	movlw	1
  6018  0501  00F7               	movwf	??_CC2500_InitPATable
  6019  0502  0877               	movf	??_CC2500_InitPATable,w
  6020  0503  07F9               	addwf	CC2500_InitPATable@loop_d,f
  6021  0504  2CE9               	goto	L3
  6022  0505                     __end_of_CC2500_InitPATable:	
  6023                           
  6024                           	psect	text32
  6025  04A9                     __ptext32:	
  6026 ;; *************** function _CC2500_WriteREG *****************
  6027 ;; Defined at:
  6028 ;;		line 251 in file "../src/CC2500_B1.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;  w_addr          1    wreg     unsigned char 
  6031 ;;  value           1    4[COMMON] unsigned char 
  6032 ;; Auto vars:     Size  Location     Type
  6033 ;;  w_addr          1    6[COMMON] unsigned char 
  6034 ;; Return value:  Size  Location     Type
  6035 ;;		None               void
  6036 ;; Registers used:
  6037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : 0/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6043 ;;      Params:         1       0       0       0       0       0       0       0
  6044 ;;      Locals:         1       0       0       0       0       0       0       0
  6045 ;;      Temps:          1       0       0       0       0       0       0       0
  6046 ;;      Totals:         3       0       0       0       0       0       0       0
  6047 ;;Total ram usage:        3 bytes
  6048 ;; Hardware stack levels used:    1
  6049 ;; Hardware stack levels required when called:    4
  6050 ;; This function calls:
  6051 ;;		_CC2500_WriteByte
  6052 ;;		_Timeout_Counter
  6053 ;;		_set_TimeoutCleared
  6054 ;; This function is called by:
  6055 ;;		_CC2500_InitSetREG
  6056 ;;		_CC2500_InitPATable
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060                           
  6061                           ;psect for function _CC2500_WriteREG
  6062  04A9                     _CC2500_WriteREG:	
  6063                           
  6064                           ;incstack = 0
  6065                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6066                           ;CC2500_WriteREG@w_addr stored from wreg
  6067  04A9  00F6               	movwf	CC2500_WriteREG@w_addr
  6068                           
  6069                           ;CC2500_B1.c: 252: RC0 = 0;
  6070  04AA  0020               	movlb	0	; select bank0
  6071  04AB  100E               	bcf	14,0	;volatile
  6072                           
  6073                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
  6074  04AC  0876               	movf	CC2500_WriteREG@w_addr,w
  6075  04AD  00F5               	movwf	??_CC2500_WriteREG
  6076  04AE  0875               	movf	??_CC2500_WriteREG,w
  6077  04AF  00E1               	movwf	_SPI0Buffer
  6078                           
  6079                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
  6080  04B0  2CB4               	goto	l3523
  6081  04B1                     l3521:	
  6082                           
  6083                           ;CC2500_B1.c: 255: Timeout_Counter();
  6084  04B1  3185  2564  3184   	fcall	_Timeout_Counter
  6085  04B4                     l3523:	
  6086  04B4  0020               	movlb	0	; select bank0
  6087  04B5  1E8E               	btfss	14,5	;volatile
  6088  04B6  2CB9               	goto	l3527
  6089  04B7  1D4A               	btfss	_myMain+12,2
  6090  04B8  2CB1               	goto	l3521
  6091  04B9                     l3527:	
  6092                           
  6093                           ;CC2500_B1.c: 256: };
  6094                           ;CC2500_B1.c: 257: set_TimeoutCleared();
  6095  04B9  3186  2640  3184   	fcall	_set_TimeoutCleared
  6096                           
  6097                           ;CC2500_B1.c: 259: CC2500_WriteByte();
  6098  04BC  3185  258D  3184   	fcall	_CC2500_WriteByte
  6099                           
  6100                           ;CC2500_B1.c: 260: SPI0Buffer = value;
  6101  04BF  0874               	movf	CC2500_WriteREG@value,w
  6102  04C0  00F5               	movwf	??_CC2500_WriteREG
  6103  04C1  0875               	movf	??_CC2500_WriteREG,w
  6104  04C2  0020               	movlb	0	; select bank0
  6105  04C3  00E1               	movwf	_SPI0Buffer
  6106                           
  6107                           ;CC2500_B1.c: 261: CC2500_WriteByte();
  6108  04C4  3185  258D         	fcall	_CC2500_WriteByte
  6109                           
  6110                           ;CC2500_B1.c: 262: RC0 = 1;
  6111  04C6  0020               	movlb	0	; select bank0
  6112  04C7  140E               	bsf	14,0	;volatile
  6113  04C8  0008               	return
  6114  04C9                     __end_of_CC2500_WriteREG:	
  6115                           
  6116                           	psect	text33
  6117  0607                     __ptext33:	
  6118 ;; *************** function _CC2500_FrequencyCabr *****************
  6119 ;; Defined at:
  6120 ;;		line 201 in file "../src/CC2500_B1.c"
  6121 ;; Parameters:    Size  Location     Type
  6122 ;;		None
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;		None
  6125 ;; Return value:  Size  Location     Type
  6126 ;;		None               void
  6127 ;; Registers used:
  6128 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6129 ;; Tracked objects:
  6130 ;;		On entry : 0/0
  6131 ;;		On exit  : 0/0
  6132 ;;		Unchanged: 0/0
  6133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6134 ;;      Params:         0       0       0       0       0       0       0       0
  6135 ;;      Locals:         0       0       0       0       0       0       0       0
  6136 ;;      Temps:          0       0       0       0       0       0       0       0
  6137 ;;      Totals:         0       0       0       0       0       0       0       0
  6138 ;;Total ram usage:        0 bytes
  6139 ;; Hardware stack levels used:    1
  6140 ;; Hardware stack levels required when called:    5
  6141 ;; This function calls:
  6142 ;;		_CC2500_WriteCommand
  6143 ;;		_DelayTime_1us
  6144 ;; This function is called by:
  6145 ;;		_CC2500_PowerOnInitial
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           
  6150                           ;psect for function _CC2500_FrequencyCabr
  6151  0607                     _CC2500_FrequencyCabr:	
  6152                           
  6153                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
  6154                           
  6155                           ;incstack = 0
  6156                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6157  0607  3033               	movlw	51
  6158  0608  3185  2520  3186   	fcall	_CC2500_WriteCommand
  6159                           
  6160                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
  6161  060B  30E8               	movlw	232
  6162  060C  00F2               	movwf	DelayTime_1us@count
  6163  060D  3003               	movlw	3
  6164  060E  00F3               	movwf	DelayTime_1us@count+1
  6165  060F  3184  2421         	fcall	_DelayTime_1us
  6166  0611  0008               	return
  6167  0612                     __end_of_CC2500_FrequencyCabr:	
  6168                           
  6169                           	psect	text34
  6170  0421                     __ptext34:	
  6171 ;; *************** function _DelayTime_1us *****************
  6172 ;; Defined at:
  6173 ;;		line 320 in file "../src/CC2500_B1.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;  count           2    2[COMMON] int 
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;  j               2    6[COMMON] unsigned int 
  6178 ;;  i               2    4[COMMON] unsigned int 
  6179 ;; Return value:  Size  Location     Type
  6180 ;;		None               void
  6181 ;; Registers used:
  6182 ;;		wreg, status,2
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6188 ;;      Params:         2       0       0       0       0       0       0       0
  6189 ;;      Locals:         4       0       0       0       0       0       0       0
  6190 ;;      Temps:          0       0       0       0       0       0       0       0
  6191 ;;      Totals:         6       0       0       0       0       0       0       0
  6192 ;;Total ram usage:        6 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    3
  6195 ;; This function calls:
  6196 ;;		Nothing
  6197 ;; This function is called by:
  6198 ;;		_CC2500_PowerRST
  6199 ;;		_CC2500_FrequencyCabr
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           
  6204                           ;psect for function _DelayTime_1us
  6205  0421                     _DelayTime_1us:	
  6206                           
  6207                           ;CC2500_B1.c: 321: unsigned int i, j;
  6208                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
  6209                           
  6210                           ;incstack = 0
  6211                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  6212  0421  3001               	movlw	1
  6213  0422  00F4               	movwf	DelayTime_1us@i
  6214  0423  3000               	movlw	0
  6215  0424  00F5               	movwf	DelayTime_1us@i+1
  6216  0425                     l251:	
  6217  0425  0873               	movf	DelayTime_1us@count+1,w
  6218  0426  0275               	subwf	DelayTime_1us@i+1,w
  6219  0427  1D03               	skipz
  6220  0428  2C2B               	goto	u1395
  6221  0429  0872               	movf	DelayTime_1us@count,w
  6222  042A  0274               	subwf	DelayTime_1us@i,w
  6223  042B                     u1395:	
  6224  042B  1803               	btfsc	3,0
  6225  042C  0008               	return
  6226                           
  6227                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
  6228  042D  01F6               	clrf	DelayTime_1us@j
  6229  042E  01F7               	clrf	DelayTime_1us@j+1
  6230  042F  3000               	movlw	0
  6231  0430  0277               	subwf	DelayTime_1us@j+1,w
  6232  0431  3002               	movlw	2
  6233  0432  1903               	skipnz
  6234  0433  0276               	subwf	DelayTime_1us@j,w
  6235  0434  1803               	btfsc	3,0
  6236  0435  2C41               	goto	l2737
  6237  0436                     l2735:	
  6238  0436  3001               	movlw	1
  6239  0437  07F6               	addwf	DelayTime_1us@j,f
  6240  0438  3000               	movlw	0
  6241  0439  3DF7               	addwfc	DelayTime_1us@j+1,f
  6242  043A  3000               	movlw	0
  6243  043B  0277               	subwf	DelayTime_1us@j+1,w
  6244  043C  3002               	movlw	2
  6245  043D  1903               	skipnz
  6246  043E  0276               	subwf	DelayTime_1us@j,w
  6247  043F  1C03               	skipc
  6248  0440  2C36               	goto	l2735
  6249  0441                     l2737:	
  6250  0441  3001               	movlw	1
  6251  0442  07F4               	addwf	DelayTime_1us@i,f
  6252  0443  3000               	movlw	0
  6253  0444  3DF5               	addwfc	DelayTime_1us@i+1,f
  6254  0445  2C25               	goto	l251
  6255  0446                     __end_of_DelayTime_1us:	
  6256                           
  6257                           	psect	text35
  6258  064D                     __ptext35:	
  6259 ;; *************** function _CC2500_ClearTXFIFO *****************
  6260 ;; Defined at:
  6261 ;;		line 187 in file "../src/CC2500_B1.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;		None
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;		None
  6266 ;; Return value:  Size  Location     Type
  6267 ;;		None               void
  6268 ;; Registers used:
  6269 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6275 ;;      Params:         0       0       0       0       0       0       0       0
  6276 ;;      Locals:         0       0       0       0       0       0       0       0
  6277 ;;      Temps:          0       0       0       0       0       0       0       0
  6278 ;;      Totals:         0       0       0       0       0       0       0       0
  6279 ;;Total ram usage:        0 bytes
  6280 ;; Hardware stack levels used:    1
  6281 ;; Hardware stack levels required when called:    5
  6282 ;; This function calls:
  6283 ;;		_CC2500_WriteCommand
  6284 ;; This function is called by:
  6285 ;;		_CC2500_PowerOnInitial
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           
  6290                           ;psect for function _CC2500_ClearTXFIFO
  6291  064D                     _CC2500_ClearTXFIFO:	
  6292                           
  6293                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
  6294                           
  6295                           ;incstack = 0
  6296                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6297  064D  303B               	movlw	59
  6298  064E  3185  2520         	fcall	_CC2500_WriteCommand
  6299  0650  0008               	return
  6300  0651                     __end_of_CC2500_ClearTXFIFO:	
  6301                           
  6302                           	psect	text36
  6303  0651                     __ptext36:	
  6304 ;; *************** function _CC2500_ClearRXFIFO *****************
  6305 ;; Defined at:
  6306 ;;		line 194 in file "../src/CC2500_B1.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;		None
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;		None
  6311 ;; Return value:  Size  Location     Type
  6312 ;;		None               void
  6313 ;; Registers used:
  6314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6315 ;; Tracked objects:
  6316 ;;		On entry : 0/0
  6317 ;;		On exit  : 0/0
  6318 ;;		Unchanged: 0/0
  6319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6320 ;;      Params:         0       0       0       0       0       0       0       0
  6321 ;;      Locals:         0       0       0       0       0       0       0       0
  6322 ;;      Temps:          0       0       0       0       0       0       0       0
  6323 ;;      Totals:         0       0       0       0       0       0       0       0
  6324 ;;Total ram usage:        0 bytes
  6325 ;; Hardware stack levels used:    1
  6326 ;; Hardware stack levels required when called:    5
  6327 ;; This function calls:
  6328 ;;		_CC2500_WriteCommand
  6329 ;; This function is called by:
  6330 ;;		_CC2500_PowerOnInitial
  6331 ;; This function uses a non-reentrant model
  6332 ;;
  6333                           
  6334                           
  6335                           ;psect for function _CC2500_ClearRXFIFO
  6336  0651                     _CC2500_ClearRXFIFO:	
  6337                           
  6338                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
  6339                           
  6340                           ;incstack = 0
  6341                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6342  0651  303A               	movlw	58
  6343  0652  3185  2520         	fcall	_CC2500_WriteCommand
  6344  0654  0008               	return
  6345  0655                     __end_of_CC2500_ClearRXFIFO:	
  6346                           
  6347                           	psect	text37
  6348  0520                     __ptext37:	
  6349 ;; *************** function _CC2500_WriteCommand *****************
  6350 ;; Defined at:
  6351 ;;		line 285 in file "../src/CC2500_B1.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;  command         1    wreg     unsigned char 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  command         1    5[COMMON] unsigned char 
  6356 ;; Return value:  Size  Location     Type
  6357 ;;		None               void
  6358 ;; Registers used:
  6359 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6365 ;;      Params:         0       0       0       0       0       0       0       0
  6366 ;;      Locals:         1       0       0       0       0       0       0       0
  6367 ;;      Temps:          1       0       0       0       0       0       0       0
  6368 ;;      Totals:         2       0       0       0       0       0       0       0
  6369 ;;Total ram usage:        2 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; Hardware stack levels required when called:    4
  6372 ;; This function calls:
  6373 ;;		_CC2500_WriteByte
  6374 ;;		_Timeout_Counter
  6375 ;;		_set_TimeoutCleared
  6376 ;; This function is called by:
  6377 ;;		_CC2500_TxData
  6378 ;;		_CC2500_ClearTXFIFO
  6379 ;;		_CC2500_ClearRXFIFO
  6380 ;;		_CC2500_FrequencyCabr
  6381 ;;		_CC2500_SIDLEMode
  6382 ;;		_setRF_Main
  6383 ;;		_RF_RxDisable
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           
  6388                           ;psect for function _CC2500_WriteCommand
  6389  0520                     _CC2500_WriteCommand:	
  6390                           
  6391                           ;incstack = 0
  6392                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6393                           ;CC2500_WriteCommand@command stored from wreg
  6394  0520  00F5               	movwf	CC2500_WriteCommand@command
  6395                           
  6396                           ;CC2500_B1.c: 286: RC0 = 0;
  6397  0521  0020               	movlb	0	; select bank0
  6398  0522  100E               	bcf	14,0	;volatile
  6399                           
  6400                           ;CC2500_B1.c: 287: SPI0Buffer = command;
  6401  0523  0875               	movf	CC2500_WriteCommand@command,w
  6402  0524  00F4               	movwf	??_CC2500_WriteCommand
  6403  0525  0874               	movf	??_CC2500_WriteCommand,w
  6404  0526  00E1               	movwf	_SPI0Buffer
  6405                           
  6406                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
  6407  0527  2D2B               	goto	l3357
  6408  0528                     l3355:	
  6409                           
  6410                           ;CC2500_B1.c: 290: Timeout_Counter();
  6411  0528  3185  2564  3185   	fcall	_Timeout_Counter
  6412  052B                     l3357:	
  6413  052B  0020               	movlb	0	; select bank0
  6414  052C  1E8E               	btfss	14,5	;volatile
  6415  052D  2D30               	goto	l3361
  6416  052E  1D4A               	btfss	_myMain+12,2
  6417  052F  2D28               	goto	l3355
  6418  0530                     l3361:	
  6419                           
  6420                           ;CC2500_B1.c: 291: };
  6421                           ;CC2500_B1.c: 292: set_TimeoutCleared();
  6422  0530  3186  2640  3185   	fcall	_set_TimeoutCleared
  6423                           
  6424                           ;CC2500_B1.c: 294: CC2500_WriteByte();
  6425  0533  3185  258D         	fcall	_CC2500_WriteByte
  6426                           
  6427                           ;CC2500_B1.c: 295: RC0 = 1;
  6428  0535  0020               	movlb	0	; select bank0
  6429  0536  140E               	bsf	14,0	;volatile
  6430  0537  0008               	return
  6431  0538                     __end_of_CC2500_WriteCommand:	
  6432                           
  6433                           	psect	text38
  6434  0640                     __ptext38:	
  6435 ;; *************** function _set_TimeoutCleared *****************
  6436 ;; Defined at:
  6437 ;;		line 280 in file "../src/Main_B1.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;		None
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;		None
  6442 ;; Return value:  Size  Location     Type
  6443 ;;		None               void
  6444 ;; Registers used:
  6445 ;;		status,2
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6451 ;;      Params:         0       0       0       0       0       0       0       0
  6452 ;;      Locals:         0       0       0       0       0       0       0       0
  6453 ;;      Temps:          0       0       0       0       0       0       0       0
  6454 ;;      Totals:         0       0       0       0       0       0       0       0
  6455 ;;Total ram usage:        0 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    3
  6458 ;; This function calls:
  6459 ;;		Nothing
  6460 ;; This function is called by:
  6461 ;;		_CC2500_TxData
  6462 ;;		_CC2500_RxData
  6463 ;;		_CC2500_PowerRST
  6464 ;;		_CC2500_WriteREG
  6465 ;;		_CC2500_WriteCommand
  6466 ;;		_CC2500_ReadStatus
  6467 ;;		_CC2500_ReadREG
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           
  6472                           ;psect for function _set_TimeoutCleared
  6473  0640                     _set_TimeoutCleared:	
  6474                           
  6475                           ;Main_B1.c: 281: myMain.Timeout = 0;
  6476                           
  6477                           ;incstack = 0
  6478                           ; Regs used in _set_TimeoutCleared: [status,2]
  6479  0640  0020               	movlb	0	; select bank0
  6480  0641  114A               	bcf	_myMain+12,2
  6481                           
  6482                           ;Main_B1.c: 282: myMain.Timeout_Counter = 0;
  6483  0642  01CB               	clrf	_myMain+13
  6484  0643  01CC               	clrf	_myMain+14
  6485  0644  0008               	return
  6486  0645                     __end_of_set_TimeoutCleared:	
  6487                           
  6488                           	psect	text39
  6489  0564                     __ptext39:	
  6490 ;; *************** function _Timeout_Counter *****************
  6491 ;; Defined at:
  6492 ;;		line 271 in file "../src/Main_B1.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;		None
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;		None
  6497 ;; Return value:  Size  Location     Type
  6498 ;;		None               void
  6499 ;; Registers used:
  6500 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6506 ;;      Params:         0       0       0       0       0       0       0       0
  6507 ;;      Locals:         0       0       0       0       0       0       0       0
  6508 ;;      Temps:          0       0       0       0       0       0       0       0
  6509 ;;      Totals:         0       0       0       0       0       0       0       0
  6510 ;;Total ram usage:        0 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    3
  6513 ;; This function calls:
  6514 ;;		Nothing
  6515 ;; This function is called by:
  6516 ;;		_CC2500_TxData
  6517 ;;		_CC2500_RxData
  6518 ;;		_CC2500_PowerRST
  6519 ;;		_CC2500_WriteREG
  6520 ;;		_CC2500_WriteCommand
  6521 ;;		_CC2500_ReadStatus
  6522 ;;		_CC2500_ReadREG
  6523 ;; This function uses a non-reentrant model
  6524 ;;
  6525                           
  6526                           
  6527                           ;psect for function _Timeout_Counter
  6528  0564                     _Timeout_Counter:	
  6529                           
  6530                           ;Main_B1.c: 272: myMain.Timeout_Counter++;
  6531                           
  6532                           ;incstack = 0
  6533                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6534  0564  3001               	movlw	1
  6535  0565  0020               	movlb	0	; select bank0
  6536  0566  07CB               	addwf	_myMain+13,f
  6537  0567  3000               	movlw	0
  6538  0568  3DCC               	addwfc	_myMain+14,f
  6539                           
  6540                           ;Main_B1.c: 273: if (myMain.Timeout_Counter == 10000) {
  6541  0569  300D               	movlw	13
  6542  056A  3E3E               	addlw	_myMain& (0+255)
  6543  056B  0086               	movwf	6
  6544  056C  0187               	clrf	7
  6545  056D  3F40               	moviw [0]fsr1
  6546  056E  3A10               	xorlw	16
  6547  056F  1D03               	skipz
  6548  0570  2D73               	goto	u2165
  6549  0571  3F41               	moviw [1]fsr1
  6550  0572  3A27               	xorlw	39
  6551  0573                     u2165:	
  6552  0573  1D03               	skipz
  6553  0574  0008               	return
  6554                           
  6555                           ;Main_B1.c: 274: myMain.Timeout_Counter = 0;
  6556  0575  01CB               	clrf	_myMain+13
  6557  0576  01CC               	clrf	_myMain+14
  6558                           
  6559                           ;Main_B1.c: 275: myMain.Timeout = 1;
  6560  0577  154A               	bsf	_myMain+12,2
  6561  0578  0008               	return
  6562  0579                     __end_of_Timeout_Counter:	
  6563                           
  6564                           	psect	text40
  6565  058D                     __ptext40:	
  6566 ;; *************** function _CC2500_WriteByte *****************
  6567 ;; Defined at:
  6568 ;;		line 219 in file "../src/CC2500_B1.c"
  6569 ;; Parameters:    Size  Location     Type
  6570 ;;		None
  6571 ;; Auto vars:     Size  Location     Type
  6572 ;;  loop_a          1    3[COMMON] unsigned char 
  6573 ;; Return value:  Size  Location     Type
  6574 ;;		None               void
  6575 ;; Registers used:
  6576 ;;		wreg, status,2, status,0
  6577 ;; Tracked objects:
  6578 ;;		On entry : 0/0
  6579 ;;		On exit  : 0/0
  6580 ;;		Unchanged: 0/0
  6581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6582 ;;      Params:         0       0       0       0       0       0       0       0
  6583 ;;      Locals:         1       0       0       0       0       0       0       0
  6584 ;;      Temps:          1       0       0       0       0       0       0       0
  6585 ;;      Totals:         2       0       0       0       0       0       0       0
  6586 ;;Total ram usage:        2 bytes
  6587 ;; Hardware stack levels used:    1
  6588 ;; Hardware stack levels required when called:    3
  6589 ;; This function calls:
  6590 ;;		Nothing
  6591 ;; This function is called by:
  6592 ;;		_CC2500_TxData
  6593 ;;		_CC2500_RxData
  6594 ;;		_CC2500_PowerRST
  6595 ;;		_CC2500_WriteREG
  6596 ;;		_CC2500_WriteCommand
  6597 ;;		_CC2500_ReadStatus
  6598 ;;		_CC2500_ReadREG
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           
  6603                           ;psect for function _CC2500_WriteByte
  6604  058D                     _CC2500_WriteByte:	
  6605                           
  6606                           ;CC2500_B1.c: 220: unsigned char loop_a;
  6607                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
  6608                           
  6609                           ;incstack = 0
  6610                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  6611  058D  01F3               	clrf	CC2500_WriteByte@loop_a
  6612  058E                     L4:	
  6613  058E  3008               	movlw	8
  6614  058F  0273               	subwf	CC2500_WriteByte@loop_a,w
  6615  0590  1803               	btfsc	3,0
  6616  0591  0008               	return
  6617                           
  6618                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
  6619  0592  0020               	movlb	0	; select bank0
  6620  0593  1FE1               	btfss	_SPI0Buffer,7
  6621  0594  2D97               	goto	l207
  6622                           
  6623                           ;CC2500_B1.c: 223: RC4 = 1;
  6624  0595  160E               	bsf	14,4	;volatile
  6625  0596  2D98               	goto	l208
  6626  0597                     l207:	
  6627                           
  6628                           ;CC2500_B1.c: 224: else
  6629                           ;CC2500_B1.c: 225: RC4 = 0;
  6630  0597  120E               	bcf	14,4	;volatile
  6631  0598                     l208:	
  6632                           
  6633                           ;CC2500_B1.c: 226: RC3 = 1;
  6634  0598  158E               	bsf	14,3	;volatile
  6635                           
  6636                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
  6637  0599  1003               	clrc
  6638  059A  0DE1               	rlf	_SPI0Buffer,f
  6639                           
  6640                           ;CC2500_B1.c: 228: RC3 = 0;
  6641  059B  118E               	bcf	14,3	;volatile
  6642  059C  3001               	movlw	1
  6643  059D  00F2               	movwf	??_CC2500_WriteByte
  6644  059E  0872               	movf	??_CC2500_WriteByte,w
  6645  059F  07F3               	addwf	CC2500_WriteByte@loop_a,f
  6646  05A0  2D8E               	goto	L4
  6647  05A1                     __end_of_CC2500_WriteByte:	
  6648                           
  6649                           	psect	intentry
  6650  0004                     __pintentry:	
  6651 ;; *************** function _ISR *****************
  6652 ;; Defined at:
  6653 ;;		line 107 in file "../src/MCU_B1.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;		None
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;		None
  6658 ;; Return value:  Size  Location     Type
  6659 ;;		None               void
  6660 ;; Registers used:
  6661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6667 ;;      Params:         0       0       0       0       0       0       0       0
  6668 ;;      Locals:         0       0       0       0       0       0       0       0
  6669 ;;      Temps:          1       0       0       0       0       0       0       0
  6670 ;;      Totals:         1       0       0       0       0       0       0       0
  6671 ;;Total ram usage:        1 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; Hardware stack levels required when called:    2
  6674 ;; This function calls:
  6675 ;;		_TMR1_ISR
  6676 ;;		_UART_ISR
  6677 ;; This function is called by:
  6678 ;;		Interrupt level 1
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682  0004                     _ISR:	
  6683                           
  6684                           ;incstack = 0
  6685                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6686  0004  147E               	bsf	126,0	;set compiler interrupt flag
  6687  0005  3180               	pagesel	$
  6688  0006  0020               	movlb	0	; select bank0
  6689  0007  087F               	movf	127,w
  6690  0008  00F1               	movwf	??_ISR
  6691                           
  6692                           ;MCU_B1.c: 109: ;;
  6693                           ;MCU_B1.c: 111: ;;
  6694                           ;MCU_B1.c: 113: TMR1_ISR();
  6695  0009  3184  24C9  3180   	fcall	_TMR1_ISR
  6696                           
  6697                           ;MCU_B1.c: 115: ;;
  6698                           ;MCU_B1.c: 117: ;;
  6699                           ;MCU_B1.c: 119: UART_ISR();
  6700  000C  3185  25C5         	fcall	_UART_ISR
  6701  000E  0871               	movf	??_ISR,w
  6702  000F  0020               	movlb	0	; select bank0
  6703  0010  00FF               	movwf	127
  6704  0011  107E               	bcf	126,0	;clear compiler interrupt flag
  6705  0012  0009               	retfie
  6706  0013                     __end_of_ISR:	
  6707                           
  6708                           	psect	text42
  6709  05C5                     __ptext42:	
  6710 ;; *************** function _UART_ISR *****************
  6711 ;; Defined at:
  6712 ;;		line 739 in file "../src/MCU_B1.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;		None
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;  i               1    0        unsigned char 
  6717 ;; Return value:  Size  Location     Type
  6718 ;;		None               void
  6719 ;; Registers used:
  6720 ;;		wreg, pclath, cstack
  6721 ;; Tracked objects:
  6722 ;;		On entry : 0/0
  6723 ;;		On exit  : 0/0
  6724 ;;		Unchanged: 0/0
  6725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6726 ;;      Params:         0       0       0       0       0       0       0       0
  6727 ;;      Locals:         0       0       0       0       0       0       0       0
  6728 ;;      Temps:          1       0       0       0       0       0       0       0
  6729 ;;      Totals:         1       0       0       0       0       0       0       0
  6730 ;;Total ram usage:        1 bytes
  6731 ;; Hardware stack levels used:    1
  6732 ;; Hardware stack levels required when called:    1
  6733 ;; This function calls:
  6734 ;;		_getch
  6735 ;; This function is called by:
  6736 ;;		_ISR
  6737 ;; This function uses a non-reentrant model
  6738 ;;
  6739                           
  6740                           
  6741                           ;psect for function _UART_ISR
  6742  05C5                     _UART_ISR:	
  6743                           
  6744                           ;MCU_B1.c: 740: char i;
  6745                           ;MCU_B1.c: 741: if (RCIE == 1 && RCIF == 1) {
  6746                           
  6747                           ;incstack = 0
  6748                           ; Regs used in _UART_ISR: [wreg+pclath+cstack]
  6749  05C5  0021               	movlb	1	; select bank1
  6750  05C6  1E91               	btfss	17,5	;volatile
  6751  05C7  0008               	return
  6752  05C8  0020               	movlb	0	; select bank0
  6753  05C9  1E91               	btfss	17,5	;volatile
  6754  05CA  0008               	return
  6755                           
  6756                           ;MCU_B1.c: 746: UART.Data[1] = getch();
  6757  05CB  3186  2630         	fcall	_getch
  6758  05CD  00F0               	movwf	??_UART_ISR
  6759  05CE  0870               	movf	??_UART_ISR,w
  6760  05CF  0021               	movlb	1	; select bank1
  6761  05D0  00C1               	movwf	(_UART^(0+128)+1)
  6762                           
  6763                           ;MCU_B1.c: 747: UART.RxGO = 1;
  6764  05D1  14CB               	bsf	(_UART^(0+128)+11),1
  6765                           
  6766                           ;MCU_B1.c: 748: RCIF = 0;
  6767  05D2  0020               	movlb	0	; select bank0
  6768  05D3  1291               	bcf	17,5	;volatile
  6769  05D4  0008               	return
  6770  05D5                     __end_of_UART_ISR:	
  6771                           
  6772                           	psect	text43
  6773  0630                     __ptext43:	
  6774 ;; *************** function _getch *****************
  6775 ;; Defined at:
  6776 ;;		line 842 in file "../src/MCU_B1.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;		None
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;		None
  6781 ;; Return value:  Size  Location     Type
  6782 ;;                  1    wreg      unsigned char 
  6783 ;; Registers used:
  6784 ;;		wreg
  6785 ;; Tracked objects:
  6786 ;;		On entry : 0/0
  6787 ;;		On exit  : 0/0
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6790 ;;      Params:         0       0       0       0       0       0       0       0
  6791 ;;      Locals:         0       0       0       0       0       0       0       0
  6792 ;;      Temps:          0       0       0       0       0       0       0       0
  6793 ;;      Totals:         0       0       0       0       0       0       0       0
  6794 ;;Total ram usage:        0 bytes
  6795 ;; Hardware stack levels used:    1
  6796 ;; This function calls:
  6797 ;;		Nothing
  6798 ;; This function is called by:
  6799 ;;		_UART_ISR
  6800 ;;		_getche
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           
  6805                           ;psect for function _getch
  6806  0630                     _getch:	
  6807  0630                     i1l604:	
  6808                           ;MCU_B1.c: 845: continue;
  6809                           
  6810                           ;MCU_B1.c: 844: while (!RCIF)
  6811                           
  6812                           ;incstack = 0
  6813                           ; Regs used in _getch: [wreg]
  6814                           
  6815  0630  0020               	movlb	0	; select bank0
  6816  0631  1E91               	btfss	17,5	;volatile
  6817  0632  2E30               	goto	i1l604
  6818                           
  6819                           ;MCU_B1.c: 846: return RCREG;
  6820  0633  0023               	movlb	3	; select bank3
  6821  0634  0819               	movf	25,w	;volatile
  6822  0635  0008               	return
  6823  0636                     __end_of_getch:	
  6824                           
  6825                           	psect	text44
  6826  04C9                     __ptext44:	
  6827 ;; *************** function _TMR1_ISR *****************
  6828 ;; Defined at:
  6829 ;;		line 209 in file "../src/MCU_B1.c"
  6830 ;; Parameters:    Size  Location     Type
  6831 ;;		None
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;		None
  6834 ;; Return value:  Size  Location     Type
  6835 ;;		None               void
  6836 ;; Registers used:
  6837 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6838 ;; Tracked objects:
  6839 ;;		On entry : 0/0
  6840 ;;		On exit  : 0/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6843 ;;      Params:         0       0       0       0       0       0       0       0
  6844 ;;      Locals:         0       0       0       0       0       0       0       0
  6845 ;;      Temps:          0       0       0       0       0       0       0       0
  6846 ;;      Totals:         0       0       0       0       0       0       0       0
  6847 ;;Total ram usage:        0 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; This function calls:
  6850 ;;		Nothing
  6851 ;; This function is called by:
  6852 ;;		_ISR
  6853 ;; This function uses a non-reentrant model
  6854 ;;
  6855                           
  6856                           
  6857                           ;psect for function _TMR1_ISR
  6858  04C9                     _TMR1_ISR:	
  6859                           
  6860                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  6861                           
  6862                           ;incstack = 0
  6863                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  6864  04C9  0021               	movlb	1	; select bank1
  6865  04CA  1C11               	btfss	17,0	;volatile
  6866  04CB  0008               	return
  6867  04CC  0020               	movlb	0	; select bank0
  6868  04CD  1C11               	btfss	17,0	;volatile
  6869  04CE  0008               	return
  6870                           
  6871                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
  6872  04CF  30FA               	movlw	250
  6873  04D0  0097               	movwf	23	;volatile
  6874                           
  6875                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
  6876  04D1  3038               	movlw	56
  6877  04D2  0096               	movwf	22	;volatile
  6878                           
  6879                           ;MCU_B1.c: 214: TMR1IF = 0;
  6880  04D3  1011               	bcf	17,0	;volatile
  6881                           
  6882                           ;MCU_B1.c: 234: Timer1.Count++;
  6883  04D4  3001               	movlw	1
  6884  04D5  07DA               	addwf	_Timer1+1,f
  6885  04D6  3000               	movlw	0
  6886  04D7  3DDB               	addwfc	_Timer1+2,f
  6887                           
  6888                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
  6889  04D8  3001               	movlw	1
  6890  04D9  3E59               	addlw	_Timer1& (0+255)
  6891  04DA  0086               	movwf	6
  6892  04DB  0187               	clrf	7
  6893  04DC  3F40               	moviw [0]fsr1
  6894  04DD  3A64               	xorlw	100
  6895  04DE  1D03               	skipz
  6896  04DF  2CE2               	goto	u197_25
  6897  04E0  3F41               	moviw [1]fsr1
  6898  04E1  3A00               	xorlw	0
  6899  04E2                     u197_25:	
  6900  04E2  1D03               	skipz
  6901  04E3  0008               	return
  6902                           
  6903                           ;MCU_B1.c: 236: {
  6904                           ;MCU_B1.c: 237: Timer1.Count = 0;
  6905  04E4  01DA               	clrf	_Timer1+1
  6906  04E5  01DB               	clrf	_Timer1+2
  6907                           
  6908                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
  6909  04E6  1459               	bsf	_Timer1,0
  6910  04E7  0008               	return
  6911  04E8                     __end_of_TMR1_ISR:	
  6912  007E                     btemp	set	126	;btemp
  6913  007E                     pic14e$flags	set	126
  6914  007E                     wtemp	set	126
  6915  007E                     wtemp0	set	126
  6916  0080                     wtemp1	set	128
  6917  0082                     wtemp2	set	130
  6918  0084                     wtemp3	set	132
  6919  0086                     wtemp4	set	134
  6920  0088                     wtemp5	set	136
  6921  007F                     wtemp6	set	127
  6922  007E                     ttemp	set	126
  6923  007E                     ttemp0	set	126
  6924  0081                     ttemp1	set	129
  6925  0084                     ttemp2	set	132
  6926  0087                     ttemp3	set	135
  6927  007F                     ttemp4	set	127
  6928  007E                     ltemp	set	126
  6929  007E                     ltemp0	set	126
  6930  0082                     ltemp1	set	130
  6931  0086                     ltemp2	set	134
  6932  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         82
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80      7      78
    BANK1            80      0      44
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK1[32]), 


Critical Paths under _main in COMMON

    _myUARTtoRF_Main->_setTxData
    _UART_Main->_UART_Receive
    _UART_Transmit->_putch
    _UART_Receive->_setTxData
    _RF_Main->_setRF_Main
    _setRF_Main->_CC2500_RxData
    _setRF_Main->_CC2500_TxData
    _getRxData->_getMain_All_Error_Status
    _getRxData->_setLog_Code
    _getRxData->_setTxData
    _setControl_Lights_Table->_setTxData
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in COMMON

    _ISR->_UART_ISR

Critical Paths under _main in BANK0

    _RF_Main->_setRF_Main
    _CC2500_PowerOnInitial->_CC2500_InitSetREG

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    2897
                                              3 BANK0      4     0      4
              _CC2500_PowerOnInitial
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
                          _UART_Main
              _myMain_Initialization
          _myUARTtoRF_Initialization
                    _myUARTtoRF_Main
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myUARTtoRF_Main                                      0     0      0       0
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myUARTtoRF_Initialization                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Main                                            0     0      0      22
                       _UART_Receive
                      _UART_Transmit
 ---------------------------------------------------------------------------------
 (2) _UART_Transmit                                        0     0      0      22
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Receive                                         2     2      0       0
                                              3 COMMON     1     1      0
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0     816
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0     816
                                              8 COMMON     1     1      0
                                              0 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
           _getMain_All_Error_Status
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0      68
                                              3 COMMON     2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0       0
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getMain_All_Error_Status                             2     2      0      34
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                           _UART_Set
 ---------------------------------------------------------------------------------
 (2) _UART_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2059
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     416
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     447
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                           _TMR1_ISR
                           _UART_ISR
 ---------------------------------------------------------------------------------
 (7) _UART_ISR                                             2     2      0       0
                                              0 COMMON     1     1      0
                              _getch
 ---------------------------------------------------------------------------------
 (8) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _Mcu_Initialization
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _UART_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getMain_All_Error_Status
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setTxData
         _setLog_Code
         _setTxData
   _UART_Main
     _UART_Receive
       _setTxData
     _UART_Transmit
       _putch
   _myMain_Initialization
   _myUARTtoRF_Initialization
   _myUARTtoRF_Main
     _setTxData
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR
   _UART_ISR
     _getch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      86       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      7      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      2C       8       55.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      86      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Nov 28 16:48:55 2014

           __end_of_CC2500_WriteREG 04C9                                 l134 02F8  
                               l207 0597                                 l208 0598  
                               l251 0425                                 l583 05E9  
                               l672 0455                                 l598 061D  
                               l688 035E                                 l964 00F7  
                               l973 007C                                 l974 0078  
                               l966 0042                                 l968 004C  
                               l978 00B3                                 _GIE 005F  
                               _CRC 005E                                 _RA0 0060  
                               _RA1 0061                                 _RA2 0062  
                               _RC0 0070                                 _RC1 0071  
                               _RC3 0073                                 _RC4 0074  
                               _RC5 0075                                 _RF1 004D  
                               _ISR 0004                                 _RX9 0CEE  
                               _TX9 0CF6            __end_of_CC2500_WriteByte 05A1  
                               wreg 0009                                ?_ISR 0070  
                              l1018 012E                                l1028 0178  
                              l1048 03B5                                l3301 0545  
                              l3303 0549                                l3135 0348  
                              l3401 0373                                l3145 035F  
                              l3129 0336                                l3403 0388  
                              l3421 02D3                                l3503 029A  
                              l3415 02CB                                l3361 0530  
                              l3521 04B1                                l3505 02AF  
                              l3441 0301                                l3417 02CE  
                              l3409 039A                                l3355 0528  
                              l3523 04B4                                l3371 0492  
                              l3435 02E2                                l3357 052B  
                              l3613 03E2                                l3373 0495  
                              l3453 0312                                l3445 0306  
                              l3701 0063                                l2735 0436  
                              l3527 04B9                                l3623 03F1  
                              l3607 03DA                                l3471 0272  
                              l3447 030A                                l3439 02FE  
                              l2737 0441                                l3617 03E9  
                              l3609 03DD                                l3377 049A  
                              l3481 0283                                l3465 026A  
                              l3473 0275                                l3449 030D  
                              l3561 0130                                l3713 0070  
                              l3619 03EC                                l3483 0286  
                              l3467 026D                                l3573 0147  
                              l3549 011D                                l3733 009A  
                              l3487 028B                                l3583 0164  
                              l3735 009C                                l3751 00C4  
                              l3763 00E5                                l3589 016E  
             _myMain_Initialization 05D5                                u2035 032F  
                              u2045 0344                                _LATA 010C  
                              _LATB 010D                                u2055 0356  
                              _LATC 010E                                u2075 036D  
                              u2165 0573                                u1395 042B  
                              _PEIE 005E                                u2925 00D5  
                              u2785 005D                                _RCIE 048D  
                              _RCIF 008D                                _UART 00C0  
                              _RSSI 005F                                _TXIE 048C  
                              _TXIF 008C                                _main 0446  
                   __end_of_RF_Main 065B                                fsr0h 0005  
                              fsr1h 0007                                fsr0l 0004  
                              indf0 0000                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
        ?_myUARTtoRF_Initialization 0070                                ltemp 007E  
     __size_of_setRF_Initialization 000A                                start 0013  
                              ttemp 007E                                wtemp 007E  
                             ??_ISR 0071                   ??_myUARTtoRF_Main 0073  
                             ?_main 0069                               _BRG16 0CFB  
                     __CFG_WDTE$OFF 0000                               _T1CON 0018  
                             i1l604 0630       __size_of_CC2500_FrequencyCabr 000B  
                             _RCREG 0199                               _RCSTA 019D  
                             _TMR1H 0017                               _TMR1L 0016  
                             _SPBRG 019B                               _PORTA 000C  
                             _PORTB 000D                               _PORTC 000E  
                             _TRISA 008C                               _TRISB 008D  
                             _TRISC 008E                               _TXREG 019A  
                             _TXSTA 019E             __end_of_Timeout_Counter 0579  
                     __CFG_WRT$BOOT 0000                    __end_of_UART_ISR 05D5  
                __size_of_UART_Main 000D                    __end_of_TMR1_ISR 04E8  
                  __end_of_UART_Set 058D        __size_of_CC2500_WriteCommand 0018  
                  __end_of_TMR1_Set 0607                               _getch 0630  
                             _putch 061C         __size_of_CC2500_ClearRXFIFO 0004  
       __size_of_CC2500_ClearTXFIFO 0004                 CC2500_RxData@loop_f 0077  
                    __pbitbssCOMMON 03D0                      __CFG_BOREN$OFF 0000  
                  ?_CC2500_ReadByte 0070                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   ?_CC2500_SIDLEMode 0070  
        __size_of_RF_Initialization 0003                  ??_CC2500_SIDLEMode 0076  
                   __initialization 0015                    ?_CC2500_PowerRST 0070  
                      __end_of_main 0469                    __end_of_Fosc_Set 0649  
                  ?_CC2500_WriteREG 0074                              ??_main 007A  
                      ?_setLog_Code 0070             _setControl_Lights_Table 0372  
                        _Receive_OK 03D0              ?_myMain_Initialization 0070  
                            ?_getch 0070                           ??_RF_Main 0079  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELB 018D                              _ANSELC 018E  
          _getMain_All_Error_Status 065B                              u197_25 04E2  
                            _OSCCON 0099                              _TMR1IE 0488  
                            _TMR1IF 0088                              _SPBRGH 019C  
                            _IO_Set 05A1                              _TRISC6 0476  
                            _TRISC7 0477                  DelayTime_1us@count 0072  
    __size_of_CC2500_PowerOnInitial 0015       __end_of_CC2500_PowerOnInitial 0564  
        __end_of_Mcu_Initialization 05FB                              _Timer1 0059  
                 __end_of_UART_Main 05EF                              _r_data 0064  
                            _s_data 0065                              _myMain 003E  
                  ?_Timeout_Counter 0070         __size_of_CC2500_InitPATable 001D  
               CC2500_TxData@loop_e 0077    __end_of_CC2500_registers_address 022F  
           __end_of__initialization 0031                       ?_my_MainTimer 0070  
             __end_of_UART_Transmit 0640                      __pcstackCOMMON 0070  
                      __pidataBANK1 0469                           ?_UART_ISR 0070  
                         ?_TMR1_ISR 0070                           ?_UART_Set 0070  
                     __end_of_getch 0636                           ?_TMR1_Set 0070  
         ??_setControl_Lights_Table 0073                       __end_of_putch 0624  
        __end_of_set_TimeoutCleared 0645                  __size_of_getRxData 007F  
                 ?_CC2500_WriteByte 0070                  ??_CC2500_WriteByte 0072  
                           ??_getch 0070                             ??_putch 0072  
                        __pbssBANK0 0020                          __pbssBANK1 00C0  
                         ?_Fosc_Set 0070                             ?_IO_Set 0070  
                    ??_my_MainTimer 0072                     __CFG_VCAPEN$OFF 0000  
                   _myUARTtoRF_Main 0655                          __pnvCOMMON 007B  
                    DelayTime_1us@i 0074                      DelayTime_1us@j 0076  
       ??_myUARTtoRF_Initialization 0072                          __pmaintext 0446  
               _CC2500_WriteCommand 0520                          ??_UART_ISR 0070  
                        ??_TMR1_ISR 0070                          ??_UART_Set 0072  
                        ??_TMR1_Set 0072                          __pintentry 0004  
                __size_of_setTxData 0071              __size_of_DelayTime_1us 0025  
      __end_of_setRF_Initialization 061C                __size_of_setLog_Code 001B  
              ?_CC2500_WriteCommand 0070              __size_of_CC2500_RxData 005E  
            __size_of_CC2500_TxData 005A                             _RF_Data 0020  
                           _RF_Main 0658     __end_of_setControl_Lights_Table 03B6  
                   setRF_Main@error 0068                          ??_Fosc_Set 0072  
                     ?_UART_Receive 0070        __end_of_CC2500_FrequencyCabr 0612  
                   __size_of_IO_Set 0013                   __end_of_getRxData 017A  
          _CC2500_registers_address 0200                             __ptext1 031E  
                           __ptext2 0655                             __ptext3 0636  
                           __ptext4 05D5                             __ptext5 05E2  
                           __ptext6 063B                             __ptext7 061C  
                           __ptext8 05B4                             __ptext9 0658  
         __size_of_CC2500_SIDLEMode 0004           _myUARTtoRF_Initialization 0636  
                      __size_of_ISR 000F          ??_getMain_All_Error_Status 0072  
                        _setRF_Main 0035             ??_myMain_Initialization 0072  
             ??_CC2500_WriteCommand 0074          __end_of_CC2500_ClearRXFIFO 0655  
        __end_of_CC2500_ClearTXFIFO 0651                             _product 007B  
           __end_of_myUARTtoRF_Main 0658                             clrloop0 0625  
              end_of_initialization 0031                   _CC2500_InitSetREG 03F7  
                     _DelayTime_1us 0421                   __end_of_setTxData 01EB  
                    ??_UART_Receive 0073                             init_ram 062A  
                ?_CC2500_InitSetREG 0070                             initloop 062B  
             CC2500_ReadByte@loop_b 0073                   _CC2500_ReadStatus 0489  
                ?_CC2500_ReadStatus 0070            __size_of_CC2500_ReadByte 0017  
                     _CC2500_RxData 0266                       _CC2500_TxData 02C4  
               ??_CC2500_InitSetREG 0077                        __pstringtext 0200  
               ??_CC2500_ReadStatus 0074                           _UART_Main 05E2  
           CC2500_InitSetREG@loop_c 0068                  _Mcu_Initialization 05EF  
          __size_of_CC2500_PowerRST 0041                __end_of_my_MainTimer 0372  
                  __CFG_FOSC$INTOSC 0000            __size_of_CC2500_WriteREG 0020  
         __end_of_CC2500_InitSetREG 0421                 ?_Mcu_Initialization 0070  
                    ?_DelayTime_1us 0072           __end_of_CC2500_ReadStatus 04A9  
   getMain_All_Error_Status@command 0070                      __end_of_IO_Set 05B4  
              _setRF_Initialization 0612                      ?_CC2500_RxData 0070  
                    ?_CC2500_TxData 0070               _CC2500_PowerOnInitial 054F  
              ??_Mcu_Initialization 0072                          ?_UART_Main 0070  
                 __size_of_UART_ISR 0010                   __size_of_TMR1_ISR 001F  
                 __size_of_UART_Set 0014                   __size_of_TMR1_Set 000C  
              _CC2500_FrequencyCabr 0607                         ?_setRF_Main 0070  
               start_initialization 0015                         __end_of_ISR 0013  
        __end_of_CC2500_InitPATable 0505                    ?_myUARTtoRF_Main 0070  
                _set_TimeoutCleared 0640                            ??_IO_Set 0072  
          __size_of_Timeout_Counter 0015               ?_setRF_Initialization 0070  
                 __size_of_Fosc_Set 0004           __size_of_CC2500_WriteByte 0014  
               ?_set_TimeoutCleared 0070                           _Rx_Length 0060  
                         _Tx_Length 006D                         __pdataBANK1 00A0  
                 ??_CC2500_ReadByte 0072                __end_of_UART_Receive 05C5  
  __end_of_getMain_All_Error_Status 065E                    _CC2500_SIDLEMode 0649  
             ?_CC2500_FrequencyCabr 0070                           ___latbits 0002  
            __size_of_UART_Transmit 0005                       __pcstackBANK0 0066  
              ??_set_TimeoutCleared 0072                     ??_DelayTime_1us 0074  
        __size_of_CC2500_InitSetREG 002A                   ??_CC2500_PowerRST 0078  
                          ?_RF_Main 0070  __size_of_myUARTtoRF_Initialization 0005  
        __size_of_CC2500_ReadStatus 0020                   ??_CC2500_WriteREG 0075  
             CC2500_WriteREG@w_addr 0076                     ??_CC2500_RxData 0076  
                   ??_CC2500_TxData 0076                           __pnvBANK0 006D  
                    getRxData@error 0074              ?_CC2500_PowerOnInitial 0070  
               __size_of_setRF_Main 00C6            ?_setControl_Lights_Table 0070  
                         _getRxData 00FB               __size_of_my_MainTimer 0054  
                       ??_UART_Main 0074                       ??_setLog_Code 0072  
      CC2500_ReadStatus@status_addr 0075              CC2500_WriteByte@loop_a 0073  
                         _r_address 0063      __size_of_myMain_Initialization 000D  
      __end_of_CC2500_patable_vaule 0266       __end_of_myMain_Initialization 05E2  
                    __size_of_getch 0006                      __size_of_putch 0008  
            ??_setRF_Initialization 0072   __end_of_myUARTtoRF_Initialization 063B  
                 _CC2500_rfSettings 022F                           clear_ram0 0624  
          CC2500_InitPATable@loop_d 0079                        _my_MainTimer 031E  
                         _setTxData 017A                  _CC2500_ClearRXFIFO 0651  
                _CC2500_ClearTXFIFO 064D                       _UART_Transmit 063B  
                 ??_Timeout_Counter 0072                            _UART_ISR 05C5  
                        ?_getRxData 0070                            _TMR1_ISR 04C9  
            CC2500_InitSetREG@temp1 0066              CC2500_InitSetREG@temp2 0067  
                          _UART_Set 0579                            _TMR1_Set 05FB  
               ?_CC2500_ClearRXFIFO 0070                 ?_CC2500_ClearTXFIFO 0070  
                          _RF_Count 005C         __end_of_CC2500_WriteCommand 0538  
            ??_CC2500_FrequencyCabr 0078                    setRF_Main@loop_f 0066  
    getMain_All_Error_Status@status 0072                 __end_of_setLog_Code 0520  
              ??_CC2500_ClearRXFIFO 0076                ??_CC2500_ClearTXFIFO 0076  
         __end_of_CC2500_rfSettings 025E                    __size_of_RF_Main 0003  
                          _Fosc_Set 0645   __size_of_getMain_All_Error_Status 0003  
         ?_getMain_All_Error_Status 0070                          ?_setTxData 0070  
                  _CC2500_WriteByte 058D                      ?_UART_Transmit 0070  
                          _SwDetect 0062               __size_of_UART_Receive 0011  
                      ??_setRF_Main 0078                CC2500_WriteREG@value 0074  
                          __ptext10 0035                            __ptext11 00FB  
                          __ptext20 065E                            __ptext12 0505  
                          __ptext21 0612                            __ptext13 0372  
                          __ptext30 03F7                            __ptext22 05EF  
                          __ptext14 017A                            __ptext31 04E8  
                          __ptext23 0579                            __ptext15 065B  
                          __ptext40 058D                            __ptext32 04A9  
                          __ptext24 05FB                            __ptext16 02C4  
                          __ptext33 0607                            __ptext25 05A1  
                          __ptext17 0266                            __ptext42 05C5  
                          __ptext34 0421                            __ptext26 0645  
                          __ptext18 0489                            __ptext43 0630  
                          __ptext35 064D                            __ptext27 054F  
                          __ptext19 0538                            __ptext44 04C9  
                          __ptext36 0651                            __ptext28 0649  
                          __ptext37 0520                            __ptext29 03B6  
                          __ptext38 0640                            __ptext39 0564  
                          __product 00A0                       __size_of_main 0023  
          __end_of_CC2500_SIDLEMode 064D                        _UART_Receive 05B4  
        CC2500_WriteCommand@command 0075                setRF_Main@Receive_OK 0067  
                   _CC2500_ReadByte 0538                  _CC2500_InitPATable 04E8  
                __end_of_setRF_Main 00FB         __size_of_Mcu_Initialization 000C  
              _CC2500_patable_vaule 025E                         ??_getRxData 0073  
                          main@argc 0069                            main@argv 006B  
               ?_CC2500_InitPATable 0070                     _CC2500_PowerRST 03B6  
                       _setLog_Code 0505                           putch@byte 0072  
                   _CC2500_WriteREG 04A9                       _Transceive_OK 03D1  
                       pic14e$flags 007E                            intlevel1 0000  
              ??_CC2500_InitPATable 0077             ??_CC2500_PowerOnInitial 007A  
                   ??_UART_Transmit 0073                         ??_setTxData 0072  
          __size_of_myUARTtoRF_Main 0003              CC2500_InitPATable@temp 0078  
                 _RF_Initialization 065E                  ?_RF_Initialization 0070  
                        _SPI0Buffer 0061                 ??_RF_Initialization 0073  
  __size_of_setControl_Lights_Table 0044         __size_of_set_TimeoutCleared 0005  
             __end_of_DelayTime_1us 0446             __end_of_CC2500_ReadByte 054F  
                   _Timeout_Counter 0564           __end_of_RF_Initialization 0661  
             __end_of_CC2500_RxData 02C4               __end_of_CC2500_TxData 031E  
           __end_of_CC2500_PowerRST 03F7  
