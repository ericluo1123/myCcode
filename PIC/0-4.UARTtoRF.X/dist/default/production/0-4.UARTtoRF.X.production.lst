

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Dec 10 15:49:17 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1516
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	intentry,global,class=CODE,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    61                           	dabs	1,0x7E,2
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0090                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0095                     	;# 
    96  0096                     	;# 
    97  0097                     	;# 
    98  0099                     	;# 
    99  009A                     	;# 
   100  009B                     	;# 
   101  009B                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  010E                     	;# 
   108  0116                     	;# 
   109  0117                     	;# 
   110  011D                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  018E                     	;# 
   114  0191                     	;# 
   115  0191                     	;# 
   116  0192                     	;# 
   117  0193                     	;# 
   118  0193                     	;# 
   119  0194                     	;# 
   120  0195                     	;# 
   121  0196                     	;# 
   122  0197                     	;# 
   123  0199                     	;# 
   124  019A                     	;# 
   125  019B                     	;# 
   126  019B                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019C                     	;# 
   130  019C                     	;# 
   131  019D                     	;# 
   132  019E                     	;# 
   133  019F                     	;# 
   134  020D                     	;# 
   135  0210                     	;# 
   136  0211                     	;# 
   137  0211                     	;# 
   138  0212                     	;# 
   139  0212                     	;# 
   140  0213                     	;# 
   141  0213                     	;# 
   142  0214                     	;# 
   143  0214                     	;# 
   144  0215                     	;# 
   145  0215                     	;# 
   146  0215                     	;# 
   147  0216                     	;# 
   148  0216                     	;# 
   149  0217                     	;# 
   150  0217                     	;# 
   151  0291                     	;# 
   152  0291                     	;# 
   153  0292                     	;# 
   154  0293                     	;# 
   155  0298                     	;# 
   156  0298                     	;# 
   157  0299                     	;# 
   158  029A                     	;# 
   159  0394                     	;# 
   160  0395                     	;# 
   161  0396                     	;# 
   162  0FE4                     	;# 
   163  0FE5                     	;# 
   164  0FE6                     	;# 
   165  0FE7                     	;# 
   166  0FE8                     	;# 
   167  0FE9                     	;# 
   168  0FEA                     	;# 
   169  0FEB                     	;# 
   170  0FED                     	;# 
   171  0FEE                     	;# 
   172  0FEF                     	;# 
   173  0000                     	;# 
   174  0001                     	;# 
   175  0002                     	;# 
   176  0003                     	;# 
   177  0004                     	;# 
   178  0005                     	;# 
   179  0006                     	;# 
   180  0007                     	;# 
   181  0008                     	;# 
   182  0009                     	;# 
   183  000A                     	;# 
   184  000B                     	;# 
   185  000C                     	;# 
   186  000D                     	;# 
   187  000E                     	;# 
   188  0010                     	;# 
   189  0011                     	;# 
   190  0012                     	;# 
   191  0015                     	;# 
   192  0016                     	;# 
   193  0016                     	;# 
   194  0017                     	;# 
   195  0018                     	;# 
   196  0019                     	;# 
   197  001A                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  008C                     	;# 
   201  008D                     	;# 
   202  008E                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0095                     	;# 
   207  0096                     	;# 
   208  0097                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009B                     	;# 
   213  009C                     	;# 
   214  009D                     	;# 
   215  009E                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  0116                     	;# 
   220  0117                     	;# 
   221  011D                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  018E                     	;# 
   225  0191                     	;# 
   226  0191                     	;# 
   227  0192                     	;# 
   228  0193                     	;# 
   229  0193                     	;# 
   230  0194                     	;# 
   231  0195                     	;# 
   232  0196                     	;# 
   233  0197                     	;# 
   234  0199                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019C                     	;# 
   241  019C                     	;# 
   242  019D                     	;# 
   243  019E                     	;# 
   244  019F                     	;# 
   245  020D                     	;# 
   246  0210                     	;# 
   247  0211                     	;# 
   248  0211                     	;# 
   249  0212                     	;# 
   250  0212                     	;# 
   251  0213                     	;# 
   252  0213                     	;# 
   253  0214                     	;# 
   254  0214                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0216                     	;# 
   259  0216                     	;# 
   260  0217                     	;# 
   261  0217                     	;# 
   262  0291                     	;# 
   263  0291                     	;# 
   264  0292                     	;# 
   265  0293                     	;# 
   266  0298                     	;# 
   267  0298                     	;# 
   268  0299                     	;# 
   269  029A                     	;# 
   270  0394                     	;# 
   271  0395                     	;# 
   272  0396                     	;# 
   273  0FE4                     	;# 
   274  0FE5                     	;# 
   275  0FE6                     	;# 
   276  0FE7                     	;# 
   277  0FE8                     	;# 
   278  0FE9                     	;# 
   279  0FEA                     	;# 
   280  0FEB                     	;# 
   281  0FED                     	;# 
   282  0FEE                     	;# 
   283  0FEF                     	;# 
   284  0000                     	;# 
   285  0001                     	;# 
   286  0002                     	;# 
   287  0003                     	;# 
   288  0004                     	;# 
   289  0005                     	;# 
   290  0006                     	;# 
   291  0007                     	;# 
   292  0008                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  0010                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0015                     	;# 
   303  0016                     	;# 
   304  0016                     	;# 
   305  0017                     	;# 
   306  0018                     	;# 
   307  0019                     	;# 
   308  001A                     	;# 
   309  001B                     	;# 
   310  001C                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0090                     	;# 
   315  0091                     	;# 
   316  0092                     	;# 
   317  0095                     	;# 
   318  0096                     	;# 
   319  0097                     	;# 
   320  0099                     	;# 
   321  009A                     	;# 
   322  009B                     	;# 
   323  009B                     	;# 
   324  009C                     	;# 
   325  009D                     	;# 
   326  009E                     	;# 
   327  010C                     	;# 
   328  010D                     	;# 
   329  010E                     	;# 
   330  0116                     	;# 
   331  0117                     	;# 
   332  011D                     	;# 
   333  018C                     	;# 
   334  018D                     	;# 
   335  018E                     	;# 
   336  0191                     	;# 
   337  0191                     	;# 
   338  0192                     	;# 
   339  0193                     	;# 
   340  0193                     	;# 
   341  0194                     	;# 
   342  0195                     	;# 
   343  0196                     	;# 
   344  0197                     	;# 
   345  0199                     	;# 
   346  019A                     	;# 
   347  019B                     	;# 
   348  019B                     	;# 
   349  019B                     	;# 
   350  019B                     	;# 
   351  019C                     	;# 
   352  019C                     	;# 
   353  019D                     	;# 
   354  019E                     	;# 
   355  019F                     	;# 
   356  020D                     	;# 
   357  0210                     	;# 
   358  0211                     	;# 
   359  0211                     	;# 
   360  0212                     	;# 
   361  0212                     	;# 
   362  0213                     	;# 
   363  0213                     	;# 
   364  0214                     	;# 
   365  0214                     	;# 
   366  0215                     	;# 
   367  0215                     	;# 
   368  0215                     	;# 
   369  0216                     	;# 
   370  0216                     	;# 
   371  0217                     	;# 
   372  0217                     	;# 
   373  0291                     	;# 
   374  0291                     	;# 
   375  0292                     	;# 
   376  0293                     	;# 
   377  0298                     	;# 
   378  0298                     	;# 
   379  0299                     	;# 
   380  029A                     	;# 
   381  0394                     	;# 
   382  0395                     	;# 
   383  0396                     	;# 
   384  0FE4                     	;# 
   385  0FE5                     	;# 
   386  0FE6                     	;# 
   387  0FE7                     	;# 
   388  0FE8                     	;# 
   389  0FE9                     	;# 
   390  0FEA                     	;# 
   391  0FEB                     	;# 
   392  0FED                     	;# 
   393  0FEE                     	;# 
   394  0FEF                     	;# 
   395  0000                     	;# 
   396  0001                     	;# 
   397  0002                     	;# 
   398  0003                     	;# 
   399  0004                     	;# 
   400  0005                     	;# 
   401  0006                     	;# 
   402  0007                     	;# 
   403  0008                     	;# 
   404  0009                     	;# 
   405  000A                     	;# 
   406  000B                     	;# 
   407  000C                     	;# 
   408  000D                     	;# 
   409  000E                     	;# 
   410  0010                     	;# 
   411  0011                     	;# 
   412  0012                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0016                     	;# 
   416  0017                     	;# 
   417  0018                     	;# 
   418  0019                     	;# 
   419  001A                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  0090                     	;# 
   426  0091                     	;# 
   427  0092                     	;# 
   428  0095                     	;# 
   429  0096                     	;# 
   430  0097                     	;# 
   431  0099                     	;# 
   432  009A                     	;# 
   433  009B                     	;# 
   434  009B                     	;# 
   435  009C                     	;# 
   436  009D                     	;# 
   437  009E                     	;# 
   438  010C                     	;# 
   439  010D                     	;# 
   440  010E                     	;# 
   441  0116                     	;# 
   442  0117                     	;# 
   443  011D                     	;# 
   444  018C                     	;# 
   445  018D                     	;# 
   446  018E                     	;# 
   447  0191                     	;# 
   448  0191                     	;# 
   449  0192                     	;# 
   450  0193                     	;# 
   451  0193                     	;# 
   452  0194                     	;# 
   453  0195                     	;# 
   454  0196                     	;# 
   455  0197                     	;# 
   456  0199                     	;# 
   457  019A                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019B                     	;# 
   462  019C                     	;# 
   463  019C                     	;# 
   464  019D                     	;# 
   465  019E                     	;# 
   466  019F                     	;# 
   467  020D                     	;# 
   468  0210                     	;# 
   469  0211                     	;# 
   470  0211                     	;# 
   471  0212                     	;# 
   472  0212                     	;# 
   473  0213                     	;# 
   474  0213                     	;# 
   475  0214                     	;# 
   476  0214                     	;# 
   477  0215                     	;# 
   478  0215                     	;# 
   479  0215                     	;# 
   480  0216                     	;# 
   481  0216                     	;# 
   482  0217                     	;# 
   483  0217                     	;# 
   484  0291                     	;# 
   485  0291                     	;# 
   486  0292                     	;# 
   487  0293                     	;# 
   488  0298                     	;# 
   489  0298                     	;# 
   490  0299                     	;# 
   491  029A                     	;# 
   492  0394                     	;# 
   493  0395                     	;# 
   494  0396                     	;# 
   495  0FE4                     	;# 
   496  0FE5                     	;# 
   497  0FE6                     	;# 
   498  0FE7                     	;# 
   499  0FE8                     	;# 
   500  0FE9                     	;# 
   501  0FEA                     	;# 
   502  0FEB                     	;# 
   503  0FED                     	;# 
   504  0FEE                     	;# 
   505  0FEF                     	;# 
   506  0000                     	;# 
   507  0001                     	;# 
   508  0002                     	;# 
   509  0003                     	;# 
   510  0004                     	;# 
   511  0005                     	;# 
   512  0006                     	;# 
   513  0007                     	;# 
   514  0008                     	;# 
   515  0009                     	;# 
   516  000A                     	;# 
   517  000B                     	;# 
   518  000C                     	;# 
   519  000D                     	;# 
   520  000E                     	;# 
   521  0010                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0015                     	;# 
   525  0016                     	;# 
   526  0016                     	;# 
   527  0017                     	;# 
   528  0018                     	;# 
   529  0019                     	;# 
   530  001A                     	;# 
   531  001B                     	;# 
   532  001C                     	;# 
   533  008C                     	;# 
   534  008D                     	;# 
   535  008E                     	;# 
   536  0090                     	;# 
   537  0091                     	;# 
   538  0092                     	;# 
   539  0095                     	;# 
   540  0096                     	;# 
   541  0097                     	;# 
   542  0099                     	;# 
   543  009A                     	;# 
   544  009B                     	;# 
   545  009B                     	;# 
   546  009C                     	;# 
   547  009D                     	;# 
   548  009E                     	;# 
   549  010C                     	;# 
   550  010D                     	;# 
   551  010E                     	;# 
   552  0116                     	;# 
   553  0117                     	;# 
   554  011D                     	;# 
   555  018C                     	;# 
   556  018D                     	;# 
   557  018E                     	;# 
   558  0191                     	;# 
   559  0191                     	;# 
   560  0192                     	;# 
   561  0193                     	;# 
   562  0193                     	;# 
   563  0194                     	;# 
   564  0195                     	;# 
   565  0196                     	;# 
   566  0197                     	;# 
   567  0199                     	;# 
   568  019A                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019C                     	;# 
   574  019C                     	;# 
   575  019D                     	;# 
   576  019E                     	;# 
   577  019F                     	;# 
   578  020D                     	;# 
   579  0210                     	;# 
   580  0211                     	;# 
   581  0211                     	;# 
   582  0212                     	;# 
   583  0212                     	;# 
   584  0213                     	;# 
   585  0213                     	;# 
   586  0214                     	;# 
   587  0214                     	;# 
   588  0215                     	;# 
   589  0215                     	;# 
   590  0215                     	;# 
   591  0216                     	;# 
   592  0216                     	;# 
   593  0217                     	;# 
   594  0217                     	;# 
   595  0291                     	;# 
   596  0291                     	;# 
   597  0292                     	;# 
   598  0293                     	;# 
   599  0298                     	;# 
   600  0298                     	;# 
   601  0299                     	;# 
   602  029A                     	;# 
   603  0394                     	;# 
   604  0395                     	;# 
   605  0396                     	;# 
   606  0FE4                     	;# 
   607  0FE5                     	;# 
   608  0FE6                     	;# 
   609  0FE7                     	;# 
   610  0FE8                     	;# 
   611  0FE9                     	;# 
   612  0FEA                     	;# 
   613  0FEB                     	;# 
   614  0FED                     	;# 
   615  0FEE                     	;# 
   616  0FEF                     	;# 
   617  0000                     	;# 
   618  0001                     	;# 
   619  0002                     	;# 
   620  0003                     	;# 
   621  0004                     	;# 
   622  0005                     	;# 
   623  0006                     	;# 
   624  0007                     	;# 
   625  0008                     	;# 
   626  0009                     	;# 
   627  000A                     	;# 
   628  000B                     	;# 
   629  000C                     	;# 
   630  000D                     	;# 
   631  000E                     	;# 
   632  0010                     	;# 
   633  0011                     	;# 
   634  0012                     	;# 
   635  0015                     	;# 
   636  0016                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  0019                     	;# 
   641  001A                     	;# 
   642  001B                     	;# 
   643  001C                     	;# 
   644  008C                     	;# 
   645  008D                     	;# 
   646  008E                     	;# 
   647  0090                     	;# 
   648  0091                     	;# 
   649  0092                     	;# 
   650  0095                     	;# 
   651  0096                     	;# 
   652  0097                     	;# 
   653  0099                     	;# 
   654  009A                     	;# 
   655  009B                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  010C                     	;# 
   661  010D                     	;# 
   662  010E                     	;# 
   663  0116                     	;# 
   664  0117                     	;# 
   665  011D                     	;# 
   666  018C                     	;# 
   667  018D                     	;# 
   668  018E                     	;# 
   669  0191                     	;# 
   670  0191                     	;# 
   671  0192                     	;# 
   672  0193                     	;# 
   673  0193                     	;# 
   674  0194                     	;# 
   675  0195                     	;# 
   676  0196                     	;# 
   677  0197                     	;# 
   678  0199                     	;# 
   679  019A                     	;# 
   680  019B                     	;# 
   681  019B                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019C                     	;# 
   685  019C                     	;# 
   686  019D                     	;# 
   687  019E                     	;# 
   688  019F                     	;# 
   689  020D                     	;# 
   690  0210                     	;# 
   691  0211                     	;# 
   692  0211                     	;# 
   693  0212                     	;# 
   694  0212                     	;# 
   695  0213                     	;# 
   696  0213                     	;# 
   697  0214                     	;# 
   698  0214                     	;# 
   699  0215                     	;# 
   700  0215                     	;# 
   701  0215                     	;# 
   702  0216                     	;# 
   703  0216                     	;# 
   704  0217                     	;# 
   705  0217                     	;# 
   706  0291                     	;# 
   707  0291                     	;# 
   708  0292                     	;# 
   709  0293                     	;# 
   710  0298                     	;# 
   711  0298                     	;# 
   712  0299                     	;# 
   713  029A                     	;# 
   714  0394                     	;# 
   715  0395                     	;# 
   716  0396                     	;# 
   717  0FE4                     	;# 
   718  0FE5                     	;# 
   719  0FE6                     	;# 
   720  0FE7                     	;# 
   721  0FE8                     	;# 
   722  0FE9                     	;# 
   723  0FEA                     	;# 
   724  0FEB                     	;# 
   725  0FED                     	;# 
   726  0FEE                     	;# 
   727  0FEF                     	;# 
   728  0000                     	;# 
   729  0001                     	;# 
   730  0002                     	;# 
   731  0003                     	;# 
   732  0004                     	;# 
   733  0005                     	;# 
   734  0006                     	;# 
   735  0007                     	;# 
   736  0008                     	;# 
   737  0009                     	;# 
   738  000A                     	;# 
   739  000B                     	;# 
   740  000C                     	;# 
   741  000D                     	;# 
   742  000E                     	;# 
   743  0010                     	;# 
   744  0011                     	;# 
   745  0012                     	;# 
   746  0015                     	;# 
   747  0016                     	;# 
   748  0016                     	;# 
   749  0017                     	;# 
   750  0018                     	;# 
   751  0019                     	;# 
   752  001A                     	;# 
   753  001B                     	;# 
   754  001C                     	;# 
   755  008C                     	;# 
   756  008D                     	;# 
   757  008E                     	;# 
   758  0090                     	;# 
   759  0091                     	;# 
   760  0092                     	;# 
   761  0095                     	;# 
   762  0096                     	;# 
   763  0097                     	;# 
   764  0099                     	;# 
   765  009A                     	;# 
   766  009B                     	;# 
   767  009B                     	;# 
   768  009C                     	;# 
   769  009D                     	;# 
   770  009E                     	;# 
   771  010C                     	;# 
   772  010D                     	;# 
   773  010E                     	;# 
   774  0116                     	;# 
   775  0117                     	;# 
   776  011D                     	;# 
   777  018C                     	;# 
   778  018D                     	;# 
   779  018E                     	;# 
   780  0191                     	;# 
   781  0191                     	;# 
   782  0192                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0197                     	;# 
   789  0199                     	;# 
   790  019A                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019C                     	;# 
   796  019C                     	;# 
   797  019D                     	;# 
   798  019E                     	;# 
   799  019F                     	;# 
   800  020D                     	;# 
   801  0210                     	;# 
   802  0211                     	;# 
   803  0211                     	;# 
   804  0212                     	;# 
   805  0212                     	;# 
   806  0213                     	;# 
   807  0213                     	;# 
   808  0214                     	;# 
   809  0214                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0215                     	;# 
   813  0216                     	;# 
   814  0216                     	;# 
   815  0217                     	;# 
   816  0217                     	;# 
   817  0291                     	;# 
   818  0291                     	;# 
   819  0292                     	;# 
   820  0293                     	;# 
   821  0298                     	;# 
   822  0298                     	;# 
   823  0299                     	;# 
   824  029A                     	;# 
   825  0394                     	;# 
   826  0395                     	;# 
   827  0396                     	;# 
   828  0FE4                     	;# 
   829  0FE5                     	;# 
   830  0FE6                     	;# 
   831  0FE7                     	;# 
   832  0FE8                     	;# 
   833  0FE9                     	;# 
   834  0FEA                     	;# 
   835  0FEB                     	;# 
   836  0FED                     	;# 
   837  0FEE                     	;# 
   838  0FEF                     	;# 
   839  0000                     	;# 
   840  0001                     	;# 
   841  0002                     	;# 
   842  0003                     	;# 
   843  0004                     	;# 
   844  0005                     	;# 
   845  0006                     	;# 
   846  0007                     	;# 
   847  0008                     	;# 
   848  0009                     	;# 
   849  000A                     	;# 
   850  000B                     	;# 
   851  000C                     	;# 
   852  000D                     	;# 
   853  000E                     	;# 
   854  0010                     	;# 
   855  0011                     	;# 
   856  0012                     	;# 
   857  0015                     	;# 
   858  0016                     	;# 
   859  0016                     	;# 
   860  0017                     	;# 
   861  0018                     	;# 
   862  0019                     	;# 
   863  001A                     	;# 
   864  001B                     	;# 
   865  001C                     	;# 
   866  008C                     	;# 
   867  008D                     	;# 
   868  008E                     	;# 
   869  0090                     	;# 
   870  0091                     	;# 
   871  0092                     	;# 
   872  0095                     	;# 
   873  0096                     	;# 
   874  0097                     	;# 
   875  0099                     	;# 
   876  009A                     	;# 
   877  009B                     	;# 
   878  009B                     	;# 
   879  009C                     	;# 
   880  009D                     	;# 
   881  009E                     	;# 
   882  010C                     	;# 
   883  010D                     	;# 
   884  010E                     	;# 
   885  0116                     	;# 
   886  0117                     	;# 
   887  011D                     	;# 
   888  018C                     	;# 
   889  018D                     	;# 
   890  018E                     	;# 
   891  0191                     	;# 
   892  0191                     	;# 
   893  0192                     	;# 
   894  0193                     	;# 
   895  0193                     	;# 
   896  0194                     	;# 
   897  0195                     	;# 
   898  0196                     	;# 
   899  0197                     	;# 
   900  0199                     	;# 
   901  019A                     	;# 
   902  019B                     	;# 
   903  019B                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019C                     	;# 
   907  019C                     	;# 
   908  019D                     	;# 
   909  019E                     	;# 
   910  019F                     	;# 
   911  020D                     	;# 
   912  0210                     	;# 
   913  0211                     	;# 
   914  0211                     	;# 
   915  0212                     	;# 
   916  0212                     	;# 
   917  0213                     	;# 
   918  0213                     	;# 
   919  0214                     	;# 
   920  0214                     	;# 
   921  0215                     	;# 
   922  0215                     	;# 
   923  0215                     	;# 
   924  0216                     	;# 
   925  0216                     	;# 
   926  0217                     	;# 
   927  0217                     	;# 
   928  0291                     	;# 
   929  0291                     	;# 
   930  0292                     	;# 
   931  0293                     	;# 
   932  0298                     	;# 
   933  0298                     	;# 
   934  0299                     	;# 
   935  029A                     	;# 
   936  0394                     	;# 
   937  0395                     	;# 
   938  0396                     	;# 
   939  0FE4                     	;# 
   940  0FE5                     	;# 
   941  0FE6                     	;# 
   942  0FE7                     	;# 
   943  0FE8                     	;# 
   944  0FE9                     	;# 
   945  0FEA                     	;# 
   946  0FEB                     	;# 
   947  0FED                     	;# 
   948  0FEE                     	;# 
   949  0FEF                     	;# 
   950  0000                     	;# 
   951  0001                     	;# 
   952  0002                     	;# 
   953  0003                     	;# 
   954  0004                     	;# 
   955  0005                     	;# 
   956  0006                     	;# 
   957  0007                     	;# 
   958  0008                     	;# 
   959  0009                     	;# 
   960  000A                     	;# 
   961  000B                     	;# 
   962  000C                     	;# 
   963  000D                     	;# 
   964  000E                     	;# 
   965  0010                     	;# 
   966  0011                     	;# 
   967  0012                     	;# 
   968  0015                     	;# 
   969  0016                     	;# 
   970  0016                     	;# 
   971  0017                     	;# 
   972  0018                     	;# 
   973  0019                     	;# 
   974  001A                     	;# 
   975  001B                     	;# 
   976  001C                     	;# 
   977  008C                     	;# 
   978  008D                     	;# 
   979  008E                     	;# 
   980  0090                     	;# 
   981  0091                     	;# 
   982  0092                     	;# 
   983  0095                     	;# 
   984  0096                     	;# 
   985  0097                     	;# 
   986  0099                     	;# 
   987  009A                     	;# 
   988  009B                     	;# 
   989  009B                     	;# 
   990  009C                     	;# 
   991  009D                     	;# 
   992  009E                     	;# 
   993  010C                     	;# 
   994  010D                     	;# 
   995  010E                     	;# 
   996  0116                     	;# 
   997  0117                     	;# 
   998  011D                     	;# 
   999  018C                     	;# 
  1000  018D                     	;# 
  1001  018E                     	;# 
  1002  0191                     	;# 
  1003  0191                     	;# 
  1004  0192                     	;# 
  1005  0193                     	;# 
  1006  0193                     	;# 
  1007  0194                     	;# 
  1008  0195                     	;# 
  1009  0196                     	;# 
  1010  0197                     	;# 
  1011  0199                     	;# 
  1012  019A                     	;# 
  1013  019B                     	;# 
  1014  019B                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019C                     	;# 
  1018  019C                     	;# 
  1019  019D                     	;# 
  1020  019E                     	;# 
  1021  019F                     	;# 
  1022  020D                     	;# 
  1023  0210                     	;# 
  1024  0211                     	;# 
  1025  0211                     	;# 
  1026  0212                     	;# 
  1027  0212                     	;# 
  1028  0213                     	;# 
  1029  0213                     	;# 
  1030  0214                     	;# 
  1031  0214                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0216                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0217                     	;# 
  1039  0291                     	;# 
  1040  0291                     	;# 
  1041  0292                     	;# 
  1042  0293                     	;# 
  1043  0298                     	;# 
  1044  0298                     	;# 
  1045  0299                     	;# 
  1046  029A                     	;# 
  1047  0394                     	;# 
  1048  0395                     	;# 
  1049  0396                     	;# 
  1050  0FE4                     	;# 
  1051  0FE5                     	;# 
  1052  0FE6                     	;# 
  1053  0FE7                     	;# 
  1054  0FE8                     	;# 
  1055  0FE9                     	;# 
  1056  0FEA                     	;# 
  1057  0FEB                     	;# 
  1058  0FED                     	;# 
  1059  0FEE                     	;# 
  1060  0FEF                     	;# 
  1061  0000                     	;# 
  1062  0001                     	;# 
  1063  0002                     	;# 
  1064  0003                     	;# 
  1065  0004                     	;# 
  1066  0005                     	;# 
  1067  0006                     	;# 
  1068  0007                     	;# 
  1069  0008                     	;# 
  1070  0009                     	;# 
  1071  000A                     	;# 
  1072  000B                     	;# 
  1073  000C                     	;# 
  1074  000D                     	;# 
  1075  000E                     	;# 
  1076  0010                     	;# 
  1077  0011                     	;# 
  1078  0012                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0016                     	;# 
  1082  0017                     	;# 
  1083  0018                     	;# 
  1084  0019                     	;# 
  1085  001A                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  008C                     	;# 
  1089  008D                     	;# 
  1090  008E                     	;# 
  1091  0090                     	;# 
  1092  0091                     	;# 
  1093  0092                     	;# 
  1094  0095                     	;# 
  1095  0096                     	;# 
  1096  0097                     	;# 
  1097  0099                     	;# 
  1098  009A                     	;# 
  1099  009B                     	;# 
  1100  009B                     	;# 
  1101  009C                     	;# 
  1102  009D                     	;# 
  1103  009E                     	;# 
  1104  010C                     	;# 
  1105  010D                     	;# 
  1106  010E                     	;# 
  1107  0116                     	;# 
  1108  0117                     	;# 
  1109  011D                     	;# 
  1110  018C                     	;# 
  1111  018D                     	;# 
  1112  018E                     	;# 
  1113  0191                     	;# 
  1114  0191                     	;# 
  1115  0192                     	;# 
  1116  0193                     	;# 
  1117  0193                     	;# 
  1118  0194                     	;# 
  1119  0195                     	;# 
  1120  0196                     	;# 
  1121  0197                     	;# 
  1122  0199                     	;# 
  1123  019A                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019C                     	;# 
  1129  019C                     	;# 
  1130  019D                     	;# 
  1131  019E                     	;# 
  1132  019F                     	;# 
  1133  020D                     	;# 
  1134  0210                     	;# 
  1135  0211                     	;# 
  1136  0211                     	;# 
  1137  0212                     	;# 
  1138  0212                     	;# 
  1139  0213                     	;# 
  1140  0213                     	;# 
  1141  0214                     	;# 
  1142  0214                     	;# 
  1143  0215                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0216                     	;# 
  1147  0216                     	;# 
  1148  0217                     	;# 
  1149  0217                     	;# 
  1150  0291                     	;# 
  1151  0291                     	;# 
  1152  0292                     	;# 
  1153  0293                     	;# 
  1154  0298                     	;# 
  1155  0298                     	;# 
  1156  0299                     	;# 
  1157  029A                     	;# 
  1158  0394                     	;# 
  1159  0395                     	;# 
  1160  0396                     	;# 
  1161  0FE4                     	;# 
  1162  0FE5                     	;# 
  1163  0FE6                     	;# 
  1164  0FE7                     	;# 
  1165  0FE8                     	;# 
  1166  0FE9                     	;# 
  1167  0FEA                     	;# 
  1168  0FEB                     	;# 
  1169  0FED                     	;# 
  1170  0FEE                     	;# 
  1171  0FEF                     	;# 
  1172  0000                     	;# 
  1173  0001                     	;# 
  1174  0002                     	;# 
  1175  0003                     	;# 
  1176  0004                     	;# 
  1177  0005                     	;# 
  1178  0006                     	;# 
  1179  0007                     	;# 
  1180  0008                     	;# 
  1181  0009                     	;# 
  1182  000A                     	;# 
  1183  000B                     	;# 
  1184  000C                     	;# 
  1185  000D                     	;# 
  1186  000E                     	;# 
  1187  0010                     	;# 
  1188  0011                     	;# 
  1189  0012                     	;# 
  1190  0015                     	;# 
  1191  0016                     	;# 
  1192  0016                     	;# 
  1193  0017                     	;# 
  1194  0018                     	;# 
  1195  0019                     	;# 
  1196  001A                     	;# 
  1197  001B                     	;# 
  1198  001C                     	;# 
  1199  008C                     	;# 
  1200  008D                     	;# 
  1201  008E                     	;# 
  1202  0090                     	;# 
  1203  0091                     	;# 
  1204  0092                     	;# 
  1205  0095                     	;# 
  1206  0096                     	;# 
  1207  0097                     	;# 
  1208  0099                     	;# 
  1209  009A                     	;# 
  1210  009B                     	;# 
  1211  009B                     	;# 
  1212  009C                     	;# 
  1213  009D                     	;# 
  1214  009E                     	;# 
  1215  010C                     	;# 
  1216  010D                     	;# 
  1217  010E                     	;# 
  1218  0116                     	;# 
  1219  0117                     	;# 
  1220  011D                     	;# 
  1221  018C                     	;# 
  1222  018D                     	;# 
  1223  018E                     	;# 
  1224  0191                     	;# 
  1225  0191                     	;# 
  1226  0192                     	;# 
  1227  0193                     	;# 
  1228  0193                     	;# 
  1229  0194                     	;# 
  1230  0195                     	;# 
  1231  0196                     	;# 
  1232  0197                     	;# 
  1233  0199                     	;# 
  1234  019A                     	;# 
  1235  019B                     	;# 
  1236  019B                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019C                     	;# 
  1240  019C                     	;# 
  1241  019D                     	;# 
  1242  019E                     	;# 
  1243  019F                     	;# 
  1244  020D                     	;# 
  1245  0210                     	;# 
  1246  0211                     	;# 
  1247  0211                     	;# 
  1248  0212                     	;# 
  1249  0212                     	;# 
  1250  0213                     	;# 
  1251  0213                     	;# 
  1252  0214                     	;# 
  1253  0214                     	;# 
  1254  0215                     	;# 
  1255  0215                     	;# 
  1256  0215                     	;# 
  1257  0216                     	;# 
  1258  0216                     	;# 
  1259  0217                     	;# 
  1260  0217                     	;# 
  1261  0291                     	;# 
  1262  0291                     	;# 
  1263  0292                     	;# 
  1264  0293                     	;# 
  1265  0298                     	;# 
  1266  0298                     	;# 
  1267  0299                     	;# 
  1268  029A                     	;# 
  1269  0394                     	;# 
  1270  0395                     	;# 
  1271  0396                     	;# 
  1272  0FE4                     	;# 
  1273  0FE5                     	;# 
  1274  0FE6                     	;# 
  1275  0FE7                     	;# 
  1276  0FE8                     	;# 
  1277  0FE9                     	;# 
  1278  0FEA                     	;# 
  1279  0FEB                     	;# 
  1280  0FED                     	;# 
  1281  0FEE                     	;# 
  1282  0FEF                     	;# 
  1283  0000                     	;# 
  1284  0001                     	;# 
  1285  0002                     	;# 
  1286  0003                     	;# 
  1287  0004                     	;# 
  1288  0005                     	;# 
  1289  0006                     	;# 
  1290  0007                     	;# 
  1291  0008                     	;# 
  1292  0009                     	;# 
  1293  000A                     	;# 
  1294  000B                     	;# 
  1295  000C                     	;# 
  1296  000D                     	;# 
  1297  000E                     	;# 
  1298  0010                     	;# 
  1299  0011                     	;# 
  1300  0012                     	;# 
  1301  0015                     	;# 
  1302  0016                     	;# 
  1303  0016                     	;# 
  1304  0017                     	;# 
  1305  0018                     	;# 
  1306  0019                     	;# 
  1307  001A                     	;# 
  1308  001B                     	;# 
  1309  001C                     	;# 
  1310  008C                     	;# 
  1311  008D                     	;# 
  1312  008E                     	;# 
  1313  0090                     	;# 
  1314  0091                     	;# 
  1315  0092                     	;# 
  1316  0095                     	;# 
  1317  0096                     	;# 
  1318  0097                     	;# 
  1319  0099                     	;# 
  1320  009A                     	;# 
  1321  009B                     	;# 
  1322  009B                     	;# 
  1323  009C                     	;# 
  1324  009D                     	;# 
  1325  009E                     	;# 
  1326  010C                     	;# 
  1327  010D                     	;# 
  1328  010E                     	;# 
  1329  0116                     	;# 
  1330  0117                     	;# 
  1331  011D                     	;# 
  1332  018C                     	;# 
  1333  018D                     	;# 
  1334  018E                     	;# 
  1335  0191                     	;# 
  1336  0191                     	;# 
  1337  0192                     	;# 
  1338  0193                     	;# 
  1339  0193                     	;# 
  1340  0194                     	;# 
  1341  0195                     	;# 
  1342  0196                     	;# 
  1343  0197                     	;# 
  1344  0199                     	;# 
  1345  019A                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019B                     	;# 
  1349  019B                     	;# 
  1350  019C                     	;# 
  1351  019C                     	;# 
  1352  019D                     	;# 
  1353  019E                     	;# 
  1354  019F                     	;# 
  1355  020D                     	;# 
  1356  0210                     	;# 
  1357  0211                     	;# 
  1358  0211                     	;# 
  1359  0212                     	;# 
  1360  0212                     	;# 
  1361  0213                     	;# 
  1362  0213                     	;# 
  1363  0214                     	;# 
  1364  0214                     	;# 
  1365  0215                     	;# 
  1366  0215                     	;# 
  1367  0215                     	;# 
  1368  0216                     	;# 
  1369  0216                     	;# 
  1370  0217                     	;# 
  1371  0217                     	;# 
  1372  0291                     	;# 
  1373  0291                     	;# 
  1374  0292                     	;# 
  1375  0293                     	;# 
  1376  0298                     	;# 
  1377  0298                     	;# 
  1378  0299                     	;# 
  1379  029A                     	;# 
  1380  0394                     	;# 
  1381  0395                     	;# 
  1382  0396                     	;# 
  1383  0FE4                     	;# 
  1384  0FE5                     	;# 
  1385  0FE6                     	;# 
  1386  0FE7                     	;# 
  1387  0FE8                     	;# 
  1388  0FE9                     	;# 
  1389  0FEA                     	;# 
  1390  0FEB                     	;# 
  1391  0FED                     	;# 
  1392  0FEE                     	;# 
  1393  0FEF                     	;# 
  1394  0000                     	;# 
  1395  0001                     	;# 
  1396  0002                     	;# 
  1397  0003                     	;# 
  1398  0004                     	;# 
  1399  0005                     	;# 
  1400  0006                     	;# 
  1401  0007                     	;# 
  1402  0008                     	;# 
  1403  0009                     	;# 
  1404  000A                     	;# 
  1405  000B                     	;# 
  1406  000C                     	;# 
  1407  000D                     	;# 
  1408  000E                     	;# 
  1409  0010                     	;# 
  1410  0011                     	;# 
  1411  0012                     	;# 
  1412  0015                     	;# 
  1413  0016                     	;# 
  1414  0016                     	;# 
  1415  0017                     	;# 
  1416  0018                     	;# 
  1417  0019                     	;# 
  1418  001A                     	;# 
  1419  001B                     	;# 
  1420  001C                     	;# 
  1421  008C                     	;# 
  1422  008D                     	;# 
  1423  008E                     	;# 
  1424  0090                     	;# 
  1425  0091                     	;# 
  1426  0092                     	;# 
  1427  0095                     	;# 
  1428  0096                     	;# 
  1429  0097                     	;# 
  1430  0099                     	;# 
  1431  009A                     	;# 
  1432  009B                     	;# 
  1433  009B                     	;# 
  1434  009C                     	;# 
  1435  009D                     	;# 
  1436  009E                     	;# 
  1437  010C                     	;# 
  1438  010D                     	;# 
  1439  010E                     	;# 
  1440  0116                     	;# 
  1441  0117                     	;# 
  1442  011D                     	;# 
  1443  018C                     	;# 
  1444  018D                     	;# 
  1445  018E                     	;# 
  1446  0191                     	;# 
  1447  0191                     	;# 
  1448  0192                     	;# 
  1449  0193                     	;# 
  1450  0193                     	;# 
  1451  0194                     	;# 
  1452  0195                     	;# 
  1453  0196                     	;# 
  1454  0197                     	;# 
  1455  0199                     	;# 
  1456  019A                     	;# 
  1457  019B                     	;# 
  1458  019B                     	;# 
  1459  019B                     	;# 
  1460  019B                     	;# 
  1461  019C                     	;# 
  1462  019C                     	;# 
  1463  019D                     	;# 
  1464  019E                     	;# 
  1465  019F                     	;# 
  1466  020D                     	;# 
  1467  0210                     	;# 
  1468  0211                     	;# 
  1469  0211                     	;# 
  1470  0212                     	;# 
  1471  0212                     	;# 
  1472  0213                     	;# 
  1473  0213                     	;# 
  1474  0214                     	;# 
  1475  0214                     	;# 
  1476  0215                     	;# 
  1477  0215                     	;# 
  1478  0215                     	;# 
  1479  0216                     	;# 
  1480  0216                     	;# 
  1481  0217                     	;# 
  1482  0217                     	;# 
  1483  0291                     	;# 
  1484  0291                     	;# 
  1485  0292                     	;# 
  1486  0293                     	;# 
  1487  0298                     	;# 
  1488  0298                     	;# 
  1489  0299                     	;# 
  1490  029A                     	;# 
  1491  0394                     	;# 
  1492  0395                     	;# 
  1493  0396                     	;# 
  1494  0FE4                     	;# 
  1495  0FE5                     	;# 
  1496  0FE6                     	;# 
  1497  0FE7                     	;# 
  1498  0FE8                     	;# 
  1499  0FE9                     	;# 
  1500  0FEA                     	;# 
  1501  0FEB                     	;# 
  1502  0FED                     	;# 
  1503  0FEE                     	;# 
  1504  0FEF                     	;# 
  1505  0000                     	;# 
  1506  0001                     	;# 
  1507  0002                     	;# 
  1508  0003                     	;# 
  1509  0004                     	;# 
  1510  0005                     	;# 
  1511  0006                     	;# 
  1512  0007                     	;# 
  1513  0008                     	;# 
  1514  0009                     	;# 
  1515  000A                     	;# 
  1516  000B                     	;# 
  1517  000C                     	;# 
  1518  000D                     	;# 
  1519  000E                     	;# 
  1520  0010                     	;# 
  1521  0011                     	;# 
  1522  0012                     	;# 
  1523  0015                     	;# 
  1524  0016                     	;# 
  1525  0016                     	;# 
  1526  0017                     	;# 
  1527  0018                     	;# 
  1528  0019                     	;# 
  1529  001A                     	;# 
  1530  001B                     	;# 
  1531  001C                     	;# 
  1532  008C                     	;# 
  1533  008D                     	;# 
  1534  008E                     	;# 
  1535  0090                     	;# 
  1536  0091                     	;# 
  1537  0092                     	;# 
  1538  0095                     	;# 
  1539  0096                     	;# 
  1540  0097                     	;# 
  1541  0099                     	;# 
  1542  009A                     	;# 
  1543  009B                     	;# 
  1544  009B                     	;# 
  1545  009C                     	;# 
  1546  009D                     	;# 
  1547  009E                     	;# 
  1548  010C                     	;# 
  1549  010D                     	;# 
  1550  010E                     	;# 
  1551  0116                     	;# 
  1552  0117                     	;# 
  1553  011D                     	;# 
  1554  018C                     	;# 
  1555  018D                     	;# 
  1556  018E                     	;# 
  1557  0191                     	;# 
  1558  0191                     	;# 
  1559  0192                     	;# 
  1560  0193                     	;# 
  1561  0193                     	;# 
  1562  0194                     	;# 
  1563  0195                     	;# 
  1564  0196                     	;# 
  1565  0197                     	;# 
  1566  0199                     	;# 
  1567  019A                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019B                     	;# 
  1571  019B                     	;# 
  1572  019C                     	;# 
  1573  019C                     	;# 
  1574  019D                     	;# 
  1575  019E                     	;# 
  1576  019F                     	;# 
  1577  020D                     	;# 
  1578  0210                     	;# 
  1579  0211                     	;# 
  1580  0211                     	;# 
  1581  0212                     	;# 
  1582  0212                     	;# 
  1583  0213                     	;# 
  1584  0213                     	;# 
  1585  0214                     	;# 
  1586  0214                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0216                     	;# 
  1591  0216                     	;# 
  1592  0217                     	;# 
  1593  0217                     	;# 
  1594  0291                     	;# 
  1595  0291                     	;# 
  1596  0292                     	;# 
  1597  0293                     	;# 
  1598  0298                     	;# 
  1599  0298                     	;# 
  1600  0299                     	;# 
  1601  029A                     	;# 
  1602  0394                     	;# 
  1603  0395                     	;# 
  1604  0396                     	;# 
  1605  0FE4                     	;# 
  1606  0FE5                     	;# 
  1607  0FE6                     	;# 
  1608  0FE7                     	;# 
  1609  0FE8                     	;# 
  1610  0FE9                     	;# 
  1611  0FEA                     	;# 
  1612  0FEB                     	;# 
  1613  0FED                     	;# 
  1614  0FEE                     	;# 
  1615  0FEF                     	;# 
  1616  0000                     	;# 
  1617  0001                     	;# 
  1618  0002                     	;# 
  1619  0003                     	;# 
  1620  0004                     	;# 
  1621  0005                     	;# 
  1622  0006                     	;# 
  1623  0007                     	;# 
  1624  0008                     	;# 
  1625  0009                     	;# 
  1626  000A                     	;# 
  1627  000B                     	;# 
  1628  000C                     	;# 
  1629  000D                     	;# 
  1630  000E                     	;# 
  1631  0010                     	;# 
  1632  0011                     	;# 
  1633  0012                     	;# 
  1634  0015                     	;# 
  1635  0016                     	;# 
  1636  0016                     	;# 
  1637  0017                     	;# 
  1638  0018                     	;# 
  1639  0019                     	;# 
  1640  001A                     	;# 
  1641  001B                     	;# 
  1642  001C                     	;# 
  1643  008C                     	;# 
  1644  008D                     	;# 
  1645  008E                     	;# 
  1646  0090                     	;# 
  1647  0091                     	;# 
  1648  0092                     	;# 
  1649  0095                     	;# 
  1650  0096                     	;# 
  1651  0097                     	;# 
  1652  0099                     	;# 
  1653  009A                     	;# 
  1654  009B                     	;# 
  1655  009B                     	;# 
  1656  009C                     	;# 
  1657  009D                     	;# 
  1658  009E                     	;# 
  1659  010C                     	;# 
  1660  010D                     	;# 
  1661  010E                     	;# 
  1662  0116                     	;# 
  1663  0117                     	;# 
  1664  011D                     	;# 
  1665  018C                     	;# 
  1666  018D                     	;# 
  1667  018E                     	;# 
  1668  0191                     	;# 
  1669  0191                     	;# 
  1670  0192                     	;# 
  1671  0193                     	;# 
  1672  0193                     	;# 
  1673  0194                     	;# 
  1674  0195                     	;# 
  1675  0196                     	;# 
  1676  0197                     	;# 
  1677  0199                     	;# 
  1678  019A                     	;# 
  1679  019B                     	;# 
  1680  019B                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019C                     	;# 
  1684  019C                     	;# 
  1685  019D                     	;# 
  1686  019E                     	;# 
  1687  019F                     	;# 
  1688  020D                     	;# 
  1689  0210                     	;# 
  1690  0211                     	;# 
  1691  0211                     	;# 
  1692  0212                     	;# 
  1693  0212                     	;# 
  1694  0213                     	;# 
  1695  0213                     	;# 
  1696  0214                     	;# 
  1697  0214                     	;# 
  1698  0215                     	;# 
  1699  0215                     	;# 
  1700  0215                     	;# 
  1701  0216                     	;# 
  1702  0216                     	;# 
  1703  0217                     	;# 
  1704  0217                     	;# 
  1705  0291                     	;# 
  1706  0291                     	;# 
  1707  0292                     	;# 
  1708  0293                     	;# 
  1709  0298                     	;# 
  1710  0298                     	;# 
  1711  0299                     	;# 
  1712  029A                     	;# 
  1713  0394                     	;# 
  1714  0395                     	;# 
  1715  0396                     	;# 
  1716  0FE4                     	;# 
  1717  0FE5                     	;# 
  1718  0FE6                     	;# 
  1719  0FE7                     	;# 
  1720  0FE8                     	;# 
  1721  0FE9                     	;# 
  1722  0FEA                     	;# 
  1723  0FEB                     	;# 
  1724  0FED                     	;# 
  1725  0FEE                     	;# 
  1726  0FEF                     	;# 
  1727  0000                     	;# 
  1728  0001                     	;# 
  1729  0002                     	;# 
  1730  0003                     	;# 
  1731  0004                     	;# 
  1732  0005                     	;# 
  1733  0006                     	;# 
  1734  0007                     	;# 
  1735  0008                     	;# 
  1736  0009                     	;# 
  1737  000A                     	;# 
  1738  000B                     	;# 
  1739  000C                     	;# 
  1740  000D                     	;# 
  1741  000E                     	;# 
  1742  0010                     	;# 
  1743  0011                     	;# 
  1744  0012                     	;# 
  1745  0015                     	;# 
  1746  0016                     	;# 
  1747  0016                     	;# 
  1748  0017                     	;# 
  1749  0018                     	;# 
  1750  0019                     	;# 
  1751  001A                     	;# 
  1752  001B                     	;# 
  1753  001C                     	;# 
  1754  008C                     	;# 
  1755  008D                     	;# 
  1756  008E                     	;# 
  1757  0090                     	;# 
  1758  0091                     	;# 
  1759  0092                     	;# 
  1760  0095                     	;# 
  1761  0096                     	;# 
  1762  0097                     	;# 
  1763  0099                     	;# 
  1764  009A                     	;# 
  1765  009B                     	;# 
  1766  009B                     	;# 
  1767  009C                     	;# 
  1768  009D                     	;# 
  1769  009E                     	;# 
  1770  010C                     	;# 
  1771  010D                     	;# 
  1772  010E                     	;# 
  1773  0116                     	;# 
  1774  0117                     	;# 
  1775  011D                     	;# 
  1776  018C                     	;# 
  1777  018D                     	;# 
  1778  018E                     	;# 
  1779  0191                     	;# 
  1780  0191                     	;# 
  1781  0192                     	;# 
  1782  0193                     	;# 
  1783  0193                     	;# 
  1784  0194                     	;# 
  1785  0195                     	;# 
  1786  0196                     	;# 
  1787  0197                     	;# 
  1788  0199                     	;# 
  1789  019A                     	;# 
  1790  019B                     	;# 
  1791  019B                     	;# 
  1792  019B                     	;# 
  1793  019B                     	;# 
  1794  019C                     	;# 
  1795  019C                     	;# 
  1796  019D                     	;# 
  1797  019E                     	;# 
  1798  019F                     	;# 
  1799  020D                     	;# 
  1800  0210                     	;# 
  1801  0211                     	;# 
  1802  0211                     	;# 
  1803  0212                     	;# 
  1804  0212                     	;# 
  1805  0213                     	;# 
  1806  0213                     	;# 
  1807  0214                     	;# 
  1808  0214                     	;# 
  1809  0215                     	;# 
  1810  0215                     	;# 
  1811  0215                     	;# 
  1812  0216                     	;# 
  1813  0216                     	;# 
  1814  0217                     	;# 
  1815  0217                     	;# 
  1816  0291                     	;# 
  1817  0291                     	;# 
  1818  0292                     	;# 
  1819  0293                     	;# 
  1820  0298                     	;# 
  1821  0298                     	;# 
  1822  0299                     	;# 
  1823  029A                     	;# 
  1824  0394                     	;# 
  1825  0395                     	;# 
  1826  0396                     	;# 
  1827  0FE4                     	;# 
  1828  0FE5                     	;# 
  1829  0FE6                     	;# 
  1830  0FE7                     	;# 
  1831  0FE8                     	;# 
  1832  0FE9                     	;# 
  1833  0FEA                     	;# 
  1834  0FEB                     	;# 
  1835  0FED                     	;# 
  1836  0FEE                     	;# 
  1837  0FEF                     	;# 
  1838  0000                     	;# 
  1839  0001                     	;# 
  1840  0002                     	;# 
  1841  0003                     	;# 
  1842  0004                     	;# 
  1843  0005                     	;# 
  1844  0006                     	;# 
  1845  0007                     	;# 
  1846  0008                     	;# 
  1847  0009                     	;# 
  1848  000A                     	;# 
  1849  000B                     	;# 
  1850  000C                     	;# 
  1851  000D                     	;# 
  1852  000E                     	;# 
  1853  0010                     	;# 
  1854  0011                     	;# 
  1855  0012                     	;# 
  1856  0015                     	;# 
  1857  0016                     	;# 
  1858  0016                     	;# 
  1859  0017                     	;# 
  1860  0018                     	;# 
  1861  0019                     	;# 
  1862  001A                     	;# 
  1863  001B                     	;# 
  1864  001C                     	;# 
  1865  008C                     	;# 
  1866  008D                     	;# 
  1867  008E                     	;# 
  1868  0090                     	;# 
  1869  0091                     	;# 
  1870  0092                     	;# 
  1871  0095                     	;# 
  1872  0096                     	;# 
  1873  0097                     	;# 
  1874  0099                     	;# 
  1875  009A                     	;# 
  1876  009B                     	;# 
  1877  009B                     	;# 
  1878  009C                     	;# 
  1879  009D                     	;# 
  1880  009E                     	;# 
  1881  010C                     	;# 
  1882  010D                     	;# 
  1883  010E                     	;# 
  1884  0116                     	;# 
  1885  0117                     	;# 
  1886  011D                     	;# 
  1887  018C                     	;# 
  1888  018D                     	;# 
  1889  018E                     	;# 
  1890  0191                     	;# 
  1891  0191                     	;# 
  1892  0192                     	;# 
  1893  0193                     	;# 
  1894  0193                     	;# 
  1895  0194                     	;# 
  1896  0195                     	;# 
  1897  0196                     	;# 
  1898  0197                     	;# 
  1899  0199                     	;# 
  1900  019A                     	;# 
  1901  019B                     	;# 
  1902  019B                     	;# 
  1903  019B                     	;# 
  1904  019B                     	;# 
  1905  019C                     	;# 
  1906  019C                     	;# 
  1907  019D                     	;# 
  1908  019E                     	;# 
  1909  019F                     	;# 
  1910  020D                     	;# 
  1911  0210                     	;# 
  1912  0211                     	;# 
  1913  0211                     	;# 
  1914  0212                     	;# 
  1915  0212                     	;# 
  1916  0213                     	;# 
  1917  0213                     	;# 
  1918  0214                     	;# 
  1919  0214                     	;# 
  1920  0215                     	;# 
  1921  0215                     	;# 
  1922  0215                     	;# 
  1923  0216                     	;# 
  1924  0216                     	;# 
  1925  0217                     	;# 
  1926  0217                     	;# 
  1927  0291                     	;# 
  1928  0291                     	;# 
  1929  0292                     	;# 
  1930  0293                     	;# 
  1931  0298                     	;# 
  1932  0298                     	;# 
  1933  0299                     	;# 
  1934  029A                     	;# 
  1935  0394                     	;# 
  1936  0395                     	;# 
  1937  0396                     	;# 
  1938  0FE4                     	;# 
  1939  0FE5                     	;# 
  1940  0FE6                     	;# 
  1941  0FE7                     	;# 
  1942  0FE8                     	;# 
  1943  0FE9                     	;# 
  1944  0FEA                     	;# 
  1945  0FEB                     	;# 
  1946  0FED                     	;# 
  1947  0FEE                     	;# 
  1948  0FEF                     	;# 
  1949  0000                     	;# 
  1950  0001                     	;# 
  1951  0002                     	;# 
  1952  0003                     	;# 
  1953  0004                     	;# 
  1954  0005                     	;# 
  1955  0006                     	;# 
  1956  0007                     	;# 
  1957  0008                     	;# 
  1958  0009                     	;# 
  1959  000A                     	;# 
  1960  000B                     	;# 
  1961  000C                     	;# 
  1962  000D                     	;# 
  1963  000E                     	;# 
  1964  0010                     	;# 
  1965  0011                     	;# 
  1966  0012                     	;# 
  1967  0015                     	;# 
  1968  0016                     	;# 
  1969  0016                     	;# 
  1970  0017                     	;# 
  1971  0018                     	;# 
  1972  0019                     	;# 
  1973  001A                     	;# 
  1974  001B                     	;# 
  1975  001C                     	;# 
  1976  008C                     	;# 
  1977  008D                     	;# 
  1978  008E                     	;# 
  1979  0090                     	;# 
  1980  0091                     	;# 
  1981  0092                     	;# 
  1982  0095                     	;# 
  1983  0096                     	;# 
  1984  0097                     	;# 
  1985  0099                     	;# 
  1986  009A                     	;# 
  1987  009B                     	;# 
  1988  009B                     	;# 
  1989  009C                     	;# 
  1990  009D                     	;# 
  1991  009E                     	;# 
  1992  010C                     	;# 
  1993  010D                     	;# 
  1994  010E                     	;# 
  1995  0116                     	;# 
  1996  0117                     	;# 
  1997  011D                     	;# 
  1998  018C                     	;# 
  1999  018D                     	;# 
  2000  018E                     	;# 
  2001  0191                     	;# 
  2002  0191                     	;# 
  2003  0192                     	;# 
  2004  0193                     	;# 
  2005  0193                     	;# 
  2006  0194                     	;# 
  2007  0195                     	;# 
  2008  0196                     	;# 
  2009  0197                     	;# 
  2010  0199                     	;# 
  2011  019A                     	;# 
  2012  019B                     	;# 
  2013  019B                     	;# 
  2014  019B                     	;# 
  2015  019B                     	;# 
  2016  019C                     	;# 
  2017  019C                     	;# 
  2018  019D                     	;# 
  2019  019E                     	;# 
  2020  019F                     	;# 
  2021  020D                     	;# 
  2022  0210                     	;# 
  2023  0211                     	;# 
  2024  0211                     	;# 
  2025  0212                     	;# 
  2026  0212                     	;# 
  2027  0213                     	;# 
  2028  0213                     	;# 
  2029  0214                     	;# 
  2030  0214                     	;# 
  2031  0215                     	;# 
  2032  0215                     	;# 
  2033  0215                     	;# 
  2034  0216                     	;# 
  2035  0216                     	;# 
  2036  0217                     	;# 
  2037  0217                     	;# 
  2038  0291                     	;# 
  2039  0291                     	;# 
  2040  0292                     	;# 
  2041  0293                     	;# 
  2042  0298                     	;# 
  2043  0298                     	;# 
  2044  0299                     	;# 
  2045  029A                     	;# 
  2046  0394                     	;# 
  2047  0395                     	;# 
  2048  0396                     	;# 
  2049  0FE4                     	;# 
  2050  0FE5                     	;# 
  2051  0FE6                     	;# 
  2052  0FE7                     	;# 
  2053  0FE8                     	;# 
  2054  0FE9                     	;# 
  2055  0FEA                     	;# 
  2056  0FEB                     	;# 
  2057  0FED                     	;# 
  2058  0FEE                     	;# 
  2059  0FEF                     	;# 
  2060                           
  2061                           	psect	idataBANK1
  2062  0443                     __pidataBANK1:	
  2063                           
  2064                           ;initializer for __product
  2065  0443  3463               	retlw	99
  2066  0444  3402               	retlw	2
  2067  0445  3400               	retlw	0
  2068  0446  3400               	retlw	0
  2069  0447  3400               	retlw	0
  2070  0448  3400               	retlw	0
  2071  0449  3400               	retlw	0
  2072  044A  3400               	retlw	0
  2073  044B  3400               	retlw	0
  2074  044C  3400               	retlw	0
  2075  044D  3400               	retlw	0
  2076  044E  3400               	retlw	0
  2077  044F  34FF               	retlw	255
  2078  0450  34FF               	retlw	255
  2079  0451  34FF               	retlw	255
  2080  0452  3400               	retlw	0
  2081  0453  3400               	retlw	0
  2082  0454  3400               	retlw	0
  2083  0455  3400               	retlw	0
  2084  0456  3400               	retlw	0
  2085  0457  3400               	retlw	0
  2086  0458  3400               	retlw	0
  2087  0459  3400               	retlw	0
  2088  045A  3400               	retlw	0
  2089  045B  3400               	retlw	0
  2090  045C  3400               	retlw	0
  2091  045D  3400               	retlw	0
  2092  045E  3400               	retlw	0
  2093  045F  3400               	retlw	0
  2094  0460  3400               	retlw	0
  2095  0461  3400               	retlw	0
  2096  0462  3400               	retlw	0
  2097                           
  2098                           	psect	stringtext
  2099  0200                     __pstringtext:	
  2100  0200                     _CC2500_registers_address:	
  2101  0200  3403               	retlw	3
  2102  0201  3416               	retlw	22
  2103  0202  3417               	retlw	23
  2104  0203  341E               	retlw	30
  2105  0204  341F               	retlw	31
  2106  0205  3420               	retlw	32
  2107  0206  342A               	retlw	42
  2108  0207  342B               	retlw	43
  2109  0208  340B               	retlw	11
  2110  0209  340C               	retlw	12
  2111  020A  340D               	retlw	13
  2112  020B  340E               	retlw	14
  2113  020C  340F               	retlw	15
  2114  020D  3410               	retlw	16
  2115  020E  3411               	retlw	17
  2116  020F  3412               	retlw	18
  2117  0210  3413               	retlw	19
  2118  0211  3414               	retlw	20
  2119  0212  340A               	retlw	10
  2120  0213  3415               	retlw	21
  2121  0214  3421               	retlw	33
  2122  0215  3422               	retlw	34
  2123  0216  3418               	retlw	24
  2124  0217  3419               	retlw	25
  2125  0218  341A               	retlw	26
  2126  0219  341B               	retlw	27
  2127  021A  341C               	retlw	28
  2128  021B  341D               	retlw	29
  2129  021C  3423               	retlw	35
  2130  021D  3424               	retlw	36
  2131  021E  3425               	retlw	37
  2132  021F  3426               	retlw	38
  2133  0220  3429               	retlw	41
  2134  0221  342C               	retlw	44
  2135  0222  342D               	retlw	45
  2136  0223  342E               	retlw	46
  2137  0224  3400               	retlw	0
  2138  0225  3401               	retlw	1
  2139  0226  3402               	retlw	2
  2140  0227  3407               	retlw	7
  2141  0228  3408               	retlw	8
  2142  0229  3409               	retlw	9
  2143  022A  3406               	retlw	6
  2144  022B  3404               	retlw	4
  2145  022C  3405               	retlw	5
  2146  022D  3427               	retlw	39
  2147  022E  3428               	retlw	40
  2148  022F                     __end_of_CC2500_registers_address:	
  2149  022F                     _CC2500_rfSettings:	
  2150  022F  3407               	retlw	7
  2151  0230  3407               	retlw	7
  2152  0231  3430               	retlw	48
  2153  0232  3487               	retlw	135
  2154  0233  346B               	retlw	107
  2155  0234  34F8               	retlw	248
  2156  0235  347F               	retlw	127
  2157  0236  343F               	retlw	63
  2158  0237  3409               	retlw	9
  2159  0238  3400               	retlw	0
  2160  0239  345C               	retlw	92
  2161  023A  34A7               	retlw	167
  2162  023B  3462               	retlw	98
  2163  023C  3486               	retlw	134
  2164  023D  3483               	retlw	131
  2165  023E  3403               	retlw	3
  2166  023F  3422               	retlw	34
  2167  0240  34F8               	retlw	248
  2168  0241  3400               	retlw	0
  2169  0242  3444               	retlw	68
  2170  0243  34B6               	retlw	182
  2171  0244  3410               	retlw	16
  2172  0245  3418               	retlw	24
  2173  0246  341D               	retlw	29
  2174  0247  341C               	retlw	28
  2175  0248  34C7               	retlw	199
  2176  0249  3400               	retlw	0
  2177  024A  34B2               	retlw	178
  2178  024B  34EA               	retlw	234
  2179  024C  340A               	retlw	10
  2180  024D  3400               	retlw	0
  2181  024E  3411               	retlw	17
  2182  024F  3459               	retlw	89
  2183  0250  3488               	retlw	136
  2184  0251  3431               	retlw	49
  2185  0252  340B               	retlw	11
  2186  0253  342F               	retlw	47
  2187  0254  342E               	retlw	46
  2188  0255  3406               	retlw	6
  2189  0256  3404               	retlw	4
  2190  0257  3405               	retlw	5
  2191  0258  3400               	retlw	0
  2192  0259  3430               	retlw	48
  2193  025A  34D3               	retlw	211
  2194  025B  3491               	retlw	145
  2195  025C  3441               	retlw	65
  2196  025D  3400               	retlw	0
  2197  025E                     __end_of_CC2500_rfSettings:	
  2198  025E                     _CC2500_patable_vaule:	
  2199  025E  34FE               	retlw	254
  2200  025F  34FE               	retlw	254
  2201  0260  34FE               	retlw	254
  2202  0261  34FE               	retlw	254
  2203  0262  34FE               	retlw	254
  2204  0263  34FE               	retlw	254
  2205  0264  34FE               	retlw	254
  2206  0265  34FE               	retlw	254
  2207  0266                     __end_of_CC2500_patable_vaule:	
  2208                           
  2209                           	psect	nvCOMMON
  2210  007B                     __pnvCOMMON:	
  2211  007B                     _product:	
  2212  007B                     	ds	1
  2213                           
  2214                           	psect	nvBANK0
  2215  005A                     __pnvBANK0:	
  2216  005A                     _Tx_Length:	
  2217  005A                     	ds	1
  2218  000C                     _PORTA	set	12
  2219  000D                     _PORTB	set	13
  2220  000E                     _PORTC	set	14
  2221  0018                     _T1CON	set	24
  2222  0017                     _TMR1H	set	23
  2223  0016                     _TMR1L	set	22
  2224  005F                     _GIE	set	95
  2225  005E                     _PEIE	set	94
  2226  0060                     _RA0	set	96
  2227  0061                     _RA1	set	97
  2228  0062                     _RA2	set	98
  2229  0070                     _RC0	set	112
  2230  0071                     _RC1	set	113
  2231  0073                     _RC3	set	115
  2232  0074                     _RC4	set	116
  2233  0075                     _RC5	set	117
  2234  008D                     _RCIF	set	141
  2235  0088                     _TMR1IF	set	136
  2236  008C                     _TXIF	set	140
  2237  0099                     _OSCCON	set	153
  2238  008C                     _TRISA	set	140
  2239  008D                     _TRISB	set	141
  2240  008E                     _TRISC	set	142
  2241  048D                     _RCIE	set	1165
  2242  0488                     _TMR1IE	set	1160
  2243  0476                     _TRISC6	set	1142
  2244  0477                     _TRISC7	set	1143
  2245  048C                     _TXIE	set	1164
  2246  010C                     _LATA	set	268
  2247  010D                     _LATB	set	269
  2248  010E                     _LATC	set	270
  2249  018C                     _ANSELA	set	396
  2250  018D                     _ANSELB	set	397
  2251  018E                     _ANSELC	set	398
  2252  0199                     _RCREG	set	409
  2253  019D                     _RCSTA	set	413
  2254  019B                     _SPBRG	set	411
  2255  019C                     _SPBRGH	set	412
  2256  019A                     _TXREG	set	410
  2257  019E                     _TXSTA	set	414
  2258  0CFB                     _BRG16	set	3323
  2259  0CEE                     _RX9	set	3310
  2260  0CF6                     _TX9	set	3318
  2261                           
  2262                           ; #config settings
  2263  0000                     
  2264                           	psect	cinit
  2265  0015                     start_initialization:	
  2266  0015                     __initialization:	
  2267                           
  2268                           ; Clear objects allocated to BITCOMMON
  2269  0015  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2270                           
  2271                           ; Clear objects allocated to BANK0
  2272  0016  3020               	movlw	low __pbssBANK0
  2273  0017  0084               	movwf	4
  2274  0018  3000               	movlw	high __pbssBANK0
  2275  0019  0085               	movwf	5
  2276  001A  3033               	movlw	51
  2277  001B  3185  25F6  3180   	fcall	clear_ram0
  2278                           
  2279                           ; Clear objects allocated to BANK1
  2280  001E  30C0               	movlw	low __pbssBANK1
  2281  001F  0084               	movwf	4
  2282  0020  3000               	movlw	high __pbssBANK1
  2283  0021  0085               	movwf	5
  2284  0022  301E               	movlw	30
  2285  0023  3185  25F6  3180   	fcall	clear_ram0
  2286                           
  2287                           ; Initialize objects allocated to BANK1
  2288  0026  3043               	movlw	low __pidataBANK1
  2289  0027  0084               	movwf	4
  2290  0028  3084               	movlw	(high __pidataBANK1)| (0+128)
  2291  0029  0085               	movwf	5
  2292  002A  30A0               	movlw	low __pdataBANK1
  2293  002B  0086               	movwf	6
  2294  002C  3000               	movlw	high __pdataBANK1
  2295  002D  0087               	movwf	7
  2296  002E  3020               	movlw	32
  2297  002F  3185  25FC         	fcall	init_ram
  2298  0031                     end_of_initialization:	
  2299                           ;End of C runtime variable initialization code
  2300                           
  2301  0031                     __end_of__initialization:	
  2302  0031  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2303  0032  0020               	movlb	0
  2304  0033  3183  2BF8         	ljmp	_main	;jump to C main() function
  2305                           
  2306                           	psect	bitbssCOMMON
  2307  03D0                     __pbitbssCOMMON:	
  2308  03D0                     _Receive_OK:	
  2309  03D0                     	ds	1
  2310  03D1                     _Transceive_OK:	
  2311  03D1                     	ds	1
  2312                           
  2313                           	psect	bssBANK0
  2314  0020                     __pbssBANK0:	
  2315  0020                     _myMain:	
  2316  0020                     	ds	14
  2317  002E                     _RF1:	
  2318  002E                     	ds	12
  2319  003A                     _Timer1:	
  2320  003A                     	ds	3
  2321  003D                     _RF_Count:	
  2322  003D                     	ds	2
  2323  003F                     _CRC:	
  2324  003F                     	ds	1
  2325  0040                     _RSSI:	
  2326  0040                     	ds	1
  2327  0041                     _Rx_Length:	
  2328  0041                     	ds	1
  2329  0042                     _SPI0Buffer:	
  2330  0042                     	ds	1
  2331  0043                     _SwDetect:	
  2332  0043                     	ds	1
  2333  0044                     _r_address:	
  2334  0044                     	ds	1
  2335  0045                     _r_data:	
  2336  0045                     	ds	1
  2337  0046                     _s_data:	
  2338  0046                     	ds	1
  2339  0047                     _UART:	
  2340  0047                     	ds	12
  2341                           
  2342                           	psect	bssBANK1
  2343  00C0                     __pbssBANK1:	
  2344  00C0                     _RF_Data:	
  2345  00C0                     	ds	30
  2346                           
  2347                           	psect	dataBANK1
  2348  00A0                     __pdataBANK1:	
  2349  00A0                     __product:	
  2350  00A0                     	ds	32
  2351                           
  2352                           	psect	clrtext
  2353  05F6                     clear_ram0:	
  2354                           ;	Called with FSR0 containing the base address, and
  2355                           ;	WREG with the size to clear
  2356                           
  2357  05F6  0064               	clrwdt	;clear the watchdog before getting into this loop
  2358  05F7                     clrloop0:	
  2359  05F7  0180               	clrf	0	;clear RAM location pointed to by FSR
  2360  05F8  3101               	addfsr 0,1
  2361  05F9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2362  05FA  2DF7               	goto	clrloop0	;have we reached the end yet?
  2363  05FB  3400               	retlw	0	;all done for this memory range, return
  2364                           
  2365                           	psect	inittext
  2366  05FC                     init_ram:	
  2367  05FC  00FE               	movwf	126
  2368  05FD                     initloop:	
  2369  05FD  0012               	moviw fsr0++
  2370  05FE  001E               	movwi fsr1++
  2371  05FF  0BFE               	decfsz	126,f
  2372  0600  2DFD               	goto	initloop
  2373  0601  3400               	retlw	0
  2374                           
  2375                           	psect	cstackCOMMON
  2376  0070                     __pcstackCOMMON:	
  2377  0070                     ?_Timeout_Counter:	
  2378  0070                     ?_set_TimeoutCleared:	
  2379                           ; 0 bytes @ 0x0
  2380                           
  2381  0070                     ?_CC2500_WriteByte:	
  2382                           ; 0 bytes @ 0x0
  2383                           
  2384  0070                     ?_CC2500_WriteCommand:	
  2385                           ; 0 bytes @ 0x0
  2386                           
  2387  0070                     ?_CC2500_PowerRST:	
  2388                           ; 0 bytes @ 0x0
  2389                           
  2390  0070                     ?_CC2500_InitSetREG:	
  2391                           ; 0 bytes @ 0x0
  2392                           
  2393  0070                     ?_CC2500_InitPATable:	
  2394                           ; 0 bytes @ 0x0
  2395                           
  2396  0070                     ?_CC2500_ClearTXFIFO:	
  2397                           ; 0 bytes @ 0x0
  2398                           
  2399  0070                     ?_CC2500_ClearRXFIFO:	
  2400                           ; 0 bytes @ 0x0
  2401                           
  2402  0070                     ?_CC2500_FrequencyCabr:	
  2403                           ; 0 bytes @ 0x0
  2404                           
  2405  0070                     ?_CC2500_SIDLEMode:	
  2406                           ; 0 bytes @ 0x0
  2407                           
  2408  0070                     ?_Fosc_Set:	
  2409                           ; 0 bytes @ 0x0
  2410                           
  2411  0070                     ?_IO_Set:	
  2412                           ; 0 bytes @ 0x0
  2413                           
  2414  0070                     ?_TMR1_Set:	
  2415                           ; 0 bytes @ 0x0
  2416                           
  2417  0070                     ?_UART_Set:	
  2418                           ; 0 bytes @ 0x0
  2419                           
  2420  0070                     ?_TMR1_ISR:	
  2421                           ; 0 bytes @ 0x0
  2422                           
  2423  0070                     ??_TMR1_ISR:	
  2424                           ; 0 bytes @ 0x0
  2425                           
  2426  0070                     ?_UART_ISR:	
  2427                           ; 0 bytes @ 0x0
  2428                           
  2429  0070                     ??_UART_ISR:	
  2430                           ; 0 bytes @ 0x0
  2431                           
  2432  0070                     ??_getch:	
  2433                           ; 0 bytes @ 0x0
  2434                           
  2435  0070                     ?_UART_Receive:	
  2436                           ; 0 bytes @ 0x0
  2437                           
  2438  0070                     ?_UART_Transmit:	
  2439                           ; 0 bytes @ 0x0
  2440                           
  2441  0070                     ?_putch:	
  2442                           ; 0 bytes @ 0x0
  2443                           
  2444  0070                     ?_setTxData:	
  2445                           ; 0 bytes @ 0x0
  2446                           
  2447  0070                     ?_myMain_Initialization:	
  2448                           ; 0 bytes @ 0x0
  2449                           
  2450  0070                     ?_RF_Initialization:	
  2451                           ; 0 bytes @ 0x0
  2452                           
  2453  0070                     ?_myUARTtoRF_Initialization:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0070                     ?_my_MainTimer:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_RF_Main:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_myUARTtoRF_Main:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_Exception_Main:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_setRF_Initialization:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_setRF_Main:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_RF_RxDisable:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_getRxData:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_setLog_Code:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_setControl_Lights_Table:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_CC2500_TxData:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_CC2500_PowerOnInitial:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_Mcu_Initialization:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_ISR:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_UART_Main:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_getch:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_getMain_All_Error_Status:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507  0070                     getMain_All_Error_Status@command:	
  2508                           ; 1 bytes @ 0x0
  2509                           
  2510                           
  2511                           ; 1 bytes @ 0x0
  2512  0070                     	ds	1
  2513  0071                     ??_ISR:	
  2514                           
  2515                           ; 0 bytes @ 0x1
  2516  0071                     	ds	1
  2517  0072                     ??_Timeout_Counter:	
  2518  0072                     ??_set_TimeoutCleared:	
  2519                           ; 0 bytes @ 0x2
  2520                           
  2521  0072                     ??_CC2500_WriteByte:	
  2522                           ; 0 bytes @ 0x2
  2523                           
  2524  0072                     ?_DelayTime_1us:	
  2525                           ; 0 bytes @ 0x2
  2526                           
  2527  0072                     ??_Fosc_Set:	
  2528                           ; 0 bytes @ 0x2
  2529                           
  2530  0072                     ??_IO_Set:	
  2531                           ; 0 bytes @ 0x2
  2532                           
  2533  0072                     ??_TMR1_Set:	
  2534                           ; 0 bytes @ 0x2
  2535                           
  2536  0072                     ??_UART_Set:	
  2537                           ; 0 bytes @ 0x2
  2538                           
  2539  0072                     ??_putch:	
  2540                           ; 0 bytes @ 0x2
  2541                           
  2542  0072                     ??_setTxData:	
  2543                           ; 0 bytes @ 0x2
  2544                           
  2545  0072                     ??_myMain_Initialization:	
  2546                           ; 0 bytes @ 0x2
  2547                           
  2548  0072                     ??_myUARTtoRF_Initialization:	
  2549                           ; 0 bytes @ 0x2
  2550                           
  2551  0072                     ??_my_MainTimer:	
  2552                           ; 0 bytes @ 0x2
  2553                           
  2554  0072                     ??_myUARTtoRF_Main:	
  2555                           ; 0 bytes @ 0x2
  2556                           
  2557  0072                     ??_setRF_Initialization:	
  2558                           ; 0 bytes @ 0x2
  2559                           
  2560  0072                     ??_setLog_Code:	
  2561                           ; 0 bytes @ 0x2
  2562                           
  2563  0072                     ??_Mcu_Initialization:	
  2564                           ; 0 bytes @ 0x2
  2565                           
  2566  0072                     ??_getMain_All_Error_Status:	
  2567                           ; 0 bytes @ 0x2
  2568                           
  2569  0072                     putch@byte:	
  2570                           ; 0 bytes @ 0x2
  2571                           
  2572  0072                     getMain_All_Error_Status@status:	
  2573                           ; 1 bytes @ 0x2
  2574                           
  2575  0072                     DelayTime_1us@count:	
  2576                           ; 1 bytes @ 0x2
  2577                           
  2578                           
  2579                           ; 2 bytes @ 0x2
  2580  0072                     	ds	1
  2581  0073                     ??_UART_Receive:	
  2582  0073                     ??_UART_Transmit:	
  2583                           ; 0 bytes @ 0x3
  2584                           
  2585  0073                     ??_RF_Initialization:	
  2586                           ; 0 bytes @ 0x3
  2587                           
  2588  0073                     ??_Exception_Main:	
  2589                           ; 0 bytes @ 0x3
  2590                           
  2591  0073                     ??_getRxData:	
  2592                           ; 0 bytes @ 0x3
  2593                           
  2594  0073                     ??_setControl_Lights_Table:	
  2595                           ; 0 bytes @ 0x3
  2596                           
  2597  0073                     CC2500_WriteByte@loop_a:	
  2598                           ; 0 bytes @ 0x3
  2599                           
  2600                           
  2601                           ; 1 bytes @ 0x3
  2602  0073                     	ds	1
  2603  0074                     ??_CC2500_WriteCommand:	
  2604  0074                     ??_DelayTime_1us:	
  2605                           ; 0 bytes @ 0x4
  2606                           
  2607  0074                     ?_CC2500_WriteREG:	
  2608                           ; 0 bytes @ 0x4
  2609                           
  2610  0074                     CC2500_WriteREG@value:	
  2611                           ; 0 bytes @ 0x4
  2612                           
  2613  0074                     Exception_Main@error:	
  2614                           ; 1 bytes @ 0x4
  2615                           
  2616  0074                     getRxData@error:	
  2617                           ; 1 bytes @ 0x4
  2618                           
  2619  0074                     DelayTime_1us@i:	
  2620                           ; 1 bytes @ 0x4
  2621                           
  2622  0074                     UART_Transmit@i:	
  2623                           ; 2 bytes @ 0x4
  2624                           
  2625                           
  2626                           ; 2 bytes @ 0x4
  2627  0074                     	ds	1
  2628  0075                     ??_CC2500_WriteREG:	
  2629  0075                     CC2500_WriteCommand@command:	
  2630                           ; 0 bytes @ 0x5
  2631                           
  2632  0075                     UART_Receive@i:	
  2633                           ; 1 bytes @ 0x5
  2634                           
  2635                           
  2636                           ; 2 bytes @ 0x5
  2637  0075                     	ds	1
  2638  0076                     ??_CC2500_ClearTXFIFO:	
  2639  0076                     ??_CC2500_ClearRXFIFO:	
  2640                           ; 0 bytes @ 0x6
  2641                           
  2642  0076                     ??_CC2500_SIDLEMode:	
  2643                           ; 0 bytes @ 0x6
  2644                           
  2645  0076                     ??_RF_RxDisable:	
  2646                           ; 0 bytes @ 0x6
  2647                           
  2648  0076                     ??_CC2500_TxData:	
  2649                           ; 0 bytes @ 0x6
  2650                           
  2651  0076                     CC2500_WriteREG@w_addr:	
  2652                           ; 0 bytes @ 0x6
  2653                           
  2654  0076                     DelayTime_1us@j:	
  2655                           ; 1 bytes @ 0x6
  2656                           
  2657                           
  2658                           ; 2 bytes @ 0x6
  2659  0076                     	ds	1
  2660  0077                     ??_CC2500_InitSetREG:	
  2661  0077                     ??_CC2500_InitPATable:	
  2662                           ; 0 bytes @ 0x7
  2663                           
  2664  0077                     ??_UART_Main:	
  2665                           ; 0 bytes @ 0x7
  2666                           
  2667  0077                     CC2500_TxData@loop_e:	
  2668                           ; 0 bytes @ 0x7
  2669                           
  2670                           
  2671                           ; 1 bytes @ 0x7
  2672  0077                     	ds	1
  2673  0078                     ??_CC2500_PowerRST:	
  2674  0078                     ??_CC2500_FrequencyCabr:	
  2675                           ; 0 bytes @ 0x8
  2676                           
  2677  0078                     ??_setRF_Main:	
  2678                           ; 0 bytes @ 0x8
  2679                           
  2680  0078                     CC2500_InitPATable@temp:	
  2681                           ; 0 bytes @ 0x8
  2682                           
  2683                           
  2684                           ; 1 bytes @ 0x8
  2685  0078                     	ds	1
  2686  0079                     ??_RF_Main:	
  2687  0079                     CC2500_InitPATable@loop_d:	
  2688                           ; 0 bytes @ 0x9
  2689                           
  2690                           
  2691                           ; 1 bytes @ 0x9
  2692  0079                     	ds	1
  2693  007A                     ??_CC2500_PowerOnInitial:	
  2694  007A                     ??_main:	
  2695                           ; 0 bytes @ 0xA
  2696                           
  2697                           
  2698                           	psect	cstackBANK0
  2699  0053                     __pcstackBANK0:	
  2700                           ; 0 bytes @ 0xA
  2701                           
  2702  0053                     CC2500_InitSetREG@temp1:	
  2703  0053                     setRF_Main@loop_f:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706                           
  2707                           ; 1 bytes @ 0x0
  2708  0053                     	ds	1
  2709  0054                     CC2500_InitSetREG@temp2:	
  2710  0054                     setRF_Main@Receive_OK:	
  2711                           ; 1 bytes @ 0x1
  2712                           
  2713                           
  2714                           ; 1 bytes @ 0x1
  2715  0054                     	ds	1
  2716  0055                     CC2500_InitSetREG@loop_c:	
  2717  0055                     setRF_Main@error:	
  2718                           ; 1 bytes @ 0x2
  2719                           
  2720                           
  2721                           ; 1 bytes @ 0x2
  2722  0055                     	ds	1
  2723  0056                     ?_main:	
  2724  0056                     main@argc:	
  2725                           ; 2 bytes @ 0x3
  2726                           
  2727                           
  2728                           ; 2 bytes @ 0x3
  2729  0056                     	ds	2
  2730  0058                     main@argv:	
  2731                           
  2732                           ; 2 bytes @ 0x5
  2733  0058                     	ds	2
  2734                           
  2735                           	psect	maintext
  2736  03F8                     __pmaintext:	
  2737 ;;
  2738 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2739 ;;
  2740 ;; *************** function _main *****************
  2741 ;; Defined at:
  2742 ;;		line 7 in file "../src/Main_B1.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;  argc            2    3[BANK0 ] int 
  2745 ;;  argv            2    5[BANK0 ] PTR PTR unsigned char 
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;		None
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  2    3[BANK0 ] int 
  2750 ;; Registers used:
  2751 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2752 ;; Tracked objects:
  2753 ;;		On entry : 17F/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2757 ;;      Params:         0       4       0       0       0       0       0       0
  2758 ;;      Locals:         0       0       0       0       0       0       0       0
  2759 ;;      Temps:          0       0       0       0       0       0       0       0
  2760 ;;      Totals:         0       4       0       0       0       0       0       0
  2761 ;;Total ram usage:        4 bytes
  2762 ;; Hardware stack levels required when called:    8
  2763 ;; This function calls:
  2764 ;;		_CC2500_PowerOnInitial
  2765 ;;		_Exception_Main
  2766 ;;		_Mcu_Initialization
  2767 ;;		_RF_Initialization
  2768 ;;		_RF_Main
  2769 ;;		_UART_Main
  2770 ;;		_myMain_Initialization
  2771 ;;		_myUARTtoRF_Initialization
  2772 ;;		_myUARTtoRF_Main
  2773 ;;		_my_MainTimer
  2774 ;; This function is called by:
  2775 ;;		Startup code after reset
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           
  2780                           ;psect for function _main
  2781  03F8                     _main:	
  2782                           
  2783                           ;Main_B1.c: 8: myMain_Initialization();
  2784                           
  2785                           ;incstack = 0
  2786                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2787  03F8  3185  25B4  3183   	fcall	_myMain_Initialization
  2788                           
  2789                           ;Main_B1.c: 9: Mcu_Initialization();
  2790  03FB  3185  25C1  3183   	fcall	_Mcu_Initialization
  2791                           
  2792                           ;Main_B1.c: 10: ;;
  2793                           ;Main_B1.c: 11: ;;
  2794                           ;Main_B1.c: 12: ;;
  2795                           ;Main_B1.c: 14: ;;
  2796                           ;Main_B1.c: 15: ;;
  2797                           ;Main_B1.c: 16: ;;
  2798                           ;Main_B1.c: 17: ;;
  2799                           ;Main_B1.c: 18: ;;
  2800                           ;Main_B1.c: 20: ;;
  2801                           ;Main_B1.c: 21: ;;
  2802                           ;Main_B1.c: 22: ;;
  2803                           ;Main_B1.c: 23: ;;
  2804                           ;Main_B1.c: 24: ;;
  2805                           ;Main_B1.c: 25: RF_Initialization();
  2806  03FE  3186  2625  3183   	fcall	_RF_Initialization
  2807                           
  2808                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  2809  0401  3185  2540  3183   	fcall	_CC2500_PowerOnInitial
  2810                           
  2811                           ;Main_B1.c: 27: ;;
  2812                           ;Main_B1.c: 28: myUARTtoRF_Initialization();
  2813  0404  3186  2608  3183   	fcall	_myUARTtoRF_Initialization
  2814  0407                     l682:	
  2815                           ;Main_B1.c: 30: while (1) {
  2816                           
  2817                           
  2818                           ;Main_B1.c: 57: }
  2819                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2820  0407  0020               	movlb	0	; select bank0
  2821  0408  1C3A               	btfss	_Timer1,0
  2822  0409  2C07               	goto	l682
  2823                           
  2824                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2825  040A  103A               	bcf	_Timer1,0
  2826                           
  2827                           ;Main_B1.c: 96: my_MainTimer();
  2828  040B  3183  2375  3183   	fcall	_my_MainTimer
  2829                           
  2830                           ;Main_B1.c: 97: ;;
  2831                           ;Main_B1.c: 98: ;;
  2832                           ;Main_B1.c: 99: UART_Main();
  2833  040E  3184  24A2  3183   	fcall	_UART_Main
  2834                           
  2835                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2836  0411  0020               	movlb	0	; select bank0
  2837  0412  1C20               	btfss	_myMain,0
  2838  0413  2C07               	goto	l682
  2839                           
  2840                           ;Main_B1.c: 101: ;;
  2841                           ;Main_B1.c: 103: ;;
  2842                           ;Main_B1.c: 104: ;;
  2843                           ;Main_B1.c: 106: ;;
  2844                           ;Main_B1.c: 107: ;;
  2845                           ;Main_B1.c: 108: ;;
  2846                           ;Main_B1.c: 109: ;;
  2847                           ;Main_B1.c: 111: ;;
  2848                           ;Main_B1.c: 112: ;;
  2849                           ;Main_B1.c: 113: ;;
  2850                           ;Main_B1.c: 114: ;;
  2851                           ;Main_B1.c: 115: ;;
  2852                           ;Main_B1.c: 117: RF_Main();
  2853  0414  3186  2622  3183   	fcall	_RF_Main
  2854                           
  2855                           ;Main_B1.c: 118: ;;
  2856                           ;Main_B1.c: 119: ;;
  2857                           ;Main_B1.c: 120: myUARTtoRF_Main();
  2858  0417  3186  262B  3183   	fcall	_myUARTtoRF_Main
  2859                           
  2860                           ;Main_B1.c: 121: Exception_Main();
  2861  041A  3185  256A  3183   	fcall	_Exception_Main
  2862  041D  2C07               	goto	l682
  2863  041E                     __end_of_main:	
  2864                           ;Main_B1.c: 128: }
  2865                           ;Main_B1.c: 129: }
  2866                           ;Main_B1.c: 163: }
  2867                           ;Main_B1.c: 164: return (0);
  2868                           ;	Return value of _main is never used
  2869                           
  2870                           
  2871                           	psect	text1
  2872  0375                     __ptext1:	
  2873 ;; *************** function _my_MainTimer *****************
  2874 ;; Defined at:
  2875 ;;		line 185 in file "../src/Main_B1.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;		None
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;		None
  2880 ;; Return value:  Size  Location     Type
  2881 ;;		None               void
  2882 ;; Registers used:
  2883 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2889 ;;      Params:         0       0       0       0       0       0       0       0
  2890 ;;      Locals:         0       0       0       0       0       0       0       0
  2891 ;;      Temps:          1       0       0       0       0       0       0       0
  2892 ;;      Totals:         1       0       0       0       0       0       0       0
  2893 ;;Total ram usage:        1 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; Hardware stack levels required when called:    3
  2896 ;; This function calls:
  2897 ;;		Nothing
  2898 ;; This function is called by:
  2899 ;;		_main
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           
  2904                           ;psect for function _my_MainTimer
  2905  0375                     _my_MainTimer:	
  2906                           
  2907                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  2908                           
  2909                           ;incstack = 0
  2910                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0]
  2911  0375  0020               	movlb	0	; select bank0
  2912  0376  1820               	btfsc	_myMain,0
  2913  0377  2B84               	goto	l3143
  2914                           
  2915                           ;Main_B1.c: 189: myMain.PowerCount++;
  2916  0378  3001               	movlw	1
  2917  0379  00F2               	movwf	??_my_MainTimer
  2918  037A  0872               	movf	??_my_MainTimer,w
  2919  037B  07A1               	addwf	_myMain+1,f
  2920                           
  2921                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  2922  037C  0821               	movf	_myMain+1,w
  2923  037D  3A96               	xorlw	150
  2924  037E  1D03               	skipz
  2925  037F  0008               	return
  2926                           
  2927                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  2928  0380  01A1               	clrf	_myMain+1
  2929                           
  2930                           ;Main_B1.c: 192: myMain.PowerON = 1;
  2931  0381  1420               	bsf	_myMain,0
  2932                           
  2933                           ;Main_B1.c: 197: ;;
  2934                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  2935  0382  1620               	bsf	_myMain,4
  2936                           
  2937                           ;Main_B1.c: 207: }
  2938                           ;Main_B1.c: 208: } else {
  2939  0383  0008               	return
  2940  0384                     l3143:	
  2941                           
  2942                           ;Main_B1.c: 209: myMain.PowerCount++;
  2943  0384  3001               	movlw	1
  2944  0385  00F2               	movwf	??_my_MainTimer
  2945  0386  0872               	movf	??_my_MainTimer,w
  2946  0387  07A1               	addwf	_myMain+1,f
  2947                           
  2948                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  2949  0388  0821               	movf	_myMain+1,w
  2950  0389  3A64               	xorlw	100
  2951  038A  1903               	btfsc	3,2
  2952                           
  2953                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  2954  038B  01A1               	clrf	_myMain+1
  2955                           
  2956                           ;Main_B1.c: 226: }
  2957                           ;Main_B1.c: 228: myMain.Count1++;
  2958  038C  3001               	movlw	1
  2959  038D  07A4               	addwf	_myMain+4,f
  2960  038E  3000               	movlw	0
  2961  038F  3DA5               	addwfc	_myMain+5,f
  2962                           
  2963                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  2964  0390  3004               	movlw	4
  2965  0391  3E20               	addlw	_myMain& (0+255)
  2966  0392  0086               	movwf	6
  2967  0393  0187               	clrf	7
  2968  0394  3F40               	moviw [0]fsr1
  2969  0395  3A64               	xorlw	100
  2970  0396  1D03               	skipz
  2971  0397  2B9A               	goto	u2115
  2972  0398  3F41               	moviw [1]fsr1
  2973  0399  3A00               	xorlw	0
  2974  039A                     u2115:	
  2975  039A  1D03               	skipz
  2976  039B  0008               	return
  2977                           
  2978                           ;Main_B1.c: 230: {
  2979                           ;Main_B1.c: 231: myMain.Count1 = 0;
  2980  039C  01A4               	clrf	_myMain+4
  2981  039D  01A5               	clrf	_myMain+5
  2982                           
  2983                           ;Main_B1.c: 243: if (myMain.Flag) {
  2984  039E  1CA0               	btfss	_myMain,1
  2985  039F  2BA2               	goto	l698
  2986                           
  2987                           ;Main_B1.c: 244: myMain.Flag = 0;
  2988  03A0  10A0               	bcf	_myMain,1
  2989                           
  2990                           ;Main_B1.c: 253: } else {
  2991  03A1  0008               	return
  2992  03A2                     l698:	
  2993                           
  2994                           ;Main_B1.c: 254: myMain.Flag = 1;
  2995  03A2  14A0               	bsf	_myMain,1
  2996  03A3  0008               	return
  2997  03A4                     __end_of_my_MainTimer:	
  2998                           
  2999                           	psect	text2
  3000  062B                     __ptext2:	
  3001 ;; *************** function _myUARTtoRF_Main *****************
  3002 ;; Defined at:
  3003 ;;		line 14 in file "../src/myUARTtoRF.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;		None
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;		None
  3008 ;; Return value:  Size  Location     Type
  3009 ;;		None               void
  3010 ;; Registers used:
  3011 ;;		None
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 0/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3017 ;;      Params:         0       0       0       0       0       0       0       0
  3018 ;;      Locals:         0       0       0       0       0       0       0       0
  3019 ;;      Temps:          0       0       0       0       0       0       0       0
  3020 ;;      Totals:         0       0       0       0       0       0       0       0
  3021 ;;Total ram usage:        0 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; Hardware stack levels required when called:    3
  3024 ;; This function calls:
  3025 ;;		Nothing
  3026 ;; This function is called by:
  3027 ;;		_main
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           
  3032                           ;psect for function _myUARTtoRF_Main
  3033  062B                     _myUARTtoRF_Main:	
  3034                           
  3035                           ;incstack = 0
  3036                           ; Regs used in _myUARTtoRF_Main: []
  3037  062B  0008               	return
  3038  062C                     __end_of_myUARTtoRF_Main:	
  3039                           
  3040                           	psect	text3
  3041  0608                     __ptext3:	
  3042 ;; *************** function _myUARTtoRF_Initialization *****************
  3043 ;; Defined at:
  3044 ;;		line 7 in file "../src/myUARTtoRF.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;		None
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;		None
  3049 ;; Return value:  Size  Location     Type
  3050 ;;		None               void
  3051 ;; Registers used:
  3052 ;;		None
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3058 ;;      Params:         0       0       0       0       0       0       0       0
  3059 ;;      Locals:         0       0       0       0       0       0       0       0
  3060 ;;      Temps:          0       0       0       0       0       0       0       0
  3061 ;;      Totals:         0       0       0       0       0       0       0       0
  3062 ;;Total ram usage:        0 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    3
  3065 ;; This function calls:
  3066 ;;		Nothing
  3067 ;; This function is called by:
  3068 ;;		_main
  3069 ;; This function uses a non-reentrant model
  3070 ;;
  3071                           
  3072                           
  3073                           ;psect for function _myUARTtoRF_Initialization
  3074  0608                     _myUARTtoRF_Initialization:	
  3075                           
  3076                           ;myUARTtoRF.c: 8: RA0 = 0;
  3077                           
  3078                           ;incstack = 0
  3079                           ; Regs used in _myUARTtoRF_Initialization: []
  3080  0608  0020               	movlb	0	; select bank0
  3081  0609  100C               	bcf	12,0	;volatile
  3082                           
  3083                           ;myUARTtoRF.c: 9: RA1 = 1;
  3084  060A  148C               	bsf	12,1	;volatile
  3085                           
  3086                           ;myUARTtoRF.c: 10: RA2 = 1;
  3087  060B  150C               	bsf	12,2	;volatile
  3088  060C  0008               	return
  3089  060D                     __end_of_myUARTtoRF_Initialization:	
  3090                           
  3091                           	psect	text4
  3092  05B4                     __ptext4:	
  3093 ;; *************** function _myMain_Initialization *****************
  3094 ;; Defined at:
  3095 ;;		line 170 in file "../src/Main_B1.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;		None
  3098 ;; Auto vars:     Size  Location     Type
  3099 ;;		None
  3100 ;; Return value:  Size  Location     Type
  3101 ;;		None               void
  3102 ;; Registers used:
  3103 ;;		wreg, fsr1l, fsr1h
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3109 ;;      Params:         0       0       0       0       0       0       0       0
  3110 ;;      Locals:         0       0       0       0       0       0       0       0
  3111 ;;      Temps:          1       0       0       0       0       0       0       0
  3112 ;;      Totals:         1       0       0       0       0       0       0       0
  3113 ;;Total ram usage:        1 bytes
  3114 ;; Hardware stack levels used:    1
  3115 ;; Hardware stack levels required when called:    3
  3116 ;; This function calls:
  3117 ;;		Nothing
  3118 ;; This function is called by:
  3119 ;;		_main
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           
  3124                           ;psect for function _myMain_Initialization
  3125  05B4                     _myMain_Initialization:	
  3126                           
  3127                           ;Main_B1.c: 173: product = &_product;
  3128                           
  3129                           ;incstack = 0
  3130                           ; Regs used in _myMain_Initialization: [wregfsr1]
  3131  05B4  30A0               	movlw	__product& (0+255)
  3132  05B5  00F2               	movwf	??_myMain_Initialization
  3133  05B6  0872               	movf	??_myMain_Initialization,w
  3134  05B7  00FB               	movwf	_product
  3135                           
  3136                           ;Main_B1.c: 174: product->Data[20] = 0xaa;
  3137  05B8  30AA               	movlw	170
  3138  05B9  00F2               	movwf	??_myMain_Initialization
  3139  05BA  087B               	movf	_product,w
  3140  05BB  3E14               	addlw	20
  3141  05BC  0086               	movwf	6
  3142  05BD  0187               	clrf	7
  3143  05BE  0872               	movf	??_myMain_Initialization,w
  3144  05BF  0081               	movwf	1
  3145  05C0  0008               	return
  3146  05C1                     __end_of_myMain_Initialization:	
  3147                           
  3148                           	psect	text5
  3149  04A2                     __ptext5:	
  3150 ;; *************** function _UART_Main *****************
  3151 ;; Defined at:
  3152 ;;		line 775 in file "../src/MCU_B1.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;		None
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;		None
  3157 ;; Return value:  Size  Location     Type
  3158 ;;		None               void
  3159 ;; Registers used:
  3160 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3166 ;;      Params:         0       0       0       0       0       0       0       0
  3167 ;;      Locals:         0       0       0       0       0       0       0       0
  3168 ;;      Temps:          1       0       0       0       0       0       0       0
  3169 ;;      Totals:         1       0       0       0       0       0       0       0
  3170 ;;Total ram usage:        1 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    5
  3173 ;; This function calls:
  3174 ;;		_UART_Receive
  3175 ;;		_UART_Transmit
  3176 ;; This function is called by:
  3177 ;;		_main
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           
  3182                           ;psect for function _UART_Main
  3183  04A2                     _UART_Main:	
  3184                           
  3185                           ;MCU_B1.c: 776: if (UART.RxGO == 1) {
  3186                           
  3187                           ;incstack = 0
  3188                           ; Regs used in _UART_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3189  04A2  0020               	movlb	0	; select bank0
  3190  04A3  1CD2               	btfss	_UART+11,1
  3191  04A4  2CAA               	goto	l585
  3192                           
  3193                           ;MCU_B1.c: 777: UART.RxGO = 0;
  3194  04A5  10D2               	bcf	_UART+11,1
  3195                           
  3196                           ;MCU_B1.c: 778: UART_Receive();
  3197  04A6  3183  2345  3184   	fcall	_UART_Receive
  3198                           
  3199                           ;MCU_B1.c: 782: } else {
  3200  04A9  2CB0               	goto	l3795
  3201  04AA                     l585:	
  3202                           
  3203                           ;MCU_B1.c: 783: if (UART.TxGO == 1) {
  3204  04AA  1C52               	btfss	_UART+11,0
  3205  04AB  2CB0               	goto	l3795
  3206                           
  3207                           ;MCU_B1.c: 784: UART.TxGO = 0;
  3208  04AC  1052               	bcf	_UART+11,0
  3209                           
  3210                           ;MCU_B1.c: 785: UART_Transmit();
  3211  04AD  3184  24F8  3184   	fcall	_UART_Transmit
  3212  04B0                     l3795:	
  3213                           
  3214                           ;MCU_B1.c: 786: }
  3215                           ;MCU_B1.c: 787: }
  3216                           ;MCU_B1.c: 788: if (UART.RxAllow == 1) {
  3217  04B0  0020               	movlb	0	; select bank0
  3218  04B1  1E52               	btfss	_UART+11,4
  3219  04B2  0008               	return
  3220                           
  3221                           ;MCU_B1.c: 789: UART.Time++;
  3222  04B3  3001               	movlw	1
  3223  04B4  00F7               	movwf	??_UART_Main
  3224  04B5  0877               	movf	??_UART_Main,w
  3225  04B6  07D1               	addwf	_UART+10,f
  3226                           
  3227                           ;MCU_B1.c: 790: if (UART.Time == 5) {
  3228  04B7  0851               	movf	_UART+10,w
  3229  04B8  3A05               	xorlw	5
  3230  04B9  1D03               	skipz
  3231  04BA  0008               	return
  3232                           
  3233                           ;MCU_B1.c: 791: UART.Time = 0;
  3234  04BB  01D1               	clrf	_UART+10
  3235                           
  3236                           ;MCU_B1.c: 792: UART.RxAllow = 0;
  3237  04BC  1252               	bcf	_UART+11,4
  3238                           
  3239                           ;MCU_B1.c: 793: UART.Count = 0;
  3240  04BD  01D0               	clrf	_UART+9
  3241  04BE  0008               	return
  3242  04BF                     __end_of_UART_Main:	
  3243                           
  3244                           	psect	text6
  3245  04F8                     __ptext6:	
  3246 ;; *************** function _UART_Transmit *****************
  3247 ;; Defined at:
  3248 ;;		line 798 in file "../src/MCU_B1.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;		None
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  i               2    4[COMMON] int 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;		None               void
  3255 ;; Registers used:
  3256 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3262 ;;      Params:         0       0       0       0       0       0       0       0
  3263 ;;      Locals:         2       0       0       0       0       0       0       0
  3264 ;;      Temps:          1       0       0       0       0       0       0       0
  3265 ;;      Totals:         3       0       0       0       0       0       0       0
  3266 ;;Total ram usage:        3 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    4
  3269 ;; This function calls:
  3270 ;;		_putch
  3271 ;; This function is called by:
  3272 ;;		_UART_Main
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           
  3277                           ;psect for function _UART_Transmit
  3278  04F8                     _UART_Transmit:	
  3279                           
  3280                           ;MCU_B1.c: 802: for (int i = 0; i < 9; i++) {
  3281                           
  3282                           ;incstack = 0
  3283                           ; Regs used in _UART_Transmit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3284  04F8  01F4               	clrf	UART_Transmit@i
  3285  04F9  01F5               	clrf	UART_Transmit@i+1
  3286  04FA                     L1:	
  3287  04FA  0875               	movf	UART_Transmit@i+1,w
  3288  04FB  3A80               	xorlw	128
  3289  04FC  00F3               	movwf	??_UART_Transmit
  3290  04FD  3080               	movlw	128
  3291  04FE  0273               	subwf	??_UART_Transmit,w
  3292  04FF  1D03               	skipz
  3293  0500  2D03               	goto	u1695
  3294  0501  3009               	movlw	9
  3295  0502  0274               	subwf	UART_Transmit@i,w
  3296  0503                     u1695:	
  3297  0503  1803               	btfsc	3,0
  3298  0504  0008               	return
  3299                           
  3300                           ;MCU_B1.c: 804: putch(UART.Data[i]);
  3301  0505  0874               	movf	UART_Transmit@i,w
  3302  0506  3E47               	addlw	_UART& (0+255)
  3303  0507  0086               	movwf	6
  3304  0508  0187               	clrf	7
  3305  0509  0801               	movf	1,w
  3306  050A  3185  25EE  3184   	fcall	_putch
  3307  050D  3001               	movlw	1
  3308  050E  07F4               	addwf	UART_Transmit@i,f
  3309  050F  3000               	movlw	0
  3310  0510  3DF5               	addwfc	UART_Transmit@i+1,f
  3311  0511  2CFA               	goto	L1
  3312  0512                     __end_of_UART_Transmit:	
  3313                           
  3314                           	psect	text7
  3315  05EE                     __ptext7:	
  3316 ;; *************** function _putch *****************
  3317 ;; Defined at:
  3318 ;;		line 896 in file "../src/MCU_B1.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  byte            1    wreg     unsigned char 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  byte            1    2[COMMON] unsigned char 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;		None               void
  3325 ;; Registers used:
  3326 ;;		wreg
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3332 ;;      Params:         0       0       0       0       0       0       0       0
  3333 ;;      Locals:         1       0       0       0       0       0       0       0
  3334 ;;      Temps:          0       0       0       0       0       0       0       0
  3335 ;;      Totals:         1       0       0       0       0       0       0       0
  3336 ;;Total ram usage:        1 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    3
  3339 ;; This function calls:
  3340 ;;		Nothing
  3341 ;; This function is called by:
  3342 ;;		_UART_Transmit
  3343 ;;		_getche
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           
  3348                           ;psect for function _putch
  3349  05EE                     _putch:	
  3350                           
  3351                           ;incstack = 0
  3352                           ; Regs used in _putch: [wreg]
  3353                           ;putch@byte stored from wreg
  3354  05EE  00F2               	movwf	putch@byte
  3355  05EF                     l606:	
  3356                           ;MCU_B1.c: 899: continue;
  3357                           
  3358                           ;MCU_B1.c: 898: while (!TXIF)
  3359                           
  3360  05EF  0020               	movlb	0	; select bank0
  3361  05F0  1E11               	btfss	17,4	;volatile
  3362  05F1  2DEF               	goto	l606
  3363                           
  3364                           ;MCU_B1.c: 900: TXREG = byte;
  3365  05F2  0872               	movf	putch@byte,w
  3366  05F3  0023               	movlb	3	; select bank3
  3367  05F4  009A               	movwf	26	;volatile
  3368  05F5  0008               	return
  3369  05F6                     __end_of_putch:	
  3370                           
  3371                           	psect	text8
  3372  0345                     __ptext8:	
  3373 ;; *************** function _UART_Receive *****************
  3374 ;; Defined at:
  3375 ;;		line 820 in file "../src/MCU_B1.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;		None
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;  i               2    5[COMMON] int 
  3380 ;; Return value:  Size  Location     Type
  3381 ;;		None               void
  3382 ;; Registers used:
  3383 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3389 ;;      Params:         0       0       0       0       0       0       0       0
  3390 ;;      Locals:         2       0       0       0       0       0       0       0
  3391 ;;      Temps:          2       0       0       0       0       0       0       0
  3392 ;;      Totals:         4       0       0       0       0       0       0       0
  3393 ;;Total ram usage:        4 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    4
  3396 ;; This function calls:
  3397 ;;		_setTxData
  3398 ;; This function is called by:
  3399 ;;		_UART_Main
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           
  3404                           ;psect for function _UART_Receive
  3405  0345                     _UART_Receive:	
  3406                           
  3407                           ;MCU_B1.c: 826: for (int i = 0; i < 9 - 1; i++) {
  3408                           
  3409                           ;incstack = 0
  3410                           ; Regs used in _UART_Receive: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3411  0345  01F5               	clrf	UART_Receive@i
  3412  0346  01F6               	clrf	UART_Receive@i+1
  3413  0347  0876               	movf	UART_Receive@i+1,w
  3414  0348  3A80               	xorlw	128
  3415  0349  00F3               	movwf	??_UART_Receive
  3416  034A  3080               	movlw	128
  3417  034B  0273               	subwf	??_UART_Receive,w
  3418  034C  3008               	movlw	8
  3419  034D  1903               	btfsc	3,2
  3420  034E  0275               	subwf	UART_Receive@i,w
  3421  034F  1803               	btfsc	3,0
  3422  0350  2B6E               	goto	l3683
  3423  0351                     l3677:	
  3424                           
  3425                           ;MCU_B1.c: 827: product->Data[i + 2] = UART.Data[i];
  3426  0351  0875               	movf	UART_Receive@i,w
  3427  0352  3E47               	addlw	_UART& (0+255)
  3428  0353  0086               	movwf	6
  3429  0354  0187               	clrf	7
  3430  0355  0801               	movf	1,w
  3431  0356  00F3               	movwf	??_UART_Receive
  3432  0357  0875               	movf	UART_Receive@i,w
  3433  0358  3E02               	addlw	2
  3434  0359  077B               	addwf	_product,w
  3435  035A  00F4               	movwf	??_UART_Receive+1
  3436  035B  0874               	movf	??_UART_Receive+1,w
  3437  035C  0086               	movwf	6
  3438  035D  0187               	clrf	7
  3439  035E  0873               	movf	??_UART_Receive,w
  3440  035F  0081               	movwf	1
  3441  0360  3001               	movlw	1
  3442  0361  07F5               	addwf	UART_Receive@i,f
  3443  0362  3000               	movlw	0
  3444  0363  3DF6               	addwfc	UART_Receive@i+1,f
  3445  0364  0876               	movf	UART_Receive@i+1,w
  3446  0365  3A80               	xorlw	128
  3447  0366  00F3               	movwf	??_UART_Receive
  3448  0367  3080               	movlw	128
  3449  0368  0273               	subwf	??_UART_Receive,w
  3450  0369  3008               	movlw	8
  3451  036A  1903               	btfsc	3,2
  3452  036B  0275               	subwf	UART_Receive@i,w
  3453  036C  1C03               	skipc
  3454  036D  2B51               	goto	l3677
  3455  036E                     l3683:	
  3456                           
  3457                           ;MCU_B1.c: 828: }
  3458                           ;MCU_B1.c: 840: setTxData();
  3459  036E  3181  2165         	fcall	_setTxData
  3460                           
  3461                           ;MCU_B1.c: 842: RA1 = RA1 == 1 ? 0 : 1;
  3462  0370  3002               	movlw	2
  3463  0371  0020               	movlb	0	; select bank0
  3464  0372  068C               	xorwf	12,f
  3465                           
  3466                           ;MCU_B1.c: 847: myMain.Test = 1;
  3467  0373  1720               	bsf	_myMain,6
  3468  0374  0008               	return
  3469  0375                     __end_of_UART_Receive:	
  3470                           
  3471                           	psect	text9
  3472  0622                     __ptext9:	
  3473 ;; *************** function _RF_Main *****************
  3474 ;; Defined at:
  3475 ;;		line 16 in file "../src/RF_Control_B1.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;		None
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;		None
  3480 ;; Return value:  Size  Location     Type
  3481 ;;		None               void
  3482 ;; Registers used:
  3483 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3489 ;;      Params:         0       0       0       0       0       0       0       0
  3490 ;;      Locals:         0       0       0       0       0       0       0       0
  3491 ;;      Temps:          0       0       0       0       0       0       0       0
  3492 ;;      Totals:         0       0       0       0       0       0       0       0
  3493 ;;Total ram usage:        0 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:    7
  3496 ;; This function calls:
  3497 ;;		_setRF_Main
  3498 ;; This function is called by:
  3499 ;;		_main
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           
  3504                           ;psect for function _RF_Main
  3505  0622                     _RF_Main:	
  3506                           
  3507                           ;RF_Control_B1.c: 18: setRF_Main();
  3508                           
  3509                           ;incstack = 0
  3510                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3511  0622  3180  2035         	fcall	_setRF_Main
  3512  0624  0008               	return
  3513  0625                     __end_of_RF_Main:	
  3514                           
  3515                           	psect	text10
  3516  0035                     __ptext10:	
  3517 ;; *************** function _setRF_Main *****************
  3518 ;; Defined at:
  3519 ;;		line 52 in file "../src/RF_Control_B1.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;		None
  3522 ;; Auto vars:     Size  Location     Type
  3523 ;;  error           1    2[BANK0 ] unsigned char 
  3524 ;;  Receive_OK      1    1[BANK0 ] unsigned char 
  3525 ;;  loop_f          1    0[BANK0 ] unsigned char 
  3526 ;; Return value:  Size  Location     Type
  3527 ;;		None               void
  3528 ;; Registers used:
  3529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3535 ;;      Params:         0       0       0       0       0       0       0       0
  3536 ;;      Locals:         0       3       0       0       0       0       0       0
  3537 ;;      Temps:          1       0       0       0       0       0       0       0
  3538 ;;      Totals:         1       3       0       0       0       0       0       0
  3539 ;;Total ram usage:        4 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    6
  3542 ;; This function calls:
  3543 ;;		_CC2500_TxData
  3544 ;;		_RF_RxDisable
  3545 ;;		_getMain_All_Error_Status
  3546 ;;		_getRxData
  3547 ;; This function is called by:
  3548 ;;		_RF_Main
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           
  3553                           ;psect for function _setRF_Main
  3554  0035                     _setRF_Main:	
  3555                           
  3556                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  3557                           
  3558                           ;incstack = 0
  3559                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3560  0035  0020               	movlb	0	; select bank0
  3561  0036  01D3               	clrf	setRF_Main@loop_f
  3562  0037  01D4               	clrf	setRF_Main@Receive_OK
  3563  0038  01D5               	clrf	setRF_Main@error
  3564                           
  3565                           ;RF_Control_B1.c: 58: if (0 == 0) {
  3566  0039  1C2E               	btfss	_RF1,0
  3567  003A  28DB               	goto	l980
  3568                           
  3569                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  3570  003B  3000               	movlw	0
  3571  003C  3186  2628  3180   	fcall	_getMain_All_Error_Status
  3572  003F  3800               	iorlw	0
  3573  0040  1D03               	skipz
  3574  0041  2842               	goto	l982
  3575  0042                     l982:	
  3576                           ;RF_Control_B1.c: 65: } else {
  3577                           
  3578                           ;RF_Control_B1.c: 63: RF1.Key = 0;
  3579                           
  3580                           
  3581                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  3582  0042  0020               	movlb	0	; select bank0
  3583  0043  13AE               	bcf	_RF1,7
  3584                           
  3585                           ;RF_Control_B1.c: 70: }
  3586                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  3587  0044  1BAE               	btfsc	_RF1,7
  3588  0045  1B2E               	btfsc	_RF1,6
  3589  0046  284C               	goto	l984
  3590                           
  3591                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  3592  0047  01B0               	clrf	_RF1+2
  3593  0048  01B1               	clrf	_RF1+3
  3594                           
  3595                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  3596  0049  14AF               	bsf	_RF1+1,1
  3597                           
  3598                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  3599  004A  11AE               	bcf	_RF1,3
  3600                           
  3601                           ;RF_Control_B1.c: 76: } else {
  3602  004B  0008               	return
  3603  004C                     l984:	
  3604                           
  3605                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  3606  004C  18AF               	btfsc	_RF1+1,1
  3607  004D  1B2E               	btfsc	_RF1,6
  3608  004E  2863               	goto	l3715
  3609                           
  3610                           ;RF_Control_B1.c: 78: RF1.Count++;
  3611  004F  3001               	movlw	1
  3612  0050  07B0               	addwf	_RF1+2,f
  3613  0051  3000               	movlw	0
  3614  0052  3DB1               	addwfc	_RF1+3,f
  3615                           
  3616                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  3617  0053  3002               	movlw	2
  3618  0054  3E2E               	addlw	_RF1& (0+255)
  3619  0055  0086               	movwf	6
  3620  0056  0187               	clrf	7
  3621  0057  3F40               	moviw [0]fsr1
  3622  0058  0635               	xorwf	_RF1+7,w
  3623  0059  1D03               	skipz
  3624  005A  285D               	goto	u2855
  3625  005B  3F41               	moviw [1]fsr1
  3626  005C  0636               	xorwf	_RF1+8,w
  3627  005D                     u2855:	
  3628  005D  1D03               	skipz
  3629  005E  28A8               	goto	l988
  3630                           
  3631                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  3632  005F  01B0               	clrf	_RF1+2
  3633  0060  01B1               	clrf	_RF1+3
  3634                           
  3635                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  3636  0061  10AF               	bcf	_RF1+1,1
  3637                           
  3638                           ;RF_Control_B1.c: 82: }
  3639                           ;RF_Control_B1.c: 83: } else {
  3640  0062  28A8               	goto	l988
  3641  0063                     l3715:	
  3642                           
  3643                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  3644  0063  01B0               	clrf	_RF1+2
  3645  0064  01B1               	clrf	_RF1+3
  3646                           
  3647                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  3648  0065  10AF               	bcf	_RF1+1,1
  3649                           
  3650                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  3651  0066  192E               	btfsc	_RF1,2
  3652  0067  1B2E               	btfsc	_RF1,6
  3653  0068  2877               	goto	l989
  3654                           
  3655                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  3656  0069  112E               	bcf	_RF1,2
  3657                           
  3658                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  3659  006A  11AE               	bcf	_RF1,3
  3660                           
  3661                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  3662  006B  10AE               	bcf	_RF1,1
  3663                           
  3664                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  3665  006C  300A               	movlw	10
  3666  006D  00B5               	movwf	_RF1+7
  3667  006E  3000               	movlw	0
  3668  006F  00B6               	movwf	_RF1+8
  3669                           
  3670                           ;RF_Control_B1.c: 95: RF_RxDisable();
  3671  0070  3185  25A5  3180   	fcall	_RF_RxDisable
  3672                           
  3673                           ;RF_Control_B1.c: 102: CC2500_TxData();
  3674  0073  3182  2266  3180   	fcall	_CC2500_TxData
  3675                           
  3676                           ;RF_Control_B1.c: 104: } else {
  3677  0076  28A8               	goto	l988
  3678  0077                     l989:	
  3679                           
  3680                           ;RF_Control_B1.c: 106: if (RF1.RxStatus == 1) {
  3681  0077  19AE               	btfsc	_RF1,3
  3682                           
  3683                           ;RF_Control_B1.c: 110: if (RF1.ReceiveGO == 1) {
  3684  0078  1CAE               	btfss	_RF1,1
  3685  0079  28A8               	goto	l988
  3686                           
  3687                           ;RF_Control_B1.c: 111: RF1.ReceiveGO = 0;
  3688  007A  10AE               	bcf	_RF1,1
  3689                           
  3690                           ;RF_Control_B1.c: 112: RF1.Correction = 0;
  3691  007B  12AF               	bcf	_RF1+1,5
  3692                           
  3693                           ;RF_Control_B1.c: 113: RF1.CorrectionCounter = 0;
  3694  007C  01B8               	clrf	_RF1+10
  3695  007D  01B9               	clrf	_RF1+11
  3696                           
  3697                           ;RF_Control_B1.c: 124: getRxData();
  3698  007E  3180  20DF  3180   	fcall	_getRxData
  3699                           
  3700                           ;RF_Control_B1.c: 125: RF1.Run = 1;
  3701  0081  0020               	movlb	0	; select bank0
  3702  0082  14AF               	bsf	_RF1+1,1
  3703                           
  3704                           ;RF_Control_B1.c: 127: if (RF1.Checked == 1) {
  3705  0083  1DAF               	btfss	_RF1+1,3
  3706  0084  2892               	goto	l3749
  3707                           
  3708                           ;RF_Control_B1.c: 128: if (RF1.RunTime > 10) {
  3709  0085  3000               	movlw	0
  3710  0086  0236               	subwf	_RF1+8,w
  3711  0087  300B               	movlw	11
  3712  0088  1903               	skipnz
  3713  0089  0235               	subwf	_RF1+7,w
  3714  008A  1C03               	skipc
  3715  008B  2890               	goto	l3747
  3716                           
  3717                           ;RF_Control_B1.c: 129: RF1.RunTime = 10;
  3718  008C  300A               	movlw	10
  3719  008D  00B5               	movwf	_RF1+7
  3720  008E  3000               	movlw	0
  3721  008F  00B6               	movwf	_RF1+8
  3722  0090                     l3747:	
  3723                           
  3724                           ;RF_Control_B1.c: 130: }
  3725                           ;RF_Control_B1.c: 131: RF1.CheckCount = 0;
  3726  0090  01B2               	clrf	_RF1+4
  3727                           
  3728                           ;RF_Control_B1.c: 132: } else {
  3729  0091  28A8               	goto	l988
  3730  0092                     l3749:	
  3731                           
  3732                           ;RF_Control_B1.c: 133: RF1.CheckCount++;
  3733  0092  3001               	movlw	1
  3734  0093  00F8               	movwf	??_setRF_Main
  3735  0094  0878               	movf	??_setRF_Main,w
  3736  0095  07B2               	addwf	_RF1+4,f
  3737                           
  3738                           ;RF_Control_B1.c: 134: if (RF1.CheckCount == 2) {
  3739  0096  0832               	movf	_RF1+4,w
  3740  0097  3A02               	xorlw	2
  3741  0098  1D03               	skipz
  3742  0099  28A8               	goto	l988
  3743                           
  3744                           ;RF_Control_B1.c: 135: RF1.CheckCount = 0;
  3745  009A  01B2               	clrf	_RF1+4
  3746                           
  3747                           ;RF_Control_B1.c: 136: RF1.CheckedCounter = 0;
  3748  009B  01B3               	clrf	_RF1+5
  3749  009C  01B4               	clrf	_RF1+6
  3750                           
  3751                           ;RF_Control_B1.c: 137: if (RF1.RunTime < 200) {
  3752  009D  3000               	movlw	0
  3753  009E  0236               	subwf	_RF1+8,w
  3754  009F  30C8               	movlw	200
  3755  00A0  1903               	skipnz
  3756  00A1  0235               	subwf	_RF1+7,w
  3757  00A2  1803               	skipnc
  3758  00A3  28A8               	goto	l988
  3759                           
  3760                           ;RF_Control_B1.c: 138: RF1.RunTime += 10;
  3761  00A4  300A               	movlw	10
  3762  00A5  07B5               	addwf	_RF1+7,f
  3763  00A6  3000               	movlw	0
  3764  00A7  3DB6               	addwfc	_RF1+8,f
  3765  00A8                     l988:	
  3766                           ;RF_Control_B1.c: 139: }
  3767                           ;RF_Control_B1.c: 140: }
  3768                           ;RF_Control_B1.c: 141: }
  3769                           ;RF_Control_B1.c: 142: }
  3770                           ;RF_Control_B1.c: 143: } else {
  3771                           
  3772                           
  3773                           ;RF_Control_B1.c: 155: }
  3774                           ;RF_Control_B1.c: 156: }
  3775                           ;RF_Control_B1.c: 157: }
  3776                           ;RF_Control_B1.c: 158: if (RF1.RxStatus == 1) {
  3777  00A8  0020               	movlb	0	; select bank0
  3778  00A9  1DAE               	btfss	_RF1,3
  3779  00AA  28C9               	goto	l3769
  3780                           
  3781                           ;RF_Control_B1.c: 159: RF1.CheckedCounter++;
  3782  00AB  3001               	movlw	1
  3783  00AC  07B3               	addwf	_RF1+5,f
  3784  00AD  3000               	movlw	0
  3785  00AE  3DB4               	addwfc	_RF1+6,f
  3786                           
  3787                           ;RF_Control_B1.c: 160: if (RF1.CheckedCounter == 100) {
  3788  00AF  3005               	movlw	5
  3789  00B0  3E2E               	addlw	_RF1& (0+255)
  3790  00B1  0086               	movwf	6
  3791  00B2  0187               	clrf	7
  3792  00B3  3F40               	moviw [0]fsr1
  3793  00B4  3A64               	xorlw	100
  3794  00B5  1D03               	skipz
  3795  00B6  28B9               	goto	u2955
  3796  00B7  3F41               	moviw [1]fsr1
  3797  00B8  3A00               	xorlw	0
  3798  00B9                     u2955:	
  3799  00B9  1D03               	skipz
  3800  00BA  28C9               	goto	l3769
  3801                           
  3802                           ;RF_Control_B1.c: 161: RF1.CheckedCounter = 0;
  3803  00BB  01B3               	clrf	_RF1+5
  3804  00BC  01B4               	clrf	_RF1+6
  3805                           
  3806                           ;RF_Control_B1.c: 162: RF1.CheckCount = 0;
  3807  00BD  01B2               	clrf	_RF1+4
  3808                           
  3809                           ;RF_Control_B1.c: 163: if (RF1.RunTime > 10) {
  3810  00BE  3000               	movlw	0
  3811  00BF  0236               	subwf	_RF1+8,w
  3812  00C0  300B               	movlw	11
  3813  00C1  1903               	skipnz
  3814  00C2  0235               	subwf	_RF1+7,w
  3815  00C3  1C03               	skipc
  3816  00C4  28C9               	goto	l3769
  3817                           
  3818                           ;RF_Control_B1.c: 164: RF1.RunTime -= 10;
  3819  00C5  300A               	movlw	10
  3820  00C6  02B5               	subwf	_RF1+7,f
  3821  00C7  3000               	movlw	0
  3822  00C8  3BB6               	subwfb	_RF1+8,f
  3823  00C9                     l3769:	
  3824                           
  3825                           ;RF_Control_B1.c: 165: }
  3826                           ;RF_Control_B1.c: 166: }
  3827                           ;RF_Control_B1.c: 167: }
  3828                           ;RF_Control_B1.c: 168: if (RF1.Correction == 1) {
  3829  00C9  1EAF               	btfss	_RF1+1,5
  3830  00CA  0008               	return
  3831                           
  3832                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter++;
  3833  00CB  3001               	movlw	1
  3834  00CC  07B8               	addwf	_RF1+10,f
  3835  00CD  3000               	movlw	0
  3836  00CE  3DB9               	addwfc	_RF1+11,f
  3837                           
  3838                           ;RF_Control_B1.c: 170: if (RF1.CorrectionCounter >= 6000) {
  3839  00CF  3017               	movlw	23
  3840  00D0  0239               	subwf	_RF1+11,w
  3841  00D1  3070               	movlw	112
  3842  00D2  1903               	skipnz
  3843  00D3  0238               	subwf	_RF1+10,w
  3844  00D4  1C03               	skipc
  3845  00D5  0008               	return
  3846                           
  3847                           ;RF_Control_B1.c: 171: RF1.CorrectionCounter = 0;
  3848  00D6  01B8               	clrf	_RF1+10
  3849  00D7  01B9               	clrf	_RF1+11
  3850                           
  3851                           ;RF_Control_B1.c: 172: RF_RxDisable();
  3852  00D8  3185  25A5         	fcall	_RF_RxDisable
  3853                           
  3854                           ;RF_Control_B1.c: 173: }
  3855                           ;RF_Control_B1.c: 174: }
  3856                           ;RF_Control_B1.c: 175: }
  3857                           ;RF_Control_B1.c: 176: }
  3858                           ;RF_Control_B1.c: 183: } else {
  3859  00DA  0008               	return
  3860  00DB                     l980:	
  3861                           
  3862                           ;RF_Control_B1.c: 184: if (myMain.PowerON == 1) {
  3863  00DB  1C20               	btfss	_myMain,0
  3864  00DC  0008               	return
  3865                           
  3866                           ;RF_Control_B1.c: 185: RF1.Enable = 1;
  3867  00DD  142E               	bsf	_RF1,0
  3868  00DE  0008               	return
  3869  00DF                     __end_of_setRF_Main:	
  3870                           
  3871                           	psect	text11
  3872  00DF                     __ptext11:	
  3873 ;; *************** function _getRxData *****************
  3874 ;; Defined at:
  3875 ;;		line 279 in file "../src/RF_Control_B1.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;		None
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;  error           1    4[COMMON] unsigned char 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;		None               void
  3882 ;; Registers used:
  3883 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3889 ;;      Params:         0       0       0       0       0       0       0       0
  3890 ;;      Locals:         1       0       0       0       0       0       0       0
  3891 ;;      Temps:          1       0       0       0       0       0       0       0
  3892 ;;      Totals:         2       0       0       0       0       0       0       0
  3893 ;;Total ram usage:        2 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    5
  3896 ;; This function calls:
  3897 ;;		_getMain_All_Error_Status
  3898 ;;		_setControl_Lights_Table
  3899 ;;		_setLog_Code
  3900 ;;		_setTxData
  3901 ;; This function is called by:
  3902 ;;		_setRF_Main
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           
  3907                           ;psect for function _getRxData
  3908  00DF                     _getRxData:	
  3909                           
  3910                           ;RF_Control_B1.c: 280: char error = getMain_All_Error_Status(0);
  3911                           
  3912                           ;incstack = 0
  3913                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3914  00DF  3000               	movlw	0
  3915  00E0  3186  2628  3180   	fcall	_getMain_All_Error_Status
  3916  00E3  00F3               	movwf	??_getRxData
  3917  00E4  0873               	movf	??_getRxData,w
  3918  00E5  00F4               	movwf	getRxData@error
  3919                           
  3920                           ;RF_Control_B1.c: 281: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  3921  00E6  0021               	movlb	1	; select bank1
  3922  00E7  0840               	movf	_RF_Data^(0+128),w
  3923  00E8  3AAA               	xorlw	170
  3924  00E9  1D03               	skipz
  3925  00EA  2901               	goto	l3553
  3926  00EB  0841               	movf	(_RF_Data^(0+128)+1),w
  3927  00EC  3A01               	xorlw	1
  3928  00ED  1D03               	skipz
  3929  00EE  2901               	goto	l3553
  3930                           
  3931                           ;RF_Control_B1.c: 283: product->Data[2] = 0x55;
  3932  00EF  3055               	movlw	85
  3933  00F0  00F3               	movwf	??_getRxData
  3934  00F1  087B               	movf	_product,w
  3935  00F2  3E02               	addlw	2
  3936  00F3  0086               	movwf	6
  3937  00F4  0187               	clrf	7
  3938  00F5  0873               	movf	??_getRxData,w
  3939  00F6  0081               	movwf	1
  3940                           
  3941                           ;RF_Control_B1.c: 284: setTxData();
  3942  00F7  3181  2165         	fcall	_setTxData
  3943                           
  3944                           ;RF_Control_B1.c: 285: RF1.RunTime = 10;
  3945  00F9  300A               	movlw	10
  3946  00FA  0020               	movlb	0	; select bank0
  3947  00FB  00B5               	movwf	_RF1+7
  3948  00FC  3000               	movlw	0
  3949  00FD  00B6               	movwf	_RF1+8
  3950                           
  3951                           ;RF_Control_B1.c: 288: RA1 = RA1 == 1 ? 0 : 1;
  3952  00FE  3002               	movlw	2
  3953  00FF  068C               	xorwf	12,f
  3954                           
  3955                           ;RF_Control_B1.c: 291: } else {
  3956  0100  0008               	return
  3957  0101                     l3553:	
  3958                           
  3959                           ;RF_Control_B1.c: 293: if (error == 0) {
  3960  0101  08F4               	movf	getRxData@error,f
  3961  0102  1D03               	skipz
  3962  0103  0008               	return
  3963                           
  3964                           ;RF_Control_B1.c: 294: if (RF1.Learn == 1) {
  3965  0104  0020               	movlb	0	; select bank0
  3966  0105  1F2E               	btfss	_RF1,6
  3967  0106  2917               	goto	l3565
  3968                           
  3969                           ;RF_Control_B1.c: 295: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  3970  0107  0021               	movlb	1	; select bank1
  3971  0108  08C0               	movf	_RF_Data^(0+128),f
  3972  0109  1D03               	skipz
  3973  010A  2914               	goto	l1030
  3974  010B  0841               	movf	(_RF_Data^(0+128)+1),w
  3975  010C  3A64               	xorlw	100
  3976  010D  1D03               	skipz
  3977  010E  2914               	goto	l1030
  3978                           
  3979                           ;RF_Control_B1.c: 296: setLog_Code();
  3980  010F  3184  24DC         	fcall	_setLog_Code
  3981                           
  3982                           ;RF_Control_B1.c: 297: RF1.Checked = 1;
  3983  0111  0020               	movlb	0	; select bank0
  3984  0112  15AF               	bsf	_RF1+1,3
  3985                           
  3986                           ;RF_Control_B1.c: 298: } else {
  3987  0113  0008               	return
  3988  0114                     l1030:	
  3989                           
  3990                           ;RF_Control_B1.c: 299: RF1.Checked = 0;
  3991  0114  0020               	movlb	0	; select bank0
  3992  0115  11AF               	bcf	_RF1+1,3
  3993                           
  3994                           ;RF_Control_B1.c: 300: }
  3995                           ;RF_Control_B1.c: 301: } else {
  3996  0116  0008               	return
  3997  0117                     l3565:	
  3998                           
  3999                           ;RF_Control_B1.c: 302: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  4000  0117  0021               	movlb	1	; select bank1
  4001  0118  08C0               	movf	_RF_Data^(0+128),f
  4002  0119  1D03               	skipz
  4003  011A  294D               	goto	l3587
  4004  011B  0841               	movf	(_RF_Data^(0+128)+1),w
  4005  011C  3A02               	xorlw	2
  4006  011D  1D03               	skipz
  4007  011E  294D               	goto	l3587
  4008                           
  4009                           ;RF_Control_B1.c: 304: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  4010  011F  084C               	movf	(_RF_Data^(0+128)+12),w
  4011  0120  3AFF               	xorlw	255
  4012  0121  1D03               	skipz
  4013  0122  292F               	goto	l3577
  4014  0123  084D               	movf	(_RF_Data^(0+128)+13),w
  4015  0124  3AFF               	xorlw	255
  4016  0125  1D03               	skipz
  4017  0126  292F               	goto	l3577
  4018  0127  084E               	movf	(_RF_Data^(0+128)+14),w
  4019  0128  3AFF               	xorlw	255
  4020  0129  1D03               	skipz
  4021  012A  292F               	goto	l3577
  4022                           
  4023                           ;RF_Control_B1.c: 305: __nop();
  4024  012B  0000               	nop
  4025                           
  4026                           ;RF_Control_B1.c: 306: RF1.Checked = 0;
  4027  012C  0020               	movlb	0	; select bank0
  4028  012D  11AF               	bcf	_RF1+1,3
  4029                           
  4030                           ;RF_Control_B1.c: 307: } else {
  4031  012E  0008               	return
  4032  012F                     l3577:	
  4033                           
  4034                           ;RF_Control_B1.c: 308: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  4035  012F  087B               	movf	_product,w
  4036  0130  3E0C               	addlw	12
  4037  0131  0086               	movwf	6
  4038  0132  0187               	clrf	7
  4039  0133  0021               	movlb	1	; select bank1
  4040  0134  084C               	movf	(_RF_Data^(0+128)+12),w
  4041  0135  0601               	xorwf	1,w
  4042  0136  1D03               	skipz
  4043  0137  0008               	return
  4044  0138  087B               	movf	_product,w
  4045  0139  3E0D               	addlw	13
  4046  013A  0086               	movwf	6
  4047  013B  0187               	clrf	7
  4048  013C  084D               	movf	(_RF_Data^(0+128)+13),w
  4049  013D  0601               	xorwf	1,w
  4050  013E  1D03               	skipz
  4051  013F  0008               	return
  4052  0140  087B               	movf	_product,w
  4053  0141  3E0E               	addlw	14
  4054  0142  0086               	movwf	6
  4055  0143  0187               	clrf	7
  4056  0144  084E               	movf	(_RF_Data^(0+128)+14),w
  4057  0145  0601               	xorwf	1,w
  4058  0146  1D03               	skipz
  4059  0147  0008               	return
  4060                           
  4061                           ;RF_Control_B1.c: 309: setControl_Lights_Table();
  4062  0148  3182  22C0         	fcall	_setControl_Lights_Table
  4063                           
  4064                           ;RF_Control_B1.c: 310: RF1.Checked = 1;
  4065  014A  0020               	movlb	0	; select bank0
  4066  014B  15AF               	bsf	_RF1+1,3
  4067                           
  4068                           ;RF_Control_B1.c: 311: }
  4069                           ;RF_Control_B1.c: 312: }
  4070                           ;RF_Control_B1.c: 313: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  4071  014C  0008               	return
  4072  014D                     l3587:	
  4073  014D  0021               	movlb	1	; select bank1
  4074  014E  0840               	movf	_RF_Data^(0+128),w
  4075  014F  3AFF               	xorlw	255
  4076  0150  1D03               	skipz
  4077  0151  2958               	goto	l3593
  4078  0152  0841               	movf	(_RF_Data^(0+128)+1),w
  4079  0153  3A02               	xorlw	2
  4080  0154  1D03               	skipz
  4081  0155  2958               	goto	l3593
  4082                           
  4083                           ;RF_Control_B1.c: 314: __nop();
  4084  0156  0000               	nop
  4085                           
  4086                           ;RF_Control_B1.c: 315: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  4087  0157  0008               	return
  4088  0158                     l3593:	
  4089  0158  0021               	movlb	1	; select bank1
  4090  0159  08C0               	movf	_RF_Data^(0+128),f
  4091  015A  1D03               	skipz
  4092  015B  2962               	goto	l1040
  4093  015C  0841               	movf	(_RF_Data^(0+128)+1),w
  4094  015D  3A65               	xorlw	101
  4095  015E  1D03               	skipz
  4096  015F  2962               	goto	l1040
  4097                           
  4098                           ;RF_Control_B1.c: 316: __nop();
  4099  0160  0000               	nop
  4100                           
  4101                           ;RF_Control_B1.c: 317: } else {
  4102  0161  0008               	return
  4103  0162                     l1040:	
  4104                           
  4105                           ;RF_Control_B1.c: 318: RF1.Checked = 0;
  4106  0162  0020               	movlb	0	; select bank0
  4107  0163  11AF               	bcf	_RF1+1,3
  4108                           
  4109                           ;RF_Control_B1.c: 326: ;
  4110                           
  4111                           ;RF_Control_B1.c: 319: }
  4112                           ;RF_Control_B1.c: 324: }
  4113                           ;RF_Control_B1.c: 325: } else {
  4114  0164  0008               	return
  4115  0165                     __end_of_getRxData:	
  4116                           
  4117                           	psect	text12
  4118  04DC                     __ptext12:	
  4119 ;; *************** function _setLog_Code *****************
  4120 ;; Defined at:
  4121 ;;		line 332 in file "../src/RF_Control_B1.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;		None
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;		None
  4126 ;; Return value:  Size  Location     Type
  4127 ;;		None               void
  4128 ;; Registers used:
  4129 ;;		wreg, fsr1l, fsr1h
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4135 ;;      Params:         0       0       0       0       0       0       0       0
  4136 ;;      Locals:         0       0       0       0       0       0       0       0
  4137 ;;      Temps:          1       0       0       0       0       0       0       0
  4138 ;;      Totals:         1       0       0       0       0       0       0       0
  4139 ;;Total ram usage:        1 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    3
  4142 ;; This function calls:
  4143 ;;		Nothing
  4144 ;; This function is called by:
  4145 ;;		_getRxData
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           
  4150                           ;psect for function _setLog_Code
  4151  04DC                     _setLog_Code:	
  4152                           
  4153                           ;RF_Control_B1.c: 333: RF1.Learn = 0;
  4154                           
  4155                           ;incstack = 0
  4156                           ; Regs used in _setLog_Code: [wregfsr1]
  4157  04DC  0020               	movlb	0	; select bank0
  4158  04DD  132E               	bcf	_RF1,6
  4159                           
  4160                           ;RF_Control_B1.c: 334: product->Data[12]=RF_Data[12];
  4161  04DE  0021               	movlb	1	; select bank1
  4162  04DF  084C               	movf	(_RF_Data^(0+128)+12),w
  4163  04E0  00F2               	movwf	??_setLog_Code
  4164  04E1  087B               	movf	_product,w
  4165  04E2  3E0C               	addlw	12
  4166  04E3  0086               	movwf	6
  4167  04E4  0187               	clrf	7
  4168  04E5  0872               	movf	??_setLog_Code,w
  4169  04E6  0081               	movwf	1
  4170                           
  4171                           ;RF_Control_B1.c: 335: product->Data[13]=RF_Data[13];
  4172  04E7  084D               	movf	(_RF_Data^(0+128)+13),w
  4173  04E8  00F2               	movwf	??_setLog_Code
  4174  04E9  087B               	movf	_product,w
  4175  04EA  3E0D               	addlw	13
  4176  04EB  0086               	movwf	6
  4177  04EC  0187               	clrf	7
  4178  04ED  0872               	movf	??_setLog_Code,w
  4179  04EE  0081               	movwf	1
  4180                           
  4181                           ;RF_Control_B1.c: 336: product->Data[14]=RF_Data[14];
  4182  04EF  084E               	movf	(_RF_Data^(0+128)+14),w
  4183  04F0  00F2               	movwf	??_setLog_Code
  4184  04F1  087B               	movf	_product,w
  4185  04F2  3E0E               	addlw	14
  4186  04F3  0086               	movwf	6
  4187  04F4  0187               	clrf	7
  4188  04F5  0872               	movf	??_setLog_Code,w
  4189  04F6  0081               	movwf	1
  4190  04F7  0008               	return
  4191  04F8                     __end_of_setLog_Code:	
  4192                           ;RF_Control_B1.c: 339: ;;
  4193                           
  4194                           
  4195                           	psect	text13
  4196  02C0                     __ptext13:	
  4197 ;; *************** function _setControl_Lights_Table *****************
  4198 ;; Defined at:
  4199 ;;		line 345 in file "../src/RF_Control_B1.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;		None
  4204 ;; Return value:  Size  Location     Type
  4205 ;;		None               void
  4206 ;; Registers used:
  4207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4213 ;;      Params:         0       0       0       0       0       0       0       0
  4214 ;;      Locals:         0       0       0       0       0       0       0       0
  4215 ;;      Temps:          0       0       0       0       0       0       0       0
  4216 ;;      Totals:         0       0       0       0       0       0       0       0
  4217 ;;Total ram usage:        0 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    4
  4220 ;; This function calls:
  4221 ;;		_setTxData
  4222 ;; This function is called by:
  4223 ;;		_getRxData
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           
  4228                           ;psect for function _setControl_Lights_Table
  4229  02C0                     _setControl_Lights_Table:	
  4230                           
  4231                           ;RF_Control_B1.c: 346: switch (RF_Data[15]) {
  4232                           
  4233                           ;incstack = 0
  4234                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4235  02C0  2AE8               	goto	l3463
  4236  02C1                     l3455:	
  4237                           ;RF_Control_B1.c: 347: case 0x00:
  4238                           
  4239                           
  4240                           ;RF_Control_B1.c: 351: product->Data[9]=0;
  4241  02C1  087B               	movf	_product,w
  4242  02C2  3E09               	addlw	9
  4243  02C3  0086               	movwf	6
  4244  02C4  0187               	clrf	7
  4245  02C5  0181               	clrf	1
  4246                           
  4247                           ;RF_Control_B1.c: 352: product->Data[11]=0;
  4248  02C6  087B               	movf	_product,w
  4249  02C7  3E0B               	addlw	11
  4250  02C8  0086               	movwf	6
  4251  02C9  0187               	clrf	7
  4252  02CA  0181               	clrf	1
  4253                           
  4254                           ;RF_Control_B1.c: 353: product->Data[15]=0;
  4255  02CB  087B               	movf	_product,w
  4256  02CC  3E0F               	addlw	15
  4257  02CD  0086               	movwf	6
  4258  02CE  0187               	clrf	7
  4259  02CF  0181               	clrf	1
  4260                           
  4261                           ;RF_Control_B1.c: 354: product->Data[17]=0;
  4262  02D0  087B               	movf	_product,w
  4263  02D1  3E11               	addlw	17
  4264  02D2  0086               	movwf	6
  4265  02D3  0187               	clrf	7
  4266  02D4  0181               	clrf	1
  4267                           
  4268                           ;RF_Control_B1.c: 355: ;;
  4269                           ;RF_Control_B1.c: 357: break;
  4270  02D5  0008               	return
  4271  02D6                     l3457:	
  4272                           ;RF_Control_B1.c: 358: case 0x20:
  4273                           
  4274                           
  4275                           ;RF_Control_B1.c: 359: product->Data[9]=0;
  4276  02D6  087B               	movf	_product,w
  4277  02D7  3E09               	addlw	9
  4278  02D8  0086               	movwf	6
  4279  02D9  0187               	clrf	7
  4280  02DA  0181               	clrf	1
  4281                           
  4282                           ;RF_Control_B1.c: 360: product->Data[11]=0;
  4283  02DB  087B               	movf	_product,w
  4284  02DC  3E0B               	addlw	11
  4285  02DD  0086               	movwf	6
  4286  02DE  0187               	clrf	7
  4287  02DF  0181               	clrf	1
  4288                           
  4289                           ;RF_Control_B1.c: 361: product->Data[17]=0;
  4290  02E0  087B               	movf	_product,w
  4291  02E1  3E11               	addlw	17
  4292  02E2  0086               	movwf	6
  4293  02E3  0187               	clrf	7
  4294  02E4  0181               	clrf	1
  4295                           
  4296                           ;RF_Control_B1.c: 362: setTxData();
  4297  02E5  3181  2165         	fcall	_setTxData
  4298                           
  4299                           ;RF_Control_B1.c: 400: }
  4300                           
  4301                           ;RF_Control_B1.c: 399: break;
  4302                           
  4303                           ;RF_Control_B1.c: 393: case 0x31:
  4304                           
  4305                           ;RF_Control_B1.c: 392: break;
  4306                           
  4307                           ;RF_Control_B1.c: 386: case 0x21:
  4308                           
  4309                           ;RF_Control_B1.c: 385: break;
  4310                           
  4311                           ;RF_Control_B1.c: 379: case 0x11:
  4312                           
  4313                           ;RF_Control_B1.c: 378: break;
  4314                           
  4315                           ;RF_Control_B1.c: 374: case 0x03:
  4316                           
  4317                           ;RF_Control_B1.c: 373: break;
  4318                           
  4319                           ;RF_Control_B1.c: 369: case 0x02:
  4320                           
  4321                           ;RF_Control_B1.c: 368: break;
  4322                           
  4323                           ;RF_Control_B1.c: 364: case 0x01:
  4324                           
  4325                           ;RF_Control_B1.c: 363: break;
  4326  02E7  0008               	return
  4327  02E8                     l3463:	
  4328  02E8  0021               	movlb	1	; select bank1
  4329  02E9  084F               	movf	(_RF_Data^(0+128)+15),w
  4330                           
  4331                           ; Switch size 1, requested type "space"
  4332                           ; Number of cases is 8, Range of values is 0 to 49
  4333                           ; switch strategies available:
  4334                           ; Name         Instructions Cycles
  4335                           ; simple_byte           25    13 (average)
  4336                           ; direct_byte          106     6 (fixed)
  4337                           ; jumptable            260     6 (fixed)
  4338                           ;	Chosen strategy is simple_byte
  4339  02EA  3A00               	xorlw	0	; case 0
  4340  02EB  1903               	skipnz
  4341  02EC  2AC1               	goto	l3455
  4342  02ED  3A01               	xorlw	1	; case 1
  4343  02EE  1903               	skipnz
  4344  02EF  2B03               	goto	l1060
  4345  02F0  3A03               	xorlw	3	; case 2
  4346  02F1  1903               	skipnz
  4347  02F2  2B03               	goto	l1060
  4348  02F3  3A01               	xorlw	1	; case 3
  4349  02F4  1903               	skipnz
  4350  02F5  2B03               	goto	l1060
  4351  02F6  3A12               	xorlw	18	; case 17
  4352  02F7  1903               	skipnz
  4353  02F8  2B03               	goto	l1060
  4354  02F9  3A31               	xorlw	49	; case 32
  4355  02FA  1903               	skipnz
  4356  02FB  2AD6               	goto	l3457
  4357  02FC  3A01               	xorlw	1	; case 33
  4358  02FD  1903               	skipnz
  4359  02FE  2B03               	goto	l1060
  4360  02FF  3A10               	xorlw	16	; case 49
  4361  0300  1903               	skipnz
  4362  0301  2B03               	goto	l1060
  4363  0302  2B03               	goto	l1060
  4364  0303                     l1060:	
  4365  0303  0008               	return
  4366  0304                     __end_of_setControl_Lights_Table:	
  4367                           
  4368                           	psect	text14
  4369  0165                     __ptext14:	
  4370 ;; *************** function _setTxData *****************
  4371 ;; Defined at:
  4372 ;;		line 208 in file "../src/RF_Control_B1.c"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;		None
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;  i               1    0        unsigned char 
  4377 ;; Return value:  Size  Location     Type
  4378 ;;		None               void
  4379 ;; Registers used:
  4380 ;;		wreg, fsr1l, fsr1h
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/0
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4386 ;;      Params:         0       0       0       0       0       0       0       0
  4387 ;;      Locals:         0       0       0       0       0       0       0       0
  4388 ;;      Temps:          1       0       0       0       0       0       0       0
  4389 ;;      Totals:         1       0       0       0       0       0       0       0
  4390 ;;Total ram usage:        1 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; Hardware stack levels required when called:    3
  4393 ;; This function calls:
  4394 ;;		Nothing
  4395 ;; This function is called by:
  4396 ;;		_UART_Receive
  4397 ;;		_getRxData
  4398 ;;		_setControl_Lights_Table
  4399 ;;		_setRFSW_Control
  4400 ;;		_setRFSW_AdjControl
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           
  4405                           ;psect for function _setTxData
  4406  0165                     _setTxData:	
  4407                           
  4408                           ;RF_Control_B1.c: 209: char i;
  4409                           ;RF_Control_B1.c: 210: if (RF1.Enable == 1) {
  4410                           
  4411                           ;incstack = 0
  4412                           ; Regs used in _setTxData: [wregfsr1]
  4413  0165  0020               	movlb	0	; select bank0
  4414  0166  1C2E               	btfss	_RF1,0
  4415  0167  0008               	return
  4416                           
  4417                           ;RF_Control_B1.c: 212: if (RF1.TransceiveGO == 0) {
  4418  0168  192E               	btfsc	_RF1,2
  4419  0169  0008               	return
  4420                           
  4421                           ;RF_Control_B1.c: 213: RF1.TransceiveGO = 1;
  4422  016A  152E               	bsf	_RF1,2
  4423                           
  4424                           ;RF_Control_B1.c: 214: RF1.RunTime = 20;
  4425  016B  3014               	movlw	20
  4426  016C  00B5               	movwf	_RF1+7
  4427  016D  3000               	movlw	0
  4428  016E  00B6               	movwf	_RF1+8
  4429                           
  4430                           ;RF_Control_B1.c: 223: RF_Data[0] = 0xAA;
  4431  016F  30AA               	movlw	170
  4432  0170  00F2               	movwf	??_setTxData
  4433  0171  0872               	movf	??_setTxData,w
  4434  0172  0021               	movlb	1	; select bank1
  4435  0173  00C0               	movwf	_RF_Data^(0+128)
  4436                           
  4437                           ;RF_Control_B1.c: 224: RF_Data[1] = 0x01;
  4438  0174  01C1               	clrf	(_RF_Data^(0+128)+1)
  4439  0175  0AC1               	incf	(_RF_Data^(0+128)+1),f
  4440                           
  4441                           ;RF_Control_B1.c: 229: RF_Data[2] = product->Data[2];
  4442  0176  087B               	movf	_product,w
  4443  0177  0086               	movwf	6
  4444  0178  0187               	clrf	7
  4445  0179  3F42               	moviw [2]fsr1
  4446  017A  00C2               	movwf	(_RF_Data^(0+128)+2)
  4447                           
  4448                           ;RF_Control_B1.c: 230: RF_Data[3] = product->Data[3];
  4449  017B  087B               	movf	_product,w
  4450  017C  0086               	movwf	6
  4451  017D  0187               	clrf	7
  4452  017E  3F43               	moviw [3]fsr1
  4453  017F  00C3               	movwf	(_RF_Data^(0+128)+3)
  4454                           
  4455                           ;RF_Control_B1.c: 231: RF_Data[4] = product->Data[4];
  4456  0180  087B               	movf	_product,w
  4457  0181  0086               	movwf	6
  4458  0182  0187               	clrf	7
  4459  0183  3F44               	moviw [4]fsr1
  4460  0184  00C4               	movwf	(_RF_Data^(0+128)+4)
  4461                           
  4462                           ;RF_Control_B1.c: 232: RF_Data[5] = product->Data[5];
  4463  0185  087B               	movf	_product,w
  4464  0186  0086               	movwf	6
  4465  0187  0187               	clrf	7
  4466  0188  3F45               	moviw [5]fsr1
  4467  0189  00C5               	movwf	(_RF_Data^(0+128)+5)
  4468                           
  4469                           ;RF_Control_B1.c: 233: RF_Data[6] = product->Data[6];
  4470  018A  087B               	movf	_product,w
  4471  018B  0086               	movwf	6
  4472  018C  0187               	clrf	7
  4473  018D  3F46               	moviw [6]fsr1
  4474  018E  00C6               	movwf	(_RF_Data^(0+128)+6)
  4475                           
  4476                           ;RF_Control_B1.c: 234: RF_Data[7] = product->Data[7];
  4477  018F  087B               	movf	_product,w
  4478  0190  0086               	movwf	6
  4479  0191  0187               	clrf	7
  4480  0192  3F47               	moviw [7]fsr1
  4481  0193  00C7               	movwf	(_RF_Data^(0+128)+7)
  4482                           
  4483                           ;RF_Control_B1.c: 235: RF_Data[8] = product->Data[8];
  4484  0194  087B               	movf	_product,w
  4485  0195  0086               	movwf	6
  4486  0196  0187               	clrf	7
  4487  0197  3F48               	moviw [8]fsr1
  4488  0198  00C8               	movwf	(_RF_Data^(0+128)+8)
  4489                           
  4490                           ;RF_Control_B1.c: 236: RF_Data[9] = product->Data[9];
  4491  0199  087B               	movf	_product,w
  4492  019A  0086               	movwf	6
  4493  019B  0187               	clrf	7
  4494  019C  3F49               	moviw [9]fsr1
  4495  019D  00C9               	movwf	(_RF_Data^(0+128)+9)
  4496                           
  4497                           ;RF_Control_B1.c: 237: RF_Data[10] = product->Data[10];
  4498  019E  087B               	movf	_product,w
  4499  019F  0086               	movwf	6
  4500  01A0  0187               	clrf	7
  4501  01A1  3F4A               	moviw [10]fsr1
  4502  01A2  00CA               	movwf	(_RF_Data^(0+128)+10)
  4503                           
  4504                           ;RF_Control_B1.c: 238: RF_Data[11] = product->Data[11];
  4505  01A3  087B               	movf	_product,w
  4506  01A4  0086               	movwf	6
  4507  01A5  0187               	clrf	7
  4508  01A6  3F4B               	moviw [11]fsr1
  4509  01A7  00CB               	movwf	(_RF_Data^(0+128)+11)
  4510                           
  4511                           ;RF_Control_B1.c: 239: RF_Data[12] = product->Data[12];
  4512  01A8  087B               	movf	_product,w
  4513  01A9  0086               	movwf	6
  4514  01AA  0187               	clrf	7
  4515  01AB  3F4C               	moviw [12]fsr1
  4516  01AC  00CC               	movwf	(_RF_Data^(0+128)+12)
  4517                           
  4518                           ;RF_Control_B1.c: 240: RF_Data[13] = product->Data[13];
  4519  01AD  087B               	movf	_product,w
  4520  01AE  0086               	movwf	6
  4521  01AF  0187               	clrf	7
  4522  01B0  3F4D               	moviw [13]fsr1
  4523  01B1  00CD               	movwf	(_RF_Data^(0+128)+13)
  4524                           
  4525                           ;RF_Control_B1.c: 241: RF_Data[14] = product->Data[14];
  4526  01B2  087B               	movf	_product,w
  4527  01B3  0086               	movwf	6
  4528  01B4  0187               	clrf	7
  4529  01B5  3F4E               	moviw [14]fsr1
  4530  01B6  00CE               	movwf	(_RF_Data^(0+128)+14)
  4531                           
  4532                           ;RF_Control_B1.c: 242: RF_Data[15] = product->Data[15];
  4533  01B7  087B               	movf	_product,w
  4534  01B8  0086               	movwf	6
  4535  01B9  0187               	clrf	7
  4536  01BA  3F4F               	moviw [15]fsr1
  4537  01BB  00CF               	movwf	(_RF_Data^(0+128)+15)
  4538                           
  4539                           ;RF_Control_B1.c: 243: RF_Data[16] = product->Data[16];
  4540  01BC  087B               	movf	_product,w
  4541  01BD  0086               	movwf	6
  4542  01BE  0187               	clrf	7
  4543  01BF  3F50               	moviw [16]fsr1
  4544  01C0  00D0               	movwf	(_RF_Data^(0+128)+16)
  4545                           
  4546                           ;RF_Control_B1.c: 244: RF_Data[17] = product->Data[17];
  4547  01C1  087B               	movf	_product,w
  4548  01C2  0086               	movwf	6
  4549  01C3  0187               	clrf	7
  4550  01C4  3F51               	moviw [17]fsr1
  4551  01C5  00D1               	movwf	(_RF_Data^(0+128)+17)
  4552                           
  4553                           ;RF_Control_B1.c: 245: RF_Data[18] = product->Data[18];
  4554  01C6  087B               	movf	_product,w
  4555  01C7  0086               	movwf	6
  4556  01C8  0187               	clrf	7
  4557  01C9  3F52               	moviw [18]fsr1
  4558  01CA  00D2               	movwf	(_RF_Data^(0+128)+18)
  4559                           
  4560                           ;RF_Control_B1.c: 246: RF_Data[19] = product->Data[19];
  4561  01CB  087B               	movf	_product,w
  4562  01CC  0086               	movwf	6
  4563  01CD  0187               	clrf	7
  4564  01CE  3F53               	moviw [19]fsr1
  4565  01CF  00D3               	movwf	(_RF_Data^(0+128)+19)
  4566                           
  4567                           ;RF_Control_B1.c: 247: RF_Data[20] = 0xaa;
  4568  01D0  30AA               	movlw	170
  4569  01D1  00F2               	movwf	??_setTxData
  4570  01D2  0872               	movf	??_setTxData,w
  4571  01D3  00D4               	movwf	(_RF_Data^(0+128)+20)
  4572  01D4  0008               	return
  4573  01D5                     __end_of_setTxData:	
  4574                           
  4575                           	psect	text15
  4576  05A5                     __ptext15:	
  4577 ;; *************** function _RF_RxDisable *****************
  4578 ;; Defined at:
  4579 ;;		line 266 in file "../src/RF_Control_B1.c"
  4580 ;; Parameters:    Size  Location     Type
  4581 ;;		None
  4582 ;; Auto vars:     Size  Location     Type
  4583 ;;		None
  4584 ;; Return value:  Size  Location     Type
  4585 ;;		None               void
  4586 ;; Registers used:
  4587 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4588 ;; Tracked objects:
  4589 ;;		On entry : 0/0
  4590 ;;		On exit  : 0/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4593 ;;      Params:         0       0       0       0       0       0       0       0
  4594 ;;      Locals:         0       0       0       0       0       0       0       0
  4595 ;;      Temps:          0       0       0       0       0       0       0       0
  4596 ;;      Totals:         0       0       0       0       0       0       0       0
  4597 ;;Total ram usage:        0 bytes
  4598 ;; Hardware stack levels used:    1
  4599 ;; Hardware stack levels required when called:    5
  4600 ;; This function calls:
  4601 ;;		_CC2500_WriteCommand
  4602 ;; This function is called by:
  4603 ;;		_setRF_Main
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607                           
  4608                           ;psect for function _RF_RxDisable
  4609  05A5                     _RF_RxDisable:	
  4610                           
  4611                           ;RF_Control_B1.c: 267: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  4612                           
  4613                           ;incstack = 0
  4614                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4615  05A5  0020               	movlb	0	; select bank0
  4616  05A6  18AE               	btfsc	_RF1,1
  4617  05A7  2DAA               	goto	l1022
  4618  05A8  1DAE               	btfss	_RF1,3
  4619  05A9  0008               	return
  4620  05AA                     l1022:	
  4621                           
  4622                           ;RF_Control_B1.c: 268: RF1.RxStatus = 0;
  4623  05AA  11AE               	bcf	_RF1,3
  4624                           
  4625                           ;RF_Control_B1.c: 269: RF1.ReceiveGO = 0;
  4626  05AB  10AE               	bcf	_RF1,1
  4627                           
  4628                           ;RF_Control_B1.c: 270: CC2500_WriteCommand(0x36);
  4629  05AC  3036               	movlw	54
  4630  05AD  3185  2512  3185   	fcall	_CC2500_WriteCommand
  4631                           
  4632                           ;RF_Control_B1.c: 272: CC2500_WriteCommand(0x3A);
  4633  05B0  303A               	movlw	58
  4634  05B1  3185  2512         	fcall	_CC2500_WriteCommand
  4635  05B3  0008               	return
  4636  05B4                     __end_of_RF_RxDisable:	
  4637                           
  4638                           	psect	text16
  4639  0266                     __ptext16:	
  4640 ;; *************** function _CC2500_TxData *****************
  4641 ;; Defined at:
  4642 ;;		line 32 in file "../src/CC2500_B1.c"
  4643 ;; Parameters:    Size  Location     Type
  4644 ;;		None
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;  loop_e          1    7[COMMON] unsigned char 
  4647 ;; Return value:  Size  Location     Type
  4648 ;;		None               void
  4649 ;; Registers used:
  4650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4656 ;;      Params:         0       0       0       0       0       0       0       0
  4657 ;;      Locals:         1       0       0       0       0       0       0       0
  4658 ;;      Temps:          1       0       0       0       0       0       0       0
  4659 ;;      Totals:         2       0       0       0       0       0       0       0
  4660 ;;Total ram usage:        2 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    5
  4663 ;; This function calls:
  4664 ;;		_CC2500_WriteByte
  4665 ;;		_CC2500_WriteCommand
  4666 ;;		_Timeout_Counter
  4667 ;;		_set_TimeoutCleared
  4668 ;; This function is called by:
  4669 ;;		_setRF_Main
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           
  4674                           ;psect for function _CC2500_TxData
  4675  0266                     _CC2500_TxData:	
  4676                           
  4677                           ;CC2500_B1.c: 33: unsigned char loop_e;
  4678                           ;CC2500_B1.c: 35: RC0 = 0;
  4679                           
  4680                           ;incstack = 0
  4681                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4682  0266  0020               	movlb	0	; select bank0
  4683  0267  100E               	bcf	14,0	;volatile
  4684                           
  4685                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  4686  0268  307F               	movlw	127
  4687  0269  00F6               	movwf	??_CC2500_TxData
  4688  026A  0876               	movf	??_CC2500_TxData,w
  4689  026B  00C2               	movwf	_SPI0Buffer
  4690                           
  4691                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  4692  026C  2A70               	goto	l3471
  4693  026D                     l3469:	
  4694                           
  4695                           ;CC2500_B1.c: 38: Timeout_Counter();
  4696  026D  3185  2555  3182   	fcall	_Timeout_Counter
  4697  0270                     l3471:	
  4698  0270  0020               	movlb	0	; select bank0
  4699  0271  1E8E               	btfss	14,5	;volatile
  4700  0272  2A75               	goto	l3475
  4701  0273  1D2B               	btfss	_myMain+11,2
  4702  0274  2A6D               	goto	l3469
  4703  0275                     l3475:	
  4704                           
  4705                           ;CC2500_B1.c: 39: };
  4706                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  4707  0275  3186  260D  3182   	fcall	_set_TimeoutCleared
  4708                           
  4709                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  4710  0278  3185  257E  3182   	fcall	_CC2500_WriteByte
  4711                           
  4712                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  4713  027B  0020               	movlb	0	; select bank0
  4714  027C  085A               	movf	_Tx_Length,w
  4715  027D  00F6               	movwf	??_CC2500_TxData
  4716  027E  0876               	movf	??_CC2500_TxData,w
  4717  027F  00C2               	movwf	_SPI0Buffer
  4718                           
  4719                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  4720  0280  3185  257E  3182   	fcall	_CC2500_WriteByte
  4721                           
  4722                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  4723  0283  01F7               	clrf	CC2500_TxData@loop_e
  4724  0284                     l3489:	
  4725  0284  0020               	movlb	0	; select bank0
  4726  0285  085A               	movf	_Tx_Length,w
  4727  0286  0277               	subwf	CC2500_TxData@loop_e,w
  4728  0287  1803               	btfsc	3,0
  4729  0288  2A9A               	goto	l134
  4730                           
  4731                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  4732  0289  0877               	movf	CC2500_TxData@loop_e,w
  4733  028A  3EC0               	addlw	_RF_Data& (0+255)
  4734  028B  0086               	movwf	6
  4735  028C  0187               	clrf	7
  4736  028D  0801               	movf	1,w
  4737  028E  00F6               	movwf	??_CC2500_TxData
  4738  028F  0876               	movf	??_CC2500_TxData,w
  4739  0290  0020               	movlb	0	; select bank0
  4740  0291  00C2               	movwf	_SPI0Buffer
  4741                           
  4742                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  4743  0292  3185  257E  3182   	fcall	_CC2500_WriteByte
  4744  0295  3001               	movlw	1
  4745  0296  00F6               	movwf	??_CC2500_TxData
  4746  0297  0876               	movf	??_CC2500_TxData,w
  4747  0298  07F7               	addwf	CC2500_TxData@loop_e,f
  4748  0299  2A84               	goto	l3489
  4749  029A                     l134:	
  4750                           
  4751                           ;CC2500_B1.c: 48: }
  4752                           ;CC2500_B1.c: 49: RC0 = 1;
  4753  029A  140E               	bsf	14,0	;volatile
  4754                           
  4755                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  4756  029B  3035               	movlw	53
  4757  029C  3185  2512  3182   	fcall	_CC2500_WriteCommand
  4758                           
  4759                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  4760  029F  2AA3               	goto	l3495
  4761  02A0                     l3493:	
  4762                           
  4763                           ;CC2500_B1.c: 52: Timeout_Counter();
  4764  02A0  3185  2555  3182   	fcall	_Timeout_Counter
  4765  02A3                     l3495:	
  4766  02A3  0020               	movlb	0	; select bank0
  4767  02A4  188E               	btfsc	14,1	;volatile
  4768  02A5  2AA8               	goto	l3499
  4769  02A6  1D2B               	btfss	_myMain+11,2
  4770  02A7  2AA0               	goto	l3493
  4771  02A8                     l3499:	
  4772                           
  4773                           ;CC2500_B1.c: 53: };
  4774                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  4775  02A8  3186  260D  3182   	fcall	_set_TimeoutCleared
  4776                           
  4777                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  4778  02AB  2AAF               	goto	l3503
  4779  02AC                     l3501:	
  4780                           
  4781                           ;CC2500_B1.c: 57: Timeout_Counter();
  4782  02AC  3185  2555  3182   	fcall	_Timeout_Counter
  4783  02AF                     l3503:	
  4784  02AF  0020               	movlb	0	; select bank0
  4785  02B0  1C8E               	btfss	14,1	;volatile
  4786  02B1  2AB4               	goto	l3507
  4787  02B2  1D2B               	btfss	_myMain+11,2
  4788  02B3  2AAC               	goto	l3501
  4789  02B4                     l3507:	
  4790                           
  4791                           ;CC2500_B1.c: 58: };
  4792                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  4793  02B4  3186  260D  3182   	fcall	_set_TimeoutCleared
  4794                           
  4795                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  4796  02B7  3036               	movlw	54
  4797  02B8  3185  2512  3182   	fcall	_CC2500_WriteCommand
  4798                           
  4799                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  4800  02BB  303B               	movlw	59
  4801  02BC  3185  2512         	fcall	_CC2500_WriteCommand
  4802                           
  4803                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  4804  02BE  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  4805  02BF  0008               	return
  4806  02C0                     __end_of_CC2500_TxData:	
  4807                           
  4808                           	psect	text17
  4809  0625                     __ptext17:	
  4810 ;; *************** function _RF_Initialization *****************
  4811 ;; Defined at:
  4812 ;;		line 9 in file "../src/RF_Control_B1.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;		None
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;		None
  4817 ;; Return value:  Size  Location     Type
  4818 ;;		None               void
  4819 ;; Registers used:
  4820 ;;		wreg, status,2, status,0, pclath, cstack
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4826 ;;      Params:         0       0       0       0       0       0       0       0
  4827 ;;      Locals:         0       0       0       0       0       0       0       0
  4828 ;;      Temps:          0       0       0       0       0       0       0       0
  4829 ;;      Totals:         0       0       0       0       0       0       0       0
  4830 ;;Total ram usage:        0 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    4
  4833 ;; This function calls:
  4834 ;;		_setRF_Initialization
  4835 ;; This function is called by:
  4836 ;;		_main
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           
  4841                           ;psect for function _RF_Initialization
  4842  0625                     _RF_Initialization:	
  4843                           
  4844                           ;RF_Control_B1.c: 11: setRF_Initialization();
  4845                           
  4846                           ;incstack = 0
  4847                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  4848  0625  3185  25E4         	fcall	_setRF_Initialization
  4849  0627  0008               	return
  4850  0628                     __end_of_RF_Initialization:	
  4851                           
  4852                           	psect	text18
  4853  05E4                     __ptext18:	
  4854 ;; *************** function _setRF_Initialization *****************
  4855 ;; Defined at:
  4856 ;;		line 43 in file "../src/RF_Control_B1.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;		None
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;		None
  4861 ;; Return value:  Size  Location     Type
  4862 ;;		None               void
  4863 ;; Registers used:
  4864 ;;		wreg
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4870 ;;      Params:         0       0       0       0       0       0       0       0
  4871 ;;      Locals:         0       0       0       0       0       0       0       0
  4872 ;;      Temps:          1       0       0       0       0       0       0       0
  4873 ;;      Totals:         1       0       0       0       0       0       0       0
  4874 ;;Total ram usage:        1 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; Hardware stack levels required when called:    3
  4877 ;; This function calls:
  4878 ;;		Nothing
  4879 ;; This function is called by:
  4880 ;;		_RF_Initialization
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           
  4885                           ;psect for function _setRF_Initialization
  4886  05E4                     _setRF_Initialization:	
  4887                           
  4888                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  4889                           
  4890                           ;incstack = 0
  4891                           ; Regs used in _setRF_Initialization: [wreg]
  4892  05E4  3015               	movlw	21
  4893  05E5  00F2               	movwf	??_setRF_Initialization
  4894  05E6  0872               	movf	??_setRF_Initialization,w
  4895  05E7  0020               	movlb	0	; select bank0
  4896  05E8  00DA               	movwf	_Tx_Length
  4897                           
  4898                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  4899  05E9  300A               	movlw	10
  4900  05EA  00B5               	movwf	_RF1+7
  4901  05EB  3000               	movlw	0
  4902  05EC  00B6               	movwf	_RF1+8
  4903  05ED  0008               	return
  4904  05EE                     __end_of_setRF_Initialization:	
  4905                           
  4906                           	psect	text19
  4907  05C1                     __ptext19:	
  4908 ;; *************** function _Mcu_Initialization *****************
  4909 ;; Defined at:
  4910 ;;		line 30 in file "../src/MCU_B1.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;		None
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;		None
  4915 ;; Return value:  Size  Location     Type
  4916 ;;		None               void
  4917 ;; Registers used:
  4918 ;;		wreg, status,2, status,0, pclath, cstack
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4924 ;;      Params:         0       0       0       0       0       0       0       0
  4925 ;;      Locals:         0       0       0       0       0       0       0       0
  4926 ;;      Temps:          0       0       0       0       0       0       0       0
  4927 ;;      Totals:         0       0       0       0       0       0       0       0
  4928 ;;Total ram usage:        0 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; Hardware stack levels required when called:    4
  4931 ;; This function calls:
  4932 ;;		_Fosc_Set
  4933 ;;		_IO_Set
  4934 ;;		_TMR1_Set
  4935 ;;		_UART_Set
  4936 ;; This function is called by:
  4937 ;;		_main
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           
  4942                           ;psect for function _Mcu_Initialization
  4943  05C1                     _Mcu_Initialization:	
  4944                           
  4945                           ;MCU_B1.c: 32: Fosc_Set();
  4946                           
  4947                           ;incstack = 0
  4948                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  4949  05C1  3186  2612  3185   	fcall	_Fosc_Set
  4950                           
  4951                           ;MCU_B1.c: 34: IO_Set();
  4952  05C4  3185  2592  3185   	fcall	_IO_Set
  4953                           
  4954                           ;MCU_B1.c: 36: ;;
  4955                           ;MCU_B1.c: 38: TMR1_Set();
  4956  05C7  3185  25CD  3185   	fcall	_TMR1_Set
  4957                           
  4958                           ;MCU_B1.c: 40: ;;
  4959                           ;MCU_B1.c: 42: ;;
  4960                           ;MCU_B1.c: 44: ;;
  4961                           ;MCU_B1.c: 46: ;;
  4962                           ;MCU_B1.c: 48: ;;
  4963                           ;MCU_B1.c: 50: UART_Set();
  4964  05CA  3185  252A         	fcall	_UART_Set
  4965  05CC  0008               	return
  4966  05CD                     __end_of_Mcu_Initialization:	
  4967                           
  4968                           	psect	text20
  4969  052A                     __ptext20:	
  4970 ;; *************** function _UART_Set *****************
  4971 ;; Defined at:
  4972 ;;		line 719 in file "../src/MCU_B1.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;		None
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;		None
  4977 ;; Return value:  Size  Location     Type
  4978 ;;		None               void
  4979 ;; Registers used:
  4980 ;;		wreg, status,2
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4986 ;;      Params:         0       0       0       0       0       0       0       0
  4987 ;;      Locals:         0       0       0       0       0       0       0       0
  4988 ;;      Temps:          0       0       0       0       0       0       0       0
  4989 ;;      Totals:         0       0       0       0       0       0       0       0
  4990 ;;Total ram usage:        0 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:    3
  4993 ;; This function calls:
  4994 ;;		Nothing
  4995 ;; This function is called by:
  4996 ;;		_Mcu_Initialization
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           
  5001                           ;psect for function _UART_Set
  5002  052A                     _UART_Set:	
  5003                           
  5004                           ;MCU_B1.c: 721: TRISC7 = 1;
  5005                           
  5006                           ;incstack = 0
  5007                           ; Regs used in _UART_Set: [wreg+status,2]
  5008  052A  0021               	movlb	1	; select bank1
  5009  052B  178E               	bsf	14,7	;volatile
  5010                           
  5011                           ;MCU_B1.c: 722: TRISC6 = 1;
  5012  052C  170E               	bsf	14,6	;volatile
  5013                           
  5014                           ;MCU_B1.c: 723: SPBRG = ((int)(16000000L/(16UL * 19200) -1));
  5015  052D  3033               	movlw	51
  5016  052E  0023               	movlb	3	; select bank3
  5017  052F  009B               	movwf	27	;volatile
  5018                           
  5019                           ;MCU_B1.c: 725: SPBRGH = 0;
  5020  0530  019C               	clrf	28	;volatile
  5021                           
  5022                           ;MCU_B1.c: 726: BRG16 = 0;
  5023  0531  119F               	bcf	31,3	;volatile
  5024                           
  5025                           ;MCU_B1.c: 728: RCSTA = (0 | 0x90);
  5026  0532  3090               	movlw	144
  5027  0533  009D               	movwf	29	;volatile
  5028                           
  5029                           ;MCU_B1.c: 729: TXSTA = (0x4 | 0 | 0x20);
  5030  0534  3024               	movlw	36
  5031  0535  009E               	movwf	30	;volatile
  5032                           
  5033                           ;MCU_B1.c: 730: TX9 = 0;
  5034  0536  131E               	bcf	30,6	;volatile
  5035                           
  5036                           ;MCU_B1.c: 731: RX9 = 0;
  5037  0537  131D               	bcf	29,6	;volatile
  5038                           
  5039                           ;MCU_B1.c: 732: TXIE = 0;
  5040  0538  0021               	movlb	1	; select bank1
  5041  0539  1211               	bcf	17,4	;volatile
  5042                           
  5043                           ;MCU_B1.c: 734: RCIE = 1;
  5044  053A  1691               	bsf	17,5	;volatile
  5045                           
  5046                           ;MCU_B1.c: 735: RCIF = 0;
  5047  053B  0020               	movlb	0	; select bank0
  5048  053C  1291               	bcf	17,5	;volatile
  5049                           
  5050                           ;MCU_B1.c: 738: PEIE = 1;
  5051  053D  170B               	bsf	11,6	;volatile
  5052                           
  5053                           ;MCU_B1.c: 739: GIE = 1;
  5054  053E  178B               	bsf	11,7	;volatile
  5055  053F  0008               	return
  5056  0540                     __end_of_UART_Set:	
  5057                           
  5058                           	psect	text21
  5059  05CD                     __ptext21:	
  5060 ;; *************** function _TMR1_Set *****************
  5061 ;; Defined at:
  5062 ;;		line 199 in file "../src/MCU_B1.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;		None
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;		None
  5067 ;; Return value:  Size  Location     Type
  5068 ;;		None               void
  5069 ;; Registers used:
  5070 ;;		wreg
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5076 ;;      Params:         0       0       0       0       0       0       0       0
  5077 ;;      Locals:         0       0       0       0       0       0       0       0
  5078 ;;      Temps:          0       0       0       0       0       0       0       0
  5079 ;;      Totals:         0       0       0       0       0       0       0       0
  5080 ;;Total ram usage:        0 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    3
  5083 ;; This function calls:
  5084 ;;		Nothing
  5085 ;; This function is called by:
  5086 ;;		_Mcu_Initialization
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           
  5091                           ;psect for function _TMR1_Set
  5092  05CD                     _TMR1_Set:	
  5093                           
  5094                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  5095                           
  5096                           ;incstack = 0
  5097                           ; Regs used in _TMR1_Set: [wreg]
  5098  05CD  3041               	movlw	65
  5099  05CE  0020               	movlb	0	; select bank0
  5100  05CF  0098               	movwf	24	;volatile
  5101                           
  5102                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  5103  05D0  30FA               	movlw	250
  5104  05D1  0097               	movwf	23	;volatile
  5105                           
  5106                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  5107  05D2  3038               	movlw	56
  5108  05D3  0096               	movwf	22	;volatile
  5109                           
  5110                           ;MCU_B1.c: 203: TMR1IE = 1;
  5111  05D4  0021               	movlb	1	; select bank1
  5112  05D5  1411               	bsf	17,0	;volatile
  5113                           
  5114                           ;MCU_B1.c: 204: PEIE = 1;
  5115  05D6  170B               	bsf	11,6	;volatile
  5116                           
  5117                           ;MCU_B1.c: 205: GIE = 1;
  5118  05D7  178B               	bsf	11,7	;volatile
  5119  05D8  0008               	return
  5120  05D9                     __end_of_TMR1_Set:	
  5121                           
  5122                           	psect	text22
  5123  0592                     __ptext22:	
  5124 ;; *************** function _IO_Set *****************
  5125 ;; Defined at:
  5126 ;;		line 60 in file "../src/MCU_B1.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;		None
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;		None
  5131 ;; Return value:  Size  Location     Type
  5132 ;;		None               void
  5133 ;; Registers used:
  5134 ;;		wreg, status,2
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5140 ;;      Params:         0       0       0       0       0       0       0       0
  5141 ;;      Locals:         0       0       0       0       0       0       0       0
  5142 ;;      Temps:          0       0       0       0       0       0       0       0
  5143 ;;      Totals:         0       0       0       0       0       0       0       0
  5144 ;;Total ram usage:        0 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; Hardware stack levels required when called:    3
  5147 ;; This function calls:
  5148 ;;		Nothing
  5149 ;; This function is called by:
  5150 ;;		_Mcu_Initialization
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           
  5155                           ;psect for function _IO_Set
  5156  0592                     _IO_Set:	
  5157                           
  5158                           ;MCU_B1.c: 73: TRISA = 0b00000000;;
  5159                           
  5160                           ;incstack = 0
  5161                           ; Regs used in _IO_Set: [wreg+status,2]
  5162  0592  0021               	movlb	1	; select bank1
  5163  0593  018C               	clrf	12	;volatile
  5164                           
  5165                           ;MCU_B1.c: 74: TRISB = 0b00000000;;
  5166  0594  018D               	clrf	13	;volatile
  5167                           
  5168                           ;MCU_B1.c: 75: TRISC = 0b11100110;;
  5169  0595  30E6               	movlw	230
  5170  0596  008E               	movwf	14	;volatile
  5171                           
  5172                           ;MCU_B1.c: 76: LATA = 0b00000000;;
  5173  0597  0022               	movlb	2	; select bank2
  5174  0598  018C               	clrf	12	;volatile
  5175                           
  5176                           ;MCU_B1.c: 77: LATB = 0b00000000;;
  5177  0599  018D               	clrf	13	;volatile
  5178                           
  5179                           ;MCU_B1.c: 78: LATC = 0b00000000;;
  5180  059A  018E               	clrf	14	;volatile
  5181                           
  5182                           ;MCU_B1.c: 79: ANSELA = 0b00000000;;
  5183  059B  0023               	movlb	3	; select bank3
  5184  059C  018C               	clrf	12	;volatile
  5185                           
  5186                           ;MCU_B1.c: 80: ANSELB = 0b00000000;;
  5187  059D  018D               	clrf	13	;volatile
  5188                           
  5189                           ;MCU_B1.c: 81: ANSELC = 0b00000000;;
  5190  059E  018E               	clrf	14	;volatile
  5191                           
  5192                           ;MCU_B1.c: 82: PORTA = 0b00000000;;
  5193  059F  0020               	movlb	0	; select bank0
  5194  05A0  018C               	clrf	12	;volatile
  5195                           
  5196                           ;MCU_B1.c: 83: PORTB = 0b00000000;;
  5197  05A1  018D               	clrf	13	;volatile
  5198                           
  5199                           ;MCU_B1.c: 84: PORTC = 0b11100110;;
  5200  05A2  30E6               	movlw	230
  5201  05A3  008E               	movwf	14	;volatile
  5202  05A4  0008               	return
  5203  05A5                     __end_of_IO_Set:	
  5204                           
  5205                           	psect	text23
  5206  0612                     __ptext23:	
  5207 ;; *************** function _Fosc_Set *****************
  5208 ;; Defined at:
  5209 ;;		line 56 in file "../src/MCU_B1.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;		None
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;		None
  5214 ;; Return value:  Size  Location     Type
  5215 ;;		None               void
  5216 ;; Registers used:
  5217 ;;		wreg
  5218 ;; Tracked objects:
  5219 ;;		On entry : 0/0
  5220 ;;		On exit  : 0/0
  5221 ;;		Unchanged: 0/0
  5222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5223 ;;      Params:         0       0       0       0       0       0       0       0
  5224 ;;      Locals:         0       0       0       0       0       0       0       0
  5225 ;;      Temps:          0       0       0       0       0       0       0       0
  5226 ;;      Totals:         0       0       0       0       0       0       0       0
  5227 ;;Total ram usage:        0 bytes
  5228 ;; Hardware stack levels used:    1
  5229 ;; Hardware stack levels required when called:    3
  5230 ;; This function calls:
  5231 ;;		Nothing
  5232 ;; This function is called by:
  5233 ;;		_Mcu_Initialization
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           
  5238                           ;psect for function _Fosc_Set
  5239  0612                     _Fosc_Set:	
  5240                           
  5241                           ;MCU_B1.c: 57: OSCCON = 0x78;
  5242                           
  5243                           ;incstack = 0
  5244                           ; Regs used in _Fosc_Set: [wreg]
  5245  0612  3078               	movlw	120
  5246  0613  0021               	movlb	1	; select bank1
  5247  0614  0099               	movwf	25	;volatile
  5248  0615  0008               	return
  5249  0616                     __end_of_Fosc_Set:	
  5250                           
  5251                           	psect	text24
  5252  056A                     __ptext24:	
  5253 ;; *************** function _Exception_Main *****************
  5254 ;; Defined at:
  5255 ;;		line 488 in file "../src/Main_B1.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;		None
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;  error           1    4[COMMON] unsigned char 
  5260 ;; Return value:  Size  Location     Type
  5261 ;;		None               void
  5262 ;; Registers used:
  5263 ;;		wreg, status,2, status,0, pclath, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5269 ;;      Params:         0       0       0       0       0       0       0       0
  5270 ;;      Locals:         1       0       0       0       0       0       0       0
  5271 ;;      Temps:          1       0       0       0       0       0       0       0
  5272 ;;      Totals:         2       0       0       0       0       0       0       0
  5273 ;;Total ram usage:        2 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    4
  5276 ;; This function calls:
  5277 ;;		_getMain_All_Error_Status
  5278 ;; This function is called by:
  5279 ;;		_main
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function _Exception_Main
  5285  056A                     _Exception_Main:	
  5286                           
  5287                           ;Main_B1.c: 489: char error = getMain_All_Error_Status(0);
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in _Exception_Main: [wreg+status,2+status,0+pclath+cstack]
  5291  056A  3000               	movlw	0
  5292  056B  3186  2628  3185   	fcall	_getMain_All_Error_Status
  5293  056E  00F3               	movwf	??_Exception_Main
  5294  056F  0873               	movf	??_Exception_Main,w
  5295  0570  00F4               	movwf	Exception_Main@error
  5296                           
  5297                           ;Main_B1.c: 491: if (myMain.Error_Run == 1) {
  5298  0571  0020               	movlb	0	; select bank0
  5299  0572  1DAB               	btfss	_myMain+11,3
  5300  0573  2D79               	goto	l3815
  5301                           
  5302                           ;Main_B1.c: 492: if (error == 0) {
  5303  0574  08F4               	movf	Exception_Main@error,f
  5304  0575  1D03               	skipz
  5305  0576  0008               	return
  5306                           
  5307                           ;Main_B1.c: 493: myMain.Error_Run = 0;
  5308  0577  11AB               	bcf	_myMain+11,3
  5309                           
  5310                           ;Main_B1.c: 498: }
  5311                           ;Main_B1.c: 499: } else {
  5312  0578  0008               	return
  5313  0579                     l3815:	
  5314                           
  5315                           ;Main_B1.c: 500: if (error != 0) {
  5316  0579  0874               	movf	Exception_Main@error,w
  5317  057A  1903               	btfsc	3,2
  5318  057B  0008               	return
  5319                           
  5320                           ;Main_B1.c: 501: myMain.Error_Run = 1;
  5321  057C  15AB               	bsf	_myMain+11,3
  5322  057D  0008               	return
  5323  057E                     __end_of_Exception_Main:	
  5324                           
  5325                           	psect	text25
  5326  0628                     __ptext25:	
  5327 ;; *************** function _getMain_All_Error_Status *****************
  5328 ;; Defined at:
  5329 ;;		line 404 in file "../src/Main_B1.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  command         1    wreg     unsigned char 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  command         1    0[COMMON] unsigned char 
  5334 ;;  status          1    2[COMMON] unsigned char 
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  1    wreg      unsigned char 
  5337 ;; Registers used:
  5338 ;;		wreg, status,2
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5344 ;;      Params:         0       0       0       0       0       0       0       0
  5345 ;;      Locals:         1       0       0       0       0       0       0       0
  5346 ;;      Temps:          0       0       0       0       0       0       0       0
  5347 ;;      Totals:         1       0       0       0       0       0       0       0
  5348 ;;Total ram usage:        1 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    3
  5351 ;; This function calls:
  5352 ;;		Nothing
  5353 ;; This function is called by:
  5354 ;;		_Exception_Main
  5355 ;;		_setRF_Main
  5356 ;;		_getRxData
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           
  5361                           ;psect for function _getMain_All_Error_Status
  5362  0628                     _getMain_All_Error_Status:	
  5363                           
  5364                           ;Main_B1.c: 405: char status = 0;
  5365                           
  5366                           ;incstack = 0
  5367                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2]
  5368  0628  01F2               	clrf	getMain_All_Error_Status@status
  5369                           
  5370                           ;Main_B1.c: 441: return status;
  5371  0629  0872               	movf	getMain_All_Error_Status@status,w
  5372  062A  0008               	return
  5373  062B                     __end_of_getMain_All_Error_Status:	
  5374                           
  5375                           	psect	text26
  5376  0540                     __ptext26:	
  5377 ;; *************** function _CC2500_PowerOnInitial *****************
  5378 ;; Defined at:
  5379 ;;		line 119 in file "../src/CC2500_B1.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;		None
  5384 ;; Return value:  Size  Location     Type
  5385 ;;		None               void
  5386 ;; Registers used:
  5387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5393 ;;      Params:         0       0       0       0       0       0       0       0
  5394 ;;      Locals:         0       0       0       0       0       0       0       0
  5395 ;;      Temps:          0       0       0       0       0       0       0       0
  5396 ;;      Totals:         0       0       0       0       0       0       0       0
  5397 ;;Total ram usage:        0 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    6
  5400 ;; This function calls:
  5401 ;;		_CC2500_ClearRXFIFO
  5402 ;;		_CC2500_ClearTXFIFO
  5403 ;;		_CC2500_FrequencyCabr
  5404 ;;		_CC2500_InitPATable
  5405 ;;		_CC2500_InitSetREG
  5406 ;;		_CC2500_PowerRST
  5407 ;;		_CC2500_SIDLEMode
  5408 ;; This function is called by:
  5409 ;;		_main
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           
  5414                           ;psect for function _CC2500_PowerOnInitial
  5415  0540                     _CC2500_PowerOnInitial:	
  5416                           
  5417                           ;CC2500_B1.c: 120: CC2500_PowerRST();
  5418                           
  5419                           ;incstack = 0
  5420                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5421  0540  3183  2304  3185   	fcall	_CC2500_PowerRST
  5422                           
  5423                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
  5424  0543  3183  23A4  3185   	fcall	_CC2500_InitSetREG
  5425                           
  5426                           ;CC2500_B1.c: 122: CC2500_InitPATable();
  5427  0546  3184  24BF  3185   	fcall	_CC2500_InitPATable
  5428                           
  5429                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
  5430  0549  3186  261A  3185   	fcall	_CC2500_ClearTXFIFO
  5431                           
  5432                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
  5433  054C  3186  261E  3185   	fcall	_CC2500_ClearRXFIFO
  5434                           
  5435                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
  5436  054F  3185  25D9  3185   	fcall	_CC2500_FrequencyCabr
  5437                           
  5438                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
  5439  0552  3186  2616         	fcall	_CC2500_SIDLEMode
  5440  0554  0008               	return
  5441  0555                     __end_of_CC2500_PowerOnInitial:	
  5442                           
  5443                           	psect	text27
  5444  0616                     __ptext27:	
  5445 ;; *************** function _CC2500_SIDLEMode *****************
  5446 ;; Defined at:
  5447 ;;		line 209 in file "../src/CC2500_B1.c"
  5448 ;; Parameters:    Size  Location     Type
  5449 ;;		None
  5450 ;; Auto vars:     Size  Location     Type
  5451 ;;		None
  5452 ;; Return value:  Size  Location     Type
  5453 ;;		None               void
  5454 ;; Registers used:
  5455 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5456 ;; Tracked objects:
  5457 ;;		On entry : 0/0
  5458 ;;		On exit  : 0/0
  5459 ;;		Unchanged: 0/0
  5460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5461 ;;      Params:         0       0       0       0       0       0       0       0
  5462 ;;      Locals:         0       0       0       0       0       0       0       0
  5463 ;;      Temps:          0       0       0       0       0       0       0       0
  5464 ;;      Totals:         0       0       0       0       0       0       0       0
  5465 ;;Total ram usage:        0 bytes
  5466 ;; Hardware stack levels used:    1
  5467 ;; Hardware stack levels required when called:    5
  5468 ;; This function calls:
  5469 ;;		_CC2500_WriteCommand
  5470 ;; This function is called by:
  5471 ;;		_CC2500_PowerOnInitial
  5472 ;; This function uses a non-reentrant model
  5473 ;;
  5474                           
  5475                           
  5476                           ;psect for function _CC2500_SIDLEMode
  5477  0616                     _CC2500_SIDLEMode:	
  5478                           
  5479                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
  5480                           
  5481                           ;incstack = 0
  5482                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5483  0616  3036               	movlw	54
  5484  0617  3185  2512         	fcall	_CC2500_WriteCommand
  5485  0619  0008               	return
  5486  061A                     __end_of_CC2500_SIDLEMode:	
  5487                           
  5488                           	psect	text28
  5489  0304                     __ptext28:	
  5490 ;; *************** function _CC2500_PowerRST *****************
  5491 ;; Defined at:
  5492 ;;		line 132 in file "../src/CC2500_B1.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;		None
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;		None
  5497 ;; Return value:  Size  Location     Type
  5498 ;;		None               void
  5499 ;; Registers used:
  5500 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5506 ;;      Params:         0       0       0       0       0       0       0       0
  5507 ;;      Locals:         0       0       0       0       0       0       0       0
  5508 ;;      Temps:          1       0       0       0       0       0       0       0
  5509 ;;      Totals:         1       0       0       0       0       0       0       0
  5510 ;;Total ram usage:        1 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    4
  5513 ;; This function calls:
  5514 ;;		_CC2500_WriteByte
  5515 ;;		_DelayTime_1us
  5516 ;;		_Timeout_Counter
  5517 ;;		_set_TimeoutCleared
  5518 ;; This function is called by:
  5519 ;;		_CC2500_PowerOnInitial
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           
  5524                           ;psect for function _CC2500_PowerRST
  5525  0304                     _CC2500_PowerRST:	
  5526                           
  5527                           ;CC2500_B1.c: 133: RC3 = 0;
  5528                           
  5529                           ;incstack = 0
  5530                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5531  0304  0020               	movlb	0	; select bank0
  5532  0305  118E               	bcf	14,3	;volatile
  5533                           
  5534                           ;CC2500_B1.c: 134: RC4 = 0;
  5535  0306  120E               	bcf	14,4	;volatile
  5536                           
  5537                           ;CC2500_B1.c: 135: RC0 = 1;
  5538  0307  140E               	bsf	14,0	;volatile
  5539                           
  5540                           ;CC2500_B1.c: 136: DelayTime_1us(10);
  5541  0308  300A               	movlw	10
  5542  0309  00F2               	movwf	DelayTime_1us@count
  5543  030A  3000               	movlw	0
  5544  030B  00F3               	movwf	DelayTime_1us@count+1
  5545  030C  3184  241E  3183   	fcall	_DelayTime_1us
  5546                           
  5547                           ;CC2500_B1.c: 137: RC0 = 0;
  5548  030F  0020               	movlb	0	; select bank0
  5549  0310  100E               	bcf	14,0	;volatile
  5550                           
  5551                           ;CC2500_B1.c: 138: DelayTime_1us(10);
  5552  0311  300A               	movlw	10
  5553  0312  00F2               	movwf	DelayTime_1us@count
  5554  0313  3000               	movlw	0
  5555  0314  00F3               	movwf	DelayTime_1us@count+1
  5556  0315  3184  241E  3183   	fcall	_DelayTime_1us
  5557                           
  5558                           ;CC2500_B1.c: 139: RC0 = 1;
  5559  0318  0020               	movlb	0	; select bank0
  5560  0319  140E               	bsf	14,0	;volatile
  5561                           
  5562                           ;CC2500_B1.c: 140: DelayTime_1us(40);
  5563  031A  3028               	movlw	40
  5564  031B  00F2               	movwf	DelayTime_1us@count
  5565  031C  3000               	movlw	0
  5566  031D  00F3               	movwf	DelayTime_1us@count+1
  5567  031E  3184  241E  3183   	fcall	_DelayTime_1us
  5568                           
  5569                           ;CC2500_B1.c: 141: RC0 = 0;
  5570  0321  0020               	movlb	0	; select bank0
  5571  0322  100E               	bcf	14,0	;volatile
  5572                           
  5573                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
  5574  0323  3030               	movlw	48
  5575  0324  00F8               	movwf	??_CC2500_PowerRST
  5576  0325  0878               	movf	??_CC2500_PowerRST,w
  5577  0326  00C2               	movwf	_SPI0Buffer
  5578                           
  5579                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
  5580  0327  2B2B               	goto	l3613
  5581  0328                     l3611:	
  5582                           
  5583                           ;CC2500_B1.c: 144: Timeout_Counter();
  5584  0328  3185  2555  3183   	fcall	_Timeout_Counter
  5585  032B                     l3613:	
  5586  032B  0020               	movlb	0	; select bank0
  5587  032C  1E8E               	btfss	14,5	;volatile
  5588  032D  2B30               	goto	l3617
  5589  032E  1D2B               	btfss	_myMain+11,2
  5590  032F  2B28               	goto	l3611
  5591  0330                     l3617:	
  5592                           
  5593                           ;CC2500_B1.c: 145: };
  5594                           ;CC2500_B1.c: 146: set_TimeoutCleared();
  5595  0330  3186  260D  3183   	fcall	_set_TimeoutCleared
  5596                           
  5597                           ;CC2500_B1.c: 147: CC2500_WriteByte();
  5598  0333  3185  257E  3183   	fcall	_CC2500_WriteByte
  5599                           
  5600                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
  5601  0336  2B3A               	goto	l3623
  5602  0337                     l3621:	
  5603                           
  5604                           ;CC2500_B1.c: 149: Timeout_Counter();
  5605  0337  3185  2555  3183   	fcall	_Timeout_Counter
  5606  033A                     l3623:	
  5607  033A  0020               	movlb	0	; select bank0
  5608  033B  1E8E               	btfss	14,5	;volatile
  5609  033C  2B3F               	goto	l3627
  5610  033D  1D2B               	btfss	_myMain+11,2
  5611  033E  2B37               	goto	l3621
  5612  033F                     l3627:	
  5613                           
  5614                           ;CC2500_B1.c: 150: };
  5615                           ;CC2500_B1.c: 151: set_TimeoutCleared();
  5616  033F  3186  260D         	fcall	_set_TimeoutCleared
  5617                           
  5618                           ;CC2500_B1.c: 152: RC4 = 0;
  5619  0341  0020               	movlb	0	; select bank0
  5620  0342  120E               	bcf	14,4	;volatile
  5621                           
  5622                           ;CC2500_B1.c: 153: RC0 = 1;
  5623  0343  140E               	bsf	14,0	;volatile
  5624  0344  0008               	return
  5625  0345                     __end_of_CC2500_PowerRST:	
  5626                           
  5627                           	psect	text29
  5628  03A4                     __ptext29:	
  5629 ;; *************** function _CC2500_InitSetREG *****************
  5630 ;; Defined at:
  5631 ;;		line 159 in file "../src/CC2500_B1.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;		None
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  loop_c          1    2[BANK0 ] unsigned char 
  5636 ;;  temp2           1    1[BANK0 ] unsigned char 
  5637 ;;  temp1           1    0[BANK0 ] unsigned char 
  5638 ;; Return value:  Size  Location     Type
  5639 ;;		None               void
  5640 ;; Registers used:
  5641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5642 ;; Tracked objects:
  5643 ;;		On entry : 0/0
  5644 ;;		On exit  : 0/0
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5647 ;;      Params:         0       0       0       0       0       0       0       0
  5648 ;;      Locals:         0       3       0       0       0       0       0       0
  5649 ;;      Temps:          1       0       0       0       0       0       0       0
  5650 ;;      Totals:         1       3       0       0       0       0       0       0
  5651 ;;Total ram usage:        4 bytes
  5652 ;; Hardware stack levels used:    1
  5653 ;; Hardware stack levels required when called:    5
  5654 ;; This function calls:
  5655 ;;		_CC2500_WriteREG
  5656 ;; This function is called by:
  5657 ;;		_CC2500_PowerOnInitial
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           
  5662                           ;psect for function _CC2500_InitSetREG
  5663  03A4                     _CC2500_InitSetREG:	
  5664                           
  5665                           ;CC2500_B1.c: 160: unsigned char loop_c;
  5666                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
  5667                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
  5668                           
  5669                           ;incstack = 0
  5670                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5671  03A4  0020               	movlb	0	; select bank0
  5672  03A5  01D5               	clrf	CC2500_InitSetREG@loop_c
  5673  03A6                     L2:	
  5674  03A6  302F               	movlw	47
  5675  03A7  0255               	subwf	CC2500_InitSetREG@loop_c,w
  5676  03A8  1803               	btfsc	3,0
  5677  03A9  0008               	return
  5678                           
  5679                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
  5680  03AA  0855               	movf	CC2500_InitSetREG@loop_c,w
  5681  03AB  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  5682  03AC  0084               	movwf	4
  5683  03AD  3082               	movlw	high (_CC2500_registers_address| (0+32768))
  5684  03AE  1803               	skipnc
  5685  03AF  3E01               	addlw	1
  5686  03B0  0085               	movwf	5
  5687  03B1  0800               	movf	0,w	;code access
  5688  03B2  00F7               	movwf	??_CC2500_InitSetREG
  5689  03B3  0877               	movf	??_CC2500_InitSetREG,w
  5690  03B4  00D3               	movwf	CC2500_InitSetREG@temp1
  5691                           
  5692                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
  5693  03B5  0855               	movf	CC2500_InitSetREG@loop_c,w
  5694  03B6  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  5695  03B7  0084               	movwf	4
  5696  03B8  3082               	movlw	high (_CC2500_rfSettings| (0+32768))
  5697  03B9  1803               	skipnc
  5698  03BA  3E01               	addlw	1
  5699  03BB  0085               	movwf	5
  5700  03BC  0800               	movf	0,w	;code access
  5701  03BD  00F7               	movwf	??_CC2500_InitSetREG
  5702  03BE  0877               	movf	??_CC2500_InitSetREG,w
  5703  03BF  00D4               	movwf	CC2500_InitSetREG@temp2
  5704                           
  5705                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
  5706  03C0  0854               	movf	CC2500_InitSetREG@temp2,w
  5707  03C1  00F7               	movwf	??_CC2500_InitSetREG
  5708  03C2  0877               	movf	??_CC2500_InitSetREG,w
  5709  03C3  00F4               	movwf	CC2500_WriteREG@value
  5710  03C4  0853               	movf	CC2500_InitSetREG@temp1,w
  5711  03C5  3184  2463  3183   	fcall	_CC2500_WriteREG
  5712  03C8  3001               	movlw	1
  5713  03C9  00F7               	movwf	??_CC2500_InitSetREG
  5714  03CA  0877               	movf	??_CC2500_InitSetREG,w
  5715  03CB  0020               	movlb	0	; select bank0
  5716  03CC  07D5               	addwf	CC2500_InitSetREG@loop_c,f
  5717  03CD  2BA6               	goto	L2
  5718  03CE                     __end_of_CC2500_InitSetREG:	
  5719                           
  5720                           	psect	text30
  5721  04BF                     __ptext30:	
  5722 ;; *************** function _CC2500_InitPATable *****************
  5723 ;; Defined at:
  5724 ;;		line 174 in file "../src/CC2500_B1.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;		None
  5727 ;; Auto vars:     Size  Location     Type
  5728 ;;  loop_d          1    9[COMMON] unsigned char 
  5729 ;;  temp            1    8[COMMON] unsigned char 
  5730 ;; Return value:  Size  Location     Type
  5731 ;;		None               void
  5732 ;; Registers used:
  5733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5739 ;;      Params:         0       0       0       0       0       0       0       0
  5740 ;;      Locals:         2       0       0       0       0       0       0       0
  5741 ;;      Temps:          1       0       0       0       0       0       0       0
  5742 ;;      Totals:         3       0       0       0       0       0       0       0
  5743 ;;Total ram usage:        3 bytes
  5744 ;; Hardware stack levels used:    1
  5745 ;; Hardware stack levels required when called:    5
  5746 ;; This function calls:
  5747 ;;		_CC2500_WriteREG
  5748 ;; This function is called by:
  5749 ;;		_CC2500_PowerOnInitial
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           
  5754                           ;psect for function _CC2500_InitPATable
  5755  04BF                     _CC2500_InitPATable:	
  5756                           
  5757                           ;CC2500_B1.c: 175: unsigned char loop_d;
  5758                           ;CC2500_B1.c: 176: unsigned char temp;
  5759                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
  5760                           
  5761                           ;incstack = 0
  5762                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5763  04BF  01F9               	clrf	CC2500_InitPATable@loop_d
  5764  04C0                     L3:	
  5765  04C0  3008               	movlw	8
  5766  04C1  0279               	subwf	CC2500_InitPATable@loop_d,w
  5767  04C2  1803               	btfsc	3,0
  5768  04C3  0008               	return
  5769                           
  5770                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
  5771  04C4  0879               	movf	CC2500_InitPATable@loop_d,w
  5772  04C5  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  5773  04C6  0084               	movwf	4
  5774  04C7  3082               	movlw	high (_CC2500_patable_vaule| (0+32768))
  5775  04C8  1803               	skipnc
  5776  04C9  3E01               	addlw	1
  5777  04CA  0085               	movwf	5
  5778  04CB  0800               	movf	0,w	;code access
  5779  04CC  00F7               	movwf	??_CC2500_InitPATable
  5780  04CD  0877               	movf	??_CC2500_InitPATable,w
  5781  04CE  00F8               	movwf	CC2500_InitPATable@temp
  5782                           
  5783                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
  5784  04CF  0878               	movf	CC2500_InitPATable@temp,w
  5785  04D0  00F7               	movwf	??_CC2500_InitPATable
  5786  04D1  0877               	movf	??_CC2500_InitPATable,w
  5787  04D2  00F4               	movwf	CC2500_WriteREG@value
  5788  04D3  303E               	movlw	62
  5789  04D4  3184  2463  3184   	fcall	_CC2500_WriteREG
  5790  04D7  3001               	movlw	1
  5791  04D8  00F7               	movwf	??_CC2500_InitPATable
  5792  04D9  0877               	movf	??_CC2500_InitPATable,w
  5793  04DA  07F9               	addwf	CC2500_InitPATable@loop_d,f
  5794  04DB  2CC0               	goto	L3
  5795  04DC                     __end_of_CC2500_InitPATable:	
  5796                           
  5797                           	psect	text31
  5798  0463                     __ptext31:	
  5799 ;; *************** function _CC2500_WriteREG *****************
  5800 ;; Defined at:
  5801 ;;		line 251 in file "../src/CC2500_B1.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;  w_addr          1    wreg     unsigned char 
  5804 ;;  value           1    4[COMMON] unsigned char 
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;  w_addr          1    6[COMMON] unsigned char 
  5807 ;; Return value:  Size  Location     Type
  5808 ;;		None               void
  5809 ;; Registers used:
  5810 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5811 ;; Tracked objects:
  5812 ;;		On entry : 0/0
  5813 ;;		On exit  : 0/0
  5814 ;;		Unchanged: 0/0
  5815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5816 ;;      Params:         1       0       0       0       0       0       0       0
  5817 ;;      Locals:         1       0       0       0       0       0       0       0
  5818 ;;      Temps:          1       0       0       0       0       0       0       0
  5819 ;;      Totals:         3       0       0       0       0       0       0       0
  5820 ;;Total ram usage:        3 bytes
  5821 ;; Hardware stack levels used:    1
  5822 ;; Hardware stack levels required when called:    4
  5823 ;; This function calls:
  5824 ;;		_CC2500_WriteByte
  5825 ;;		_Timeout_Counter
  5826 ;;		_set_TimeoutCleared
  5827 ;; This function is called by:
  5828 ;;		_CC2500_InitSetREG
  5829 ;;		_CC2500_InitPATable
  5830 ;; This function uses a non-reentrant model
  5831 ;;
  5832                           
  5833                           
  5834                           ;psect for function _CC2500_WriteREG
  5835  0463                     _CC2500_WriteREG:	
  5836                           
  5837                           ;incstack = 0
  5838                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5839                           ;CC2500_WriteREG@w_addr stored from wreg
  5840  0463  00F6               	movwf	CC2500_WriteREG@w_addr
  5841                           
  5842                           ;CC2500_B1.c: 252: RC0 = 0;
  5843  0464  0020               	movlb	0	; select bank0
  5844  0465  100E               	bcf	14,0	;volatile
  5845                           
  5846                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
  5847  0466  0876               	movf	CC2500_WriteREG@w_addr,w
  5848  0467  00F5               	movwf	??_CC2500_WriteREG
  5849  0468  0875               	movf	??_CC2500_WriteREG,w
  5850  0469  00C2               	movwf	_SPI0Buffer
  5851                           
  5852                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
  5853  046A  2C6E               	goto	l3521
  5854  046B                     l3519:	
  5855                           
  5856                           ;CC2500_B1.c: 255: Timeout_Counter();
  5857  046B  3185  2555  3184   	fcall	_Timeout_Counter
  5858  046E                     l3521:	
  5859  046E  0020               	movlb	0	; select bank0
  5860  046F  1E8E               	btfss	14,5	;volatile
  5861  0470  2C73               	goto	l3525
  5862  0471  1D2B               	btfss	_myMain+11,2
  5863  0472  2C6B               	goto	l3519
  5864  0473                     l3525:	
  5865                           
  5866                           ;CC2500_B1.c: 256: };
  5867                           ;CC2500_B1.c: 257: set_TimeoutCleared();
  5868  0473  3186  260D  3184   	fcall	_set_TimeoutCleared
  5869                           
  5870                           ;CC2500_B1.c: 259: CC2500_WriteByte();
  5871  0476  3185  257E  3184   	fcall	_CC2500_WriteByte
  5872                           
  5873                           ;CC2500_B1.c: 260: SPI0Buffer = value;
  5874  0479  0874               	movf	CC2500_WriteREG@value,w
  5875  047A  00F5               	movwf	??_CC2500_WriteREG
  5876  047B  0875               	movf	??_CC2500_WriteREG,w
  5877  047C  0020               	movlb	0	; select bank0
  5878  047D  00C2               	movwf	_SPI0Buffer
  5879                           
  5880                           ;CC2500_B1.c: 261: CC2500_WriteByte();
  5881  047E  3185  257E         	fcall	_CC2500_WriteByte
  5882                           
  5883                           ;CC2500_B1.c: 262: RC0 = 1;
  5884  0480  0020               	movlb	0	; select bank0
  5885  0481  140E               	bsf	14,0	;volatile
  5886  0482  0008               	return
  5887  0483                     __end_of_CC2500_WriteREG:	
  5888                           
  5889                           	psect	text32
  5890  05D9                     __ptext32:	
  5891 ;; *************** function _CC2500_FrequencyCabr *****************
  5892 ;; Defined at:
  5893 ;;		line 201 in file "../src/CC2500_B1.c"
  5894 ;; Parameters:    Size  Location     Type
  5895 ;;		None
  5896 ;; Auto vars:     Size  Location     Type
  5897 ;;		None
  5898 ;; Return value:  Size  Location     Type
  5899 ;;		None               void
  5900 ;; Registers used:
  5901 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5902 ;; Tracked objects:
  5903 ;;		On entry : 0/0
  5904 ;;		On exit  : 0/0
  5905 ;;		Unchanged: 0/0
  5906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5907 ;;      Params:         0       0       0       0       0       0       0       0
  5908 ;;      Locals:         0       0       0       0       0       0       0       0
  5909 ;;      Temps:          0       0       0       0       0       0       0       0
  5910 ;;      Totals:         0       0       0       0       0       0       0       0
  5911 ;;Total ram usage:        0 bytes
  5912 ;; Hardware stack levels used:    1
  5913 ;; Hardware stack levels required when called:    5
  5914 ;; This function calls:
  5915 ;;		_CC2500_WriteCommand
  5916 ;;		_DelayTime_1us
  5917 ;; This function is called by:
  5918 ;;		_CC2500_PowerOnInitial
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           
  5923                           ;psect for function _CC2500_FrequencyCabr
  5924  05D9                     _CC2500_FrequencyCabr:	
  5925                           
  5926                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
  5927                           
  5928                           ;incstack = 0
  5929                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5930  05D9  3033               	movlw	51
  5931  05DA  3185  2512  3185   	fcall	_CC2500_WriteCommand
  5932                           
  5933                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
  5934  05DD  30E8               	movlw	232
  5935  05DE  00F2               	movwf	DelayTime_1us@count
  5936  05DF  3003               	movlw	3
  5937  05E0  00F3               	movwf	DelayTime_1us@count+1
  5938  05E1  3184  241E         	fcall	_DelayTime_1us
  5939  05E3  0008               	return
  5940  05E4                     __end_of_CC2500_FrequencyCabr:	
  5941                           
  5942                           	psect	text33
  5943  041E                     __ptext33:	
  5944 ;; *************** function _DelayTime_1us *****************
  5945 ;; Defined at:
  5946 ;;		line 320 in file "../src/CC2500_B1.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;  count           2    2[COMMON] int 
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;  j               2    6[COMMON] unsigned int 
  5951 ;;  i               2    4[COMMON] unsigned int 
  5952 ;; Return value:  Size  Location     Type
  5953 ;;		None               void
  5954 ;; Registers used:
  5955 ;;		wreg, status,2
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5961 ;;      Params:         2       0       0       0       0       0       0       0
  5962 ;;      Locals:         4       0       0       0       0       0       0       0
  5963 ;;      Temps:          0       0       0       0       0       0       0       0
  5964 ;;      Totals:         6       0       0       0       0       0       0       0
  5965 ;;Total ram usage:        6 bytes
  5966 ;; Hardware stack levels used:    1
  5967 ;; Hardware stack levels required when called:    3
  5968 ;; This function calls:
  5969 ;;		Nothing
  5970 ;; This function is called by:
  5971 ;;		_CC2500_PowerRST
  5972 ;;		_CC2500_FrequencyCabr
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976                           
  5977                           ;psect for function _DelayTime_1us
  5978  041E                     _DelayTime_1us:	
  5979                           
  5980                           ;CC2500_B1.c: 321: unsigned int i, j;
  5981                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
  5982                           
  5983                           ;incstack = 0
  5984                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  5985  041E  3001               	movlw	1
  5986  041F  00F4               	movwf	DelayTime_1us@i
  5987  0420  3000               	movlw	0
  5988  0421  00F5               	movwf	DelayTime_1us@i+1
  5989  0422                     l251:	
  5990  0422  0873               	movf	DelayTime_1us@count+1,w
  5991  0423  0275               	subwf	DelayTime_1us@i+1,w
  5992  0424  1D03               	skipz
  5993  0425  2C28               	goto	u1345
  5994  0426  0872               	movf	DelayTime_1us@count,w
  5995  0427  0274               	subwf	DelayTime_1us@i,w
  5996  0428                     u1345:	
  5997  0428  1803               	btfsc	3,0
  5998  0429  0008               	return
  5999                           
  6000                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
  6001  042A  01F6               	clrf	DelayTime_1us@j
  6002  042B  01F7               	clrf	DelayTime_1us@j+1
  6003  042C  3000               	movlw	0
  6004  042D  0277               	subwf	DelayTime_1us@j+1,w
  6005  042E  3002               	movlw	2
  6006  042F  1903               	skipnz
  6007  0430  0276               	subwf	DelayTime_1us@j,w
  6008  0431  1803               	btfsc	3,0
  6009  0432  2C3E               	goto	l2693
  6010  0433                     l2691:	
  6011  0433  3001               	movlw	1
  6012  0434  07F6               	addwf	DelayTime_1us@j,f
  6013  0435  3000               	movlw	0
  6014  0436  3DF7               	addwfc	DelayTime_1us@j+1,f
  6015  0437  3000               	movlw	0
  6016  0438  0277               	subwf	DelayTime_1us@j+1,w
  6017  0439  3002               	movlw	2
  6018  043A  1903               	skipnz
  6019  043B  0276               	subwf	DelayTime_1us@j,w
  6020  043C  1C03               	skipc
  6021  043D  2C33               	goto	l2691
  6022  043E                     l2693:	
  6023  043E  3001               	movlw	1
  6024  043F  07F4               	addwf	DelayTime_1us@i,f
  6025  0440  3000               	movlw	0
  6026  0441  3DF5               	addwfc	DelayTime_1us@i+1,f
  6027  0442  2C22               	goto	l251
  6028  0443                     __end_of_DelayTime_1us:	
  6029                           
  6030                           	psect	text34
  6031  061A                     __ptext34:	
  6032 ;; *************** function _CC2500_ClearTXFIFO *****************
  6033 ;; Defined at:
  6034 ;;		line 187 in file "../src/CC2500_B1.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;		None
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;		None
  6039 ;; Return value:  Size  Location     Type
  6040 ;;		None               void
  6041 ;; Registers used:
  6042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6048 ;;      Params:         0       0       0       0       0       0       0       0
  6049 ;;      Locals:         0       0       0       0       0       0       0       0
  6050 ;;      Temps:          0       0       0       0       0       0       0       0
  6051 ;;      Totals:         0       0       0       0       0       0       0       0
  6052 ;;Total ram usage:        0 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    5
  6055 ;; This function calls:
  6056 ;;		_CC2500_WriteCommand
  6057 ;; This function is called by:
  6058 ;;		_CC2500_PowerOnInitial
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           
  6063                           ;psect for function _CC2500_ClearTXFIFO
  6064  061A                     _CC2500_ClearTXFIFO:	
  6065                           
  6066                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
  6067                           
  6068                           ;incstack = 0
  6069                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6070  061A  303B               	movlw	59
  6071  061B  3185  2512         	fcall	_CC2500_WriteCommand
  6072  061D  0008               	return
  6073  061E                     __end_of_CC2500_ClearTXFIFO:	
  6074                           
  6075                           	psect	text35
  6076  061E                     __ptext35:	
  6077 ;; *************** function _CC2500_ClearRXFIFO *****************
  6078 ;; Defined at:
  6079 ;;		line 194 in file "../src/CC2500_B1.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;		None
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;		None
  6084 ;; Return value:  Size  Location     Type
  6085 ;;		None               void
  6086 ;; Registers used:
  6087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6093 ;;      Params:         0       0       0       0       0       0       0       0
  6094 ;;      Locals:         0       0       0       0       0       0       0       0
  6095 ;;      Temps:          0       0       0       0       0       0       0       0
  6096 ;;      Totals:         0       0       0       0       0       0       0       0
  6097 ;;Total ram usage:        0 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    5
  6100 ;; This function calls:
  6101 ;;		_CC2500_WriteCommand
  6102 ;; This function is called by:
  6103 ;;		_CC2500_PowerOnInitial
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           
  6108                           ;psect for function _CC2500_ClearRXFIFO
  6109  061E                     _CC2500_ClearRXFIFO:	
  6110                           
  6111                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
  6112                           
  6113                           ;incstack = 0
  6114                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6115  061E  303A               	movlw	58
  6116  061F  3185  2512         	fcall	_CC2500_WriteCommand
  6117  0621  0008               	return
  6118  0622                     __end_of_CC2500_ClearRXFIFO:	
  6119                           
  6120                           	psect	text36
  6121  0512                     __ptext36:	
  6122 ;; *************** function _CC2500_WriteCommand *****************
  6123 ;; Defined at:
  6124 ;;		line 285 in file "../src/CC2500_B1.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;  command         1    wreg     unsigned char 
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;  command         1    5[COMMON] unsigned char 
  6129 ;; Return value:  Size  Location     Type
  6130 ;;		None               void
  6131 ;; Registers used:
  6132 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6133 ;; Tracked objects:
  6134 ;;		On entry : 0/0
  6135 ;;		On exit  : 0/0
  6136 ;;		Unchanged: 0/0
  6137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6138 ;;      Params:         0       0       0       0       0       0       0       0
  6139 ;;      Locals:         1       0       0       0       0       0       0       0
  6140 ;;      Temps:          1       0       0       0       0       0       0       0
  6141 ;;      Totals:         2       0       0       0       0       0       0       0
  6142 ;;Total ram usage:        2 bytes
  6143 ;; Hardware stack levels used:    1
  6144 ;; Hardware stack levels required when called:    4
  6145 ;; This function calls:
  6146 ;;		_CC2500_WriteByte
  6147 ;;		_Timeout_Counter
  6148 ;;		_set_TimeoutCleared
  6149 ;; This function is called by:
  6150 ;;		_CC2500_TxData
  6151 ;;		_CC2500_ClearTXFIFO
  6152 ;;		_CC2500_ClearRXFIFO
  6153 ;;		_CC2500_FrequencyCabr
  6154 ;;		_CC2500_SIDLEMode
  6155 ;;		_RF_RxDisable
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159                           
  6160                           ;psect for function _CC2500_WriteCommand
  6161  0512                     _CC2500_WriteCommand:	
  6162                           
  6163                           ;incstack = 0
  6164                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6165                           ;CC2500_WriteCommand@command stored from wreg
  6166  0512  00F5               	movwf	CC2500_WriteCommand@command
  6167                           
  6168                           ;CC2500_B1.c: 286: RC0 = 0;
  6169  0513  0020               	movlb	0	; select bank0
  6170  0514  100E               	bcf	14,0	;volatile
  6171                           
  6172                           ;CC2500_B1.c: 287: SPI0Buffer = command;
  6173  0515  0875               	movf	CC2500_WriteCommand@command,w
  6174  0516  00F4               	movwf	??_CC2500_WriteCommand
  6175  0517  0874               	movf	??_CC2500_WriteCommand,w
  6176  0518  00C2               	movwf	_SPI0Buffer
  6177                           
  6178                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
  6179  0519  2D1D               	goto	l3431
  6180  051A                     l3429:	
  6181                           
  6182                           ;CC2500_B1.c: 290: Timeout_Counter();
  6183  051A  3185  2555  3185   	fcall	_Timeout_Counter
  6184  051D                     l3431:	
  6185  051D  0020               	movlb	0	; select bank0
  6186  051E  1E8E               	btfss	14,5	;volatile
  6187  051F  2D22               	goto	l3435
  6188  0520  1D2B               	btfss	_myMain+11,2
  6189  0521  2D1A               	goto	l3429
  6190  0522                     l3435:	
  6191                           
  6192                           ;CC2500_B1.c: 291: };
  6193                           ;CC2500_B1.c: 292: set_TimeoutCleared();
  6194  0522  3186  260D  3185   	fcall	_set_TimeoutCleared
  6195                           
  6196                           ;CC2500_B1.c: 294: CC2500_WriteByte();
  6197  0525  3185  257E         	fcall	_CC2500_WriteByte
  6198                           
  6199                           ;CC2500_B1.c: 295: RC0 = 1;
  6200  0527  0020               	movlb	0	; select bank0
  6201  0528  140E               	bsf	14,0	;volatile
  6202  0529  0008               	return
  6203  052A                     __end_of_CC2500_WriteCommand:	
  6204                           
  6205                           	psect	text37
  6206  060D                     __ptext37:	
  6207 ;; *************** function _set_TimeoutCleared *****************
  6208 ;; Defined at:
  6209 ;;		line 283 in file "../src/Main_B1.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;		None
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;		None
  6214 ;; Return value:  Size  Location     Type
  6215 ;;		None               void
  6216 ;; Registers used:
  6217 ;;		status,2
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6223 ;;      Params:         0       0       0       0       0       0       0       0
  6224 ;;      Locals:         0       0       0       0       0       0       0       0
  6225 ;;      Temps:          0       0       0       0       0       0       0       0
  6226 ;;      Totals:         0       0       0       0       0       0       0       0
  6227 ;;Total ram usage:        0 bytes
  6228 ;; Hardware stack levels used:    1
  6229 ;; Hardware stack levels required when called:    3
  6230 ;; This function calls:
  6231 ;;		Nothing
  6232 ;; This function is called by:
  6233 ;;		_CC2500_TxData
  6234 ;;		_CC2500_PowerRST
  6235 ;;		_CC2500_WriteREG
  6236 ;;		_CC2500_WriteCommand
  6237 ;;		_CC2500_RxData
  6238 ;;		_CC2500_ReadREG
  6239 ;;		_CC2500_ReadStatus
  6240 ;; This function uses a non-reentrant model
  6241 ;;
  6242                           
  6243                           
  6244                           ;psect for function _set_TimeoutCleared
  6245  060D                     _set_TimeoutCleared:	
  6246                           
  6247                           ;Main_B1.c: 284: myMain.Timeout = 0;
  6248                           
  6249                           ;incstack = 0
  6250                           ; Regs used in _set_TimeoutCleared: [status,2]
  6251  060D  0020               	movlb	0	; select bank0
  6252  060E  112B               	bcf	_myMain+11,2
  6253                           
  6254                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
  6255  060F  01AC               	clrf	_myMain+12
  6256  0610  01AD               	clrf	_myMain+13
  6257  0611  0008               	return
  6258  0612                     __end_of_set_TimeoutCleared:	
  6259                           
  6260                           	psect	text38
  6261  0555                     __ptext38:	
  6262 ;; *************** function _Timeout_Counter *****************
  6263 ;; Defined at:
  6264 ;;		line 274 in file "../src/Main_B1.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;		None
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;		None               void
  6271 ;; Registers used:
  6272 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6278 ;;      Params:         0       0       0       0       0       0       0       0
  6279 ;;      Locals:         0       0       0       0       0       0       0       0
  6280 ;;      Temps:          0       0       0       0       0       0       0       0
  6281 ;;      Totals:         0       0       0       0       0       0       0       0
  6282 ;;Total ram usage:        0 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    3
  6285 ;; This function calls:
  6286 ;;		Nothing
  6287 ;; This function is called by:
  6288 ;;		_CC2500_TxData
  6289 ;;		_CC2500_PowerRST
  6290 ;;		_CC2500_WriteREG
  6291 ;;		_CC2500_WriteCommand
  6292 ;;		_CC2500_RxData
  6293 ;;		_CC2500_ReadREG
  6294 ;;		_CC2500_ReadStatus
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298                           
  6299                           ;psect for function _Timeout_Counter
  6300  0555                     _Timeout_Counter:	
  6301                           
  6302                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
  6303                           
  6304                           ;incstack = 0
  6305                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6306  0555  3001               	movlw	1
  6307  0556  0020               	movlb	0	; select bank0
  6308  0557  07AC               	addwf	_myMain+12,f
  6309  0558  3000               	movlw	0
  6310  0559  3DAD               	addwfc	_myMain+13,f
  6311                           
  6312                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
  6313  055A  300C               	movlw	12
  6314  055B  3E20               	addlw	_myMain& (0+255)
  6315  055C  0086               	movwf	6
  6316  055D  0187               	clrf	7
  6317  055E  3F40               	moviw [0]fsr1
  6318  055F  3A10               	xorlw	16
  6319  0560  1D03               	skipz
  6320  0561  2D64               	goto	u2325
  6321  0562  3F41               	moviw [1]fsr1
  6322  0563  3A27               	xorlw	39
  6323  0564                     u2325:	
  6324  0564  1D03               	skipz
  6325  0565  0008               	return
  6326                           
  6327                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
  6328  0566  01AC               	clrf	_myMain+12
  6329  0567  01AD               	clrf	_myMain+13
  6330                           
  6331                           ;Main_B1.c: 278: myMain.Timeout = 1;
  6332  0568  152B               	bsf	_myMain+11,2
  6333  0569  0008               	return
  6334  056A                     __end_of_Timeout_Counter:	
  6335                           
  6336                           	psect	text39
  6337  057E                     __ptext39:	
  6338 ;; *************** function _CC2500_WriteByte *****************
  6339 ;; Defined at:
  6340 ;;		line 219 in file "../src/CC2500_B1.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;		None
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;  loop_a          1    3[COMMON] unsigned char 
  6345 ;; Return value:  Size  Location     Type
  6346 ;;		None               void
  6347 ;; Registers used:
  6348 ;;		wreg, status,2, status,0
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6354 ;;      Params:         0       0       0       0       0       0       0       0
  6355 ;;      Locals:         1       0       0       0       0       0       0       0
  6356 ;;      Temps:          1       0       0       0       0       0       0       0
  6357 ;;      Totals:         2       0       0       0       0       0       0       0
  6358 ;;Total ram usage:        2 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; Hardware stack levels required when called:    3
  6361 ;; This function calls:
  6362 ;;		Nothing
  6363 ;; This function is called by:
  6364 ;;		_CC2500_TxData
  6365 ;;		_CC2500_PowerRST
  6366 ;;		_CC2500_WriteREG
  6367 ;;		_CC2500_WriteCommand
  6368 ;;		_CC2500_RxData
  6369 ;;		_CC2500_ReadREG
  6370 ;;		_CC2500_ReadStatus
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           
  6375                           ;psect for function _CC2500_WriteByte
  6376  057E                     _CC2500_WriteByte:	
  6377                           
  6378                           ;CC2500_B1.c: 220: unsigned char loop_a;
  6379                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
  6380                           
  6381                           ;incstack = 0
  6382                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  6383  057E  01F3               	clrf	CC2500_WriteByte@loop_a
  6384  057F                     L4:	
  6385  057F  3008               	movlw	8
  6386  0580  0273               	subwf	CC2500_WriteByte@loop_a,w
  6387  0581  1803               	btfsc	3,0
  6388  0582  0008               	return
  6389                           
  6390                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
  6391  0583  0020               	movlb	0	; select bank0
  6392  0584  1FC2               	btfss	_SPI0Buffer,7
  6393  0585  2D88               	goto	l207
  6394                           
  6395                           ;CC2500_B1.c: 223: RC4 = 1;
  6396  0586  160E               	bsf	14,4	;volatile
  6397  0587  2D89               	goto	l208
  6398  0588                     l207:	
  6399                           
  6400                           ;CC2500_B1.c: 224: else
  6401                           ;CC2500_B1.c: 225: RC4 = 0;
  6402  0588  120E               	bcf	14,4	;volatile
  6403  0589                     l208:	
  6404                           
  6405                           ;CC2500_B1.c: 226: RC3 = 1;
  6406  0589  158E               	bsf	14,3	;volatile
  6407                           
  6408                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
  6409  058A  1003               	clrc
  6410  058B  0DC2               	rlf	_SPI0Buffer,f
  6411                           
  6412                           ;CC2500_B1.c: 228: RC3 = 0;
  6413  058C  118E               	bcf	14,3	;volatile
  6414  058D  3001               	movlw	1
  6415  058E  00F2               	movwf	??_CC2500_WriteByte
  6416  058F  0872               	movf	??_CC2500_WriteByte,w
  6417  0590  07F3               	addwf	CC2500_WriteByte@loop_a,f
  6418  0591  2D7F               	goto	L4
  6419  0592                     __end_of_CC2500_WriteByte:	
  6420                           
  6421                           	psect	intentry
  6422  0004                     __pintentry:	
  6423 ;; *************** function _ISR *****************
  6424 ;; Defined at:
  6425 ;;		line 107 in file "../src/MCU_B1.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;		None
  6428 ;; Auto vars:     Size  Location     Type
  6429 ;;		None
  6430 ;; Return value:  Size  Location     Type
  6431 ;;		None               void
  6432 ;; Registers used:
  6433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6439 ;;      Params:         0       0       0       0       0       0       0       0
  6440 ;;      Locals:         0       0       0       0       0       0       0       0
  6441 ;;      Temps:          1       0       0       0       0       0       0       0
  6442 ;;      Totals:         1       0       0       0       0       0       0       0
  6443 ;;Total ram usage:        1 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    2
  6446 ;; This function calls:
  6447 ;;		_TMR1_ISR
  6448 ;;		_UART_ISR
  6449 ;; This function is called by:
  6450 ;;		Interrupt level 1
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454  0004                     _ISR:	
  6455                           
  6456                           ;incstack = 0
  6457                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6458  0004  147E               	bsf	126,0	;set compiler interrupt flag
  6459  0005  3180               	pagesel	$
  6460  0006  0020               	movlb	0	; select bank0
  6461  0007  087F               	movf	127,w
  6462  0008  00F1               	movwf	??_ISR
  6463                           
  6464                           ;MCU_B1.c: 109: ;;
  6465                           ;MCU_B1.c: 111: ;;
  6466                           ;MCU_B1.c: 113: TMR1_ISR();
  6467  0009  3184  2483  3180   	fcall	_TMR1_ISR
  6468                           
  6469                           ;MCU_B1.c: 115: ;;
  6470                           ;MCU_B1.c: 117: ;;
  6471                           ;MCU_B1.c: 119: UART_ISR();
  6472  000C  3183  23CE         	fcall	_UART_ISR
  6473  000E  0871               	movf	??_ISR,w
  6474  000F  0020               	movlb	0	; select bank0
  6475  0010  00FF               	movwf	127
  6476  0011  107E               	bcf	126,0	;clear compiler interrupt flag
  6477  0012  0009               	retfie
  6478  0013                     __end_of_ISR:	
  6479                           
  6480                           	psect	text41
  6481  03CE                     __ptext41:	
  6482 ;; *************** function _UART_ISR *****************
  6483 ;; Defined at:
  6484 ;;		line 743 in file "../src/MCU_B1.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;		None
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;		None
  6489 ;; Return value:  Size  Location     Type
  6490 ;;		None               void
  6491 ;; Registers used:
  6492 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6498 ;;      Params:         0       0       0       0       0       0       0       0
  6499 ;;      Locals:         0       0       0       0       0       0       0       0
  6500 ;;      Temps:          1       0       0       0       0       0       0       0
  6501 ;;      Totals:         1       0       0       0       0       0       0       0
  6502 ;;Total ram usage:        1 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:    1
  6505 ;; This function calls:
  6506 ;;		_getch
  6507 ;; This function is called by:
  6508 ;;		_ISR
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           
  6513                           ;psect for function _UART_ISR
  6514  03CE                     _UART_ISR:	
  6515                           
  6516                           ;MCU_B1.c: 744: if (RCIE == 1 && RCIF == 1) {
  6517                           
  6518                           ;incstack = 0
  6519                           ; Regs used in _UART_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6520  03CE  0021               	movlb	1	; select bank1
  6521  03CF  1E91               	btfss	17,5	;volatile
  6522  03D0  0008               	return
  6523  03D1  0020               	movlb	0	; select bank0
  6524  03D2  1E91               	btfss	17,5	;volatile
  6525  03D3  0008               	return
  6526                           
  6527                           ;MCU_B1.c: 745: RCIF = 0;
  6528  03D4  1291               	bcf	17,5	;volatile
  6529                           
  6530                           ;MCU_B1.c: 746: UART.RxAllow = 1;
  6531  03D5  1652               	bsf	_UART+11,4
  6532                           
  6533                           ;MCU_B1.c: 747: if (UART.RxGO == 0 && UART.Count < 9) {
  6534  03D6  18D2               	btfsc	_UART+11,1
  6535  03D7  0008               	return
  6536  03D8  3009               	movlw	9
  6537  03D9  0250               	subwf	_UART+9,w
  6538  03DA  1803               	skipnc
  6539  03DB  0008               	return
  6540                           
  6541                           ;MCU_B1.c: 748: UART.Data[UART.Count] = getch();
  6542  03DC  3186  2602  3183   	fcall	_getch
  6543  03DF  00F0               	movwf	??_UART_ISR
  6544  03E0  0020               	movlb	0	; select bank0
  6545  03E1  0850               	movf	_UART+9,w
  6546  03E2  3E47               	addlw	_UART& (0+255)
  6547  03E3  0086               	movwf	6
  6548  03E4  0187               	clrf	7
  6549  03E5  0870               	movf	??_UART_ISR,w
  6550  03E6  0081               	movwf	1
  6551                           
  6552                           ;MCU_B1.c: 749: UART.Count++;
  6553  03E7  3001               	movlw	1
  6554  03E8  00F0               	movwf	??_UART_ISR
  6555  03E9  0870               	movf	??_UART_ISR,w
  6556  03EA  07D0               	addwf	_UART+9,f
  6557                           
  6558                           ;MCU_B1.c: 750: if (UART.Count == 9 && UART.Data[9 - 1] == 0xed) {
  6559  03EB  0850               	movf	_UART+9,w
  6560  03EC  3A09               	xorlw	9
  6561  03ED  1D03               	skipz
  6562  03EE  2BF6               	goto	i1l581
  6563  03EF  084F               	movf	_UART+8,w
  6564  03F0  3AED               	xorlw	237
  6565  03F1  1D03               	skipz
  6566  03F2  2BF6               	goto	i1l581
  6567                           
  6568                           ;MCU_B1.c: 751: UART.Count = 0;
  6569  03F3  01D0               	clrf	_UART+9
  6570                           
  6571                           ;MCU_B1.c: 752: UART.RxGO = 1;
  6572  03F4  14D2               	bsf	_UART+11,1
  6573                           
  6574                           ;MCU_B1.c: 753: UART.RxAllow = 0;
  6575  03F5  1252               	bcf	_UART+11,4
  6576  03F6                     i1l581:	
  6577                           
  6578                           ;MCU_B1.c: 754: }
  6579                           ;MCU_B1.c: 755: UART.Time = 0;
  6580  03F6  01D1               	clrf	_UART+10
  6581  03F7  0008               	return
  6582  03F8                     __end_of_UART_ISR:	
  6583                           
  6584                           	psect	text42
  6585  0602                     __ptext42:	
  6586 ;; *************** function _getch *****************
  6587 ;; Defined at:
  6588 ;;		line 904 in file "../src/MCU_B1.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;		None
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;		None
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  1    wreg      unsigned char 
  6595 ;; Registers used:
  6596 ;;		wreg
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6602 ;;      Params:         0       0       0       0       0       0       0       0
  6603 ;;      Locals:         0       0       0       0       0       0       0       0
  6604 ;;      Temps:          0       0       0       0       0       0       0       0
  6605 ;;      Totals:         0       0       0       0       0       0       0       0
  6606 ;;Total ram usage:        0 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; This function calls:
  6609 ;;		Nothing
  6610 ;; This function is called by:
  6611 ;;		_UART_ISR
  6612 ;;		_getche
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615                           
  6616                           
  6617                           ;psect for function _getch
  6618  0602                     _getch:	
  6619  0602                     i1l612:	
  6620                           ;MCU_B1.c: 907: continue;
  6621                           
  6622                           ;MCU_B1.c: 906: while (!RCIF)
  6623                           
  6624                           ;incstack = 0
  6625                           ; Regs used in _getch: [wreg]
  6626                           
  6627  0602  0020               	movlb	0	; select bank0
  6628  0603  1E91               	btfss	17,5	;volatile
  6629  0604  2E02               	goto	i1l612
  6630                           
  6631                           ;MCU_B1.c: 908: return RCREG;
  6632  0605  0023               	movlb	3	; select bank3
  6633  0606  0819               	movf	25,w	;volatile
  6634  0607  0008               	return
  6635  0608                     __end_of_getch:	
  6636                           
  6637                           	psect	text43
  6638  0483                     __ptext43:	
  6639 ;; *************** function _TMR1_ISR *****************
  6640 ;; Defined at:
  6641 ;;		line 209 in file "../src/MCU_B1.c"
  6642 ;; Parameters:    Size  Location     Type
  6643 ;;		None
  6644 ;; Auto vars:     Size  Location     Type
  6645 ;;		None
  6646 ;; Return value:  Size  Location     Type
  6647 ;;		None               void
  6648 ;; Registers used:
  6649 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6650 ;; Tracked objects:
  6651 ;;		On entry : 0/0
  6652 ;;		On exit  : 0/0
  6653 ;;		Unchanged: 0/0
  6654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6655 ;;      Params:         0       0       0       0       0       0       0       0
  6656 ;;      Locals:         0       0       0       0       0       0       0       0
  6657 ;;      Temps:          0       0       0       0       0       0       0       0
  6658 ;;      Totals:         0       0       0       0       0       0       0       0
  6659 ;;Total ram usage:        0 bytes
  6660 ;; Hardware stack levels used:    1
  6661 ;; This function calls:
  6662 ;;		Nothing
  6663 ;; This function is called by:
  6664 ;;		_ISR
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           
  6669                           ;psect for function _TMR1_ISR
  6670  0483                     _TMR1_ISR:	
  6671                           
  6672                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  6673                           
  6674                           ;incstack = 0
  6675                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  6676  0483  0021               	movlb	1	; select bank1
  6677  0484  1C11               	btfss	17,0	;volatile
  6678  0485  0008               	return
  6679  0486  0020               	movlb	0	; select bank0
  6680  0487  1C11               	btfss	17,0	;volatile
  6681  0488  0008               	return
  6682                           
  6683                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
  6684  0489  30FA               	movlw	250
  6685  048A  0097               	movwf	23	;volatile
  6686                           
  6687                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
  6688  048B  3038               	movlw	56
  6689  048C  0096               	movwf	22	;volatile
  6690                           
  6691                           ;MCU_B1.c: 214: TMR1IF = 0;
  6692  048D  1011               	bcf	17,0	;volatile
  6693                           
  6694                           ;MCU_B1.c: 234: Timer1.Count++;
  6695  048E  3001               	movlw	1
  6696  048F  07BB               	addwf	_Timer1+1,f
  6697  0490  3000               	movlw	0
  6698  0491  3DBC               	addwfc	_Timer1+2,f
  6699                           
  6700                           ;MCU_B1.c: 235: if (Timer1.Count == 100) {
  6701  0492  3001               	movlw	1
  6702  0493  3E3A               	addlw	_Timer1& (0+255)
  6703  0494  0086               	movwf	6
  6704  0495  0187               	clrf	7
  6705  0496  3F40               	moviw [0]fsr1
  6706  0497  3A64               	xorlw	100
  6707  0498  1D03               	skipz
  6708  0499  2C9C               	goto	u197_25
  6709  049A  3F41               	moviw [1]fsr1
  6710  049B  3A00               	xorlw	0
  6711  049C                     u197_25:	
  6712  049C  1D03               	skipz
  6713  049D  0008               	return
  6714                           
  6715                           ;MCU_B1.c: 236: Timer1.Count = 0;
  6716  049E  01BB               	clrf	_Timer1+1
  6717  049F  01BC               	clrf	_Timer1+2
  6718                           
  6719                           ;MCU_B1.c: 237: Timer1.Timeout = 1;
  6720  04A0  143A               	bsf	_Timer1,0
  6721  04A1  0008               	return
  6722  04A2                     __end_of_TMR1_ISR:	
  6723  007E                     btemp	set	126	;btemp
  6724  007E                     pic14e$flags	set	126
  6725  007E                     wtemp	set	126
  6726  007E                     wtemp0	set	126
  6727  0080                     wtemp1	set	128
  6728  0082                     wtemp2	set	130
  6729  0084                     wtemp3	set	132
  6730  0086                     wtemp4	set	134
  6731  0088                     wtemp5	set	136
  6732  007F                     wtemp6	set	127
  6733  007E                     ttemp	set	126
  6734  007E                     ttemp0	set	126
  6735  0081                     ttemp1	set	129
  6736  0084                     ttemp2	set	132
  6737  0087                     ttemp3	set	135
  6738  007F                     ttemp4	set	127
  6739  007E                     ltemp	set	126
  6740  007E                     ltemp0	set	126
  6741  0082                     ltemp1	set	130
  6742  0086                     ltemp2	set	134
  6743  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         81
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80      7      59
    BANK1            80      0      62
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK1[32]), 


Critical Paths under _main in COMMON

    _UART_Main->_UART_Receive
    _UART_Transmit->_putch
    _UART_Receive->_setTxData
    _RF_Main->_setRF_Main
    _setRF_Main->_CC2500_TxData
    _getRxData->_getMain_All_Error_Status
    _getRxData->_setLog_Code
    _getRxData->_setTxData
    _setControl_Lights_Table->_setTxData
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _RF_Initialization->_setRF_Initialization
    _Exception_Main->_getMain_All_Error_Status
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in COMMON

    _ISR->_UART_ISR

Critical Paths under _main in BANK0

    _RF_Main->_setRF_Main
    _CC2500_PowerOnInitial->_CC2500_InitSetREG

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    2687
                                              3 BANK0      4     0      4
              _CC2500_PowerOnInitial
                     _Exception_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
                          _UART_Main
              _myMain_Initialization
          _myUARTtoRF_Initialization
                    _myUARTtoRF_Main
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myUARTtoRF_Main                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myUARTtoRF_Initialization                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Main                                            1     1      0     220
                                              7 COMMON     1     1      0
                       _UART_Receive
                      _UART_Transmit
 ---------------------------------------------------------------------------------
 (2) _UART_Transmit                                        3     3      0      90
                                              3 COMMON     3     3      0
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Receive                                         4     4      0     130
                                              3 COMMON     4     4      0
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0     445
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0     445
                                              8 COMMON     1     1      0
                                              0 BANK0      3     3      0
                      _CC2500_TxData
                       _RF_RxDisable
           _getMain_All_Error_Status
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0      68
                                              3 COMMON     2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0       0
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setTxData                                            2     2      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                           _UART_Set
 ---------------------------------------------------------------------------------
 (2) _UART_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       2     2      0      99
                                              3 COMMON     2     2      0
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (4) _getMain_All_Error_Status                             2     2      0      34
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1923
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     372
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     458
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     393
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     260
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     403
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     304
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                           _TMR1_ISR
                           _UART_ISR
 ---------------------------------------------------------------------------------
 (7) _UART_ISR                                             1     1      0       0
                                              0 COMMON     1     1      0
                              _getch
 ---------------------------------------------------------------------------------
 (8) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _Exception_Main
     _getMain_All_Error_Status
   _Mcu_Initialization
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _UART_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getMain_All_Error_Status
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setTxData
         _setLog_Code
         _setTxData
   _UART_Main
     _UART_Receive
       _setTxData
     _UART_Transmit
       _putch
   _myMain_Initialization
   _myUARTtoRF_Initialization
   _myUARTtoRF_Main
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR
   _UART_ISR
     _getch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      85       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      7      3B       6       73.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      3E       8       77.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      85      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Dec 10 15:49:17 2014

           __end_of_CC2500_WriteREG 0483                                 l134 029A  
                               l207 0588                                 l208 0589  
                               l251 0422                                 l606 05EF  
                               l585 04AA                                 l682 0407  
                               l698 03A2                                 l980 00DB  
                               l982 0042                                 l984 004C  
                               _GIE 005F                                 _CRC 003F  
                               l988 00A8                                 l989 0077  
                               _RA0 0060                                 _RA1 0061  
                               _RA2 0062                                 _RC0 0070  
                               _RC1 0071                                 _RC3 0073  
                               _RC4 0074                                 _RC5 0075  
                               _RF1 002E                                 _ISR 0004  
                               _RX9 0CEE                                 _TX9 0CF6  
          __end_of_CC2500_WriteByte 0592                                 wreg 0009  
                              ?_ISR 0070                                l1022 05AA  
                              l1030 0114                                l1040 0162  
                              l1060 0303                                l3143 0384  
                              l3501 02AC                                l3431 051D  
                              l3503 02AF                                l3521 046E  
                              l3435 0522                                l3611 0328  
                              l3507 02B4                                l3429 051A  
                              l3525 0473                                l3621 0337  
                              l3613 032B                                l3519 046B  
                              l3623 033A                                l3471 0270  
                              l3455 02C1                                l3463 02E8  
                              l3617 0330                                l3457 02D6  
                              l3553 0101                                l2691 0433  
                              l3627 033F                                l3475 0275  
                              l3715 0063                                l2693 043E  
                              l3493 02A0                                l3469 026D  
                              l3565 0117                                l3815 0579  
                              l3495 02A3                                l3489 0284  
                              l3593 0158                                l3577 012F  
                              l3499 02A8                                l3587 014D  
                              l3747 0090                                l3683 036E  
                              l3749 0092                                l3677 0351  
                              l3769 00C9                                l3795 04B0  
             _myMain_Initialization 05B4                                u2115 039A  
                              _LATA 010C                                _LATB 010D  
                              _LATC 010E                                u1345 0428  
                              u2325 0564                                u1695 0503  
                              _PEIE 005E                                u2855 005D  
                              u2955 00B9                                _RCIE 048D  
                              _RCIF 008D                                _UART 0047  
                              _RSSI 0040                                _TXIE 048C  
                              _TXIF 008C                                _main 03F8  
                   __end_of_RF_Main 0625                                fsr0h 0005  
                              fsr1h 0007                                fsr0l 0004  
                              indf0 0000                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
        ?_myUARTtoRF_Initialization 0070                                ltemp 007E  
     __size_of_setRF_Initialization 000A                                start 0013  
                              ttemp 007E                                wtemp 007E  
                             ??_ISR 0071                   ??_myUARTtoRF_Main 0072  
                             ?_main 0056                               _BRG16 0CFB  
                     __CFG_WDTE$OFF 0000                               _T1CON 0018  
                             i1l612 0602                               i1l581 03F6  
     __size_of_CC2500_FrequencyCabr 000B                               _RCREG 0199  
                             _RCSTA 019D                               _TMR1H 0017  
                             _TMR1L 0016                               _SPBRG 019B  
                             _PORTA 000C                               _PORTB 000D  
                             _PORTC 000E                               _TRISA 008C  
                             _TRISB 008D                               _TRISC 008E  
                             _TXREG 019A                               _TXSTA 019E  
           __end_of_Timeout_Counter 056A                       __CFG_WRT$BOOT 0000  
                  __end_of_UART_ISR 03F8                  __size_of_UART_Main 001D  
                  __end_of_TMR1_ISR 04A2                    __end_of_UART_Set 0540  
      __size_of_CC2500_WriteCommand 0018                    __end_of_TMR1_Set 05D9  
                             _getch 0602                               _putch 05EE  
       __size_of_CC2500_ClearRXFIFO 0004         __size_of_CC2500_ClearTXFIFO 0004  
                    __pbitbssCOMMON 03D0                      __CFG_BOREN$OFF 0000  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
                 ?_CC2500_SIDLEMode 0070          __size_of_RF_Initialization 0003  
                ??_CC2500_SIDLEMode 0076                     __initialization 0015  
                  ?_CC2500_PowerRST 0070                        __end_of_main 041E  
                  __end_of_Fosc_Set 0616                      _Exception_Main 056A  
                  ?_CC2500_WriteREG 0074                              ??_main 007A  
                      ?_setLog_Code 0070             _setControl_Lights_Table 02C0  
                        _Receive_OK 03D0              ?_myMain_Initialization 0070  
                            ?_getch 0070                           ??_RF_Main 0079  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELB 018D                              _ANSELC 018E  
          _getMain_All_Error_Status 0628                              u197_25 049C  
                            _OSCCON 0099                              _TMR1IE 0488  
                            _TMR1IF 0088                              _SPBRGH 019C  
                            _IO_Set 0592                              _TRISC6 0476  
                            _TRISC7 0477                  DelayTime_1us@count 0072  
    __size_of_CC2500_PowerOnInitial 0015       __end_of_CC2500_PowerOnInitial 0555  
        __end_of_Mcu_Initialization 05CD                              _Timer1 003A  
                 __end_of_UART_Main 04BF              __end_of_Exception_Main 057E  
                            _r_data 0045                              _s_data 0046  
                            _myMain 0020                    ?_Timeout_Counter 0070  
       __size_of_CC2500_InitPATable 001D                 CC2500_TxData@loop_e 0077  
  __end_of_CC2500_registers_address 022F             __end_of__initialization 0031  
                     ?_my_MainTimer 0070               __end_of_UART_Transmit 0512  
                    __pcstackCOMMON 0070                     ?_Exception_Main 0070  
                      __pidataBANK1 0443                           ?_UART_ISR 0070  
                         ?_TMR1_ISR 0070                           ?_UART_Set 0070  
                     __end_of_getch 0608                           ?_TMR1_Set 0070  
         ??_setControl_Lights_Table 0073                       __end_of_putch 05F6  
        __end_of_set_TimeoutCleared 0612                  __size_of_getRxData 0086  
                 ?_CC2500_WriteByte 0070                  ??_CC2500_WriteByte 0072  
                           ??_getch 0070                             ??_putch 0072  
                        __pbssBANK0 0020                          __pbssBANK1 00C0  
                         ?_Fosc_Set 0070                             ?_IO_Set 0070  
                    ??_my_MainTimer 0072                     __CFG_VCAPEN$OFF 0000  
                   _myUARTtoRF_Main 062B                          __pnvCOMMON 007B  
                    DelayTime_1us@i 0074                      DelayTime_1us@j 0076  
       ??_myUARTtoRF_Initialization 0072                          __pmaintext 03F8  
               _CC2500_WriteCommand 0512                          ??_UART_ISR 0070  
                        ??_TMR1_ISR 0070                          ??_UART_Set 0072  
                        ??_TMR1_Set 0072                          __pintentry 0004  
                __size_of_setTxData 0070              __size_of_DelayTime_1us 0025  
      __end_of_setRF_Initialization 05EE                __size_of_setLog_Code 001C  
              ?_CC2500_WriteCommand 0070              __size_of_CC2500_TxData 005A  
                           _RF_Data 00C0                             _RF_Main 0622  
   __end_of_setControl_Lights_Table 0304                     setRF_Main@error 0055  
                        ??_Fosc_Set 0072                       ?_UART_Receive 0070  
      __end_of_CC2500_FrequencyCabr 05E4                     __size_of_IO_Set 0013  
                 __end_of_getRxData 0165            _CC2500_registers_address 0200  
                           __ptext1 0375                             __ptext2 062B  
                           __ptext3 0608                             __ptext4 05B4  
                           __ptext5 04A2                             __ptext6 04F8  
                           __ptext7 05EE                             __ptext8 0345  
                           __ptext9 0622           __size_of_CC2500_SIDLEMode 0004  
         _myUARTtoRF_Initialization 0608                        __size_of_ISR 000F  
        ??_getMain_All_Error_Status 0072                          _setRF_Main 0035  
           ??_myMain_Initialization 0072               ??_CC2500_WriteCommand 0074  
        __end_of_CC2500_ClearRXFIFO 0622          __end_of_CC2500_ClearTXFIFO 061E  
                           _product 007B             __end_of_myUARTtoRF_Main 062C  
                           clrloop0 05F7                end_of_initialization 0031  
                 _CC2500_InitSetREG 03A4                       _DelayTime_1us 041E  
                 __end_of_setTxData 01D5                      ??_UART_Receive 0073  
                           init_ram 05FC                  ?_CC2500_InitSetREG 0070  
                           initloop 05FD                      UART_Transmit@i 0074  
                     _CC2500_TxData 0266                 ??_CC2500_InitSetREG 0077  
                      __pstringtext 0200                           _UART_Main 04A2  
           CC2500_InitSetREG@loop_c 0055                  _Mcu_Initialization 05C1  
          __size_of_CC2500_PowerRST 0041                __end_of_my_MainTimer 03A4  
                  __CFG_FOSC$INTOSC 0000            __size_of_CC2500_WriteREG 0020  
         __end_of_CC2500_InitSetREG 03CE                 ?_Mcu_Initialization 0070  
                    ?_DelayTime_1us 0072                       ?_RF_RxDisable 0070  
   getMain_All_Error_Status@command 0070                    ??_Exception_Main 0073  
                    __end_of_IO_Set 05A5                _setRF_Initialization 05E4  
                    ?_CC2500_TxData 0070               _CC2500_PowerOnInitial 0540  
              ??_Mcu_Initialization 0072                          ?_UART_Main 0070  
                 __size_of_UART_ISR 002A                   __size_of_TMR1_ISR 001F  
                 __size_of_UART_Set 0016                   __size_of_TMR1_Set 000C  
              _CC2500_FrequencyCabr 05D9                         ?_setRF_Main 0070  
               start_initialization 0015                         __end_of_ISR 0013  
        __end_of_CC2500_InitPATable 04DC                    ?_myUARTtoRF_Main 0070  
                    ??_RF_RxDisable 0076                  _set_TimeoutCleared 060D  
                          ??_IO_Set 0072            __size_of_Timeout_Counter 0015  
             ?_setRF_Initialization 0070                   __size_of_Fosc_Set 0004  
         __size_of_CC2500_WriteByte 0014                 ?_set_TimeoutCleared 0070  
                         _Rx_Length 0041                 Exception_Main@error 0074  
                         _Tx_Length 005A                         __pdataBANK1 00A0  
              __end_of_UART_Receive 0375    __end_of_getMain_All_Error_Status 062B  
                  _CC2500_SIDLEMode 0616               ?_CC2500_FrequencyCabr 0070  
                         ___latbits 0002              __size_of_UART_Transmit 001A  
                     __pcstackBANK0 0053                ??_set_TimeoutCleared 0072  
                   ??_DelayTime_1us 0074          __size_of_CC2500_InitSetREG 002A  
                 ??_CC2500_PowerRST 0078                            ?_RF_Main 0070  
__size_of_myUARTtoRF_Initialization 0005                   ??_CC2500_WriteREG 0075  
             CC2500_WriteREG@w_addr 0076                     ??_CC2500_TxData 0076  
                         __pnvBANK0 005A                      getRxData@error 0074  
            ?_CC2500_PowerOnInitial 0070                 __size_of_setRF_Main 00AA  
          ?_setControl_Lights_Table 0070                           _getRxData 00DF  
             __size_of_my_MainTimer 002F                         ??_UART_Main 0077  
                     ??_setLog_Code 0072                       UART_Receive@i 0075  
            CC2500_WriteByte@loop_a 0073                           _r_address 0044  
    __size_of_myMain_Initialization 000D        __end_of_CC2500_patable_vaule 0266  
     __end_of_myMain_Initialization 05C1                      __size_of_getch 0006  
                    __size_of_putch 0008              ??_setRF_Initialization 0072  
 __end_of_myUARTtoRF_Initialization 060D                   _CC2500_rfSettings 022F  
                         clear_ram0 05F6            CC2500_InitPATable@loop_d 0079  
                      _my_MainTimer 0375                           _setTxData 0165  
                _CC2500_ClearRXFIFO 061E                  _CC2500_ClearTXFIFO 061A  
                     _UART_Transmit 04F8                   ??_Timeout_Counter 0072  
                          _UART_ISR 03CE                          ?_getRxData 0070  
                          _TMR1_ISR 0483              CC2500_InitSetREG@temp1 0053  
            CC2500_InitSetREG@temp2 0054                            _UART_Set 052A  
                          _TMR1_Set 05CD                 ?_CC2500_ClearRXFIFO 0070  
               ?_CC2500_ClearTXFIFO 0070                            _RF_Count 003D  
              __end_of_RF_RxDisable 05B4         __end_of_CC2500_WriteCommand 052A  
            ??_CC2500_FrequencyCabr 0078                    setRF_Main@loop_f 0053  
    getMain_All_Error_Status@status 0072                 __end_of_setLog_Code 04F8  
              ??_CC2500_ClearRXFIFO 0076                ??_CC2500_ClearTXFIFO 0076  
         __end_of_CC2500_rfSettings 025E                    __size_of_RF_Main 0003  
                          _Fosc_Set 0612   __size_of_getMain_All_Error_Status 0003  
         ?_getMain_All_Error_Status 0070                          ?_setTxData 0070  
                  _CC2500_WriteByte 057E                      ?_UART_Transmit 0070  
                          _SwDetect 0043               __size_of_UART_Receive 0030  
                      ??_setRF_Main 0078                CC2500_WriteREG@value 0074  
                          __ptext10 0035                            __ptext11 00DF  
                          __ptext20 052A                            __ptext12 04DC  
                          __ptext21 05CD                            __ptext13 02C0  
                          __ptext30 04BF                            __ptext22 0592  
                          __ptext14 0165                            __ptext31 0463  
                          __ptext23 0612                            __ptext15 05A5  
                          __ptext32 05D9                            __ptext24 056A  
                          __ptext16 0266                            __ptext41 03CE  
                          __ptext33 041E                            __ptext25 0628  
                          __ptext17 0625                            __ptext42 0602  
                          __ptext34 061A                            __ptext26 0540  
                          __ptext18 05E4                            __ptext43 0483  
                          __ptext35 061E                            __ptext27 0616  
                          __ptext19 05C1                            __ptext36 0512  
                          __ptext28 0304                            __ptext37 060D  
                          __ptext29 03A4                            __ptext38 0555  
                          __ptext39 057E                            __product 00A0  
                     __size_of_main 0026            __end_of_CC2500_SIDLEMode 061A  
                      _UART_Receive 0345          CC2500_WriteCommand@command 0075  
              setRF_Main@Receive_OK 0054                  _CC2500_InitPATable 04BF  
                __end_of_setRF_Main 00DF         __size_of_Mcu_Initialization 000C  
              _CC2500_patable_vaule 025E                         ??_getRxData 0073  
                          main@argc 0056                            main@argv 0058  
               ?_CC2500_InitPATable 0070                     _CC2500_PowerRST 0304  
                       _setLog_Code 04DC                           putch@byte 0072  
                   _CC2500_WriteREG 0463                       _Transceive_OK 03D1  
                       pic14e$flags 007E                            intlevel1 0000  
              ??_CC2500_InitPATable 0077             ??_CC2500_PowerOnInitial 007A  
                   ??_UART_Transmit 0073                         ??_setTxData 0072  
          __size_of_myUARTtoRF_Main 0001              CC2500_InitPATable@temp 0078  
             __size_of_RF_RxDisable 000F                   _RF_Initialization 0625  
                ?_RF_Initialization 0070                          _SPI0Buffer 0042  
           __size_of_Exception_Main 0014                 ??_RF_Initialization 0073  
  __size_of_setControl_Lights_Table 0044         __size_of_set_TimeoutCleared 0005  
             __end_of_DelayTime_1us 0443                     _Timeout_Counter 0555  
                      _RF_RxDisable 05A5           __end_of_RF_Initialization 0628  
             __end_of_CC2500_TxData 02C0             __end_of_CC2500_PowerRST 0345  
