

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Mar 31 13:24:56 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,delta=2
    65                           	psect	text52,local,class=CODE,merge=1,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,delta=2
    67                           	psect	text54,local,class=CODE,merge=1,delta=2
    68                           	psect	text55,local,class=CODE,merge=1,delta=2
    69                           	psect	text56,local,class=CODE,merge=1,delta=2
    70                           	psect	text57,local,class=CODE,merge=1,delta=2
    71                           	psect	text58,local,class=CODE,merge=1,delta=2
    72                           	psect	text59,local,class=CODE,merge=1,delta=2
    73                           	psect	text60,local,class=CODE,merge=1,delta=2
    74                           	psect	text61,local,class=CODE,merge=1,delta=2
    75                           	psect	text62,local,class=CODE,merge=1,delta=2
    76                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,delta=2
    80                           	psect	intentry,global,class=CODE,delta=2
    81                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    82                           	dabs	1,0x7E,2
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  0007                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000D                     	;# 
    96  000E                     	;# 
    97  000E                     	;# 
    98  000F                     	;# 
    99  0010                     	;# 
   100  0011                     	;# 
   101  0012                     	;# 
   102  0013                     	;# 
   103  0014                     	;# 
   104  0015                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001B                     	;# 
   112  001B                     	;# 
   113  001C                     	;# 
   114  001D                     	;# 
   115  001E                     	;# 
   116  001F                     	;# 
   117  0081                     	;# 
   118  0085                     	;# 
   119  0086                     	;# 
   120  0087                     	;# 
   121  0089                     	;# 
   122  008C                     	;# 
   123  008D                     	;# 
   124  008E                     	;# 
   125  008F                     	;# 
   126  0090                     	;# 
   127  0091                     	;# 
   128  0092                     	;# 
   129  0093                     	;# 
   130  0093                     	;# 
   131  0094                     	;# 
   132  0095                     	;# 
   133  0095                     	;# 
   134  0096                     	;# 
   135  0096                     	;# 
   136  0098                     	;# 
   137  0099                     	;# 
   138  009C                     	;# 
   139  009D                     	;# 
   140  009F                     	;# 
   141  0108                     	;# 
   142  0109                     	;# 
   143  010C                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  0185                     	;# 
   150  0186                     	;# 
   151  018C                     	;# 
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0009                     	;# 
   161  000A                     	;# 
   162  000B                     	;# 
   163  000C                     	;# 
   164  000D                     	;# 
   165  000E                     	;# 
   166  000E                     	;# 
   167  000F                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0013                     	;# 
   172  0014                     	;# 
   173  0015                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  001D                     	;# 
   184  001E                     	;# 
   185  001F                     	;# 
   186  0081                     	;# 
   187  0085                     	;# 
   188  0086                     	;# 
   189  0087                     	;# 
   190  0089                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  008F                     	;# 
   195  0090                     	;# 
   196  0091                     	;# 
   197  0092                     	;# 
   198  0093                     	;# 
   199  0093                     	;# 
   200  0094                     	;# 
   201  0095                     	;# 
   202  0095                     	;# 
   203  0096                     	;# 
   204  0096                     	;# 
   205  0098                     	;# 
   206  0099                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009F                     	;# 
   210  0108                     	;# 
   211  0109                     	;# 
   212  010C                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  0185                     	;# 
   219  0186                     	;# 
   220  018C                     	;# 
   221  0000                     	;# 
   222  0001                     	;# 
   223  0002                     	;# 
   224  0003                     	;# 
   225  0004                     	;# 
   226  0005                     	;# 
   227  0006                     	;# 
   228  0007                     	;# 
   229  0009                     	;# 
   230  000A                     	;# 
   231  000B                     	;# 
   232  000C                     	;# 
   233  000D                     	;# 
   234  000E                     	;# 
   235  000E                     	;# 
   236  000F                     	;# 
   237  0010                     	;# 
   238  0011                     	;# 
   239  0012                     	;# 
   240  0013                     	;# 
   241  0014                     	;# 
   242  0015                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0017                     	;# 
   246  0018                     	;# 
   247  0019                     	;# 
   248  001A                     	;# 
   249  001B                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  001D                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  0081                     	;# 
   256  0085                     	;# 
   257  0086                     	;# 
   258  0087                     	;# 
   259  0089                     	;# 
   260  008C                     	;# 
   261  008D                     	;# 
   262  008E                     	;# 
   263  008F                     	;# 
   264  0090                     	;# 
   265  0091                     	;# 
   266  0092                     	;# 
   267  0093                     	;# 
   268  0093                     	;# 
   269  0094                     	;# 
   270  0095                     	;# 
   271  0095                     	;# 
   272  0096                     	;# 
   273  0096                     	;# 
   274  0098                     	;# 
   275  0099                     	;# 
   276  009C                     	;# 
   277  009D                     	;# 
   278  009F                     	;# 
   279  0108                     	;# 
   280  0109                     	;# 
   281  010C                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010D                     	;# 
   285  010E                     	;# 
   286  010F                     	;# 
   287  0185                     	;# 
   288  0186                     	;# 
   289  018C                     	;# 
   290  0000                     	;# 
   291  0001                     	;# 
   292  0002                     	;# 
   293  0003                     	;# 
   294  0004                     	;# 
   295  0005                     	;# 
   296  0006                     	;# 
   297  0007                     	;# 
   298  0009                     	;# 
   299  000A                     	;# 
   300  000B                     	;# 
   301  000C                     	;# 
   302  000D                     	;# 
   303  000E                     	;# 
   304  000E                     	;# 
   305  000F                     	;# 
   306  0010                     	;# 
   307  0011                     	;# 
   308  0012                     	;# 
   309  0013                     	;# 
   310  0014                     	;# 
   311  0015                     	;# 
   312  0015                     	;# 
   313  0016                     	;# 
   314  0017                     	;# 
   315  0018                     	;# 
   316  0019                     	;# 
   317  001A                     	;# 
   318  001B                     	;# 
   319  001B                     	;# 
   320  001C                     	;# 
   321  001D                     	;# 
   322  001E                     	;# 
   323  001F                     	;# 
   324  0081                     	;# 
   325  0085                     	;# 
   326  0086                     	;# 
   327  0087                     	;# 
   328  0089                     	;# 
   329  008C                     	;# 
   330  008D                     	;# 
   331  008E                     	;# 
   332  008F                     	;# 
   333  0090                     	;# 
   334  0091                     	;# 
   335  0092                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0095                     	;# 
   341  0096                     	;# 
   342  0096                     	;# 
   343  0098                     	;# 
   344  0099                     	;# 
   345  009C                     	;# 
   346  009D                     	;# 
   347  009F                     	;# 
   348  0108                     	;# 
   349  0109                     	;# 
   350  010C                     	;# 
   351  010C                     	;# 
   352  010D                     	;# 
   353  010D                     	;# 
   354  010E                     	;# 
   355  010F                     	;# 
   356  0185                     	;# 
   357  0186                     	;# 
   358  018C                     	;# 
   359  0000                     	;# 
   360  0001                     	;# 
   361  0002                     	;# 
   362  0003                     	;# 
   363  0004                     	;# 
   364  0005                     	;# 
   365  0006                     	;# 
   366  0007                     	;# 
   367  0009                     	;# 
   368  000A                     	;# 
   369  000B                     	;# 
   370  000C                     	;# 
   371  000D                     	;# 
   372  000E                     	;# 
   373  000E                     	;# 
   374  000F                     	;# 
   375  0010                     	;# 
   376  0011                     	;# 
   377  0012                     	;# 
   378  0013                     	;# 
   379  0014                     	;# 
   380  0015                     	;# 
   381  0015                     	;# 
   382  0016                     	;# 
   383  0017                     	;# 
   384  0018                     	;# 
   385  0019                     	;# 
   386  001A                     	;# 
   387  001B                     	;# 
   388  001B                     	;# 
   389  001C                     	;# 
   390  001D                     	;# 
   391  001E                     	;# 
   392  001F                     	;# 
   393  0081                     	;# 
   394  0085                     	;# 
   395  0086                     	;# 
   396  0087                     	;# 
   397  0089                     	;# 
   398  008C                     	;# 
   399  008D                     	;# 
   400  008E                     	;# 
   401  008F                     	;# 
   402  0090                     	;# 
   403  0091                     	;# 
   404  0092                     	;# 
   405  0093                     	;# 
   406  0093                     	;# 
   407  0094                     	;# 
   408  0095                     	;# 
   409  0095                     	;# 
   410  0096                     	;# 
   411  0096                     	;# 
   412  0098                     	;# 
   413  0099                     	;# 
   414  009C                     	;# 
   415  009D                     	;# 
   416  009F                     	;# 
   417  0108                     	;# 
   418  0109                     	;# 
   419  010C                     	;# 
   420  010C                     	;# 
   421  010D                     	;# 
   422  010D                     	;# 
   423  010E                     	;# 
   424  010F                     	;# 
   425  0185                     	;# 
   426  0186                     	;# 
   427  018C                     	;# 
   428  0000                     	;# 
   429  0001                     	;# 
   430  0002                     	;# 
   431  0003                     	;# 
   432  0004                     	;# 
   433  0005                     	;# 
   434  0006                     	;# 
   435  0007                     	;# 
   436  0009                     	;# 
   437  000A                     	;# 
   438  000B                     	;# 
   439  000C                     	;# 
   440  000D                     	;# 
   441  000E                     	;# 
   442  000E                     	;# 
   443  000F                     	;# 
   444  0010                     	;# 
   445  0011                     	;# 
   446  0012                     	;# 
   447  0013                     	;# 
   448  0014                     	;# 
   449  0015                     	;# 
   450  0015                     	;# 
   451  0016                     	;# 
   452  0017                     	;# 
   453  0018                     	;# 
   454  0019                     	;# 
   455  001A                     	;# 
   456  001B                     	;# 
   457  001B                     	;# 
   458  001C                     	;# 
   459  001D                     	;# 
   460  001E                     	;# 
   461  001F                     	;# 
   462  0081                     	;# 
   463  0085                     	;# 
   464  0086                     	;# 
   465  0087                     	;# 
   466  0089                     	;# 
   467  008C                     	;# 
   468  008D                     	;# 
   469  008E                     	;# 
   470  008F                     	;# 
   471  0090                     	;# 
   472  0091                     	;# 
   473  0092                     	;# 
   474  0093                     	;# 
   475  0093                     	;# 
   476  0094                     	;# 
   477  0095                     	;# 
   478  0095                     	;# 
   479  0096                     	;# 
   480  0096                     	;# 
   481  0098                     	;# 
   482  0099                     	;# 
   483  009C                     	;# 
   484  009D                     	;# 
   485  009F                     	;# 
   486  0108                     	;# 
   487  0109                     	;# 
   488  010C                     	;# 
   489  010C                     	;# 
   490  010D                     	;# 
   491  010D                     	;# 
   492  010E                     	;# 
   493  010F                     	;# 
   494  0185                     	;# 
   495  0186                     	;# 
   496  018C                     	;# 
   497  0000                     	;# 
   498  0001                     	;# 
   499  0002                     	;# 
   500  0003                     	;# 
   501  0004                     	;# 
   502  0005                     	;# 
   503  0006                     	;# 
   504  0007                     	;# 
   505  0009                     	;# 
   506  000A                     	;# 
   507  000B                     	;# 
   508  000C                     	;# 
   509  000D                     	;# 
   510  000E                     	;# 
   511  000E                     	;# 
   512  000F                     	;# 
   513  0010                     	;# 
   514  0011                     	;# 
   515  0012                     	;# 
   516  0013                     	;# 
   517  0014                     	;# 
   518  0015                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0017                     	;# 
   522  0018                     	;# 
   523  0019                     	;# 
   524  001A                     	;# 
   525  001B                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  001D                     	;# 
   529  001E                     	;# 
   530  001F                     	;# 
   531  0081                     	;# 
   532  0085                     	;# 
   533  0086                     	;# 
   534  0087                     	;# 
   535  0089                     	;# 
   536  008C                     	;# 
   537  008D                     	;# 
   538  008E                     	;# 
   539  008F                     	;# 
   540  0090                     	;# 
   541  0091                     	;# 
   542  0092                     	;# 
   543  0093                     	;# 
   544  0093                     	;# 
   545  0094                     	;# 
   546  0095                     	;# 
   547  0095                     	;# 
   548  0096                     	;# 
   549  0096                     	;# 
   550  0098                     	;# 
   551  0099                     	;# 
   552  009C                     	;# 
   553  009D                     	;# 
   554  009F                     	;# 
   555  0108                     	;# 
   556  0109                     	;# 
   557  010C                     	;# 
   558  010C                     	;# 
   559  010D                     	;# 
   560  010D                     	;# 
   561  010E                     	;# 
   562  010F                     	;# 
   563  0185                     	;# 
   564  0186                     	;# 
   565  018C                     	;# 
   566  0000                     	;# 
   567  0001                     	;# 
   568  0002                     	;# 
   569  0003                     	;# 
   570  0004                     	;# 
   571  0005                     	;# 
   572  0006                     	;# 
   573  0007                     	;# 
   574  0009                     	;# 
   575  000A                     	;# 
   576  000B                     	;# 
   577  000C                     	;# 
   578  000D                     	;# 
   579  000E                     	;# 
   580  000E                     	;# 
   581  000F                     	;# 
   582  0010                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0014                     	;# 
   587  0015                     	;# 
   588  0015                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001B                     	;# 
   596  001C                     	;# 
   597  001D                     	;# 
   598  001E                     	;# 
   599  001F                     	;# 
   600  0081                     	;# 
   601  0085                     	;# 
   602  0086                     	;# 
   603  0087                     	;# 
   604  0089                     	;# 
   605  008C                     	;# 
   606  008D                     	;# 
   607  008E                     	;# 
   608  008F                     	;# 
   609  0090                     	;# 
   610  0091                     	;# 
   611  0092                     	;# 
   612  0093                     	;# 
   613  0093                     	;# 
   614  0094                     	;# 
   615  0095                     	;# 
   616  0095                     	;# 
   617  0096                     	;# 
   618  0096                     	;# 
   619  0098                     	;# 
   620  0099                     	;# 
   621  009C                     	;# 
   622  009D                     	;# 
   623  009F                     	;# 
   624  0108                     	;# 
   625  0109                     	;# 
   626  010C                     	;# 
   627  010C                     	;# 
   628  010D                     	;# 
   629  010D                     	;# 
   630  010E                     	;# 
   631  010F                     	;# 
   632  0185                     	;# 
   633  0186                     	;# 
   634  018C                     	;# 
   635  0000                     	;# 
   636  0001                     	;# 
   637  0002                     	;# 
   638  0003                     	;# 
   639  0004                     	;# 
   640  0005                     	;# 
   641  0006                     	;# 
   642  0007                     	;# 
   643  0009                     	;# 
   644  000A                     	;# 
   645  000B                     	;# 
   646  000C                     	;# 
   647  000D                     	;# 
   648  000E                     	;# 
   649  000E                     	;# 
   650  000F                     	;# 
   651  0010                     	;# 
   652  0011                     	;# 
   653  0012                     	;# 
   654  0013                     	;# 
   655  0014                     	;# 
   656  0015                     	;# 
   657  0015                     	;# 
   658  0016                     	;# 
   659  0017                     	;# 
   660  0018                     	;# 
   661  0019                     	;# 
   662  001A                     	;# 
   663  001B                     	;# 
   664  001B                     	;# 
   665  001C                     	;# 
   666  001D                     	;# 
   667  001E                     	;# 
   668  001F                     	;# 
   669  0081                     	;# 
   670  0085                     	;# 
   671  0086                     	;# 
   672  0087                     	;# 
   673  0089                     	;# 
   674  008C                     	;# 
   675  008D                     	;# 
   676  008E                     	;# 
   677  008F                     	;# 
   678  0090                     	;# 
   679  0091                     	;# 
   680  0092                     	;# 
   681  0093                     	;# 
   682  0093                     	;# 
   683  0094                     	;# 
   684  0095                     	;# 
   685  0095                     	;# 
   686  0096                     	;# 
   687  0096                     	;# 
   688  0098                     	;# 
   689  0099                     	;# 
   690  009C                     	;# 
   691  009D                     	;# 
   692  009F                     	;# 
   693  0108                     	;# 
   694  0109                     	;# 
   695  010C                     	;# 
   696  010C                     	;# 
   697  010D                     	;# 
   698  010D                     	;# 
   699  010E                     	;# 
   700  010F                     	;# 
   701  0185                     	;# 
   702  0186                     	;# 
   703  018C                     	;# 
   704  0000                     	;# 
   705  0001                     	;# 
   706  0002                     	;# 
   707  0003                     	;# 
   708  0004                     	;# 
   709  0005                     	;# 
   710  0006                     	;# 
   711  0007                     	;# 
   712  0009                     	;# 
   713  000A                     	;# 
   714  000B                     	;# 
   715  000C                     	;# 
   716  000D                     	;# 
   717  000E                     	;# 
   718  000E                     	;# 
   719  000F                     	;# 
   720  0010                     	;# 
   721  0011                     	;# 
   722  0012                     	;# 
   723  0013                     	;# 
   724  0014                     	;# 
   725  0015                     	;# 
   726  0015                     	;# 
   727  0016                     	;# 
   728  0017                     	;# 
   729  0018                     	;# 
   730  0019                     	;# 
   731  001A                     	;# 
   732  001B                     	;# 
   733  001B                     	;# 
   734  001C                     	;# 
   735  001D                     	;# 
   736  001E                     	;# 
   737  001F                     	;# 
   738  0081                     	;# 
   739  0085                     	;# 
   740  0086                     	;# 
   741  0087                     	;# 
   742  0089                     	;# 
   743  008C                     	;# 
   744  008D                     	;# 
   745  008E                     	;# 
   746  008F                     	;# 
   747  0090                     	;# 
   748  0091                     	;# 
   749  0092                     	;# 
   750  0093                     	;# 
   751  0093                     	;# 
   752  0094                     	;# 
   753  0095                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0096                     	;# 
   757  0098                     	;# 
   758  0099                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009F                     	;# 
   762  0108                     	;# 
   763  0109                     	;# 
   764  010C                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  010F                     	;# 
   770  0185                     	;# 
   771  0186                     	;# 
   772  018C                     	;# 
   773  0000                     	;# 
   774  0001                     	;# 
   775  0002                     	;# 
   776  0003                     	;# 
   777  0004                     	;# 
   778  0005                     	;# 
   779  0006                     	;# 
   780  0007                     	;# 
   781  0009                     	;# 
   782  000A                     	;# 
   783  000B                     	;# 
   784  000C                     	;# 
   785  000D                     	;# 
   786  000E                     	;# 
   787  000E                     	;# 
   788  000F                     	;# 
   789  0010                     	;# 
   790  0011                     	;# 
   791  0012                     	;# 
   792  0013                     	;# 
   793  0014                     	;# 
   794  0015                     	;# 
   795  0015                     	;# 
   796  0016                     	;# 
   797  0017                     	;# 
   798  0018                     	;# 
   799  0019                     	;# 
   800  001A                     	;# 
   801  001B                     	;# 
   802  001B                     	;# 
   803  001C                     	;# 
   804  001D                     	;# 
   805  001E                     	;# 
   806  001F                     	;# 
   807  0081                     	;# 
   808  0085                     	;# 
   809  0086                     	;# 
   810  0087                     	;# 
   811  0089                     	;# 
   812  008C                     	;# 
   813  008D                     	;# 
   814  008E                     	;# 
   815  008F                     	;# 
   816  0090                     	;# 
   817  0091                     	;# 
   818  0092                     	;# 
   819  0093                     	;# 
   820  0093                     	;# 
   821  0094                     	;# 
   822  0095                     	;# 
   823  0095                     	;# 
   824  0096                     	;# 
   825  0096                     	;# 
   826  0098                     	;# 
   827  0099                     	;# 
   828  009C                     	;# 
   829  009D                     	;# 
   830  009F                     	;# 
   831  0108                     	;# 
   832  0109                     	;# 
   833  010C                     	;# 
   834  010C                     	;# 
   835  010D                     	;# 
   836  010D                     	;# 
   837  010E                     	;# 
   838  010F                     	;# 
   839  0185                     	;# 
   840  0186                     	;# 
   841  018C                     	;# 
   842  0000                     	;# 
   843  0001                     	;# 
   844  0002                     	;# 
   845  0003                     	;# 
   846  0004                     	;# 
   847  0005                     	;# 
   848  0006                     	;# 
   849  0007                     	;# 
   850  0009                     	;# 
   851  000A                     	;# 
   852  000B                     	;# 
   853  000C                     	;# 
   854  000D                     	;# 
   855  000E                     	;# 
   856  000E                     	;# 
   857  000F                     	;# 
   858  0010                     	;# 
   859  0011                     	;# 
   860  0012                     	;# 
   861  0013                     	;# 
   862  0014                     	;# 
   863  0015                     	;# 
   864  0015                     	;# 
   865  0016                     	;# 
   866  0017                     	;# 
   867  0018                     	;# 
   868  0019                     	;# 
   869  001A                     	;# 
   870  001B                     	;# 
   871  001B                     	;# 
   872  001C                     	;# 
   873  001D                     	;# 
   874  001E                     	;# 
   875  001F                     	;# 
   876  0081                     	;# 
   877  0085                     	;# 
   878  0086                     	;# 
   879  0087                     	;# 
   880  0089                     	;# 
   881  008C                     	;# 
   882  008D                     	;# 
   883  008E                     	;# 
   884  008F                     	;# 
   885  0090                     	;# 
   886  0091                     	;# 
   887  0092                     	;# 
   888  0093                     	;# 
   889  0093                     	;# 
   890  0094                     	;# 
   891  0095                     	;# 
   892  0095                     	;# 
   893  0096                     	;# 
   894  0096                     	;# 
   895  0098                     	;# 
   896  0099                     	;# 
   897  009C                     	;# 
   898  009D                     	;# 
   899  009F                     	;# 
   900  0108                     	;# 
   901  0109                     	;# 
   902  010C                     	;# 
   903  010C                     	;# 
   904  010D                     	;# 
   905  010D                     	;# 
   906  010E                     	;# 
   907  010F                     	;# 
   908  0185                     	;# 
   909  0186                     	;# 
   910  018C                     	;# 
   911  0000                     	;# 
   912  0001                     	;# 
   913  0002                     	;# 
   914  0003                     	;# 
   915  0004                     	;# 
   916  0005                     	;# 
   917  0006                     	;# 
   918  0007                     	;# 
   919  0009                     	;# 
   920  000A                     	;# 
   921  000B                     	;# 
   922  000C                     	;# 
   923  000D                     	;# 
   924  000E                     	;# 
   925  000E                     	;# 
   926  000F                     	;# 
   927  0010                     	;# 
   928  0011                     	;# 
   929  0012                     	;# 
   930  0013                     	;# 
   931  0014                     	;# 
   932  0015                     	;# 
   933  0015                     	;# 
   934  0016                     	;# 
   935  0017                     	;# 
   936  0018                     	;# 
   937  0019                     	;# 
   938  001A                     	;# 
   939  001B                     	;# 
   940  001B                     	;# 
   941  001C                     	;# 
   942  001D                     	;# 
   943  001E                     	;# 
   944  001F                     	;# 
   945  0081                     	;# 
   946  0085                     	;# 
   947  0086                     	;# 
   948  0087                     	;# 
   949  0089                     	;# 
   950  008C                     	;# 
   951  008D                     	;# 
   952  008E                     	;# 
   953  008F                     	;# 
   954  0090                     	;# 
   955  0091                     	;# 
   956  0092                     	;# 
   957  0093                     	;# 
   958  0093                     	;# 
   959  0094                     	;# 
   960  0095                     	;# 
   961  0095                     	;# 
   962  0096                     	;# 
   963  0096                     	;# 
   964  0098                     	;# 
   965  0099                     	;# 
   966  009C                     	;# 
   967  009D                     	;# 
   968  009F                     	;# 
   969  0108                     	;# 
   970  0109                     	;# 
   971  010C                     	;# 
   972  010C                     	;# 
   973  010D                     	;# 
   974  010D                     	;# 
   975  010E                     	;# 
   976  010F                     	;# 
   977  0185                     	;# 
   978  0186                     	;# 
   979  018C                     	;# 
   980  0000                     	;# 
   981  0001                     	;# 
   982  0002                     	;# 
   983  0003                     	;# 
   984  0004                     	;# 
   985  0005                     	;# 
   986  0006                     	;# 
   987  0007                     	;# 
   988  0009                     	;# 
   989  000A                     	;# 
   990  000B                     	;# 
   991  000C                     	;# 
   992  000D                     	;# 
   993  000E                     	;# 
   994  000E                     	;# 
   995  000F                     	;# 
   996  0010                     	;# 
   997  0011                     	;# 
   998  0012                     	;# 
   999  0013                     	;# 
  1000  0014                     	;# 
  1001  0015                     	;# 
  1002  0015                     	;# 
  1003  0016                     	;# 
  1004  0017                     	;# 
  1005  0018                     	;# 
  1006  0019                     	;# 
  1007  001A                     	;# 
  1008  001B                     	;# 
  1009  001B                     	;# 
  1010  001C                     	;# 
  1011  001D                     	;# 
  1012  001E                     	;# 
  1013  001F                     	;# 
  1014  0081                     	;# 
  1015  0085                     	;# 
  1016  0086                     	;# 
  1017  0087                     	;# 
  1018  0089                     	;# 
  1019  008C                     	;# 
  1020  008D                     	;# 
  1021  008E                     	;# 
  1022  008F                     	;# 
  1023  0090                     	;# 
  1024  0091                     	;# 
  1025  0092                     	;# 
  1026  0093                     	;# 
  1027  0093                     	;# 
  1028  0094                     	;# 
  1029  0095                     	;# 
  1030  0095                     	;# 
  1031  0096                     	;# 
  1032  0096                     	;# 
  1033  0098                     	;# 
  1034  0099                     	;# 
  1035  009C                     	;# 
  1036  009D                     	;# 
  1037  009F                     	;# 
  1038  0108                     	;# 
  1039  0109                     	;# 
  1040  010C                     	;# 
  1041  010C                     	;# 
  1042  010D                     	;# 
  1043  010D                     	;# 
  1044  010E                     	;# 
  1045  010F                     	;# 
  1046  0185                     	;# 
  1047  0186                     	;# 
  1048  018C                     	;# 
  1049  0000                     	;# 
  1050  0001                     	;# 
  1051  0002                     	;# 
  1052  0003                     	;# 
  1053  0004                     	;# 
  1054  0005                     	;# 
  1055  0006                     	;# 
  1056  0007                     	;# 
  1057  0009                     	;# 
  1058  000A                     	;# 
  1059  000B                     	;# 
  1060  000C                     	;# 
  1061  000D                     	;# 
  1062  000E                     	;# 
  1063  000E                     	;# 
  1064  000F                     	;# 
  1065  0010                     	;# 
  1066  0011                     	;# 
  1067  0012                     	;# 
  1068  0013                     	;# 
  1069  0014                     	;# 
  1070  0015                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  001D                     	;# 
  1081  001E                     	;# 
  1082  001F                     	;# 
  1083  0081                     	;# 
  1084  0085                     	;# 
  1085  0086                     	;# 
  1086  0087                     	;# 
  1087  0089                     	;# 
  1088  008C                     	;# 
  1089  008D                     	;# 
  1090  008E                     	;# 
  1091  008F                     	;# 
  1092  0090                     	;# 
  1093  0091                     	;# 
  1094  0092                     	;# 
  1095  0093                     	;# 
  1096  0093                     	;# 
  1097  0094                     	;# 
  1098  0095                     	;# 
  1099  0095                     	;# 
  1100  0096                     	;# 
  1101  0096                     	;# 
  1102  0098                     	;# 
  1103  0099                     	;# 
  1104  009C                     	;# 
  1105  009D                     	;# 
  1106  009F                     	;# 
  1107  0108                     	;# 
  1108  0109                     	;# 
  1109  010C                     	;# 
  1110  010C                     	;# 
  1111  010D                     	;# 
  1112  010D                     	;# 
  1113  010E                     	;# 
  1114  010F                     	;# 
  1115  0185                     	;# 
  1116  0186                     	;# 
  1117  018C                     	;# 
  1118  0000                     	;# 
  1119  0001                     	;# 
  1120  0002                     	;# 
  1121  0003                     	;# 
  1122  0004                     	;# 
  1123  0005                     	;# 
  1124  0006                     	;# 
  1125  0007                     	;# 
  1126  0009                     	;# 
  1127  000A                     	;# 
  1128  000B                     	;# 
  1129  000C                     	;# 
  1130  000D                     	;# 
  1131  000E                     	;# 
  1132  000E                     	;# 
  1133  000F                     	;# 
  1134  0010                     	;# 
  1135  0011                     	;# 
  1136  0012                     	;# 
  1137  0013                     	;# 
  1138  0014                     	;# 
  1139  0015                     	;# 
  1140  0015                     	;# 
  1141  0016                     	;# 
  1142  0017                     	;# 
  1143  0018                     	;# 
  1144  0019                     	;# 
  1145  001A                     	;# 
  1146  001B                     	;# 
  1147  001B                     	;# 
  1148  001C                     	;# 
  1149  001D                     	;# 
  1150  001E                     	;# 
  1151  001F                     	;# 
  1152  0081                     	;# 
  1153  0085                     	;# 
  1154  0086                     	;# 
  1155  0087                     	;# 
  1156  0089                     	;# 
  1157  008C                     	;# 
  1158  008D                     	;# 
  1159  008E                     	;# 
  1160  008F                     	;# 
  1161  0090                     	;# 
  1162  0091                     	;# 
  1163  0092                     	;# 
  1164  0093                     	;# 
  1165  0093                     	;# 
  1166  0094                     	;# 
  1167  0095                     	;# 
  1168  0095                     	;# 
  1169  0096                     	;# 
  1170  0096                     	;# 
  1171  0098                     	;# 
  1172  0099                     	;# 
  1173  009C                     	;# 
  1174  009D                     	;# 
  1175  009F                     	;# 
  1176  0108                     	;# 
  1177  0109                     	;# 
  1178  010C                     	;# 
  1179  010C                     	;# 
  1180  010D                     	;# 
  1181  010D                     	;# 
  1182  010E                     	;# 
  1183  010F                     	;# 
  1184  0185                     	;# 
  1185  0186                     	;# 
  1186  018C                     	;# 
  1187  0000                     	;# 
  1188  0001                     	;# 
  1189  0002                     	;# 
  1190  0003                     	;# 
  1191  0004                     	;# 
  1192  0005                     	;# 
  1193  0006                     	;# 
  1194  0007                     	;# 
  1195  0009                     	;# 
  1196  000A                     	;# 
  1197  000B                     	;# 
  1198  000C                     	;# 
  1199  000D                     	;# 
  1200  000E                     	;# 
  1201  000E                     	;# 
  1202  000F                     	;# 
  1203  0010                     	;# 
  1204  0011                     	;# 
  1205  0012                     	;# 
  1206  0013                     	;# 
  1207  0014                     	;# 
  1208  0015                     	;# 
  1209  0015                     	;# 
  1210  0016                     	;# 
  1211  0017                     	;# 
  1212  0018                     	;# 
  1213  0019                     	;# 
  1214  001A                     	;# 
  1215  001B                     	;# 
  1216  001B                     	;# 
  1217  001C                     	;# 
  1218  001D                     	;# 
  1219  001E                     	;# 
  1220  001F                     	;# 
  1221  0081                     	;# 
  1222  0085                     	;# 
  1223  0086                     	;# 
  1224  0087                     	;# 
  1225  0089                     	;# 
  1226  008C                     	;# 
  1227  008D                     	;# 
  1228  008E                     	;# 
  1229  008F                     	;# 
  1230  0090                     	;# 
  1231  0091                     	;# 
  1232  0092                     	;# 
  1233  0093                     	;# 
  1234  0093                     	;# 
  1235  0094                     	;# 
  1236  0095                     	;# 
  1237  0095                     	;# 
  1238  0096                     	;# 
  1239  0096                     	;# 
  1240  0098                     	;# 
  1241  0099                     	;# 
  1242  009C                     	;# 
  1243  009D                     	;# 
  1244  009F                     	;# 
  1245  0108                     	;# 
  1246  0109                     	;# 
  1247  010C                     	;# 
  1248  010C                     	;# 
  1249  010D                     	;# 
  1250  010D                     	;# 
  1251  010E                     	;# 
  1252  010F                     	;# 
  1253  0185                     	;# 
  1254  0186                     	;# 
  1255  018C                     	;# 
  1256  0000                     	;# 
  1257  0001                     	;# 
  1258  0002                     	;# 
  1259  0003                     	;# 
  1260  0004                     	;# 
  1261  0005                     	;# 
  1262  0006                     	;# 
  1263  0007                     	;# 
  1264  0009                     	;# 
  1265  000A                     	;# 
  1266  000B                     	;# 
  1267  000C                     	;# 
  1268  000D                     	;# 
  1269  000E                     	;# 
  1270  000E                     	;# 
  1271  000F                     	;# 
  1272  0010                     	;# 
  1273  0011                     	;# 
  1274  0012                     	;# 
  1275  0013                     	;# 
  1276  0014                     	;# 
  1277  0015                     	;# 
  1278  0015                     	;# 
  1279  0016                     	;# 
  1280  0017                     	;# 
  1281  0018                     	;# 
  1282  0019                     	;# 
  1283  001A                     	;# 
  1284  001B                     	;# 
  1285  001B                     	;# 
  1286  001C                     	;# 
  1287  001D                     	;# 
  1288  001E                     	;# 
  1289  001F                     	;# 
  1290  0081                     	;# 
  1291  0085                     	;# 
  1292  0086                     	;# 
  1293  0087                     	;# 
  1294  0089                     	;# 
  1295  008C                     	;# 
  1296  008D                     	;# 
  1297  008E                     	;# 
  1298  008F                     	;# 
  1299  0090                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0093                     	;# 
  1303  0093                     	;# 
  1304  0094                     	;# 
  1305  0095                     	;# 
  1306  0095                     	;# 
  1307  0096                     	;# 
  1308  0096                     	;# 
  1309  0098                     	;# 
  1310  0099                     	;# 
  1311  009C                     	;# 
  1312  009D                     	;# 
  1313  009F                     	;# 
  1314  0108                     	;# 
  1315  0109                     	;# 
  1316  010C                     	;# 
  1317  010C                     	;# 
  1318  010D                     	;# 
  1319  010D                     	;# 
  1320  010E                     	;# 
  1321  010F                     	;# 
  1322  0185                     	;# 
  1323  0186                     	;# 
  1324  018C                     	;# 
  1325  001F                     _ADCON0	set	31
  1326  001E                     _ADRES	set	30
  1327  0005                     _PORTA	set	5
  1328  0006                     _PORTB	set	6
  1329  0007                     _PORTC	set	7
  1330  0010                     _T1CON	set	16
  1331  000F                     _TMR1H	set	15
  1332  000E                     _TMR1L	set	14
  1333  005F                     _GIE	set	95
  1334  00F9                     _GO_nDONE	set	249
  1335  005E                     _PEIE	set	94
  1336  002D                     _RA5	set	45
  1337  002E                     _RA6	set	46
  1338  002F                     _RA7	set	47
  1339  0032                     _RB2	set	50
  1340  0033                     _RB3	set	51
  1341  0060                     _TMR1IF	set	96
  1342  009F                     _ADCON1	set	159
  1343  009D                     _FVRCON	set	157
  1344  0090                     _OSCCON	set	144
  1345  0085                     _TRISA	set	133
  1346  0086                     _TRISB	set	134
  1347  0087                     _TRISC	set	135
  1348  0095                     _WPUB	set	149
  1349  0408                     _PS0	set	1032
  1350  0409                     _PS1	set	1033
  1351  040A                     _PS2	set	1034
  1352  040B                     _PSA	set	1035
  1353  0460                     _TMR1IE	set	1120
  1354  0185                     _ANSELA	set	389
  1355  0186                     _ANSELB	set	390
  1356                           
  1357                           	psect	text0
  1358  0000                     __ptext0:	
  1359                           ; #config settings
  1360                           
  1361                           
  1362                           ;psect for function _TMR1_ISR
  1363  0000                     
  1364                           	psect	cinit
  1365  0013                     start_initialization:	
  1366  0013                     __initialization:	
  1367                           
  1368                           ; Clear objects allocated to COMMON
  1369  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1370  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1371  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1372  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1373                           
  1374                           ; Clear objects allocated to BANK0
  1375  0017  1383               	bcf	3,7	;select IRP bank0
  1376  0018  3020               	movlw	low __pbssBANK0
  1377  0019  0084               	movwf	4
  1378  001A  304F               	movlw	low (__pbssBANK0+47)
  1379  001B  158A  22AA  118A   	fcall	clear_ram0
  1380                           
  1381                           ; Clear objects allocated to BANK1
  1382  001E  30A0               	movlw	low __pbssBANK1
  1383  001F  0084               	movwf	4
  1384  0020  30E6               	movlw	low (__pbssBANK1+70)
  1385  0021  158A  22AA  118A   	fcall	clear_ram0
  1386                           
  1387                           ; Clear objects allocated to BANK2
  1388  0024  1783               	bsf	3,7	;select IRP bank2
  1389  0025  3020               	movlw	low __pbssBANK2
  1390  0026  0084               	movwf	4
  1391  0027  3030               	movlw	low (__pbssBANK2+16)
  1392  0028  158A  22AA         	fcall	clear_ram0
  1393  002A                     end_of_initialization:	
  1394                           ;End of C runtime variable initialization code
  1395                           
  1396  002A                     __end_of__initialization:	
  1397  002A  0183               	clrf	3
  1398  002B  158A  2F9A         	ljmp	_main	;jump to C main() function
  1399                           
  1400                           	psect	bssCOMMON
  1401  0076                     __pbssCOMMON:	
  1402  0076                     _LED:	
  1403  0076                     	ds	1
  1404  0077                     _Light:	
  1405  0077                     	ds	1
  1406  0078                     _Lights:	
  1407  0078                     	ds	1
  1408  0079                     _LightsControl:	
  1409  0079                     	ds	1
  1410                           
  1411                           	psect	bssBANK0
  1412  0020                     __pbssBANK0:	
  1413  0020                     _SYSC:	
  1414  0020                     	ds	5
  1415  0025                     _myMain:	
  1416  0025                     	ds	5
  1417  002A                     _PIRLED:	
  1418  002A                     	ds	4
  1419  002E                     __CDS:	
  1420  002E                     	ds	4
  1421  0032                     _Timer1:	
  1422  0032                     	ds	3
  1423  0035                     _WDT:	
  1424  0035                     	ds	2
  1425  0037                     _Cmd:	
  1426  0037                     	ds	1
  1427  0038                     _SwDetect:	
  1428  0038                     	ds	1
  1429  0039                     _Temp:	
  1430  0039                     	ds	9
  1431  0042                     _Lights1:	
  1432  0042                     	ds	5
  1433  0047                     _VarLED1:	
  1434  0047                     	ds	4
  1435  004B                     _VarLED2:	
  1436  004B                     	ds	4
  1437                           
  1438                           	psect	bssBANK1
  1439  00A0                     __pbssBANK1:	
  1440  00A0                     __PIR:	
  1441  00A0                     	ds	42
  1442  00CA                     _Load:	
  1443  00CA                     	ds	28
  1444                           
  1445                           	psect	bssBANK2
  1446  0120                     __pbssBANK2:	
  1447  0120                     _u1:	
  1448  0120                     	ds	16
  1449                           
  1450                           	psect	clrtext
  1451  0AAA                     clear_ram0:	
  1452                           ;	Called with FSR containing the base address, and
  1453                           ;	W with the last address+1
  1454                           
  1455  0AAA  0064               	clrwdt	;clear the watchdog before getting into this loop
  1456  0AAB                     clrloop0:	
  1457  0AAB  0180               	clrf	0	;clear RAM location pointed to by FSR
  1458  0AAC  0A84               	incf	4,f	;increment pointer
  1459  0AAD  0604               	xorwf	4,w	;XOR with final address
  1460  0AAE  1903               	btfsc	3,2	;have we reached the end yet?
  1461  0AAF  3400               	retlw	0	;all done for this memory range, return
  1462  0AB0  0604               	xorwf	4,w	;XOR again to restore value
  1463  0AB1  2AAB               	goto	clrloop0	;do the next byte
  1464                           
  1465                           	psect	cstackCOMMON
  1466  0070                     __pcstackCOMMON:	
  1467  0070                     ?_setLED_Initialization:	
  1468  0070                     ?_setPIRLED_Main:	
  1469                           ; 0 bytes @ 0x0
  1470                           
  1471  0070                     ?_Fosc_Set:	
  1472                           ; 0 bytes @ 0x0
  1473                           
  1474  0070                     ?_IO_Set:	
  1475                           ; 0 bytes @ 0x0
  1476                           
  1477  0070                     ?_TMR1_Set:	
  1478                           ; 0 bytes @ 0x0
  1479                           
  1480  0070                     ?_ADC_Set:	
  1481                           ; 0 bytes @ 0x0
  1482                           
  1483  0070                     ?_WDT_Set:	
  1484                           ; 0 bytes @ 0x0
  1485                           
  1486  0070                     ?_TMR1_ISR:	
  1487                           ; 0 bytes @ 0x0
  1488                           
  1489  0070                     ??_TMR1_ISR:	
  1490                           ; 0 bytes @ 0x0
  1491                           
  1492  0070                     ?_Timeout_Counter:	
  1493                           ; 0 bytes @ 0x0
  1494                           
  1495  0070                     ?_set_TimeoutCleared:	
  1496                           ; 0 bytes @ 0x0
  1497                           
  1498  0070                     ?_WDT_Clearing:	
  1499                           ; 0 bytes @ 0x0
  1500                           
  1501  0070                     ?_myMain_Initialization:	
  1502                           ; 0 bytes @ 0x0
  1503                           
  1504  0070                     ?_SYSC_Initialization:	
  1505                           ; 0 bytes @ 0x0
  1506                           
  1507  0070                     ?_Temp_Initialization:	
  1508                           ; 0 bytes @ 0x0
  1509                           
  1510  0070                     ?_Load_Initialization:	
  1511                           ; 0 bytes @ 0x0
  1512                           
  1513  0070                     ?_Lights_Initialization:	
  1514                           ; 0 bytes @ 0x0
  1515                           
  1516  0070                     ?_PIR_Initialization:	
  1517                           ; 0 bytes @ 0x0
  1518                           
  1519  0070                     ?_DetectSYSC_Signal:	
  1520                           ; 0 bytes @ 0x0
  1521                           
  1522  0070                     ?_getLoad_AD:	
  1523                           ; 0 bytes @ 0x0
  1524                           
  1525  0070                     ?_getTemp_AD:	
  1526                           ; 0 bytes @ 0x0
  1527                           
  1528  0070                     ?_my_MainTimer:	
  1529                           ; 0 bytes @ 0x0
  1530                           
  1531  0070                     ?_SYSC_Main:	
  1532                           ; 0 bytes @ 0x0
  1533                           
  1534  0070                     ?_Temp_Main:	
  1535                           ; 0 bytes @ 0x0
  1536                           
  1537  0070                     ?_Load_Main:	
  1538                           ; 0 bytes @ 0x0
  1539                           
  1540  0070                     ?_Lights_Main:	
  1541                           ; 0 bytes @ 0x0
  1542                           
  1543  0070                     ?_PIR_Main:	
  1544                           ; 0 bytes @ 0x0
  1545                           
  1546  0070                     ?_Exception_Main:	
  1547                           ; 0 bytes @ 0x0
  1548                           
  1549  0070                     ?_setLights_SwOn:	
  1550                           ; 0 bytes @ 0x0
  1551                           
  1552  0070                     ?_setLights_SwOff:	
  1553                           ; 0 bytes @ 0x0
  1554                           
  1555  0070                     ?_setLoad_AH_AL_Restore:	
  1556                           ; 0 bytes @ 0x0
  1557                           
  1558  0070                     ?_setTemp_Initialization:	
  1559                           ; 0 bytes @ 0x0
  1560                           
  1561  0070                     ?_setTemp_Main:	
  1562                           ; 0 bytes @ 0x0
  1563                           
  1564  0070                     ?_setOverTemp_ADV_Restore:	
  1565                           ; 0 bytes @ 0x0
  1566                           
  1567  0070                     ?_setSYSC_Initialization:	
  1568                           ; 0 bytes @ 0x0
  1569                           
  1570  0070                     ?_setSYSC_Main:	
  1571                           ; 0 bytes @ 0x0
  1572                           
  1573  0070                     ?_setLights_Initialization:	
  1574                           ; 0 bytes @ 0x0
  1575                           
  1576  0070                     ?_setLights_Main:	
  1577                           ; 0 bytes @ 0x0
  1578                           
  1579  0070                     ?_Lights_Control:	
  1580                           ; 0 bytes @ 0x0
  1581                           
  1582  0070                     ?_setLights_Line:	
  1583                           ; 0 bytes @ 0x0
  1584                           
  1585  0070                     ?_CDS_Initialization:	
  1586                           ; 0 bytes @ 0x0
  1587                           
  1588  0070                     ?_CDS_Main:	
  1589                           ; 0 bytes @ 0x0
  1590                           
  1591  0070                     ?_LedPointSelect:	
  1592                           ; 0 bytes @ 0x0
  1593                           
  1594  0070                     ?_LED_Initialization:	
  1595                           ; 0 bytes @ 0x0
  1596                           
  1597  0070                     ?_LED_Main:	
  1598                           ; 0 bytes @ 0x0
  1599                           
  1600  0070                     ?_Mcu_Initialization:	
  1601                           ; 0 bytes @ 0x0
  1602                           
  1603  0070                     ?_ISR:	
  1604                           ; 0 bytes @ 0x0
  1605                           
  1606  0070                     ??_ISR:	
  1607                           ; 0 bytes @ 0x0
  1608                           
  1609  0070                     ?_WDT_Main:	
  1610                           ; 0 bytes @ 0x0
  1611                           
  1612  0070                     ?_LightsPointSelect:	
  1613                           ; 0 bytes @ 0x0
  1614                           
  1615  0070                     ?_getLights_Status:	
  1616                           ; 0 bytes @ 0x0
  1617                           
  1618  0070                     ?_getAll_Lights_Line:	
  1619                           ; 1 bytes @ 0x0
  1620                           
  1621  0070                     ?_getLight_LoadGO:	
  1622                           ; 1 bytes @ 0x0
  1623                           
  1624  0070                     ?_getLight_Load_Status:	
  1625                           ; 1 bytes @ 0x0
  1626                           
  1627  0070                     ?_getLights_Allow_Condition:	
  1628                           ; 1 bytes @ 0x0
  1629                           
  1630  0070                     ?_getCDS_Status:	
  1631                           ; 1 bytes @ 0x0
  1632                           
  1633  0070                     ?_getMain_All_LightsStatus:	
  1634                           ; 1 bytes @ 0x0
  1635                           
  1636  0070                     ?_getMain_All_Error_Status:	
  1637                           ; 1 bytes @ 0x0
  1638                           
  1639  0070                     ?_getMain_Lights_Count:	
  1640                           ; 1 bytes @ 0x0
  1641                           
  1642  0070                     ?_getLoad_OK:	
  1643                           ; 1 bytes @ 0x0
  1644                           
  1645  0070                     getLights_Allow_Condition@lights:	
  1646                           ; 1 bytes @ 0x0
  1647                           
  1648                           
  1649                           ; 1 bytes @ 0x0
  1650  0070                     	ds	4
  1651  0074                     ??_Fosc_Set:	
  1652  0074                     ??_IO_Set:	
  1653                           ; 0 bytes @ 0x4
  1654                           
  1655  0074                     ??_TMR1_Set:	
  1656                           ; 0 bytes @ 0x4
  1657                           
  1658  0074                     ??_ADC_Set:	
  1659                           ; 0 bytes @ 0x4
  1660                           
  1661  0074                     ??_WDT_Set:	
  1662                           ; 0 bytes @ 0x4
  1663                           
  1664  0074                     ??_Timeout_Counter:	
  1665                           ; 0 bytes @ 0x4
  1666                           
  1667  0074                     ??_set_TimeoutCleared:	
  1668                           ; 0 bytes @ 0x4
  1669                           
  1670  0074                     ??_WDT_Clearing:	
  1671                           ; 0 bytes @ 0x4
  1672                           
  1673  0074                     ??_myMain_Initialization:	
  1674                           ; 0 bytes @ 0x4
  1675                           
  1676  0074                     ??_SYSC_Initialization:	
  1677                           ; 0 bytes @ 0x4
  1678                           
  1679  0074                     ??_Temp_Initialization:	
  1680                           ; 0 bytes @ 0x4
  1681                           
  1682  0074                     ??_PIR_Initialization:	
  1683                           ; 0 bytes @ 0x4
  1684                           
  1685  0074                     ??_DetectSYSC_Signal:	
  1686                           ; 0 bytes @ 0x4
  1687                           
  1688  0074                     ??_my_MainTimer:	
  1689                           ; 0 bytes @ 0x4
  1690                           
  1691  0074                     ??_getAll_Lights_Line:	
  1692                           ; 0 bytes @ 0x4
  1693                           
  1694  0074                     ??_setLoad_AH_AL_Restore:	
  1695                           ; 0 bytes @ 0x4
  1696                           
  1697  0074                     ??_getLight_LoadGO:	
  1698                           ; 0 bytes @ 0x4
  1699                           
  1700  0074                     ??_getLight_Load_Status:	
  1701                           ; 0 bytes @ 0x4
  1702                           
  1703  0074                     ??_setTemp_Initialization:	
  1704                           ; 0 bytes @ 0x4
  1705                           
  1706  0074                     ??_setOverTemp_ADV_Restore:	
  1707                           ; 0 bytes @ 0x4
  1708                           
  1709  0074                     ??_setSYSC_Initialization:	
  1710                           ; 0 bytes @ 0x4
  1711                           
  1712  0074                     ??_setLights_Line:	
  1713                           ; 0 bytes @ 0x4
  1714                           
  1715  0074                     ??_CDS_Initialization:	
  1716                           ; 0 bytes @ 0x4
  1717                           
  1718  0074                     ??_getCDS_Status:	
  1719                           ; 0 bytes @ 0x4
  1720                           
  1721  0074                     ??_LedPointSelect:	
  1722                           ; 0 bytes @ 0x4
  1723                           
  1724  0074                     ??_WDT_Main:	
  1725                           ; 0 bytes @ 0x4
  1726                           
  1727  0074                     ??_getMain_All_LightsStatus:	
  1728                           ; 0 bytes @ 0x4
  1729                           
  1730  0074                     ??_getMain_All_Error_Status:	
  1731                           ; 0 bytes @ 0x4
  1732                           
  1733  0074                     ??_getMain_Lights_Count:	
  1734                           ; 0 bytes @ 0x4
  1735                           
  1736  0074                     ??_getLoad_OK:	
  1737                           ; 0 bytes @ 0x4
  1738                           
  1739  0074                     ??_LightsPointSelect:	
  1740                           ; 0 bytes @ 0x4
  1741                           
  1742  0074                     ??___wmul:	
  1743                           ; 0 bytes @ 0x4
  1744                           
  1745  0074                     ??___awdiv:	
  1746                           ; 0 bytes @ 0x4
  1747                           
  1748  0074                     ??___lwdiv:	
  1749                           ; 0 bytes @ 0x4
  1750                           
  1751  0074                     ?_getAD:	
  1752                           ; 0 bytes @ 0x4
  1753                           
  1754  0074                     getCDS_Status@status:	
  1755                           ; 1 bytes @ 0x4
  1756                           
  1757  0074                     getAD@adcon1:	
  1758                           ; 1 bytes @ 0x4
  1759                           
  1760  0074                     getMain_All_LightsStatus@status:	
  1761                           ; 1 bytes @ 0x4
  1762                           
  1763  0074                     getLoad_OK@ok:	
  1764                           ; 1 bytes @ 0x4
  1765                           
  1766  0074                     setLights_Line@lights:	
  1767                           ; 1 bytes @ 0x4
  1768                           
  1769  0074                     getAll_Lights_Line@line:	
  1770                           ; 1 bytes @ 0x4
  1771                           
  1772  0074                     getLight_LoadGO@loadgo:	
  1773                           ; 1 bytes @ 0x4
  1774                           
  1775  0074                     getLight_Load_Status@loadstatus:	
  1776                           ; 1 bytes @ 0x4
  1777                           
  1778  0074                     setOverTemp_ADV_Restore@i:	
  1779                           ; 1 bytes @ 0x4
  1780                           
  1781  0074                     ___wmul@product:	
  1782                           ; 2 bytes @ 0x4
  1783                           
  1784                           
  1785                           ; 2 bytes @ 0x4
  1786  0074                     	ds	1
  1787  0075                     ??_getAD:	
  1788  0075                     ??_SYSC_Main:	
  1789                           ; 0 bytes @ 0x5
  1790                           
  1791  0075                     ??_setSYSC_Main:	
  1792                           ; 0 bytes @ 0x5
  1793                           
  1794  0075                     ??_getLights_Allow_Condition:	
  1795                           ; 0 bytes @ 0x5
  1796                           
  1797  0075                     ??_Mcu_Initialization:	
  1798                           ; 0 bytes @ 0x5
  1799                           
  1800  0075                     LedPointSelect@led:	
  1801                           ; 0 bytes @ 0x5
  1802                           
  1803  0075                     getAD@adcon0:	
  1804                           ; 1 bytes @ 0x5
  1805                           
  1806  0075                     setLoad_AH_AL_Restore@i:	
  1807                           ; 1 bytes @ 0x5
  1808                           
  1809  0075                     LightsPointSelect@lights:	
  1810                           ; 1 bytes @ 0x5
  1811                           
  1812                           
  1813                           ; 1 bytes @ 0x5
  1814  0075                     	ds	1
  1815  0076                     ??_setLED_Initialization:	
  1816  0076                     ??_setLED:	
  1817                           ; 0 bytes @ 0x6
  1818                           
  1819  0076                     ??_Load_Initialization:	
  1820                           ; 0 bytes @ 0x6
  1821                           
  1822  0076                     ??_Lights_Initialization:	
  1823                           ; 0 bytes @ 0x6
  1824                           
  1825  0076                     ??_Temp_Main:	
  1826                           ; 0 bytes @ 0x6
  1827                           
  1828  0076                     ??_Lights_Main:	
  1829                           ; 0 bytes @ 0x6
  1830                           
  1831  0076                     ??_getLights_Status:	
  1832                           ; 0 bytes @ 0x6
  1833                           
  1834  0076                     ??_setLights_SwOn:	
  1835                           ; 0 bytes @ 0x6
  1836                           
  1837  0076                     ??_setLights_SwOff:	
  1838                           ; 0 bytes @ 0x6
  1839                           
  1840  0076                     ??_setLights_Initialization:	
  1841                           ; 0 bytes @ 0x6
  1842                           
  1843  0076                     ??_setLights_Main:	
  1844                           ; 0 bytes @ 0x6
  1845                           
  1846  0076                     ??_setLights:	
  1847                           ; 0 bytes @ 0x6
  1848                           
  1849  0076                     ??_LED_Initialization:	
  1850                           ; 0 bytes @ 0x6
  1851                           
  1852  0076                     ??_LED_Main:	
  1853                           ; 0 bytes @ 0x6
  1854                           
  1855                           
  1856                           	psect	cstackBANK0
  1857  004F                     __pcstackBANK0:	
  1858                           ; 0 bytes @ 0x6
  1859                           
  1860  004F                     ?_setLED:	
  1861  004F                     ??_getLoad_AD:	
  1862                           ; 0 bytes @ 0x0
  1863                           
  1864  004F                     ??_getTemp_AD:	
  1865                           ; 0 bytes @ 0x0
  1866                           
  1867  004F                     ??_CDS_Main:	
  1868                           ; 0 bytes @ 0x0
  1869                           
  1870  004F                     ?_getCDS_AD:	
  1871                           ; 0 bytes @ 0x0
  1872                           
  1873  004F                     ?_setLights_Trigger:	
  1874                           ; 0 bytes @ 0x0
  1875                           
  1876  004F                     ?___wmul:	
  1877                           ; 0 bytes @ 0x0
  1878                           
  1879  004F                     ?___awdiv:	
  1880                           ; 2 bytes @ 0x0
  1881                           
  1882  004F                     ?___lwdiv:	
  1883                           ; 2 bytes @ 0x0
  1884                           
  1885  004F                     getCDS_AD@channel2:	
  1886                           ; 2 bytes @ 0x0
  1887                           
  1888  004F                     setLED@command:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  004F                     getMain_Lights_Count@status1:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  004F                     setLights_Initialization@lights:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897  004F                     getLights_Status@lights:	
  1898                           ; 1 bytes @ 0x0
  1899                           
  1900  004F                     setLights_Trigger@command:	
  1901                           ; 1 bytes @ 0x0
  1902                           
  1903  004F                     getLights_Allow_Condition@allow:	
  1904                           ; 1 bytes @ 0x0
  1905                           
  1906  004F                     _getMain_All_Error_Status$2366:	
  1907                           ; 1 bytes @ 0x0
  1908                           
  1909  004F                     ___wmul@multiplier:	
  1910                           ; 2 bytes @ 0x0
  1911                           
  1912  004F                     ___awdiv@divisor:	
  1913                           ; 2 bytes @ 0x0
  1914                           
  1915  004F                     ___lwdiv@divisor:	
  1916                           ; 2 bytes @ 0x0
  1917                           
  1918                           
  1919                           ; 2 bytes @ 0x0
  1920  004F                     	ds	1
  1921  0050                     ??_getCDS_AD:	
  1922  0050                     ??_setLights_Trigger:	
  1923                           ; 0 bytes @ 0x1
  1924                           
  1925  0050                     setLED@led:	
  1926                           ; 0 bytes @ 0x1
  1927                           
  1928  0050                     getMain_Lights_Count@count:	
  1929                           ; 1 bytes @ 0x1
  1930                           
  1931  0050                     getLights_Status@status:	
  1932                           ; 1 bytes @ 0x1
  1933                           
  1934  0050                     _getLights_Allow_Condition$4712:	
  1935                           ; 1 bytes @ 0x1
  1936                           
  1937                           
  1938                           ; 1 bytes @ 0x1
  1939  0050                     	ds	1
  1940  0051                     ??_setPIRLED_Main:	
  1941  0051                     ?_setLights:	
  1942                           ; 0 bytes @ 0x2
  1943                           
  1944  0051                     setLED_Initialization@led:	
  1945                           ; 0 bytes @ 0x2
  1946                           
  1947  0051                     getLoad_AD@channel:	
  1948                           ; 1 bytes @ 0x2
  1949                           
  1950  0051                     getTemp_AD@channel:	
  1951                           ; 1 bytes @ 0x2
  1952                           
  1953  0051                     setLights@status:	
  1954                           ; 1 bytes @ 0x2
  1955                           
  1956  0051                     setLights_Trigger@lights:	
  1957                           ; 1 bytes @ 0x2
  1958                           
  1959  0051                     _getMain_All_Error_Status$2367:	
  1960                           ; 1 bytes @ 0x2
  1961                           
  1962  0051                     ___wmul@multiplicand:	
  1963                           ; 2 bytes @ 0x2
  1964                           
  1965  0051                     ___awdiv@dividend:	
  1966                           ; 2 bytes @ 0x2
  1967                           
  1968  0051                     ___lwdiv@dividend:	
  1969                           ; 2 bytes @ 0x2
  1970                           
  1971                           
  1972                           ; 2 bytes @ 0x2
  1973  0051                     	ds	1
  1974  0052                     getCDS_AD@i:	
  1975  0052                     setPIRLED_Main@count:	
  1976                           ; 1 bytes @ 0x3
  1977                           
  1978  0052                     getLoad_AD@k:	
  1979                           ; 1 bytes @ 0x3
  1980                           
  1981  0052                     getTemp_AD@ADRES:	
  1982                           ; 1 bytes @ 0x3
  1983                           
  1984  0052                     setLights@lights:	
  1985                           ; 1 bytes @ 0x3
  1986                           
  1987  0052                     setLights_SwOn@sw:	
  1988                           ; 1 bytes @ 0x3
  1989                           
  1990  0052                     setLights_SwOff@sw:	
  1991                           ; 1 bytes @ 0x3
  1992                           
  1993                           
  1994                           ; 1 bytes @ 0x3
  1995  0052                     	ds	1
  1996  0053                     getCDS_AD@j:	
  1997  0053                     getMain_All_Error_Status@command:	
  1998                           ; 1 bytes @ 0x4
  1999                           
  2000  0053                     getLoad_AD@j:	
  2001                           ; 1 bytes @ 0x4
  2002                           
  2003  0053                     setLights_Main@lights:	
  2004                           ; 1 bytes @ 0x4
  2005                           
  2006  0053                     ___awdiv@counter:	
  2007                           ; 1 bytes @ 0x4
  2008                           
  2009  0053                     ___lwdiv@counter:	
  2010                           ; 1 bytes @ 0x4
  2011                           
  2012                           
  2013                           ; 1 bytes @ 0x4
  2014  0053                     	ds	1
  2015  0054                     getCDS_AD@channel1:	
  2016  0054                     getMain_All_Error_Status@status:	
  2017                           ; 1 bytes @ 0x5
  2018                           
  2019  0054                     getLoad_AD@ADRES:	
  2020                           ; 1 bytes @ 0x5
  2021                           
  2022  0054                     ___awdiv@sign:	
  2023                           ; 1 bytes @ 0x5
  2024                           
  2025  0054                     ___lwdiv@quotient:	
  2026                           ; 1 bytes @ 0x5
  2027                           
  2028                           
  2029                           ; 2 bytes @ 0x5
  2030  0054                     	ds	1
  2031  0055                     ??_PIR_Main:	
  2032  0055                     ??_Exception_Main:	
  2033                           ; 0 bytes @ 0x6
  2034                           
  2035  0055                     getLoad_AD@i:	
  2036                           ; 0 bytes @ 0x6
  2037                           
  2038  0055                     ___awdiv@quotient:	
  2039                           ; 1 bytes @ 0x6
  2040                           
  2041                           
  2042                           ; 2 bytes @ 0x6
  2043  0055                     	ds	1
  2044  0056                     ??_Load_Main:	
  2045  0056                     Exception_Main@lights:	
  2046                           ; 0 bytes @ 0x7
  2047                           
  2048                           
  2049                           ; 1 bytes @ 0x7
  2050  0056                     	ds	1
  2051  0057                     ?_getPIR_AD:	
  2052  0057                     ??_setTemp_Main:	
  2053                           ; 0 bytes @ 0x8
  2054                           
  2055  0057                     ??_Lights_Control:	
  2056                           ; 0 bytes @ 0x8
  2057                           
  2058  0057                     Exception_Main@count:	
  2059                           ; 0 bytes @ 0x8
  2060                           
  2061  0057                     getPIR_AD@channel2:	
  2062                           ; 1 bytes @ 0x8
  2063                           
  2064                           
  2065                           ; 1 bytes @ 0x8
  2066  0057                     	ds	1
  2067  0058                     ??_getPIR_AD:	
  2068  0058                     Exception_Main@status:	
  2069                           ; 0 bytes @ 0x9
  2070                           
  2071  0058                     Load_Main@error:	
  2072                           ; 1 bytes @ 0x9
  2073                           
  2074                           
  2075                           ; 1 bytes @ 0x9
  2076  0058                     	ds	1
  2077  0059                     setTemp_Main@error:	
  2078  0059                     Lights_Control@lights:	
  2079                           ; 1 bytes @ 0xA
  2080                           
  2081  0059                     Exception_Main@i:	
  2082                           ; 1 bytes @ 0xA
  2083                           
  2084  0059                     _Load_Main$2655:	
  2085                           ; 2 bytes @ 0xA
  2086                           
  2087                           
  2088                           ; 2 bytes @ 0xA
  2089  0059                     	ds	1
  2090  005A                     setTemp_Main@TempGO:	
  2091  005A                     PIR_Main@error:	
  2092                           ; 1 bytes @ 0xB
  2093                           
  2094                           
  2095                           ; 1 bytes @ 0xB
  2096  005A                     	ds	1
  2097  005B                     Load_Main@ErrorCountValue:	
  2098  005B                     setTemp_Main@SafeValue:	
  2099                           ; 1 bytes @ 0xC
  2100                           
  2101  005B                     PIR_Main@cds:	
  2102                           ; 1 bytes @ 0xC
  2103                           
  2104  005B                     getPIR_AD@j:	
  2105                           ; 1 bytes @ 0xC
  2106                           
  2107  005B                     Exception_Main@i_2379:	
  2108                           ; 1 bytes @ 0xC
  2109                           
  2110                           
  2111                           ; 2 bytes @ 0xC
  2112  005B                     	ds	1
  2113  005C                     Load_Main@Load_RunStatus:	
  2114  005C                     setTemp_Main@DangerValue:	
  2115                           ; 1 bytes @ 0xD
  2116                           
  2117  005C                     PIR_Main@Enable_Switch:	
  2118                           ; 1 bytes @ 0xD
  2119                           
  2120  005C                     getPIR_AD@channel1:	
  2121                           ; 1 bytes @ 0xD
  2122                           
  2123                           
  2124                           ; 1 bytes @ 0xD
  2125  005C                     	ds	1
  2126  005D                     Exception_Main@error:	
  2127  005D                     Load_Main@LightsCount:	
  2128                           ; 1 bytes @ 0xE
  2129                           
  2130  005D                     getPIR_AD@VRAD1:	
  2131                           ; 1 bytes @ 0xE
  2132                           
  2133  005D                     setTemp_Main@AD:	
  2134                           ; 1 bytes @ 0xE
  2135                           
  2136  005D                     _PIR_Main$3182:	
  2137                           ; 2 bytes @ 0xE
  2138                           
  2139                           
  2140                           ; 2 bytes @ 0xE
  2141  005D                     	ds	1
  2142  005E                     getPIR_AD@VRAD:	
  2143  005E                     Load_Main@i:	
  2144                           ; 1 bytes @ 0xF
  2145                           
  2146                           
  2147                           ; 2 bytes @ 0xF
  2148  005E                     	ds	1
  2149  005F                     PIR_Main@TriggerValue:	
  2150  005F                     getPIR_AD@i:	
  2151                           ; 1 bytes @ 0x10
  2152                           
  2153                           
  2154                           ; 1 bytes @ 0x10
  2155  005F                     	ds	1
  2156  0060                     PIR_Main@LightsStatus:	
  2157                           
  2158                           ; 1 bytes @ 0x11
  2159  0060                     	ds	1
  2160  0061                     ?_main:	
  2161  0061                     main@argc:	
  2162                           ; 2 bytes @ 0x12
  2163                           
  2164                           
  2165                           ; 2 bytes @ 0x12
  2166  0061                     	ds	2
  2167  0063                     main@argv:	
  2168                           
  2169                           ; 2 bytes @ 0x14
  2170  0063                     	ds	2
  2171  0065                     ??_main:	
  2172                           
  2173                           ; 0 bytes @ 0x16
  2174  0065                     	ds	1
  2175                           
  2176                           	psect	maintext
  2177  0F9A                     __pmaintext:	
  2178 ;;
  2179 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2180 ;;
  2181 ;; *************** function _main *****************
  2182 ;; Defined at:
  2183 ;;		line 6 in file "../src/Main_B1.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;  argc            2   18[BANK0 ] int 
  2186 ;;  argv            2   20[BANK0 ] PTR PTR unsigned char 
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;		None
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  2   18[BANK0 ] int 
  2191 ;; Registers used:
  2192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2193 ;; Tracked objects:
  2194 ;;		On entry : 17F/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2198 ;;      Params:         0       4       0       0
  2199 ;;      Locals:         0       0       0       0
  2200 ;;      Temps:          0       1       0       0
  2201 ;;      Totals:         0       5       0       0
  2202 ;;Total ram usage:        5 bytes
  2203 ;; Hardware stack levels required when called:    7
  2204 ;; This function calls:
  2205 ;;		_CDS_Initialization
  2206 ;;		_CDS_Main
  2207 ;;		_DetectSYSC_Signal
  2208 ;;		_Exception_Main
  2209 ;;		_LED_Initialization
  2210 ;;		_LED_Main
  2211 ;;		_Lights_Initialization
  2212 ;;		_Lights_Main
  2213 ;;		_Load_Initialization
  2214 ;;		_Load_Main
  2215 ;;		_Mcu_Initialization
  2216 ;;		_PIR_Initialization
  2217 ;;		_PIR_Main
  2218 ;;		_SYSC_Initialization
  2219 ;;		_SYSC_Main
  2220 ;;		_Temp_Initialization
  2221 ;;		_Temp_Main
  2222 ;;		_WDT_Main
  2223 ;;		_getCDS_AD
  2224 ;;		_getLoad_AD
  2225 ;;		_getPIR_AD
  2226 ;;		_getTemp_AD
  2227 ;;		_myMain_Initialization
  2228 ;;		_my_MainTimer
  2229 ;; This function is called by:
  2230 ;;		Startup code after reset
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           
  2235                           ;psect for function _main
  2236  0F9A                     _main:	
  2237                           
  2238                           ;Main_B1.c: 7: myMain_Initialization();
  2239                           
  2240                           ;incstack = 0
  2241                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2242  0F9A  158A  224E  158A   	fcall	_myMain_Initialization
  2243                           
  2244                           ;Main_B1.c: 8: Mcu_Initialization();
  2245  0F9D  158A  231E  158A   	fcall	_Mcu_Initialization
  2246                           
  2247                           ;Main_B1.c: 9: ;;
  2248                           ;Main_B1.c: 10: LED_Initialization();
  2249  0FA0  158A  2292  158A   	fcall	_LED_Initialization
  2250                           
  2251                           ;Main_B1.c: 11: ;;
  2252                           ;Main_B1.c: 13: SYSC_Initialization();
  2253  0FA3  158A  2255  158A   	fcall	_SYSC_Initialization
  2254                           
  2255                           ;Main_B1.c: 14: Temp_Initialization();
  2256  0FA6  158A  225B  158A   	fcall	_Temp_Initialization
  2257                           
  2258                           ;Main_B1.c: 15: Load_Initialization();
  2259  0FA9  158A  2252  158A   	fcall	_Load_Initialization
  2260                           
  2261                           ;Main_B1.c: 16: ;;
  2262                           ;Main_B1.c: 17: ;;
  2263                           ;Main_B1.c: 19: ;;
  2264                           ;Main_B1.c: 20: Lights_Initialization();
  2265  0FAC  158A  2265  158A   	fcall	_Lights_Initialization
  2266                           
  2267                           ;Main_B1.c: 21: CDS_Initialization();
  2268  0FAF  158A  2261  158A   	fcall	_CDS_Initialization
  2269                           
  2270                           ;Main_B1.c: 22: PIR_Initialization();
  2271  0FB2  158A  22CE  158A   	fcall	_PIR_Initialization
  2272  0FB5                     l5504:	
  2273                           ;Main_B1.c: 23: ;;
  2274                           ;Main_B1.c: 24: ;;
  2275                           ;Main_B1.c: 25: ;;
  2276                           ;Main_B1.c: 26: ;;
  2277                           ;Main_B1.c: 27: ;;
  2278                           ;Main_B1.c: 29: while (1) {
  2279                           
  2280                           
  2281                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  2282  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  2283  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  2284  0FB7  1C25               	btfss	_myMain,0
  2285  0FB8  2FD8               	goto	l5516
  2286                           
  2287                           ;Main_B1.c: 33: DetectSYSC_Signal();
  2288  0FB9  158A  22E6  158A   	fcall	_DetectSYSC_Signal
  2289                           
  2290                           ;Main_B1.c: 37: getLoad_AD(0x01);
  2291  0FBC  3001               	movlw	1
  2292  0FBD  158A  267C  158A   	fcall	_getLoad_AD
  2293                           
  2294                           ;Main_B1.c: 41: getTemp_AD(0x11);
  2295  0FC0  3011               	movlw	17
  2296  0FC1  158A  25EC  158A   	fcall	_getTemp_AD
  2297                           
  2298                           ;Main_B1.c: 49: getCDS_AD(0x29, 0x05);
  2299  0FC4  3005               	movlw	5
  2300  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  2301  0FC6  1303               	bcf	3,6	;RP1=0, select bank0
  2302  0FC7  00E5               	movwf	??_main
  2303  0FC8  0865               	movf	??_main,w
  2304  0FC9  00CF               	movwf	getCDS_AD@channel2
  2305  0FCA  3029               	movlw	41
  2306  0FCB  158A  249E  158A   	fcall	_getCDS_AD
  2307                           
  2308                           ;Main_B1.c: 53: getPIR_AD(0x2d, 0x09);
  2309  0FCE  3009               	movlw	9
  2310  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  2311  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  2312  0FD1  00E5               	movwf	??_main
  2313  0FD2  0865               	movf	??_main,w
  2314  0FD3  00D7               	movwf	getPIR_AD@channel2
  2315  0FD4  302D               	movlw	45
  2316  0FD5  118A  2421  158A   	fcall	_getPIR_AD
  2317  0FD8                     l5516:	
  2318                           
  2319                           ;Main_B1.c: 56: }
  2320                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  2321  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  2323  0FDA  1C32               	btfss	_Timer1,0
  2324  0FDB  2FB5               	goto	l5504
  2325                           
  2326                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  2327  0FDC  1032               	bcf	_Timer1,0
  2328                           
  2329                           ;Main_B1.c: 95: my_MainTimer();
  2330  0FDD  158A  242F  158A   	fcall	_my_MainTimer
  2331                           
  2332                           ;Main_B1.c: 96: WDT_Main();
  2333  0FE0  158A  233E  158A   	fcall	_WDT_Main
  2334                           
  2335                           ;Main_B1.c: 97: ;;
  2336                           ;Main_B1.c: 98: ;;
  2337                           ;Main_B1.c: 99: if (myMain.PowerON == 1) {
  2338  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  2339  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  2340  0FE5  1C25               	btfss	_myMain,0
  2341  0FE6  2FB5               	goto	l5504
  2342                           
  2343                           ;Main_B1.c: 100: ;;
  2344                           ;Main_B1.c: 102: LED_Main();
  2345  0FE7  158A  224F  158A   	fcall	_LED_Main
  2346                           
  2347                           ;Main_B1.c: 103: ;;
  2348                           ;Main_B1.c: 105: SYSC_Main();
  2349  0FEA  158A  2258  158A   	fcall	_SYSC_Main
  2350                           
  2351                           ;Main_B1.c: 106: Temp_Main();
  2352  0FED  158A  225E  158A   	fcall	_Temp_Main
  2353                           
  2354                           ;Main_B1.c: 107: Load_Main();
  2355  0FF0  118A  2237  158A   	fcall	_Load_Main
  2356                           
  2357                           ;Main_B1.c: 108: ;;
  2358                           ;Main_B1.c: 110: Lights_Main();
  2359  0FF3  158A  2480  158A   	fcall	_Lights_Main
  2360                           
  2361                           ;Main_B1.c: 111: ;;
  2362                           ;Main_B1.c: 112: ;;
  2363                           ;Main_B1.c: 113: CDS_Main();
  2364  0FF6  158A  253A  158A   	fcall	_CDS_Main
  2365                           
  2366                           ;Main_B1.c: 114: PIR_Main();
  2367  0FF9  118A  202D  158A   	fcall	_PIR_Main
  2368                           
  2369                           ;Main_B1.c: 116: ;;
  2370                           ;Main_B1.c: 117: ;;
  2371                           ;Main_B1.c: 118: ;;
  2372                           ;Main_B1.c: 119: ;;
  2373                           ;Main_B1.c: 120: Exception_Main();
  2374  0FFC  118A  254F  158A   	fcall	_Exception_Main
  2375  0FFF  2FB5               	goto	l5504
  2376  1000                     __end_of_main:	
  2377                           ;Main_B1.c: 127: }
  2378                           ;Main_B1.c: 128: }
  2379                           ;Main_B1.c: 162: }
  2380                           ;Main_B1.c: 163: return (0);
  2381                           ;	Return value of _main is never used
  2382                           
  2383                           
  2384                           	psect	text1
  2385  0C2F                     __ptext1:	
  2386 ;; *************** function _my_MainTimer *****************
  2387 ;; Defined at:
  2388 ;;		line 184 in file "../src/Main_B1.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;		None
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;		None
  2393 ;; Return value:  Size  Location     Type
  2394 ;;		None               void
  2395 ;; Registers used:
  2396 ;;		wreg, status,2, status,0
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2402 ;;      Params:         0       0       0       0
  2403 ;;      Locals:         0       0       0       0
  2404 ;;      Temps:          1       0       0       0
  2405 ;;      Totals:         1       0       0       0
  2406 ;;Total ram usage:        1 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    2
  2409 ;; This function calls:
  2410 ;;		Nothing
  2411 ;; This function is called by:
  2412 ;;		_main
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           
  2417                           ;psect for function _my_MainTimer
  2418  0C2F                     _my_MainTimer:	
  2419                           
  2420                           ;Main_B1.c: 186: if (myMain.PowerON == 0) {
  2421                           
  2422                           ;incstack = 0
  2423                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2424  0C2F  1283               	bcf	3,5	;RP0=0, select bank0
  2425  0C30  1303               	bcf	3,6	;RP1=0, select bank0
  2426  0C31  1825               	btfsc	_myMain,0
  2427  0C32  2C3F               	goto	l3966
  2428                           
  2429                           ;Main_B1.c: 187: myMain.PowerCount++;
  2430  0C33  3001               	movlw	1
  2431  0C34  00F4               	movwf	??_my_MainTimer
  2432  0C35  0874               	movf	??_my_MainTimer,w
  2433  0C36  07A6               	addwf	_myMain+1,f
  2434                           
  2435                           ;Main_B1.c: 188: if (myMain.PowerCount == (1500 / 20)) {
  2436  0C37  0826               	movf	_myMain+1,w
  2437  0C38  3A4B               	xorlw	75
  2438  0C39  1D03               	skipz
  2439  0C3A  0008               	return
  2440                           
  2441                           ;Main_B1.c: 189: myMain.PowerCount = 0;
  2442  0C3B  01A6               	clrf	_myMain+1
  2443                           
  2444                           ;Main_B1.c: 190: myMain.PowerON = 1;
  2445  0C3C  1425               	bsf	_myMain,0
  2446                           
  2447                           ;Main_B1.c: 195: ;;
  2448                           ;Main_B1.c: 196: myMain.SelfTest = 1;
  2449  0C3D  1625               	bsf	_myMain,4
  2450                           
  2451                           ;Main_B1.c: 205: }
  2452                           ;Main_B1.c: 206: } else {
  2453  0C3E  0008               	return
  2454  0C3F                     l3966:	
  2455                           
  2456                           ;Main_B1.c: 207: myMain.PowerCount++;
  2457  0C3F  3001               	movlw	1
  2458  0C40  00F4               	movwf	??_my_MainTimer
  2459  0C41  0874               	movf	??_my_MainTimer,w
  2460  0C42  07A6               	addwf	_myMain+1,f
  2461                           
  2462                           ;Main_B1.c: 208: if (myMain.PowerCount == (1000 / 20)) {
  2463  0C43  0826               	movf	_myMain+1,w
  2464  0C44  3A32               	xorlw	50
  2465  0C45  1D03               	skipz
  2466  0C46  0008               	return
  2467                           
  2468                           ;Main_B1.c: 209: myMain.PowerCount = 0;
  2469  0C47  01A6               	clrf	_myMain+1
  2470  0C48  0008               	return
  2471  0C49                     __end_of_my_MainTimer:	
  2472                           
  2473                           	psect	text2
  2474  0A4E                     __ptext2:	
  2475 ;; *************** function _myMain_Initialization *****************
  2476 ;; Defined at:
  2477 ;;		line 169 in file "../src/Main_B1.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;		None
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;		None
  2482 ;; Return value:  Size  Location     Type
  2483 ;;		None               void
  2484 ;; Registers used:
  2485 ;;		None
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2491 ;;      Params:         0       0       0       0
  2492 ;;      Locals:         0       0       0       0
  2493 ;;      Temps:          0       0       0       0
  2494 ;;      Totals:         0       0       0       0
  2495 ;;Total ram usage:        0 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    2
  2498 ;; This function calls:
  2499 ;;		Nothing
  2500 ;; This function is called by:
  2501 ;;		_main
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           
  2506                           ;psect for function _myMain_Initialization
  2507  0A4E                     _myMain_Initialization:	
  2508                           
  2509                           ;incstack = 0
  2510                           ; Regs used in _myMain_Initialization: []
  2511  0A4E  0008               	return
  2512  0A4F                     __end_of_myMain_Initialization:	
  2513                           
  2514                           	psect	text3
  2515  0DEC                     __ptext3:	
  2516 ;; *************** function _getTemp_AD *****************
  2517 ;; Defined at:
  2518 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  channel         1    wreg     unsigned char 
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  channel         1    2[BANK0 ] unsigned char 
  2523 ;;  ADRES           1    3[BANK0 ] unsigned char 
  2524 ;; Return value:  Size  Location     Type
  2525 ;;		None               void
  2526 ;; Registers used:
  2527 ;;		wreg, status,2, status,0, pclath, cstack
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2533 ;;      Params:         0       0       0       0
  2534 ;;      Locals:         0       2       0       0
  2535 ;;      Temps:          0       2       0       0
  2536 ;;      Totals:         0       4       0       0
  2537 ;;Total ram usage:        4 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    4
  2540 ;; This function calls:
  2541 ;;		_getAD
  2542 ;; This function is called by:
  2543 ;;		_main
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           
  2548                           ;psect for function _getTemp_AD
  2549  0DEC                     _getTemp_AD:	
  2550                           
  2551                           ;incstack = 0
  2552                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2553                           ;getTemp_AD@channel stored from wreg
  2554  0DEC  1283               	bcf	3,5	;RP0=0, select bank0
  2555  0DED  1303               	bcf	3,6	;RP1=0, select bank0
  2556  0DEE  00D1               	movwf	getTemp_AD@channel
  2557                           
  2558                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2559  0DEF  01D2               	clrf	getTemp_AD@ADRES
  2560                           
  2561                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2562  0DF0  1D39               	btfss	_Temp,2
  2563  0DF1  0008               	return
  2564                           
  2565                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2566  0DF2  3070               	movlw	112
  2567  0DF3  00CF               	movwf	??_getTemp_AD
  2568  0DF4  084F               	movf	??_getTemp_AD,w
  2569  0DF5  00F4               	movwf	getAD@adcon1
  2570  0DF6  0851               	movf	getTemp_AD@channel,w
  2571  0DF7  158A  2464  158A   	fcall	_getAD
  2572  0DFA  1283               	bcf	3,5	;RP0=0, select bank0
  2573  0DFB  1303               	bcf	3,6	;RP1=0, select bank0
  2574  0DFC  00D0               	movwf	??_getTemp_AD+1
  2575  0DFD  0850               	movf	??_getTemp_AD+1,w
  2576  0DFE  00D2               	movwf	getTemp_AD@ADRES
  2577                           
  2578                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  2579  0DFF  0852               	movf	getTemp_AD@ADRES,w
  2580  0E00  1903               	btfsc	3,2
  2581  0E01  0008               	return
  2582                           
  2583                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  2584  0E02  0852               	movf	getTemp_AD@ADRES,w
  2585  0E03  023D               	subwf	_Temp+4,w
  2586  0E04  1803               	skipnc
  2587  0E05  2E0B               	goto	l5006
  2588                           
  2589                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  2590  0E06  0852               	movf	getTemp_AD@ADRES,w
  2591  0E07  00CF               	movwf	??_getTemp_AD
  2592  0E08  084F               	movf	??_getTemp_AD,w
  2593  0E09  00BD               	movwf	_Temp+4
  2594                           
  2595                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  2596  0E0A  0008               	return
  2597  0E0B                     l5006:	
  2598  0E0B  0852               	movf	getTemp_AD@ADRES,w
  2599  0E0C  023E               	subwf	_Temp+5,w
  2600  0E0D  1803               	skipnc
  2601  0E0E  2E14               	goto	l5010
  2602                           
  2603                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  2604  0E0F  0852               	movf	getTemp_AD@ADRES,w
  2605  0E10  00CF               	movwf	??_getTemp_AD
  2606  0E11  084F               	movf	??_getTemp_AD,w
  2607  0E12  00BE               	movwf	_Temp+5
  2608                           
  2609                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  2610  0E13  0008               	return
  2611  0E14                     l5010:	
  2612  0E14  0852               	movf	getTemp_AD@ADRES,w
  2613  0E15  023F               	subwf	_Temp+6,w
  2614  0E16  1803               	skipnc
  2615  0E17  2E1D               	goto	l5014
  2616                           
  2617                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  2618  0E18  0852               	movf	getTemp_AD@ADRES,w
  2619  0E19  00CF               	movwf	??_getTemp_AD
  2620  0E1A  084F               	movf	??_getTemp_AD,w
  2621  0E1B  00BF               	movwf	_Temp+6
  2622                           
  2623                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  2624  0E1C  0008               	return
  2625  0E1D                     l5014:	
  2626  0E1D  0852               	movf	getTemp_AD@ADRES,w
  2627  0E1E  0240               	subwf	_Temp+7,w
  2628  0E1F  1803               	skipnc
  2629  0E20  2E26               	goto	l5018
  2630                           
  2631                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  2632  0E21  0852               	movf	getTemp_AD@ADRES,w
  2633  0E22  00CF               	movwf	??_getTemp_AD
  2634  0E23  084F               	movf	??_getTemp_AD,w
  2635  0E24  00C0               	movwf	_Temp+7
  2636                           
  2637                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  2638  0E25  0008               	return
  2639  0E26                     l5018:	
  2640  0E26  0852               	movf	getTemp_AD@ADRES,w
  2641  0E27  0241               	subwf	_Temp+8,w
  2642  0E28  1803               	skipnc
  2643  0E29  0008               	return
  2644                           
  2645                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  2646  0E2A  0852               	movf	getTemp_AD@ADRES,w
  2647  0E2B  00CF               	movwf	??_getTemp_AD
  2648  0E2C  084F               	movf	??_getTemp_AD,w
  2649  0E2D  00C1               	movwf	_Temp+8
  2650  0E2E  0008               	return
  2651  0E2F                     __end_of_getTemp_AD:	
  2652                           
  2653                           	psect	text4
  2654  0421                     __ptext4:	
  2655 ;; *************** function _getPIR_AD *****************
  2656 ;; Defined at:
  2657 ;;		line 348 in file "../src/PIR_B1.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;  channel1        1    wreg     unsigned char 
  2660 ;;  channel2        1    8[BANK0 ] unsigned char 
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;  channel1        1   13[BANK0 ] unsigned char 
  2663 ;;  i               1   16[BANK0 ] unsigned char 
  2664 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2665 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2666 ;;  j               1   12[BANK0 ] unsigned char 
  2667 ;; Return value:  Size  Location     Type
  2668 ;;		None               void
  2669 ;; Registers used:
  2670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2676 ;;      Params:         0       1       0       0
  2677 ;;      Locals:         0       5       0       0
  2678 ;;      Temps:          0       3       0       0
  2679 ;;      Totals:         0       9       0       0
  2680 ;;Total ram usage:        9 bytes
  2681 ;; Hardware stack levels used:    1
  2682 ;; Hardware stack levels required when called:    4
  2683 ;; This function calls:
  2684 ;;		___awdiv
  2685 ;;		___lwdiv
  2686 ;;		_getAD
  2687 ;; This function is called by:
  2688 ;;		_main
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           
  2693                           ;psect for function _getPIR_AD
  2694  0421                     _getPIR_AD:	
  2695                           
  2696                           ;incstack = 0
  2697                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2698                           ;getPIR_AD@channel1 stored from wreg
  2699  0421  1283               	bcf	3,5	;RP0=0, select bank0
  2700  0422  1303               	bcf	3,6	;RP1=0, select bank0
  2701  0423  00DC               	movwf	getPIR_AD@channel1
  2702                           
  2703                           ;PIR_B1.c: 349: char i = 0, j = 0;
  2704  0424  01DF               	clrf	getPIR_AD@i
  2705  0425  01DB               	clrf	getPIR_AD@j
  2706                           
  2707                           ;PIR_B1.c: 350: char VRAD = 0, VRAD1 = 0;
  2708  0426  01DE               	clrf	getPIR_AD@VRAD
  2709  0427  01DD               	clrf	getPIR_AD@VRAD1
  2710                           
  2711                           ;PIR_B1.c: 351: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2712  0428  1683               	bsf	3,5	;RP0=1, select bank1
  2713  0429  1303               	bcf	3,6	;RP1=0, select bank1
  2714  042A  1CA0               	btfss	__PIR^(0+128),1
  2715  042B  0008               	return
  2716  042C  1920               	btfsc	__PIR^(0+128),2
  2717  042D  0008               	return
  2718                           
  2719                           ;PIR_B1.c: 352: _PIR.GO = 1;
  2720  042E  1520               	bsf	__PIR^(0+128),2
  2721                           
  2722                           ;PIR_B1.c: 359: VRAD1 = getAD(channel1, 0x70);
  2723  042F  3070               	movlw	112
  2724  0430  1283               	bcf	3,5	;RP0=0, select bank0
  2725  0431  1303               	bcf	3,6	;RP1=0, select bank0
  2726  0432  00D8               	movwf	??_getPIR_AD
  2727  0433  0858               	movf	??_getPIR_AD,w
  2728  0434  00F4               	movwf	getAD@adcon1
  2729  0435  085C               	movf	getPIR_AD@channel1,w
  2730  0436  158A  2464  118A   	fcall	_getAD
  2731  0439  1283               	bcf	3,5	;RP0=0, select bank0
  2732  043A  1303               	bcf	3,6	;RP1=0, select bank0
  2733  043B  00D9               	movwf	??_getPIR_AD+1
  2734  043C  0859               	movf	??_getPIR_AD+1,w
  2735  043D  00DD               	movwf	getPIR_AD@VRAD1
  2736                           
  2737                           ;PIR_B1.c: 360: VRAD = VRAD1 / 25;
  2738  043E  3019               	movlw	25
  2739  043F  00CF               	movwf	___awdiv@divisor
  2740  0440  3000               	movlw	0
  2741  0441  00D0               	movwf	___awdiv@divisor+1
  2742  0442  085D               	movf	getPIR_AD@VRAD1,w
  2743  0443  00D8               	movwf	??_getPIR_AD
  2744  0444  01D9               	clrf	??_getPIR_AD+1
  2745  0445  0858               	movf	??_getPIR_AD,w
  2746  0446  00D1               	movwf	___awdiv@dividend
  2747  0447  0859               	movf	??_getPIR_AD+1,w
  2748  0448  00D2               	movwf	___awdiv@dividend+1
  2749  0449  158A  26D8  118A   	fcall	___awdiv
  2750  044C  1283               	bcf	3,5	;RP0=0, select bank0
  2751  044D  1303               	bcf	3,6	;RP1=0, select bank0
  2752  044E  084F               	movf	?___awdiv,w
  2753  044F  00DA               	movwf	??_getPIR_AD+2
  2754  0450  085A               	movf	??_getPIR_AD+2,w
  2755  0451  00DE               	movwf	getPIR_AD@VRAD
  2756                           
  2757                           ;PIR_B1.c: 361: _PIR.SignalAD = getAD(channel2, 0x70);
  2758  0452  3070               	movlw	112
  2759  0453  00D8               	movwf	??_getPIR_AD
  2760  0454  0858               	movf	??_getPIR_AD,w
  2761  0455  00F4               	movwf	getAD@adcon1
  2762  0456  0857               	movf	getPIR_AD@channel2,w
  2763  0457  158A  2464  118A   	fcall	_getAD
  2764  045A  1283               	bcf	3,5	;RP0=0, select bank0
  2765  045B  1303               	bcf	3,6	;RP1=0, select bank0
  2766  045C  00D9               	movwf	??_getPIR_AD+1
  2767  045D  0859               	movf	??_getPIR_AD+1,w
  2768  045E  1683               	bsf	3,5	;RP0=1, select bank1
  2769  045F  1303               	bcf	3,6	;RP1=0, select bank1
  2770  0460  00A1               	movwf	(__PIR^(0+128)+1)
  2771                           
  2772                           ;PIR_B1.c: 375: if (VRAD < 1) {
  2773  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2774  0462  1303               	bcf	3,6	;RP1=0, select bank0
  2775  0463  08DE               	movf	getPIR_AD@VRAD,f
  2776  0464  1D03               	skipz
  2777  0465  2C68               	goto	l5036
  2778                           
  2779                           ;PIR_B1.c: 376: _PIR.CloseTimeValue = 5;
  2780  0466  3005               	movlw	5
  2781  0467  2C6E               	goto	L1
  2782  0468                     l5036:	
  2783                           ;PIR_B1.c: 377: } else if (VRAD < 3) {
  2784                           
  2785  0468  3003               	movlw	3
  2786  0469  1283               	bcf	3,5	;RP0=0, select bank0
  2787  046A  025E               	subwf	getPIR_AD@VRAD,w
  2788  046B  1803               	skipnc
  2789  046C  2C73               	goto	l5040
  2790                           
  2791                           ;PIR_B1.c: 378: _PIR.CloseTimeValue = 60;
  2792  046D  303C               	movlw	60
  2793  046E                     L1:	
  2794  046E  1683               	bsf	3,5	;RP0=1, select bank1
  2795  046F  1303               	bcf	3,6	;RP1=0, select bank1
  2796  0470  00C3               	movwf	(__PIR^(0+128)+35)
  2797  0471  3000               	movlw	0
  2798  0472  2C99               	goto	L5
  2799  0473                     l5040:	
  2800                           ;PIR_B1.c: 379: } else if (VRAD < 5) {
  2801                           
  2802  0473  3005               	movlw	5
  2803  0474  1283               	bcf	3,5	;RP0=0, select bank0
  2804  0475  025E               	subwf	getPIR_AD@VRAD,w
  2805  0476  1803               	skipnc
  2806  0477  2C7E               	goto	l5044
  2807                           
  2808                           ;PIR_B1.c: 380: _PIR.CloseTimeValue = 300;
  2809  0478  302C               	movlw	44
  2810  0479  1683               	bsf	3,5	;RP0=1, select bank1
  2811  047A  1303               	bcf	3,6	;RP1=0, select bank1
  2812  047B  00C3               	movwf	(__PIR^(0+128)+35)
  2813  047C  3001               	movlw	1
  2814  047D  2C99               	goto	L5
  2815  047E                     l5044:	
  2816                           ;PIR_B1.c: 381: } else if (VRAD < 7) {
  2817                           
  2818  047E  3007               	movlw	7
  2819  047F  1283               	bcf	3,5	;RP0=0, select bank0
  2820  0480  025E               	subwf	getPIR_AD@VRAD,w
  2821  0481  1803               	skipnc
  2822  0482  2C89               	goto	l5048
  2823                           
  2824                           ;PIR_B1.c: 382: _PIR.CloseTimeValue = 600;
  2825  0483  3058               	movlw	88
  2826  0484  1683               	bsf	3,5	;RP0=1, select bank1
  2827  0485  1303               	bcf	3,6	;RP1=0, select bank1
  2828  0486  00C3               	movwf	(__PIR^(0+128)+35)
  2829  0487  3002               	movlw	2
  2830  0488  2C99               	goto	L5
  2831  0489                     l5048:	
  2832                           ;PIR_B1.c: 383: } else if (VRAD < 9) {
  2833                           
  2834  0489  3009               	movlw	9
  2835  048A  1283               	bcf	3,5	;RP0=0, select bank0
  2836  048B  025E               	subwf	getPIR_AD@VRAD,w
  2837  048C  1803               	skipnc
  2838  048D  2C94               	goto	l5052
  2839                           
  2840                           ;PIR_B1.c: 384: _PIR.CloseTimeValue = 900;
  2841  048E  3084               	movlw	132
  2842  048F  1683               	bsf	3,5	;RP0=1, select bank1
  2843  0490  1303               	bcf	3,6	;RP1=0, select bank1
  2844  0491  00C3               	movwf	(__PIR^(0+128)+35)
  2845  0492  3003               	movlw	3
  2846  0493  2C99               	goto	L5
  2847  0494                     l5052:	
  2848                           ;PIR_B1.c: 385: } else {
  2849                           
  2850                           
  2851                           ;PIR_B1.c: 386: _PIR.CloseTimeValue = 1200;
  2852  0494  30B0               	movlw	176
  2853  0495  1683               	bsf	3,5	;RP0=1, select bank1
  2854  0496  1303               	bcf	3,6	;RP1=0, select bank1
  2855  0497  00C3               	movwf	(__PIR^(0+128)+35)
  2856  0498  3004               	movlw	4
  2857  0499                     L5:	
  2858  0499  00C4               	movwf	(__PIR^(0+128)+36)
  2859                           
  2860                           ;PIR_B1.c: 387: }
  2861                           ;PIR_B1.c: 396: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2862  049A  0821               	movf	(__PIR^(0+128)+1),w
  2863  049B  1283               	bcf	3,5	;RP0=0, select bank0
  2864  049C  1303               	bcf	3,6	;RP1=0, select bank0
  2865  049D  00D8               	movwf	??_getPIR_AD
  2866  049E  1683               	bsf	3,5	;RP0=1, select bank1
  2867  049F  1303               	bcf	3,6	;RP1=0, select bank1
  2868  04A0  0824               	movf	(__PIR^(0+128)+4),w
  2869  04A1  3EA5               	addlw	(__PIR+5)& (0+255)
  2870  04A2  0084               	movwf	4
  2871  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  2872  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  2873  04A5  0858               	movf	??_getPIR_AD,w
  2874  04A6  1383               	bcf	3,7	;select IRP bank1
  2875  04A7  0080               	movwf	0
  2876                           
  2877                           ;PIR_B1.c: 397: for (i = 0; i < 10; i++) {
  2878  04A8  01DF               	clrf	getPIR_AD@i
  2879  04A9  300A               	movlw	10
  2880  04AA  025F               	subwf	getPIR_AD@i,w
  2881  04AB  1803               	btfsc	3,0
  2882  04AC  2CC9               	goto	l5068
  2883  04AD                     l5062:	
  2884                           
  2885                           ;PIR_B1.c: 398: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2886  04AD  085F               	movf	getPIR_AD@i,w
  2887  04AE  3EA5               	addlw	(__PIR+5)& (0+255)
  2888  04AF  0084               	movwf	4
  2889  04B0  0800               	movf	0,w
  2890  04B1  00D8               	movwf	??_getPIR_AD
  2891  04B2  01D9               	clrf	??_getPIR_AD+1
  2892  04B3  0858               	movf	??_getPIR_AD,w
  2893  04B4  1683               	bsf	3,5	;RP0=1, select bank1
  2894  04B5  1303               	bcf	3,6	;RP1=0, select bank1
  2895  04B6  07AF               	addwf	(__PIR^(0+128)+15),f
  2896  04B7  1803               	skipnc
  2897  04B8  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2898  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  2899  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  2900  04BB  0859               	movf	??_getPIR_AD+1,w
  2901  04BC  1683               	bsf	3,5	;RP0=1, select bank1
  2902  04BD  1303               	bcf	3,6	;RP1=0, select bank1
  2903  04BE  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2904  04BF  3001               	movlw	1
  2905  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  2906  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  2907  04C2  00D8               	movwf	??_getPIR_AD
  2908  04C3  0858               	movf	??_getPIR_AD,w
  2909  04C4  07DF               	addwf	getPIR_AD@i,f
  2910  04C5  300A               	movlw	10
  2911  04C6  025F               	subwf	getPIR_AD@i,w
  2912  04C7  1C03               	skipc
  2913  04C8  2CAD               	goto	l5062
  2914  04C9                     l5068:	
  2915                           
  2916                           ;PIR_B1.c: 399: }
  2917                           ;PIR_B1.c: 400: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2918  04C9  300A               	movlw	10
  2919  04CA  00CF               	movwf	___lwdiv@divisor
  2920  04CB  3000               	movlw	0
  2921  04CC  00D0               	movwf	___lwdiv@divisor+1
  2922  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  2923  04CE  1303               	bcf	3,6	;RP1=0, select bank1
  2924  04CF  0830               	movf	((__PIR+1)^(0+128)+15),w
  2925  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  2926  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  2927  04D2  01D2               	clrf	___lwdiv@dividend+1
  2928  04D3  07D2               	addwf	___lwdiv@dividend+1,f
  2929  04D4  1683               	bsf	3,5	;RP0=1, select bank1
  2930  04D5  1303               	bcf	3,6	;RP1=0, select bank1
  2931  04D6  082F               	movf	(__PIR^(0+128)+15),w
  2932  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  2933  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  2934  04D9  01D1               	clrf	___lwdiv@dividend
  2935  04DA  07D1               	addwf	___lwdiv@dividend,f
  2936  04DB  158A  25AC  118A   	fcall	___lwdiv
  2937  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  2938  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  2939  04E0  084F               	movf	?___lwdiv,w
  2940  04E1  00D8               	movwf	??_getPIR_AD
  2941  04E2  1683               	bsf	3,5	;RP0=1, select bank1
  2942  04E3  1303               	bcf	3,6	;RP1=0, select bank1
  2943  04E4  0831               	movf	(__PIR^(0+128)+17),w
  2944  04E5  3EB2               	addlw	(__PIR+18)& (0+255)
  2945  04E6  0084               	movwf	4
  2946  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  2947  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  2948  04E9  0858               	movf	??_getPIR_AD,w
  2949  04EA  1383               	bcf	3,7	;select IRP bank1
  2950  04EB  0080               	movwf	0
  2951                           
  2952                           ;PIR_B1.c: 401: _PIR.TenAverageValue = 0;
  2953  04EC  1683               	bsf	3,5	;RP0=1, select bank1
  2954  04ED  1303               	bcf	3,6	;RP1=0, select bank1
  2955  04EE  01AF               	clrf	(__PIR^(0+128)+15)
  2956  04EF  01B0               	clrf	((__PIR+1)^(0+128)+15)
  2957                           
  2958                           ;PIR_B1.c: 403: for (i = 0; i <= 9; i++) {
  2959  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  2960  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  2961  04F2  01DF               	clrf	getPIR_AD@i
  2962  04F3  300A               	movlw	10
  2963  04F4  025F               	subwf	getPIR_AD@i,w
  2964  04F5  1803               	btfsc	3,0
  2965  04F6  2D13               	goto	l5084
  2966  04F7                     l5078:	
  2967                           
  2968                           ;PIR_B1.c: 404: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2969  04F7  085F               	movf	getPIR_AD@i,w
  2970  04F8  3EB2               	addlw	(__PIR+18)& (0+255)
  2971  04F9  0084               	movwf	4
  2972  04FA  0800               	movf	0,w
  2973  04FB  00D8               	movwf	??_getPIR_AD
  2974  04FC  01D9               	clrf	??_getPIR_AD+1
  2975  04FD  0858               	movf	??_getPIR_AD,w
  2976  04FE  1683               	bsf	3,5	;RP0=1, select bank1
  2977  04FF  1303               	bcf	3,6	;RP1=0, select bank1
  2978  0500  07BC               	addwf	(__PIR^(0+128)+28),f
  2979  0501  1803               	skipnc
  2980  0502  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  2981  0503  1283               	bcf	3,5	;RP0=0, select bank0
  2982  0504  1303               	bcf	3,6	;RP1=0, select bank0
  2983  0505  0859               	movf	??_getPIR_AD+1,w
  2984  0506  1683               	bsf	3,5	;RP0=1, select bank1
  2985  0507  1303               	bcf	3,6	;RP1=0, select bank1
  2986  0508  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  2987  0509  3001               	movlw	1
  2988  050A  1283               	bcf	3,5	;RP0=0, select bank0
  2989  050B  1303               	bcf	3,6	;RP1=0, select bank0
  2990  050C  00D8               	movwf	??_getPIR_AD
  2991  050D  0858               	movf	??_getPIR_AD,w
  2992  050E  07DF               	addwf	getPIR_AD@i,f
  2993  050F  300A               	movlw	10
  2994  0510  025F               	subwf	getPIR_AD@i,w
  2995  0511  1C03               	skipc
  2996  0512  2CF7               	goto	l5078
  2997  0513                     l5084:	
  2998                           
  2999                           ;PIR_B1.c: 405: }
  3000                           ;PIR_B1.c: 406: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  3001  0513  300A               	movlw	10
  3002  0514  00CF               	movwf	___lwdiv@divisor
  3003  0515  3000               	movlw	0
  3004  0516  00D0               	movwf	___lwdiv@divisor+1
  3005  0517  1683               	bsf	3,5	;RP0=1, select bank1
  3006  0518  1303               	bcf	3,6	;RP1=0, select bank1
  3007  0519  083D               	movf	((__PIR+1)^(0+128)+28),w
  3008  051A  1283               	bcf	3,5	;RP0=0, select bank0
  3009  051B  1303               	bcf	3,6	;RP1=0, select bank0
  3010  051C  01D2               	clrf	___lwdiv@dividend+1
  3011  051D  07D2               	addwf	___lwdiv@dividend+1,f
  3012  051E  1683               	bsf	3,5	;RP0=1, select bank1
  3013  051F  1303               	bcf	3,6	;RP1=0, select bank1
  3014  0520  083C               	movf	(__PIR^(0+128)+28),w
  3015  0521  1283               	bcf	3,5	;RP0=0, select bank0
  3016  0522  1303               	bcf	3,6	;RP1=0, select bank0
  3017  0523  01D1               	clrf	___lwdiv@dividend
  3018  0524  07D1               	addwf	___lwdiv@dividend,f
  3019  0525  158A  25AC  118A   	fcall	___lwdiv
  3020  0528  1283               	bcf	3,5	;RP0=0, select bank0
  3021  0529  1303               	bcf	3,6	;RP1=0, select bank0
  3022  052A  084F               	movf	?___lwdiv,w
  3023  052B  00D8               	movwf	??_getPIR_AD
  3024  052C  0858               	movf	??_getPIR_AD,w
  3025  052D  1683               	bsf	3,5	;RP0=1, select bank1
  3026  052E  1303               	bcf	3,6	;RP1=0, select bank1
  3027  052F  00A3               	movwf	(__PIR^(0+128)+3)
  3028                           
  3029                           ;PIR_B1.c: 407: _PIR.HundredAverageValue = 0;
  3030  0530  01BC               	clrf	(__PIR^(0+128)+28)
  3031  0531  01BD               	clrf	((__PIR+1)^(0+128)+28)
  3032                           
  3033                           ;PIR_B1.c: 409: if (_PIR.TenCount < 10) {
  3034  0532  300A               	movlw	10
  3035  0533  0224               	subwf	(__PIR^(0+128)+4),w
  3036  0534  1803               	skipnc
  3037  0535  2D3F               	goto	l5092
  3038                           
  3039                           ;PIR_B1.c: 410: _PIR.TenCount++;
  3040  0536  3001               	movlw	1
  3041  0537  1283               	bcf	3,5	;RP0=0, select bank0
  3042  0538  1303               	bcf	3,6	;RP1=0, select bank0
  3043  0539  00D8               	movwf	??_getPIR_AD
  3044  053A  0858               	movf	??_getPIR_AD,w
  3045  053B  1683               	bsf	3,5	;RP0=1, select bank1
  3046  053C  1303               	bcf	3,6	;RP1=0, select bank1
  3047  053D  07A4               	addwf	(__PIR^(0+128)+4),f
  3048                           
  3049                           ;PIR_B1.c: 411: } else {
  3050  053E  0008               	return
  3051  053F                     l5092:	
  3052                           
  3053                           ;PIR_B1.c: 412: _PIR.TenCount = 0;
  3054  053F  01A4               	clrf	(__PIR^(0+128)+4)
  3055                           
  3056                           ;PIR_B1.c: 413: if (_PIR.HundreCount < 10)
  3057  0540  300A               	movlw	10
  3058  0541  0231               	subwf	(__PIR^(0+128)+17),w
  3059  0542  1803               	skipnc
  3060  0543  2D4D               	goto	l5098
  3061                           
  3062                           ;PIR_B1.c: 414: _PIR.HundreCount++;
  3063  0544  3001               	movlw	1
  3064  0545  1283               	bcf	3,5	;RP0=0, select bank0
  3065  0546  1303               	bcf	3,6	;RP1=0, select bank0
  3066  0547  00D8               	movwf	??_getPIR_AD
  3067  0548  0858               	movf	??_getPIR_AD,w
  3068  0549  1683               	bsf	3,5	;RP0=1, select bank1
  3069  054A  1303               	bcf	3,6	;RP1=0, select bank1
  3070  054B  07B1               	addwf	(__PIR^(0+128)+17),f
  3071  054C  0008               	return
  3072  054D                     l5098:	
  3073                           
  3074                           ;PIR_B1.c: 415: else
  3075                           ;PIR_B1.c: 416: _PIR.HundreCount = 0;
  3076  054D  01B1               	clrf	(__PIR^(0+128)+17)
  3077  054E  0008               	return
  3078  054F                     __end_of_getPIR_AD:	
  3079                           
  3080                           	psect	text5
  3081  0E7C                     __ptext5:	
  3082 ;; *************** function _getLoad_AD *****************
  3083 ;; Defined at:
  3084 ;;		line 16 in file "../src/OverLoad_B1.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;  channel         1    wreg     unsigned char 
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;  channel         1    2[BANK0 ] unsigned char 
  3089 ;;  i               1    6[BANK0 ] unsigned char 
  3090 ;;  ADRES           1    5[BANK0 ] unsigned char 
  3091 ;;  j               1    4[BANK0 ] unsigned char 
  3092 ;;  k               1    3[BANK0 ] unsigned char 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;		None               void
  3095 ;; Registers used:
  3096 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3102 ;;      Params:         0       0       0       0
  3103 ;;      Locals:         0       5       0       0
  3104 ;;      Temps:          0       2       0       0
  3105 ;;      Totals:         0       7       0       0
  3106 ;;Total ram usage:        7 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    4
  3109 ;; This function calls:
  3110 ;;		_getAD
  3111 ;; This function is called by:
  3112 ;;		_main
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           
  3117                           ;psect for function _getLoad_AD
  3118  0E7C                     _getLoad_AD:	
  3119                           
  3120                           ;incstack = 0
  3121                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3122                           ;getLoad_AD@channel stored from wreg
  3123  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  3124  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  3125  0E7E  00D1               	movwf	getLoad_AD@channel
  3126                           
  3127                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  3128  0E7F  01D5               	clrf	getLoad_AD@i
  3129  0E80  01D3               	clrf	getLoad_AD@j
  3130  0E81  01D2               	clrf	getLoad_AD@k
  3131                           
  3132                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  3133  0E82  01D4               	clrf	getLoad_AD@ADRES
  3134                           
  3135                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  3136  0E83  1683               	bsf	3,5	;RP0=1, select bank1
  3137  0E84  1303               	bcf	3,6	;RP1=0, select bank1
  3138  0E85  1E4A               	btfss	_Load^(0+128),4
  3139  0E86  0008               	return
  3140                           
  3141                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0x73);
  3142  0E87  3073               	movlw	115
  3143  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  3144  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  3145  0E8A  00CF               	movwf	??_getLoad_AD
  3146  0E8B  084F               	movf	??_getLoad_AD,w
  3147  0E8C  00F4               	movwf	getAD@adcon1
  3148  0E8D  0851               	movf	getLoad_AD@channel,w
  3149  0E8E  158A  2464  158A   	fcall	_getAD
  3150  0E91  1283               	bcf	3,5	;RP0=0, select bank0
  3151  0E92  1303               	bcf	3,6	;RP1=0, select bank0
  3152  0E93  00D0               	movwf	??_getLoad_AD+1
  3153  0E94  0850               	movf	??_getLoad_AD+1,w
  3154  0E95  00D4               	movwf	getLoad_AD@ADRES
  3155                           
  3156                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  3157  0E96  01D5               	clrf	getLoad_AD@i
  3158  0E97  3004               	movlw	4
  3159  0E98  0255               	subwf	getLoad_AD@i,w
  3160  0E99  1803               	btfsc	3,0
  3161  0E9A  2EB7               	goto	l4974
  3162  0E9B                     l4962:	
  3163                           
  3164                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  3165  0E9B  0855               	movf	getLoad_AD@i,w
  3166  0E9C  3ED4               	addlw	(_Load+10)& (0+255)
  3167  0E9D  0084               	movwf	4
  3168  0E9E  0854               	movf	getLoad_AD@ADRES,w
  3169  0E9F  1383               	bcf	3,7	;select IRP bank1
  3170  0EA0  0200               	subwf	0,w
  3171  0EA1  1803               	skipnc
  3172  0EA2  2EAF               	goto	l4970
  3173  0EA3  08D3               	movf	getLoad_AD@j,f
  3174  0EA4  1D03               	skipz
  3175  0EA5  2EAF               	goto	l4970
  3176                           
  3177                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  3178  0EA6  0854               	movf	getLoad_AD@ADRES,w
  3179  0EA7  00CF               	movwf	??_getLoad_AD
  3180  0EA8  0855               	movf	getLoad_AD@i,w
  3181  0EA9  3ED4               	addlw	(_Load+10)& (0+255)
  3182  0EAA  0084               	movwf	4
  3183  0EAB  084F               	movf	??_getLoad_AD,w
  3184  0EAC  0080               	movwf	0
  3185                           
  3186                           ;OverLoad_B1.c: 25: j = 1;
  3187  0EAD  01D3               	clrf	getLoad_AD@j
  3188  0EAE  0AD3               	incf	getLoad_AD@j,f
  3189  0EAF                     l4970:	
  3190  0EAF  3001               	movlw	1
  3191  0EB0  00CF               	movwf	??_getLoad_AD
  3192  0EB1  084F               	movf	??_getLoad_AD,w
  3193  0EB2  07D5               	addwf	getLoad_AD@i,f
  3194  0EB3  3004               	movlw	4
  3195  0EB4  0255               	subwf	getLoad_AD@i,w
  3196  0EB5  1C03               	skipc
  3197  0EB6  2E9B               	goto	l4962
  3198  0EB7                     l4974:	
  3199                           
  3200                           ;OverLoad_B1.c: 26: }
  3201                           ;OverLoad_B1.c: 27: }
  3202                           ;OverLoad_B1.c: 28: if (j == 0) {
  3203  0EB7  08D3               	movf	getLoad_AD@j,f
  3204  0EB8  1D03               	skipz
  3205  0EB9  0008               	return
  3206                           
  3207                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  3208  0EBA  01D5               	clrf	getLoad_AD@i
  3209  0EBB                     L6:	
  3210  0EBB  3004               	movlw	4
  3211  0EBC  0255               	subwf	getLoad_AD@i,w
  3212  0EBD  1803               	btfsc	3,0
  3213  0EBE  0008               	return
  3214                           
  3215                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  3216  0EBF  0855               	movf	getLoad_AD@i,w
  3217  0EC0  3ED9               	addlw	(_Load+15)& (0+255)
  3218  0EC1  0084               	movwf	4
  3219  0EC2  1383               	bcf	3,7	;select IRP bank1
  3220  0EC3  0800               	movf	0,w
  3221  0EC4  0254               	subwf	getLoad_AD@ADRES,w
  3222  0EC5  1803               	skipnc
  3223  0EC6  2ED3               	goto	l4990
  3224  0EC7  08D2               	movf	getLoad_AD@k,f
  3225  0EC8  1D03               	skipz
  3226  0EC9  2ED3               	goto	l4990
  3227                           
  3228                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  3229  0ECA  0854               	movf	getLoad_AD@ADRES,w
  3230  0ECB  00CF               	movwf	??_getLoad_AD
  3231  0ECC  0855               	movf	getLoad_AD@i,w
  3232  0ECD  3ED9               	addlw	(_Load+15)& (0+255)
  3233  0ECE  0084               	movwf	4
  3234  0ECF  084F               	movf	??_getLoad_AD,w
  3235  0ED0  0080               	movwf	0
  3236                           
  3237                           ;OverLoad_B1.c: 32: k = 1;
  3238  0ED1  01D2               	clrf	getLoad_AD@k
  3239  0ED2  0AD2               	incf	getLoad_AD@k,f
  3240  0ED3                     l4990:	
  3241  0ED3  3001               	movlw	1
  3242  0ED4  00CF               	movwf	??_getLoad_AD
  3243  0ED5  084F               	movf	??_getLoad_AD,w
  3244  0ED6  07D5               	addwf	getLoad_AD@i,f
  3245  0ED7  2EBB               	goto	L6
  3246  0ED8                     __end_of_getLoad_AD:	
  3247                           
  3248                           	psect	text6
  3249  0C9E                     __ptext6:	
  3250 ;; *************** function _getCDS_AD *****************
  3251 ;; Defined at:
  3252 ;;		line 48 in file "../src/CDS_B1.c"
  3253 ;; Parameters:    Size  Location     Type
  3254 ;;  channel1        1    wreg     unsigned char 
  3255 ;;  channel2        1    0[BANK0 ] unsigned char 
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;  channel1        1    5[BANK0 ] unsigned char 
  3258 ;;  j               1    4[BANK0 ] unsigned char 
  3259 ;;  i               1    3[BANK0 ] unsigned char 
  3260 ;; Return value:  Size  Location     Type
  3261 ;;		None               void
  3262 ;; Registers used:
  3263 ;;		wreg, status,2, status,0, pclath, cstack
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3269 ;;      Params:         0       1       0       0
  3270 ;;      Locals:         0       3       0       0
  3271 ;;      Temps:          0       2       0       0
  3272 ;;      Totals:         0       6       0       0
  3273 ;;Total ram usage:        6 bytes
  3274 ;; Hardware stack levels used:    1
  3275 ;; Hardware stack levels required when called:    4
  3276 ;; This function calls:
  3277 ;;		_getAD
  3278 ;; This function is called by:
  3279 ;;		_main
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           
  3284                           ;psect for function _getCDS_AD
  3285  0C9E                     _getCDS_AD:	
  3286                           
  3287                           ;incstack = 0
  3288                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3289                           ;getCDS_AD@channel1 stored from wreg
  3290  0C9E  1283               	bcf	3,5	;RP0=0, select bank0
  3291  0C9F  1303               	bcf	3,6	;RP1=0, select bank0
  3292  0CA0  00D4               	movwf	getCDS_AD@channel1
  3293                           
  3294                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3295  0CA1  01D2               	clrf	getCDS_AD@i
  3296  0CA2  01D3               	clrf	getCDS_AD@j
  3297                           
  3298                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3299  0CA3  1DAE               	btfss	__CDS,3
  3300  0CA4  0008               	return
  3301                           
  3302                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3303  0CA5  14AE               	bsf	__CDS,1
  3304                           
  3305                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3306  0CA6  3070               	movlw	112
  3307  0CA7  00D0               	movwf	??_getCDS_AD
  3308  0CA8  0850               	movf	??_getCDS_AD,w
  3309  0CA9  00F4               	movwf	getAD@adcon1
  3310  0CAA  0854               	movf	getCDS_AD@channel1,w
  3311  0CAB  158A  2464  158A   	fcall	_getAD
  3312  0CAE  1283               	bcf	3,5	;RP0=0, select bank0
  3313  0CAF  1303               	bcf	3,6	;RP1=0, select bank0
  3314  0CB0  00D1               	movwf	??_getCDS_AD+1
  3315  0CB1  0851               	movf	??_getCDS_AD+1,w
  3316  0CB2  00B0               	movwf	__CDS+2
  3317                           
  3318                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3319  0CB3  3070               	movlw	112
  3320  0CB4  00D0               	movwf	??_getCDS_AD
  3321  0CB5  0850               	movf	??_getCDS_AD,w
  3322  0CB6  00F4               	movwf	getAD@adcon1
  3323  0CB7  084F               	movf	getCDS_AD@channel2,w
  3324  0CB8  158A  2464         	fcall	_getAD
  3325  0CBA  1283               	bcf	3,5	;RP0=0, select bank0
  3326  0CBB  1303               	bcf	3,6	;RP1=0, select bank0
  3327  0CBC  00D1               	movwf	??_getCDS_AD+1
  3328  0CBD  0851               	movf	??_getCDS_AD+1,w
  3329  0CBE  00B1               	movwf	__CDS+3
  3330  0CBF  0008               	return
  3331  0CC0                     __end_of_getCDS_AD:	
  3332                           
  3333                           	psect	text7
  3334  0C64                     __ptext7:	
  3335 ;; *************** function _getAD *****************
  3336 ;; Defined at:
  3337 ;;		line 436 in file "../src/MCU_B1.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  adcon0          1    wreg     unsigned char 
  3340 ;;  adcon1          1    4[COMMON] unsigned char 
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;  adcon0          1    5[COMMON] unsigned char 
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  1    wreg      unsigned char 
  3345 ;; Registers used:
  3346 ;;		wreg, status,2, status,0, pclath, cstack
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3352 ;;      Params:         1       0       0       0
  3353 ;;      Locals:         1       0       0       0
  3354 ;;      Temps:          0       0       0       0
  3355 ;;      Totals:         2       0       0       0
  3356 ;;Total ram usage:        2 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; Hardware stack levels required when called:    3
  3359 ;; This function calls:
  3360 ;;		_Timeout_Counter
  3361 ;;		_set_TimeoutCleared
  3362 ;; This function is called by:
  3363 ;;		_getCDS_AD
  3364 ;;		_getLoad_AD
  3365 ;;		_getTemp_AD
  3366 ;;		_getPIR_AD
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           
  3371                           ;psect for function _getAD
  3372  0C64                     _getAD:	
  3373                           
  3374                           ;incstack = 0
  3375                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3376                           ;getAD@adcon0 stored from wreg
  3377  0C64  00F5               	movwf	getAD@adcon0
  3378                           
  3379                           ;MCU_B1.c: 437: ADCON0 = adcon0;
  3380  0C65  0875               	movf	getAD@adcon0,w
  3381  0C66  1283               	bcf	3,5	;RP0=0, select bank0
  3382  0C67  1303               	bcf	3,6	;RP1=0, select bank0
  3383  0C68  009F               	movwf	31	;volatile
  3384                           
  3385                           ;MCU_B1.c: 438: ADCON1 = adcon1;
  3386  0C69  0874               	movf	getAD@adcon1,w
  3387  0C6A  1683               	bsf	3,5	;RP0=1, select bank1
  3388  0C6B  1303               	bcf	3,6	;RP1=0, select bank1
  3389  0C6C  009F               	movwf	31	;volatile
  3390                           
  3391                           ;MCU_B1.c: 439: GO_nDONE = 1;
  3392  0C6D  1283               	bcf	3,5	;RP0=0, select bank0
  3393  0C6E  1303               	bcf	3,6	;RP1=0, select bank0
  3394  0C6F  149F               	bsf	31,1	;volatile
  3395                           
  3396                           ;MCU_B1.c: 440: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3397  0C70  2C74               	goto	l4680
  3398  0C71                     l4678:	
  3399                           
  3400                           ;MCU_B1.c: 441: Timeout_Counter();
  3401  0C71  158A  2373  158A   	fcall	_Timeout_Counter
  3402  0C74                     l4680:	
  3403  0C74  1283               	bcf	3,5	;RP0=0, select bank0
  3404  0C75  1303               	bcf	3,6	;RP1=0, select bank0
  3405  0C76  1C9F               	btfss	31,1	;volatile
  3406  0C77  2C7A               	goto	l4684
  3407  0C78  1D27               	btfss	_myMain+2,2
  3408  0C79  2C71               	goto	l4678
  3409  0C7A                     l4684:	
  3410                           
  3411                           ;MCU_B1.c: 442: };
  3412                           ;MCU_B1.c: 443: set_TimeoutCleared();
  3413  0C7A  158A  227E         	fcall	_set_TimeoutCleared
  3414                           
  3415                           ;MCU_B1.c: 444: return ADRES;
  3416  0C7C  1283               	bcf	3,5	;RP0=0, select bank0
  3417  0C7D  1303               	bcf	3,6	;RP1=0, select bank0
  3418  0C7E  081E               	movf	30,w	;volatile
  3419  0C7F  0008               	return
  3420  0C80                     __end_of_getAD:	
  3421                           
  3422                           	psect	text8
  3423  0A7E                     __ptext8:	
  3424 ;; *************** function _set_TimeoutCleared *****************
  3425 ;; Defined at:
  3426 ;;		line 286 in file "../src/Main_B1.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;		None
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;		None
  3431 ;; Return value:  Size  Location     Type
  3432 ;;		None               void
  3433 ;; Registers used:
  3434 ;;		status,2
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3440 ;;      Params:         0       0       0       0
  3441 ;;      Locals:         0       0       0       0
  3442 ;;      Temps:          0       0       0       0
  3443 ;;      Totals:         0       0       0       0
  3444 ;;Total ram usage:        0 bytes
  3445 ;; Hardware stack levels used:    1
  3446 ;; Hardware stack levels required when called:    2
  3447 ;; This function calls:
  3448 ;;		Nothing
  3449 ;; This function is called by:
  3450 ;;		_getAD
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           
  3455                           ;psect for function _set_TimeoutCleared
  3456  0A7E                     _set_TimeoutCleared:	
  3457                           
  3458                           ;Main_B1.c: 287: myMain.Timeout = 0;
  3459                           
  3460                           ;incstack = 0
  3461                           ; Regs used in _set_TimeoutCleared: [status,2]
  3462  0A7E  1283               	bcf	3,5	;RP0=0, select bank0
  3463  0A7F  1303               	bcf	3,6	;RP1=0, select bank0
  3464  0A80  1127               	bcf	_myMain+2,2
  3465                           
  3466                           ;Main_B1.c: 288: myMain.Timeout_Counter = 0;
  3467  0A81  01A8               	clrf	_myMain+3
  3468  0A82  01A9               	clrf	_myMain+4
  3469  0A83  0008               	return
  3470  0A84                     __end_of_set_TimeoutCleared:	
  3471                           
  3472                           	psect	text9
  3473  0B73                     __ptext9:	
  3474 ;; *************** function _Timeout_Counter *****************
  3475 ;; Defined at:
  3476 ;;		line 277 in file "../src/Main_B1.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;		None
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;		None
  3481 ;; Return value:  Size  Location     Type
  3482 ;;		None               void
  3483 ;; Registers used:
  3484 ;;		wreg, status,2
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3490 ;;      Params:         0       0       0       0
  3491 ;;      Locals:         0       0       0       0
  3492 ;;      Temps:          0       0       0       0
  3493 ;;      Totals:         0       0       0       0
  3494 ;;Total ram usage:        0 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    2
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_getAD
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           
  3505                           ;psect for function _Timeout_Counter
  3506  0B73                     _Timeout_Counter:	
  3507                           
  3508                           ;Main_B1.c: 278: myMain.Timeout_Counter++;
  3509                           
  3510                           ;incstack = 0
  3511                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3512  0B73  3001               	movlw	1
  3513  0B74  1283               	bcf	3,5	;RP0=0, select bank0
  3514  0B75  1303               	bcf	3,6	;RP1=0, select bank0
  3515  0B76  07A8               	addwf	_myMain+3,f
  3516  0B77  1803               	skipnc
  3517  0B78  0AA9               	incf	_myMain+4,f
  3518  0B79  3000               	movlw	0
  3519  0B7A  07A9               	addwf	_myMain+4,f
  3520                           
  3521                           ;Main_B1.c: 279: if (myMain.Timeout_Counter == 25000) {
  3522  0B7B  3061               	movlw	97
  3523  0B7C  0629               	xorwf	_myMain+4,w
  3524  0B7D  1D03               	skipz
  3525  0B7E  2B81               	goto	u5235
  3526  0B7F  30A8               	movlw	168
  3527  0B80  0628               	xorwf	_myMain+3,w
  3528  0B81                     u5235:	
  3529  0B81  1D03               	skipz
  3530  0B82  0008               	return
  3531                           
  3532                           ;Main_B1.c: 280: myMain.Timeout_Counter = 0;
  3533  0B83  01A8               	clrf	_myMain+3
  3534  0B84  01A9               	clrf	_myMain+4
  3535                           
  3536                           ;Main_B1.c: 281: myMain.Timeout = 1;
  3537  0B85  1527               	bsf	_myMain+2,2
  3538  0B86  0008               	return
  3539  0B87                     __end_of_Timeout_Counter:	
  3540                           
  3541                           	psect	text10
  3542  0B3E                     __ptext10:	
  3543 ;; *************** function _WDT_Main *****************
  3544 ;; Defined at:
  3545 ;;		line 1121 in file "../src/MCU_B1.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;		None
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;		None
  3550 ;; Return value:  Size  Location     Type
  3551 ;;		None               void
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0, pclath, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3559 ;;      Params:         0       0       0       0
  3560 ;;      Locals:         0       0       0       0
  3561 ;;      Temps:          1       0       0       0
  3562 ;;      Totals:         1       0       0       0
  3563 ;;Total ram usage:        1 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    3
  3566 ;; This function calls:
  3567 ;;		_WDT_Clearing
  3568 ;; This function is called by:
  3569 ;;		_main
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           
  3574                           ;psect for function _WDT_Main
  3575  0B3E                     _WDT_Main:	
  3576                           
  3577                           ;MCU_B1.c: 1122: if (WDT.Enable == 1) {
  3578                           
  3579                           ;incstack = 0
  3580                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3581  0B3E  1283               	bcf	3,5	;RP0=0, select bank0
  3582  0B3F  1303               	bcf	3,6	;RP1=0, select bank0
  3583  0B40  1C35               	btfss	_WDT,0
  3584  0B41  0008               	return
  3585                           
  3586                           ;MCU_B1.c: 1123: if (WDT.Timer-- > 0) {
  3587  0B42  3001               	movlw	1
  3588  0B43  02B6               	subwf	_WDT+1,f
  3589  0B44  0836               	movf	_WDT+1,w
  3590  0B45  3AFF               	xorlw	255
  3591  0B46  1903               	skipnz
  3592  0B47  0008               	return
  3593                           
  3594                           ;MCU_B1.c: 1124: WDT.Timer = 100;
  3595  0B48  3064               	movlw	100
  3596  0B49  00F4               	movwf	??_WDT_Main
  3597  0B4A  0874               	movf	??_WDT_Main,w
  3598  0B4B  00B6               	movwf	_WDT+1
  3599                           
  3600                           ;MCU_B1.c: 1125: WDT_Clearing();
  3601  0B4C  118A  2002         	fcall	_WDT_Clearing
  3602  0B4E  0008               	return
  3603  0B4F                     __end_of_WDT_Main:	
  3604                           
  3605                           	psect	text11
  3606  0002                     __ptext11:	
  3607 ;; *************** function _WDT_Clearing *****************
  3608 ;; Defined at:
  3609 ;;		line 1131 in file "../src/MCU_B1.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;		None
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;		None
  3614 ;; Return value:  Size  Location     Type
  3615 ;;		None               void
  3616 ;; Registers used:
  3617 ;;		None
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3623 ;;      Params:         0       0       0       0
  3624 ;;      Locals:         0       0       0       0
  3625 ;;      Temps:          0       0       0       0
  3626 ;;      Totals:         0       0       0       0
  3627 ;;Total ram usage:        0 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    2
  3630 ;; This function calls:
  3631 ;;		Nothing
  3632 ;; This function is called by:
  3633 ;;		_WDT_Main
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           
  3638                           ;psect for function _WDT_Clearing
  3639  0002                     _WDT_Clearing:	
  3640                           
  3641                           ;incstack = 0
  3642                           ; Regs used in _WDT_Clearing: []
  3643  0002  0064               	clrwdt	;# 
  3644  0003  0008               	return
  3645  0004                     __end_of_WDT_Clearing:	
  3646                           
  3647                           	psect	text12
  3648  0A5E                     __ptext12:	
  3649 ;; *************** function _Temp_Main *****************
  3650 ;; Defined at:
  3651 ;;		line 65 in file "../src/OverTemperature_B1.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;		None
  3654 ;; Auto vars:     Size  Location     Type
  3655 ;;		None
  3656 ;; Return value:  Size  Location     Type
  3657 ;;		None               void
  3658 ;; Registers used:
  3659 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3660 ;; Tracked objects:
  3661 ;;		On entry : 0/0
  3662 ;;		On exit  : 0/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3665 ;;      Params:         0       0       0       0
  3666 ;;      Locals:         0       0       0       0
  3667 ;;      Temps:          0       0       0       0
  3668 ;;      Totals:         0       0       0       0
  3669 ;;Total ram usage:        0 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; Hardware stack levels required when called:    4
  3672 ;; This function calls:
  3673 ;;		_setTemp_Main
  3674 ;; This function is called by:
  3675 ;;		_main
  3676 ;; This function uses a non-reentrant model
  3677 ;;
  3678                           
  3679                           
  3680                           ;psect for function _Temp_Main
  3681  0A5E                     _Temp_Main:	
  3682                           
  3683                           ;OverTemperature_B1.c: 67: setTemp_Main();
  3684                           
  3685                           ;incstack = 0
  3686                           ; Regs used in _Temp_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3687  0A5E  118A  2611         	fcall	_setTemp_Main
  3688  0A60  0008               	return
  3689  0A61                     __end_of_Temp_Main:	
  3690                           
  3691                           	psect	text13
  3692  0611                     __ptext13:	
  3693 ;; *************** function _setTemp_Main *****************
  3694 ;; Defined at:
  3695 ;;		line 72 in file "../src/OverTemperature_B1.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;		None
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;  AD              2   14[BANK0 ] int 
  3700 ;;  DangerValue     1   13[BANK0 ] unsigned char 
  3701 ;;  SafeValue       1   12[BANK0 ] unsigned char 
  3702 ;;  TempGO          1   11[BANK0 ] unsigned char 
  3703 ;;  error           1   10[BANK0 ] unsigned char 
  3704 ;; Return value:  Size  Location     Type
  3705 ;;		None               void
  3706 ;; Registers used:
  3707 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3713 ;;      Params:         0       0       0       0
  3714 ;;      Locals:         0       6       0       0
  3715 ;;      Temps:          0       2       0       0
  3716 ;;      Totals:         0       8       0       0
  3717 ;;Total ram usage:        8 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    3
  3720 ;; This function calls:
  3721 ;;		___awdiv
  3722 ;;		_getMain_All_Error_Status
  3723 ;;		_getMain_All_LightsStatus
  3724 ;;		_setOverTemp_ADV_Restore
  3725 ;; This function is called by:
  3726 ;;		_Temp_Main
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           
  3731                           ;psect for function _setTemp_Main
  3732  0611                     _setTemp_Main:	
  3733                           
  3734                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  3735                           
  3736                           ;incstack = 0
  3737                           ; Regs used in _setTemp_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3738  0611  3000               	movlw	0
  3739  0612  158A  256E  118A   	fcall	_getMain_All_Error_Status
  3740  0615  1283               	bcf	3,5	;RP0=0, select bank0
  3741  0616  1303               	bcf	3,6	;RP1=0, select bank0
  3742  0617  00D7               	movwf	??_setTemp_Main
  3743  0618  0857               	movf	??_setTemp_Main,w
  3744  0619  00D9               	movwf	setTemp_Main@error
  3745                           
  3746                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  3747  061A  01DB               	clrf	setTemp_Main@SafeValue
  3748  061B  01DC               	clrf	setTemp_Main@DangerValue
  3749                           
  3750                           ;OverTemperature_B1.c: 75: int AD = 0;
  3751  061C  01DD               	clrf	setTemp_Main@AD
  3752  061D  01DE               	clrf	setTemp_Main@AD+1
  3753                           
  3754                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  3755  061E  158A  22BB  118A   	fcall	_getMain_All_LightsStatus
  3756  0621  1283               	bcf	3,5	;RP0=0, select bank0
  3757  0622  1303               	bcf	3,6	;RP1=0, select bank0
  3758  0623  00D7               	movwf	??_setTemp_Main
  3759  0624  0857               	movf	??_setTemp_Main,w
  3760  0625  00DA               	movwf	setTemp_Main@TempGO
  3761                           
  3762                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  3763  0626  1C39               	btfss	_Temp,0
  3764  0627  2EC4               	goto	l850
  3765                           
  3766                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  3767  0628  1939               	btfsc	_Temp,2
  3768  0629  2E46               	goto	l4788
  3769                           
  3770                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  3771  062A  085A               	movf	setTemp_Main@TempGO,w
  3772  062B  3A01               	xorlw	1
  3773  062C  1D03               	skipz
  3774  062D  2E30               	goto	l856
  3775  062E  1CB9               	btfss	_Temp,1
  3776  062F  2E32               	goto	l4780
  3777  0630                     l856:	
  3778  0630  1CB9               	btfss	_Temp,1
  3779  0631  2E43               	goto	l4786
  3780  0632                     l4780:	
  3781                           
  3782                           ;OverTemperature_B1.c: 88: Temp.Time++;
  3783  0632  3001               	movlw	1
  3784  0633  07BA               	addwf	_Temp+1,f
  3785  0634  1803               	skipnc
  3786  0635  0ABB               	incf	_Temp+2,f
  3787  0636  3000               	movlw	0
  3788  0637  07BB               	addwf	_Temp+2,f
  3789                           
  3790                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  3791  0638  3000               	movlw	0
  3792  0639  023B               	subwf	_Temp+2,w
  3793  063A  30FA               	movlw	250
  3794  063B  1903               	skipnz
  3795  063C  023A               	subwf	_Temp+1,w
  3796  063D  1C03               	skipc
  3797  063E  0008               	return
  3798                           
  3799                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  3800  063F  01BA               	clrf	_Temp+1
  3801  0640  01BB               	clrf	_Temp+2
  3802                           
  3803                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  3804  0641  1539               	bsf	_Temp,2
  3805                           
  3806                           ;OverTemperature_B1.c: 92: }
  3807                           ;OverTemperature_B1.c: 93: } else {
  3808  0642  0008               	return
  3809  0643                     l4786:	
  3810                           
  3811                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  3812  0643  01BA               	clrf	_Temp+1
  3813  0644  01BB               	clrf	_Temp+2
  3814                           
  3815                           ;OverTemperature_B1.c: 95: }
  3816                           ;OverTemperature_B1.c: 96: } else {
  3817  0645  0008               	return
  3818  0646                     l4788:	
  3819                           
  3820                           ;OverTemperature_B1.c: 97: Temp.Time++;
  3821  0646  3001               	movlw	1
  3822  0647  07BA               	addwf	_Temp+1,f
  3823  0648  1803               	skipnc
  3824  0649  0ABB               	incf	_Temp+2,f
  3825  064A  3000               	movlw	0
  3826  064B  07BB               	addwf	_Temp+2,f
  3827                           
  3828                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  3829  064C  3000               	movlw	0
  3830  064D  023B               	subwf	_Temp+2,w
  3831  064E  3005               	movlw	5
  3832  064F  1903               	skipnz
  3833  0650  023A               	subwf	_Temp+1,w
  3834  0651  1C03               	skipc
  3835  0652  0008               	return
  3836                           
  3837                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  3838  0653  01BA               	clrf	_Temp+1
  3839  0654  01BB               	clrf	_Temp+2
  3840                           
  3841                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  3842  0655  3003               	movlw	3
  3843  0656  00CF               	movwf	___awdiv@divisor
  3844  0657  3000               	movlw	0
  3845  0658  00D0               	movwf	___awdiv@divisor+1
  3846  0659  083E               	movf	_Temp+5,w
  3847  065A  073F               	addwf	_Temp+6,w
  3848  065B  00D7               	movwf	??_setTemp_Main
  3849  065C  01D8               	clrf	??_setTemp_Main+1
  3850  065D  0DD8               	rlf	??_setTemp_Main+1,f
  3851  065E  0840               	movf	_Temp+7,w
  3852  065F  0757               	addwf	??_setTemp_Main,w
  3853  0660  00D1               	movwf	___awdiv@dividend
  3854  0661  3000               	movlw	0
  3855  0662  1803               	skipnc
  3856  0663  3001               	movlw	1
  3857  0664  0758               	addwf	??_setTemp_Main+1,w
  3858  0665  00D2               	movwf	___awdiv@dividend+1
  3859  0666  158A  26D8  118A   	fcall	___awdiv
  3860  0669  1283               	bcf	3,5	;RP0=0, select bank0
  3861  066A  1303               	bcf	3,6	;RP1=0, select bank0
  3862  066B  0850               	movf	?___awdiv+1,w
  3863  066C  01DE               	clrf	setTemp_Main@AD+1
  3864  066D  07DE               	addwf	setTemp_Main@AD+1,f
  3865  066E  084F               	movf	?___awdiv,w
  3866  066F  01DD               	clrf	setTemp_Main@AD
  3867  0670  07DD               	addwf	setTemp_Main@AD,f
  3868                           
  3869                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  3870  0671  158A  23E2  118A   	fcall	_setOverTemp_ADV_Restore
  3871                           
  3872                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  3873  0674  1283               	bcf	3,5	;RP0=0, select bank0
  3874  0675  1303               	bcf	3,6	;RP1=0, select bank0
  3875  0676  085E               	movf	setTemp_Main@AD+1,w
  3876  0677  3A80               	xorlw	128
  3877  0678  00FF               	movwf	127
  3878  0679  3080               	movlw	128
  3879  067A  027F               	subwf	127,w
  3880  067B  1D03               	skipz
  3881  067C  2E7F               	goto	u5655
  3882  067D  3001               	movlw	1
  3883  067E  025D               	subwf	setTemp_Main@AD,w
  3884  067F                     u5655:	
  3885  067F  1C03               	skipc
  3886  0680  0008               	return
  3887                           
  3888                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  3889  0681  1283               	bcf	3,5	;RP0=0, select bank0
  3890  0682  1303               	bcf	3,6	;RP1=0, select bank0
  3891  0683  1139               	bcf	_Temp,2
  3892                           
  3893                           ;OverTemperature_B1.c: 117: SafeValue = 0x39;
  3894  0684  3039               	movlw	57
  3895  0685  00D7               	movwf	??_setTemp_Main
  3896  0686  0857               	movf	??_setTemp_Main,w
  3897  0687  00DB               	movwf	setTemp_Main@SafeValue
  3898                           
  3899                           ;OverTemperature_B1.c: 118: DangerValue = 0x6a;
  3900  0688  306A               	movlw	106
  3901  0689  00D7               	movwf	??_setTemp_Main
  3902  068A  0857               	movf	??_setTemp_Main,w
  3903  068B  00DC               	movwf	setTemp_Main@DangerValue
  3904                           
  3905                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  3906  068C  1CB9               	btfss	_Temp,1
  3907  068D  2EAA               	goto	l4816
  3908                           
  3909                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  3910  068E  085E               	movf	setTemp_Main@AD+1,w
  3911  068F  3A80               	xorlw	128
  3912  0690  00D7               	movwf	??_setTemp_Main
  3913  0691  3080               	movlw	128
  3914  0692  0257               	subwf	??_setTemp_Main,w
  3915  0693  1D03               	skipz
  3916  0694  2E97               	goto	u5675
  3917  0695  085B               	movf	setTemp_Main@SafeValue,w
  3918  0696  025D               	subwf	setTemp_Main@AD,w
  3919  0697                     u5675:	
  3920  0697  1C03               	skipc
  3921  0698  2EA6               	goto	l4814
  3922                           
  3923                           ;OverTemperature_B1.c: 132: Temp.Count++;
  3924  0699  3001               	movlw	1
  3925  069A  1283               	bcf	3,5	;RP0=0, select bank0
  3926  069B  1303               	bcf	3,6	;RP1=0, select bank0
  3927  069C  00D7               	movwf	??_setTemp_Main
  3928  069D  0857               	movf	??_setTemp_Main,w
  3929  069E  07BC               	addwf	_Temp+3,f
  3930                           
  3931                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  3932  069F  3003               	movlw	3
  3933  06A0  023C               	subwf	_Temp+3,w
  3934  06A1  1C03               	skipc
  3935  06A2  0008               	return
  3936                           
  3937                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  3938  06A3  01BC               	clrf	_Temp+3
  3939                           
  3940                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  3941  06A4  10B9               	bcf	_Temp,1
  3942                           
  3943                           ;OverTemperature_B1.c: 137: }
  3944                           ;OverTemperature_B1.c: 138: } else {
  3945                           
  3946                           ;OverTemperature_B1.c: 136: ;;
  3947  06A5  0008               	return
  3948  06A6                     l4814:	
  3949                           
  3950                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  3951  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  3952  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  3953  06A8  01BC               	clrf	_Temp+3
  3954                           
  3955                           ;OverTemperature_B1.c: 140: }
  3956                           ;OverTemperature_B1.c: 141: } else {
  3957  06A9  0008               	return
  3958  06AA                     l4816:	
  3959                           
  3960                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  3961  06AA  085E               	movf	setTemp_Main@AD+1,w
  3962  06AB  3A80               	xorlw	128
  3963  06AC  3C80               	sublw	128
  3964  06AD  1D03               	skipz
  3965  06AE  2EB1               	goto	u5695
  3966  06AF  085D               	movf	setTemp_Main@AD,w
  3967  06B0  025C               	subwf	setTemp_Main@DangerValue,w
  3968  06B1                     u5695:	
  3969  06B1  1C03               	skipc
  3970  06B2  2EC0               	goto	l4826
  3971                           
  3972                           ;OverTemperature_B1.c: 143: Temp.Count++;
  3973  06B3  3001               	movlw	1
  3974  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  3975  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  3976  06B6  00D7               	movwf	??_setTemp_Main
  3977  06B7  0857               	movf	??_setTemp_Main,w
  3978  06B8  07BC               	addwf	_Temp+3,f
  3979                           
  3980                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  3981  06B9  3003               	movlw	3
  3982  06BA  023C               	subwf	_Temp+3,w
  3983  06BB  1C03               	skipc
  3984  06BC  0008               	return
  3985                           
  3986                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  3987  06BD  01BC               	clrf	_Temp+3
  3988                           
  3989                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  3990  06BE  14B9               	bsf	_Temp,1
  3991                           
  3992                           ;OverTemperature_B1.c: 147: }
  3993                           ;OverTemperature_B1.c: 148: } else {
  3994  06BF  0008               	return
  3995  06C0                     l4826:	
  3996                           
  3997                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  3998  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  3999  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  4000  06C2  01BC               	clrf	_Temp+3
  4001                           
  4002                           ;OverTemperature_B1.c: 169: }
  4003                           ;OverTemperature_B1.c: 170: }
  4004                           ;OverTemperature_B1.c: 171: }
  4005                           ;OverTemperature_B1.c: 174: } else {
  4006                           
  4007                           ;OverTemperature_B1.c: 150: }
  4008                           ;OverTemperature_B1.c: 151: }
  4009                           ;OverTemperature_B1.c: 152: ;;
  4010                           ;OverTemperature_B1.c: 153: ;;
  4011  06C3  0008               	return
  4012  06C4                     l850:	
  4013                           
  4014                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  4015  06C4  1C25               	btfss	_myMain,0
  4016  06C5  0008               	return
  4017                           
  4018                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  4019  06C6  1439               	bsf	_Temp,0
  4020  06C7  0008               	return
  4021  06C8                     __end_of_setTemp_Main:	
  4022                           
  4023                           	psect	text14
  4024  0BE2                     __ptext14:	
  4025 ;; *************** function _setOverTemp_ADV_Restore *****************
  4026 ;; Defined at:
  4027 ;;		line 182 in file "../src/OverTemperature_B1.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;		None
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;  i               2    4[COMMON] int 
  4032 ;; Return value:  Size  Location     Type
  4033 ;;		None               void
  4034 ;; Registers used:
  4035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4041 ;;      Params:         0       0       0       0
  4042 ;;      Locals:         2       0       0       0
  4043 ;;      Temps:          0       0       0       0
  4044 ;;      Totals:         2       0       0       0
  4045 ;;Total ram usage:        2 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    2
  4048 ;; This function calls:
  4049 ;;		Nothing
  4050 ;; This function is called by:
  4051 ;;		_setTemp_Main
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           
  4056                           ;psect for function _setOverTemp_ADV_Restore
  4057  0BE2                     _setOverTemp_ADV_Restore:	
  4058                           
  4059                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  4060                           
  4061                           ;incstack = 0
  4062                           ; Regs used in _setOverTemp_ADV_Restore: [wreg-fsr0h+status,2+status,0+btemp+1]
  4063  0BE2  01F4               	clrf	setOverTemp_ADV_Restore@i
  4064  0BE3  01F5               	clrf	setOverTemp_ADV_Restore@i+1
  4065  0BE4                     L7:	
  4066  0BE4  0875               	movf	setOverTemp_ADV_Restore@i+1,w
  4067  0BE5  3A80               	xorlw	128
  4068  0BE6  00FF               	movwf	127
  4069  0BE7  3080               	movlw	128
  4070  0BE8  027F               	subwf	127,w
  4071  0BE9  1D03               	skipz
  4072  0BEA  2BED               	goto	u2815
  4073  0BEB  3005               	movlw	5
  4074  0BEC  0274               	subwf	setOverTemp_ADV_Restore@i,w
  4075  0BED                     u2815:	
  4076  0BED  1803               	btfsc	3,0
  4077  0BEE  0008               	return
  4078                           
  4079                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  4080  0BEF  0874               	movf	setOverTemp_ADV_Restore@i,w
  4081  0BF0  3E3D               	addlw	(_Temp+4)& (0+255)
  4082  0BF1  0084               	movwf	4
  4083  0BF2  1383               	bcf	3,7	;select IRP bank0
  4084  0BF3  0180               	clrf	0
  4085  0BF4  3001               	movlw	1
  4086  0BF5  07F4               	addwf	setOverTemp_ADV_Restore@i,f
  4087  0BF6  1803               	skipnc
  4088  0BF7  0AF5               	incf	setOverTemp_ADV_Restore@i+1,f
  4089  0BF8  3000               	movlw	0
  4090  0BF9  07F5               	addwf	setOverTemp_ADV_Restore@i+1,f
  4091  0BFA  2BE4               	goto	L7
  4092  0BFB                     __end_of_setOverTemp_ADV_Restore:	
  4093                           
  4094                           	psect	text15
  4095  0A5B                     __ptext15:	
  4096 ;; *************** function _Temp_Initialization *****************
  4097 ;; Defined at:
  4098 ;;		line 8 in file "../src/OverTemperature_B1.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;		None
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;		None
  4103 ;; Return value:  Size  Location     Type
  4104 ;;		None               void
  4105 ;; Registers used:
  4106 ;;		status,2, status,0, pclath, cstack
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4112 ;;      Params:         0       0       0       0
  4113 ;;      Locals:         0       0       0       0
  4114 ;;      Temps:          0       0       0       0
  4115 ;;      Totals:         0       0       0       0
  4116 ;;Total ram usage:        0 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    3
  4119 ;; This function calls:
  4120 ;;		_setTemp_Initialization
  4121 ;; This function is called by:
  4122 ;;		_main
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           
  4127                           ;psect for function _Temp_Initialization
  4128  0A5B                     _Temp_Initialization:	
  4129                           
  4130                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  4131                           
  4132                           ;incstack = 0
  4133                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4134  0A5B  158A  224D         	fcall	_setTemp_Initialization
  4135  0A5D  0008               	return
  4136  0A5E                     __end_of_Temp_Initialization:	
  4137                           
  4138                           	psect	text16
  4139  0A4D                     __ptext16:	
  4140 ;; *************** function _setTemp_Initialization *****************
  4141 ;; Defined at:
  4142 ;;		line 60 in file "../src/OverTemperature_B1.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;		None
  4147 ;; Return value:  Size  Location     Type
  4148 ;;		None               void
  4149 ;; Registers used:
  4150 ;;		None
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4156 ;;      Params:         0       0       0       0
  4157 ;;      Locals:         0       0       0       0
  4158 ;;      Temps:          0       0       0       0
  4159 ;;      Totals:         0       0       0       0
  4160 ;;Total ram usage:        0 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:    2
  4163 ;; This function calls:
  4164 ;;		Nothing
  4165 ;; This function is called by:
  4166 ;;		_Temp_Initialization
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           
  4171                           ;psect for function _setTemp_Initialization
  4172  0A4D                     _setTemp_Initialization:	
  4173                           
  4174                           ;incstack = 0
  4175                           ; Regs used in _setTemp_Initialization: []
  4176  0A4D  0008               	return
  4177  0A4E                     __end_of_setTemp_Initialization:	
  4178                           
  4179                           	psect	text17
  4180  0A58                     __ptext17:	
  4181 ;; *************** function _SYSC_Main *****************
  4182 ;; Defined at:
  4183 ;;		line 17 in file "../src/SYSC_B1.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;		None
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;		None
  4188 ;; Return value:  Size  Location     Type
  4189 ;;		None               void
  4190 ;; Registers used:
  4191 ;;		wreg, status,2, status,0, pclath, cstack
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4197 ;;      Params:         0       0       0       0
  4198 ;;      Locals:         0       0       0       0
  4199 ;;      Temps:          0       0       0       0
  4200 ;;      Totals:         0       0       0       0
  4201 ;;Total ram usage:        0 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; Hardware stack levels required when called:    4
  4204 ;; This function calls:
  4205 ;;		_setSYSC_Main
  4206 ;; This function is called by:
  4207 ;;		_main
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           
  4212                           ;psect for function _SYSC_Main
  4213  0A58                     _SYSC_Main:	
  4214                           
  4215                           ;SYSC_B1.c: 19: setSYSC_Main();
  4216                           
  4217                           ;incstack = 0
  4218                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4219  0A58  118A  27BC         	fcall	_setSYSC_Main
  4220  0A5A  0008               	return
  4221  0A5B                     __end_of_SYSC_Main:	
  4222                           
  4223                           	psect	text18
  4224  07BC                     __ptext18:	
  4225 ;; *************** function _setSYSC_Main *****************
  4226 ;; Defined at:
  4227 ;;		line 23 in file "../src/SYSC_B1.c"
  4228 ;; Parameters:    Size  Location     Type
  4229 ;;		None
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;		None
  4232 ;; Return value:  Size  Location     Type
  4233 ;;		None               void
  4234 ;; Registers used:
  4235 ;;		wreg, status,2, status,0, pclath, cstack
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 0/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4241 ;;      Params:         0       0       0       0
  4242 ;;      Locals:         0       0       0       0
  4243 ;;      Temps:          0       0       0       0
  4244 ;;      Totals:         0       0       0       0
  4245 ;;Total ram usage:        0 bytes
  4246 ;; Hardware stack levels used:    1
  4247 ;; Hardware stack levels required when called:    3
  4248 ;; This function calls:
  4249 ;;		_getMain_All_Error_Status
  4250 ;; This function is called by:
  4251 ;;		_SYSC_Main
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           
  4256                           ;psect for function _setSYSC_Main
  4257  07BC                     _setSYSC_Main:	
  4258                           
  4259                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4260                           
  4261                           ;incstack = 0
  4262                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4263  07BC  1283               	bcf	3,5	;RP0=0, select bank0
  4264  07BD  1303               	bcf	3,6	;RP1=0, select bank0
  4265  07BE  1C20               	btfss	_SYSC,0
  4266  07BF  0008               	return
  4267                           
  4268                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4269  07C0  18A0               	btfsc	_SYSC,1
  4270  07C1  2FD3               	goto	l3630
  4271                           
  4272                           ;SYSC_B1.c: 27: SYSC.Time++;
  4273  07C2  3001               	movlw	1
  4274  07C3  07A1               	addwf	_SYSC+1,f
  4275  07C4  1803               	skipnc
  4276  07C5  0AA2               	incf	_SYSC+2,f
  4277  07C6  3000               	movlw	0
  4278  07C7  07A2               	addwf	_SYSC+2,f
  4279                           
  4280                           ;SYSC_B1.c: 28: if (SYSC.Time >= (1000 / 20)) {
  4281  07C8  3000               	movlw	0
  4282  07C9  0222               	subwf	_SYSC+2,w
  4283  07CA  3032               	movlw	50
  4284  07CB  1903               	skipnz
  4285  07CC  0221               	subwf	_SYSC+1,w
  4286  07CD  1C03               	skipc
  4287  07CE  0008               	return
  4288                           
  4289                           ;SYSC_B1.c: 29: SYSC.Time = 0;
  4290  07CF  01A1               	clrf	_SYSC+1
  4291  07D0  01A2               	clrf	_SYSC+2
  4292                           
  4293                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4294  07D1  14A0               	bsf	_SYSC,1
  4295                           
  4296                           ;SYSC_B1.c: 31: }
  4297                           ;SYSC_B1.c: 32: } else {
  4298  07D2  0008               	return
  4299  07D3                     l3630:	
  4300                           
  4301                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4302  07D3  3001               	movlw	1
  4303  07D4  158A  256E  118A   	fcall	_getMain_All_Error_Status
  4304  07D7  3800               	iorlw	0
  4305  07D8  1D03               	skipz
  4306  07D9  0008               	return
  4307                           
  4308                           ;SYSC_B1.c: 34: SYSC.Time++;
  4309  07DA  3001               	movlw	1
  4310  07DB  1283               	bcf	3,5	;RP0=0, select bank0
  4311  07DC  1303               	bcf	3,6	;RP1=0, select bank0
  4312  07DD  07A1               	addwf	_SYSC+1,f
  4313  07DE  1803               	skipnc
  4314  07DF  0AA2               	incf	_SYSC+2,f
  4315  07E0  3000               	movlw	0
  4316  07E1  07A2               	addwf	_SYSC+2,f
  4317                           
  4318                           ;SYSC_B1.c: 35: if (SYSC.Time >= (1000 / 20)) {
  4319  07E2  3000               	movlw	0
  4320  07E3  0222               	subwf	_SYSC+2,w
  4321  07E4  3032               	movlw	50
  4322  07E5  1903               	skipnz
  4323  07E6  0221               	subwf	_SYSC+1,w
  4324  07E7  1C03               	skipc
  4325  07E8  2FEE               	goto	l3636
  4326                           
  4327                           ;SYSC_B1.c: 36: SYSC.Time = 0;
  4328  07E9  01A1               	clrf	_SYSC+1
  4329  07EA  01A2               	clrf	_SYSC+2
  4330                           
  4331                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4332  07EB  01A3               	clrf	_SYSC+3
  4333  07EC  01A4               	clrf	_SYSC+4
  4334                           
  4335                           ;SYSC_B1.c: 38: } else {
  4336  07ED  0008               	return
  4337  07EE                     l3636:	
  4338                           
  4339                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4340  07EE  3001               	movlw	1
  4341  07EF  07A3               	addwf	_SYSC+3,f
  4342  07F0  1803               	skipnc
  4343  07F1  0AA4               	incf	_SYSC+4,f
  4344  07F2  3000               	movlw	0
  4345  07F3  07A4               	addwf	_SYSC+4,f
  4346                           
  4347                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4348  07F4  3001               	movlw	1
  4349  07F5  0624               	xorwf	_SYSC+4,w
  4350  07F6  1D03               	skipz
  4351  07F7  2FFA               	goto	u3395
  4352  07F8  30F4               	movlw	244
  4353  07F9  0623               	xorwf	_SYSC+3,w
  4354  07FA                     u3395:	
  4355  07FA  1D03               	skipz
  4356  07FB  0008               	return
  4357                           
  4358                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4359  07FC  01A3               	clrf	_SYSC+3
  4360  07FD  01A4               	clrf	_SYSC+4
  4361                           
  4362                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4363  07FE  10A0               	bcf	_SYSC,1
  4364  07FF  0008               	return
  4365  0800                     __end_of_setSYSC_Main:	
  4366                           
  4367                           	psect	text19
  4368  0A55                     __ptext19:	
  4369 ;; *************** function _SYSC_Initialization *****************
  4370 ;; Defined at:
  4371 ;;		line 7 in file "../src/SYSC_B1.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;		None
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;		None
  4376 ;; Return value:  Size  Location     Type
  4377 ;;		None               void
  4378 ;; Registers used:
  4379 ;;		status,2, status,0, pclath, cstack
  4380 ;; Tracked objects:
  4381 ;;		On entry : 0/0
  4382 ;;		On exit  : 0/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4385 ;;      Params:         0       0       0       0
  4386 ;;      Locals:         0       0       0       0
  4387 ;;      Temps:          0       0       0       0
  4388 ;;      Totals:         0       0       0       0
  4389 ;;Total ram usage:        0 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:    3
  4392 ;; This function calls:
  4393 ;;		_setSYSC_Initialization
  4394 ;; This function is called by:
  4395 ;;		_main
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           
  4400                           ;psect for function _SYSC_Initialization
  4401  0A55                     _SYSC_Initialization:	
  4402                           
  4403                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4404                           
  4405                           ;incstack = 0
  4406                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4407  0A55  158A  2269         	fcall	_setSYSC_Initialization
  4408  0A57  0008               	return
  4409  0A58                     __end_of_SYSC_Initialization:	
  4410                           
  4411                           	psect	text20
  4412  0A69                     __ptext20:	
  4413 ;; *************** function _setSYSC_Initialization *****************
  4414 ;; Defined at:
  4415 ;;		line 13 in file "../src/SYSC_B1.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;		None
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;		None
  4420 ;; Return value:  Size  Location     Type
  4421 ;;		None               void
  4422 ;; Registers used:
  4423 ;;		None
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4429 ;;      Params:         0       0       0       0
  4430 ;;      Locals:         0       0       0       0
  4431 ;;      Temps:          0       0       0       0
  4432 ;;      Totals:         0       0       0       0
  4433 ;;Total ram usage:        0 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; Hardware stack levels required when called:    2
  4436 ;; This function calls:
  4437 ;;		Nothing
  4438 ;; This function is called by:
  4439 ;;		_SYSC_Initialization
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           
  4444                           ;psect for function _setSYSC_Initialization
  4445  0A69                     _setSYSC_Initialization:	
  4446                           
  4447                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4448                           
  4449                           ;incstack = 0
  4450                           ; Regs used in _setSYSC_Initialization: []
  4451  0A69  1283               	bcf	3,5	;RP0=0, select bank0
  4452  0A6A  1303               	bcf	3,6	;RP1=0, select bank0
  4453  0A6B  1420               	bsf	_SYSC,0
  4454  0A6C  0008               	return
  4455  0A6D                     __end_of_setSYSC_Initialization:	
  4456                           
  4457                           	psect	text21
  4458  002D                     __ptext21:	
  4459 ;; *************** function _PIR_Main *****************
  4460 ;; Defined at:
  4461 ;;		line 13 in file "../src/PIR_B1.c"
  4462 ;; Parameters:    Size  Location     Type
  4463 ;;		None
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;  LightsStatus    1   17[BANK0 ] unsigned char 
  4466 ;;  TriggerValue    1   16[BANK0 ] unsigned char 
  4467 ;;  Enable_Switc    1   13[BANK0 ] unsigned char 
  4468 ;;  cds             1   12[BANK0 ] unsigned char 
  4469 ;;  error           1   11[BANK0 ] unsigned char 
  4470 ;; Return value:  Size  Location     Type
  4471 ;;		None               void
  4472 ;; Registers used:
  4473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4474 ;; Tracked objects:
  4475 ;;		On entry : 0/0
  4476 ;;		On exit  : 0/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4479 ;;      Params:         0       0       0       0
  4480 ;;      Locals:         0       7       0       0
  4481 ;;      Temps:          0       5       0       0
  4482 ;;      Totals:         0      12       0       0
  4483 ;;Total ram usage:       12 bytes
  4484 ;; Hardware stack levels used:    1
  4485 ;; Hardware stack levels required when called:    5
  4486 ;; This function calls:
  4487 ;;		_getCDS_Status
  4488 ;;		_getLights_Status
  4489 ;;		_getMain_All_Error_Status
  4490 ;;		_setLED
  4491 ;;		_setLights_SwOff
  4492 ;;		_setLights_SwOn
  4493 ;; This function is called by:
  4494 ;;		_main
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           
  4499                           ;psect for function _PIR_Main
  4500  002D                     _PIR_Main:	
  4501                           
  4502                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4503                           
  4504                           ;incstack = 0
  4505                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4506  002D  3000               	movlw	0
  4507  002E  158A  256E  118A   	fcall	_getMain_All_Error_Status
  4508  0031  1283               	bcf	3,5	;RP0=0, select bank0
  4509  0032  1303               	bcf	3,6	;RP1=0, select bank0
  4510  0033  00D5               	movwf	??_PIR_Main
  4511  0034  0855               	movf	??_PIR_Main,w
  4512  0035  00DA               	movwf	PIR_Main@error
  4513                           
  4514                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4515  0036  158A  22A2  118A   	fcall	_getCDS_Status
  4516  0039  1283               	bcf	3,5	;RP0=0, select bank0
  4517  003A  1303               	bcf	3,6	;RP1=0, select bank0
  4518  003B  00D5               	movwf	??_PIR_Main
  4519  003C  0855               	movf	??_PIR_Main,w
  4520  003D  00DB               	movwf	PIR_Main@cds
  4521                           
  4522                           ;PIR_B1.c: 16: char LightsStatus = 0;
  4523  003E  01E0               	clrf	PIR_Main@LightsStatus
  4524                           
  4525                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  4526  003F  01DC               	clrf	PIR_Main@Enable_Switch
  4527  0040  0ADC               	incf	PIR_Main@Enable_Switch,f
  4528                           
  4529                           ;PIR_B1.c: 18: char TriggerValue = 0;
  4530  0041  01DF               	clrf	PIR_Main@TriggerValue
  4531                           
  4532                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  4533  0042  3001               	movlw	1
  4534  0043  158A  232D  118A   	fcall	_getLights_Status
  4535  0046  1283               	bcf	3,5	;RP0=0, select bank0
  4536  0047  1303               	bcf	3,6	;RP1=0, select bank0
  4537  0048  00D5               	movwf	??_PIR_Main
  4538  0049  0855               	movf	??_PIR_Main,w
  4539  004A  00E0               	movwf	PIR_Main@LightsStatus
  4540                           
  4541                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  4542  004B  1683               	bsf	3,5	;RP0=1, select bank1
  4543  004C  1303               	bcf	3,6	;RP1=0, select bank1
  4544  004D  1C20               	btfss	__PIR^(0+128),0
  4545  004E  2A19               	goto	l935
  4546                           
  4547                           ;PIR_B1.c: 36: if (error == 0) {
  4548  004F  1283               	bcf	3,5	;RP0=0, select bank0
  4549  0050  1303               	bcf	3,6	;RP1=0, select bank0
  4550  0051  08DA               	movf	PIR_Main@error,f
  4551  0052  1D03               	skipz
  4552  0053  2892               	goto	l936
  4553                           
  4554                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  4555  0054  085B               	movf	PIR_Main@cds,w
  4556  0055  3A01               	xorlw	1
  4557  0056  1D03               	skipz
  4558  0057  2860               	goto	l937
  4559  0058  085C               	movf	PIR_Main@Enable_Switch,w
  4560  0059  3A01               	xorlw	1
  4561  005A  1D03               	skipz
  4562  005B  2860               	goto	l937
  4563                           
  4564                           ;PIR_B1.c: 39: _PIR.Available = 1;
  4565  005C  1683               	bsf	3,5	;RP0=1, select bank1
  4566  005D  1303               	bcf	3,6	;RP1=0, select bank1
  4567  005E  17A0               	bsf	__PIR^(0+128),7
  4568                           
  4569                           ;PIR_B1.c: 40: } else {
  4570  005F  2882               	goto	l5290
  4571  0060                     l937:	
  4572                           
  4573                           ;PIR_B1.c: 41: _PIR.Available = 0;
  4574  0060  1683               	bsf	3,5	;RP0=1, select bank1
  4575  0061  1303               	bcf	3,6	;RP1=0, select bank1
  4576  0062  13A0               	bcf	__PIR^(0+128),7
  4577                           
  4578                           ;PIR_B1.c: 43: if (_PIR.OK == 1) {
  4579  0063  1DA0               	btfss	__PIR^(0+128),3
  4580  0064  2882               	goto	l5290
  4581                           
  4582                           ;PIR_B1.c: 45: setLED(1, 0);
  4583  0065  1283               	bcf	3,5	;RP0=0, select bank0
  4584  0066  1303               	bcf	3,6	;RP1=0, select bank0
  4585  0067  01CF               	clrf	setLED@command
  4586  0068  3001               	movlw	1
  4587  0069  158A  2735  118A   	fcall	_setLED
  4588                           
  4589                           ;PIR_B1.c: 46: setLED(2, 0);
  4590  006C  1283               	bcf	3,5	;RP0=0, select bank0
  4591  006D  1303               	bcf	3,6	;RP1=0, select bank0
  4592  006E  01CF               	clrf	setLED@command
  4593  006F  3002               	movlw	2
  4594  0070  158A  2735  118A   	fcall	_setLED
  4595                           
  4596                           ;PIR_B1.c: 51: if (getLights_Status(1) == 1) {
  4597  0073  3001               	movlw	1
  4598  0074  158A  232D  118A   	fcall	_getLights_Status
  4599  0077  3A01               	xorlw	1
  4600  0078  1D03               	skipz
  4601  0079  2882               	goto	l5290
  4602                           
  4603                           ;PIR_B1.c: 52: setLights_SwOn(1);
  4604  007A  3001               	movlw	1
  4605  007B  158A  24C0  118A   	fcall	_setLights_SwOn
  4606                           
  4607                           ;PIR_B1.c: 53: setLights_SwOff(1);
  4608  007E  3001               	movlw	1
  4609  007F  158A  23FB  118A   	fcall	_setLights_SwOff
  4610  0082                     l5290:	
  4611                           
  4612                           ;PIR_B1.c: 55: }
  4613                           ;PIR_B1.c: 67: }
  4614                           ;PIR_B1.c: 68: }
  4615                           ;PIR_B1.c: 72: if (_PIR.Detect == 0) {
  4616  0082  1683               	bsf	3,5	;RP0=1, select bank1
  4617  0083  1303               	bcf	3,6	;RP1=0, select bank1
  4618  0084  1A20               	btfsc	__PIR^(0+128),4
  4619  0085  2898               	goto	l943
  4620                           
  4621                           ;PIR_B1.c: 73: _PIR.Detect = 1;
  4622  0086  1620               	bsf	__PIR^(0+128),4
  4623                           
  4624                           ;PIR_B1.c: 75: if (_PIR.OK == 0) {
  4625  0087  19A0               	btfsc	__PIR^(0+128),3
  4626  0088  2898               	goto	l943
  4627                           
  4628                           ;PIR_B1.c: 76: setLED(1, 1);
  4629  0089  1283               	bcf	3,5	;RP0=0, select bank0
  4630  008A  1303               	bcf	3,6	;RP1=0, select bank0
  4631  008B  01CF               	clrf	setLED@command
  4632  008C  0ACF               	incf	setLED@command,f
  4633  008D  3001               	movlw	1
  4634  008E  158A  2735  118A   	fcall	_setLED
  4635                           
  4636                           ;PIR_B1.c: 77: }
  4637                           ;PIR_B1.c: 80: }
  4638                           ;PIR_B1.c: 81: } else {
  4639  0091  2898               	goto	l943
  4640  0092                     l936:	
  4641                           
  4642                           ;PIR_B1.c: 82: if (_PIR.Detect == 1) {
  4643  0092  1683               	bsf	3,5	;RP0=1, select bank1
  4644  0093  1303               	bcf	3,6	;RP1=0, select bank1
  4645  0094  1E20               	btfss	__PIR^(0+128),4
  4646  0095  2898               	goto	l943
  4647                           
  4648                           ;PIR_B1.c: 83: _PIR.Detect = 0;
  4649  0096  1220               	bcf	__PIR^(0+128),4
  4650                           
  4651                           ;PIR_B1.c: 84: _PIR.Available = 0;
  4652  0097  13A0               	bcf	__PIR^(0+128),7
  4653  0098                     l943:	
  4654                           
  4655                           ;PIR_B1.c: 102: }
  4656                           ;PIR_B1.c: 103: }
  4657                           ;PIR_B1.c: 105: if (_PIR.ADtoGO == 0) {
  4658  0098  1683               	bsf	3,5	;RP0=1, select bank1
  4659  0099  1303               	bcf	3,6	;RP1=0, select bank1
  4660  009A  18A0               	btfsc	__PIR^(0+128),1
  4661  009B  28AB               	goto	l945
  4662                           
  4663                           ;PIR_B1.c: 106: _PIR.Time++;
  4664  009C  3001               	movlw	1
  4665  009D  1283               	bcf	3,5	;RP0=0, select bank0
  4666  009E  1303               	bcf	3,6	;RP1=0, select bank0
  4667  009F  00D5               	movwf	??_PIR_Main
  4668  00A0  0855               	movf	??_PIR_Main,w
  4669  00A1  1683               	bsf	3,5	;RP0=1, select bank1
  4670  00A2  1303               	bcf	3,6	;RP1=0, select bank1
  4671  00A3  07A2               	addwf	(__PIR^(0+128)+2),f
  4672                           
  4673                           ;PIR_B1.c: 107: if (_PIR.Time == (100 / 20)) {
  4674  00A4  0822               	movf	(__PIR^(0+128)+2),w
  4675  00A5  3A05               	xorlw	5
  4676  00A6  1D03               	skipz
  4677  00A7  29B8               	goto	l5378
  4678                           
  4679                           ;PIR_B1.c: 108: _PIR.Time = 0;
  4680  00A8  01A2               	clrf	(__PIR^(0+128)+2)
  4681                           
  4682                           ;PIR_B1.c: 109: _PIR.ADtoGO = 1;
  4683  00A9  14A0               	bsf	__PIR^(0+128),1
  4684                           
  4685                           ;PIR_B1.c: 110: }
  4686                           ;PIR_B1.c: 111: } else {
  4687  00AA  29B8               	goto	l5378
  4688  00AB                     l945:	
  4689                           
  4690                           ;PIR_B1.c: 112: if (_PIR.GO == 1) {
  4691  00AB  1D20               	btfss	__PIR^(0+128),2
  4692  00AC  29B8               	goto	l5378
  4693                           
  4694                           ;PIR_B1.c: 113: _PIR.GO = 0;
  4695  00AD  1120               	bcf	__PIR^(0+128),2
  4696                           
  4697                           ;PIR_B1.c: 114: _PIR.ADtoGO = 0;
  4698  00AE  10A0               	bcf	__PIR^(0+128),1
  4699                           
  4700                           ;PIR_B1.c: 115: if (_PIR.Available == 1) {
  4701  00AF  1BA0               	btfsc	__PIR^(0+128),7
  4702                           
  4703                           ;PIR_B1.c: 116: if (_PIR.OK == 1) {
  4704  00B0  1DA0               	btfss	__PIR^(0+128),3
  4705  00B1  29B8               	goto	l5378
  4706                           
  4707                           ;PIR_B1.c: 118: _PIR.Time++;
  4708  00B2  3001               	movlw	1
  4709  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  4710  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  4711  00B5  00D5               	movwf	??_PIR_Main
  4712  00B6  0855               	movf	??_PIR_Main,w
  4713  00B7  1683               	bsf	3,5	;RP0=1, select bank1
  4714  00B8  1303               	bcf	3,6	;RP1=0, select bank1
  4715  00B9  07A2               	addwf	(__PIR^(0+128)+2),f
  4716                           
  4717                           ;PIR_B1.c: 119: if (_PIR.Time == 60) {
  4718  00BA  0822               	movf	(__PIR^(0+128)+2),w
  4719  00BB  3A3C               	xorlw	60
  4720  00BC  1D03               	skipz
  4721  00BD  28F2               	goto	l5346
  4722                           
  4723                           ;PIR_B1.c: 120: _PIR.Time = 0;
  4724  00BE  01A2               	clrf	(__PIR^(0+128)+2)
  4725                           
  4726                           ;PIR_B1.c: 121: if (_PIR.RangeCount >= 90) {
  4727  00BF  305A               	movlw	90
  4728  00C0  0247               	subwf	(__PIR^(0+128)+39),w
  4729  00C1  1C03               	skipc
  4730  00C2  28CE               	goto	l5328
  4731                           
  4732                           ;PIR_B1.c: 122: _PIR.RangeTime1 = 0;
  4733  00C3  01C6               	clrf	(__PIR^(0+128)+38)
  4734                           
  4735                           ;PIR_B1.c: 124: if (_PIR.RangeValue == 25) {
  4736  00C4  0848               	movf	(__PIR^(0+128)+40),w
  4737  00C5  3A19               	xorlw	25
  4738  00C6  1903               	btfsc	3,2
  4739  00C7  28E3               	goto	L13
  4740                           
  4741                           ;PIR_B1.c: 126: } else if (_PIR.RangeValue == (25+10)) {
  4742                           
  4743                           ;PIR_B1.c: 125: _PIR.RangeValue = (25+10);
  4744  00C8  0848               	movf	(__PIR^(0+128)+40),w
  4745  00C9  3A23               	xorlw	35
  4746  00CA  1D03               	skipz
  4747  00CB  28F1               	goto	l5344
  4748                           
  4749                           ;PIR_B1.c: 127: _PIR.RangeValue = (25+20);
  4750  00CC  302D               	movlw	45
  4751  00CD  28EA               	goto	L10
  4752  00CE                     l5328:	
  4753                           ;PIR_B1.c: 128: }
  4754                           ;PIR_B1.c: 129: } else if (_PIR.RangeCount <= 10) {
  4755                           
  4756  00CE  300B               	movlw	11
  4757  00CF  0247               	subwf	(__PIR^(0+128)+39),w
  4758  00D0  1803               	skipnc
  4759  00D1  28F1               	goto	l5344
  4760                           
  4761                           ;PIR_B1.c: 130: _PIR.RangeTime1++;
  4762  00D2  3001               	movlw	1
  4763  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  4764  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  4765  00D5  00D5               	movwf	??_PIR_Main
  4766  00D6  0855               	movf	??_PIR_Main,w
  4767  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  4768  00D8  1303               	bcf	3,6	;RP1=0, select bank1
  4769  00D9  07C6               	addwf	(__PIR^(0+128)+38),f
  4770                           
  4771                           ;PIR_B1.c: 131: if (_PIR.RangeTime1 == 2) {
  4772  00DA  0846               	movf	(__PIR^(0+128)+38),w
  4773  00DB  3A02               	xorlw	2
  4774  00DC  1D03               	skipz
  4775  00DD  28F1               	goto	l5344
  4776                           
  4777                           ;PIR_B1.c: 132: _PIR.RangeTime1 = 0;
  4778  00DE  01C6               	clrf	(__PIR^(0+128)+38)
  4779                           
  4780                           ;PIR_B1.c: 134: if (_PIR.RangeValue == (25+20)) {
  4781  00DF  0848               	movf	(__PIR^(0+128)+40),w
  4782  00E0  3A2D               	xorlw	45
  4783  00E1  1D03               	skipz
  4784  00E2  28E5               	goto	l5340
  4785  00E3                     L13:	
  4786                           
  4787                           ;PIR_B1.c: 135: _PIR.RangeValue = (25+10);
  4788  00E3  3023               	movlw	35
  4789  00E4  28EA               	goto	L10
  4790  00E5                     l5340:	
  4791                           ;PIR_B1.c: 136: } else if (_PIR.RangeValue == (25+10)) {
  4792                           
  4793  00E5  0848               	movf	(__PIR^(0+128)+40),w
  4794  00E6  3A23               	xorlw	35
  4795  00E7  1D03               	skipz
  4796  00E8  28F1               	goto	l5344
  4797                           
  4798                           ;PIR_B1.c: 137: _PIR.RangeValue = 25;
  4799  00E9  3019               	movlw	25
  4800  00EA                     L10:	
  4801  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  4802  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  4803  00EC  00D5               	movwf	??_PIR_Main
  4804  00ED  0855               	movf	??_PIR_Main,w
  4805  00EE  1683               	bsf	3,5	;RP0=1, select bank1
  4806  00EF  1303               	bcf	3,6	;RP1=0, select bank1
  4807  00F0  00C8               	movwf	(__PIR^(0+128)+40)
  4808  00F1                     l5344:	
  4809                           
  4810                           ;PIR_B1.c: 138: }
  4811                           ;PIR_B1.c: 139: }
  4812                           ;PIR_B1.c: 140: }
  4813                           ;PIR_B1.c: 141: _PIR.RangeCount = 0;
  4814  00F1  01C7               	clrf	(__PIR^(0+128)+39)
  4815  00F2                     l5346:	
  4816                           
  4817                           ;PIR_B1.c: 142: }
  4818                           ;PIR_B1.c: 145: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  4819                           ;PIR_B1.c: 146: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  4820  00F2  0848               	movf	(__PIR^(0+128)+40),w
  4821  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  4822  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  4823  00F5  00D5               	movwf	??_PIR_Main
  4824  00F6  01D6               	clrf	??_PIR_Main+1
  4825  00F7  09D5               	comf	??_PIR_Main,f
  4826  00F8  09D6               	comf	??_PIR_Main+1,f
  4827  00F9  0AD5               	incf	??_PIR_Main,f
  4828  00FA  1903               	skipnz
  4829  00FB  0AD6               	incf	??_PIR_Main+1,f
  4830  00FC  1683               	bsf	3,5	;RP0=1, select bank1
  4831  00FD  1303               	bcf	3,6	;RP1=0, select bank1
  4832  00FE  0823               	movf	(__PIR^(0+128)+3),w
  4833  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  4834  0100  1303               	bcf	3,6	;RP1=0, select bank0
  4835  0101  0755               	addwf	??_PIR_Main,w
  4836  0102  00D7               	movwf	??_PIR_Main+2
  4837  0103  0856               	movf	??_PIR_Main+1,w
  4838  0104  1803               	skipnc
  4839  0105  0A56               	incf	??_PIR_Main+1,w
  4840  0106  00D8               	movwf	??_PIR_Main+3
  4841  0107  0858               	movf	??_PIR_Main+3,w
  4842  0108  3A80               	xorlw	128
  4843  0109  3C80               	sublw	128
  4844  010A  1D03               	skipz
  4845  010B  2910               	goto	u6905
  4846  010C  0857               	movf	??_PIR_Main+2,w
  4847  010D  1683               	bsf	3,5	;RP0=1, select bank1
  4848  010E  1303               	bcf	3,6	;RP1=0, select bank1
  4849  010F  0221               	subwf	(__PIR^(0+128)+1),w
  4850  0110                     u6905:	
  4851  0110  1C03               	skipc
  4852  0111  2932               	goto	l5356
  4853  0112  1683               	bsf	3,5	;RP0=1, select bank1
  4854  0113  1303               	bcf	3,6	;RP1=0, select bank1
  4855  0114  0823               	movf	(__PIR^(0+128)+3),w
  4856  0115  0748               	addwf	(__PIR^(0+128)+40),w
  4857  0116  1283               	bcf	3,5	;RP0=0, select bank0
  4858  0117  1303               	bcf	3,6	;RP1=0, select bank0
  4859  0118  00D5               	movwf	??_PIR_Main
  4860  0119  01D6               	clrf	??_PIR_Main+1
  4861  011A  0DD6               	rlf	??_PIR_Main+1,f
  4862  011B  0856               	movf	??_PIR_Main+1,w
  4863  011C  3A80               	xorlw	128
  4864  011D  00D7               	movwf	??_PIR_Main+2
  4865  011E  3080               	movlw	128
  4866  011F  0257               	subwf	??_PIR_Main+2,w
  4867  0120  1D03               	skipz
  4868  0121  2928               	goto	u6915
  4869  0122  1683               	bsf	3,5	;RP0=1, select bank1
  4870  0123  1303               	bcf	3,6	;RP1=0, select bank1
  4871  0124  0821               	movf	(__PIR^(0+128)+1),w
  4872  0125  1283               	bcf	3,5	;RP0=0, select bank0
  4873  0126  1303               	bcf	3,6	;RP1=0, select bank0
  4874  0127  0255               	subwf	??_PIR_Main,w
  4875  0128                     u6915:	
  4876  0128  1C03               	skipc
  4877  0129  2932               	goto	l5356
  4878                           
  4879                           ;PIR_B1.c: 148: _PIR.Count = 0;
  4880  012A  1683               	bsf	3,5	;RP0=1, select bank1
  4881  012B  1303               	bcf	3,6	;RP1=0, select bank1
  4882  012C  01BE               	clrf	(__PIR^(0+128)+30)
  4883  012D  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4884                           
  4885                           ;PIR_B1.c: 155: setLED(1, 0);
  4886  012E  1283               	bcf	3,5	;RP0=0, select bank0
  4887  012F  1303               	bcf	3,6	;RP1=0, select bank0
  4888  0130  01CF               	clrf	setLED@command
  4889  0131  29A1               	goto	L14
  4890  0132                     l5356:	
  4891                           ;PIR_B1.c: 159: } else {
  4892                           
  4893                           ;PIR_B1.c: 156: setLED(2, 0);
  4894                           
  4895                           
  4896                           ;PIR_B1.c: 162: _PIR.RangeCount++;
  4897  0132  3001               	movlw	1
  4898  0133  1283               	bcf	3,5	;RP0=0, select bank0
  4899  0134  1303               	bcf	3,6	;RP1=0, select bank0
  4900  0135  00D5               	movwf	??_PIR_Main
  4901  0136  0855               	movf	??_PIR_Main,w
  4902  0137  1683               	bsf	3,5	;RP0=1, select bank1
  4903  0138  1303               	bcf	3,6	;RP1=0, select bank1
  4904  0139  07C7               	addwf	(__PIR^(0+128)+39),f
  4905                           
  4906                           ;PIR_B1.c: 163: _PIR.Count++;
  4907  013A  3001               	movlw	1
  4908  013B  07BE               	addwf	(__PIR^(0+128)+30),f
  4909  013C  1803               	skipnc
  4910  013D  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  4911  013E  3000               	movlw	0
  4912  013F  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  4913                           
  4914                           ;PIR_B1.c: 165: TriggerValue = LightsStatus == 1 ? 3 : 3;
  4915  0140  1283               	bcf	3,5	;RP0=0, select bank0
  4916  0141  1303               	bcf	3,6	;RP1=0, select bank0
  4917  0142  0860               	movf	PIR_Main@LightsStatus,w
  4918  0143  3A01               	xorlw	1
  4919  0144  1903               	skipnz
  4920  0145  2946               	goto	l5364
  4921  0146                     l5364:	
  4922  0146  3003               	movlw	3
  4923  0147  00DD               	movwf	_PIR_Main$3182
  4924  0148  3000               	movlw	0
  4925  0149  00DE               	movwf	_PIR_Main$3182+1
  4926  014A  085D               	movf	_PIR_Main$3182,w
  4927  014B  00D5               	movwf	??_PIR_Main
  4928  014C  0855               	movf	??_PIR_Main,w
  4929  014D  00DF               	movwf	PIR_Main@TriggerValue
  4930                           
  4931                           ;PIR_B1.c: 167: if (_PIR.Count == TriggerValue) {
  4932  014E  085F               	movf	PIR_Main@TriggerValue,w
  4933  014F  00D5               	movwf	??_PIR_Main
  4934  0150  01D6               	clrf	??_PIR_Main+1
  4935  0151  1683               	bsf	3,5	;RP0=1, select bank1
  4936  0152  1303               	bcf	3,6	;RP1=0, select bank1
  4937  0153  083F               	movf	((__PIR+1)^(0+128)+30),w
  4938  0154  1283               	bcf	3,5	;RP0=0, select bank0
  4939  0155  1303               	bcf	3,6	;RP1=0, select bank0
  4940  0156  0656               	xorwf	??_PIR_Main+1,w
  4941  0157  1D03               	skipz
  4942  0158  295F               	goto	u6935
  4943  0159  1683               	bsf	3,5	;RP0=1, select bank1
  4944  015A  1303               	bcf	3,6	;RP1=0, select bank1
  4945  015B  083E               	movf	(__PIR^(0+128)+30),w
  4946  015C  1283               	bcf	3,5	;RP0=0, select bank0
  4947  015D  1303               	bcf	3,6	;RP1=0, select bank0
  4948  015E  0655               	xorwf	??_PIR_Main,w
  4949  015F                     u6935:	
  4950  015F  1D03               	skipz
  4951  0160  29B8               	goto	l5378
  4952                           
  4953                           ;PIR_B1.c: 169: _PIR.CloseTimeSeconds = 0;
  4954  0161  1683               	bsf	3,5	;RP0=1, select bank1
  4955  0162  1303               	bcf	3,6	;RP1=0, select bank1
  4956  0163  01C2               	clrf	(__PIR^(0+128)+34)
  4957                           
  4958                           ;PIR_B1.c: 170: _PIR.CloseTimeMinutes = 0;
  4959  0164  01C0               	clrf	(__PIR^(0+128)+32)
  4960  0165  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4961                           
  4962                           ;PIR_B1.c: 172: _PIR.Count = 0;
  4963  0166  01BE               	clrf	(__PIR^(0+128)+30)
  4964  0167  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4965                           
  4966                           ;PIR_B1.c: 179: if (getLights_Status(1) == 0) {
  4967  0168  3001               	movlw	1
  4968  0169  158A  232D  118A   	fcall	_getLights_Status
  4969  016C  3800               	iorlw	0
  4970  016D  1D03               	skipz
  4971  016E  2977               	goto	l5372
  4972                           
  4973                           ;PIR_B1.c: 180: setLights_SwOn(1);
  4974  016F  3001               	movlw	1
  4975  0170  158A  24C0  118A   	fcall	_setLights_SwOn
  4976                           
  4977                           ;PIR_B1.c: 181: setLights_SwOff(1);
  4978  0173  3001               	movlw	1
  4979  0174  158A  23FB  118A   	fcall	_setLights_SwOff
  4980  0177                     l5372:	
  4981                           
  4982                           ;PIR_B1.c: 183: }
  4983                           ;PIR_B1.c: 197: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - _PIR.RangeValue))) {
  4984  0177  1683               	bsf	3,5	;RP0=1, select bank1
  4985  0178  1303               	bcf	3,6	;RP1=0, select bank1
  4986  0179  0848               	movf	(__PIR^(0+128)+40),w
  4987  017A  1283               	bcf	3,5	;RP0=0, select bank0
  4988  017B  1303               	bcf	3,6	;RP1=0, select bank0
  4989  017C  00D5               	movwf	??_PIR_Main
  4990  017D  01D6               	clrf	??_PIR_Main+1
  4991  017E  09D5               	comf	??_PIR_Main,f
  4992  017F  09D6               	comf	??_PIR_Main+1,f
  4993  0180  0AD5               	incf	??_PIR_Main,f
  4994  0181  1903               	skipnz
  4995  0182  0AD6               	incf	??_PIR_Main+1,f
  4996  0183  1683               	bsf	3,5	;RP0=1, select bank1
  4997  0184  1303               	bcf	3,6	;RP1=0, select bank1
  4998  0185  0823               	movf	(__PIR^(0+128)+3),w
  4999  0186  1283               	bcf	3,5	;RP0=0, select bank0
  5000  0187  1303               	bcf	3,6	;RP1=0, select bank0
  5001  0188  0755               	addwf	??_PIR_Main,w
  5002  0189  00D7               	movwf	??_PIR_Main+2
  5003  018A  0856               	movf	??_PIR_Main+1,w
  5004  018B  1803               	skipnc
  5005  018C  0A56               	incf	??_PIR_Main+1,w
  5006  018D  00D8               	movwf	??_PIR_Main+3
  5007  018E  0858               	movf	??_PIR_Main+3,w
  5008  018F  3A80               	xorlw	128
  5009  0190  00D9               	movwf	??_PIR_Main+4
  5010  0191  3080               	movlw	128
  5011  0192  0259               	subwf	??_PIR_Main+4,w
  5012  0193  1D03               	skipz
  5013  0194  299B               	goto	u6955
  5014  0195  1683               	bsf	3,5	;RP0=1, select bank1
  5015  0196  1303               	bcf	3,6	;RP1=0, select bank1
  5016  0197  0821               	movf	(__PIR^(0+128)+1),w
  5017  0198  1283               	bcf	3,5	;RP0=0, select bank0
  5018  0199  1303               	bcf	3,6	;RP1=0, select bank0
  5019  019A  0257               	subwf	??_PIR_Main+2,w
  5020  019B                     u6955:	
  5021  019B  1C03               	skipc
  5022  019C  29A9               	goto	l5376
  5023                           
  5024                           ;PIR_B1.c: 198: setLED(1, 1);
  5025  019D  1283               	bcf	3,5	;RP0=0, select bank0
  5026  019E  1303               	bcf	3,6	;RP1=0, select bank0
  5027  019F  01CF               	clrf	setLED@command
  5028  01A0  0ACF               	incf	setLED@command,f
  5029  01A1                     L14:	
  5030  01A1  3001               	movlw	1
  5031  01A2  158A  2735  118A   	fcall	_setLED
  5032                           
  5033                           ;PIR_B1.c: 199: setLED(2, 0);
  5034  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  5035  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  5036  01A7  01CF               	clrf	setLED@command
  5037  01A8  29B4               	goto	L11
  5038  01A9                     l5376:	
  5039                           ;PIR_B1.c: 200: } else {
  5040                           
  5041                           
  5042                           ;PIR_B1.c: 201: setLED(1, 0);
  5043  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  5044  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  5045  01AB  01CF               	clrf	setLED@command
  5046  01AC  3001               	movlw	1
  5047  01AD  158A  2735  118A   	fcall	_setLED
  5048                           
  5049                           ;PIR_B1.c: 202: setLED(2, 1);
  5050  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  5051  01B1  1303               	bcf	3,6	;RP1=0, select bank0
  5052  01B2  01CF               	clrf	setLED@command
  5053  01B3  0ACF               	incf	setLED@command,f
  5054  01B4                     L11:	
  5055  01B4  3002               	movlw	2
  5056  01B5  158A  2735  118A   	fcall	_setLED
  5057  01B8                     l5378:	
  5058                           
  5059                           ;PIR_B1.c: 203: }
  5060                           ;PIR_B1.c: 245: }
  5061                           ;PIR_B1.c: 246: }
  5062                           ;PIR_B1.c: 247: }
  5063                           ;PIR_B1.c: 248: }
  5064                           ;PIR_B1.c: 249: }
  5065                           ;PIR_B1.c: 250: }
  5066                           ;PIR_B1.c: 251: if (_PIR.OK == 0) {
  5067  01B8  1683               	bsf	3,5	;RP0=1, select bank1
  5068  01B9  1303               	bcf	3,6	;RP1=0, select bank1
  5069  01BA  19A0               	btfsc	__PIR^(0+128),3
  5070  01BB  29E3               	goto	l5392
  5071                           
  5072                           ;PIR_B1.c: 252: _PIR.Count++;
  5073  01BC  3001               	movlw	1
  5074  01BD  07BE               	addwf	(__PIR^(0+128)+30),f
  5075  01BE  1803               	skipnc
  5076  01BF  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5077  01C0  3000               	movlw	0
  5078  01C1  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5079                           
  5080                           ;PIR_B1.c: 253: if (_PIR.Count == (30000 / 20)) {
  5081  01C2  3005               	movlw	5
  5082  01C3  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  5083  01C4  1D03               	skipz
  5084  01C5  29C8               	goto	u6975
  5085  01C6  30DC               	movlw	220
  5086  01C7  063E               	xorwf	(__PIR^(0+128)+30),w
  5087  01C8                     u6975:	
  5088  01C8  1D03               	skipz
  5089  01C9  0008               	return
  5090                           
  5091                           ;PIR_B1.c: 254: _PIR.Count = 0;
  5092  01CA  01BE               	clrf	(__PIR^(0+128)+30)
  5093  01CB  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5094                           
  5095                           ;PIR_B1.c: 255: _PIR.OK = 1;
  5096  01CC  15A0               	bsf	__PIR^(0+128),3
  5097                           
  5098                           ;PIR_B1.c: 257: setLED(1, 0);
  5099  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  5100  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  5101  01CF  01CF               	clrf	setLED@command
  5102  01D0  3001               	movlw	1
  5103  01D1  158A  2735  118A   	fcall	_setLED
  5104                           
  5105                           ;PIR_B1.c: 263: if (getLights_Status(1) == 1) {
  5106  01D4  3001               	movlw	1
  5107  01D5  158A  232D  118A   	fcall	_getLights_Status
  5108  01D8  3A01               	xorlw	1
  5109  01D9  1D03               	skipz
  5110  01DA  0008               	return
  5111                           
  5112                           ;PIR_B1.c: 264: setLights_SwOn(1);
  5113  01DB  3001               	movlw	1
  5114  01DC  158A  24C0  118A   	fcall	_setLights_SwOn
  5115                           
  5116                           ;PIR_B1.c: 265: setLights_SwOff(1);
  5117  01DF  3001               	movlw	1
  5118  01E0  158A  23FB         	fcall	_setLights_SwOff
  5119                           
  5120                           ;PIR_B1.c: 267: }
  5121                           ;PIR_B1.c: 280: }
  5122                           ;PIR_B1.c: 281: } else {
  5123  01E2  0008               	return
  5124  01E3                     l5392:	
  5125                           
  5126                           ;PIR_B1.c: 283: if (LightsStatus == 1) {
  5127  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  5128  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  5129  01E5  0860               	movf	PIR_Main@LightsStatus,w
  5130  01E6  3A01               	xorlw	1
  5131  01E7  1D03               	skipz
  5132  01E8  2A13               	goto	l5410
  5133                           
  5134                           ;PIR_B1.c: 284: _PIR.CloseTimeSeconds++;
  5135  01E9  3001               	movlw	1
  5136  01EA  00D5               	movwf	??_PIR_Main
  5137  01EB  0855               	movf	??_PIR_Main,w
  5138  01EC  1683               	bsf	3,5	;RP0=1, select bank1
  5139  01ED  1303               	bcf	3,6	;RP1=0, select bank1
  5140  01EE  07C2               	addwf	(__PIR^(0+128)+34),f
  5141                           
  5142                           ;PIR_B1.c: 285: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  5143  01EF  0842               	movf	(__PIR^(0+128)+34),w
  5144  01F0  3A32               	xorlw	50
  5145  01F1  1D03               	skipz
  5146  01F2  0008               	return
  5147                           
  5148                           ;PIR_B1.c: 286: _PIR.CloseTimeSeconds = 0;
  5149  01F3  01C2               	clrf	(__PIR^(0+128)+34)
  5150                           
  5151                           ;PIR_B1.c: 287: _PIR.CloseTimeMinutes++;
  5152  01F4  3001               	movlw	1
  5153  01F5  07C0               	addwf	(__PIR^(0+128)+32),f
  5154  01F6  1803               	skipnc
  5155  01F7  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  5156  01F8  3000               	movlw	0
  5157  01F9  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  5158                           
  5159                           ;PIR_B1.c: 288: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5160  01FA  0844               	movf	((__PIR+1)^(0+128)+35),w
  5161  01FB  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  5162  01FC  1D03               	skipz
  5163  01FD  2A00               	goto	u7015
  5164  01FE  0843               	movf	(__PIR^(0+128)+35),w
  5165  01FF  0640               	xorwf	(__PIR^(0+128)+32),w
  5166  0200                     u7015:	
  5167  0200  1D03               	skipz
  5168  0201  0008               	return
  5169                           
  5170                           ;PIR_B1.c: 289: _PIR.CloseTimeMinutes = 0;
  5171  0202  01C0               	clrf	(__PIR^(0+128)+32)
  5172  0203  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5173                           
  5174                           ;PIR_B1.c: 295: if (getLights_Status(1) == 1) {
  5175  0204  3001               	movlw	1
  5176  0205  158A  232D  118A   	fcall	_getLights_Status
  5177  0208  3A01               	xorlw	1
  5178  0209  1D03               	skipz
  5179  020A  0008               	return
  5180                           
  5181                           ;PIR_B1.c: 296: setLights_SwOn(1);
  5182  020B  3001               	movlw	1
  5183  020C  158A  24C0  118A   	fcall	_setLights_SwOn
  5184                           
  5185                           ;PIR_B1.c: 297: setLights_SwOff(1);
  5186  020F  3001               	movlw	1
  5187  0210  158A  23FB         	fcall	_setLights_SwOff
  5188                           
  5189                           ;PIR_B1.c: 299: }
  5190                           ;PIR_B1.c: 311: }
  5191                           ;PIR_B1.c: 312: }
  5192                           ;PIR_B1.c: 313: } else {
  5193  0212  0008               	return
  5194  0213                     l5410:	
  5195                           
  5196                           ;PIR_B1.c: 314: _PIR.CloseTimeSeconds = 0;
  5197  0213  1683               	bsf	3,5	;RP0=1, select bank1
  5198  0214  1303               	bcf	3,6	;RP1=0, select bank1
  5199  0215  01C2               	clrf	(__PIR^(0+128)+34)
  5200                           
  5201                           ;PIR_B1.c: 315: _PIR.CloseTimeMinutes = 0;
  5202  0216  01C0               	clrf	(__PIR^(0+128)+32)
  5203  0217  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5204                           
  5205                           ;PIR_B1.c: 316: }
  5206                           ;PIR_B1.c: 318: }
  5207                           ;PIR_B1.c: 319: } else {
  5208  0218  0008               	return
  5209  0219                     l935:	
  5210                           
  5211                           ;PIR_B1.c: 320: if (myMain.PowerON == 1) {
  5212  0219  1283               	bcf	3,5	;RP0=0, select bank0
  5213  021A  1303               	bcf	3,6	;RP1=0, select bank0
  5214  021B  1C25               	btfss	_myMain,0
  5215  021C  0008               	return
  5216                           
  5217                           ;PIR_B1.c: 321: _PIR.Enable = 1;
  5218  021D  1683               	bsf	3,5	;RP0=1, select bank1
  5219  021E  1303               	bcf	3,6	;RP1=0, select bank1
  5220  021F  1420               	bsf	__PIR^(0+128),0
  5221                           
  5222                           ;PIR_B1.c: 323: setLED(1, 1);
  5223  0220  1283               	bcf	3,5	;RP0=0, select bank0
  5224  0221  1303               	bcf	3,6	;RP1=0, select bank0
  5225  0222  01CF               	clrf	setLED@command
  5226  0223  0ACF               	incf	setLED@command,f
  5227  0224  3001               	movlw	1
  5228  0225  158A  2735  118A   	fcall	_setLED
  5229                           
  5230                           ;PIR_B1.c: 328: if (getLights_Status(1) == 0) {
  5231  0228  3001               	movlw	1
  5232  0229  158A  232D  118A   	fcall	_getLights_Status
  5233  022C  3800               	iorlw	0
  5234  022D  1D03               	skipz
  5235  022E  0008               	return
  5236                           
  5237                           ;PIR_B1.c: 329: setLights_SwOn(1);
  5238  022F  3001               	movlw	1
  5239  0230  158A  24C0  118A   	fcall	_setLights_SwOn
  5240                           
  5241                           ;PIR_B1.c: 330: setLights_SwOff(1);
  5242  0233  3001               	movlw	1
  5243  0234  158A  23FB         	fcall	_setLights_SwOff
  5244  0236  0008               	return
  5245  0237                     __end_of_PIR_Main:	
  5246                           
  5247                           	psect	text22
  5248  0AA2                     __ptext22:	
  5249 ;; *************** function _getCDS_Status *****************
  5250 ;; Defined at:
  5251 ;;		line 42 in file "../src/CDS_B1.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;		None
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;  status          1    4[COMMON] unsigned char 
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  1    wreg      unsigned char 
  5258 ;; Registers used:
  5259 ;;		wreg, status,2
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5265 ;;      Params:         0       0       0       0
  5266 ;;      Locals:         1       0       0       0
  5267 ;;      Temps:          0       0       0       0
  5268 ;;      Totals:         1       0       0       0
  5269 ;;Total ram usage:        1 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    2
  5272 ;; This function calls:
  5273 ;;		Nothing
  5274 ;; This function is called by:
  5275 ;;		_PIR_Main
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           
  5280                           ;psect for function _getCDS_Status
  5281  0AA2                     _getCDS_Status:	
  5282                           
  5283                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5284                           
  5285                           ;incstack = 0
  5286                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5287  0AA2  3000               	movlw	0
  5288  0AA3  1283               	bcf	3,5	;RP0=0, select bank0
  5289  0AA4  1303               	bcf	3,6	;RP1=0, select bank0
  5290  0AA5  1A2E               	btfsc	__CDS,4
  5291  0AA6  3001               	movlw	1
  5292  0AA7  00F4               	movwf	getCDS_Status@status
  5293                           
  5294                           ;CDS_B1.c: 44: return status;
  5295  0AA8  0874               	movf	getCDS_Status@status,w
  5296  0AA9  0008               	return
  5297  0AAA                     __end_of_getCDS_Status:	
  5298                           
  5299                           	psect	text23
  5300  0ACE                     __ptext23:	
  5301 ;; *************** function _PIR_Initialization *****************
  5302 ;; Defined at:
  5303 ;;		line 7 in file "../src/PIR_B1.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;		None
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;		None
  5308 ;; Return value:  Size  Location     Type
  5309 ;;		None               void
  5310 ;; Registers used:
  5311 ;;		wreg
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5317 ;;      Params:         0       0       0       0
  5318 ;;      Locals:         0       0       0       0
  5319 ;;      Temps:          1       0       0       0
  5320 ;;      Totals:         1       0       0       0
  5321 ;;Total ram usage:        1 bytes
  5322 ;; Hardware stack levels used:    1
  5323 ;; Hardware stack levels required when called:    2
  5324 ;; This function calls:
  5325 ;;		Nothing
  5326 ;; This function is called by:
  5327 ;;		_main
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           
  5332                           ;psect for function _PIR_Initialization
  5333  0ACE                     _PIR_Initialization:	
  5334                           
  5335                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5336                           
  5337                           ;incstack = 0
  5338                           ; Regs used in _PIR_Initialization: [wreg]
  5339  0ACE  3019               	movlw	25
  5340  0ACF  00F4               	movwf	??_PIR_Initialization
  5341  0AD0  0874               	movf	??_PIR_Initialization,w
  5342  0AD1  1683               	bsf	3,5	;RP0=1, select bank1
  5343  0AD2  1303               	bcf	3,6	;RP1=0, select bank1
  5344  0AD3  00C8               	movwf	(__PIR^(0+128)+40)
  5345                           
  5346                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5347  0AD4  3005               	movlw	5
  5348  0AD5  00C3               	movwf	(__PIR^(0+128)+35)
  5349  0AD6  3000               	movlw	0
  5350  0AD7  00C4               	movwf	(__PIR^(0+128)+36)
  5351  0AD8  0008               	return
  5352  0AD9                     __end_of_PIR_Initialization:	
  5353                           
  5354                           	psect	text24
  5355  0B1E                     __ptext24:	
  5356 ;; *************** function _Mcu_Initialization *****************
  5357 ;; Defined at:
  5358 ;;		line 30 in file "../src/MCU_B1.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;		None
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;		None
  5363 ;; Return value:  Size  Location     Type
  5364 ;;		None               void
  5365 ;; Registers used:
  5366 ;;		wreg, status,2, status,0, pclath, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5372 ;;      Params:         0       0       0       0
  5373 ;;      Locals:         0       0       0       0
  5374 ;;      Temps:          0       0       0       0
  5375 ;;      Totals:         0       0       0       0
  5376 ;;Total ram usage:        0 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    3
  5379 ;; This function calls:
  5380 ;;		_ADC_Set
  5381 ;;		_Fosc_Set
  5382 ;;		_IO_Set
  5383 ;;		_TMR1_Set
  5384 ;;		_WDT_Set
  5385 ;; This function is called by:
  5386 ;;		_main
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           
  5391                           ;psect for function _Mcu_Initialization
  5392  0B1E                     _Mcu_Initialization:	
  5393                           
  5394                           ;MCU_B1.c: 32: Fosc_Set();
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5398  0B1E  158A  226D  158A   	fcall	_Fosc_Set
  5399                           
  5400                           ;MCU_B1.c: 34: IO_Set();
  5401  0B21  158A  2415  158A   	fcall	_IO_Set
  5402                           
  5403                           ;MCU_B1.c: 36: ;;
  5404                           ;MCU_B1.c: 38: TMR1_Set();
  5405  0B24  158A  2302  158A   	fcall	_TMR1_Set
  5406                           
  5407                           ;MCU_B1.c: 40: ADC_Set();
  5408  0B27  158A  228B  158A   	fcall	_ADC_Set
  5409                           
  5410                           ;MCU_B1.c: 42: ;;
  5411                           ;MCU_B1.c: 44: ;;
  5412                           ;MCU_B1.c: 46: ;;
  5413                           ;MCU_B1.c: 48: ;;
  5414                           ;MCU_B1.c: 50: ;;
  5415                           ;MCU_B1.c: 52: WDT_Set();
  5416  0B2A  158A  2310         	fcall	_WDT_Set
  5417  0B2C  0008               	return
  5418  0B2D                     __end_of_Mcu_Initialization:	
  5419                           
  5420                           	psect	text25
  5421  0B10                     __ptext25:	
  5422 ;; *************** function _WDT_Set *****************
  5423 ;; Defined at:
  5424 ;;		line 1107 in file "../src/MCU_B1.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;		None
  5429 ;; Return value:  Size  Location     Type
  5430 ;;		None               void
  5431 ;; Registers used:
  5432 ;;		wreg
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5438 ;;      Params:         0       0       0       0
  5439 ;;      Locals:         0       0       0       0
  5440 ;;      Temps:          1       0       0       0
  5441 ;;      Totals:         1       0       0       0
  5442 ;;Total ram usage:        1 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    2
  5445 ;; This function calls:
  5446 ;;		Nothing
  5447 ;; This function is called by:
  5448 ;;		_Mcu_Initialization
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           
  5453                           ;psect for function _WDT_Set
  5454  0B10                     _WDT_Set:	
  5455                           
  5456                           ;MCU_B1.c: 1109: PSA = 1;
  5457                           
  5458                           ;incstack = 0
  5459                           ; Regs used in _WDT_Set: [wreg]
  5460  0B10  1683               	bsf	3,5	;RP0=1, select bank1
  5461  0B11  1303               	bcf	3,6	;RP1=0, select bank1
  5462  0B12  1581               	bsf	1,3	;volatile
  5463                           
  5464                           ;MCU_B1.c: 1110: PS0 = 1;
  5465  0B13  1401               	bsf	1,0	;volatile
  5466                           
  5467                           ;MCU_B1.c: 1111: PS1 = 1;
  5468  0B14  1481               	bsf	1,1	;volatile
  5469                           
  5470                           ;MCU_B1.c: 1112: PS2 = 1;
  5471  0B15  1501               	bsf	1,2	;volatile
  5472                           
  5473                           ;MCU_B1.c: 1116: WDT.Enable = 1;
  5474  0B16  1283               	bcf	3,5	;RP0=0, select bank0
  5475  0B17  1303               	bcf	3,6	;RP1=0, select bank0
  5476  0B18  1435               	bsf	_WDT,0
  5477                           
  5478                           ;MCU_B1.c: 1117: WDT.Timer = 10;
  5479  0B19  300A               	movlw	10
  5480  0B1A  00F4               	movwf	??_WDT_Set
  5481  0B1B  0874               	movf	??_WDT_Set,w
  5482  0B1C  00B6               	movwf	_WDT+1
  5483  0B1D  0008               	return
  5484  0B1E                     __end_of_WDT_Set:	
  5485                           
  5486                           	psect	text26
  5487  0B02                     __ptext26:	
  5488 ;; *************** function _TMR1_Set *****************
  5489 ;; Defined at:
  5490 ;;		line 226 in file "../src/MCU_B1.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;		None
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;		None
  5495 ;; Return value:  Size  Location     Type
  5496 ;;		None               void
  5497 ;; Registers used:
  5498 ;;		wreg
  5499 ;; Tracked objects:
  5500 ;;		On entry : 0/0
  5501 ;;		On exit  : 0/0
  5502 ;;		Unchanged: 0/0
  5503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5504 ;;      Params:         0       0       0       0
  5505 ;;      Locals:         0       0       0       0
  5506 ;;      Temps:          0       0       0       0
  5507 ;;      Totals:         0       0       0       0
  5508 ;;Total ram usage:        0 bytes
  5509 ;; Hardware stack levels used:    1
  5510 ;; Hardware stack levels required when called:    2
  5511 ;; This function calls:
  5512 ;;		Nothing
  5513 ;; This function is called by:
  5514 ;;		_Mcu_Initialization
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518                           
  5519                           ;psect for function _TMR1_Set
  5520  0B02                     _TMR1_Set:	
  5521                           
  5522                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5523                           
  5524                           ;incstack = 0
  5525                           ; Regs used in _TMR1_Set: [wreg]
  5526  0B02  3041               	movlw	65
  5527  0B03  1283               	bcf	3,5	;RP0=0, select bank0
  5528  0B04  1303               	bcf	3,6	;RP1=0, select bank0
  5529  0B05  0090               	movwf	16	;volatile
  5530                           
  5531                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  5532  0B06  30FA               	movlw	250
  5533  0B07  008F               	movwf	15	;volatile
  5534                           
  5535                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  5536  0B08  3038               	movlw	56
  5537  0B09  008E               	movwf	14	;volatile
  5538                           
  5539                           ;MCU_B1.c: 230: TMR1IE = 1;
  5540  0B0A  1683               	bsf	3,5	;RP0=1, select bank1
  5541  0B0B  1303               	bcf	3,6	;RP1=0, select bank1
  5542  0B0C  140C               	bsf	12,0	;volatile
  5543                           
  5544                           ;MCU_B1.c: 231: PEIE = 1;
  5545  0B0D  170B               	bsf	11,6	;volatile
  5546                           
  5547                           ;MCU_B1.c: 232: GIE = 1;
  5548  0B0E  178B               	bsf	11,7	;volatile
  5549  0B0F  0008               	return
  5550  0B10                     __end_of_TMR1_Set:	
  5551                           
  5552                           	psect	text27
  5553  0C15                     __ptext27:	
  5554 ;; *************** function _IO_Set *****************
  5555 ;; Defined at:
  5556 ;;		line 60 in file "../src/MCU_B1.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;		None
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;		None
  5561 ;; Return value:  Size  Location     Type
  5562 ;;		None               void
  5563 ;; Registers used:
  5564 ;;		wreg, status,2
  5565 ;; Tracked objects:
  5566 ;;		On entry : 0/0
  5567 ;;		On exit  : 0/0
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5570 ;;      Params:         0       0       0       0
  5571 ;;      Locals:         0       0       0       0
  5572 ;;      Temps:          0       0       0       0
  5573 ;;      Totals:         0       0       0       0
  5574 ;;Total ram usage:        0 bytes
  5575 ;; Hardware stack levels used:    1
  5576 ;; Hardware stack levels required when called:    2
  5577 ;; This function calls:
  5578 ;;		Nothing
  5579 ;; This function is called by:
  5580 ;;		_Mcu_Initialization
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584                           
  5585                           ;psect for function _IO_Set
  5586  0C15                     _IO_Set:	
  5587                           
  5588                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5589                           
  5590                           ;incstack = 0
  5591                           ; Regs used in _IO_Set: [wreg+status,2]
  5592  0C15  302F               	movlw	47
  5593  0C16  1683               	bsf	3,5	;RP0=1, select bank1
  5594  0C17  1303               	bcf	3,6	;RP1=0, select bank1
  5595  0C18  0085               	movwf	5	;volatile
  5596                           
  5597                           ;MCU_B1.c: 63: TRISB = 0b00010011;;
  5598  0C19  3013               	movlw	19
  5599  0C1A  0086               	movwf	6	;volatile
  5600                           
  5601                           ;MCU_B1.c: 64: TRISC = 0b00001100;;
  5602  0C1B  300C               	movlw	12
  5603  0C1C  0087               	movwf	7	;volatile
  5604                           
  5605                           ;MCU_B1.c: 65: ANSELA = 0b00001111;;
  5606  0C1D  300F               	movlw	15
  5607  0C1E  1683               	bsf	3,5	;RP0=1, select bank3
  5608  0C1F  1703               	bsf	3,6	;RP1=1, select bank3
  5609  0C20  0085               	movwf	5	;volatile
  5610                           
  5611                           ;MCU_B1.c: 66: ANSELB = 0b00010010;;
  5612  0C21  3012               	movlw	18
  5613  0C22  0086               	movwf	6	;volatile
  5614                           
  5615                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5616  0C23  30AF               	movlw	175
  5617  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  5618  0C25  1303               	bcf	3,6	;RP1=0, select bank0
  5619  0C26  0085               	movwf	5	;volatile
  5620                           
  5621                           ;MCU_B1.c: 68: PORTB = 0b00010011;;
  5622  0C27  3013               	movlw	19
  5623  0C28  0086               	movwf	6	;volatile
  5624                           
  5625                           ;MCU_B1.c: 69: PORTC = 0b00001100;;
  5626  0C29  300C               	movlw	12
  5627  0C2A  0087               	movwf	7	;volatile
  5628                           
  5629                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  5630  0C2B  1683               	bsf	3,5	;RP0=1, select bank1
  5631  0C2C  1303               	bcf	3,6	;RP1=0, select bank1
  5632  0C2D  0195               	clrf	21	;volatile
  5633  0C2E  0008               	return
  5634  0C2F                     __end_of_IO_Set:	
  5635                           
  5636                           	psect	text28
  5637  0A6D                     __ptext28:	
  5638 ;; *************** function _Fosc_Set *****************
  5639 ;; Defined at:
  5640 ;;		line 56 in file "../src/MCU_B1.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;		None
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;		None               void
  5647 ;; Registers used:
  5648 ;;		wreg
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5654 ;;      Params:         0       0       0       0
  5655 ;;      Locals:         0       0       0       0
  5656 ;;      Temps:          0       0       0       0
  5657 ;;      Totals:         0       0       0       0
  5658 ;;Total ram usage:        0 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    2
  5661 ;; This function calls:
  5662 ;;		Nothing
  5663 ;; This function is called by:
  5664 ;;		_Mcu_Initialization
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function _Fosc_Set
  5670  0A6D                     _Fosc_Set:	
  5671                           
  5672                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5673                           
  5674                           ;incstack = 0
  5675                           ; Regs used in _Fosc_Set: [wreg]
  5676  0A6D  303C               	movlw	60
  5677  0A6E  1683               	bsf	3,5	;RP0=1, select bank1
  5678  0A6F  1303               	bcf	3,6	;RP1=0, select bank1
  5679  0A70  0090               	movwf	16	;volatile
  5680  0A71  0008               	return
  5681  0A72                     __end_of_Fosc_Set:	
  5682                           
  5683                           	psect	text29
  5684  0A8B                     __ptext29:	
  5685 ;; *************** function _ADC_Set *****************
  5686 ;; Defined at:
  5687 ;;		line 429 in file "../src/MCU_B1.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;		None
  5690 ;; Auto vars:     Size  Location     Type
  5691 ;;		None
  5692 ;; Return value:  Size  Location     Type
  5693 ;;		None               void
  5694 ;; Registers used:
  5695 ;;		wreg
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5701 ;;      Params:         0       0       0       0
  5702 ;;      Locals:         0       0       0       0
  5703 ;;      Temps:          0       0       0       0
  5704 ;;      Totals:         0       0       0       0
  5705 ;;Total ram usage:        0 bytes
  5706 ;; Hardware stack levels used:    1
  5707 ;; Hardware stack levels required when called:    2
  5708 ;; This function calls:
  5709 ;;		Nothing
  5710 ;; This function is called by:
  5711 ;;		_Mcu_Initialization
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           
  5716                           ;psect for function _ADC_Set
  5717  0A8B                     _ADC_Set:	
  5718                           
  5719                           ;MCU_B1.c: 430: ADCON1 = 0x73;
  5720                           
  5721                           ;incstack = 0
  5722                           ; Regs used in _ADC_Set: [wreg]
  5723  0A8B  3073               	movlw	115
  5724  0A8C  1683               	bsf	3,5	;RP0=1, select bank1
  5725  0A8D  1303               	bcf	3,6	;RP1=0, select bank1
  5726  0A8E  009F               	movwf	31	;volatile
  5727                           
  5728                           ;MCU_B1.c: 431: FVRCON = 0xc1;
  5729  0A8F  30C1               	movlw	193
  5730  0A90  009D               	movwf	29	;volatile
  5731  0A91  0008               	return
  5732  0A92                     __end_of_ADC_Set:	
  5733                           
  5734                           	psect	text30
  5735  0237                     __ptext30:	
  5736 ;; *************** function _Load_Main *****************
  5737 ;; Defined at:
  5738 ;;		line 40 in file "../src/OverLoad_B1.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;		None
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;  i               2   15[BANK0 ] int 
  5743 ;;  LightsCount     1   14[BANK0 ] unsigned char 
  5744 ;;  Load_RunStat    1   13[BANK0 ] unsigned char 
  5745 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  5746 ;;  error           1    9[BANK0 ] unsigned char 
  5747 ;; Return value:  Size  Location     Type
  5748 ;;		None               void
  5749 ;; Registers used:
  5750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5756 ;;      Params:         0       0       0       0
  5757 ;;      Locals:         0       8       0       0
  5758 ;;      Temps:          0       2       0       0
  5759 ;;      Totals:         0      10       0       0
  5760 ;;Total ram usage:       10 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    3
  5763 ;; This function calls:
  5764 ;;		___lwdiv
  5765 ;;		___wmul
  5766 ;;		_getLight_LoadGO
  5767 ;;		_getLight_Load_Status
  5768 ;;		_getMain_All_Error_Status
  5769 ;;		_getMain_All_LightsStatus
  5770 ;;		_getMain_Lights_Count
  5771 ;;		_setLoad_AH_AL_Restore
  5772 ;; This function is called by:
  5773 ;;		_main
  5774 ;; This function uses a non-reentrant model
  5775 ;;
  5776                           
  5777                           
  5778                           ;psect for function _Load_Main
  5779  0237                     _Load_Main:	
  5780                           
  5781                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
  5782                           
  5783                           ;incstack = 0
  5784                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5785  0237  3000               	movlw	0
  5786  0238  158A  256E  118A   	fcall	_getMain_All_Error_Status
  5787  023B  1283               	bcf	3,5	;RP0=0, select bank0
  5788  023C  1303               	bcf	3,6	;RP1=0, select bank0
  5789  023D  00D6               	movwf	??_Load_Main
  5790  023E  0856               	movf	??_Load_Main,w
  5791  023F  00D8               	movwf	Load_Main@error
  5792                           
  5793                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
  5794  0240  01DC               	clrf	Load_Main@Load_RunStatus
  5795  0241  01DB               	clrf	Load_Main@ErrorCountValue
  5796  0242  01DD               	clrf	Load_Main@LightsCount
  5797                           
  5798                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  5799  0243  1683               	bsf	3,5	;RP0=1, select bank1
  5800  0244  1303               	bcf	3,6	;RP1=0, select bank1
  5801  0245  1C4A               	btfss	_Load^(0+128),0
  5802  0246  2C19               	goto	l718
  5803                           
  5804                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
  5805  0247  158A  22BB  118A   	fcall	_getMain_All_LightsStatus
  5806  024A  3800               	iorlw	0
  5807  024B  1D03               	skipz
  5808  024C  2A50               	goto	l5116
  5809                           
  5810                           ;OverLoad_B1.c: 46: Load.GO = 0;
  5811  024D  1683               	bsf	3,5	;RP0=1, select bank1
  5812  024E  1303               	bcf	3,6	;RP1=0, select bank1
  5813  024F  2A6F               	goto	l5132
  5814  0250                     l5116:	
  5815                           ;OverLoad_B1.c: 47: } else {
  5816                           
  5817                           
  5818                           ;OverLoad_B1.c: 70: if (error == 0) {
  5819  0250  1283               	bcf	3,5	;RP0=0, select bank0
  5820  0251  1303               	bcf	3,6	;RP1=0, select bank0
  5821  0252  08D8               	movf	Load_Main@error,f
  5822  0253  1D03               	skipz
  5823  0254  2A6C               	goto	l721
  5824                           
  5825                           ;OverLoad_B1.c: 71: Load.GO = 1;
  5826  0255  1683               	bsf	3,5	;RP0=1, select bank1
  5827  0256  1303               	bcf	3,6	;RP1=0, select bank1
  5828  0257  14CA               	bsf	_Load^(0+128),1
  5829                           
  5830                           ;OverLoad_B1.c: 73: if (getLight_LoadGO() == 1) {
  5831  0258  158A  2272  118A   	fcall	_getLight_LoadGO
  5832  025B  3A01               	xorlw	1
  5833  025C  1D03               	skipz
  5834  025D  2A66               	goto	l722
  5835                           
  5836                           ;OverLoad_B1.c: 74: if (Load.Run == 0 && Load.OK == 0) {
  5837  025E  1683               	bsf	3,5	;RP0=1, select bank1
  5838  025F  1303               	bcf	3,6	;RP1=0, select bank1
  5839  0260  1DCA               	btfss	_Load^(0+128),3
  5840  0261  1BCA               	btfsc	_Load^(0+128),7
  5841  0262  2A70               	goto	l720
  5842                           
  5843                           ;OverLoad_B1.c: 75: Load.Run = 1;
  5844  0263  15CA               	bsf	_Load^(0+128),3
  5845                           
  5846                           ;OverLoad_B1.c: 76: Load.Count = 0;
  5847  0264  01E3               	clrf	(_Load^(0+128)+25)
  5848                           
  5849                           ;OverLoad_B1.c: 77: }
  5850                           ;OverLoad_B1.c: 78: } else {
  5851  0265  2A70               	goto	l720
  5852  0266                     l722:	
  5853                           
  5854                           ;OverLoad_B1.c: 79: if (Load.OK == 1) {
  5855  0266  1683               	bsf	3,5	;RP0=1, select bank1
  5856  0267  1303               	bcf	3,6	;RP1=0, select bank1
  5857  0268  1FCA               	btfss	_Load^(0+128),7
  5858  0269  2A70               	goto	l720
  5859                           
  5860                           ;OverLoad_B1.c: 80: Load.OK = 0;
  5861  026A  13CA               	bcf	_Load^(0+128),7
  5862                           
  5863                           ;OverLoad_B1.c: 81: }
  5864                           ;OverLoad_B1.c: 82: }
  5865                           ;OverLoad_B1.c: 83: } else {
  5866  026B  2A70               	goto	l720
  5867  026C                     l721:	
  5868                           
  5869                           ;OverLoad_B1.c: 84: if (Load.GO == 1) {
  5870  026C  1683               	bsf	3,5	;RP0=1, select bank1
  5871  026D  1303               	bcf	3,6	;RP1=0, select bank1
  5872  026E  18CA               	btfsc	_Load^(0+128),1
  5873  026F                     l5132:	
  5874                           
  5875                           ;OverLoad_B1.c: 85: Load.GO = 0;
  5876  026F  10CA               	bcf	_Load^(0+128),1
  5877  0270                     l720:	
  5878                           
  5879                           ;OverLoad_B1.c: 86: }
  5880                           ;OverLoad_B1.c: 87: }
  5881                           ;OverLoad_B1.c: 89: }
  5882                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
  5883  0270  1CCA               	btfss	_Load^(0+128),1
  5884  0271  2BF2               	goto	l728
  5885                           
  5886                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
  5887  0272  154A               	bsf	_Load^(0+128),2
  5888                           
  5889                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
  5890  0273  1E4A               	btfss	_Load^(0+128),4
  5891  0274  2BF0               	goto	l729
  5892                           
  5893                           ;OverLoad_B1.c: 96: Load.Time++;
  5894  0275  3001               	movlw	1
  5895  0276  07CB               	addwf	(_Load^(0+128)+1),f
  5896  0277  1803               	skipnc
  5897  0278  0ACC               	incf	((_Load+1)^(0+128)+1),f
  5898  0279  3000               	movlw	0
  5899  027A  07CC               	addwf	((_Load+1)^(0+128)+1),f
  5900                           
  5901                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
  5902  027B  3000               	movlw	0
  5903  027C  024C               	subwf	((_Load+1)^(0+128)+1),w
  5904  027D  3002               	movlw	2
  5905  027E  1903               	skipnz
  5906  027F  024B               	subwf	(_Load^(0+128)+1),w
  5907  0280  1C03               	skipc
  5908  0281  0008               	return
  5909                           
  5910                           ;OverLoad_B1.c: 98: Load.Time = 0;
  5911  0282  01CB               	clrf	(_Load^(0+128)+1)
  5912  0283  01CC               	clrf	((_Load+1)^(0+128)+1)
  5913                           
  5914                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
  5915  0284  124A               	bcf	_Load^(0+128),4
  5916                           
  5917                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
  5918  0285  3001               	movlw	1
  5919  0286  1283               	bcf	3,5	;RP0=0, select bank0
  5920  0287  1303               	bcf	3,6	;RP1=0, select bank0
  5921  0288  00DE               	movwf	Load_Main@i
  5922  0289  3000               	movlw	0
  5923  028A  00DF               	movwf	Load_Main@i+1
  5924  028B  085F               	movf	Load_Main@i+1,w
  5925  028C  3A80               	xorlw	128
  5926  028D  00FF               	movwf	127
  5927  028E  3080               	movlw	128
  5928  028F  027F               	subwf	127,w
  5929  0290  1D03               	skipz
  5930  0291  2A94               	goto	u6455
  5931  0292  3004               	movlw	4
  5932  0293  025E               	subwf	Load_Main@i,w
  5933  0294                     u6455:	
  5934  0294  1803               	btfsc	3,0
  5935  0295  2AD2               	goto	l5154
  5936  0296                     l5148:	
  5937                           
  5938                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
  5939  0296  1283               	bcf	3,5	;RP0=0, select bank0
  5940  0297  1303               	bcf	3,6	;RP1=0, select bank0
  5941  0298  085E               	movf	Load_Main@i,w
  5942  0299  3ED4               	addlw	(_Load+10)& (0+255)
  5943  029A  0084               	movwf	4
  5944  029B  1383               	bcf	3,7	;select IRP bank1
  5945  029C  0800               	movf	0,w
  5946  029D  00D6               	movwf	??_Load_Main
  5947  029E  01D7               	clrf	??_Load_Main+1
  5948  029F  0856               	movf	??_Load_Main,w
  5949  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  5950  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  5951  02A2  07CF               	addwf	(_Load^(0+128)+5),f
  5952  02A3  1803               	skipnc
  5953  02A4  0AD0               	incf	((_Load+1)^(0+128)+5),f
  5954  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  5955  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  5956  02A7  0857               	movf	??_Load_Main+1,w
  5957  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  5958  02A9  1303               	bcf	3,6	;RP1=0, select bank1
  5959  02AA  07D0               	addwf	((_Load+1)^(0+128)+5),f
  5960                           
  5961                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
  5962  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  5963  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  5964  02AD  085E               	movf	Load_Main@i,w
  5965  02AE  3ED9               	addlw	(_Load+15)& (0+255)
  5966  02AF  0084               	movwf	4
  5967  02B0  0800               	movf	0,w
  5968  02B1  00D6               	movwf	??_Load_Main
  5969  02B2  01D7               	clrf	??_Load_Main+1
  5970  02B3  0856               	movf	??_Load_Main,w
  5971  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  5972  02B5  1303               	bcf	3,6	;RP1=0, select bank1
  5973  02B6  07D1               	addwf	(_Load^(0+128)+7),f
  5974  02B7  1803               	skipnc
  5975  02B8  0AD2               	incf	((_Load+1)^(0+128)+7),f
  5976  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  5977  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  5978  02BB  0857               	movf	??_Load_Main+1,w
  5979  02BC  1683               	bsf	3,5	;RP0=1, select bank1
  5980  02BD  1303               	bcf	3,6	;RP1=0, select bank1
  5981  02BE  07D2               	addwf	((_Load+1)^(0+128)+7),f
  5982  02BF  3001               	movlw	1
  5983  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  5984  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  5985  02C2  07DE               	addwf	Load_Main@i,f
  5986  02C3  1803               	skipnc
  5987  02C4  0ADF               	incf	Load_Main@i+1,f
  5988  02C5  3000               	movlw	0
  5989  02C6  07DF               	addwf	Load_Main@i+1,f
  5990  02C7  085F               	movf	Load_Main@i+1,w
  5991  02C8  3A80               	xorlw	128
  5992  02C9  00FF               	movwf	127
  5993  02CA  3080               	movlw	128
  5994  02CB  027F               	subwf	127,w
  5995  02CC  1D03               	skipz
  5996  02CD  2AD0               	goto	u6465
  5997  02CE  3004               	movlw	4
  5998  02CF  025E               	subwf	Load_Main@i,w
  5999  02D0                     u6465:	
  6000  02D0  1C03               	skipc
  6001  02D1  2A96               	goto	l5148
  6002  02D2                     l5154:	
  6003                           
  6004                           ;OverLoad_B1.c: 104: }
  6005                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
  6006  02D2  3003               	movlw	3
  6007  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  6008  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  6009  02D5  00CF               	movwf	___lwdiv@divisor
  6010  02D6  3000               	movlw	0
  6011  02D7  00D0               	movwf	___lwdiv@divisor+1
  6012  02D8  1683               	bsf	3,5	;RP0=1, select bank1
  6013  02D9  1303               	bcf	3,6	;RP1=0, select bank1
  6014  02DA  0850               	movf	((_Load+1)^(0+128)+5),w
  6015  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  6016  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  6017  02DD  01D2               	clrf	___lwdiv@dividend+1
  6018  02DE  07D2               	addwf	___lwdiv@dividend+1,f
  6019  02DF  1683               	bsf	3,5	;RP0=1, select bank1
  6020  02E0  1303               	bcf	3,6	;RP1=0, select bank1
  6021  02E1  084F               	movf	(_Load^(0+128)+5),w
  6022  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  6023  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  6024  02E4  01D1               	clrf	___lwdiv@dividend
  6025  02E5  07D1               	addwf	___lwdiv@dividend,f
  6026  02E6  158A  25AC  118A   	fcall	___lwdiv
  6027  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  6028  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  6029  02EB  0850               	movf	?___lwdiv+1,w
  6030  02EC  1683               	bsf	3,5	;RP0=1, select bank1
  6031  02ED  1303               	bcf	3,6	;RP1=0, select bank1
  6032  02EE  01D0               	clrf	((_Load+1)^(0+128)+5)
  6033  02EF  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6034  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  6035  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  6036  02F2  084F               	movf	?___lwdiv,w
  6037  02F3  1683               	bsf	3,5	;RP0=1, select bank1
  6038  02F4  1303               	bcf	3,6	;RP1=0, select bank1
  6039  02F5  01CF               	clrf	(_Load^(0+128)+5)
  6040  02F6  07CF               	addwf	(_Load^(0+128)+5),f
  6041                           
  6042                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
  6043  02F7  3003               	movlw	3
  6044  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  6045  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  6046  02FA  00CF               	movwf	___lwdiv@divisor
  6047  02FB  3000               	movlw	0
  6048  02FC  00D0               	movwf	___lwdiv@divisor+1
  6049  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  6050  02FE  1303               	bcf	3,6	;RP1=0, select bank1
  6051  02FF  0852               	movf	((_Load+1)^(0+128)+7),w
  6052  0300  1283               	bcf	3,5	;RP0=0, select bank0
  6053  0301  1303               	bcf	3,6	;RP1=0, select bank0
  6054  0302  01D2               	clrf	___lwdiv@dividend+1
  6055  0303  07D2               	addwf	___lwdiv@dividend+1,f
  6056  0304  1683               	bsf	3,5	;RP0=1, select bank1
  6057  0305  1303               	bcf	3,6	;RP1=0, select bank1
  6058  0306  0851               	movf	(_Load^(0+128)+7),w
  6059  0307  1283               	bcf	3,5	;RP0=0, select bank0
  6060  0308  1303               	bcf	3,6	;RP1=0, select bank0
  6061  0309  01D1               	clrf	___lwdiv@dividend
  6062  030A  07D1               	addwf	___lwdiv@dividend,f
  6063  030B  158A  25AC  118A   	fcall	___lwdiv
  6064  030E  1283               	bcf	3,5	;RP0=0, select bank0
  6065  030F  1303               	bcf	3,6	;RP1=0, select bank0
  6066  0310  0850               	movf	?___lwdiv+1,w
  6067  0311  1683               	bsf	3,5	;RP0=1, select bank1
  6068  0312  1303               	bcf	3,6	;RP1=0, select bank1
  6069  0313  01D2               	clrf	((_Load+1)^(0+128)+7)
  6070  0314  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6071  0315  1283               	bcf	3,5	;RP0=0, select bank0
  6072  0316  1303               	bcf	3,6	;RP1=0, select bank0
  6073  0317  084F               	movf	?___lwdiv,w
  6074  0318  1683               	bsf	3,5	;RP0=1, select bank1
  6075  0319  1303               	bcf	3,6	;RP1=0, select bank1
  6076  031A  01D1               	clrf	(_Load^(0+128)+7)
  6077  031B  07D1               	addwf	(_Load^(0+128)+7),f
  6078                           
  6079                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
  6080  031C  158A  239D  118A   	fcall	_setLoad_AH_AL_Restore
  6081                           
  6082                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
  6083  031F  1683               	bsf	3,5	;RP0=1, select bank1
  6084  0320  1303               	bcf	3,6	;RP1=0, select bank1
  6085  0321  0852               	movf	((_Load+1)^(0+128)+7),w
  6086  0322  0250               	subwf	((_Load+1)^(0+128)+5),w
  6087  0323  1D03               	skipz
  6088  0324  2B27               	goto	u6475
  6089  0325  0851               	movf	(_Load^(0+128)+7),w
  6090  0326  024F               	subwf	(_Load^(0+128)+5),w
  6091  0327                     u6475:	
  6092  0327  1C03               	skipc
  6093  0328  0008               	return
  6094                           
  6095                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
  6096  0329  0351               	decf	(_Load^(0+128)+7),w
  6097  032A  3AFF               	xorlw	255
  6098  032B  074F               	addwf	(_Load^(0+128)+5),w
  6099  032C  1283               	bcf	3,5	;RP0=0, select bank0
  6100  032D  1303               	bcf	3,6	;RP1=0, select bank0
  6101  032E  00D6               	movwf	??_Load_Main
  6102  032F  0856               	movf	??_Load_Main,w
  6103  0330  1683               	bsf	3,5	;RP0=1, select bank1
  6104  0331  1303               	bcf	3,6	;RP1=0, select bank1
  6105  0332  00DE               	movwf	(_Load^(0+128)+20)
  6106                           
  6107                           ;OverLoad_B1.c: 112: Load.ADH = 0;
  6108  0333  01CF               	clrf	(_Load^(0+128)+5)
  6109  0334  01D0               	clrf	((_Load+1)^(0+128)+5)
  6110                           
  6111                           ;OverLoad_B1.c: 113: Load.ADL = 0;
  6112  0335  01D1               	clrf	(_Load^(0+128)+7)
  6113  0336  01D2               	clrf	((_Load+1)^(0+128)+7)
  6114                           
  6115                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
  6116  0337  1DCA               	btfss	_Load^(0+128),3
  6117  0338  2B9C               	goto	l734
  6118                           
  6119                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
  6120  0339  3002               	movlw	2
  6121  033A  0263               	subwf	(_Load^(0+128)+25),w
  6122  033B  1803               	skipnc
  6123  033C  2B9C               	goto	l734
  6124                           
  6125                           ;OverLoad_B1.c: 117: Load.Count++;
  6126  033D  3001               	movlw	1
  6127  033E  1283               	bcf	3,5	;RP0=0, select bank0
  6128  033F  1303               	bcf	3,6	;RP1=0, select bank0
  6129  0340  00D6               	movwf	??_Load_Main
  6130  0341  0856               	movf	??_Load_Main,w
  6131  0342  1683               	bsf	3,5	;RP0=1, select bank1
  6132  0343  1303               	bcf	3,6	;RP1=0, select bank1
  6133  0344  07E3               	addwf	(_Load^(0+128)+25),f
  6134                           
  6135                           ;OverLoad_B1.c: 122: Load_RunStatus = getLight_Load_Status();
  6136  0345  158A  2278  118A   	fcall	_getLight_Load_Status
  6137  0348  1283               	bcf	3,5	;RP0=0, select bank0
  6138  0349  1303               	bcf	3,6	;RP1=0, select bank0
  6139  034A  00D6               	movwf	??_Load_Main
  6140  034B  0856               	movf	??_Load_Main,w
  6141  034C  00DC               	movwf	Load_Main@Load_RunStatus
  6142                           
  6143                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
  6144  034D  158A  22D9  118A   	fcall	_getMain_Lights_Count
  6145  0350  1283               	bcf	3,5	;RP0=0, select bank0
  6146  0351  1303               	bcf	3,6	;RP1=0, select bank0
  6147  0352  00D6               	movwf	??_Load_Main
  6148  0353  0856               	movf	??_Load_Main,w
  6149  0354  00DD               	movwf	Load_Main@LightsCount
  6150                           
  6151                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
  6152  0355  1683               	bsf	3,5	;RP0=1, select bank1
  6153  0356  1303               	bcf	3,6	;RP1=0, select bank1
  6154  0357  0863               	movf	(_Load^(0+128)+25),w
  6155  0358  3A01               	xorlw	1
  6156  0359  1D03               	skipz
  6157  035A  2B5D               	goto	l5180
  6158                           
  6159                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(20*5);
  6160  035B  3064               	movlw	100
  6161  035C  2B6A               	goto	L15
  6162  035D                     l5180:	
  6163                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
  6164                           
  6165  035D  0863               	movf	(_Load^(0+128)+25),w
  6166  035E  3A02               	xorlw	2
  6167  035F  1D03               	skipz
  6168  0360  2B9C               	goto	l734
  6169                           
  6170                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
  6171  0361  1283               	bcf	3,5	;RP0=0, select bank0
  6172  0362  1303               	bcf	3,6	;RP1=0, select bank0
  6173  0363  085D               	movf	Load_Main@LightsCount,w
  6174  0364  3A01               	xorlw	1
  6175  0365  1D03               	skipz
  6176  0366  2B6D               	goto	l5186
  6177                           
  6178                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1*5);
  6179  0367  3005               	movlw	5
  6180  0368  1683               	bsf	3,5	;RP0=1, select bank1
  6181  0369  1303               	bcf	3,6	;RP1=0, select bank1
  6182  036A                     L15:	
  6183  036A  00E1               	movwf	(_Load^(0+128)+23)
  6184  036B  3000               	movlw	0
  6185  036C  2B9B               	goto	L16
  6186  036D                     l5186:	
  6187                           ;OverLoad_B1.c: 132: } else {
  6188                           
  6189                           
  6190                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
  6191  036D  1283               	bcf	3,5	;RP0=0, select bank0
  6192  036E  08DC               	movf	Load_Main@Load_RunStatus,f
  6193  036F  1D03               	skipz
  6194  0370  2B8E               	goto	l5190
  6195                           
  6196                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1*5) * LightsCount;
  6197  0371  085D               	movf	Load_Main@LightsCount,w
  6198  0372  00D6               	movwf	??_Load_Main
  6199  0373  01D7               	clrf	??_Load_Main+1
  6200  0374  0856               	movf	??_Load_Main,w
  6201  0375  00CF               	movwf	___wmul@multiplier
  6202  0376  0857               	movf	??_Load_Main+1,w
  6203  0377  00D0               	movwf	___wmul@multiplier+1
  6204  0378  3005               	movlw	5
  6205  0379  00D1               	movwf	___wmul@multiplicand
  6206  037A  3000               	movlw	0
  6207  037B  00D2               	movwf	___wmul@multiplicand+1
  6208  037C  158A  24E5  118A   	fcall	___wmul
  6209  037F  1283               	bcf	3,5	;RP0=0, select bank0
  6210  0380  1303               	bcf	3,6	;RP1=0, select bank0
  6211  0381  0850               	movf	?___wmul+1,w
  6212  0382  1683               	bsf	3,5	;RP0=1, select bank1
  6213  0383  1303               	bcf	3,6	;RP1=0, select bank1
  6214  0384  01E2               	clrf	((_Load+1)^(0+128)+23)
  6215  0385  07E2               	addwf	((_Load+1)^(0+128)+23),f
  6216  0386  1283               	bcf	3,5	;RP0=0, select bank0
  6217  0387  1303               	bcf	3,6	;RP1=0, select bank0
  6218  0388  084F               	movf	?___wmul,w
  6219  0389  1683               	bsf	3,5	;RP0=1, select bank1
  6220  038A  1303               	bcf	3,6	;RP1=0, select bank1
  6221  038B  01E1               	clrf	(_Load^(0+128)+23)
  6222  038C  07E1               	addwf	(_Load^(0+128)+23),f
  6223                           
  6224                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
  6225  038D  2B9C               	goto	l734
  6226  038E                     l5190:	
  6227  038E  1283               	bcf	3,5	;RP0=0, select bank0
  6228  038F  085C               	movf	Load_Main@Load_RunStatus,w
  6229  0390  3A01               	xorlw	1
  6230  0391  1D03               	skipz
  6231  0392  2B9C               	goto	l734
  6232                           
  6233                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1*5) + Load.TotalLoad;
  6234  0393  1683               	bsf	3,5	;RP0=1, select bank1
  6235  0394  1303               	bcf	3,6	;RP1=0, select bank1
  6236  0395  0853               	movf	(_Load^(0+128)+9),w
  6237  0396  3E05               	addlw	5
  6238  0397  00E1               	movwf	(_Load^(0+128)+23)
  6239  0398  3000               	movlw	0
  6240  0399  1803               	skipnc
  6241  039A  3001               	movlw	1
  6242  039B                     L16:	
  6243  039B  00E2               	movwf	(_Load^(0+128)+24)
  6244  039C                     l734:	
  6245                           
  6246                           ;OverLoad_B1.c: 137: }
  6247                           ;OverLoad_B1.c: 138: }
  6248                           ;OverLoad_B1.c: 139: }
  6249                           ;OverLoad_B1.c: 140: }
  6250                           ;OverLoad_B1.c: 141: }
  6251                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
  6252  039C  1683               	bsf	3,5	;RP0=1, select bank1
  6253  039D  1303               	bcf	3,6	;RP1=0, select bank1
  6254  039E  085E               	movf	(_Load^(0+128)+20),w
  6255  039F  1283               	bcf	3,5	;RP0=0, select bank0
  6256  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  6257  03A1  00D6               	movwf	??_Load_Main
  6258  03A2  01D7               	clrf	??_Load_Main+1
  6259  03A3  1683               	bsf	3,5	;RP0=1, select bank1
  6260  03A4  1303               	bcf	3,6	;RP1=0, select bank1
  6261  03A5  0862               	movf	((_Load+1)^(0+128)+23),w
  6262  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  6263  03A7  1303               	bcf	3,6	;RP1=0, select bank0
  6264  03A8  0257               	subwf	??_Load_Main+1,w
  6265  03A9  1D03               	skipz
  6266  03AA  2BB1               	goto	u6555
  6267  03AB  1683               	bsf	3,5	;RP0=1, select bank1
  6268  03AC  1303               	bcf	3,6	;RP1=0, select bank1
  6269  03AD  0861               	movf	(_Load^(0+128)+23),w
  6270  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  6271  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  6272  03B0  0256               	subwf	??_Load_Main,w
  6273  03B1                     u6555:	
  6274  03B1  1C03               	skipc
  6275  03B2  2BD2               	goto	l5208
  6276                           
  6277                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6278  03B3  085D               	movf	Load_Main@LightsCount,w
  6279  03B4  3A01               	xorlw	1
  6280  03B5  1903               	skipnz
  6281  03B6  2BB9               	goto	l5198
  6282  03B7  3003               	movlw	3
  6283  03B8  2BBA               	goto	L17
  6284  03B9                     l5198:	
  6285  03B9  3002               	movlw	2
  6286  03BA                     L17:	
  6287  03BA  00D9               	movwf	_Load_Main$2655
  6288  03BB  3000               	movlw	0
  6289  03BC  00DA               	movwf	_Load_Main$2655+1
  6290  03BD  0859               	movf	_Load_Main$2655,w
  6291  03BE  00D6               	movwf	??_Load_Main
  6292  03BF  0856               	movf	??_Load_Main,w
  6293  03C0  00DB               	movwf	Load_Main@ErrorCountValue
  6294                           
  6295                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
  6296  03C1  3001               	movlw	1
  6297  03C2  00D6               	movwf	??_Load_Main
  6298  03C3  0856               	movf	??_Load_Main,w
  6299  03C4  1683               	bsf	3,5	;RP0=1, select bank1
  6300  03C5  1303               	bcf	3,6	;RP1=0, select bank1
  6301  03C6  07E4               	addwf	(_Load^(0+128)+26),f
  6302                           
  6303                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
  6304  03C7  0864               	movf	(_Load^(0+128)+26),w
  6305  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  6306  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  6307  03CA  025B               	subwf	Load_Main@ErrorCountValue,w
  6308  03CB  1803               	skipnc
  6309  03CC  0008               	return
  6310                           
  6311                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
  6312  03CD  1683               	bsf	3,5	;RP0=1, select bank1
  6313  03CE  1303               	bcf	3,6	;RP1=0, select bank1
  6314  03CF  01E4               	clrf	(_Load^(0+128)+26)
  6315                           
  6316                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
  6317  03D0  16CA               	bsf	_Load^(0+128),5
  6318                           
  6319                           ;OverLoad_B1.c: 170: }
  6320                           ;OverLoad_B1.c: 171: } else {
  6321  03D1  0008               	return
  6322  03D2                     l5208:	
  6323                           
  6324                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
  6325  03D2  1683               	bsf	3,5	;RP0=1, select bank1
  6326  03D3  1303               	bcf	3,6	;RP1=0, select bank1
  6327  03D4  01E4               	clrf	(_Load^(0+128)+26)
  6328                           
  6329                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
  6330  03D5  1DCA               	btfss	_Load^(0+128),3
  6331  03D6  0008               	return
  6332                           
  6333                           ;OverLoad_B1.c: 174: Load.SafeCount++;
  6334  03D7  3001               	movlw	1
  6335  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  6336  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  6337  03DA  00D6               	movwf	??_Load_Main
  6338  03DB  0856               	movf	??_Load_Main,w
  6339  03DC  1683               	bsf	3,5	;RP0=1, select bank1
  6340  03DD  1303               	bcf	3,6	;RP1=0, select bank1
  6341  03DE  07E5               	addwf	(_Load^(0+128)+27),f
  6342                           
  6343                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
  6344  03DF  3003               	movlw	3
  6345  03E0  0265               	subwf	(_Load^(0+128)+27),w
  6346  03E1  1C03               	skipc
  6347  03E2  0008               	return
  6348                           
  6349                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
  6350  03E3  01E5               	clrf	(_Load^(0+128)+27)
  6351                           
  6352                           ;OverLoad_B1.c: 177: Load.OK = 1;
  6353  03E4  17CA               	bsf	_Load^(0+128),7
  6354                           
  6355                           ;OverLoad_B1.c: 178: Load.Run = 0;
  6356  03E5  11CA               	bcf	_Load^(0+128),3
  6357                           
  6358                           ;OverLoad_B1.c: 179: Load.Count = 0;
  6359  03E6  01E3               	clrf	(_Load^(0+128)+25)
  6360                           
  6361                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
  6362  03E7  085E               	movf	(_Load^(0+128)+20),w
  6363  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  6364  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  6365  03EA  00D6               	movwf	??_Load_Main
  6366  03EB  0856               	movf	??_Load_Main,w
  6367  03EC  1683               	bsf	3,5	;RP0=1, select bank1
  6368  03ED  1303               	bcf	3,6	;RP1=0, select bank1
  6369  03EE  00D3               	movwf	(_Load^(0+128)+9)
  6370                           
  6371                           ;OverLoad_B1.c: 184: }
  6372                           ;OverLoad_B1.c: 185: }
  6373                           ;OverLoad_B1.c: 208: }
  6374                           ;OverLoad_B1.c: 209: }
  6375                           ;OverLoad_B1.c: 210: }
  6376                           ;OverLoad_B1.c: 211: } else {
  6377  03EF  0008               	return
  6378  03F0                     l729:	
  6379                           
  6380                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
  6381  03F0  164A               	bsf	_Load^(0+128),4
  6382                           
  6383                           ;OverLoad_B1.c: 213: }
  6384                           ;OverLoad_B1.c: 214: } else {
  6385  03F1  0008               	return
  6386  03F2                     l728:	
  6387                           
  6388                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
  6389  03F2  1D4A               	btfss	_Load^(0+128),2
  6390  03F3  2C06               	goto	l5244
  6391                           
  6392                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
  6393  03F4  114A               	bcf	_Load^(0+128),2
  6394                           
  6395                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
  6396  03F5  124A               	bcf	_Load^(0+128),4
  6397                           
  6398                           ;OverLoad_B1.c: 220: Load.Time = 0;
  6399  03F6  01CB               	clrf	(_Load^(0+128)+1)
  6400  03F7  01CC               	clrf	((_Load+1)^(0+128)+1)
  6401                           
  6402                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
  6403  03F8  158A  239D  118A   	fcall	_setLoad_AH_AL_Restore
  6404                           
  6405                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
  6406  03FB  1683               	bsf	3,5	;RP0=1, select bank1
  6407  03FC  1303               	bcf	3,6	;RP1=0, select bank1
  6408  03FD  01E4               	clrf	(_Load^(0+128)+26)
  6409                           
  6410                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
  6411  03FE  01E5               	clrf	(_Load^(0+128)+27)
  6412                           
  6413                           ;OverLoad_B1.c: 226: Load.ADH = 0;
  6414  03FF  01CF               	clrf	(_Load^(0+128)+5)
  6415  0400  01D0               	clrf	((_Load+1)^(0+128)+5)
  6416                           
  6417                           ;OverLoad_B1.c: 227: Load.ADL = 0;
  6418  0401  01D1               	clrf	(_Load^(0+128)+7)
  6419  0402  01D2               	clrf	((_Load+1)^(0+128)+7)
  6420                           
  6421                           ;OverLoad_B1.c: 233: Load.Run = 0;
  6422  0403  11CA               	bcf	_Load^(0+128),3
  6423                           
  6424                           ;OverLoad_B1.c: 234: Load.Count = 0;
  6425  0404  01E3               	clrf	(_Load^(0+128)+25)
  6426                           
  6427                           ;OverLoad_B1.c: 235: Load.OK = 0;
  6428  0405  13CA               	bcf	_Load^(0+128),7
  6429  0406                     l5244:	
  6430                           
  6431                           ;OverLoad_B1.c: 257: }
  6432                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
  6433  0406  1ECA               	btfss	_Load^(0+128),5
  6434  0407  0008               	return
  6435                           
  6436                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
  6437  0408  3001               	movlw	1
  6438  0409  07CD               	addwf	(_Load^(0+128)+3),f
  6439  040A  1803               	skipnc
  6440  040B  0ACE               	incf	((_Load+1)^(0+128)+3),f
  6441  040C  3000               	movlw	0
  6442  040D  07CE               	addwf	((_Load+1)^(0+128)+3),f
  6443                           
  6444                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
  6445  040E  3001               	movlw	1
  6446  040F  024E               	subwf	((_Load+1)^(0+128)+3),w
  6447  0410  30F4               	movlw	244
  6448  0411  1903               	skipnz
  6449  0412  024D               	subwf	(_Load^(0+128)+3),w
  6450  0413  1C03               	skipc
  6451  0414  0008               	return
  6452                           
  6453                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
  6454  0415  01CD               	clrf	(_Load^(0+128)+3)
  6455  0416  01CE               	clrf	((_Load+1)^(0+128)+3)
  6456                           
  6457                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
  6458  0417  12CA               	bcf	_Load^(0+128),5
  6459                           
  6460                           ;OverLoad_B1.c: 263: }
  6461                           ;OverLoad_B1.c: 264: }
  6462                           ;OverLoad_B1.c: 265: }
  6463                           ;OverLoad_B1.c: 266: } else {
  6464  0418  0008               	return
  6465  0419                     l718:	
  6466                           
  6467                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
  6468  0419  1283               	bcf	3,5	;RP0=0, select bank0
  6469  041A  1303               	bcf	3,6	;RP1=0, select bank0
  6470  041B  1C25               	btfss	_myMain,0
  6471  041C  0008               	return
  6472                           
  6473                           ;OverLoad_B1.c: 268: Load.Enable = 1;
  6474  041D  1683               	bsf	3,5	;RP0=1, select bank1
  6475  041E  1303               	bcf	3,6	;RP1=0, select bank1
  6476  041F  144A               	bsf	_Load^(0+128),0
  6477  0420  0008               	return
  6478  0421                     __end_of_Load_Main:	
  6479                           
  6480                           	psect	text31
  6481  0AD9                     __ptext31:	
  6482 ;; *************** function _getMain_Lights_Count *****************
  6483 ;; Defined at:
  6484 ;;		line 464 in file "../src/Main_B1.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;		None
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;  count           1    1[BANK0 ] unsigned char 
  6489 ;;  status1         1    0[BANK0 ] unsigned char 
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  1    wreg      unsigned char 
  6492 ;; Registers used:
  6493 ;;		wreg, status,2
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6499 ;;      Params:         0       0       0       0
  6500 ;;      Locals:         0       2       0       0
  6501 ;;      Temps:          1       0       0       0
  6502 ;;      Totals:         1       2       0       0
  6503 ;;Total ram usage:        3 bytes
  6504 ;; Hardware stack levels used:    1
  6505 ;; Hardware stack levels required when called:    2
  6506 ;; This function calls:
  6507 ;;		Nothing
  6508 ;; This function is called by:
  6509 ;;		_Load_Main
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           
  6514                           ;psect for function _getMain_Lights_Count
  6515  0AD9                     _getMain_Lights_Count:	
  6516                           
  6517                           ;Main_B1.c: 465: char count = 0;
  6518                           
  6519                           ;incstack = 0
  6520                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
  6521  0AD9  1283               	bcf	3,5	;RP0=0, select bank0
  6522  0ADA  1303               	bcf	3,6	;RP1=0, select bank0
  6523  0ADB  01D0               	clrf	getMain_Lights_Count@count
  6524                           
  6525                           ;Main_B1.c: 481: char status1 = Lights1.Status == 1 ? 1 : 0;
  6526  0ADC  3000               	movlw	0
  6527  0ADD  1942               	btfsc	_Lights1,2
  6528  0ADE  3001               	movlw	1
  6529  0ADF  00CF               	movwf	getMain_Lights_Count@status1
  6530                           
  6531                           ;Main_B1.c: 492: count = status1;
  6532  0AE0  084F               	movf	getMain_Lights_Count@status1,w
  6533  0AE1  00F4               	movwf	??_getMain_Lights_Count
  6534  0AE2  0874               	movf	??_getMain_Lights_Count,w
  6535  0AE3  00D0               	movwf	getMain_Lights_Count@count
  6536                           
  6537                           ;Main_B1.c: 500: return count;
  6538  0AE4  0850               	movf	getMain_Lights_Count@count,w
  6539  0AE5  0008               	return
  6540  0AE6                     __end_of_getMain_Lights_Count:	
  6541                           
  6542                           	psect	text32
  6543  0A78                     __ptext32:	
  6544 ;; *************** function _getLight_Load_Status *****************
  6545 ;; Defined at:
  6546 ;;		line 419 in file "../src/TriacRelay_B1.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;		None
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;  loadstatus      1    4[COMMON] unsigned char 
  6551 ;; Return value:  Size  Location     Type
  6552 ;;                  1    wreg      unsigned char 
  6553 ;; Registers used:
  6554 ;;		wreg, status,2
  6555 ;; Tracked objects:
  6556 ;;		On entry : 0/0
  6557 ;;		On exit  : 0/0
  6558 ;;		Unchanged: 0/0
  6559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6560 ;;      Params:         0       0       0       0
  6561 ;;      Locals:         1       0       0       0
  6562 ;;      Temps:          0       0       0       0
  6563 ;;      Totals:         1       0       0       0
  6564 ;;Total ram usage:        1 bytes
  6565 ;; Hardware stack levels used:    1
  6566 ;; Hardware stack levels required when called:    2
  6567 ;; This function calls:
  6568 ;;		Nothing
  6569 ;; This function is called by:
  6570 ;;		_Load_Main
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           
  6575                           ;psect for function _getLight_Load_Status
  6576  0A78                     _getLight_Load_Status:	
  6577                           
  6578                           ;TriacRelay_B1.c: 420: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  6579                           
  6580                           ;incstack = 0
  6581                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  6582  0A78  3000               	movlw	0
  6583  0A79  18F7               	btfsc	_Light,1
  6584  0A7A  3001               	movlw	1
  6585  0A7B  00F4               	movwf	getLight_Load_Status@loadstatus
  6586                           
  6587                           ;TriacRelay_B1.c: 421: return loadstatus;
  6588  0A7C  0874               	movf	getLight_Load_Status@loadstatus,w
  6589  0A7D  0008               	return
  6590  0A7E                     __end_of_getLight_Load_Status:	
  6591                           
  6592                           	psect	text33
  6593  0A72                     __ptext33:	
  6594 ;; *************** function _getLight_LoadGO *****************
  6595 ;; Defined at:
  6596 ;;		line 414 in file "../src/TriacRelay_B1.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;		None
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;  loadgo          1    4[COMMON] unsigned char 
  6601 ;; Return value:  Size  Location     Type
  6602 ;;                  1    wreg      unsigned char 
  6603 ;; Registers used:
  6604 ;;		wreg, status,2
  6605 ;; Tracked objects:
  6606 ;;		On entry : 0/0
  6607 ;;		On exit  : 0/0
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6610 ;;      Params:         0       0       0       0
  6611 ;;      Locals:         1       0       0       0
  6612 ;;      Temps:          0       0       0       0
  6613 ;;      Totals:         1       0       0       0
  6614 ;;Total ram usage:        1 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:    2
  6617 ;; This function calls:
  6618 ;;		Nothing
  6619 ;; This function is called by:
  6620 ;;		_Load_Main
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           
  6625                           ;psect for function _getLight_LoadGO
  6626  0A72                     _getLight_LoadGO:	
  6627                           
  6628                           ;TriacRelay_B1.c: 415: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  6629                           
  6630                           ;incstack = 0
  6631                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  6632  0A72  3000               	movlw	0
  6633  0A73  1877               	btfsc	_Light,0
  6634  0A74  3001               	movlw	1
  6635  0A75  00F4               	movwf	getLight_LoadGO@loadgo
  6636                           
  6637                           ;TriacRelay_B1.c: 416: return loadgo;
  6638  0A76  0874               	movf	getLight_LoadGO@loadgo,w
  6639  0A77  0008               	return
  6640  0A78                     __end_of_getLight_LoadGO:	
  6641                           
  6642                           	psect	text34
  6643  0CE5                     __ptext34:	
  6644 ;; *************** function ___wmul *****************
  6645 ;; Defined at:
  6646 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6649 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;  product         2    4[COMMON] unsigned int 
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  2    0[BANK0 ] unsigned int 
  6654 ;; Registers used:
  6655 ;;		wreg, status,2, status,0
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6661 ;;      Params:         0       4       0       0
  6662 ;;      Locals:         2       0       0       0
  6663 ;;      Temps:          0       0       0       0
  6664 ;;      Totals:         2       4       0       0
  6665 ;;Total ram usage:        6 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    2
  6668 ;; This function calls:
  6669 ;;		Nothing
  6670 ;; This function is called by:
  6671 ;;		_Load_Main
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           
  6676                           ;psect for function ___wmul
  6677  0CE5                     ___wmul:	
  6678                           
  6679                           ;incstack = 0
  6680                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6681  0CE5  01F4               	clrf	___wmul@product
  6682  0CE6  01F5               	clrf	___wmul@product+1
  6683  0CE7                     l4876:	
  6684  0CE7  1283               	bcf	3,5	;RP0=0, select bank0
  6685  0CE8  1303               	bcf	3,6	;RP1=0, select bank0
  6686  0CE9  1C4F               	btfss	___wmul@multiplier,0
  6687  0CEA  2CF1               	goto	l1433
  6688  0CEB  0851               	movf	___wmul@multiplicand,w
  6689  0CEC  07F4               	addwf	___wmul@product,f
  6690  0CED  1803               	skipnc
  6691  0CEE  0AF5               	incf	___wmul@product+1,f
  6692  0CEF  0852               	movf	___wmul@multiplicand+1,w
  6693  0CF0  07F5               	addwf	___wmul@product+1,f
  6694  0CF1                     l1433:	
  6695  0CF1  3001               	movlw	1
  6696  0CF2                     u5855:	
  6697  0CF2  1003               	clrc
  6698  0CF3  0DD1               	rlf	___wmul@multiplicand,f
  6699  0CF4  0DD2               	rlf	___wmul@multiplicand+1,f
  6700  0CF5  3EFF               	addlw	-1
  6701  0CF6  1D03               	skipz
  6702  0CF7  2CF2               	goto	u5855
  6703  0CF8  3001               	movlw	1
  6704  0CF9                     u5865:	
  6705  0CF9  1003               	clrc
  6706  0CFA  0CD0               	rrf	___wmul@multiplier+1,f
  6707  0CFB  0CCF               	rrf	___wmul@multiplier,f
  6708  0CFC  3EFF               	addlw	-1
  6709  0CFD  1D03               	skipz
  6710  0CFE  2CF9               	goto	u5865
  6711  0CFF  0850               	movf	___wmul@multiplier+1,w
  6712  0D00  044F               	iorwf	___wmul@multiplier,w
  6713  0D01  1D03               	skipz
  6714  0D02  2CE7               	goto	l4876
  6715  0D03  0875               	movf	___wmul@product+1,w
  6716  0D04  01D0               	clrf	?___wmul+1
  6717  0D05  07D0               	addwf	?___wmul+1,f
  6718  0D06  0874               	movf	___wmul@product,w
  6719  0D07  01CF               	clrf	?___wmul
  6720  0D08  07CF               	addwf	?___wmul,f
  6721  0D09  0008               	return
  6722  0D0A                     __end_of___wmul:	
  6723                           
  6724                           	psect	text35
  6725  0DAC                     __ptext35:	
  6726 ;; *************** function ___lwdiv *****************
  6727 ;; Defined at:
  6728 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6729 ;; Parameters:    Size  Location     Type
  6730 ;;  divisor         2    0[BANK0 ] unsigned int 
  6731 ;;  dividend        2    2[BANK0 ] unsigned int 
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;  quotient        2    5[BANK0 ] unsigned int 
  6734 ;;  counter         1    4[BANK0 ] unsigned char 
  6735 ;; Return value:  Size  Location     Type
  6736 ;;                  2    0[BANK0 ] unsigned int 
  6737 ;; Registers used:
  6738 ;;		wreg, status,2, status,0
  6739 ;; Tracked objects:
  6740 ;;		On entry : 0/0
  6741 ;;		On exit  : 0/0
  6742 ;;		Unchanged: 0/0
  6743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6744 ;;      Params:         0       4       0       0
  6745 ;;      Locals:         0       3       0       0
  6746 ;;      Temps:          1       0       0       0
  6747 ;;      Totals:         1       7       0       0
  6748 ;;Total ram usage:        8 bytes
  6749 ;; Hardware stack levels used:    1
  6750 ;; Hardware stack levels required when called:    2
  6751 ;; This function calls:
  6752 ;;		Nothing
  6753 ;; This function is called by:
  6754 ;;		_Load_Main
  6755 ;;		_getPIR_AD
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           
  6760                           ;psect for function ___lwdiv
  6761  0DAC                     ___lwdiv:	
  6762                           
  6763                           ;incstack = 0
  6764                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6765  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  6766  0DAD  1303               	bcf	3,6	;RP1=0, select bank0
  6767  0DAE  01D4               	clrf	___lwdiv@quotient
  6768  0DAF  01D5               	clrf	___lwdiv@quotient+1
  6769  0DB0  0850               	movf	___lwdiv@divisor+1,w
  6770  0DB1  044F               	iorwf	___lwdiv@divisor,w
  6771  0DB2  1903               	skipnz
  6772  0DB3  2DE5               	goto	l4908
  6773  0DB4  01D3               	clrf	___lwdiv@counter
  6774  0DB5  0AD3               	incf	___lwdiv@counter,f
  6775  0DB6                     l4896:	
  6776  0DB6  1BD0               	btfsc	___lwdiv@divisor+1,7
  6777  0DB7  2DC4               	goto	l4898
  6778  0DB8  3001               	movlw	1
  6779  0DB9                     u5895:	
  6780  0DB9  1003               	clrc
  6781  0DBA  0DCF               	rlf	___lwdiv@divisor,f
  6782  0DBB  0DD0               	rlf	___lwdiv@divisor+1,f
  6783  0DBC  3EFF               	addlw	-1
  6784  0DBD  1D03               	skipz
  6785  0DBE  2DB9               	goto	u5895
  6786  0DBF  3001               	movlw	1
  6787  0DC0  00F4               	movwf	??___lwdiv
  6788  0DC1  0874               	movf	??___lwdiv,w
  6789  0DC2  07D3               	addwf	___lwdiv@counter,f
  6790  0DC3  2DB6               	goto	l4896
  6791  0DC4                     l4898:	
  6792  0DC4  3001               	movlw	1
  6793  0DC5                     u5915:	
  6794  0DC5  1003               	clrc
  6795  0DC6  0DD4               	rlf	___lwdiv@quotient,f
  6796  0DC7  0DD5               	rlf	___lwdiv@quotient+1,f
  6797  0DC8  3EFF               	addlw	-1
  6798  0DC9  1D03               	skipz
  6799  0DCA  2DC5               	goto	u5915
  6800  0DCB  0850               	movf	___lwdiv@divisor+1,w
  6801  0DCC  0252               	subwf	___lwdiv@dividend+1,w
  6802  0DCD  1D03               	skipz
  6803  0DCE  2DD1               	goto	u5925
  6804  0DCF  084F               	movf	___lwdiv@divisor,w
  6805  0DD0  0251               	subwf	___lwdiv@dividend,w
  6806  0DD1                     u5925:	
  6807  0DD1  1C03               	skipc
  6808  0DD2  2DDA               	goto	l4904
  6809  0DD3  084F               	movf	___lwdiv@divisor,w
  6810  0DD4  02D1               	subwf	___lwdiv@dividend,f
  6811  0DD5  0850               	movf	___lwdiv@divisor+1,w
  6812  0DD6  1C03               	skipc
  6813  0DD7  03D2               	decf	___lwdiv@dividend+1,f
  6814  0DD8  02D2               	subwf	___lwdiv@dividend+1,f
  6815  0DD9  1454               	bsf	___lwdiv@quotient,0
  6816  0DDA                     l4904:	
  6817  0DDA  3001               	movlw	1
  6818  0DDB                     u5935:	
  6819  0DDB  1003               	clrc
  6820  0DDC  0CD0               	rrf	___lwdiv@divisor+1,f
  6821  0DDD  0CCF               	rrf	___lwdiv@divisor,f
  6822  0DDE  3EFF               	addlw	-1
  6823  0DDF  1D03               	skipz
  6824  0DE0  2DDB               	goto	u5935
  6825  0DE1  3001               	movlw	1
  6826  0DE2  02D3               	subwf	___lwdiv@counter,f
  6827  0DE3  1D03               	btfss	3,2
  6828  0DE4  2DC4               	goto	l4898
  6829  0DE5                     l4908:	
  6830  0DE5  0855               	movf	___lwdiv@quotient+1,w
  6831  0DE6  01D0               	clrf	?___lwdiv+1
  6832  0DE7  07D0               	addwf	?___lwdiv+1,f
  6833  0DE8  0854               	movf	___lwdiv@quotient,w
  6834  0DE9  01CF               	clrf	?___lwdiv
  6835  0DEA  07CF               	addwf	?___lwdiv,f
  6836  0DEB  0008               	return
  6837  0DEC                     __end_of___lwdiv:	
  6838                           
  6839                           	psect	text36
  6840  0A52                     __ptext36:	
  6841 ;; *************** function _Load_Initialization *****************
  6842 ;; Defined at:
  6843 ;;		line 9 in file "../src/OverLoad_B1.c"
  6844 ;; Parameters:    Size  Location     Type
  6845 ;;		None
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;		None
  6848 ;; Return value:  Size  Location     Type
  6849 ;;		None               void
  6850 ;; Registers used:
  6851 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6852 ;; Tracked objects:
  6853 ;;		On entry : 0/0
  6854 ;;		On exit  : 0/0
  6855 ;;		Unchanged: 0/0
  6856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6857 ;;      Params:         0       0       0       0
  6858 ;;      Locals:         0       0       0       0
  6859 ;;      Temps:          0       0       0       0
  6860 ;;      Totals:         0       0       0       0
  6861 ;;Total ram usage:        0 bytes
  6862 ;; Hardware stack levels used:    1
  6863 ;; Hardware stack levels required when called:    3
  6864 ;; This function calls:
  6865 ;;		_setLoad_AH_AL_Restore
  6866 ;; This function is called by:
  6867 ;;		_main
  6868 ;; This function uses a non-reentrant model
  6869 ;;
  6870                           
  6871                           
  6872                           ;psect for function _Load_Initialization
  6873  0A52                     _Load_Initialization:	
  6874                           
  6875                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6876                           
  6877                           ;incstack = 0
  6878                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6879  0A52  158A  239D         	fcall	_setLoad_AH_AL_Restore
  6880  0A54  0008               	return
  6881  0A55                     __end_of_Load_Initialization:	
  6882                           
  6883                           	psect	text37
  6884  0B9D                     __ptext37:	
  6885 ;; *************** function _setLoad_AH_AL_Restore *****************
  6886 ;; Defined at:
  6887 ;;		line 294 in file "../src/OverLoad_B1.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;		None
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;  i               1    5[COMMON] unsigned char 
  6892 ;; Return value:  Size  Location     Type
  6893 ;;		None               void
  6894 ;; Registers used:
  6895 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6901 ;;      Params:         0       0       0       0
  6902 ;;      Locals:         1       0       0       0
  6903 ;;      Temps:          1       0       0       0
  6904 ;;      Totals:         2       0       0       0
  6905 ;;Total ram usage:        2 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; Hardware stack levels required when called:    2
  6908 ;; This function calls:
  6909 ;;		Nothing
  6910 ;; This function is called by:
  6911 ;;		_Load_Initialization
  6912 ;;		_Load_Main
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           
  6917                           ;psect for function _setLoad_AH_AL_Restore
  6918  0B9D                     _setLoad_AH_AL_Restore:	
  6919                           
  6920                           ;OverLoad_B1.c: 295: char i;
  6921                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
  6922                           
  6923                           ;incstack = 0
  6924                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6925  0B9D  01F5               	clrf	setLoad_AH_AL_Restore@i
  6926  0B9E                     L18:	
  6927  0B9E  3005               	movlw	5
  6928  0B9F  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6929  0BA0  1803               	btfsc	3,0
  6930  0BA1  0008               	return
  6931                           
  6932                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
  6933  0BA2  0875               	movf	setLoad_AH_AL_Restore@i,w
  6934  0BA3  3ED4               	addlw	(_Load+10)& (0+255)
  6935  0BA4  0084               	movwf	4
  6936  0BA5  1383               	bcf	3,7	;select IRP bank1
  6937  0BA6  0180               	clrf	0
  6938                           
  6939                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xff;
  6940  0BA7  30FF               	movlw	255
  6941  0BA8  00F4               	movwf	??_setLoad_AH_AL_Restore
  6942  0BA9  0875               	movf	setLoad_AH_AL_Restore@i,w
  6943  0BAA  3ED9               	addlw	(_Load+15)& (0+255)
  6944  0BAB  0084               	movwf	4
  6945  0BAC  0874               	movf	??_setLoad_AH_AL_Restore,w
  6946  0BAD  0080               	movwf	0
  6947  0BAE  3001               	movlw	1
  6948  0BAF  00F4               	movwf	??_setLoad_AH_AL_Restore
  6949  0BB0  0874               	movf	??_setLoad_AH_AL_Restore,w
  6950  0BB1  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6951  0BB2  2B9E               	goto	L18
  6952  0BB3                     __end_of_setLoad_AH_AL_Restore:	
  6953                           
  6954                           	psect	text38
  6955  0C80                     __ptext38:	
  6956 ;; *************** function _Lights_Main *****************
  6957 ;; Defined at:
  6958 ;;		line 52 in file "../src/TriacRelay_B1.c"
  6959 ;; Parameters:    Size  Location     Type
  6960 ;;		None
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;		None
  6963 ;; Return value:  Size  Location     Type
  6964 ;;		None               void
  6965 ;; Registers used:
  6966 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6967 ;; Tracked objects:
  6968 ;;		On entry : 0/0
  6969 ;;		On exit  : 0/0
  6970 ;;		Unchanged: 0/0
  6971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6972 ;;      Params:         0       0       0       0
  6973 ;;      Locals:         0       0       0       0
  6974 ;;      Temps:          0       0       0       0
  6975 ;;      Totals:         0       0       0       0
  6976 ;;Total ram usage:        0 bytes
  6977 ;; Hardware stack levels used:    1
  6978 ;; Hardware stack levels required when called:    6
  6979 ;; This function calls:
  6980 ;;		_Lights_Control
  6981 ;;		_getLoad_OK
  6982 ;;		_getMain_All_Error_Status
  6983 ;;		_getMain_All_LightsStatus
  6984 ;;		_setLights_Main
  6985 ;; This function is called by:
  6986 ;;		_main
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990                           
  6991                           ;psect for function _Lights_Main
  6992  0C80                     _Lights_Main:	
  6993                           
  6994                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  6995                           
  6996                           ;incstack = 0
  6997                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6998  0C80  1C77               	btfss	_Light,0
  6999  0C81  2C96               	goto	l5262
  7000                           
  7001                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  7002  0C82  158A  229A  158A   	fcall	_getLoad_OK
  7003  0C85  3A01               	xorlw	1
  7004  0C86  1903               	skipnz
  7005  0C87  2C95               	goto	l1312
  7006  0C88  3000               	movlw	0
  7007  0C89  158A  256E  158A   	fcall	_getMain_All_Error_Status
  7008  0C8C  3800               	iorlw	0
  7009  0C8D  1D03               	skipz
  7010  0C8E  2C95               	goto	l1312
  7011  0C8F  158A  22BB  158A   	fcall	_getMain_All_LightsStatus
  7012  0C92  3800               	iorlw	0
  7013  0C93  1D03               	skipz
  7014  0C94  2C96               	goto	l5262
  7015  0C95                     l1312:	
  7016                           
  7017                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  7018  0C95  1077               	bcf	_Light,0
  7019  0C96                     l5262:	
  7020                           
  7021                           ;TriacRelay_B1.c: 68: }
  7022                           ;TriacRelay_B1.c: 69: }
  7023                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  7024  0C96  3001               	movlw	1
  7025  0C97  158A  250A  158A   	fcall	_setLights_Main
  7026                           
  7027                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  7028  0C9A  3001               	movlw	1
  7029  0C9B  118A  26C8         	fcall	_Lights_Control
  7030  0C9D  0008               	return
  7031  0C9E                     __end_of_Lights_Main:	
  7032                           
  7033                           	psect	text39
  7034  0D0A                     __ptext39:	
  7035 ;; *************** function _setLights_Main *****************
  7036 ;; Defined at:
  7037 ;;		line 91 in file "../src/TriacRelay_B1.c"
  7038 ;; Parameters:    Size  Location     Type
  7039 ;;  lights          1    wreg     unsigned char 
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;  lights          1    4[BANK0 ] unsigned char 
  7042 ;; Return value:  Size  Location     Type
  7043 ;;		None               void
  7044 ;; Registers used:
  7045 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7051 ;;      Params:         0       0       0       0
  7052 ;;      Locals:         0       1       0       0
  7053 ;;      Temps:          0       0       0       0
  7054 ;;      Totals:         0       1       0       0
  7055 ;;Total ram usage:        1 bytes
  7056 ;; Hardware stack levels used:    1
  7057 ;; Hardware stack levels required when called:    5
  7058 ;; This function calls:
  7059 ;;		_LightsPointSelect
  7060 ;;		_getLights_Allow_Condition
  7061 ;;		_setLights
  7062 ;; This function is called by:
  7063 ;;		_Lights_Main
  7064 ;; This function uses a non-reentrant model
  7065 ;;
  7066                           
  7067                           
  7068                           ;psect for function _setLights_Main
  7069  0D0A                     _setLights_Main:	
  7070                           
  7071                           ;incstack = 0
  7072                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7073                           ;setLights_Main@lights stored from wreg
  7074  0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  7075  0D0B  1303               	bcf	3,6	;RP1=0, select bank0
  7076  0D0C  00D3               	movwf	setLights_Main@lights
  7077                           
  7078                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  7079  0D0D  0853               	movf	setLights_Main@lights,w
  7080  0D0E  158A  22C4  158A   	fcall	_LightsPointSelect
  7081                           
  7082                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  7083  0D11  0878               	movf	_Lights,w
  7084  0D12  0084               	movwf	4
  7085  0D13  1383               	bcf	3,7	;select IRP bank0
  7086  0D14  1880               	btfsc	0,1
  7087  0D15  0008               	return
  7088                           
  7089                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  7090  0D16  0878               	movf	_Lights,w
  7091  0D17  0084               	movwf	4
  7092  0D18  1D80               	btfss	0,3
  7093  0D19  0008               	return
  7094                           
  7095                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  7096  0D1A  1283               	bcf	3,5	;RP0=0, select bank0
  7097  0D1B  1303               	bcf	3,6	;RP1=0, select bank0
  7098  0D1C  0853               	movf	setLights_Main@lights,w
  7099  0D1D  158A  23B3  158A   	fcall	_getLights_Allow_Condition
  7100  0D20  3800               	iorlw	0
  7101  0D21  1D03               	skipz
  7102  0D22  0008               	return
  7103                           
  7104                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  7105  0D23  0878               	movf	_Lights,w
  7106  0D24  0084               	movwf	4
  7107  0D25  1383               	bcf	3,7	;select IRP bank0
  7108  0D26  1180               	bcf	0,3
  7109                           
  7110                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  7111  0D27  0878               	movf	_Lights,w
  7112  0D28  0084               	movwf	4
  7113  0D29  1E00               	btfss	0,4
  7114  0D2A  2D33               	goto	l4844
  7115                           
  7116                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  7117  0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  7118  0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  7119  0D2D  01D1               	clrf	setLights@status
  7120  0D2E  0AD1               	incf	setLights@status,f
  7121  0D2F  0853               	movf	setLights_Main@lights,w
  7122  0D30  158A  262F         	fcall	_setLights
  7123                           
  7124                           ;TriacRelay_B1.c: 99: } else {
  7125  0D32  0008               	return
  7126  0D33                     l4844:	
  7127                           
  7128                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  7129  0D33  1283               	bcf	3,5	;RP0=0, select bank0
  7130  0D34  1303               	bcf	3,6	;RP1=0, select bank0
  7131  0D35  01D1               	clrf	setLights@status
  7132  0D36  0853               	movf	setLights_Main@lights,w
  7133  0D37  158A  262F         	fcall	_setLights
  7134  0D39  0008               	return
  7135  0D3A                     __end_of_setLights_Main:	
  7136                           
  7137                           	psect	text40
  7138  0E2F                     __ptext40:	
  7139 ;; *************** function _setLights *****************
  7140 ;; Defined at:
  7141 ;;		line 108 in file "../src/TriacRelay_B1.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;  lights          1    wreg     unsigned char 
  7144 ;;  status          1    2[BANK0 ] unsigned char 
  7145 ;; Auto vars:     Size  Location     Type
  7146 ;;  lights          1    3[BANK0 ] unsigned char 
  7147 ;; Return value:  Size  Location     Type
  7148 ;;		None               void
  7149 ;; Registers used:
  7150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7151 ;; Tracked objects:
  7152 ;;		On entry : 0/0
  7153 ;;		On exit  : 0/0
  7154 ;;		Unchanged: 0/0
  7155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7156 ;;      Params:         0       1       0       0
  7157 ;;      Locals:         0       1       0       0
  7158 ;;      Temps:          0       0       0       0
  7159 ;;      Totals:         0       2       0       0
  7160 ;;Total ram usage:        2 bytes
  7161 ;; Hardware stack levels used:    1
  7162 ;; Hardware stack levels required when called:    4
  7163 ;; This function calls:
  7164 ;;		_setLED
  7165 ;;		_setLights_Line
  7166 ;; This function is called by:
  7167 ;;		_setLights_Main
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           
  7172                           ;psect for function _setLights
  7173  0E2F                     _setLights:	
  7174                           
  7175                           ;incstack = 0
  7176                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7177                           ;setLights@lights stored from wreg
  7178  0E2F  1283               	bcf	3,5	;RP0=0, select bank0
  7179  0E30  1303               	bcf	3,6	;RP1=0, select bank0
  7180  0E31  00D2               	movwf	setLights@lights
  7181                           
  7182                           ;TriacRelay_B1.c: 116: if (status == 1) {
  7183  0E32  0851               	movf	setLights@status,w
  7184  0E33  3A01               	xorlw	1
  7185  0E34  1D03               	skipz
  7186  0E35  2E59               	goto	l4610
  7187                           
  7188                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  7189  0E36  0852               	movf	setLights@lights,w
  7190  0E37  3A02               	xorlw	2
  7191  0E38  1D03               	skipz
  7192  0E39  2E47               	goto	l4600
  7193                           
  7194                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  7195  0E3A  01CF               	clrf	setLED@command
  7196  0E3B  3001               	movlw	1
  7197  0E3C  158A  2735  158A   	fcall	_setLED
  7198                           
  7199                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  7200  0E3F  1283               	bcf	3,5	;RP0=0, select bank0
  7201  0E40  1303               	bcf	3,6	;RP1=0, select bank0
  7202  0E41  01CF               	clrf	setLED@command
  7203  0E42  0ACF               	incf	setLED@command,f
  7204  0E43  3002               	movlw	2
  7205  0E44  158A  2735  158A   	fcall	_setLED
  7206  0E47                     l4600:	
  7207                           
  7208                           ;TriacRelay_B1.c: 121: }
  7209                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  7210  0E47  0878               	movf	_Lights,w
  7211  0E48  0084               	movwf	4
  7212  0E49  1383               	bcf	3,7	;select IRP bank0
  7213  0E4A  1900               	btfsc	0,2
  7214  0E4B  2E52               	goto	l4606
  7215                           
  7216                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7217  0E4C  0878               	movf	_Lights,w
  7218  0E4D  0084               	movwf	4
  7219  0E4E  1500               	bsf	0,2
  7220                           
  7221                           ;TriacRelay_B1.c: 141: RB2 = 1;
  7222  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
  7223  0E50  1303               	bcf	3,6	;RP1=0, select bank0
  7224  0E51  1506               	bsf	6,2	;volatile
  7225  0E52                     l4606:	
  7226                           
  7227                           ;TriacRelay_B1.c: 169: }
  7228                           ;TriacRelay_B1.c: 171: Light.Load_Status = 1;
  7229  0E52  14F7               	bsf	_Light,1
  7230                           
  7231                           ;TriacRelay_B1.c: 172: setLights_Line(lights);
  7232  0E53  1283               	bcf	3,5	;RP0=0, select bank0
  7233  0E54  1303               	bcf	3,6	;RP1=0, select bank0
  7234  0E55  0852               	movf	setLights@lights,w
  7235  0E56  158A  22F4         	fcall	_setLights_Line
  7236                           
  7237                           ;TriacRelay_B1.c: 174: } else {
  7238  0E58  0008               	return
  7239  0E59                     l4610:	
  7240                           
  7241                           ;TriacRelay_B1.c: 177: if (lights == 2) {
  7242  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  7243  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  7244  0E5B  0852               	movf	setLights@lights,w
  7245  0E5C  3A02               	xorlw	2
  7246  0E5D  1D03               	skipz
  7247  0E5E  2E6C               	goto	l4614
  7248                           
  7249                           ;TriacRelay_B1.c: 178: setLED(1, 1);
  7250  0E5F  01CF               	clrf	setLED@command
  7251  0E60  0ACF               	incf	setLED@command,f
  7252  0E61  3001               	movlw	1
  7253  0E62  158A  2735  158A   	fcall	_setLED
  7254                           
  7255                           ;TriacRelay_B1.c: 179: setLED(2, 0);
  7256  0E65  1283               	bcf	3,5	;RP0=0, select bank0
  7257  0E66  1303               	bcf	3,6	;RP1=0, select bank0
  7258  0E67  01CF               	clrf	setLED@command
  7259  0E68  3002               	movlw	2
  7260  0E69  158A  2735  158A   	fcall	_setLED
  7261  0E6C                     l4614:	
  7262                           
  7263                           ;TriacRelay_B1.c: 180: }
  7264                           ;TriacRelay_B1.c: 182: if (Lights->Status == 1) {
  7265  0E6C  0878               	movf	_Lights,w
  7266  0E6D  0084               	movwf	4
  7267  0E6E  1383               	bcf	3,7	;select IRP bank0
  7268  0E6F  1D00               	btfss	0,2
  7269  0E70  2E77               	goto	l4620
  7270                           
  7271                           ;TriacRelay_B1.c: 183: Lights->Status = 0;
  7272  0E71  0878               	movf	_Lights,w
  7273  0E72  0084               	movwf	4
  7274  0E73  1100               	bcf	0,2
  7275                           
  7276                           ;TriacRelay_B1.c: 196: RB2 = 0;
  7277  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  7278  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  7279  0E76  1106               	bcf	6,2	;volatile
  7280  0E77                     l4620:	
  7281                           
  7282                           ;TriacRelay_B1.c: 225: }
  7283                           ;TriacRelay_B1.c: 227: Light.Load_Status = 0;
  7284  0E77  10F7               	bcf	_Light,1
  7285                           
  7286                           ;TriacRelay_B1.c: 228: setLights_Line(0);
  7287  0E78  3000               	movlw	0
  7288  0E79  158A  22F4         	fcall	_setLights_Line
  7289  0E7B  0008               	return
  7290  0E7C                     __end_of_setLights:	
  7291                           
  7292                           	psect	text41
  7293  0AF4                     __ptext41:	
  7294 ;; *************** function _setLights_Line *****************
  7295 ;; Defined at:
  7296 ;;		line 299 in file "../src/TriacRelay_B1.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  lights          1    wreg     unsigned char 
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;  lights          1    4[COMMON] unsigned char 
  7301 ;; Return value:  Size  Location     Type
  7302 ;;		None               void
  7303 ;; Registers used:
  7304 ;;		wreg
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7310 ;;      Params:         0       0       0       0
  7311 ;;      Locals:         1       0       0       0
  7312 ;;      Temps:          0       0       0       0
  7313 ;;      Totals:         1       0       0       0
  7314 ;;Total ram usage:        1 bytes
  7315 ;; Hardware stack levels used:    1
  7316 ;; Hardware stack levels required when called:    2
  7317 ;; This function calls:
  7318 ;;		Nothing
  7319 ;; This function is called by:
  7320 ;;		_setLights
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           
  7325                           ;psect for function _setLights_Line
  7326  0AF4                     _setLights_Line:	
  7327                           
  7328                           ;incstack = 0
  7329                           ; Regs used in _setLights_Line: [wreg]
  7330                           ;setLights_Line@lights stored from wreg
  7331  0AF4  00F4               	movwf	setLights_Line@lights
  7332                           
  7333                           ;TriacRelay_B1.c: 300: Light.LoadGO = 1;
  7334  0AF5  1477               	bsf	_Light,0
  7335                           
  7336                           ;TriacRelay_B1.c: 302: Lights1.Line = 0;
  7337  0AF6  1283               	bcf	3,5	;RP0=0, select bank0
  7338  0AF7  1303               	bcf	3,6	;RP1=0, select bank0
  7339  0AF8  1043               	bcf	_Lights1+1,0
  7340                           
  7341                           ;TriacRelay_B1.c: 303: if (lights == 1 && lights != 0) {
  7342  0AF9  0874               	movf	setLights_Line@lights,w
  7343  0AFA  3A01               	xorlw	1
  7344  0AFB  1D03               	skipz
  7345  0AFC  0008               	return
  7346  0AFD  0874               	movf	setLights_Line@lights,w
  7347  0AFE  1903               	btfsc	3,2
  7348  0AFF  0008               	return
  7349                           
  7350                           ;TriacRelay_B1.c: 304: Lights1.Line = 1;
  7351  0B00  1443               	bsf	_Lights1+1,0
  7352  0B01  0008               	return
  7353  0B02                     __end_of_setLights_Line:	
  7354                           
  7355                           	psect	text42
  7356  0BB3                     __ptext42:	
  7357 ;; *************** function _getLights_Allow_Condition *****************
  7358 ;; Defined at:
  7359 ;;		line 381 in file "../src/TriacRelay_B1.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;  lights          1    wreg     unsigned char 
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;  lights          1    0[COMMON] unsigned char 
  7364 ;;  allow           1    0[BANK0 ] unsigned char 
  7365 ;; Return value:  Size  Location     Type
  7366 ;;                  1    wreg      unsigned char 
  7367 ;; Registers used:
  7368 ;;		wreg, status,2, pclath, cstack
  7369 ;; Tracked objects:
  7370 ;;		On entry : 0/0
  7371 ;;		On exit  : 0/0
  7372 ;;		Unchanged: 0/0
  7373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7374 ;;      Params:         0       0       0       0
  7375 ;;      Locals:         0       2       0       0
  7376 ;;      Temps:          1       0       0       0
  7377 ;;      Totals:         1       2       0       0
  7378 ;;Total ram usage:        3 bytes
  7379 ;; Hardware stack levels used:    1
  7380 ;; Hardware stack levels required when called:    3
  7381 ;; This function calls:
  7382 ;;		_getLoad_OK
  7383 ;; This function is called by:
  7384 ;;		_setLights_Main
  7385 ;; This function uses a non-reentrant model
  7386 ;;
  7387                           
  7388                           
  7389                           ;psect for function _getLights_Allow_Condition
  7390  0BB3                     _getLights_Allow_Condition:	
  7391                           
  7392                           ;TriacRelay_B1.c: 382: char allow = 0;
  7393                           
  7394                           ;incstack = 0
  7395                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7396  0BB3  1283               	bcf	3,5	;RP0=0, select bank0
  7397  0BB4  1303               	bcf	3,6	;RP1=0, select bank0
  7398  0BB5  01CF               	clrf	getLights_Allow_Condition@allow
  7399                           
  7400                           ;TriacRelay_B1.c: 385: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7401  0BB6  01D0               	clrf	_getLights_Allow_Condition$4712
  7402  0BB7  0AD0               	incf	_getLights_Allow_Condition$4712,f
  7403  0BB8  158A  229A  158A   	fcall	_getLoad_OK
  7404  0BBB  3800               	iorlw	0
  7405  0BBC  1903               	btfsc	3,2
  7406  0BBD  1877               	btfsc	_Light,0
  7407  0BBE  2BC2               	goto	l4588
  7408  0BBF  1283               	bcf	3,5	;RP0=0, select bank0
  7409  0BC0  1303               	bcf	3,6	;RP1=0, select bank0
  7410  0BC1  01D0               	clrf	_getLights_Allow_Condition$4712
  7411  0BC2                     l4588:	
  7412  0BC2  1283               	bcf	3,5	;RP0=0, select bank0
  7413  0BC3  1303               	bcf	3,6	;RP1=0, select bank0
  7414  0BC4  0850               	movf	_getLights_Allow_Condition$4712,w
  7415  0BC5  00F5               	movwf	??_getLights_Allow_Condition
  7416  0BC6  0875               	movf	??_getLights_Allow_Condition,w
  7417  0BC7  00CF               	movwf	getLights_Allow_Condition@allow
  7418                           
  7419                           ;TriacRelay_B1.c: 410: return allow;
  7420  0BC8  084F               	movf	getLights_Allow_Condition@allow,w
  7421  0BC9  0008               	return
  7422  0BCA                     __end_of_getLights_Allow_Condition:	
  7423                           
  7424                           	psect	text43
  7425  0A9A                     __ptext43:	
  7426 ;; *************** function _getLoad_OK *****************
  7427 ;; Defined at:
  7428 ;;		line 274 in file "../src/OverLoad_B1.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;		None
  7431 ;; Auto vars:     Size  Location     Type
  7432 ;;  ok              1    4[COMMON] unsigned char 
  7433 ;; Return value:  Size  Location     Type
  7434 ;;                  1    wreg      unsigned char 
  7435 ;; Registers used:
  7436 ;;		wreg, status,2
  7437 ;; Tracked objects:
  7438 ;;		On entry : 0/0
  7439 ;;		On exit  : 0/0
  7440 ;;		Unchanged: 0/0
  7441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7442 ;;      Params:         0       0       0       0
  7443 ;;      Locals:         1       0       0       0
  7444 ;;      Temps:          0       0       0       0
  7445 ;;      Totals:         1       0       0       0
  7446 ;;Total ram usage:        1 bytes
  7447 ;; Hardware stack levels used:    1
  7448 ;; Hardware stack levels required when called:    2
  7449 ;; This function calls:
  7450 ;;		Nothing
  7451 ;; This function is called by:
  7452 ;;		_Lights_Main
  7453 ;;		_getLights_Allow_Condition
  7454 ;; This function uses a non-reentrant model
  7455 ;;
  7456                           
  7457                           
  7458                           ;psect for function _getLoad_OK
  7459  0A9A                     _getLoad_OK:	
  7460                           
  7461                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
  7462                           
  7463                           ;incstack = 0
  7464                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7465  0A9A  3000               	movlw	0
  7466  0A9B  1683               	bsf	3,5	;RP0=1, select bank1
  7467  0A9C  1303               	bcf	3,6	;RP1=0, select bank1
  7468  0A9D  1BCA               	btfsc	_Load^(0+128),7
  7469  0A9E  3001               	movlw	1
  7470  0A9F  00F4               	movwf	getLoad_OK@ok
  7471                           
  7472                           ;OverLoad_B1.c: 276: return ok;
  7473  0AA0  0874               	movf	getLoad_OK@ok,w
  7474  0AA1  0008               	return
  7475  0AA2                     __end_of_getLoad_OK:	
  7476                           
  7477                           	psect	text44
  7478  06C8                     __ptext44:	
  7479 ;; *************** function _Lights_Control *****************
  7480 ;; Defined at:
  7481 ;;		line 234 in file "../src/TriacRelay_B1.c"
  7482 ;; Parameters:    Size  Location     Type
  7483 ;;  lights          1    wreg     unsigned char 
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;  lights          1   10[BANK0 ] unsigned char 
  7486 ;; Return value:  Size  Location     Type
  7487 ;;		None               void
  7488 ;; Registers used:
  7489 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7490 ;; Tracked objects:
  7491 ;;		On entry : 0/0
  7492 ;;		On exit  : 0/0
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7495 ;;      Params:         0       0       0       0
  7496 ;;      Locals:         0       1       0       0
  7497 ;;      Temps:          0       2       0       0
  7498 ;;      Totals:         0       3       0       0
  7499 ;;Total ram usage:        3 bytes
  7500 ;; Hardware stack levels used:    1
  7501 ;; Hardware stack levels required when called:    3
  7502 ;; This function calls:
  7503 ;;		_LightsPointSelect
  7504 ;;		___awdiv
  7505 ;; This function is called by:
  7506 ;;		_Lights_Main
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           
  7511                           ;psect for function _Lights_Control
  7512  06C8                     _Lights_Control:	
  7513                           
  7514                           ;incstack = 0
  7515                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7516                           ;Lights_Control@lights stored from wreg
  7517  06C8  1283               	bcf	3,5	;RP0=0, select bank0
  7518  06C9  1303               	bcf	3,6	;RP1=0, select bank0
  7519  06CA  00D9               	movwf	Lights_Control@lights
  7520                           
  7521                           ;TriacRelay_B1.c: 235: LightsPointSelect(lights);
  7522  06CB  0859               	movf	Lights_Control@lights,w
  7523  06CC  158A  22C4  118A   	fcall	_LightsPointSelect
  7524                           
  7525                           ;TriacRelay_B1.c: 236: if (Lights->GO == 1) {
  7526  06CF  0878               	movf	_Lights,w
  7527  06D0  0084               	movwf	4
  7528  06D1  1383               	bcf	3,7	;select IRP bank0
  7529  06D2  1C80               	btfss	0,1
  7530  06D3  0008               	return
  7531                           
  7532                           ;TriacRelay_B1.c: 237: Lights->Time++;
  7533  06D4  3001               	movlw	1
  7534  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  7535  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  7536  06D7  00D7               	movwf	??_Lights_Control
  7537  06D8  0878               	movf	_Lights,w
  7538  06D9  3E02               	addlw	2
  7539  06DA  0084               	movwf	4
  7540  06DB  0857               	movf	??_Lights_Control,w
  7541  06DC  0780               	addwf	0,f
  7542                           
  7543                           ;TriacRelay_B1.c: 238: if (Lights->RelaySet == 0) {
  7544  06DD  0878               	movf	_Lights,w
  7545  06DE  0084               	movwf	4
  7546  06DF  1B80               	btfsc	0,7
  7547  06E0  2F17               	goto	l4862
  7548                           
  7549                           ;TriacRelay_B1.c: 239: if (Lights->Time >= (Lights->RelayValue / 20)) {
  7550  06E1  3014               	movlw	20
  7551  06E2  00CF               	movwf	___awdiv@divisor
  7552  06E3  3000               	movlw	0
  7553  06E4  00D0               	movwf	___awdiv@divisor+1
  7554  06E5  0878               	movf	_Lights,w
  7555  06E6  3E04               	addlw	4
  7556  06E7  0084               	movwf	4
  7557  06E8  0800               	movf	0,w
  7558  06E9  00D7               	movwf	??_Lights_Control
  7559  06EA  01D8               	clrf	??_Lights_Control+1
  7560  06EB  0857               	movf	??_Lights_Control,w
  7561  06EC  00D1               	movwf	___awdiv@dividend
  7562  06ED  0858               	movf	??_Lights_Control+1,w
  7563  06EE  00D2               	movwf	___awdiv@dividend+1
  7564  06EF  158A  26D8  118A   	fcall	___awdiv
  7565  06F2  0878               	movf	_Lights,w
  7566  06F3  3E02               	addlw	2
  7567  06F4  0084               	movwf	4
  7568  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  7569  06F6  1303               	bcf	3,6	;RP1=0, select bank0
  7570  06F7  0850               	movf	?___awdiv+1,w
  7571  06F8  3A80               	xorlw	128
  7572  06F9  3C80               	sublw	128
  7573  06FA  1D03               	skipz
  7574  06FB  2EFF               	goto	u5785
  7575  06FC  084F               	movf	?___awdiv,w
  7576  06FD  1383               	bcf	3,7	;select IRP bank0
  7577  06FE  0200               	subwf	0,w
  7578  06FF                     u5785:	
  7579  06FF  1C03               	skipc
  7580  0700  0008               	return
  7581                           
  7582                           ;TriacRelay_B1.c: 240: Lights->RelaySet = 1;
  7583  0701  0878               	movf	_Lights,w
  7584  0702  0084               	movwf	4
  7585  0703  1383               	bcf	3,7	;select IRP bank0
  7586  0704  1780               	bsf	0,7
  7587                           
  7588                           ;TriacRelay_B1.c: 242: if (lights == 1) {
  7589  0705  1283               	bcf	3,5	;RP0=0, select bank0
  7590  0706  1303               	bcf	3,6	;RP1=0, select bank0
  7591  0707  0859               	movf	Lights_Control@lights,w
  7592  0708  3A01               	xorlw	1
  7593  0709  1D03               	skipz
  7594  070A  0008               	return
  7595                           
  7596                           ;TriacRelay_B1.c: 243: RB3 = Lights->Status == 1 ? 1 : 0;
  7597  070B  0878               	movf	_Lights,w
  7598  070C  0084               	movwf	4
  7599  070D  1D00               	btfss	0,2
  7600  070E  2F13               	goto	u5800
  7601  070F  1283               	bcf	3,5	;RP0=0, select bank0
  7602  0710  1303               	bcf	3,6	;RP1=0, select bank0
  7603  0711  1586               	bsf	6,3	;volatile
  7604  0712  0008               	return
  7605  0713                     u5800:	
  7606  0713  1283               	bcf	3,5	;RP0=0, select bank0
  7607  0714  1303               	bcf	3,6	;RP1=0, select bank0
  7608  0715  1186               	bcf	6,3	;volatile
  7609                           
  7610                           ;TriacRelay_B1.c: 244: }
  7611                           ;TriacRelay_B1.c: 256: }
  7612                           ;TriacRelay_B1.c: 257: } else {
  7613  0716  0008               	return
  7614  0717                     l4862:	
  7615                           
  7616                           ;TriacRelay_B1.c: 258: if (Lights->Time >= (Lights->TriacValue / 20)) {
  7617  0717  3014               	movlw	20
  7618  0718  00CF               	movwf	___awdiv@divisor
  7619  0719  3000               	movlw	0
  7620  071A  00D0               	movwf	___awdiv@divisor+1
  7621  071B  0878               	movf	_Lights,w
  7622  071C  3E03               	addlw	3
  7623  071D  0084               	movwf	4
  7624  071E  1383               	bcf	3,7	;select IRP bank0
  7625  071F  0800               	movf	0,w
  7626  0720  00D7               	movwf	??_Lights_Control
  7627  0721  01D8               	clrf	??_Lights_Control+1
  7628  0722  0857               	movf	??_Lights_Control,w
  7629  0723  00D1               	movwf	___awdiv@dividend
  7630  0724  0858               	movf	??_Lights_Control+1,w
  7631  0725  00D2               	movwf	___awdiv@dividend+1
  7632  0726  158A  26D8  118A   	fcall	___awdiv
  7633  0729  0878               	movf	_Lights,w
  7634  072A  3E02               	addlw	2
  7635  072B  0084               	movwf	4
  7636  072C  1283               	bcf	3,5	;RP0=0, select bank0
  7637  072D  1303               	bcf	3,6	;RP1=0, select bank0
  7638  072E  0850               	movf	?___awdiv+1,w
  7639  072F  3A80               	xorlw	128
  7640  0730  3C80               	sublw	128
  7641  0731  1D03               	skipz
  7642  0732  2F36               	goto	u5825
  7643  0733  084F               	movf	?___awdiv,w
  7644  0734  1383               	bcf	3,7	;select IRP bank0
  7645  0735  0200               	subwf	0,w
  7646  0736                     u5825:	
  7647  0736  1C03               	skipc
  7648  0737  0008               	return
  7649                           
  7650                           ;TriacRelay_B1.c: 259: Lights->Time = 0;
  7651  0738  0878               	movf	_Lights,w
  7652  0739  3E02               	addlw	2
  7653  073A  0084               	movwf	4
  7654  073B  1383               	bcf	3,7	;select IRP bank0
  7655  073C  0180               	clrf	0
  7656                           
  7657                           ;TriacRelay_B1.c: 260: Lights->GO = 0;
  7658  073D  0878               	movf	_Lights,w
  7659  073E  0084               	movwf	4
  7660  073F  1080               	bcf	0,1
  7661                           
  7662                           ;TriacRelay_B1.c: 261: Lights->RelaySet = 0;
  7663  0740  0878               	movf	_Lights,w
  7664  0741  0084               	movwf	4
  7665  0742  1380               	bcf	0,7
  7666                           
  7667                           ;TriacRelay_B1.c: 264: if (lights == 1) {
  7668  0743  1283               	bcf	3,5	;RP0=0, select bank0
  7669  0744  1303               	bcf	3,6	;RP1=0, select bank0
  7670  0745  0859               	movf	Lights_Control@lights,w
  7671  0746  3A01               	xorlw	1
  7672  0747  1D03               	skipz
  7673  0748  0008               	return
  7674                           
  7675                           ;TriacRelay_B1.c: 265: RB2 = 0;
  7676  0749  1106               	bcf	6,2	;volatile
  7677  074A  0008               	return
  7678  074B                     __end_of_Lights_Control:	
  7679                           
  7680                           	psect	text45
  7681  0ED8                     __ptext45:	
  7682 ;; *************** function ___awdiv *****************
  7683 ;; Defined at:
  7684 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;  divisor         2    0[BANK0 ] int 
  7687 ;;  dividend        2    2[BANK0 ] int 
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;  quotient        2    6[BANK0 ] int 
  7690 ;;  sign            1    5[BANK0 ] unsigned char 
  7691 ;;  counter         1    4[BANK0 ] unsigned char 
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  2    0[BANK0 ] int 
  7694 ;; Registers used:
  7695 ;;		wreg, status,2, status,0
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7701 ;;      Params:         0       4       0       0
  7702 ;;      Locals:         0       4       0       0
  7703 ;;      Temps:          1       0       0       0
  7704 ;;      Totals:         1       8       0       0
  7705 ;;Total ram usage:        9 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; Hardware stack levels required when called:    2
  7708 ;; This function calls:
  7709 ;;		Nothing
  7710 ;; This function is called by:
  7711 ;;		_setTemp_Main
  7712 ;;		_getPIR_AD
  7713 ;;		_Lights_Control
  7714 ;; This function uses a non-reentrant model
  7715 ;;
  7716                           
  7717                           
  7718                           ;psect for function ___awdiv
  7719  0ED8                     ___awdiv:	
  7720                           
  7721                           ;incstack = 0
  7722                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7723  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  7724  0ED9  1303               	bcf	3,6	;RP1=0, select bank0
  7725  0EDA  01D4               	clrf	___awdiv@sign
  7726  0EDB  1FD0               	btfss	___awdiv@divisor+1,7
  7727  0EDC  2EE4               	goto	l4638
  7728  0EDD  09CF               	comf	___awdiv@divisor,f
  7729  0EDE  09D0               	comf	___awdiv@divisor+1,f
  7730  0EDF  0ACF               	incf	___awdiv@divisor,f
  7731  0EE0  1903               	skipnz
  7732  0EE1  0AD0               	incf	___awdiv@divisor+1,f
  7733  0EE2  01D4               	clrf	___awdiv@sign
  7734  0EE3  0AD4               	incf	___awdiv@sign,f
  7735  0EE4                     l4638:	
  7736  0EE4  1FD2               	btfss	___awdiv@dividend+1,7
  7737  0EE5  2EEF               	goto	l4644
  7738  0EE6  09D1               	comf	___awdiv@dividend,f
  7739  0EE7  09D2               	comf	___awdiv@dividend+1,f
  7740  0EE8  0AD1               	incf	___awdiv@dividend,f
  7741  0EE9  1903               	skipnz
  7742  0EEA  0AD2               	incf	___awdiv@dividend+1,f
  7743  0EEB  3001               	movlw	1
  7744  0EEC  00F4               	movwf	??___awdiv
  7745  0EED  0874               	movf	??___awdiv,w
  7746  0EEE  06D4               	xorwf	___awdiv@sign,f
  7747  0EEF                     l4644:	
  7748  0EEF  01D5               	clrf	___awdiv@quotient
  7749  0EF0  01D6               	clrf	___awdiv@quotient+1
  7750  0EF1  0850               	movf	___awdiv@divisor+1,w
  7751  0EF2  044F               	iorwf	___awdiv@divisor,w
  7752  0EF3  1903               	skipnz
  7753  0EF4  2F26               	goto	l4666
  7754  0EF5  01D3               	clrf	___awdiv@counter
  7755  0EF6  0AD3               	incf	___awdiv@counter,f
  7756  0EF7                     l4654:	
  7757  0EF7  1BD0               	btfsc	___awdiv@divisor+1,7
  7758  0EF8  2F05               	goto	l4656
  7759  0EF9  3001               	movlw	1
  7760  0EFA                     u5345:	
  7761  0EFA  1003               	clrc
  7762  0EFB  0DCF               	rlf	___awdiv@divisor,f
  7763  0EFC  0DD0               	rlf	___awdiv@divisor+1,f
  7764  0EFD  3EFF               	addlw	-1
  7765  0EFE  1D03               	skipz
  7766  0EFF  2EFA               	goto	u5345
  7767  0F00  3001               	movlw	1
  7768  0F01  00F4               	movwf	??___awdiv
  7769  0F02  0874               	movf	??___awdiv,w
  7770  0F03  07D3               	addwf	___awdiv@counter,f
  7771  0F04  2EF7               	goto	l4654
  7772  0F05                     l4656:	
  7773  0F05  3001               	movlw	1
  7774  0F06                     u5365:	
  7775  0F06  1003               	clrc
  7776  0F07  0DD5               	rlf	___awdiv@quotient,f
  7777  0F08  0DD6               	rlf	___awdiv@quotient+1,f
  7778  0F09  3EFF               	addlw	-1
  7779  0F0A  1D03               	skipz
  7780  0F0B  2F06               	goto	u5365
  7781  0F0C  0850               	movf	___awdiv@divisor+1,w
  7782  0F0D  0252               	subwf	___awdiv@dividend+1,w
  7783  0F0E  1D03               	skipz
  7784  0F0F  2F12               	goto	u5375
  7785  0F10  084F               	movf	___awdiv@divisor,w
  7786  0F11  0251               	subwf	___awdiv@dividend,w
  7787  0F12                     u5375:	
  7788  0F12  1C03               	skipc
  7789  0F13  2F1B               	goto	l4662
  7790  0F14  084F               	movf	___awdiv@divisor,w
  7791  0F15  02D1               	subwf	___awdiv@dividend,f
  7792  0F16  0850               	movf	___awdiv@divisor+1,w
  7793  0F17  1C03               	skipc
  7794  0F18  03D2               	decf	___awdiv@dividend+1,f
  7795  0F19  02D2               	subwf	___awdiv@dividend+1,f
  7796  0F1A  1455               	bsf	___awdiv@quotient,0
  7797  0F1B                     l4662:	
  7798  0F1B  3001               	movlw	1
  7799  0F1C                     u5385:	
  7800  0F1C  1003               	clrc
  7801  0F1D  0CD0               	rrf	___awdiv@divisor+1,f
  7802  0F1E  0CCF               	rrf	___awdiv@divisor,f
  7803  0F1F  3EFF               	addlw	-1
  7804  0F20  1D03               	skipz
  7805  0F21  2F1C               	goto	u5385
  7806  0F22  3001               	movlw	1
  7807  0F23  02D3               	subwf	___awdiv@counter,f
  7808  0F24  1D03               	btfss	3,2
  7809  0F25  2F05               	goto	l4656
  7810  0F26                     l4666:	
  7811  0F26  0854               	movf	___awdiv@sign,w
  7812  0F27  1903               	btfsc	3,2
  7813  0F28  2F2E               	goto	l4670
  7814  0F29  09D5               	comf	___awdiv@quotient,f
  7815  0F2A  09D6               	comf	___awdiv@quotient+1,f
  7816  0F2B  0AD5               	incf	___awdiv@quotient,f
  7817  0F2C  1903               	skipnz
  7818  0F2D  0AD6               	incf	___awdiv@quotient+1,f
  7819  0F2E                     l4670:	
  7820  0F2E  0856               	movf	___awdiv@quotient+1,w
  7821  0F2F  01D0               	clrf	?___awdiv+1
  7822  0F30  07D0               	addwf	?___awdiv+1,f
  7823  0F31  0855               	movf	___awdiv@quotient,w
  7824  0F32  01CF               	clrf	?___awdiv
  7825  0F33  07CF               	addwf	?___awdiv,f
  7826  0F34  0008               	return
  7827  0F35                     __end_of___awdiv:	
  7828                           
  7829                           	psect	text46
  7830  0A65                     __ptext46:	
  7831 ;; *************** function _Lights_Initialization *****************
  7832 ;; Defined at:
  7833 ;;		line 32 in file "../src/TriacRelay_B1.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;		None
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;		None
  7838 ;; Return value:  Size  Location     Type
  7839 ;;		None               void
  7840 ;; Registers used:
  7841 ;;		wreg, status,2, status,0, pclath, cstack
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7847 ;;      Params:         0       0       0       0
  7848 ;;      Locals:         0       0       0       0
  7849 ;;      Temps:          0       0       0       0
  7850 ;;      Totals:         0       0       0       0
  7851 ;;Total ram usage:        0 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    4
  7854 ;; This function calls:
  7855 ;;		_setLights_Initialization
  7856 ;; This function is called by:
  7857 ;;		_main
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           
  7862                           ;psect for function _Lights_Initialization
  7863  0A65                     _Lights_Initialization:	
  7864                           
  7865                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  7866                           
  7867                           ;incstack = 0
  7868                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7869  0A65  3001               	movlw	1
  7870  0A66  158A  2284         	fcall	_setLights_Initialization
  7871  0A68  0008               	return
  7872  0A69                     __end_of_Lights_Initialization:	
  7873                           
  7874                           	psect	text47
  7875  0A84                     __ptext47:	
  7876 ;; *************** function _setLights_Initialization *****************
  7877 ;; Defined at:
  7878 ;;		line 47 in file "../src/TriacRelay_B1.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  lights          1    wreg     unsigned char 
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;  lights          1    0[BANK0 ] unsigned char 
  7883 ;; Return value:  Size  Location     Type
  7884 ;;		None               void
  7885 ;; Registers used:
  7886 ;;		wreg, status,2, status,0, pclath, cstack
  7887 ;; Tracked objects:
  7888 ;;		On entry : 0/0
  7889 ;;		On exit  : 0/0
  7890 ;;		Unchanged: 0/0
  7891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7892 ;;      Params:         0       0       0       0
  7893 ;;      Locals:         0       1       0       0
  7894 ;;      Temps:          0       0       0       0
  7895 ;;      Totals:         0       1       0       0
  7896 ;;Total ram usage:        1 bytes
  7897 ;; Hardware stack levels used:    1
  7898 ;; Hardware stack levels required when called:    3
  7899 ;; This function calls:
  7900 ;;		_LightsPointSelect
  7901 ;; This function is called by:
  7902 ;;		_Lights_Initialization
  7903 ;; This function uses a non-reentrant model
  7904 ;;
  7905                           
  7906                           
  7907                           ;psect for function _setLights_Initialization
  7908  0A84                     _setLights_Initialization:	
  7909                           
  7910                           ;incstack = 0
  7911                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7912                           ;setLights_Initialization@lights stored from wreg
  7913  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  7914  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  7915  0A86  00CF               	movwf	setLights_Initialization@lights
  7916                           
  7917                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  7918  0A87  084F               	movf	setLights_Initialization@lights,w
  7919  0A88  158A  22C4         	fcall	_LightsPointSelect
  7920  0A8A  0008               	return
  7921  0A8B                     __end_of_setLights_Initialization:	
  7922                           
  7923                           	psect	text48
  7924  0A4F                     __ptext48:	
  7925 ;; *************** function _LED_Main *****************
  7926 ;; Defined at:
  7927 ;;		line 47 in file "../src/LED_B1.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;		None
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;		None
  7932 ;; Return value:  Size  Location     Type
  7933 ;;		None               void
  7934 ;; Registers used:
  7935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7941 ;;      Params:         0       0       0       0
  7942 ;;      Locals:         0       0       0       0
  7943 ;;      Temps:          0       0       0       0
  7944 ;;      Totals:         0       0       0       0
  7945 ;;Total ram usage:        0 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    5
  7948 ;; This function calls:
  7949 ;;		_setPIRLED_Main
  7950 ;; This function is called by:
  7951 ;;		_main
  7952 ;; This function uses a non-reentrant model
  7953 ;;
  7954                           
  7955                           
  7956                           ;psect for function _LED_Main
  7957  0A4F                     _LED_Main:	
  7958                           
  7959                           ;LED_B1.c: 55: setPIRLED_Main();
  7960                           
  7961                           ;incstack = 0
  7962                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7963  0A4F  118A  274B         	fcall	_setPIRLED_Main
  7964  0A51  0008               	return
  7965  0A52                     __end_of_LED_Main:	
  7966                           
  7967                           	psect	text49
  7968  074B                     __ptext49:	
  7969 ;; *************** function _setPIRLED_Main *****************
  7970 ;; Defined at:
  7971 ;;		line 265 in file "../src/LED_B1.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;		None
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;  count           1    3[BANK0 ] unsigned char 
  7976 ;; Return value:  Size  Location     Type
  7977 ;;		None               void
  7978 ;; Registers used:
  7979 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7985 ;;      Params:         0       0       0       0
  7986 ;;      Locals:         0       1       0       0
  7987 ;;      Temps:          0       1       0       0
  7988 ;;      Totals:         0       2       0       0
  7989 ;;Total ram usage:        2 bytes
  7990 ;; Hardware stack levels used:    1
  7991 ;; Hardware stack levels required when called:    4
  7992 ;; This function calls:
  7993 ;;		_setLED
  7994 ;; This function is called by:
  7995 ;;		_LED_Main
  7996 ;; This function uses a non-reentrant model
  7997 ;;
  7998                           
  7999                           
  8000                           ;psect for function _setPIRLED_Main
  8001  074B                     _setPIRLED_Main:	
  8002                           
  8003                           ;LED_B1.c: 267: char count;
  8004                           ;LED_B1.c: 268: if (PIRLED.GO == 1) {
  8005                           
  8006                           ;incstack = 0
  8007                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8008  074B  1283               	bcf	3,5	;RP0=0, select bank0
  8009  074C  1303               	bcf	3,6	;RP1=0, select bank0
  8010  074D  1C2A               	btfss	_PIRLED,0
  8011  074E  0008               	return
  8012                           
  8013                           ;LED_B1.c: 269: PIRLED.Time++;
  8014  074F  3001               	movlw	1
  8015  0750  07AC               	addwf	_PIRLED+2,f
  8016  0751  1803               	skipnc
  8017  0752  0AAD               	incf	_PIRLED+3,f
  8018  0753  3000               	movlw	0
  8019  0754  07AD               	addwf	_PIRLED+3,f
  8020                           
  8021                           ;LED_B1.c: 270: if (PIRLED.Time >= 500 / 20) {
  8022  0755  3000               	movlw	0
  8023  0756  022D               	subwf	_PIRLED+3,w
  8024  0757  3019               	movlw	25
  8025  0758  1903               	skipnz
  8026  0759  022C               	subwf	_PIRLED+2,w
  8027  075A  1C03               	skipc
  8028  075B  0008               	return
  8029                           
  8030                           ;LED_B1.c: 271: PIRLED.Time = 0;
  8031  075C  01AC               	clrf	_PIRLED+2
  8032  075D  01AD               	clrf	_PIRLED+3
  8033                           
  8034                           ;LED_B1.c: 272: setLED(1, 0);
  8035  075E  01CF               	clrf	setLED@command
  8036  075F  3001               	movlw	1
  8037  0760  158A  2735  118A   	fcall	_setLED
  8038                           
  8039                           ;LED_B1.c: 273: setLED(2, 0);
  8040  0763  1283               	bcf	3,5	;RP0=0, select bank0
  8041  0764  1303               	bcf	3,6	;RP1=0, select bank0
  8042  0765  01CF               	clrf	setLED@command
  8043  0766  3002               	movlw	2
  8044  0767  158A  2735  118A   	fcall	_setLED
  8045                           
  8046                           ;LED_B1.c: 274: if (PIRLED.GO1 == 1) {
  8047  076A  1283               	bcf	3,5	;RP0=0, select bank0
  8048  076B  1303               	bcf	3,6	;RP1=0, select bank0
  8049  076C  1CAA               	btfss	_PIRLED,1
  8050  076D  2F72               	goto	l4710
  8051                           
  8052                           ;LED_B1.c: 275: count = 4;
  8053  076E  3004               	movlw	4
  8054  076F  00D1               	movwf	??_setPIRLED_Main
  8055  0770  0851               	movf	??_setPIRLED_Main,w
  8056  0771  00D2               	movwf	setPIRLED_Main@count
  8057  0772                     l4710:	
  8058                           
  8059                           ;LED_B1.c: 276: }
  8060                           ;LED_B1.c: 277: if (PIRLED.GO2 == 1) {
  8061  0772  1D2A               	btfss	_PIRLED,2
  8062  0773  2F78               	goto	l4714
  8063                           
  8064                           ;LED_B1.c: 278: count = 6;
  8065  0774  3006               	movlw	6
  8066  0775  00D1               	movwf	??_setPIRLED_Main
  8067  0776  0851               	movf	??_setPIRLED_Main,w
  8068  0777  00D2               	movwf	setPIRLED_Main@count
  8069  0778                     l4714:	
  8070                           
  8071                           ;LED_B1.c: 279: }
  8072                           ;LED_B1.c: 280: if (PIRLED.GO3 == 1) {
  8073  0778  1DAA               	btfss	_PIRLED,3
  8074  0779  2F7E               	goto	l4718
  8075                           
  8076                           ;LED_B1.c: 281: count = 8;
  8077  077A  3008               	movlw	8
  8078  077B  00D1               	movwf	??_setPIRLED_Main
  8079  077C  0851               	movf	??_setPIRLED_Main,w
  8080  077D  00D2               	movwf	setPIRLED_Main@count
  8081  077E                     l4718:	
  8082                           
  8083                           ;LED_B1.c: 282: }
  8084                           ;LED_B1.c: 283: PIRLED.Count++;
  8085  077E  3001               	movlw	1
  8086  077F  00D1               	movwf	??_setPIRLED_Main
  8087  0780  0851               	movf	??_setPIRLED_Main,w
  8088  0781  07AB               	addwf	_PIRLED+1,f
  8089                           
  8090                           ;LED_B1.c: 284: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  8091  0782  082B               	movf	_PIRLED+1,w
  8092  0783  3A01               	xorlw	1
  8093  0784  1903               	skipnz
  8094  0785  2F8A               	goto	l4724
  8095  0786  082B               	movf	_PIRLED+1,w
  8096  0787  3A02               	xorlw	2
  8097  0788  1D03               	skipz
  8098  0789  2F9E               	goto	l4728
  8099  078A                     l4724:	
  8100                           
  8101                           ;LED_B1.c: 285: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8102  078A  1003               	clrc
  8103  078B  1E2A               	btfss	_PIRLED,4
  8104  078C  1403               	setc
  8105  078D  1C03               	btfss	3,0
  8106  078E  2F93               	goto	u5500
  8107  078F  1283               	bcf	3,5	;RP0=0, select bank0
  8108  0790  1303               	bcf	3,6	;RP1=0, select bank0
  8109  0791  162A               	bsf	_PIRLED,4
  8110  0792  2F96               	goto	l4726
  8111  0793                     u5500:	
  8112  0793  1283               	bcf	3,5	;RP0=0, select bank0
  8113  0794  1303               	bcf	3,6	;RP1=0, select bank0
  8114  0795  122A               	bcf	_PIRLED,4
  8115  0796                     l4726:	
  8116                           
  8117                           ;LED_B1.c: 286: setLED(2, PIRLED.status);
  8118  0796  3000               	movlw	0
  8119  0797  1A2A               	btfsc	_PIRLED,4
  8120  0798  3001               	movlw	1
  8121  0799  00CF               	movwf	setLED@command
  8122  079A  3002               	movlw	2
  8123  079B  158A  2735         	fcall	_setLED
  8124                           
  8125                           ;LED_B1.c: 287: } else {
  8126  079D  0008               	return
  8127  079E                     l4728:	
  8128                           
  8129                           ;LED_B1.c: 288: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8130  079E  1003               	clrc
  8131  079F  1283               	bcf	3,5	;RP0=0, select bank0
  8132  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  8133  07A1  1E2A               	btfss	_PIRLED,4
  8134  07A2  1403               	setc
  8135  07A3  1C03               	btfss	3,0
  8136  07A4  2FA9               	goto	u5520
  8137  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  8138  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  8139  07A7  162A               	bsf	_PIRLED,4
  8140  07A8  2FAC               	goto	l4730
  8141  07A9                     u5520:	
  8142  07A9  1283               	bcf	3,5	;RP0=0, select bank0
  8143  07AA  1303               	bcf	3,6	;RP1=0, select bank0
  8144  07AB  122A               	bcf	_PIRLED,4
  8145  07AC                     l4730:	
  8146                           
  8147                           ;LED_B1.c: 289: setLED(1, PIRLED.status);
  8148  07AC  3000               	movlw	0
  8149  07AD  1A2A               	btfsc	_PIRLED,4
  8150  07AE  3001               	movlw	1
  8151  07AF  00CF               	movwf	setLED@command
  8152  07B0  3001               	movlw	1
  8153  07B1  158A  2735  118A   	fcall	_setLED
  8154                           
  8155                           ;LED_B1.c: 290: if (PIRLED.Count == count) {
  8156  07B4  1283               	bcf	3,5	;RP0=0, select bank0
  8157  07B5  1303               	bcf	3,6	;RP1=0, select bank0
  8158  07B6  082B               	movf	_PIRLED+1,w
  8159  07B7  0652               	xorwf	setPIRLED_Main@count,w
  8160  07B8  1D03               	skipz
  8161  07B9  0008               	return
  8162                           
  8163                           ;LED_B1.c: 291: PIRLED.Count = 0;
  8164  07BA  01AB               	clrf	_PIRLED+1
  8165  07BB  0008               	return
  8166  07BC                     __end_of_setPIRLED_Main:	
  8167                           
  8168                           	psect	text50
  8169  0A92                     __ptext50:	
  8170 ;; *************** function _LED_Initialization *****************
  8171 ;; Defined at:
  8172 ;;		line 31 in file "../src/LED_B1.c"
  8173 ;; Parameters:    Size  Location     Type
  8174 ;;		None
  8175 ;; Auto vars:     Size  Location     Type
  8176 ;;		None
  8177 ;; Return value:  Size  Location     Type
  8178 ;;		None               void
  8179 ;; Registers used:
  8180 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8181 ;; Tracked objects:
  8182 ;;		On entry : 0/0
  8183 ;;		On exit  : 0/0
  8184 ;;		Unchanged: 0/0
  8185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8186 ;;      Params:         0       0       0       0
  8187 ;;      Locals:         0       0       0       0
  8188 ;;      Temps:          0       0       0       0
  8189 ;;      Totals:         0       0       0       0
  8190 ;;Total ram usage:        0 bytes
  8191 ;; Hardware stack levels used:    1
  8192 ;; Hardware stack levels required when called:    5
  8193 ;; This function calls:
  8194 ;;		_setLED_Initialization
  8195 ;; This function is called by:
  8196 ;;		_main
  8197 ;; This function uses a non-reentrant model
  8198 ;;
  8199                           
  8200                           
  8201                           ;psect for function _LED_Initialization
  8202  0A92                     _LED_Initialization:	
  8203                           
  8204                           ;LED_B1.c: 33: setLED_Initialization(1);
  8205                           
  8206                           ;incstack = 0
  8207                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8208  0A92  3001               	movlw	1
  8209  0A93  158A  2361  158A   	fcall	_setLED_Initialization
  8210                           
  8211                           ;LED_B1.c: 36: setLED_Initialization(2);
  8212  0A96  3002               	movlw	2
  8213  0A97  158A  2361         	fcall	_setLED_Initialization
  8214  0A99  0008               	return
  8215  0A9A                     __end_of_LED_Initialization:	
  8216                           
  8217                           	psect	text51
  8218  0B61                     __ptext51:	
  8219 ;; *************** function _setLED_Initialization *****************
  8220 ;; Defined at:
  8221 ;;		line 74 in file "../src/LED_B1.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;  led             1    wreg     unsigned char 
  8224 ;; Auto vars:     Size  Location     Type
  8225 ;;  led             1    2[BANK0 ] unsigned char 
  8226 ;; Return value:  Size  Location     Type
  8227 ;;		None               void
  8228 ;; Registers used:
  8229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8230 ;; Tracked objects:
  8231 ;;		On entry : 0/0
  8232 ;;		On exit  : 0/0
  8233 ;;		Unchanged: 0/0
  8234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8235 ;;      Params:         0       0       0       0
  8236 ;;      Locals:         0       1       0       0
  8237 ;;      Temps:          0       0       0       0
  8238 ;;      Totals:         0       1       0       0
  8239 ;;Total ram usage:        1 bytes
  8240 ;; Hardware stack levels used:    1
  8241 ;; Hardware stack levels required when called:    4
  8242 ;; This function calls:
  8243 ;;		_LedPointSelect
  8244 ;;		_setLED
  8245 ;; This function is called by:
  8246 ;;		_LED_Initialization
  8247 ;; This function uses a non-reentrant model
  8248 ;;
  8249                           
  8250                           
  8251                           ;psect for function _setLED_Initialization
  8252  0B61                     _setLED_Initialization:	
  8253                           
  8254                           ;incstack = 0
  8255                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8256                           ;setLED_Initialization@led stored from wreg
  8257  0B61  1283               	bcf	3,5	;RP0=0, select bank0
  8258  0B62  1303               	bcf	3,6	;RP1=0, select bank0
  8259  0B63  00D1               	movwf	setLED_Initialization@led
  8260                           
  8261                           ;LED_B1.c: 75: LedPointSelect(led);
  8262  0B64  0851               	movf	setLED_Initialization@led,w
  8263  0B65  158A  234F  158A   	fcall	_LedPointSelect
  8264                           
  8265                           ;LED_B1.c: 76: LED->Enable = 1;
  8266  0B68  0876               	movf	_LED,w
  8267  0B69  0084               	movwf	4
  8268  0B6A  1383               	bcf	3,7	;select IRP bank0
  8269  0B6B  1400               	bsf	0,0
  8270                           
  8271                           ;LED_B1.c: 77: setLED(led, 0);
  8272  0B6C  1283               	bcf	3,5	;RP0=0, select bank0
  8273  0B6D  1303               	bcf	3,6	;RP1=0, select bank0
  8274  0B6E  01CF               	clrf	setLED@command
  8275  0B6F  0851               	movf	setLED_Initialization@led,w
  8276  0B70  158A  2735         	fcall	_setLED
  8277  0B72  0008               	return
  8278  0B73                     __end_of_setLED_Initialization:	
  8279                           
  8280                           	psect	text52
  8281  054F                     __ptext52:	
  8282 ;; *************** function _Exception_Main *****************
  8283 ;; Defined at:
  8284 ;;		line 504 in file "../src/Main_B1.c"
  8285 ;; Parameters:    Size  Location     Type
  8286 ;;		None
  8287 ;; Auto vars:     Size  Location     Type
  8288 ;;  i               2   12[BANK0 ] int 
  8289 ;;  i               2   10[BANK0 ] int 
  8290 ;;  error           1   14[BANK0 ] unsigned char 
  8291 ;;  status          1    9[BANK0 ] unsigned char 
  8292 ;;  count           1    8[BANK0 ] unsigned char 
  8293 ;;  lights          1    7[BANK0 ] unsigned char 
  8294 ;; Return value:  Size  Location     Type
  8295 ;;		None               void
  8296 ;; Registers used:
  8297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8298 ;; Tracked objects:
  8299 ;;		On entry : 0/0
  8300 ;;		On exit  : 0/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8303 ;;      Params:         0       0       0       0
  8304 ;;      Locals:         0       8       0       0
  8305 ;;      Temps:          0       1       0       0
  8306 ;;      Totals:         0       9       0       0
  8307 ;;Total ram usage:        9 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; Hardware stack levels required when called:    5
  8310 ;; This function calls:
  8311 ;;		_getAll_Lights_Line
  8312 ;;		_getLights_Status
  8313 ;;		_getMain_All_Error_Status
  8314 ;;		_getMain_All_LightsStatus
  8315 ;;		_setLED
  8316 ;;		_setLights_SwOff
  8317 ;;		_setLights_SwOn
  8318 ;; This function is called by:
  8319 ;;		_main
  8320 ;; This function uses a non-reentrant model
  8321 ;;
  8322                           
  8323                           
  8324                           ;psect for function _Exception_Main
  8325  054F                     _Exception_Main:	
  8326                           
  8327                           ;Main_B1.c: 505: char error = getMain_All_Error_Status(0);
  8328                           
  8329                           ;incstack = 0
  8330                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8331  054F  3000               	movlw	0
  8332  0550  158A  256E  118A   	fcall	_getMain_All_Error_Status
  8333  0553  1283               	bcf	3,5	;RP0=0, select bank0
  8334  0554  1303               	bcf	3,6	;RP1=0, select bank0
  8335  0555  00D5               	movwf	??_Exception_Main
  8336  0556  0855               	movf	??_Exception_Main,w
  8337  0557  00DD               	movwf	Exception_Main@error
  8338                           
  8339                           ;Main_B1.c: 506: char lights = 0, count = 1;
  8340  0558  01D6               	clrf	Exception_Main@lights
  8341  0559  01D7               	clrf	Exception_Main@count
  8342  055A  0AD7               	incf	Exception_Main@count,f
  8343                           
  8344                           ;Main_B1.c: 507: char status = 0;
  8345  055B  01D8               	clrf	Exception_Main@status
  8346                           
  8347                           ;Main_B1.c: 509: if (myMain.Error_Run == 1) {
  8348  055C  1DA7               	btfss	_myMain+2,3
  8349  055D  2D6A               	goto	l5434
  8350                           
  8351                           ;Main_B1.c: 510: if (error == 0) {
  8352  055E  08DD               	movf	Exception_Main@error,f
  8353  055F  1D03               	skipz
  8354  0560  0008               	return
  8355                           
  8356                           ;Main_B1.c: 511: myMain.Error_Run = 0;
  8357  0561  11A7               	bcf	_myMain+2,3
  8358                           
  8359                           ;Main_B1.c: 516: setLED(error, 110);
  8360  0562  306E               	movlw	110
  8361  0563  00D5               	movwf	??_Exception_Main
  8362  0564  0855               	movf	??_Exception_Main,w
  8363  0565  00CF               	movwf	setLED@command
  8364  0566  085D               	movf	Exception_Main@error,w
  8365  0567  158A  2735         	fcall	_setLED
  8366                           
  8367                           ;Main_B1.c: 527: }
  8368                           ;Main_B1.c: 528: } else {
  8369  0569  0008               	return
  8370  056A                     l5434:	
  8371                           
  8372                           ;Main_B1.c: 529: if (error != 0) {
  8373  056A  1283               	bcf	3,5	;RP0=0, select bank0
  8374  056B  1303               	bcf	3,6	;RP1=0, select bank0
  8375  056C  085D               	movf	Exception_Main@error,w
  8376  056D  1903               	btfsc	3,2
  8377  056E  0008               	return
  8378                           
  8379                           ;Main_B1.c: 530: myMain.Error_Run = 1;
  8380  056F  15A7               	bsf	_myMain+2,3
  8381                           
  8382                           ;Main_B1.c: 534: setLED(error, 111);
  8383  0570  306F               	movlw	111
  8384  0571  00D5               	movwf	??_Exception_Main
  8385  0572  0855               	movf	??_Exception_Main,w
  8386  0573  00CF               	movwf	setLED@command
  8387  0574  085D               	movf	Exception_Main@error,w
  8388  0575  158A  2735  118A   	fcall	_setLED
  8389                           
  8390                           ;Main_B1.c: 596: switch (error) {
  8391  0578  2E02               	goto	l5470
  8392  0579                     l5440:	
  8393                           ;Main_B1.c: 597: case 1:
  8394                           
  8395                           
  8396                           ;Main_B1.c: 598: for (int i = 0; i < count; i++) {
  8397  0579  1283               	bcf	3,5	;RP0=0, select bank0
  8398  057A  1303               	bcf	3,6	;RP1=0, select bank0
  8399  057B  01D9               	clrf	Exception_Main@i
  8400  057C  01DA               	clrf	Exception_Main@i+1
  8401  057D                     l5448:	
  8402  057D  085A               	movf	Exception_Main@i+1,w
  8403  057E  3A80               	xorlw	128
  8404  057F  00D5               	movwf	??_Exception_Main
  8405  0580  3080               	movlw	128
  8406  0581  0255               	subwf	??_Exception_Main,w
  8407  0582  1D03               	skipz
  8408  0583  2D86               	goto	u7095
  8409  0584  0857               	movf	Exception_Main@count,w
  8410  0585  0259               	subwf	Exception_Main@i,w
  8411  0586                     u7095:	
  8412  0586  1803               	btfsc	3,0
  8413  0587  2DA9               	goto	u7090
  8414                           
  8415                           ;Main_B1.c: 599: if (getLights_Status(i + 1) == 1) {
  8416  0588  1283               	bcf	3,5	;RP0=0, select bank0
  8417  0589  1303               	bcf	3,6	;RP1=0, select bank0
  8418  058A  0859               	movf	Exception_Main@i,w
  8419  058B  3E01               	addlw	1
  8420  058C  158A  232D  118A   	fcall	_getLights_Status
  8421  058F  3A01               	xorlw	1
  8422  0590  1D03               	skipz
  8423  0591  2DA0               	goto	l5446
  8424                           
  8425                           ;Main_B1.c: 601: setLights_SwOn(i + 1);
  8426  0592  1283               	bcf	3,5	;RP0=0, select bank0
  8427  0593  1303               	bcf	3,6	;RP1=0, select bank0
  8428  0594  0859               	movf	Exception_Main@i,w
  8429  0595  3E01               	addlw	1
  8430  0596  158A  24C0  118A   	fcall	_setLights_SwOn
  8431                           
  8432                           ;Main_B1.c: 602: setLights_SwOff(i + 1);
  8433  0599  1283               	bcf	3,5	;RP0=0, select bank0
  8434  059A  1303               	bcf	3,6	;RP1=0, select bank0
  8435  059B  0859               	movf	Exception_Main@i,w
  8436  059C  3E01               	addlw	1
  8437  059D  158A  23FB  118A   	fcall	_setLights_SwOff
  8438  05A0                     l5446:	
  8439  05A0  3001               	movlw	1
  8440  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  8441  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  8442  05A3  07D9               	addwf	Exception_Main@i,f
  8443  05A4  1803               	skipnc
  8444  05A5  0ADA               	incf	Exception_Main@i+1,f
  8445  05A6  3000               	movlw	0
  8446  05A7  07DA               	addwf	Exception_Main@i+1,f
  8447  05A8  2D7D               	goto	l5448
  8448  05A9                     u7090:	
  8449  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  8450  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  8451  05AB  0008               	return
  8452  05AC                     l5450:	
  8453                           ;Main_B1.c: 606: case 2:
  8454                           
  8455                           ;Main_B1.c: 603: }
  8456                           ;Main_B1.c: 604: }
  8457                           ;Main_B1.c: 605: break;
  8458                           
  8459                           
  8460                           ;Main_B1.c: 607: if (getMain_All_LightsStatus() == 1) {
  8461  05AC  158A  22BB  118A   	fcall	_getMain_All_LightsStatus
  8462                           
  8463                           ;Main_B1.c: 609: }
  8464                           ;Main_B1.c: 611: for (int i = 0; i < count; i++) {
  8465                           
  8466                           ;Main_B1.c: 608: ;;
  8467  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  8468  05B0  1303               	bcf	3,6	;RP1=0, select bank0
  8469  05B1  01DB               	clrf	Exception_Main@i_2379
  8470  05B2  01DC               	clrf	Exception_Main@i_2379+1
  8471  05B3                     l5460:	
  8472  05B3  085C               	movf	Exception_Main@i_2379+1,w
  8473  05B4  3A80               	xorlw	128
  8474  05B5  00D5               	movwf	??_Exception_Main
  8475  05B6  3080               	movlw	128
  8476  05B7  0255               	subwf	??_Exception_Main,w
  8477  05B8  1D03               	skipz
  8478  05B9  2DBC               	goto	u7115
  8479  05BA  0857               	movf	Exception_Main@count,w
  8480  05BB  025B               	subwf	Exception_Main@i_2379,w
  8481  05BC                     u7115:	
  8482  05BC  1803               	btfsc	3,0
  8483  05BD  2DDF               	goto	u7110
  8484                           
  8485                           ;Main_B1.c: 612: if (getLights_Status(i + 1) == 1) {
  8486  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  8487  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  8488  05C0  085B               	movf	Exception_Main@i_2379,w
  8489  05C1  3E01               	addlw	1
  8490  05C2  158A  232D  118A   	fcall	_getLights_Status
  8491  05C5  3A01               	xorlw	1
  8492  05C6  1D03               	skipz
  8493  05C7  2DD6               	goto	l5458
  8494                           
  8495                           ;Main_B1.c: 613: setLights_SwOn(i + 1);
  8496  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  8497  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  8498  05CA  085B               	movf	Exception_Main@i_2379,w
  8499  05CB  3E01               	addlw	1
  8500  05CC  158A  24C0  118A   	fcall	_setLights_SwOn
  8501                           
  8502                           ;Main_B1.c: 614: setLights_SwOff(i + 1);
  8503  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  8504  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  8505  05D1  085B               	movf	Exception_Main@i_2379,w
  8506  05D2  3E01               	addlw	1
  8507  05D3  158A  23FB  118A   	fcall	_setLights_SwOff
  8508  05D6                     l5458:	
  8509  05D6  3001               	movlw	1
  8510  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  8511  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  8512  05D9  07DB               	addwf	Exception_Main@i_2379,f
  8513  05DA  1803               	skipnc
  8514  05DB  0ADC               	incf	Exception_Main@i_2379+1,f
  8515  05DC  3000               	movlw	0
  8516  05DD  07DC               	addwf	Exception_Main@i_2379+1,f
  8517  05DE  2DB3               	goto	l5460
  8518  05DF                     u7110:	
  8519  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  8520  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  8521  05E1  0008               	return
  8522  05E2                     l5462:	
  8523                           ;Main_B1.c: 618: case 3:
  8524                           
  8525                           ;Main_B1.c: 615: }
  8526                           ;Main_B1.c: 616: }
  8527                           ;Main_B1.c: 617: break;
  8528                           
  8529                           
  8530                           ;Main_B1.c: 619: status = getAll_Lights_Line();
  8531  05E2  158A  22B2  118A   	fcall	_getAll_Lights_Line
  8532  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  8533  05E6  1303               	bcf	3,6	;RP1=0, select bank0
  8534  05E7  00D5               	movwf	??_Exception_Main
  8535  05E8  0855               	movf	??_Exception_Main,w
  8536  05E9  00D8               	movwf	Exception_Main@status
  8537                           
  8538                           ;Main_B1.c: 621: if (getLights_Status(status) == 1) {
  8539  05EA  0858               	movf	Exception_Main@status,w
  8540  05EB  158A  232D  118A   	fcall	_getLights_Status
  8541  05EE  3A01               	xorlw	1
  8542  05EF  1903               	btfsc	3,2
  8543  05F0  2DF4               	goto	l5466
  8544  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  8545  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  8546  05F3  0008               	return
  8547  05F4                     l5466:	
  8548                           
  8549                           ;Main_B1.c: 622: setLights_SwOn(status);
  8550  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  8551  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  8552  05F6  0858               	movf	Exception_Main@status,w
  8553  05F7  158A  24C0  118A   	fcall	_setLights_SwOn
  8554                           
  8555                           ;Main_B1.c: 623: setLights_SwOff(status);
  8556  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  8557  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  8558  05FC  0858               	movf	Exception_Main@status,w
  8559  05FD  158A  23FB         	fcall	_setLights_SwOff
  8560  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  8561  0600  1303               	bcf	3,6	;RP1=0, select bank0
  8562  0601  0008               	return
  8563  0602                     l5470:	
  8564                           ;Main_B1.c: 628: }
  8565                           
  8566                           ;Main_B1.c: 625: }
  8567                           ;Main_B1.c: 626: ;;
  8568                           ;Main_B1.c: 627: break;
  8569                           
  8570  0602  1283               	bcf	3,5	;RP0=0, select bank0
  8571  0603  1303               	bcf	3,6	;RP1=0, select bank0
  8572  0604  085D               	movf	Exception_Main@error,w
  8573                           
  8574                           ; Switch size 1, requested type "space"
  8575                           ; Number of cases is 3, Range of values is 1 to 3
  8576                           ; switch strategies available:
  8577                           ; Name         Instructions Cycles
  8578                           ; simple_byte           10     6 (average)
  8579                           ; direct_byte           16    10 (fixed)
  8580                           ; jumptable            263     9 (fixed)
  8581                           ;	Chosen strategy is simple_byte
  8582  0605  3A01               	xorlw	1	; case 1
  8583  0606  1903               	skipnz
  8584  0607  2D79               	goto	l5440
  8585  0608  3A03               	xorlw	3	; case 2
  8586  0609  1903               	skipnz
  8587  060A  2DAC               	goto	l5450
  8588  060B  3A01               	xorlw	1	; case 3
  8589  060C  1903               	skipnz
  8590  060D  2DE2               	goto	l5462
  8591  060E  2E10               	goto	l637
  8592  060F  0008               	return
  8593  0610                     l637:	
  8594  0610  0008               	return
  8595  0611                     __end_of_Exception_Main:	
  8596                           
  8597                           	psect	text53
  8598  0CC0                     __ptext53:	
  8599 ;; *************** function _setLights_SwOn *****************
  8600 ;; Defined at:
  8601 ;;		line 424 in file "../src/TriacRelay_B1.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;  sw              1    wreg     unsigned char 
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;  sw              1    3[BANK0 ] unsigned char 
  8606 ;; Return value:  Size  Location     Type
  8607 ;;		None               void
  8608 ;; Registers used:
  8609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8615 ;;      Params:         0       0       0       0
  8616 ;;      Locals:         0       1       0       0
  8617 ;;      Temps:          0       0       0       0
  8618 ;;      Totals:         0       1       0       0
  8619 ;;Total ram usage:        1 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    4
  8622 ;; This function calls:
  8623 ;;		_LightsPointSelect
  8624 ;;		_getLights_Status
  8625 ;;		_setLights_Trigger
  8626 ;; This function is called by:
  8627 ;;		_Exception_Main
  8628 ;;		_PIR_Main
  8629 ;; This function uses a non-reentrant model
  8630 ;;
  8631                           
  8632                           
  8633                           ;psect for function _setLights_SwOn
  8634  0CC0                     _setLights_SwOn:	
  8635                           
  8636                           ;incstack = 0
  8637                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8638                           ;setLights_SwOn@sw stored from wreg
  8639  0CC0  1283               	bcf	3,5	;RP0=0, select bank0
  8640  0CC1  1303               	bcf	3,6	;RP1=0, select bank0
  8641  0CC2  00D2               	movwf	setLights_SwOn@sw
  8642                           
  8643                           ;TriacRelay_B1.c: 425: LightsPointSelect(sw);
  8644  0CC3  0852               	movf	setLights_SwOn@sw,w
  8645  0CC4  158A  22C4  158A   	fcall	_LightsPointSelect
  8646                           
  8647                           ;TriacRelay_B1.c: 428: Lights->SwFlag = 1;
  8648  0CC7  0A78               	incf	_Lights,w
  8649  0CC8  0084               	movwf	4
  8650  0CC9  1383               	bcf	3,7	;select IRP bank0
  8651  0CCA  1500               	bsf	0,2
  8652                           
  8653                           ;TriacRelay_B1.c: 429: if (getLights_Status(sw) == 0) {
  8654  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  8655  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  8656  0CCD  0852               	movf	setLights_SwOn@sw,w
  8657  0CCE  158A  232D  158A   	fcall	_getLights_Status
  8658  0CD1  3800               	iorlw	0
  8659  0CD2  1D03               	skipz
  8660  0CD3  2CE0               	goto	l4752
  8661                           
  8662                           ;TriacRelay_B1.c: 430: Lights->SwStatus = 1;
  8663  0CD4  0A78               	incf	_Lights,w
  8664  0CD5  0084               	movwf	4
  8665  0CD6  1383               	bcf	3,7	;select IRP bank0
  8666  0CD7  1580               	bsf	0,3
  8667                           
  8668                           ;TriacRelay_B1.c: 431: setLights_Trigger(sw, 1);
  8669  0CD8  1283               	bcf	3,5	;RP0=0, select bank0
  8670  0CD9  1303               	bcf	3,6	;RP1=0, select bank0
  8671  0CDA  01CF               	clrf	setLights_Trigger@command
  8672  0CDB  0ACF               	incf	setLights_Trigger@command,f
  8673  0CDC  0852               	movf	setLights_SwOn@sw,w
  8674  0CDD  158A  2449         	fcall	_setLights_Trigger
  8675                           
  8676                           ;TriacRelay_B1.c: 432: } else {
  8677  0CDF  0008               	return
  8678  0CE0                     l4752:	
  8679                           
  8680                           ;TriacRelay_B1.c: 433: Lights->SwStatus = 0;
  8681  0CE0  0A78               	incf	_Lights,w
  8682  0CE1  0084               	movwf	4
  8683  0CE2  1383               	bcf	3,7	;select IRP bank0
  8684  0CE3  1180               	bcf	0,3
  8685  0CE4  0008               	return
  8686  0CE5                     __end_of_setLights_SwOn:	
  8687                           
  8688                           	psect	text54
  8689  0B2D                     __ptext54:	
  8690 ;; *************** function _getLights_Status *****************
  8691 ;; Defined at:
  8692 ;;		line 285 in file "../src/TriacRelay_B1.c"
  8693 ;; Parameters:    Size  Location     Type
  8694 ;;  lights          1    wreg     unsigned char 
  8695 ;; Auto vars:     Size  Location     Type
  8696 ;;  lights          1    0[BANK0 ] unsigned char 
  8697 ;;  status          1    1[BANK0 ] unsigned char 
  8698 ;; Return value:  Size  Location     Type
  8699 ;;                  1    wreg      unsigned char 
  8700 ;; Registers used:
  8701 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8702 ;; Tracked objects:
  8703 ;;		On entry : 0/0
  8704 ;;		On exit  : 0/0
  8705 ;;		Unchanged: 0/0
  8706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8707 ;;      Params:         0       0       0       0
  8708 ;;      Locals:         0       2       0       0
  8709 ;;      Temps:          0       0       0       0
  8710 ;;      Totals:         0       2       0       0
  8711 ;;Total ram usage:        2 bytes
  8712 ;; Hardware stack levels used:    1
  8713 ;; Hardware stack levels required when called:    3
  8714 ;; This function calls:
  8715 ;;		_LightsPointSelect
  8716 ;; This function is called by:
  8717 ;;		_Exception_Main
  8718 ;;		_PIR_Main
  8719 ;;		_setLights_SwOn
  8720 ;;		_setLights_ErrorClose
  8721 ;; This function uses a non-reentrant model
  8722 ;;
  8723                           
  8724                           
  8725                           ;psect for function _getLights_Status
  8726  0B2D                     _getLights_Status:	
  8727                           
  8728                           ;incstack = 0
  8729                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8730                           ;getLights_Status@lights stored from wreg
  8731  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  8732  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  8733  0B2F  00CF               	movwf	getLights_Status@lights
  8734                           
  8735                           ;TriacRelay_B1.c: 286: LightsPointSelect(lights);
  8736  0B30  084F               	movf	getLights_Status@lights,w
  8737  0B31  158A  22C4         	fcall	_LightsPointSelect
  8738                           
  8739                           ;TriacRelay_B1.c: 287: char status = Lights->Status == 1 ? 1 : 0;
  8740  0B33  0878               	movf	_Lights,w
  8741  0B34  0084               	movwf	4
  8742  0B35  3000               	movlw	0
  8743  0B36  1383               	bcf	3,7	;select IRP bank0
  8744  0B37  1900               	btfsc	0,2
  8745  0B38  3001               	movlw	1
  8746  0B39  1283               	bcf	3,5	;RP0=0, select bank0
  8747  0B3A  1303               	bcf	3,6	;RP1=0, select bank0
  8748  0B3B  00D0               	movwf	getLights_Status@status
  8749                           
  8750                           ;TriacRelay_B1.c: 288: return status;
  8751  0B3C  0850               	movf	getLights_Status@status,w
  8752  0B3D  0008               	return
  8753  0B3E                     __end_of_getLights_Status:	
  8754                           
  8755                           	psect	text55
  8756  0BFB                     __ptext55:	
  8757 ;; *************** function _setLights_SwOff *****************
  8758 ;; Defined at:
  8759 ;;		line 452 in file "../src/TriacRelay_B1.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;  sw              1    wreg     unsigned char 
  8762 ;; Auto vars:     Size  Location     Type
  8763 ;;  sw              1    3[BANK0 ] unsigned char 
  8764 ;; Return value:  Size  Location     Type
  8765 ;;		None               void
  8766 ;; Registers used:
  8767 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8768 ;; Tracked objects:
  8769 ;;		On entry : 0/0
  8770 ;;		On exit  : 0/0
  8771 ;;		Unchanged: 0/0
  8772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8773 ;;      Params:         0       0       0       0
  8774 ;;      Locals:         0       1       0       0
  8775 ;;      Temps:          0       0       0       0
  8776 ;;      Totals:         0       1       0       0
  8777 ;;Total ram usage:        1 bytes
  8778 ;; Hardware stack levels used:    1
  8779 ;; Hardware stack levels required when called:    4
  8780 ;; This function calls:
  8781 ;;		_LightsPointSelect
  8782 ;;		_setLights_Trigger
  8783 ;; This function is called by:
  8784 ;;		_Exception_Main
  8785 ;;		_PIR_Main
  8786 ;; This function uses a non-reentrant model
  8787 ;;
  8788                           
  8789                           
  8790                           ;psect for function _setLights_SwOff
  8791  0BFB                     _setLights_SwOff:	
  8792                           
  8793                           ;incstack = 0
  8794                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8795                           ;setLights_SwOff@sw stored from wreg
  8796  0BFB  1283               	bcf	3,5	;RP0=0, select bank0
  8797  0BFC  1303               	bcf	3,6	;RP1=0, select bank0
  8798  0BFD  00D2               	movwf	setLights_SwOff@sw
  8799                           
  8800                           ;TriacRelay_B1.c: 454: LightsPointSelect(sw);
  8801  0BFE  0852               	movf	setLights_SwOff@sw,w
  8802  0BFF  158A  22C4  158A   	fcall	_LightsPointSelect
  8803                           
  8804                           ;TriacRelay_B1.c: 456: if (Lights->SwFlag == 1) {
  8805  0C02  0A78               	incf	_Lights,w
  8806  0C03  0084               	movwf	4
  8807  0C04  1383               	bcf	3,7	;select IRP bank0
  8808  0C05  1D00               	btfss	0,2
  8809  0C06  0008               	return
  8810                           
  8811                           ;TriacRelay_B1.c: 457: Lights->SwFlag = 0;
  8812  0C07  0A78               	incf	_Lights,w
  8813  0C08  0084               	movwf	4
  8814  0C09  1100               	bcf	0,2
  8815                           
  8816                           ;TriacRelay_B1.c: 458: if (Lights->SwStatus == 0) {
  8817  0C0A  0A78               	incf	_Lights,w
  8818  0C0B  0084               	movwf	4
  8819  0C0C  1980               	btfsc	0,3
  8820  0C0D  0008               	return
  8821                           
  8822                           ;TriacRelay_B1.c: 459: setLights_Trigger(sw, 0);
  8823  0C0E  1283               	bcf	3,5	;RP0=0, select bank0
  8824  0C0F  1303               	bcf	3,6	;RP1=0, select bank0
  8825  0C10  01CF               	clrf	setLights_Trigger@command
  8826  0C11  0852               	movf	setLights_SwOff@sw,w
  8827  0C12  158A  2449         	fcall	_setLights_Trigger
  8828  0C14  0008               	return
  8829  0C15                     __end_of_setLights_SwOff:	
  8830                           
  8831                           	psect	text56
  8832  0C49                     __ptext56:	
  8833 ;; *************** function _setLights_Trigger *****************
  8834 ;; Defined at:
  8835 ;;		line 292 in file "../src/TriacRelay_B1.c"
  8836 ;; Parameters:    Size  Location     Type
  8837 ;;  lights          1    wreg     unsigned char 
  8838 ;;  command         1    0[BANK0 ] unsigned char 
  8839 ;; Auto vars:     Size  Location     Type
  8840 ;;  lights          1    2[BANK0 ] unsigned char 
  8841 ;; Return value:  Size  Location     Type
  8842 ;;		None               void
  8843 ;; Registers used:
  8844 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8845 ;; Tracked objects:
  8846 ;;		On entry : 0/0
  8847 ;;		On exit  : 0/0
  8848 ;;		Unchanged: 0/0
  8849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8850 ;;      Params:         0       1       0       0
  8851 ;;      Locals:         0       1       0       0
  8852 ;;      Temps:          0       1       0       0
  8853 ;;      Totals:         0       3       0       0
  8854 ;;Total ram usage:        3 bytes
  8855 ;; Hardware stack levels used:    1
  8856 ;; Hardware stack levels required when called:    3
  8857 ;; This function calls:
  8858 ;;		_LightsPointSelect
  8859 ;; This function is called by:
  8860 ;;		_setLights_SwOn
  8861 ;;		_setLights_SwOff
  8862 ;;		_setLights_ErrorClose
  8863 ;; This function uses a non-reentrant model
  8864 ;;
  8865                           
  8866                           
  8867                           ;psect for function _setLights_Trigger
  8868  0C49                     _setLights_Trigger:	
  8869                           
  8870                           ;incstack = 0
  8871                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8872                           ;setLights_Trigger@lights stored from wreg
  8873  0C49  1283               	bcf	3,5	;RP0=0, select bank0
  8874  0C4A  1303               	bcf	3,6	;RP1=0, select bank0
  8875  0C4B  00D1               	movwf	setLights_Trigger@lights
  8876                           
  8877                           ;TriacRelay_B1.c: 293: LightsPointSelect(lights);
  8878  0C4C  0851               	movf	setLights_Trigger@lights,w
  8879  0C4D  158A  22C4         	fcall	_LightsPointSelect
  8880                           
  8881                           ;TriacRelay_B1.c: 294: Lights->Trigger = 1;
  8882  0C4F  0878               	movf	_Lights,w
  8883  0C50  0084               	movwf	4
  8884  0C51  1383               	bcf	3,7	;select IRP bank0
  8885  0C52  1580               	bsf	0,3
  8886                           
  8887                           ;TriacRelay_B1.c: 295: Lights->Switch = command == 1 ? 1 : 0;
  8888  0C53  1283               	bcf	3,5	;RP0=0, select bank0
  8889  0C54  1303               	bcf	3,6	;RP1=0, select bank0
  8890  0C55  084F               	movf	setLights_Trigger@command,w
  8891  0C56  3A01               	xorlw	1
  8892  0C57  3000               	movlw	0
  8893  0C58  1903               	skipnz
  8894  0C59  3001               	movlw	1
  8895  0C5A  00D0               	movwf	??_setLights_Trigger
  8896  0C5B  0878               	movf	_Lights,w
  8897  0C5C  0084               	movwf	4
  8898  0C5D  0ED0               	swapf	??_setLights_Trigger,f
  8899  0C5E  0800               	movf	0,w
  8900  0C5F  0650               	xorwf	??_setLights_Trigger,w
  8901  0C60  39EF               	andlw	-17
  8902  0C61  0650               	xorwf	??_setLights_Trigger,w
  8903  0C62  0080               	movwf	0
  8904  0C63  0008               	return
  8905  0C64                     __end_of_setLights_Trigger:	
  8906                           
  8907                           	psect	text57
  8908  0AC4                     __ptext57:	
  8909 ;; *************** function _LightsPointSelect *****************
  8910 ;; Defined at:
  8911 ;;		line 10 in file "../src/TriacRelay_B1.c"
  8912 ;; Parameters:    Size  Location     Type
  8913 ;;  lights          1    wreg     unsigned char 
  8914 ;; Auto vars:     Size  Location     Type
  8915 ;;  lights          1    5[COMMON] unsigned char 
  8916 ;; Return value:  Size  Location     Type
  8917 ;;		None               void
  8918 ;; Registers used:
  8919 ;;		wreg
  8920 ;; Tracked objects:
  8921 ;;		On entry : 0/0
  8922 ;;		On exit  : 0/0
  8923 ;;		Unchanged: 0/0
  8924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8925 ;;      Params:         0       0       0       0
  8926 ;;      Locals:         1       0       0       0
  8927 ;;      Temps:          1       0       0       0
  8928 ;;      Totals:         2       0       0       0
  8929 ;;Total ram usage:        2 bytes
  8930 ;; Hardware stack levels used:    1
  8931 ;; Hardware stack levels required when called:    2
  8932 ;; This function calls:
  8933 ;;		Nothing
  8934 ;; This function is called by:
  8935 ;;		_setLights_Initialization
  8936 ;;		_setLights_Main
  8937 ;;		_Lights_Control
  8938 ;;		_getLights_Status
  8939 ;;		_setLights_Trigger
  8940 ;;		_setLights_SwOn
  8941 ;;		_setLights_SwOff
  8942 ;; This function uses a non-reentrant model
  8943 ;;
  8944                           
  8945                           
  8946                           ;psect for function _LightsPointSelect
  8947  0AC4                     _LightsPointSelect:	
  8948                           
  8949                           ;incstack = 0
  8950                           ; Regs used in _LightsPointSelect: [wreg]
  8951                           ;LightsPointSelect@lights stored from wreg
  8952  0AC4  00F5               	movwf	LightsPointSelect@lights
  8953                           
  8954                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  8955  0AC5  0875               	movf	LightsPointSelect@lights,w
  8956  0AC6  3A01               	xorlw	1
  8957  0AC7  1D03               	skipz
  8958  0AC8  0008               	return
  8959                           
  8960                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  8961  0AC9  3042               	movlw	_Lights1& (0+255)
  8962  0ACA  00F4               	movwf	??_LightsPointSelect
  8963  0ACB  0874               	movf	??_LightsPointSelect,w
  8964  0ACC  00F8               	movwf	_Lights
  8965  0ACD  0008               	return
  8966  0ACE                     __end_of_LightsPointSelect:	
  8967                           
  8968                           	psect	text58
  8969  0F35                     __ptext58:	
  8970 ;; *************** function _setLED *****************
  8971 ;; Defined at:
  8972 ;;		line 81 in file "../src/LED_B1.c"
  8973 ;; Parameters:    Size  Location     Type
  8974 ;;  led             1    wreg     unsigned char 
  8975 ;;  command         1    0[BANK0 ] unsigned char 
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;  led             1    1[BANK0 ] unsigned char 
  8978 ;; Return value:  Size  Location     Type
  8979 ;;		None               void
  8980 ;; Registers used:
  8981 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8982 ;; Tracked objects:
  8983 ;;		On entry : 0/0
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8987 ;;      Params:         0       1       0       0
  8988 ;;      Locals:         0       1       0       0
  8989 ;;      Temps:          0       0       0       0
  8990 ;;      Totals:         0       2       0       0
  8991 ;;Total ram usage:        2 bytes
  8992 ;; Hardware stack levels used:    1
  8993 ;; Hardware stack levels required when called:    3
  8994 ;; This function calls:
  8995 ;;		_LedPointSelect
  8996 ;; This function is called by:
  8997 ;;		_setLED_Initialization
  8998 ;;		_setPIRLED_Main
  8999 ;;		_Exception_Main
  9000 ;;		_PIR_Main
  9001 ;;		_setLights
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           
  9006                           ;psect for function _setLED
  9007  0F35                     _setLED:	
  9008                           
  9009                           ;incstack = 0
  9010                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9011                           ;setLED@led stored from wreg
  9012  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  9013  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  9014  0F37  00D0               	movwf	setLED@led
  9015                           
  9016                           ;LED_B1.c: 82: LedPointSelect(led);
  9017  0F38  0850               	movf	setLED@led,w
  9018  0F39  158A  234F  158A   	fcall	_LedPointSelect
  9019                           
  9020                           ;LED_B1.c: 83: if (command == 0) {
  9021  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  9022  0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  9023  0F3E  08CF               	movf	setLED@command,f
  9024  0F3F  1D03               	skipz
  9025  0F40  2F4A               	goto	l4484
  9026                           
  9027                           ;LED_B1.c: 85: if (led == 1) {
  9028  0F41  0850               	movf	setLED@led,w
  9029  0F42  3A01               	xorlw	1
  9030  0F43  1D03               	skipz
  9031  0F44  2F46               	goto	l4480
  9032                           
  9033                           ;LED_B1.c: 89: RA6 = 1;
  9034  0F45  1705               	bsf	5,6	;volatile
  9035  0F46                     l4480:	
  9036                           
  9037                           ;LED_B1.c: 91: }
  9038                           ;LED_B1.c: 94: if (led == 2) {
  9039  0F46  0850               	movf	setLED@led,w
  9040  0F47  3A02               	xorlw	2
  9041  0F48  1903               	btfsc	3,2
  9042                           
  9043                           ;LED_B1.c: 98: RA7 = 1;
  9044  0F49  1785               	bsf	5,7	;volatile
  9045  0F4A                     l4484:	
  9046                           
  9047                           ;LED_B1.c: 100: }
  9048                           ;LED_B1.c: 120: }
  9049                           ;LED_B1.c: 121: if (command == 1) {
  9050  0F4A  084F               	movf	setLED@command,w
  9051  0F4B  3A01               	xorlw	1
  9052  0F4C  1D03               	skipz
  9053  0F4D  2F57               	goto	l4494
  9054                           
  9055                           ;LED_B1.c: 123: if (led == 1) {
  9056  0F4E  0850               	movf	setLED@led,w
  9057  0F4F  3A01               	xorlw	1
  9058  0F50  1D03               	skipz
  9059  0F51  2F53               	goto	l4490
  9060                           
  9061                           ;LED_B1.c: 127: RA6 = 0;
  9062  0F52  1305               	bcf	5,6	;volatile
  9063  0F53                     l4490:	
  9064                           
  9065                           ;LED_B1.c: 129: }
  9066                           ;LED_B1.c: 132: if (led == 2) {
  9067  0F53  0850               	movf	setLED@led,w
  9068  0F54  3A02               	xorlw	2
  9069  0F55  1903               	btfsc	3,2
  9070                           
  9071                           ;LED_B1.c: 136: RA7 = 0;
  9072  0F56  1385               	bcf	5,7	;volatile
  9073  0F57                     l4494:	
  9074                           
  9075                           ;LED_B1.c: 138: }
  9076                           ;LED_B1.c: 158: }
  9077                           ;LED_B1.c: 159: if (command == 10) {
  9078  0F57  084F               	movf	setLED@command,w
  9079  0F58  3A0A               	xorlw	10
  9080  0F59  1D03               	skipz
  9081  0F5A  2F6E               	goto	l4508
  9082                           
  9083                           ;LED_B1.c: 160: LED->GO = 0;
  9084  0F5B  0876               	movf	_LED,w
  9085  0F5C  0084               	movwf	4
  9086  0F5D  1383               	bcf	3,7	;select IRP bank0
  9087  0F5E  1080               	bcf	0,1
  9088                           
  9089                           ;LED_B1.c: 161: LED->Time = 0;
  9090  0F5F  0A76               	incf	_LED,w
  9091  0F60  0084               	movwf	4
  9092  0F61  0180               	clrf	0
  9093  0F62  0A84               	incf	4,f
  9094  0F63  0180               	clrf	0
  9095                           
  9096                           ;LED_B1.c: 163: if (led == 1) {
  9097  0F64  0850               	movf	setLED@led,w
  9098  0F65  3A01               	xorlw	1
  9099  0F66  1D03               	skipz
  9100  0F67  2F6A               	goto	l4504
  9101                           
  9102                           ;LED_B1.c: 167: RA6 = 1;
  9103  0F68  1705               	bsf	5,6	;volatile
  9104                           
  9105                           ;LED_B1.c: 169: }
  9106  0F69  2F6E               	goto	l4508
  9107  0F6A                     l4504:	
  9108                           
  9109                           ;LED_B1.c: 172: else if (led == 2) {
  9110  0F6A  0850               	movf	setLED@led,w
  9111  0F6B  3A02               	xorlw	2
  9112  0F6C  1903               	btfsc	3,2
  9113                           
  9114                           ;LED_B1.c: 176: RA7 = 1;
  9115  0F6D  1785               	bsf	5,7	;volatile
  9116  0F6E                     l4508:	
  9117                           
  9118                           ;LED_B1.c: 178: }
  9119                           ;LED_B1.c: 198: }
  9120                           ;LED_B1.c: 199: if (command == 11) {
  9121  0F6E  084F               	movf	setLED@command,w
  9122  0F6F  3A0B               	xorlw	11
  9123  0F70  1D03               	skipz
  9124  0F71  2F76               	goto	l4512
  9125                           
  9126                           ;LED_B1.c: 200: LED->GO = 1;
  9127  0F72  0876               	movf	_LED,w
  9128  0F73  0084               	movwf	4
  9129  0F74  1383               	bcf	3,7	;select IRP bank0
  9130  0F75  1480               	bsf	0,1
  9131  0F76                     l4512:	
  9132                           
  9133                           ;LED_B1.c: 201: }
  9134                           ;LED_B1.c: 205: if (command == 111) {
  9135  0F76  084F               	movf	setLED@command,w
  9136  0F77  3A6F               	xorlw	111
  9137  0F78  1D03               	skipz
  9138  0F79  2F94               	goto	l4538
  9139                           
  9140                           ;LED_B1.c: 206: PIRLED.Count = 0;
  9141  0F7A  01AB               	clrf	_PIRLED+1
  9142                           
  9143                           ;LED_B1.c: 207: PIRLED.Time = 0;
  9144  0F7B  01AC               	clrf	_PIRLED+2
  9145  0F7C  01AD               	clrf	_PIRLED+3
  9146                           
  9147                           ;LED_B1.c: 208: PIRLED.status = 0;
  9148  0F7D  122A               	bcf	_PIRLED,4
  9149                           
  9150                           ;LED_B1.c: 209: PIRLED.GO = 1;
  9151  0F7E  142A               	bsf	_PIRLED,0
  9152                           
  9153                           ;LED_B1.c: 210: PIRLED.GO1 = 0;
  9154  0F7F  10AA               	bcf	_PIRLED,1
  9155                           
  9156                           ;LED_B1.c: 211: PIRLED.GO2 = 0;
  9157  0F80  112A               	bcf	_PIRLED,2
  9158                           
  9159                           ;LED_B1.c: 212: PIRLED.GO3 = 0;
  9160  0F81  11AA               	bcf	_PIRLED,3
  9161                           
  9162                           ;LED_B1.c: 213: if (led == 1) {
  9163  0F82  0850               	movf	setLED@led,w
  9164  0F83  3A01               	xorlw	1
  9165  0F84  1D03               	skipz
  9166  0F85  2F88               	goto	l4530
  9167                           
  9168                           ;LED_B1.c: 214: PIRLED.GO1 = 1;
  9169  0F86  14AA               	bsf	_PIRLED,1
  9170                           
  9171                           ;LED_B1.c: 215: } else if (led == 2) {
  9172  0F87  0008               	return
  9173  0F88                     l4530:	
  9174  0F88  0850               	movf	setLED@led,w
  9175  0F89  3A02               	xorlw	2
  9176  0F8A  1D03               	skipz
  9177  0F8B  2F8E               	goto	l4534
  9178                           
  9179                           ;LED_B1.c: 216: PIRLED.GO2 = 1;
  9180  0F8C  152A               	bsf	_PIRLED,2
  9181                           
  9182                           ;LED_B1.c: 217: } else if (led == 3) {
  9183  0F8D  0008               	return
  9184  0F8E                     l4534:	
  9185  0F8E  0850               	movf	setLED@led,w
  9186  0F8F  3A03               	xorlw	3
  9187  0F90  1D03               	skipz
  9188  0F91  0008               	return
  9189                           
  9190                           ;LED_B1.c: 218: PIRLED.GO3 = 1;
  9191  0F92  15AA               	bsf	_PIRLED,3
  9192                           
  9193                           ;LED_B1.c: 219: }
  9194                           ;LED_B1.c: 220: } else if (command == 110) {
  9195  0F93  0008               	return
  9196  0F94                     l4538:	
  9197  0F94  084F               	movf	setLED@command,w
  9198  0F95  3A6E               	xorlw	110
  9199  0F96  1D03               	skipz
  9200  0F97  0008               	return
  9201                           
  9202                           ;LED_B1.c: 221: PIRLED.GO = 0;
  9203  0F98  102A               	bcf	_PIRLED,0
  9204  0F99  0008               	return
  9205  0F9A                     __end_of_setLED:	
  9206                           
  9207                           	psect	text59
  9208  0B4F                     __ptext59:	
  9209 ;; *************** function _LedPointSelect *****************
  9210 ;; Defined at:
  9211 ;;		line 7 in file "../src/LED_B1.c"
  9212 ;; Parameters:    Size  Location     Type
  9213 ;;  led             1    wreg     unsigned char 
  9214 ;; Auto vars:     Size  Location     Type
  9215 ;;  led             1    5[COMMON] unsigned char 
  9216 ;; Return value:  Size  Location     Type
  9217 ;;		None               void
  9218 ;; Registers used:
  9219 ;;		wreg
  9220 ;; Tracked objects:
  9221 ;;		On entry : 0/0
  9222 ;;		On exit  : 0/0
  9223 ;;		Unchanged: 0/0
  9224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9225 ;;      Params:         0       0       0       0
  9226 ;;      Locals:         1       0       0       0
  9227 ;;      Temps:          1       0       0       0
  9228 ;;      Totals:         2       0       0       0
  9229 ;;Total ram usage:        2 bytes
  9230 ;; Hardware stack levels used:    1
  9231 ;; Hardware stack levels required when called:    2
  9232 ;; This function calls:
  9233 ;;		Nothing
  9234 ;; This function is called by:
  9235 ;;		_setLED_Initialization
  9236 ;;		_setLED
  9237 ;;		_setLED_Main
  9238 ;; This function uses a non-reentrant model
  9239 ;;
  9240                           
  9241                           
  9242                           ;psect for function _LedPointSelect
  9243  0B4F                     _LedPointSelect:	
  9244                           
  9245                           ;incstack = 0
  9246                           ; Regs used in _LedPointSelect: [wreg]
  9247                           ;LedPointSelect@led stored from wreg
  9248  0B4F  00F5               	movwf	LedPointSelect@led
  9249                           
  9250                           ;LED_B1.c: 9: if (led == 1) {
  9251  0B50  0875               	movf	LedPointSelect@led,w
  9252  0B51  3A01               	xorlw	1
  9253  0B52  1D03               	skipz
  9254  0B53  2B58               	goto	l266
  9255                           
  9256                           ;LED_B1.c: 10: LED = &VarLED1;
  9257  0B54  3047               	movlw	_VarLED1& (0+255)
  9258  0B55  00F4               	movwf	??_LedPointSelect
  9259  0B56  0874               	movf	??_LedPointSelect,w
  9260  0B57  00F6               	movwf	_LED
  9261  0B58                     l266:	
  9262                           
  9263                           ;LED_B1.c: 11: }
  9264                           ;LED_B1.c: 14: if (led == 2) {
  9265  0B58  0875               	movf	LedPointSelect@led,w
  9266  0B59  3A02               	xorlw	2
  9267  0B5A  1D03               	skipz
  9268  0B5B  0008               	return
  9269                           
  9270                           ;LED_B1.c: 15: LED = &VarLED2;
  9271  0B5C  304B               	movlw	_VarLED2& (0+255)
  9272  0B5D  00F4               	movwf	??_LedPointSelect
  9273  0B5E  0874               	movf	??_LedPointSelect,w
  9274  0B5F  00F6               	movwf	_LED
  9275  0B60  0008               	return
  9276  0B61                     __end_of_LedPointSelect:	
  9277                           
  9278                           	psect	text60
  9279  0ABB                     __ptext60:	
  9280 ;; *************** function _getMain_All_LightsStatus *****************
  9281 ;; Defined at:
  9282 ;;		line 378 in file "../src/Main_B1.c"
  9283 ;; Parameters:    Size  Location     Type
  9284 ;;		None
  9285 ;; Auto vars:     Size  Location     Type
  9286 ;;  status          1    4[COMMON] unsigned char 
  9287 ;; Return value:  Size  Location     Type
  9288 ;;                  1    wreg      unsigned char 
  9289 ;; Registers used:
  9290 ;;		wreg, status,2
  9291 ;; Tracked objects:
  9292 ;;		On entry : 0/0
  9293 ;;		On exit  : 0/0
  9294 ;;		Unchanged: 0/0
  9295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9296 ;;      Params:         0       0       0       0
  9297 ;;      Locals:         1       0       0       0
  9298 ;;      Temps:          0       0       0       0
  9299 ;;      Totals:         1       0       0       0
  9300 ;;Total ram usage:        1 bytes
  9301 ;; Hardware stack levels used:    1
  9302 ;; Hardware stack levels required when called:    2
  9303 ;; This function calls:
  9304 ;;		Nothing
  9305 ;; This function is called by:
  9306 ;;		_Exception_Main
  9307 ;;		_Load_Main
  9308 ;;		_setTemp_Main
  9309 ;;		_Lights_Main
  9310 ;; This function uses a non-reentrant model
  9311 ;;
  9312                           
  9313                           
  9314                           ;psect for function _getMain_All_LightsStatus
  9315  0ABB                     _getMain_All_LightsStatus:	
  9316                           
  9317                           ;Main_B1.c: 379: char status = 0;
  9318                           
  9319                           ;incstack = 0
  9320                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
  9321  0ABB  01F4               	clrf	getMain_All_LightsStatus@status
  9322                           
  9323                           ;Main_B1.c: 383: status = Lights1.Status == 1 ? 1 : 0;
  9324  0ABC  3000               	movlw	0
  9325  0ABD  1283               	bcf	3,5	;RP0=0, select bank0
  9326  0ABE  1303               	bcf	3,6	;RP1=0, select bank0
  9327  0ABF  1942               	btfsc	_Lights1,2
  9328  0AC0  3001               	movlw	1
  9329  0AC1  00F4               	movwf	getMain_All_LightsStatus@status
  9330                           
  9331                           ;Main_B1.c: 425: return status;
  9332  0AC2  0874               	movf	getMain_All_LightsStatus@status,w
  9333  0AC3  0008               	return
  9334  0AC4                     __end_of_getMain_All_LightsStatus:	
  9335                           
  9336                           	psect	text61
  9337  0D6E                     __ptext61:	
  9338 ;; *************** function _getMain_All_Error_Status *****************
  9339 ;; Defined at:
  9340 ;;		line 429 in file "../src/Main_B1.c"
  9341 ;; Parameters:    Size  Location     Type
  9342 ;;  command         1    wreg     unsigned char 
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  command         1    4[BANK0 ] unsigned char 
  9345 ;;  status          1    5[BANK0 ] unsigned char 
  9346 ;; Return value:  Size  Location     Type
  9347 ;;                  1    wreg      unsigned char 
  9348 ;; Registers used:
  9349 ;;		wreg, status,2, status,0
  9350 ;; Tracked objects:
  9351 ;;		On entry : 0/0
  9352 ;;		On exit  : 0/0
  9353 ;;		Unchanged: 0/0
  9354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9355 ;;      Params:         0       0       0       0
  9356 ;;      Locals:         0       6       0       0
  9357 ;;      Temps:          1       0       0       0
  9358 ;;      Totals:         1       6       0       0
  9359 ;;Total ram usage:        7 bytes
  9360 ;; Hardware stack levels used:    1
  9361 ;; Hardware stack levels required when called:    2
  9362 ;; This function calls:
  9363 ;;		Nothing
  9364 ;; This function is called by:
  9365 ;;		_Exception_Main
  9366 ;;		_Load_Main
  9367 ;;		_setTemp_Main
  9368 ;;		_PIR_Main
  9369 ;;		_setSYSC_Main
  9370 ;;		_Lights_Main
  9371 ;; This function uses a non-reentrant model
  9372 ;;
  9373                           
  9374                           
  9375                           ;psect for function _getMain_All_Error_Status
  9376  0D6E                     _getMain_All_Error_Status:	
  9377                           
  9378                           ;incstack = 0
  9379                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  9380                           ;getMain_All_Error_Status@command stored from wreg
  9381  0D6E  1283               	bcf	3,5	;RP0=0, select bank0
  9382  0D6F  1303               	bcf	3,6	;RP1=0, select bank0
  9383  0D70  00D3               	movwf	getMain_All_Error_Status@command
  9384                           
  9385                           ;Main_B1.c: 430: char status = 0;
  9386  0D71  01D4               	clrf	getMain_All_Error_Status@status
  9387                           
  9388                           ;Main_B1.c: 433: if (status == 0 && command != 1) {
  9389  0D72  08D4               	movf	getMain_All_Error_Status@status,f
  9390  0D73  1D03               	skipz
  9391  0D74  2D7D               	goto	l3262
  9392  0D75  0853               	movf	getMain_All_Error_Status@command,w
  9393  0D76  3A01               	xorlw	1
  9394  0D77  1903               	skipnz
  9395  0D78  2D7D               	goto	l3262
  9396                           
  9397                           ;Main_B1.c: 434: status = SYSC.ERROR == 1 ? 1 : 0;
  9398  0D79  3000               	movlw	0
  9399  0D7A  18A0               	btfsc	_SYSC,1
  9400  0D7B  3001               	movlw	1
  9401  0D7C  00D4               	movwf	getMain_All_Error_Status@status
  9402  0D7D                     l3262:	
  9403                           
  9404                           ;Main_B1.c: 435: }
  9405                           ;Main_B1.c: 441: if (status == 0 && command != 2) {
  9406  0D7D  08D4               	movf	getMain_All_Error_Status@status,f
  9407  0D7E  1D03               	skipz
  9408  0D7F  2D91               	goto	l3272
  9409  0D80  0853               	movf	getMain_All_Error_Status@command,w
  9410  0D81  3A02               	xorlw	2
  9411  0D82  1903               	skipnz
  9412  0D83  2D91               	goto	l3272
  9413                           
  9414                           ;Main_B1.c: 442: status = Temp.ERROR == 1 ? 2 : 0;
  9415  0D84  18B9               	btfsc	_Temp,1
  9416  0D85  2D89               	goto	l3270
  9417  0D86  01CF               	clrf	_getMain_All_Error_Status$2366
  9418  0D87  01D0               	clrf	_getMain_All_Error_Status$2366+1
  9419  0D88  2D8D               	goto	l606
  9420  0D89                     l3270:	
  9421  0D89  3002               	movlw	2
  9422  0D8A  00CF               	movwf	_getMain_All_Error_Status$2366
  9423  0D8B  3000               	movlw	0
  9424  0D8C  00D0               	movwf	_getMain_All_Error_Status$2366+1
  9425  0D8D                     l606:	
  9426  0D8D  084F               	movf	_getMain_All_Error_Status$2366,w
  9427  0D8E  00F4               	movwf	??_getMain_All_Error_Status
  9428  0D8F  0874               	movf	??_getMain_All_Error_Status,w
  9429  0D90  00D4               	movwf	getMain_All_Error_Status@status
  9430  0D91                     l3272:	
  9431                           
  9432                           ;Main_B1.c: 443: }
  9433                           ;Main_B1.c: 448: if (status == 0 && command != 3) {
  9434  0D91  08D4               	movf	getMain_All_Error_Status@status,f
  9435  0D92  1D03               	skipz
  9436  0D93  2DAA               	goto	l607
  9437  0D94  0853               	movf	getMain_All_Error_Status@command,w
  9438  0D95  3A03               	xorlw	3
  9439  0D96  1903               	skipnz
  9440  0D97  2DAA               	goto	l607
  9441                           
  9442                           ;Main_B1.c: 449: status = Load.ERROR == 1 ? 3 : 0;
  9443  0D98  1683               	bsf	3,5	;RP0=1, select bank1
  9444  0D99  1303               	bcf	3,6	;RP1=0, select bank1
  9445  0D9A  1ACA               	btfsc	_Load^(0+128),5
  9446  0D9B  2DA1               	goto	l3280
  9447  0D9C  1283               	bcf	3,5	;RP0=0, select bank0
  9448  0D9D  1303               	bcf	3,6	;RP1=0, select bank0
  9449  0D9E  01D1               	clrf	_getMain_All_Error_Status$2367
  9450  0D9F  01D2               	clrf	_getMain_All_Error_Status$2367+1
  9451  0DA0  2DA6               	goto	l611
  9452  0DA1                     l3280:	
  9453  0DA1  3003               	movlw	3
  9454  0DA2  1283               	bcf	3,5	;RP0=0, select bank0
  9455  0DA3  00D1               	movwf	_getMain_All_Error_Status$2367
  9456  0DA4  3000               	movlw	0
  9457  0DA5  00D2               	movwf	_getMain_All_Error_Status$2367+1
  9458  0DA6                     l611:	
  9459  0DA6  0851               	movf	_getMain_All_Error_Status$2367,w
  9460  0DA7  00F4               	movwf	??_getMain_All_Error_Status
  9461  0DA8  0874               	movf	??_getMain_All_Error_Status,w
  9462  0DA9  00D4               	movwf	getMain_All_Error_Status@status
  9463  0DAA                     l607:	
  9464                           
  9465                           ;Main_B1.c: 450: }
  9466                           ;Main_B1.c: 460: return status;
  9467  0DAA  0854               	movf	getMain_All_Error_Status@status,w
  9468  0DAB  0008               	return
  9469  0DAC                     __end_of_getMain_All_Error_Status:	
  9470                           
  9471                           	psect	text62
  9472  0AB2                     __ptext62:	
  9473 ;; *************** function _getAll_Lights_Line *****************
  9474 ;; Defined at:
  9475 ;;		line 324 in file "../src/TriacRelay_B1.c"
  9476 ;; Parameters:    Size  Location     Type
  9477 ;;		None
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;  line            1    4[COMMON] unsigned char 
  9480 ;; Return value:  Size  Location     Type
  9481 ;;                  1    wreg      unsigned char 
  9482 ;; Registers used:
  9483 ;;		wreg, status,2
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9489 ;;      Params:         0       0       0       0
  9490 ;;      Locals:         1       0       0       0
  9491 ;;      Temps:          0       0       0       0
  9492 ;;      Totals:         1       0       0       0
  9493 ;;Total ram usage:        1 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:    2
  9496 ;; This function calls:
  9497 ;;		Nothing
  9498 ;; This function is called by:
  9499 ;;		_Exception_Main
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           
  9504                           ;psect for function _getAll_Lights_Line
  9505  0AB2                     _getAll_Lights_Line:	
  9506                           
  9507                           ;TriacRelay_B1.c: 325: char line = 0;
  9508                           
  9509                           ;incstack = 0
  9510                           ; Regs used in _getAll_Lights_Line: [wreg+status,2]
  9511  0AB2  01F4               	clrf	getAll_Lights_Line@line
  9512                           
  9513                           ;TriacRelay_B1.c: 327: if (Lights1.Line == 1) {
  9514  0AB3  1283               	bcf	3,5	;RP0=0, select bank0
  9515  0AB4  1303               	bcf	3,6	;RP1=0, select bank0
  9516  0AB5  1C43               	btfss	_Lights1+1,0
  9517  0AB6  2AB9               	goto	l3522
  9518                           
  9519                           ;TriacRelay_B1.c: 328: line = 1;
  9520  0AB7  01F4               	clrf	getAll_Lights_Line@line
  9521  0AB8  0AF4               	incf	getAll_Lights_Line@line,f
  9522  0AB9                     l3522:	
  9523                           
  9524                           ;TriacRelay_B1.c: 329: }
  9525                           ;TriacRelay_B1.c: 341: return line;
  9526  0AB9  0874               	movf	getAll_Lights_Line@line,w
  9527  0ABA  0008               	return
  9528  0ABB                     __end_of_getAll_Lights_Line:	
  9529                           
  9530                           	psect	text63
  9531  0AE6                     __ptext63:	
  9532 ;; *************** function _DetectSYSC_Signal *****************
  9533 ;; Defined at:
  9534 ;;		line 50 in file "../src/SYSC_B1.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;		None
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;		None
  9539 ;; Return value:  Size  Location     Type
  9540 ;;		None               void
  9541 ;; Registers used:
  9542 ;;		status,2
  9543 ;; Tracked objects:
  9544 ;;		On entry : 0/0
  9545 ;;		On exit  : 0/0
  9546 ;;		Unchanged: 0/0
  9547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9548 ;;      Params:         0       0       0       0
  9549 ;;      Locals:         0       0       0       0
  9550 ;;      Temps:          0       0       0       0
  9551 ;;      Totals:         0       0       0       0
  9552 ;;Total ram usage:        0 bytes
  9553 ;; Hardware stack levels used:    1
  9554 ;; Hardware stack levels required when called:    2
  9555 ;; This function calls:
  9556 ;;		Nothing
  9557 ;; This function is called by:
  9558 ;;		_main
  9559 ;; This function uses a non-reentrant model
  9560 ;;
  9561                           
  9562                           
  9563                           ;psect for function _DetectSYSC_Signal
  9564  0AE6                     _DetectSYSC_Signal:	
  9565                           
  9566                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
  9567                           
  9568                           ;incstack = 0
  9569                           ; Regs used in _DetectSYSC_Signal: [status,2]
  9570  0AE6  1283               	bcf	3,5	;RP0=0, select bank0
  9571  0AE7  1303               	bcf	3,6	;RP1=0, select bank0
  9572  0AE8  19A0               	btfsc	_SYSC,3
  9573  0AE9  2AF0               	goto	l1154
  9574                           
  9575                           ;SYSC_B1.c: 52: if (RA5 == 1) {
  9576  0AEA  1E85               	btfss	5,5	;volatile
  9577  0AEB  0008               	return
  9578                           
  9579                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
  9580  0AEC  15A0               	bsf	_SYSC,3
  9581                           
  9582                           ;SYSC_B1.c: 54: SYSC.Time = 0;
  9583  0AED  01A1               	clrf	_SYSC+1
  9584  0AEE  01A2               	clrf	_SYSC+2
  9585                           
  9586                           ;SYSC_B1.c: 55: }
  9587                           ;SYSC_B1.c: 56: } else {
  9588  0AEF  0008               	return
  9589  0AF0                     l1154:	
  9590                           
  9591                           ;SYSC_B1.c: 57: if (RA5 == 0) {
  9592  0AF0  1A85               	btfsc	5,5	;volatile
  9593  0AF1  0008               	return
  9594                           
  9595                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
  9596  0AF2  11A0               	bcf	_SYSC,3
  9597  0AF3  0008               	return
  9598  0AF4                     __end_of_DetectSYSC_Signal:	
  9599                           
  9600                           	psect	text64
  9601  0D3A                     __ptext64:	
  9602 ;; *************** function _CDS_Main *****************
  9603 ;; Defined at:
  9604 ;;		line 11 in file "../src/CDS_B1.c"
  9605 ;; Parameters:    Size  Location     Type
  9606 ;;		None
  9607 ;; Auto vars:     Size  Location     Type
  9608 ;;		None
  9609 ;; Return value:  Size  Location     Type
  9610 ;;		None               void
  9611 ;; Registers used:
  9612 ;;		wreg, status,2, status,0
  9613 ;; Tracked objects:
  9614 ;;		On entry : 0/0
  9615 ;;		On exit  : 0/0
  9616 ;;		Unchanged: 0/0
  9617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9618 ;;      Params:         0       0       0       0
  9619 ;;      Locals:         0       0       0       0
  9620 ;;      Temps:          0       3       0       0
  9621 ;;      Totals:         0       3       0       0
  9622 ;;Total ram usage:        3 bytes
  9623 ;; Hardware stack levels used:    1
  9624 ;; Hardware stack levels required when called:    2
  9625 ;; This function calls:
  9626 ;;		Nothing
  9627 ;; This function is called by:
  9628 ;;		_main
  9629 ;; This function uses a non-reentrant model
  9630 ;;
  9631                           
  9632                           
  9633                           ;psect for function _CDS_Main
  9634  0D3A                     _CDS_Main:	
  9635                           
  9636                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9637                           
  9638                           ;incstack = 0
  9639                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9640  0D3A  1283               	bcf	3,5	;RP0=0, select bank0
  9641  0D3B  1303               	bcf	3,6	;RP1=0, select bank0
  9642  0D3C  1C2E               	btfss	__CDS,0
  9643  0D3D  0008               	return
  9644                           
  9645                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9646  0D3E  18AE               	btfsc	__CDS,1
  9647  0D3F  2D4D               	goto	l123
  9648                           
  9649                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9650  0D40  19AE               	btfsc	__CDS,3
  9651  0D41  0008               	return
  9652                           
  9653                           ;CDS_B1.c: 16: _CDS.Time++;
  9654  0D42  3001               	movlw	1
  9655  0D43  00CF               	movwf	??_CDS_Main
  9656  0D44  084F               	movf	??_CDS_Main,w
  9657  0D45  07AF               	addwf	__CDS+1,f
  9658                           
  9659                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
  9660  0D46  3005               	movlw	5
  9661  0D47  022F               	subwf	__CDS+1,w
  9662  0D48  1C03               	skipc
  9663  0D49  0008               	return
  9664                           
  9665                           ;CDS_B1.c: 18: {
  9666                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9667  0D4A  01AF               	clrf	__CDS+1
  9668                           
  9669                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9670  0D4B  15AE               	bsf	__CDS,3
  9671                           
  9672                           ;CDS_B1.c: 21: }
  9673                           ;CDS_B1.c: 22: }
  9674                           ;CDS_B1.c: 23: } else {
  9675  0D4C  0008               	return
  9676  0D4D                     l123:	
  9677                           
  9678                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9679  0D4D  1CAE               	btfss	__CDS,1
  9680  0D4E  0008               	return
  9681                           
  9682                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9683  0D4F  10AE               	bcf	__CDS,1
  9684                           
  9685                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9686  0D50  1A2E               	btfsc	__CDS,4
  9687  0D51  2D58               	goto	l4932
  9688                           
  9689                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9690  0D52  0830               	movf	__CDS+2,w
  9691  0D53  0231               	subwf	__CDS+3,w
  9692  0D54  1C03               	skipc
  9693  0D55  0008               	return
  9694                           
  9695                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9696  0D56  162E               	bsf	__CDS,4
  9697                           
  9698                           ;CDS_B1.c: 29: }
  9699                           ;CDS_B1.c: 30: } else {
  9700  0D57  0008               	return
  9701  0D58                     l4932:	
  9702                           
  9703                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9704  0D58  0830               	movf	__CDS+2,w
  9705  0D59  3E9C               	addlw	156
  9706  0D5A  00CF               	movwf	??_CDS_Main
  9707  0D5B  30FF               	movlw	255
  9708  0D5C  1803               	skipnc
  9709  0D5D  3000               	movlw	0
  9710  0D5E  00D0               	movwf	??_CDS_Main+1
  9711  0D5F  0850               	movf	??_CDS_Main+1,w
  9712  0D60  3A80               	xorlw	128
  9713  0D61  00D1               	movwf	??_CDS_Main+2
  9714  0D62  3080               	movlw	128
  9715  0D63  0251               	subwf	??_CDS_Main+2,w
  9716  0D64  1D03               	skipz
  9717  0D65  2D68               	goto	u6025
  9718  0D66  0831               	movf	__CDS+3,w
  9719  0D67  024F               	subwf	??_CDS_Main,w
  9720  0D68                     u6025:	
  9721  0D68  1C03               	skipc
  9722  0D69  0008               	return
  9723                           
  9724                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9725  0D6A  1283               	bcf	3,5	;RP0=0, select bank0
  9726  0D6B  1303               	bcf	3,6	;RP1=0, select bank0
  9727  0D6C  122E               	bcf	__CDS,4
  9728  0D6D  0008               	return
  9729  0D6E                     __end_of_CDS_Main:	
  9730                           
  9731                           	psect	text65
  9732  0A61                     __ptext65:	
  9733 ;; *************** function _CDS_Initialization *****************
  9734 ;; Defined at:
  9735 ;;		line 7 in file "../src/CDS_B1.c"
  9736 ;; Parameters:    Size  Location     Type
  9737 ;;		None
  9738 ;; Auto vars:     Size  Location     Type
  9739 ;;		None
  9740 ;; Return value:  Size  Location     Type
  9741 ;;		None               void
  9742 ;; Registers used:
  9743 ;;		None
  9744 ;; Tracked objects:
  9745 ;;		On entry : 0/0
  9746 ;;		On exit  : 0/0
  9747 ;;		Unchanged: 0/0
  9748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9749 ;;      Params:         0       0       0       0
  9750 ;;      Locals:         0       0       0       0
  9751 ;;      Temps:          0       0       0       0
  9752 ;;      Totals:         0       0       0       0
  9753 ;;Total ram usage:        0 bytes
  9754 ;; Hardware stack levels used:    1
  9755 ;; Hardware stack levels required when called:    2
  9756 ;; This function calls:
  9757 ;;		Nothing
  9758 ;; This function is called by:
  9759 ;;		_main
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763                           
  9764                           ;psect for function _CDS_Initialization
  9765  0A61                     _CDS_Initialization:	
  9766                           
  9767                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9768                           
  9769                           ;incstack = 0
  9770                           ; Regs used in _CDS_Initialization: []
  9771  0A61  1283               	bcf	3,5	;RP0=0, select bank0
  9772  0A62  1303               	bcf	3,6	;RP1=0, select bank0
  9773  0A63  142E               	bsf	__CDS,0
  9774  0A64  0008               	return
  9775  0A65                     __end_of_CDS_Initialization:	
  9776                           
  9777                           	psect	text66
  9778  0BCA                     __ptext66:	
  9779 ;; *************** function _ISR *****************
  9780 ;; Defined at:
  9781 ;;		line 116 in file "../src/MCU_B1.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;		None
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;		None
  9786 ;; Return value:  Size  Location     Type
  9787 ;;		None               void
  9788 ;; Registers used:
  9789 ;;		wreg, status,2, status,0, pclath, cstack
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9795 ;;      Params:         0       0       0       0
  9796 ;;      Locals:         0       0       0       0
  9797 ;;      Temps:          4       0       0       0
  9798 ;;      Totals:         4       0       0       0
  9799 ;;Total ram usage:        4 bytes
  9800 ;; Hardware stack levels used:    1
  9801 ;; Hardware stack levels required when called:    1
  9802 ;; This function calls:
  9803 ;;		_TMR1_ISR
  9804 ;; This function is called by:
  9805 ;;		Interrupt level 1
  9806 ;; This function uses a non-reentrant model
  9807 ;;
  9808                           
  9809                           
  9810                           ;psect for function _ISR
  9811  0BCA                     _ISR:	
  9812                           
  9813                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
  9814  0BCA  1683               	bsf	3,5	;RP0=1, select bank1
  9815  0BCB  1303               	bcf	3,6	;RP1=0, select bank1
  9816  0BCC  1C0C               	btfss	12,0	;volatile
  9817  0BCD  2BD5               	goto	i1l440
  9818  0BCE  1283               	bcf	3,5	;RP0=0, select bank0
  9819  0BCF  1303               	bcf	3,6	;RP1=0, select bank0
  9820  0BD0  1C0C               	btfss	12,0	;volatile
  9821  0BD1  2BD5               	goto	i1l440
  9822                           
  9823                           ;MCU_B1.c: 126: TMR1_ISR();
  9824  0BD2  158A  2387  158A   	fcall	_TMR1_ISR
  9825  0BD5                     i1l440:	
  9826                           ;MCU_B1.c: 127: }
  9827                           ;MCU_B1.c: 148: return;
  9828                           
  9829  0BD5  0873               	movf	??_ISR+3,w
  9830  0BD6  1283               	bcf	3,5	;RP0=0, select bank0
  9831  0BD7  1303               	bcf	3,6	;RP1=0, select bank0
  9832  0BD8  00FF               	movwf	127
  9833  0BD9  0872               	movf	??_ISR+2,w
  9834  0BDA  008A               	movwf	10
  9835  0BDB  0871               	movf	??_ISR+1,w
  9836  0BDC  0084               	movwf	4
  9837  0BDD  0E70               	swapf	??_ISR^(0+-128),w
  9838  0BDE  0083               	movwf	3
  9839  0BDF  0EFE               	swapf	126,f
  9840  0BE0  0E7E               	swapf	126,w
  9841  0BE1  0009               	retfie
  9842  0BE2                     __end_of_ISR:	
  9843                           
  9844                           	psect	intentry
  9845  0004                     __pintentry:	
  9846                           ;incstack = 0
  9847                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9848                           
  9849  0004                     interrupt_function:	
  9850  007E                     saved_w	set	btemp
  9851  0004  00FE               	movwf	btemp
  9852  0005  0E03               	swapf	3,w
  9853  0006  00F0               	movwf	??_ISR
  9854  0007  0804               	movf	4,w
  9855  0008  00F1               	movwf	??_ISR+1
  9856  0009  080A               	movf	10,w
  9857  000A  00F2               	movwf	??_ISR+2
  9858  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9859  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9860  000D  087F               	movf	btemp+1,w
  9861  000E  00F3               	movwf	??_ISR+3
  9862  000F  158A  2BCA         	ljmp	_ISR
  9863                           
  9864                           	psect	text67
  9865  0B87                     __ptext67:	
  9866 ;; *************** function _TMR1_ISR *****************
  9867 ;; Defined at:
  9868 ;;		line 236 in file "../src/MCU_B1.c"
  9869 ;; Parameters:    Size  Location     Type
  9870 ;;		None
  9871 ;; Auto vars:     Size  Location     Type
  9872 ;;		None
  9873 ;; Return value:  Size  Location     Type
  9874 ;;		None               void
  9875 ;; Registers used:
  9876 ;;		wreg, status,2
  9877 ;; Tracked objects:
  9878 ;;		On entry : 0/0
  9879 ;;		On exit  : 0/0
  9880 ;;		Unchanged: 0/0
  9881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9882 ;;      Params:         0       0       0       0
  9883 ;;      Locals:         0       0       0       0
  9884 ;;      Temps:          0       0       0       0
  9885 ;;      Totals:         0       0       0       0
  9886 ;;Total ram usage:        0 bytes
  9887 ;; Hardware stack levels used:    1
  9888 ;; This function calls:
  9889 ;;		Nothing
  9890 ;; This function is called by:
  9891 ;;		_ISR
  9892 ;; This function uses a non-reentrant model
  9893 ;;
  9894                           
  9895                           
  9896                           ;psect for function _TMR1_ISR
  9897  0B87                     _TMR1_ISR:	
  9898                           
  9899                           ;MCU_B1.c: 269: Timer1.Count++;
  9900                           
  9901                           ;incstack = 0
  9902                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9903  0B87  3001               	movlw	1
  9904  0B88  1283               	bcf	3,5	;RP0=0, select bank0
  9905  0B89  1303               	bcf	3,6	;RP1=0, select bank0
  9906  0B8A  07B3               	addwf	_Timer1+1,f
  9907  0B8B  1803               	skipnc
  9908  0B8C  0AB4               	incf	_Timer1+2,f
  9909  0B8D  3000               	movlw	0
  9910  0B8E  07B4               	addwf	_Timer1+2,f
  9911                           
  9912                           ;MCU_B1.c: 270: if (Timer1.Count == (int)(20*10)) {
  9913  0B8F  30C8               	movlw	200
  9914  0B90  0633               	xorwf	_Timer1+1,w
  9915  0B91  0434               	iorwf	_Timer1+2,w
  9916  0B92  1D03               	skipz
  9917  0B93  2B97               	goto	i1l3770
  9918                           
  9919                           ;MCU_B1.c: 271: Timer1.Count = 0;
  9920  0B94  01B3               	clrf	_Timer1+1
  9921  0B95  01B4               	clrf	_Timer1+2
  9922                           
  9923                           ;MCU_B1.c: 272: Timer1.Timeout = 1;
  9924  0B96  1432               	bsf	_Timer1,0
  9925  0B97                     i1l3770:	
  9926                           
  9927                           ;MCU_B1.c: 273: }
  9928                           ;MCU_B1.c: 275: TMR1H = (int)((65536-1480)/256);
  9929  0B97  30FA               	movlw	250
  9930  0B98  008F               	movwf	15	;volatile
  9931                           
  9932                           ;MCU_B1.c: 276: TMR1L = (int)((65536-1480)%256);
  9933  0B99  3038               	movlw	56
  9934  0B9A  008E               	movwf	14	;volatile
  9935                           
  9936                           ;MCU_B1.c: 277: TMR1IF = 0;
  9937  0B9B  100C               	bcf	12,0	;volatile
  9938  0B9C  0008               	return
  9939  0B9D                     __end_of_TMR1_ISR:	
  9940  007E                     btemp	set	126	;btemp
  9941  007E                     wtemp	set	126
  9942  007E                     wtemp0	set	126
  9943  0080                     wtemp1	set	128
  9944  0082                     wtemp2	set	130
  9945  0084                     wtemp3	set	132
  9946  0086                     wtemp4	set	134
  9947  0088                     wtemp5	set	136
  9948  007F                     wtemp6	set	127
  9949  007E                     ttemp	set	126
  9950  007E                     ttemp0	set	126
  9951  0081                     ttemp1	set	129
  9952  0084                     ttemp2	set	132
  9953  0087                     ttemp3	set	135
  9954  007F                     ttemp4	set	127
  9955  007E                     ltemp	set	126
  9956  007E                     ltemp0	set	126
  9957  0082                     ltemp1	set	130
  9958  0086                     ltemp2	set	134
  9959  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         137
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     23      70
    BANK1            80      0      70
    BANK2            16      0      16

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights1(BANK0[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setTemp_Main->_setOverTemp_ADV_Restore
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLights_SwOn->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status
    _setLights_SwOn->_setLights_Trigger
    _setLights_SwOff->_setLights_Trigger

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   26733
                                             18 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     902
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    2983
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1053
                                              0 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     669
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     524
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1569
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         8     8      0    1569
                                              8 BANK0      8     8      0
                            ___awdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
            _setOverTemp_ADV_Restore
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            12    12      0    3936
                                              6 BANK0     12    12      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    1989
                                              7 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      71
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    4304
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    2855
                                              4 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            2     1      1    2592
                                              2 BANK0      2     1      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      62
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1185
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1061
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2292
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2292
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2376
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2376
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    4302
                                              6 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOn                                       1     1      0     621
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOff                                      1     1      0     494
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_Trigger                                    3     2      1     401
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    2252
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setOverTemp_ADV_Restore
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A6       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      46       5       87.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      46       7       87.5%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0      10       9      100.0%
DATA                 0      0      A6      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Mar 31 13:24:56 2015

                        __CFG_CP$ON 0000                        _WDT_Clearing 0002  
         getMain_Lights_Count@count 0050                        ___awdiv@sign 0054  
                                _u1 0120                      setTemp_Main@AD 005D  
                                fsr 0004                 ___wmul@multiplicand 0051  
                               l123 0D4D                                 l266 0B58  
                               l611 0DA6                                 l606 0D8D  
                               l607 0DAA                                 l720 0270  
                               l721 026C                                 l722 0266  
                               l637 0610                                 l734 039C  
                               l718 0419                                 l728 03F2  
                               l729 03F0                                 l850 06C4  
                               l943 0098                                 l935 0219  
                               l936 0092                                 l856 0630  
                               l945 00AB                                 l937 0060  
                               _GIE 005F                                 _RB2 0032  
                               _LED 0076                                 _RB3 0033  
                               _RA5 002D                                 _RA6 002E  
                               _RA7 002F                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _ISR 0BCA                                 _PSA 040B  
                               _WDT 0035                   ??_setLights_SwOff 0076  
                               _Cmd 0037              getAll_Lights_Line@line 0074  
                               fsr0 0004                                 indf 0000  
                   __end_of_ADC_Set 0A92           __end_of_LightsPointSelect 0ACE  
                  _getLights_Status 0B2D             __size_of_Lights_Control 0083  
                              ?_ISR 0070                          Load_Main@i 005E  
                              l1312 0C95                                l1154 0AF0  
                              l1433 0CF1                                l5010 0E14  
                    _Load_Main$2655 0059                                l3270 0D89  
                              l3262 0D7D                                l5014 0E1D  
                              l5006 0E0B                                l3280 0DA1  
                              l3272 0D91                                l5040 0473  
                              l3522 0AB9                                l5018 0E26  
                              l5132 026F                                l5116 0250  
                              l5052 0494                                l5044 047E  
                              l5036 0468                                l3630 07D3  
                              l5062 04AD                                l4512 0F76  
                              l4504 0F6A                                l4600 0E47  
                              l5208 03D2                                l5048 0489  
                              l4530 0F88                                l4610 0E59  
                              l5154 02D2                                l5410 0213  
                              l4508 0F6E                                l4620 0E77  
                              l5244 0406                                l5180 035D  
                              l5148 0296                                l5340 00E5  
                              l3636 07EE                                l5092 053F  
                              l5084 0513                                l5068 04C9  
                              l4534 0F8E                                l4710 0772  
                              l4614 0E6C                                l4606 0E52  
                              l5262 0C96                                l5190 038E  
                              l5078 04F7                                l4480 0F46  
                              l5440 0579                                l5344 00F1  
                              l5328 00CE                                l5504 0FB5  
                              l4538 0F94                                l4490 0F53  
                              l5450 05AC                                l5434 056A  
                              l4730 07AC                                l4714 0778  
                              l5186 036D                                l5346 00F2  
                              l5290 0082                                l5098 054D  
                              l4484 0F4A                                l5460 05B3  
                              l4724 078A                                l4644 0EEF  
                              l5372 0177                                l5364 0146  
                              l5356 0132                                l5516 0FD8  
                              l4494 0F57                                l5462 05E2  
                              l5446 05A0                                l5470 0602  
                              l4726 0796                                l4718 077E  
                              l4670 0F2E                                l4662 0F1B  
                              l4654 0EF7                                l4638 0EE4  
                              l5198 03B9                                l4814 06A6  
                              l4752 0CE0                                l5448 057D  
                              l4728 079E                                l4656 0F05  
                              l4904 0DDA                                l5392 01E3  
                              l5376 01A9                                l4816 06AA  
                              l4680 0C74                                l5466 05F4  
                              l5458 05D6                                l4666 0F26  
                              l5378 01B8                                l4826 06C0  
                              l4932 0D58                                l4588 0BC2  
                              l4844 0D33                                l4908 0DE5  
                              l4780 0632                                l4684 0C7A  
                              l4862 0717                                l4678 0C71  
                              l3966 0C3F                                l4786 0643  
                              l4970 0EAF                                l4962 0E9B  
                              l4876 0CE7                                l4788 0646  
                              l4990 0ED3                                l4974 0EB7  
                              l4896 0DB6                                l4898 0DC4  
             _myMain_Initialization 0A4E                        __CFG_WDTE$ON 0000  
                              u2815 0BED                                u6025 0D68  
                              u3395 07FA                                u5235 0B81  
                              _PEIE 005E                                u5500 0793  
                              u7110 05DF                                u7015 0200  
                              u5520 07A9                                u5345 0EFA  
                              u7115 05BC                                u5365 0F06  
                              u5375 0F12                                u5800 0713  
                              u5385 0F1C                                u7090 05A9  
                              u7095 0586                                u6455 0294  
                              u5655 067F                                u5825 0736  
                              u6465 02D0                                u5915 0DC5  
                              u6555 03B1                                u6475 0327  
                              u5675 0697                                u5925 0DD1  
                              u5935 0DDB                                u5855 0CF2  
                              u5695 06B1                                u5785 06FF  
                              u5865 0CF9                                u6905 0110  
                              u6915 0128                                u5895 0DB9  
                              u6935 015F                                u6955 019B  
                              u6975 01C8                                __CDS 002E  
           ?_setSYSC_Initialization 0070                                _WPUB 0095  
                              _SYSC 0020                                __PIR 00A0  
                              _Load 00CA                                _Temp 0039  
                              _main 0F9A                                btemp 007E  
                   __end_of_WDT_Set 0B1E                                ltemp 007E  
                              start 0011                                ttemp 007E  
                              wtemp 007E                    __end_of_CDS_Main 0D6E  
      __size_of_Temp_Initialization 0003                               ??_ISR 0070  
                 _setLights_Trigger 0C49                       ??_Lights_Main 0076  
                     __CFG_PLLEN$ON 0000                    __end_of_LED_Main 0A52  
                ?_setLights_Trigger 004F                    ??_setPIRLED_Main 0051  
                             ?_main 0061                     __end_of___awdiv 0F35  
                             _ADRES 001E                     ___awdiv@divisor 004F  
                             _T1CON 0010                     __end_of___lwdiv 0DEC  
                             i1l440 0BD5                     ___awdiv@counter 0053  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTA 0005                               _PORTB 0006  
                             _PORTC 0007                               _TRISA 0085  
                             _TRISB 0086                               _TRISC 0087  
           __end_of_Timeout_Counter 0B87                               _Light 0077  
               ??_setLights_Trigger 0050                    __end_of_PIR_Main 0237  
                  __end_of_TMR1_ISR 0B9D                    __end_of_TMR1_Set 0B10  
                             _getAD 0C64      __end_of_setSYSC_Initialization 0A6D  
    getLights_Allow_Condition@allow 004F             __end_of_getLight_LoadGO 0A78  
                  __end_of_WDT_Main 0B4F                       _LightsControl 0079  
                    __CFG_BOREN$OFF 0000        __end_of_getMain_Lights_Count 0AE6  
                             pclath 000A                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080      __size_of_setLED_Initialization 0012  
     __end_of_setLED_Initialization 0B73                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
                 getPIR_AD@channel1 005C                   getPIR_AD@channel2 0057  
            ?_setLoad_AH_AL_Restore 0070                   setTemp_Main@error 0059  
                    _setLights_Main 0D0A                      _setLights_Line 0AF4  
                   __initialization 0013                      _setLights_SwOn 0CC0  
                __size_of_SYSC_Main 0003           __end_of_setLights_Trigger 0C64  
                      __end_of_main 1000                    __end_of_Fosc_Set 0A72  
    getMain_All_LightsStatus@status 0074                      _Exception_Main 054F  
                         ??_ADC_Set 0074                              ??_main 0065  
             PIR_Main@Enable_Switch 005C                 __end_of_Lights_Main 0C9E  
        __size_of_LightsPointSelect 000A            _getMain_All_LightsStatus 0ABB  
                            ?_getAD 0074              ?_myMain_Initialization 0070  
                            _ADCON0 001F                              _ADCON1 009F  
                  ___awdiv@dividend 0051                           ??_WDT_Set 0074  
                            _ANSELA 0185                              _ANSELB 0186  
          _getMain_All_Error_Status 0D6E                              i1l3770 0B97  
                            _FVRCON 009D              getLights_Status@lights 004F  
                            _PIRLED 002A                              _OSCCON 0090  
                __size_of_Load_Main 01EA                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0C15  
              Exception_Main@i_2379 005B              getLights_Status@status 0050  
            __end_of_setLights_Main 0D3A              __end_of_setLights_Line 0B02  
            __end_of_setLights_SwOn 0CE5        __size_of_SYSC_Initialization 0003  
          ?_setOverTemp_ADV_Restore 0070          __end_of_Mcu_Initialization 0B2D  
                            _Lights 0078                              _Timer1 0032  
       __size_of_CDS_Initialization 0004             ??_Lights_Initialization 0076  
            __end_of_Exception_Main 0611                Exception_Main@lights 0056  
                            ___wmul 0CE5                           ??___awdiv 0074  
                         ??___lwdiv 0074                Exception_Main@status 0058  
                            _setLED 0F35                              _myMain 0025  
                  ___awdiv@quotient 0055                  __size_of_Temp_Main 0003  
              Load_Main@LightsCount 005D         __end_of_Load_Initialization 0A55  
   getLights_Allow_Condition@lights 0070                              saved_w 007E  
                  setLights_SwOn@sw 0052                    ?_Timeout_Counter 0070  
       getMain_Lights_Count@status1 004F                   __end_of_SYSC_Main 0A5B  
                    _Lights_Control 06C8             __size_of_LedPointSelect 0012  
                         ?_CDS_Main 0070                  setTemp_Main@TempGO 005A  
                  ?_getLight_LoadGO 0070         __size_of_PIR_Initialization 000B  
           __end_of__initialization 002A                           ?_LED_Main 0070  
                     ?_my_MainTimer 0070                     ?_setLights_Main 0070  
                   ?_setLights_Line 0070                     ?_setLights_SwOn 0070  
                     ?_setSYSC_Main 0070                     _setLights_SwOff 0BFB  
        __size_of_setLights_Trigger 001B                      __pcstackCOMMON 0070  
                __size_of_getCDS_AD 0022                     ?_Exception_Main 0070  
          __end_of_getLights_Status 0B3E                       __end_of_getAD 0C80  
                         ?_PIR_Main 0070                           ?_TMR1_ISR 0070  
     __size_of_getLight_Load_Status 0006                           ?_TMR1_Set 0070  
            setLoad_AH_AL_Restore@i 0075                  _LED_Initialization 0A92  
                __size_of_getPIR_AD 012E                         _Lights_Main 0C80  
          _setLights_Initialization 0A84                _getMain_Lights_Count 0AD9  
                         ?_WDT_Main 0070                   __end_of_Load_Main 0421  
        __end_of_set_TimeoutCleared 0A84                 ?_LED_Initialization 0070  
            __end_of_Lights_Control 074B                             ??_getAD 0075  
               _Temp_Initialization 0A5B                          ??_CDS_Main 004F  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                        __pbssBANK2 0120                           ?_Fosc_Set 0070  
       __size_of_getAll_Lights_Line 0009                   __end_of_Temp_Main 0A61  
                           ?_IO_Set 0070                     __CFG_VCAPEN$DIS 0000  
                    ??_my_MainTimer 0074                          ??_LED_Main 0076  
                    ??_setSYSC_Main 0075                ??_LED_Initialization 0076  
                 LedPointSelect@led 0075                          __pmaintext 0F9A  
        ?_getLights_Allow_Condition 0070                ?_Temp_Initialization 0070  
              PIR_Main@LightsStatus 0060                             ?___wmul 004F  
                        ??_PIR_Main 0055                          ??_TMR1_ISR 0070  
                     ?_setTemp_Main 0070                  __size_of_setLights 004D  
                        _getLoad_AD 0E7C                          ??_TMR1_Set 0074  
                        __pintentry 0004                          _getLoad_OK 0A9A  
                           ?_setLED 004F             setLights_Trigger@lights 0051  
             ?_getMain_Lights_Count 0070                             _ADC_Set 0A8B  
                        _getTemp_AD 0DEC                          ??_WDT_Main 0074  
            __size_of_getCDS_Status 0008                     ?_Lights_Control 0070  
                 __end_of_getCDS_AD 0CC0                             _WDT_Set 0B10  
                     getPIR_AD@VRAD 005E                          ??_Fosc_Set 0074  
                 __end_of_getPIR_AD 054F             ??_setLoad_AH_AL_Restore 0074  
           __end_of_setLights_SwOff 0C15      _getLights_Allow_Condition$4712 0050  
                   __size_of_IO_Set 001A                          getCDS_AD@i 0052  
                        getCDS_AD@j 0053                             _Lights1 0042  
                           _VarLED1 0047                             _VarLED2 004B  
             ??_Temp_Initialization 0074                      ??_setTemp_Main 0057  
                           ___awdiv 0ED8                     __size_of___wmul 0025  
                           ___lwdiv 0DAC          ??_getMain_All_LightsStatus 0074  
                       PIR_Main@cds 005B                     __size_of_setLED 0065  
                           __ptext0 0000                             __ptext1 0C2F  
                           __ptext2 0A4E                             __ptext3 0DEC  
                           __ptext4 0421                             __ptext5 0E7C  
                           __ptext6 0C9E                             __ptext7 0C64  
                           __ptext8 0A7E                             __ptext9 0B73  
                        getPIR_AD@i 005F                          getPIR_AD@j 005B  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0074  
               _SYSC_Initialization 0A55             ??_myMain_Initialization 0074  
          ??_setTemp_Initialization 0074                      _LedPointSelect 0B4F  
                   getTemp_AD@ADRES 0052                             clrloop0 0AAB  
                 __end_of_setLights 0E7C                end_of_initialization 002A  
                     _getCDS_Status 0AA2                ?_SYSC_Initialization 0070  
             _setLED_Initialization 0B61                   setLights_SwOff@sw 0052  
                       ?_getLoad_AD 0070      __size_of_Lights_Initialization 0004  
                       ?_getLoad_OK 0070              ??_getMain_Lights_Count 0074  
     __end_of_Lights_Initialization 0A69                         ?_getTemp_AD 0070  
          setLED_Initialization@led 0051             setTemp_Main@DangerValue 005C  
                _Mcu_Initialization 0B1E    __size_of_setOverTemp_ADV_Restore 0019  
              __end_of_my_MainTimer 0C49                __end_of_setSYSC_Main 0800  
            __end_of_LedPointSelect 0B61            Load_Main@ErrorCountValue 005B  
               setPIRLED_Main@count 0052                 ?_Mcu_Initialization 0070  
           __size_of_setPIRLED_Main 0071                    ??_setLights_Main 0076  
                  ??_setLights_Line 0074                setLights_Main@lights 0053  
                  ??_setLights_SwOn 0076                           _SYSC_Main 0A58  
   getMain_All_Error_Status@command 0053                   __size_of_CDS_Main 0034  
                    ?_getCDS_Status 0070                    ?_setLights_SwOff 0070  
             ??_SYSC_Initialization 0074                    ??_Exception_Main 0055  
                    __end_of_IO_Set 0C2F          __end_of_CDS_Initialization 0A65  
        ??_setLights_Initialization 0076                   __size_of_LED_Main 0003  
              ??_Mcu_Initialization 0075                       ?_WDT_Clearing 0070  
                 ?_getLights_Status 0070                        ?_Lights_Main 0070  
                    __end_of___wmul 0D0A                   __size_of_PIR_Main 020A  
                 __size_of_TMR1_ISR 0016                  ??_getLights_Status 0076  
                 __size_of_TMR1_Set 000E                      __end_of_setLED 0F9A  
          ??_setSYSC_Initialization 0074                   __size_of_WDT_Main 0011  
               start_initialization 0013                     ?_LedPointSelect 0070  
              setLights_Line@lights 0074                           _Load_Main 0237  
                       __end_of_ISR 0BE2          __end_of_PIR_Initialization 0AD9  
      __size_of_Load_Initialization 0003        __end_of_getLight_Load_Status 0A7E  
   __size_of_setTemp_Initialization 0001                 getCDS_Status@status 0074  
              __end_of_setTemp_Main 06C8                 __size_of_getLoad_AD 005C  
               __size_of_getLoad_OK 0008                          ?_SYSC_Main 0070  
                _set_TimeoutCleared 0A7E                            ??_IO_Set 0074  
          __size_of_Timeout_Counter 0014                 __size_of_getTemp_AD 0043  
            ?_setLED_Initialization 0070                   __size_of_Fosc_Set 0005  
          __size_of_getLight_LoadGO 0006                           _Temp_Main 0A5E  
                   setLights@lights 0052                 ?_set_TimeoutCleared 0070  
                    ??_WDT_Clearing 0074         ??_getLights_Allow_Condition 0075  
               Exception_Main@count 0057                     setLights@status 0051  
               Exception_Main@error 005D                            ??___wmul 0074  
  __end_of_getMain_All_LightsStatus 0AC4                            ??_setLED 0076  
                          ?_ADC_Set 0070                    ??_Lights_Control 0057  
  __end_of_getMain_All_Error_Status 0DAC                         __pbssCOMMON 0076  
           Load_Main@Load_RunStatus 005C                           ___latbits 0001  
                        ?_Load_Main 0070                       __pcstackBANK0 004F  
              ??_set_TimeoutCleared 0074          __end_of_getAll_Lights_Line 0ABB  
                          ?_WDT_Set 0070                     ??_getCDS_Status 0074  
                     PIR_Main@error 005A                           _getCDS_AD 0C9E  
    __size_of_setLoad_AH_AL_Restore 0016       __end_of_setLoad_AH_AL_Restore 0BB3  
                         _getPIR_AD 0421         __size_of_LED_Initialization 0008  
                   Exception_Main@i 0059                          ?_Temp_Main 0070  
                  ___lwdiv@dividend 0051                      Load_Main@error 0058  
            _setTemp_Initialization 0A4D                       _PIR_Main$3182 005D  
                          ?___awdiv 004F               __size_of_my_MainTimer 001A  
                          ?___lwdiv 004F               __size_of_setSYSC_Main 0044  
           _setOverTemp_ADV_Restore 0BE2            setLights_Trigger@command 004F  
   __size_of_setSYSC_Initialization 0004           _getLights_Allow_Condition 0BB3  
    __size_of_myMain_Initialization 0001       __end_of_myMain_Initialization 0A4F  
                    __size_of_getAD 001C                    ___lwdiv@quotient 0054  
                    _setPIRLED_Main 074B                            _CDS_Main 0D3A  
                       ??_SYSC_Main 0075         __end_of_Temp_Initialization 0A5E  
                 interrupt_function 0004                          ?_getCDS_AD 004F  
                    ___wmul@product 0074                            _LED_Main 0A4F  
                         _setLights 0E2F                           clear_ram0 0AAA  
  __end_of_setLights_Initialization 0A8B                        _my_MainTimer 0C2F  
                        ?_getPIR_AD 0057                        _setSYSC_Main 07BC  
                          _GO_nDONE 00F9                   ??_Timeout_Counter 0074  
              PIR_Main@TriggerValue 005F                            _PIR_Main 002D  
                      ??_getLoad_AD 004F                            _TMR1_ISR 0B87  
                      ??_getLoad_OK 0074                _getLight_Load_Status 0A78  
                          _TMR1_Set 0B02                   ??_getLight_LoadGO 0074  
                      ??_getTemp_AD 004F                            _WDT_Main 0B3E  
                  __size_of_ADC_Set 0007                   ___wmul@multiplier 004F  
                    getPIR_AD@VRAD1 005D                __size_of_Lights_Main 001E  
             __size_of_setTemp_Main 00B7                         ??_Load_Main 0056  
            __end_of_setPIRLED_Main 07BC      getMain_All_Error_Status@status 0054  
                       getAD@adcon0 0075                         getAD@adcon1 0074  
              __end_of_WDT_Clearing 0004   __size_of_getMain_All_LightsStatus 0009  
         ?_getMain_All_LightsStatus 0070                            _Fosc_Set 0A6D  
                  __size_of_WDT_Set 000E                  __end_of_getLoad_AD 0ED8  
                __end_of_getLoad_OK 0AA2   __size_of_getMain_All_Error_Status 003E  
         ?_getMain_All_Error_Status 0070                          ?_setLights 0051  
                __end_of_getTemp_AD 0E2F              _setSYSC_Initialization 0A69  
                 getLoad_AD@channel 0051                   _DetectSYSC_Signal 0AE6  
                          _SwDetect 0038                         ??_Temp_Main 0076  
     _getMain_All_Error_Status$2366 004F       _getMain_All_Error_Status$2367 0051  
               _Load_Initialization 0A52                  ?_DetectSYSC_Signal 0070  
                         setLED@led 0050           ??_setOverTemp_ADV_Restore 0074  
             ?_getLight_Load_Status 0070                        _setTemp_Main 0611  
                  __size_of___awdiv 005D      getLight_Load_Status@loadstatus 0074  
                  __size_of___lwdiv 0040                    ??_LedPointSelect 0074  
     __size_of_getMain_Lights_Count 000D                 ??_DetectSYSC_Signal 0074  
                _CDS_Initialization 0A61               _Lights_Initialization 0A65  
                 getTemp_AD@channel 0051                     ?_setPIRLED_Main 0070  
                   ___lwdiv@divisor 004F                ?_Load_Initialization 0070  
               ?_CDS_Initialization 0070                     ___lwdiv@counter 0053  
                          __ptext10 0B3E                            __ptext11 0002  
                          __ptext20 0A69                            __ptext12 0A5E  
                          __ptext21 002D                            __ptext13 0611  
                          __ptext30 0237                            __ptext22 0AA2  
                          __ptext14 0BE2                            __ptext31 0AD9  
                          __ptext23 0ACE                            __ptext15 0A5B  
                          __ptext40 0E2F                            __ptext32 0A78  
                          __ptext24 0B1E                            __ptext16 0A4D  
                          __ptext41 0AF4                            __ptext33 0A72  
                          __ptext25 0B10                            __ptext17 0A58  
                          __ptext50 0A92                            __ptext42 0BB3  
                          __ptext34 0CE5                            __ptext26 0B02  
                          __ptext18 07BC                            __ptext51 0B61  
                          __ptext43 0A9A                            __ptext35 0DAC  
                          __ptext27 0C15                            __ptext19 0A55  
                          __ptext60 0ABB                            __ptext52 054F  
                          __ptext44 06C8                            __ptext36 0A52  
                          __ptext28 0A6D                            __ptext61 0D6E  
                          __ptext53 0CC0                            __ptext45 0ED8  
                          __ptext37 0B9D                            __ptext29 0A8B  
                          __ptext62 0AB2                            __ptext54 0B2D  
                          __ptext46 0A65                            __ptext38 0C80  
                          __ptext63 0AE6                            __ptext55 0BFB  
                          __ptext47 0A84                            __ptext39 0D0A  
                          __ptext64 0D3A                            __ptext56 0C49  
                          __ptext48 0A4F                            __ptext65 0A61  
                          __ptext57 0AC4                            __ptext49 074B  
                          __ptext66 0BCA                            __ptext58 0F35  
                          __ptext67 0B87                            __ptext59 0B4F  
         __size_of_getLights_Status 0011         __end_of_SYSC_Initialization 0A58  
           ??_setLED_Initialization 0076                         ??_getCDS_AD 0050  
                     setLED@command 004F           __end_of_DetectSYSC_Signal 0AF4  
                     __size_of_main 0066            setOverTemp_ADV_Restore@i 0074  
                       ??_getPIR_AD 0058                  _PIR_Initialization 0ACE  
              ??_CDS_Initialization 0074         __size_of_Mcu_Initialization 000F  
          __size_of_setLights_SwOff 001A                        getLoad_OK@ok 0074  
               ?_PIR_Initialization 0070                            main@argc 0061  
                          main@argv 0063   __size_of_setLights_Initialization 0007  
         ?_setLights_Initialization 0070               ??_Load_Initialization 0076  
              Lights_Control@lights 0059     __end_of_setOverTemp_ADV_Restore 0BFB  
              ??_PIR_Initialization 0074                            intlevel1 0000  
__size_of_getLights_Allow_Condition 0017               setTemp_Main@SafeValue 005B  
                       ??_setLights 0076             ?_setTemp_Initialization 0070  
           LightsPointSelect@lights 0075                  _getAll_Lights_Line 0AB2  
                   getLoad_AD@ADRES 0054              ??_getLight_Load_Status 0074  
                       getLoad_AD@i 0055                         getLoad_AD@j 0053  
                       getLoad_AD@k 0052             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 000E             __size_of_setLights_SwOn 0025  
               ?_getAll_Lights_Line 0070               getLight_LoadGO@loadgo 0074  
            ?_Lights_Initialization 0070             __size_of_Exception_Main 00C2  
             __size_of_WDT_Clearing 0002      setLights_Initialization@lights 004F  
       __size_of_set_TimeoutCleared 0006                   _LightsPointSelect 0AC4  
              ??_getAll_Lights_Line 0074                  __CFG_FOSC$INTOSCIO 0000  
                ?_LightsPointSelect 0070                     _Timeout_Counter 0B73  
        __end_of_LED_Initialization 0A9A               __end_of_getCDS_Status 0AAA  
    __end_of_setTemp_Initialization 0A4E          __size_of_DetectSYSC_Signal 000E  
                   _getLight_LoadGO 0A72                   getCDS_AD@channel1 0054  
                 getCDS_AD@channel2 004F   __end_of_getLights_Allow_Condition 0BCA  
               ??_LightsPointSelect 0074               _setLoad_AH_AL_Restore 0B9D  
