

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Nov 15 11:02:17 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	intentry,global,class=CODE,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	dabs	1,0x7E,2
   154  0000                     	;# 
   155  0001                     	;# 
   156  0002                     	;# 
   157  0003                     	;# 
   158  0004                     	;# 
   159  0005                     	;# 
   160  0006                     	;# 
   161  0007                     	;# 
   162  0008                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  0010                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  0090                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0099                     	;# 
   191  009A                     	;# 
   192  009B                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  0116                     	;# 
   201  0117                     	;# 
   202  011D                     	;# 
   203  018C                     	;# 
   204  018D                     	;# 
   205  018E                     	;# 
   206  0191                     	;# 
   207  0191                     	;# 
   208  0192                     	;# 
   209  0193                     	;# 
   210  0193                     	;# 
   211  0194                     	;# 
   212  0195                     	;# 
   213  0196                     	;# 
   214  0197                     	;# 
   215  0199                     	;# 
   216  019A                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019C                     	;# 
   222  019C                     	;# 
   223  019D                     	;# 
   224  019E                     	;# 
   225  019F                     	;# 
   226  020D                     	;# 
   227  0210                     	;# 
   228  0211                     	;# 
   229  0211                     	;# 
   230  0212                     	;# 
   231  0212                     	;# 
   232  0213                     	;# 
   233  0213                     	;# 
   234  0214                     	;# 
   235  0214                     	;# 
   236  0215                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0216                     	;# 
   240  0216                     	;# 
   241  0217                     	;# 
   242  0217                     	;# 
   243  0291                     	;# 
   244  0291                     	;# 
   245  0292                     	;# 
   246  0293                     	;# 
   247  0298                     	;# 
   248  0298                     	;# 
   249  0299                     	;# 
   250  029A                     	;# 
   251  0394                     	;# 
   252  0395                     	;# 
   253  0396                     	;# 
   254  0FE4                     	;# 
   255  0FE5                     	;# 
   256  0FE6                     	;# 
   257  0FE7                     	;# 
   258  0FE8                     	;# 
   259  0FE9                     	;# 
   260  0FEA                     	;# 
   261  0FEB                     	;# 
   262  0FED                     	;# 
   263  0FEE                     	;# 
   264  0FEF                     	;# 
   265  0000                     	;# 
   266  0001                     	;# 
   267  0002                     	;# 
   268  0003                     	;# 
   269  0004                     	;# 
   270  0005                     	;# 
   271  0006                     	;# 
   272  0007                     	;# 
   273  0008                     	;# 
   274  0009                     	;# 
   275  000A                     	;# 
   276  000B                     	;# 
   277  000C                     	;# 
   278  000D                     	;# 
   279  000E                     	;# 
   280  0010                     	;# 
   281  0011                     	;# 
   282  0012                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0016                     	;# 
   286  0017                     	;# 
   287  0018                     	;# 
   288  0019                     	;# 
   289  001A                     	;# 
   290  001B                     	;# 
   291  001C                     	;# 
   292  008C                     	;# 
   293  008D                     	;# 
   294  008E                     	;# 
   295  0090                     	;# 
   296  0091                     	;# 
   297  0092                     	;# 
   298  0095                     	;# 
   299  0096                     	;# 
   300  0097                     	;# 
   301  0099                     	;# 
   302  009A                     	;# 
   303  009B                     	;# 
   304  009B                     	;# 
   305  009C                     	;# 
   306  009D                     	;# 
   307  009E                     	;# 
   308  010C                     	;# 
   309  010D                     	;# 
   310  010E                     	;# 
   311  0116                     	;# 
   312  0117                     	;# 
   313  011D                     	;# 
   314  018C                     	;# 
   315  018D                     	;# 
   316  018E                     	;# 
   317  0191                     	;# 
   318  0191                     	;# 
   319  0192                     	;# 
   320  0193                     	;# 
   321  0193                     	;# 
   322  0194                     	;# 
   323  0195                     	;# 
   324  0196                     	;# 
   325  0197                     	;# 
   326  0199                     	;# 
   327  019A                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019C                     	;# 
   333  019C                     	;# 
   334  019D                     	;# 
   335  019E                     	;# 
   336  019F                     	;# 
   337  020D                     	;# 
   338  0210                     	;# 
   339  0211                     	;# 
   340  0211                     	;# 
   341  0212                     	;# 
   342  0212                     	;# 
   343  0213                     	;# 
   344  0213                     	;# 
   345  0214                     	;# 
   346  0214                     	;# 
   347  0215                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0216                     	;# 
   351  0216                     	;# 
   352  0217                     	;# 
   353  0217                     	;# 
   354  0291                     	;# 
   355  0291                     	;# 
   356  0292                     	;# 
   357  0293                     	;# 
   358  0298                     	;# 
   359  0298                     	;# 
   360  0299                     	;# 
   361  029A                     	;# 
   362  0394                     	;# 
   363  0395                     	;# 
   364  0396                     	;# 
   365  0FE4                     	;# 
   366  0FE5                     	;# 
   367  0FE6                     	;# 
   368  0FE7                     	;# 
   369  0FE8                     	;# 
   370  0FE9                     	;# 
   371  0FEA                     	;# 
   372  0FEB                     	;# 
   373  0FED                     	;# 
   374  0FEE                     	;# 
   375  0FEF                     	;# 
   376  0000                     	;# 
   377  0001                     	;# 
   378  0002                     	;# 
   379  0003                     	;# 
   380  0004                     	;# 
   381  0005                     	;# 
   382  0006                     	;# 
   383  0007                     	;# 
   384  0008                     	;# 
   385  0009                     	;# 
   386  000A                     	;# 
   387  000B                     	;# 
   388  000C                     	;# 
   389  000D                     	;# 
   390  000E                     	;# 
   391  0010                     	;# 
   392  0011                     	;# 
   393  0012                     	;# 
   394  0015                     	;# 
   395  0016                     	;# 
   396  0016                     	;# 
   397  0017                     	;# 
   398  0018                     	;# 
   399  0019                     	;# 
   400  001A                     	;# 
   401  001B                     	;# 
   402  001C                     	;# 
   403  008C                     	;# 
   404  008D                     	;# 
   405  008E                     	;# 
   406  0090                     	;# 
   407  0091                     	;# 
   408  0092                     	;# 
   409  0095                     	;# 
   410  0096                     	;# 
   411  0097                     	;# 
   412  0099                     	;# 
   413  009A                     	;# 
   414  009B                     	;# 
   415  009B                     	;# 
   416  009C                     	;# 
   417  009D                     	;# 
   418  009E                     	;# 
   419  010C                     	;# 
   420  010D                     	;# 
   421  010E                     	;# 
   422  0116                     	;# 
   423  0117                     	;# 
   424  011D                     	;# 
   425  018C                     	;# 
   426  018D                     	;# 
   427  018E                     	;# 
   428  0191                     	;# 
   429  0191                     	;# 
   430  0192                     	;# 
   431  0193                     	;# 
   432  0193                     	;# 
   433  0194                     	;# 
   434  0195                     	;# 
   435  0196                     	;# 
   436  0197                     	;# 
   437  0199                     	;# 
   438  019A                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019C                     	;# 
   444  019C                     	;# 
   445  019D                     	;# 
   446  019E                     	;# 
   447  019F                     	;# 
   448  020D                     	;# 
   449  0210                     	;# 
   450  0211                     	;# 
   451  0211                     	;# 
   452  0212                     	;# 
   453  0212                     	;# 
   454  0213                     	;# 
   455  0213                     	;# 
   456  0214                     	;# 
   457  0214                     	;# 
   458  0215                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0216                     	;# 
   462  0216                     	;# 
   463  0217                     	;# 
   464  0217                     	;# 
   465  0291                     	;# 
   466  0291                     	;# 
   467  0292                     	;# 
   468  0293                     	;# 
   469  0298                     	;# 
   470  0298                     	;# 
   471  0299                     	;# 
   472  029A                     	;# 
   473  0394                     	;# 
   474  0395                     	;# 
   475  0396                     	;# 
   476  0FE4                     	;# 
   477  0FE5                     	;# 
   478  0FE6                     	;# 
   479  0FE7                     	;# 
   480  0FE8                     	;# 
   481  0FE9                     	;# 
   482  0FEA                     	;# 
   483  0FEB                     	;# 
   484  0FED                     	;# 
   485  0FEE                     	;# 
   486  0FEF                     	;# 
   487  0000                     	;# 
   488  0001                     	;# 
   489  0002                     	;# 
   490  0003                     	;# 
   491  0004                     	;# 
   492  0005                     	;# 
   493  0006                     	;# 
   494  0007                     	;# 
   495  0008                     	;# 
   496  0009                     	;# 
   497  000A                     	;# 
   498  000B                     	;# 
   499  000C                     	;# 
   500  000D                     	;# 
   501  000E                     	;# 
   502  0010                     	;# 
   503  0011                     	;# 
   504  0012                     	;# 
   505  0015                     	;# 
   506  0016                     	;# 
   507  0016                     	;# 
   508  0017                     	;# 
   509  0018                     	;# 
   510  0019                     	;# 
   511  001A                     	;# 
   512  001B                     	;# 
   513  001C                     	;# 
   514  008C                     	;# 
   515  008D                     	;# 
   516  008E                     	;# 
   517  0090                     	;# 
   518  0091                     	;# 
   519  0092                     	;# 
   520  0095                     	;# 
   521  0096                     	;# 
   522  0097                     	;# 
   523  0099                     	;# 
   524  009A                     	;# 
   525  009B                     	;# 
   526  009B                     	;# 
   527  009C                     	;# 
   528  009D                     	;# 
   529  009E                     	;# 
   530  010C                     	;# 
   531  010D                     	;# 
   532  010E                     	;# 
   533  0116                     	;# 
   534  0117                     	;# 
   535  011D                     	;# 
   536  018C                     	;# 
   537  018D                     	;# 
   538  018E                     	;# 
   539  0191                     	;# 
   540  0191                     	;# 
   541  0192                     	;# 
   542  0193                     	;# 
   543  0193                     	;# 
   544  0194                     	;# 
   545  0195                     	;# 
   546  0196                     	;# 
   547  0197                     	;# 
   548  0199                     	;# 
   549  019A                     	;# 
   550  019B                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019C                     	;# 
   555  019C                     	;# 
   556  019D                     	;# 
   557  019E                     	;# 
   558  019F                     	;# 
   559  020D                     	;# 
   560  0210                     	;# 
   561  0211                     	;# 
   562  0211                     	;# 
   563  0212                     	;# 
   564  0212                     	;# 
   565  0213                     	;# 
   566  0213                     	;# 
   567  0214                     	;# 
   568  0214                     	;# 
   569  0215                     	;# 
   570  0215                     	;# 
   571  0215                     	;# 
   572  0216                     	;# 
   573  0216                     	;# 
   574  0217                     	;# 
   575  0217                     	;# 
   576  0291                     	;# 
   577  0291                     	;# 
   578  0292                     	;# 
   579  0293                     	;# 
   580  0298                     	;# 
   581  0298                     	;# 
   582  0299                     	;# 
   583  029A                     	;# 
   584  0394                     	;# 
   585  0395                     	;# 
   586  0396                     	;# 
   587  0FE4                     	;# 
   588  0FE5                     	;# 
   589  0FE6                     	;# 
   590  0FE7                     	;# 
   591  0FE8                     	;# 
   592  0FE9                     	;# 
   593  0FEA                     	;# 
   594  0FEB                     	;# 
   595  0FED                     	;# 
   596  0FEE                     	;# 
   597  0FEF                     	;# 
   598  0000                     	;# 
   599  0001                     	;# 
   600  0002                     	;# 
   601  0003                     	;# 
   602  0004                     	;# 
   603  0005                     	;# 
   604  0006                     	;# 
   605  0007                     	;# 
   606  0008                     	;# 
   607  0009                     	;# 
   608  000A                     	;# 
   609  000B                     	;# 
   610  000C                     	;# 
   611  000D                     	;# 
   612  000E                     	;# 
   613  0010                     	;# 
   614  0011                     	;# 
   615  0012                     	;# 
   616  0015                     	;# 
   617  0016                     	;# 
   618  0016                     	;# 
   619  0017                     	;# 
   620  0018                     	;# 
   621  0019                     	;# 
   622  001A                     	;# 
   623  001B                     	;# 
   624  001C                     	;# 
   625  008C                     	;# 
   626  008D                     	;# 
   627  008E                     	;# 
   628  0090                     	;# 
   629  0091                     	;# 
   630  0092                     	;# 
   631  0095                     	;# 
   632  0096                     	;# 
   633  0097                     	;# 
   634  0099                     	;# 
   635  009A                     	;# 
   636  009B                     	;# 
   637  009B                     	;# 
   638  009C                     	;# 
   639  009D                     	;# 
   640  009E                     	;# 
   641  010C                     	;# 
   642  010D                     	;# 
   643  010E                     	;# 
   644  0116                     	;# 
   645  0117                     	;# 
   646  011D                     	;# 
   647  018C                     	;# 
   648  018D                     	;# 
   649  018E                     	;# 
   650  0191                     	;# 
   651  0191                     	;# 
   652  0192                     	;# 
   653  0193                     	;# 
   654  0193                     	;# 
   655  0194                     	;# 
   656  0195                     	;# 
   657  0196                     	;# 
   658  0197                     	;# 
   659  0199                     	;# 
   660  019A                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019C                     	;# 
   666  019C                     	;# 
   667  019D                     	;# 
   668  019E                     	;# 
   669  019F                     	;# 
   670  020D                     	;# 
   671  0210                     	;# 
   672  0211                     	;# 
   673  0211                     	;# 
   674  0212                     	;# 
   675  0212                     	;# 
   676  0213                     	;# 
   677  0213                     	;# 
   678  0214                     	;# 
   679  0214                     	;# 
   680  0215                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0216                     	;# 
   684  0216                     	;# 
   685  0217                     	;# 
   686  0217                     	;# 
   687  0291                     	;# 
   688  0291                     	;# 
   689  0292                     	;# 
   690  0293                     	;# 
   691  0298                     	;# 
   692  0298                     	;# 
   693  0299                     	;# 
   694  029A                     	;# 
   695  0394                     	;# 
   696  0395                     	;# 
   697  0396                     	;# 
   698  0FE4                     	;# 
   699  0FE5                     	;# 
   700  0FE6                     	;# 
   701  0FE7                     	;# 
   702  0FE8                     	;# 
   703  0FE9                     	;# 
   704  0FEA                     	;# 
   705  0FEB                     	;# 
   706  0FED                     	;# 
   707  0FEE                     	;# 
   708  0FEF                     	;# 
   709  0000                     	;# 
   710  0001                     	;# 
   711  0002                     	;# 
   712  0003                     	;# 
   713  0004                     	;# 
   714  0005                     	;# 
   715  0006                     	;# 
   716  0007                     	;# 
   717  0008                     	;# 
   718  0009                     	;# 
   719  000A                     	;# 
   720  000B                     	;# 
   721  000C                     	;# 
   722  000D                     	;# 
   723  000E                     	;# 
   724  0010                     	;# 
   725  0011                     	;# 
   726  0012                     	;# 
   727  0015                     	;# 
   728  0016                     	;# 
   729  0016                     	;# 
   730  0017                     	;# 
   731  0018                     	;# 
   732  0019                     	;# 
   733  001A                     	;# 
   734  001B                     	;# 
   735  001C                     	;# 
   736  008C                     	;# 
   737  008D                     	;# 
   738  008E                     	;# 
   739  0090                     	;# 
   740  0091                     	;# 
   741  0092                     	;# 
   742  0095                     	;# 
   743  0096                     	;# 
   744  0097                     	;# 
   745  0099                     	;# 
   746  009A                     	;# 
   747  009B                     	;# 
   748  009B                     	;# 
   749  009C                     	;# 
   750  009D                     	;# 
   751  009E                     	;# 
   752  010C                     	;# 
   753  010D                     	;# 
   754  010E                     	;# 
   755  0116                     	;# 
   756  0117                     	;# 
   757  011D                     	;# 
   758  018C                     	;# 
   759  018D                     	;# 
   760  018E                     	;# 
   761  0191                     	;# 
   762  0191                     	;# 
   763  0192                     	;# 
   764  0193                     	;# 
   765  0193                     	;# 
   766  0194                     	;# 
   767  0195                     	;# 
   768  0196                     	;# 
   769  0197                     	;# 
   770  0199                     	;# 
   771  019A                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019C                     	;# 
   777  019C                     	;# 
   778  019D                     	;# 
   779  019E                     	;# 
   780  019F                     	;# 
   781  020D                     	;# 
   782  0210                     	;# 
   783  0211                     	;# 
   784  0211                     	;# 
   785  0212                     	;# 
   786  0212                     	;# 
   787  0213                     	;# 
   788  0213                     	;# 
   789  0214                     	;# 
   790  0214                     	;# 
   791  0215                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0216                     	;# 
   795  0216                     	;# 
   796  0217                     	;# 
   797  0217                     	;# 
   798  0291                     	;# 
   799  0291                     	;# 
   800  0292                     	;# 
   801  0293                     	;# 
   802  0298                     	;# 
   803  0298                     	;# 
   804  0299                     	;# 
   805  029A                     	;# 
   806  0394                     	;# 
   807  0395                     	;# 
   808  0396                     	;# 
   809  0FE4                     	;# 
   810  0FE5                     	;# 
   811  0FE6                     	;# 
   812  0FE7                     	;# 
   813  0FE8                     	;# 
   814  0FE9                     	;# 
   815  0FEA                     	;# 
   816  0FEB                     	;# 
   817  0FED                     	;# 
   818  0FEE                     	;# 
   819  0FEF                     	;# 
   820  0000                     	;# 
   821  0001                     	;# 
   822  0002                     	;# 
   823  0003                     	;# 
   824  0004                     	;# 
   825  0005                     	;# 
   826  0006                     	;# 
   827  0007                     	;# 
   828  0008                     	;# 
   829  0009                     	;# 
   830  000A                     	;# 
   831  000B                     	;# 
   832  000C                     	;# 
   833  000D                     	;# 
   834  000E                     	;# 
   835  0010                     	;# 
   836  0011                     	;# 
   837  0012                     	;# 
   838  0015                     	;# 
   839  0016                     	;# 
   840  0016                     	;# 
   841  0017                     	;# 
   842  0018                     	;# 
   843  0019                     	;# 
   844  001A                     	;# 
   845  001B                     	;# 
   846  001C                     	;# 
   847  008C                     	;# 
   848  008D                     	;# 
   849  008E                     	;# 
   850  0090                     	;# 
   851  0091                     	;# 
   852  0092                     	;# 
   853  0095                     	;# 
   854  0096                     	;# 
   855  0097                     	;# 
   856  0099                     	;# 
   857  009A                     	;# 
   858  009B                     	;# 
   859  009B                     	;# 
   860  009C                     	;# 
   861  009D                     	;# 
   862  009E                     	;# 
   863  010C                     	;# 
   864  010D                     	;# 
   865  010E                     	;# 
   866  0116                     	;# 
   867  0117                     	;# 
   868  011D                     	;# 
   869  018C                     	;# 
   870  018D                     	;# 
   871  018E                     	;# 
   872  0191                     	;# 
   873  0191                     	;# 
   874  0192                     	;# 
   875  0193                     	;# 
   876  0193                     	;# 
   877  0194                     	;# 
   878  0195                     	;# 
   879  0196                     	;# 
   880  0197                     	;# 
   881  0199                     	;# 
   882  019A                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019C                     	;# 
   888  019C                     	;# 
   889  019D                     	;# 
   890  019E                     	;# 
   891  019F                     	;# 
   892  020D                     	;# 
   893  0210                     	;# 
   894  0211                     	;# 
   895  0211                     	;# 
   896  0212                     	;# 
   897  0212                     	;# 
   898  0213                     	;# 
   899  0213                     	;# 
   900  0214                     	;# 
   901  0214                     	;# 
   902  0215                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0216                     	;# 
   906  0216                     	;# 
   907  0217                     	;# 
   908  0217                     	;# 
   909  0291                     	;# 
   910  0291                     	;# 
   911  0292                     	;# 
   912  0293                     	;# 
   913  0298                     	;# 
   914  0298                     	;# 
   915  0299                     	;# 
   916  029A                     	;# 
   917  0394                     	;# 
   918  0395                     	;# 
   919  0396                     	;# 
   920  0FE4                     	;# 
   921  0FE5                     	;# 
   922  0FE6                     	;# 
   923  0FE7                     	;# 
   924  0FE8                     	;# 
   925  0FE9                     	;# 
   926  0FEA                     	;# 
   927  0FEB                     	;# 
   928  0FED                     	;# 
   929  0FEE                     	;# 
   930  0FEF                     	;# 
   931  0000                     	;# 
   932  0001                     	;# 
   933  0002                     	;# 
   934  0003                     	;# 
   935  0004                     	;# 
   936  0005                     	;# 
   937  0006                     	;# 
   938  0007                     	;# 
   939  0008                     	;# 
   940  0009                     	;# 
   941  000A                     	;# 
   942  000B                     	;# 
   943  000C                     	;# 
   944  000D                     	;# 
   945  000E                     	;# 
   946  0010                     	;# 
   947  0011                     	;# 
   948  0012                     	;# 
   949  0015                     	;# 
   950  0016                     	;# 
   951  0016                     	;# 
   952  0017                     	;# 
   953  0018                     	;# 
   954  0019                     	;# 
   955  001A                     	;# 
   956  001B                     	;# 
   957  001C                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  0090                     	;# 
   962  0091                     	;# 
   963  0092                     	;# 
   964  0095                     	;# 
   965  0096                     	;# 
   966  0097                     	;# 
   967  0099                     	;# 
   968  009A                     	;# 
   969  009B                     	;# 
   970  009B                     	;# 
   971  009C                     	;# 
   972  009D                     	;# 
   973  009E                     	;# 
   974  010C                     	;# 
   975  010D                     	;# 
   976  010E                     	;# 
   977  0116                     	;# 
   978  0117                     	;# 
   979  011D                     	;# 
   980  018C                     	;# 
   981  018D                     	;# 
   982  018E                     	;# 
   983  0191                     	;# 
   984  0191                     	;# 
   985  0192                     	;# 
   986  0193                     	;# 
   987  0193                     	;# 
   988  0194                     	;# 
   989  0195                     	;# 
   990  0196                     	;# 
   991  0197                     	;# 
   992  0199                     	;# 
   993  019A                     	;# 
   994  019B                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019C                     	;# 
   999  019C                     	;# 
  1000  019D                     	;# 
  1001  019E                     	;# 
  1002  019F                     	;# 
  1003  020D                     	;# 
  1004  0210                     	;# 
  1005  0211                     	;# 
  1006  0211                     	;# 
  1007  0212                     	;# 
  1008  0212                     	;# 
  1009  0213                     	;# 
  1010  0213                     	;# 
  1011  0214                     	;# 
  1012  0214                     	;# 
  1013  0215                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0216                     	;# 
  1017  0216                     	;# 
  1018  0217                     	;# 
  1019  0217                     	;# 
  1020  0291                     	;# 
  1021  0291                     	;# 
  1022  0292                     	;# 
  1023  0293                     	;# 
  1024  0298                     	;# 
  1025  0298                     	;# 
  1026  0299                     	;# 
  1027  029A                     	;# 
  1028  0394                     	;# 
  1029  0395                     	;# 
  1030  0396                     	;# 
  1031  0FE4                     	;# 
  1032  0FE5                     	;# 
  1033  0FE6                     	;# 
  1034  0FE7                     	;# 
  1035  0FE8                     	;# 
  1036  0FE9                     	;# 
  1037  0FEA                     	;# 
  1038  0FEB                     	;# 
  1039  0FED                     	;# 
  1040  0FEE                     	;# 
  1041  0FEF                     	;# 
  1042  0000                     	;# 
  1043  0001                     	;# 
  1044  0002                     	;# 
  1045  0003                     	;# 
  1046  0004                     	;# 
  1047  0005                     	;# 
  1048  0006                     	;# 
  1049  0007                     	;# 
  1050  0008                     	;# 
  1051  0009                     	;# 
  1052  000A                     	;# 
  1053  000B                     	;# 
  1054  000C                     	;# 
  1055  000D                     	;# 
  1056  000E                     	;# 
  1057  0010                     	;# 
  1058  0011                     	;# 
  1059  0012                     	;# 
  1060  0015                     	;# 
  1061  0016                     	;# 
  1062  0016                     	;# 
  1063  0017                     	;# 
  1064  0018                     	;# 
  1065  0019                     	;# 
  1066  001A                     	;# 
  1067  001B                     	;# 
  1068  001C                     	;# 
  1069  008C                     	;# 
  1070  008D                     	;# 
  1071  008E                     	;# 
  1072  0090                     	;# 
  1073  0091                     	;# 
  1074  0092                     	;# 
  1075  0095                     	;# 
  1076  0096                     	;# 
  1077  0097                     	;# 
  1078  0099                     	;# 
  1079  009A                     	;# 
  1080  009B                     	;# 
  1081  009B                     	;# 
  1082  009C                     	;# 
  1083  009D                     	;# 
  1084  009E                     	;# 
  1085  010C                     	;# 
  1086  010D                     	;# 
  1087  010E                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  011D                     	;# 
  1091  018C                     	;# 
  1092  018D                     	;# 
  1093  018E                     	;# 
  1094  0191                     	;# 
  1095  0191                     	;# 
  1096  0192                     	;# 
  1097  0193                     	;# 
  1098  0193                     	;# 
  1099  0194                     	;# 
  1100  0195                     	;# 
  1101  0196                     	;# 
  1102  0197                     	;# 
  1103  0199                     	;# 
  1104  019A                     	;# 
  1105  019B                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019C                     	;# 
  1110  019C                     	;# 
  1111  019D                     	;# 
  1112  019E                     	;# 
  1113  019F                     	;# 
  1114  020D                     	;# 
  1115  0210                     	;# 
  1116  0211                     	;# 
  1117  0211                     	;# 
  1118  0212                     	;# 
  1119  0212                     	;# 
  1120  0213                     	;# 
  1121  0213                     	;# 
  1122  0214                     	;# 
  1123  0214                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0216                     	;# 
  1128  0216                     	;# 
  1129  0217                     	;# 
  1130  0217                     	;# 
  1131  0291                     	;# 
  1132  0291                     	;# 
  1133  0292                     	;# 
  1134  0293                     	;# 
  1135  0298                     	;# 
  1136  0298                     	;# 
  1137  0299                     	;# 
  1138  029A                     	;# 
  1139  0394                     	;# 
  1140  0395                     	;# 
  1141  0396                     	;# 
  1142  0FE4                     	;# 
  1143  0FE5                     	;# 
  1144  0FE6                     	;# 
  1145  0FE7                     	;# 
  1146  0FE8                     	;# 
  1147  0FE9                     	;# 
  1148  0FEA                     	;# 
  1149  0FEB                     	;# 
  1150  0FED                     	;# 
  1151  0FEE                     	;# 
  1152  0FEF                     	;# 
  1153  0000                     	;# 
  1154  0001                     	;# 
  1155  0002                     	;# 
  1156  0003                     	;# 
  1157  0004                     	;# 
  1158  0005                     	;# 
  1159  0006                     	;# 
  1160  0007                     	;# 
  1161  0008                     	;# 
  1162  0009                     	;# 
  1163  000A                     	;# 
  1164  000B                     	;# 
  1165  000C                     	;# 
  1166  000D                     	;# 
  1167  000E                     	;# 
  1168  0010                     	;# 
  1169  0011                     	;# 
  1170  0012                     	;# 
  1171  0015                     	;# 
  1172  0016                     	;# 
  1173  0016                     	;# 
  1174  0017                     	;# 
  1175  0018                     	;# 
  1176  0019                     	;# 
  1177  001A                     	;# 
  1178  001B                     	;# 
  1179  001C                     	;# 
  1180  008C                     	;# 
  1181  008D                     	;# 
  1182  008E                     	;# 
  1183  0090                     	;# 
  1184  0091                     	;# 
  1185  0092                     	;# 
  1186  0095                     	;# 
  1187  0096                     	;# 
  1188  0097                     	;# 
  1189  0099                     	;# 
  1190  009A                     	;# 
  1191  009B                     	;# 
  1192  009B                     	;# 
  1193  009C                     	;# 
  1194  009D                     	;# 
  1195  009E                     	;# 
  1196  010C                     	;# 
  1197  010D                     	;# 
  1198  010E                     	;# 
  1199  0116                     	;# 
  1200  0117                     	;# 
  1201  011D                     	;# 
  1202  018C                     	;# 
  1203  018D                     	;# 
  1204  018E                     	;# 
  1205  0191                     	;# 
  1206  0191                     	;# 
  1207  0192                     	;# 
  1208  0193                     	;# 
  1209  0193                     	;# 
  1210  0194                     	;# 
  1211  0195                     	;# 
  1212  0196                     	;# 
  1213  0197                     	;# 
  1214  0199                     	;# 
  1215  019A                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019C                     	;# 
  1221  019C                     	;# 
  1222  019D                     	;# 
  1223  019E                     	;# 
  1224  019F                     	;# 
  1225  020D                     	;# 
  1226  0210                     	;# 
  1227  0211                     	;# 
  1228  0211                     	;# 
  1229  0212                     	;# 
  1230  0212                     	;# 
  1231  0213                     	;# 
  1232  0213                     	;# 
  1233  0214                     	;# 
  1234  0214                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0216                     	;# 
  1239  0216                     	;# 
  1240  0217                     	;# 
  1241  0217                     	;# 
  1242  0291                     	;# 
  1243  0291                     	;# 
  1244  0292                     	;# 
  1245  0293                     	;# 
  1246  0298                     	;# 
  1247  0298                     	;# 
  1248  0299                     	;# 
  1249  029A                     	;# 
  1250  0394                     	;# 
  1251  0395                     	;# 
  1252  0396                     	;# 
  1253  0FE4                     	;# 
  1254  0FE5                     	;# 
  1255  0FE6                     	;# 
  1256  0FE7                     	;# 
  1257  0FE8                     	;# 
  1258  0FE9                     	;# 
  1259  0FEA                     	;# 
  1260  0FEB                     	;# 
  1261  0FED                     	;# 
  1262  0FEE                     	;# 
  1263  0FEF                     	;# 
  1264  0000                     	;# 
  1265  0001                     	;# 
  1266  0002                     	;# 
  1267  0003                     	;# 
  1268  0004                     	;# 
  1269  0005                     	;# 
  1270  0006                     	;# 
  1271  0007                     	;# 
  1272  0008                     	;# 
  1273  0009                     	;# 
  1274  000A                     	;# 
  1275  000B                     	;# 
  1276  000C                     	;# 
  1277  000D                     	;# 
  1278  000E                     	;# 
  1279  0010                     	;# 
  1280  0011                     	;# 
  1281  0012                     	;# 
  1282  0015                     	;# 
  1283  0016                     	;# 
  1284  0016                     	;# 
  1285  0017                     	;# 
  1286  0018                     	;# 
  1287  0019                     	;# 
  1288  001A                     	;# 
  1289  001B                     	;# 
  1290  001C                     	;# 
  1291  008C                     	;# 
  1292  008D                     	;# 
  1293  008E                     	;# 
  1294  0090                     	;# 
  1295  0091                     	;# 
  1296  0092                     	;# 
  1297  0095                     	;# 
  1298  0096                     	;# 
  1299  0097                     	;# 
  1300  0099                     	;# 
  1301  009A                     	;# 
  1302  009B                     	;# 
  1303  009B                     	;# 
  1304  009C                     	;# 
  1305  009D                     	;# 
  1306  009E                     	;# 
  1307  010C                     	;# 
  1308  010D                     	;# 
  1309  010E                     	;# 
  1310  0116                     	;# 
  1311  0117                     	;# 
  1312  011D                     	;# 
  1313  018C                     	;# 
  1314  018D                     	;# 
  1315  018E                     	;# 
  1316  0191                     	;# 
  1317  0191                     	;# 
  1318  0192                     	;# 
  1319  0193                     	;# 
  1320  0193                     	;# 
  1321  0194                     	;# 
  1322  0195                     	;# 
  1323  0196                     	;# 
  1324  0197                     	;# 
  1325  0199                     	;# 
  1326  019A                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019C                     	;# 
  1332  019C                     	;# 
  1333  019D                     	;# 
  1334  019E                     	;# 
  1335  019F                     	;# 
  1336  020D                     	;# 
  1337  0210                     	;# 
  1338  0211                     	;# 
  1339  0211                     	;# 
  1340  0212                     	;# 
  1341  0212                     	;# 
  1342  0213                     	;# 
  1343  0213                     	;# 
  1344  0214                     	;# 
  1345  0214                     	;# 
  1346  0215                     	;# 
  1347  0215                     	;# 
  1348  0215                     	;# 
  1349  0216                     	;# 
  1350  0216                     	;# 
  1351  0217                     	;# 
  1352  0217                     	;# 
  1353  0291                     	;# 
  1354  0291                     	;# 
  1355  0292                     	;# 
  1356  0293                     	;# 
  1357  0298                     	;# 
  1358  0298                     	;# 
  1359  0299                     	;# 
  1360  029A                     	;# 
  1361  0394                     	;# 
  1362  0395                     	;# 
  1363  0396                     	;# 
  1364  0FE4                     	;# 
  1365  0FE5                     	;# 
  1366  0FE6                     	;# 
  1367  0FE7                     	;# 
  1368  0FE8                     	;# 
  1369  0FE9                     	;# 
  1370  0FEA                     	;# 
  1371  0FEB                     	;# 
  1372  0FED                     	;# 
  1373  0FEE                     	;# 
  1374  0FEF                     	;# 
  1375  0000                     	;# 
  1376  0001                     	;# 
  1377  0002                     	;# 
  1378  0003                     	;# 
  1379  0004                     	;# 
  1380  0005                     	;# 
  1381  0006                     	;# 
  1382  0007                     	;# 
  1383  0008                     	;# 
  1384  0009                     	;# 
  1385  000A                     	;# 
  1386  000B                     	;# 
  1387  000C                     	;# 
  1388  000D                     	;# 
  1389  000E                     	;# 
  1390  0010                     	;# 
  1391  0011                     	;# 
  1392  0012                     	;# 
  1393  0015                     	;# 
  1394  0016                     	;# 
  1395  0016                     	;# 
  1396  0017                     	;# 
  1397  0018                     	;# 
  1398  0019                     	;# 
  1399  001A                     	;# 
  1400  001B                     	;# 
  1401  001C                     	;# 
  1402  008C                     	;# 
  1403  008D                     	;# 
  1404  008E                     	;# 
  1405  0090                     	;# 
  1406  0091                     	;# 
  1407  0092                     	;# 
  1408  0095                     	;# 
  1409  0096                     	;# 
  1410  0097                     	;# 
  1411  0099                     	;# 
  1412  009A                     	;# 
  1413  009B                     	;# 
  1414  009B                     	;# 
  1415  009C                     	;# 
  1416  009D                     	;# 
  1417  009E                     	;# 
  1418  010C                     	;# 
  1419  010D                     	;# 
  1420  010E                     	;# 
  1421  0116                     	;# 
  1422  0117                     	;# 
  1423  011D                     	;# 
  1424  018C                     	;# 
  1425  018D                     	;# 
  1426  018E                     	;# 
  1427  0191                     	;# 
  1428  0191                     	;# 
  1429  0192                     	;# 
  1430  0193                     	;# 
  1431  0193                     	;# 
  1432  0194                     	;# 
  1433  0195                     	;# 
  1434  0196                     	;# 
  1435  0197                     	;# 
  1436  0199                     	;# 
  1437  019A                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019C                     	;# 
  1443  019C                     	;# 
  1444  019D                     	;# 
  1445  019E                     	;# 
  1446  019F                     	;# 
  1447  020D                     	;# 
  1448  0210                     	;# 
  1449  0211                     	;# 
  1450  0211                     	;# 
  1451  0212                     	;# 
  1452  0212                     	;# 
  1453  0213                     	;# 
  1454  0213                     	;# 
  1455  0214                     	;# 
  1456  0214                     	;# 
  1457  0215                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0216                     	;# 
  1461  0216                     	;# 
  1462  0217                     	;# 
  1463  0217                     	;# 
  1464  0291                     	;# 
  1465  0291                     	;# 
  1466  0292                     	;# 
  1467  0293                     	;# 
  1468  0298                     	;# 
  1469  0298                     	;# 
  1470  0299                     	;# 
  1471  029A                     	;# 
  1472  0394                     	;# 
  1473  0395                     	;# 
  1474  0396                     	;# 
  1475  0FE4                     	;# 
  1476  0FE5                     	;# 
  1477  0FE6                     	;# 
  1478  0FE7                     	;# 
  1479  0FE8                     	;# 
  1480  0FE9                     	;# 
  1481  0FEA                     	;# 
  1482  0FEB                     	;# 
  1483  0FED                     	;# 
  1484  0FEE                     	;# 
  1485  0FEF                     	;# 
  1486  0000                     	;# 
  1487  0001                     	;# 
  1488  0002                     	;# 
  1489  0003                     	;# 
  1490  0004                     	;# 
  1491  0005                     	;# 
  1492  0006                     	;# 
  1493  0007                     	;# 
  1494  0008                     	;# 
  1495  0009                     	;# 
  1496  000A                     	;# 
  1497  000B                     	;# 
  1498  000C                     	;# 
  1499  000D                     	;# 
  1500  000E                     	;# 
  1501  0010                     	;# 
  1502  0011                     	;# 
  1503  0012                     	;# 
  1504  0015                     	;# 
  1505  0016                     	;# 
  1506  0016                     	;# 
  1507  0017                     	;# 
  1508  0018                     	;# 
  1509  0019                     	;# 
  1510  001A                     	;# 
  1511  001B                     	;# 
  1512  001C                     	;# 
  1513  008C                     	;# 
  1514  008D                     	;# 
  1515  008E                     	;# 
  1516  0090                     	;# 
  1517  0091                     	;# 
  1518  0092                     	;# 
  1519  0095                     	;# 
  1520  0096                     	;# 
  1521  0097                     	;# 
  1522  0099                     	;# 
  1523  009A                     	;# 
  1524  009B                     	;# 
  1525  009B                     	;# 
  1526  009C                     	;# 
  1527  009D                     	;# 
  1528  009E                     	;# 
  1529  010C                     	;# 
  1530  010D                     	;# 
  1531  010E                     	;# 
  1532  0116                     	;# 
  1533  0117                     	;# 
  1534  011D                     	;# 
  1535  018C                     	;# 
  1536  018D                     	;# 
  1537  018E                     	;# 
  1538  0191                     	;# 
  1539  0191                     	;# 
  1540  0192                     	;# 
  1541  0193                     	;# 
  1542  0193                     	;# 
  1543  0194                     	;# 
  1544  0195                     	;# 
  1545  0196                     	;# 
  1546  0197                     	;# 
  1547  0199                     	;# 
  1548  019A                     	;# 
  1549  019B                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019C                     	;# 
  1554  019C                     	;# 
  1555  019D                     	;# 
  1556  019E                     	;# 
  1557  019F                     	;# 
  1558  020D                     	;# 
  1559  0210                     	;# 
  1560  0211                     	;# 
  1561  0211                     	;# 
  1562  0212                     	;# 
  1563  0212                     	;# 
  1564  0213                     	;# 
  1565  0213                     	;# 
  1566  0214                     	;# 
  1567  0214                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0216                     	;# 
  1572  0216                     	;# 
  1573  0217                     	;# 
  1574  0217                     	;# 
  1575  0291                     	;# 
  1576  0291                     	;# 
  1577  0292                     	;# 
  1578  0293                     	;# 
  1579  0298                     	;# 
  1580  0298                     	;# 
  1581  0299                     	;# 
  1582  029A                     	;# 
  1583  0394                     	;# 
  1584  0395                     	;# 
  1585  0396                     	;# 
  1586  0FE4                     	;# 
  1587  0FE5                     	;# 
  1588  0FE6                     	;# 
  1589  0FE7                     	;# 
  1590  0FE8                     	;# 
  1591  0FE9                     	;# 
  1592  0FEA                     	;# 
  1593  0FEB                     	;# 
  1594  0FED                     	;# 
  1595  0FEE                     	;# 
  1596  0FEF                     	;# 
  1597  0000                     	;# 
  1598  0001                     	;# 
  1599  0002                     	;# 
  1600  0003                     	;# 
  1601  0004                     	;# 
  1602  0005                     	;# 
  1603  0006                     	;# 
  1604  0007                     	;# 
  1605  0008                     	;# 
  1606  0009                     	;# 
  1607  000A                     	;# 
  1608  000B                     	;# 
  1609  000C                     	;# 
  1610  000D                     	;# 
  1611  000E                     	;# 
  1612  0010                     	;# 
  1613  0011                     	;# 
  1614  0012                     	;# 
  1615  0015                     	;# 
  1616  0016                     	;# 
  1617  0016                     	;# 
  1618  0017                     	;# 
  1619  0018                     	;# 
  1620  0019                     	;# 
  1621  001A                     	;# 
  1622  001B                     	;# 
  1623  001C                     	;# 
  1624  008C                     	;# 
  1625  008D                     	;# 
  1626  008E                     	;# 
  1627  0090                     	;# 
  1628  0091                     	;# 
  1629  0092                     	;# 
  1630  0095                     	;# 
  1631  0096                     	;# 
  1632  0097                     	;# 
  1633  0099                     	;# 
  1634  009A                     	;# 
  1635  009B                     	;# 
  1636  009B                     	;# 
  1637  009C                     	;# 
  1638  009D                     	;# 
  1639  009E                     	;# 
  1640  010C                     	;# 
  1641  010D                     	;# 
  1642  010E                     	;# 
  1643  0116                     	;# 
  1644  0117                     	;# 
  1645  011D                     	;# 
  1646  018C                     	;# 
  1647  018D                     	;# 
  1648  018E                     	;# 
  1649  0191                     	;# 
  1650  0191                     	;# 
  1651  0192                     	;# 
  1652  0193                     	;# 
  1653  0193                     	;# 
  1654  0194                     	;# 
  1655  0195                     	;# 
  1656  0196                     	;# 
  1657  0197                     	;# 
  1658  0199                     	;# 
  1659  019A                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019C                     	;# 
  1665  019C                     	;# 
  1666  019D                     	;# 
  1667  019E                     	;# 
  1668  019F                     	;# 
  1669  020D                     	;# 
  1670  0210                     	;# 
  1671  0211                     	;# 
  1672  0211                     	;# 
  1673  0212                     	;# 
  1674  0212                     	;# 
  1675  0213                     	;# 
  1676  0213                     	;# 
  1677  0214                     	;# 
  1678  0214                     	;# 
  1679  0215                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0216                     	;# 
  1683  0216                     	;# 
  1684  0217                     	;# 
  1685  0217                     	;# 
  1686  0291                     	;# 
  1687  0291                     	;# 
  1688  0292                     	;# 
  1689  0293                     	;# 
  1690  0298                     	;# 
  1691  0298                     	;# 
  1692  0299                     	;# 
  1693  029A                     	;# 
  1694  0394                     	;# 
  1695  0395                     	;# 
  1696  0396                     	;# 
  1697  0FE4                     	;# 
  1698  0FE5                     	;# 
  1699  0FE6                     	;# 
  1700  0FE7                     	;# 
  1701  0FE8                     	;# 
  1702  0FE9                     	;# 
  1703  0FEA                     	;# 
  1704  0FEB                     	;# 
  1705  0FED                     	;# 
  1706  0FEE                     	;# 
  1707  0FEF                     	;# 
  1708  0000                     	;# 
  1709  0001                     	;# 
  1710  0002                     	;# 
  1711  0003                     	;# 
  1712  0004                     	;# 
  1713  0005                     	;# 
  1714  0006                     	;# 
  1715  0007                     	;# 
  1716  0008                     	;# 
  1717  0009                     	;# 
  1718  000A                     	;# 
  1719  000B                     	;# 
  1720  000C                     	;# 
  1721  000D                     	;# 
  1722  000E                     	;# 
  1723  0010                     	;# 
  1724  0011                     	;# 
  1725  0012                     	;# 
  1726  0015                     	;# 
  1727  0016                     	;# 
  1728  0016                     	;# 
  1729  0017                     	;# 
  1730  0018                     	;# 
  1731  0019                     	;# 
  1732  001A                     	;# 
  1733  001B                     	;# 
  1734  001C                     	;# 
  1735  008C                     	;# 
  1736  008D                     	;# 
  1737  008E                     	;# 
  1738  0090                     	;# 
  1739  0091                     	;# 
  1740  0092                     	;# 
  1741  0095                     	;# 
  1742  0096                     	;# 
  1743  0097                     	;# 
  1744  0099                     	;# 
  1745  009A                     	;# 
  1746  009B                     	;# 
  1747  009B                     	;# 
  1748  009C                     	;# 
  1749  009D                     	;# 
  1750  009E                     	;# 
  1751  010C                     	;# 
  1752  010D                     	;# 
  1753  010E                     	;# 
  1754  0116                     	;# 
  1755  0117                     	;# 
  1756  011D                     	;# 
  1757  018C                     	;# 
  1758  018D                     	;# 
  1759  018E                     	;# 
  1760  0191                     	;# 
  1761  0191                     	;# 
  1762  0192                     	;# 
  1763  0193                     	;# 
  1764  0193                     	;# 
  1765  0194                     	;# 
  1766  0195                     	;# 
  1767  0196                     	;# 
  1768  0197                     	;# 
  1769  0199                     	;# 
  1770  019A                     	;# 
  1771  019B                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019C                     	;# 
  1776  019C                     	;# 
  1777  019D                     	;# 
  1778  019E                     	;# 
  1779  019F                     	;# 
  1780  020D                     	;# 
  1781  0210                     	;# 
  1782  0211                     	;# 
  1783  0211                     	;# 
  1784  0212                     	;# 
  1785  0212                     	;# 
  1786  0213                     	;# 
  1787  0213                     	;# 
  1788  0214                     	;# 
  1789  0214                     	;# 
  1790  0215                     	;# 
  1791  0215                     	;# 
  1792  0215                     	;# 
  1793  0216                     	;# 
  1794  0216                     	;# 
  1795  0217                     	;# 
  1796  0217                     	;# 
  1797  0291                     	;# 
  1798  0291                     	;# 
  1799  0292                     	;# 
  1800  0293                     	;# 
  1801  0298                     	;# 
  1802  0298                     	;# 
  1803  0299                     	;# 
  1804  029A                     	;# 
  1805  0394                     	;# 
  1806  0395                     	;# 
  1807  0396                     	;# 
  1808  0FE4                     	;# 
  1809  0FE5                     	;# 
  1810  0FE6                     	;# 
  1811  0FE7                     	;# 
  1812  0FE8                     	;# 
  1813  0FE9                     	;# 
  1814  0FEA                     	;# 
  1815  0FEB                     	;# 
  1816  0FED                     	;# 
  1817  0FEE                     	;# 
  1818  0FEF                     	;# 
  1819  0000                     	;# 
  1820  0001                     	;# 
  1821  0002                     	;# 
  1822  0003                     	;# 
  1823  0004                     	;# 
  1824  0005                     	;# 
  1825  0006                     	;# 
  1826  0007                     	;# 
  1827  0008                     	;# 
  1828  0009                     	;# 
  1829  000A                     	;# 
  1830  000B                     	;# 
  1831  000C                     	;# 
  1832  000D                     	;# 
  1833  000E                     	;# 
  1834  0010                     	;# 
  1835  0011                     	;# 
  1836  0012                     	;# 
  1837  0015                     	;# 
  1838  0016                     	;# 
  1839  0016                     	;# 
  1840  0017                     	;# 
  1841  0018                     	;# 
  1842  0019                     	;# 
  1843  001A                     	;# 
  1844  001B                     	;# 
  1845  001C                     	;# 
  1846  008C                     	;# 
  1847  008D                     	;# 
  1848  008E                     	;# 
  1849  0090                     	;# 
  1850  0091                     	;# 
  1851  0092                     	;# 
  1852  0095                     	;# 
  1853  0096                     	;# 
  1854  0097                     	;# 
  1855  0099                     	;# 
  1856  009A                     	;# 
  1857  009B                     	;# 
  1858  009B                     	;# 
  1859  009C                     	;# 
  1860  009D                     	;# 
  1861  009E                     	;# 
  1862  010C                     	;# 
  1863  010D                     	;# 
  1864  010E                     	;# 
  1865  0116                     	;# 
  1866  0117                     	;# 
  1867  011D                     	;# 
  1868  018C                     	;# 
  1869  018D                     	;# 
  1870  018E                     	;# 
  1871  0191                     	;# 
  1872  0191                     	;# 
  1873  0192                     	;# 
  1874  0193                     	;# 
  1875  0193                     	;# 
  1876  0194                     	;# 
  1877  0195                     	;# 
  1878  0196                     	;# 
  1879  0197                     	;# 
  1880  0199                     	;# 
  1881  019A                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019C                     	;# 
  1887  019C                     	;# 
  1888  019D                     	;# 
  1889  019E                     	;# 
  1890  019F                     	;# 
  1891  020D                     	;# 
  1892  0210                     	;# 
  1893  0211                     	;# 
  1894  0211                     	;# 
  1895  0212                     	;# 
  1896  0212                     	;# 
  1897  0213                     	;# 
  1898  0213                     	;# 
  1899  0214                     	;# 
  1900  0214                     	;# 
  1901  0215                     	;# 
  1902  0215                     	;# 
  1903  0215                     	;# 
  1904  0216                     	;# 
  1905  0216                     	;# 
  1906  0217                     	;# 
  1907  0217                     	;# 
  1908  0291                     	;# 
  1909  0291                     	;# 
  1910  0292                     	;# 
  1911  0293                     	;# 
  1912  0298                     	;# 
  1913  0298                     	;# 
  1914  0299                     	;# 
  1915  029A                     	;# 
  1916  0394                     	;# 
  1917  0395                     	;# 
  1918  0396                     	;# 
  1919  0FE4                     	;# 
  1920  0FE5                     	;# 
  1921  0FE6                     	;# 
  1922  0FE7                     	;# 
  1923  0FE8                     	;# 
  1924  0FE9                     	;# 
  1925  0FEA                     	;# 
  1926  0FEB                     	;# 
  1927  0FED                     	;# 
  1928  0FEE                     	;# 
  1929  0FEF                     	;# 
  1930  0000                     	;# 
  1931  0001                     	;# 
  1932  0002                     	;# 
  1933  0003                     	;# 
  1934  0004                     	;# 
  1935  0005                     	;# 
  1936  0006                     	;# 
  1937  0007                     	;# 
  1938  0008                     	;# 
  1939  0009                     	;# 
  1940  000A                     	;# 
  1941  000B                     	;# 
  1942  000C                     	;# 
  1943  000D                     	;# 
  1944  000E                     	;# 
  1945  0010                     	;# 
  1946  0011                     	;# 
  1947  0012                     	;# 
  1948  0015                     	;# 
  1949  0016                     	;# 
  1950  0016                     	;# 
  1951  0017                     	;# 
  1952  0018                     	;# 
  1953  0019                     	;# 
  1954  001A                     	;# 
  1955  001B                     	;# 
  1956  001C                     	;# 
  1957  008C                     	;# 
  1958  008D                     	;# 
  1959  008E                     	;# 
  1960  0090                     	;# 
  1961  0091                     	;# 
  1962  0092                     	;# 
  1963  0095                     	;# 
  1964  0096                     	;# 
  1965  0097                     	;# 
  1966  0099                     	;# 
  1967  009A                     	;# 
  1968  009B                     	;# 
  1969  009B                     	;# 
  1970  009C                     	;# 
  1971  009D                     	;# 
  1972  009E                     	;# 
  1973  010C                     	;# 
  1974  010D                     	;# 
  1975  010E                     	;# 
  1976  0116                     	;# 
  1977  0117                     	;# 
  1978  011D                     	;# 
  1979  018C                     	;# 
  1980  018D                     	;# 
  1981  018E                     	;# 
  1982  0191                     	;# 
  1983  0191                     	;# 
  1984  0192                     	;# 
  1985  0193                     	;# 
  1986  0193                     	;# 
  1987  0194                     	;# 
  1988  0195                     	;# 
  1989  0196                     	;# 
  1990  0197                     	;# 
  1991  0199                     	;# 
  1992  019A                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019C                     	;# 
  1998  019C                     	;# 
  1999  019D                     	;# 
  2000  019E                     	;# 
  2001  019F                     	;# 
  2002  020D                     	;# 
  2003  0210                     	;# 
  2004  0211                     	;# 
  2005  0211                     	;# 
  2006  0212                     	;# 
  2007  0212                     	;# 
  2008  0213                     	;# 
  2009  0213                     	;# 
  2010  0214                     	;# 
  2011  0214                     	;# 
  2012  0215                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0216                     	;# 
  2016  0216                     	;# 
  2017  0217                     	;# 
  2018  0217                     	;# 
  2019  0291                     	;# 
  2020  0291                     	;# 
  2021  0292                     	;# 
  2022  0293                     	;# 
  2023  0298                     	;# 
  2024  0298                     	;# 
  2025  0299                     	;# 
  2026  029A                     	;# 
  2027  0394                     	;# 
  2028  0395                     	;# 
  2029  0396                     	;# 
  2030  0FE4                     	;# 
  2031  0FE5                     	;# 
  2032  0FE6                     	;# 
  2033  0FE7                     	;# 
  2034  0FE8                     	;# 
  2035  0FE9                     	;# 
  2036  0FEA                     	;# 
  2037  0FEB                     	;# 
  2038  0FED                     	;# 
  2039  0FEE                     	;# 
  2040  0FEF                     	;# 
  2041                           
  2042                           	psect	idataBANK4
  2043  1F55                     __pidataBANK4:	
  2044                           
  2045                           ;initializer for __product
  2046  1F55  3463               	retlw	99
  2047  1F56  3402               	retlw	2
  2048  1F57  3400               	retlw	0
  2049  1F58  3400               	retlw	0
  2050  1F59  3400               	retlw	0
  2051  1F5A  3400               	retlw	0
  2052  1F5B  3400               	retlw	0
  2053  1F5C  3400               	retlw	0
  2054  1F5D  3400               	retlw	0
  2055  1F5E  3400               	retlw	0
  2056  1F5F  3400               	retlw	0
  2057  1F60  3400               	retlw	0
  2058  1F61  34FF               	retlw	255
  2059  1F62  34FF               	retlw	255
  2060  1F63  34FF               	retlw	255
  2061  1F64  3400               	retlw	0
  2062  1F65  3400               	retlw	0
  2063  1F66  3400               	retlw	0
  2064  1F67  3400               	retlw	0
  2065  1F68  3400               	retlw	0
  2066  1F69  3400               	retlw	0
  2067  1F6A  3400               	retlw	0
  2068  1F6B  3400               	retlw	0
  2069  1F6C  3400               	retlw	0
  2070  1F6D  3400               	retlw	0
  2071  1F6E  3400               	retlw	0
  2072  1F6F  3400               	retlw	0
  2073  1F70  3400               	retlw	0
  2074  1F71  3400               	retlw	0
  2075  1F72  3400               	retlw	0
  2076  1F73  3400               	retlw	0
  2077  1F74  3400               	retlw	0
  2078                           
  2079                           	psect	stringtext
  2080  1000                     __pstringtext:	
  2081  1000                     _CC2500_registers_address:	
  2082  1000  3403               	retlw	3
  2083  1001  3416               	retlw	22
  2084  1002  3417               	retlw	23
  2085  1003  341E               	retlw	30
  2086  1004  341F               	retlw	31
  2087  1005  3420               	retlw	32
  2088  1006  342A               	retlw	42
  2089  1007  342B               	retlw	43
  2090  1008  340B               	retlw	11
  2091  1009  340C               	retlw	12
  2092  100A  340D               	retlw	13
  2093  100B  340E               	retlw	14
  2094  100C  340F               	retlw	15
  2095  100D  3410               	retlw	16
  2096  100E  3411               	retlw	17
  2097  100F  3412               	retlw	18
  2098  1010  3413               	retlw	19
  2099  1011  3414               	retlw	20
  2100  1012  340A               	retlw	10
  2101  1013  3415               	retlw	21
  2102  1014  3421               	retlw	33
  2103  1015  3422               	retlw	34
  2104  1016  3418               	retlw	24
  2105  1017  3419               	retlw	25
  2106  1018  341A               	retlw	26
  2107  1019  341B               	retlw	27
  2108  101A  341C               	retlw	28
  2109  101B  341D               	retlw	29
  2110  101C  3423               	retlw	35
  2111  101D  3424               	retlw	36
  2112  101E  3425               	retlw	37
  2113  101F  3426               	retlw	38
  2114  1020  3429               	retlw	41
  2115  1021  342C               	retlw	44
  2116  1022  342D               	retlw	45
  2117  1023  342E               	retlw	46
  2118  1024  3400               	retlw	0
  2119  1025  3401               	retlw	1
  2120  1026  3402               	retlw	2
  2121  1027  3407               	retlw	7
  2122  1028  3408               	retlw	8
  2123  1029  3409               	retlw	9
  2124  102A  3406               	retlw	6
  2125  102B  3404               	retlw	4
  2126  102C  3405               	retlw	5
  2127  102D  3427               	retlw	39
  2128  102E  3428               	retlw	40
  2129  102F                     __end_of_CC2500_registers_address:	
  2130  102F                     _CC2500_rfSettings:	
  2131  102F  3407               	retlw	7
  2132  1030  3407               	retlw	7
  2133  1031  3430               	retlw	48
  2134  1032  3487               	retlw	135
  2135  1033  346B               	retlw	107
  2136  1034  34F8               	retlw	248
  2137  1035  347F               	retlw	127
  2138  1036  343F               	retlw	63
  2139  1037  3409               	retlw	9
  2140  1038  3400               	retlw	0
  2141  1039  345C               	retlw	92
  2142  103A  34A7               	retlw	167
  2143  103B  3462               	retlw	98
  2144  103C  3486               	retlw	134
  2145  103D  3483               	retlw	131
  2146  103E  3403               	retlw	3
  2147  103F  3422               	retlw	34
  2148  1040  34F8               	retlw	248
  2149  1041  3400               	retlw	0
  2150  1042  3444               	retlw	68
  2151  1043  34B6               	retlw	182
  2152  1044  3410               	retlw	16
  2153  1045  3418               	retlw	24
  2154  1046  341D               	retlw	29
  2155  1047  341C               	retlw	28
  2156  1048  34C7               	retlw	199
  2157  1049  3400               	retlw	0
  2158  104A  34B2               	retlw	178
  2159  104B  34EA               	retlw	234
  2160  104C  340A               	retlw	10
  2161  104D  3400               	retlw	0
  2162  104E  3411               	retlw	17
  2163  104F  3459               	retlw	89
  2164  1050  3488               	retlw	136
  2165  1051  3431               	retlw	49
  2166  1052  340B               	retlw	11
  2167  1053  342F               	retlw	47
  2168  1054  342E               	retlw	46
  2169  1055  3406               	retlw	6
  2170  1056  3404               	retlw	4
  2171  1057  3405               	retlw	5
  2172  1058  3400               	retlw	0
  2173  1059  3430               	retlw	48
  2174  105A  34D3               	retlw	211
  2175  105B  3491               	retlw	145
  2176  105C  3441               	retlw	65
  2177  105D  3400               	retlw	0
  2178  105E                     __end_of_CC2500_rfSettings:	
  2179  105E                     _CC2500_patable_vaule:	
  2180  105E  34FE               	retlw	254
  2181  105F  34FE               	retlw	254
  2182  1060  34FE               	retlw	254
  2183  1061  34FE               	retlw	254
  2184  1062  34FE               	retlw	254
  2185  1063  34FE               	retlw	254
  2186  1064  34FE               	retlw	254
  2187  1065  34FE               	retlw	254
  2188  1066                     __end_of_CC2500_patable_vaule:	
  2189                           
  2190                           	psect	nvCOMMON
  2191  007B                     __pnvCOMMON:	
  2192  007B                     _product:	
  2193  007B                     	ds	1
  2194  000C                     _PORTA	set	12
  2195  000D                     _PORTB	set	13
  2196  000E                     _PORTC	set	14
  2197  0018                     _T1CON	set	24
  2198  0017                     _TMR1H	set	23
  2199  0016                     _TMR1L	set	22
  2200  005F                     _GIE	set	95
  2201  005B                     _IOCIE	set	91
  2202  0058                     _IOCIF	set	88
  2203  005E                     _PEIE	set	94
  2204  0060                     _RA0	set	96
  2205  0063                     _RA3	set	99
  2206  0064                     _RA4	set	100
  2207  0066                     _RA6	set	102
  2208  0067                     _RA7	set	103
  2209  0068                     _RB0	set	104
  2210  0069                     _RB1	set	105
  2211  006A                     _RB2	set	106
  2212  006B                     _RB3	set	107
  2213  006C                     _RB4	set	108
  2214  006D                     _RB5	set	109
  2215  0070                     _RC0	set	112
  2216  0071                     _RC1	set	113
  2217  0072                     _RC2	set	114
  2218  0074                     _RC4	set	116
  2219  0075                     _RC5	set	117
  2220  0077                     _RC7	set	119
  2221  0088                     _TMR1IF	set	136
  2222  009D                     _ADCON0	set	157
  2223  009E                     _ADCON1	set	158
  2224  009C                     _ADRESH	set	156
  2225  009B                     _ADRESL	set	155
  2226  0099                     _OSCCON	set	153
  2227  008C                     _TRISA	set	140
  2228  008D                     _TRISB	set	141
  2229  008E                     _TRISC	set	142
  2230  0097                     _WDTCON	set	151
  2231  04E9                     _GO_nDONE	set	1257
  2232  0488                     _TMR1IE	set	1160
  2233  0117                     _FVRCON	set	279
  2234  010C                     _LATA	set	268
  2235  010D                     _LATB	set	269
  2236  010E                     _LATC	set	270
  2237  018C                     _ANSELA	set	396
  2238  018D                     _ANSELB	set	397
  2239  018E                     _ANSELC	set	398
  2240  0192                     _PMADRH	set	402
  2241  0191                     _PMADRL	set	401
  2242  0196                     _PMCON2	set	406
  2243  0194                     _PMDATH	set	404
  2244  0193                     _PMDATL	set	403
  2245  0CAE                     _CFGS	set	3246
  2246  0CAC                     _FREE	set	3244
  2247  0CAD                     _LWLO	set	3245
  2248  0CA8                     _RD	set	3240
  2249  0CA9                     _WR	set	3241
  2250  0CAA                     _WREN	set	3242
  2251  1069                     _WPUB1	set	4201
  2252  106A                     _WPUB2	set	4202
  2253  0396                     _IOCBF	set	918
  2254  0395                     _IOCBN	set	917
  2255  0394                     _IOCBP	set	916
  2256  1CB2                     _IOCBF2	set	7346
  2257                           
  2258                           ; #config settings
  2259  0000                     
  2260                           	psect	cinit
  2261  0015                     start_initialization:	
  2262  0015                     __initialization:	
  2263                           
  2264                           ; Clear objects allocated to BITCOMMON
  2265  0015  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2266                           
  2267                           ; Clear objects allocated to COMMON
  2268  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2269  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2270  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2271  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2272                           
  2273                           ; Clear objects allocated to BANK1
  2274  001A  30A0               	movlw	low __pbssBANK1
  2275  001B  0084               	movwf	4
  2276  001C  3000               	movlw	high __pbssBANK1
  2277  001D  0085               	movwf	5
  2278  001E  304A               	movlw	74
  2279  001F  319B  235C  3180   	fcall	clear_ram0
  2280                           
  2281                           ; Clear objects allocated to BANK2
  2282  0022  3020               	movlw	low __pbssBANK2
  2283  0023  0084               	movwf	4
  2284  0024  3001               	movlw	high __pbssBANK2
  2285  0025  0085               	movwf	5
  2286  0026  304D               	movlw	77
  2287  0027  319B  235C  3180   	fcall	clear_ram0
  2288                           
  2289                           ; Clear objects allocated to BANK3
  2290  002A  30A0               	movlw	low __pbssBANK3
  2291  002B  0084               	movwf	4
  2292  002C  3001               	movlw	high __pbssBANK3
  2293  002D  0085               	movwf	5
  2294  002E  3045               	movlw	69
  2295  002F  319B  235C  3180   	fcall	clear_ram0
  2296                           
  2297                           ; Clear objects allocated to BANK4
  2298  0032  3020               	movlw	low __pbssBANK4
  2299  0033  0084               	movwf	4
  2300  0034  3002               	movlw	high __pbssBANK4
  2301  0035  0085               	movwf	5
  2302  0036  3025               	movlw	37
  2303  0037  319B  235C  3180   	fcall	clear_ram0
  2304                           
  2305                           ; Initialize objects allocated to BANK4
  2306  003A  3055               	movlw	low __pidataBANK4
  2307  003B  0084               	movwf	4
  2308  003C  309F               	movlw	(high __pidataBANK4)| (0+128)
  2309  003D  0085               	movwf	5
  2310  003E  3045               	movlw	low __pdataBANK4
  2311  003F  0086               	movwf	6
  2312  0040  3002               	movlw	high __pdataBANK4
  2313  0041  0087               	movwf	7
  2314  0042  3020               	movlw	32
  2315  0043  319B  2356         	fcall	init_ram
  2316  0045                     end_of_initialization:	
  2317                           ;End of C runtime variable initialization code
  2318                           
  2319  0045                     __end_of__initialization:	
  2320  0045  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2321  0046  0020               	movlb	0
  2322  0047  3196  2EF5         	ljmp	_main	;jump to C main() function
  2323                           
  2324                           	psect	bitbssCOMMON
  2325  03D0                     __pbitbssCOMMON:	
  2326  03D0                     _Receive_OK:	
  2327  03D0                     	ds	1
  2328  03D1                     _Transceive_OK:	
  2329  03D1                     	ds	1
  2330                           
  2331                           	psect	bssCOMMON
  2332  0076                     __pbssCOMMON:	
  2333  0076                     _DelayOff:	
  2334  0076                     	ds	1
  2335  0077                     _DimmerLights:	
  2336  0077                     	ds	1
  2337  0078                     _DimmerLightsIntr:	
  2338  0078                     	ds	1
  2339  0079                     _Sw:	
  2340  0079                     	ds	1
  2341                           
  2342                           	psect	bssBANK1
  2343  00A0                     __pbssBANK1:	
  2344  00A0                     _myMain:	
  2345  00A0                     	ds	16
  2346  00B0                     _Buz1:	
  2347  00B0                     	ds	12
  2348  00BC                     _RF1:	
  2349  00BC                     	ds	12
  2350  00C8                     _Dimmer:	
  2351  00C8                     	ds	3
  2352  00CB                     _CRC:	
  2353  00CB                     	ds	1
  2354  00CC                     _DimmerLights11:	
  2355  00CC                     	ds	1
  2356  00CD                     _DimmerLights22:	
  2357  00CD                     	ds	1
  2358  00CE                     _DimmerLightsIntrIOC:	
  2359  00CE                     	ds	1
  2360  00CF                     _LED:	
  2361  00CF                     	ds	1
  2362  00D0                     _RSSI:	
  2363  00D0                     	ds	1
  2364  00D1                     _Rx_Length:	
  2365  00D1                     	ds	1
  2366  00D2                     _SPI0Buffer:	
  2367  00D2                     	ds	1
  2368  00D3                     _SwDetect:	
  2369  00D3                     	ds	1
  2370  00D4                     _Tx_Length:	
  2371  00D4                     	ds	1
  2372  00D5                     _r_address:	
  2373  00D5                     	ds	1
  2374  00D6                     _r_data:	
  2375  00D6                     	ds	1
  2376  00D7                     _s_data:	
  2377  00D7                     	ds	1
  2378  00D8                     _Temp:	
  2379  00D8                     	ds	18
  2380                           
  2381                           	psect	bssBANK2
  2382  0120                     __pbssBANK2:	
  2383  0120                     _Timer1:	
  2384  0120                     	ds	3
  2385  0123                     _RF_Count:	
  2386  0123                     	ds	2
  2387  0125                     _WDT:	
  2388  0125                     	ds	2
  2389  0127                     _Load:	
  2390  0127                     	ds	45
  2391  0154                     _Sw1:	
  2392  0154                     	ds	9
  2393  015D                     _VarErrLED:	
  2394  015D                     	ds	4
  2395  0161                     _VarLED1:	
  2396  0161                     	ds	4
  2397  0165                     _VarLED2:	
  2398  0165                     	ds	4
  2399  0169                     _DlySw1:	
  2400  0169                     	ds	2
  2401  016B                     _DlySw2:	
  2402  016B                     	ds	2
  2403                           
  2404                           	psect	bssBANK3
  2405  01A0                     __pbssBANK3:	
  2406  01A0                     _RF_Data:	
  2407  01A0                     	ds	30
  2408  01BE                     _DimmerLights1:	
  2409  01BE                     	ds	15
  2410  01CD                     _DimmerLights2:	
  2411  01CD                     	ds	15
  2412  01DC                     _Sw2:	
  2413  01DC                     	ds	9
  2414                           
  2415                           	psect	bssBANK4
  2416  0220                     __pbssBANK4:	
  2417  0220                     _Memory:	
  2418  0220                     	ds	37
  2419                           
  2420                           	psect	dataBANK4
  2421  0245                     __pdataBANK4:	
  2422  0245                     __product:	
  2423  0245                     	ds	32
  2424                           
  2425                           	psect	clrtext
  2426  1B5C                     clear_ram0:	
  2427                           ;	Called with FSR0 containing the base address, and
  2428                           ;	WREG with the size to clear
  2429                           
  2430  1B5C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2431  1B5D                     clrloop0:	
  2432  1B5D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2433  1B5E  3101               	addfsr 0,1
  2434  1B5F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2435  1B60  2B5D               	goto	clrloop0	;have we reached the end yet?
  2436  1B61  3400               	retlw	0	;all done for this memory range, return
  2437                           
  2438                           	psect	inittext
  2439  1B56                     init_ram:	
  2440  1B56  00FE               	movwf	126
  2441  1B57                     initloop:	
  2442  1B57  0012               	moviw fsr0++
  2443  1B58  001E               	movwi fsr1++
  2444  1B59  0BFE               	decfsz	126,f
  2445  1B5A  2B57               	goto	initloop
  2446  1B5B  3400               	retlw	0
  2447                           
  2448                           	psect	cstackBANK3
  2449  01E5                     __pcstackBANK3:	
  2450  01E5                     ?_main:	
  2451  01E5                     main@argc:	
  2452                           ; 2 bytes @ 0x0
  2453                           
  2454                           
  2455                           ; 2 bytes @ 0x0
  2456  01E5                     	ds	2
  2457  01E7                     main@argv:	
  2458                           
  2459                           ; 2 bytes @ 0x2
  2460  01E7                     	ds	2
  2461                           
  2462                           	psect	cstackBANK1
  2463  00EA                     __pcstackBANK1:	
  2464  00EA                     setMain_Exception@buz:	
  2465                           
  2466                           ; 1 bytes @ 0x0
  2467  00EA                     	ds	1
  2468  00EB                     _setMain_Exception$3924:	
  2469                           
  2470                           ; 2 bytes @ 0x1
  2471  00EB                     	ds	2
  2472  00ED                     setMain_Exception@status:	
  2473                           
  2474                           ; 1 bytes @ 0x3
  2475  00ED                     	ds	1
  2476  00EE                     setMain_Exception@command:	
  2477                           
  2478                           ; 1 bytes @ 0x4
  2479  00EE                     	ds	1
  2480                           
  2481                           	psect	cstackCOMMON
  2482  0070                     __pcstackCOMMON:	
  2483  0070                     ?_Timeout_Counter:	
  2484  0070                     ?_set_TimeoutCleared:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_CC2500_WriteByte:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_CC2500_WriteCommand:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_CC2500_ReadStatus:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_CC2500_ReadByte:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_CC2500_PowerRST:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_CC2500_InitSetREG:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_CC2500_InitPATable:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_CC2500_ClearTXFIFO:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_CC2500_ClearRXFIFO:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_CC2500_FrequencyCabr:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_CC2500_SIDLEMode:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_DlyOff_Initialization:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_DlyOff_Main:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_setDimmerLights_SwOn:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_setDimmerLights_SwOff:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_setDimmerLights_Initialization:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_Dimmer_Initialization:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_setDimmerLights_Main:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_setTxData:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_setDimmerLights_Line:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_setLED_Initialization:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_setLED_Main:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_Fosc_Set:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_IO_Set:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_TMR1_Set:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_ADC_Set:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_IOC_Set:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_WDT_Set:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_IOC_ISR:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_TMR1_ISR:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_Flash_Memory_Write:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_Flash_Memory_Modify:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_WDT_Clearing:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_myMain_Initialization:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_Temp_Initialization:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_Load_Initialization:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_Switch_Initialization:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_RF_Initialization:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_getLoad_AD:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_getTemp_AD:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_my_MainTimer:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_Temp_Main:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_Load_Main:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_Switch_Main:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_RF_Main:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_setLoad_AH_AL_Restore:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_setTemp_Initialization:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_setTemp_Main:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setRF_Initialization:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_setRF_Main:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_getRxData:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setLog_Code:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setControl_Lights_Table:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setRFSW_Control:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setRFSW_AdjControl:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setRF_DimmerValue:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setSw_Initialization:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setSw_Main:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_Buzzer_Initialization:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_Buzzer_Main:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_CC2500_TxData:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_CC2500_RxData:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_CC2500_PowerOnInitial:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_DelayOffPointSelect:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_DelayOff_Initialization:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_DelayOff_Main:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_DimmerIntrIOCPointSelect:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ??_DimmerIntrIOCPointSelect:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_DimmerIntrPointSelect:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ??_DimmerIntrPointSelect:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_setDimmerLights_IntrControl:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_DimmerLightsPointSelect:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_DimmerLights_Initialization:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_DimmerLights_Main:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_setDimmerLights_AdjControl:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_setDimmerLights_ErrorClose:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_setDimmerLights_AdjRF:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_LedPointSelect:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_LED_Initialization:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_LED_Main:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Mcu_Initialization:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_ISR:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_setDimmerReClock:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Flash_Memory_Initialization:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Flash_Memory_Main:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_Flash_Memory_Unlock:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_Flash_Memory_Erasing:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_setMemory_Modify:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setMemory_LoopSave:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_WDT_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_setMain_Exception:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_setRF_Learn:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_TouchPower:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_SwPointSelect:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_getDimmerLights_Status:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_DelayTimejudge:	
  2776                           ; 1 bytes @ 0x0
  2777                           
  2778  0070                     ?_getMain_All_Error_Status:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781  0070                     ?_getLoad_OK:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0070                     ?_getMain_LightsStatus:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787  0070                     ?_getPercentValue:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790  0070                     ?_Flash_Memory_Read:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793  0070                     ?_getRF_KeyStatus:	
  2794                           ; 1 bytes @ 0x0
  2795                           
  2796  0070                     ?_getSw_KeyStatus:	
  2797                           ; 1 bytes @ 0x0
  2798                           
  2799  0070                     ?_getAll_DimmerLights_AdjGO:	
  2800                           ; 1 bytes @ 0x0
  2801                           
  2802  0070                     ?_getDimmer_LoadOK:	
  2803                           ; 1 bytes @ 0x0
  2804                           
  2805  0070                     ?_getDimmerLights_Line:	
  2806                           ; 1 bytes @ 0x0
  2807                           
  2808  0070                     ?_setPercentValue:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     ?_getMain_Lights_Count:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     ?_getMain_LoadOK:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817                           
  2818                           ; 1 bytes @ 0x0
  2819  0070                     	ds	1
  2820  0071                     DimmerIntrIOCPointSelect@lights:	
  2821  0071                     DimmerIntrPointSelect@lights:	
  2822                           ; 1 bytes @ 0x1
  2823                           
  2824                           
  2825                           ; 1 bytes @ 0x1
  2826  0071                     	ds	1
  2827  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2828  0072                     ??_setDimmerLights_IntrControl:	
  2829                           ; 0 bytes @ 0x2
  2830                           
  2831  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2832                           ; 0 bytes @ 0x2
  2833                           
  2834                           
  2835                           ; 1 bytes @ 0x2
  2836  0072                     	ds	1
  2837  0073                     ??_IOC_ISR:	
  2838  0073                     ??_setDimmerReClock:	
  2839                           ; 0 bytes @ 0x3
  2840                           
  2841                           
  2842                           ; 0 bytes @ 0x3
  2843  0073                     	ds	1
  2844  0074                     setDimmerLights_IntrControl@lights:	
  2845                           
  2846                           ; 1 bytes @ 0x4
  2847  0074                     	ds	1
  2848  0075                     ??_TMR1_ISR:	
  2849  0075                     ??_ISR:	
  2850                           ; 0 bytes @ 0x5
  2851                           
  2852                           
  2853                           ; 0 bytes @ 0x5
  2854  0075                     	ds	1
  2855                           
  2856                           	psect	cstackBANK0
  2857  0020                     __pcstackBANK0:	
  2858  0020                     ??_Timeout_Counter:	
  2859  0020                     ??_set_TimeoutCleared:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_CC2500_WriteByte:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_CC2500_ReadByte:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ?_DelayTime_1us:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_Dimmer_Initialization:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_getMain_All_Error_Status:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_getLoad_OK:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_setTxData:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_setDimmerLights_Line:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_Fosc_Set:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_IO_Set:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_TMR1_Set:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_ADC_Set:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_IOC_Set:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_WDT_Set:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_Flash_Memory_Read:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ?_setMemory_Data:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ??_Flash_Memory_Write:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ??_WDT_Clearing:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ??_myMain_Initialization:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ??_Temp_Initialization:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ??_setLoad_AH_AL_Restore:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0020                     ??_setTemp_Initialization:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0020                     ??_setRF_Initialization:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0020                     ??_getRF_KeyStatus:	
  2932                           ; 0 bytes @ 0x0
  2933                           
  2934  0020                     ??_getSw_KeyStatus:	
  2935                           ; 0 bytes @ 0x0
  2936                           
  2937  0020                     ??_Buzzer_Initialization:	
  2938                           ; 0 bytes @ 0x0
  2939                           
  2940  0020                     ??_Buzzer_Main:	
  2941                           ; 0 bytes @ 0x0
  2942                           
  2943  0020                     ??_DelayOffPointSelect:	
  2944                           ; 0 bytes @ 0x0
  2945                           
  2946  0020                     ??_DimmerLightsPointSelect:	
  2947                           ; 0 bytes @ 0x0
  2948                           
  2949  0020                     ??_getAll_DimmerLights_AdjGO:	
  2950                           ; 0 bytes @ 0x0
  2951                           
  2952  0020                     ??_getDimmer_LoadOK:	
  2953                           ; 0 bytes @ 0x0
  2954                           
  2955  0020                     ??_getDimmerLights_Line:	
  2956                           ; 0 bytes @ 0x0
  2957                           
  2958  0020                     ??_LedPointSelect:	
  2959                           ; 0 bytes @ 0x0
  2960                           
  2961  0020                     ??_Flash_Memory_Unlock:	
  2962                           ; 0 bytes @ 0x0
  2963                           
  2964  0020                     ??_Flash_Memory_Erasing:	
  2965                           ; 0 bytes @ 0x0
  2966                           
  2967  0020                     ??_setMemory_Modify:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0020                     ??_setMemory_LoopSave:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ??_WDT_Main:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_getMain_Lights_Count:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ??_setRF_Learn:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_TouchPower:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_SwPointSelect:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ?___bmul:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ?_getBuz_GO:	
  2992                           ; 1 bytes @ 0x0
  2993                           
  2994  0020                     ?_getAD:	
  2995                           ; 2 bytes @ 0x0
  2996                           
  2997  0020                     ?___awdiv:	
  2998                           ; 2 bytes @ 0x0
  2999                           
  3000  0020                     ?___ftpack:	
  3001                           ; 2 bytes @ 0x0
  3002                           
  3003  0020                     getDimmer_LoadOK@status:	
  3004                           ; 3 bytes @ 0x0
  3005                           
  3006  0020                     setDimmerLights_Line@lights:	
  3007                           ; 1 bytes @ 0x0
  3008                           
  3009  0020                     getAD@adcon1:	
  3010                           ; 1 bytes @ 0x0
  3011                           
  3012  0020                     setMemory_Data@data:	
  3013                           ; 1 bytes @ 0x0
  3014                           
  3015  0020                     getMain_Lights_Count@count:	
  3016                           ; 1 bytes @ 0x0
  3017                           
  3018  0020                     getLoad_OK@ok:	
  3019                           ; 1 bytes @ 0x0
  3020                           
  3021  0020                     ___bmul@multiplicand:	
  3022                           ; 1 bytes @ 0x0
  3023                           
  3024  0020                     DelayTime_1us@count:	
  3025                           ; 1 bytes @ 0x0
  3026                           
  3027  0020                     ___awdiv@divisor:	
  3028                           ; 2 bytes @ 0x0
  3029                           
  3030  0020                     ___ftpack@arg:	
  3031                           ; 2 bytes @ 0x0
  3032                           
  3033                           
  3034                           ; 3 bytes @ 0x0
  3035  0020                     	ds	1
  3036  0021                     ??_setMemory_Data:	
  3037  0021                     ??_RF_Initialization:	
  3038                           ; 0 bytes @ 0x1
  3039                           
  3040  0021                     ??_Mcu_Initialization:	
  3041                           ; 0 bytes @ 0x1
  3042                           
  3043  0021                     ??_getMain_LoadOK:	
  3044                           ; 0 bytes @ 0x1
  3045                           
  3046  0021                     ??___bmul:	
  3047                           ; 0 bytes @ 0x1
  3048                           
  3049  0021                     CC2500_WriteByte@loop_a:	
  3050                           ; 0 bytes @ 0x1
  3051                           
  3052  0021                     CC2500_ReadByte@loop_b:	
  3053                           ; 1 bytes @ 0x1
  3054                           
  3055  0021                     DelayOffPointSelect@sw:	
  3056                           ; 1 bytes @ 0x1
  3057                           
  3058  0021                     DimmerLightsPointSelect@lights:	
  3059                           ; 1 bytes @ 0x1
  3060                           
  3061  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3062                           ; 1 bytes @ 0x1
  3063                           
  3064  0021                     getDimmerLights_Line@line:	
  3065                           ; 1 bytes @ 0x1
  3066                           
  3067  0021                     LedPointSelect@led:	
  3068                           ; 1 bytes @ 0x1
  3069                           
  3070  0021                     Flash_Memory_Read@i:	
  3071                           ; 1 bytes @ 0x1
  3072                           
  3073  0021                     Flash_Memory_Write@i:	
  3074                           ; 1 bytes @ 0x1
  3075                           
  3076  0021                     setMemory_Modify@command:	
  3077                           ; 1 bytes @ 0x1
  3078                           
  3079  0021                     setMemory_LoopSave@command:	
  3080                           ; 1 bytes @ 0x1
  3081                           
  3082  0021                     getMain_Lights_Count@status3:	
  3083                           ; 1 bytes @ 0x1
  3084                           
  3085  0021                     setLoad_AH_AL_Restore@i:	
  3086                           ; 1 bytes @ 0x1
  3087                           
  3088  0021                     setRF_Learn@command:	
  3089                           ; 1 bytes @ 0x1
  3090                           
  3091  0021                     getRF_KeyStatus@key:	
  3092                           ; 1 bytes @ 0x1
  3093                           
  3094  0021                     SwPointSelect@sw:	
  3095                           ; 1 bytes @ 0x1
  3096                           
  3097  0021                     _getSw_KeyStatus$6776:	
  3098                           ; 1 bytes @ 0x1
  3099                           
  3100  0021                     _getMain_All_Error_Status$3941:	
  3101                           ; 1 bytes @ 0x1
  3102                           
  3103                           
  3104                           ; 2 bytes @ 0x1
  3105  0021                     	ds	1
  3106  0022                     ??_CC2500_WriteCommand:	
  3107  0022                     ??_CC2500_ReadStatus:	
  3108                           ; 0 bytes @ 0x2
  3109                           
  3110  0022                     ??_DelayTime_1us:	
  3111                           ; 0 bytes @ 0x2
  3112                           
  3113  0022                     ?_CC2500_WriteREG:	
  3114                           ; 0 bytes @ 0x2
  3115                           
  3116  0022                     ??_DlyOff_Initialization:	
  3117                           ; 0 bytes @ 0x2
  3118                           
  3119  0022                     ??_getDimmerLights_Status:	
  3120                           ; 0 bytes @ 0x2
  3121                           
  3122  0022                     ??_setDimmerLights_Initialization:	
  3123                           ; 0 bytes @ 0x2
  3124                           
  3125  0022                     ?_setDimmerLights_Trigger:	
  3126                           ; 0 bytes @ 0x2
  3127                           
  3128  0022                     ?_setDimmerLights_TriggerAdj:	
  3129                           ; 0 bytes @ 0x2
  3130                           
  3131  0022                     ?_setLED:	
  3132                           ; 0 bytes @ 0x2
  3133                           
  3134  0022                     ??_setLED_Main:	
  3135                           ; 0 bytes @ 0x2
  3136                           
  3137  0022                     ??_Load_Initialization:	
  3138                           ; 0 bytes @ 0x2
  3139                           
  3140  0022                     ??_getBuz_GO:	
  3141                           ; 0 bytes @ 0x2
  3142                           
  3143  0022                     CC2500_WriteREG@value:	
  3144                           ; 0 bytes @ 0x2
  3145                           
  3146  0022                     DlyOff_Initialization@sw:	
  3147                           ; 1 bytes @ 0x2
  3148                           
  3149  0022                     getDimmerLights_Status@lights:	
  3150                           ; 1 bytes @ 0x2
  3151                           
  3152  0022                     _getAll_DimmerLights_AdjGO$2558:	
  3153                           ; 1 bytes @ 0x2
  3154                           
  3155  0022                     setDimmerLights_Trigger@command:	
  3156                           ; 1 bytes @ 0x2
  3157                           
  3158  0022                     setDimmerLights_TriggerAdj@command:	
  3159                           ; 1 bytes @ 0x2
  3160                           
  3161  0022                     setLED@command:	
  3162                           ; 1 bytes @ 0x2
  3163                           
  3164  0022                     Flash_Memory_Read@address:	
  3165                           ; 1 bytes @ 0x2
  3166                           
  3167  0022                     setMemory_Data@address:	
  3168                           ; 1 bytes @ 0x2
  3169                           
  3170  0022                     getMain_Lights_Count@status1:	
  3171                           ; 1 bytes @ 0x2
  3172                           
  3173  0022                     getMain_LoadOK@ok:	
  3174                           ; 1 bytes @ 0x2
  3175                           
  3176  0022                     _getRF_KeyStatus$5706:	
  3177                           ; 1 bytes @ 0x2
  3178                           
  3179  0022                     _getSw_KeyStatus$6777:	
  3180                           ; 1 bytes @ 0x2
  3181                           
  3182  0022                     ___bmul@product:	
  3183                           ; 1 bytes @ 0x2
  3184                           
  3185  0022                     DelayTime_1us@i:	
  3186                           ; 1 bytes @ 0x2
  3187                           
  3188  0022                     ___awdiv@dividend:	
  3189                           ; 2 bytes @ 0x2
  3190                           
  3191                           
  3192                           ; 2 bytes @ 0x2
  3193  0022                     	ds	1
  3194  0023                     ??_CC2500_WriteREG:	
  3195  0023                     ??_setDimmerLights_Trigger:	
  3196                           ; 0 bytes @ 0x3
  3197                           
  3198  0023                     ??_setDimmerLights_TriggerAdj:	
  3199                           ; 0 bytes @ 0x3
  3200                           
  3201  0023                     ??_setLED:	
  3202                           ; 0 bytes @ 0x3
  3203                           
  3204  0023                     ??_DelayOff_Initialization:	
  3205                           ; 0 bytes @ 0x3
  3206                           
  3207  0023                     ??_getAD:	
  3208                           ; 0 bytes @ 0x3
  3209                           
  3210  0023                     CC2500_WriteCommand@command:	
  3211                           ; 0 bytes @ 0x3
  3212                           
  3213  0023                     CC2500_ReadStatus@status_addr:	
  3214                           ; 1 bytes @ 0x3
  3215                           
  3216  0023                     setDimmerLights_Initialization@lights:	
  3217                           ; 1 bytes @ 0x3
  3218                           
  3219  0023                     getDimmerLights_Status@status:	
  3220                           ; 1 bytes @ 0x3
  3221                           
  3222  0023                     setLED@led:	
  3223                           ; 1 bytes @ 0x3
  3224                           
  3225  0023                     getAD@adcon0:	
  3226                           ; 1 bytes @ 0x3
  3227                           
  3228  0023                     Flash_Memory_Read@ret:	
  3229                           ; 1 bytes @ 0x3
  3230                           
  3231  0023                     getMain_Lights_Count@status2:	
  3232                           ; 1 bytes @ 0x3
  3233                           
  3234  0023                     getSw_KeyStatus@status:	
  3235                           ; 1 bytes @ 0x3
  3236                           
  3237  0023                     ___bmul@multiplier:	
  3238                           ; 1 bytes @ 0x3
  3239                           
  3240  0023                     ___ftpack@exp:	
  3241                           ; 1 bytes @ 0x3
  3242                           
  3243  0023                     _getMain_All_Error_Status$3950:	
  3244                           ; 1 bytes @ 0x3
  3245                           
  3246                           
  3247                           ; 2 bytes @ 0x3
  3248  0023                     	ds	1
  3249  0024                     ??_CC2500_ClearTXFIFO:	
  3250  0024                     ??_CC2500_ClearRXFIFO:	
  3251                           ; 0 bytes @ 0x4
  3252                           
  3253  0024                     ??_CC2500_SIDLEMode:	
  3254                           ; 0 bytes @ 0x4
  3255                           
  3256  0024                     ??_DelayTimejudge:	
  3257                           ; 0 bytes @ 0x4
  3258                           
  3259  0024                     ??_getMain_LightsStatus:	
  3260                           ; 0 bytes @ 0x4
  3261                           
  3262  0024                     ??_setLED_Initialization:	
  3263                           ; 0 bytes @ 0x4
  3264                           
  3265  0024                     ??_Flash_Memory_Modify:	
  3266                           ; 0 bytes @ 0x4
  3267                           
  3268  0024                     ??_getLoad_AD:	
  3269                           ; 0 bytes @ 0x4
  3270                           
  3271  0024                     ??_getTemp_AD:	
  3272                           ; 0 bytes @ 0x4
  3273                           
  3274  0024                     ??_setSw_Initialization:	
  3275                           ; 0 bytes @ 0x4
  3276                           
  3277  0024                     ??_CC2500_TxData:	
  3278                           ; 0 bytes @ 0x4
  3279                           
  3280  0024                     ??_CC2500_RxData:	
  3281                           ; 0 bytes @ 0x4
  3282                           
  3283  0024                     ??_DimmerLights_Initialization:	
  3284                           ; 0 bytes @ 0x4
  3285                           
  3286  0024                     ??___awdiv:	
  3287                           ; 0 bytes @ 0x4
  3288                           
  3289  0024                     CC2500_WriteREG@w_addr:	
  3290                           ; 0 bytes @ 0x4
  3291                           
  3292  0024                     setDimmerLights_Trigger@lights:	
  3293                           ; 1 bytes @ 0x4
  3294                           
  3295  0024                     setDimmerLights_TriggerAdj@lights:	
  3296                           ; 1 bytes @ 0x4
  3297                           
  3298  0024                     setLED_Initialization@led:	
  3299                           ; 1 bytes @ 0x4
  3300                           
  3301  0024                     setLED_Main@led:	
  3302                           ; 1 bytes @ 0x4
  3303                           
  3304  0024                     setSw_Initialization@sw:	
  3305                           ; 1 bytes @ 0x4
  3306                           
  3307  0024                     getSw_KeyStatus@sw:	
  3308                           ; 1 bytes @ 0x4
  3309                           
  3310  0024                     ___ftpack@sign:	
  3311                           ; 1 bytes @ 0x4
  3312                           
  3313  0024                     getBuz_GO@i:	
  3314                           ; 1 bytes @ 0x4
  3315                           
  3316  0024                     DelayTime_1us@j:	
  3317                           ; 2 bytes @ 0x4
  3318                           
  3319                           
  3320                           ; 2 bytes @ 0x4
  3321  0024                     	ds	1
  3322  0025                     ??_CC2500_InitSetREG:	
  3323  0025                     ??_CC2500_InitPATable:	
  3324                           ; 0 bytes @ 0x5
  3325                           
  3326  0025                     ??_Switch_Initialization:	
  3327                           ; 0 bytes @ 0x5
  3328                           
  3329  0025                     ??___ftpack:	
  3330                           ; 0 bytes @ 0x5
  3331                           
  3332  0025                     ??_setDimmerLights_AdjControl:	
  3333                           ; 0 bytes @ 0x5
  3334                           
  3335  0025                     ??_LED_Initialization:	
  3336                           ; 0 bytes @ 0x5
  3337                           
  3338  0025                     ??_LED_Main:	
  3339                           ; 0 bytes @ 0x5
  3340                           
  3341  0025                     CC2500_TxData@loop_e:	
  3342                           ; 0 bytes @ 0x5
  3343                           
  3344  0025                     CC2500_RxData@loop_f:	
  3345                           ; 1 bytes @ 0x5
  3346                           
  3347  0025                     Flash_Memory_Modify@i:	
  3348                           ; 1 bytes @ 0x5
  3349                           
  3350  0025                     getMain_LightsStatus@count:	
  3351                           ; 1 bytes @ 0x5
  3352                           
  3353  0025                     getMain_All_Error_Status@command:	
  3354                           ; 1 bytes @ 0x5
  3355                           
  3356  0025                     getTemp_AD@channel:	
  3357                           ; 1 bytes @ 0x5
  3358                           
  3359  0025                     ___awdiv@counter:	
  3360                           ; 1 bytes @ 0x5
  3361                           
  3362                           
  3363                           ; 1 bytes @ 0x5
  3364  0025                     	ds	1
  3365  0026                     ??_CC2500_PowerRST:	
  3366  0026                     ??_CC2500_FrequencyCabr:	
  3367                           ; 0 bytes @ 0x6
  3368                           
  3369  0026                     CC2500_InitSetREG@temp1:	
  3370                           ; 0 bytes @ 0x6
  3371                           
  3372  0026                     CC2500_InitPATable@temp:	
  3373                           ; 1 bytes @ 0x6
  3374                           
  3375  0026                     DelayTimejudge@i:	
  3376                           ; 1 bytes @ 0x6
  3377                           
  3378  0026                     setDimmerLights_AdjControl@idle:	
  3379                           ; 1 bytes @ 0x6
  3380                           
  3381  0026                     getMain_All_Error_Status@status:	
  3382                           ; 1 bytes @ 0x6
  3383                           
  3384  0026                     getLoad_AD@channel:	
  3385                           ; 1 bytes @ 0x6
  3386                           
  3387  0026                     ___awdiv@sign:	
  3388                           ; 1 bytes @ 0x6
  3389                           
  3390  0026                     getMain_LightsStatus@i:	
  3391                           ; 1 bytes @ 0x6
  3392                           
  3393                           
  3394                           ; 2 bytes @ 0x6
  3395  0026                     	ds	1
  3396  0027                     ?_setDimmerLights:	
  3397  0027                     ??_setTemp_Main:	
  3398                           ; 0 bytes @ 0x7
  3399                           
  3400  0027                     CC2500_InitSetREG@temp2:	
  3401                           ; 0 bytes @ 0x7
  3402                           
  3403  0027                     CC2500_InitPATable@loop_d:	
  3404                           ; 1 bytes @ 0x7
  3405                           
  3406  0027                     DelayTimejudge@j:	
  3407                           ; 1 bytes @ 0x7
  3408                           
  3409  0027                     _setDimmerLights_AdjControl$2578:	
  3410                           ; 1 bytes @ 0x7
  3411                           
  3412  0027                     setDimmerLights@status:	
  3413                           ; 1 bytes @ 0x7
  3414                           
  3415  0027                     getLoad_AD@k:	
  3416                           ; 1 bytes @ 0x7
  3417                           
  3418  0027                     ___awdiv@quotient:	
  3419                           ; 1 bytes @ 0x7
  3420                           
  3421                           
  3422                           ; 2 bytes @ 0x7
  3423  0027                     	ds	1
  3424  0028                     ??_setDimmerLights:	
  3425  0028                     ?___awtoft:	
  3426                           ; 0 bytes @ 0x8
  3427                           
  3428  0028                     CC2500_InitSetREG@loop_c:	
  3429                           ; 3 bytes @ 0x8
  3430                           
  3431  0028                     DelayTimejudge@k:	
  3432                           ; 1 bytes @ 0x8
  3433                           
  3434  0028                     setDimmerLights_AdjControl@sw:	
  3435                           ; 1 bytes @ 0x8
  3436                           
  3437  0028                     getMain_LightsStatus@status:	
  3438                           ; 1 bytes @ 0x8
  3439                           
  3440  0028                     getLoad_AD@j:	
  3441                           ; 1 bytes @ 0x8
  3442                           
  3443  0028                     ___awtoft@c:	
  3444                           ; 1 bytes @ 0x8
  3445                           
  3446                           
  3447                           ; 2 bytes @ 0x8
  3448  0028                     	ds	1
  3449  0029                     ??_Temp_Main:	
  3450  0029                     ??_Load_Main:	
  3451                           ; 0 bytes @ 0x9
  3452                           
  3453  0029                     ?_setBuz:	
  3454                           ; 0 bytes @ 0x9
  3455                           
  3456  0029                     ??_CC2500_PowerOnInitial:	
  3457                           ; 0 bytes @ 0x9
  3458                           
  3459  0029                     ??_Flash_Memory_Main:	
  3460                           ; 0 bytes @ 0x9
  3461                           
  3462  0029                     DelayTimejudge@value:	
  3463                           ; 0 bytes @ 0x9
  3464                           
  3465  0029                     setDimmerLights@lights:	
  3466                           ; 1 bytes @ 0x9
  3467                           
  3468  0029                     getLoad_AD@i:	
  3469                           ; 1 bytes @ 0x9
  3470                           
  3471  0029                     setBuz@time:	
  3472                           ; 1 bytes @ 0x9
  3473                           
  3474                           
  3475                           ; 2 bytes @ 0x9
  3476  0029                     	ds	1
  3477  002A                     ?_setDelayOff_GO:	
  3478  002A                     setDelayOff_GO@command:	
  3479                           ; 0 bytes @ 0xA
  3480                           
  3481                           
  3482                           ; 1 bytes @ 0xA
  3483  002A                     	ds	1
  3484  002B                     ??_setBuz:	
  3485  002B                     ??___awtoft:	
  3486                           ; 0 bytes @ 0xB
  3487                           
  3488  002B                     setDelayOff_GO@value:	
  3489                           ; 0 bytes @ 0xB
  3490                           
  3491  002B                     Load_Main@j:	
  3492                           ; 1 bytes @ 0xB
  3493                           
  3494                           
  3495                           ; 1 bytes @ 0xB
  3496  002B                     	ds	1
  3497  002C                     ??_setDelayOff_GO:	
  3498  002C                     setBuz@count:	
  3499                           ; 0 bytes @ 0xC
  3500                           
  3501  002C                     Load_Main@adjgo:	
  3502                           ; 1 bytes @ 0xC
  3503                           
  3504                           
  3505                           ; 1 bytes @ 0xC
  3506  002C                     	ds	1
  3507  002D                     ??_my_MainTimer:	
  3508  002D                     ??_setLog_Code:	
  3509                           ; 0 bytes @ 0xD
  3510                           
  3511  002D                     _Load_Main$4305:	
  3512                           ; 0 bytes @ 0xD
  3513                           
  3514  002D                     ___awtoft@sign:	
  3515                           ; 1 bytes @ 0xD
  3516                           
  3517                           
  3518                           ; 1 bytes @ 0xD
  3519  002D                     	ds	1
  3520  002E                     ?___ftdiv:	
  3521  002E                     ?___ftmul:	
  3522                           ; 3 bytes @ 0xE
  3523                           
  3524  002E                     setDelayOff_GO@sw:	
  3525                           ; 3 bytes @ 0xE
  3526                           
  3527  002E                     Load_Main@error:	
  3528                           ; 1 bytes @ 0xE
  3529                           
  3530  002E                     ___ftdiv@f2:	
  3531                           ; 1 bytes @ 0xE
  3532                           
  3533  002E                     ___ftmul@f1:	
  3534                           ; 3 bytes @ 0xE
  3535                           
  3536                           
  3537                           ; 3 bytes @ 0xE
  3538  002E                     	ds	1
  3539  002F                     Load_Main@i:	
  3540                           
  3541                           ; 1 bytes @ 0xF
  3542  002F                     	ds	2
  3543  0031                     ___ftdiv@f1:	
  3544  0031                     ___ftmul@f2:	
  3545                           ; 3 bytes @ 0x11
  3546                           
  3547                           
  3548                           ; 3 bytes @ 0x11
  3549  0031                     	ds	3
  3550  0034                     ??___ftdiv:	
  3551  0034                     ??___ftmul:	
  3552                           ; 0 bytes @ 0x14
  3553                           
  3554                           
  3555                           ; 0 bytes @ 0x14
  3556  0034                     	ds	4
  3557  0038                     ___ftdiv@cntr:	
  3558  0038                     ___ftmul@exp:	
  3559                           ; 1 bytes @ 0x18
  3560                           
  3561                           
  3562                           ; 1 bytes @ 0x18
  3563  0038                     	ds	1
  3564  0039                     ___ftdiv@f3:	
  3565  0039                     ___ftmul@f3_as_product:	
  3566                           ; 3 bytes @ 0x19
  3567                           
  3568                           
  3569                           ; 3 bytes @ 0x19
  3570  0039                     	ds	3
  3571  003C                     ___ftdiv@exp:	
  3572  003C                     ___ftmul@cntr:	
  3573                           ; 1 bytes @ 0x1C
  3574                           
  3575                           
  3576                           ; 1 bytes @ 0x1C
  3577  003C                     	ds	1
  3578  003D                     ___ftdiv@sign:	
  3579  003D                     ___ftmul@sign:	
  3580                           ; 1 bytes @ 0x1D
  3581                           
  3582                           
  3583                           ; 1 bytes @ 0x1D
  3584  003D                     	ds	1
  3585  003E                     ?___ftadd:	
  3586  003E                     ___ftadd@f1:	
  3587                           ; 3 bytes @ 0x1E
  3588                           
  3589                           
  3590                           ; 3 bytes @ 0x1E
  3591  003E                     	ds	3
  3592  0041                     ___ftadd@f2:	
  3593                           
  3594                           ; 3 bytes @ 0x21
  3595  0041                     	ds	3
  3596  0044                     ??___ftadd:	
  3597                           
  3598                           ; 0 bytes @ 0x24
  3599  0044                     	ds	4
  3600  0048                     ___ftadd@sign:	
  3601                           
  3602                           ; 1 bytes @ 0x28
  3603  0048                     	ds	1
  3604  0049                     ___ftadd@exp2:	
  3605                           
  3606                           ; 1 bytes @ 0x29
  3607  0049                     	ds	1
  3608  004A                     ___ftadd@exp1:	
  3609                           
  3610                           ; 1 bytes @ 0x2A
  3611  004A                     	ds	1
  3612  004B                     ?___fttol:	
  3613  004B                     ___fttol@f1:	
  3614                           ; 4 bytes @ 0x2B
  3615                           
  3616                           
  3617                           ; 3 bytes @ 0x2B
  3618  004B                     	ds	4
  3619  004F                     ??___fttol:	
  3620                           
  3621                           ; 0 bytes @ 0x2F
  3622  004F                     	ds	4
  3623  0053                     ___fttol@sign1:	
  3624                           
  3625                           ; 1 bytes @ 0x33
  3626  0053                     	ds	1
  3627  0054                     ___fttol@lval:	
  3628                           
  3629                           ; 4 bytes @ 0x34
  3630  0054                     	ds	4
  3631  0058                     ___fttol@exp1:	
  3632                           
  3633                           ; 1 bytes @ 0x38
  3634  0058                     	ds	1
  3635  0059                     ??_getPercentValue:	
  3636  0059                     ??_setPercentValue:	
  3637                           ; 0 bytes @ 0x39
  3638                           
  3639  0059                     setPercentValue@value:	
  3640                           ; 0 bytes @ 0x39
  3641                           
  3642                           
  3643                           ; 1 bytes @ 0x39
  3644  0059                     	ds	1
  3645  005A                     setPercentValue@i:	
  3646                           
  3647                           ; 3 bytes @ 0x3A
  3648  005A                     	ds	1
  3649  005B                     getPercentValue@value:	
  3650                           
  3651                           ; 1 bytes @ 0x3B
  3652  005B                     	ds	1
  3653  005C                     getPercentValue@i:	
  3654                           
  3655                           ; 3 bytes @ 0x3C
  3656  005C                     	ds	1
  3657  005D                     ?_setRF_DimmerLights:	
  3658  005D                     ??_Flash_Memory_Initialization:	
  3659                           ; 0 bytes @ 0x3D
  3660                           
  3661  005D                     setRF_DimmerLights@on:	
  3662                           ; 0 bytes @ 0x3D
  3663                           
  3664                           
  3665                           ; 1 bytes @ 0x3D
  3666  005D                     	ds	1
  3667  005E                     ??_setRF_DimmerLights:	
  3668  005E                     Flash_Memory_Initialization@i:	
  3669                           ; 0 bytes @ 0x3E
  3670                           
  3671                           
  3672                           ; 1 bytes @ 0x3E
  3673  005E                     	ds	1
  3674  005F                     ??_setDimmerLights_AdjRF:	
  3675                           
  3676                           ; 0 bytes @ 0x3F
  3677  005F                     	ds	1
  3678  0060                     setDimmerLights_AdjRF@lights:	
  3679  0060                     setRF_DimmerLights@status:	
  3680                           ; 1 bytes @ 0x40
  3681                           
  3682                           
  3683                           ; 1 bytes @ 0x40
  3684  0060                     	ds	1
  3685  0061                     ??_setRF_DimmerValue:	
  3686  0061                     setRF_DimmerLights@lights:	
  3687                           ; 0 bytes @ 0x41
  3688                           
  3689                           
  3690                           ; 1 bytes @ 0x41
  3691  0061                     	ds	1
  3692  0062                     ??_setDimmerLights_SwOn:	
  3693  0062                     ??_setDimmerLights_SwOff:	
  3694                           ; 0 bytes @ 0x42
  3695                           
  3696  0062                     ?_setDimmerLights_Adj:	
  3697                           ; 0 bytes @ 0x42
  3698                           
  3699  0062                     setDimmerLights_Adj@status:	
  3700                           ; 0 bytes @ 0x42
  3701                           
  3702                           
  3703                           ; 1 bytes @ 0x42
  3704  0062                     	ds	1
  3705  0063                     ??_setDimmerLights_Adj:	
  3706  0063                     setDimmerLights_SwOn@idle:	
  3707                           ; 0 bytes @ 0x43
  3708                           
  3709  0063                     setRF_DimmerValue@lights:	
  3710                           ; 1 bytes @ 0x43
  3711                           
  3712                           
  3713                           ; 1 bytes @ 0x43
  3714  0063                     	ds	1
  3715  0064                     ??_setRFSW_AdjControl:	
  3716  0064                     setDimmerLights_SwOn@sw:	
  3717                           ; 0 bytes @ 0x44
  3718                           
  3719  0064                     setDimmerLights_SwOff@command:	
  3720                           ; 1 bytes @ 0x44
  3721                           
  3722  0064                     setDimmerLights_Adj@lights:	
  3723                           ; 1 bytes @ 0x44
  3724                           
  3725                           
  3726                           ; 1 bytes @ 0x44
  3727  0064                     	ds	1
  3728  0065                     ??_setDimmerLights_Main:	
  3729  0065                     setDimmerLights_Main@lights:	
  3730                           ; 0 bytes @ 0x45
  3731                           
  3732  0065                     setDimmerLights_SwOff@sw:	
  3733                           ; 1 bytes @ 0x45
  3734                           
  3735                           
  3736                           ; 1 bytes @ 0x45
  3737  0065                     	ds	1
  3738  0066                     ??_DlyOff_Main:	
  3739  0066                     ??_setRFSW_Control:	
  3740                           ; 0 bytes @ 0x46
  3741                           
  3742  0066                     ??_setSw_Main:	
  3743                           ; 0 bytes @ 0x46
  3744                           
  3745  0066                     ??_DimmerLights_Main:	
  3746                           ; 0 bytes @ 0x46
  3747                           
  3748  0066                     ??_setDimmerLights_ErrorClose:	
  3749                           ; 0 bytes @ 0x46
  3750                           
  3751  0066                     setRFSW_AdjControl@status:	
  3752                           ; 0 bytes @ 0x46
  3753                           
  3754                           
  3755                           ; 1 bytes @ 0x46
  3756  0066                     	ds	1
  3757  0067                     setDimmerLights_ErrorClose@count:	
  3758  0067                     setRFSW_Control@status:	
  3759                           ; 1 bytes @ 0x47
  3760                           
  3761  0067                     setRFSW_AdjControl@sw:	
  3762                           ; 1 bytes @ 0x47
  3763                           
  3764                           
  3765                           ; 1 bytes @ 0x47
  3766  0067                     	ds	1
  3767  0068                     DlyOff_Main@sw:	
  3768  0068                     setDimmerLights_ErrorClose@lights:	
  3769                           ; 1 bytes @ 0x48
  3770                           
  3771  0068                     setRFSW_Control@sw:	
  3772                           ; 1 bytes @ 0x48
  3773                           
  3774  0068                     setSw_Main@sw:	
  3775                           ; 1 bytes @ 0x48
  3776                           
  3777  0068                     _DimmerLights_Main$2495:	
  3778                           ; 1 bytes @ 0x48
  3779                           
  3780                           
  3781                           ; 2 bytes @ 0x48
  3782  0068                     	ds	1
  3783  0069                     ??_getRxData:	
  3784  0069                     ??_setControl_Lights_Table:	
  3785                           ; 0 bytes @ 0x49
  3786                           
  3787  0069                     ??_DelayOff_Main:	
  3788                           ; 0 bytes @ 0x49
  3789                           
  3790  0069                     setDimmerLights_ErrorClose@i:	
  3791                           ; 0 bytes @ 0x49
  3792                           
  3793                           
  3794                           ; 2 bytes @ 0x49
  3795  0069                     	ds	1
  3796  006A                     getRxData@error:	
  3797                           
  3798                           ; 1 bytes @ 0x4A
  3799  006A                     	ds	1
  3800  006B                     ??_setRF_Main:	
  3801  006B                     ??_setMain_Exception:	
  3802                           ; 0 bytes @ 0x4B
  3803                           
  3804                           
  3805                           ; 0 bytes @ 0x4B
  3806  006B                     	ds	1
  3807  006C                     setRF_Main@loop_f:	
  3808                           
  3809                           ; 1 bytes @ 0x4C
  3810  006C                     	ds	1
  3811  006D                     ??_Switch_Main:	
  3812  006D                     setRF_Main@Receive_OK:	
  3813                           ; 0 bytes @ 0x4D
  3814                           
  3815                           
  3816                           ; 1 bytes @ 0x4D
  3817  006D                     	ds	1
  3818  006E                     setRF_Main@error:	
  3819  006E                     Switch_Main@error:	
  3820                           ; 1 bytes @ 0x4E
  3821                           
  3822                           
  3823                           ; 1 bytes @ 0x4E
  3824  006E                     	ds	1
  3825  006F                     ??_RF_Main:	
  3826  006F                     ??_main:	
  3827                           ; 0 bytes @ 0x4F
  3828                           
  3829                           
  3830                           	psect	maintext
  3831  16F5                     __pmaintext:	
  3832                           ; 0 bytes @ 0x4F
  3833 ;;
  3834 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3835 ;;
  3836 ;; *************** function _main *****************
  3837 ;; Defined at:
  3838 ;;		line 7 in file "../src/Main_B1.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;  argc            2    0[BANK3 ] int 
  3841 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;		None
  3844 ;; Return value:  Size  Location     Type
  3845 ;;                  2    0[BANK3 ] int 
  3846 ;; Registers used:
  3847 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3848 ;; Tracked objects:
  3849 ;;		On entry : 17F/0
  3850 ;;		On exit  : 0/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3853 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3856 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3857 ;;Total ram usage:        4 bytes
  3858 ;; Hardware stack levels required when called:   15
  3859 ;; This function calls:
  3860 ;;		_Buzzer_Initialization
  3861 ;;		_Buzzer_Main
  3862 ;;		_CC2500_PowerOnInitial
  3863 ;;		_DelayOff_Initialization
  3864 ;;		_DelayOff_Main
  3865 ;;		_DimmerLights_Initialization
  3866 ;;		_DimmerLights_Main
  3867 ;;		_Flash_Memory_Initialization
  3868 ;;		_Flash_Memory_Main
  3869 ;;		_LED_Initialization
  3870 ;;		_LED_Main
  3871 ;;		_Load_Initialization
  3872 ;;		_Load_Main
  3873 ;;		_Mcu_Initialization
  3874 ;;		_RF_Initialization
  3875 ;;		_RF_Main
  3876 ;;		_Switch_Initialization
  3877 ;;		_Switch_Main
  3878 ;;		_Temp_Initialization
  3879 ;;		_Temp_Main
  3880 ;;		_WDT_Main
  3881 ;;		_getLoad_AD
  3882 ;;		_getTemp_AD
  3883 ;;		_myMain_Initialization
  3884 ;;		_my_MainTimer
  3885 ;; This function is called by:
  3886 ;;		Startup code after reset
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           
  3891                           ;psect for function _main
  3892  16F5                     _main:	
  3893                           
  3894                           ;Main_B1.c: 8: myMain_Initialization();
  3895                           
  3896                           ;incstack = 0
  3897                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3898  16F5  319C  2431  3196   	fcall	_myMain_Initialization
  3899                           
  3900                           ;Main_B1.c: 9: Mcu_Initialization();
  3901  16F8  319C  24B9  3196   	fcall	_Mcu_Initialization
  3902                           
  3903                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3904  16FB  3186  2668  3196   	fcall	_Flash_Memory_Initialization
  3905                           
  3906                           ;Main_B1.c: 11: LED_Initialization();
  3907  16FE  319B  23CB  3196   	fcall	_LED_Initialization
  3908                           
  3909                           ;Main_B1.c: 12: Buzzer_Initialization();
  3910  1701  319B  232D  3196   	fcall	_Buzzer_Initialization
  3911                           
  3912                           ;Main_B1.c: 14: ;;
  3913                           ;Main_B1.c: 15: Temp_Initialization();
  3914  1704  319B  2336  3196   	fcall	_Temp_Initialization
  3915                           
  3916                           ;Main_B1.c: 16: Load_Initialization();
  3917  1707  319B  2351  3196   	fcall	_Load_Initialization
  3918                           
  3919                           ;Main_B1.c: 17: ;;
  3920                           ;Main_B1.c: 18: DelayOff_Initialization();
  3921  170A  319B  2371  3196   	fcall	_DelayOff_Initialization
  3922                           
  3923                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3924  170D  319D  25E3  3196   	fcall	_DimmerLights_Initialization
  3925                           
  3926                           ;Main_B1.c: 21: ;;
  3927                           ;Main_B1.c: 22: ;;
  3928                           ;Main_B1.c: 23: ;;
  3929                           ;Main_B1.c: 24: Switch_Initialization();
  3930  1710  319C  2407  3196   	fcall	_Switch_Initialization
  3931                           
  3932                           ;Main_B1.c: 25: RF_Initialization();
  3933  1713  319B  2330  3196   	fcall	_RF_Initialization
  3934                           
  3935                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3936  1716  319D  258E  3196   	fcall	_CC2500_PowerOnInitial
  3937  1719                     l10662:	
  3938                           ;Main_B1.c: 27: ;;
  3939                           ;Main_B1.c: 29: while (1) {
  3940                           
  3941                           
  3942                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  3943  1719  0021               	movlb	1	; select bank1
  3944  171A  1C20               	btfss	_myMain^(0+128),0
  3945  171B  2F24               	goto	l10666
  3946                           
  3947                           ;Main_B1.c: 37: getLoad_AD(0x05);
  3948  171C  3005               	movlw	5
  3949  171D  318C  2491  3196   	fcall	_getLoad_AD
  3950                           
  3951                           ;Main_B1.c: 41: getTemp_AD(0x09);
  3952  1720  3009               	movlw	9
  3953  1721  3192  22F5  3196   	fcall	_getTemp_AD
  3954  1724                     l10666:	
  3955                           
  3956                           ;Main_B1.c: 56: }
  3957                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  3958  1724  0022               	movlb	2	; select bank2
  3959  1725  1C20               	btfss	_Timer1^(0+256),0
  3960  1726  2F19               	goto	l10662
  3961                           
  3962                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  3963  1727  1020               	bcf	_Timer1^(0+256),0
  3964                           
  3965                           ;Main_B1.c: 94: my_MainTimer();
  3966  1728  3193  232C  3196   	fcall	_my_MainTimer
  3967                           
  3968                           ;Main_B1.c: 95: WDT_Main();
  3969  172B  319C  24CB  3196   	fcall	_WDT_Main
  3970                           
  3971                           ;Main_B1.c: 96: ;;
  3972                           ;Main_B1.c: 97: ;;
  3973                           ;Main_B1.c: 98: if (myMain.PowerON == 1) {
  3974  172E  0021               	movlb	1	; select bank1
  3975  172F  1C20               	btfss	_myMain^(0+128),0
  3976  1730  2F19               	goto	l10662
  3977                           
  3978                           ;Main_B1.c: 99: Flash_Memory_Main();
  3979  1731  3192  2289  3196   	fcall	_Flash_Memory_Main
  3980                           
  3981                           ;Main_B1.c: 101: LED_Main();
  3982  1734  319B  23D7  3196   	fcall	_LED_Main
  3983                           
  3984                           ;Main_B1.c: 102: Buzzer_Main();
  3985  1737  3194  24B6  3196   	fcall	_Buzzer_Main
  3986                           
  3987                           ;Main_B1.c: 104: ;;
  3988                           ;Main_B1.c: 105: Temp_Main();
  3989  173A  319B  2339  3196   	fcall	_Temp_Main
  3990                           
  3991                           ;Main_B1.c: 106: Load_Main();
  3992  173D  3183  233D  3196   	fcall	_Load_Main
  3993                           
  3994                           ;Main_B1.c: 107: ;;
  3995                           ;Main_B1.c: 109: ;;
  3996                           ;Main_B1.c: 110: DimmerLights_Main();
  3997  1740  3191  21EB  3196   	fcall	_DimmerLights_Main
  3998                           
  3999                           ;Main_B1.c: 111: Switch_Main();
  4000  1743  319F  27DC  3196   	fcall	_Switch_Main
  4001                           
  4002                           ;Main_B1.c: 112: ;;
  4003                           ;Main_B1.c: 113: ;;
  4004                           ;Main_B1.c: 115: RF_Main();
  4005  1746  319B  2333  3196   	fcall	_RF_Main
  4006                           
  4007                           ;Main_B1.c: 116: DelayOff_Main();
  4008  1749  319B  2379  3196   	fcall	_DelayOff_Main
  4009                           
  4010                           ;Main_B1.c: 117: ;;
  4011  174C  2F19               	goto	l10662
  4012  174D                     __end_of_main:	
  4013                           ;Main_B1.c: 125: }
  4014                           ;Main_B1.c: 126: }
  4015                           ;Main_B1.c: 160: }
  4016                           ;Main_B1.c: 161: return (0);
  4017                           ;	Return value of _main is never used
  4018                           
  4019                           
  4020                           	psect	text1
  4021  132C                     __ptext1:	
  4022 ;; *************** function _my_MainTimer *****************
  4023 ;; Defined at:
  4024 ;;		line 180 in file "../src/Main_B1.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;		None
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;		None
  4029 ;; Return value:  Size  Location     Type
  4030 ;;		None               void
  4031 ;; Registers used:
  4032 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4042 ;;Total ram usage:        0 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; Hardware stack levels required when called:    7
  4045 ;; This function calls:
  4046 ;;		_setBuz
  4047 ;; This function is called by:
  4048 ;;		_main
  4049 ;; This function uses a non-reentrant model
  4050 ;;
  4051                           
  4052                           
  4053                           ;psect for function _my_MainTimer
  4054  132C                     _my_MainTimer:	
  4055                           
  4056                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  4057                           
  4058                           ;incstack = 0
  4059                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4060  132C  0021               	movlb	1	; select bank1
  4061  132D  1820               	btfsc	_myMain^(0+128),0
  4062  132E  2B4D               	goto	l10426
  4063                           
  4064                           ;Main_B1.c: 183: myMain.PowerCount++;
  4065  132F  3001               	movlw	1
  4066  1330  07A2               	addwf	(_myMain^(0+128)+2),f
  4067  1331  3000               	movlw	0
  4068  1332  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  4069                           
  4070                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  4071  1333  3002               	movlw	2
  4072  1334  3EA0               	addlw	_myMain& (0+255)
  4073  1335  0086               	movwf	6
  4074  1336  0187               	clrf	7
  4075  1337  3F40               	moviw [0]fsr1
  4076  1338  3A96               	xorlw	150
  4077  1339  1D03               	skipz
  4078  133A  2B3D               	goto	u11845
  4079  133B  3F41               	moviw [1]fsr1
  4080  133C  3A00               	xorlw	0
  4081  133D                     u11845:	
  4082  133D  1D03               	skipz
  4083  133E  0008               	return
  4084                           
  4085                           ;Main_B1.c: 185: {
  4086                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  4087  133F  01A2               	clrf	(_myMain^(0+128)+2)
  4088  1340  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4089                           
  4090                           ;Main_B1.c: 187: myMain.PowerON = 1;
  4091  1341  1420               	bsf	_myMain^(0+128),0
  4092                           
  4093                           ;Main_B1.c: 193: setBuz(3, 50);
  4094  1342  3032               	movlw	50
  4095  1343  0020               	movlb	0	; select bank0
  4096  1344  00A9               	movwf	setBuz@time
  4097  1345  3000               	movlw	0
  4098  1346  00AA               	movwf	setBuz@time+1
  4099  1347  3003               	movlw	3
  4100  1348  3197  274D         	fcall	_setBuz
  4101                           
  4102                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  4103  134A  0021               	movlb	1	; select bank1
  4104  134B  1620               	bsf	_myMain^(0+128),4
  4105                           
  4106                           ;Main_B1.c: 203: }
  4107                           ;Main_B1.c: 204: } else {
  4108  134C  0008               	return
  4109  134D                     l10426:	
  4110                           
  4111                           ;Main_B1.c: 212: myMain.Count1++;
  4112  134D  3001               	movlw	1
  4113  134E  07A6               	addwf	(_myMain^(0+128)+6),f
  4114  134F  3000               	movlw	0
  4115  1350  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4116                           
  4117                           ;Main_B1.c: 213: if (myMain.Count1 == 100)
  4118  1351  3006               	movlw	6
  4119  1352  3EA0               	addlw	_myMain& (0+255)
  4120  1353  0086               	movwf	6
  4121  1354  0187               	clrf	7
  4122  1355  3F40               	moviw [0]fsr1
  4123  1356  3A64               	xorlw	100
  4124  1357  1D03               	skipz
  4125  1358  2B5B               	goto	u11855
  4126  1359  3F41               	moviw [1]fsr1
  4127  135A  3A00               	xorlw	0
  4128  135B                     u11855:	
  4129  135B  1D03               	skipz
  4130  135C  0008               	return
  4131                           
  4132                           ;Main_B1.c: 214: {
  4133                           ;Main_B1.c: 215: myMain.Count1 = 0;
  4134  135D  01A6               	clrf	(_myMain^(0+128)+6)
  4135  135E  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4136                           
  4137                           ;Main_B1.c: 227: if (myMain.Flag) {
  4138  135F  1CA0               	btfss	_myMain^(0+128),1
  4139  1360  2B63               	goto	l1519
  4140                           
  4141                           ;Main_B1.c: 228: myMain.Flag = 0;
  4142  1361  10A0               	bcf	_myMain^(0+128),1
  4143                           
  4144                           ;Main_B1.c: 237: } else {
  4145  1362  0008               	return
  4146  1363                     l1519:	
  4147                           
  4148                           ;Main_B1.c: 238: myMain.Flag = 1;
  4149  1363  14A0               	bsf	_myMain^(0+128),1
  4150  1364  0008               	return
  4151  1365                     __end_of_my_MainTimer:	
  4152                           
  4153                           	psect	text2
  4154  1C31                     __ptext2:	
  4155 ;; *************** function _myMain_Initialization *****************
  4156 ;; Defined at:
  4157 ;;		line 167 in file "../src/Main_B1.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;		None
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;		None
  4162 ;; Return value:  Size  Location     Type
  4163 ;;		None               void
  4164 ;; Registers used:
  4165 ;;		wreg, fsr1l, fsr1h
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4174 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;Total ram usage:        1 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    5
  4178 ;; This function calls:
  4179 ;;		Nothing
  4180 ;; This function is called by:
  4181 ;;		_main
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           
  4186                           ;psect for function _myMain_Initialization
  4187  1C31                     _myMain_Initialization:	
  4188                           
  4189                           ;Main_B1.c: 169: product = &_product;
  4190                           
  4191                           ;incstack = 0
  4192                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4193  1C31  3045               	movlw	__product& (0+255)
  4194  1C32  0020               	movlb	0	; select bank0
  4195  1C33  00A0               	movwf	??_myMain_Initialization
  4196  1C34  0820               	movf	??_myMain_Initialization,w
  4197  1C35  00FB               	movwf	_product
  4198                           
  4199                           ;Main_B1.c: 170: product->Data[20] = 210;
  4200  1C36  30D2               	movlw	210
  4201  1C37  00A0               	movwf	??_myMain_Initialization
  4202  1C38  087B               	movf	_product,w
  4203  1C39  3E14               	addlw	20
  4204  1C3A  0086               	movwf	6
  4205  1C3B  3002               	movlw	2	; select bank4/5
  4206  1C3C  0087               	movwf	7
  4207  1C3D  0820               	movf	??_myMain_Initialization,w
  4208  1C3E  0081               	movwf	1
  4209  1C3F  0008               	return
  4210  1C40                     __end_of_myMain_Initialization:	
  4211                           
  4212                           	psect	text3
  4213  12F5                     __ptext3:	
  4214 ;; *************** function _getTemp_AD *****************
  4215 ;; Defined at:
  4216 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  channel         1    wreg     unsigned char 
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;  channel         1    5[BANK0 ] unsigned char 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;		None               void
  4223 ;; Registers used:
  4224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4232 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4233 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4234 ;;Total ram usage:        2 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    7
  4237 ;; This function calls:
  4238 ;;		_getAD
  4239 ;; This function is called by:
  4240 ;;		_main
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           
  4245                           ;psect for function _getTemp_AD
  4246  12F5                     _getTemp_AD:	
  4247                           
  4248                           ;incstack = 0
  4249                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4250                           ;getTemp_AD@channel stored from wreg
  4251  12F5  0020               	movlb	0	; select bank0
  4252  12F6  00A5               	movwf	getTemp_AD@channel
  4253                           
  4254                           ;OverTemperature_B1.c: 33: if (Temp.ADtoGO == 1) {
  4255  12F7  0021               	movlb	1	; select bank1
  4256  12F8  1D58               	btfss	_Temp^(0+128),2
  4257  12F9  0008               	return
  4258                           
  4259                           ;OverTemperature_B1.c: 34: Temp.GO = 1;
  4260  12FA  1658               	bsf	_Temp^(0+128),4
  4261                           
  4262                           ;OverTemperature_B1.c: 35: Temp.ADRES = getAD(channel, 0xf0);
  4263  12FB  30F0               	movlw	240
  4264  12FC  0020               	movlb	0	; select bank0
  4265  12FD  00A4               	movwf	??_getTemp_AD
  4266  12FE  0824               	movf	??_getTemp_AD,w
  4267  12FF  00A0               	movwf	getAD@adcon1
  4268  1300  0825               	movf	getTemp_AD@channel,w
  4269  1301  319F  2735  3192   	fcall	_getAD
  4270  1304  0020               	movlb	0	; select bank0
  4271  1305  0821               	movf	?_getAD+1,w
  4272  1306  0021               	movlb	1	; select bank1
  4273  1307  01E5               	clrf	((_Temp+1)^(0+128)+12)
  4274  1308  07E5               	addwf	((_Temp+1)^(0+128)+12),f
  4275  1309  0020               	movlb	0	; select bank0
  4276  130A  0820               	movf	?_getAD,w
  4277  130B  0021               	movlb	1	; select bank1
  4278  130C  01E4               	clrf	(_Temp^(0+128)+12)
  4279  130D  07E4               	addwf	(_Temp^(0+128)+12),f
  4280                           
  4281                           ;OverTemperature_B1.c: 36: if (Temp.ADH[0] < Temp.ADRES) {
  4282  130E  0865               	movf	((_Temp+1)^(0+128)+12),w
  4283  130F  0261               	subwf	((_Temp+1)^(0+128)+8),w
  4284  1310  1D03               	skipz
  4285  1311  2B14               	goto	u11815
  4286  1312  0864               	movf	(_Temp^(0+128)+12),w
  4287  1313  0260               	subwf	(_Temp^(0+128)+8),w
  4288  1314                     u11815:	
  4289  1314  1803               	skipnc
  4290  1315  2B1D               	goto	l10408
  4291                           
  4292                           ;OverTemperature_B1.c: 37: Temp.ADH[0] = Temp.ADRES;
  4293  1316  0865               	movf	((_Temp+1)^(0+128)+12),w
  4294  1317  01E1               	clrf	((_Temp+1)^(0+128)+8)
  4295  1318  07E1               	addwf	((_Temp+1)^(0+128)+8),f
  4296  1319  0864               	movf	(_Temp^(0+128)+12),w
  4297  131A  01E0               	clrf	(_Temp^(0+128)+8)
  4298  131B  07E0               	addwf	(_Temp^(0+128)+8),f
  4299                           
  4300                           ;OverTemperature_B1.c: 38: } else if (Temp.ADH[1] < Temp.ADRES) {
  4301  131C  0008               	return
  4302  131D                     l10408:	
  4303  131D  0865               	movf	((_Temp+1)^(0+128)+12),w
  4304  131E  0263               	subwf	((_Temp+1)^(0+128)+10),w
  4305  131F  1D03               	skipz
  4306  1320  2B23               	goto	u11825
  4307  1321  0864               	movf	(_Temp^(0+128)+12),w
  4308  1322  0262               	subwf	(_Temp^(0+128)+10),w
  4309  1323                     u11825:	
  4310  1323  1803               	skipnc
  4311  1324  0008               	return
  4312                           
  4313                           ;OverTemperature_B1.c: 39: Temp.ADH[1] = Temp.ADRES;
  4314  1325  0865               	movf	((_Temp+1)^(0+128)+12),w
  4315  1326  01E3               	clrf	((_Temp+1)^(0+128)+10)
  4316  1327  07E3               	addwf	((_Temp+1)^(0+128)+10),f
  4317  1328  0864               	movf	(_Temp^(0+128)+12),w
  4318  1329  01E2               	clrf	(_Temp^(0+128)+10)
  4319  132A  07E2               	addwf	(_Temp^(0+128)+10),f
  4320  132B  0008               	return
  4321  132C                     __end_of_getTemp_AD:	
  4322                           
  4323                           	psect	text4
  4324  0C91                     __ptext4:	
  4325 ;; *************** function _getLoad_AD *****************
  4326 ;; Defined at:
  4327 ;;		line 15 in file "../src/OverLoad_B1.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;  channel         1    wreg     unsigned char 
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;  channel         1    6[BANK0 ] unsigned char 
  4332 ;;  i               1    9[BANK0 ] unsigned char 
  4333 ;;  j               1    8[BANK0 ] unsigned char 
  4334 ;;  k               1    7[BANK0 ] unsigned char 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;		None               void
  4337 ;; Registers used:
  4338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4347 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4348 ;;Total ram usage:        6 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    7
  4351 ;; This function calls:
  4352 ;;		_getAD
  4353 ;; This function is called by:
  4354 ;;		_main
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           
  4359                           ;psect for function _getLoad_AD
  4360  0C91                     _getLoad_AD:	
  4361                           
  4362                           ;incstack = 0
  4363                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4364                           ;getLoad_AD@channel stored from wreg
  4365  0C91  0020               	movlb	0	; select bank0
  4366  0C92  00A6               	movwf	getLoad_AD@channel
  4367                           
  4368                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4369  0C93  01A9               	clrf	getLoad_AD@i
  4370  0C94  01A8               	clrf	getLoad_AD@j
  4371  0C95  01A7               	clrf	getLoad_AD@k
  4372                           
  4373                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4374  0C96  0022               	movlb	2	; select bank2
  4375  0C97  1E27               	btfss	_Load^(0+256),4
  4376  0C98  0008               	return
  4377                           
  4378                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4379  0C99  30F3               	movlw	243
  4380  0C9A  0020               	movlb	0	; select bank0
  4381  0C9B  00A4               	movwf	??_getLoad_AD
  4382  0C9C  0824               	movf	??_getLoad_AD,w
  4383  0C9D  00A0               	movwf	getAD@adcon1
  4384  0C9E  0826               	movf	getLoad_AD@channel,w
  4385  0C9F  319F  2735  318C   	fcall	_getAD
  4386  0CA2  0020               	movlb	0	; select bank0
  4387  0CA3  0821               	movf	?_getAD+1,w
  4388  0CA4  0022               	movlb	2	; select bank2
  4389  0CA5  01C9               	clrf	((_Load+1)^(0+256)+33)
  4390  0CA6  07C9               	addwf	((_Load+1)^(0+256)+33),f
  4391  0CA7  0020               	movlb	0	; select bank0
  4392  0CA8  0820               	movf	?_getAD,w
  4393  0CA9  0022               	movlb	2	; select bank2
  4394  0CAA  01C8               	clrf	(_Load^(0+256)+33)
  4395  0CAB  07C8               	addwf	(_Load^(0+256)+33),f
  4396                           
  4397                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4398  0CAC  0020               	movlb	0	; select bank0
  4399  0CAD  01A9               	clrf	getLoad_AD@i
  4400  0CAE  3004               	movlw	4
  4401  0CAF  0229               	subwf	getLoad_AD@i,w
  4402  0CB0  1803               	btfsc	3,0
  4403  0CB1  2CDF               	goto	l10378
  4404  0CB2                     l10366:	
  4405                           
  4406                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4407  0CB2  3529               	lslf	getLoad_AD@i,w
  4408  0CB3  3E32               	addlw	(_Load+11)& (0+255)
  4409  0CB4  0086               	movwf	6
  4410  0CB5  3001               	movlw	1	; select bank2/3
  4411  0CB6  0087               	movwf	7
  4412  0CB7  3F40               	moviw [0]fsr1
  4413  0CB8  00A4               	movwf	??_getLoad_AD
  4414  0CB9  3F41               	moviw [1]fsr1
  4415  0CBA  00A5               	movwf	??_getLoad_AD+1
  4416  0CBB  0022               	movlb	2	; select bank2
  4417  0CBC  0849               	movf	((_Load+1)^(0+256)+33),w
  4418  0CBD  0020               	movlb	0	; select bank0
  4419  0CBE  0225               	subwf	??_getLoad_AD+1,w
  4420  0CBF  1D03               	skipz
  4421  0CC0  2CC5               	goto	u11725
  4422  0CC1  0022               	movlb	2	; select bank2
  4423  0CC2  0848               	movf	(_Load^(0+256)+33),w
  4424  0CC3  0020               	movlb	0	; select bank0
  4425  0CC4  0224               	subwf	??_getLoad_AD,w
  4426  0CC5                     u11725:	
  4427  0CC5  1803               	skipnc
  4428  0CC6  2CD7               	goto	l10374
  4429  0CC7  08A8               	movf	getLoad_AD@j,f
  4430  0CC8  1D03               	skipz
  4431  0CC9  2CD7               	goto	l10374
  4432                           
  4433                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4434  0CCA  3529               	lslf	getLoad_AD@i,w
  4435  0CCB  3E32               	addlw	(_Load+11)& (0+255)
  4436  0CCC  0086               	movwf	6
  4437  0CCD  3001               	movlw	1	; select bank2/3
  4438  0CCE  0087               	movwf	7
  4439  0CCF  0022               	movlb	2	; select bank2
  4440  0CD0  0848               	movf	(_Load^(0+256)+33),w
  4441  0CD1  3FC0               	movwi [0]fsr1
  4442  0CD2  0849               	movf	((_Load+1)^(0+256)+33),w
  4443  0CD3  3FC1               	movwi [1]fsr1
  4444                           
  4445                           ;OverLoad_B1.c: 24: j = 1;
  4446  0CD4  0020               	movlb	0	; select bank0
  4447  0CD5  01A8               	clrf	getLoad_AD@j
  4448  0CD6  0AA8               	incf	getLoad_AD@j,f
  4449  0CD7                     l10374:	
  4450  0CD7  3001               	movlw	1
  4451  0CD8  00A4               	movwf	??_getLoad_AD
  4452  0CD9  0824               	movf	??_getLoad_AD,w
  4453  0CDA  07A9               	addwf	getLoad_AD@i,f
  4454  0CDB  3004               	movlw	4
  4455  0CDC  0229               	subwf	getLoad_AD@i,w
  4456  0CDD  1C03               	skipc
  4457  0CDE  2CB2               	goto	l10366
  4458  0CDF                     l10378:	
  4459                           
  4460                           ;OverLoad_B1.c: 25: }
  4461                           ;OverLoad_B1.c: 26: }
  4462                           ;OverLoad_B1.c: 27: if (j == 0) {
  4463  0CDF  08A8               	movf	getLoad_AD@j,f
  4464  0CE0  1D03               	skipz
  4465  0CE1  0008               	return
  4466                           
  4467                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4468  0CE2  01A9               	clrf	getLoad_AD@i
  4469  0CE3                     L1:	
  4470  0CE3  3004               	movlw	4
  4471  0CE4  0229               	subwf	getLoad_AD@i,w
  4472  0CE5  1803               	btfsc	3,0
  4473  0CE6  0008               	return
  4474                           
  4475                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4476  0CE7  3529               	lslf	getLoad_AD@i,w
  4477  0CE8  3E3C               	addlw	(_Load+21)& (0+255)
  4478  0CE9  0086               	movwf	6
  4479  0CEA  3001               	movlw	1	; select bank2/3
  4480  0CEB  0087               	movwf	7
  4481  0CEC  3F40               	moviw [0]fsr1
  4482  0CED  00A4               	movwf	??_getLoad_AD
  4483  0CEE  3F41               	moviw [1]fsr1
  4484  0CEF  00A5               	movwf	??_getLoad_AD+1
  4485  0CF0  0825               	movf	??_getLoad_AD+1,w
  4486  0CF1  0022               	movlb	2	; select bank2
  4487  0CF2  0249               	subwf	((_Load+1)^(0+256)+33),w
  4488  0CF3  1D03               	skipz
  4489  0CF4  2CF9               	goto	u11775
  4490  0CF5  0020               	movlb	0	; select bank0
  4491  0CF6  0824               	movf	??_getLoad_AD,w
  4492  0CF7  0022               	movlb	2	; select bank2
  4493  0CF8  0248               	subwf	(_Load^(0+256)+33),w
  4494  0CF9                     u11775:	
  4495  0CF9  1803               	skipnc
  4496  0CFA  2D0C               	goto	l10394
  4497  0CFB  0020               	movlb	0	; select bank0
  4498  0CFC  08A7               	movf	getLoad_AD@k,f
  4499  0CFD  1D03               	skipz
  4500  0CFE  2D0C               	goto	l10394
  4501                           
  4502                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4503  0CFF  3529               	lslf	getLoad_AD@i,w
  4504  0D00  3E3C               	addlw	(_Load+21)& (0+255)
  4505  0D01  0086               	movwf	6
  4506  0D02  3001               	movlw	1	; select bank2/3
  4507  0D03  0087               	movwf	7
  4508  0D04  0022               	movlb	2	; select bank2
  4509  0D05  0848               	movf	(_Load^(0+256)+33),w
  4510  0D06  3FC0               	movwi [0]fsr1
  4511  0D07  0849               	movf	((_Load+1)^(0+256)+33),w
  4512  0D08  3FC1               	movwi [1]fsr1
  4513                           
  4514                           ;OverLoad_B1.c: 31: k = 1;
  4515  0D09  0020               	movlb	0	; select bank0
  4516  0D0A  01A7               	clrf	getLoad_AD@k
  4517  0D0B  0AA7               	incf	getLoad_AD@k,f
  4518  0D0C                     l10394:	
  4519  0D0C  3001               	movlw	1
  4520  0D0D  0020               	movlb	0	; select bank0
  4521  0D0E  00A4               	movwf	??_getLoad_AD
  4522  0D0F  0824               	movf	??_getLoad_AD,w
  4523  0D10  07A9               	addwf	getLoad_AD@i,f
  4524  0D11  2CE3               	goto	L1
  4525  0D12                     __end_of_getLoad_AD:	
  4526                           
  4527                           	psect	text5
  4528  1F35                     __ptext5:	
  4529 ;; *************** function _getAD *****************
  4530 ;; Defined at:
  4531 ;;		line 454 in file "../src/MCU_B1.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  adcon0          1    wreg     unsigned char 
  4534 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  2    0[BANK0 ] int 
  4539 ;; Registers used:
  4540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4546 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4549 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;Total ram usage:        4 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; Hardware stack levels required when called:    6
  4553 ;; This function calls:
  4554 ;;		_Timeout_Counter
  4555 ;;		_set_TimeoutCleared
  4556 ;; This function is called by:
  4557 ;;		_getLoad_AD
  4558 ;;		_getTemp_AD
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           
  4563                           ;psect for function _getAD
  4564  1F35                     _getAD:	
  4565                           
  4566                           ;incstack = 0
  4567                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4568                           ;getAD@adcon0 stored from wreg
  4569  1F35  0020               	movlb	0	; select bank0
  4570  1F36  00A3               	movwf	getAD@adcon0
  4571                           
  4572                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4573  1F37  0823               	movf	getAD@adcon0,w
  4574  1F38  0021               	movlb	1	; select bank1
  4575  1F39  009D               	movwf	29	;volatile
  4576                           
  4577                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4578  1F3A  0020               	movlb	0	; select bank0
  4579  1F3B  0820               	movf	getAD@adcon1,w
  4580  1F3C  0021               	movlb	1	; select bank1
  4581  1F3D  009E               	movwf	30	;volatile
  4582                           
  4583                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4584  1F3E  149D               	bsf	29,1	;volatile
  4585                           
  4586                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4587  1F3F  2F43               	goto	l9810
  4588  1F40                     l9808:	
  4589                           
  4590                           ;MCU_B1.c: 459: Timeout_Counter();
  4591  1F40  319D  2579  319F   	fcall	_Timeout_Counter
  4592  1F43                     l9810:	
  4593  1F43  0021               	movlb	1	; select bank1
  4594  1F44  1C9D               	btfss	29,1	;volatile
  4595  1F45  2F48               	goto	l9814
  4596  1F46  1D2D               	btfss	(_myMain^(0+128)+13),2
  4597  1F47  2F40               	goto	l9808
  4598  1F48                     l9814:	
  4599                           
  4600                           ;MCU_B1.c: 460: };
  4601                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4602  1F48  319B  234C         	fcall	_set_TimeoutCleared
  4603                           
  4604                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4605  1F4A  0021               	movlb	1	; select bank1
  4606  1F4B  081C               	movf	28,w	;volatile
  4607  1F4C  0020               	movlb	0	; select bank0
  4608  1F4D  01A1               	clrf	?_getAD+1
  4609  1F4E  07A1               	addwf	?_getAD+1,f
  4610  1F4F  0021               	movlb	1	; select bank1
  4611  1F50  081B               	movf	27,w	;volatile
  4612  1F51  0020               	movlb	0	; select bank0
  4613  1F52  01A0               	clrf	?_getAD
  4614  1F53  07A0               	addwf	?_getAD,f
  4615  1F54  0008               	return
  4616  1F55                     __end_of_getAD:	
  4617                           
  4618                           	psect	text6
  4619  1CCB                     __ptext6:	
  4620 ;; *************** function _WDT_Main *****************
  4621 ;; Defined at:
  4622 ;;		line 1033 in file "../src/MCU_B1.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;		None
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;		None
  4627 ;; Return value:  Size  Location     Type
  4628 ;;		None               void
  4629 ;; Registers used:
  4630 ;;		wreg, status,2, status,0, pclath, cstack
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4638 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4639 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4640 ;;Total ram usage:        1 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    6
  4643 ;; This function calls:
  4644 ;;		_WDT_Clearing
  4645 ;; This function is called by:
  4646 ;;		_main
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           
  4651                           ;psect for function _WDT_Main
  4652  1CCB                     _WDT_Main:	
  4653                           
  4654                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  4655                           
  4656                           ;incstack = 0
  4657                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4658  1CCB  0022               	movlb	2	; select bank2
  4659  1CCC  1C25               	btfss	_WDT^(0+256),0
  4660  1CCD  0008               	return
  4661                           
  4662                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  4663  1CCE  3001               	movlw	1
  4664  1CCF  02A6               	subwf	(_WDT^(0+256)+1),f
  4665  1CD0  0826               	movf	(_WDT^(0+256)+1),w
  4666  1CD1  3AFF               	xorlw	255
  4667  1CD2  1903               	skipnz
  4668  1CD3  0008               	return
  4669                           
  4670                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  4671  1CD4  3064               	movlw	100
  4672  1CD5  0020               	movlb	0	; select bank0
  4673  1CD6  00A0               	movwf	??_WDT_Main
  4674  1CD7  0820               	movf	??_WDT_Main,w
  4675  1CD8  0022               	movlb	2	; select bank2
  4676  1CD9  00A6               	movwf	(_WDT^(0+256)+1)
  4677                           
  4678                           ;MCU_B1.c: 1037: WDT_Clearing();
  4679  1CDA  3180  2002         	fcall	_WDT_Clearing
  4680  1CDC  0008               	return
  4681  1CDD                     __end_of_WDT_Main:	
  4682                           
  4683                           	psect	text7
  4684  0002                     __ptext7:	
  4685 ;; *************** function _WDT_Clearing *****************
  4686 ;; Defined at:
  4687 ;;		line 1043 in file "../src/MCU_B1.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;		None
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;		None
  4692 ;; Return value:  Size  Location     Type
  4693 ;;		None               void
  4694 ;; Registers used:
  4695 ;;		None
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4705 ;;Total ram usage:        0 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; Hardware stack levels required when called:    5
  4708 ;; This function calls:
  4709 ;;		Nothing
  4710 ;; This function is called by:
  4711 ;;		_WDT_Main
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           
  4716                           ;psect for function _WDT_Clearing
  4717  0002                     _WDT_Clearing:	
  4718                           
  4719                           ;incstack = 0
  4720                           ; Regs used in _WDT_Clearing: []
  4721  0002  0064               	clrwdt	;# 
  4722  0003  0008               	return
  4723  0004                     __end_of_WDT_Clearing:	
  4724                           
  4725                           	psect	text8
  4726  1B39                     __ptext8:	
  4727 ;; *************** function _Temp_Main *****************
  4728 ;; Defined at:
  4729 ;;		line 51 in file "../src/OverTemperature_B1.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;		None
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;		None
  4734 ;; Return value:  Size  Location     Type
  4735 ;;		None               void
  4736 ;; Registers used:
  4737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4738 ;; Tracked objects:
  4739 ;;		On entry : 0/0
  4740 ;;		On exit  : 0/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;Total ram usage:        0 bytes
  4748 ;; Hardware stack levels used:    1
  4749 ;; Hardware stack levels required when called:    7
  4750 ;; This function calls:
  4751 ;;		_setTemp_Main
  4752 ;; This function is called by:
  4753 ;;		_main
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           
  4758                           ;psect for function _Temp_Main
  4759  1B39                     _Temp_Main:	
  4760                           
  4761                           ;OverTemperature_B1.c: 53: setTemp_Main();
  4762                           
  4763                           ;incstack = 0
  4764                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4765  1B39  318E  26BE         	fcall	_setTemp_Main
  4766  1B3B  0008               	return
  4767  1B3C                     __end_of_Temp_Main:	
  4768                           
  4769                           	psect	text9
  4770  0EBE                     __ptext9:	
  4771 ;; *************** function _setTemp_Main *****************
  4772 ;; Defined at:
  4773 ;;		line 58 in file "../src/OverTemperature_B1.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;		None
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;		None
  4778 ;; Return value:  Size  Location     Type
  4779 ;;		None               void
  4780 ;; Registers used:
  4781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4782 ;; Tracked objects:
  4783 ;;		On entry : 0/0
  4784 ;;		On exit  : 0/0
  4785 ;;		Unchanged: 0/0
  4786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4789 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;Total ram usage:        2 bytes
  4792 ;; Hardware stack levels used:    1
  4793 ;; Hardware stack levels required when called:    6
  4794 ;; This function calls:
  4795 ;;		_getMain_All_Error_Status
  4796 ;; This function is called by:
  4797 ;;		_Temp_Main
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           
  4802                           ;psect for function _setTemp_Main
  4803  0EBE                     _setTemp_Main:	
  4804                           
  4805                           ;OverTemperature_B1.c: 59: if (Temp.Enable == 1) {
  4806                           
  4807                           ;incstack = 0
  4808                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4809  0EBE  0021               	movlb	1	; select bank1
  4810  0EBF  1C58               	btfss	_Temp^(0+128),0
  4811  0EC0  2F53               	goto	l1844
  4812                           
  4813                           ;OverTemperature_B1.c: 60: if (Temp.ADtoGO == 0) {
  4814  0EC1  1958               	btfsc	_Temp^(0+128),2
  4815  0EC2  2ED2               	goto	l9920
  4816                           
  4817                           ;OverTemperature_B1.c: 61: Temp.Time++;
  4818  0EC3  3001               	movlw	1
  4819  0EC4  07D9               	addwf	(_Temp^(0+128)+1),f
  4820  0EC5  3000               	movlw	0
  4821  0EC6  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  4822                           
  4823                           ;OverTemperature_B1.c: 62: if (Temp.Time >= 500) {
  4824  0EC7  3001               	movlw	1
  4825  0EC8  025A               	subwf	((_Temp+1)^(0+128)+1),w
  4826  0EC9  30F4               	movlw	244
  4827  0ECA  1903               	skipnz
  4828  0ECB  0259               	subwf	(_Temp^(0+128)+1),w
  4829  0ECC  1C03               	skipc
  4830  0ECD  0008               	return
  4831                           
  4832                           ;OverTemperature_B1.c: 63: Temp.Time = 0;
  4833  0ECE  01D9               	clrf	(_Temp^(0+128)+1)
  4834  0ECF  01DA               	clrf	((_Temp+1)^(0+128)+1)
  4835                           
  4836                           ;OverTemperature_B1.c: 64: Temp.ADtoGO = 1;
  4837  0ED0  1558               	bsf	_Temp^(0+128),2
  4838                           
  4839                           ;OverTemperature_B1.c: 65: }
  4840                           ;OverTemperature_B1.c: 66: } else {
  4841  0ED1  0008               	return
  4842  0ED2                     l9920:	
  4843                           
  4844                           ;OverTemperature_B1.c: 67: if (getMain_All_Error_Status(2) == 0) {
  4845  0ED2  3002               	movlw	2
  4846  0ED3  3191  21B8  318E   	fcall	_getMain_All_Error_Status
  4847  0ED6  3800               	iorlw	0
  4848  0ED7  1D03               	skipz
  4849  0ED8  0008               	return
  4850                           
  4851                           ;OverTemperature_B1.c: 68: Temp.Time++;
  4852  0ED9  3001               	movlw	1
  4853  0EDA  0021               	movlb	1	; select bank1
  4854  0EDB  07D9               	addwf	(_Temp^(0+128)+1),f
  4855  0EDC  3000               	movlw	0
  4856  0EDD  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  4857                           
  4858                           ;OverTemperature_B1.c: 69: if (Temp.Time >= 5) {
  4859  0EDE  3000               	movlw	0
  4860  0EDF  025A               	subwf	((_Temp+1)^(0+128)+1),w
  4861  0EE0  3005               	movlw	5
  4862  0EE1  1903               	skipnz
  4863  0EE2  0259               	subwf	(_Temp^(0+128)+1),w
  4864  0EE3  1C03               	skipc
  4865  0EE4  0008               	return
  4866                           
  4867                           ;OverTemperature_B1.c: 70: Temp.Time = 0;
  4868  0EE5  01D9               	clrf	(_Temp^(0+128)+1)
  4869  0EE6  01DA               	clrf	((_Temp+1)^(0+128)+1)
  4870                           
  4871                           ;OverTemperature_B1.c: 71: if (Temp.GO == 1) {
  4872  0EE7  1E58               	btfss	_Temp^(0+128),4
  4873  0EE8  0008               	return
  4874                           
  4875                           ;OverTemperature_B1.c: 72: Temp.ADtoGO = 0;
  4876  0EE9  1158               	bcf	_Temp^(0+128),2
  4877                           
  4878                           ;OverTemperature_B1.c: 73: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4879  0EEA  300A               	movlw	10
  4880  0EEB  3ED8               	addlw	_Temp& (0+255)
  4881  0EEC  0086               	movwf	6
  4882  0EED  0187               	clrf	7
  4883  0EEE  3008               	movlw	8
  4884  0EEF  3ED8               	addlw	_Temp& (0+255)
  4885  0EF0  0084               	movwf	4
  4886  0EF1  0185               	clrf	5
  4887  0EF2  3F40               	moviw [0]fsr1
  4888  0EF3  0700               	addwf	0,w
  4889  0EF4  0020               	movlb	0	; select bank0
  4890  0EF5  00A7               	movwf	??_setTemp_Main
  4891  0EF6  3101               	addfsr 0,1
  4892  0EF7  3F41               	moviw [1]fsr1
  4893  0EF8  3D00               	addwfc	0,w
  4894  0EF9  00A8               	movwf	??_setTemp_Main+1
  4895  0EFA  36A8               	lsrf	??_setTemp_Main+1,f
  4896  0EFB  0CA7               	rrf	??_setTemp_Main,f
  4897  0EFC  0827               	movf	??_setTemp_Main,w
  4898  0EFD  0021               	movlb	1	; select bank1
  4899  0EFE  00DE               	movwf	(_Temp^(0+128)+6)
  4900  0EFF  0020               	movlb	0	; select bank0
  4901  0F00  0828               	movf	??_setTemp_Main+1,w
  4902  0F01  0021               	movlb	1	; select bank1
  4903  0F02  00DF               	movwf	((_Temp+1)^(0+128)+6)
  4904                           
  4905                           ;OverTemperature_B1.c: 83: Temp.SafeValue = 600;
  4906  0F03  3058               	movlw	88
  4907  0F04  00E6               	movwf	(_Temp^(0+128)+14)
  4908  0F05  3002               	movlw	2
  4909  0F06  00E7               	movwf	(_Temp^(0+128)+15)
  4910                           
  4911                           ;OverTemperature_B1.c: 84: Temp.DangerValue = 550;
  4912  0F07  3026               	movlw	38
  4913  0F08  00E8               	movwf	(_Temp^(0+128)+16)
  4914  0F09  3002               	movlw	2
  4915  0F0A  00E9               	movwf	(_Temp^(0+128)+17)
  4916                           
  4917                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  4918  0F0B  1CD8               	btfss	_Temp^(0+128),1
  4919  0F0C  2F22               	goto	l9950
  4920                           
  4921                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  4922  0F0D  0867               	movf	((_Temp+1)^(0+128)+14),w
  4923  0F0E  025F               	subwf	((_Temp+1)^(0+128)+6),w
  4924  0F0F  1D03               	skipz
  4925  0F10  2F13               	goto	u10985
  4926  0F11  0866               	movf	(_Temp^(0+128)+14),w
  4927  0F12  025E               	subwf	(_Temp^(0+128)+6),w
  4928  0F13                     u10985:	
  4929  0F13  1C03               	skipc
  4930  0F14  2F37               	goto	l9960
  4931                           
  4932                           ;OverTemperature_B1.c: 92: Temp.Count++;
  4933  0F15  3001               	movlw	1
  4934  0F16  0020               	movlb	0	; select bank0
  4935  0F17  00A7               	movwf	??_setTemp_Main
  4936  0F18  0827               	movf	??_setTemp_Main,w
  4937  0F19  0021               	movlb	1	; select bank1
  4938  0F1A  07DB               	addwf	(_Temp^(0+128)+3),f
  4939                           
  4940                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  4941  0F1B  3003               	movlw	3
  4942  0F1C  025B               	subwf	(_Temp^(0+128)+3),w
  4943  0F1D  1C03               	skipc
  4944  0F1E  2F38               	goto	l9962
  4945                           
  4946                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  4947  0F1F  01DB               	clrf	(_Temp^(0+128)+3)
  4948                           
  4949                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  4950  0F20  10D8               	bcf	_Temp^(0+128),1
  4951                           
  4952                           ;OverTemperature_B1.c: 96: }
  4953                           ;OverTemperature_B1.c: 97: } else {
  4954  0F21  2F38               	goto	l9962
  4955  0F22                     l9950:	
  4956                           ;OverTemperature_B1.c: 99: }
  4957                           ;OverTemperature_B1.c: 100: } else {
  4958                           
  4959                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  4960                           
  4961                           
  4962                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  4963  0F22  085F               	movf	((_Temp+1)^(0+128)+6),w
  4964  0F23  0269               	subwf	((_Temp+1)^(0+128)+16),w
  4965  0F24  1D03               	skipz
  4966  0F25  2F28               	goto	u11005
  4967  0F26  085E               	movf	(_Temp^(0+128)+6),w
  4968  0F27  0268               	subwf	(_Temp^(0+128)+16),w
  4969  0F28                     u11005:	
  4970  0F28  1C03               	skipc
  4971  0F29  2F37               	goto	l9960
  4972                           
  4973                           ;OverTemperature_B1.c: 102: Temp.Count++;
  4974  0F2A  3001               	movlw	1
  4975  0F2B  0020               	movlb	0	; select bank0
  4976  0F2C  00A7               	movwf	??_setTemp_Main
  4977  0F2D  0827               	movf	??_setTemp_Main,w
  4978  0F2E  0021               	movlb	1	; select bank1
  4979  0F2F  07DB               	addwf	(_Temp^(0+128)+3),f
  4980                           
  4981                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  4982  0F30  3003               	movlw	3
  4983  0F31  025B               	subwf	(_Temp^(0+128)+3),w
  4984  0F32  1C03               	skipc
  4985  0F33  2F38               	goto	l9962
  4986                           
  4987                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  4988  0F34  01DB               	clrf	(_Temp^(0+128)+3)
  4989                           
  4990                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  4991  0F35  14D8               	bsf	_Temp^(0+128),1
  4992                           
  4993                           ;OverTemperature_B1.c: 106: }
  4994                           ;OverTemperature_B1.c: 107: } else {
  4995  0F36  2F38               	goto	l9962
  4996  0F37                     l9960:	
  4997                           
  4998                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  4999  0F37  01DB               	clrf	(_Temp^(0+128)+3)
  5000  0F38                     l9962:	
  5001                           
  5002                           ;OverTemperature_B1.c: 109: }
  5003                           ;OverTemperature_B1.c: 110: }
  5004                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5005  0F38  085F               	movf	((_Temp+1)^(0+128)+6),w
  5006  0F39  0020               	movlb	0	; select bank0
  5007  0F3A  00A7               	movwf	??_setTemp_Main
  5008  0F3B  087B               	movf	_product,w
  5009  0F3C  3E18               	addlw	24
  5010  0F3D  0086               	movwf	6
  5011  0F3E  3002               	movlw	2	; select bank4/5
  5012  0F3F  0087               	movwf	7
  5013  0F40  0827               	movf	??_setTemp_Main,w
  5014  0F41  0081               	movwf	1
  5015                           
  5016                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5017  0F42  0021               	movlb	1	; select bank1
  5018  0F43  085E               	movf	(_Temp^(0+128)+6),w
  5019  0F44  0020               	movlb	0	; select bank0
  5020  0F45  00A7               	movwf	??_setTemp_Main
  5021  0F46  087B               	movf	_product,w
  5022  0F47  3E19               	addlw	25
  5023  0F48  0086               	movwf	6
  5024  0F49  3002               	movlw	2	; select bank4/5
  5025  0F4A  0087               	movwf	7
  5026  0F4B  0827               	movf	??_setTemp_Main,w
  5027  0F4C  0081               	movwf	1
  5028                           
  5029                           ;OverTemperature_B1.c: 115: Temp.ADH[0] = 0;
  5030  0F4D  0021               	movlb	1	; select bank1
  5031  0F4E  01E0               	clrf	(_Temp^(0+128)+8)
  5032  0F4F  01E1               	clrf	((_Temp+1)^(0+128)+8)
  5033                           
  5034                           ;OverTemperature_B1.c: 116: Temp.ADH[1] = 0;
  5035  0F50  01E2               	clrf	(_Temp^(0+128)+10)
  5036  0F51  01E3               	clrf	((_Temp+1)^(0+128)+10)
  5037                           
  5038                           ;OverTemperature_B1.c: 117: }
  5039                           ;OverTemperature_B1.c: 118: }
  5040                           ;OverTemperature_B1.c: 119: }
  5041                           ;OverTemperature_B1.c: 120: }
  5042                           ;OverTemperature_B1.c: 121: } else {
  5043  0F52  0008               	return
  5044  0F53                     l1844:	
  5045                           
  5046                           ;OverTemperature_B1.c: 122: if (myMain.PowerON == 1) {
  5047  0F53  1C20               	btfss	_myMain^(0+128),0
  5048  0F54  0008               	return
  5049                           
  5050                           ;OverTemperature_B1.c: 123: Temp.Enable = 1;
  5051  0F55  1458               	bsf	_Temp^(0+128),0
  5052  0F56  0008               	return
  5053  0F57                     __end_of_setTemp_Main:	
  5054                           
  5055                           	psect	text10
  5056  1B36                     __ptext10:	
  5057 ;; *************** function _Temp_Initialization *****************
  5058 ;; Defined at:
  5059 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;		None
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;		None
  5064 ;; Return value:  Size  Location     Type
  5065 ;;		None               void
  5066 ;; Registers used:
  5067 ;;		status,2, status,0, pclath, cstack
  5068 ;; Tracked objects:
  5069 ;;		On entry : 0/0
  5070 ;;		On exit  : 0/0
  5071 ;;		Unchanged: 0/0
  5072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5077 ;;Total ram usage:        0 bytes
  5078 ;; Hardware stack levels used:    1
  5079 ;; Hardware stack levels required when called:    6
  5080 ;; This function calls:
  5081 ;;		_setTemp_Initialization
  5082 ;; This function is called by:
  5083 ;;		_main
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           
  5088                           ;psect for function _Temp_Initialization
  5089  1B36                     _Temp_Initialization:	
  5090                           
  5091                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5092                           
  5093                           ;incstack = 0
  5094                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5095  1B36  3188  2000         	fcall	_setTemp_Initialization
  5096  1B38  0008               	return
  5097  1B39                     __end_of_Temp_Initialization:	
  5098                           
  5099                           	psect	text11
  5100  0800                     __ptext11:	
  5101 ;; *************** function _setTemp_Initialization *****************
  5102 ;; Defined at:
  5103 ;;		line 46 in file "../src/OverTemperature_B1.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;		None
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;		None
  5108 ;; Return value:  Size  Location     Type
  5109 ;;		None               void
  5110 ;; Registers used:
  5111 ;;		None
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5121 ;;Total ram usage:        0 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:    5
  5124 ;; This function calls:
  5125 ;;		Nothing
  5126 ;; This function is called by:
  5127 ;;		_Temp_Initialization
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           
  5132                           ;psect for function _setTemp_Initialization
  5133  0800                     _setTemp_Initialization:	
  5134                           
  5135                           ;incstack = 0
  5136                           ; Regs used in _setTemp_Initialization: []
  5137  0800  0008               	return
  5138  0801                     __end_of_setTemp_Initialization:	
  5139                           
  5140                           	psect	text12
  5141  1FDC                     __ptext12:	
  5142 ;; *************** function _Switch_Main *****************
  5143 ;; Defined at:
  5144 ;;		line 72 in file "../src/Switch_B1.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;		None
  5147 ;; Auto vars:     Size  Location     Type
  5148 ;;  error           1   78[BANK0 ] unsigned char 
  5149 ;; Return value:  Size  Location     Type
  5150 ;;		None               void
  5151 ;; Registers used:
  5152 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5159 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5160 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5161 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5162 ;;Total ram usage:        2 bytes
  5163 ;; Hardware stack levels used:    1
  5164 ;; Hardware stack levels required when called:   12
  5165 ;; This function calls:
  5166 ;;		_TouchPower
  5167 ;;		_getMain_All_Error_Status
  5168 ;;		_setMain_Exception
  5169 ;;		_setSw_Main
  5170 ;; This function is called by:
  5171 ;;		_main
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           
  5176                           ;psect for function _Switch_Main
  5177  1FDC                     _Switch_Main:	
  5178                           
  5179                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5180                           
  5181                           ;incstack = 0
  5182                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5183  1FDC  3000               	movlw	0
  5184  1FDD  3191  21B8  319F   	fcall	_getMain_All_Error_Status
  5185  1FE0  0020               	movlb	0	; select bank0
  5186  1FE1  00ED               	movwf	??_Switch_Main
  5187  1FE2  086D               	movf	??_Switch_Main,w
  5188  1FE3  00EE               	movwf	Switch_Main@error
  5189                           
  5190                           ;Switch_B1.c: 74: if (error != 0) {
  5191  1FE4  086E               	movf	Switch_Main@error,w
  5192  1FE5  1903               	btfsc	3,2
  5193  1FE6  2FEC               	goto	l2610
  5194                           
  5195                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5196  1FE7  0021               	movlb	1	; select bank1
  5197  1FE8  1853               	btfsc	_SwDetect^(0+128),0
  5198  1FE9  2FF5               	goto	l10598
  5199                           
  5200                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5201  1FEA  1453               	bsf	_SwDetect^(0+128),0
  5202  1FEB  2FF0               	goto	L2
  5203  1FEC                     l2610:	
  5204                           ;Switch_B1.c: 80: }
  5205                           ;Switch_B1.c: 81: } else {
  5206                           
  5207                           ;Switch_B1.c: 78: setMain_Exception(error);
  5208                           
  5209                           
  5210                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5211  1FEC  0021               	movlb	1	; select bank1
  5212  1FED  1C53               	btfss	_SwDetect^(0+128),0
  5213  1FEE  2FF5               	goto	l10598
  5214                           
  5215                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5216  1FEF  1053               	bcf	_SwDetect^(0+128),0
  5217  1FF0                     L2:	
  5218                           
  5219                           ;Switch_B1.c: 85: setMain_Exception(error);
  5220  1FF0  0020               	movlb	0	; select bank0
  5221  1FF1  086E               	movf	Switch_Main@error,w
  5222  1FF2  318A  2208  319F   	fcall	_setMain_Exception
  5223  1FF5                     l10598:	
  5224                           
  5225                           ;Switch_B1.c: 87: }
  5226                           ;Switch_B1.c: 88: }
  5227                           ;Switch_B1.c: 91: setSw_Main(1);
  5228  1FF5  3001               	movlw	1
  5229  1FF6  3181  21CE  319F   	fcall	_setSw_Main
  5230                           
  5231                           ;Switch_B1.c: 95: setSw_Main(2);
  5232  1FF9  3002               	movlw	2
  5233  1FFA  3181  21CE  319F   	fcall	_setSw_Main
  5234                           
  5235                           ;Switch_B1.c: 103: TouchPower();
  5236  1FFD  319D  25B8         	fcall	_TouchPower
  5237  1FFF  0008               	return
  5238  2000                     __end_of_Switch_Main:	
  5239                           
  5240                           	psect	text13
  5241  01CE                     __ptext13:	
  5242 ;; *************** function _setSw_Main *****************
  5243 ;; Defined at:
  5244 ;;		line 137 in file "../src/Switch_B1.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;  sw              1    wreg     unsigned char 
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;  sw              1   72[BANK0 ] unsigned char 
  5249 ;; Return value:  Size  Location     Type
  5250 ;;		None               void
  5251 ;; Registers used:
  5252 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5260 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5261 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5262 ;;Total ram usage:        3 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; Hardware stack levels required when called:   10
  5265 ;; This function calls:
  5266 ;;		_SwPointSelect
  5267 ;;		_getSw_KeyStatus
  5268 ;;		_setBuz
  5269 ;;		_setDimmerLights_AdjControl
  5270 ;;		_setDimmerLights_SwOff
  5271 ;;		_setDimmerLights_SwOn
  5272 ;;		_setRF_Learn
  5273 ;; This function is called by:
  5274 ;;		_Switch_Main
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           
  5279                           ;psect for function _setSw_Main
  5280  01CE                     _setSw_Main:	
  5281                           
  5282                           ;incstack = 0
  5283                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5284                           ;setSw_Main@sw stored from wreg
  5285  01CE  0020               	movlb	0	; select bank0
  5286  01CF  00E8               	movwf	setSw_Main@sw
  5287                           
  5288                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5289  01D0  0868               	movf	setSw_Main@sw,w
  5290  01D1  319D  2551  3181   	fcall	_SwPointSelect
  5291                           
  5292                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5293  01D4  0879               	movf	_Sw,w
  5294  01D5  0086               	movwf	6
  5295  01D6  3001               	movlw	1	; select bank2/3
  5296  01D7  0087               	movwf	7
  5297  01D8  1C01               	btfss	1,0
  5298  01D9  2B34               	goto	l2620
  5299                           
  5300                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5301  01DA  0021               	movlb	1	; select bank1
  5302  01DB  1853               	btfsc	_SwDetect^(0+128),0
  5303  01DC  29F8               	goto	l10102
  5304                           
  5305                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5306  01DD  0A79               	incf	_Sw,w
  5307  01DE  0086               	movwf	6
  5308  01DF  3001               	movlw	1	; select bank2/3
  5309  01E0  0087               	movwf	7
  5310  01E1  1081               	bcf	1,1
  5311                           
  5312                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5313  01E2  0020               	movlb	0	; select bank0
  5314  01E3  0868               	movf	setSw_Main@sw,w
  5315  01E4  319E  26D6  3181   	fcall	_getSw_KeyStatus
  5316  01E7  3A01               	xorlw	1
  5317  01E8  3000               	movlw	0
  5318  01E9  1903               	skipnz
  5319  01EA  3001               	movlw	1
  5320  01EB  0020               	movlb	0	; select bank0
  5321  01EC  00E6               	movwf	??_setSw_Main
  5322  01ED  0879               	movf	_Sw,w
  5323  01EE  0086               	movwf	6
  5324  01EF  3001               	movlw	1	; select bank2/3
  5325  01F0  0087               	movwf	7
  5326  01F1  0DE6               	rlf	??_setSw_Main,f
  5327  01F2  0801               	movf	1,w
  5328  01F3  0666               	xorwf	??_setSw_Main,w
  5329  01F4  39FD               	andlw	-3
  5330  01F5  0666               	xorwf	??_setSw_Main,w
  5331  01F6  0081               	movwf	1
  5332                           
  5333                           ;Switch_B1.c: 143: } else {
  5334  01F7  2A0D               	goto	l2622
  5335  01F8                     l10102:	
  5336                           
  5337                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5338  01F8  0A79               	incf	_Sw,w
  5339  01F9  0086               	movwf	6
  5340  01FA  3001               	movlw	1	; select bank2/3
  5341  01FB  0087               	movwf	7
  5342  01FC  1881               	btfsc	1,1
  5343  01FD  2A0D               	goto	l2622
  5344                           
  5345                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5346  01FE  0A79               	incf	_Sw,w
  5347  01FF  0086               	movwf	6
  5348  0200  3001               	movlw	1	; select bank2/3
  5349  0201  0087               	movwf	7
  5350  0202  1481               	bsf	1,1
  5351                           
  5352                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5353  0203  0879               	movf	_Sw,w
  5354  0204  0086               	movwf	6
  5355  0205  3001               	movlw	1	; select bank2/3
  5356  0206  0087               	movwf	7
  5357  0207  1081               	bcf	1,1
  5358                           
  5359                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5360  0208  0879               	movf	_Sw,w
  5361  0209  0086               	movwf	6
  5362  020A  3001               	movlw	1	; select bank2/3
  5363  020B  0087               	movwf	7
  5364  020C  1501               	bsf	1,2
  5365  020D                     l2622:	
  5366                           
  5367                           ;Switch_B1.c: 148: }
  5368                           ;Switch_B1.c: 149: }
  5369                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5370  020D  0879               	movf	_Sw,w
  5371  020E  0086               	movwf	6
  5372  020F  3001               	movlw	1	; select bank2/3
  5373  0210  0087               	movwf	7
  5374  0211  1C81               	btfss	1,1
  5375  0212  2ADD               	goto	l10152
  5376                           
  5377                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5378  0213  0879               	movf	_Sw,w
  5379  0214  0086               	movwf	6
  5380  0215  3001               	movlw	1	; select bank2/3
  5381  0216  0087               	movwf	7
  5382  0217  1901               	btfsc	1,2
  5383  0218  2A3B               	goto	l10118
  5384                           
  5385                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5386  0219  3001               	movlw	1
  5387  021A  0020               	movlb	0	; select bank0
  5388  021B  00E6               	movwf	??_setSw_Main
  5389  021C  0879               	movf	_Sw,w
  5390  021D  3E02               	addlw	2
  5391  021E  0086               	movwf	6
  5392  021F  3001               	movlw	1	; select bank2/3
  5393  0220  0087               	movwf	7
  5394  0221  0866               	movf	??_setSw_Main,w
  5395  0222  0781               	addwf	1,f
  5396                           
  5397                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5398  0223  0879               	movf	_Sw,w
  5399  0224  3E02               	addlw	2
  5400  0225  0086               	movwf	6
  5401  0226  3001               	movlw	1	; select bank2/3
  5402  0227  0087               	movwf	7
  5403  0228  3005               	movlw	5
  5404  0229  0201               	subwf	1,w
  5405  022A  1C03               	skipc
  5406  022B  0008               	return
  5407                           
  5408                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5409  022C  0879               	movf	_Sw,w
  5410  022D  3E02               	addlw	2
  5411  022E  0086               	movwf	6
  5412  022F  3001               	movlw	1	; select bank2/3
  5413  0230  0087               	movwf	7
  5414  0231  0181               	clrf	1
  5415                           
  5416                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5417  0232  0879               	movf	_Sw,w
  5418  0233  0086               	movwf	6
  5419  0234  3001               	movlw	1	; select bank2/3
  5420  0235  0087               	movwf	7
  5421  0236  1501               	bsf	1,2
  5422                           
  5423                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5424  0237  0868               	movf	setSw_Main@sw,w
  5425  0238  3194  2470         	fcall	_setDimmerLights_SwOn
  5426                           
  5427                           ;Switch_B1.c: 162: }
  5428                           ;Switch_B1.c: 163: } else {
  5429  023A  0008               	return
  5430  023B                     l10118:	
  5431                           
  5432                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5433  023B  0879               	movf	_Sw,w
  5434  023C  0086               	movwf	6
  5435  023D  3001               	movlw	1	; select bank2/3
  5436  023E  0087               	movwf	7
  5437  023F  1981               	btfsc	1,3
  5438  0240  2A6D               	goto	l10128
  5439                           
  5440                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5441  0241  0879               	movf	_Sw,w
  5442  0242  3E03               	addlw	3
  5443  0243  0086               	movwf	6
  5444  0244  3001               	movlw	1	; select bank2/3
  5445  0245  0087               	movwf	7
  5446  0246  3001               	movlw	1
  5447  0247  0781               	addwf	1,f
  5448  0248  3141               	addfsr 1,1
  5449  0249  1803               	skipnc
  5450  024A  0A81               	incf	1,f
  5451                           
  5452                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5453  024B  0879               	movf	_Sw,w
  5454  024C  3E03               	addlw	3
  5455  024D  0086               	movwf	6
  5456  024E  3001               	movlw	1	; select bank2/3
  5457  024F  0087               	movwf	7
  5458  0250  3F40               	moviw [0]fsr1
  5459  0251  0020               	movlb	0	; select bank0
  5460  0252  00E6               	movwf	??_setSw_Main
  5461  0253  3F41               	moviw [1]fsr1
  5462  0254  00E7               	movwf	??_setSw_Main+1
  5463  0255  3000               	movlw	0
  5464  0256  0267               	subwf	??_setSw_Main+1,w
  5465  0257  3096               	movlw	150
  5466  0258  1903               	skipnz
  5467  0259  0266               	subwf	??_setSw_Main,w
  5468  025A  1C03               	skipc
  5469  025B  0008               	return
  5470                           
  5471                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5472  025C  0879               	movf	_Sw,w
  5473  025D  3E03               	addlw	3
  5474  025E  0086               	movwf	6
  5475  025F  3001               	movlw	1	; select bank2/3
  5476  0260  0087               	movwf	7
  5477  0261  3000               	movlw	0
  5478  0262  3FC0               	movwi [0]fsr1
  5479  0263  3FC1               	movwi [1]fsr1
  5480                           
  5481                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5482  0264  0879               	movf	_Sw,w
  5483  0265  0086               	movwf	6
  5484  0266  3001               	movlw	1	; select bank2/3
  5485  0267  0087               	movwf	7
  5486  0268  1581               	bsf	1,3
  5487                           
  5488                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5489  0269  0868               	movf	setSw_Main@sw,w
  5490  026A  3192  2254         	fcall	_setDimmerLights_AdjControl
  5491                           
  5492                           ;Switch_B1.c: 174: }
  5493                           ;Switch_B1.c: 175: } else {
  5494  026C  0008               	return
  5495  026D                     l10128:	
  5496                           
  5497                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5498  026D  0879               	movf	_Sw,w
  5499  026E  0086               	movwf	6
  5500  026F  3001               	movlw	1	; select bank2/3
  5501  0270  0087               	movwf	7
  5502  0271  1A01               	btfsc	1,4
  5503  0272  2AAB               	goto	l10142
  5504                           
  5505                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5506  0273  0879               	movf	_Sw,w
  5507  0274  3E05               	addlw	5
  5508  0275  0086               	movwf	6
  5509  0276  3001               	movlw	1	; select bank2/3
  5510  0277  0087               	movwf	7
  5511  0278  3001               	movlw	1
  5512  0279  0781               	addwf	1,f
  5513  027A  3141               	addfsr 1,1
  5514  027B  1803               	skipnc
  5515  027C  0A81               	incf	1,f
  5516                           
  5517                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5518  027D  0879               	movf	_Sw,w
  5519  027E  3E05               	addlw	5
  5520  027F  0086               	movwf	6
  5521  0280  3001               	movlw	1	; select bank2/3
  5522  0281  0087               	movwf	7
  5523  0282  3F40               	moviw [0]fsr1
  5524  0283  0020               	movlb	0	; select bank0
  5525  0284  00E6               	movwf	??_setSw_Main
  5526  0285  3F41               	moviw [1]fsr1
  5527  0286  00E7               	movwf	??_setSw_Main+1
  5528  0287  3000               	movlw	0
  5529  0288  0267               	subwf	??_setSw_Main+1,w
  5530  0289  3096               	movlw	150
  5531  028A  1903               	skipnz
  5532  028B  0266               	subwf	??_setSw_Main,w
  5533  028C  1C03               	skipc
  5534  028D  0008               	return
  5535                           
  5536                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5537  028E  0879               	movf	_Sw,w
  5538  028F  3E05               	addlw	5
  5539  0290  0086               	movwf	6
  5540  0291  3001               	movlw	1	; select bank2/3
  5541  0292  0087               	movwf	7
  5542  0293  3000               	movlw	0
  5543  0294  3FC0               	movwi [0]fsr1
  5544  0295  3FC1               	movwi [1]fsr1
  5545                           
  5546                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5547  0296  0879               	movf	_Sw,w
  5548  0297  0086               	movwf	6
  5549  0298  3001               	movlw	1	; select bank2/3
  5550  0299  0087               	movwf	7
  5551  029A  1601               	bsf	1,4
  5552                           
  5553                           ;Switch_B1.c: 183: setRF_Learn(1);
  5554  029B  3001               	movlw	1
  5555  029C  319D  2565  3181   	fcall	_setRF_Learn
  5556                           
  5557                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5558  029F  0021               	movlb	1	; select bank1
  5559  02A0  1EA0               	btfss	_myMain^(0+128),5
  5560  02A1  0008               	return
  5561                           
  5562                           ;Switch_B1.c: 186: setBuz(2, 100);
  5563  02A2  3064               	movlw	100
  5564  02A3  0020               	movlb	0	; select bank0
  5565  02A4  00A9               	movwf	setBuz@time
  5566  02A5  3000               	movlw	0
  5567  02A6  00AA               	movwf	setBuz@time+1
  5568  02A7  3002               	movlw	2
  5569  02A8  3197  274D         	fcall	_setBuz
  5570                           
  5571                           ;Switch_B1.c: 187: }
  5572                           ;Switch_B1.c: 189: }
  5573                           ;Switch_B1.c: 190: } else {
  5574  02AA  0008               	return
  5575  02AB                     l10142:	
  5576                           
  5577                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5578  02AB  0879               	movf	_Sw,w
  5579  02AC  0086               	movwf	6
  5580  02AD  3001               	movlw	1	; select bank2/3
  5581  02AE  0087               	movwf	7
  5582  02AF  1A81               	btfsc	1,5
  5583  02B0  0008               	return
  5584                           
  5585                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5586  02B1  0879               	movf	_Sw,w
  5587  02B2  3E07               	addlw	7
  5588  02B3  0086               	movwf	6
  5589  02B4  3001               	movlw	1	; select bank2/3
  5590  02B5  0087               	movwf	7
  5591  02B6  3001               	movlw	1
  5592  02B7  0781               	addwf	1,f
  5593  02B8  3141               	addfsr 1,1
  5594  02B9  1803               	skipnc
  5595  02BA  0A81               	incf	1,f
  5596                           
  5597                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5598  02BB  0879               	movf	_Sw,w
  5599  02BC  3E07               	addlw	7
  5600  02BD  0086               	movwf	6
  5601  02BE  3001               	movlw	1	; select bank2/3
  5602  02BF  0087               	movwf	7
  5603  02C0  3F40               	moviw [0]fsr1
  5604  02C1  0020               	movlb	0	; select bank0
  5605  02C2  00E6               	movwf	??_setSw_Main
  5606  02C3  3F41               	moviw [1]fsr1
  5607  02C4  00E7               	movwf	??_setSw_Main+1
  5608  02C5  3001               	movlw	1
  5609  02C6  0267               	subwf	??_setSw_Main+1,w
  5610  02C7  302C               	movlw	44
  5611  02C8  1903               	skipnz
  5612  02C9  0266               	subwf	??_setSw_Main,w
  5613  02CA  1C03               	skipc
  5614  02CB  0008               	return
  5615                           
  5616                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5617  02CC  0879               	movf	_Sw,w
  5618  02CD  3E07               	addlw	7
  5619  02CE  0086               	movwf	6
  5620  02CF  3001               	movlw	1	; select bank2/3
  5621  02D0  0087               	movwf	7
  5622  02D1  3000               	movlw	0
  5623  02D2  3FC0               	movwi [0]fsr1
  5624  02D3  3FC1               	movwi [1]fsr1
  5625                           
  5626                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5627  02D4  0879               	movf	_Sw,w
  5628  02D5  0086               	movwf	6
  5629  02D6  3001               	movlw	1	; select bank2/3
  5630  02D7  0087               	movwf	7
  5631  02D8  1681               	bsf	1,5
  5632                           
  5633                           ;Switch_B1.c: 198: setRF_Learn(0);
  5634  02D9  3000               	movlw	0
  5635  02DA  319D  2565         	fcall	_setRF_Learn
  5636                           
  5637                           ;Switch_B1.c: 201: }
  5638                           ;Switch_B1.c: 202: }
  5639                           ;Switch_B1.c: 203: }
  5640                           ;Switch_B1.c: 204: }
  5641                           ;Switch_B1.c: 205: }
  5642                           ;Switch_B1.c: 206: } else {
  5643  02DC  0008               	return
  5644  02DD                     l10152:	
  5645                           
  5646                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5647  02DD  0879               	movf	_Sw,w
  5648  02DE  0086               	movwf	6
  5649  02DF  3001               	movlw	1	; select bank2/3
  5650  02E0  0087               	movwf	7
  5651  02E1  1D01               	btfss	1,2
  5652  02E2  0008               	return
  5653                           
  5654                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5655  02E3  3001               	movlw	1
  5656  02E4  0020               	movlb	0	; select bank0
  5657  02E5  00E6               	movwf	??_setSw_Main
  5658  02E6  0879               	movf	_Sw,w
  5659  02E7  3E02               	addlw	2
  5660  02E8  0086               	movwf	6
  5661  02E9  3001               	movlw	1	; select bank2/3
  5662  02EA  0087               	movwf	7
  5663  02EB  0866               	movf	??_setSw_Main,w
  5664  02EC  0781               	addwf	1,f
  5665                           
  5666                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5667  02ED  0879               	movf	_Sw,w
  5668  02EE  3E02               	addlw	2
  5669  02EF  0086               	movwf	6
  5670  02F0  3001               	movlw	1	; select bank2/3
  5671  02F1  0087               	movwf	7
  5672  02F2  3005               	movlw	5
  5673  02F3  0201               	subwf	1,w
  5674  02F4  1C03               	skipc
  5675  02F5  0008               	return
  5676                           
  5677                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5678  02F6  0879               	movf	_Sw,w
  5679  02F7  3E02               	addlw	2
  5680  02F8  0086               	movwf	6
  5681  02F9  3001               	movlw	1	; select bank2/3
  5682  02FA  0087               	movwf	7
  5683  02FB  0181               	clrf	1
  5684                           
  5685                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5686  02FC  0879               	movf	_Sw,w
  5687  02FD  0086               	movwf	6
  5688  02FE  3001               	movlw	1	; select bank2/3
  5689  02FF  0087               	movwf	7
  5690  0300  1101               	bcf	1,2
  5691                           
  5692                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5693  0301  0879               	movf	_Sw,w
  5694  0302  3E03               	addlw	3
  5695  0303  0086               	movwf	6
  5696  0304  3001               	movlw	1	; select bank2/3
  5697  0305  0087               	movwf	7
  5698  0306  3000               	movlw	0
  5699  0307  3FC0               	movwi [0]fsr1
  5700  0308  3FC1               	movwi [1]fsr1
  5701                           
  5702                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5703  0309  0879               	movf	_Sw,w
  5704  030A  0086               	movwf	6
  5705  030B  3001               	movlw	1	; select bank2/3
  5706  030C  0087               	movwf	7
  5707  030D  1181               	bcf	1,3
  5708                           
  5709                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5710  030E  0879               	movf	_Sw,w
  5711  030F  3E05               	addlw	5
  5712  0310  0086               	movwf	6
  5713  0311  3001               	movlw	1	; select bank2/3
  5714  0312  0087               	movwf	7
  5715  0313  3000               	movlw	0
  5716  0314  3FC0               	movwi [0]fsr1
  5717  0315  3FC1               	movwi [1]fsr1
  5718                           
  5719                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5720  0316  0879               	movf	_Sw,w
  5721  0317  0086               	movwf	6
  5722  0318  3001               	movlw	1	; select bank2/3
  5723  0319  0087               	movwf	7
  5724  031A  1201               	bcf	1,4
  5725                           
  5726                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5727  031B  0879               	movf	_Sw,w
  5728  031C  3E07               	addlw	7
  5729  031D  0086               	movwf	6
  5730  031E  3001               	movlw	1	; select bank2/3
  5731  031F  0087               	movwf	7
  5732  0320  3000               	movlw	0
  5733  0321  3FC0               	movwi [0]fsr1
  5734  0322  3FC1               	movwi [1]fsr1
  5735                           
  5736                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5737  0323  0879               	movf	_Sw,w
  5738  0324  0086               	movwf	6
  5739  0325  3001               	movlw	1	; select bank2/3
  5740  0326  0087               	movwf	7
  5741  0327  1281               	bcf	1,5
  5742                           
  5743                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5744  0328  0021               	movlb	1	; select bank1
  5745  0329  1853               	btfsc	_SwDetect^(0+128),0
  5746  032A  2B30               	goto	l10178
  5747                           
  5748                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5749  032B  0020               	movlb	0	; select bank0
  5750  032C  0868               	movf	setSw_Main@sw,w
  5751  032D  3188  2086  3181   	fcall	_setDimmerLights_SwOff
  5752  0330                     l10178:	
  5753                           
  5754                           ;Switch_B1.c: 221: }
  5755                           ;Switch_B1.c: 224: setRF_Learn(0);
  5756  0330  3000               	movlw	0
  5757  0331  319D  2565         	fcall	_setRF_Learn
  5758                           
  5759                           ;Switch_B1.c: 226: }
  5760                           ;Switch_B1.c: 227: }
  5761                           ;Switch_B1.c: 228: }
  5762                           ;Switch_B1.c: 229: } else {
  5763  0333  0008               	return
  5764  0334                     l2620:	
  5765                           
  5766                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5767  0334  0021               	movlb	1	; select bank1
  5768  0335  1C20               	btfss	_myMain^(0+128),0
  5769  0336  0008               	return
  5770                           
  5771                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5772  0337  0879               	movf	_Sw,w
  5773  0338  0086               	movwf	6
  5774  0339  3001               	movlw	1	; select bank2/3
  5775  033A  0087               	movwf	7
  5776  033B  1401               	bsf	1,0
  5777  033C  0008               	return
  5778  033D                     __end_of_setSw_Main:	
  5779                           
  5780                           	psect	text14
  5781  1D65                     __ptext14:	
  5782 ;; *************** function _setRF_Learn *****************
  5783 ;; Defined at:
  5784 ;;		line 23 in file "../src/RF_Control_B1.c"
  5785 ;; Parameters:    Size  Location     Type
  5786 ;;  command         1    wreg     unsigned char 
  5787 ;; Auto vars:     Size  Location     Type
  5788 ;;  command         1    1[BANK0 ] unsigned char 
  5789 ;; Return value:  Size  Location     Type
  5790 ;;		None               void
  5791 ;; Registers used:
  5792 ;;		wreg, status,2, status,0
  5793 ;; Tracked objects:
  5794 ;;		On entry : 0/0
  5795 ;;		On exit  : 0/0
  5796 ;;		Unchanged: 0/0
  5797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5799 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5800 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5801 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5802 ;;Total ram usage:        2 bytes
  5803 ;; Hardware stack levels used:    1
  5804 ;; Hardware stack levels required when called:    5
  5805 ;; This function calls:
  5806 ;;		Nothing
  5807 ;; This function is called by:
  5808 ;;		_setSw_Main
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           
  5813                           ;psect for function _setRF_Learn
  5814  1D65                     _setRF_Learn:	
  5815                           
  5816                           ;incstack = 0
  5817                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5818                           ;setRF_Learn@command stored from wreg
  5819  1D65  0020               	movlb	0	; select bank0
  5820  1D66  00A1               	movwf	setRF_Learn@command
  5821                           
  5822                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5823  1D67  0821               	movf	setRF_Learn@command,w
  5824  1D68  3A01               	xorlw	1
  5825  1D69  3000               	movlw	0
  5826  1D6A  1903               	skipnz
  5827  1D6B  3001               	movlw	1
  5828  1D6C  00A0               	movwf	??_setRF_Learn
  5829  1D6D  0EA0               	swapf	??_setRF_Learn,f
  5830  1D6E  0DA0               	rlf	??_setRF_Learn,f
  5831  1D6F  0DA0               	rlf	??_setRF_Learn,f
  5832  1D70  0021               	movlb	1	; select bank1
  5833  1D71  083C               	movf	_RF1^(0+128),w
  5834  1D72  0020               	movlb	0	; select bank0
  5835  1D73  0620               	xorwf	??_setRF_Learn,w
  5836  1D74  39BF               	andlw	-65
  5837  1D75  0620               	xorwf	??_setRF_Learn,w
  5838  1D76  0021               	movlb	1	; select bank1
  5839  1D77  00BC               	movwf	_RF1^(0+128)
  5840  1D78  0008               	return
  5841  1D79                     __end_of_setRF_Learn:	
  5842                           
  5843                           	psect	text15
  5844  1254                     __ptext15:	
  5845 ;; *************** function _setDimmerLights_AdjControl *****************
  5846 ;; Defined at:
  5847 ;;		line 561 in file "../src/Dimmer_B1.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;  sw              1    wreg     unsigned char 
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;  sw              1    8[BANK0 ] unsigned char 
  5852 ;;  idle            1    6[BANK0 ] unsigned char 
  5853 ;; Return value:  Size  Location     Type
  5854 ;;		None               void
  5855 ;; Registers used:
  5856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5857 ;; Tracked objects:
  5858 ;;		On entry : 0/0
  5859 ;;		On exit  : 0/0
  5860 ;;		Unchanged: 0/0
  5861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5863 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5864 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5865 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5866 ;;Total ram usage:        4 bytes
  5867 ;; Hardware stack levels used:    1
  5868 ;; Hardware stack levels required when called:    7
  5869 ;; This function calls:
  5870 ;;		_DimmerLightsPointSelect
  5871 ;;		_getAll_DimmerLights_AdjGO
  5872 ;;		_setDimmerLights_TriggerAdj
  5873 ;; This function is called by:
  5874 ;;		_setSw_Main
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           
  5879                           ;psect for function _setDimmerLights_AdjControl
  5880  1254                     _setDimmerLights_AdjControl:	
  5881                           
  5882                           ;incstack = 0
  5883                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5884                           ;setDimmerLights_AdjControl@sw stored from wreg
  5885  1254  0020               	movlb	0	; select bank0
  5886  1255  00A8               	movwf	setDimmerLights_AdjControl@sw
  5887                           
  5888                           ;Dimmer_B1.c: 562: DimmerLightsPointSelect(sw);
  5889  1256  0828               	movf	setDimmerLights_AdjControl@sw,w
  5890  1257  319C  24DD  3192   	fcall	_DimmerLightsPointSelect
  5891                           
  5892                           ;Dimmer_B1.c: 563: char idle = 0;
  5893  125A  0020               	movlb	0	; select bank0
  5894  125B  01A6               	clrf	setDimmerLights_AdjControl@idle
  5895                           
  5896                           ;Dimmer_B1.c: 565: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  5897  125C  01A7               	clrf	_setDimmerLights_AdjControl$2578
  5898  125D  319C  2450  3192   	fcall	_getAll_DimmerLights_AdjGO
  5899  1260  3A01               	xorlw	1
  5900  1261  1D03               	skipz
  5901  1262  2A69               	goto	l9368
  5902  1263  0021               	movlb	1	; select bank1
  5903  1264  1CC8               	btfss	_Dimmer^(0+128),1
  5904  1265  2A69               	goto	l9368
  5905  1266  0020               	movlb	0	; select bank0
  5906  1267  01A7               	clrf	_setDimmerLights_AdjControl$2578
  5907  1268  0AA7               	incf	_setDimmerLights_AdjControl$2578,f
  5908  1269                     l9368:	
  5909  1269  0020               	movlb	0	; select bank0
  5910  126A  0827               	movf	_setDimmerLights_AdjControl$2578,w
  5911  126B  00A5               	movwf	??_setDimmerLights_AdjControl
  5912  126C  0825               	movf	??_setDimmerLights_AdjControl,w
  5913  126D  00A6               	movwf	setDimmerLights_AdjControl@idle
  5914                           
  5915                           ;Dimmer_B1.c: 567: if (idle == 0) {
  5916  126E  08A6               	movf	setDimmerLights_AdjControl@idle,f
  5917  126F  1D03               	skipz
  5918  1270  0008               	return
  5919                           
  5920                           ;Dimmer_B1.c: 568: if (DimmerLights->SwFlag == 1) {
  5921  1271  0877               	movf	_DimmerLights,w
  5922  1272  3E09               	addlw	9
  5923  1273  0086               	movwf	6
  5924  1274  3001               	movlw	1	; select bank2/3
  5925  1275  0087               	movwf	7
  5926  1276  1F01               	btfss	1,6
  5927  1277  0008               	return
  5928                           
  5929                           ;Dimmer_B1.c: 569: DimmerLights->SwAdj = 1;
  5930  1278  0877               	movf	_DimmerLights,w
  5931  1279  3E09               	addlw	9
  5932  127A  0086               	movwf	6
  5933  127B  3001               	movlw	1	; select bank2/3
  5934  127C  0087               	movwf	7
  5935  127D  1781               	bsf	1,7
  5936                           
  5937                           ;Dimmer_B1.c: 570: DimmerLights->Status = 1;
  5938  127E  0877               	movf	_DimmerLights,w
  5939  127F  0086               	movwf	6
  5940  1280  3001               	movlw	1	; select bank2/3
  5941  1281  0087               	movwf	7
  5942  1282  1681               	bsf	1,5
  5943                           
  5944                           ;Dimmer_B1.c: 571: setDimmerLights_TriggerAdj(sw, 1);
  5945  1283  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5946  1284  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5947  1285  0828               	movf	setDimmerLights_AdjControl@sw,w
  5948  1286  319E  26F5         	fcall	_setDimmerLights_TriggerAdj
  5949  1288  0008               	return
  5950  1289                     __end_of_setDimmerLights_AdjControl:	
  5951                           
  5952                           	psect	text16
  5953  1ED6                     __ptext16:	
  5954 ;; *************** function _getSw_KeyStatus *****************
  5955 ;; Defined at:
  5956 ;;		line 237 in file "../src/Switch_B1.c"
  5957 ;; Parameters:    Size  Location     Type
  5958 ;;  sw              1    wreg     unsigned char 
  5959 ;; Auto vars:     Size  Location     Type
  5960 ;;  sw              1    4[BANK0 ] unsigned char 
  5961 ;;  status          1    3[BANK0 ] unsigned char 
  5962 ;; Return value:  Size  Location     Type
  5963 ;;                  1    wreg      unsigned char 
  5964 ;; Registers used:
  5965 ;;		wreg, status,2
  5966 ;; Tracked objects:
  5967 ;;		On entry : 0/0
  5968 ;;		On exit  : 0/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5972 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5973 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5974 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5975 ;;Total ram usage:        5 bytes
  5976 ;; Hardware stack levels used:    1
  5977 ;; Hardware stack levels required when called:    5
  5978 ;; This function calls:
  5979 ;;		Nothing
  5980 ;; This function is called by:
  5981 ;;		_setSw_Main
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           
  5986                           ;psect for function _getSw_KeyStatus
  5987  1ED6                     _getSw_KeyStatus:	
  5988                           
  5989                           ;incstack = 0
  5990                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  5991                           ;getSw_KeyStatus@sw stored from wreg
  5992  1ED6  0020               	movlb	0	; select bank0
  5993  1ED7  00A4               	movwf	getSw_KeyStatus@sw
  5994                           
  5995                           ;Switch_B1.c: 238: char status = 0;
  5996  1ED8  01A3               	clrf	getSw_KeyStatus@status
  5997                           
  5998                           ;Switch_B1.c: 250: if (sw == 1) {
  5999  1ED9  0824               	movf	getSw_KeyStatus@sw,w
  6000  1EDA  3A01               	xorlw	1
  6001  1EDB  1D03               	skipz
  6002  1EDC  2EE5               	goto	l9578
  6003                           
  6004                           ;Switch_B1.c: 251: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6005  1EDD  01A1               	clrf	_getSw_KeyStatus$6776
  6006  1EDE  0AA1               	incf	_getSw_KeyStatus$6776,f
  6007  1EDF  1F0C               	btfss	12,6	;volatile
  6008  1EE0  1A0C               	btfsc	12,4	;volatile
  6009  1EE1  2EE3               	goto	l9576
  6010  1EE2  01A1               	clrf	_getSw_KeyStatus$6776
  6011  1EE3                     l9576:	
  6012  1EE3  0821               	movf	_getSw_KeyStatus$6776,w
  6013  1EE4  2EF0               	goto	L3
  6014  1EE5                     l9578:	
  6015                           ;Switch_B1.c: 252: } else if (sw == 2) {
  6016                           
  6017  1EE5  0824               	movf	getSw_KeyStatus@sw,w
  6018  1EE6  3A02               	xorlw	2
  6019  1EE7  1D03               	skipz
  6020  1EE8  2EF3               	goto	l9588
  6021                           
  6022                           ;Switch_B1.c: 253: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6023  1EE9  01A2               	clrf	_getSw_KeyStatus$6777
  6024  1EEA  0AA2               	incf	_getSw_KeyStatus$6777,f
  6025  1EEB  1C0C               	btfss	12,0	;volatile
  6026  1EEC  188D               	btfsc	13,1	;volatile
  6027  1EED  2EEF               	goto	l9586
  6028  1EEE  01A2               	clrf	_getSw_KeyStatus$6777
  6029  1EEF                     l9586:	
  6030  1EEF  0822               	movf	_getSw_KeyStatus$6777,w
  6031  1EF0                     L3:	
  6032  1EF0  00A0               	movwf	??_getSw_KeyStatus
  6033  1EF1  0820               	movf	??_getSw_KeyStatus,w
  6034  1EF2  00A3               	movwf	getSw_KeyStatus@status
  6035  1EF3                     l9588:	
  6036                           
  6037                           ;Switch_B1.c: 254: }
  6038                           ;Switch_B1.c: 261: return status;
  6039  1EF3  0823               	movf	getSw_KeyStatus@status,w
  6040  1EF4  0008               	return
  6041  1EF5                     __end_of_getSw_KeyStatus:	
  6042                           
  6043                           	psect	text17
  6044  1D51                     __ptext17:	
  6045 ;; *************** function _SwPointSelect *****************
  6046 ;; Defined at:
  6047 ;;		line 25 in file "../src/Switch_B1.c"
  6048 ;; Parameters:    Size  Location     Type
  6049 ;;  sw              1    wreg     unsigned char 
  6050 ;; Auto vars:     Size  Location     Type
  6051 ;;  sw              1    1[BANK0 ] unsigned char 
  6052 ;; Return value:  Size  Location     Type
  6053 ;;		None               void
  6054 ;; Registers used:
  6055 ;;		wreg
  6056 ;; Tracked objects:
  6057 ;;		On entry : 0/0
  6058 ;;		On exit  : 0/0
  6059 ;;		Unchanged: 0/0
  6060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6062 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6063 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6064 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6065 ;;Total ram usage:        2 bytes
  6066 ;; Hardware stack levels used:    1
  6067 ;; Hardware stack levels required when called:    5
  6068 ;; This function calls:
  6069 ;;		Nothing
  6070 ;; This function is called by:
  6071 ;;		_setSw_Main
  6072 ;; This function uses a non-reentrant model
  6073 ;;
  6074                           
  6075                           
  6076                           ;psect for function _SwPointSelect
  6077  1D51                     _SwPointSelect:	
  6078                           
  6079                           ;incstack = 0
  6080                           ; Regs used in _SwPointSelect: [wreg]
  6081                           ;SwPointSelect@sw stored from wreg
  6082  1D51  0020               	movlb	0	; select bank0
  6083  1D52  00A1               	movwf	SwPointSelect@sw
  6084                           
  6085                           ;Switch_B1.c: 28: if (sw == 1) {
  6086  1D53  0821               	movf	SwPointSelect@sw,w
  6087  1D54  3A01               	xorlw	1
  6088  1D55  1D03               	skipz
  6089  1D56  2D5C               	goto	l9562
  6090                           
  6091                           ;Switch_B1.c: 29: Sw = &Sw1;
  6092  1D57  3054               	movlw	_Sw1& (0+255)
  6093  1D58  00A0               	movwf	??_SwPointSelect
  6094  1D59  0820               	movf	??_SwPointSelect,w
  6095  1D5A  00F9               	movwf	_Sw
  6096                           
  6097                           ;Switch_B1.c: 30: }
  6098  1D5B  0008               	return
  6099  1D5C                     l9562:	
  6100                           
  6101                           ;Switch_B1.c: 33: else if (sw == 2) {
  6102  1D5C  0821               	movf	SwPointSelect@sw,w
  6103  1D5D  3A02               	xorlw	2
  6104  1D5E  1D03               	skipz
  6105  1D5F  0008               	return
  6106                           
  6107                           ;Switch_B1.c: 34: Sw = &Sw2;
  6108  1D60  30DC               	movlw	_Sw2& (0+255)
  6109  1D61  00A0               	movwf	??_SwPointSelect
  6110  1D62  0820               	movf	??_SwPointSelect,w
  6111  1D63  00F9               	movwf	_Sw
  6112  1D64  0008               	return
  6113  1D65                     __end_of_SwPointSelect:	
  6114                           
  6115                           	psect	text18
  6116  0A08                     __ptext18:	
  6117 ;; *************** function _setMain_Exception *****************
  6118 ;; Defined at:
  6119 ;;		line 276 in file "../src/Main_B1.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;  command         1    wreg     unsigned char 
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;  command         1    4[BANK1 ] unsigned char 
  6124 ;;  status          1    3[BANK1 ] unsigned char 
  6125 ;;  buz             1    0[BANK1 ] unsigned char 
  6126 ;; Return value:  Size  Location     Type
  6127 ;;		None               void
  6128 ;; Registers used:
  6129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Totals:         0       2       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;Total ram usage:        7 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:   11
  6142 ;; This function calls:
  6143 ;;		_getDimmerLights_Line
  6144 ;;		_getMain_LightsStatus
  6145 ;;		_setBuz
  6146 ;;		_setDimmerLights_ErrorClose
  6147 ;;		_setLED
  6148 ;; This function is called by:
  6149 ;;		_Switch_Main
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           
  6154                           ;psect for function _setMain_Exception
  6155  0A08                     _setMain_Exception:	
  6156                           
  6157                           ;incstack = 0
  6158                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6159                           ;setMain_Exception@command stored from wreg
  6160  0A08  0021               	movlb	1	; select bank1
  6161  0A09  00EE               	movwf	setMain_Exception@command^(0+128)
  6162                           
  6163                           ;Main_B1.c: 277: char status = 0, buz = 0;
  6164  0A0A  01ED               	clrf	setMain_Exception@status^(0+128)
  6165  0A0B  01EA               	clrf	setMain_Exception@buz^(0+128)
  6166                           
  6167                           ;Main_B1.c: 292: status = command == 3 ? getDimmerLights_Line() : 255;
  6168  0A0C  086E               	movf	setMain_Exception@command^(0+128),w
  6169  0A0D  3A03               	xorlw	3
  6170  0A0E  1903               	skipnz
  6171  0A0F  2A15               	goto	l9852
  6172  0A10  30FF               	movlw	255
  6173  0A11  00EB               	movwf	_setMain_Exception$3924^(0+128)
  6174  0A12  3000               	movlw	0
  6175  0A13  00EC               	movwf	(_setMain_Exception$3924^(0+128)+1)
  6176  0A14  2A22               	goto	l9854
  6177  0A15                     l9852:	
  6178  0A15  319D  2516  318A   	fcall	_getDimmerLights_Line
  6179  0A18  0020               	movlb	0	; select bank0
  6180  0A19  00EB               	movwf	??_setMain_Exception
  6181  0A1A  01EC               	clrf	??_setMain_Exception+1
  6182  0A1B  086B               	movf	??_setMain_Exception,w
  6183  0A1C  0021               	movlb	1	; select bank1
  6184  0A1D  00EB               	movwf	_setMain_Exception$3924^(0+128)
  6185  0A1E  0020               	movlb	0	; select bank0
  6186  0A1F  086C               	movf	??_setMain_Exception+1,w
  6187  0A20  0021               	movlb	1	; select bank1
  6188  0A21  00EC               	movwf	(_setMain_Exception$3924+1)^(0+128)
  6189  0A22                     l9854:	
  6190  0A22  086B               	movf	_setMain_Exception$3924^(0+128),w
  6191  0A23  0020               	movlb	0	; select bank0
  6192  0A24  00EB               	movwf	??_setMain_Exception
  6193  0A25  086B               	movf	??_setMain_Exception,w
  6194  0A26  0021               	movlb	1	; select bank1
  6195  0A27  00ED               	movwf	setMain_Exception@status^(0+128)
  6196                           
  6197                           ;Main_B1.c: 294: if (command == 0) {
  6198  0A28  08EE               	movf	setMain_Exception@command^(0+128),f
  6199  0A29  1D03               	skipz
  6200  0A2A  2A2D               	goto	l9860
  6201                           
  6202                           ;Main_B1.c: 295: setLED(99, 10);
  6203  0A2B  300A               	movlw	10
  6204  0A2C  2A2E               	goto	L4
  6205  0A2D                     l9860:	
  6206                           ;Main_B1.c: 296: } else {
  6207                           
  6208                           
  6209                           ;Main_B1.c: 297: setLED(99, 11);
  6210  0A2D  300B               	movlw	11
  6211  0A2E                     L4:	
  6212  0A2E  0020               	movlb	0	; select bank0
  6213  0A2F  00EB               	movwf	??_setMain_Exception
  6214  0A30  086B               	movf	??_setMain_Exception,w
  6215  0A31  00A2               	movwf	setLED@command
  6216  0A32  3063               	movlw	99
  6217  0A33  3195  259F  318A   	fcall	_setLED
  6218                           
  6219                           ;Main_B1.c: 298: }
  6220                           ;Main_B1.c: 300: if (command != 0) {
  6221  0A36  0021               	movlb	1	; select bank1
  6222  0A37  086E               	movf	setMain_Exception@command^(0+128),w
  6223  0A38  1903               	btfsc	3,2
  6224  0A39  0008               	return
  6225                           
  6226                           ;Main_B1.c: 301: switch (command) {
  6227  0A3A  2A5B               	goto	l9876
  6228  0A3B                     l9866:	
  6229                           ;Main_B1.c: 302: case 2:
  6230                           
  6231                           
  6232                           ;Main_B1.c: 303: if (getMain_LightsStatus() == 1) {
  6233  0A3B  3191  215D  318A   	fcall	_getMain_LightsStatus
  6234  0A3E  3A01               	xorlw	1
  6235  0A3F  1D03               	skipz
  6236  0A40  2A64               	goto	l9878
  6237                           
  6238                           ;Main_B1.c: 304: setBuz(10, 300);
  6239  0A41  302C               	movlw	44
  6240  0A42  0020               	movlb	0	; select bank0
  6241  0A43  00A9               	movwf	setBuz@time
  6242  0A44  3001               	movlw	1
  6243  0A45  00AA               	movwf	setBuz@time+1
  6244  0A46  300A               	movlw	10
  6245  0A47  3197  274D  318A   	fcall	_setBuz
  6246                           
  6247                           ;Main_B1.c: 305: }
  6248                           ;Main_B1.c: 306: break;
  6249  0A4A  2A64               	goto	l9878
  6250  0A4B                     l9870:	
  6251                           ;Main_B1.c: 307: case 3:
  6252                           
  6253                           
  6254                           ;Main_B1.c: 308: if (getMain_LightsStatus() == 1) {
  6255  0A4B  3191  215D  318A   	fcall	_getMain_LightsStatus
  6256  0A4E  3A01               	xorlw	1
  6257  0A4F  1D03               	skipz
  6258  0A50  2A64               	goto	l9878
  6259                           
  6260                           ;Main_B1.c: 309: setBuz(5, 300);
  6261  0A51  302C               	movlw	44
  6262  0A52  0020               	movlb	0	; select bank0
  6263  0A53  00A9               	movwf	setBuz@time
  6264  0A54  3001               	movlw	1
  6265  0A55  00AA               	movwf	setBuz@time+1
  6266  0A56  3005               	movlw	5
  6267  0A57  3197  274D  318A   	fcall	_setBuz
  6268                           
  6269                           ;Main_B1.c: 312: }
  6270                           
  6271                           ;Main_B1.c: 310: }
  6272                           ;Main_B1.c: 311: break;
  6273  0A5A  2A64               	goto	l9878
  6274  0A5B                     l9876:	
  6275  0A5B  0021               	movlb	1	; select bank1
  6276  0A5C  086E               	movf	setMain_Exception@command^(0+128),w
  6277                           
  6278                           ; Switch size 1, requested type "space"
  6279                           ; Number of cases is 2, Range of values is 2 to 3
  6280                           ; switch strategies available:
  6281                           ; Name         Instructions Cycles
  6282                           ; simple_byte            7     4 (average)
  6283                           ; direct_byte           13     9 (fixed)
  6284                           ; jumptable            263     9 (fixed)
  6285                           ;	Chosen strategy is simple_byte
  6286  0A5D  3A02               	xorlw	2	; case 2
  6287  0A5E  1903               	skipnz
  6288  0A5F  2A3B               	goto	l9866
  6289  0A60  3A01               	xorlw	1	; case 3
  6290  0A61  1903               	skipnz
  6291  0A62  2A4B               	goto	l9870
  6292  0A63  2A64               	goto	l9878
  6293  0A64                     l9878:	
  6294                           
  6295                           ;Main_B1.c: 313: setDimmerLights_ErrorClose(status);
  6296  0A64  0021               	movlb	1	; select bank1
  6297  0A65  086D               	movf	setMain_Exception@status^(0+128),w
  6298  0A66  3197  27A6         	fcall	_setDimmerLights_ErrorClose
  6299  0A68  0021               	movlb	1	; select bank1
  6300  0A69  0008               	return
  6301  0A6A                     __end_of_setMain_Exception:	
  6302                           
  6303                           	psect	text19
  6304  17A6                     __ptext19:	
  6305 ;; *************** function _setDimmerLights_ErrorClose *****************
  6306 ;; Defined at:
  6307 ;;		line 577 in file "../src/Dimmer_B1.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;  lights          1    wreg     unsigned char 
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;  lights          1   72[BANK0 ] unsigned char 
  6312 ;;  i               2   73[BANK0 ] int 
  6313 ;;  count           1   71[BANK0 ] unsigned char 
  6314 ;; Return value:  Size  Location     Type
  6315 ;;		None               void
  6316 ;; Registers used:
  6317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6318 ;; Tracked objects:
  6319 ;;		On entry : 0/0
  6320 ;;		On exit  : 0/0
  6321 ;;		Unchanged: 0/0
  6322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6324 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6326 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6327 ;;Total ram usage:        5 bytes
  6328 ;; Hardware stack levels used:    1
  6329 ;; Hardware stack levels required when called:   10
  6330 ;; This function calls:
  6331 ;;		_DimmerLightsPointSelect
  6332 ;;		_getDimmerLights_Status
  6333 ;;		_setDimmerLights_SwOff
  6334 ;; This function is called by:
  6335 ;;		_setMain_Exception
  6336 ;; This function uses a non-reentrant model
  6337 ;;
  6338                           
  6339                           
  6340                           ;psect for function _setDimmerLights_ErrorClose
  6341  17A6                     _setDimmerLights_ErrorClose:	
  6342                           
  6343                           ;incstack = 0
  6344                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6345                           ;setDimmerLights_ErrorClose@lights stored from wreg
  6346  17A6  0020               	movlb	0	; select bank0
  6347  17A7  00E8               	movwf	setDimmerLights_ErrorClose@lights
  6348                           
  6349                           ;Dimmer_B1.c: 578: if (lights == 255) {
  6350  17A8  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6351  17A9  3AFF               	xorlw	255
  6352  17AA  1D03               	skipz
  6353  17AB  2FE3               	goto	l9396
  6354                           
  6355                           ;Dimmer_B1.c: 583: char count = 2;
  6356  17AC  3002               	movlw	2
  6357  17AD  00E6               	movwf	??_setDimmerLights_ErrorClose
  6358  17AE  0866               	movf	??_setDimmerLights_ErrorClose,w
  6359  17AF  00E7               	movwf	setDimmerLights_ErrorClose@count
  6360                           
  6361                           ;Dimmer_B1.c: 588: for (int i = 0; i < count; i++) {
  6362  17B0  01E9               	clrf	setDimmerLights_ErrorClose@i
  6363  17B1  01EA               	clrf	setDimmerLights_ErrorClose@i+1
  6364  17B2                     l9394:	
  6365  17B2  086A               	movf	setDimmerLights_ErrorClose@i+1,w
  6366  17B3  3A80               	xorlw	128
  6367  17B4  00E6               	movwf	??_setDimmerLights_ErrorClose
  6368  17B5  3080               	movlw	128
  6369  17B6  0266               	subwf	??_setDimmerLights_ErrorClose,w
  6370  17B7  1D03               	skipz
  6371  17B8  2FBB               	goto	u10225
  6372  17B9  0867               	movf	setDimmerLights_ErrorClose@count,w
  6373  17BA  0269               	subwf	setDimmerLights_ErrorClose@i,w
  6374  17BB                     u10225:	
  6375  17BB  1803               	btfsc	3,0
  6376  17BC  0008               	return
  6377                           
  6378                           ;Dimmer_B1.c: 589: DimmerLightsPointSelect(i + 1);
  6379  17BD  0020               	movlb	0	; select bank0
  6380  17BE  0869               	movf	setDimmerLights_ErrorClose@i,w
  6381  17BF  3E01               	addlw	1
  6382  17C0  319C  24DD  3197   	fcall	_DimmerLightsPointSelect
  6383                           
  6384                           ;Dimmer_B1.c: 590: if (getDimmerLights_Status(i + 1) == 1) {
  6385  17C3  0020               	movlb	0	; select bank0
  6386  17C4  0869               	movf	setDimmerLights_ErrorClose@i,w
  6387  17C5  3E01               	addlw	1
  6388  17C6  319C  2440  3197   	fcall	_getDimmerLights_Status
  6389  17C9  3A01               	xorlw	1
  6390  17CA  1D03               	skipz
  6391  17CB  2FDD               	goto	l9392
  6392                           
  6393                           ;Dimmer_B1.c: 591: DimmerLights->SwFlag = 1;
  6394  17CC  0877               	movf	_DimmerLights,w
  6395  17CD  3E09               	addlw	9
  6396  17CE  0086               	movwf	6
  6397  17CF  3001               	movlw	1	; select bank2/3
  6398  17D0  0087               	movwf	7
  6399  17D1  1701               	bsf	1,6
  6400                           
  6401                           ;Dimmer_B1.c: 592: DimmerLights->Status = 0;
  6402  17D2  0877               	movf	_DimmerLights,w
  6403  17D3  0086               	movwf	6
  6404  17D4  3001               	movlw	1	; select bank2/3
  6405  17D5  0087               	movwf	7
  6406  17D6  1281               	bcf	1,5
  6407                           
  6408                           ;Dimmer_B1.c: 593: setDimmerLights_SwOff(i + 1);
  6409  17D7  0020               	movlb	0	; select bank0
  6410  17D8  0869               	movf	setDimmerLights_ErrorClose@i,w
  6411  17D9  3E01               	addlw	1
  6412  17DA  3188  2086  3197   	fcall	_setDimmerLights_SwOff
  6413  17DD                     l9392:	
  6414  17DD  3001               	movlw	1
  6415  17DE  0020               	movlb	0	; select bank0
  6416  17DF  07E9               	addwf	setDimmerLights_ErrorClose@i,f
  6417  17E0  3000               	movlw	0
  6418  17E1  3DEA               	addwfc	setDimmerLights_ErrorClose@i+1,f
  6419  17E2  2FB2               	goto	l9394
  6420  17E3                     l9396:	
  6421                           ;Dimmer_B1.c: 594: }
  6422                           ;Dimmer_B1.c: 595: }
  6423                           ;Dimmer_B1.c: 596: } else {
  6424                           
  6425                           
  6426                           ;Dimmer_B1.c: 597: DimmerLightsPointSelect(lights);
  6427  17E3  0020               	movlb	0	; select bank0
  6428  17E4  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6429  17E5  319C  24DD  3197   	fcall	_DimmerLightsPointSelect
  6430                           
  6431                           ;Dimmer_B1.c: 598: if (getDimmerLights_Status(lights) == 1) {
  6432  17E8  0020               	movlb	0	; select bank0
  6433  17E9  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6434  17EA  319C  2440  3197   	fcall	_getDimmerLights_Status
  6435  17ED  3A01               	xorlw	1
  6436  17EE  1D03               	skipz
  6437  17EF  0008               	return
  6438                           
  6439                           ;Dimmer_B1.c: 599: DimmerLights->SwFlag = 1;
  6440  17F0  0877               	movf	_DimmerLights,w
  6441  17F1  3E09               	addlw	9
  6442  17F2  0086               	movwf	6
  6443  17F3  3001               	movlw	1	; select bank2/3
  6444  17F4  0087               	movwf	7
  6445  17F5  1701               	bsf	1,6
  6446                           
  6447                           ;Dimmer_B1.c: 600: DimmerLights->Status = 0;
  6448  17F6  0877               	movf	_DimmerLights,w
  6449  17F7  0086               	movwf	6
  6450  17F8  3001               	movlw	1	; select bank2/3
  6451  17F9  0087               	movwf	7
  6452  17FA  1281               	bcf	1,5
  6453                           
  6454                           ;Dimmer_B1.c: 601: setDimmerLights_SwOff(lights);
  6455  17FB  0020               	movlb	0	; select bank0
  6456  17FC  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6457  17FD  3188  2086         	fcall	_setDimmerLights_SwOff
  6458  17FF  0008               	return
  6459  1800                     __end_of_setDimmerLights_ErrorClose:	
  6460                           
  6461                           	psect	text20
  6462  1D16                     __ptext20:	
  6463 ;; *************** function _getDimmerLights_Line *****************
  6464 ;; Defined at:
  6465 ;;		line 726 in file "../src/Dimmer_B1.c"
  6466 ;; Parameters:    Size  Location     Type
  6467 ;;		None
  6468 ;; Auto vars:     Size  Location     Type
  6469 ;;  line            1    1[BANK0 ] unsigned char 
  6470 ;; Return value:  Size  Location     Type
  6471 ;;                  1    wreg      unsigned char 
  6472 ;; Registers used:
  6473 ;;		wreg, status,2
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6480 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;Total ram usage:        2 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; Hardware stack levels required when called:    5
  6486 ;; This function calls:
  6487 ;;		Nothing
  6488 ;; This function is called by:
  6489 ;;		_setMain_Exception
  6490 ;; This function uses a non-reentrant model
  6491 ;;
  6492                           
  6493                           
  6494                           ;psect for function _getDimmerLights_Line
  6495  1D16                     _getDimmerLights_Line:	
  6496                           
  6497                           ;Dimmer_B1.c: 727: char line = 0;
  6498                           
  6499                           ;incstack = 0
  6500                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6501  1D16  0020               	movlb	0	; select bank0
  6502  1D17  01A1               	clrf	getDimmerLights_Line@line
  6503                           
  6504                           ;Dimmer_B1.c: 729: if (DimmerLights1.Line == 1) {
  6505  1D18  0023               	movlb	3	; select bank3
  6506  1D19  1C47               	btfss	(_DimmerLights1^(0+384)+9),0
  6507  1D1A  2D1F               	goto	l873
  6508                           
  6509                           ;Dimmer_B1.c: 730: line = 1;
  6510  1D1B  0020               	movlb	0	; select bank0
  6511  1D1C  01A1               	clrf	getDimmerLights_Line@line
  6512  1D1D  0AA1               	incf	getDimmerLights_Line@line,f
  6513                           
  6514                           ;Dimmer_B1.c: 731: }
  6515  1D1E  2D26               	goto	l874
  6516  1D1F                     l873:	
  6517                           
  6518                           ;Dimmer_B1.c: 734: else if (DimmerLights2.Line == 1) {
  6519  1D1F  1C56               	btfss	(_DimmerLights2^(0+384)+9),0
  6520  1D20  2D26               	goto	l874
  6521                           
  6522                           ;Dimmer_B1.c: 735: line = 2;
  6523  1D21  3002               	movlw	2
  6524  1D22  0020               	movlb	0	; select bank0
  6525  1D23  00A0               	movwf	??_getDimmerLights_Line
  6526  1D24  0820               	movf	??_getDimmerLights_Line,w
  6527  1D25  00A1               	movwf	getDimmerLights_Line@line
  6528  1D26                     l874:	
  6529                           
  6530                           ;Dimmer_B1.c: 736: }
  6531                           ;Dimmer_B1.c: 743: return line;
  6532  1D26  0020               	movlb	0	; select bank0
  6533  1D27  0821               	movf	getDimmerLights_Line@line,w
  6534  1D28  0008               	return
  6535  1D29                     __end_of_getDimmerLights_Line:	
  6536                           
  6537                           	psect	text21
  6538  1C07                     __ptext21:	
  6539 ;; *************** function _Switch_Initialization *****************
  6540 ;; Defined at:
  6541 ;;		line 46 in file "../src/Switch_B1.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;		None
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;		None
  6546 ;; Return value:  Size  Location     Type
  6547 ;;		None               void
  6548 ;; Registers used:
  6549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;Total ram usage:        0 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    8
  6562 ;; This function calls:
  6563 ;;		_TouchPower
  6564 ;;		_setSw_Initialization
  6565 ;; This function is called by:
  6566 ;;		_main
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           
  6571                           ;psect for function _Switch_Initialization
  6572  1C07                     _Switch_Initialization:	
  6573                           
  6574                           ;Switch_B1.c: 47: TouchPower();
  6575                           
  6576                           ;incstack = 0
  6577                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6578  1C07  319D  25B8  319C   	fcall	_TouchPower
  6579                           
  6580                           ;Switch_B1.c: 49: WPUB1 = 0;
  6581  1C0A  0024               	movlb	4	; select bank4
  6582  1C0B  108D               	bcf	13,1	;volatile
  6583                           
  6584                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6585  1C0C  3001               	movlw	1
  6586  1C0D  3187  27F8  319C   	fcall	_setSw_Initialization
  6587                           
  6588                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6589  1C10  3002               	movlw	2
  6590  1C11  3187  27F8         	fcall	_setSw_Initialization
  6591  1C13  0008               	return
  6592  1C14                     __end_of_Switch_Initialization:	
  6593                           
  6594                           	psect	text22
  6595  07F8                     __ptext22:	
  6596 ;; *************** function _setSw_Initialization *****************
  6597 ;; Defined at:
  6598 ;;		line 109 in file "../src/Switch_B1.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;  sw              1    wreg     unsigned char 
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;  sw              1    4[BANK0 ] unsigned char 
  6603 ;; Return value:  Size  Location     Type
  6604 ;;		None               void
  6605 ;; Registers used:
  6606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;Total ram usage:        1 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:    7
  6619 ;; This function calls:
  6620 ;;		_setLED
  6621 ;; This function is called by:
  6622 ;;		_Switch_Initialization
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           
  6627                           ;psect for function _setSw_Initialization
  6628  07F8                     _setSw_Initialization:	
  6629                           
  6630                           ;incstack = 0
  6631                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6632                           ;setSw_Initialization@sw stored from wreg
  6633  07F8  0020               	movlb	0	; select bank0
  6634  07F9  00A4               	movwf	setSw_Initialization@sw
  6635                           
  6636                           ;Switch_B1.c: 110: setLED(sw, 1);
  6637  07FA  01A2               	clrf	setLED@command
  6638  07FB  0AA2               	incf	setLED@command,f
  6639  07FC  0824               	movf	setSw_Initialization@sw,w
  6640  07FD  3195  259F         	fcall	_setLED
  6641  07FF  0008               	return
  6642  0800                     __end_of_setSw_Initialization:	
  6643                           
  6644                           	psect	text23
  6645  1DB8                     __ptext23:	
  6646 ;; *************** function _TouchPower *****************
  6647 ;; Defined at:
  6648 ;;		line 10 in file "../src/Switch_B1.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;		None
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;		None
  6653 ;; Return value:  Size  Location     Type
  6654 ;;		None               void
  6655 ;; Registers used:
  6656 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;Total ram usage:        0 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; Hardware stack levels required when called:    6
  6669 ;; This function calls:
  6670 ;;		_Timeout_Counter
  6671 ;;		_set_TimeoutCleared
  6672 ;; This function is called by:
  6673 ;;		_Switch_Initialization
  6674 ;;		_Switch_Main
  6675 ;; This function uses a non-reentrant model
  6676 ;;
  6677                           
  6678                           
  6679                           ;psect for function _TouchPower
  6680  1DB8                     _TouchPower:	
  6681                           
  6682                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6683                           
  6684                           ;incstack = 0
  6685                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6686  1DB8  0020               	movlb	0	; select bank0
  6687  1DB9  1A8E               	btfsc	14,5	;volatile
  6688  1DBA  0008               	return
  6689                           
  6690                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6691  1DBB  0021               	movlb	1	; select bank1
  6692  1DBC  1C20               	btfss	_myMain^(0+128),0
  6693  1DBD  0008               	return
  6694  1DBE  2DC4               	goto	l10084
  6695  1DBF                     l2594:	
  6696                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6697                           
  6698                           
  6699                           ;Switch_B1.c: 14: RC5 = 1;
  6700  1DBF  0020               	movlb	0	; select bank0
  6701  1DC0  168E               	bsf	14,5	;volatile
  6702                           
  6703                           ;Switch_B1.c: 15: Timeout_Counter();
  6704  1DC1  319D  2579  319D   	fcall	_Timeout_Counter
  6705  1DC4                     l10084:	
  6706  1DC4  0020               	movlb	0	; select bank0
  6707  1DC5  1A8E               	btfsc	14,5	;volatile
  6708  1DC6  2DCA               	goto	l10088
  6709  1DC7  0021               	movlb	1	; select bank1
  6710  1DC8  1D2D               	btfss	(_myMain^(0+128)+13),2
  6711  1DC9  2DBF               	goto	l2594
  6712  1DCA                     l10088:	
  6713                           
  6714                           ;Switch_B1.c: 16: }
  6715                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6716  1DCA  319B  234C         	fcall	_set_TimeoutCleared
  6717  1DCC  0008               	return
  6718  1DCD                     __end_of_TouchPower:	
  6719                           
  6720                           	psect	text24
  6721  1B33                     __ptext24:	
  6722 ;; *************** function _RF_Main *****************
  6723 ;; Defined at:
  6724 ;;		line 16 in file "../src/RF_Control_B1.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;		None
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;		None
  6729 ;; Return value:  Size  Location     Type
  6730 ;;		None               void
  6731 ;; Registers used:
  6732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6733 ;; Tracked objects:
  6734 ;;		On entry : 0/0
  6735 ;;		On exit  : 0/0
  6736 ;;		Unchanged: 0/0
  6737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;Total ram usage:        0 bytes
  6743 ;; Hardware stack levels used:    1
  6744 ;; Hardware stack levels required when called:   14
  6745 ;; This function calls:
  6746 ;;		_setRF_Main
  6747 ;; This function is called by:
  6748 ;;		_main
  6749 ;; This function uses a non-reentrant model
  6750 ;;
  6751                           
  6752                           
  6753                           ;psect for function _RF_Main
  6754  1B33                     _RF_Main:	
  6755                           
  6756                           ;RF_Control_B1.c: 18: setRF_Main();
  6757                           
  6758                           ;incstack = 0
  6759                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6760  1B33  3185  2577         	fcall	_setRF_Main
  6761  1B35  0008               	return
  6762  1B36                     __end_of_RF_Main:	
  6763                           
  6764                           	psect	text25
  6765  0577                     __ptext25:	
  6766 ;; *************** function _setRF_Main *****************
  6767 ;; Defined at:
  6768 ;;		line 52 in file "../src/RF_Control_B1.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;		None
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;  error           1   78[BANK0 ] unsigned char 
  6773 ;;  Receive_OK      1   77[BANK0 ] unsigned char 
  6774 ;;  loop_f          1   76[BANK0 ] unsigned char 
  6775 ;; Return value:  Size  Location     Type
  6776 ;;		None               void
  6777 ;; Registers used:
  6778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6779 ;; Tracked objects:
  6780 ;;		On entry : 0/0
  6781 ;;		On exit  : 0/0
  6782 ;;		Unchanged: 0/0
  6783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6785 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6786 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;Total ram usage:        4 bytes
  6789 ;; Hardware stack levels used:    1
  6790 ;; Hardware stack levels required when called:   13
  6791 ;; This function calls:
  6792 ;;		_CC2500_ReadStatus
  6793 ;;		_CC2500_RxData
  6794 ;;		_CC2500_TxData
  6795 ;;		_CC2500_WriteCommand
  6796 ;;		_getBuz_GO
  6797 ;;		_getMain_All_Error_Status
  6798 ;;		_getRF_KeyStatus
  6799 ;;		_getRxData
  6800 ;; This function is called by:
  6801 ;;		_RF_Main
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           
  6806                           ;psect for function _setRF_Main
  6807  0577                     _setRF_Main:	
  6808                           
  6809                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6810                           
  6811                           ;incstack = 0
  6812                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6813  0577  0020               	movlb	0	; select bank0
  6814  0578  01EC               	clrf	setRF_Main@loop_f
  6815  0579  01ED               	clrf	setRF_Main@Receive_OK
  6816  057A  01EE               	clrf	setRF_Main@error
  6817                           
  6818                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6819  057B  0021               	movlb	1	; select bank1
  6820  057C  1C3C               	btfss	_RF1^(0+128),0
  6821  057D  2E64               	goto	l2195
  6822                           
  6823                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6824  057E  319C  2461  3185   	fcall	_getBuz_GO
  6825  0581  0020               	movlb	0	; select bank0
  6826  0582  0821               	movf	?_getBuz_GO+1,w
  6827  0583  0420               	iorwf	?_getBuz_GO,w
  6828  0584  1D03               	skipz
  6829  0585  0008               	return
  6830                           
  6831                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6832  0586  3000               	movlw	0
  6833  0587  3191  21B8  3185   	fcall	_getMain_All_Error_Status
  6834  058A  3800               	iorlw	0
  6835  058B  1D03               	skipz
  6836  058C  2DA1               	goto	l2197
  6837                           
  6838                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6839  058D  319C  2472  3185   	fcall	_getRF_KeyStatus
  6840  0590  3A01               	xorlw	1
  6841  0591  3000               	movlw	0
  6842  0592  1903               	skipnz
  6843  0593  3001               	movlw	1
  6844  0594  0020               	movlb	0	; select bank0
  6845  0595  00EB               	movwf	??_setRF_Main
  6846  0596  0CEB               	rrf	??_setRF_Main,f
  6847  0597  0CEB               	rrf	??_setRF_Main,f
  6848  0598  0021               	movlb	1	; select bank1
  6849  0599  083C               	movf	_RF1^(0+128),w
  6850  059A  0020               	movlb	0	; select bank0
  6851  059B  066B               	xorwf	??_setRF_Main,w
  6852  059C  397F               	andlw	-129
  6853  059D  066B               	xorwf	??_setRF_Main,w
  6854  059E  0021               	movlb	1	; select bank1
  6855  059F  00BC               	movwf	_RF1^(0+128)
  6856                           
  6857                           ;RF_Control_B1.c: 65: } else {
  6858  05A0  2DA3               	goto	l2198
  6859  05A1                     l2197:	
  6860                           
  6861                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6862  05A1  0021               	movlb	1	; select bank1
  6863  05A2  13BC               	bcf	_RF1^(0+128),7
  6864  05A3                     l2198:	
  6865                           
  6866                           ;RF_Control_B1.c: 70: }
  6867                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6868  05A3  1BBC               	btfsc	_RF1^(0+128),7
  6869  05A4  1B3C               	btfsc	_RF1^(0+128),6
  6870  05A5  2DAB               	goto	l2199
  6871                           
  6872                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6873  05A6  01BE               	clrf	(_RF1^(0+128)+2)
  6874  05A7  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6875                           
  6876                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6877  05A8  14BD               	bsf	(_RF1^(0+128)+1),1
  6878                           
  6879                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6880  05A9  11BC               	bcf	_RF1^(0+128),3
  6881                           
  6882                           ;RF_Control_B1.c: 76: } else {
  6883  05AA  0008               	return
  6884  05AB                     l2199:	
  6885                           
  6886                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6887  05AB  18BD               	btfsc	(_RF1^(0+128)+1),1
  6888  05AC  1B3C               	btfsc	_RF1^(0+128),6
  6889  05AD  2DC2               	goto	l10000
  6890                           
  6891                           ;RF_Control_B1.c: 78: RF1.Count++;
  6892  05AE  3001               	movlw	1
  6893  05AF  07BE               	addwf	(_RF1^(0+128)+2),f
  6894  05B0  3000               	movlw	0
  6895  05B1  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  6896                           
  6897                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6898  05B2  3002               	movlw	2
  6899  05B3  3EBC               	addlw	_RF1& (0+255)
  6900  05B4  0086               	movwf	6
  6901  05B5  0187               	clrf	7
  6902  05B6  3F40               	moviw [0]fsr1
  6903  05B7  0643               	xorwf	(_RF1^(0+128)+7),w
  6904  05B8  1D03               	skipz
  6905  05B9  2DBC               	goto	u11105
  6906  05BA  3F41               	moviw [1]fsr1
  6907  05BB  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  6908  05BC                     u11105:	
  6909  05BC  1D03               	skipz
  6910  05BD  2E31               	goto	l10052
  6911                           
  6912                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6913  05BE  01BE               	clrf	(_RF1^(0+128)+2)
  6914  05BF  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6915                           
  6916                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6917  05C0  10BD               	bcf	(_RF1^(0+128)+1),1
  6918                           
  6919                           ;RF_Control_B1.c: 82: }
  6920                           ;RF_Control_B1.c: 83: } else {
  6921  05C1  2E31               	goto	l10052
  6922  05C2                     l10000:	
  6923                           
  6924                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6925  05C2  01BE               	clrf	(_RF1^(0+128)+2)
  6926  05C3  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6927                           
  6928                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6929  05C4  10BD               	bcf	(_RF1^(0+128)+1),1
  6930                           
  6931                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6932  05C5  193C               	btfsc	_RF1^(0+128),2
  6933  05C6  1B3C               	btfsc	_RF1^(0+128),6
  6934  05C7  2DE3               	goto	l2204
  6935                           
  6936                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6937  05C8  113C               	bcf	_RF1^(0+128),2
  6938                           
  6939                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6940  05C9  11BC               	bcf	_RF1^(0+128),3
  6941                           
  6942                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6943  05CA  10BC               	bcf	_RF1^(0+128),1
  6944                           
  6945                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  6946  05CB  303B               	movlw	59
  6947  05CC  3190  2070  3185   	fcall	_CC2500_ReadStatus
  6948                           
  6949                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  6950  05CF  0021               	movlb	1	; select bank1
  6951  05D0  0857               	movf	_s_data^(0+128),w
  6952  05D1  1903               	btfsc	3,2
  6953  05D2  2DDF               	goto	l2205
  6954                           
  6955                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  6956  05D3  3036               	movlw	54
  6957  05D4  319E  262C  3185   	fcall	_CC2500_WriteCommand
  6958                           
  6959                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  6960  05D7  303B               	movlw	59
  6961  05D8  319E  262C  3185   	fcall	_CC2500_WriteCommand
  6962                           
  6963                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  6964  05DB  303A               	movlw	58
  6965  05DC  319E  262C  3185   	fcall	_CC2500_WriteCommand
  6966  05DF                     l2205:	
  6967                           
  6968                           ;RF_Control_B1.c: 97: }
  6969                           ;RF_Control_B1.c: 98: CC2500_TxData();
  6970  05DF  318A  226A  3185   	fcall	_CC2500_TxData
  6971                           
  6972                           ;RF_Control_B1.c: 100: } else {
  6973  05E2  2E31               	goto	l10052
  6974  05E3                     l2204:	
  6975                           
  6976                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  6977  05E3  1DBC               	btfss	_RF1^(0+128),3
  6978  05E4  2E1C               	goto	l2207
  6979                           
  6980                           ;RF_Control_B1.c: 104: CC2500_RxData();
  6981  05E5  318C  241B  3185   	fcall	_CC2500_RxData
  6982                           
  6983                           ;RF_Control_B1.c: 105: if (RF1.ReceiveGO == 1) {
  6984  05E8  0021               	movlb	1	; select bank1
  6985  05E9  1CBC               	btfss	_RF1^(0+128),1
  6986  05EA  2E31               	goto	l10052
  6987                           
  6988                           ;RF_Control_B1.c: 106: RF1.ReceiveGO = 0;
  6989  05EB  10BC               	bcf	_RF1^(0+128),1
  6990                           
  6991                           ;RF_Control_B1.c: 107: RF1.Correction = 0;
  6992  05EC  12BD               	bcf	(_RF1^(0+128)+1),5
  6993                           
  6994                           ;RF_Control_B1.c: 108: RF1.CorrectionCounter = 0;
  6995  05ED  01C6               	clrf	(_RF1^(0+128)+10)
  6996  05EE  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6997                           
  6998                           ;RF_Control_B1.c: 117: getRxData();
  6999  05EF  318B  23AC  3185   	fcall	_getRxData
  7000                           
  7001                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  7002  05F2  0021               	movlb	1	; select bank1
  7003  05F3  14BD               	bsf	(_RF1^(0+128)+1),1
  7004                           
  7005                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  7006  05F4  1DBD               	btfss	(_RF1^(0+128)+1),3
  7007  05F5  2E03               	goto	l10036
  7008                           
  7009                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 10) {
  7010  05F6  3000               	movlw	0
  7011  05F7  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7012  05F8  300B               	movlw	11
  7013  05F9  1903               	skipnz
  7014  05FA  0243               	subwf	(_RF1^(0+128)+7),w
  7015  05FB  1C03               	skipc
  7016  05FC  2E01               	goto	l10034
  7017                           
  7018                           ;RF_Control_B1.c: 124: RF1.RunTime = 10;
  7019  05FD  300A               	movlw	10
  7020  05FE  00C3               	movwf	(_RF1^(0+128)+7)
  7021  05FF  3000               	movlw	0
  7022  0600  00C4               	movwf	(_RF1^(0+128)+8)
  7023  0601                     l10034:	
  7024                           
  7025                           ;RF_Control_B1.c: 125: }
  7026                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  7027  0601  01C0               	clrf	(_RF1^(0+128)+4)
  7028                           
  7029                           ;RF_Control_B1.c: 127: } else {
  7030  0602  2E31               	goto	l10052
  7031  0603                     l10036:	
  7032                           
  7033                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  7034  0603  3001               	movlw	1
  7035  0604  0020               	movlb	0	; select bank0
  7036  0605  00EB               	movwf	??_setRF_Main
  7037  0606  086B               	movf	??_setRF_Main,w
  7038  0607  0021               	movlb	1	; select bank1
  7039  0608  07C0               	addwf	(_RF1^(0+128)+4),f
  7040                           
  7041                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  7042  0609  0840               	movf	(_RF1^(0+128)+4),w
  7043  060A  3A02               	xorlw	2
  7044  060B  1D03               	skipz
  7045  060C  2E31               	goto	l10052
  7046                           
  7047                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  7048  060D  01C0               	clrf	(_RF1^(0+128)+4)
  7049                           
  7050                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  7051  060E  01C1               	clrf	(_RF1^(0+128)+5)
  7052  060F  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7053                           
  7054                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 200) {
  7055  0610  3000               	movlw	0
  7056  0611  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7057  0612  30C8               	movlw	200
  7058  0613  1903               	skipnz
  7059  0614  0243               	subwf	(_RF1^(0+128)+7),w
  7060  0615  1803               	skipnc
  7061  0616  2E31               	goto	l10052
  7062                           
  7063                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  7064  0617  300A               	movlw	10
  7065  0618  07C3               	addwf	(_RF1^(0+128)+7),f
  7066  0619  3000               	movlw	0
  7067  061A  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  7068                           
  7069                           ;RF_Control_B1.c: 134: }
  7070                           ;RF_Control_B1.c: 135: }
  7071                           ;RF_Control_B1.c: 136: }
  7072                           ;RF_Control_B1.c: 137: }
  7073                           ;RF_Control_B1.c: 138: } else {
  7074  061B  2E31               	goto	l10052
  7075  061C                     l2207:	
  7076                           
  7077                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7078  061C  1DBC               	btfss	_RF1^(0+128),3
  7079  061D  18BC               	btfsc	_RF1^(0+128),1
  7080  061E  2E31               	goto	l10052
  7081                           
  7082                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  7083  061F  15BC               	bsf	_RF1^(0+128),3
  7084                           
  7085                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  7086  0620  16BD               	bsf	(_RF1^(0+128)+1),5
  7087                           
  7088                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  7089  0621  3036               	movlw	54
  7090  0622  319E  262C  3185   	fcall	_CC2500_WriteCommand
  7091                           
  7092                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  7093  0625  303B               	movlw	59
  7094  0626  319E  262C  3185   	fcall	_CC2500_WriteCommand
  7095                           
  7096                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  7097  0629  303A               	movlw	58
  7098  062A  319E  262C  3185   	fcall	_CC2500_WriteCommand
  7099                           
  7100                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  7101  062D  3034               	movlw	52
  7102  062E  319E  262C  3185   	fcall	_CC2500_WriteCommand
  7103  0631                     l10052:	
  7104                           
  7105                           ;RF_Control_B1.c: 148: }
  7106                           ;RF_Control_B1.c: 150: }
  7107                           ;RF_Control_B1.c: 151: }
  7108                           ;RF_Control_B1.c: 152: }
  7109                           ;RF_Control_B1.c: 153: if (RF1.RxStatus == 1) {
  7110  0631  0021               	movlb	1	; select bank1
  7111  0632  1DBC               	btfss	_RF1^(0+128),3
  7112  0633  2E52               	goto	l10064
  7113                           
  7114                           ;RF_Control_B1.c: 154: RF1.CheckedCounter++;
  7115  0634  3001               	movlw	1
  7116  0635  07C1               	addwf	(_RF1^(0+128)+5),f
  7117  0636  3000               	movlw	0
  7118  0637  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  7119                           
  7120                           ;RF_Control_B1.c: 155: if (RF1.CheckedCounter == 100) {
  7121  0638  3005               	movlw	5
  7122  0639  3EBC               	addlw	_RF1& (0+255)
  7123  063A  0086               	movwf	6
  7124  063B  0187               	clrf	7
  7125  063C  3F40               	moviw [0]fsr1
  7126  063D  3A64               	xorlw	100
  7127  063E  1D03               	skipz
  7128  063F  2E42               	goto	u11235
  7129  0640  3F41               	moviw [1]fsr1
  7130  0641  3A00               	xorlw	0
  7131  0642                     u11235:	
  7132  0642  1D03               	skipz
  7133  0643  2E52               	goto	l10064
  7134                           
  7135                           ;RF_Control_B1.c: 156: RF1.CheckedCounter = 0;
  7136  0644  01C1               	clrf	(_RF1^(0+128)+5)
  7137  0645  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7138                           
  7139                           ;RF_Control_B1.c: 157: RF1.CheckCount = 0;
  7140  0646  01C0               	clrf	(_RF1^(0+128)+4)
  7141                           
  7142                           ;RF_Control_B1.c: 158: if (RF1.RunTime > 10) {
  7143  0647  3000               	movlw	0
  7144  0648  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7145  0649  300B               	movlw	11
  7146  064A  1903               	skipnz
  7147  064B  0243               	subwf	(_RF1^(0+128)+7),w
  7148  064C  1C03               	skipc
  7149  064D  2E52               	goto	l10064
  7150                           
  7151                           ;RF_Control_B1.c: 159: RF1.RunTime -= 10;
  7152  064E  300A               	movlw	10
  7153  064F  02C3               	subwf	(_RF1^(0+128)+7),f
  7154  0650  3000               	movlw	0
  7155  0651  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  7156  0652                     l10064:	
  7157                           
  7158                           ;RF_Control_B1.c: 160: }
  7159                           ;RF_Control_B1.c: 161: }
  7160                           ;RF_Control_B1.c: 162: }
  7161                           ;RF_Control_B1.c: 163: if (RF1.Correction == 1) {
  7162  0652  1EBD               	btfss	(_RF1^(0+128)+1),5
  7163  0653  0008               	return
  7164                           
  7165                           ;RF_Control_B1.c: 164: RF1.CorrectionCounter++;
  7166  0654  3001               	movlw	1
  7167  0655  07C6               	addwf	(_RF1^(0+128)+10),f
  7168  0656  3000               	movlw	0
  7169  0657  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  7170                           
  7171                           ;RF_Control_B1.c: 165: if (RF1.CorrectionCounter >= 30000) {
  7172  0658  3075               	movlw	117
  7173  0659  0247               	subwf	((_RF1+1)^(0+128)+10),w
  7174  065A  3030               	movlw	48
  7175  065B  1903               	skipnz
  7176  065C  0246               	subwf	(_RF1^(0+128)+10),w
  7177  065D  1C03               	skipc
  7178  065E  0008               	return
  7179                           
  7180                           ;RF_Control_B1.c: 166: RF1.CorrectionCounter = 0;
  7181  065F  01C6               	clrf	(_RF1^(0+128)+10)
  7182  0660  01C7               	clrf	((_RF1+1)^(0+128)+10)
  7183                           
  7184                           ;RF_Control_B1.c: 167: RF1.RxStatus = 0;
  7185  0661  11BC               	bcf	_RF1^(0+128),3
  7186                           
  7187                           ;RF_Control_B1.c: 168: RF1.ReceiveGO = 0;
  7188  0662  10BC               	bcf	_RF1^(0+128),1
  7189                           
  7190                           ;RF_Control_B1.c: 169: }
  7191                           ;RF_Control_B1.c: 170: }
  7192                           ;RF_Control_B1.c: 171: }
  7193                           ;RF_Control_B1.c: 172: }
  7194                           ;RF_Control_B1.c: 179: } else {
  7195  0663  0008               	return
  7196  0664                     l2195:	
  7197                           
  7198                           ;RF_Control_B1.c: 180: if (myMain.PowerON == 1) {
  7199  0664  1C20               	btfss	_myMain^(0+128),0
  7200  0665  0008               	return
  7201                           
  7202                           ;RF_Control_B1.c: 181: RF1.Enable = 1;
  7203  0666  143C               	bsf	_RF1^(0+128),0
  7204  0667  0008               	return
  7205  0668                     __end_of_setRF_Main:	
  7206                           
  7207                           	psect	text26
  7208  0BAC                     __ptext26:	
  7209 ;; *************** function _getRxData *****************
  7210 ;; Defined at:
  7211 ;;		line 269 in file "../src/RF_Control_B1.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;		None
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;  error           1   74[BANK0 ] unsigned char 
  7216 ;; Return value:  Size  Location     Type
  7217 ;;		None               void
  7218 ;; Registers used:
  7219 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;Total ram usage:        2 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; Hardware stack levels required when called:   12
  7232 ;; This function calls:
  7233 ;;		_getMain_All_Error_Status
  7234 ;;		_setControl_Lights_Table
  7235 ;;		_setLog_Code
  7236 ;; This function is called by:
  7237 ;;		_setRF_Main
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           
  7242                           ;psect for function _getRxData
  7243  0BAC                     _getRxData:	
  7244                           
  7245                           ;RF_Control_B1.c: 270: char error = getMain_All_Error_Status(0);
  7246                           
  7247                           ;incstack = 0
  7248                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7249  0BAC  3000               	movlw	0
  7250  0BAD  3191  21B8  318B   	fcall	_getMain_All_Error_Status
  7251  0BB0  0020               	movlb	0	; select bank0
  7252  0BB1  00E9               	movwf	??_getRxData
  7253  0BB2  0869               	movf	??_getRxData,w
  7254  0BB3  00EA               	movwf	getRxData@error
  7255                           
  7256                           ;RF_Control_B1.c: 271: if (error == 0) {
  7257  0BB4  08EA               	movf	getRxData@error,f
  7258  0BB5  1D03               	skipz
  7259  0BB6  0008               	return
  7260                           
  7261                           ;RF_Control_B1.c: 272: if (RF1.Learn == 1) {
  7262  0BB7  0021               	movlb	1	; select bank1
  7263  0BB8  1F3C               	btfss	_RF1^(0+128),6
  7264  0BB9  2BCA               	goto	l9524
  7265                           
  7266                           ;RF_Control_B1.c: 273: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7267  0BBA  0023               	movlb	3	; select bank3
  7268  0BBB  08A0               	movf	_RF_Data^(0+384),f
  7269  0BBC  1D03               	skipz
  7270  0BBD  2BC7               	goto	l2246
  7271  0BBE  0821               	movf	(_RF_Data^(0+384)+1),w
  7272  0BBF  3A64               	xorlw	100
  7273  0BC0  1D03               	skipz
  7274  0BC1  2BC7               	goto	l2246
  7275                           
  7276                           ;RF_Control_B1.c: 274: setLog_Code();
  7277  0BC2  3192  22BF         	fcall	_setLog_Code
  7278                           
  7279                           ;RF_Control_B1.c: 275: RF1.Checked = 1;
  7280  0BC4  0021               	movlb	1	; select bank1
  7281  0BC5  15BD               	bsf	(_RF1^(0+128)+1),3
  7282                           
  7283                           ;RF_Control_B1.c: 276: } else {
  7284  0BC6  0008               	return
  7285  0BC7                     l2246:	
  7286                           
  7287                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  7288  0BC7  0021               	movlb	1	; select bank1
  7289  0BC8  11BD               	bcf	(_RF1^(0+128)+1),3
  7290                           
  7291                           ;RF_Control_B1.c: 278: }
  7292                           ;RF_Control_B1.c: 279: } else {
  7293  0BC9  0008               	return
  7294  0BCA                     l9524:	
  7295                           
  7296                           ;RF_Control_B1.c: 280: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7297  0BCA  0023               	movlb	3	; select bank3
  7298  0BCB  08A0               	movf	_RF_Data^(0+384),f
  7299  0BCC  1D03               	skipz
  7300  0BCD  2C03               	goto	l9546
  7301  0BCE  0821               	movf	(_RF_Data^(0+384)+1),w
  7302  0BCF  3A02               	xorlw	2
  7303  0BD0  1D03               	skipz
  7304  0BD1  2C03               	goto	l9546
  7305                           
  7306                           ;RF_Control_B1.c: 282: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7307  0BD2  082C               	movf	(_RF_Data^(0+384)+12),w
  7308  0BD3  3AFF               	xorlw	255
  7309  0BD4  1D03               	skipz
  7310  0BD5  2BE2               	goto	l9536
  7311  0BD6  082D               	movf	(_RF_Data^(0+384)+13),w
  7312  0BD7  3AFF               	xorlw	255
  7313  0BD8  1D03               	skipz
  7314  0BD9  2BE2               	goto	l9536
  7315  0BDA  082E               	movf	(_RF_Data^(0+384)+14),w
  7316  0BDB  3AFF               	xorlw	255
  7317  0BDC  1D03               	skipz
  7318  0BDD  2BE2               	goto	l9536
  7319                           
  7320                           ;RF_Control_B1.c: 283: __nop();
  7321  0BDE  0000               	nop
  7322                           
  7323                           ;RF_Control_B1.c: 284: RF1.Checked = 0;
  7324  0BDF  0021               	movlb	1	; select bank1
  7325  0BE0  11BD               	bcf	(_RF1^(0+128)+1),3
  7326                           
  7327                           ;RF_Control_B1.c: 285: } else {
  7328  0BE1  0008               	return
  7329  0BE2                     l9536:	
  7330                           
  7331                           ;RF_Control_B1.c: 286: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7332  0BE2  087B               	movf	_product,w
  7333  0BE3  3E0C               	addlw	12
  7334  0BE4  0086               	movwf	6
  7335  0BE5  3002               	movlw	2	; select bank4/5
  7336  0BE6  0087               	movwf	7
  7337  0BE7  0023               	movlb	3	; select bank3
  7338  0BE8  082C               	movf	(_RF_Data^(0+384)+12),w
  7339  0BE9  0601               	xorwf	1,w
  7340  0BEA  1D03               	skipz
  7341  0BEB  0008               	return
  7342  0BEC  087B               	movf	_product,w
  7343  0BED  3E0D               	addlw	13
  7344  0BEE  0086               	movwf	6
  7345  0BEF  3002               	movlw	2	; select bank4/5
  7346  0BF0  0087               	movwf	7
  7347  0BF1  082D               	movf	(_RF_Data^(0+384)+13),w
  7348  0BF2  0601               	xorwf	1,w
  7349  0BF3  1D03               	skipz
  7350  0BF4  0008               	return
  7351  0BF5  087B               	movf	_product,w
  7352  0BF6  3E0E               	addlw	14
  7353  0BF7  0086               	movwf	6
  7354  0BF8  3002               	movlw	2	; select bank4/5
  7355  0BF9  0087               	movwf	7
  7356  0BFA  082E               	movf	(_RF_Data^(0+384)+14),w
  7357  0BFB  0601               	xorwf	1,w
  7358  0BFC  1D03               	skipz
  7359  0BFD  0008               	return
  7360                           
  7361                           ;RF_Control_B1.c: 287: setControl_Lights_Table();
  7362  0BFE  318B  233E         	fcall	_setControl_Lights_Table
  7363                           
  7364                           ;RF_Control_B1.c: 288: RF1.Checked = 1;
  7365  0C00  0021               	movlb	1	; select bank1
  7366  0C01  15BD               	bsf	(_RF1^(0+128)+1),3
  7367                           
  7368                           ;RF_Control_B1.c: 289: }
  7369                           ;RF_Control_B1.c: 290: }
  7370                           ;RF_Control_B1.c: 291: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7371  0C02  0008               	return
  7372  0C03                     l9546:	
  7373  0C03  0023               	movlb	3	; select bank3
  7374  0C04  0820               	movf	_RF_Data^(0+384),w
  7375  0C05  3AFF               	xorlw	255
  7376  0C06  1D03               	skipz
  7377  0C07  2C0E               	goto	l9552
  7378  0C08  0821               	movf	(_RF_Data^(0+384)+1),w
  7379  0C09  3A02               	xorlw	2
  7380  0C0A  1D03               	skipz
  7381  0C0B  2C0E               	goto	l9552
  7382                           
  7383                           ;RF_Control_B1.c: 292: __nop();
  7384  0C0C  0000               	nop
  7385                           
  7386                           ;RF_Control_B1.c: 293: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7387  0C0D  0008               	return
  7388  0C0E                     l9552:	
  7389  0C0E  0023               	movlb	3	; select bank3
  7390  0C0F  08A0               	movf	_RF_Data^(0+384),f
  7391  0C10  1D03               	skipz
  7392  0C11  2C18               	goto	l2256
  7393  0C12  0821               	movf	(_RF_Data^(0+384)+1),w
  7394  0C13  3A65               	xorlw	101
  7395  0C14  1D03               	skipz
  7396  0C15  2C18               	goto	l2256
  7397                           
  7398                           ;RF_Control_B1.c: 294: __nop();
  7399  0C16  0000               	nop
  7400                           
  7401                           ;RF_Control_B1.c: 295: } else {
  7402  0C17  0008               	return
  7403  0C18                     l2256:	
  7404                           
  7405                           ;RF_Control_B1.c: 296: RF1.Checked = 0;
  7406  0C18  0021               	movlb	1	; select bank1
  7407  0C19  11BD               	bcf	(_RF1^(0+128)+1),3
  7408                           
  7409                           ;RF_Control_B1.c: 297: }
  7410                           ;RF_Control_B1.c: 302: }
  7411                           ;RF_Control_B1.c: 303: } else {
  7412  0C1A  0008               	return
  7413  0C1B                     __end_of_getRxData:	
  7414                           ;RF_Control_B1.c: 304: ;
  7415                           
  7416                           
  7417                           	psect	text27
  7418  12BF                     __ptext27:	
  7419 ;; *************** function _setLog_Code *****************
  7420 ;; Defined at:
  7421 ;;		line 309 in file "../src/RF_Control_B1.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;		None
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;		None
  7426 ;; Return value:  Size  Location     Type
  7427 ;;		None               void
  7428 ;; Registers used:
  7429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;Total ram usage:        1 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    7
  7442 ;; This function calls:
  7443 ;;		_setBuz
  7444 ;;		_setMemory_LoopSave
  7445 ;;		_setMemory_Modify
  7446 ;; This function is called by:
  7447 ;;		_getRxData
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451                           
  7452                           ;psect for function _setLog_Code
  7453  12BF                     _setLog_Code:	
  7454                           
  7455                           ;RF_Control_B1.c: 310: RF1.Learn = 0;
  7456                           
  7457                           ;incstack = 0
  7458                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7459  12BF  0021               	movlb	1	; select bank1
  7460  12C0  133C               	bcf	_RF1^(0+128),6
  7461                           
  7462                           ;RF_Control_B1.c: 311: product->Data[12]=RF_Data[12];
  7463  12C1  0023               	movlb	3	; select bank3
  7464  12C2  082C               	movf	(_RF_Data^(0+384)+12),w
  7465  12C3  0020               	movlb	0	; select bank0
  7466  12C4  00AD               	movwf	??_setLog_Code
  7467  12C5  087B               	movf	_product,w
  7468  12C6  3E0C               	addlw	12
  7469  12C7  0086               	movwf	6
  7470  12C8  3002               	movlw	2	; select bank4/5
  7471  12C9  0087               	movwf	7
  7472  12CA  082D               	movf	??_setLog_Code,w
  7473  12CB  0081               	movwf	1
  7474                           
  7475                           ;RF_Control_B1.c: 312: product->Data[13]=RF_Data[13];
  7476  12CC  0023               	movlb	3	; select bank3
  7477  12CD  082D               	movf	(_RF_Data^(0+384)+13),w
  7478  12CE  0020               	movlb	0	; select bank0
  7479  12CF  00AD               	movwf	??_setLog_Code
  7480  12D0  087B               	movf	_product,w
  7481  12D1  3E0D               	addlw	13
  7482  12D2  0086               	movwf	6
  7483  12D3  3002               	movlw	2	; select bank4/5
  7484  12D4  0087               	movwf	7
  7485  12D5  082D               	movf	??_setLog_Code,w
  7486  12D6  0081               	movwf	1
  7487                           
  7488                           ;RF_Control_B1.c: 313: product->Data[14]=RF_Data[14];
  7489  12D7  0023               	movlb	3	; select bank3
  7490  12D8  082E               	movf	(_RF_Data^(0+384)+14),w
  7491  12D9  0020               	movlb	0	; select bank0
  7492  12DA  00AD               	movwf	??_setLog_Code
  7493  12DB  087B               	movf	_product,w
  7494  12DC  3E0E               	addlw	14
  7495  12DD  0086               	movwf	6
  7496  12DE  3002               	movlw	2	; select bank4/5
  7497  12DF  0087               	movwf	7
  7498  12E0  082D               	movf	??_setLog_Code,w
  7499  12E1  0081               	movwf	1
  7500                           
  7501                           ;RF_Control_B1.c: 314: setBuz(1, 100);
  7502  12E2  3064               	movlw	100
  7503  12E3  00A9               	movwf	setBuz@time
  7504  12E4  3000               	movlw	0
  7505  12E5  00AA               	movwf	setBuz@time+1
  7506  12E6  3001               	movlw	1
  7507  12E7  3197  274D  3192   	fcall	_setBuz
  7508                           
  7509                           ;RF_Control_B1.c: 315: if (myMain.First == 1) {
  7510  12EA  0021               	movlb	1	; select bank1
  7511  12EB  1EA0               	btfss	_myMain^(0+128),5
  7512  12EC  2AF1               	goto	l2262
  7513                           
  7514                           ;RF_Control_B1.c: 316: setMemory_LoopSave(1);
  7515  12ED  3001               	movlw	1
  7516  12EE  319D  2503  3192   	fcall	_setMemory_LoopSave
  7517  12F1                     l2262:	
  7518                           
  7519                           ;RF_Control_B1.c: 317: }
  7520                           ;RF_Control_B1.c: 318: setMemory_Modify(1);
  7521  12F1  3001               	movlw	1
  7522  12F2  319C  24F0         	fcall	_setMemory_Modify
  7523  12F4  0008               	return
  7524  12F5                     __end_of_setLog_Code:	
  7525                           
  7526                           	psect	text28
  7527  1D03                     __ptext28:	
  7528 ;; *************** function _setMemory_LoopSave *****************
  7529 ;; Defined at:
  7530 ;;		line 1006 in file "../src/MCU_B1.c"
  7531 ;; Parameters:    Size  Location     Type
  7532 ;;  command         1    wreg     unsigned char 
  7533 ;; Auto vars:     Size  Location     Type
  7534 ;;  command         1    1[BANK0 ] unsigned char 
  7535 ;; Return value:  Size  Location     Type
  7536 ;;		None               void
  7537 ;; Registers used:
  7538 ;;		wreg, status,2, status,0
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7548 ;;Total ram usage:        2 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:    5
  7551 ;; This function calls:
  7552 ;;		Nothing
  7553 ;; This function is called by:
  7554 ;;		_setLog_Code
  7555 ;; This function uses a non-reentrant model
  7556 ;;
  7557                           
  7558                           
  7559                           ;psect for function _setMemory_LoopSave
  7560  1D03                     _setMemory_LoopSave:	
  7561                           
  7562                           ;incstack = 0
  7563                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7564                           ;setMemory_LoopSave@command stored from wreg
  7565  1D03  0020               	movlb	0	; select bank0
  7566  1D04  00A1               	movwf	setMemory_LoopSave@command
  7567                           
  7568                           ;MCU_B1.c: 1007: Memory.LoopSave = command == 1 ? 1 : 0;
  7569  1D05  0821               	movf	setMemory_LoopSave@command,w
  7570  1D06  3A01               	xorlw	1
  7571  1D07  3000               	movlw	0
  7572  1D08  1903               	skipnz
  7573  1D09  3001               	movlw	1
  7574  1D0A  00A0               	movwf	??_setMemory_LoopSave
  7575  1D0B  0DA0               	rlf	??_setMemory_LoopSave,f
  7576  1D0C  0DA0               	rlf	??_setMemory_LoopSave,f
  7577  1D0D  0024               	movlb	4	; select bank4
  7578  1D0E  0844               	movf	(_Memory^(0+512)+36),w
  7579  1D0F  0020               	movlb	0	; select bank0
  7580  1D10  0620               	xorwf	??_setMemory_LoopSave,w
  7581  1D11  39FB               	andlw	-5
  7582  1D12  0620               	xorwf	??_setMemory_LoopSave,w
  7583  1D13  0024               	movlb	4	; select bank4
  7584  1D14  00C4               	movwf	(_Memory^(0+512)+36)
  7585  1D15  0008               	return
  7586  1D16                     __end_of_setMemory_LoopSave:	
  7587                           
  7588                           	psect	text29
  7589  0B3E                     __ptext29:	
  7590 ;; *************** function _setControl_Lights_Table *****************
  7591 ;; Defined at:
  7592 ;;		line 322 in file "../src/RF_Control_B1.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;		None
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;		None
  7597 ;; Return value:  Size  Location     Type
  7598 ;;		None               void
  7599 ;; Registers used:
  7600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7601 ;; Tracked objects:
  7602 ;;		On entry : 0/0
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;Total ram usage:        0 bytes
  7611 ;; Hardware stack levels used:    1
  7612 ;; Hardware stack levels required when called:   11
  7613 ;; This function calls:
  7614 ;;		_setBuz
  7615 ;;		_setRFSW_AdjControl
  7616 ;;		_setRFSW_Control
  7617 ;;		_setTxData
  7618 ;; This function is called by:
  7619 ;;		_getRxData
  7620 ;; This function uses a non-reentrant model
  7621 ;;
  7622                           
  7623                           
  7624                           ;psect for function _setControl_Lights_Table
  7625  0B3E                     _setControl_Lights_Table:	
  7626                           
  7627                           ;RF_Control_B1.c: 323: switch (RF_Data[15]) {
  7628                           
  7629                           ;incstack = 0
  7630                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7631  0B3E  2B90               	goto	l9148
  7632  0B3F                     l9120:	
  7633                           ;RF_Control_B1.c: 324: case 0x00:
  7634                           
  7635                           
  7636                           ;RF_Control_B1.c: 327: setRFSW_Control(1);
  7637  0B3F  3001               	movlw	1
  7638  0B40  3196  269D  318B   	fcall	_setRFSW_Control
  7639                           
  7640                           ;RF_Control_B1.c: 333: setRFSW_Control(2);
  7641  0B43  3002               	movlw	2
  7642  0B44  3196  269D  318B   	fcall	_setRFSW_Control
  7643                           
  7644                           ;RF_Control_B1.c: 341: product->Data[9]=0;
  7645  0B47  087B               	movf	_product,w
  7646  0B48  3E09               	addlw	9
  7647  0B49  0086               	movwf	6
  7648  0B4A  3002               	movlw	2	; select bank4/5
  7649  0B4B  0087               	movwf	7
  7650  0B4C  0181               	clrf	1
  7651                           
  7652                           ;RF_Control_B1.c: 342: product->Data[11]=0;
  7653  0B4D  087B               	movf	_product,w
  7654  0B4E  3E0B               	addlw	11
  7655  0B4F  0086               	movwf	6
  7656  0B50  3002               	movlw	2	; select bank4/5
  7657  0B51  0087               	movwf	7
  7658  0B52  0181               	clrf	1
  7659                           
  7660                           ;RF_Control_B1.c: 343: product->Data[15]=0;
  7661  0B53  087B               	movf	_product,w
  7662  0B54  3E0F               	addlw	15
  7663  0B55  0086               	movwf	6
  7664  0B56  3002               	movlw	2	; select bank4/5
  7665  0B57  0087               	movwf	7
  7666  0B58  0181               	clrf	1
  7667                           
  7668                           ;RF_Control_B1.c: 344: product->Data[17]=0;
  7669  0B59  087B               	movf	_product,w
  7670  0B5A  3E11               	addlw	17
  7671  0B5B  0086               	movwf	6
  7672  0B5C  3002               	movlw	2	; select bank4/5
  7673  0B5D  0087               	movwf	7
  7674  0B5E  0181               	clrf	1
  7675                           
  7676                           ;RF_Control_B1.c: 345: setBuz(1, 100);
  7677  0B5F  3064               	movlw	100
  7678  0B60  0020               	movlb	0	; select bank0
  7679  0B61  00A9               	movwf	setBuz@time
  7680  0B62  3000               	movlw	0
  7681  0B63  00AA               	movwf	setBuz@time+1
  7682  0B64  3001               	movlw	1
  7683  0B65  3197  274D  318B   	fcall	_setBuz
  7684                           
  7685                           ;RF_Control_B1.c: 346: setTxData();
  7686  0B68  318E  2625         	fcall	_setTxData
  7687                           
  7688                           ;RF_Control_B1.c: 347: break;
  7689  0B6A  0008               	return
  7690  0B6B                     l9134:	
  7691                           ;RF_Control_B1.c: 348: case 0x20:
  7692                           
  7693                           
  7694                           ;RF_Control_B1.c: 349: product->Data[9]=0;
  7695  0B6B  087B               	movf	_product,w
  7696  0B6C  3E09               	addlw	9
  7697  0B6D  0086               	movwf	6
  7698  0B6E  3002               	movlw	2	; select bank4/5
  7699  0B6F  0087               	movwf	7
  7700  0B70  0181               	clrf	1
  7701                           
  7702                           ;RF_Control_B1.c: 350: product->Data[11]=0;
  7703  0B71  087B               	movf	_product,w
  7704  0B72  3E0B               	addlw	11
  7705  0B73  0086               	movwf	6
  7706  0B74  3002               	movlw	2	; select bank4/5
  7707  0B75  0087               	movwf	7
  7708  0B76  0181               	clrf	1
  7709                           
  7710                           ;RF_Control_B1.c: 351: product->Data[17]=0;
  7711  0B77  087B               	movf	_product,w
  7712  0B78  3E11               	addlw	17
  7713  0B79  0086               	movwf	6
  7714  0B7A  3002               	movlw	2	; select bank4/5
  7715  0B7B  0087               	movwf	7
  7716  0B7C  0181               	clrf	1
  7717                           
  7718                           ;RF_Control_B1.c: 352: setTxData();
  7719  0B7D  318E  2625         	fcall	_setTxData
  7720                           
  7721                           ;RF_Control_B1.c: 353: break;
  7722  0B7F  0008               	return
  7723  0B80                     l9138:	
  7724                           ;RF_Control_B1.c: 354: case 0x01:
  7725                           
  7726                           
  7727                           ;RF_Control_B1.c: 356: setRFSW_Control(1);
  7728  0B80  3001               	movlw	1
  7729  0B81  3196  269D         	fcall	_setRFSW_Control
  7730                           
  7731                           ;RF_Control_B1.c: 358: break;
  7732  0B83  0008               	return
  7733  0B84                     l9140:	
  7734                           ;RF_Control_B1.c: 359: case 0x02:
  7735                           
  7736                           
  7737                           ;RF_Control_B1.c: 361: setRFSW_Control(2);
  7738  0B84  3002               	movlw	2
  7739  0B85  3196  269D         	fcall	_setRFSW_Control
  7740                           
  7741                           ;RF_Control_B1.c: 368: break;
  7742                           
  7743                           ;RF_Control_B1.c: 364: case 0x03:
  7744                           
  7745                           ;RF_Control_B1.c: 363: break;
  7746  0B87  0008               	return
  7747  0B88                     l9142:	
  7748                           ;RF_Control_B1.c: 369: case 0x11:
  7749                           
  7750                           
  7751                           ;RF_Control_B1.c: 372: setRFSW_AdjControl(1);
  7752  0B88  3001               	movlw	1
  7753  0B89  3193  2365         	fcall	_setRFSW_AdjControl
  7754                           
  7755                           ;RF_Control_B1.c: 375: break;
  7756  0B8B  0008               	return
  7757  0B8C                     l9144:	
  7758                           ;RF_Control_B1.c: 376: case 0x21:
  7759                           
  7760                           
  7761                           ;RF_Control_B1.c: 379: setRFSW_AdjControl(2);
  7762  0B8C  3002               	movlw	2
  7763  0B8D  3193  2365         	fcall	_setRFSW_AdjControl
  7764                           
  7765                           ;RF_Control_B1.c: 390: }
  7766                           
  7767                           ;RF_Control_B1.c: 389: break;
  7768                           
  7769                           ;RF_Control_B1.c: 383: case 0x31:
  7770                           
  7771                           ;RF_Control_B1.c: 382: break;
  7772  0B8F  0008               	return
  7773  0B90                     l9148:	
  7774  0B90  0023               	movlb	3	; select bank3
  7775  0B91  082F               	movf	(_RF_Data^(0+384)+15),w
  7776                           
  7777                           ; Switch size 1, requested type "space"
  7778                           ; Number of cases is 8, Range of values is 0 to 49
  7779                           ; switch strategies available:
  7780                           ; Name         Instructions Cycles
  7781                           ; simple_byte           25    13 (average)
  7782                           ; direct_byte          106     6 (fixed)
  7783                           ; jumptable            260     6 (fixed)
  7784                           ;	Chosen strategy is simple_byte
  7785  0B92  3A00               	xorlw	0	; case 0
  7786  0B93  1903               	skipnz
  7787  0B94  2B3F               	goto	l9120
  7788  0B95  3A01               	xorlw	1	; case 1
  7789  0B96  1903               	skipnz
  7790  0B97  2B80               	goto	l9138
  7791  0B98  3A03               	xorlw	3	; case 2
  7792  0B99  1903               	skipnz
  7793  0B9A  2B84               	goto	l9140
  7794  0B9B  3A01               	xorlw	1	; case 3
  7795  0B9C  1903               	skipnz
  7796  0B9D  2BAB               	goto	l2276
  7797  0B9E  3A12               	xorlw	18	; case 17
  7798  0B9F  1903               	skipnz
  7799  0BA0  2B88               	goto	l9142
  7800  0BA1  3A31               	xorlw	49	; case 32
  7801  0BA2  1903               	skipnz
  7802  0BA3  2B6B               	goto	l9134
  7803  0BA4  3A01               	xorlw	1	; case 33
  7804  0BA5  1903               	skipnz
  7805  0BA6  2B8C               	goto	l9144
  7806  0BA7  3A10               	xorlw	16	; case 49
  7807  0BA8  1903               	skipnz
  7808  0BA9  2BAB               	goto	l2276
  7809  0BAA  2BAB               	goto	l2276
  7810  0BAB                     l2276:	
  7811  0BAB  0008               	return
  7812  0BAC                     __end_of_setControl_Lights_Table:	
  7813                           
  7814                           	psect	text30
  7815  169D                     __ptext30:	
  7816 ;; *************** function _setRFSW_Control *****************
  7817 ;; Defined at:
  7818 ;;		line 473 in file "../src/RF_Control_B1.c"
  7819 ;; Parameters:    Size  Location     Type
  7820 ;;  sw              1    wreg     unsigned char 
  7821 ;; Auto vars:     Size  Location     Type
  7822 ;;  sw              1   72[BANK0 ] unsigned char 
  7823 ;;  status          1   71[BANK0 ] unsigned char 
  7824 ;; Return value:  Size  Location     Type
  7825 ;;		None               void
  7826 ;; Registers used:
  7827 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7828 ;; Tracked objects:
  7829 ;;		On entry : 0/0
  7830 ;;		On exit  : 0/0
  7831 ;;		Unchanged: 0/0
  7832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7836 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7837 ;;Total ram usage:        3 bytes
  7838 ;; Hardware stack levels used:    1
  7839 ;; Hardware stack levels required when called:   10
  7840 ;; This function calls:
  7841 ;;		_getDimmerLights_Status
  7842 ;;		_setDelayOff_GO
  7843 ;;		_setDimmerLights_SwOff
  7844 ;;		_setDimmerLights_SwOn
  7845 ;;		_setRF_DimmerLights
  7846 ;; This function is called by:
  7847 ;;		_setControl_Lights_Table
  7848 ;; This function uses a non-reentrant model
  7849 ;;
  7850                           
  7851                           
  7852                           ;psect for function _setRFSW_Control
  7853  169D                     _setRFSW_Control:	
  7854                           
  7855                           ;incstack = 0
  7856                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7857                           ;setRFSW_Control@sw stored from wreg
  7858  169D  0020               	movlb	0	; select bank0
  7859  169E  00E8               	movwf	setRFSW_Control@sw
  7860                           
  7861                           ;RF_Control_B1.c: 474: char status = 0;
  7862  169F  01E7               	clrf	setRFSW_Control@status
  7863                           
  7864                           ;RF_Control_B1.c: 478: setDimmerLights_SwOn(sw);
  7865  16A0  0868               	movf	setRFSW_Control@sw,w
  7866  16A1  3194  2470  3196   	fcall	_setDimmerLights_SwOn
  7867                           
  7868                           ;RF_Control_B1.c: 479: status = getDimmerLights_Status(sw);
  7869  16A4  0020               	movlb	0	; select bank0
  7870  16A5  0868               	movf	setRFSW_Control@sw,w
  7871  16A6  319C  2440  3196   	fcall	_getDimmerLights_Status
  7872  16A9  0020               	movlb	0	; select bank0
  7873  16AA  00E6               	movwf	??_setRFSW_Control
  7874  16AB  0866               	movf	??_setRFSW_Control,w
  7875  16AC  00E7               	movwf	setRFSW_Control@status
  7876                           
  7877                           ;RF_Control_B1.c: 481: if (status == 1) {
  7878  16AD  0867               	movf	setRFSW_Control@status,w
  7879  16AE  3A01               	xorlw	1
  7880  16AF  1D03               	skipz
  7881  16B0  2ECA               	goto	l8960
  7882                           
  7883                           ;RF_Control_B1.c: 482: if (RF_Data[16] == 0x80) {
  7884  16B1  0023               	movlb	3	; select bank3
  7885  16B2  0830               	movf	(_RF_Data^(0+384)+16),w
  7886  16B3  3A80               	xorlw	128
  7887  16B4  1D03               	skipz
  7888  16B5  2EC3               	goto	l2280
  7889                           
  7890                           ;RF_Control_B1.c: 483: setDelayOff_GO(sw, 1, RF_Data[17]);
  7891  16B6  0020               	movlb	0	; select bank0
  7892  16B7  01AA               	clrf	setDelayOff_GO@command
  7893  16B8  0AAA               	incf	setDelayOff_GO@command,f
  7894  16B9  0023               	movlb	3	; select bank3
  7895  16BA  0831               	movf	(_RF_Data^(0+384)+17),w
  7896  16BB  0020               	movlb	0	; select bank0
  7897  16BC  00E6               	movwf	??_setRFSW_Control
  7898  16BD  0866               	movf	??_setRFSW_Control,w
  7899  16BE  00AB               	movwf	setDelayOff_GO@value
  7900  16BF  0868               	movf	setRFSW_Control@sw,w
  7901  16C0  3188  20E5  3196   	fcall	_setDelayOff_GO
  7902  16C3                     l2280:	
  7903                           
  7904                           ;RF_Control_B1.c: 484: }
  7905                           ;RF_Control_B1.c: 486: setRF_DimmerLights(sw, 1);
  7906  16C3  0020               	movlb	0	; select bank0
  7907  16C4  01DD               	clrf	setRF_DimmerLights@on
  7908  16C5  0ADD               	incf	setRF_DimmerLights@on,f
  7909  16C6  0868               	movf	setRFSW_Control@sw,w
  7910  16C7  318A  22D2         	fcall	_setRF_DimmerLights
  7911                           
  7912                           ;RF_Control_B1.c: 488: } else {
  7913  16C9  0008               	return
  7914  16CA                     l8960:	
  7915                           
  7916                           ;RF_Control_B1.c: 489: if (RF_Data[16] == 0x80) {
  7917  16CA  0023               	movlb	3	; select bank3
  7918  16CB  0830               	movf	(_RF_Data^(0+384)+16),w
  7919  16CC  3A80               	xorlw	128
  7920  16CD  1D03               	skipz
  7921  16CE  2EE3               	goto	l8964
  7922                           
  7923                           ;RF_Control_B1.c: 490: setDelayOff_GO(sw, 1, RF_Data[17]);
  7924  16CF  0020               	movlb	0	; select bank0
  7925  16D0  01AA               	clrf	setDelayOff_GO@command
  7926  16D1  0AAA               	incf	setDelayOff_GO@command,f
  7927  16D2  0023               	movlb	3	; select bank3
  7928  16D3  0831               	movf	(_RF_Data^(0+384)+17),w
  7929  16D4  0020               	movlb	0	; select bank0
  7930  16D5  00E6               	movwf	??_setRFSW_Control
  7931  16D6  0866               	movf	??_setRFSW_Control,w
  7932  16D7  00AB               	movwf	setDelayOff_GO@value
  7933  16D8  0868               	movf	setRFSW_Control@sw,w
  7934  16D9  3188  20E5  3196   	fcall	_setDelayOff_GO
  7935                           
  7936                           ;RF_Control_B1.c: 491: setRF_DimmerLights(sw, 1);
  7937  16DC  0020               	movlb	0	; select bank0
  7938  16DD  01DD               	clrf	setRF_DimmerLights@on
  7939  16DE  0ADD               	incf	setRF_DimmerLights@on,f
  7940  16DF  0868               	movf	setRFSW_Control@sw,w
  7941  16E0  318A  22D2         	fcall	_setRF_DimmerLights
  7942                           
  7943                           ;RF_Control_B1.c: 492: } else {
  7944  16E2  0008               	return
  7945  16E3                     l8964:	
  7946                           
  7947                           ;RF_Control_B1.c: 494: setDimmerLights_SwOff(sw);
  7948  16E3  0020               	movlb	0	; select bank0
  7949  16E4  0868               	movf	setRFSW_Control@sw,w
  7950  16E5  3188  2086  3196   	fcall	_setDimmerLights_SwOff
  7951                           
  7952                           ;RF_Control_B1.c: 495: setRF_DimmerLights(sw, 0);
  7953  16E8  0020               	movlb	0	; select bank0
  7954  16E9  01DD               	clrf	setRF_DimmerLights@on
  7955  16EA  0868               	movf	setRFSW_Control@sw,w
  7956  16EB  318A  22D2  3196   	fcall	_setRF_DimmerLights
  7957                           
  7958                           ;RF_Control_B1.c: 497: setDelayOff_GO(sw, 0, 0);
  7959  16EE  0020               	movlb	0	; select bank0
  7960  16EF  01AA               	clrf	setDelayOff_GO@command
  7961  16F0  01AB               	clrf	setDelayOff_GO@value
  7962  16F1  0868               	movf	setRFSW_Control@sw,w
  7963  16F2  3188  20E5         	fcall	_setDelayOff_GO
  7964  16F4  0008               	return
  7965  16F5                     __end_of_setRFSW_Control:	
  7966                           
  7967                           	psect	text31
  7968  1365                     __ptext31:	
  7969 ;; *************** function _setRFSW_AdjControl *****************
  7970 ;; Defined at:
  7971 ;;		line 503 in file "../src/RF_Control_B1.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;  sw              1    wreg     unsigned char 
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;  sw              1   71[BANK0 ] unsigned char 
  7976 ;;  status          1   70[BANK0 ] unsigned char 
  7977 ;; Return value:  Size  Location     Type
  7978 ;;		None               void
  7979 ;; Registers used:
  7980 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7981 ;; Tracked objects:
  7982 ;;		On entry : 0/0
  7983 ;;		On exit  : 0/0
  7984 ;;		Unchanged: 0/0
  7985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7987 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7988 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7989 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7990 ;;Total ram usage:        4 bytes
  7991 ;; Hardware stack levels used:    1
  7992 ;; Hardware stack levels required when called:   10
  7993 ;; This function calls:
  7994 ;;		_getDimmerLights_Status
  7995 ;;		_setMemory_Modify
  7996 ;;		_setRF_DimmerValue
  7997 ;;		_setTxData
  7998 ;; This function is called by:
  7999 ;;		_setControl_Lights_Table
  8000 ;; This function uses a non-reentrant model
  8001 ;;
  8002                           
  8003                           
  8004                           ;psect for function _setRFSW_AdjControl
  8005  1365                     _setRFSW_AdjControl:	
  8006                           
  8007                           ;incstack = 0
  8008                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8009                           ;setRFSW_AdjControl@sw stored from wreg
  8010  1365  0020               	movlb	0	; select bank0
  8011  1366  00E7               	movwf	setRFSW_AdjControl@sw
  8012                           
  8013                           ;RF_Control_B1.c: 504: char status = 0;
  8014  1367  01E6               	clrf	setRFSW_AdjControl@status
  8015                           
  8016                           ;RF_Control_B1.c: 506: status = getDimmerLights_Status(sw);
  8017  1368  0867               	movf	setRFSW_AdjControl@sw,w
  8018  1369  319C  2440  3193   	fcall	_getDimmerLights_Status
  8019  136C  0020               	movlb	0	; select bank0
  8020  136D  00E4               	movwf	??_setRFSW_AdjControl
  8021  136E  0864               	movf	??_setRFSW_AdjControl,w
  8022  136F  00E6               	movwf	setRFSW_AdjControl@status
  8023                           
  8024                           ;RF_Control_B1.c: 509: if (status == 1) {
  8025  1370  0866               	movf	setRFSW_AdjControl@status,w
  8026  1371  3A01               	xorlw	1
  8027  1372  1D03               	skipz
  8028  1373  2B7E               	goto	l8976
  8029                           
  8030                           ;RF_Control_B1.c: 510: setMemory_Modify(1);
  8031  1374  3001               	movlw	1
  8032  1375  319C  24F0  3193   	fcall	_setMemory_Modify
  8033                           
  8034                           ;RF_Control_B1.c: 511: setRF_DimmerValue(sw);
  8035  1378  0020               	movlb	0	; select bank0
  8036  1379  0867               	movf	setRFSW_AdjControl@sw,w
  8037  137A  3192  221F  3193   	fcall	_setRF_DimmerValue
  8038                           
  8039                           ;RF_Control_B1.c: 512: } else {
  8040  137D  2B90               	goto	l2288
  8041  137E                     l8976:	
  8042                           
  8043                           ;RF_Control_B1.c: 513: product->Data[9]=product->Data[20 + sw];
  8044  137E  0020               	movlb	0	; select bank0
  8045  137F  0867               	movf	setRFSW_AdjControl@sw,w
  8046  1380  3E14               	addlw	20
  8047  1381  077B               	addwf	_product,w
  8048  1382  00E4               	movwf	??_setRFSW_AdjControl
  8049  1383  0864               	movf	??_setRFSW_AdjControl,w
  8050  1384  0086               	movwf	6
  8051  1385  3002               	movlw	2	; select bank4/5
  8052  1386  0087               	movwf	7
  8053  1387  0801               	movf	1,w
  8054  1388  00E5               	movwf	??_setRFSW_AdjControl+1
  8055  1389  087B               	movf	_product,w
  8056  138A  3E09               	addlw	9
  8057  138B  0086               	movwf	6
  8058  138C  3002               	movlw	2	; select bank4/5
  8059  138D  0087               	movwf	7
  8060  138E  0865               	movf	??_setRFSW_AdjControl+1,w
  8061  138F  0081               	movwf	1
  8062  1390                     l2288:	
  8063                           
  8064                           ;RF_Control_B1.c: 514: }
  8065                           ;RF_Control_B1.c: 515: product->Data[17]=product->Data[26 + sw];
  8066  1390  0020               	movlb	0	; select bank0
  8067  1391  0867               	movf	setRFSW_AdjControl@sw,w
  8068  1392  3E1A               	addlw	26
  8069  1393  077B               	addwf	_product,w
  8070  1394  00E4               	movwf	??_setRFSW_AdjControl
  8071  1395  0864               	movf	??_setRFSW_AdjControl,w
  8072  1396  0086               	movwf	6
  8073  1397  3002               	movlw	2	; select bank4/5
  8074  1398  0087               	movwf	7
  8075  1399  0801               	movf	1,w
  8076  139A  00E5               	movwf	??_setRFSW_AdjControl+1
  8077  139B  087B               	movf	_product,w
  8078  139C  3E11               	addlw	17
  8079  139D  0086               	movwf	6
  8080  139E  3002               	movlw	2	; select bank4/5
  8081  139F  0087               	movwf	7
  8082  13A0  0865               	movf	??_setRFSW_AdjControl+1,w
  8083  13A1  0081               	movwf	1
  8084                           
  8085                           ;RF_Control_B1.c: 516: setTxData();
  8086  13A2  318E  2625         	fcall	_setTxData
  8087  13A4  0008               	return
  8088  13A5                     __end_of_setRFSW_AdjControl:	
  8089                           
  8090                           	psect	text32
  8091  121F                     __ptext32:	
  8092 ;; *************** function _setRF_DimmerValue *****************
  8093 ;; Defined at:
  8094 ;;		line 521 in file "../src/RF_Control_B1.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;  lights          1    wreg     unsigned char 
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;  lights          1   67[BANK0 ] unsigned char 
  8099 ;; Return value:  Size  Location     Type
  8100 ;;		None               void
  8101 ;; Registers used:
  8102 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;Total ram usage:        3 bytes
  8113 ;; Hardware stack levels used:    1
  8114 ;; Hardware stack levels required when called:    9
  8115 ;; This function calls:
  8116 ;;		_setDimmerLights_AdjRF
  8117 ;; This function is called by:
  8118 ;;		_setRFSW_AdjControl
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           
  8123                           ;psect for function _setRF_DimmerValue
  8124  121F                     _setRF_DimmerValue:	
  8125                           
  8126                           ;incstack = 0
  8127                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8128                           ;setRF_DimmerValue@lights stored from wreg
  8129  121F  0020               	movlb	0	; select bank0
  8130  1220  00E3               	movwf	setRF_DimmerValue@lights
  8131                           
  8132                           ;RF_Control_B1.c: 522: if (RF_Data[9] > 0x64) {
  8133  1221  3065               	movlw	101
  8134  1222  0023               	movlb	3	; select bank3
  8135  1223  0229               	subwf	(_RF_Data^(0+384)+9),w
  8136  1224  1C03               	skipc
  8137  1225  2A2C               	goto	l8884
  8138                           
  8139                           ;RF_Control_B1.c: 523: RF_Data[9] = 0x64;
  8140  1226  3064               	movlw	100
  8141  1227  0020               	movlb	0	; select bank0
  8142  1228  00E1               	movwf	??_setRF_DimmerValue
  8143  1229  0861               	movf	??_setRF_DimmerValue,w
  8144  122A  0023               	movlb	3	; select bank3
  8145  122B  00A9               	movwf	(_RF_Data^(0+384)+9)
  8146  122C                     l8884:	
  8147                           
  8148                           ;RF_Control_B1.c: 524: }
  8149                           ;RF_Control_B1.c: 525: product->Data[9]=RF_Data[9];
  8150  122C  0829               	movf	(_RF_Data^(0+384)+9),w
  8151  122D  0020               	movlb	0	; select bank0
  8152  122E  00E1               	movwf	??_setRF_DimmerValue
  8153  122F  087B               	movf	_product,w
  8154  1230  3E09               	addlw	9
  8155  1231  0086               	movwf	6
  8156  1232  3002               	movlw	2	; select bank4/5
  8157  1233  0087               	movwf	7
  8158  1234  0861               	movf	??_setRF_DimmerValue,w
  8159  1235  0081               	movwf	1
  8160                           
  8161                           ;RF_Control_B1.c: 526: product->Data[11]=lights;
  8162  1236  0863               	movf	setRF_DimmerValue@lights,w
  8163  1237  00E1               	movwf	??_setRF_DimmerValue
  8164  1238  087B               	movf	_product,w
  8165  1239  3E0B               	addlw	11
  8166  123A  0086               	movwf	6
  8167  123B  3002               	movlw	2	; select bank4/5
  8168  123C  0087               	movwf	7
  8169  123D  0861               	movf	??_setRF_DimmerValue,w
  8170  123E  0081               	movwf	1
  8171                           
  8172                           ;RF_Control_B1.c: 527: product->Data[(20 + lights)]=product->Data[9];
  8173  123F  087B               	movf	_product,w
  8174  1240  3E09               	addlw	9
  8175  1241  0086               	movwf	6
  8176  1242  3002               	movlw	2	; select bank4/5
  8177  1243  0087               	movwf	7
  8178  1244  0801               	movf	1,w
  8179  1245  00E1               	movwf	??_setRF_DimmerValue
  8180  1246  0863               	movf	setRF_DimmerValue@lights,w
  8181  1247  3E14               	addlw	20
  8182  1248  077B               	addwf	_product,w
  8183  1249  00E2               	movwf	??_setRF_DimmerValue+1
  8184  124A  0862               	movf	??_setRF_DimmerValue+1,w
  8185  124B  0086               	movwf	6
  8186  124C  3002               	movlw	2	; select bank4/5
  8187  124D  0087               	movwf	7
  8188  124E  0861               	movf	??_setRF_DimmerValue,w
  8189  124F  0081               	movwf	1
  8190                           
  8191                           ;RF_Control_B1.c: 528: setDimmerLights_AdjRF(lights);
  8192  1250  0863               	movf	setRF_DimmerValue@lights,w
  8193  1251  319F  2797         	fcall	_setDimmerLights_AdjRF
  8194  1253  0008               	return
  8195  1254                     __end_of_setRF_DimmerValue:	
  8196                           
  8197                           	psect	text33
  8198  1F97                     __ptext33:	
  8199 ;; *************** function _setDimmerLights_AdjRF *****************
  8200 ;; Defined at:
  8201 ;;		line 776 in file "../src/Dimmer_B1.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;  lights          1    wreg     unsigned char 
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;  lights          1   64[BANK0 ] unsigned char 
  8206 ;; Return value:  Size  Location     Type
  8207 ;;		None               void
  8208 ;; Registers used:
  8209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;Total ram usage:        2 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    8
  8222 ;; This function calls:
  8223 ;;		_DimmerLightsPointSelect
  8224 ;;		_getPercentValue
  8225 ;; This function is called by:
  8226 ;;		_setRF_DimmerValue
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           
  8231                           ;psect for function _setDimmerLights_AdjRF
  8232  1F97                     _setDimmerLights_AdjRF:	
  8233                           
  8234                           ;incstack = 0
  8235                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8236                           ;setDimmerLights_AdjRF@lights stored from wreg
  8237  1F97  0020               	movlb	0	; select bank0
  8238  1F98  00E0               	movwf	setDimmerLights_AdjRF@lights
  8239                           
  8240                           ;Dimmer_B1.c: 777: DimmerLightsPointSelect(lights);
  8241  1F99  0860               	movf	setDimmerLights_AdjRF@lights,w
  8242  1F9A  319C  24DD  319F   	fcall	_DimmerLightsPointSelect
  8243                           
  8244                           ;Dimmer_B1.c: 778: DimmerLights->AdjRF = 1;
  8245  1F9D  0877               	movf	_DimmerLights,w
  8246  1F9E  0086               	movwf	6
  8247  1F9F  3001               	movlw	1	; select bank2/3
  8248  1FA0  0087               	movwf	7
  8249  1FA1  1501               	bsf	1,2
  8250                           
  8251                           ;Dimmer_B1.c: 779: DimmerLights->Signal = 1;
  8252  1FA2  0877               	movf	_DimmerLights,w
  8253  1FA3  0086               	movwf	6
  8254  1FA4  3001               	movlw	1	; select bank2/3
  8255  1FA5  0087               	movwf	7
  8256  1FA6  1481               	bsf	1,1
  8257                           
  8258                           ;Dimmer_B1.c: 780: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8259  1FA7  087B               	movf	_product,w
  8260  1FA8  3E09               	addlw	9
  8261  1FA9  0086               	movwf	6
  8262  1FAA  3002               	movlw	2	; select bank4/5
  8263  1FAB  0087               	movwf	7
  8264  1FAC  0801               	movf	1,w
  8265  1FAD  3188  202B         	fcall	_getPercentValue
  8266  1FAF  0020               	movlb	0	; select bank0
  8267  1FB0  00DF               	movwf	??_setDimmerLights_AdjRF
  8268  1FB1  0877               	movf	_DimmerLights,w
  8269  1FB2  3E05               	addlw	5
  8270  1FB3  0086               	movwf	6
  8271  1FB4  3001               	movlw	1	; select bank2/3
  8272  1FB5  0087               	movwf	7
  8273  1FB6  085F               	movf	??_setDimmerLights_AdjRF,w
  8274  1FB7  0081               	movwf	1
  8275  1FB8  0008               	return
  8276  1FB9                     __end_of_setDimmerLights_AdjRF:	
  8277                           
  8278                           	psect	text34
  8279  082B                     __ptext34:	
  8280 ;; *************** function _getPercentValue *****************
  8281 ;; Defined at:
  8282 ;;		line 888 in file "../src/Dimmer_B1.c"
  8283 ;; Parameters:    Size  Location     Type
  8284 ;;  value           1    wreg     unsigned char 
  8285 ;; Auto vars:     Size  Location     Type
  8286 ;;  value           1   59[BANK0 ] unsigned char 
  8287 ;;  i               3   60[BANK0 ] float 
  8288 ;; Return value:  Size  Location     Type
  8289 ;;                  1    wreg      unsigned char 
  8290 ;; Registers used:
  8291 ;;		wreg, status,2, status,0, pclath, cstack
  8292 ;; Tracked objects:
  8293 ;;		On entry : 0/0
  8294 ;;		On exit  : 0/0
  8295 ;;		Unchanged: 0/0
  8296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;Total ram usage:        6 bytes
  8302 ;; Hardware stack levels used:    1
  8303 ;; Hardware stack levels required when called:    7
  8304 ;; This function calls:
  8305 ;;		___awtoft
  8306 ;;		___ftadd
  8307 ;;		___ftdiv
  8308 ;;		___ftmul
  8309 ;;		___fttol
  8310 ;; This function is called by:
  8311 ;;		_setDimmerLights_AdjRF
  8312 ;; This function uses a non-reentrant model
  8313 ;;
  8314                           
  8315                           
  8316                           ;psect for function _getPercentValue
  8317  082B                     _getPercentValue:	
  8318                           
  8319                           ;incstack = 0
  8320                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8321                           ;getPercentValue@value stored from wreg
  8322  082B  0020               	movlb	0	; select bank0
  8323  082C  00DB               	movwf	getPercentValue@value
  8324                           
  8325                           ;Dimmer_B1.c: 890: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8326  082D  3000               	movlw	0
  8327  082E  00DC               	movwf	getPercentValue@i
  8328  082F  30E0               	movlw	224
  8329  0830  00DD               	movwf	getPercentValue@i+1
  8330  0831  3041               	movlw	65
  8331  0832  00DE               	movwf	getPercentValue@i+2
  8332                           
  8333                           ;Dimmer_B1.c: 891: i /= 100;
  8334  0833  3000               	movlw	0
  8335  0834  00AE               	movwf	___ftdiv@f2
  8336  0835  30C8               	movlw	200
  8337  0836  00AF               	movwf	___ftdiv@f2+1
  8338  0837  3042               	movlw	66
  8339  0838  00B0               	movwf	___ftdiv@f2+2
  8340  0839  085C               	movf	getPercentValue@i,w
  8341  083A  00B1               	movwf	___ftdiv@f1
  8342  083B  085D               	movf	getPercentValue@i+1,w
  8343  083C  00B2               	movwf	___ftdiv@f1+1
  8344  083D  085E               	movf	getPercentValue@i+2,w
  8345  083E  00B3               	movwf	___ftdiv@f1+2
  8346  083F  318F  2757  3188   	fcall	___ftdiv
  8347  0842  0020               	movlb	0	; select bank0
  8348  0843  082E               	movf	?___ftdiv,w
  8349  0844  00DC               	movwf	getPercentValue@i
  8350  0845  082F               	movf	?___ftdiv+1,w
  8351  0846  00DD               	movwf	getPercentValue@i+1
  8352  0847  0830               	movf	?___ftdiv+2,w
  8353  0848  00DE               	movwf	getPercentValue@i+2
  8354                           
  8355                           ;Dimmer_B1.c: 892: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8356  0849  085B               	movf	getPercentValue@value,w
  8357  084A  00D9               	movwf	??_getPercentValue
  8358  084B  01DA               	clrf	??_getPercentValue+1
  8359  084C  09D9               	comf	??_getPercentValue,f
  8360  084D  09DA               	comf	??_getPercentValue+1,f
  8361  084E  0AD9               	incf	??_getPercentValue,f
  8362  084F  1903               	skipnz
  8363  0850  0ADA               	incf	??_getPercentValue+1,f
  8364  0851  0859               	movf	??_getPercentValue,w
  8365  0852  3E64               	addlw	100
  8366  0853  00A8               	movwf	___awtoft@c
  8367  0854  3000               	movlw	0
  8368  0855  3D5A               	addwfc	??_getPercentValue+1,w
  8369  0856  00A9               	movwf	___awtoft@c+1
  8370  0857  319F  2775  3188   	fcall	___awtoft
  8371  085A  0020               	movlb	0	; select bank0
  8372  085B  0828               	movf	?___awtoft,w
  8373  085C  00B1               	movwf	___ftmul@f2
  8374  085D  0829               	movf	?___awtoft+1,w
  8375  085E  00B2               	movwf	___ftmul@f2+1
  8376  085F  082A               	movf	?___awtoft+2,w
  8377  0860  00B3               	movwf	___ftmul@f2+2
  8378  0861  085C               	movf	getPercentValue@i,w
  8379  0862  00AE               	movwf	___ftmul@f1
  8380  0863  085D               	movf	getPercentValue@i+1,w
  8381  0864  00AF               	movwf	___ftmul@f1+1
  8382  0865  085E               	movf	getPercentValue@i+2,w
  8383  0866  00B0               	movwf	___ftmul@f1+2
  8384  0867  3187  2744  3188   	fcall	___ftmul
  8385  086A  0020               	movlb	0	; select bank0
  8386  086B  082E               	movf	?___ftmul,w
  8387  086C  00C1               	movwf	___ftadd@f2
  8388  086D  082F               	movf	?___ftmul+1,w
  8389  086E  00C2               	movwf	___ftadd@f2+1
  8390  086F  0830               	movf	?___ftmul+2,w
  8391  0870  00C3               	movwf	___ftadd@f2+2
  8392  0871  3000               	movlw	0
  8393  0872  00BE               	movwf	___ftadd@f1
  8394  0873  3000               	movlw	0
  8395  0874  00BF               	movwf	___ftadd@f1+1
  8396  0875  3042               	movlw	66
  8397  0876  00C0               	movwf	___ftadd@f1+2
  8398  0877  3184  2481  3188   	fcall	___ftadd
  8399  087A  0020               	movlb	0	; select bank0
  8400  087B  083E               	movf	?___ftadd,w
  8401  087C  00CB               	movwf	___fttol@f1
  8402  087D  083F               	movf	?___ftadd+1,w
  8403  087E  00CC               	movwf	___fttol@f1+1
  8404  087F  0840               	movf	?___ftadd+2,w
  8405  0880  00CD               	movwf	___fttol@f1+2
  8406  0881  318D  2512         	fcall	___fttol
  8407  0883  0020               	movlb	0	; select bank0
  8408  0884  084B               	movf	?___fttol,w
  8409  0885  0008               	return
  8410  0886                     __end_of_getPercentValue:	
  8411                           
  8412                           	psect	text35
  8413  0744                     __ptext35:	
  8414 ;; *************** function ___ftmul *****************
  8415 ;; Defined at:
  8416 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8417 ;; Parameters:    Size  Location     Type
  8418 ;;  f1              3   14[BANK0 ] float 
  8419 ;;  f2              3   17[BANK0 ] float 
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8422 ;;  sign            1   29[BANK0 ] unsigned char 
  8423 ;;  cntr            1   28[BANK0 ] unsigned char 
  8424 ;;  exp             1   24[BANK0 ] unsigned char 
  8425 ;; Return value:  Size  Location     Type
  8426 ;;                  3   14[BANK0 ] float 
  8427 ;; Registers used:
  8428 ;;		wreg, status,2, status,0, pclath, cstack
  8429 ;; Tracked objects:
  8430 ;;		On entry : 0/0
  8431 ;;		On exit  : 0/0
  8432 ;;		Unchanged: 0/0
  8433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8434 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8435 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8436 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8437 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;Total ram usage:       16 bytes
  8439 ;; Hardware stack levels used:    1
  8440 ;; Hardware stack levels required when called:    6
  8441 ;; This function calls:
  8442 ;;		___ftpack
  8443 ;; This function is called by:
  8444 ;;		_getPercentValue
  8445 ;; This function uses a non-reentrant model
  8446 ;;
  8447                           
  8448                           
  8449                           ;psect for function ___ftmul
  8450  0744                     ___ftmul:	
  8451                           
  8452                           ;incstack = 0
  8453                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8454  0744  0020               	movlb	0	; select bank0
  8455  0745  082E               	movf	___ftmul@f1,w
  8456  0746  00B4               	movwf	??___ftmul
  8457  0747  082F               	movf	___ftmul@f1+1,w
  8458  0748  00B5               	movwf	??___ftmul+1
  8459  0749  0830               	movf	___ftmul@f1+2,w
  8460  074A  00B6               	movwf	??___ftmul+2
  8461  074B  1003               	clrc
  8462  074C  0D35               	rlf	??___ftmul+1,w
  8463  074D  0D36               	rlf	??___ftmul+2,w
  8464  074E  00B7               	movwf	??___ftmul+3
  8465  074F  0837               	movf	??___ftmul+3,w
  8466  0750  00B8               	movwf	___ftmul@exp
  8467  0751  08B8               	movf	___ftmul@exp,f
  8468  0752  1D03               	skipz
  8469  0753  2F5B               	goto	l8500
  8470  0754  3000               	movlw	0
  8471  0755  00AE               	movwf	?___ftmul
  8472  0756  3000               	movlw	0
  8473  0757  00AF               	movwf	?___ftmul+1
  8474  0758  3000               	movlw	0
  8475  0759  00B0               	movwf	?___ftmul+2
  8476  075A  0008               	return
  8477  075B                     l8500:	
  8478  075B  0831               	movf	___ftmul@f2,w
  8479  075C  00B4               	movwf	??___ftmul
  8480  075D  0832               	movf	___ftmul@f2+1,w
  8481  075E  00B5               	movwf	??___ftmul+1
  8482  075F  0833               	movf	___ftmul@f2+2,w
  8483  0760  00B6               	movwf	??___ftmul+2
  8484  0761  1003               	clrc
  8485  0762  0D35               	rlf	??___ftmul+1,w
  8486  0763  0D36               	rlf	??___ftmul+2,w
  8487  0764  00B7               	movwf	??___ftmul+3
  8488  0765  0837               	movf	??___ftmul+3,w
  8489  0766  00BD               	movwf	___ftmul@sign
  8490  0767  08BD               	movf	___ftmul@sign,f
  8491  0768  1D03               	skipz
  8492  0769  2F71               	goto	l8506
  8493  076A  3000               	movlw	0
  8494  076B  00AE               	movwf	?___ftmul
  8495  076C  3000               	movlw	0
  8496  076D  00AF               	movwf	?___ftmul+1
  8497  076E  3000               	movlw	0
  8498  076F  00B0               	movwf	?___ftmul+2
  8499  0770  0008               	return
  8500  0771                     l8506:	
  8501  0771  083D               	movf	___ftmul@sign,w
  8502  0772  3E7B               	addlw	123
  8503  0773  00B4               	movwf	??___ftmul
  8504  0774  0834               	movf	??___ftmul,w
  8505  0775  07B8               	addwf	___ftmul@exp,f
  8506  0776  082E               	movf	___ftmul@f1,w
  8507  0777  00B4               	movwf	??___ftmul
  8508  0778  082F               	movf	___ftmul@f1+1,w
  8509  0779  00B5               	movwf	??___ftmul+1
  8510  077A  0830               	movf	___ftmul@f1+2,w
  8511  077B  00B6               	movwf	??___ftmul+2
  8512  077C  3010               	movlw	16
  8513  077D                     u8945:	
  8514  077D  36B6               	lsrf	??___ftmul+2,f
  8515  077E  0CB5               	rrf	??___ftmul+1,f
  8516  077F  0CB4               	rrf	??___ftmul,f
  8517  0780  0B89               	decfsz	9,f
  8518  0781  2F7D               	goto	u8945
  8519  0782  0834               	movf	??___ftmul,w
  8520  0783  00B7               	movwf	??___ftmul+3
  8521  0784  0837               	movf	??___ftmul+3,w
  8522  0785  00BD               	movwf	___ftmul@sign
  8523  0786  0831               	movf	___ftmul@f2,w
  8524  0787  00B4               	movwf	??___ftmul
  8525  0788  0832               	movf	___ftmul@f2+1,w
  8526  0789  00B5               	movwf	??___ftmul+1
  8527  078A  0833               	movf	___ftmul@f2+2,w
  8528  078B  00B6               	movwf	??___ftmul+2
  8529  078C  3010               	movlw	16
  8530  078D                     u8955:	
  8531  078D  36B6               	lsrf	??___ftmul+2,f
  8532  078E  0CB5               	rrf	??___ftmul+1,f
  8533  078F  0CB4               	rrf	??___ftmul,f
  8534  0790  0B89               	decfsz	9,f
  8535  0791  2F8D               	goto	u8955
  8536  0792  0834               	movf	??___ftmul,w
  8537  0793  00B7               	movwf	??___ftmul+3
  8538  0794  0837               	movf	??___ftmul+3,w
  8539  0795  06BD               	xorwf	___ftmul@sign,f
  8540  0796  3080               	movlw	128
  8541  0797  00B4               	movwf	??___ftmul
  8542  0798  0834               	movf	??___ftmul,w
  8543  0799  05BD               	andwf	___ftmul@sign,f
  8544  079A  17AF               	bsf	___ftmul@f1+1,7
  8545  079B  17B2               	bsf	___ftmul@f2+1,7
  8546  079C  30FF               	movlw	255
  8547  079D  05B1               	andwf	___ftmul@f2,f
  8548  079E  30FF               	movlw	255
  8549  079F  05B2               	andwf	___ftmul@f2+1,f
  8550  07A0  3000               	movlw	0
  8551  07A1  05B3               	andwf	___ftmul@f2+2,f
  8552  07A2  3000               	movlw	0
  8553  07A3  00B9               	movwf	___ftmul@f3_as_product
  8554  07A4  3000               	movlw	0
  8555  07A5  00BA               	movwf	___ftmul@f3_as_product+1
  8556  07A6  3000               	movlw	0
  8557  07A7  00BB               	movwf	___ftmul@f3_as_product+2
  8558  07A8  3007               	movlw	7
  8559  07A9  00B4               	movwf	??___ftmul
  8560  07AA  0834               	movf	??___ftmul,w
  8561  07AB  00BC               	movwf	___ftmul@cntr
  8562  07AC                     l8518:	
  8563  07AC  1C2E               	btfss	___ftmul@f1,0
  8564  07AD  2FB4               	goto	l8522
  8565  07AE  0831               	movf	___ftmul@f2,w
  8566  07AF  07B9               	addwf	___ftmul@f3_as_product,f
  8567  07B0  0832               	movf	___ftmul@f2+1,w
  8568  07B1  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8569  07B2  0833               	movf	___ftmul@f2+2,w
  8570  07B3  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8571  07B4                     l8522:	
  8572  07B4  3001               	movlw	1
  8573  07B5                     u8975:	
  8574  07B5  36B0               	lsrf	___ftmul@f1+2,f
  8575  07B6  0CAF               	rrf	___ftmul@f1+1,f
  8576  07B7  0CAE               	rrf	___ftmul@f1,f
  8577  07B8  0B89               	decfsz	9,f
  8578  07B9  2FB5               	goto	u8975
  8579  07BA  3001               	movlw	1
  8580  07BB                     u8985:	
  8581  07BB  35B1               	lslf	___ftmul@f2,f
  8582  07BC  0DB2               	rlf	___ftmul@f2+1,f
  8583  07BD  0DB3               	rlf	___ftmul@f2+2,f
  8584  07BE  0B89               	decfsz	9,f
  8585  07BF  2FBB               	goto	u8985
  8586  07C0  3001               	movlw	1
  8587  07C1  02BC               	subwf	___ftmul@cntr,f
  8588  07C2  1D03               	btfss	3,2
  8589  07C3  2FAC               	goto	l8518
  8590  07C4  3009               	movlw	9
  8591  07C5  00B4               	movwf	??___ftmul
  8592  07C6  0834               	movf	??___ftmul,w
  8593  07C7  00BC               	movwf	___ftmul@cntr
  8594  07C8                     l8530:	
  8595  07C8  1C2E               	btfss	___ftmul@f1,0
  8596  07C9  2FD0               	goto	l8534
  8597  07CA  0831               	movf	___ftmul@f2,w
  8598  07CB  07B9               	addwf	___ftmul@f3_as_product,f
  8599  07CC  0832               	movf	___ftmul@f2+1,w
  8600  07CD  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8601  07CE  0833               	movf	___ftmul@f2+2,w
  8602  07CF  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8603  07D0                     l8534:	
  8604  07D0  3001               	movlw	1
  8605  07D1                     u9015:	
  8606  07D1  36B0               	lsrf	___ftmul@f1+2,f
  8607  07D2  0CAF               	rrf	___ftmul@f1+1,f
  8608  07D3  0CAE               	rrf	___ftmul@f1,f
  8609  07D4  0B89               	decfsz	9,f
  8610  07D5  2FD1               	goto	u9015
  8611  07D6  3001               	movlw	1
  8612  07D7                     u9025:	
  8613  07D7  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8614  07D8  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8615  07D9  0CB9               	rrf	___ftmul@f3_as_product,f
  8616  07DA  0B89               	decfsz	9,f
  8617  07DB  2FD7               	goto	u9025
  8618  07DC  3001               	movlw	1
  8619  07DD  02BC               	subwf	___ftmul@cntr,f
  8620  07DE  1D03               	btfss	3,2
  8621  07DF  2FC8               	goto	l8530
  8622  07E0  0839               	movf	___ftmul@f3_as_product,w
  8623  07E1  00A0               	movwf	___ftpack@arg
  8624  07E2  083A               	movf	___ftmul@f3_as_product+1,w
  8625  07E3  00A1               	movwf	___ftpack@arg+1
  8626  07E4  083B               	movf	___ftmul@f3_as_product+2,w
  8627  07E5  00A2               	movwf	___ftpack@arg+2
  8628  07E6  0838               	movf	___ftmul@exp,w
  8629  07E7  00B4               	movwf	??___ftmul
  8630  07E8  0834               	movf	??___ftmul,w
  8631  07E9  00A3               	movwf	___ftpack@exp
  8632  07EA  083D               	movf	___ftmul@sign,w
  8633  07EB  00B5               	movwf	??___ftmul+1
  8634  07EC  0835               	movf	??___ftmul+1,w
  8635  07ED  00A4               	movwf	___ftpack@sign
  8636  07EE  3189  2146         	fcall	___ftpack
  8637  07F0  0020               	movlb	0	; select bank0
  8638  07F1  0820               	movf	?___ftpack,w
  8639  07F2  00AE               	movwf	?___ftmul
  8640  07F3  0821               	movf	?___ftpack+1,w
  8641  07F4  00AF               	movwf	?___ftmul+1
  8642  07F5  0822               	movf	?___ftpack+2,w
  8643  07F6  00B0               	movwf	?___ftmul+2
  8644  07F7  0008               	return
  8645  07F8                     __end_of___ftmul:	
  8646                           
  8647                           	psect	text36
  8648  0481                     __ptext36:	
  8649 ;; *************** function ___ftadd *****************
  8650 ;; Defined at:
  8651 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8652 ;; Parameters:    Size  Location     Type
  8653 ;;  f1              3   30[BANK0 ] float 
  8654 ;;  f2              3   33[BANK0 ] float 
  8655 ;; Auto vars:     Size  Location     Type
  8656 ;;  exp1            1   42[BANK0 ] unsigned char 
  8657 ;;  exp2            1   41[BANK0 ] unsigned char 
  8658 ;;  sign            1   40[BANK0 ] unsigned char 
  8659 ;; Return value:  Size  Location     Type
  8660 ;;                  3   30[BANK0 ] float 
  8661 ;; Registers used:
  8662 ;;		wreg, status,2, status,0, pclath, cstack
  8663 ;; Tracked objects:
  8664 ;;		On entry : 0/0
  8665 ;;		On exit  : 0/0
  8666 ;;		Unchanged: 0/0
  8667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8668 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8669 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8670 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8671 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;Total ram usage:       13 bytes
  8673 ;; Hardware stack levels used:    1
  8674 ;; Hardware stack levels required when called:    6
  8675 ;; This function calls:
  8676 ;;		___ftpack
  8677 ;; This function is called by:
  8678 ;;		_getPercentValue
  8679 ;; This function uses a non-reentrant model
  8680 ;;
  8681                           
  8682                           
  8683                           ;psect for function ___ftadd
  8684  0481                     ___ftadd:	
  8685                           
  8686                           ;incstack = 0
  8687                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8688  0481  0020               	movlb	0	; select bank0
  8689  0482  083E               	movf	___ftadd@f1,w
  8690  0483  00C4               	movwf	??___ftadd
  8691  0484  083F               	movf	___ftadd@f1+1,w
  8692  0485  00C5               	movwf	??___ftadd+1
  8693  0486  0840               	movf	___ftadd@f1+2,w
  8694  0487  00C6               	movwf	??___ftadd+2
  8695  0488  1003               	clrc
  8696  0489  0D45               	rlf	??___ftadd+1,w
  8697  048A  0D46               	rlf	??___ftadd+2,w
  8698  048B  00C7               	movwf	??___ftadd+3
  8699  048C  0847               	movf	??___ftadd+3,w
  8700  048D  00CA               	movwf	___ftadd@exp1
  8701  048E  0841               	movf	___ftadd@f2,w
  8702  048F  00C4               	movwf	??___ftadd
  8703  0490  0842               	movf	___ftadd@f2+1,w
  8704  0491  00C5               	movwf	??___ftadd+1
  8705  0492  0843               	movf	___ftadd@f2+2,w
  8706  0493  00C6               	movwf	??___ftadd+2
  8707  0494  1003               	clrc
  8708  0495  0D45               	rlf	??___ftadd+1,w
  8709  0496  0D46               	rlf	??___ftadd+2,w
  8710  0497  00C7               	movwf	??___ftadd+3
  8711  0498  0847               	movf	??___ftadd+3,w
  8712  0499  00C9               	movwf	___ftadd@exp2
  8713  049A  084A               	movf	___ftadd@exp1,w
  8714  049B  1903               	btfsc	3,2
  8715  049C  2CA9               	goto	l8388
  8716  049D  0849               	movf	___ftadd@exp2,w
  8717  049E  024A               	subwf	___ftadd@exp1,w
  8718  049F  1803               	skipnc
  8719  04A0  2CB0               	goto	l8392
  8720  04A1  034A               	decf	___ftadd@exp1,w
  8721  04A2  3AFF               	xorlw	255
  8722  04A3  0749               	addwf	___ftadd@exp2,w
  8723  04A4  00C4               	movwf	??___ftadd
  8724  04A5  3019               	movlw	25
  8725  04A6  0244               	subwf	??___ftadd,w
  8726  04A7  1C03               	skipc
  8727  04A8  2CB0               	goto	l8392
  8728  04A9                     l8388:	
  8729  04A9  0841               	movf	___ftadd@f2,w
  8730  04AA  00BE               	movwf	?___ftadd
  8731  04AB  0842               	movf	___ftadd@f2+1,w
  8732  04AC  00BF               	movwf	?___ftadd+1
  8733  04AD  0843               	movf	___ftadd@f2+2,w
  8734  04AE  00C0               	movwf	?___ftadd+2
  8735  04AF  0008               	return
  8736  04B0                     l8392:	
  8737  04B0  0849               	movf	___ftadd@exp2,w
  8738  04B1  1903               	btfsc	3,2
  8739  04B2  0008               	return
  8740  04B3  084A               	movf	___ftadd@exp1,w
  8741  04B4  0249               	subwf	___ftadd@exp2,w
  8742  04B5  1803               	skipnc
  8743  04B6  2CBF               	goto	l8398
  8744  04B7  0349               	decf	___ftadd@exp2,w
  8745  04B8  3AFF               	xorlw	255
  8746  04B9  074A               	addwf	___ftadd@exp1,w
  8747  04BA  00C4               	movwf	??___ftadd
  8748  04BB  3019               	movlw	25
  8749  04BC  0244               	subwf	??___ftadd,w
  8750  04BD  1803               	btfsc	3,0
  8751  04BE  0008               	return
  8752  04BF                     l8398:	
  8753  04BF  3006               	movlw	6
  8754  04C0  00C4               	movwf	??___ftadd
  8755  04C1  0844               	movf	??___ftadd,w
  8756  04C2  00C8               	movwf	___ftadd@sign
  8757  04C3  1BC0               	btfsc	___ftadd@f1+2,7
  8758  04C4  17C8               	bsf	___ftadd@sign,7
  8759  04C5  1BC3               	btfsc	___ftadd@f2+2,7
  8760  04C6  1748               	bsf	___ftadd@sign,6
  8761  04C7  17BF               	bsf	___ftadd@f1+1,7
  8762  04C8  30FF               	movlw	255
  8763  04C9  05BE               	andwf	___ftadd@f1,f
  8764  04CA  30FF               	movlw	255
  8765  04CB  05BF               	andwf	___ftadd@f1+1,f
  8766  04CC  3000               	movlw	0
  8767  04CD  05C0               	andwf	___ftadd@f1+2,f
  8768  04CE  17C2               	bsf	___ftadd@f2+1,7
  8769  04CF  30FF               	movlw	255
  8770  04D0  05C1               	andwf	___ftadd@f2,f
  8771  04D1  30FF               	movlw	255
  8772  04D2  05C2               	andwf	___ftadd@f2+1,f
  8773  04D3  3000               	movlw	0
  8774  04D4  05C3               	andwf	___ftadd@f2+2,f
  8775  04D5  0849               	movf	___ftadd@exp2,w
  8776  04D6  024A               	subwf	___ftadd@exp1,w
  8777  04D7  1803               	skipnc
  8778  04D8  2CFB               	goto	l8420
  8779  04D9                     l8410:	
  8780  04D9  3001               	movlw	1
  8781  04DA                     u8705:	
  8782  04DA  35C1               	lslf	___ftadd@f2,f
  8783  04DB  0DC2               	rlf	___ftadd@f2+1,f
  8784  04DC  0DC3               	rlf	___ftadd@f2+2,f
  8785  04DD  0B89               	decfsz	9,f
  8786  04DE  2CDA               	goto	u8705
  8787  04DF  3001               	movlw	1
  8788  04E0  02C9               	subwf	___ftadd@exp2,f
  8789  04E1  0849               	movf	___ftadd@exp2,w
  8790  04E2  064A               	xorwf	___ftadd@exp1,w
  8791  04E3  1903               	skipnz
  8792  04E4  2CF6               	goto	l8418
  8793  04E5  3001               	movlw	1
  8794  04E6  02C8               	subwf	___ftadd@sign,f
  8795  04E7  0848               	movf	___ftadd@sign,w
  8796  04E8  3907               	andlw	7
  8797  04E9  1903               	btfsc	3,2
  8798  04EA  2CF6               	goto	l8418
  8799  04EB  2CD9               	goto	l8410
  8800  04EC                     l8416:	
  8801  04EC  3001               	movlw	1
  8802  04ED                     u8735:	
  8803  04ED  36C0               	lsrf	___ftadd@f1+2,f
  8804  04EE  0CBF               	rrf	___ftadd@f1+1,f
  8805  04EF  0CBE               	rrf	___ftadd@f1,f
  8806  04F0  0B89               	decfsz	9,f
  8807  04F1  2CED               	goto	u8735
  8808  04F2  3001               	movlw	1
  8809  04F3  00C4               	movwf	??___ftadd
  8810  04F4  0844               	movf	??___ftadd,w
  8811  04F5  07CA               	addwf	___ftadd@exp1,f
  8812  04F6                     l8418:	
  8813  04F6  084A               	movf	___ftadd@exp1,w
  8814  04F7  0649               	xorwf	___ftadd@exp2,w
  8815  04F8  1903               	btfsc	3,2
  8816  04F9  2D20               	goto	l2931
  8817  04FA  2CEC               	goto	l8416
  8818  04FB                     l8420:	
  8819  04FB  084A               	movf	___ftadd@exp1,w
  8820  04FC  0249               	subwf	___ftadd@exp2,w
  8821  04FD  1803               	skipnc
  8822  04FE  2D20               	goto	l2931
  8823  04FF                     l8422:	
  8824  04FF  3001               	movlw	1
  8825  0500                     u8765:	
  8826  0500  35BE               	lslf	___ftadd@f1,f
  8827  0501  0DBF               	rlf	___ftadd@f1+1,f
  8828  0502  0DC0               	rlf	___ftadd@f1+2,f
  8829  0503  0B89               	decfsz	9,f
  8830  0504  2D00               	goto	u8765
  8831  0505  3001               	movlw	1
  8832  0506  02CA               	subwf	___ftadd@exp1,f
  8833  0507  0849               	movf	___ftadd@exp2,w
  8834  0508  064A               	xorwf	___ftadd@exp1,w
  8835  0509  1903               	skipnz
  8836  050A  2D1C               	goto	l8430
  8837  050B  3001               	movlw	1
  8838  050C  02C8               	subwf	___ftadd@sign,f
  8839  050D  0848               	movf	___ftadd@sign,w
  8840  050E  3907               	andlw	7
  8841  050F  1903               	btfsc	3,2
  8842  0510  2D1C               	goto	l8430
  8843  0511  2CFF               	goto	l8422
  8844  0512                     l8428:	
  8845  0512  3001               	movlw	1
  8846  0513                     u8795:	
  8847  0513  36C3               	lsrf	___ftadd@f2+2,f
  8848  0514  0CC2               	rrf	___ftadd@f2+1,f
  8849  0515  0CC1               	rrf	___ftadd@f2,f
  8850  0516  0B89               	decfsz	9,f
  8851  0517  2D13               	goto	u8795
  8852  0518  3001               	movlw	1
  8853  0519  00C4               	movwf	??___ftadd
  8854  051A  0844               	movf	??___ftadd,w
  8855  051B  07C9               	addwf	___ftadd@exp2,f
  8856  051C                     l8430:	
  8857  051C  084A               	movf	___ftadd@exp1,w
  8858  051D  0649               	xorwf	___ftadd@exp2,w
  8859  051E  1D03               	skipz
  8860  051F  2D12               	goto	l8428
  8861  0520                     l2931:	
  8862  0520  1FC8               	btfss	___ftadd@sign,7
  8863  0521  2D32               	goto	l8434
  8864  0522  30FF               	movlw	255
  8865  0523  06BE               	xorwf	___ftadd@f1,f
  8866  0524  30FF               	movlw	255
  8867  0525  06BF               	xorwf	___ftadd@f1+1,f
  8868  0526  30FF               	movlw	255
  8869  0527  06C0               	xorwf	___ftadd@f1+2,f
  8870  0528  3001               	movlw	1
  8871  0529  07BE               	addwf	___ftadd@f1,f
  8872  052A  3000               	movlw	0
  8873  052B  1803               	skipnc
  8874  052C  3001               	movlw	1
  8875  052D  07BF               	addwf	___ftadd@f1+1,f
  8876  052E  3000               	movlw	0
  8877  052F  1803               	skipnc
  8878  0530  3001               	movlw	1
  8879  0531  07C0               	addwf	___ftadd@f1+2,f
  8880  0532                     l8434:	
  8881  0532  1F48               	btfss	___ftadd@sign,6
  8882  0533  2D44               	goto	l8438
  8883  0534  30FF               	movlw	255
  8884  0535  06C1               	xorwf	___ftadd@f2,f
  8885  0536  30FF               	movlw	255
  8886  0537  06C2               	xorwf	___ftadd@f2+1,f
  8887  0538  30FF               	movlw	255
  8888  0539  06C3               	xorwf	___ftadd@f2+2,f
  8889  053A  3001               	movlw	1
  8890  053B  07C1               	addwf	___ftadd@f2,f
  8891  053C  3000               	movlw	0
  8892  053D  1803               	skipnc
  8893  053E  3001               	movlw	1
  8894  053F  07C2               	addwf	___ftadd@f2+1,f
  8895  0540  3000               	movlw	0
  8896  0541  1803               	skipnc
  8897  0542  3001               	movlw	1
  8898  0543  07C3               	addwf	___ftadd@f2+2,f
  8899  0544                     l8438:	
  8900  0544  01C8               	clrf	___ftadd@sign
  8901  0545  083E               	movf	___ftadd@f1,w
  8902  0546  07C1               	addwf	___ftadd@f2,f
  8903  0547  083F               	movf	___ftadd@f1+1,w
  8904  0548  3DC2               	addwfc	___ftadd@f2+1,f
  8905  0549  0840               	movf	___ftadd@f1+2,w
  8906  054A  3DC3               	addwfc	___ftadd@f2+2,f
  8907  054B  1FC3               	btfss	___ftadd@f2+2,7
  8908  054C  2D5F               	goto	l8448
  8909  054D  30FF               	movlw	255
  8910  054E  06C1               	xorwf	___ftadd@f2,f
  8911  054F  30FF               	movlw	255
  8912  0550  06C2               	xorwf	___ftadd@f2+1,f
  8913  0551  30FF               	movlw	255
  8914  0552  06C3               	xorwf	___ftadd@f2+2,f
  8915  0553  3001               	movlw	1
  8916  0554  07C1               	addwf	___ftadd@f2,f
  8917  0555  3000               	movlw	0
  8918  0556  1803               	skipnc
  8919  0557  3001               	movlw	1
  8920  0558  07C2               	addwf	___ftadd@f2+1,f
  8921  0559  3000               	movlw	0
  8922  055A  1803               	skipnc
  8923  055B  3001               	movlw	1
  8924  055C  07C3               	addwf	___ftadd@f2+2,f
  8925  055D  01C8               	clrf	___ftadd@sign
  8926  055E  0AC8               	incf	___ftadd@sign,f
  8927  055F                     l8448:	
  8928  055F  0841               	movf	___ftadd@f2,w
  8929  0560  00A0               	movwf	___ftpack@arg
  8930  0561  0842               	movf	___ftadd@f2+1,w
  8931  0562  00A1               	movwf	___ftpack@arg+1
  8932  0563  0843               	movf	___ftadd@f2+2,w
  8933  0564  00A2               	movwf	___ftpack@arg+2
  8934  0565  084A               	movf	___ftadd@exp1,w
  8935  0566  00C4               	movwf	??___ftadd
  8936  0567  0844               	movf	??___ftadd,w
  8937  0568  00A3               	movwf	___ftpack@exp
  8938  0569  0848               	movf	___ftadd@sign,w
  8939  056A  00C5               	movwf	??___ftadd+1
  8940  056B  0845               	movf	??___ftadd+1,w
  8941  056C  00A4               	movwf	___ftpack@sign
  8942  056D  3189  2146         	fcall	___ftpack
  8943  056F  0020               	movlb	0	; select bank0
  8944  0570  0820               	movf	?___ftpack,w
  8945  0571  00BE               	movwf	?___ftadd
  8946  0572  0821               	movf	?___ftpack+1,w
  8947  0573  00BF               	movwf	?___ftadd+1
  8948  0574  0822               	movf	?___ftpack+2,w
  8949  0575  00C0               	movwf	?___ftadd+2
  8950  0576  0008               	return
  8951  0577                     __end_of___ftadd:	
  8952                           
  8953                           	psect	text37
  8954  1CF0                     __ptext37:	
  8955 ;; *************** function _setMemory_Modify *****************
  8956 ;; Defined at:
  8957 ;;		line 1000 in file "../src/MCU_B1.c"
  8958 ;; Parameters:    Size  Location     Type
  8959 ;;  command         1    wreg     unsigned char 
  8960 ;; Auto vars:     Size  Location     Type
  8961 ;;  command         1    1[BANK0 ] unsigned char 
  8962 ;; Return value:  Size  Location     Type
  8963 ;;		None               void
  8964 ;; Registers used:
  8965 ;;		wreg, status,2, status,0
  8966 ;; Tracked objects:
  8967 ;;		On entry : 0/0
  8968 ;;		On exit  : 0/0
  8969 ;;		Unchanged: 0/0
  8970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8972 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8973 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;Total ram usage:        2 bytes
  8976 ;; Hardware stack levels used:    1
  8977 ;; Hardware stack levels required when called:    5
  8978 ;; This function calls:
  8979 ;;		Nothing
  8980 ;; This function is called by:
  8981 ;;		_setLog_Code
  8982 ;;		_setRFSW_AdjControl
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986                           
  8987                           ;psect for function _setMemory_Modify
  8988  1CF0                     _setMemory_Modify:	
  8989                           
  8990                           ;incstack = 0
  8991                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8992                           ;setMemory_Modify@command stored from wreg
  8993  1CF0  0020               	movlb	0	; select bank0
  8994  1CF1  00A1               	movwf	setMemory_Modify@command
  8995                           
  8996                           ;MCU_B1.c: 1001: Memory.Modify = command == 1 ? 1 : 0;
  8997  1CF2  0821               	movf	setMemory_Modify@command,w
  8998  1CF3  3A01               	xorlw	1
  8999  1CF4  3000               	movlw	0
  9000  1CF5  1903               	skipnz
  9001  1CF6  3001               	movlw	1
  9002  1CF7  00A0               	movwf	??_setMemory_Modify
  9003  1CF8  0024               	movlb	4	; select bank4
  9004  1CF9  0844               	movf	(_Memory^(0+512)+36),w
  9005  1CFA  0020               	movlb	0	; select bank0
  9006  1CFB  0620               	xorwf	??_setMemory_Modify,w
  9007  1CFC  39FE               	andlw	-2
  9008  1CFD  0620               	xorwf	??_setMemory_Modify,w
  9009  1CFE  0024               	movlb	4	; select bank4
  9010  1CFF  00C4               	movwf	(_Memory^(0+512)+36)
  9011                           
  9012                           ;MCU_B1.c: 1002: Memory.Time = 0;
  9013  1D00  01C2               	clrf	(_Memory^(0+512)+34)
  9014  1D01  01C3               	clrf	((_Memory+1)^(0+512)+34)
  9015  1D02  0008               	return
  9016  1D03                     __end_of_setMemory_Modify:	
  9017                           
  9018                           	psect	text38
  9019  1C72                     __ptext38:	
  9020 ;; *************** function _getRF_KeyStatus *****************
  9021 ;; Defined at:
  9022 ;;		line 187 in file "../src/RF_Control_B1.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;		None
  9025 ;; Auto vars:     Size  Location     Type
  9026 ;;  key             1    1[BANK0 ] unsigned char 
  9027 ;; Return value:  Size  Location     Type
  9028 ;;                  1    wreg      unsigned char 
  9029 ;; Registers used:
  9030 ;;		wreg, status,2
  9031 ;; Tracked objects:
  9032 ;;		On entry : 0/0
  9033 ;;		On exit  : 0/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;Total ram usage:        3 bytes
  9041 ;; Hardware stack levels used:    1
  9042 ;; Hardware stack levels required when called:    5
  9043 ;; This function calls:
  9044 ;;		Nothing
  9045 ;; This function is called by:
  9046 ;;		_setRF_Main
  9047 ;; This function uses a non-reentrant model
  9048 ;;
  9049                           
  9050                           
  9051                           ;psect for function _getRF_KeyStatus
  9052  1C72                     _getRF_KeyStatus:	
  9053                           
  9054                           ;RF_Control_B1.c: 188: char key = 0;
  9055                           
  9056                           ;incstack = 0
  9057                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  9058  1C72  0020               	movlb	0	; select bank0
  9059  1C73  01A1               	clrf	getRF_KeyStatus@key
  9060                           
  9061                           ;RF_Control_B1.c: 194: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  9062  1C74  01A2               	clrf	_getRF_KeyStatus$5706
  9063  1C75  0AA2               	incf	_getRF_KeyStatus$5706,f
  9064  1C76  1F0C               	btfss	12,6	;volatile
  9065  1C77  1A0C               	btfsc	12,4	;volatile
  9066  1C78  2C7D               	goto	l9504
  9067  1C79  1C0C               	btfss	12,0	;volatile
  9068  1C7A  188D               	btfsc	13,1	;volatile
  9069  1C7B  2C7D               	goto	l9504
  9070  1C7C  01A2               	clrf	_getRF_KeyStatus$5706
  9071  1C7D                     l9504:	
  9072  1C7D  0822               	movf	_getRF_KeyStatus$5706,w
  9073  1C7E  00A0               	movwf	??_getRF_KeyStatus
  9074  1C7F  0820               	movf	??_getRF_KeyStatus,w
  9075  1C80  00A1               	movwf	getRF_KeyStatus@key
  9076                           
  9077                           ;RF_Control_B1.c: 200: return key;
  9078  1C81  0821               	movf	getRF_KeyStatus@key,w
  9079  1C82  0008               	return
  9080  1C83                     __end_of_getRF_KeyStatus:	
  9081                           
  9082                           	psect	text39
  9083  1C61                     __ptext39:	
  9084 ;; *************** function _getBuz_GO *****************
  9085 ;; Defined at:
  9086 ;;		line 82 in file "../src/Buzzer_B1.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;		None
  9089 ;; Auto vars:     Size  Location     Type
  9090 ;;  i               2    4[BANK0 ] int 
  9091 ;; Return value:  Size  Location     Type
  9092 ;;                  2    0[BANK0 ] int 
  9093 ;; Registers used:
  9094 ;;		wreg, status,2, status,0
  9095 ;; Tracked objects:
  9096 ;;		On entry : 0/0
  9097 ;;		On exit  : 0/0
  9098 ;;		Unchanged: 0/0
  9099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9100 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9101 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9102 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9103 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;Total ram usage:        6 bytes
  9105 ;; Hardware stack levels used:    1
  9106 ;; Hardware stack levels required when called:    5
  9107 ;; This function calls:
  9108 ;;		Nothing
  9109 ;; This function is called by:
  9110 ;;		_setRF_Main
  9111 ;; This function uses a non-reentrant model
  9112 ;;
  9113                           
  9114                           
  9115                           ;psect for function _getBuz_GO
  9116  1C61                     _getBuz_GO:	
  9117                           
  9118                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9119                           
  9120                           ;incstack = 0
  9121                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9122  1C61  0021               	movlb	1	; select bank1
  9123  1C62  0C30               	rrf	_Buz1^(0+128),w
  9124  1C63  3901               	andlw	1
  9125  1C64  0020               	movlb	0	; select bank0
  9126  1C65  00A2               	movwf	??_getBuz_GO
  9127  1C66  01A3               	clrf	??_getBuz_GO+1
  9128  1C67  0822               	movf	??_getBuz_GO,w
  9129  1C68  00A4               	movwf	getBuz_GO@i
  9130  1C69  0823               	movf	??_getBuz_GO+1,w
  9131  1C6A  00A5               	movwf	getBuz_GO@i+1
  9132                           
  9133                           ;Buzzer_B1.c: 84: return i;
  9134  1C6B  0825               	movf	getBuz_GO@i+1,w
  9135  1C6C  01A1               	clrf	?_getBuz_GO+1
  9136  1C6D  07A1               	addwf	?_getBuz_GO+1,f
  9137  1C6E  0824               	movf	getBuz_GO@i,w
  9138  1C6F  01A0               	clrf	?_getBuz_GO
  9139  1C70  07A0               	addwf	?_getBuz_GO,f
  9140  1C71  0008               	return
  9141  1C72                     __end_of_getBuz_GO:	
  9142                           
  9143                           	psect	text40
  9144  0A6A                     __ptext40:	
  9145 ;; *************** function _CC2500_TxData *****************
  9146 ;; Defined at:
  9147 ;;		line 32 in file "../src/CC2500_B1.c"
  9148 ;; Parameters:    Size  Location     Type
  9149 ;;		None
  9150 ;; Auto vars:     Size  Location     Type
  9151 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9152 ;; Return value:  Size  Location     Type
  9153 ;;		None               void
  9154 ;; Registers used:
  9155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9156 ;; Tracked objects:
  9157 ;;		On entry : 0/0
  9158 ;;		On exit  : 0/0
  9159 ;;		Unchanged: 0/0
  9160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;Total ram usage:        2 bytes
  9166 ;; Hardware stack levels used:    1
  9167 ;; Hardware stack levels required when called:    7
  9168 ;; This function calls:
  9169 ;;		_CC2500_WriteByte
  9170 ;;		_CC2500_WriteCommand
  9171 ;;		_Timeout_Counter
  9172 ;;		_set_TimeoutCleared
  9173 ;; This function is called by:
  9174 ;;		_setRF_Main
  9175 ;; This function uses a non-reentrant model
  9176 ;;
  9177                           
  9178                           
  9179                           ;psect for function _CC2500_TxData
  9180  0A6A                     _CC2500_TxData:	
  9181                           
  9182                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9183                           ;CC2500_B1.c: 35: RC4 = 0;
  9184                           
  9185                           ;incstack = 0
  9186                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9187  0A6A  0020               	movlb	0	; select bank0
  9188  0A6B  120E               	bcf	14,4	;volatile
  9189                           
  9190                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9191  0A6C  307F               	movlw	127
  9192  0A6D  00A4               	movwf	??_CC2500_TxData
  9193  0A6E  0824               	movf	??_CC2500_TxData,w
  9194  0A6F  0021               	movlb	1	; select bank1
  9195  0A70  00D2               	movwf	_SPI0Buffer^(0+128)
  9196                           
  9197                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9198  0A71  2A75               	goto	l9160
  9199  0A72                     l9158:	
  9200                           
  9201                           ;CC2500_B1.c: 38: Timeout_Counter();
  9202  0A72  319D  2579  318A   	fcall	_Timeout_Counter
  9203  0A75                     l9160:	
  9204  0A75  0020               	movlb	0	; select bank0
  9205  0A76  1D0E               	btfss	14,2	;volatile
  9206  0A77  2A7B               	goto	l9164
  9207  0A78  0021               	movlb	1	; select bank1
  9208  0A79  1D2D               	btfss	(_myMain^(0+128)+13),2
  9209  0A7A  2A72               	goto	l9158
  9210  0A7B                     l9164:	
  9211                           
  9212                           ;CC2500_B1.c: 39: };
  9213                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9214  0A7B  319B  234C  318A   	fcall	_set_TimeoutCleared
  9215                           
  9216                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9217  0A7E  319D  25FA  318A   	fcall	_CC2500_WriteByte
  9218                           
  9219                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9220  0A81  0021               	movlb	1	; select bank1
  9221  0A82  0854               	movf	_Tx_Length^(0+128),w
  9222  0A83  0020               	movlb	0	; select bank0
  9223  0A84  00A4               	movwf	??_CC2500_TxData
  9224  0A85  0824               	movf	??_CC2500_TxData,w
  9225  0A86  0021               	movlb	1	; select bank1
  9226  0A87  00D2               	movwf	_SPI0Buffer^(0+128)
  9227                           
  9228                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9229  0A88  319D  25FA  318A   	fcall	_CC2500_WriteByte
  9230                           
  9231                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9232  0A8B  0020               	movlb	0	; select bank0
  9233  0A8C  01A5               	clrf	CC2500_TxData@loop_e
  9234  0A8D                     l9178:	
  9235  0A8D  0021               	movlb	1	; select bank1
  9236  0A8E  0854               	movf	_Tx_Length^(0+128),w
  9237  0A8F  0020               	movlb	0	; select bank0
  9238  0A90  0225               	subwf	CC2500_TxData@loop_e,w
  9239  0A91  1803               	btfsc	3,0
  9240  0A92  2AA6               	goto	l255
  9241                           
  9242                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9243  0A93  0825               	movf	CC2500_TxData@loop_e,w
  9244  0A94  3EA0               	addlw	_RF_Data& (0+255)
  9245  0A95  0086               	movwf	6
  9246  0A96  3001               	movlw	1	; select bank3/4
  9247  0A97  0087               	movwf	7
  9248  0A98  0801               	movf	1,w
  9249  0A99  00A4               	movwf	??_CC2500_TxData
  9250  0A9A  0824               	movf	??_CC2500_TxData,w
  9251  0A9B  0021               	movlb	1	; select bank1
  9252  0A9C  00D2               	movwf	_SPI0Buffer^(0+128)
  9253                           
  9254                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9255  0A9D  319D  25FA  318A   	fcall	_CC2500_WriteByte
  9256  0AA0  3001               	movlw	1
  9257  0AA1  0020               	movlb	0	; select bank0
  9258  0AA2  00A4               	movwf	??_CC2500_TxData
  9259  0AA3  0824               	movf	??_CC2500_TxData,w
  9260  0AA4  07A5               	addwf	CC2500_TxData@loop_e,f
  9261  0AA5  2A8D               	goto	l9178
  9262  0AA6                     l255:	
  9263                           
  9264                           ;CC2500_B1.c: 48: }
  9265                           ;CC2500_B1.c: 49: RC4 = 1;
  9266  0AA6  160E               	bsf	14,4	;volatile
  9267                           
  9268                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9269  0AA7  3035               	movlw	53
  9270  0AA8  319E  262C  318A   	fcall	_CC2500_WriteCommand
  9271                           
  9272                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9273  0AAB  2AAF               	goto	l9184
  9274  0AAC                     l9182:	
  9275                           
  9276                           ;CC2500_B1.c: 52: Timeout_Counter();
  9277  0AAC  319D  2579  318A   	fcall	_Timeout_Counter
  9278  0AAF                     l9184:	
  9279  0AAF  0020               	movlb	0	; select bank0
  9280  0AB0  180D               	btfsc	13,0	;volatile
  9281  0AB1  2AB5               	goto	l9188
  9282  0AB2  0021               	movlb	1	; select bank1
  9283  0AB3  1D2D               	btfss	(_myMain^(0+128)+13),2
  9284  0AB4  2AAC               	goto	l9182
  9285  0AB5                     l9188:	
  9286                           
  9287                           ;CC2500_B1.c: 53: };
  9288                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9289  0AB5  319B  234C  318A   	fcall	_set_TimeoutCleared
  9290                           
  9291                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9292  0AB8  2ABC               	goto	l9192
  9293  0AB9                     l9190:	
  9294                           
  9295                           ;CC2500_B1.c: 57: Timeout_Counter();
  9296  0AB9  319D  2579  318A   	fcall	_Timeout_Counter
  9297  0ABC                     l9192:	
  9298  0ABC  0020               	movlb	0	; select bank0
  9299  0ABD  1C0D               	btfss	13,0	;volatile
  9300  0ABE  2AC2               	goto	l9196
  9301  0ABF  0021               	movlb	1	; select bank1
  9302  0AC0  1D2D               	btfss	(_myMain^(0+128)+13),2
  9303  0AC1  2AB9               	goto	l9190
  9304  0AC2                     l9196:	
  9305                           
  9306                           ;CC2500_B1.c: 58: };
  9307                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9308  0AC2  319B  234C  318A   	fcall	_set_TimeoutCleared
  9309                           
  9310                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9311  0AC5  3036               	movlw	54
  9312  0AC6  319E  262C  318A   	fcall	_CC2500_WriteCommand
  9313                           
  9314                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9315  0AC9  303B               	movlw	59
  9316  0ACA  319E  262C  318A   	fcall	_CC2500_WriteCommand
  9317                           
  9318                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9319  0ACD  303A               	movlw	58
  9320  0ACE  319E  262C         	fcall	_CC2500_WriteCommand
  9321                           
  9322                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9323  0AD0  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9324  0AD1  0008               	return
  9325  0AD2                     __end_of_CC2500_TxData:	
  9326                           
  9327                           	psect	text41
  9328  0C1B                     __ptext41:	
  9329 ;; *************** function _CC2500_RxData *****************
  9330 ;; Defined at:
  9331 ;;		line 70 in file "../src/CC2500_B1.c"
  9332 ;; Parameters:    Size  Location     Type
  9333 ;;		None
  9334 ;; Auto vars:     Size  Location     Type
  9335 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9336 ;; Return value:  Size  Location     Type
  9337 ;;		None               void
  9338 ;; Registers used:
  9339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9340 ;; Tracked objects:
  9341 ;;		On entry : 0/0
  9342 ;;		On exit  : 0/0
  9343 ;;		Unchanged: 0/0
  9344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9348 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;Total ram usage:        2 bytes
  9350 ;; Hardware stack levels used:    1
  9351 ;; Hardware stack levels required when called:    7
  9352 ;; This function calls:
  9353 ;;		_CC2500_ReadByte
  9354 ;;		_CC2500_ReadStatus
  9355 ;;		_CC2500_WriteByte
  9356 ;;		_Timeout_Counter
  9357 ;;		_set_TimeoutCleared
  9358 ;; This function is called by:
  9359 ;;		_setRF_Main
  9360 ;; This function uses a non-reentrant model
  9361 ;;
  9362                           
  9363                           
  9364                           ;psect for function _CC2500_RxData
  9365  0C1B                     _CC2500_RxData:	
  9366                           
  9367                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9368                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9369                           
  9370                           ;incstack = 0
  9371                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9372  0C1B  0020               	movlb	0	; select bank0
  9373  0C1C  180D               	btfsc	13,0	;volatile
  9374  0C1D  2C22               	goto	l9212
  9375  0C1E  2C2B               	goto	l9218
  9376  0C1F                     l9210:	
  9377                           ;CC2500_B1.c: 76: {
  9378                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9379                           
  9380                           
  9381                           ;CC2500_B1.c: 78: Timeout_Counter();
  9382  0C1F  319D  2579  318C   	fcall	_Timeout_Counter
  9383  0C22                     l9212:	
  9384  0C22  0020               	movlb	0	; select bank0
  9385  0C23  1C0D               	btfss	13,0	;volatile
  9386  0C24  2C28               	goto	l9216
  9387  0C25  0021               	movlb	1	; select bank1
  9388  0C26  1D2D               	btfss	(_myMain^(0+128)+13),2
  9389  0C27  2C1F               	goto	l9210
  9390  0C28                     l9216:	
  9391                           
  9392                           ;CC2500_B1.c: 79: };
  9393                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9394  0C28  319B  234C  318C   	fcall	_set_TimeoutCleared
  9395  0C2B                     l9218:	
  9396                           
  9397                           ;CC2500_B1.c: 81: }
  9398                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9399  0C2B  303B               	movlw	59
  9400  0C2C  3190  2070  318C   	fcall	_CC2500_ReadStatus
  9401                           
  9402                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9403  0C2F  0021               	movlb	1	; select bank1
  9404  0C30  0857               	movf	_s_data^(0+128),w
  9405  0C31  1903               	btfsc	3,2
  9406  0C32  0008               	return
  9407                           
  9408                           ;CC2500_B1.c: 86: RC4 = 0;
  9409  0C33  0020               	movlb	0	; select bank0
  9410  0C34  120E               	bcf	14,4	;volatile
  9411                           
  9412                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9413  0C35  30FF               	movlw	255
  9414  0C36  00A4               	movwf	??_CC2500_RxData
  9415  0C37  0824               	movf	??_CC2500_RxData,w
  9416  0C38  0021               	movlb	1	; select bank1
  9417  0C39  00D2               	movwf	_SPI0Buffer^(0+128)
  9418                           
  9419                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9420  0C3A  2C41               	goto	l9228
  9421  0C3B                     l9230:	
  9422  0C3B  0021               	movlb	1	; select bank1
  9423  0C3C  192D               	btfsc	(_myMain^(0+128)+13),2
  9424  0C3D  2C44               	goto	l280
  9425                           
  9426                           ;CC2500_B1.c: 89: Timeout_Counter();
  9427  0C3E  319D  2579  318C   	fcall	_Timeout_Counter
  9428  0C41                     l9228:	
  9429  0C41  0020               	movlb	0	; select bank0
  9430  0C42  190E               	btfsc	14,2	;volatile
  9431  0C43  2C3B               	goto	l9230
  9432  0C44                     l280:	
  9433                           
  9434                           ;CC2500_B1.c: 90: };
  9435                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9436  0C44  0021               	movlb	1	; select bank1
  9437  0C45  192D               	btfsc	(_myMain^(0+128)+13),2
  9438  0C46  2C8B               	goto	l281
  9439                           
  9440                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9441  0C47  319D  25FA  318C   	fcall	_CC2500_WriteByte
  9442                           
  9443                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9444  0C4A  319E  267C  318C   	fcall	_CC2500_ReadByte
  9445                           
  9446                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9447  0C4D  0021               	movlb	1	; select bank1
  9448  0C4E  0852               	movf	_SPI0Buffer^(0+128),w
  9449  0C4F  0020               	movlb	0	; select bank0
  9450  0C50  00A4               	movwf	??_CC2500_RxData
  9451  0C51  0824               	movf	??_CC2500_RxData,w
  9452  0C52  0021               	movlb	1	; select bank1
  9453  0C53  00D1               	movwf	_Rx_Length^(0+128)
  9454                           
  9455                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9456  0C54  0020               	movlb	0	; select bank0
  9457  0C55  01A5               	clrf	CC2500_RxData@loop_f
  9458  0C56                     l9244:	
  9459  0C56  0021               	movlb	1	; select bank1
  9460  0C57  0851               	movf	_Rx_Length^(0+128),w
  9461  0C58  0020               	movlb	0	; select bank0
  9462  0C59  0225               	subwf	CC2500_RxData@loop_f,w
  9463  0C5A  1803               	btfsc	3,0
  9464  0C5B  2C6F               	goto	l9246
  9465                           
  9466                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9467  0C5C  319E  267C  318C   	fcall	_CC2500_ReadByte
  9468                           
  9469                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9470  0C5F  0021               	movlb	1	; select bank1
  9471  0C60  0852               	movf	_SPI0Buffer^(0+128),w
  9472  0C61  0020               	movlb	0	; select bank0
  9473  0C62  00A4               	movwf	??_CC2500_RxData
  9474  0C63  0825               	movf	CC2500_RxData@loop_f,w
  9475  0C64  3EA0               	addlw	_RF_Data& (0+255)
  9476  0C65  0086               	movwf	6
  9477  0C66  3001               	movlw	1	; select bank3/4
  9478  0C67  0087               	movwf	7
  9479  0C68  0824               	movf	??_CC2500_RxData,w
  9480  0C69  0081               	movwf	1
  9481  0C6A  3001               	movlw	1
  9482  0C6B  00A4               	movwf	??_CC2500_RxData
  9483  0C6C  0824               	movf	??_CC2500_RxData,w
  9484  0C6D  07A5               	addwf	CC2500_RxData@loop_f,f
  9485  0C6E  2C56               	goto	l9244
  9486  0C6F                     l9246:	
  9487                           
  9488                           ;CC2500_B1.c: 99: }
  9489                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9490  0C6F  319E  267C  318C   	fcall	_CC2500_ReadByte
  9491                           
  9492                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9493  0C72  0021               	movlb	1	; select bank1
  9494  0C73  0852               	movf	_SPI0Buffer^(0+128),w
  9495  0C74  0020               	movlb	0	; select bank0
  9496  0C75  00A4               	movwf	??_CC2500_RxData
  9497  0C76  0824               	movf	??_CC2500_RxData,w
  9498  0C77  0021               	movlb	1	; select bank1
  9499  0C78  00D0               	movwf	_RSSI^(0+128)
  9500                           
  9501                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9502  0C79  319E  267C  318C   	fcall	_CC2500_ReadByte
  9503                           
  9504                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9505  0C7C  0021               	movlb	1	; select bank1
  9506  0C7D  0852               	movf	_SPI0Buffer^(0+128),w
  9507  0C7E  0020               	movlb	0	; select bank0
  9508  0C7F  00A4               	movwf	??_CC2500_RxData
  9509  0C80  0824               	movf	??_CC2500_RxData,w
  9510  0C81  0021               	movlb	1	; select bank1
  9511  0C82  00CB               	movwf	_CRC^(0+128)
  9512                           
  9513                           ;CC2500_B1.c: 104: RC4 = 1;
  9514  0C83  0020               	movlb	0	; select bank0
  9515  0C84  160E               	bsf	14,4	;volatile
  9516                           
  9517                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9518  0C85  0021               	movlb	1	; select bank1
  9519  0C86  1BCB               	btfsc	_CRC^(0+128),7
  9520                           
  9521                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9522  0C87  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9523                           
  9524                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9525  0C88  11BC               	bcf	_RF1^(0+128),3
  9526                           
  9527                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9528  0C89  14BC               	bsf	_RF1^(0+128),1
  9529                           
  9530                           ;CC2500_B1.c: 110: } else {
  9531  0C8A  2C8D               	goto	l9258
  9532  0C8B                     l281:	
  9533                           
  9534                           ;CC2500_B1.c: 111: RC4 = 1;
  9535  0C8B  0020               	movlb	0	; select bank0
  9536  0C8C  160E               	bsf	14,4	;volatile
  9537  0C8D                     l9258:	
  9538                           
  9539                           ;CC2500_B1.c: 112: }
  9540                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9541  0C8D  319B  234C         	fcall	_set_TimeoutCleared
  9542  0C8F  0021               	movlb	1	; select bank1
  9543  0C90  0008               	return
  9544  0C91                     __end_of_CC2500_RxData:	
  9545                           
  9546                           	psect	text42
  9547  1070                     __ptext42:	
  9548 ;; *************** function _CC2500_ReadStatus *****************
  9549 ;; Defined at:
  9550 ;;		line 304 in file "../src/CC2500_B1.c"
  9551 ;; Parameters:    Size  Location     Type
  9552 ;;  status_addr     1    wreg     unsigned char 
  9553 ;; Auto vars:     Size  Location     Type
  9554 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9555 ;; Return value:  Size  Location     Type
  9556 ;;		None               void
  9557 ;; Registers used:
  9558 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9559 ;; Tracked objects:
  9560 ;;		On entry : 0/0
  9561 ;;		On exit  : 0/0
  9562 ;;		Unchanged: 0/0
  9563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;Total ram usage:        2 bytes
  9569 ;; Hardware stack levels used:    1
  9570 ;; Hardware stack levels required when called:    6
  9571 ;; This function calls:
  9572 ;;		_CC2500_ReadByte
  9573 ;;		_CC2500_WriteByte
  9574 ;;		_Timeout_Counter
  9575 ;;		_set_TimeoutCleared
  9576 ;; This function is called by:
  9577 ;;		_CC2500_RxData
  9578 ;;		_setRF_Main
  9579 ;; This function uses a non-reentrant model
  9580 ;;
  9581                           
  9582                           
  9583                           ;psect for function _CC2500_ReadStatus
  9584  1070                     _CC2500_ReadStatus:	
  9585                           
  9586                           ;incstack = 0
  9587                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9588                           ;CC2500_ReadStatus@status_addr stored from wreg
  9589  1070  0020               	movlb	0	; select bank0
  9590  1071  00A3               	movwf	CC2500_ReadStatus@status_addr
  9591                           
  9592                           ;CC2500_B1.c: 305: RC4 = 0;
  9593  1072  120E               	bcf	14,4	;volatile
  9594                           
  9595                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9596  1073  0823               	movf	CC2500_ReadStatus@status_addr,w
  9597  1074  3EC0               	addlw	192
  9598  1075  00A2               	movwf	??_CC2500_ReadStatus
  9599  1076  0822               	movf	??_CC2500_ReadStatus,w
  9600  1077  0021               	movlb	1	; select bank1
  9601  1078  00D2               	movwf	_SPI0Buffer^(0+128)
  9602                           
  9603                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9604  1079  287D               	goto	l9002
  9605  107A                     l9000:	
  9606                           
  9607                           ;CC2500_B1.c: 309: Timeout_Counter();
  9608  107A  319D  2579  3190   	fcall	_Timeout_Counter
  9609  107D                     l9002:	
  9610  107D  0020               	movlb	0	; select bank0
  9611  107E  1D0E               	btfss	14,2	;volatile
  9612  107F  2883               	goto	l9006
  9613  1080  0021               	movlb	1	; select bank1
  9614  1081  1D2D               	btfss	(_myMain^(0+128)+13),2
  9615  1082  287A               	goto	l9000
  9616  1083                     l9006:	
  9617                           
  9618                           ;CC2500_B1.c: 310: };
  9619                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9620  1083  319B  234C  3190   	fcall	_set_TimeoutCleared
  9621                           
  9622                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9623  1086  319D  25FA  3190   	fcall	_CC2500_WriteByte
  9624                           
  9625                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9626  1089  319E  267C         	fcall	_CC2500_ReadByte
  9627                           
  9628                           ;CC2500_B1.c: 315: RC4 = 1;
  9629  108B  0020               	movlb	0	; select bank0
  9630  108C  160E               	bsf	14,4	;volatile
  9631                           
  9632                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9633  108D  0021               	movlb	1	; select bank1
  9634  108E  0852               	movf	_SPI0Buffer^(0+128),w
  9635  108F  0020               	movlb	0	; select bank0
  9636  1090  00A2               	movwf	??_CC2500_ReadStatus
  9637  1091  0822               	movf	??_CC2500_ReadStatus,w
  9638  1092  0021               	movlb	1	; select bank1
  9639  1093  00D7               	movwf	_s_data^(0+128)
  9640  1094  0008               	return
  9641  1095                     __end_of_CC2500_ReadStatus:	
  9642                           
  9643                           	psect	text43
  9644  1E7C                     __ptext43:	
  9645 ;; *************** function _CC2500_ReadByte *****************
  9646 ;; Defined at:
  9647 ;;		line 238 in file "../src/CC2500_B1.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;		None
  9650 ;; Auto vars:     Size  Location     Type
  9651 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9652 ;; Return value:  Size  Location     Type
  9653 ;;		None               void
  9654 ;; Registers used:
  9655 ;;		wreg, status,2, status,0
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;Total ram usage:        2 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:    5
  9668 ;; This function calls:
  9669 ;;		Nothing
  9670 ;; This function is called by:
  9671 ;;		_CC2500_RxData
  9672 ;;		_CC2500_ReadStatus
  9673 ;;		_CC2500_ReadREG
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           
  9678                           ;psect for function _CC2500_ReadByte
  9679  1E7C                     _CC2500_ReadByte:	
  9680                           
  9681                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9682                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9683                           
  9684                           ;incstack = 0
  9685                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9686  1E7C  0020               	movlb	0	; select bank0
  9687  1E7D  01A1               	clrf	CC2500_ReadByte@loop_b
  9688  1E7E                     L5:	
  9689  1E7E  3008               	movlw	8
  9690  1E7F  0221               	subwf	CC2500_ReadByte@loop_b,w
  9691  1E80  1803               	btfsc	3,0
  9692  1E81  0008               	return
  9693                           
  9694                           ;CC2500_B1.c: 241: RC1 = 1;
  9695  1E82  148E               	bsf	14,1	;volatile
  9696                           
  9697                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9698  1E83  1003               	clrc
  9699  1E84  0021               	movlb	1	; select bank1
  9700  1E85  0DD2               	rlf	_SPI0Buffer^(0+128),f
  9701                           
  9702                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9703  1E86  0020               	movlb	0	; select bank0
  9704  1E87  1D0E               	btfss	14,2	;volatile
  9705  1E88  2E8C               	goto	l8932
  9706                           
  9707                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9708  1E89  0021               	movlb	1	; select bank1
  9709  1E8A  1452               	bsf	_SPI0Buffer^(0+128),0
  9710  1E8B  2E92               	goto	l8934
  9711  1E8C                     l8932:	
  9712                           
  9713                           ;CC2500_B1.c: 245: else
  9714                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9715  1E8C  30FE               	movlw	254
  9716  1E8D  0020               	movlb	0	; select bank0
  9717  1E8E  00A0               	movwf	??_CC2500_ReadByte
  9718  1E8F  0820               	movf	??_CC2500_ReadByte,w
  9719  1E90  0021               	movlb	1	; select bank1
  9720  1E91  05D2               	andwf	_SPI0Buffer^(0+128),f
  9721  1E92                     l8934:	
  9722                           
  9723                           ;CC2500_B1.c: 247: RC1 = 0;
  9724  1E92  0020               	movlb	0	; select bank0
  9725  1E93  108E               	bcf	14,1	;volatile
  9726  1E94  3001               	movlw	1
  9727  1E95  00A0               	movwf	??_CC2500_ReadByte
  9728  1E96  0820               	movf	??_CC2500_ReadByte,w
  9729  1E97  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9730  1E98  2E7E               	goto	L5
  9731  1E99                     __end_of_CC2500_ReadByte:	
  9732                           
  9733                           	psect	text44
  9734  1B30                     __ptext44:	
  9735 ;; *************** function _RF_Initialization *****************
  9736 ;; Defined at:
  9737 ;;		line 9 in file "../src/RF_Control_B1.c"
  9738 ;; Parameters:    Size  Location     Type
  9739 ;;		None
  9740 ;; Auto vars:     Size  Location     Type
  9741 ;;		None
  9742 ;; Return value:  Size  Location     Type
  9743 ;;		None               void
  9744 ;; Registers used:
  9745 ;;		wreg, status,2, status,0, pclath, cstack
  9746 ;; Tracked objects:
  9747 ;;		On entry : 0/0
  9748 ;;		On exit  : 0/0
  9749 ;;		Unchanged: 0/0
  9750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;Total ram usage:        0 bytes
  9756 ;; Hardware stack levels used:    1
  9757 ;; Hardware stack levels required when called:    6
  9758 ;; This function calls:
  9759 ;;		_setRF_Initialization
  9760 ;; This function is called by:
  9761 ;;		_main
  9762 ;; This function uses a non-reentrant model
  9763 ;;
  9764                           
  9765                           
  9766                           ;psect for function _RF_Initialization
  9767  1B30                     _RF_Initialization:	
  9768                           
  9769                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9770                           
  9771                           ;incstack = 0
  9772                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9773  1B30  319B  239C         	fcall	_setRF_Initialization
  9774  1B32  0008               	return
  9775  1B33                     __end_of_RF_Initialization:	
  9776                           
  9777                           	psect	text45
  9778  1B9C                     __ptext45:	
  9779 ;; *************** function _setRF_Initialization *****************
  9780 ;; Defined at:
  9781 ;;		line 43 in file "../src/RF_Control_B1.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;		None
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;		None
  9786 ;; Return value:  Size  Location     Type
  9787 ;;		None               void
  9788 ;; Registers used:
  9789 ;;		wreg
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9798 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9799 ;;Total ram usage:        1 bytes
  9800 ;; Hardware stack levels used:    1
  9801 ;; Hardware stack levels required when called:    5
  9802 ;; This function calls:
  9803 ;;		Nothing
  9804 ;; This function is called by:
  9805 ;;		_RF_Initialization
  9806 ;; This function uses a non-reentrant model
  9807 ;;
  9808                           
  9809                           
  9810                           ;psect for function _setRF_Initialization
  9811  1B9C                     _setRF_Initialization:	
  9812                           
  9813                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9814                           
  9815                           ;incstack = 0
  9816                           ; Regs used in _setRF_Initialization: [wreg]
  9817  1B9C  3015               	movlw	21
  9818  1B9D  0020               	movlb	0	; select bank0
  9819  1B9E  00A0               	movwf	??_setRF_Initialization
  9820  1B9F  0820               	movf	??_setRF_Initialization,w
  9821  1BA0  0021               	movlb	1	; select bank1
  9822  1BA1  00D4               	movwf	_Tx_Length^(0+128)
  9823                           
  9824                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9825  1BA2  300A               	movlw	10
  9826  1BA3  00C3               	movwf	(_RF1^(0+128)+7)
  9827  1BA4  3000               	movlw	0
  9828  1BA5  00C4               	movwf	(_RF1^(0+128)+8)
  9829  1BA6  0008               	return
  9830  1BA7                     __end_of_setRF_Initialization:	
  9831                           
  9832                           	psect	text46
  9833  1CB9                     __ptext46:	
  9834 ;; *************** function _Mcu_Initialization *****************
  9835 ;; Defined at:
  9836 ;;		line 30 in file "../src/MCU_B1.c"
  9837 ;; Parameters:    Size  Location     Type
  9838 ;;		None
  9839 ;; Auto vars:     Size  Location     Type
  9840 ;;		None
  9841 ;; Return value:  Size  Location     Type
  9842 ;;		None               void
  9843 ;; Registers used:
  9844 ;;		wreg, status,2, status,0, pclath, cstack
  9845 ;; Tracked objects:
  9846 ;;		On entry : 0/0
  9847 ;;		On exit  : 0/0
  9848 ;;		Unchanged: 0/0
  9849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;Total ram usage:        0 bytes
  9855 ;; Hardware stack levels used:    1
  9856 ;; Hardware stack levels required when called:    6
  9857 ;; This function calls:
  9858 ;;		_ADC_Set
  9859 ;;		_Fosc_Set
  9860 ;;		_IOC_Set
  9861 ;;		_IO_Set
  9862 ;;		_TMR1_Set
  9863 ;;		_WDT_Set
  9864 ;; This function is called by:
  9865 ;;		_main
  9866 ;; This function uses a non-reentrant model
  9867 ;;
  9868                           
  9869                           
  9870                           ;psect for function _Mcu_Initialization
  9871  1CB9                     _Mcu_Initialization:	
  9872                           
  9873                           ;MCU_B1.c: 32: Fosc_Set();
  9874                           
  9875                           ;incstack = 0
  9876                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9877  1CB9  319B  2348  319C   	fcall	_Fosc_Set
  9878                           
  9879                           ;MCU_B1.c: 34: IO_Set();
  9880  1CBC  319E  2613  319C   	fcall	_IO_Set
  9881                           
  9882                           ;MCU_B1.c: 36: ;;
  9883                           ;MCU_B1.c: 38: TMR1_Set();
  9884  1CBF  319B  23EF  319C   	fcall	_TMR1_Set
  9885                           
  9886                           ;MCU_B1.c: 40: ADC_Set();
  9887  1CC2  319B  2362  319C   	fcall	_ADC_Set
  9888                           
  9889                           ;MCU_B1.c: 42: ;;
  9890                           ;MCU_B1.c: 44: ;;
  9891                           ;MCU_B1.c: 46: IOC_Set();
  9892  1CC5  319B  23E3  319C   	fcall	_IOC_Set
  9893                           
  9894                           ;MCU_B1.c: 48: ;;
  9895                           ;MCU_B1.c: 50: ;;
  9896                           ;MCU_B1.c: 52: WDT_Set();
  9897  1CC8  319B  23FB         	fcall	_WDT_Set
  9898  1CCA  0008               	return
  9899  1CCB                     __end_of_Mcu_Initialization:	
  9900                           
  9901                           	psect	text47
  9902  1BFB                     __ptext47:	
  9903 ;; *************** function _WDT_Set *****************
  9904 ;; Defined at:
  9905 ;;		line 1019 in file "../src/MCU_B1.c"
  9906 ;; Parameters:    Size  Location     Type
  9907 ;;		None
  9908 ;; Auto vars:     Size  Location     Type
  9909 ;;		None
  9910 ;; Return value:  Size  Location     Type
  9911 ;;		None               void
  9912 ;; Registers used:
  9913 ;;		wreg
  9914 ;; Tracked objects:
  9915 ;;		On entry : 0/0
  9916 ;;		On exit  : 0/0
  9917 ;;		Unchanged: 0/0
  9918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9921 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9922 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;Total ram usage:        1 bytes
  9924 ;; Hardware stack levels used:    1
  9925 ;; Hardware stack levels required when called:    5
  9926 ;; This function calls:
  9927 ;;		Nothing
  9928 ;; This function is called by:
  9929 ;;		_Mcu_Initialization
  9930 ;; This function uses a non-reentrant model
  9931 ;;
  9932                           
  9933                           
  9934                           ;psect for function _WDT_Set
  9935  1BFB                     _WDT_Set:	
  9936                           
  9937                           ;MCU_B1.c: 1026: WDTCON = 0b00010111;;
  9938                           
  9939                           ;incstack = 0
  9940                           ; Regs used in _WDT_Set: [wreg]
  9941  1BFB  3017               	movlw	23
  9942  1BFC  0021               	movlb	1	; select bank1
  9943  1BFD  0097               	movwf	23	;volatile
  9944                           
  9945                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  9946  1BFE  0022               	movlb	2	; select bank2
  9947  1BFF  1425               	bsf	_WDT^(0+256),0
  9948                           
  9949                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  9950  1C00  300A               	movlw	10
  9951  1C01  0020               	movlb	0	; select bank0
  9952  1C02  00A0               	movwf	??_WDT_Set
  9953  1C03  0820               	movf	??_WDT_Set,w
  9954  1C04  0022               	movlb	2	; select bank2
  9955  1C05  00A6               	movwf	(_WDT^(0+256)+1)
  9956  1C06  0008               	return
  9957  1C07                     __end_of_WDT_Set:	
  9958                           
  9959                           	psect	text48
  9960  1BEF                     __ptext48:	
  9961 ;; *************** function _TMR1_Set *****************
  9962 ;; Defined at:
  9963 ;;		line 199 in file "../src/MCU_B1.c"
  9964 ;; Parameters:    Size  Location     Type
  9965 ;;		None
  9966 ;; Auto vars:     Size  Location     Type
  9967 ;;		None
  9968 ;; Return value:  Size  Location     Type
  9969 ;;		None               void
  9970 ;; Registers used:
  9971 ;;		wreg
  9972 ;; Tracked objects:
  9973 ;;		On entry : 0/0
  9974 ;;		On exit  : 0/0
  9975 ;;		Unchanged: 0/0
  9976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;Total ram usage:        0 bytes
  9982 ;; Hardware stack levels used:    1
  9983 ;; Hardware stack levels required when called:    5
  9984 ;; This function calls:
  9985 ;;		Nothing
  9986 ;; This function is called by:
  9987 ;;		_Mcu_Initialization
  9988 ;; This function uses a non-reentrant model
  9989 ;;
  9990                           
  9991                           
  9992                           ;psect for function _TMR1_Set
  9993  1BEF                     _TMR1_Set:	
  9994                           
  9995                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9996                           
  9997                           ;incstack = 0
  9998                           ; Regs used in _TMR1_Set: [wreg]
  9999  1BEF  3041               	movlw	65
 10000  1BF0  0020               	movlb	0	; select bank0
 10001  1BF1  0098               	movwf	24	;volatile
 10002                           
 10003                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
 10004  1BF2  30FA               	movlw	250
 10005  1BF3  0097               	movwf	23	;volatile
 10006                           
 10007                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
 10008  1BF4  3038               	movlw	56
 10009  1BF5  0096               	movwf	22	;volatile
 10010                           
 10011                           ;MCU_B1.c: 203: TMR1IE = 1;
 10012  1BF6  0021               	movlb	1	; select bank1
 10013  1BF7  1411               	bsf	17,0	;volatile
 10014                           
 10015                           ;MCU_B1.c: 204: PEIE = 1;
 10016  1BF8  170B               	bsf	11,6	;volatile
 10017                           
 10018                           ;MCU_B1.c: 205: GIE = 1;
 10019  1BF9  178B               	bsf	11,7	;volatile
 10020  1BFA  0008               	return
 10021  1BFB                     __end_of_TMR1_Set:	
 10022                           
 10023                           	psect	text49
 10024  1E13                     __ptext49:	
 10025 ;; *************** function _IO_Set *****************
 10026 ;; Defined at:
 10027 ;;		line 60 in file "../src/MCU_B1.c"
 10028 ;; Parameters:    Size  Location     Type
 10029 ;;		None
 10030 ;; Auto vars:     Size  Location     Type
 10031 ;;		None
 10032 ;; Return value:  Size  Location     Type
 10033 ;;		None               void
 10034 ;; Registers used:
 10035 ;;		wreg, status,2
 10036 ;; Tracked objects:
 10037 ;;		On entry : 0/0
 10038 ;;		On exit  : 0/0
 10039 ;;		Unchanged: 0/0
 10040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;Total ram usage:        0 bytes
 10046 ;; Hardware stack levels used:    1
 10047 ;; Hardware stack levels required when called:    5
 10048 ;; This function calls:
 10049 ;;		Nothing
 10050 ;; This function is called by:
 10051 ;;		_Mcu_Initialization
 10052 ;; This function uses a non-reentrant model
 10053 ;;
 10054                           
 10055                           
 10056                           ;psect for function _IO_Set
 10057  1E13                     _IO_Set:	
 10058                           
 10059                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10060                           
 10061                           ;incstack = 0
 10062                           ; Regs used in _IO_Set: [wreg+status,2]
 10063  1E13  3077               	movlw	119
 10064  1E14  0021               	movlb	1	; select bank1
 10065  1E15  008C               	movwf	12	;volatile
 10066                           
 10067                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10068  1E16  3007               	movlw	7
 10069  1E17  008D               	movwf	13	;volatile
 10070                           
 10071                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10072  1E18  300C               	movlw	12
 10073  1E19  008E               	movwf	14	;volatile
 10074                           
 10075                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10076  1E1A  0022               	movlb	2	; select bank2
 10077  1E1B  018C               	clrf	12	;volatile
 10078                           
 10079                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10080  1E1C  3002               	movlw	2
 10081  1E1D  008D               	movwf	13	;volatile
 10082                           
 10083                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10084  1E1E  018E               	clrf	14	;volatile
 10085                           
 10086                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10087  1E1F  3022               	movlw	34
 10088  1E20  0023               	movlb	3	; select bank3
 10089  1E21  008C               	movwf	12	;volatile
 10090                           
 10091                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10092  1E22  018D               	clrf	13	;volatile
 10093                           
 10094                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10095  1E23  018E               	clrf	14	;volatile
 10096                           
 10097                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10098  1E24  3077               	movlw	119
 10099  1E25  0020               	movlb	0	; select bank0
 10100  1E26  008C               	movwf	12	;volatile
 10101                           
 10102                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10103  1E27  3007               	movlw	7
 10104  1E28  008D               	movwf	13	;volatile
 10105                           
 10106                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10107  1E29  300C               	movlw	12
 10108  1E2A  008E               	movwf	14	;volatile
 10109  1E2B  0008               	return
 10110  1E2C                     __end_of_IO_Set:	
 10111                           
 10112                           	psect	text50
 10113  1BE3                     __ptext50:	
 10114 ;; *************** function _IOC_Set *****************
 10115 ;; Defined at:
 10116 ;;		line 366 in file "../src/MCU_B1.c"
 10117 ;; Parameters:    Size  Location     Type
 10118 ;;		None
 10119 ;; Auto vars:     Size  Location     Type
 10120 ;;		None
 10121 ;; Return value:  Size  Location     Type
 10122 ;;		None               void
 10123 ;; Registers used:
 10124 ;;		wreg, status,2
 10125 ;; Tracked objects:
 10126 ;;		On entry : 0/0
 10127 ;;		On exit  : 0/0
 10128 ;;		Unchanged: 0/0
 10129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;Total ram usage:        0 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; Hardware stack levels required when called:    5
 10137 ;; This function calls:
 10138 ;;		Nothing
 10139 ;; This function is called by:
 10140 ;;		_Mcu_Initialization
 10141 ;; This function uses a non-reentrant model
 10142 ;;
 10143                           
 10144                           
 10145                           ;psect for function _IOC_Set
 10146  1BE3                     _IOC_Set:	
 10147                           
 10148                           ;MCU_B1.c: 367: WPUB2 = 0;
 10149                           
 10150                           ;incstack = 0
 10151                           ; Regs used in _IOC_Set: [wreg+status,2]
 10152  1BE3  0024               	movlb	4	; select bank4
 10153  1BE4  110D               	bcf	13,2	;volatile
 10154                           
 10155                           ;MCU_B1.c: 375: IOCBP = 0b00000000;
 10156  1BE5  0027               	movlb	7	; select bank7
 10157  1BE6  0194               	clrf	20	;volatile
 10158                           
 10159                           ;MCU_B1.c: 376: IOCBN = 0b00000100;
 10160  1BE7  3004               	movlw	4
 10161  1BE8  0095               	movwf	21	;volatile
 10162                           
 10163                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
 10164  1BE9  0196               	clrf	22	;volatile
 10165                           
 10166                           ;MCU_B1.c: 394: IOCIE = 1;
 10167  1BEA  158B               	bsf	11,3	;volatile
 10168                           
 10169                           ;MCU_B1.c: 395: IOCIF = 0;
 10170  1BEB  100B               	bcf	11,0	;volatile
 10171                           
 10172                           ;MCU_B1.c: 396: PEIE = 1;
 10173  1BEC  170B               	bsf	11,6	;volatile
 10174                           
 10175                           ;MCU_B1.c: 397: GIE = 1;
 10176  1BED  178B               	bsf	11,7	;volatile
 10177  1BEE  0008               	return
 10178  1BEF                     __end_of_IOC_Set:	
 10179                           
 10180                           	psect	text51
 10181  1B48                     __ptext51:	
 10182 ;; *************** function _Fosc_Set *****************
 10183 ;; Defined at:
 10184 ;;		line 56 in file "../src/MCU_B1.c"
 10185 ;; Parameters:    Size  Location     Type
 10186 ;;		None
 10187 ;; Auto vars:     Size  Location     Type
 10188 ;;		None
 10189 ;; Return value:  Size  Location     Type
 10190 ;;		None               void
 10191 ;; Registers used:
 10192 ;;		wreg
 10193 ;; Tracked objects:
 10194 ;;		On entry : 0/0
 10195 ;;		On exit  : 0/0
 10196 ;;		Unchanged: 0/0
 10197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10202 ;;Total ram usage:        0 bytes
 10203 ;; Hardware stack levels used:    1
 10204 ;; Hardware stack levels required when called:    5
 10205 ;; This function calls:
 10206 ;;		Nothing
 10207 ;; This function is called by:
 10208 ;;		_Mcu_Initialization
 10209 ;; This function uses a non-reentrant model
 10210 ;;
 10211                           
 10212                           
 10213                           ;psect for function _Fosc_Set
 10214  1B48                     _Fosc_Set:	
 10215                           
 10216                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10217                           
 10218                           ;incstack = 0
 10219                           ; Regs used in _Fosc_Set: [wreg]
 10220  1B48  3078               	movlw	120
 10221  1B49  0021               	movlb	1	; select bank1
 10222  1B4A  0099               	movwf	25	;volatile
 10223  1B4B  0008               	return
 10224  1B4C                     __end_of_Fosc_Set:	
 10225                           
 10226                           	psect	text52
 10227  1B62                     __ptext52:	
 10228 ;; *************** function _ADC_Set *****************
 10229 ;; Defined at:
 10230 ;;		line 420 in file "../src/MCU_B1.c"
 10231 ;; Parameters:    Size  Location     Type
 10232 ;;		None
 10233 ;; Auto vars:     Size  Location     Type
 10234 ;;		None
 10235 ;; Return value:  Size  Location     Type
 10236 ;;		None               void
 10237 ;; Registers used:
 10238 ;;		wreg
 10239 ;; Tracked objects:
 10240 ;;		On entry : 0/0
 10241 ;;		On exit  : 0/0
 10242 ;;		Unchanged: 0/0
 10243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10248 ;;Total ram usage:        0 bytes
 10249 ;; Hardware stack levels used:    1
 10250 ;; Hardware stack levels required when called:    5
 10251 ;; This function calls:
 10252 ;;		Nothing
 10253 ;; This function is called by:
 10254 ;;		_Mcu_Initialization
 10255 ;; This function uses a non-reentrant model
 10256 ;;
 10257                           
 10258                           
 10259                           ;psect for function _ADC_Set
 10260  1B62                     _ADC_Set:	
 10261                           
 10262                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10263                           
 10264                           ;incstack = 0
 10265                           ; Regs used in _ADC_Set: [wreg]
 10266  1B62  30F3               	movlw	243
 10267  1B63  0021               	movlb	1	; select bank1
 10268  1B64  009E               	movwf	30	;volatile
 10269                           
 10270                           ;MCU_B1.c: 422: FVRCON = 0xc1;
 10271  1B65  30C1               	movlw	193
 10272  1B66  0022               	movlb	2	; select bank2
 10273  1B67  0097               	movwf	23	;volatile
 10274  1B68  0008               	return
 10275  1B69                     __end_of_ADC_Set:	
 10276                           
 10277                           	psect	text53
 10278  033D                     __ptext53:	
 10279 ;; *************** function _Load_Main *****************
 10280 ;; Defined at:
 10281 ;;		line 39 in file "../src/OverLoad_B1.c"
 10282 ;; Parameters:    Size  Location     Type
 10283 ;;		None
 10284 ;; Auto vars:     Size  Location     Type
 10285 ;;  i               1   15[BANK0 ] unsigned char 
 10286 ;;  error           1   14[BANK0 ] unsigned char 
 10287 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10288 ;;  j               1   11[BANK0 ] unsigned char 
 10289 ;; Return value:  Size  Location     Type
 10290 ;;		None               void
 10291 ;; Registers used:
 10292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10293 ;; Tracked objects:
 10294 ;;		On entry : 0/0
 10295 ;;		On exit  : 0/0
 10296 ;;		Unchanged: 0/0
 10297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;Total ram usage:        7 bytes
 10303 ;; Hardware stack levels used:    1
 10304 ;; Hardware stack levels required when called:    8
 10305 ;; This function calls:
 10306 ;;		_getAll_DimmerLights_AdjGO
 10307 ;;		_getMain_All_Error_Status
 10308 ;;		_getMain_LightsStatus
 10309 ;;		_getMain_Lights_Count
 10310 ;;		_getMain_LoadOK
 10311 ;;		_setLoad_AH_AL_Restore
 10312 ;; This function is called by:
 10313 ;;		_main
 10314 ;; This function uses a non-reentrant model
 10315 ;;
 10316                           
 10317                           
 10318                           ;psect for function _Load_Main
 10319  033D                     _Load_Main:	
 10320                           
 10321                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10322                           
 10323                           ;incstack = 0
 10324                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10325  033D  0020               	movlb	0	; select bank0
 10326  033E  01AF               	clrf	Load_Main@i
 10327  033F  01AB               	clrf	Load_Main@j
 10328  0340  3000               	movlw	0
 10329  0341  3191  21B8  3183   	fcall	_getMain_All_Error_Status
 10330  0344  0020               	movlb	0	; select bank0
 10331  0345  00A9               	movwf	??_Load_Main
 10332  0346  0829               	movf	??_Load_Main,w
 10333  0347  00AE               	movwf	Load_Main@error
 10334  0348  01AC               	clrf	Load_Main@adjgo
 10335                           
 10336                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10337  0349  0022               	movlb	2	; select bank2
 10338  034A  1C27               	btfss	_Load^(0+256),0
 10339  034B  2C7B               	goto	l1689
 10340                           
 10341                           ;OverLoad_B1.c: 44: adjgo = getAll_DimmerLights_AdjGO();
 10342  034C  319C  2450  3183   	fcall	_getAll_DimmerLights_AdjGO
 10343  034F  0020               	movlb	0	; select bank0
 10344  0350  00A9               	movwf	??_Load_Main
 10345  0351  0829               	movf	??_Load_Main,w
 10346  0352  00AC               	movwf	Load_Main@adjgo
 10347                           
 10348                           ;OverLoad_B1.c: 46: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10349  0353  01AD               	clrf	_Load_Main$4305
 10350  0354  3191  215D  3183   	fcall	_getMain_LightsStatus
 10351  0357  3A01               	xorlw	1
 10352  0358  1D03               	skipz
 10353  0359  2B63               	goto	l10458
 10354  035A  0020               	movlb	0	; select bank0
 10355  035B  08AE               	movf	Load_Main@error,f
 10356  035C  1D03               	skipz
 10357  035D  2B63               	goto	l10458
 10358  035E  08AC               	movf	Load_Main@adjgo,f
 10359  035F  1D03               	skipz
 10360  0360  2B63               	goto	l10458
 10361  0361  01AD               	clrf	_Load_Main$4305
 10362  0362  0AAD               	incf	_Load_Main$4305,f
 10363  0363                     l10458:	
 10364  0363  0020               	movlb	0	; select bank0
 10365  0364  082D               	movf	_Load_Main$4305,w
 10366  0365  0022               	movlb	2	; select bank2
 10367  0366  10A7               	bcf	_Load^(0+256),1
 10368  0367  1D03               	skipz
 10369  0368  14A7               	bsf	_Load^(0+256),1
 10370                           
 10371                           ;OverLoad_B1.c: 47: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10372  0369  319C  2414  3183   	fcall	_getMain_LoadOK
 10373  036C  3A01               	xorlw	1
 10374  036D  1D03               	skipz
 10375  036E  2B74               	goto	l1692
 10376  036F  0022               	movlb	2	; select bank2
 10377  0370  19A7               	btfsc	_Load^(0+256),3
 10378  0371  2B74               	goto	l1692
 10379                           
 10380                           ;OverLoad_B1.c: 48: Load.Run = 1;
 10381  0372  15A7               	bsf	_Load^(0+256),3
 10382                           
 10383                           ;OverLoad_B1.c: 49: Load.OK = 0;
 10384  0373  13A7               	bcf	_Load^(0+256),7
 10385  0374                     l1692:	
 10386                           
 10387                           ;OverLoad_B1.c: 50: }
 10388                           ;OverLoad_B1.c: 53: if (Load.GO == 1) {
 10389  0374  0022               	movlb	2	; select bank2
 10390  0375  1CA7               	btfss	_Load^(0+256),1
 10391  0376  2C4B               	goto	l1693
 10392                           
 10393                           ;OverLoad_B1.c: 54: Load.LightsON = 1;
 10394  0377  1527               	bsf	_Load^(0+256),2
 10395                           
 10396                           ;OverLoad_B1.c: 56: if (Load.ADtoGO == 1) {
 10397  0378  1E27               	btfss	_Load^(0+256),4
 10398  0379  2C49               	goto	l1694
 10399                           
 10400                           ;OverLoad_B1.c: 57: Load.Time++;
 10401  037A  3001               	movlw	1
 10402  037B  07A8               	addwf	(_Load^(0+256)+1),f
 10403  037C  3000               	movlw	0
 10404  037D  3DA9               	addwfc	((_Load+1)^(0+256)+1),f
 10405                           
 10406                           ;OverLoad_B1.c: 58: if (Load.Time >= 5) {
 10407  037E  3000               	movlw	0
 10408  037F  0229               	subwf	((_Load+1)^(0+256)+1),w
 10409  0380  3005               	movlw	5
 10410  0381  1903               	skipnz
 10411  0382  0228               	subwf	(_Load^(0+256)+1),w
 10412  0383  1C03               	skipc
 10413  0384  0008               	return
 10414                           
 10415                           ;OverLoad_B1.c: 59: Load.Time = 0;
 10416  0385  01A8               	clrf	(_Load^(0+256)+1)
 10417  0386  01A9               	clrf	((_Load+1)^(0+256)+1)
 10418                           
 10419                           ;OverLoad_B1.c: 60: Load.ADtoGO = 0;
 10420  0387  1227               	bcf	_Load^(0+256),4
 10421                           
 10422                           ;OverLoad_B1.c: 62: for (i = 0; i < 4; i++) {
 10423  0388  0020               	movlb	0	; select bank0
 10424  0389  01AF               	clrf	Load_Main@i
 10425  038A  3004               	movlw	4
 10426  038B  022F               	subwf	Load_Main@i,w
 10427  038C  1803               	btfsc	3,0
 10428  038D  2BB8               	goto	l10484
 10429  038E                     l10478:	
 10430                           
 10431                           ;OverLoad_B1.c: 63: Load.ADH += Load.AH[i];
 10432  038E  352F               	lslf	Load_Main@i,w
 10433  038F  3E32               	addlw	(_Load+11)& (0+255)
 10434  0390  0086               	movwf	6
 10435  0391  3001               	movlw	1	; select bank2/3
 10436  0392  0087               	movwf	7
 10437  0393  3F40               	moviw [0]fsr1
 10438  0394  00A9               	movwf	??_Load_Main
 10439  0395  3F41               	moviw [1]fsr1
 10440  0396  00AA               	movwf	??_Load_Main+1
 10441  0397  0829               	movf	??_Load_Main,w
 10442  0398  0022               	movlb	2	; select bank2
 10443  0399  07AC               	addwf	(_Load^(0+256)+5),f
 10444  039A  0020               	movlb	0	; select bank0
 10445  039B  082A               	movf	??_Load_Main+1,w
 10446  039C  0022               	movlb	2	; select bank2
 10447  039D  3DAD               	addwfc	((_Load+1)^(0+256)+5),f
 10448                           
 10449                           ;OverLoad_B1.c: 64: Load.ADL += Load.AL[i];
 10450  039E  0020               	movlb	0	; select bank0
 10451  039F  352F               	lslf	Load_Main@i,w
 10452  03A0  3E3C               	addlw	(_Load+21)& (0+255)
 10453  03A1  0086               	movwf	6
 10454  03A2  3001               	movlw	1	; select bank2/3
 10455  03A3  0087               	movwf	7
 10456  03A4  3F40               	moviw [0]fsr1
 10457  03A5  00A9               	movwf	??_Load_Main
 10458  03A6  3F41               	moviw [1]fsr1
 10459  03A7  00AA               	movwf	??_Load_Main+1
 10460  03A8  0829               	movf	??_Load_Main,w
 10461  03A9  0022               	movlb	2	; select bank2
 10462  03AA  07AE               	addwf	(_Load^(0+256)+7),f
 10463  03AB  0020               	movlb	0	; select bank0
 10464  03AC  082A               	movf	??_Load_Main+1,w
 10465  03AD  0022               	movlb	2	; select bank2
 10466  03AE  3DAF               	addwfc	((_Load+1)^(0+256)+7),f
 10467  03AF  3001               	movlw	1
 10468  03B0  0020               	movlb	0	; select bank0
 10469  03B1  00A9               	movwf	??_Load_Main
 10470  03B2  0829               	movf	??_Load_Main,w
 10471  03B3  07AF               	addwf	Load_Main@i,f
 10472  03B4  3004               	movlw	4
 10473  03B5  022F               	subwf	Load_Main@i,w
 10474  03B6  1C03               	skipc
 10475  03B7  2B8E               	goto	l10478
 10476  03B8                     l10484:	
 10477                           
 10478                           ;OverLoad_B1.c: 65: }
 10479                           ;OverLoad_B1.c: 66: Load.ADH /= 4;
 10480  03B8  3002               	movlw	2
 10481  03B9  0022               	movlb	2	; select bank2
 10482  03BA                     u11985:	
 10483  03BA  36AD               	lsrf	((_Load+1)^(0+256)+5),f
 10484  03BB  0CAC               	rrf	(_Load^(0+256)+5),f
 10485  03BC  0B89               	decfsz	9,f
 10486  03BD  2BBA               	goto	u11985
 10487                           
 10488                           ;OverLoad_B1.c: 67: Load.ADL /= 4;
 10489  03BE  3002               	movlw	2
 10490  03BF                     u11995:	
 10491  03BF  36AF               	lsrf	((_Load+1)^(0+256)+7),f
 10492  03C0  0CAE               	rrf	(_Load^(0+256)+7),f
 10493  03C1  0B89               	decfsz	9,f
 10494  03C2  2BBF               	goto	u11995
 10495                           
 10496                           ;OverLoad_B1.c: 68: setLoad_AH_AL_Restore();
 10497  03C3  319E  2660  3183   	fcall	_setLoad_AH_AL_Restore
 10498                           
 10499                           ;OverLoad_B1.c: 69: if (Load.ADH > Load.ADL) {
 10500  03C6  0022               	movlb	2	; select bank2
 10501  03C7  082D               	movf	((_Load+1)^(0+256)+5),w
 10502  03C8  022F               	subwf	((_Load+1)^(0+256)+7),w
 10503  03C9  1D03               	skipz
 10504  03CA  2BCD               	goto	u12005
 10505  03CB  082C               	movf	(_Load^(0+256)+5),w
 10506  03CC  022E               	subwf	(_Load^(0+256)+7),w
 10507  03CD                     u12005:	
 10508  03CD  1803               	skipnc
 10509  03CE  0008               	return
 10510                           
 10511                           ;OverLoad_B1.c: 70: Load.AD = Load.ADH - Load.ADL;
 10512  03CF  3005               	movlw	5
 10513  03D0  3E27               	addlw	_Load& (0+255)
 10514  03D1  0086               	movwf	6
 10515  03D2  3001               	movlw	1	; select bank2/3
 10516  03D3  0087               	movwf	7
 10517  03D4  092E               	comf	(_Load^(0+256)+7),w
 10518  03D5  0020               	movlb	0	; select bank0
 10519  03D6  00A9               	movwf	??_Load_Main
 10520  03D7  0022               	movlb	2	; select bank2
 10521  03D8  092F               	comf	((_Load+1)^(0+256)+7),w
 10522  03D9  0020               	movlb	0	; select bank0
 10523  03DA  00AA               	movwf	??_Load_Main+1
 10524  03DB  0AA9               	incf	??_Load_Main,f
 10525  03DC  1903               	skipnz
 10526  03DD  0AAA               	incf	??_Load_Main+1,f
 10527  03DE  3F40               	moviw [0]fsr1
 10528  03DF  0729               	addwf	??_Load_Main,w
 10529  03E0  0022               	movlb	2	; select bank2
 10530  03E1  00C6               	movwf	(_Load^(0+256)+31)
 10531  03E2  3F41               	moviw [1]fsr1
 10532  03E3  0020               	movlb	0	; select bank0
 10533  03E4  3D2A               	addwfc	??_Load_Main+1,w
 10534  03E5  0022               	movlb	2	; select bank2
 10535  03E6  00C7               	movwf	(_Load^(0+256)+32)
 10536                           
 10537                           ;OverLoad_B1.c: 71: Load.ADH = 0;
 10538  03E7  01AC               	clrf	(_Load^(0+256)+5)
 10539  03E8  01AD               	clrf	((_Load+1)^(0+256)+5)
 10540                           
 10541                           ;OverLoad_B1.c: 72: Load.ADL = 0;
 10542  03E9  01AE               	clrf	(_Load^(0+256)+7)
 10543  03EA  01AF               	clrf	((_Load+1)^(0+256)+7)
 10544                           
 10545                           ;OverLoad_B1.c: 73: Load.LightsCount = getMain_Lights_Count();
 10546  03EB  319D  25CD  3183   	fcall	_getMain_Lights_Count
 10547  03EE  0020               	movlb	0	; select bank0
 10548  03EF  00A9               	movwf	??_Load_Main
 10549  03F0  0829               	movf	??_Load_Main,w
 10550  03F1  0022               	movlb	2	; select bank2
 10551  03F2  00D2               	movwf	(_Load^(0+256)+43)
 10552                           
 10553                           ;OverLoad_B1.c: 75: if (Load.Run == 1) {
 10554  03F3  1DA7               	btfss	_Load^(0+256),3
 10555  03F4  2C1A               	goto	l10516
 10556                           
 10557                           ;OverLoad_B1.c: 76: if (Load.Count < 2) {
 10558  03F5  3002               	movlw	2
 10559  03F6  0250               	subwf	(_Load^(0+256)+41),w
 10560  03F7  1803               	skipnc
 10561  03F8  2C1A               	goto	l10516
 10562                           
 10563                           ;OverLoad_B1.c: 77: Load.Count++;
 10564  03F9  3001               	movlw	1
 10565  03FA  0020               	movlb	0	; select bank0
 10566  03FB  00A9               	movwf	??_Load_Main
 10567  03FC  0829               	movf	??_Load_Main,w
 10568  03FD  0022               	movlb	2	; select bank2
 10569  03FE  07D0               	addwf	(_Load^(0+256)+41),f
 10570                           
 10571                           ;OverLoad_B1.c: 78: if (Load.Count == 1) {
 10572  03FF  0850               	movf	(_Load^(0+256)+41),w
 10573  0400  3A01               	xorlw	1
 10574  0401  1D03               	skipz
 10575  0402  2C07               	goto	l10508
 10576                           
 10577                           ;OverLoad_B1.c: 79: Load.JudgeValue = 0x400;
 10578  0403  3000               	movlw	0
 10579  0404  00CC               	movwf	(_Load^(0+256)+37)
 10580  0405  3004               	movlw	4
 10581  0406  2C12               	goto	L6
 10582  0407                     l10508:	
 10583                           ;OverLoad_B1.c: 80: } else if (Load.Count == 2) {
 10584                           
 10585  0407  0850               	movf	(_Load^(0+256)+41),w
 10586  0408  3A02               	xorlw	2
 10587  0409  1D03               	skipz
 10588  040A  2C1A               	goto	l10516
 10589                           
 10590                           ;OverLoad_B1.c: 81: if (Load.LightsCount == 1) {
 10591  040B  0852               	movf	(_Load^(0+256)+43),w
 10592  040C  3A01               	xorlw	1
 10593  040D  1D03               	skipz
 10594  040E  2C14               	goto	l10514
 10595                           
 10596                           ;OverLoad_B1.c: 82: Load.JudgeValue = 0x56;
 10597  040F  3056               	movlw	86
 10598  0410  00CC               	movwf	(_Load^(0+256)+37)
 10599  0411  3000               	movlw	0
 10600  0412                     L6:	
 10601  0412  00CD               	movwf	(_Load^(0+256)+38)
 10602                           
 10603                           ;OverLoad_B1.c: 83: } else {
 10604  0413  2C1A               	goto	l10516
 10605  0414                     l10514:	
 10606                           
 10607                           ;OverLoad_B1.c: 84: Load.JudgeValue = 0x56 + Load.TotalLoad;
 10608  0414  0830               	movf	(_Load^(0+256)+9),w
 10609  0415  3E56               	addlw	86
 10610  0416  00CC               	movwf	(_Load^(0+256)+37)
 10611  0417  3000               	movlw	0
 10612  0418  3D31               	addwfc	((_Load+1)^(0+256)+9),w
 10613  0419  00CD               	movwf	((_Load+1)^(0+256)+37)
 10614  041A                     l10516:	
 10615                           
 10616                           ;OverLoad_B1.c: 85: }
 10617                           ;OverLoad_B1.c: 86: }
 10618                           ;OverLoad_B1.c: 87: }
 10619                           ;OverLoad_B1.c: 88: }
 10620                           ;OverLoad_B1.c: 90: if (Load.AD >= Load.JudgeValue) {
 10621  041A  084D               	movf	((_Load+1)^(0+256)+37),w
 10622  041B  0247               	subwf	((_Load+1)^(0+256)+31),w
 10623  041C  1D03               	skipz
 10624  041D  2C20               	goto	u12065
 10625  041E  084C               	movf	(_Load^(0+256)+37),w
 10626  041F  0246               	subwf	(_Load^(0+256)+31),w
 10627  0420                     u12065:	
 10628  0420  1C03               	skipc
 10629  0421  2C2F               	goto	l10526
 10630                           
 10631                           ;OverLoad_B1.c: 91: Load.ErrorCount++;
 10632  0422  3001               	movlw	1
 10633  0423  0020               	movlb	0	; select bank0
 10634  0424  00A9               	movwf	??_Load_Main
 10635  0425  0829               	movf	??_Load_Main,w
 10636  0426  0022               	movlb	2	; select bank2
 10637  0427  07D1               	addwf	(_Load^(0+256)+42),f
 10638                           
 10639                           ;OverLoad_B1.c: 92: if (Load.ErrorCount > 2) {
 10640  0428  3003               	movlw	3
 10641  0429  0251               	subwf	(_Load^(0+256)+42),w
 10642  042A  1C03               	skipc
 10643  042B  0008               	return
 10644                           
 10645                           ;OverLoad_B1.c: 93: Load.ErrorCount = 0;
 10646  042C  01D1               	clrf	(_Load^(0+256)+42)
 10647                           
 10648                           ;OverLoad_B1.c: 94: Load.ERROR = 1;
 10649  042D  16A7               	bsf	_Load^(0+256),5
 10650                           
 10651                           ;OverLoad_B1.c: 107: }
 10652                           ;OverLoad_B1.c: 108: } else {
 10653  042E  0008               	return
 10654  042F                     l10526:	
 10655                           
 10656                           ;OverLoad_B1.c: 109: Load.ErrorCount = 0;
 10657  042F  01D1               	clrf	(_Load^(0+256)+42)
 10658                           
 10659                           ;OverLoad_B1.c: 110: if (Load.Run == 1) {
 10660  0430  1DA7               	btfss	_Load^(0+256),3
 10661  0431  0008               	return
 10662                           
 10663                           ;OverLoad_B1.c: 111: if (Load.OK == 0) {
 10664  0432  1BA7               	btfsc	_Load^(0+256),7
 10665  0433  0008               	return
 10666                           
 10667                           ;OverLoad_B1.c: 112: Load.SafeCount++;
 10668  0434  3001               	movlw	1
 10669  0435  0020               	movlb	0	; select bank0
 10670  0436  00A9               	movwf	??_Load_Main
 10671  0437  0829               	movf	??_Load_Main,w
 10672  0438  0022               	movlb	2	; select bank2
 10673  0439  07D3               	addwf	(_Load^(0+256)+44),f
 10674                           
 10675                           ;OverLoad_B1.c: 113: if (Load.SafeCount >= 3) {
 10676  043A  3003               	movlw	3
 10677  043B  0253               	subwf	(_Load^(0+256)+44),w
 10678  043C  1C03               	skipc
 10679  043D  0008               	return
 10680                           
 10681                           ;OverLoad_B1.c: 114: Load.SafeCount = 0;
 10682  043E  01D3               	clrf	(_Load^(0+256)+44)
 10683                           
 10684                           ;OverLoad_B1.c: 115: Load.OK = 1;
 10685  043F  17A7               	bsf	_Load^(0+256),7
 10686                           
 10687                           ;OverLoad_B1.c: 116: Load.Run = 0;
 10688  0440  11A7               	bcf	_Load^(0+256),3
 10689                           
 10690                           ;OverLoad_B1.c: 117: Load.Count = 0;
 10691  0441  01D0               	clrf	(_Load^(0+256)+41)
 10692                           
 10693                           ;OverLoad_B1.c: 118: Load.TotalLoad = Load.AD;
 10694  0442  0847               	movf	((_Load+1)^(0+256)+31),w
 10695  0443  01B1               	clrf	((_Load+1)^(0+256)+9)
 10696  0444  07B1               	addwf	((_Load+1)^(0+256)+9),f
 10697  0445  0846               	movf	(_Load^(0+256)+31),w
 10698  0446  01B0               	clrf	(_Load^(0+256)+9)
 10699  0447  07B0               	addwf	(_Load^(0+256)+9),f
 10700                           
 10701                           ;OverLoad_B1.c: 127: }
 10702                           ;OverLoad_B1.c: 128: }
 10703                           ;OverLoad_B1.c: 129: }
 10704                           ;OverLoad_B1.c: 130: }
 10705                           ;OverLoad_B1.c: 131: }
 10706                           ;OverLoad_B1.c: 132: }
 10707                           ;OverLoad_B1.c: 133: } else {
 10708  0448  0008               	return
 10709  0449                     l1694:	
 10710                           
 10711                           ;OverLoad_B1.c: 134: Load.ADtoGO = 1;
 10712  0449  1627               	bsf	_Load^(0+256),4
 10713                           
 10714                           ;OverLoad_B1.c: 135: }
 10715                           ;OverLoad_B1.c: 136: } else {
 10716  044A  0008               	return
 10717  044B                     l1693:	
 10718                           
 10719                           ;OverLoad_B1.c: 137: if (Load.LightsON == 1 && error != 3) {
 10720  044B  1D27               	btfss	_Load^(0+256),2
 10721  044C  2C69               	goto	l10574
 10722  044D  0020               	movlb	0	; select bank0
 10723  044E  082E               	movf	Load_Main@error,w
 10724  044F  3A03               	xorlw	3
 10725  0450  1903               	skipnz
 10726  0451  2C69               	goto	l10574
 10727                           
 10728                           ;OverLoad_B1.c: 138: Load.LightsON = 0;
 10729  0452  0022               	movlb	2	; select bank2
 10730  0453  1127               	bcf	_Load^(0+256),2
 10731                           
 10732                           ;OverLoad_B1.c: 140: Load.Time = 0;
 10733  0454  01A8               	clrf	(_Load^(0+256)+1)
 10734  0455  01A9               	clrf	((_Load+1)^(0+256)+1)
 10735                           
 10736                           ;OverLoad_B1.c: 141: Load.ADtoGO = 0;
 10737  0456  1227               	bcf	_Load^(0+256),4
 10738                           
 10739                           ;OverLoad_B1.c: 142: setLoad_AH_AL_Restore();
 10740  0457  319E  2660  3183   	fcall	_setLoad_AH_AL_Restore
 10741                           
 10742                           ;OverLoad_B1.c: 143: Load.Count = 0;
 10743  045A  0022               	movlb	2	; select bank2
 10744  045B  01D0               	clrf	(_Load^(0+256)+41)
 10745                           
 10746                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10747  045C  01D1               	clrf	(_Load^(0+256)+42)
 10748                           
 10749                           ;OverLoad_B1.c: 145: Load.SafeCount = 0;
 10750  045D  01D3               	clrf	(_Load^(0+256)+44)
 10751                           
 10752                           ;OverLoad_B1.c: 147: Load.ADH = 0;
 10753  045E  01AC               	clrf	(_Load^(0+256)+5)
 10754  045F  01AD               	clrf	((_Load+1)^(0+256)+5)
 10755                           
 10756                           ;OverLoad_B1.c: 148: Load.ADL = 0;
 10757  0460  01AE               	clrf	(_Load^(0+256)+7)
 10758  0461  01AF               	clrf	((_Load+1)^(0+256)+7)
 10759                           
 10760                           ;OverLoad_B1.c: 149: Load.AD = 0;
 10761  0462  01C6               	clrf	(_Load^(0+256)+31)
 10762  0463  01C7               	clrf	((_Load+1)^(0+256)+31)
 10763                           
 10764                           ;OverLoad_B1.c: 150: Load.JudgeValue = 0;
 10765  0464  01CC               	clrf	(_Load^(0+256)+37)
 10766  0465  01CD               	clrf	((_Load+1)^(0+256)+37)
 10767                           
 10768                           ;OverLoad_B1.c: 151: Load.LightsCount = 0;
 10769  0466  01D2               	clrf	(_Load^(0+256)+43)
 10770                           
 10771                           ;OverLoad_B1.c: 152: Load.Run = 0;
 10772  0467  11A7               	bcf	_Load^(0+256),3
 10773                           
 10774                           ;OverLoad_B1.c: 153: Load.OK = 1;
 10775  0468  17A7               	bsf	_Load^(0+256),7
 10776  0469                     l10574:	
 10777                           
 10778                           ;OverLoad_B1.c: 161: }
 10779                           ;OverLoad_B1.c: 162: if (Load.ERROR == 1) {
 10780  0469  0022               	movlb	2	; select bank2
 10781  046A  1EA7               	btfss	_Load^(0+256),5
 10782  046B  0008               	return
 10783                           
 10784                           ;OverLoad_B1.c: 163: Load.ErrorTime++;
 10785  046C  3001               	movlw	1
 10786  046D  07AA               	addwf	(_Load^(0+256)+3),f
 10787  046E  3000               	movlw	0
 10788  046F  3DAB               	addwfc	((_Load+1)^(0+256)+3),f
 10789                           
 10790                           ;OverLoad_B1.c: 164: if (Load.ErrorTime >= 1000) {
 10791  0470  3003               	movlw	3
 10792  0471  022B               	subwf	((_Load+1)^(0+256)+3),w
 10793  0472  30E8               	movlw	232
 10794  0473  1903               	skipnz
 10795  0474  022A               	subwf	(_Load^(0+256)+3),w
 10796  0475  1C03               	skipc
 10797  0476  0008               	return
 10798                           
 10799                           ;OverLoad_B1.c: 165: Load.ErrorTime = 0;
 10800  0477  01AA               	clrf	(_Load^(0+256)+3)
 10801  0478  01AB               	clrf	((_Load+1)^(0+256)+3)
 10802                           
 10803                           ;OverLoad_B1.c: 172: Load.ERROR = 0;
 10804  0479  12A7               	bcf	_Load^(0+256),5
 10805                           
 10806                           ;OverLoad_B1.c: 173: }
 10807                           ;OverLoad_B1.c: 174: }
 10808                           ;OverLoad_B1.c: 175: }
 10809                           ;OverLoad_B1.c: 176: } else {
 10810  047A  0008               	return
 10811  047B                     l1689:	
 10812                           
 10813                           ;OverLoad_B1.c: 177: if (myMain.PowerON == 1) {
 10814  047B  0021               	movlb	1	; select bank1
 10815  047C  1C20               	btfss	_myMain^(0+128),0
 10816  047D  0008               	return
 10817                           
 10818                           ;OverLoad_B1.c: 178: Load.Enable = 1;
 10819  047E  0022               	movlb	2	; select bank2
 10820  047F  1427               	bsf	_Load^(0+256),0
 10821  0480  0008               	return
 10822  0481                     __end_of_Load_Main:	
 10823                           
 10824                           	psect	text54
 10825  1C14                     __ptext54:	
 10826 ;; *************** function _getMain_LoadOK *****************
 10827 ;; Defined at:
 10828 ;;		line 432 in file "../src/Main_B1.c"
 10829 ;; Parameters:    Size  Location     Type
 10830 ;;		None
 10831 ;; Auto vars:     Size  Location     Type
 10832 ;;  ok              1    2[BANK0 ] unsigned char 
 10833 ;; Return value:  Size  Location     Type
 10834 ;;                  1    wreg      unsigned char 
 10835 ;; Registers used:
 10836 ;;		wreg, status,2, pclath, cstack
 10837 ;; Tracked objects:
 10838 ;;		On entry : 0/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;Total ram usage:        2 bytes
 10847 ;; Hardware stack levels used:    1
 10848 ;; Hardware stack levels required when called:    6
 10849 ;; This function calls:
 10850 ;;		_getDimmer_LoadOK
 10851 ;; This function is called by:
 10852 ;;		_Load_Main
 10853 ;; This function uses a non-reentrant model
 10854 ;;
 10855                           
 10856                           
 10857                           ;psect for function _getMain_LoadOK
 10858  1C14                     _getMain_LoadOK:	
 10859                           
 10860                           ;Main_B1.c: 433: char ok = 0;
 10861                           
 10862                           ;incstack = 0
 10863                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10864  1C14  0020               	movlb	0	; select bank0
 10865  1C15  01A2               	clrf	getMain_LoadOK@ok
 10866                           
 10867                           ;Main_B1.c: 439: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10868  1C16  319B  2389         	fcall	_getDimmer_LoadOK
 10869  1C18  3A01               	xorlw	1
 10870  1C19  3000               	movlw	0
 10871  1C1A  1903               	skipnz
 10872  1C1B  3001               	movlw	1
 10873  1C1C  0020               	movlb	0	; select bank0
 10874  1C1D  00A1               	movwf	??_getMain_LoadOK
 10875  1C1E  0821               	movf	??_getMain_LoadOK,w
 10876  1C1F  00A2               	movwf	getMain_LoadOK@ok
 10877                           
 10878                           ;Main_B1.c: 441: return ok;
 10879  1C20  0822               	movf	getMain_LoadOK@ok,w
 10880  1C21  0008               	return
 10881  1C22                     __end_of_getMain_LoadOK:	
 10882                           
 10883                           	psect	text55
 10884  1B89                     __ptext55:	
 10885 ;; *************** function _getDimmer_LoadOK *****************
 10886 ;; Defined at:
 10887 ;;		line 614 in file "../src/Dimmer_B1.c"
 10888 ;; Parameters:    Size  Location     Type
 10889 ;;		None
 10890 ;; Auto vars:     Size  Location     Type
 10891 ;;  status          1    0[BANK0 ] unsigned char 
 10892 ;; Return value:  Size  Location     Type
 10893 ;;                  1    wreg      unsigned char 
 10894 ;; Registers used:
 10895 ;;		wreg, status,2
 10896 ;; Tracked objects:
 10897 ;;		On entry : 0/0
 10898 ;;		On exit  : 0/0
 10899 ;;		Unchanged: 0/0
 10900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10902 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10904 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10905 ;;Total ram usage:        1 bytes
 10906 ;; Hardware stack levels used:    1
 10907 ;; Hardware stack levels required when called:    5
 10908 ;; This function calls:
 10909 ;;		Nothing
 10910 ;; This function is called by:
 10911 ;;		_getMain_LoadOK
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           
 10916                           ;psect for function _getDimmer_LoadOK
 10917  1B89                     _getDimmer_LoadOK:	
 10918                           
 10919                           ;Dimmer_B1.c: 615: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10920                           
 10921                           ;incstack = 0
 10922                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10923  1B89  3000               	movlw	0
 10924  1B8A  0021               	movlb	1	; select bank1
 10925  1B8B  18C8               	btfsc	_Dimmer^(0+128),1
 10926  1B8C  3001               	movlw	1
 10927  1B8D  0020               	movlb	0	; select bank0
 10928  1B8E  00A0               	movwf	getDimmer_LoadOK@status
 10929                           
 10930                           ;Dimmer_B1.c: 616: return status;
 10931  1B8F  0820               	movf	getDimmer_LoadOK@status,w
 10932  1B90  0008               	return
 10933  1B91                     __end_of_getDimmer_LoadOK:	
 10934                           
 10935                           	psect	text56
 10936  1DCD                     __ptext56:	
 10937 ;; *************** function _getMain_Lights_Count *****************
 10938 ;; Defined at:
 10939 ;;		line 402 in file "../src/Main_B1.c"
 10940 ;; Parameters:    Size  Location     Type
 10941 ;;		None
 10942 ;; Auto vars:     Size  Location     Type
 10943 ;;  status2         1    3[BANK0 ] unsigned char 
 10944 ;;  status1         1    2[BANK0 ] unsigned char 
 10945 ;;  status3         1    1[BANK0 ] unsigned char 
 10946 ;;  count           1    0[BANK0 ] unsigned char 
 10947 ;; Return value:  Size  Location     Type
 10948 ;;                  1    wreg      unsigned char 
 10949 ;; Registers used:
 10950 ;;		wreg, status,2, status,0
 10951 ;; Tracked objects:
 10952 ;;		On entry : 0/0
 10953 ;;		On exit  : 0/0
 10954 ;;		Unchanged: 0/0
 10955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10957 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10959 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;Total ram usage:        4 bytes
 10961 ;; Hardware stack levels used:    1
 10962 ;; Hardware stack levels required when called:    5
 10963 ;; This function calls:
 10964 ;;		Nothing
 10965 ;; This function is called by:
 10966 ;;		_Load_Main
 10967 ;; This function uses a non-reentrant model
 10968 ;;
 10969                           
 10970                           
 10971                           ;psect for function _getMain_Lights_Count
 10972  1DCD                     _getMain_Lights_Count:	
 10973                           
 10974                           ;Main_B1.c: 403: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10975                           
 10976                           ;incstack = 0
 10977                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10978  1DCD  0020               	movlb	0	; select bank0
 10979  1DCE  01A2               	clrf	getMain_Lights_Count@status1
 10980  1DCF  01A3               	clrf	getMain_Lights_Count@status2
 10981  1DD0  01A1               	clrf	getMain_Lights_Count@status3
 10982  1DD1  01A0               	clrf	getMain_Lights_Count@count
 10983                           
 10984                           ;Main_B1.c: 407: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10985  1DD2  3000               	movlw	0
 10986  1DD3  0023               	movlb	3	; select bank3
 10987  1DD4  18C7               	btfsc	(_DimmerLights1^(0+384)+9),1
 10988  1DD5  3001               	movlw	1
 10989  1DD6  0020               	movlb	0	; select bank0
 10990  1DD7  00A2               	movwf	getMain_Lights_Count@status1
 10991                           
 10992                           ;Main_B1.c: 410: status2 = DimmerLights2.Loop == 1 ? 1 : 0;
 10993  1DD8  3000               	movlw	0
 10994  1DD9  0023               	movlb	3	; select bank3
 10995  1DDA  18D6               	btfsc	(_DimmerLights2^(0+384)+9),1
 10996  1DDB  3001               	movlw	1
 10997  1DDC  0020               	movlb	0	; select bank0
 10998  1DDD  00A3               	movwf	getMain_Lights_Count@status2
 10999                           
 11000                           ;Main_B1.c: 428: return count = (status1 + status2 + status3);
 11001  1DDE  0822               	movf	getMain_Lights_Count@status1,w
 11002  1DDF  0723               	addwf	getMain_Lights_Count@status2,w
 11003  1DE0  0721               	addwf	getMain_Lights_Count@status3,w
 11004  1DE1  00A0               	movwf	getMain_Lights_Count@count
 11005  1DE2  0008               	return
 11006  1DE3                     __end_of_getMain_Lights_Count:	
 11007                           
 11008                           	psect	text57
 11009  1B51                     __ptext57:	
 11010 ;; *************** function _Load_Initialization *****************
 11011 ;; Defined at:
 11012 ;;		line 9 in file "../src/OverLoad_B1.c"
 11013 ;; Parameters:    Size  Location     Type
 11014 ;;		None
 11015 ;; Auto vars:     Size  Location     Type
 11016 ;;		None
 11017 ;; Return value:  Size  Location     Type
 11018 ;;		None               void
 11019 ;; Registers used:
 11020 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11021 ;; Tracked objects:
 11022 ;;		On entry : 0/0
 11023 ;;		On exit  : 0/0
 11024 ;;		Unchanged: 0/0
 11025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11030 ;;Total ram usage:        0 bytes
 11031 ;; Hardware stack levels used:    1
 11032 ;; Hardware stack levels required when called:    6
 11033 ;; This function calls:
 11034 ;;		_setLoad_AH_AL_Restore
 11035 ;; This function is called by:
 11036 ;;		_main
 11037 ;; This function uses a non-reentrant model
 11038 ;;
 11039                           
 11040                           
 11041                           ;psect for function _Load_Initialization
 11042  1B51                     _Load_Initialization:	
 11043                           
 11044                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11045                           
 11046                           ;incstack = 0
 11047                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11048  1B51  0022               	movlb	2	; select bank2
 11049  1B52  17A7               	bsf	_Load^(0+256),7
 11050                           
 11051                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11052  1B53  319E  2660         	fcall	_setLoad_AH_AL_Restore
 11053  1B55  0008               	return
 11054  1B56                     __end_of_Load_Initialization:	
 11055                           
 11056                           	psect	text58
 11057  1E60                     __ptext58:	
 11058 ;; *************** function _setLoad_AH_AL_Restore *****************
 11059 ;; Defined at:
 11060 ;;		line 284 in file "../src/OverLoad_B1.c"
 11061 ;; Parameters:    Size  Location     Type
 11062 ;;		None
 11063 ;; Auto vars:     Size  Location     Type
 11064 ;;  i               1    1[BANK0 ] unsigned char 
 11065 ;; Return value:  Size  Location     Type
 11066 ;;		None               void
 11067 ;; Registers used:
 11068 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11069 ;; Tracked objects:
 11070 ;;		On entry : 0/0
 11071 ;;		On exit  : 0/0
 11072 ;;		Unchanged: 0/0
 11073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11075 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11077 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;Total ram usage:        2 bytes
 11079 ;; Hardware stack levels used:    1
 11080 ;; Hardware stack levels required when called:    5
 11081 ;; This function calls:
 11082 ;;		Nothing
 11083 ;; This function is called by:
 11084 ;;		_Load_Initialization
 11085 ;;		_Load_Main
 11086 ;; This function uses a non-reentrant model
 11087 ;;
 11088                           
 11089                           
 11090                           ;psect for function _setLoad_AH_AL_Restore
 11091  1E60                     _setLoad_AH_AL_Restore:	
 11092                           
 11093                           ;OverLoad_B1.c: 285: char i;
 11094                           ;OverLoad_B1.c: 286: for (i = 0; i < 5; i++) {
 11095                           
 11096                           ;incstack = 0
 11097                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11098  1E60  0020               	movlb	0	; select bank0
 11099  1E61  01A1               	clrf	setLoad_AH_AL_Restore@i
 11100  1E62                     L7:	
 11101  1E62  3005               	movlw	5
 11102  1E63  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11103  1E64  1803               	btfsc	3,0
 11104  1E65  0008               	return
 11105                           
 11106                           ;OverLoad_B1.c: 287: Load.AH[i] = 0;
 11107  1E66  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11108  1E67  3E32               	addlw	(_Load+11)& (0+255)
 11109  1E68  0086               	movwf	6
 11110  1E69  3001               	movlw	1	; select bank2/3
 11111  1E6A  0087               	movwf	7
 11112  1E6B  3000               	movlw	0
 11113  1E6C  3FC0               	movwi [0]fsr1
 11114  1E6D  3FC1               	movwi [1]fsr1
 11115                           
 11116                           ;OverLoad_B1.c: 288: Load.AL[i] = 0xffff;
 11117  1E6E  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11118  1E6F  3E3C               	addlw	(_Load+21)& (0+255)
 11119  1E70  0086               	movwf	6
 11120  1E71  3001               	movlw	1	; select bank2/3
 11121  1E72  0087               	movwf	7
 11122  1E73  30FF               	movlw	255
 11123  1E74  3FC0               	movwi [0]fsr1
 11124  1E75  30FF               	movlw	255
 11125  1E76  3FC1               	movwi [1]fsr1
 11126  1E77  3001               	movlw	1
 11127  1E78  00A0               	movwf	??_setLoad_AH_AL_Restore
 11128  1E79  0820               	movf	??_setLoad_AH_AL_Restore,w
 11129  1E7A  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11130  1E7B  2E62               	goto	L7
 11131  1E7C                     __end_of_setLoad_AH_AL_Restore:	
 11132                           
 11133                           	psect	text59
 11134  1BD7                     __ptext59:	
 11135 ;; *************** function _LED_Main *****************
 11136 ;; Defined at:
 11137 ;;		line 47 in file "../src/LED_B1.c"
 11138 ;; Parameters:    Size  Location     Type
 11139 ;;		None
 11140 ;; Auto vars:     Size  Location     Type
 11141 ;;		None
 11142 ;; Return value:  Size  Location     Type
 11143 ;;		None               void
 11144 ;; Registers used:
 11145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11146 ;; Tracked objects:
 11147 ;;		On entry : 0/0
 11148 ;;		On exit  : 0/0
 11149 ;;		Unchanged: 0/0
 11150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11155 ;;Total ram usage:        0 bytes
 11156 ;; Hardware stack levels used:    1
 11157 ;; Hardware stack levels required when called:    7
 11158 ;; This function calls:
 11159 ;;		_setLED_Main
 11160 ;; This function is called by:
 11161 ;;		_main
 11162 ;; This function uses a non-reentrant model
 11163 ;;
 11164                           
 11165                           
 11166                           ;psect for function _LED_Main
 11167  1BD7                     _LED_Main:	
 11168                           
 11169                           ;LED_B1.c: 49: setLED_Main(1);
 11170                           
 11171                           ;incstack = 0
 11172                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11173  1BD7  3001               	movlw	1
 11174  1BD8  3193  23A5  319B   	fcall	_setLED_Main
 11175                           
 11176                           ;LED_B1.c: 52: setLED_Main(2);
 11177  1BDB  3002               	movlw	2
 11178  1BDC  3193  23A5  319B   	fcall	_setLED_Main
 11179                           
 11180                           ;LED_B1.c: 58: setLED_Main(99);
 11181  1BDF  3063               	movlw	99
 11182  1BE0  3193  23A5         	fcall	_setLED_Main
 11183  1BE2  0008               	return
 11184  1BE3                     __end_of_LED_Main:	
 11185                           
 11186                           	psect	text60
 11187  13A5                     __ptext60:	
 11188 ;; *************** function _setLED_Main *****************
 11189 ;; Defined at:
 11190 ;;		line 216 in file "../src/LED_B1.c"
 11191 ;; Parameters:    Size  Location     Type
 11192 ;;  led             1    wreg     unsigned char 
 11193 ;; Auto vars:     Size  Location     Type
 11194 ;;  led             1    4[BANK0 ] unsigned char 
 11195 ;; Return value:  Size  Location     Type
 11196 ;;		None               void
 11197 ;; Registers used:
 11198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11199 ;; Tracked objects:
 11200 ;;		On entry : 0/0
 11201 ;;		On exit  : 0/0
 11202 ;;		Unchanged: 0/0
 11203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11206 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11207 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11208 ;;Total ram usage:        3 bytes
 11209 ;; Hardware stack levels used:    1
 11210 ;; Hardware stack levels required when called:    6
 11211 ;; This function calls:
 11212 ;;		_LedPointSelect
 11213 ;; This function is called by:
 11214 ;;		_LED_Main
 11215 ;; This function uses a non-reentrant model
 11216 ;;
 11217                           
 11218                           
 11219                           ;psect for function _setLED_Main
 11220  13A5                     _setLED_Main:	
 11221                           
 11222                           ;incstack = 0
 11223                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11224                           ;setLED_Main@led stored from wreg
 11225  13A5  0020               	movlb	0	; select bank0
 11226  13A6  00A4               	movwf	setLED_Main@led
 11227                           
 11228                           ;LED_B1.c: 217: LedPointSelect(led);
 11229  13A7  0824               	movf	setLED_Main@led,w
 11230  13A8  319F  2715  3193   	fcall	_LedPointSelect
 11231                           
 11232                           ;LED_B1.c: 218: if (LED->GO == 1) {
 11233  13AB  0021               	movlb	1	; select bank1
 11234  13AC  084F               	movf	_LED^(0+128),w
 11235  13AD  0086               	movwf	6
 11236  13AE  3001               	movlw	1	; select bank2/3
 11237  13AF  0087               	movwf	7
 11238  13B0  1C81               	btfss	1,1
 11239  13B1  0008               	return
 11240                           
 11241                           ;LED_B1.c: 219: LED->Time++;
 11242  13B2  0A4F               	incf	_LED^(0+128),w
 11243  13B3  0086               	movwf	6
 11244  13B4  3001               	movlw	1	; select bank2/3
 11245  13B5  0087               	movwf	7
 11246  13B6  3001               	movlw	1
 11247  13B7  0781               	addwf	1,f
 11248  13B8  3141               	addfsr 1,1
 11249  13B9  1803               	skipnc
 11250  13BA  0A81               	incf	1,f
 11251                           
 11252                           ;LED_B1.c: 220: if (LED->Time >= 500 / 10) {
 11253  13BB  0A4F               	incf	_LED^(0+128),w
 11254  13BC  0086               	movwf	6
 11255  13BD  3001               	movlw	1	; select bank2/3
 11256  13BE  0087               	movwf	7
 11257  13BF  3F40               	moviw [0]fsr1
 11258  13C0  0020               	movlb	0	; select bank0
 11259  13C1  00A2               	movwf	??_setLED_Main
 11260  13C2  3F41               	moviw [1]fsr1
 11261  13C3  00A3               	movwf	??_setLED_Main+1
 11262  13C4  3000               	movlw	0
 11263  13C5  0223               	subwf	??_setLED_Main+1,w
 11264  13C6  3032               	movlw	50
 11265  13C7  1903               	skipnz
 11266  13C8  0222               	subwf	??_setLED_Main,w
 11267  13C9  1C03               	skipc
 11268  13CA  0008               	return
 11269                           
 11270                           ;LED_B1.c: 221: LED->Time = 0;
 11271  13CB  0021               	movlb	1	; select bank1
 11272  13CC  0A4F               	incf	_LED^(0+128),w
 11273  13CD  0086               	movwf	6
 11274  13CE  3001               	movlw	1	; select bank2/3
 11275  13CF  0087               	movwf	7
 11276  13D0  3000               	movlw	0
 11277  13D1  3FC0               	movwi [0]fsr1
 11278  13D2  3FC1               	movwi [1]fsr1
 11279                           
 11280                           ;LED_B1.c: 223: if (led == 1) {
 11281  13D3  0020               	movlb	0	; select bank0
 11282  13D4  0824               	movf	setLED_Main@led,w
 11283  13D5  3A01               	xorlw	1
 11284                           
 11285                           ;LED_B1.c: 224: RA3 = RA3 == 1 ? 0 : 1;
 11286  13D6  3008               	movlw	8
 11287  13D7  1903               	btfsc	3,2
 11288  13D8  068C               	xorwf	12,f
 11289                           
 11290                           ;LED_B1.c: 225: }
 11291                           ;LED_B1.c: 228: if (led == 2) {
 11292  13D9  0824               	movf	setLED_Main@led,w
 11293  13DA  3A02               	xorlw	2
 11294  13DB  1D03               	skipz
 11295  13DC  2BDF               	goto	l1040
 11296                           
 11297                           ;LED_B1.c: 229: RC7 = RC7 == 1 ? 0 : 1;
 11298  13DD  3080               	movlw	128
 11299  13DE  068E               	xorwf	14,f
 11300  13DF                     l1040:	
 11301                           
 11302                           ;LED_B1.c: 230: }
 11303                           ;LED_B1.c: 238: if (led == 99) {
 11304  13DF  0824               	movf	setLED_Main@led,w
 11305  13E0  3A63               	xorlw	99
 11306  13E1  1D03               	skipz
 11307  13E2  0008               	return
 11308                           
 11309                           ;LED_B1.c: 239: RB5 = RB5 == 1 ? 0 : 1;
 11310  13E3  3020               	movlw	32
 11311  13E4  068D               	xorwf	13,f
 11312  13E5  0008               	return
 11313  13E6                     __end_of_setLED_Main:	
 11314                           
 11315                           	psect	text61
 11316  1BCB                     __ptext61:	
 11317 ;; *************** function _LED_Initialization *****************
 11318 ;; Defined at:
 11319 ;;		line 31 in file "../src/LED_B1.c"
 11320 ;; Parameters:    Size  Location     Type
 11321 ;;		None
 11322 ;; Auto vars:     Size  Location     Type
 11323 ;;		None
 11324 ;; Return value:  Size  Location     Type
 11325 ;;		None               void
 11326 ;; Registers used:
 11327 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11328 ;; Tracked objects:
 11329 ;;		On entry : 0/0
 11330 ;;		On exit  : 0/0
 11331 ;;		Unchanged: 0/0
 11332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11337 ;;Total ram usage:        0 bytes
 11338 ;; Hardware stack levels used:    1
 11339 ;; Hardware stack levels required when called:    8
 11340 ;; This function calls:
 11341 ;;		_setLED_Initialization
 11342 ;; This function is called by:
 11343 ;;		_main
 11344 ;; This function uses a non-reentrant model
 11345 ;;
 11346                           
 11347                           
 11348                           ;psect for function _LED_Initialization
 11349  1BCB                     _LED_Initialization:	
 11350                           
 11351                           ;LED_B1.c: 33: setLED_Initialization(1);
 11352                           
 11353                           ;incstack = 0
 11354                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11355  1BCB  3001               	movlw	1
 11356  1BCC  319C  24A7  319B   	fcall	_setLED_Initialization
 11357                           
 11358                           ;LED_B1.c: 36: setLED_Initialization(2);
 11359  1BCF  3002               	movlw	2
 11360  1BD0  319C  24A7  319B   	fcall	_setLED_Initialization
 11361                           
 11362                           ;LED_B1.c: 42: setLED_Initialization(99);
 11363  1BD3  3063               	movlw	99
 11364  1BD4  319C  24A7         	fcall	_setLED_Initialization
 11365  1BD6  0008               	return
 11366  1BD7                     __end_of_LED_Initialization:	
 11367                           
 11368                           	psect	text62
 11369  1CA7                     __ptext62:	
 11370 ;; *************** function _setLED_Initialization *****************
 11371 ;; Defined at:
 11372 ;;		line 66 in file "../src/LED_B1.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;  led             1    wreg     unsigned char 
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;  led             1    4[BANK0 ] unsigned char 
 11377 ;; Return value:  Size  Location     Type
 11378 ;;		None               void
 11379 ;; Registers used:
 11380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11381 ;; Tracked objects:
 11382 ;;		On entry : 0/0
 11383 ;;		On exit  : 0/0
 11384 ;;		Unchanged: 0/0
 11385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11389 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;Total ram usage:        1 bytes
 11391 ;; Hardware stack levels used:    1
 11392 ;; Hardware stack levels required when called:    7
 11393 ;; This function calls:
 11394 ;;		_LedPointSelect
 11395 ;;		_setLED
 11396 ;; This function is called by:
 11397 ;;		_LED_Initialization
 11398 ;; This function uses a non-reentrant model
 11399 ;;
 11400                           
 11401                           
 11402                           ;psect for function _setLED_Initialization
 11403  1CA7                     _setLED_Initialization:	
 11404                           
 11405                           ;incstack = 0
 11406                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11407                           ;setLED_Initialization@led stored from wreg
 11408  1CA7  0020               	movlb	0	; select bank0
 11409  1CA8  00A4               	movwf	setLED_Initialization@led
 11410                           
 11411                           ;LED_B1.c: 67: LedPointSelect(led);
 11412  1CA9  0824               	movf	setLED_Initialization@led,w
 11413  1CAA  319F  2715  319C   	fcall	_LedPointSelect
 11414                           
 11415                           ;LED_B1.c: 68: LED->Enable = 1;
 11416  1CAD  0021               	movlb	1	; select bank1
 11417  1CAE  084F               	movf	_LED^(0+128),w
 11418  1CAF  0086               	movwf	6
 11419  1CB0  3001               	movlw	1	; select bank2/3
 11420  1CB1  0087               	movwf	7
 11421  1CB2  1401               	bsf	1,0
 11422                           
 11423                           ;LED_B1.c: 69: setLED(led, 0);
 11424  1CB3  0020               	movlb	0	; select bank0
 11425  1CB4  01A2               	clrf	setLED@command
 11426  1CB5  0824               	movf	setLED_Initialization@led,w
 11427  1CB6  3195  259F         	fcall	_setLED
 11428  1CB8  0008               	return
 11429  1CB9                     __end_of_setLED_Initialization:	
 11430                           
 11431                           	psect	text63
 11432  1289                     __ptext63:	
 11433 ;; *************** function _Flash_Memory_Main *****************
 11434 ;; Defined at:
 11435 ;;		line 901 in file "../src/MCU_B1.c"
 11436 ;; Parameters:    Size  Location     Type
 11437 ;;		None
 11438 ;; Auto vars:     Size  Location     Type
 11439 ;;		None
 11440 ;; Return value:  Size  Location     Type
 11441 ;;		None               void
 11442 ;; Registers used:
 11443 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11444 ;; Tracked objects:
 11445 ;;		On entry : 0/0
 11446 ;;		On exit  : 0/0
 11447 ;;		Unchanged: 0/0
 11448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11452 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11453 ;;Total ram usage:        1 bytes
 11454 ;; Hardware stack levels used:    1
 11455 ;; Hardware stack levels required when called:    8
 11456 ;; This function calls:
 11457 ;;		_Flash_Memory_Modify
 11458 ;;		_getMain_LightsStatus
 11459 ;; This function is called by:
 11460 ;;		_main
 11461 ;; This function uses a non-reentrant model
 11462 ;;
 11463                           
 11464                           
 11465                           ;psect for function _Flash_Memory_Main
 11466  1289                     _Flash_Memory_Main:	
 11467                           
 11468                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 11469                           
 11470                           ;incstack = 0
 11471                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11472  1289  0024               	movlb	4	; select bank4
 11473  128A  1C44               	btfss	(_Memory^(0+512)+36),0
 11474  128B  0008               	return
 11475                           
 11476                           ;MCU_B1.c: 903: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11477  128C  3191  215D  3192   	fcall	_getMain_LightsStatus
 11478  128F  3A00               	xorlw	0
 11479  1290  3000               	movlw	0
 11480  1291  1903               	skipnz
 11481  1292  3001               	movlw	1
 11482  1293  0020               	movlb	0	; select bank0
 11483  1294  00A9               	movwf	??_Flash_Memory_Main
 11484  1295  0DA9               	rlf	??_Flash_Memory_Main,f
 11485  1296  0024               	movlb	4	; select bank4
 11486  1297  0844               	movf	(_Memory^(0+512)+36),w
 11487  1298  0020               	movlb	0	; select bank0
 11488  1299  0629               	xorwf	??_Flash_Memory_Main,w
 11489  129A  39FD               	andlw	-3
 11490  129B  0629               	xorwf	??_Flash_Memory_Main,w
 11491  129C  0024               	movlb	4	; select bank4
 11492  129D  00C4               	movwf	(_Memory^(0+512)+36)
 11493                           
 11494                           ;MCU_B1.c: 904: if (Memory.GO == 1) {
 11495  129E  1CC4               	btfss	(_Memory^(0+512)+36),1
 11496  129F  2AB9               	goto	l1308
 11497                           
 11498                           ;MCU_B1.c: 905: Memory.Runtime = 1;
 11499  12A0  15C4               	bsf	(_Memory^(0+512)+36),3
 11500                           
 11501                           ;MCU_B1.c: 906: Memory.Time++;
 11502  12A1  3001               	movlw	1
 11503  12A2  07C2               	addwf	(_Memory^(0+512)+34),f
 11504  12A3  3000               	movlw	0
 11505  12A4  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11506                           
 11507                           ;MCU_B1.c: 907: if (Memory.Time == 25) {
 11508  12A5  3022               	movlw	34
 11509  12A6  3E20               	addlw	_Memory& (0+255)
 11510  12A7  0086               	movwf	6
 11511  12A8  3002               	movlw	2	; select bank4/5
 11512  12A9  0087               	movwf	7
 11513  12AA  3F40               	moviw [0]fsr1
 11514  12AB  3A19               	xorlw	25
 11515  12AC  1D03               	skipz
 11516  12AD  2AB0               	goto	u11665
 11517  12AE  3F41               	moviw [1]fsr1
 11518  12AF  3A00               	xorlw	0
 11519  12B0                     u11665:	
 11520  12B0  1D03               	skipz
 11521  12B1  0008               	return
 11522                           
 11523                           ;MCU_B1.c: 908: Memory.Time = 0;
 11524  12B2  01C2               	clrf	(_Memory^(0+512)+34)
 11525  12B3  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11526                           
 11527                           ;MCU_B1.c: 909: Memory.Modify = 0;
 11528  12B4  1044               	bcf	(_Memory^(0+512)+36),0
 11529                           
 11530                           ;MCU_B1.c: 910: Memory.GO = 0;
 11531  12B5  10C4               	bcf	(_Memory^(0+512)+36),1
 11532                           
 11533                           ;MCU_B1.c: 911: Flash_Memory_Modify();
 11534  12B6  3195  2500         	fcall	_Flash_Memory_Modify
 11535                           
 11536                           ;MCU_B1.c: 912: }
 11537                           ;MCU_B1.c: 913: } else {
 11538  12B8  0008               	return
 11539  12B9                     l1308:	
 11540                           
 11541                           ;MCU_B1.c: 914: if (Memory.Runtime == 1) {
 11542  12B9  1DC4               	btfss	(_Memory^(0+512)+36),3
 11543  12BA  0008               	return
 11544                           
 11545                           ;MCU_B1.c: 915: Memory.Runtime = 0;
 11546  12BB  11C4               	bcf	(_Memory^(0+512)+36),3
 11547                           
 11548                           ;MCU_B1.c: 916: Memory.Time = 0;
 11549  12BC  01C2               	clrf	(_Memory^(0+512)+34)
 11550  12BD  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11551  12BE  0008               	return
 11552  12BF                     __end_of_Flash_Memory_Main:	
 11553                           
 11554                           	psect	text64
 11555  1500                     __ptext64:	
 11556 ;; *************** function _Flash_Memory_Modify *****************
 11557 ;; Defined at:
 11558 ;;		line 974 in file "../src/MCU_B1.c"
 11559 ;; Parameters:    Size  Location     Type
 11560 ;;		None
 11561 ;; Auto vars:     Size  Location     Type
 11562 ;;  i               1    5[BANK0 ] unsigned char 
 11563 ;; Return value:  Size  Location     Type
 11564 ;;		None               void
 11565 ;; Registers used:
 11566 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11567 ;; Tracked objects:
 11568 ;;		On entry : 0/0
 11569 ;;		On exit  : 0/0
 11570 ;;		Unchanged: 0/0
 11571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;Total ram usage:        2 bytes
 11577 ;; Hardware stack levels used:    1
 11578 ;; Hardware stack levels required when called:    7
 11579 ;; This function calls:
 11580 ;;		_Flash_Memory_Erasing
 11581 ;;		_Flash_Memory_Read
 11582 ;;		_Flash_Memory_Write
 11583 ;;		_setMemory_Data
 11584 ;; This function is called by:
 11585 ;;		_Flash_Memory_Main
 11586 ;; This function uses a non-reentrant model
 11587 ;;
 11588                           
 11589                           
 11590                           ;psect for function _Flash_Memory_Modify
 11591  1500                     _Flash_Memory_Modify:	
 11592                           
 11593                           ;MCU_B1.c: 975: char i = 0;
 11594                           
 11595                           ;incstack = 0
 11596                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11597  1500  0020               	movlb	0	; select bank0
 11598  1501  01A5               	clrf	Flash_Memory_Modify@i
 11599                           
 11600                           ;MCU_B1.c: 976: for (i = 0; i < 32; i++) {
 11601  1502  01A5               	clrf	Flash_Memory_Modify@i
 11602  1503  3020               	movlw	32
 11603  1504  0225               	subwf	Flash_Memory_Modify@i,w
 11604  1505  1803               	btfsc	3,0
 11605  1506  2D1C               	goto	l9832
 11606  1507                     l9826:	
 11607                           
 11608                           ;MCU_B1.c: 977: Memory.Data[i] = Flash_Memory_Read(i);
 11609  1507  0825               	movf	Flash_Memory_Modify@i,w
 11610  1508  319E  2646  3195   	fcall	_Flash_Memory_Read
 11611  150B  0020               	movlb	0	; select bank0
 11612  150C  00A4               	movwf	??_Flash_Memory_Modify
 11613  150D  0825               	movf	Flash_Memory_Modify@i,w
 11614  150E  3E20               	addlw	_Memory& (0+255)
 11615  150F  0086               	movwf	6
 11616  1510  3002               	movlw	2	; select bank4/5
 11617  1511  0087               	movwf	7
 11618  1512  0824               	movf	??_Flash_Memory_Modify,w
 11619  1513  0081               	movwf	1
 11620  1514  3001               	movlw	1
 11621  1515  00A4               	movwf	??_Flash_Memory_Modify
 11622  1516  0824               	movf	??_Flash_Memory_Modify,w
 11623  1517  07A5               	addwf	Flash_Memory_Modify@i,f
 11624  1518  3020               	movlw	32
 11625  1519  0225               	subwf	Flash_Memory_Modify@i,w
 11626  151A  1C03               	skipc
 11627  151B  2D07               	goto	l9826
 11628  151C                     l9832:	
 11629                           
 11630                           ;MCU_B1.c: 978: }
 11631                           ;MCU_B1.c: 979: setMemory_Data(0, product->Data[12]);
 11632  151C  087B               	movf	_product,w
 11633  151D  0086               	movwf	6
 11634  151E  3002               	movlw	2	; select bank4/5
 11635  151F  0087               	movwf	7
 11636  1520  3002               	movlw	2	; select bank4/5
 11637  1521  3F4C               	moviw [12]fsr1
 11638  1522  00A0               	movwf	setMemory_Data@data
 11639  1523  3000               	movlw	0
 11640  1524  319B  23B3  3195   	fcall	_setMemory_Data
 11641                           
 11642                           ;MCU_B1.c: 980: setMemory_Data(1, product->Data[13]);
 11643  1527  087B               	movf	_product,w
 11644  1528  0086               	movwf	6
 11645  1529  3002               	movlw	2	; select bank4/5
 11646  152A  0087               	movwf	7
 11647  152B  3002               	movlw	2	; select bank4/5
 11648  152C  3F4D               	moviw [13]fsr1
 11649  152D  0020               	movlb	0	; select bank0
 11650  152E  00A0               	movwf	setMemory_Data@data
 11651  152F  3001               	movlw	1
 11652  1530  319B  23B3  3195   	fcall	_setMemory_Data
 11653                           
 11654                           ;MCU_B1.c: 981: setMemory_Data(2, product->Data[14]);
 11655  1533  087B               	movf	_product,w
 11656  1534  0086               	movwf	6
 11657  1535  3002               	movlw	2	; select bank4/5
 11658  1536  0087               	movwf	7
 11659  1537  3002               	movlw	2	; select bank4/5
 11660  1538  3F4E               	moviw [14]fsr1
 11661  1539  0020               	movlb	0	; select bank0
 11662  153A  00A0               	movwf	setMemory_Data@data
 11663  153B  3002               	movlw	2
 11664  153C  319B  23B3  3195   	fcall	_setMemory_Data
 11665                           
 11666                           ;MCU_B1.c: 987: if (Memory.LoopSave == 1) {
 11667  153F  0024               	movlb	4	; select bank4
 11668  1540  1D44               	btfss	(_Memory^(0+512)+36),2
 11669  1541  2D46               	goto	l1331
 11670                           
 11671                           ;MCU_B1.c: 988: Memory.LoopSave = 0;
 11672  1542  1144               	bcf	(_Memory^(0+512)+36),2
 11673                           
 11674                           ;MCU_B1.c: 989: myMain.FirstOpen = 0;
 11675  1543  0021               	movlb	1	; select bank1
 11676  1544  11A0               	bcf	_myMain^(0+128),3
 11677                           
 11678                           ;MCU_B1.c: 990: myMain.First = 0;
 11679  1545  12A0               	bcf	_myMain^(0+128),5
 11680  1546                     l1331:	
 11681                           
 11682                           ;MCU_B1.c: 992: }
 11683                           ;MCU_B1.c: 993: GIE = 0;
 11684  1546  138B               	bcf	11,7	;volatile
 11685                           
 11686                           ;MCU_B1.c: 994: Flash_Memory_Erasing();
 11687  1547  319B  23BF  3195   	fcall	_Flash_Memory_Erasing
 11688                           
 11689                           ;MCU_B1.c: 995: Flash_Memory_Write();
 11690  154A  3191  2189         	fcall	_Flash_Memory_Write
 11691                           
 11692                           ;MCU_B1.c: 996: GIE = 1;
 11693  154C  178B               	bsf	11,7	;volatile
 11694  154D  0008               	return
 11695  154E                     __end_of_Flash_Memory_Modify:	
 11696                           
 11697                           	psect	text65
 11698  1BBF                     __ptext65:	
 11699 ;; *************** function _Flash_Memory_Erasing *****************
 11700 ;; Defined at:
 11701 ;;		line 963 in file "../src/MCU_B1.c"
 11702 ;; Parameters:    Size  Location     Type
 11703 ;;		None
 11704 ;; Auto vars:     Size  Location     Type
 11705 ;;		None
 11706 ;; Return value:  Size  Location     Type
 11707 ;;		None               void
 11708 ;; Registers used:
 11709 ;;		wreg, status,2, status,0, pclath, cstack
 11710 ;; Tracked objects:
 11711 ;;		On entry : 0/0
 11712 ;;		On exit  : 0/0
 11713 ;;		Unchanged: 0/0
 11714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11719 ;;Total ram usage:        0 bytes
 11720 ;; Hardware stack levels used:    1
 11721 ;; Hardware stack levels required when called:    6
 11722 ;; This function calls:
 11723 ;;		_Flash_Memory_Unlock
 11724 ;; This function is called by:
 11725 ;;		_Flash_Memory_Modify
 11726 ;; This function uses a non-reentrant model
 11727 ;;
 11728                           
 11729                           
 11730                           ;psect for function _Flash_Memory_Erasing
 11731  1BBF                     _Flash_Memory_Erasing:	
 11732                           
 11733                           ;MCU_B1.c: 964: CFGS = 0;
 11734                           
 11735                           ;incstack = 0
 11736                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11737  1BBF  0023               	movlb	3	; select bank3
 11738  1BC0  1315               	bcf	21,6	;volatile
 11739                           
 11740                           ;MCU_B1.c: 965: PMADRH = 0x30;
 11741  1BC1  3030               	movlw	48
 11742  1BC2  0092               	movwf	18	;volatile
 11743                           
 11744                           ;MCU_B1.c: 966: PMADRL = 0x00;
 11745  1BC3  0191               	clrf	17	;volatile
 11746                           
 11747                           ;MCU_B1.c: 967: FREE = 1;
 11748  1BC4  1615               	bsf	21,4	;volatile
 11749                           
 11750                           ;MCU_B1.c: 968: WREN = 1;
 11751  1BC5  1515               	bsf	21,2	;volatile
 11752                           
 11753                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
 11754  1BC6  3190  2067         	fcall	_Flash_Memory_Unlock
 11755                           
 11756                           ;MCU_B1.c: 970: WREN = 0;
 11757  1BC8  0023               	movlb	3	; select bank3
 11758  1BC9  1115               	bcf	21,2	;volatile
 11759  1BCA  0008               	return
 11760  1BCB                     __end_of_Flash_Memory_Erasing:	
 11761                           
 11762                           	psect	text66
 11763  0668                     __ptext66:	
 11764 ;; *************** function _Flash_Memory_Initialization *****************
 11765 ;; Defined at:
 11766 ;;		line 860 in file "../src/MCU_B1.c"
 11767 ;; Parameters:    Size  Location     Type
 11768 ;;		None
 11769 ;; Auto vars:     Size  Location     Type
 11770 ;;  i               1   62[BANK0 ] unsigned char 
 11771 ;; Return value:  Size  Location     Type
 11772 ;;		None               void
 11773 ;; Registers used:
 11774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11775 ;; Tracked objects:
 11776 ;;		On entry : 0/0
 11777 ;;		On exit  : 0/0
 11778 ;;		Unchanged: 0/0
 11779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11782 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11783 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11784 ;;Total ram usage:        2 bytes
 11785 ;; Hardware stack levels used:    1
 11786 ;; Hardware stack levels required when called:    8
 11787 ;; This function calls:
 11788 ;;		_Flash_Memory_Read
 11789 ;;		_Flash_Memory_Write
 11790 ;;		_setMemory_Data
 11791 ;;		_setPercentValue
 11792 ;; This function is called by:
 11793 ;;		_main
 11794 ;; This function uses a non-reentrant model
 11795 ;;
 11796                           
 11797                           
 11798                           ;psect for function _Flash_Memory_Initialization
 11799  0668                     _Flash_Memory_Initialization:	
 11800                           
 11801                           ;MCU_B1.c: 861: char i = 0;
 11802                           
 11803                           ;incstack = 0
 11804                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11805  0668  0020               	movlb	0	; select bank0
 11806  0669  01DE               	clrf	Flash_Memory_Initialization@i
 11807                           
 11808                           ;MCU_B1.c: 862: if (Flash_Memory_Read(31) == 0xaa) {
 11809  066A  301F               	movlw	31
 11810  066B  319E  2646  3186   	fcall	_Flash_Memory_Read
 11811  066E  3AAA               	xorlw	170
 11812  066F  1D03               	skipz
 11813  0670  2EDA               	goto	l10274
 11814                           
 11815                           ;MCU_B1.c: 863: product->Data[12] = Flash_Memory_Read(0);
 11816  0671  3000               	movlw	0
 11817  0672  319E  2646  3186   	fcall	_Flash_Memory_Read
 11818  0675  0020               	movlb	0	; select bank0
 11819  0676  00DD               	movwf	??_Flash_Memory_Initialization
 11820  0677  087B               	movf	_product,w
 11821  0678  3E0C               	addlw	12
 11822  0679  0086               	movwf	6
 11823  067A  3002               	movlw	2	; select bank4/5
 11824  067B  0087               	movwf	7
 11825  067C  085D               	movf	??_Flash_Memory_Initialization,w
 11826  067D  0081               	movwf	1
 11827                           
 11828                           ;MCU_B1.c: 864: product->Data[13] = Flash_Memory_Read(1);
 11829  067E  3001               	movlw	1
 11830  067F  319E  2646  3186   	fcall	_Flash_Memory_Read
 11831  0682  0020               	movlb	0	; select bank0
 11832  0683  00DD               	movwf	??_Flash_Memory_Initialization
 11833  0684  087B               	movf	_product,w
 11834  0685  3E0D               	addlw	13
 11835  0686  0086               	movwf	6
 11836  0687  3002               	movlw	2	; select bank4/5
 11837  0688  0087               	movwf	7
 11838  0689  085D               	movf	??_Flash_Memory_Initialization,w
 11839  068A  0081               	movwf	1
 11840                           
 11841                           ;MCU_B1.c: 865: product->Data[14] = Flash_Memory_Read(2);
 11842  068B  3002               	movlw	2
 11843  068C  319E  2646  3186   	fcall	_Flash_Memory_Read
 11844  068F  0020               	movlb	0	; select bank0
 11845  0690  00DD               	movwf	??_Flash_Memory_Initialization
 11846  0691  087B               	movf	_product,w
 11847  0692  3E0E               	addlw	14
 11848  0693  0086               	movwf	6
 11849  0694  3002               	movlw	2	; select bank4/5
 11850  0695  0087               	movwf	7
 11851  0696  085D               	movf	??_Flash_Memory_Initialization,w
 11852  0697  0081               	movwf	1
 11853                           
 11854                           ;MCU_B1.c: 871: i = setPercentValue(((char)((100-60)*0.8)));
 11855  0698  3020               	movlw	32
 11856  0699  3194  242A  3186   	fcall	_setPercentValue
 11857  069C  0020               	movlb	0	; select bank0
 11858  069D  00DD               	movwf	??_Flash_Memory_Initialization
 11859  069E  085D               	movf	??_Flash_Memory_Initialization,w
 11860  069F  00DE               	movwf	Flash_Memory_Initialization@i
 11861                           
 11862                           ;MCU_B1.c: 872: product->Data[21] = i;
 11863  06A0  085E               	movf	Flash_Memory_Initialization@i,w
 11864  06A1  00DD               	movwf	??_Flash_Memory_Initialization
 11865  06A2  087B               	movf	_product,w
 11866  06A3  3E15               	addlw	21
 11867  06A4  0086               	movwf	6
 11868  06A5  3002               	movlw	2	; select bank4/5
 11869  06A6  0087               	movwf	7
 11870  06A7  085D               	movf	??_Flash_Memory_Initialization,w
 11871  06A8  0081               	movwf	1
 11872                           
 11873                           ;MCU_B1.c: 873: product->Data[22] = i;
 11874  06A9  085E               	movf	Flash_Memory_Initialization@i,w
 11875  06AA  00DD               	movwf	??_Flash_Memory_Initialization
 11876  06AB  087B               	movf	_product,w
 11877  06AC  3E16               	addlw	22
 11878  06AD  0086               	movwf	6
 11879  06AE  3002               	movlw	2	; select bank4/5
 11880  06AF  0087               	movwf	7
 11881  06B0  085D               	movf	??_Flash_Memory_Initialization,w
 11882  06B1  0081               	movwf	1
 11883                           
 11884                           ;MCU_B1.c: 874: product->Data[23] = i;
 11885  06B2  085E               	movf	Flash_Memory_Initialization@i,w
 11886  06B3  00DD               	movwf	??_Flash_Memory_Initialization
 11887  06B4  087B               	movf	_product,w
 11888  06B5  3E17               	addlw	23
 11889  06B6  0086               	movwf	6
 11890  06B7  3002               	movlw	2	; select bank4/5
 11891  06B8  0087               	movwf	7
 11892  06B9  085D               	movf	??_Flash_Memory_Initialization,w
 11893  06BA  0081               	movwf	1
 11894                           
 11895                           ;MCU_B1.c: 876: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11896  06BB  087B               	movf	_product,w
 11897  06BC  3E0C               	addlw	12
 11898  06BD  0086               	movwf	6
 11899  06BE  3002               	movlw	2	; select bank4/5
 11900  06BF  0087               	movwf	7
 11901  06C0  0801               	movf	1,w
 11902  06C1  3AFF               	xorlw	255
 11903  06C2  1D03               	skipz
 11904  06C3  0008               	return
 11905  06C4  087B               	movf	_product,w
 11906  06C5  3E0D               	addlw	13
 11907  06C6  0086               	movwf	6
 11908  06C7  3002               	movlw	2	; select bank4/5
 11909  06C8  0087               	movwf	7
 11910  06C9  0801               	movf	1,w
 11911  06CA  3AFF               	xorlw	255
 11912  06CB  1D03               	skipz
 11913  06CC  0008               	return
 11914  06CD  087B               	movf	_product,w
 11915  06CE  3E0E               	addlw	14
 11916  06CF  0086               	movwf	6
 11917  06D0  3002               	movlw	2	; select bank4/5
 11918  06D1  0087               	movwf	7
 11919  06D2  0801               	movf	1,w
 11920  06D3  3AFF               	xorlw	255
 11921  06D4  1D03               	skipz
 11922  06D5  0008               	return
 11923                           
 11924                           ;MCU_B1.c: 877: myMain.FirstOpen = 1;
 11925  06D6  0021               	movlb	1	; select bank1
 11926  06D7  15A0               	bsf	_myMain^(0+128),3
 11927                           
 11928                           ;MCU_B1.c: 878: myMain.First = 1;
 11929  06D8  16A0               	bsf	_myMain^(0+128),5
 11930                           
 11931                           ;MCU_B1.c: 879: }
 11932                           ;MCU_B1.c: 880: } else {
 11933  06D9  0008               	return
 11934  06DA                     l10274:	
 11935                           
 11936                           ;MCU_B1.c: 881: i = setPercentValue(((char)((100-60)*0.8)));
 11937  06DA  3020               	movlw	32
 11938  06DB  3194  242A  3186   	fcall	_setPercentValue
 11939  06DE  0020               	movlb	0	; select bank0
 11940  06DF  00DD               	movwf	??_Flash_Memory_Initialization
 11941  06E0  085D               	movf	??_Flash_Memory_Initialization,w
 11942  06E1  00DE               	movwf	Flash_Memory_Initialization@i
 11943                           
 11944                           ;MCU_B1.c: 882: setMemory_Data(0, 0xff);
 11945  06E2  30FF               	movlw	255
 11946  06E3  00DD               	movwf	??_Flash_Memory_Initialization
 11947  06E4  085D               	movf	??_Flash_Memory_Initialization,w
 11948  06E5  00A0               	movwf	setMemory_Data@data
 11949  06E6  3000               	movlw	0
 11950  06E7  319B  23B3  3186   	fcall	_setMemory_Data
 11951                           
 11952                           ;MCU_B1.c: 883: setMemory_Data(1, 0xff);
 11953  06EA  30FF               	movlw	255
 11954  06EB  0020               	movlb	0	; select bank0
 11955  06EC  00DD               	movwf	??_Flash_Memory_Initialization
 11956  06ED  085D               	movf	??_Flash_Memory_Initialization,w
 11957  06EE  00A0               	movwf	setMemory_Data@data
 11958  06EF  3001               	movlw	1
 11959  06F0  319B  23B3  3186   	fcall	_setMemory_Data
 11960                           
 11961                           ;MCU_B1.c: 884: setMemory_Data(2, 0xff);
 11962  06F3  30FF               	movlw	255
 11963  06F4  0020               	movlb	0	; select bank0
 11964  06F5  00DD               	movwf	??_Flash_Memory_Initialization
 11965  06F6  085D               	movf	??_Flash_Memory_Initialization,w
 11966  06F7  00A0               	movwf	setMemory_Data@data
 11967  06F8  3002               	movlw	2
 11968  06F9  319B  23B3  3186   	fcall	_setMemory_Data
 11969                           
 11970                           ;MCU_B1.c: 885: setMemory_Data(3, 0xff);
 11971  06FC  30FF               	movlw	255
 11972  06FD  0020               	movlb	0	; select bank0
 11973  06FE  00DD               	movwf	??_Flash_Memory_Initialization
 11974  06FF  085D               	movf	??_Flash_Memory_Initialization,w
 11975  0700  00A0               	movwf	setMemory_Data@data
 11976  0701  3003               	movlw	3
 11977  0702  319B  23B3  3186   	fcall	_setMemory_Data
 11978                           
 11979                           ;MCU_B1.c: 886: setMemory_Data(4, 0xff);
 11980  0705  30FF               	movlw	255
 11981  0706  0020               	movlb	0	; select bank0
 11982  0707  00DD               	movwf	??_Flash_Memory_Initialization
 11983  0708  085D               	movf	??_Flash_Memory_Initialization,w
 11984  0709  00A0               	movwf	setMemory_Data@data
 11985  070A  3004               	movlw	4
 11986  070B  319B  23B3  3186   	fcall	_setMemory_Data
 11987                           
 11988                           ;MCU_B1.c: 887: setMemory_Data(5, 0xff);
 11989  070E  30FF               	movlw	255
 11990  070F  0020               	movlb	0	; select bank0
 11991  0710  00DD               	movwf	??_Flash_Memory_Initialization
 11992  0711  085D               	movf	??_Flash_Memory_Initialization,w
 11993  0712  00A0               	movwf	setMemory_Data@data
 11994  0713  3005               	movlw	5
 11995  0714  319B  23B3  3186   	fcall	_setMemory_Data
 11996                           
 11997                           ;MCU_B1.c: 888: setMemory_Data(31, 0xaa);
 11998  0717  30AA               	movlw	170
 11999  0718  0020               	movlb	0	; select bank0
 12000  0719  00DD               	movwf	??_Flash_Memory_Initialization
 12001  071A  085D               	movf	??_Flash_Memory_Initialization,w
 12002  071B  00A0               	movwf	setMemory_Data@data
 12003  071C  301F               	movlw	31
 12004  071D  319B  23B3  3186   	fcall	_setMemory_Data
 12005                           
 12006                           ;MCU_B1.c: 889: product->Data[21] = i;
 12007  0720  0020               	movlb	0	; select bank0
 12008  0721  085E               	movf	Flash_Memory_Initialization@i,w
 12009  0722  00DD               	movwf	??_Flash_Memory_Initialization
 12010  0723  087B               	movf	_product,w
 12011  0724  3E15               	addlw	21
 12012  0725  0086               	movwf	6
 12013  0726  3002               	movlw	2	; select bank4/5
 12014  0727  0087               	movwf	7
 12015  0728  085D               	movf	??_Flash_Memory_Initialization,w
 12016  0729  0081               	movwf	1
 12017                           
 12018                           ;MCU_B1.c: 890: product->Data[22] = i;
 12019  072A  085E               	movf	Flash_Memory_Initialization@i,w
 12020  072B  00DD               	movwf	??_Flash_Memory_Initialization
 12021  072C  087B               	movf	_product,w
 12022  072D  3E16               	addlw	22
 12023  072E  0086               	movwf	6
 12024  072F  3002               	movlw	2	; select bank4/5
 12025  0730  0087               	movwf	7
 12026  0731  085D               	movf	??_Flash_Memory_Initialization,w
 12027  0732  0081               	movwf	1
 12028                           
 12029                           ;MCU_B1.c: 891: product->Data[23] = i;
 12030  0733  085E               	movf	Flash_Memory_Initialization@i,w
 12031  0734  00DD               	movwf	??_Flash_Memory_Initialization
 12032  0735  087B               	movf	_product,w
 12033  0736  3E17               	addlw	23
 12034  0737  0086               	movwf	6
 12035  0738  3002               	movlw	2	; select bank4/5
 12036  0739  0087               	movwf	7
 12037  073A  085D               	movf	??_Flash_Memory_Initialization,w
 12038  073B  0081               	movwf	1
 12039                           
 12040                           ;MCU_B1.c: 892: GIE = 0;
 12041  073C  138B               	bcf	11,7	;volatile
 12042                           
 12043                           ;MCU_B1.c: 893: Flash_Memory_Write();
 12044  073D  3191  2189         	fcall	_Flash_Memory_Write
 12045                           
 12046                           ;MCU_B1.c: 894: GIE = 1;
 12047  073F  178B               	bsf	11,7	;volatile
 12048                           
 12049                           ;MCU_B1.c: 895: myMain.FirstOpen = 1;
 12050  0740  0021               	movlb	1	; select bank1
 12051  0741  15A0               	bsf	_myMain^(0+128),3
 12052                           
 12053                           ;MCU_B1.c: 896: myMain.First = 1;
 12054  0742  16A0               	bsf	_myMain^(0+128),5
 12055  0743  0008               	return
 12056  0744                     __end_of_Flash_Memory_Initialization:	
 12057                           
 12058                           	psect	text67
 12059  1BB3                     __ptext67:	
 12060 ;; *************** function _setMemory_Data *****************
 12061 ;; Defined at:
 12062 ;;		line 1011 in file "../src/MCU_B1.c"
 12063 ;; Parameters:    Size  Location     Type
 12064 ;;  address         1    wreg     unsigned char 
 12065 ;;  data            1    0[BANK0 ] unsigned char 
 12066 ;; Auto vars:     Size  Location     Type
 12067 ;;  address         1    2[BANK0 ] unsigned char 
 12068 ;; Return value:  Size  Location     Type
 12069 ;;		None               void
 12070 ;; Registers used:
 12071 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12072 ;; Tracked objects:
 12073 ;;		On entry : 0/0
 12074 ;;		On exit  : 0/0
 12075 ;;		Unchanged: 0/0
 12076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12077 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12081 ;;Total ram usage:        3 bytes
 12082 ;; Hardware stack levels used:    1
 12083 ;; Hardware stack levels required when called:    5
 12084 ;; This function calls:
 12085 ;;		Nothing
 12086 ;; This function is called by:
 12087 ;;		_Flash_Memory_Initialization
 12088 ;;		_Flash_Memory_Modify
 12089 ;; This function uses a non-reentrant model
 12090 ;;
 12091                           
 12092                           
 12093                           ;psect for function _setMemory_Data
 12094  1BB3                     _setMemory_Data:	
 12095                           
 12096                           ;incstack = 0
 12097                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12098                           ;setMemory_Data@address stored from wreg
 12099  1BB3  0020               	movlb	0	; select bank0
 12100  1BB4  00A2               	movwf	setMemory_Data@address
 12101                           
 12102                           ;MCU_B1.c: 1012: Memory.Data[address] = data;
 12103  1BB5  0820               	movf	setMemory_Data@data,w
 12104  1BB6  00A1               	movwf	??_setMemory_Data
 12105  1BB7  0822               	movf	setMemory_Data@address,w
 12106  1BB8  3E20               	addlw	_Memory& (0+255)
 12107  1BB9  0086               	movwf	6
 12108  1BBA  3002               	movlw	2	; select bank4/5
 12109  1BBB  0087               	movwf	7
 12110  1BBC  0821               	movf	??_setMemory_Data,w
 12111  1BBD  0081               	movwf	1
 12112  1BBE  0008               	return
 12113  1BBF                     __end_of_setMemory_Data:	
 12114                           
 12115                           	psect	text68
 12116  1189                     __ptext68:	
 12117 ;; *************** function _Flash_Memory_Write *****************
 12118 ;; Defined at:
 12119 ;;		line 944 in file "../src/MCU_B1.c"
 12120 ;; Parameters:    Size  Location     Type
 12121 ;;		None
 12122 ;; Auto vars:     Size  Location     Type
 12123 ;;  i               1    1[BANK0 ] unsigned char 
 12124 ;; Return value:  Size  Location     Type
 12125 ;;		None               void
 12126 ;; Registers used:
 12127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12128 ;; Tracked objects:
 12129 ;;		On entry : 0/0
 12130 ;;		On exit  : 0/0
 12131 ;;		Unchanged: 0/0
 12132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12136 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12137 ;;Total ram usage:        2 bytes
 12138 ;; Hardware stack levels used:    1
 12139 ;; Hardware stack levels required when called:    6
 12140 ;; This function calls:
 12141 ;;		_Flash_Memory_Unlock
 12142 ;; This function is called by:
 12143 ;;		_Flash_Memory_Initialization
 12144 ;;		_Flash_Memory_Modify
 12145 ;; This function uses a non-reentrant model
 12146 ;;
 12147                           
 12148                           
 12149                           ;psect for function _Flash_Memory_Write
 12150  1189                     _Flash_Memory_Write:	
 12151                           
 12152                           ;MCU_B1.c: 945: char i = 0;
 12153                           
 12154                           ;incstack = 0
 12155                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12156  1189  0020               	movlb	0	; select bank0
 12157  118A  01A1               	clrf	Flash_Memory_Write@i
 12158                           
 12159                           ;MCU_B1.c: 946: CFGS = 0;
 12160  118B  0023               	movlb	3	; select bank3
 12161  118C  1315               	bcf	21,6	;volatile
 12162                           
 12163                           ;MCU_B1.c: 947: PMADRH = 0x30;
 12164  118D  3030               	movlw	48
 12165  118E  0092               	movwf	18	;volatile
 12166                           
 12167                           ;MCU_B1.c: 948: PMDATH = 0;
 12168  118F  0194               	clrf	20	;volatile
 12169                           
 12170                           ;MCU_B1.c: 949: FREE = 0;
 12171  1190  1215               	bcf	21,4	;volatile
 12172                           
 12173                           ;MCU_B1.c: 950: LWLO = 1;
 12174  1191  1695               	bsf	21,5	;volatile
 12175                           
 12176                           ;MCU_B1.c: 951: WREN = 1;
 12177  1192  1515               	bsf	21,2	;volatile
 12178                           
 12179                           ;MCU_B1.c: 952: for (i = 0; i < 32; i++) {
 12180  1193  0020               	movlb	0	; select bank0
 12181  1194  01A1               	clrf	Flash_Memory_Write@i
 12182  1195  3020               	movlw	32
 12183  1196  0221               	subwf	Flash_Memory_Write@i,w
 12184  1197  1803               	btfsc	3,0
 12185  1198  29B1               	goto	l1322
 12186  1199                     l9460:	
 12187                           
 12188                           ;MCU_B1.c: 953: PMADRL = i;
 12189  1199  0821               	movf	Flash_Memory_Write@i,w
 12190  119A  0023               	movlb	3	; select bank3
 12191  119B  0091               	movwf	17	;volatile
 12192                           
 12193                           ;MCU_B1.c: 954: PMDATL = Memory.Data[i];
 12194  119C  0020               	movlb	0	; select bank0
 12195  119D  0821               	movf	Flash_Memory_Write@i,w
 12196  119E  3E20               	addlw	_Memory& (0+255)
 12197  119F  0086               	movwf	6
 12198  11A0  3002               	movlw	2	; select bank4/5
 12199  11A1  0087               	movwf	7
 12200  11A2  0801               	movf	1,w
 12201  11A3  0023               	movlb	3	; select bank3
 12202  11A4  0093               	movwf	19	;volatile
 12203                           
 12204                           ;MCU_B1.c: 955: Flash_Memory_Unlock();
 12205  11A5  3190  2067  3191   	fcall	_Flash_Memory_Unlock
 12206  11A8  3001               	movlw	1
 12207  11A9  0020               	movlb	0	; select bank0
 12208  11AA  00A0               	movwf	??_Flash_Memory_Write
 12209  11AB  0820               	movf	??_Flash_Memory_Write,w
 12210  11AC  07A1               	addwf	Flash_Memory_Write@i,f
 12211  11AD  3020               	movlw	32
 12212  11AE  0221               	subwf	Flash_Memory_Write@i,w
 12213  11AF  1C03               	skipc
 12214  11B0  2999               	goto	l9460
 12215  11B1                     l1322:	
 12216                           
 12217                           ;MCU_B1.c: 956: }
 12218                           ;MCU_B1.c: 957: LWLO = 0;
 12219  11B1  0023               	movlb	3	; select bank3
 12220  11B2  1295               	bcf	21,5	;volatile
 12221                           
 12222                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 12223  11B3  3190  2067         	fcall	_Flash_Memory_Unlock
 12224                           
 12225                           ;MCU_B1.c: 959: WREN = 0;
 12226  11B5  0023               	movlb	3	; select bank3
 12227  11B6  1115               	bcf	21,2	;volatile
 12228  11B7  0008               	return
 12229  11B8                     __end_of_Flash_Memory_Write:	
 12230                           
 12231                           	psect	text69
 12232  1067                     __ptext69:	
 12233 ;; *************** function _Flash_Memory_Unlock *****************
 12234 ;; Defined at:
 12235 ;;		line 923 in file "../src/MCU_B1.c"
 12236 ;; Parameters:    Size  Location     Type
 12237 ;;		None
 12238 ;; Auto vars:     Size  Location     Type
 12239 ;;		None
 12240 ;; Return value:  Size  Location     Type
 12241 ;;		None               void
 12242 ;; Registers used:
 12243 ;;		wreg
 12244 ;; Tracked objects:
 12245 ;;		On entry : 0/0
 12246 ;;		On exit  : 0/0
 12247 ;;		Unchanged: 0/0
 12248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;Total ram usage:        0 bytes
 12254 ;; Hardware stack levels used:    1
 12255 ;; Hardware stack levels required when called:    5
 12256 ;; This function calls:
 12257 ;;		Nothing
 12258 ;; This function is called by:
 12259 ;;		_Flash_Memory_Write
 12260 ;;		_Flash_Memory_Erasing
 12261 ;; This function uses a non-reentrant model
 12262 ;;
 12263                           
 12264                           
 12265                           ;psect for function _Flash_Memory_Unlock
 12266  1067                     _Flash_Memory_Unlock:	
 12267                           
 12268                           ;MCU_B1.c: 924: PMCON2 = 0x55;
 12269                           
 12270                           ;incstack = 0
 12271                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12272  1067  3055               	movlw	85
 12273  1068  0023               	movlb	3	; select bank3
 12274  1069  0096               	movwf	22	;volatile
 12275                           
 12276                           ;MCU_B1.c: 925: PMCON2 = 0xaa;
 12277  106A  30AA               	movlw	170
 12278  106B  0096               	movwf	22	;volatile
 12279                           
 12280                           ;MCU_B1.c: 926: WR = 1;
 12281  106C  1495               	bsf	21,1	;volatile
 12282                           
 12283                           ;MCU_B1.c: 927: __nop();
 12284  106D  0000               	nop
 12285                           
 12286                           ;MCU_B1.c: 928: __nop();
 12287  106E  0000               	nop
 12288  106F  0008               	return
 12289  1070                     __end_of_Flash_Memory_Unlock:	
 12290                           
 12291                           	psect	text70
 12292  1E46                     __ptext70:	
 12293 ;; *************** function _Flash_Memory_Read *****************
 12294 ;; Defined at:
 12295 ;;		line 932 in file "../src/MCU_B1.c"
 12296 ;; Parameters:    Size  Location     Type
 12297 ;;  address         1    wreg     unsigned char 
 12298 ;; Auto vars:     Size  Location     Type
 12299 ;;  address         1    2[BANK0 ] unsigned char 
 12300 ;;  ret             1    3[BANK0 ] unsigned char 
 12301 ;;  i               1    1[BANK0 ] unsigned char 
 12302 ;; Return value:  Size  Location     Type
 12303 ;;                  1    wreg      unsigned char 
 12304 ;; Registers used:
 12305 ;;		wreg, status,2
 12306 ;; Tracked objects:
 12307 ;;		On entry : 0/0
 12308 ;;		On exit  : 0/0
 12309 ;;		Unchanged: 0/0
 12310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12314 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12315 ;;Total ram usage:        4 bytes
 12316 ;; Hardware stack levels used:    1
 12317 ;; Hardware stack levels required when called:    5
 12318 ;; This function calls:
 12319 ;;		Nothing
 12320 ;; This function is called by:
 12321 ;;		_Flash_Memory_Initialization
 12322 ;;		_Flash_Memory_Modify
 12323 ;; This function uses a non-reentrant model
 12324 ;;
 12325                           
 12326                           
 12327                           ;psect for function _Flash_Memory_Read
 12328  1E46                     _Flash_Memory_Read:	
 12329                           
 12330                           ;incstack = 0
 12331                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12332                           ;Flash_Memory_Read@address stored from wreg
 12333  1E46  0020               	movlb	0	; select bank0
 12334  1E47  00A2               	movwf	Flash_Memory_Read@address
 12335                           
 12336                           ;MCU_B1.c: 933: char i = 0, ret = 0;
 12337  1E48  01A1               	clrf	Flash_Memory_Read@i
 12338  1E49  01A3               	clrf	Flash_Memory_Read@ret
 12339                           
 12340                           ;MCU_B1.c: 934: PMADRH = 0x30;
 12341  1E4A  3030               	movlw	48
 12342  1E4B  0023               	movlb	3	; select bank3
 12343  1E4C  0092               	movwf	18	;volatile
 12344                           
 12345                           ;MCU_B1.c: 935: PMADRL = address;
 12346  1E4D  0020               	movlb	0	; select bank0
 12347  1E4E  0822               	movf	Flash_Memory_Read@address,w
 12348  1E4F  0023               	movlb	3	; select bank3
 12349  1E50  0091               	movwf	17	;volatile
 12350                           
 12351                           ;MCU_B1.c: 936: CFGS = 0;
 12352  1E51  1315               	bcf	21,6	;volatile
 12353                           
 12354                           ;MCU_B1.c: 937: RD = 1;
 12355  1E52  1415               	bsf	21,0	;volatile
 12356                           
 12357                           ;MCU_B1.c: 938: i = PMDATH;
 12358  1E53  0814               	movf	20,w	;volatile
 12359  1E54  0020               	movlb	0	; select bank0
 12360  1E55  00A0               	movwf	??_Flash_Memory_Read
 12361  1E56  0820               	movf	??_Flash_Memory_Read,w
 12362  1E57  00A1               	movwf	Flash_Memory_Read@i
 12363                           
 12364                           ;MCU_B1.c: 939: ret = PMDATL;
 12365  1E58  0023               	movlb	3	; select bank3
 12366  1E59  0813               	movf	19,w	;volatile
 12367  1E5A  0020               	movlb	0	; select bank0
 12368  1E5B  00A0               	movwf	??_Flash_Memory_Read
 12369  1E5C  0820               	movf	??_Flash_Memory_Read,w
 12370  1E5D  00A3               	movwf	Flash_Memory_Read@ret
 12371                           
 12372                           ;MCU_B1.c: 940: return ret;
 12373  1E5E  0823               	movf	Flash_Memory_Read@ret,w
 12374  1E5F  0008               	return
 12375  1E60                     __end_of_Flash_Memory_Read:	
 12376                           
 12377                           	psect	text71
 12378  11EB                     __ptext71:	
 12379 ;; *************** function _DimmerLights_Main *****************
 12380 ;; Defined at:
 12381 ;;		line 400 in file "../src/Dimmer_B1.c"
 12382 ;; Parameters:    Size  Location     Type
 12383 ;;		None
 12384 ;; Auto vars:     Size  Location     Type
 12385 ;;		None
 12386 ;; Return value:  Size  Location     Type
 12387 ;;		None               void
 12388 ;; Registers used:
 12389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12390 ;; Tracked objects:
 12391 ;;		On entry : 0/0
 12392 ;;		On exit  : 0/0
 12393 ;;		Unchanged: 0/0
 12394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12396 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12397 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12398 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12399 ;;Total ram usage:        4 bytes
 12400 ;; Hardware stack levels used:    1
 12401 ;; Hardware stack levels required when called:   11
 12402 ;; This function calls:
 12403 ;;		_getLoad_OK
 12404 ;;		_getMain_All_Error_Status
 12405 ;;		_getMain_LightsStatus
 12406 ;;		_setDimmerLights_Main
 12407 ;; This function is called by:
 12408 ;;		_main
 12409 ;; This function uses a non-reentrant model
 12410 ;;
 12411                           
 12412                           
 12413                           ;psect for function _DimmerLights_Main
 12414  11EB                     _DimmerLights_Main:	
 12415                           
 12416                           ;Dimmer_B1.c: 402: if (getMain_All_Error_Status(0) == 0) {
 12417                           
 12418                           ;incstack = 0
 12419                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12420  11EB  3000               	movlw	0
 12421  11EC  3191  21B8  3191   	fcall	_getMain_All_Error_Status
 12422  11EF  3800               	iorlw	0
 12423  11F0  1D03               	skipz
 12424  11F1  2A15               	goto	l786
 12425                           
 12426                           ;Dimmer_B1.c: 403: if (Dimmer.LoadOK == 1) {
 12427  11F2  0021               	movlb	1	; select bank1
 12428  11F3  1CC8               	btfss	_Dimmer^(0+128),1
 12429  11F4  2A17               	goto	l10244
 12430                           
 12431                           ;Dimmer_B1.c: 404: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12432  11F5  319B  2381  3191   	fcall	_getLoad_OK
 12433  11F8  3A01               	xorlw	1
 12434  11F9  1903               	skipnz
 12435  11FA  2A0C               	goto	l10240
 12436  11FB  3191  215D  3191   	fcall	_getMain_LightsStatus
 12437  11FE  3A00               	xorlw	0
 12438  11FF  1903               	skipnz
 12439  1200  2A0C               	goto	l10240
 12440  1201  0021               	movlb	1	; select bank1
 12441  1202  0C48               	rrf	_Dimmer^(0+128),w
 12442  1203  3901               	andlw	1
 12443  1204  0020               	movlb	0	; select bank0
 12444  1205  00E6               	movwf	??_DimmerLights_Main
 12445  1206  01E7               	clrf	??_DimmerLights_Main+1
 12446  1207  0866               	movf	??_DimmerLights_Main,w
 12447  1208  00E8               	movwf	_DimmerLights_Main$2495
 12448  1209  0867               	movf	??_DimmerLights_Main+1,w
 12449  120A  00E9               	movwf	_DimmerLights_Main$2495+1
 12450  120B  2A0F               	goto	l10242
 12451  120C                     l10240:	
 12452  120C  0020               	movlb	0	; select bank0
 12453  120D  01E8               	clrf	_DimmerLights_Main$2495
 12454  120E  01E9               	clrf	_DimmerLights_Main$2495+1
 12455  120F                     l10242:	
 12456  120F  0868               	movf	_DimmerLights_Main$2495,w
 12457  1210  0021               	movlb	1	; select bank1
 12458  1211  10C8               	bcf	_Dimmer^(0+128),1
 12459  1212  1D03               	skipz
 12460  1213  14C8               	bsf	_Dimmer^(0+128),1
 12461                           
 12462                           ;Dimmer_B1.c: 405: }
 12463                           ;Dimmer_B1.c: 406: } else {
 12464  1214  2A17               	goto	l10244
 12465  1215                     l786:	
 12466                           
 12467                           ;Dimmer_B1.c: 407: Dimmer.LoadOK = 0;
 12468  1215  0021               	movlb	1	; select bank1
 12469  1216  10C8               	bcf	_Dimmer^(0+128),1
 12470  1217                     l10244:	
 12471                           
 12472                           ;Dimmer_B1.c: 408: }
 12473                           ;Dimmer_B1.c: 412: setDimmerLights_Main(1);
 12474  1217  3001               	movlw	1
 12475  1218  3196  2646  3191   	fcall	_setDimmerLights_Main
 12476                           
 12477                           ;Dimmer_B1.c: 416: setDimmerLights_Main(2);
 12478  121B  3002               	movlw	2
 12479  121C  3196  2646         	fcall	_setDimmerLights_Main
 12480  121E  0008               	return
 12481  121F                     __end_of_DimmerLights_Main:	
 12482                           
 12483                           	psect	text72
 12484  1646                     __ptext72:	
 12485 ;; *************** function _setDimmerLights_Main *****************
 12486 ;; Defined at:
 12487 ;;		line 426 in file "../src/Dimmer_B1.c"
 12488 ;; Parameters:    Size  Location     Type
 12489 ;;  lights          1    wreg     unsigned char 
 12490 ;; Auto vars:     Size  Location     Type
 12491 ;;  lights          1   69[BANK0 ] unsigned char 
 12492 ;; Return value:  Size  Location     Type
 12493 ;;		None               void
 12494 ;; Registers used:
 12495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12496 ;; Tracked objects:
 12497 ;;		On entry : 0/0
 12498 ;;		On exit  : 0/0
 12499 ;;		Unchanged: 0/0
 12500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12502 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12504 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12505 ;;Total ram usage:        1 bytes
 12506 ;; Hardware stack levels used:    1
 12507 ;; Hardware stack levels required when called:   10
 12508 ;; This function calls:
 12509 ;;		_DimmerLightsPointSelect
 12510 ;;		_setBuz
 12511 ;;		_setDimmerLights
 12512 ;;		_setDimmerLights_Adj
 12513 ;; This function is called by:
 12514 ;;		_DimmerLights_Main
 12515 ;; This function uses a non-reentrant model
 12516 ;;
 12517                           
 12518                           
 12519                           ;psect for function _setDimmerLights_Main
 12520  1646                     _setDimmerLights_Main:	
 12521                           
 12522                           ;incstack = 0
 12523                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12524                           ;setDimmerLights_Main@lights stored from wreg
 12525  1646  0020               	movlb	0	; select bank0
 12526  1647  00E5               	movwf	setDimmerLights_Main@lights
 12527                           
 12528                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 12529  1648  0865               	movf	setDimmerLights_Main@lights,w
 12530  1649  319C  24DD  3196   	fcall	_DimmerLightsPointSelect
 12531                           
 12532                           ;Dimmer_B1.c: 428: if (DimmerLights->Trigger == 1) {
 12533  164C  0877               	movf	_DimmerLights,w
 12534  164D  3E08               	addlw	8
 12535  164E  0086               	movwf	6
 12536  164F  3001               	movlw	1	; select bank2/3
 12537  1650  0087               	movwf	7
 12538  1651  1D01               	btfss	1,2
 12539  1652  2E70               	goto	l9718
 12540                           
 12541                           ;Dimmer_B1.c: 430: if (Dimmer.LoadOK == 0) {
 12542  1653  0021               	movlb	1	; select bank1
 12543  1654  18C8               	btfsc	_Dimmer^(0+128),1
 12544  1655  0008               	return
 12545                           
 12546                           ;Dimmer_B1.c: 431: DimmerLights->Trigger = 0;
 12547  1656  0877               	movf	_DimmerLights,w
 12548  1657  3E08               	addlw	8
 12549  1658  0086               	movwf	6
 12550  1659  3001               	movlw	1	; select bank2/3
 12551  165A  0087               	movwf	7
 12552  165B  1101               	bcf	1,2
 12553                           
 12554                           ;Dimmer_B1.c: 433: if (DimmerLights->Switch == 1) {
 12555  165C  0877               	movf	_DimmerLights,w
 12556  165D  3E08               	addlw	8
 12557  165E  0086               	movwf	6
 12558  165F  3001               	movlw	1	; select bank2/3
 12559  1660  0087               	movwf	7
 12560  1661  1C81               	btfss	1,1
 12561  1662  2E6A               	goto	l9716
 12562                           
 12563                           ;Dimmer_B1.c: 434: setDimmerLights(lights, 1);
 12564  1663  0020               	movlb	0	; select bank0
 12565  1664  01A7               	clrf	setDimmerLights@status
 12566  1665  0AA7               	incf	setDimmerLights@status,f
 12567  1666  0865               	movf	setDimmerLights_Main@lights,w
 12568  1667  318D  2599         	fcall	_setDimmerLights
 12569                           
 12570                           ;Dimmer_B1.c: 435: } else {
 12571  1669  0008               	return
 12572  166A                     l9716:	
 12573                           
 12574                           ;Dimmer_B1.c: 436: setDimmerLights(lights, 0);
 12575  166A  0020               	movlb	0	; select bank0
 12576  166B  01A7               	clrf	setDimmerLights@status
 12577  166C  0865               	movf	setDimmerLights_Main@lights,w
 12578  166D  318D  2599         	fcall	_setDimmerLights
 12579                           
 12580                           ;Dimmer_B1.c: 437: }
 12581                           ;Dimmer_B1.c: 438: }
 12582                           ;Dimmer_B1.c: 439: } else {
 12583  166F  0008               	return
 12584  1670                     l9718:	
 12585                           
 12586                           ;Dimmer_B1.c: 440: if (DimmerLights->TriggerAdj == 1) {
 12587  1670  0877               	movf	_DimmerLights,w
 12588  1671  3E08               	addlw	8
 12589  1672  0086               	movwf	6
 12590  1673  3001               	movlw	1	; select bank2/3
 12591  1674  0087               	movwf	7
 12592  1675  1E01               	btfss	1,4
 12593  1676  0008               	return
 12594                           
 12595                           ;Dimmer_B1.c: 441: if (Dimmer.LoadOK == 0) {
 12596  1677  0021               	movlb	1	; select bank1
 12597  1678  18C8               	btfsc	_Dimmer^(0+128),1
 12598  1679  0008               	return
 12599                           
 12600                           ;Dimmer_B1.c: 442: DimmerLights->TriggerAdj = 0;
 12601  167A  0877               	movf	_DimmerLights,w
 12602  167B  3E08               	addlw	8
 12603  167C  0086               	movwf	6
 12604  167D  3001               	movlw	1	; select bank2/3
 12605  167E  0087               	movwf	7
 12606  167F  1201               	bcf	1,4
 12607                           
 12608                           ;Dimmer_B1.c: 443: if (DimmerLights->AdjGo == 1) {
 12609  1680  0877               	movf	_DimmerLights,w
 12610  1681  3E08               	addlw	8
 12611  1682  0086               	movwf	6
 12612  1683  3001               	movlw	1	; select bank2/3
 12613  1684  0087               	movwf	7
 12614  1685  1D81               	btfss	1,3
 12615  1686  2E97               	goto	l9728
 12616                           
 12617                           ;Dimmer_B1.c: 444: setDimmerLights_Adj(lights, 1);
 12618  1687  0020               	movlb	0	; select bank0
 12619  1688  01E2               	clrf	setDimmerLights_Adj@status
 12620  1689  0AE2               	incf	setDimmerLights_Adj@status,f
 12621  168A  0865               	movf	setDimmerLights_Main@lights,w
 12622  168B  3195  254E  3196   	fcall	_setDimmerLights_Adj
 12623                           
 12624                           ;Dimmer_B1.c: 445: setBuz(1, 100);
 12625  168E  3064               	movlw	100
 12626  168F  0020               	movlb	0	; select bank0
 12627  1690  00A9               	movwf	setBuz@time
 12628  1691  3000               	movlw	0
 12629  1692  00AA               	movwf	setBuz@time+1
 12630  1693  3001               	movlw	1
 12631  1694  3197  274D         	fcall	_setBuz
 12632                           
 12633                           ;Dimmer_B1.c: 446: } else {
 12634  1696  0008               	return
 12635  1697                     l9728:	
 12636                           
 12637                           ;Dimmer_B1.c: 447: setDimmerLights_Adj(lights, 0);
 12638  1697  0020               	movlb	0	; select bank0
 12639  1698  01E2               	clrf	setDimmerLights_Adj@status
 12640  1699  0865               	movf	setDimmerLights_Main@lights,w
 12641  169A  3195  254E         	fcall	_setDimmerLights_Adj
 12642  169C  0008               	return
 12643  169D                     __end_of_setDimmerLights_Main:	
 12644                           
 12645                           	psect	text73
 12646  154E                     __ptext73:	
 12647 ;; *************** function _setDimmerLights_Adj *****************
 12648 ;; Defined at:
 12649 ;;		line 747 in file "../src/Dimmer_B1.c"
 12650 ;; Parameters:    Size  Location     Type
 12651 ;;  lights          1    wreg     unsigned char 
 12652 ;;  status          1   66[BANK0 ] unsigned char 
 12653 ;; Auto vars:     Size  Location     Type
 12654 ;;  lights          1   68[BANK0 ] unsigned char 
 12655 ;; Return value:  Size  Location     Type
 12656 ;;		None               void
 12657 ;; Registers used:
 12658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12659 ;; Tracked objects:
 12660 ;;		On entry : 0/0
 12661 ;;		On exit  : 0/0
 12662 ;;		Unchanged: 0/0
 12663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12664 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;Total ram usage:        3 bytes
 12669 ;; Hardware stack levels used:    1
 12670 ;; Hardware stack levels required when called:    9
 12671 ;; This function calls:
 12672 ;;		_DimmerLightsPointSelect
 12673 ;;		_getMain_All_Error_Status
 12674 ;;		_setRF_DimmerLights
 12675 ;;		_setTxData
 12676 ;; This function is called by:
 12677 ;;		_setDimmerLights_Main
 12678 ;; This function uses a non-reentrant model
 12679 ;;
 12680                           
 12681                           
 12682                           ;psect for function _setDimmerLights_Adj
 12683  154E                     _setDimmerLights_Adj:	
 12684                           
 12685                           ;incstack = 0
 12686                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12687                           ;setDimmerLights_Adj@lights stored from wreg
 12688  154E  0020               	movlb	0	; select bank0
 12689  154F  00E4               	movwf	setDimmerLights_Adj@lights
 12690                           
 12691                           ;Dimmer_B1.c: 748: DimmerLightsPointSelect(lights);
 12692  1550  0864               	movf	setDimmerLights_Adj@lights,w
 12693  1551  319C  24DD  3195   	fcall	_DimmerLightsPointSelect
 12694                           
 12695                           ;Dimmer_B1.c: 749: if (status == 1) {
 12696  1554  0020               	movlb	0	; select bank0
 12697  1555  0862               	movf	setDimmerLights_Adj@status,w
 12698  1556  3A01               	xorlw	1
 12699  1557  1D03               	skipz
 12700  1558  2D64               	goto	l9346
 12701                           
 12702                           ;Dimmer_B1.c: 750: DimmerLights->AdjFlag = 1;
 12703  1559  0877               	movf	_DimmerLights,w
 12704  155A  0086               	movwf	6
 12705  155B  3001               	movlw	1	; select bank2/3
 12706  155C  0087               	movwf	7
 12707  155D  1581               	bsf	1,3
 12708                           
 12709                           ;Dimmer_B1.c: 751: DimmerLights->Signal = 1;
 12710  155E  0877               	movf	_DimmerLights,w
 12711  155F  0086               	movwf	6
 12712  1560  3001               	movlw	1	; select bank2/3
 12713  1561  0087               	movwf	7
 12714  1562  1481               	bsf	1,1
 12715                           
 12716                           ;Dimmer_B1.c: 752: } else {
 12717  1563  0008               	return
 12718  1564                     l9346:	
 12719                           
 12720                           ;Dimmer_B1.c: 753: if (DimmerLights->AdjFlag == 1) {
 12721  1564  0877               	movf	_DimmerLights,w
 12722  1565  0086               	movwf	6
 12723  1566  3001               	movlw	1	; select bank2/3
 12724  1567  0087               	movwf	7
 12725  1568  1D81               	btfss	1,3
 12726  1569  0008               	return
 12727                           
 12728                           ;Dimmer_B1.c: 754: DimmerLights->Signal = 0;
 12729  156A  0877               	movf	_DimmerLights,w
 12730  156B  0086               	movwf	6
 12731  156C  3001               	movlw	1	; select bank2/3
 12732  156D  0087               	movwf	7
 12733  156E  1081               	bcf	1,1
 12734                           
 12735                           ;Dimmer_B1.c: 755: DimmerLights->AdjFlag = 0;
 12736  156F  0877               	movf	_DimmerLights,w
 12737  1570  0086               	movwf	6
 12738  1571  3001               	movlw	1	; select bank2/3
 12739  1572  0087               	movwf	7
 12740  1573  1181               	bcf	1,3
 12741                           
 12742                           ;Dimmer_B1.c: 756: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12743  1574  0877               	movf	_DimmerLights,w
 12744  1575  3E04               	addlw	4
 12745  1576  0086               	movwf	6
 12746  1577  3001               	movlw	1	; select bank2/3
 12747  1578  0087               	movwf	7
 12748  1579  0801               	movf	1,w
 12749  157A  00E3               	movwf	??_setDimmerLights_Adj
 12750  157B  0877               	movf	_DimmerLights,w
 12751  157C  3E05               	addlw	5
 12752  157D  0086               	movwf	6
 12753  157E  3001               	movlw	1	; select bank2/3
 12754  157F  0087               	movwf	7
 12755  1580  0863               	movf	??_setDimmerLights_Adj,w
 12756  1581  0081               	movwf	1
 12757                           
 12758                           ;Dimmer_B1.c: 766: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12759  1582  3000               	movlw	0
 12760  1583  3191  21B8  3195   	fcall	_getMain_All_Error_Status
 12761  1586  3A00               	xorlw	0
 12762  1587  3000               	movlw	0
 12763  1588  1903               	skipnz
 12764  1589  3001               	movlw	1
 12765  158A  0020               	movlb	0	; select bank0
 12766  158B  00E3               	movwf	??_setDimmerLights_Adj
 12767  158C  0DE3               	rlf	??_setDimmerLights_Adj,f
 12768  158D  0021               	movlb	1	; select bank1
 12769  158E  0848               	movf	_Dimmer^(0+128),w
 12770  158F  0020               	movlb	0	; select bank0
 12771  1590  0663               	xorwf	??_setDimmerLights_Adj,w
 12772  1591  39FD               	andlw	-3
 12773  1592  0663               	xorwf	??_setDimmerLights_Adj,w
 12774  1593  0021               	movlb	1	; select bank1
 12775  1594  00C8               	movwf	_Dimmer^(0+128)
 12776                           
 12777                           ;Dimmer_B1.c: 769: setRF_DimmerLights(lights, 1);
 12778  1595  0020               	movlb	0	; select bank0
 12779  1596  01DD               	clrf	setRF_DimmerLights@on
 12780  1597  0ADD               	incf	setRF_DimmerLights@on,f
 12781  1598  0864               	movf	setDimmerLights_Adj@lights,w
 12782  1599  318A  22D2  3195   	fcall	_setRF_DimmerLights
 12783                           
 12784                           ;Dimmer_B1.c: 770: setTxData();
 12785  159C  318E  2625         	fcall	_setTxData
 12786  159E  0008               	return
 12787  159F                     __end_of_setDimmerLights_Adj:	
 12788                           
 12789                           	psect	text74
 12790  0D99                     __ptext74:	
 12791 ;; *************** function _setDimmerLights *****************
 12792 ;; Defined at:
 12793 ;;		line 626 in file "../src/Dimmer_B1.c"
 12794 ;; Parameters:    Size  Location     Type
 12795 ;;  lights          1    wreg     unsigned char 
 12796 ;;  status          1    7[BANK0 ] unsigned char 
 12797 ;; Auto vars:     Size  Location     Type
 12798 ;;  lights          1    9[BANK0 ] unsigned char 
 12799 ;; Return value:  Size  Location     Type
 12800 ;;		None               void
 12801 ;; Registers used:
 12802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12803 ;; Tracked objects:
 12804 ;;		On entry : 0/0
 12805 ;;		On exit  : 0/0
 12806 ;;		Unchanged: 0/0
 12807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12808 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12810 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12811 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12812 ;;Total ram usage:        3 bytes
 12813 ;; Hardware stack levels used:    1
 12814 ;; Hardware stack levels required when called:    7
 12815 ;; This function calls:
 12816 ;;		_DimmerLightsPointSelect
 12817 ;;		_getMain_All_Error_Status
 12818 ;;		_setDimmerLights_Line
 12819 ;;		_setLED
 12820 ;; This function is called by:
 12821 ;;		_setDimmerLights_Main
 12822 ;; This function uses a non-reentrant model
 12823 ;;
 12824                           
 12825                           
 12826                           ;psect for function _setDimmerLights
 12827  0D99                     _setDimmerLights:	
 12828                           
 12829                           ;incstack = 0
 12830                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12831                           ;setDimmerLights@lights stored from wreg
 12832  0D99  0020               	movlb	0	; select bank0
 12833  0D9A  00A9               	movwf	setDimmerLights@lights
 12834                           
 12835                           ;Dimmer_B1.c: 627: DimmerLightsPointSelect(lights);
 12836  0D9B  0829               	movf	setDimmerLights@lights,w
 12837  0D9C  319C  24DD  318D   	fcall	_DimmerLightsPointSelect
 12838                           
 12839                           ;Dimmer_B1.c: 630: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12840  0D9F  3000               	movlw	0
 12841  0DA0  3191  21B8  318D   	fcall	_getMain_All_Error_Status
 12842  0DA3  3A00               	xorlw	0
 12843  0DA4  3000               	movlw	0
 12844  0DA5  1903               	skipnz
 12845  0DA6  3001               	movlw	1
 12846  0DA7  0020               	movlb	0	; select bank0
 12847  0DA8  00A8               	movwf	??_setDimmerLights
 12848  0DA9  0DA8               	rlf	??_setDimmerLights,f
 12849  0DAA  0021               	movlb	1	; select bank1
 12850  0DAB  0848               	movf	_Dimmer^(0+128),w
 12851  0DAC  0020               	movlb	0	; select bank0
 12852  0DAD  0628               	xorwf	??_setDimmerLights,w
 12853  0DAE  39FD               	andlw	-3
 12854  0DAF  0628               	xorwf	??_setDimmerLights,w
 12855  0DB0  0021               	movlb	1	; select bank1
 12856  0DB1  00C8               	movwf	_Dimmer^(0+128)
 12857                           
 12858                           ;Dimmer_B1.c: 634: if (status == 1) {
 12859  0DB2  0020               	movlb	0	; select bank0
 12860  0DB3  0827               	movf	setDimmerLights@status,w
 12861  0DB4  3A01               	xorlw	1
 12862  0DB5  1D03               	skipz
 12863  0DB6  2DED               	goto	l9326
 12864                           
 12865                           ;Dimmer_B1.c: 635: DimmerLights->Loop = 1;
 12866  0DB7  0877               	movf	_DimmerLights,w
 12867  0DB8  3E09               	addlw	9
 12868  0DB9  0086               	movwf	6
 12869  0DBA  3001               	movlw	1	; select bank2/3
 12870  0DBB  0087               	movwf	7
 12871  0DBC  1481               	bsf	1,1
 12872                           
 12873                           ;Dimmer_B1.c: 636: setLED(lights, 0);
 12874  0DBD  01A2               	clrf	setLED@command
 12875  0DBE  0829               	movf	setDimmerLights@lights,w
 12876  0DBF  3195  259F  318D   	fcall	_setLED
 12877                           
 12878                           ;Dimmer_B1.c: 638: setDimmerLights_Line(lights);
 12879  0DC2  0020               	movlb	0	; select bank0
 12880  0DC3  0829               	movf	setDimmerLights@lights,w
 12881  0DC4  319D  25A3         	fcall	_setDimmerLights_Line
 12882                           
 12883                           ;Dimmer_B1.c: 639: DimmerLights->StatusFlag = 1;
 12884  0DC6  0877               	movf	_DimmerLights,w
 12885  0DC7  0086               	movwf	6
 12886  0DC8  3001               	movlw	1	; select bank2/3
 12887  0DC9  0087               	movwf	7
 12888  0DCA  1701               	bsf	1,6
 12889                           
 12890                           ;Dimmer_B1.c: 641: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12891  0DCB  0877               	movf	_DimmerLights,w
 12892  0DCC  3E05               	addlw	5
 12893  0DCD  0086               	movwf	6
 12894  0DCE  3001               	movlw	1	; select bank2/3
 12895  0DCF  0087               	movwf	7
 12896  0DD0  0801               	movf	1,w
 12897  0DD1  0020               	movlb	0	; select bank0
 12898  0DD2  00A8               	movwf	??_setDimmerLights
 12899  0DD3  0877               	movf	_DimmerLights,w
 12900  0DD4  3E04               	addlw	4
 12901  0DD5  0086               	movwf	6
 12902  0DD6  3001               	movlw	1	; select bank2/3
 12903  0DD7  0087               	movwf	7
 12904  0DD8  0828               	movf	??_setDimmerLights,w
 12905  0DD9  0081               	movwf	1
 12906                           
 12907                           ;Dimmer_B1.c: 645: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 12908  0DDA  3020               	movlw	32
 12909  0DDB  00A8               	movwf	??_setDimmerLights
 12910  0DDC  0877               	movf	_DimmerLights,w
 12911  0DDD  3E04               	addlw	4
 12912  0DDE  0086               	movwf	6
 12913  0DDF  3001               	movlw	1	; select bank2/3
 12914  0DE0  0087               	movwf	7
 12915  0DE1  0828               	movf	??_setDimmerLights,w
 12916  0DE2  0081               	movwf	1
 12917                           
 12918                           ;Dimmer_B1.c: 652: DimmerLights->DimmingTimeValue = 7;
 12919  0DE3  3007               	movlw	7
 12920  0DE4  00A8               	movwf	??_setDimmerLights
 12921  0DE5  0877               	movf	_DimmerLights,w
 12922  0DE6  3E02               	addlw	2
 12923  0DE7  0086               	movwf	6
 12924  0DE8  3001               	movlw	1	; select bank2/3
 12925  0DE9  0087               	movwf	7
 12926  0DEA  0828               	movf	??_setDimmerLights,w
 12927  0DEB  0081               	movwf	1
 12928                           
 12929                           ;Dimmer_B1.c: 654: } else {
 12930  0DEC  0008               	return
 12931  0DED                     l9326:	
 12932                           
 12933                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 12934  0DED  0877               	movf	_DimmerLights,w
 12935  0DEE  0086               	movwf	6
 12936  0DEF  3001               	movlw	1	; select bank2/3
 12937  0DF0  0087               	movwf	7
 12938  0DF1  1301               	bcf	1,6
 12939                           
 12940                           ;Dimmer_B1.c: 656: DimmerLights->Loop = 0;
 12941  0DF2  0877               	movf	_DimmerLights,w
 12942  0DF3  3E09               	addlw	9
 12943  0DF4  0086               	movwf	6
 12944  0DF5  3001               	movlw	1	; select bank2/3
 12945  0DF6  0087               	movwf	7
 12946  0DF7  1081               	bcf	1,1
 12947                           
 12948                           ;Dimmer_B1.c: 657: setLED(lights, 1);
 12949  0DF8  01A2               	clrf	setLED@command
 12950  0DF9  0AA2               	incf	setLED@command,f
 12951  0DFA  0829               	movf	setDimmerLights@lights,w
 12952  0DFB  3195  259F         	fcall	_setLED
 12953                           
 12954                           ;Dimmer_B1.c: 675: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12955  0DFD  0877               	movf	_DimmerLights,w
 12956  0DFE  3E06               	addlw	6
 12957  0DFF  0086               	movwf	6
 12958  0E00  3001               	movlw	1	; select bank2/3
 12959  0E01  0087               	movwf	7
 12960  0E02  0801               	movf	1,w
 12961  0E03  0020               	movlb	0	; select bank0
 12962  0E04  00A8               	movwf	??_setDimmerLights
 12963  0E05  0877               	movf	_DimmerLights,w
 12964  0E06  3E04               	addlw	4
 12965  0E07  0086               	movwf	6
 12966  0E08  3001               	movlw	1	; select bank2/3
 12967  0E09  0087               	movwf	7
 12968  0E0A  0828               	movf	??_setDimmerLights,w
 12969  0E0B  0081               	movwf	1
 12970                           
 12971                           ;Dimmer_B1.c: 683: DimmerLights->AdjFlag = 0;
 12972  0E0C  0877               	movf	_DimmerLights,w
 12973  0E0D  0086               	movwf	6
 12974  0E0E  3001               	movlw	1	; select bank2/3
 12975  0E0F  0087               	movwf	7
 12976  0E10  1181               	bcf	1,3
 12977                           
 12978                           ;Dimmer_B1.c: 684: DimmerLights->AdjStatus = 0;
 12979  0E11  0877               	movf	_DimmerLights,w
 12980  0E12  0086               	movwf	6
 12981  0E13  3001               	movlw	1	; select bank2/3
 12982  0E14  0087               	movwf	7
 12983  0E15  1201               	bcf	1,4
 12984                           
 12985                           ;Dimmer_B1.c: 685: DimmerLights->AdjRF = 0;
 12986  0E16  0877               	movf	_DimmerLights,w
 12987  0E17  0086               	movwf	6
 12988  0E18  3001               	movlw	1	; select bank2/3
 12989  0E19  0087               	movwf	7
 12990  0E1A  1101               	bcf	1,2
 12991                           
 12992                           ;Dimmer_B1.c: 686: DimmerLights->DimmingTimeValue = 7;
 12993  0E1B  3007               	movlw	7
 12994  0E1C  00A8               	movwf	??_setDimmerLights
 12995  0E1D  0877               	movf	_DimmerLights,w
 12996  0E1E  3E02               	addlw	2
 12997  0E1F  0086               	movwf	6
 12998  0E20  3001               	movlw	1	; select bank2/3
 12999  0E21  0087               	movwf	7
 13000  0E22  0828               	movf	??_setDimmerLights,w
 13001  0E23  0081               	movwf	1
 13002  0E24  0008               	return
 13003  0E25                     __end_of_setDimmerLights:	
 13004                           
 13005                           	psect	text75
 13006  159F                     __ptext75:	
 13007 ;; *************** function _setLED *****************
 13008 ;; Defined at:
 13009 ;;		line 73 in file "../src/LED_B1.c"
 13010 ;; Parameters:    Size  Location     Type
 13011 ;;  led             1    wreg     unsigned char 
 13012 ;;  command         1    2[BANK0 ] unsigned char 
 13013 ;; Auto vars:     Size  Location     Type
 13014 ;;  led             1    3[BANK0 ] unsigned char 
 13015 ;; Return value:  Size  Location     Type
 13016 ;;		None               void
 13017 ;; Registers used:
 13018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13019 ;; Tracked objects:
 13020 ;;		On entry : 0/0
 13021 ;;		On exit  : 0/0
 13022 ;;		Unchanged: 0/0
 13023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13024 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13028 ;;Total ram usage:        2 bytes
 13029 ;; Hardware stack levels used:    1
 13030 ;; Hardware stack levels required when called:    6
 13031 ;; This function calls:
 13032 ;;		_LedPointSelect
 13033 ;; This function is called by:
 13034 ;;		_setDimmerLights
 13035 ;;		_setLED_Initialization
 13036 ;;		_setMain_Exception
 13037 ;;		_setSw_Initialization
 13038 ;; This function uses a non-reentrant model
 13039 ;;
 13040                           
 13041                           
 13042                           ;psect for function _setLED
 13043  159F                     _setLED:	
 13044                           
 13045                           ;incstack = 0
 13046                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13047                           ;setLED@led stored from wreg
 13048  159F  0020               	movlb	0	; select bank0
 13049  15A0  00A3               	movwf	setLED@led
 13050                           
 13051                           ;LED_B1.c: 74: LedPointSelect(led);
 13052  15A1  0823               	movf	setLED@led,w
 13053  15A2  319F  2715  3195   	fcall	_LedPointSelect
 13054                           
 13055                           ;LED_B1.c: 75: if (command == 0) {
 13056  15A5  0020               	movlb	0	; select bank0
 13057  15A6  08A2               	movf	setLED@command,f
 13058  15A7  1D03               	skipz
 13059  15A8  2DB6               	goto	l9056
 13060                           
 13061                           ;LED_B1.c: 77: if (led == 1) {
 13062  15A9  0823               	movf	setLED@led,w
 13063  15AA  3A01               	xorlw	1
 13064  15AB  1D03               	skipz
 13065  15AC  2DAE               	goto	l9048
 13066                           
 13067                           ;LED_B1.c: 81: RA3 = 1;
 13068  15AD  158C               	bsf	12,3	;volatile
 13069  15AE                     l9048:	
 13070                           
 13071                           ;LED_B1.c: 83: }
 13072                           ;LED_B1.c: 86: if (led == 2) {
 13073  15AE  0823               	movf	setLED@led,w
 13074  15AF  3A02               	xorlw	2
 13075  15B0  1903               	btfsc	3,2
 13076                           
 13077                           ;LED_B1.c: 90: RC7 = 1;
 13078  15B1  178E               	bsf	14,7	;volatile
 13079                           
 13080                           ;LED_B1.c: 92: }
 13081                           ;LED_B1.c: 104: if (led == 99) {
 13082  15B2  0823               	movf	setLED@led,w
 13083  15B3  3A63               	xorlw	99
 13084  15B4  1903               	btfsc	3,2
 13085                           
 13086                           ;LED_B1.c: 108: RB5 = 1;
 13087  15B5  168D               	bsf	13,5	;volatile
 13088  15B6                     l9056:	
 13089                           
 13090                           ;LED_B1.c: 110: }
 13091                           ;LED_B1.c: 112: } if (command == 1) {
 13092  15B6  0822               	movf	setLED@command,w
 13093  15B7  3A01               	xorlw	1
 13094  15B8  1D03               	skipz
 13095  15B9  2DC7               	goto	l9070
 13096                           
 13097                           ;LED_B1.c: 114: if (led == 1) {
 13098  15BA  0823               	movf	setLED@led,w
 13099  15BB  3A01               	xorlw	1
 13100  15BC  1D03               	skipz
 13101  15BD  2DBF               	goto	l9062
 13102                           
 13103                           ;LED_B1.c: 118: RA3 = 0;
 13104  15BE  118C               	bcf	12,3	;volatile
 13105  15BF                     l9062:	
 13106                           
 13107                           ;LED_B1.c: 120: }
 13108                           ;LED_B1.c: 123: if (led == 2) {
 13109  15BF  0823               	movf	setLED@led,w
 13110  15C0  3A02               	xorlw	2
 13111  15C1  1903               	btfsc	3,2
 13112                           
 13113                           ;LED_B1.c: 127: RC7 = 0;
 13114  15C2  138E               	bcf	14,7	;volatile
 13115                           
 13116                           ;LED_B1.c: 129: }
 13117                           ;LED_B1.c: 141: if (led == 99) {
 13118  15C3  0823               	movf	setLED@led,w
 13119  15C4  3A63               	xorlw	99
 13120  15C5  1903               	btfsc	3,2
 13121                           
 13122                           ;LED_B1.c: 145: RB5 = 0;
 13123  15C6  128D               	bcf	13,5	;volatile
 13124  15C7                     l9070:	
 13125                           
 13126                           ;LED_B1.c: 147: }
 13127                           ;LED_B1.c: 149: } if (command == 10) {
 13128  15C7  0822               	movf	setLED@command,w
 13129  15C8  3A0A               	xorlw	10
 13130  15C9  1D03               	skipz
 13131  15CA  2DE7               	goto	l9086
 13132                           
 13133                           ;LED_B1.c: 150: LED->GO = 0;
 13134  15CB  0021               	movlb	1	; select bank1
 13135  15CC  084F               	movf	_LED^(0+128),w
 13136  15CD  0086               	movwf	6
 13137  15CE  3001               	movlw	1	; select bank2/3
 13138  15CF  0087               	movwf	7
 13139  15D0  1081               	bcf	1,1
 13140                           
 13141                           ;LED_B1.c: 151: LED->Time = 0;
 13142  15D1  0A4F               	incf	_LED^(0+128),w
 13143  15D2  0086               	movwf	6
 13144  15D3  3001               	movlw	1	; select bank2/3
 13145  15D4  0087               	movwf	7
 13146  15D5  3000               	movlw	0
 13147  15D6  3FC0               	movwi [0]fsr1
 13148  15D7  3FC1               	movwi [1]fsr1
 13149                           
 13150                           ;LED_B1.c: 153: if (led == 1) {
 13151  15D8  0020               	movlb	0	; select bank0
 13152  15D9  0823               	movf	setLED@led,w
 13153  15DA  3A01               	xorlw	1
 13154  15DB  1D03               	skipz
 13155  15DC  2DDF               	goto	l9078
 13156                           
 13157                           ;LED_B1.c: 157: RA3 = 1;
 13158  15DD  158C               	bsf	12,3	;volatile
 13159                           
 13160                           ;LED_B1.c: 159: }
 13161  15DE  2DE3               	goto	l9082
 13162  15DF                     l9078:	
 13163                           
 13164                           ;LED_B1.c: 162: else if (led == 2) {
 13165  15DF  0823               	movf	setLED@led,w
 13166  15E0  3A02               	xorlw	2
 13167  15E1  1903               	btfsc	3,2
 13168                           
 13169                           ;LED_B1.c: 166: RC7 = 1;
 13170  15E2  178E               	bsf	14,7	;volatile
 13171  15E3                     l9082:	
 13172                           
 13173                           ;LED_B1.c: 168: }
 13174                           ;LED_B1.c: 180: if (led == 99) {
 13175  15E3  0823               	movf	setLED@led,w
 13176  15E4  3A63               	xorlw	99
 13177  15E5  1903               	btfsc	3,2
 13178                           
 13179                           ;LED_B1.c: 184: RB5 = 1;
 13180  15E6  168D               	bsf	13,5	;volatile
 13181  15E7                     l9086:	
 13182                           
 13183                           ;LED_B1.c: 186: }
 13184                           ;LED_B1.c: 188: }
 13185                           ;LED_B1.c: 189: if (command == 11) {
 13186  15E7  0822               	movf	setLED@command,w
 13187  15E8  3A0B               	xorlw	11
 13188  15E9  1D03               	skipz
 13189  15EA  0008               	return
 13190                           
 13191                           ;LED_B1.c: 190: LED->GO = 1;
 13192  15EB  0021               	movlb	1	; select bank1
 13193  15EC  084F               	movf	_LED^(0+128),w
 13194  15ED  0086               	movwf	6
 13195  15EE  3001               	movlw	1	; select bank2/3
 13196  15EF  0087               	movwf	7
 13197  15F0  1481               	bsf	1,1
 13198  15F1  0008               	return
 13199  15F2                     __end_of_setLED:	
 13200                           
 13201                           	psect	text76
 13202  1F15                     __ptext76:	
 13203 ;; *************** function _LedPointSelect *****************
 13204 ;; Defined at:
 13205 ;;		line 7 in file "../src/LED_B1.c"
 13206 ;; Parameters:    Size  Location     Type
 13207 ;;  led             1    wreg     unsigned char 
 13208 ;; Auto vars:     Size  Location     Type
 13209 ;;  led             1    1[BANK0 ] unsigned char 
 13210 ;; Return value:  Size  Location     Type
 13211 ;;		None               void
 13212 ;; Registers used:
 13213 ;;		wreg
 13214 ;; Tracked objects:
 13215 ;;		On entry : 0/0
 13216 ;;		On exit  : 0/0
 13217 ;;		Unchanged: 0/0
 13218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13221 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13222 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13223 ;;Total ram usage:        2 bytes
 13224 ;; Hardware stack levels used:    1
 13225 ;; Hardware stack levels required when called:    5
 13226 ;; This function calls:
 13227 ;;		Nothing
 13228 ;; This function is called by:
 13229 ;;		_setLED_Initialization
 13230 ;;		_setLED
 13231 ;;		_setLED_Main
 13232 ;; This function uses a non-reentrant model
 13233 ;;
 13234                           
 13235                           
 13236                           ;psect for function _LedPointSelect
 13237  1F15                     _LedPointSelect:	
 13238                           
 13239                           ;incstack = 0
 13240                           ; Regs used in _LedPointSelect: [wreg]
 13241                           ;LedPointSelect@led stored from wreg
 13242  1F15  0020               	movlb	0	; select bank0
 13243  1F16  00A1               	movwf	LedPointSelect@led
 13244                           
 13245                           ;LED_B1.c: 9: if (led == 1) {
 13246  1F17  0821               	movf	LedPointSelect@led,w
 13247  1F18  3A01               	xorlw	1
 13248  1F19  1D03               	skipz
 13249  1F1A  2F20               	goto	l1005
 13250                           
 13251                           ;LED_B1.c: 10: LED = &VarLED1;
 13252  1F1B  3061               	movlw	_VarLED1& (0+255)
 13253  1F1C  00A0               	movwf	??_LedPointSelect
 13254  1F1D  0820               	movf	??_LedPointSelect,w
 13255  1F1E  0021               	movlb	1	; select bank1
 13256  1F1F  00CF               	movwf	_LED^(0+128)
 13257  1F20                     l1005:	
 13258                           
 13259                           ;LED_B1.c: 11: }
 13260                           ;LED_B1.c: 14: if (led == 2) {
 13261  1F20  0020               	movlb	0	; select bank0
 13262  1F21  0821               	movf	LedPointSelect@led,w
 13263  1F22  3A02               	xorlw	2
 13264  1F23  1D03               	skipz
 13265  1F24  2F2A               	goto	l1006
 13266                           
 13267                           ;LED_B1.c: 15: LED = &VarLED2;
 13268  1F25  3065               	movlw	_VarLED2& (0+255)
 13269  1F26  00A0               	movwf	??_LedPointSelect
 13270  1F27  0820               	movf	??_LedPointSelect,w
 13271  1F28  0021               	movlb	1	; select bank1
 13272  1F29  00CF               	movwf	_LED^(0+128)
 13273  1F2A                     l1006:	
 13274                           
 13275                           ;LED_B1.c: 16: }
 13276                           ;LED_B1.c: 24: if (led == 99) {
 13277  1F2A  0020               	movlb	0	; select bank0
 13278  1F2B  0821               	movf	LedPointSelect@led,w
 13279  1F2C  3A63               	xorlw	99
 13280  1F2D  1D03               	skipz
 13281  1F2E  0008               	return
 13282                           
 13283                           ;LED_B1.c: 25: LED = &VarErrLED;
 13284  1F2F  305D               	movlw	_VarErrLED& (0+255)
 13285  1F30  00A0               	movwf	??_LedPointSelect
 13286  1F31  0820               	movf	??_LedPointSelect,w
 13287  1F32  0021               	movlb	1	; select bank1
 13288  1F33  00CF               	movwf	_LED^(0+128)
 13289  1F34  0008               	return
 13290  1F35                     __end_of_LedPointSelect:	
 13291                           
 13292                           	psect	text77
 13293  1DA3                     __ptext77:	
 13294 ;; *************** function _setDimmerLights_Line *****************
 13295 ;; Defined at:
 13296 ;;		line 698 in file "../src/Dimmer_B1.c"
 13297 ;; Parameters:    Size  Location     Type
 13298 ;;  lights          1    wreg     unsigned char 
 13299 ;; Auto vars:     Size  Location     Type
 13300 ;;  lights          1    0[BANK0 ] unsigned char 
 13301 ;; Return value:  Size  Location     Type
 13302 ;;		None               void
 13303 ;; Registers used:
 13304 ;;		wreg
 13305 ;; Tracked objects:
 13306 ;;		On entry : 0/0
 13307 ;;		On exit  : 0/0
 13308 ;;		Unchanged: 0/0
 13309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13314 ;;Total ram usage:        1 bytes
 13315 ;; Hardware stack levels used:    1
 13316 ;; Hardware stack levels required when called:    5
 13317 ;; This function calls:
 13318 ;;		Nothing
 13319 ;; This function is called by:
 13320 ;;		_setDimmerLights
 13321 ;; This function uses a non-reentrant model
 13322 ;;
 13323                           
 13324                           
 13325                           ;psect for function _setDimmerLights_Line
 13326  1DA3                     _setDimmerLights_Line:	
 13327                           
 13328                           ;incstack = 0
 13329                           ; Regs used in _setDimmerLights_Line: [wreg]
 13330                           ;setDimmerLights_Line@lights stored from wreg
 13331  1DA3  0020               	movlb	0	; select bank0
 13332  1DA4  00A0               	movwf	setDimmerLights_Line@lights
 13333                           
 13334                           ;Dimmer_B1.c: 700: DimmerLights1.Line = 0;
 13335  1DA5  0023               	movlb	3	; select bank3
 13336  1DA6  1047               	bcf	(_DimmerLights1^(0+384)+9),0
 13337                           
 13338                           ;Dimmer_B1.c: 703: DimmerLights2.Line = 0;
 13339  1DA7  1056               	bcf	(_DimmerLights2^(0+384)+9),0
 13340                           
 13341                           ;Dimmer_B1.c: 709: if (lights == 1) {
 13342  1DA8  0020               	movlb	0	; select bank0
 13343  1DA9  0820               	movf	setDimmerLights_Line@lights,w
 13344  1DAA  3A01               	xorlw	1
 13345  1DAB  1D03               	skipz
 13346  1DAC  2DB0               	goto	l9096
 13347                           
 13348                           ;Dimmer_B1.c: 710: DimmerLights1.Line = 1;
 13349  1DAD  0023               	movlb	3	; select bank3
 13350  1DAE  1447               	bsf	(_DimmerLights1^(0+384)+9),0
 13351                           
 13352                           ;Dimmer_B1.c: 711: }
 13353  1DAF  0008               	return
 13354  1DB0                     l9096:	
 13355                           
 13356                           ;Dimmer_B1.c: 714: else if (lights == 2) {
 13357  1DB0  0020               	movlb	0	; select bank0
 13358  1DB1  0820               	movf	setDimmerLights_Line@lights,w
 13359  1DB2  3A02               	xorlw	2
 13360  1DB3  1D03               	skipz
 13361  1DB4  0008               	return
 13362                           
 13363                           ;Dimmer_B1.c: 715: DimmerLights2.Line = 1;
 13364  1DB5  0023               	movlb	3	; select bank3
 13365  1DB6  1456               	bsf	(_DimmerLights2^(0+384)+9),0
 13366  1DB7  0008               	return
 13367  1DB8                     __end_of_setDimmerLights_Line:	
 13368                           
 13369                           	psect	text78
 13370  11B8                     __ptext78:	
 13371 ;; *************** function _getMain_All_Error_Status *****************
 13372 ;; Defined at:
 13373 ;;		line 361 in file "../src/Main_B1.c"
 13374 ;; Parameters:    Size  Location     Type
 13375 ;;  command         1    wreg     unsigned char 
 13376 ;; Auto vars:     Size  Location     Type
 13377 ;;  command         1    5[BANK0 ] unsigned char 
 13378 ;;  status          1    6[BANK0 ] unsigned char 
 13379 ;; Return value:  Size  Location     Type
 13380 ;;                  1    wreg      unsigned char 
 13381 ;; Registers used:
 13382 ;;		wreg, status,2, status,0
 13383 ;; Tracked objects:
 13384 ;;		On entry : 0/0
 13385 ;;		On exit  : 0/0
 13386 ;;		Unchanged: 0/0
 13387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13391 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13392 ;;Total ram usage:        7 bytes
 13393 ;; Hardware stack levels used:    1
 13394 ;; Hardware stack levels required when called:    5
 13395 ;; This function calls:
 13396 ;;		Nothing
 13397 ;; This function is called by:
 13398 ;;		_DimmerLights_Main
 13399 ;;		_setDimmerLights
 13400 ;;		_setDimmerLights_Adj
 13401 ;;		_Load_Main
 13402 ;;		_setTemp_Main
 13403 ;;		_setRF_Main
 13404 ;;		_getRxData
 13405 ;;		_Switch_Main
 13406 ;; This function uses a non-reentrant model
 13407 ;;
 13408                           
 13409                           
 13410                           ;psect for function _getMain_All_Error_Status
 13411  11B8                     _getMain_All_Error_Status:	
 13412                           
 13413                           ;incstack = 0
 13414                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 13415                           ;getMain_All_Error_Status@command stored from wreg
 13416  11B8  0020               	movlb	0	; select bank0
 13417  11B9  00A5               	movwf	getMain_All_Error_Status@command
 13418                           
 13419                           ;Main_B1.c: 362: char status = 0;
 13420  11BA  01A6               	clrf	getMain_All_Error_Status@status
 13421                           
 13422                           ;Main_B1.c: 373: if (status == 0 && command != 2) {
 13423  11BB  08A6               	movf	getMain_All_Error_Status@status,f
 13424  11BC  1D03               	skipz
 13425  11BD  29D2               	goto	l9028
 13426  11BE  0825               	movf	getMain_All_Error_Status@command,w
 13427  11BF  3A02               	xorlw	2
 13428  11C0  1903               	skipnz
 13429  11C1  29D2               	goto	l9028
 13430                           
 13431                           ;Main_B1.c: 374: status = Temp.ERROR == 1 ? 2 : 0;
 13432  11C2  0021               	movlb	1	; select bank1
 13433  11C3  18D8               	btfsc	_Temp^(0+128),1
 13434  11C4  29C9               	goto	l9026
 13435  11C5  0020               	movlb	0	; select bank0
 13436  11C6  01A1               	clrf	_getMain_All_Error_Status$3941
 13437  11C7  01A2               	clrf	_getMain_All_Error_Status$3941+1
 13438  11C8  29CE               	goto	l1562
 13439  11C9                     l9026:	
 13440  11C9  3002               	movlw	2
 13441  11CA  0020               	movlb	0	; select bank0
 13442  11CB  00A1               	movwf	_getMain_All_Error_Status$3941
 13443  11CC  3000               	movlw	0
 13444  11CD  00A2               	movwf	_getMain_All_Error_Status$3941+1
 13445  11CE                     l1562:	
 13446  11CE  0821               	movf	_getMain_All_Error_Status$3941,w
 13447  11CF  00A0               	movwf	??_getMain_All_Error_Status
 13448  11D0  0820               	movf	??_getMain_All_Error_Status,w
 13449  11D1  00A6               	movwf	getMain_All_Error_Status@status
 13450  11D2                     l9028:	
 13451                           
 13452                           ;Main_B1.c: 375: }
 13453                           ;Main_B1.c: 380: if (status == 0 && command != 3) {
 13454  11D2  08A6               	movf	getMain_All_Error_Status@status,f
 13455  11D3  1D03               	skipz
 13456  11D4  29E9               	goto	l1563
 13457  11D5  0825               	movf	getMain_All_Error_Status@command,w
 13458  11D6  3A03               	xorlw	3
 13459  11D7  1903               	skipnz
 13460  11D8  29E9               	goto	l1563
 13461                           
 13462                           ;Main_B1.c: 381: status = Load.ERROR == 1 ? 3 : 0;
 13463  11D9  0022               	movlb	2	; select bank2
 13464  11DA  1AA7               	btfsc	_Load^(0+256),5
 13465  11DB  29E0               	goto	l9036
 13466  11DC  0020               	movlb	0	; select bank0
 13467  11DD  01A3               	clrf	_getMain_All_Error_Status$3950
 13468  11DE  01A4               	clrf	_getMain_All_Error_Status$3950+1
 13469  11DF  29E5               	goto	l1567
 13470  11E0                     l9036:	
 13471  11E0  3003               	movlw	3
 13472  11E1  0020               	movlb	0	; select bank0
 13473  11E2  00A3               	movwf	_getMain_All_Error_Status$3950
 13474  11E3  3000               	movlw	0
 13475  11E4  00A4               	movwf	_getMain_All_Error_Status$3950+1
 13476  11E5                     l1567:	
 13477  11E5  0823               	movf	_getMain_All_Error_Status$3950,w
 13478  11E6  00A0               	movwf	??_getMain_All_Error_Status
 13479  11E7  0820               	movf	??_getMain_All_Error_Status,w
 13480  11E8  00A6               	movwf	getMain_All_Error_Status@status
 13481  11E9                     l1563:	
 13482                           
 13483                           ;Main_B1.c: 382: }
 13484                           ;Main_B1.c: 398: return status;
 13485  11E9  0826               	movf	getMain_All_Error_Status@status,w
 13486  11EA  0008               	return
 13487  11EB                     __end_of_getMain_All_Error_Status:	
 13488                           
 13489                           	psect	text79
 13490  115D                     __ptext79:	
 13491 ;; *************** function _getMain_LightsStatus *****************
 13492 ;; Defined at:
 13493 ;;		line 334 in file "../src/Main_B1.c"
 13494 ;; Parameters:    Size  Location     Type
 13495 ;;		None
 13496 ;; Auto vars:     Size  Location     Type
 13497 ;;  i               2    6[BANK0 ] int 
 13498 ;;  status          1    8[BANK0 ] unsigned char 
 13499 ;;  count           1    5[BANK0 ] unsigned char 
 13500 ;; Return value:  Size  Location     Type
 13501 ;;                  1    wreg      unsigned char 
 13502 ;; Registers used:
 13503 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13504 ;; Tracked objects:
 13505 ;;		On entry : 0/0
 13506 ;;		On exit  : 0/0
 13507 ;;		Unchanged: 0/0
 13508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13510 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13511 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13512 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13513 ;;Total ram usage:        5 bytes
 13514 ;; Hardware stack levels used:    1
 13515 ;; Hardware stack levels required when called:    7
 13516 ;; This function calls:
 13517 ;;		_getDimmerLights_Status
 13518 ;; This function is called by:
 13519 ;;		_DimmerLights_Main
 13520 ;;		_Flash_Memory_Main
 13521 ;;		_setMain_Exception
 13522 ;;		_Load_Main
 13523 ;; This function uses a non-reentrant model
 13524 ;;
 13525                           
 13526                           
 13527                           ;psect for function _getMain_LightsStatus
 13528  115D                     _getMain_LightsStatus:	
 13529                           
 13530                           ;Main_B1.c: 335: char status = 0;
 13531                           
 13532                           ;incstack = 0
 13533                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13534  115D  0020               	movlb	0	; select bank0
 13535  115E  01A8               	clrf	getMain_LightsStatus@status
 13536                           
 13537                           ;Main_B1.c: 341: char count = 2;
 13538  115F  3002               	movlw	2
 13539  1160  00A4               	movwf	??_getMain_LightsStatus
 13540  1161  0824               	movf	??_getMain_LightsStatus,w
 13541  1162  00A5               	movwf	getMain_LightsStatus@count
 13542                           
 13543                           ;Main_B1.c: 347: for (int i = 0; i < count; i++) {
 13544  1163  01A6               	clrf	getMain_LightsStatus@i
 13545  1164  01A7               	clrf	getMain_LightsStatus@i+1
 13546  1165                     l9302:	
 13547  1165  0827               	movf	getMain_LightsStatus@i+1,w
 13548  1166  3A80               	xorlw	128
 13549  1167  00A4               	movwf	??_getMain_LightsStatus
 13550  1168  3080               	movlw	128
 13551  1169  0224               	subwf	??_getMain_LightsStatus,w
 13552  116A  1D03               	skipz
 13553  116B  296E               	goto	u10125
 13554  116C  0825               	movf	getMain_LightsStatus@count,w
 13555  116D  0226               	subwf	getMain_LightsStatus@i,w
 13556  116E                     u10125:	
 13557  116E  1803               	btfsc	3,0
 13558  116F  2986               	goto	l9304
 13559                           
 13560                           ;Main_B1.c: 348: if (status == 0) {
 13561  1170  0020               	movlb	0	; select bank0
 13562  1171  08A8               	movf	getMain_LightsStatus@status,f
 13563  1172  1D03               	skipz
 13564  1173  2981               	goto	l9300
 13565                           
 13566                           ;Main_B1.c: 353: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 13567  1174  0826               	movf	getMain_LightsStatus@i,w
 13568  1175  3E01               	addlw	1
 13569  1176  319C  2440  3191   	fcall	_getDimmerLights_Status
 13570  1179  3A01               	xorlw	1
 13571  117A  3000               	movlw	0
 13572  117B  1903               	skipnz
 13573  117C  3001               	movlw	1
 13574  117D  0020               	movlb	0	; select bank0
 13575  117E  00A4               	movwf	??_getMain_LightsStatus
 13576  117F  0824               	movf	??_getMain_LightsStatus,w
 13577  1180  00A8               	movwf	getMain_LightsStatus@status
 13578  1181                     l9300:	
 13579  1181  3001               	movlw	1
 13580  1182  07A6               	addwf	getMain_LightsStatus@i,f
 13581  1183  3000               	movlw	0
 13582  1184  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 13583  1185  2965               	goto	l9302
 13584  1186                     l9304:	
 13585                           
 13586                           ;Main_B1.c: 355: }
 13587                           ;Main_B1.c: 356: }
 13588                           ;Main_B1.c: 357: return status;
 13589  1186  0020               	movlb	0	; select bank0
 13590  1187  0828               	movf	getMain_LightsStatus@status,w
 13591  1188  0008               	return
 13592  1189                     __end_of_getMain_LightsStatus:	
 13593                           
 13594                           	psect	text80
 13595  1B81                     __ptext80:	
 13596 ;; *************** function _getLoad_OK *****************
 13597 ;; Defined at:
 13598 ;;		line 218 in file "../src/OverLoad_B1.c"
 13599 ;; Parameters:    Size  Location     Type
 13600 ;;		None
 13601 ;; Auto vars:     Size  Location     Type
 13602 ;;  ok              1    0[BANK0 ] unsigned char 
 13603 ;; Return value:  Size  Location     Type
 13604 ;;                  1    wreg      unsigned char 
 13605 ;; Registers used:
 13606 ;;		wreg, status,2
 13607 ;; Tracked objects:
 13608 ;;		On entry : 0/0
 13609 ;;		On exit  : 0/0
 13610 ;;		Unchanged: 0/0
 13611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13615 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13616 ;;Total ram usage:        1 bytes
 13617 ;; Hardware stack levels used:    1
 13618 ;; Hardware stack levels required when called:    5
 13619 ;; This function calls:
 13620 ;;		Nothing
 13621 ;; This function is called by:
 13622 ;;		_DimmerLights_Main
 13623 ;; This function uses a non-reentrant model
 13624 ;;
 13625                           
 13626                           
 13627                           ;psect for function _getLoad_OK
 13628  1B81                     _getLoad_OK:	
 13629                           
 13630                           ;OverLoad_B1.c: 219: char ok = Load.OK == 1 ? 1 : 0;
 13631                           
 13632                           ;incstack = 0
 13633                           ; Regs used in _getLoad_OK: [wreg+status,2]
 13634  1B81  3000               	movlw	0
 13635  1B82  0022               	movlb	2	; select bank2
 13636  1B83  1BA7               	btfsc	_Load^(0+256),7
 13637  1B84  3001               	movlw	1
 13638  1B85  0020               	movlb	0	; select bank0
 13639  1B86  00A0               	movwf	getLoad_OK@ok
 13640                           
 13641                           ;OverLoad_B1.c: 220: return ok;
 13642  1B87  0820               	movf	getLoad_OK@ok,w
 13643  1B88  0008               	return
 13644  1B89                     __end_of_getLoad_OK:	
 13645                           
 13646                           	psect	text81
 13647  1DE3                     __ptext81:	
 13648 ;; *************** function _DimmerLights_Initialization *****************
 13649 ;; Defined at:
 13650 ;;		line 339 in file "../src/Dimmer_B1.c"
 13651 ;; Parameters:    Size  Location     Type
 13652 ;;		None
 13653 ;; Auto vars:     Size  Location     Type
 13654 ;;		None
 13655 ;; Return value:  Size  Location     Type
 13656 ;;		None               void
 13657 ;; Registers used:
 13658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13659 ;; Tracked objects:
 13660 ;;		On entry : 0/0
 13661 ;;		On exit  : 0/0
 13662 ;;		Unchanged: 0/0
 13663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13668 ;;Total ram usage:        1 bytes
 13669 ;; Hardware stack levels used:    1
 13670 ;; Hardware stack levels required when called:    7
 13671 ;; This function calls:
 13672 ;;		_Dimmer_Initialization
 13673 ;;		_setDimmerLights_Initialization
 13674 ;; This function is called by:
 13675 ;;		_main
 13676 ;; This function uses a non-reentrant model
 13677 ;;
 13678                           
 13679                           
 13680                           ;psect for function _DimmerLights_Initialization
 13681  1DE3                     _DimmerLights_Initialization:	
 13682                           
 13683                           ;Dimmer_B1.c: 341: DimmerLights11 = &DimmerLights1;
 13684                           
 13685                           ;incstack = 0
 13686                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13687  1DE3  30BE               	movlw	_DimmerLights1& (0+255)
 13688  1DE4  0020               	movlb	0	; select bank0
 13689  1DE5  00A4               	movwf	??_DimmerLights_Initialization
 13690  1DE6  0824               	movf	??_DimmerLights_Initialization,w
 13691  1DE7  0021               	movlb	1	; select bank1
 13692  1DE8  00CC               	movwf	_DimmerLights11^(0+128)
 13693                           
 13694                           ;Dimmer_B1.c: 342: setDimmerLights_Initialization(1);
 13695  1DE9  3001               	movlw	1
 13696  1DEA  3190  20BB  319D   	fcall	_setDimmerLights_Initialization
 13697                           
 13698                           ;Dimmer_B1.c: 346: DimmerLights22 = &DimmerLights2;
 13699  1DED  30CD               	movlw	_DimmerLights2& (0+255)
 13700  1DEE  0020               	movlb	0	; select bank0
 13701  1DEF  00A4               	movwf	??_DimmerLights_Initialization
 13702  1DF0  0824               	movf	??_DimmerLights_Initialization,w
 13703  1DF1  0021               	movlb	1	; select bank1
 13704  1DF2  00CD               	movwf	_DimmerLights22^(0+128)
 13705                           
 13706                           ;Dimmer_B1.c: 347: setDimmerLights_Initialization(2);
 13707  1DF3  3002               	movlw	2
 13708  1DF4  3190  20BB  319D   	fcall	_setDimmerLights_Initialization
 13709                           
 13710                           ;Dimmer_B1.c: 356: Dimmer_Initialization();
 13711  1DF7  3190  2066         	fcall	_Dimmer_Initialization
 13712  1DF9  0008               	return
 13713  1DFA                     __end_of_DimmerLights_Initialization:	
 13714                           
 13715                           	psect	text82
 13716  10BB                     __ptext82:	
 13717 ;; *************** function _setDimmerLights_Initialization *****************
 13718 ;; Defined at:
 13719 ;;		line 362 in file "../src/Dimmer_B1.c"
 13720 ;; Parameters:    Size  Location     Type
 13721 ;;  lights          1    wreg     unsigned char 
 13722 ;; Auto vars:     Size  Location     Type
 13723 ;;  lights          1    3[BANK0 ] unsigned char 
 13724 ;; Return value:  Size  Location     Type
 13725 ;;		None               void
 13726 ;; Registers used:
 13727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13728 ;; Tracked objects:
 13729 ;;		On entry : 0/0
 13730 ;;		On exit  : 0/0
 13731 ;;		Unchanged: 0/0
 13732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;Total ram usage:        2 bytes
 13738 ;; Hardware stack levels used:    1
 13739 ;; Hardware stack levels required when called:    6
 13740 ;; This function calls:
 13741 ;;		_DimmerLightsPointSelect
 13742 ;; This function is called by:
 13743 ;;		_DimmerLights_Initialization
 13744 ;; This function uses a non-reentrant model
 13745 ;;
 13746                           
 13747                           
 13748                           ;psect for function _setDimmerLights_Initialization
 13749  10BB                     _setDimmerLights_Initialization:	
 13750                           
 13751                           ;incstack = 0
 13752                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13753                           ;setDimmerLights_Initialization@lights stored from wreg
 13754  10BB  0020               	movlb	0	; select bank0
 13755  10BC  00A3               	movwf	setDimmerLights_Initialization@lights
 13756                           
 13757                           ;Dimmer_B1.c: 364: DimmerLightsPointSelect(lights);
 13758  10BD  0823               	movf	setDimmerLights_Initialization@lights,w
 13759  10BE  319C  24DD         	fcall	_DimmerLightsPointSelect
 13760                           
 13761                           ;Dimmer_B1.c: 370: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13762  10C0  3020               	movlw	32
 13763  10C1  0020               	movlb	0	; select bank0
 13764  10C2  00A2               	movwf	??_setDimmerLights_Initialization
 13765  10C3  0877               	movf	_DimmerLights,w
 13766  10C4  3E05               	addlw	5
 13767  10C5  0086               	movwf	6
 13768  10C6  3001               	movlw	1	; select bank2/3
 13769  10C7  0087               	movwf	7
 13770  10C8  0822               	movf	??_setDimmerLights_Initialization,w
 13771  10C9  0081               	movwf	1
 13772                           
 13773                           ;Dimmer_B1.c: 371: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13774  10CA  303C               	movlw	60
 13775  10CB  00A2               	movwf	??_setDimmerLights_Initialization
 13776  10CC  0877               	movf	_DimmerLights,w
 13777  10CD  3E06               	addlw	6
 13778  10CE  0086               	movwf	6
 13779  10CF  3001               	movlw	1	; select bank2/3
 13780  10D0  0087               	movwf	7
 13781  10D1  0822               	movf	??_setDimmerLights_Initialization,w
 13782  10D2  0081               	movwf	1
 13783                           
 13784                           ;Dimmer_B1.c: 381: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13785  10D3  0877               	movf	_DimmerLights,w
 13786  10D4  3E06               	addlw	6
 13787  10D5  0086               	movwf	6
 13788  10D6  3001               	movlw	1	; select bank2/3
 13789  10D7  0087               	movwf	7
 13790  10D8  0801               	movf	1,w
 13791  10D9  00A2               	movwf	??_setDimmerLights_Initialization
 13792  10DA  0877               	movf	_DimmerLights,w
 13793  10DB  3E04               	addlw	4
 13794  10DC  0086               	movwf	6
 13795  10DD  3001               	movlw	1	; select bank2/3
 13796  10DE  0087               	movwf	7
 13797  10DF  0822               	movf	??_setDimmerLights_Initialization,w
 13798  10E0  0081               	movwf	1
 13799  10E1  0008               	return
 13800  10E2                     __end_of_setDimmerLights_Initialization:	
 13801                           
 13802                           	psect	text83
 13803  1066                     __ptext83:	
 13804 ;; *************** function _Dimmer_Initialization *****************
 13805 ;; Defined at:
 13806 ;;		line 922 in file "../src/Dimmer_B1.c"
 13807 ;; Parameters:    Size  Location     Type
 13808 ;;		None
 13809 ;; Auto vars:     Size  Location     Type
 13810 ;;		None
 13811 ;; Return value:  Size  Location     Type
 13812 ;;		None               void
 13813 ;; Registers used:
 13814 ;;		None
 13815 ;; Tracked objects:
 13816 ;;		On entry : 0/0
 13817 ;;		On exit  : 0/0
 13818 ;;		Unchanged: 0/0
 13819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;Total ram usage:        0 bytes
 13825 ;; Hardware stack levels used:    1
 13826 ;; Hardware stack levels required when called:    5
 13827 ;; This function calls:
 13828 ;;		Nothing
 13829 ;; This function is called by:
 13830 ;;		_DimmerLights_Initialization
 13831 ;; This function uses a non-reentrant model
 13832 ;;
 13833                           
 13834                           
 13835                           ;psect for function _Dimmer_Initialization
 13836  1066                     _Dimmer_Initialization:	
 13837                           
 13838                           ;incstack = 0
 13839                           ; Regs used in _Dimmer_Initialization: []
 13840  1066  0008               	return
 13841  1067                     __end_of_Dimmer_Initialization:	
 13842                           
 13843                           	psect	text84
 13844  1B79                     __ptext84:	
 13845 ;; *************** function _DelayOff_Main *****************
 13846 ;; Defined at:
 13847 ;;		line 41 in file "../src/DelayOff_B1.c"
 13848 ;; Parameters:    Size  Location     Type
 13849 ;;		None
 13850 ;; Auto vars:     Size  Location     Type
 13851 ;;		None
 13852 ;; Return value:  Size  Location     Type
 13853 ;;		None               void
 13854 ;; Registers used:
 13855 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13856 ;; Tracked objects:
 13857 ;;		On entry : 0/0
 13858 ;;		On exit  : 0/0
 13859 ;;		Unchanged: 0/0
 13860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13865 ;;Total ram usage:        0 bytes
 13866 ;; Hardware stack levels used:    1
 13867 ;; Hardware stack levels required when called:   11
 13868 ;; This function calls:
 13869 ;;		_DlyOff_Main
 13870 ;; This function is called by:
 13871 ;;		_main
 13872 ;; This function uses a non-reentrant model
 13873 ;;
 13874                           
 13875                           
 13876                           ;psect for function _DelayOff_Main
 13877  1B79                     _DelayOff_Main:	
 13878                           
 13879                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13880                           
 13881                           ;incstack = 0
 13882                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13883  1B79  3001               	movlw	1
 13884  1B7A  3189  21A7  319B   	fcall	_DlyOff_Main
 13885                           
 13886                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 13887  1B7D  3002               	movlw	2
 13888  1B7E  3189  21A7         	fcall	_DlyOff_Main
 13889  1B80  0008               	return
 13890  1B81                     __end_of_DelayOff_Main:	
 13891                           
 13892                           	psect	text85
 13893  09A7                     __ptext85:	
 13894 ;; *************** function _DlyOff_Main *****************
 13895 ;; Defined at:
 13896 ;;		line 62 in file "../src/DelayOff_B1.c"
 13897 ;; Parameters:    Size  Location     Type
 13898 ;;  sw              1    wreg     unsigned char 
 13899 ;; Auto vars:     Size  Location     Type
 13900 ;;  sw              1   72[BANK0 ] unsigned char 
 13901 ;; Return value:  Size  Location     Type
 13902 ;;		None               void
 13903 ;; Registers used:
 13904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13905 ;; Tracked objects:
 13906 ;;		On entry : 0/0
 13907 ;;		On exit  : 0/0
 13908 ;;		Unchanged: 0/0
 13909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13913 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13914 ;;Total ram usage:        3 bytes
 13915 ;; Hardware stack levels used:    1
 13916 ;; Hardware stack levels required when called:   10
 13917 ;; This function calls:
 13918 ;;		_DelayOffPointSelect
 13919 ;;		_getDimmerLights_Status
 13920 ;;		_setDimmerLights_SwOff
 13921 ;;		_setDimmerLights_SwOn
 13922 ;;		_setRF_DimmerLights
 13923 ;; This function is called by:
 13924 ;;		_DelayOff_Main
 13925 ;; This function uses a non-reentrant model
 13926 ;;
 13927                           
 13928                           
 13929                           ;psect for function _DlyOff_Main
 13930  09A7                     _DlyOff_Main:	
 13931                           
 13932                           ;incstack = 0
 13933                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13934                           ;DlyOff_Main@sw stored from wreg
 13935  09A7  0020               	movlb	0	; select bank0
 13936  09A8  00E8               	movwf	DlyOff_Main@sw
 13937                           
 13938                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13939  09A9  0868               	movf	DlyOff_Main@sw,w
 13940  09AA  319D  253D  3189   	fcall	_DelayOffPointSelect
 13941                           
 13942                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13943  09AD  0876               	movf	_DelayOff,w
 13944  09AE  0086               	movwf	6
 13945  09AF  3001               	movlw	1	; select bank2/3
 13946  09B0  0087               	movwf	7
 13947  09B1  1C81               	btfss	1,1
 13948  09B2  0008               	return
 13949                           
 13950                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13951  09B3  0876               	movf	_DelayOff,w
 13952  09B4  0086               	movwf	6
 13953  09B5  3001               	movlw	1	; select bank2/3
 13954  09B6  0087               	movwf	7
 13955  09B7  3001               	movlw	1
 13956  09B8  0781               	addwf	1,f
 13957  09B9  3141               	addfsr 1,1
 13958  09BA  1803               	skipnc
 13959  09BB  0A81               	incf	1,f
 13960                           
 13961                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 13962  09BC  0876               	movf	_DelayOff,w
 13963  09BD  0086               	movwf	6
 13964  09BE  3001               	movlw	1	; select bank2/3
 13965  09BF  0087               	movwf	7
 13966  09C0  3F40               	moviw [0]fsr1
 13967  09C1  0020               	movlb	0	; select bank0
 13968  09C2  00E6               	movwf	??_DlyOff_Main
 13969  09C3  3F41               	moviw [1]fsr1
 13970  09C4  00E7               	movwf	??_DlyOff_Main+1
 13971  09C5  3016               	movlw	22
 13972  09C6  0267               	subwf	??_DlyOff_Main+1,w
 13973  09C7  3012               	movlw	18
 13974  09C8  1903               	skipnz
 13975  09C9  0266               	subwf	??_DlyOff_Main,w
 13976  09CA  1C03               	skipc
 13977  09CB  0008               	return
 13978                           
 13979                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13980  09CC  0876               	movf	_DelayOff,w
 13981  09CD  0086               	movwf	6
 13982  09CE  3001               	movlw	1	; select bank2/3
 13983  09CF  0087               	movwf	7
 13984  09D0  3000               	movlw	0
 13985  09D1  3FC0               	movwi [0]fsr1
 13986  09D2  3FC1               	movwi [1]fsr1
 13987                           
 13988                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13989  09D3  3001               	movlw	1
 13990  09D4  00E6               	movwf	??_DlyOff_Main
 13991  09D5  0876               	movf	_DelayOff,w
 13992  09D6  0086               	movwf	6
 13993  09D7  3001               	movlw	1	; select bank2/3
 13994  09D8  0087               	movwf	7
 13995  09D9  0866               	movf	??_DlyOff_Main,w
 13996  09DA  0781               	addwf	1,f
 13997                           
 13998                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13999  09DB  0876               	movf	_DelayOff,w
 14000  09DC  0086               	movwf	6
 14001  09DD  3001               	movlw	1	; select bank2/3
 14002  09DE  0087               	movwf	7
 14003  09DF  0876               	movf	_DelayOff,w
 14004  09E0  0084               	movwf	4
 14005  09E1  3001               	movlw	1	; select bank2/3
 14006  09E2  0085               	movwf	5
 14007  09E3  0800               	movf	0,w
 14008  09E4  0201               	subwf	1,w
 14009  09E5  1C03               	skipc
 14010  09E6  0008               	return
 14011                           
 14012                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 14013  09E7  0876               	movf	_DelayOff,w
 14014  09E8  0086               	movwf	6
 14015  09E9  3001               	movlw	1	; select bank2/3
 14016  09EA  0087               	movwf	7
 14017  09EB  0181               	clrf	1
 14018                           
 14019                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 14020  09EC  0876               	movf	_DelayOff,w
 14021  09ED  0086               	movwf	6
 14022  09EE  3001               	movlw	1	; select bank2/3
 14023  09EF  0087               	movwf	7
 14024  09F0  1081               	bcf	1,1
 14025                           
 14026                           ;DelayOff_B1.c: 74: setDimmerLights_SwOn(sw);
 14027  09F1  0868               	movf	DlyOff_Main@sw,w
 14028  09F2  3194  2470  3189   	fcall	_setDimmerLights_SwOn
 14029                           
 14030                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 14031  09F5  0020               	movlb	0	; select bank0
 14032  09F6  0868               	movf	DlyOff_Main@sw,w
 14033  09F7  319C  2440  3189   	fcall	_getDimmerLights_Status
 14034  09FA  3A01               	xorlw	1
 14035  09FB  1D03               	skipz
 14036  09FC  2A02               	goto	l582
 14037                           
 14038                           ;DelayOff_B1.c: 76: setDimmerLights_SwOff(sw);
 14039  09FD  0020               	movlb	0	; select bank0
 14040  09FE  0868               	movf	DlyOff_Main@sw,w
 14041  09FF  3188  2086  3189   	fcall	_setDimmerLights_SwOff
 14042  0A02                     l582:	
 14043                           
 14044                           ;DelayOff_B1.c: 77: }
 14045                           ;DelayOff_B1.c: 78: setRF_DimmerLights(sw, 0);
 14046  0A02  0020               	movlb	0	; select bank0
 14047  0A03  01DD               	clrf	setRF_DimmerLights@on
 14048  0A04  0868               	movf	DlyOff_Main@sw,w
 14049  0A05  318A  22D2         	fcall	_setRF_DimmerLights
 14050  0A07  0008               	return
 14051  0A08                     __end_of_DlyOff_Main:	
 14052                           
 14053                           	psect	text86
 14054  1470                     __ptext86:	
 14055 ;; *************** function _setDimmerLights_SwOn *****************
 14056 ;; Defined at:
 14057 ;;		line 515 in file "../src/Dimmer_B1.c"
 14058 ;; Parameters:    Size  Location     Type
 14059 ;;  sw              1    wreg     unsigned char 
 14060 ;; Auto vars:     Size  Location     Type
 14061 ;;  sw              1   68[BANK0 ] unsigned char 
 14062 ;;  idle            1   67[BANK0 ] unsigned char 
 14063 ;; Return value:  Size  Location     Type
 14064 ;;		None               void
 14065 ;; Registers used:
 14066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14067 ;; Tracked objects:
 14068 ;;		On entry : 0/0
 14069 ;;		On exit  : 0/0
 14070 ;;		Unchanged: 0/0
 14071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14073 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14075 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14076 ;;Total ram usage:        3 bytes
 14077 ;; Hardware stack levels used:    1
 14078 ;; Hardware stack levels required when called:    9
 14079 ;; This function calls:
 14080 ;;		_DimmerLightsPointSelect
 14081 ;;		_getAll_DimmerLights_AdjGO
 14082 ;;		_setBuz
 14083 ;;		_setDimmerLights_Trigger
 14084 ;;		_setRF_DimmerLights
 14085 ;;		_setTxData
 14086 ;; This function is called by:
 14087 ;;		_DlyOff_Main
 14088 ;;		_setRFSW_Control
 14089 ;;		_setSw_Main
 14090 ;; This function uses a non-reentrant model
 14091 ;;
 14092                           
 14093                           
 14094                           ;psect for function _setDimmerLights_SwOn
 14095  1470                     _setDimmerLights_SwOn:	
 14096                           
 14097                           ;incstack = 0
 14098                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14099                           ;setDimmerLights_SwOn@sw stored from wreg
 14100  1470  0020               	movlb	0	; select bank0
 14101  1471  00E4               	movwf	setDimmerLights_SwOn@sw
 14102                           
 14103                           ;Dimmer_B1.c: 516: DimmerLightsPointSelect(sw);
 14104  1472  0864               	movf	setDimmerLights_SwOn@sw,w
 14105  1473  319C  24DD  3194   	fcall	_DimmerLightsPointSelect
 14106                           
 14107                           ;Dimmer_B1.c: 517: char idle = 0;
 14108  1476  0020               	movlb	0	; select bank0
 14109  1477  01E3               	clrf	setDimmerLights_SwOn@idle
 14110                           
 14111                           ;Dimmer_B1.c: 519: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
 14112  1478  319C  2450  3194   	fcall	_getAll_DimmerLights_AdjGO
 14113  147B  3A01               	xorlw	1
 14114  147C  3000               	movlw	0
 14115  147D  1903               	skipnz
 14116  147E  3001               	movlw	1
 14117  147F  0020               	movlb	0	; select bank0
 14118  1480  00E2               	movwf	??_setDimmerLights_SwOn
 14119  1481  0862               	movf	??_setDimmerLights_SwOn,w
 14120  1482  00E3               	movwf	setDimmerLights_SwOn@idle
 14121                           
 14122                           ;Dimmer_B1.c: 521: if (idle == 0) {
 14123  1483  08E3               	movf	setDimmerLights_SwOn@idle,f
 14124  1484  1D03               	skipz
 14125  1485  0008               	return
 14126                           
 14127                           ;Dimmer_B1.c: 522: DimmerLights->SwFlag = 1;
 14128  1486  0877               	movf	_DimmerLights,w
 14129  1487  3E09               	addlw	9
 14130  1488  0086               	movwf	6
 14131  1489  3001               	movlw	1	; select bank2/3
 14132  148A  0087               	movwf	7
 14133  148B  1701               	bsf	1,6
 14134                           
 14135                           ;Dimmer_B1.c: 523: setBuz(1, 100);
 14136  148C  3064               	movlw	100
 14137  148D  00A9               	movwf	setBuz@time
 14138  148E  3000               	movlw	0
 14139  148F  00AA               	movwf	setBuz@time+1
 14140  1490  3001               	movlw	1
 14141  1491  3197  274D  3194   	fcall	_setBuz
 14142                           
 14143                           ;Dimmer_B1.c: 524: if (DimmerLights->Status == 0) {
 14144  1494  0877               	movf	_DimmerLights,w
 14145  1495  0086               	movwf	6
 14146  1496  3001               	movlw	1	; select bank2/3
 14147  1497  0087               	movwf	7
 14148  1498  1A81               	btfsc	1,5
 14149  1499  2CB0               	goto	l8848
 14150                           
 14151                           ;Dimmer_B1.c: 525: DimmerLights->Status = 1;
 14152  149A  0877               	movf	_DimmerLights,w
 14153  149B  0086               	movwf	6
 14154  149C  3001               	movlw	1	; select bank2/3
 14155  149D  0087               	movwf	7
 14156  149E  1681               	bsf	1,5
 14157                           
 14158                           ;Dimmer_B1.c: 526: setDimmerLights_Trigger(sw, 1);
 14159  149F  0020               	movlb	0	; select bank0
 14160  14A0  01A2               	clrf	setDimmerLights_Trigger@command
 14161  14A1  0AA2               	incf	setDimmerLights_Trigger@command,f
 14162  14A2  0864               	movf	setDimmerLights_SwOn@sw,w
 14163  14A3  319E  2699  3194   	fcall	_setDimmerLights_Trigger
 14164                           
 14165                           ;Dimmer_B1.c: 527: setRF_DimmerLights(sw, 1);
 14166  14A6  0020               	movlb	0	; select bank0
 14167  14A7  01DD               	clrf	setRF_DimmerLights@on
 14168  14A8  0ADD               	incf	setRF_DimmerLights@on,f
 14169  14A9  0864               	movf	setDimmerLights_SwOn@sw,w
 14170  14AA  318A  22D2  3194   	fcall	_setRF_DimmerLights
 14171                           
 14172                           ;Dimmer_B1.c: 528: setTxData();
 14173  14AD  318E  2625         	fcall	_setTxData
 14174                           
 14175                           ;Dimmer_B1.c: 529: } else {
 14176  14AF  0008               	return
 14177  14B0                     l8848:	
 14178                           
 14179                           ;Dimmer_B1.c: 530: DimmerLights->Status = 0;
 14180  14B0  0877               	movf	_DimmerLights,w
 14181  14B1  0086               	movwf	6
 14182  14B2  3001               	movlw	1	; select bank2/3
 14183  14B3  0087               	movwf	7
 14184  14B4  1281               	bcf	1,5
 14185  14B5  0008               	return
 14186  14B6                     __end_of_setDimmerLights_SwOn:	
 14187                           
 14188                           	psect	text87
 14189  174D                     __ptext87:	
 14190 ;; *************** function _setBuz *****************
 14191 ;; Defined at:
 14192 ;;		line 22 in file "../src/Buzzer_B1.c"
 14193 ;; Parameters:    Size  Location     Type
 14194 ;;  count           1    wreg     unsigned char 
 14195 ;;  time            2    9[BANK0 ] int 
 14196 ;; Auto vars:     Size  Location     Type
 14197 ;;  count           1   12[BANK0 ] unsigned char 
 14198 ;; Return value:  Size  Location     Type
 14199 ;;		None               void
 14200 ;; Registers used:
 14201 ;;		wreg, status,2, status,0, pclath, cstack
 14202 ;; Tracked objects:
 14203 ;;		On entry : 0/0
 14204 ;;		On exit  : 0/0
 14205 ;;		Unchanged: 0/0
 14206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14207 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14209 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14210 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14211 ;;Total ram usage:        4 bytes
 14212 ;; Hardware stack levels used:    1
 14213 ;; Hardware stack levels required when called:    6
 14214 ;; This function calls:
 14215 ;;		___awdiv
 14216 ;; This function is called by:
 14217 ;;		_setDimmerLights_Main
 14218 ;;		_setDimmerLights_SwOn
 14219 ;;		_my_MainTimer
 14220 ;;		_setMain_Exception
 14221 ;;		_setLog_Code
 14222 ;;		_setControl_Lights_Table
 14223 ;;		_setSw_Main
 14224 ;; This function uses a non-reentrant model
 14225 ;;
 14226                           
 14227                           
 14228                           ;psect for function _setBuz
 14229  174D                     _setBuz:	
 14230                           
 14231                           ;incstack = 0
 14232                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 14233                           ;setBuz@count stored from wreg
 14234  174D  0020               	movlb	0	; select bank0
 14235  174E  00AC               	movwf	setBuz@count
 14236                           
 14237                           ;Buzzer_B1.c: 23: time /= 10;
 14238  174F  300A               	movlw	10
 14239  1750  00A0               	movwf	___awdiv@divisor
 14240  1751  3000               	movlw	0
 14241  1752  00A1               	movwf	___awdiv@divisor+1
 14242  1753  082A               	movf	setBuz@time+1,w
 14243  1754  01A3               	clrf	___awdiv@dividend+1
 14244  1755  07A3               	addwf	___awdiv@dividend+1,f
 14245  1756  0829               	movf	setBuz@time,w
 14246  1757  01A2               	clrf	___awdiv@dividend
 14247  1758  07A2               	addwf	___awdiv@dividend,f
 14248  1759  3195  25F2  3197   	fcall	___awdiv
 14249  175C  0020               	movlb	0	; select bank0
 14250  175D  0821               	movf	?___awdiv+1,w
 14251  175E  01AA               	clrf	setBuz@time+1
 14252  175F  07AA               	addwf	setBuz@time+1,f
 14253  1760  0820               	movf	?___awdiv,w
 14254  1761  01A9               	clrf	setBuz@time
 14255  1762  07A9               	addwf	setBuz@time,f
 14256                           
 14257                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 14258  1763  0021               	movlb	1	; select bank1
 14259  1764  1C30               	btfss	_Buz1^(0+128),0
 14260  1765  0008               	return
 14261                           
 14262                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 14263  1766  18B0               	btfsc	_Buz1^(0+128),1
 14264  1767  2F7E               	goto	l96
 14265                           
 14266                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 14267  1768  14B0               	bsf	_Buz1^(0+128),1
 14268                           
 14269                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 14270  1769  01B1               	clrf	(_Buz1^(0+128)+1)
 14271  176A  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 14272                           
 14273                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 14274  176B  0020               	movlb	0	; select bank0
 14275  176C  082C               	movf	setBuz@count,w
 14276  176D  00AB               	movwf	??_setBuz
 14277  176E  082B               	movf	??_setBuz,w
 14278  176F  0021               	movlb	1	; select bank1
 14279  1770  00B3               	movwf	(_Buz1^(0+128)+3)
 14280                           
 14281                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 14282  1771  0020               	movlb	0	; select bank0
 14283  1772  082A               	movf	setBuz@time+1,w
 14284  1773  0021               	movlb	1	; select bank1
 14285  1774  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 14286  1775  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 14287  1776  0020               	movlb	0	; select bank0
 14288  1777  0829               	movf	setBuz@time,w
 14289  1778  0021               	movlb	1	; select bank1
 14290  1779  01B6               	clrf	(_Buz1^(0+128)+6)
 14291  177A  07B6               	addwf	(_Buz1^(0+128)+6),f
 14292                           
 14293                           ;Buzzer_B1.c: 30: RB3 = 1;
 14294  177B  0020               	movlb	0	; select bank0
 14295  177C  158D               	bsf	13,3	;volatile
 14296                           
 14297                           ;Buzzer_B1.c: 31: } else {
 14298  177D  0008               	return
 14299  177E                     l96:	
 14300                           
 14301                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 14302  177E  19B0               	btfsc	_Buz1^(0+128),3
 14303  177F  2F92               	goto	l98
 14304                           
 14305                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 14306  1780  15B0               	bsf	_Buz1^(0+128),3
 14307                           
 14308                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 14309  1781  0020               	movlb	0	; select bank0
 14310  1782  082C               	movf	setBuz@count,w
 14311  1783  00AB               	movwf	??_setBuz
 14312  1784  082B               	movf	??_setBuz,w
 14313  1785  0021               	movlb	1	; select bank1
 14314  1786  00B4               	movwf	(_Buz1^(0+128)+4)
 14315                           
 14316                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 14317  1787  0020               	movlb	0	; select bank0
 14318  1788  082A               	movf	setBuz@time+1,w
 14319  1789  0021               	movlb	1	; select bank1
 14320  178A  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 14321  178B  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 14322  178C  0020               	movlb	0	; select bank0
 14323  178D  0829               	movf	setBuz@time,w
 14324  178E  0021               	movlb	1	; select bank1
 14325  178F  01B8               	clrf	(_Buz1^(0+128)+8)
 14326  1790  07B8               	addwf	(_Buz1^(0+128)+8),f
 14327                           
 14328                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 14329  1791  0008               	return
 14330  1792                     l98:	
 14331  1792  1A30               	btfsc	_Buz1^(0+128),4
 14332  1793  0008               	return
 14333                           
 14334                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 14335  1794  1630               	bsf	_Buz1^(0+128),4
 14336                           
 14337                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 14338  1795  0020               	movlb	0	; select bank0
 14339  1796  082C               	movf	setBuz@count,w
 14340  1797  00AB               	movwf	??_setBuz
 14341  1798  082B               	movf	??_setBuz,w
 14342  1799  0021               	movlb	1	; select bank1
 14343  179A  00B5               	movwf	(_Buz1^(0+128)+5)
 14344                           
 14345                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 14346  179B  0020               	movlb	0	; select bank0
 14347  179C  082A               	movf	setBuz@time+1,w
 14348  179D  0021               	movlb	1	; select bank1
 14349  179E  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 14350  179F  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 14351  17A0  0020               	movlb	0	; select bank0
 14352  17A1  0829               	movf	setBuz@time,w
 14353  17A2  0021               	movlb	1	; select bank1
 14354  17A3  01BA               	clrf	(_Buz1^(0+128)+10)
 14355  17A4  07BA               	addwf	(_Buz1^(0+128)+10),f
 14356  17A5  0008               	return
 14357  17A6                     __end_of_setBuz:	
 14358                           
 14359                           	psect	text88
 14360  15F2                     __ptext88:	
 14361 ;; *************** function ___awdiv *****************
 14362 ;; Defined at:
 14363 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14364 ;; Parameters:    Size  Location     Type
 14365 ;;  divisor         2    0[BANK0 ] int 
 14366 ;;  dividend        2    2[BANK0 ] int 
 14367 ;; Auto vars:     Size  Location     Type
 14368 ;;  quotient        2    7[BANK0 ] int 
 14369 ;;  sign            1    6[BANK0 ] unsigned char 
 14370 ;;  counter         1    5[BANK0 ] unsigned char 
 14371 ;; Return value:  Size  Location     Type
 14372 ;;                  2    0[BANK0 ] int 
 14373 ;; Registers used:
 14374 ;;		wreg, status,2, status,0
 14375 ;; Tracked objects:
 14376 ;;		On entry : 0/0
 14377 ;;		On exit  : 0/0
 14378 ;;		Unchanged: 0/0
 14379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14381 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14382 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14383 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14384 ;;Total ram usage:        9 bytes
 14385 ;; Hardware stack levels used:    1
 14386 ;; Hardware stack levels required when called:    5
 14387 ;; This function calls:
 14388 ;;		Nothing
 14389 ;; This function is called by:
 14390 ;;		_setBuz
 14391 ;; This function uses a non-reentrant model
 14392 ;;
 14393                           
 14394                           
 14395                           ;psect for function ___awdiv
 14396  15F2                     ___awdiv:	
 14397                           
 14398                           ;incstack = 0
 14399                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14400  15F2  0020               	movlb	0	; select bank0
 14401  15F3  01A6               	clrf	___awdiv@sign
 14402  15F4  1FA1               	btfss	___awdiv@divisor+1,7
 14403  15F5  2DFD               	goto	l8642
 14404  15F6  09A0               	comf	___awdiv@divisor,f
 14405  15F7  09A1               	comf	___awdiv@divisor+1,f
 14406  15F8  0AA0               	incf	___awdiv@divisor,f
 14407  15F9  1903               	skipnz
 14408  15FA  0AA1               	incf	___awdiv@divisor+1,f
 14409  15FB  01A6               	clrf	___awdiv@sign
 14410  15FC  0AA6               	incf	___awdiv@sign,f
 14411  15FD                     l8642:	
 14412  15FD  1FA3               	btfss	___awdiv@dividend+1,7
 14413  15FE  2E08               	goto	l8648
 14414  15FF  09A2               	comf	___awdiv@dividend,f
 14415  1600  09A3               	comf	___awdiv@dividend+1,f
 14416  1601  0AA2               	incf	___awdiv@dividend,f
 14417  1602  1903               	skipnz
 14418  1603  0AA3               	incf	___awdiv@dividend+1,f
 14419  1604  3001               	movlw	1
 14420  1605  00A4               	movwf	??___awdiv
 14421  1606  0824               	movf	??___awdiv,w
 14422  1607  06A6               	xorwf	___awdiv@sign,f
 14423  1608                     l8648:	
 14424  1608  01A7               	clrf	___awdiv@quotient
 14425  1609  01A8               	clrf	___awdiv@quotient+1
 14426  160A  0821               	movf	___awdiv@divisor+1,w
 14427  160B  0420               	iorwf	___awdiv@divisor,w
 14428  160C  1903               	skipnz
 14429  160D  2E37               	goto	l8670
 14430  160E  01A5               	clrf	___awdiv@counter
 14431  160F  0AA5               	incf	___awdiv@counter,f
 14432  1610                     l8658:	
 14433  1610  1BA1               	btfsc	___awdiv@divisor+1,7
 14434  1611  2E1C               	goto	l8660
 14435  1612  3001               	movlw	1
 14436  1613                     u9235:	
 14437  1613  35A0               	lslf	___awdiv@divisor,f
 14438  1614  0DA1               	rlf	___awdiv@divisor+1,f
 14439  1615  0B89               	decfsz	9,f
 14440  1616  2E13               	goto	u9235
 14441  1617  3001               	movlw	1
 14442  1618  00A4               	movwf	??___awdiv
 14443  1619  0824               	movf	??___awdiv,w
 14444  161A  07A5               	addwf	___awdiv@counter,f
 14445  161B  2E10               	goto	l8658
 14446  161C                     l8660:	
 14447  161C  3001               	movlw	1
 14448  161D                     u9255:	
 14449  161D  35A7               	lslf	___awdiv@quotient,f
 14450  161E  0DA8               	rlf	___awdiv@quotient+1,f
 14451  161F  0B89               	decfsz	9,f
 14452  1620  2E1D               	goto	u9255
 14453  1621  0821               	movf	___awdiv@divisor+1,w
 14454  1622  0223               	subwf	___awdiv@dividend+1,w
 14455  1623  1D03               	skipz
 14456  1624  2E27               	goto	u9265
 14457  1625  0820               	movf	___awdiv@divisor,w
 14458  1626  0222               	subwf	___awdiv@dividend,w
 14459  1627                     u9265:	
 14460  1627  1C03               	skipc
 14461  1628  2E2E               	goto	l8666
 14462  1629  0820               	movf	___awdiv@divisor,w
 14463  162A  02A2               	subwf	___awdiv@dividend,f
 14464  162B  0821               	movf	___awdiv@divisor+1,w
 14465  162C  3BA3               	subwfb	___awdiv@dividend+1,f
 14466  162D  1427               	bsf	___awdiv@quotient,0
 14467  162E                     l8666:	
 14468  162E  3001               	movlw	1
 14469  162F                     u9275:	
 14470  162F  36A1               	lsrf	___awdiv@divisor+1,f
 14471  1630  0CA0               	rrf	___awdiv@divisor,f
 14472  1631  0B89               	decfsz	9,f
 14473  1632  2E2F               	goto	u9275
 14474  1633  3001               	movlw	1
 14475  1634  02A5               	subwf	___awdiv@counter,f
 14476  1635  1D03               	btfss	3,2
 14477  1636  2E1C               	goto	l8660
 14478  1637                     l8670:	
 14479  1637  0826               	movf	___awdiv@sign,w
 14480  1638  1903               	btfsc	3,2
 14481  1639  2E3F               	goto	l8674
 14482  163A  09A7               	comf	___awdiv@quotient,f
 14483  163B  09A8               	comf	___awdiv@quotient+1,f
 14484  163C  0AA7               	incf	___awdiv@quotient,f
 14485  163D  1903               	skipnz
 14486  163E  0AA8               	incf	___awdiv@quotient+1,f
 14487  163F                     l8674:	
 14488  163F  0828               	movf	___awdiv@quotient+1,w
 14489  1640  01A1               	clrf	?___awdiv+1
 14490  1641  07A1               	addwf	?___awdiv+1,f
 14491  1642  0827               	movf	___awdiv@quotient,w
 14492  1643  01A0               	clrf	?___awdiv
 14493  1644  07A0               	addwf	?___awdiv,f
 14494  1645  0008               	return
 14495  1646                     __end_of___awdiv:	
 14496                           
 14497                           	psect	text89
 14498  1C50                     __ptext89:	
 14499 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 14500 ;; Defined at:
 14501 ;;		line 500 in file "../src/Dimmer_B1.c"
 14502 ;; Parameters:    Size  Location     Type
 14503 ;;		None
 14504 ;; Auto vars:     Size  Location     Type
 14505 ;;  adjgo           1    1[BANK0 ] unsigned char 
 14506 ;; Return value:  Size  Location     Type
 14507 ;;                  1    wreg      unsigned char 
 14508 ;; Registers used:
 14509 ;;		wreg, status,2
 14510 ;; Tracked objects:
 14511 ;;		On entry : 0/0
 14512 ;;		On exit  : 0/0
 14513 ;;		Unchanged: 0/0
 14514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14516 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14517 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;Total ram usage:        3 bytes
 14520 ;; Hardware stack levels used:    1
 14521 ;; Hardware stack levels required when called:    5
 14522 ;; This function calls:
 14523 ;;		Nothing
 14524 ;; This function is called by:
 14525 ;;		_setDimmerLights_SwOn
 14526 ;;		_setDimmerLights_AdjControl
 14527 ;;		_Load_Main
 14528 ;; This function uses a non-reentrant model
 14529 ;;
 14530                           
 14531                           
 14532                           ;psect for function _getAll_DimmerLights_AdjGO
 14533  1C50                     _getAll_DimmerLights_AdjGO:	
 14534                           
 14535                           ;Dimmer_B1.c: 501: char adjgo = 0;
 14536                           
 14537                           ;incstack = 0
 14538                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 14539  1C50  0020               	movlb	0	; select bank0
 14540  1C51  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 14541                           
 14542                           ;Dimmer_B1.c: 506: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 14543  1C52  01A2               	clrf	_getAll_DimmerLights_AdjGO$2558
 14544  1C53  0AA2               	incf	_getAll_DimmerLights_AdjGO$2558,f
 14545  1C54  0023               	movlb	3	; select bank3
 14546  1C55  1DC6               	btfss	(_DimmerLights1^(0+384)+8),3
 14547  1C56  19D5               	btfsc	(_DimmerLights2^(0+384)+8),3
 14548  1C57  2C5A               	goto	l8760
 14549  1C58  0020               	movlb	0	; select bank0
 14550  1C59  01A2               	clrf	_getAll_DimmerLights_AdjGO$2558
 14551  1C5A                     l8760:	
 14552  1C5A  0020               	movlb	0	; select bank0
 14553  1C5B  0822               	movf	_getAll_DimmerLights_AdjGO$2558,w
 14554  1C5C  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 14555  1C5D  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 14556  1C5E  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 14557                           
 14558                           ;Dimmer_B1.c: 511: return adjgo;
 14559  1C5F  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 14560  1C60  0008               	return
 14561  1C61                     __end_of_getAll_DimmerLights_AdjGO:	
 14562                           
 14563                           	psect	text90
 14564  0886                     __ptext90:	
 14565 ;; *************** function _setDimmerLights_SwOff *****************
 14566 ;; Defined at:
 14567 ;;		line 536 in file "../src/Dimmer_B1.c"
 14568 ;; Parameters:    Size  Location     Type
 14569 ;;  sw              1    wreg     unsigned char 
 14570 ;; Auto vars:     Size  Location     Type
 14571 ;;  sw              1   69[BANK0 ] unsigned char 
 14572 ;;  command         1   68[BANK0 ] unsigned char 
 14573 ;; Return value:  Size  Location     Type
 14574 ;;		None               void
 14575 ;; Registers used:
 14576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14577 ;; Tracked objects:
 14578 ;;		On entry : 0/0
 14579 ;;		On exit  : 0/0
 14580 ;;		Unchanged: 0/0
 14581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14583 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14584 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14585 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14586 ;;Total ram usage:        4 bytes
 14587 ;; Hardware stack levels used:    1
 14588 ;; Hardware stack levels required when called:    9
 14589 ;; This function calls:
 14590 ;;		_DimmerLightsPointSelect
 14591 ;;		_setDelayOff_GO
 14592 ;;		_setDimmerLights_Trigger
 14593 ;;		_setDimmerLights_TriggerAdj
 14594 ;;		_setRF_DimmerLights
 14595 ;;		_setTxData
 14596 ;; This function is called by:
 14597 ;;		_DlyOff_Main
 14598 ;;		_setDimmerLights_ErrorClose
 14599 ;;		_setRFSW_Control
 14600 ;;		_setSw_Main
 14601 ;; This function uses a non-reentrant model
 14602 ;;
 14603                           
 14604                           
 14605                           ;psect for function _setDimmerLights_SwOff
 14606  0886                     _setDimmerLights_SwOff:	
 14607                           
 14608                           ;incstack = 0
 14609                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14610                           ;setDimmerLights_SwOff@sw stored from wreg
 14611  0886  0020               	movlb	0	; select bank0
 14612  0887  00E5               	movwf	setDimmerLights_SwOff@sw
 14613                           
 14614                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(sw);
 14615  0888  0865               	movf	setDimmerLights_SwOff@sw,w
 14616  0889  319C  24DD  3188   	fcall	_DimmerLightsPointSelect
 14617                           
 14618                           ;Dimmer_B1.c: 538: char command = DimmerLights->Status == 1 ? 1 : 0;
 14619  088C  0877               	movf	_DimmerLights,w
 14620  088D  0086               	movwf	6
 14621  088E  3001               	movlw	1	; select bank2/3
 14622  088F  0087               	movwf	7
 14623  0890  3000               	movlw	0
 14624  0891  1A81               	btfsc	1,5
 14625  0892  3001               	movlw	1
 14626  0893  0020               	movlb	0	; select bank0
 14627  0894  00E4               	movwf	setDimmerLights_SwOff@command
 14628                           
 14629                           ;Dimmer_B1.c: 539: if (DimmerLights->SwFlag == 1) {
 14630  0895  0877               	movf	_DimmerLights,w
 14631  0896  3E09               	addlw	9
 14632  0897  0086               	movwf	6
 14633  0898  3001               	movlw	1	; select bank2/3
 14634  0899  0087               	movwf	7
 14635  089A  1F01               	btfss	1,6
 14636  089B  0008               	return
 14637                           
 14638                           ;Dimmer_B1.c: 540: DimmerLights->SwFlag = 0;
 14639  089C  0877               	movf	_DimmerLights,w
 14640  089D  3E09               	addlw	9
 14641  089E  0086               	movwf	6
 14642  089F  3001               	movlw	1	; select bank2/3
 14643  08A0  0087               	movwf	7
 14644  08A1  1301               	bcf	1,6
 14645                           
 14646                           ;Dimmer_B1.c: 541: if (DimmerLights->Status == 1) {
 14647  08A2  0877               	movf	_DimmerLights,w
 14648  08A3  0086               	movwf	6
 14649  08A4  3001               	movlw	1	; select bank2/3
 14650  08A5  0087               	movwf	7
 14651  08A6  1E81               	btfss	1,5
 14652  08A7  28CD               	goto	l8874
 14653                           
 14654                           ;Dimmer_B1.c: 542: if (DimmerLights->SwAdj == 1) {
 14655  08A8  0877               	movf	_DimmerLights,w
 14656  08A9  3E09               	addlw	9
 14657  08AA  0086               	movwf	6
 14658  08AB  3001               	movlw	1	; select bank2/3
 14659  08AC  0087               	movwf	7
 14660  08AD  1F81               	btfss	1,7
 14661  08AE  28D9               	goto	l835
 14662                           
 14663                           ;Dimmer_B1.c: 543: DimmerLights->SwAdj = 0;
 14664  08AF  0877               	movf	_DimmerLights,w
 14665  08B0  3E09               	addlw	9
 14666  08B1  0086               	movwf	6
 14667  08B2  3001               	movlw	1	; select bank2/3
 14668  08B3  0087               	movwf	7
 14669  08B4  1381               	bcf	1,7
 14670                           
 14671                           ;Dimmer_B1.c: 544: setDimmerLights_TriggerAdj(sw, 0);
 14672  08B5  01A2               	clrf	setDimmerLights_TriggerAdj@command
 14673  08B6  0865               	movf	setDimmerLights_SwOff@sw,w
 14674  08B7  319E  26F5  3188   	fcall	_setDimmerLights_TriggerAdj
 14675                           
 14676                           ;Dimmer_B1.c: 545: product->Data[17]=product->Data[26 + sw];
 14677  08BA  0020               	movlb	0	; select bank0
 14678  08BB  0865               	movf	setDimmerLights_SwOff@sw,w
 14679  08BC  3E1A               	addlw	26
 14680  08BD  077B               	addwf	_product,w
 14681  08BE  00E2               	movwf	??_setDimmerLights_SwOff
 14682  08BF  0862               	movf	??_setDimmerLights_SwOff,w
 14683  08C0  0086               	movwf	6
 14684  08C1  3002               	movlw	2	; select bank4/5
 14685  08C2  0087               	movwf	7
 14686  08C3  0801               	movf	1,w
 14687  08C4  00E3               	movwf	??_setDimmerLights_SwOff+1
 14688  08C5  087B               	movf	_product,w
 14689  08C6  3E11               	addlw	17
 14690  08C7  0086               	movwf	6
 14691  08C8  3002               	movlw	2	; select bank4/5
 14692  08C9  0087               	movwf	7
 14693  08CA  0863               	movf	??_setDimmerLights_SwOff+1,w
 14694  08CB  0081               	movwf	1
 14695                           
 14696                           ;Dimmer_B1.c: 548: }
 14697                           ;Dimmer_B1.c: 549: } else {
 14698  08CC  28D9               	goto	l835
 14699  08CD                     l8874:	
 14700                           
 14701                           ;Dimmer_B1.c: 550: setDimmerLights_Trigger(sw, 0);
 14702  08CD  01A2               	clrf	setDimmerLights_Trigger@command
 14703  08CE  0865               	movf	setDimmerLights_SwOff@sw,w
 14704  08CF  319E  2699  3188   	fcall	_setDimmerLights_Trigger
 14705                           
 14706                           ;Dimmer_B1.c: 551: setDelayOff_GO(sw, 0, 0);
 14707  08D2  0020               	movlb	0	; select bank0
 14708  08D3  01AA               	clrf	setDelayOff_GO@command
 14709  08D4  01AB               	clrf	setDelayOff_GO@value
 14710  08D5  0865               	movf	setDimmerLights_SwOff@sw,w
 14711  08D6  3188  20E5  3188   	fcall	_setDelayOff_GO
 14712  08D9                     l835:	
 14713                           
 14714                           ;Dimmer_B1.c: 554: }
 14715                           ;Dimmer_B1.c: 555: setRF_DimmerLights(sw, command);
 14716  08D9  0020               	movlb	0	; select bank0
 14717  08DA  0864               	movf	setDimmerLights_SwOff@command,w
 14718  08DB  00E2               	movwf	??_setDimmerLights_SwOff
 14719  08DC  0862               	movf	??_setDimmerLights_SwOff,w
 14720  08DD  00DD               	movwf	setRF_DimmerLights@on
 14721  08DE  0865               	movf	setDimmerLights_SwOff@sw,w
 14722  08DF  318A  22D2  3188   	fcall	_setRF_DimmerLights
 14723                           
 14724                           ;Dimmer_B1.c: 556: setTxData();
 14725  08E2  318E  2625         	fcall	_setTxData
 14726  08E4  0008               	return
 14727  08E5                     __end_of_setDimmerLights_SwOff:	
 14728                           
 14729                           	psect	text91
 14730  0E25                     __ptext91:	
 14731 ;; *************** function _setTxData *****************
 14732 ;; Defined at:
 14733 ;;		line 204 in file "../src/RF_Control_B1.c"
 14734 ;; Parameters:    Size  Location     Type
 14735 ;;		None
 14736 ;; Auto vars:     Size  Location     Type
 14737 ;;  i               1    0        unsigned char 
 14738 ;; Return value:  Size  Location     Type
 14739 ;;		None               void
 14740 ;; Registers used:
 14741 ;;		wreg, fsr1l, fsr1h
 14742 ;; Tracked objects:
 14743 ;;		On entry : 0/0
 14744 ;;		On exit  : 0/0
 14745 ;;		Unchanged: 0/0
 14746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14750 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14751 ;;Total ram usage:        1 bytes
 14752 ;; Hardware stack levels used:    1
 14753 ;; Hardware stack levels required when called:    5
 14754 ;; This function calls:
 14755 ;;		Nothing
 14756 ;; This function is called by:
 14757 ;;		_setDimmerLights_SwOn
 14758 ;;		_setDimmerLights_SwOff
 14759 ;;		_setDimmerLights_Adj
 14760 ;;		_setControl_Lights_Table
 14761 ;;		_setRFSW_AdjControl
 14762 ;; This function uses a non-reentrant model
 14763 ;;
 14764                           
 14765                           
 14766                           ;psect for function _setTxData
 14767  0E25                     _setTxData:	
 14768                           
 14769                           ;RF_Control_B1.c: 205: char i;
 14770                           ;RF_Control_B1.c: 206: if (RF1.Enable == 1) {
 14771                           
 14772                           ;incstack = 0
 14773                           ; Regs used in _setTxData: [wregfsr1]
 14774  0E25  0021               	movlb	1	; select bank1
 14775  0E26  1C3C               	btfss	_RF1^(0+128),0
 14776  0E27  0008               	return
 14777                           
 14778                           ;RF_Control_B1.c: 208: RF1.TransceiveGO = 1;
 14779  0E28  153C               	bsf	_RF1^(0+128),2
 14780                           
 14781                           ;RF_Control_B1.c: 209: RF1.RunTime = 20;
 14782  0E29  3014               	movlw	20
 14783  0E2A  00C3               	movwf	(_RF1^(0+128)+7)
 14784  0E2B  3000               	movlw	0
 14785  0E2C  00C4               	movwf	(_RF1^(0+128)+8)
 14786                           
 14787                           ;RF_Control_B1.c: 218: RF_Data[0] = 0x63;
 14788  0E2D  3063               	movlw	99
 14789  0E2E  0020               	movlb	0	; select bank0
 14790  0E2F  00A0               	movwf	??_setTxData
 14791  0E30  0820               	movf	??_setTxData,w
 14792  0E31  0023               	movlb	3	; select bank3
 14793  0E32  00A0               	movwf	_RF_Data^(0+384)
 14794                           
 14795                           ;RF_Control_B1.c: 219: RF_Data[1] = 0x02;
 14796  0E33  3002               	movlw	2
 14797  0E34  0020               	movlb	0	; select bank0
 14798  0E35  00A0               	movwf	??_setTxData
 14799  0E36  0820               	movf	??_setTxData,w
 14800  0E37  0023               	movlb	3	; select bank3
 14801  0E38  00A1               	movwf	(_RF_Data^(0+384)+1)
 14802                           
 14803                           ;RF_Control_B1.c: 220: RF_Data[2] = product->Data[2];
 14804  0E39  087B               	movf	_product,w
 14805  0E3A  0086               	movwf	6
 14806  0E3B  3002               	movlw	2	; select bank4/5
 14807  0E3C  0087               	movwf	7
 14808  0E3D  3002               	movlw	2	; select bank4/5
 14809  0E3E  3F42               	moviw [2]fsr1
 14810  0E3F  00A2               	movwf	(_RF_Data^(0+384)+2)
 14811                           
 14812                           ;RF_Control_B1.c: 221: RF_Data[3] = product->Data[3];
 14813  0E40  087B               	movf	_product,w
 14814  0E41  0086               	movwf	6
 14815  0E42  3002               	movlw	2	; select bank4/5
 14816  0E43  0087               	movwf	7
 14817  0E44  3002               	movlw	2	; select bank4/5
 14818  0E45  3F43               	moviw [3]fsr1
 14819  0E46  00A3               	movwf	(_RF_Data^(0+384)+3)
 14820                           
 14821                           ;RF_Control_B1.c: 222: RF_Data[4] = product->Data[4];
 14822  0E47  087B               	movf	_product,w
 14823  0E48  0086               	movwf	6
 14824  0E49  3002               	movlw	2	; select bank4/5
 14825  0E4A  0087               	movwf	7
 14826  0E4B  3002               	movlw	2	; select bank4/5
 14827  0E4C  3F44               	moviw [4]fsr1
 14828  0E4D  00A4               	movwf	(_RF_Data^(0+384)+4)
 14829                           
 14830                           ;RF_Control_B1.c: 223: RF_Data[5] = product->Data[5];
 14831  0E4E  087B               	movf	_product,w
 14832  0E4F  0086               	movwf	6
 14833  0E50  3002               	movlw	2	; select bank4/5
 14834  0E51  0087               	movwf	7
 14835  0E52  3002               	movlw	2	; select bank4/5
 14836  0E53  3F45               	moviw [5]fsr1
 14837  0E54  00A5               	movwf	(_RF_Data^(0+384)+5)
 14838                           
 14839                           ;RF_Control_B1.c: 224: RF_Data[6] = product->Data[6];
 14840  0E55  087B               	movf	_product,w
 14841  0E56  0086               	movwf	6
 14842  0E57  3002               	movlw	2	; select bank4/5
 14843  0E58  0087               	movwf	7
 14844  0E59  3002               	movlw	2	; select bank4/5
 14845  0E5A  3F46               	moviw [6]fsr1
 14846  0E5B  00A6               	movwf	(_RF_Data^(0+384)+6)
 14847                           
 14848                           ;RF_Control_B1.c: 225: RF_Data[7] = product->Data[7];
 14849  0E5C  087B               	movf	_product,w
 14850  0E5D  0086               	movwf	6
 14851  0E5E  3002               	movlw	2	; select bank4/5
 14852  0E5F  0087               	movwf	7
 14853  0E60  3002               	movlw	2	; select bank4/5
 14854  0E61  3F47               	moviw [7]fsr1
 14855  0E62  00A7               	movwf	(_RF_Data^(0+384)+7)
 14856                           
 14857                           ;RF_Control_B1.c: 226: RF_Data[8] = product->Data[8];
 14858  0E63  087B               	movf	_product,w
 14859  0E64  0086               	movwf	6
 14860  0E65  3002               	movlw	2	; select bank4/5
 14861  0E66  0087               	movwf	7
 14862  0E67  3002               	movlw	2	; select bank4/5
 14863  0E68  3F48               	moviw [8]fsr1
 14864  0E69  00A8               	movwf	(_RF_Data^(0+384)+8)
 14865                           
 14866                           ;RF_Control_B1.c: 227: RF_Data[9] = product->Data[9];
 14867  0E6A  087B               	movf	_product,w
 14868  0E6B  0086               	movwf	6
 14869  0E6C  3002               	movlw	2	; select bank4/5
 14870  0E6D  0087               	movwf	7
 14871  0E6E  3002               	movlw	2	; select bank4/5
 14872  0E6F  3F49               	moviw [9]fsr1
 14873  0E70  00A9               	movwf	(_RF_Data^(0+384)+9)
 14874                           
 14875                           ;RF_Control_B1.c: 228: RF_Data[10] = product->Data[10];
 14876  0E71  087B               	movf	_product,w
 14877  0E72  0086               	movwf	6
 14878  0E73  3002               	movlw	2	; select bank4/5
 14879  0E74  0087               	movwf	7
 14880  0E75  3002               	movlw	2	; select bank4/5
 14881  0E76  3F4A               	moviw [10]fsr1
 14882  0E77  00AA               	movwf	(_RF_Data^(0+384)+10)
 14883                           
 14884                           ;RF_Control_B1.c: 229: RF_Data[11] = product->Data[11];
 14885  0E78  087B               	movf	_product,w
 14886  0E79  0086               	movwf	6
 14887  0E7A  3002               	movlw	2	; select bank4/5
 14888  0E7B  0087               	movwf	7
 14889  0E7C  3002               	movlw	2	; select bank4/5
 14890  0E7D  3F4B               	moviw [11]fsr1
 14891  0E7E  00AB               	movwf	(_RF_Data^(0+384)+11)
 14892                           
 14893                           ;RF_Control_B1.c: 230: RF_Data[12] = product->Data[12];
 14894  0E7F  087B               	movf	_product,w
 14895  0E80  0086               	movwf	6
 14896  0E81  3002               	movlw	2	; select bank4/5
 14897  0E82  0087               	movwf	7
 14898  0E83  3002               	movlw	2	; select bank4/5
 14899  0E84  3F4C               	moviw [12]fsr1
 14900  0E85  00AC               	movwf	(_RF_Data^(0+384)+12)
 14901                           
 14902                           ;RF_Control_B1.c: 231: RF_Data[13] = product->Data[13];
 14903  0E86  087B               	movf	_product,w
 14904  0E87  0086               	movwf	6
 14905  0E88  3002               	movlw	2	; select bank4/5
 14906  0E89  0087               	movwf	7
 14907  0E8A  3002               	movlw	2	; select bank4/5
 14908  0E8B  3F4D               	moviw [13]fsr1
 14909  0E8C  00AD               	movwf	(_RF_Data^(0+384)+13)
 14910                           
 14911                           ;RF_Control_B1.c: 232: RF_Data[14] = product->Data[14];
 14912  0E8D  087B               	movf	_product,w
 14913  0E8E  0086               	movwf	6
 14914  0E8F  3002               	movlw	2	; select bank4/5
 14915  0E90  0087               	movwf	7
 14916  0E91  3002               	movlw	2	; select bank4/5
 14917  0E92  3F4E               	moviw [14]fsr1
 14918  0E93  00AE               	movwf	(_RF_Data^(0+384)+14)
 14919                           
 14920                           ;RF_Control_B1.c: 233: RF_Data[15] = product->Data[15];
 14921  0E94  087B               	movf	_product,w
 14922  0E95  0086               	movwf	6
 14923  0E96  3002               	movlw	2	; select bank4/5
 14924  0E97  0087               	movwf	7
 14925  0E98  3002               	movlw	2	; select bank4/5
 14926  0E99  3F4F               	moviw [15]fsr1
 14927  0E9A  00AF               	movwf	(_RF_Data^(0+384)+15)
 14928                           
 14929                           ;RF_Control_B1.c: 234: RF_Data[16] = product->Data[16];
 14930  0E9B  087B               	movf	_product,w
 14931  0E9C  0086               	movwf	6
 14932  0E9D  3002               	movlw	2	; select bank4/5
 14933  0E9E  0087               	movwf	7
 14934  0E9F  3002               	movlw	2	; select bank4/5
 14935  0EA0  3F50               	moviw [16]fsr1
 14936  0EA1  00B0               	movwf	(_RF_Data^(0+384)+16)
 14937                           
 14938                           ;RF_Control_B1.c: 235: RF_Data[17] = product->Data[17];
 14939  0EA2  087B               	movf	_product,w
 14940  0EA3  0086               	movwf	6
 14941  0EA4  3002               	movlw	2	; select bank4/5
 14942  0EA5  0087               	movwf	7
 14943  0EA6  3002               	movlw	2	; select bank4/5
 14944  0EA7  3F51               	moviw [17]fsr1
 14945  0EA8  00B1               	movwf	(_RF_Data^(0+384)+17)
 14946                           
 14947                           ;RF_Control_B1.c: 236: RF_Data[18] = product->Data[18];
 14948  0EA9  087B               	movf	_product,w
 14949  0EAA  0086               	movwf	6
 14950  0EAB  3002               	movlw	2	; select bank4/5
 14951  0EAC  0087               	movwf	7
 14952  0EAD  3002               	movlw	2	; select bank4/5
 14953  0EAE  3F52               	moviw [18]fsr1
 14954  0EAF  00B2               	movwf	(_RF_Data^(0+384)+18)
 14955                           
 14956                           ;RF_Control_B1.c: 237: RF_Data[19] = product->Data[19];
 14957  0EB0  087B               	movf	_product,w
 14958  0EB1  0086               	movwf	6
 14959  0EB2  3002               	movlw	2	; select bank4/5
 14960  0EB3  0087               	movwf	7
 14961  0EB4  3002               	movlw	2	; select bank4/5
 14962  0EB5  3F53               	moviw [19]fsr1
 14963  0EB6  00B3               	movwf	(_RF_Data^(0+384)+19)
 14964                           
 14965                           ;RF_Control_B1.c: 238: RF_Data[20] = 210;
 14966  0EB7  30D2               	movlw	210
 14967  0EB8  0020               	movlb	0	; select bank0
 14968  0EB9  00A0               	movwf	??_setTxData
 14969  0EBA  0820               	movf	??_setTxData,w
 14970  0EBB  0023               	movlb	3	; select bank3
 14971  0EBC  00B4               	movwf	(_RF_Data^(0+384)+20)
 14972  0EBD  0008               	return
 14973  0EBE                     __end_of_setTxData:	
 14974                           
 14975                           	psect	text92
 14976  0AD2                     __ptext92:	
 14977 ;; *************** function _setRF_DimmerLights *****************
 14978 ;; Defined at:
 14979 ;;		line 532 in file "../src/RF_Control_B1.c"
 14980 ;; Parameters:    Size  Location     Type
 14981 ;;  lights          1    wreg     unsigned char 
 14982 ;;  on              1   61[BANK0 ] unsigned char 
 14983 ;; Auto vars:     Size  Location     Type
 14984 ;;  lights          1   65[BANK0 ] unsigned char 
 14985 ;;  status          1   64[BANK0 ] unsigned char 
 14986 ;; Return value:  Size  Location     Type
 14987 ;;		None               void
 14988 ;; Registers used:
 14989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14990 ;; Tracked objects:
 14991 ;;		On entry : 0/0
 14992 ;;		On exit  : 0/0
 14993 ;;		Unchanged: 0/0
 14994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14995 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14996 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14997 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14998 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14999 ;;Total ram usage:        5 bytes
 15000 ;; Hardware stack levels used:    1
 15001 ;; Hardware stack levels required when called:    8
 15002 ;; This function calls:
 15003 ;;		_setPercentValue
 15004 ;; This function is called by:
 15005 ;;		_DlyOff_Main
 15006 ;;		_setDimmerLights_SwOn
 15007 ;;		_setDimmerLights_SwOff
 15008 ;;		_setDimmerLights_Adj
 15009 ;;		_setRFSW_Control
 15010 ;; This function uses a non-reentrant model
 15011 ;;
 15012                           
 15013                           
 15014                           ;psect for function _setRF_DimmerLights
 15015  0AD2                     _setRF_DimmerLights:	
 15016                           
 15017                           ;incstack = 0
 15018                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15019                           ;setRF_DimmerLights@lights stored from wreg
 15020  0AD2  0020               	movlb	0	; select bank0
 15021  0AD3  00E1               	movwf	setRF_DimmerLights@lights
 15022                           
 15023                           ;RF_Control_B1.c: 533: char status = 1;
 15024  0AD4  01E0               	clrf	setRF_DimmerLights@status
 15025  0AD5  0AE0               	incf	setRF_DimmerLights@status,f
 15026                           
 15027                           ;RF_Control_B1.c: 534: status <<= (lights - 1);
 15028  0AD6  0861               	movf	setRF_DimmerLights@lights,w
 15029  0AD7  3EFF               	addlw	-1
 15030  0AD8  0A89               	incf	9,f
 15031  0AD9  2ADC               	goto	u9340
 15032  0ADA                     u9345:	
 15033  0ADA  1003               	clrc
 15034  0ADB  0DE0               	rlf	setRF_DimmerLights@status,f
 15035  0ADC                     u9340:	
 15036  0ADC  3EFF               	addlw	-1
 15037  0ADD  1D03               	skipz
 15038  0ADE  2ADA               	goto	u9345
 15039                           
 15040                           ;RF_Control_B1.c: 535: product->Data[11]=lights;
 15041  0ADF  0861               	movf	setRF_DimmerLights@lights,w
 15042  0AE0  00DE               	movwf	??_setRF_DimmerLights
 15043  0AE1  087B               	movf	_product,w
 15044  0AE2  3E0B               	addlw	11
 15045  0AE3  0086               	movwf	6
 15046  0AE4  3002               	movlw	2	; select bank4/5
 15047  0AE5  0087               	movwf	7
 15048  0AE6  085E               	movf	??_setRF_DimmerLights,w
 15049  0AE7  0081               	movwf	1
 15050                           
 15051                           ;RF_Control_B1.c: 538: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 15052  0AE8  3020               	movlw	32
 15053  0AE9  3194  242A  318A   	fcall	_setPercentValue
 15054  0AEC  0020               	movlb	0	; select bank0
 15055  0AED  00DE               	movwf	??_setRF_DimmerLights
 15056  0AEE  0861               	movf	setRF_DimmerLights@lights,w
 15057  0AEF  3E14               	addlw	20
 15058  0AF0  077B               	addwf	_product,w
 15059  0AF1  00DF               	movwf	??_setRF_DimmerLights+1
 15060  0AF2  085F               	movf	??_setRF_DimmerLights+1,w
 15061  0AF3  0086               	movwf	6
 15062  0AF4  3002               	movlw	2	; select bank4/5
 15063  0AF5  0087               	movwf	7
 15064  0AF6  085E               	movf	??_setRF_DimmerLights,w
 15065  0AF7  0081               	movwf	1
 15066                           
 15067                           ;RF_Control_B1.c: 541: product->Data[9]=product->Data[20 + lights];
 15068  0AF8  0861               	movf	setRF_DimmerLights@lights,w
 15069  0AF9  3E14               	addlw	20
 15070  0AFA  077B               	addwf	_product,w
 15071  0AFB  00DE               	movwf	??_setRF_DimmerLights
 15072  0AFC  085E               	movf	??_setRF_DimmerLights,w
 15073  0AFD  0086               	movwf	6
 15074  0AFE  3002               	movlw	2	; select bank4/5
 15075  0AFF  0087               	movwf	7
 15076  0B00  0801               	movf	1,w
 15077  0B01  00DF               	movwf	??_setRF_DimmerLights+1
 15078  0B02  087B               	movf	_product,w
 15079  0B03  3E09               	addlw	9
 15080  0B04  0086               	movwf	6
 15081  0B05  3002               	movlw	2	; select bank4/5
 15082  0B06  0087               	movwf	7
 15083  0B07  085F               	movf	??_setRF_DimmerLights+1,w
 15084  0B08  0081               	movwf	1
 15085                           
 15086                           ;RF_Control_B1.c: 542: product->Data[17]=product->Data[26 + lights];
 15087  0B09  0861               	movf	setRF_DimmerLights@lights,w
 15088  0B0A  3E1A               	addlw	26
 15089  0B0B  077B               	addwf	_product,w
 15090  0B0C  00DE               	movwf	??_setRF_DimmerLights
 15091  0B0D  085E               	movf	??_setRF_DimmerLights,w
 15092  0B0E  0086               	movwf	6
 15093  0B0F  3002               	movlw	2	; select bank4/5
 15094  0B10  0087               	movwf	7
 15095  0B11  0801               	movf	1,w
 15096  0B12  00DF               	movwf	??_setRF_DimmerLights+1
 15097  0B13  087B               	movf	_product,w
 15098  0B14  3E11               	addlw	17
 15099  0B15  0086               	movwf	6
 15100  0B16  3002               	movlw	2	; select bank4/5
 15101  0B17  0087               	movwf	7
 15102  0B18  085F               	movf	??_setRF_DimmerLights+1,w
 15103  0B19  0081               	movwf	1
 15104                           
 15105                           ;RF_Control_B1.c: 543: if (on == 1) {
 15106  0B1A  085D               	movf	setRF_DimmerLights@on,w
 15107  0B1B  3A01               	xorlw	1
 15108  0B1C  1D03               	skipz
 15109  0B1D  2B2E               	goto	l8722
 15110                           
 15111                           ;RF_Control_B1.c: 544: product->Data[15]=(product->Data[15] | status);
 15112  0B1E  087B               	movf	_product,w
 15113  0B1F  3E0F               	addlw	15
 15114  0B20  0086               	movwf	6
 15115  0B21  3002               	movlw	2	; select bank4/5
 15116  0B22  0087               	movwf	7
 15117  0B23  0801               	movf	1,w
 15118  0B24  0460               	iorwf	setRF_DimmerLights@status,w
 15119  0B25  00DE               	movwf	??_setRF_DimmerLights
 15120  0B26  087B               	movf	_product,w
 15121  0B27  3E0F               	addlw	15
 15122  0B28  0086               	movwf	6
 15123  0B29  3002               	movlw	2	; select bank4/5
 15124  0B2A  0087               	movwf	7
 15125  0B2B  085E               	movf	??_setRF_DimmerLights,w
 15126  0B2C  0081               	movwf	1
 15127                           
 15128                           ;RF_Control_B1.c: 545: } else {
 15129  0B2D  0008               	return
 15130  0B2E                     l8722:	
 15131                           
 15132                           ;RF_Control_B1.c: 546: product->Data[15]=(product->Data[15]&(~status));
 15133  0B2E  087B               	movf	_product,w
 15134  0B2F  3E0F               	addlw	15
 15135  0B30  0086               	movwf	6
 15136  0B31  3002               	movlw	2	; select bank4/5
 15137  0B32  0087               	movwf	7
 15138  0B33  0960               	comf	setRF_DimmerLights@status,w
 15139  0B34  0501               	andwf	1,w
 15140  0B35  00DE               	movwf	??_setRF_DimmerLights
 15141  0B36  087B               	movf	_product,w
 15142  0B37  3E0F               	addlw	15
 15143  0B38  0086               	movwf	6
 15144  0B39  3002               	movlw	2	; select bank4/5
 15145  0B3A  0087               	movwf	7
 15146  0B3B  085E               	movf	??_setRF_DimmerLights,w
 15147  0B3C  0081               	movwf	1
 15148  0B3D  0008               	return
 15149  0B3E                     __end_of_setRF_DimmerLights:	
 15150                           
 15151                           	psect	text93
 15152  142A                     __ptext93:	
 15153 ;; *************** function _setPercentValue *****************
 15154 ;; Defined at:
 15155 ;;		line 904 in file "../src/Dimmer_B1.c"
 15156 ;; Parameters:    Size  Location     Type
 15157 ;;  value           1    wreg     unsigned char 
 15158 ;; Auto vars:     Size  Location     Type
 15159 ;;  value           1   57[BANK0 ] unsigned char 
 15160 ;;  i               3   58[BANK0 ] float 
 15161 ;; Return value:  Size  Location     Type
 15162 ;;                  1    wreg      unsigned char 
 15163 ;; Registers used:
 15164 ;;		wreg, status,2, status,0, pclath, cstack
 15165 ;; Tracked objects:
 15166 ;;		On entry : 0/0
 15167 ;;		On exit  : 0/0
 15168 ;;		Unchanged: 0/0
 15169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15171 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15173 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15174 ;;Total ram usage:        4 bytes
 15175 ;; Hardware stack levels used:    1
 15176 ;; Hardware stack levels required when called:    7
 15177 ;; This function calls:
 15178 ;;		___awtoft
 15179 ;;		___ftdiv
 15180 ;;		___fttol
 15181 ;; This function is called by:
 15182 ;;		_Flash_Memory_Initialization
 15183 ;;		_setRF_DimmerLights
 15184 ;; This function uses a non-reentrant model
 15185 ;;
 15186                           
 15187                           
 15188                           ;psect for function _setPercentValue
 15189  142A                     _setPercentValue:	
 15190                           
 15191                           ;incstack = 0
 15192                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15193                           ;setPercentValue@value stored from wreg
 15194  142A  0020               	movlb	0	; select bank0
 15195  142B  00D9               	movwf	setPercentValue@value
 15196                           
 15197                           ;Dimmer_B1.c: 906: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 15198  142C  3000               	movlw	0
 15199  142D  00DA               	movwf	setPercentValue@i
 15200  142E  30E0               	movlw	224
 15201  142F  00DB               	movwf	setPercentValue@i+1
 15202  1430  3041               	movlw	65
 15203  1431  00DC               	movwf	setPercentValue@i+2
 15204                           
 15205                           ;Dimmer_B1.c: 907: i /= 100;
 15206  1432  3000               	movlw	0
 15207  1433  00AE               	movwf	___ftdiv@f2
 15208  1434  30C8               	movlw	200
 15209  1435  00AF               	movwf	___ftdiv@f2+1
 15210  1436  3042               	movlw	66
 15211  1437  00B0               	movwf	___ftdiv@f2+2
 15212  1438  085A               	movf	setPercentValue@i,w
 15213  1439  00B1               	movwf	___ftdiv@f1
 15214  143A  085B               	movf	setPercentValue@i+1,w
 15215  143B  00B2               	movwf	___ftdiv@f1+1
 15216  143C  085C               	movf	setPercentValue@i+2,w
 15217  143D  00B3               	movwf	___ftdiv@f1+2
 15218  143E  318F  2757  3194   	fcall	___ftdiv
 15219  1441  0020               	movlb	0	; select bank0
 15220  1442  082E               	movf	?___ftdiv,w
 15221  1443  00DA               	movwf	setPercentValue@i
 15222  1444  082F               	movf	?___ftdiv+1,w
 15223  1445  00DB               	movwf	setPercentValue@i+1
 15224  1446  0830               	movf	?___ftdiv+2,w
 15225  1447  00DC               	movwf	setPercentValue@i+2
 15226                           
 15227                           ;Dimmer_B1.c: 908: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 15228  1448  0859               	movf	setPercentValue@value,w
 15229  1449  3EE0               	addlw	224
 15230  144A  00A8               	movwf	___awtoft@c
 15231  144B  30FF               	movlw	255
 15232  144C  1803               	skipnc
 15233  144D  3000               	movlw	0
 15234  144E  00A9               	movwf	___awtoft@c+1
 15235  144F  319F  2775  3194   	fcall	___awtoft
 15236  1452  0020               	movlb	0	; select bank0
 15237  1453  0828               	movf	?___awtoft,w
 15238  1454  00B1               	movwf	___ftdiv@f1
 15239  1455  0829               	movf	?___awtoft+1,w
 15240  1456  00B2               	movwf	___ftdiv@f1+1
 15241  1457  082A               	movf	?___awtoft+2,w
 15242  1458  00B3               	movwf	___ftdiv@f1+2
 15243  1459  085A               	movf	setPercentValue@i,w
 15244  145A  00AE               	movwf	___ftdiv@f2
 15245  145B  085B               	movf	setPercentValue@i+1,w
 15246  145C  00AF               	movwf	___ftdiv@f2+1
 15247  145D  085C               	movf	setPercentValue@i+2,w
 15248  145E  00B0               	movwf	___ftdiv@f2+2
 15249  145F  318F  2757  3194   	fcall	___ftdiv
 15250  1462  0020               	movlb	0	; select bank0
 15251  1463  082E               	movf	?___ftdiv,w
 15252  1464  00CB               	movwf	___fttol@f1
 15253  1465  082F               	movf	?___ftdiv+1,w
 15254  1466  00CC               	movwf	___fttol@f1+1
 15255  1467  0830               	movf	?___ftdiv+2,w
 15256  1468  00CD               	movwf	___fttol@f1+2
 15257  1469  318D  2512         	fcall	___fttol
 15258  146B  0020               	movlb	0	; select bank0
 15259  146C  034B               	decf	?___fttol,w
 15260  146D  3AFF               	xorlw	255
 15261  146E  3E64               	addlw	100
 15262  146F  0008               	return
 15263  1470                     __end_of_setPercentValue:	
 15264                           
 15265                           	psect	text94
 15266  0D12                     __ptext94:	
 15267 ;; *************** function ___fttol *****************
 15268 ;; Defined at:
 15269 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15270 ;; Parameters:    Size  Location     Type
 15271 ;;  f1              3   43[BANK0 ] float 
 15272 ;; Auto vars:     Size  Location     Type
 15273 ;;  lval            4   52[BANK0 ] unsigned long 
 15274 ;;  exp1            1   56[BANK0 ] unsigned char 
 15275 ;;  sign1           1   51[BANK0 ] unsigned char 
 15276 ;; Return value:  Size  Location     Type
 15277 ;;                  4   43[BANK0 ] long 
 15278 ;; Registers used:
 15279 ;;		wreg, status,2, status,0
 15280 ;; Tracked objects:
 15281 ;;		On entry : 0/0
 15282 ;;		On exit  : 0/0
 15283 ;;		Unchanged: 0/0
 15284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15285 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15286 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15287 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15288 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15289 ;;Total ram usage:       14 bytes
 15290 ;; Hardware stack levels used:    1
 15291 ;; Hardware stack levels required when called:    5
 15292 ;; This function calls:
 15293 ;;		Nothing
 15294 ;; This function is called by:
 15295 ;;		_getPercentValue
 15296 ;;		_setPercentValue
 15297 ;; This function uses a non-reentrant model
 15298 ;;
 15299                           
 15300                           
 15301                           ;psect for function ___fttol
 15302  0D12                     ___fttol:	
 15303                           
 15304                           ;incstack = 0
 15305                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15306  0D12  0020               	movlb	0	; select bank0
 15307  0D13  084B               	movf	___fttol@f1,w
 15308  0D14  00CF               	movwf	??___fttol
 15309  0D15  084C               	movf	___fttol@f1+1,w
 15310  0D16  00D0               	movwf	??___fttol+1
 15311  0D17  084D               	movf	___fttol@f1+2,w
 15312  0D18  00D1               	movwf	??___fttol+2
 15313  0D19  1003               	clrc
 15314  0D1A  0D50               	rlf	??___fttol+1,w
 15315  0D1B  0D51               	rlf	??___fttol+2,w
 15316  0D1C  00D2               	movwf	??___fttol+3
 15317  0D1D  0852               	movf	??___fttol+3,w
 15318  0D1E  00D8               	movwf	___fttol@exp1
 15319  0D1F  08D8               	movf	___fttol@exp1,f
 15320  0D20  1D03               	skipz
 15321  0D21  2D2B               	goto	l8550
 15322  0D22  3000               	movlw	0
 15323  0D23  00CE               	movwf	?___fttol+3
 15324  0D24  3000               	movlw	0
 15325  0D25  00CD               	movwf	?___fttol+2
 15326  0D26  3000               	movlw	0
 15327  0D27  00CC               	movwf	?___fttol+1
 15328  0D28  3000               	movlw	0
 15329  0D29  00CB               	movwf	?___fttol
 15330  0D2A  0008               	return
 15331  0D2B                     l8550:	
 15332  0D2B  084B               	movf	___fttol@f1,w
 15333  0D2C  00CF               	movwf	??___fttol
 15334  0D2D  084C               	movf	___fttol@f1+1,w
 15335  0D2E  00D0               	movwf	??___fttol+1
 15336  0D2F  084D               	movf	___fttol@f1+2,w
 15337  0D30  00D1               	movwf	??___fttol+2
 15338  0D31  3017               	movlw	23
 15339  0D32                     u9055:	
 15340  0D32  36D1               	lsrf	??___fttol+2,f
 15341  0D33  0CD0               	rrf	??___fttol+1,f
 15342  0D34  0CCF               	rrf	??___fttol,f
 15343  0D35  0B89               	decfsz	9,f
 15344  0D36  2D32               	goto	u9055
 15345  0D37  084F               	movf	??___fttol,w
 15346  0D38  00D2               	movwf	??___fttol+3
 15347  0D39  0852               	movf	??___fttol+3,w
 15348  0D3A  00D3               	movwf	___fttol@sign1
 15349  0D3B  17CC               	bsf	___fttol@f1+1,7
 15350  0D3C  30FF               	movlw	255
 15351  0D3D  05CB               	andwf	___fttol@f1,f
 15352  0D3E  30FF               	movlw	255
 15353  0D3F  05CC               	andwf	___fttol@f1+1,f
 15354  0D40  3000               	movlw	0
 15355  0D41  05CD               	andwf	___fttol@f1+2,f
 15356  0D42  084B               	movf	___fttol@f1,w
 15357  0D43  00D4               	movwf	___fttol@lval
 15358  0D44  084C               	movf	___fttol@f1+1,w
 15359  0D45  00D5               	movwf	___fttol@lval+1
 15360  0D46  084D               	movf	___fttol@f1+2,w
 15361  0D47  00D6               	movwf	___fttol@lval+2
 15362  0D48  01D7               	clrf	___fttol@lval+3
 15363  0D49  308E               	movlw	142
 15364  0D4A  02D8               	subwf	___fttol@exp1,f
 15365  0D4B  1FD8               	btfss	___fttol@exp1,7
 15366  0D4C  2D69               	goto	l8570
 15367  0D4D  0858               	movf	___fttol@exp1,w
 15368  0D4E  3A80               	xorlw	128
 15369  0D4F  3E8F               	addlw	143
 15370  0D50  1803               	skipnc
 15371  0D51  2D5B               	goto	l8568
 15372  0D52  3000               	movlw	0
 15373  0D53  00CE               	movwf	?___fttol+3
 15374  0D54  3000               	movlw	0
 15375  0D55  00CD               	movwf	?___fttol+2
 15376  0D56  3000               	movlw	0
 15377  0D57  00CC               	movwf	?___fttol+1
 15378  0D58  3000               	movlw	0
 15379  0D59  00CB               	movwf	?___fttol
 15380  0D5A  0008               	return
 15381  0D5B                     l8568:	
 15382  0D5B  3001               	movlw	1
 15383  0D5C                     u9085:	
 15384  0D5C  36D7               	lsrf	___fttol@lval+3,f
 15385  0D5D  0CD6               	rrf	___fttol@lval+2,f
 15386  0D5E  0CD5               	rrf	___fttol@lval+1,f
 15387  0D5F  0CD4               	rrf	___fttol@lval,f
 15388  0D60  0B89               	decfsz	9,f
 15389  0D61  2D5C               	goto	u9085
 15390  0D62  3001               	movlw	1
 15391  0D63  00CF               	movwf	??___fttol
 15392  0D64  084F               	movf	??___fttol,w
 15393  0D65  07D8               	addwf	___fttol@exp1,f
 15394  0D66  1903               	btfsc	3,2
 15395  0D67  2D82               	goto	l8580
 15396  0D68  2D5B               	goto	l8568
 15397  0D69                     l8570:	
 15398  0D69  3018               	movlw	24
 15399  0D6A  0258               	subwf	___fttol@exp1,w
 15400  0D6B  1C03               	skipc
 15401  0D6C  2D7F               	goto	l8578
 15402  0D6D  3000               	movlw	0
 15403  0D6E  00CE               	movwf	?___fttol+3
 15404  0D6F  3000               	movlw	0
 15405  0D70  00CD               	movwf	?___fttol+2
 15406  0D71  3000               	movlw	0
 15407  0D72  00CC               	movwf	?___fttol+1
 15408  0D73  3000               	movlw	0
 15409  0D74  00CB               	movwf	?___fttol
 15410  0D75  0008               	return
 15411  0D76                     l8576:	
 15412  0D76  3001               	movlw	1
 15413  0D77                     u9115:	
 15414  0D77  35D4               	lslf	___fttol@lval,f
 15415  0D78  0DD5               	rlf	___fttol@lval+1,f
 15416  0D79  0DD6               	rlf	___fttol@lval+2,f
 15417  0D7A  0DD7               	rlf	___fttol@lval+3,f
 15418  0D7B  0B89               	decfsz	9,f
 15419  0D7C  2D77               	goto	u9115
 15420  0D7D  3001               	movlw	1
 15421  0D7E  02D8               	subwf	___fttol@exp1,f
 15422  0D7F                     l8578:	
 15423  0D7F  08D8               	movf	___fttol@exp1,f
 15424  0D80  1D03               	skipz
 15425  0D81  2D76               	goto	l8576
 15426  0D82                     l8580:	
 15427  0D82  0853               	movf	___fttol@sign1,w
 15428  0D83  1903               	btfsc	3,2
 15429  0D84  2D90               	goto	l8584
 15430  0D85  09D4               	comf	___fttol@lval,f
 15431  0D86  09D5               	comf	___fttol@lval+1,f
 15432  0D87  09D6               	comf	___fttol@lval+2,f
 15433  0D88  09D7               	comf	___fttol@lval+3,f
 15434  0D89  0AD4               	incf	___fttol@lval,f
 15435  0D8A  1903               	skipnz
 15436  0D8B  0AD5               	incf	___fttol@lval+1,f
 15437  0D8C  1903               	skipnz
 15438  0D8D  0AD6               	incf	___fttol@lval+2,f
 15439  0D8E  1903               	skipnz
 15440  0D8F  0AD7               	incf	___fttol@lval+3,f
 15441  0D90                     l8584:	
 15442  0D90  0857               	movf	___fttol@lval+3,w
 15443  0D91  00CE               	movwf	?___fttol+3
 15444  0D92  0856               	movf	___fttol@lval+2,w
 15445  0D93  00CD               	movwf	?___fttol+2
 15446  0D94  0855               	movf	___fttol@lval+1,w
 15447  0D95  00CC               	movwf	?___fttol+1
 15448  0D96  0854               	movf	___fttol@lval,w
 15449  0D97  00CB               	movwf	?___fttol
 15450  0D98  0008               	return
 15451  0D99                     __end_of___fttol:	
 15452                           
 15453                           	psect	text95
 15454  0F57                     __ptext95:	
 15455 ;; *************** function ___ftdiv *****************
 15456 ;; Defined at:
 15457 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15458 ;; Parameters:    Size  Location     Type
 15459 ;;  f2              3   14[BANK0 ] float 
 15460 ;;  f1              3   17[BANK0 ] float 
 15461 ;; Auto vars:     Size  Location     Type
 15462 ;;  f3              3   25[BANK0 ] float 
 15463 ;;  sign            1   29[BANK0 ] unsigned char 
 15464 ;;  exp             1   28[BANK0 ] unsigned char 
 15465 ;;  cntr            1   24[BANK0 ] unsigned char 
 15466 ;; Return value:  Size  Location     Type
 15467 ;;                  3   14[BANK0 ] float 
 15468 ;; Registers used:
 15469 ;;		wreg, status,2, status,0, pclath, cstack
 15470 ;; Tracked objects:
 15471 ;;		On entry : 0/0
 15472 ;;		On exit  : 0/0
 15473 ;;		Unchanged: 0/0
 15474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15475 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15476 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15477 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15478 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15479 ;;Total ram usage:       16 bytes
 15480 ;; Hardware stack levels used:    1
 15481 ;; Hardware stack levels required when called:    6
 15482 ;; This function calls:
 15483 ;;		___ftpack
 15484 ;; This function is called by:
 15485 ;;		_getPercentValue
 15486 ;;		_setPercentValue
 15487 ;; This function uses a non-reentrant model
 15488 ;;
 15489                           
 15490                           
 15491                           ;psect for function ___ftdiv
 15492  0F57                     ___ftdiv:	
 15493                           
 15494                           ;incstack = 0
 15495                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15496  0F57  0020               	movlb	0	; select bank0
 15497  0F58  0831               	movf	___ftdiv@f1,w
 15498  0F59  00B4               	movwf	??___ftdiv
 15499  0F5A  0832               	movf	___ftdiv@f1+1,w
 15500  0F5B  00B5               	movwf	??___ftdiv+1
 15501  0F5C  0833               	movf	___ftdiv@f1+2,w
 15502  0F5D  00B6               	movwf	??___ftdiv+2
 15503  0F5E  1003               	clrc
 15504  0F5F  0D35               	rlf	??___ftdiv+1,w
 15505  0F60  0D36               	rlf	??___ftdiv+2,w
 15506  0F61  00B7               	movwf	??___ftdiv+3
 15507  0F62  0837               	movf	??___ftdiv+3,w
 15508  0F63  00BC               	movwf	___ftdiv@exp
 15509  0F64  08BC               	movf	___ftdiv@exp,f
 15510  0F65  1D03               	skipz
 15511  0F66  2F6E               	goto	l8458
 15512  0F67  3000               	movlw	0
 15513  0F68  00AE               	movwf	?___ftdiv
 15514  0F69  3000               	movlw	0
 15515  0F6A  00AF               	movwf	?___ftdiv+1
 15516  0F6B  3000               	movlw	0
 15517  0F6C  00B0               	movwf	?___ftdiv+2
 15518  0F6D  0008               	return
 15519  0F6E                     l8458:	
 15520  0F6E  082E               	movf	___ftdiv@f2,w
 15521  0F6F  00B4               	movwf	??___ftdiv
 15522  0F70  082F               	movf	___ftdiv@f2+1,w
 15523  0F71  00B5               	movwf	??___ftdiv+1
 15524  0F72  0830               	movf	___ftdiv@f2+2,w
 15525  0F73  00B6               	movwf	??___ftdiv+2
 15526  0F74  1003               	clrc
 15527  0F75  0D35               	rlf	??___ftdiv+1,w
 15528  0F76  0D36               	rlf	??___ftdiv+2,w
 15529  0F77  00B7               	movwf	??___ftdiv+3
 15530  0F78  0837               	movf	??___ftdiv+3,w
 15531  0F79  00BD               	movwf	___ftdiv@sign
 15532  0F7A  08BD               	movf	___ftdiv@sign,f
 15533  0F7B  1D03               	skipz
 15534  0F7C  2F84               	goto	l8464
 15535  0F7D  3000               	movlw	0
 15536  0F7E  00AE               	movwf	?___ftdiv
 15537  0F7F  3000               	movlw	0
 15538  0F80  00AF               	movwf	?___ftdiv+1
 15539  0F81  3000               	movlw	0
 15540  0F82  00B0               	movwf	?___ftdiv+2
 15541  0F83  0008               	return
 15542  0F84                     l8464:	
 15543  0F84  3000               	movlw	0
 15544  0F85  00B9               	movwf	___ftdiv@f3
 15545  0F86  3000               	movlw	0
 15546  0F87  00BA               	movwf	___ftdiv@f3+1
 15547  0F88  3000               	movlw	0
 15548  0F89  00BB               	movwf	___ftdiv@f3+2
 15549  0F8A  3089               	movlw	137
 15550  0F8B  073D               	addwf	___ftdiv@sign,w
 15551  0F8C  00B4               	movwf	??___ftdiv
 15552  0F8D  0834               	movf	??___ftdiv,w
 15553  0F8E  02BC               	subwf	___ftdiv@exp,f
 15554  0F8F  0831               	movf	___ftdiv@f1,w
 15555  0F90  00B4               	movwf	??___ftdiv
 15556  0F91  0832               	movf	___ftdiv@f1+1,w
 15557  0F92  00B5               	movwf	??___ftdiv+1
 15558  0F93  0833               	movf	___ftdiv@f1+2,w
 15559  0F94  00B6               	movwf	??___ftdiv+2
 15560  0F95  3010               	movlw	16
 15561  0F96                     u8865:	
 15562  0F96  36B6               	lsrf	??___ftdiv+2,f
 15563  0F97  0CB5               	rrf	??___ftdiv+1,f
 15564  0F98  0CB4               	rrf	??___ftdiv,f
 15565  0F99  0B89               	decfsz	9,f
 15566  0F9A  2F96               	goto	u8865
 15567  0F9B  0834               	movf	??___ftdiv,w
 15568  0F9C  00B7               	movwf	??___ftdiv+3
 15569  0F9D  0837               	movf	??___ftdiv+3,w
 15570  0F9E  00BD               	movwf	___ftdiv@sign
 15571  0F9F  082E               	movf	___ftdiv@f2,w
 15572  0FA0  00B4               	movwf	??___ftdiv
 15573  0FA1  082F               	movf	___ftdiv@f2+1,w
 15574  0FA2  00B5               	movwf	??___ftdiv+1
 15575  0FA3  0830               	movf	___ftdiv@f2+2,w
 15576  0FA4  00B6               	movwf	??___ftdiv+2
 15577  0FA5  3010               	movlw	16
 15578  0FA6                     u8875:	
 15579  0FA6  36B6               	lsrf	??___ftdiv+2,f
 15580  0FA7  0CB5               	rrf	??___ftdiv+1,f
 15581  0FA8  0CB4               	rrf	??___ftdiv,f
 15582  0FA9  0B89               	decfsz	9,f
 15583  0FAA  2FA6               	goto	u8875
 15584  0FAB  0834               	movf	??___ftdiv,w
 15585  0FAC  00B7               	movwf	??___ftdiv+3
 15586  0FAD  0837               	movf	??___ftdiv+3,w
 15587  0FAE  06BD               	xorwf	___ftdiv@sign,f
 15588  0FAF  3080               	movlw	128
 15589  0FB0  00B4               	movwf	??___ftdiv
 15590  0FB1  0834               	movf	??___ftdiv,w
 15591  0FB2  05BD               	andwf	___ftdiv@sign,f
 15592  0FB3  17B2               	bsf	___ftdiv@f1+1,7
 15593  0FB4  30FF               	movlw	255
 15594  0FB5  05B1               	andwf	___ftdiv@f1,f
 15595  0FB6  30FF               	movlw	255
 15596  0FB7  05B2               	andwf	___ftdiv@f1+1,f
 15597  0FB8  3000               	movlw	0
 15598  0FB9  05B3               	andwf	___ftdiv@f1+2,f
 15599  0FBA  17AF               	bsf	___ftdiv@f2+1,7
 15600  0FBB  30FF               	movlw	255
 15601  0FBC  05AE               	andwf	___ftdiv@f2,f
 15602  0FBD  30FF               	movlw	255
 15603  0FBE  05AF               	andwf	___ftdiv@f2+1,f
 15604  0FBF  3000               	movlw	0
 15605  0FC0  05B0               	andwf	___ftdiv@f2+2,f
 15606  0FC1  3018               	movlw	24
 15607  0FC2  00B4               	movwf	??___ftdiv
 15608  0FC3  0834               	movf	??___ftdiv,w
 15609  0FC4  00B8               	movwf	___ftdiv@cntr
 15610  0FC5                     l8478:	
 15611  0FC5  3001               	movlw	1
 15612  0FC6                     u8885:	
 15613  0FC6  35B9               	lslf	___ftdiv@f3,f
 15614  0FC7  0DBA               	rlf	___ftdiv@f3+1,f
 15615  0FC8  0DBB               	rlf	___ftdiv@f3+2,f
 15616  0FC9  0B89               	decfsz	9,f
 15617  0FCA  2FC6               	goto	u8885
 15618  0FCB  0830               	movf	___ftdiv@f2+2,w
 15619  0FCC  0233               	subwf	___ftdiv@f1+2,w
 15620  0FCD  1D03               	skipz
 15621  0FCE  2FD5               	goto	u8895
 15622  0FCF  082F               	movf	___ftdiv@f2+1,w
 15623  0FD0  0232               	subwf	___ftdiv@f1+1,w
 15624  0FD1  1D03               	skipz
 15625  0FD2  2FD5               	goto	u8895
 15626  0FD3  082E               	movf	___ftdiv@f2,w
 15627  0FD4  0231               	subwf	___ftdiv@f1,w
 15628  0FD5                     u8895:	
 15629  0FD5  1C03               	skipc
 15630  0FD6  2FDE               	goto	l8486
 15631  0FD7  082E               	movf	___ftdiv@f2,w
 15632  0FD8  02B1               	subwf	___ftdiv@f1,f
 15633  0FD9  082F               	movf	___ftdiv@f2+1,w
 15634  0FDA  3BB2               	subwfb	___ftdiv@f1+1,f
 15635  0FDB  0830               	movf	___ftdiv@f2+2,w
 15636  0FDC  3BB3               	subwfb	___ftdiv@f1+2,f
 15637  0FDD  1439               	bsf	___ftdiv@f3,0
 15638  0FDE                     l8486:	
 15639  0FDE  3001               	movlw	1
 15640  0FDF                     u8905:	
 15641  0FDF  35B1               	lslf	___ftdiv@f1,f
 15642  0FE0  0DB2               	rlf	___ftdiv@f1+1,f
 15643  0FE1  0DB3               	rlf	___ftdiv@f1+2,f
 15644  0FE2  0B89               	decfsz	9,f
 15645  0FE3  2FDF               	goto	u8905
 15646  0FE4  3001               	movlw	1
 15647  0FE5  02B8               	subwf	___ftdiv@cntr,f
 15648  0FE6  1D03               	btfss	3,2
 15649  0FE7  2FC5               	goto	l8478
 15650  0FE8  0839               	movf	___ftdiv@f3,w
 15651  0FE9  00A0               	movwf	___ftpack@arg
 15652  0FEA  083A               	movf	___ftdiv@f3+1,w
 15653  0FEB  00A1               	movwf	___ftpack@arg+1
 15654  0FEC  083B               	movf	___ftdiv@f3+2,w
 15655  0FED  00A2               	movwf	___ftpack@arg+2
 15656  0FEE  083C               	movf	___ftdiv@exp,w
 15657  0FEF  00B4               	movwf	??___ftdiv
 15658  0FF0  0834               	movf	??___ftdiv,w
 15659  0FF1  00A3               	movwf	___ftpack@exp
 15660  0FF2  083D               	movf	___ftdiv@sign,w
 15661  0FF3  00B5               	movwf	??___ftdiv+1
 15662  0FF4  0835               	movf	??___ftdiv+1,w
 15663  0FF5  00A4               	movwf	___ftpack@sign
 15664  0FF6  3189  2146         	fcall	___ftpack
 15665  0FF8  0020               	movlb	0	; select bank0
 15666  0FF9  0820               	movf	?___ftpack,w
 15667  0FFA  00AE               	movwf	?___ftdiv
 15668  0FFB  0821               	movf	?___ftpack+1,w
 15669  0FFC  00AF               	movwf	?___ftdiv+1
 15670  0FFD  0822               	movf	?___ftpack+2,w
 15671  0FFE  00B0               	movwf	?___ftdiv+2
 15672  0FFF  0008               	return
 15673  1000                     __end_of___ftdiv:	
 15674                           
 15675                           	psect	text96
 15676  1F75                     __ptext96:	
 15677 ;; *************** function ___awtoft *****************
 15678 ;; Defined at:
 15679 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 15680 ;; Parameters:    Size  Location     Type
 15681 ;;  c               2    8[BANK0 ] int 
 15682 ;; Auto vars:     Size  Location     Type
 15683 ;;  sign            1   13[BANK0 ] unsigned char 
 15684 ;; Return value:  Size  Location     Type
 15685 ;;                  3    8[BANK0 ] float 
 15686 ;; Registers used:
 15687 ;;		wreg, status,2, status,0, pclath, cstack
 15688 ;; Tracked objects:
 15689 ;;		On entry : 0/0
 15690 ;;		On exit  : 0/0
 15691 ;;		Unchanged: 0/0
 15692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15693 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15694 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15695 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15696 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15697 ;;Total ram usage:        6 bytes
 15698 ;; Hardware stack levels used:    1
 15699 ;; Hardware stack levels required when called:    6
 15700 ;; This function calls:
 15701 ;;		___ftpack
 15702 ;; This function is called by:
 15703 ;;		_getPercentValue
 15704 ;;		_setPercentValue
 15705 ;; This function uses a non-reentrant model
 15706 ;;
 15707                           
 15708                           
 15709                           ;psect for function ___awtoft
 15710  1F75                     ___awtoft:	
 15711                           
 15712                           ;incstack = 0
 15713                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15714  1F75  0020               	movlb	0	; select bank0
 15715  1F76  01AD               	clrf	___awtoft@sign
 15716  1F77  1FA9               	btfss	___awtoft@c+1,7
 15717  1F78  2F80               	goto	l8376
 15718  1F79  09A8               	comf	___awtoft@c,f
 15719  1F7A  09A9               	comf	___awtoft@c+1,f
 15720  1F7B  0AA8               	incf	___awtoft@c,f
 15721  1F7C  1903               	skipnz
 15722  1F7D  0AA9               	incf	___awtoft@c+1,f
 15723  1F7E  01AD               	clrf	___awtoft@sign
 15724  1F7F  0AAD               	incf	___awtoft@sign,f
 15725  1F80                     l8376:	
 15726  1F80  0828               	movf	___awtoft@c,w
 15727  1F81  00A0               	movwf	___ftpack@arg
 15728  1F82  0829               	movf	___awtoft@c+1,w
 15729  1F83  00A1               	movwf	___ftpack@arg+1
 15730  1F84  01A2               	clrf	___ftpack@arg+2
 15731  1F85  308E               	movlw	142
 15732  1F86  00AB               	movwf	??___awtoft
 15733  1F87  082B               	movf	??___awtoft,w
 15734  1F88  00A3               	movwf	___ftpack@exp
 15735  1F89  082D               	movf	___awtoft@sign,w
 15736  1F8A  00AC               	movwf	??___awtoft+1
 15737  1F8B  082C               	movf	??___awtoft+1,w
 15738  1F8C  00A4               	movwf	___ftpack@sign
 15739  1F8D  3189  2146         	fcall	___ftpack
 15740  1F8F  0020               	movlb	0	; select bank0
 15741  1F90  0820               	movf	?___ftpack,w
 15742  1F91  00A8               	movwf	?___awtoft
 15743  1F92  0821               	movf	?___ftpack+1,w
 15744  1F93  00A9               	movwf	?___awtoft+1
 15745  1F94  0822               	movf	?___ftpack+2,w
 15746  1F95  00AA               	movwf	?___awtoft+2
 15747  1F96  0008               	return
 15748  1F97                     __end_of___awtoft:	
 15749                           
 15750                           	psect	text97
 15751  0946                     __ptext97:	
 15752 ;; *************** function ___ftpack *****************
 15753 ;; Defined at:
 15754 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15755 ;; Parameters:    Size  Location     Type
 15756 ;;  arg             3    0[BANK0 ] unsigned um
 15757 ;;  exp             1    3[BANK0 ] unsigned char 
 15758 ;;  sign            1    4[BANK0 ] unsigned char 
 15759 ;; Auto vars:     Size  Location     Type
 15760 ;;		None
 15761 ;; Return value:  Size  Location     Type
 15762 ;;                  3    0[BANK0 ] float 
 15763 ;; Registers used:
 15764 ;;		wreg, status,2, status,0
 15765 ;; Tracked objects:
 15766 ;;		On entry : 0/0
 15767 ;;		On exit  : 0/0
 15768 ;;		Unchanged: 0/0
 15769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15770 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15772 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15773 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15774 ;;Total ram usage:        8 bytes
 15775 ;; Hardware stack levels used:    1
 15776 ;; Hardware stack levels required when called:    5
 15777 ;; This function calls:
 15778 ;;		Nothing
 15779 ;; This function is called by:
 15780 ;;		___awtoft
 15781 ;;		___ftadd
 15782 ;;		___ftdiv
 15783 ;;		___ftmul
 15784 ;; This function uses a non-reentrant model
 15785 ;;
 15786                           
 15787                           
 15788                           ;psect for function ___ftpack
 15789  0946                     ___ftpack:	
 15790                           
 15791                           ;incstack = 0
 15792                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15793  0946  0020               	movlb	0	; select bank0
 15794  0947  0823               	movf	___ftpack@exp,w
 15795  0948  1903               	btfsc	3,2
 15796  0949  294F               	goto	l8326
 15797  094A  0822               	movf	___ftpack@arg+2,w
 15798  094B  0421               	iorwf	___ftpack@arg+1,w
 15799  094C  0420               	iorwf	___ftpack@arg,w
 15800  094D  1D03               	skipz
 15801  094E  2960               	goto	l8332
 15802  094F                     l8326:	
 15803  094F  3000               	movlw	0
 15804  0950  00A0               	movwf	?___ftpack
 15805  0951  3000               	movlw	0
 15806  0952  00A1               	movwf	?___ftpack+1
 15807  0953  3000               	movlw	0
 15808  0954  00A2               	movwf	?___ftpack+2
 15809  0955  0008               	return
 15810  0956                     l8330:	
 15811  0956  3001               	movlw	1
 15812  0957  00A5               	movwf	??___ftpack
 15813  0958  0825               	movf	??___ftpack,w
 15814  0959  07A3               	addwf	___ftpack@exp,f
 15815  095A  3001               	movlw	1
 15816  095B                     u8495:	
 15817  095B  36A2               	lsrf	___ftpack@arg+2,f
 15818  095C  0CA1               	rrf	___ftpack@arg+1,f
 15819  095D  0CA0               	rrf	___ftpack@arg,f
 15820  095E  0B89               	decfsz	9,f
 15821  095F  295B               	goto	u8495
 15822  0960                     l8332:	
 15823  0960  30FE               	movlw	254
 15824  0961  0522               	andwf	___ftpack@arg+2,w
 15825  0962  1903               	btfsc	3,2
 15826  0963  2979               	goto	l2902
 15827  0964  2956               	goto	l8330
 15828  0965                     l8334:	
 15829  0965  3001               	movlw	1
 15830  0966  00A5               	movwf	??___ftpack
 15831  0967  0825               	movf	??___ftpack,w
 15832  0968  07A3               	addwf	___ftpack@exp,f
 15833  0969  3001               	movlw	1
 15834  096A  07A0               	addwf	___ftpack@arg,f
 15835  096B  3000               	movlw	0
 15836  096C  1803               	skipnc
 15837  096D  3001               	movlw	1
 15838  096E  07A1               	addwf	___ftpack@arg+1,f
 15839  096F  3000               	movlw	0
 15840  0970  1803               	skipnc
 15841  0971  3001               	movlw	1
 15842  0972  07A2               	addwf	___ftpack@arg+2,f
 15843  0973  3001               	movlw	1
 15844  0974                     u8515:	
 15845  0974  36A2               	lsrf	___ftpack@arg+2,f
 15846  0975  0CA1               	rrf	___ftpack@arg+1,f
 15847  0976  0CA0               	rrf	___ftpack@arg,f
 15848  0977  0B89               	decfsz	9,f
 15849  0978  2974               	goto	u8515
 15850  0979                     l2902:	
 15851  0979  30FF               	movlw	255
 15852  097A  0522               	andwf	___ftpack@arg+2,w
 15853  097B  1903               	btfsc	3,2
 15854  097C  2986               	goto	l8342
 15855  097D  2965               	goto	l8334
 15856  097E                     l8340:	
 15857  097E  3001               	movlw	1
 15858  097F  02A3               	subwf	___ftpack@exp,f
 15859  0980  3001               	movlw	1
 15860  0981                     u8535:	
 15861  0981  35A0               	lslf	___ftpack@arg,f
 15862  0982  0DA1               	rlf	___ftpack@arg+1,f
 15863  0983  0DA2               	rlf	___ftpack@arg+2,f
 15864  0984  0B89               	decfsz	9,f
 15865  0985  2981               	goto	u8535
 15866  0986                     l8342:	
 15867  0986  1FA1               	btfss	___ftpack@arg+1,7
 15868  0987  297E               	goto	l8340
 15869  0988  1823               	btfsc	___ftpack@exp,0
 15870  0989  2990               	goto	l2908
 15871  098A  30FF               	movlw	255
 15872  098B  05A0               	andwf	___ftpack@arg,f
 15873  098C  307F               	movlw	127
 15874  098D  05A1               	andwf	___ftpack@arg+1,f
 15875  098E  30FF               	movlw	255
 15876  098F  05A2               	andwf	___ftpack@arg+2,f
 15877  0990                     l2908:	
 15878  0990  1003               	clrc
 15879  0991  0CA3               	rrf	___ftpack@exp,f
 15880  0992  0823               	movf	___ftpack@exp,w
 15881  0993  00A5               	movwf	??___ftpack
 15882  0994  01A6               	clrf	??___ftpack+1
 15883  0995  01A7               	clrf	??___ftpack+2
 15884  0996  3010               	movlw	16
 15885  0997                     u8565:	
 15886  0997  35A5               	lslf	??___ftpack,f
 15887  0998  0DA6               	rlf	??___ftpack+1,f
 15888  0999  0DA7               	rlf	??___ftpack+2,f
 15889  099A  0B89               	decfsz	9,f
 15890  099B  2997               	goto	u8565
 15891  099C  0825               	movf	??___ftpack,w
 15892  099D  04A0               	iorwf	___ftpack@arg,f
 15893  099E  0826               	movf	??___ftpack+1,w
 15894  099F  04A1               	iorwf	___ftpack@arg+1,f
 15895  09A0  0827               	movf	??___ftpack+2,w
 15896  09A1  04A2               	iorwf	___ftpack@arg+2,f
 15897  09A2  0824               	movf	___ftpack@sign,w
 15898  09A3  1903               	btfsc	3,2
 15899  09A4  0008               	return
 15900  09A5  17A2               	bsf	___ftpack@arg+2,7
 15901  09A6  0008               	return
 15902  09A7                     __end_of___ftpack:	
 15903                           
 15904                           	psect	text98
 15905  1EF5                     __ptext98:	
 15906 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15907 ;; Defined at:
 15908 ;;		line 803 in file "../src/Dimmer_B1.c"
 15909 ;; Parameters:    Size  Location     Type
 15910 ;;  lights          1    wreg     unsigned char 
 15911 ;;  command         1    2[BANK0 ] unsigned char 
 15912 ;; Auto vars:     Size  Location     Type
 15913 ;;  lights          1    4[BANK0 ] unsigned char 
 15914 ;; Return value:  Size  Location     Type
 15915 ;;		None               void
 15916 ;; Registers used:
 15917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15918 ;; Tracked objects:
 15919 ;;		On entry : 0/0
 15920 ;;		On exit  : 0/0
 15921 ;;		Unchanged: 0/0
 15922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15923 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15925 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15926 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15927 ;;Total ram usage:        3 bytes
 15928 ;; Hardware stack levels used:    1
 15929 ;; Hardware stack levels required when called:    6
 15930 ;; This function calls:
 15931 ;;		_DimmerLightsPointSelect
 15932 ;; This function is called by:
 15933 ;;		_setDimmerLights_SwOff
 15934 ;;		_setDimmerLights_AdjControl
 15935 ;; This function uses a non-reentrant model
 15936 ;;
 15937                           
 15938                           
 15939                           ;psect for function _setDimmerLights_TriggerAdj
 15940  1EF5                     _setDimmerLights_TriggerAdj:	
 15941                           
 15942                           ;incstack = 0
 15943                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15944                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15945  1EF5  0020               	movlb	0	; select bank0
 15946  1EF6  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15947                           
 15948                           ;Dimmer_B1.c: 804: DimmerLightsPointSelect(lights);
 15949  1EF7  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15950  1EF8  319C  24DD         	fcall	_DimmerLightsPointSelect
 15951                           
 15952                           ;Dimmer_B1.c: 805: DimmerLights->TriggerAdj = 1;
 15953  1EFA  0877               	movf	_DimmerLights,w
 15954  1EFB  3E08               	addlw	8
 15955  1EFC  0086               	movwf	6
 15956  1EFD  3001               	movlw	1	; select bank2/3
 15957  1EFE  0087               	movwf	7
 15958  1EFF  1601               	bsf	1,4
 15959                           
 15960                           ;Dimmer_B1.c: 806: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15961  1F00  0020               	movlb	0	; select bank0
 15962  1F01  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15963  1F02  3A01               	xorlw	1
 15964  1F03  3000               	movlw	0
 15965  1F04  1903               	skipnz
 15966  1F05  3001               	movlw	1
 15967  1F06  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15968  1F07  0877               	movf	_DimmerLights,w
 15969  1F08  3E08               	addlw	8
 15970  1F09  0086               	movwf	6
 15971  1F0A  3001               	movlw	1	; select bank2/3
 15972  1F0B  0087               	movwf	7
 15973  1F0C  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15974  1F0D  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15975  1F0E  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15976  1F0F  0801               	movf	1,w
 15977  1F10  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15978  1F11  39F7               	andlw	-9
 15979  1F12  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15980  1F13  0081               	movwf	1
 15981  1F14  0008               	return
 15982  1F15                     __end_of_setDimmerLights_TriggerAdj:	
 15983                           
 15984                           	psect	text99
 15985  1E99                     __ptext99:	
 15986 ;; *************** function _setDimmerLights_Trigger *****************
 15987 ;; Defined at:
 15988 ;;		line 797 in file "../src/Dimmer_B1.c"
 15989 ;; Parameters:    Size  Location     Type
 15990 ;;  lights          1    wreg     unsigned char 
 15991 ;;  command         1    2[BANK0 ] unsigned char 
 15992 ;; Auto vars:     Size  Location     Type
 15993 ;;  lights          1    4[BANK0 ] unsigned char 
 15994 ;; Return value:  Size  Location     Type
 15995 ;;		None               void
 15996 ;; Registers used:
 15997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15998 ;; Tracked objects:
 15999 ;;		On entry : 0/0
 16000 ;;		On exit  : 0/0
 16001 ;;		Unchanged: 0/0
 16002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16003 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16004 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16005 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16006 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16007 ;;Total ram usage:        3 bytes
 16008 ;; Hardware stack levels used:    1
 16009 ;; Hardware stack levels required when called:    6
 16010 ;; This function calls:
 16011 ;;		_DimmerLightsPointSelect
 16012 ;; This function is called by:
 16013 ;;		_setDimmerLights_SwOn
 16014 ;;		_setDimmerLights_SwOff
 16015 ;; This function uses a non-reentrant model
 16016 ;;
 16017                           
 16018                           
 16019                           ;psect for function _setDimmerLights_Trigger
 16020  1E99                     _setDimmerLights_Trigger:	
 16021                           
 16022                           ;incstack = 0
 16023                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16024                           ;setDimmerLights_Trigger@lights stored from wreg
 16025  1E99  0020               	movlb	0	; select bank0
 16026  1E9A  00A4               	movwf	setDimmerLights_Trigger@lights
 16027                           
 16028                           ;Dimmer_B1.c: 798: DimmerLightsPointSelect(lights);
 16029  1E9B  0824               	movf	setDimmerLights_Trigger@lights,w
 16030  1E9C  319C  24DD         	fcall	_DimmerLightsPointSelect
 16031                           
 16032                           ;Dimmer_B1.c: 799: DimmerLights->Trigger = 1;
 16033  1E9E  0877               	movf	_DimmerLights,w
 16034  1E9F  3E08               	addlw	8
 16035  1EA0  0086               	movwf	6
 16036  1EA1  3001               	movlw	1	; select bank2/3
 16037  1EA2  0087               	movwf	7
 16038  1EA3  1501               	bsf	1,2
 16039                           
 16040                           ;Dimmer_B1.c: 800: DimmerLights->Switch = command == 1 ? 1 : 0;
 16041  1EA4  0020               	movlb	0	; select bank0
 16042  1EA5  0822               	movf	setDimmerLights_Trigger@command,w
 16043  1EA6  3A01               	xorlw	1
 16044  1EA7  3000               	movlw	0
 16045  1EA8  1903               	skipnz
 16046  1EA9  3001               	movlw	1
 16047  1EAA  00A3               	movwf	??_setDimmerLights_Trigger
 16048  1EAB  0877               	movf	_DimmerLights,w
 16049  1EAC  3E08               	addlw	8
 16050  1EAD  0086               	movwf	6
 16051  1EAE  3001               	movlw	1	; select bank2/3
 16052  1EAF  0087               	movwf	7
 16053  1EB0  0DA3               	rlf	??_setDimmerLights_Trigger,f
 16054  1EB1  0801               	movf	1,w
 16055  1EB2  0623               	xorwf	??_setDimmerLights_Trigger,w
 16056  1EB3  39FD               	andlw	-3
 16057  1EB4  0623               	xorwf	??_setDimmerLights_Trigger,w
 16058  1EB5  0081               	movwf	1
 16059  1EB6  0008               	return
 16060  1EB7                     __end_of_setDimmerLights_Trigger:	
 16061                           
 16062                           	psect	text100
 16063  08E5                     __ptext100:	
 16064 ;; *************** function _setDelayOff_GO *****************
 16065 ;; Defined at:
 16066 ;;		line 86 in file "../src/DelayOff_B1.c"
 16067 ;; Parameters:    Size  Location     Type
 16068 ;;  sw              1    wreg     unsigned char 
 16069 ;;  command         1   10[BANK0 ] unsigned char 
 16070 ;;  value           1   11[BANK0 ] unsigned char 
 16071 ;; Auto vars:     Size  Location     Type
 16072 ;;  sw              1   14[BANK0 ] unsigned char 
 16073 ;; Return value:  Size  Location     Type
 16074 ;;		None               void
 16075 ;; Registers used:
 16076 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16077 ;; Tracked objects:
 16078 ;;		On entry : 0/0
 16079 ;;		On exit  : 0/0
 16080 ;;		Unchanged: 0/0
 16081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16082 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16083 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16084 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16085 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16086 ;;Total ram usage:        5 bytes
 16087 ;; Hardware stack levels used:    1
 16088 ;; Hardware stack levels required when called:    7
 16089 ;; This function calls:
 16090 ;;		_DelayOffPointSelect
 16091 ;;		_DelayTimejudge
 16092 ;; This function is called by:
 16093 ;;		_setDimmerLights_SwOff
 16094 ;;		_setRFSW_Control
 16095 ;; This function uses a non-reentrant model
 16096 ;;
 16097                           
 16098                           
 16099                           ;psect for function _setDelayOff_GO
 16100  08E5                     _setDelayOff_GO:	
 16101                           
 16102                           ;incstack = 0
 16103                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16104                           ;setDelayOff_GO@sw stored from wreg
 16105  08E5  0020               	movlb	0	; select bank0
 16106  08E6  00AE               	movwf	setDelayOff_GO@sw
 16107                           
 16108                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
 16109  08E7  082E               	movf	setDelayOff_GO@sw,w
 16110  08E8  319D  253D  3188   	fcall	_DelayOffPointSelect
 16111                           
 16112                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
 16113  08EB  0876               	movf	_DelayOff,w
 16114  08EC  0086               	movwf	6
 16115  08ED  3001               	movlw	1	; select bank2/3
 16116  08EE  0087               	movwf	7
 16117  08EF  1C01               	btfss	1,0
 16118  08F0  0008               	return
 16119                           
 16120                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
 16121  08F1  0020               	movlb	0	; select bank0
 16122  08F2  082A               	movf	setDelayOff_GO@command,w
 16123  08F3  3A01               	xorlw	1
 16124  08F4  3000               	movlw	0
 16125  08F5  1903               	skipnz
 16126  08F6  3001               	movlw	1
 16127  08F7  00AC               	movwf	??_setDelayOff_GO
 16128  08F8  0876               	movf	_DelayOff,w
 16129  08F9  0086               	movwf	6
 16130  08FA  3001               	movlw	1	; select bank2/3
 16131  08FB  0087               	movwf	7
 16132  08FC  0DAC               	rlf	??_setDelayOff_GO,f
 16133  08FD  0801               	movf	1,w
 16134  08FE  062C               	xorwf	??_setDelayOff_GO,w
 16135  08FF  39FD               	andlw	-3
 16136  0900  062C               	xorwf	??_setDelayOff_GO,w
 16137  0901  0081               	movwf	1
 16138                           
 16139                           ;DelayOff_B1.c: 90: if (command == 1) {
 16140  0902  082A               	movf	setDelayOff_GO@command,w
 16141  0903  3A01               	xorlw	1
 16142  0904  1D03               	skipz
 16143  0905  2930               	goto	l8744
 16144                           
 16145                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
 16146  0906  082B               	movf	setDelayOff_GO@value,w
 16147  0907  3188  2001  3188   	fcall	_DelayTimejudge
 16148  090A  0020               	movlb	0	; select bank0
 16149  090B  00AC               	movwf	??_setDelayOff_GO
 16150  090C  0876               	movf	_DelayOff,w
 16151  090D  0086               	movwf	6
 16152  090E  3001               	movlw	1	; select bank2/3
 16153  090F  0087               	movwf	7
 16154  0910  082C               	movf	??_setDelayOff_GO,w
 16155  0911  0081               	movwf	1
 16156                           
 16157                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16158  0912  300F               	movlw	15
 16159  0913  052B               	andwf	setDelayOff_GO@value,w
 16160  0914  00AC               	movwf	??_setDelayOff_GO
 16161  0915  082C               	movf	??_setDelayOff_GO,w
 16162  0916  3A05               	xorlw	5
 16163  0917  1903               	skipnz
 16164  0918  291D               	goto	l8738
 16165  0919  082B               	movf	setDelayOff_GO@value,w
 16166  091A  390F               	andlw	15
 16167  091B  1D03               	btfss	3,2
 16168  091C  2923               	goto	l8742
 16169  091D                     l8738:	
 16170  091D  3026               	movlw	38
 16171  091E  022B               	subwf	setDelayOff_GO@value,w
 16172  091F  1803               	skipnc
 16173  0920  2923               	goto	l8742
 16174                           
 16175                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
 16176  0921  082B               	movf	setDelayOff_GO@value,w
 16177  0922  2924               	goto	L8
 16178  0923                     l8742:	
 16179                           ;DelayOff_B1.c: 94: } else {
 16180                           
 16181                           
 16182                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
 16183  0923  3005               	movlw	5
 16184  0924                     L8:	
 16185  0924  00AC               	movwf	??_setDelayOff_GO
 16186  0925  082E               	movf	setDelayOff_GO@sw,w
 16187  0926  3E1A               	addlw	26
 16188  0927  077B               	addwf	_product,w
 16189  0928  00AD               	movwf	??_setDelayOff_GO+1
 16190  0929  082D               	movf	??_setDelayOff_GO+1,w
 16191  092A  0086               	movwf	6
 16192  092B  3002               	movlw	2	; select bank4/5
 16193  092C  0087               	movwf	7
 16194  092D  082C               	movf	??_setDelayOff_GO,w
 16195  092E  0081               	movwf	1
 16196                           
 16197                           ;DelayOff_B1.c: 96: }
 16198                           ;DelayOff_B1.c: 97: } else {
 16199  092F  2939               	goto	l8746
 16200  0930                     l8744:	
 16201                           
 16202                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
 16203  0930  082E               	movf	setDelayOff_GO@sw,w
 16204  0931  3E1A               	addlw	26
 16205  0932  077B               	addwf	_product,w
 16206  0933  00AC               	movwf	??_setDelayOff_GO
 16207  0934  082C               	movf	??_setDelayOff_GO,w
 16208  0935  0086               	movwf	6
 16209  0936  3002               	movlw	2	; select bank4/5
 16210  0937  0087               	movwf	7
 16211  0938  0181               	clrf	1
 16212  0939                     l8746:	
 16213                           
 16214                           ;DelayOff_B1.c: 99: }
 16215                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
 16216  0939  0876               	movf	_DelayOff,w
 16217  093A  0086               	movwf	6
 16218  093B  3001               	movlw	1	; select bank2/3
 16219  093C  0087               	movwf	7
 16220  093D  3000               	movlw	0
 16221  093E  3FC0               	movwi [0]fsr1
 16222  093F  3FC1               	movwi [1]fsr1
 16223                           
 16224                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
 16225  0940  0876               	movf	_DelayOff,w
 16226  0941  0086               	movwf	6
 16227  0942  3001               	movlw	1	; select bank2/3
 16228  0943  0087               	movwf	7
 16229  0944  0181               	clrf	1
 16230  0945  0008               	return
 16231  0946                     __end_of_setDelayOff_GO:	
 16232                           
 16233                           	psect	text101
 16234  0801                     __ptext101:	
 16235 ;; *************** function _DelayTimejudge *****************
 16236 ;; Defined at:
 16237 ;;		line 106 in file "../src/DelayOff_B1.c"
 16238 ;; Parameters:    Size  Location     Type
 16239 ;;  value           1    wreg     unsigned char 
 16240 ;; Auto vars:     Size  Location     Type
 16241 ;;  value           1    9[BANK0 ] unsigned char 
 16242 ;;  k               1    8[BANK0 ] unsigned char 
 16243 ;;  j               1    7[BANK0 ] unsigned char 
 16244 ;;  i               1    6[BANK0 ] unsigned char 
 16245 ;; Return value:  Size  Location     Type
 16246 ;;                  1    wreg      unsigned char 
 16247 ;; Registers used:
 16248 ;;		wreg, status,2, status,0, pclath, cstack
 16249 ;; Tracked objects:
 16250 ;;		On entry : 0/0
 16251 ;;		On exit  : 0/0
 16252 ;;		Unchanged: 0/0
 16253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16255 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16256 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16257 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16258 ;;Total ram usage:        6 bytes
 16259 ;; Hardware stack levels used:    1
 16260 ;; Hardware stack levels required when called:    6
 16261 ;; This function calls:
 16262 ;;		___bmul
 16263 ;; This function is called by:
 16264 ;;		_setDelayOff_GO
 16265 ;; This function uses a non-reentrant model
 16266 ;;
 16267                           
 16268                           
 16269                           ;psect for function _DelayTimejudge
 16270  0801                     _DelayTimejudge:	
 16271                           
 16272                           ;incstack = 0
 16273                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16274                           ;DelayTimejudge@value stored from wreg
 16275  0801  0020               	movlb	0	; select bank0
 16276  0802  00A9               	movwf	DelayTimejudge@value
 16277                           
 16278                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
 16279  0803  3005               	movlw	5
 16280  0804  00A4               	movwf	??_DelayTimejudge
 16281  0805  0824               	movf	??_DelayTimejudge,w
 16282  0806  00A6               	movwf	DelayTimejudge@i
 16283  0807  01A7               	clrf	DelayTimejudge@j
 16284  0808  01A8               	clrf	DelayTimejudge@k
 16285                           
 16286                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
 16287  0809  3031               	movlw	49
 16288  080A  0229               	subwf	DelayTimejudge@value,w
 16289  080B  1803               	skipnc
 16290  080C  2829               	goto	l8608
 16291                           
 16292                           ;DelayOff_B1.c: 109: j = value & 0x0f;
 16293  080D  0829               	movf	DelayTimejudge@value,w
 16294  080E  390F               	andlw	15
 16295  080F  00A4               	movwf	??_DelayTimejudge
 16296  0810  0824               	movf	??_DelayTimejudge,w
 16297  0811  00A7               	movwf	DelayTimejudge@j
 16298                           
 16299                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
 16300  0812  0829               	movf	DelayTimejudge@value,w
 16301  0813  00A4               	movwf	??_DelayTimejudge
 16302  0814  3004               	movlw	4
 16303  0815                     u9175:	
 16304  0815  36A4               	lsrf	??_DelayTimejudge,f
 16305  0816  0B89               	decfsz	9,f
 16306  0817  2815               	goto	u9175
 16307  0818  0824               	movf	??_DelayTimejudge,w
 16308  0819  390F               	andlw	15
 16309  081A  00A5               	movwf	??_DelayTimejudge+1
 16310  081B  0825               	movf	??_DelayTimejudge+1,w
 16311  081C  00A8               	movwf	DelayTimejudge@k
 16312                           
 16313                           ;DelayOff_B1.c: 111: i = j + (k * 10);
 16314  081D  300A               	movlw	10
 16315  081E  00A4               	movwf	??_DelayTimejudge
 16316  081F  0824               	movf	??_DelayTimejudge,w
 16317  0820  00A0               	movwf	___bmul@multiplicand
 16318  0821  0828               	movf	DelayTimejudge@k,w
 16319  0822  319C  2495         	fcall	___bmul
 16320  0824  0020               	movlb	0	; select bank0
 16321  0825  0727               	addwf	DelayTimejudge@j,w
 16322  0826  00A5               	movwf	??_DelayTimejudge+1
 16323  0827  0825               	movf	??_DelayTimejudge+1,w
 16324  0828  00A6               	movwf	DelayTimejudge@i
 16325  0829                     l8608:	
 16326                           
 16327                           ;DelayOff_B1.c: 112: }
 16328                           ;DelayOff_B1.c: 133: return i;
 16329  0829  0826               	movf	DelayTimejudge@i,w
 16330  082A  0008               	return
 16331  082B                     __end_of_DelayTimejudge:	
 16332                           
 16333                           	psect	text102
 16334  1C95                     __ptext102:	
 16335 ;; *************** function ___bmul *****************
 16336 ;; Defined at:
 16337 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16338 ;; Parameters:    Size  Location     Type
 16339 ;;  multiplier      1    wreg     unsigned char 
 16340 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16341 ;; Auto vars:     Size  Location     Type
 16342 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16343 ;;  product         1    2[BANK0 ] unsigned char 
 16344 ;; Return value:  Size  Location     Type
 16345 ;;                  1    wreg      unsigned char 
 16346 ;; Registers used:
 16347 ;;		wreg, status,2, status,0
 16348 ;; Tracked objects:
 16349 ;;		On entry : 0/0
 16350 ;;		On exit  : 0/0
 16351 ;;		Unchanged: 0/0
 16352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16353 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16354 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16356 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16357 ;;Total ram usage:        4 bytes
 16358 ;; Hardware stack levels used:    1
 16359 ;; Hardware stack levels required when called:    5
 16360 ;; This function calls:
 16361 ;;		Nothing
 16362 ;; This function is called by:
 16363 ;;		_DelayTimejudge
 16364 ;; This function uses a non-reentrant model
 16365 ;;
 16366                           
 16367                           
 16368                           ;psect for function ___bmul
 16369  1C95                     ___bmul:	
 16370                           
 16371                           ;incstack = 0
 16372                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16373                           ;___bmul@multiplier stored from wreg
 16374  1C95  0020               	movlb	0	; select bank0
 16375  1C96  00A3               	movwf	___bmul@multiplier
 16376  1C97  01A2               	clrf	___bmul@product
 16377  1C98                     l8354:	
 16378  1C98  1C23               	btfss	___bmul@multiplier,0
 16379  1C99  2C9E               	goto	l8358
 16380  1C9A  0820               	movf	___bmul@multiplicand,w
 16381  1C9B  00A1               	movwf	??___bmul
 16382  1C9C  0821               	movf	??___bmul,w
 16383  1C9D  07A2               	addwf	___bmul@product,f
 16384  1C9E                     l8358:	
 16385  1C9E  1003               	clrc
 16386  1C9F  0DA0               	rlf	___bmul@multiplicand,f
 16387  1CA0  1003               	clrc
 16388  1CA1  0CA3               	rrf	___bmul@multiplier,f
 16389  1CA2  08A3               	movf	___bmul@multiplier,f
 16390  1CA3  1D03               	skipz
 16391  1CA4  2C98               	goto	l8354
 16392  1CA5  0822               	movf	___bmul@product,w
 16393  1CA6  0008               	return
 16394  1CA7                     __end_of___bmul:	
 16395                           
 16396                           	psect	text103
 16397  1C40                     __ptext103:	
 16398 ;; *************** function _getDimmerLights_Status *****************
 16399 ;; Defined at:
 16400 ;;		line 455 in file "../src/Dimmer_B1.c"
 16401 ;; Parameters:    Size  Location     Type
 16402 ;;  lights          1    wreg     unsigned char 
 16403 ;; Auto vars:     Size  Location     Type
 16404 ;;  lights          1    2[BANK0 ] unsigned char 
 16405 ;;  status          1    3[BANK0 ] unsigned char 
 16406 ;; Return value:  Size  Location     Type
 16407 ;;                  1    wreg      unsigned char 
 16408 ;; Registers used:
 16409 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16410 ;; Tracked objects:
 16411 ;;		On entry : 0/0
 16412 ;;		On exit  : 0/0
 16413 ;;		Unchanged: 0/0
 16414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16416 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16418 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16419 ;;Total ram usage:        2 bytes
 16420 ;; Hardware stack levels used:    1
 16421 ;; Hardware stack levels required when called:    6
 16422 ;; This function calls:
 16423 ;;		_DimmerLightsPointSelect
 16424 ;; This function is called by:
 16425 ;;		_DlyOff_Main
 16426 ;;		_setDimmerLights_ErrorClose
 16427 ;;		_getMain_LightsStatus
 16428 ;;		_setRFSW_Control
 16429 ;;		_setRFSW_AdjControl
 16430 ;; This function uses a non-reentrant model
 16431 ;;
 16432                           
 16433                           
 16434                           ;psect for function _getDimmerLights_Status
 16435  1C40                     _getDimmerLights_Status:	
 16436                           
 16437                           ;incstack = 0
 16438                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16439                           ;getDimmerLights_Status@lights stored from wreg
 16440  1C40  0020               	movlb	0	; select bank0
 16441  1C41  00A2               	movwf	getDimmerLights_Status@lights
 16442                           
 16443                           ;Dimmer_B1.c: 456: DimmerLightsPointSelect(lights);
 16444  1C42  0822               	movf	getDimmerLights_Status@lights,w
 16445  1C43  319C  24DD         	fcall	_DimmerLightsPointSelect
 16446                           
 16447                           ;Dimmer_B1.c: 457: char status = DimmerLights->Status == 1 ? 1 : 0;
 16448  1C45  0877               	movf	_DimmerLights,w
 16449  1C46  0086               	movwf	6
 16450  1C47  3001               	movlw	1	; select bank2/3
 16451  1C48  0087               	movwf	7
 16452  1C49  3000               	movlw	0
 16453  1C4A  1A81               	btfsc	1,5
 16454  1C4B  3001               	movlw	1
 16455  1C4C  0020               	movlb	0	; select bank0
 16456  1C4D  00A3               	movwf	getDimmerLights_Status@status
 16457                           
 16458                           ;Dimmer_B1.c: 458: return status;
 16459  1C4E  0823               	movf	getDimmerLights_Status@status,w
 16460  1C4F  0008               	return
 16461  1C50                     __end_of_getDimmerLights_Status:	
 16462                           
 16463                           	psect	text104
 16464  1CDD                     __ptext104:	
 16465 ;; *************** function _DimmerLightsPointSelect *****************
 16466 ;; Defined at:
 16467 ;;		line 320 in file "../src/Dimmer_B1.c"
 16468 ;; Parameters:    Size  Location     Type
 16469 ;;  lights          1    wreg     unsigned char 
 16470 ;; Auto vars:     Size  Location     Type
 16471 ;;  lights          1    1[BANK0 ] unsigned char 
 16472 ;; Return value:  Size  Location     Type
 16473 ;;		None               void
 16474 ;; Registers used:
 16475 ;;		wreg
 16476 ;; Tracked objects:
 16477 ;;		On entry : 0/0
 16478 ;;		On exit  : 0/0
 16479 ;;		Unchanged: 0/0
 16480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16483 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16484 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16485 ;;Total ram usage:        2 bytes
 16486 ;; Hardware stack levels used:    1
 16487 ;; Hardware stack levels required when called:    5
 16488 ;; This function calls:
 16489 ;;		Nothing
 16490 ;; This function is called by:
 16491 ;;		_setDimmerLights_Initialization
 16492 ;;		_setDimmerLights_Main
 16493 ;;		_getDimmerLights_Status
 16494 ;;		_setDimmerLights_SwOn
 16495 ;;		_setDimmerLights_SwOff
 16496 ;;		_setDimmerLights_AdjControl
 16497 ;;		_setDimmerLights_ErrorClose
 16498 ;;		_setDimmerLights
 16499 ;;		_setDimmerLights_Adj
 16500 ;;		_setDimmerLights_AdjRF
 16501 ;;		_setDimmerLights_Trigger
 16502 ;;		_setDimmerLights_TriggerAdj
 16503 ;;		_setDimmerLights_Status
 16504 ;;		_setDimmerLights_GO
 16505 ;;		_setDimmerLights_MaxmumValue
 16506 ;; This function uses a non-reentrant model
 16507 ;;
 16508                           
 16509                           
 16510                           ;psect for function _DimmerLightsPointSelect
 16511  1CDD                     _DimmerLightsPointSelect:	
 16512                           
 16513                           ;incstack = 0
 16514                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16515                           ;DimmerLightsPointSelect@lights stored from wreg
 16516  1CDD  0020               	movlb	0	; select bank0
 16517  1CDE  00A1               	movwf	DimmerLightsPointSelect@lights
 16518                           
 16519                           ;Dimmer_B1.c: 322: if (lights == 1) {
 16520  1CDF  0821               	movf	DimmerLightsPointSelect@lights,w
 16521  1CE0  3A01               	xorlw	1
 16522  1CE1  1D03               	skipz
 16523  1CE2  2CE7               	goto	l775
 16524                           
 16525                           ;Dimmer_B1.c: 323: DimmerLights = &DimmerLights1;
 16526  1CE3  30BE               	movlw	_DimmerLights1& (0+255)
 16527  1CE4  00A0               	movwf	??_DimmerLightsPointSelect
 16528  1CE5  0820               	movf	??_DimmerLightsPointSelect,w
 16529  1CE6  00F7               	movwf	_DimmerLights
 16530  1CE7                     l775:	
 16531                           
 16532                           ;Dimmer_B1.c: 324: }
 16533                           ;Dimmer_B1.c: 327: if (lights == 2) {
 16534  1CE7  0821               	movf	DimmerLightsPointSelect@lights,w
 16535  1CE8  3A02               	xorlw	2
 16536  1CE9  1D03               	skipz
 16537  1CEA  0008               	return
 16538                           
 16539                           ;Dimmer_B1.c: 328: DimmerLights = &DimmerLights2;
 16540  1CEB  30CD               	movlw	_DimmerLights2& (0+255)
 16541  1CEC  00A0               	movwf	??_DimmerLightsPointSelect
 16542  1CED  0820               	movf	??_DimmerLightsPointSelect,w
 16543  1CEE  00F7               	movwf	_DimmerLights
 16544  1CEF  0008               	return
 16545  1CF0                     __end_of_DimmerLightsPointSelect:	
 16546                           
 16547                           	psect	text105
 16548  1B71                     __ptext105:	
 16549 ;; *************** function _DelayOff_Initialization *****************
 16550 ;; Defined at:
 16551 ;;		line 26 in file "../src/DelayOff_B1.c"
 16552 ;; Parameters:    Size  Location     Type
 16553 ;;		None
 16554 ;; Auto vars:     Size  Location     Type
 16555 ;;		None
 16556 ;; Return value:  Size  Location     Type
 16557 ;;		None               void
 16558 ;; Registers used:
 16559 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16560 ;; Tracked objects:
 16561 ;;		On entry : 0/0
 16562 ;;		On exit  : 0/0
 16563 ;;		Unchanged: 0/0
 16564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16569 ;;Total ram usage:        0 bytes
 16570 ;; Hardware stack levels used:    1
 16571 ;; Hardware stack levels required when called:    7
 16572 ;; This function calls:
 16573 ;;		_DlyOff_Initialization
 16574 ;; This function is called by:
 16575 ;;		_main
 16576 ;; This function uses a non-reentrant model
 16577 ;;
 16578                           
 16579                           
 16580                           ;psect for function _DelayOff_Initialization
 16581  1B71                     _DelayOff_Initialization:	
 16582                           
 16583                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16584                           
 16585                           ;incstack = 0
 16586                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16587  1B71  3001               	movlw	1
 16588  1B72  319B  2391  319B   	fcall	_DlyOff_Initialization
 16589                           
 16590                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16591  1B75  3002               	movlw	2
 16592  1B76  319B  2391         	fcall	_DlyOff_Initialization
 16593  1B78  0008               	return
 16594  1B79                     __end_of_DelayOff_Initialization:	
 16595                           
 16596                           	psect	text106
 16597  1B91                     __ptext106:	
 16598 ;; *************** function _DlyOff_Initialization *****************
 16599 ;; Defined at:
 16600 ;;		line 56 in file "../src/DelayOff_B1.c"
 16601 ;; Parameters:    Size  Location     Type
 16602 ;;  sw              1    wreg     unsigned char 
 16603 ;; Auto vars:     Size  Location     Type
 16604 ;;  sw              1    2[BANK0 ] unsigned char 
 16605 ;; Return value:  Size  Location     Type
 16606 ;;		None               void
 16607 ;; Registers used:
 16608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16609 ;; Tracked objects:
 16610 ;;		On entry : 0/0
 16611 ;;		On exit  : 0/0
 16612 ;;		Unchanged: 0/0
 16613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16617 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16618 ;;Total ram usage:        1 bytes
 16619 ;; Hardware stack levels used:    1
 16620 ;; Hardware stack levels required when called:    6
 16621 ;; This function calls:
 16622 ;;		_DelayOffPointSelect
 16623 ;; This function is called by:
 16624 ;;		_DelayOff_Initialization
 16625 ;; This function uses a non-reentrant model
 16626 ;;
 16627                           
 16628                           
 16629                           ;psect for function _DlyOff_Initialization
 16630  1B91                     _DlyOff_Initialization:	
 16631                           
 16632                           ;incstack = 0
 16633                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16634                           ;DlyOff_Initialization@sw stored from wreg
 16635  1B91  0020               	movlb	0	; select bank0
 16636  1B92  00A2               	movwf	DlyOff_Initialization@sw
 16637                           
 16638                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16639  1B93  0822               	movf	DlyOff_Initialization@sw,w
 16640  1B94  319D  253D         	fcall	_DelayOffPointSelect
 16641                           
 16642                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 16643  1B96  0876               	movf	_DelayOff,w
 16644  1B97  0086               	movwf	6
 16645  1B98  3001               	movlw	1	; select bank2/3
 16646  1B99  0087               	movwf	7
 16647  1B9A  1401               	bsf	1,0
 16648  1B9B  0008               	return
 16649  1B9C                     __end_of_DlyOff_Initialization:	
 16650                           
 16651                           	psect	text107
 16652  1D3D                     __ptext107:	
 16653 ;; *************** function _DelayOffPointSelect *****************
 16654 ;; Defined at:
 16655 ;;		line 7 in file "../src/DelayOff_B1.c"
 16656 ;; Parameters:    Size  Location     Type
 16657 ;;  sw              1    wreg     unsigned char 
 16658 ;; Auto vars:     Size  Location     Type
 16659 ;;  sw              1    1[BANK0 ] unsigned char 
 16660 ;; Return value:  Size  Location     Type
 16661 ;;		None               void
 16662 ;; Registers used:
 16663 ;;		wreg
 16664 ;; Tracked objects:
 16665 ;;		On entry : 0/0
 16666 ;;		On exit  : 0/0
 16667 ;;		Unchanged: 0/0
 16668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16670 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16671 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16672 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16673 ;;Total ram usage:        2 bytes
 16674 ;; Hardware stack levels used:    1
 16675 ;; Hardware stack levels required when called:    5
 16676 ;; This function calls:
 16677 ;;		Nothing
 16678 ;; This function is called by:
 16679 ;;		_DlyOff_Initialization
 16680 ;;		_DlyOff_Main
 16681 ;;		_setDelayOff_GO
 16682 ;; This function uses a non-reentrant model
 16683 ;;
 16684                           
 16685                           
 16686                           ;psect for function _DelayOffPointSelect
 16687  1D3D                     _DelayOffPointSelect:	
 16688                           
 16689                           ;incstack = 0
 16690                           ; Regs used in _DelayOffPointSelect: [wreg]
 16691                           ;DelayOffPointSelect@sw stored from wreg
 16692  1D3D  0020               	movlb	0	; select bank0
 16693  1D3E  00A1               	movwf	DelayOffPointSelect@sw
 16694                           
 16695                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16696  1D3F  0821               	movf	DelayOffPointSelect@sw,w
 16697  1D40  3A01               	xorlw	1
 16698  1D41  1D03               	skipz
 16699  1D42  2D48               	goto	l8592
 16700                           
 16701                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16702  1D43  3069               	movlw	_DlySw1& (0+255)
 16703  1D44  00A0               	movwf	??_DelayOffPointSelect
 16704  1D45  0820               	movf	??_DelayOffPointSelect,w
 16705  1D46  00F6               	movwf	_DelayOff
 16706                           
 16707                           ;DelayOff_B1.c: 11: }
 16708  1D47  0008               	return
 16709  1D48                     l8592:	
 16710                           
 16711                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 16712  1D48  0821               	movf	DelayOffPointSelect@sw,w
 16713  1D49  3A02               	xorlw	2
 16714  1D4A  1D03               	skipz
 16715  1D4B  0008               	return
 16716                           
 16717                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 16718  1D4C  306B               	movlw	_DlySw2& (0+255)
 16719  1D4D  00A0               	movwf	??_DelayOffPointSelect
 16720  1D4E  0820               	movf	??_DelayOffPointSelect,w
 16721  1D4F  00F6               	movwf	_DelayOff
 16722  1D50  0008               	return
 16723  1D51                     __end_of_DelayOffPointSelect:	
 16724                           
 16725                           	psect	text108
 16726  1D8E                     __ptext108:	
 16727 ;; *************** function _CC2500_PowerOnInitial *****************
 16728 ;; Defined at:
 16729 ;;		line 122 in file "../src/CC2500_B1.c"
 16730 ;; Parameters:    Size  Location     Type
 16731 ;;		None
 16732 ;; Auto vars:     Size  Location     Type
 16733 ;;		None
 16734 ;; Return value:  Size  Location     Type
 16735 ;;		None               void
 16736 ;; Registers used:
 16737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16738 ;; Tracked objects:
 16739 ;;		On entry : 0/0
 16740 ;;		On exit  : 0/0
 16741 ;;		Unchanged: 0/0
 16742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16747 ;;Total ram usage:        0 bytes
 16748 ;; Hardware stack levels used:    1
 16749 ;; Hardware stack levels required when called:    8
 16750 ;; This function calls:
 16751 ;;		_CC2500_ClearRXFIFO
 16752 ;;		_CC2500_ClearTXFIFO
 16753 ;;		_CC2500_FrequencyCabr
 16754 ;;		_CC2500_InitPATable
 16755 ;;		_CC2500_InitSetREG
 16756 ;;		_CC2500_PowerRST
 16757 ;;		_CC2500_SIDLEMode
 16758 ;; This function is called by:
 16759 ;;		_main
 16760 ;; This function uses a non-reentrant model
 16761 ;;
 16762                           
 16763                           
 16764                           ;psect for function _CC2500_PowerOnInitial
 16765  1D8E                     _CC2500_PowerOnInitial:	
 16766                           
 16767                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 16768                           
 16769                           ;incstack = 0
 16770                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16771  1D8E  3193  23E6  319D   	fcall	_CC2500_PowerRST
 16772                           
 16773                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 16774  1D91  3191  2133  319D   	fcall	_CC2500_InitSetREG
 16775                           
 16776                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 16777  1D94  319E  26B7  319D   	fcall	_CC2500_InitPATable
 16778                           
 16779                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 16780  1D97  319B  2340  319D   	fcall	_CC2500_ClearTXFIFO
 16781                           
 16782                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 16783  1D9A  319B  233C  319D   	fcall	_CC2500_ClearRXFIFO
 16784                           
 16785                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 16786  1D9D  319B  23A7  319D   	fcall	_CC2500_FrequencyCabr
 16787                           
 16788                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 16789  1DA0  319B  2344         	fcall	_CC2500_SIDLEMode
 16790  1DA2  0008               	return
 16791  1DA3                     __end_of_CC2500_PowerOnInitial:	
 16792                           
 16793                           	psect	text109
 16794  1B44                     __ptext109:	
 16795 ;; *************** function _CC2500_SIDLEMode *****************
 16796 ;; Defined at:
 16797 ;;		line 212 in file "../src/CC2500_B1.c"
 16798 ;; Parameters:    Size  Location     Type
 16799 ;;		None
 16800 ;; Auto vars:     Size  Location     Type
 16801 ;;		None
 16802 ;; Return value:  Size  Location     Type
 16803 ;;		None               void
 16804 ;; Registers used:
 16805 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16806 ;; Tracked objects:
 16807 ;;		On entry : 0/0
 16808 ;;		On exit  : 0/0
 16809 ;;		Unchanged: 0/0
 16810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;Total ram usage:        0 bytes
 16816 ;; Hardware stack levels used:    1
 16817 ;; Hardware stack levels required when called:    7
 16818 ;; This function calls:
 16819 ;;		_CC2500_WriteCommand
 16820 ;; This function is called by:
 16821 ;;		_CC2500_PowerOnInitial
 16822 ;; This function uses a non-reentrant model
 16823 ;;
 16824                           
 16825                           
 16826                           ;psect for function _CC2500_SIDLEMode
 16827  1B44                     _CC2500_SIDLEMode:	
 16828                           
 16829                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 16830                           
 16831                           ;incstack = 0
 16832                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16833  1B44  3036               	movlw	54
 16834  1B45  319E  262C         	fcall	_CC2500_WriteCommand
 16835  1B47  0008               	return
 16836  1B48                     __end_of_CC2500_SIDLEMode:	
 16837                           
 16838                           	psect	text110
 16839  13E6                     __ptext110:	
 16840 ;; *************** function _CC2500_PowerRST *****************
 16841 ;; Defined at:
 16842 ;;		line 135 in file "../src/CC2500_B1.c"
 16843 ;; Parameters:    Size  Location     Type
 16844 ;;		None
 16845 ;; Auto vars:     Size  Location     Type
 16846 ;;		None
 16847 ;; Return value:  Size  Location     Type
 16848 ;;		None               void
 16849 ;; Registers used:
 16850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16851 ;; Tracked objects:
 16852 ;;		On entry : 0/0
 16853 ;;		On exit  : 0/0
 16854 ;;		Unchanged: 0/0
 16855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16858 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16859 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16860 ;;Total ram usage:        1 bytes
 16861 ;; Hardware stack levels used:    1
 16862 ;; Hardware stack levels required when called:    6
 16863 ;; This function calls:
 16864 ;;		_CC2500_WriteByte
 16865 ;;		_DelayTime_1us
 16866 ;;		_Timeout_Counter
 16867 ;;		_set_TimeoutCleared
 16868 ;; This function is called by:
 16869 ;;		_CC2500_PowerOnInitial
 16870 ;; This function uses a non-reentrant model
 16871 ;;
 16872                           
 16873                           
 16874                           ;psect for function _CC2500_PowerRST
 16875  13E6                     _CC2500_PowerRST:	
 16876                           
 16877                           ;CC2500_B1.c: 136: RC1 = 0;
 16878                           
 16879                           ;incstack = 0
 16880                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16881  13E6  0020               	movlb	0	; select bank0
 16882  13E7  108E               	bcf	14,1	;volatile
 16883                           
 16884                           ;CC2500_B1.c: 137: RC0 = 0;
 16885  13E8  100E               	bcf	14,0	;volatile
 16886                           
 16887                           ;CC2500_B1.c: 138: RC4 = 1;
 16888  13E9  160E               	bsf	14,4	;volatile
 16889                           
 16890                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 16891  13EA  300A               	movlw	10
 16892  13EB  00A0               	movwf	DelayTime_1us@count
 16893  13EC  3000               	movlw	0
 16894  13ED  00A1               	movwf	DelayTime_1us@count+1
 16895  13EE  3190  2095  3193   	fcall	_DelayTime_1us
 16896                           
 16897                           ;CC2500_B1.c: 140: RC4 = 0;
 16898  13F1  0020               	movlb	0	; select bank0
 16899  13F2  120E               	bcf	14,4	;volatile
 16900                           
 16901                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 16902  13F3  300A               	movlw	10
 16903  13F4  00A0               	movwf	DelayTime_1us@count
 16904  13F5  3000               	movlw	0
 16905  13F6  00A1               	movwf	DelayTime_1us@count+1
 16906  13F7  3190  2095  3193   	fcall	_DelayTime_1us
 16907                           
 16908                           ;CC2500_B1.c: 142: RC4 = 1;
 16909  13FA  0020               	movlb	0	; select bank0
 16910  13FB  160E               	bsf	14,4	;volatile
 16911                           
 16912                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 16913  13FC  3028               	movlw	40
 16914  13FD  00A0               	movwf	DelayTime_1us@count
 16915  13FE  3000               	movlw	0
 16916  13FF  00A1               	movwf	DelayTime_1us@count+1
 16917  1400  3190  2095  3193   	fcall	_DelayTime_1us
 16918                           
 16919                           ;CC2500_B1.c: 144: RC4 = 0;
 16920  1403  0020               	movlb	0	; select bank0
 16921  1404  120E               	bcf	14,4	;volatile
 16922                           
 16923                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 16924  1405  3030               	movlw	48
 16925  1406  00A6               	movwf	??_CC2500_PowerRST
 16926  1407  0826               	movf	??_CC2500_PowerRST,w
 16927  1408  0021               	movlb	1	; select bank1
 16928  1409  00D2               	movwf	_SPI0Buffer^(0+128)
 16929                           
 16930                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 16931  140A  2C0E               	goto	l9606
 16932  140B                     l9604:	
 16933                           
 16934                           ;CC2500_B1.c: 147: Timeout_Counter();
 16935  140B  319D  2579  3193   	fcall	_Timeout_Counter
 16936  140E                     l9606:	
 16937  140E  0020               	movlb	0	; select bank0
 16938  140F  1D0E               	btfss	14,2	;volatile
 16939  1410  2C14               	goto	l9610
 16940  1411  0021               	movlb	1	; select bank1
 16941  1412  1D2D               	btfss	(_myMain^(0+128)+13),2
 16942  1413  2C0B               	goto	l9604
 16943  1414                     l9610:	
 16944                           
 16945                           ;CC2500_B1.c: 148: };
 16946                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 16947  1414  319B  234C  3193   	fcall	_set_TimeoutCleared
 16948                           
 16949                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 16950  1417  319D  25FA  3193   	fcall	_CC2500_WriteByte
 16951                           
 16952                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 16953  141A  2C1E               	goto	l9616
 16954  141B                     l9614:	
 16955                           
 16956                           ;CC2500_B1.c: 152: Timeout_Counter();
 16957  141B  319D  2579  3193   	fcall	_Timeout_Counter
 16958  141E                     l9616:	
 16959  141E  0020               	movlb	0	; select bank0
 16960  141F  1D0E               	btfss	14,2	;volatile
 16961  1420  2C24               	goto	l9620
 16962  1421  0021               	movlb	1	; select bank1
 16963  1422  1D2D               	btfss	(_myMain^(0+128)+13),2
 16964  1423  2C1B               	goto	l9614
 16965  1424                     l9620:	
 16966                           
 16967                           ;CC2500_B1.c: 153: };
 16968                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 16969  1424  319B  234C         	fcall	_set_TimeoutCleared
 16970                           
 16971                           ;CC2500_B1.c: 155: RC0 = 0;
 16972  1426  0020               	movlb	0	; select bank0
 16973  1427  100E               	bcf	14,0	;volatile
 16974                           
 16975                           ;CC2500_B1.c: 156: RC4 = 1;
 16976  1428  160E               	bsf	14,4	;volatile
 16977  1429  0008               	return
 16978  142A                     __end_of_CC2500_PowerRST:	
 16979                           
 16980                           	psect	text111
 16981  1133                     __ptext111:	
 16982 ;; *************** function _CC2500_InitSetREG *****************
 16983 ;; Defined at:
 16984 ;;		line 162 in file "../src/CC2500_B1.c"
 16985 ;; Parameters:    Size  Location     Type
 16986 ;;		None
 16987 ;; Auto vars:     Size  Location     Type
 16988 ;;  loop_c          1    8[BANK0 ] unsigned char 
 16989 ;;  temp2           1    7[BANK0 ] unsigned char 
 16990 ;;  temp1           1    6[BANK0 ] unsigned char 
 16991 ;; Return value:  Size  Location     Type
 16992 ;;		None               void
 16993 ;; Registers used:
 16994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16995 ;; Tracked objects:
 16996 ;;		On entry : 0/0
 16997 ;;		On exit  : 0/0
 16998 ;;		Unchanged: 0/0
 16999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17001 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17003 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17004 ;;Total ram usage:        4 bytes
 17005 ;; Hardware stack levels used:    1
 17006 ;; Hardware stack levels required when called:    7
 17007 ;; This function calls:
 17008 ;;		_CC2500_WriteREG
 17009 ;; This function is called by:
 17010 ;;		_CC2500_PowerOnInitial
 17011 ;; This function uses a non-reentrant model
 17012 ;;
 17013                           
 17014                           
 17015                           ;psect for function _CC2500_InitSetREG
 17016  1133                     _CC2500_InitSetREG:	
 17017                           
 17018                           ;CC2500_B1.c: 163: unsigned char loop_c;
 17019                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 17020                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 17021                           
 17022                           ;incstack = 0
 17023                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17024  1133  0020               	movlb	0	; select bank0
 17025  1134  01A8               	clrf	CC2500_InitSetREG@loop_c
 17026  1135                     L9:	
 17027  1135  302F               	movlw	47
 17028  1136  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17029  1137  1803               	btfsc	3,0
 17030  1138  0008               	return
 17031                           
 17032                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 17033  1139  0828               	movf	CC2500_InitSetREG@loop_c,w
 17034  113A  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17035  113B  0084               	movwf	4
 17036  113C  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17037  113D  1803               	skipnc
 17038  113E  3E01               	addlw	1
 17039  113F  0085               	movwf	5
 17040  1140  0800               	movf	0,w	;code access
 17041  1141  00A5               	movwf	??_CC2500_InitSetREG
 17042  1142  0825               	movf	??_CC2500_InitSetREG,w
 17043  1143  00A6               	movwf	CC2500_InitSetREG@temp1
 17044                           
 17045                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 17046  1144  0828               	movf	CC2500_InitSetREG@loop_c,w
 17047  1145  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17048  1146  0084               	movwf	4
 17049  1147  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17050  1148  1803               	skipnc
 17051  1149  3E01               	addlw	1
 17052  114A  0085               	movwf	5
 17053  114B  0800               	movf	0,w	;code access
 17054  114C  00A5               	movwf	??_CC2500_InitSetREG
 17055  114D  0825               	movf	??_CC2500_InitSetREG,w
 17056  114E  00A7               	movwf	CC2500_InitSetREG@temp2
 17057                           
 17058                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 17059  114F  0827               	movf	CC2500_InitSetREG@temp2,w
 17060  1150  00A5               	movwf	??_CC2500_InitSetREG
 17061  1151  0825               	movf	??_CC2500_InitSetREG,w
 17062  1152  00A2               	movwf	CC2500_WriteREG@value
 17063  1153  0826               	movf	CC2500_InitSetREG@temp1,w
 17064  1154  319F  27B9  3191   	fcall	_CC2500_WriteREG
 17065  1157  3001               	movlw	1
 17066  1158  0020               	movlb	0	; select bank0
 17067  1159  00A5               	movwf	??_CC2500_InitSetREG
 17068  115A  0825               	movf	??_CC2500_InitSetREG,w
 17069  115B  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17070  115C  2935               	goto	L9
 17071  115D                     __end_of_CC2500_InitSetREG:	
 17072                           
 17073                           	psect	text112
 17074  1EB7                     __ptext112:	
 17075 ;; *************** function _CC2500_InitPATable *****************
 17076 ;; Defined at:
 17077 ;;		line 177 in file "../src/CC2500_B1.c"
 17078 ;; Parameters:    Size  Location     Type
 17079 ;;		None
 17080 ;; Auto vars:     Size  Location     Type
 17081 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17082 ;;  temp            1    6[BANK0 ] unsigned char 
 17083 ;; Return value:  Size  Location     Type
 17084 ;;		None               void
 17085 ;; Registers used:
 17086 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17087 ;; Tracked objects:
 17088 ;;		On entry : 0/0
 17089 ;;		On exit  : 0/0
 17090 ;;		Unchanged: 0/0
 17091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17093 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17094 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17095 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17096 ;;Total ram usage:        3 bytes
 17097 ;; Hardware stack levels used:    1
 17098 ;; Hardware stack levels required when called:    7
 17099 ;; This function calls:
 17100 ;;		_CC2500_WriteREG
 17101 ;; This function is called by:
 17102 ;;		_CC2500_PowerOnInitial
 17103 ;; This function uses a non-reentrant model
 17104 ;;
 17105                           
 17106                           
 17107                           ;psect for function _CC2500_InitPATable
 17108  1EB7                     _CC2500_InitPATable:	
 17109                           
 17110                           ;CC2500_B1.c: 178: unsigned char loop_d;
 17111                           ;CC2500_B1.c: 179: unsigned char temp;
 17112                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 17113                           
 17114                           ;incstack = 0
 17115                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17116  1EB7  0020               	movlb	0	; select bank0
 17117  1EB8  01A7               	clrf	CC2500_InitPATable@loop_d
 17118  1EB9                     L10:	
 17119  1EB9  3008               	movlw	8
 17120  1EBA  0227               	subwf	CC2500_InitPATable@loop_d,w
 17121  1EBB  1803               	btfsc	3,0
 17122  1EBC  0008               	return
 17123                           
 17124                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 17125  1EBD  0827               	movf	CC2500_InitPATable@loop_d,w
 17126  1EBE  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17127  1EBF  0084               	movwf	4
 17128  1EC0  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17129  1EC1  1803               	skipnc
 17130  1EC2  3E01               	addlw	1
 17131  1EC3  0085               	movwf	5
 17132  1EC4  0800               	movf	0,w	;code access
 17133  1EC5  00A5               	movwf	??_CC2500_InitPATable
 17134  1EC6  0825               	movf	??_CC2500_InitPATable,w
 17135  1EC7  00A6               	movwf	CC2500_InitPATable@temp
 17136                           
 17137                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 17138  1EC8  0826               	movf	CC2500_InitPATable@temp,w
 17139  1EC9  00A5               	movwf	??_CC2500_InitPATable
 17140  1ECA  0825               	movf	??_CC2500_InitPATable,w
 17141  1ECB  00A2               	movwf	CC2500_WriteREG@value
 17142  1ECC  303E               	movlw	62
 17143  1ECD  319F  27B9  319E   	fcall	_CC2500_WriteREG
 17144  1ED0  3001               	movlw	1
 17145  1ED1  0020               	movlb	0	; select bank0
 17146  1ED2  00A5               	movwf	??_CC2500_InitPATable
 17147  1ED3  0825               	movf	??_CC2500_InitPATable,w
 17148  1ED4  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17149  1ED5  2EB9               	goto	L10
 17150  1ED6                     __end_of_CC2500_InitPATable:	
 17151                           
 17152                           	psect	text113
 17153  1FB9                     __ptext113:	
 17154 ;; *************** function _CC2500_WriteREG *****************
 17155 ;; Defined at:
 17156 ;;		line 254 in file "../src/CC2500_B1.c"
 17157 ;; Parameters:    Size  Location     Type
 17158 ;;  w_addr          1    wreg     unsigned char 
 17159 ;;  value           1    2[BANK0 ] unsigned char 
 17160 ;; Auto vars:     Size  Location     Type
 17161 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17162 ;; Return value:  Size  Location     Type
 17163 ;;		None               void
 17164 ;; Registers used:
 17165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17166 ;; Tracked objects:
 17167 ;;		On entry : 0/0
 17168 ;;		On exit  : 0/0
 17169 ;;		Unchanged: 0/0
 17170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17171 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17174 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17175 ;;Total ram usage:        3 bytes
 17176 ;; Hardware stack levels used:    1
 17177 ;; Hardware stack levels required when called:    6
 17178 ;; This function calls:
 17179 ;;		_CC2500_WriteByte
 17180 ;;		_Timeout_Counter
 17181 ;;		_set_TimeoutCleared
 17182 ;; This function is called by:
 17183 ;;		_CC2500_InitSetREG
 17184 ;;		_CC2500_InitPATable
 17185 ;; This function uses a non-reentrant model
 17186 ;;
 17187                           
 17188                           
 17189                           ;psect for function _CC2500_WriteREG
 17190  1FB9                     _CC2500_WriteREG:	
 17191                           
 17192                           ;incstack = 0
 17193                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17194                           ;CC2500_WriteREG@w_addr stored from wreg
 17195  1FB9  0020               	movlb	0	; select bank0
 17196  1FBA  00A4               	movwf	CC2500_WriteREG@w_addr
 17197                           
 17198                           ;CC2500_B1.c: 255: RC4 = 0;
 17199  1FBB  120E               	bcf	14,4	;volatile
 17200                           
 17201                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17202  1FBC  0824               	movf	CC2500_WriteREG@w_addr,w
 17203  1FBD  00A3               	movwf	??_CC2500_WriteREG
 17204  1FBE  0823               	movf	??_CC2500_WriteREG,w
 17205  1FBF  0021               	movlb	1	; select bank1
 17206  1FC0  00D2               	movwf	_SPI0Buffer^(0+128)
 17207                           
 17208                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 17209  1FC1  2FC5               	goto	l9278
 17210  1FC2                     l9276:	
 17211                           
 17212                           ;CC2500_B1.c: 258: Timeout_Counter();
 17213  1FC2  319D  2579  319F   	fcall	_Timeout_Counter
 17214  1FC5                     l9278:	
 17215  1FC5  0020               	movlb	0	; select bank0
 17216  1FC6  1D0E               	btfss	14,2	;volatile
 17217  1FC7  2FCB               	goto	l9282
 17218  1FC8  0021               	movlb	1	; select bank1
 17219  1FC9  1D2D               	btfss	(_myMain^(0+128)+13),2
 17220  1FCA  2FC2               	goto	l9276
 17221  1FCB                     l9282:	
 17222                           
 17223                           ;CC2500_B1.c: 259: };
 17224                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17225  1FCB  319B  234C  319F   	fcall	_set_TimeoutCleared
 17226                           
 17227                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17228  1FCE  319D  25FA  319F   	fcall	_CC2500_WriteByte
 17229                           
 17230                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17231  1FD1  0020               	movlb	0	; select bank0
 17232  1FD2  0822               	movf	CC2500_WriteREG@value,w
 17233  1FD3  00A3               	movwf	??_CC2500_WriteREG
 17234  1FD4  0823               	movf	??_CC2500_WriteREG,w
 17235  1FD5  0021               	movlb	1	; select bank1
 17236  1FD6  00D2               	movwf	_SPI0Buffer^(0+128)
 17237                           
 17238                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17239  1FD7  319D  25FA         	fcall	_CC2500_WriteByte
 17240                           
 17241                           ;CC2500_B1.c: 265: RC4 = 1;
 17242  1FD9  0020               	movlb	0	; select bank0
 17243  1FDA  160E               	bsf	14,4	;volatile
 17244  1FDB  0008               	return
 17245  1FDC                     __end_of_CC2500_WriteREG:	
 17246                           
 17247                           	psect	text114
 17248  1BA7                     __ptext114:	
 17249 ;; *************** function _CC2500_FrequencyCabr *****************
 17250 ;; Defined at:
 17251 ;;		line 204 in file "../src/CC2500_B1.c"
 17252 ;; Parameters:    Size  Location     Type
 17253 ;;		None
 17254 ;; Auto vars:     Size  Location     Type
 17255 ;;		None
 17256 ;; Return value:  Size  Location     Type
 17257 ;;		None               void
 17258 ;; Registers used:
 17259 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17260 ;; Tracked objects:
 17261 ;;		On entry : 0/0
 17262 ;;		On exit  : 0/0
 17263 ;;		Unchanged: 0/0
 17264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17269 ;;Total ram usage:        0 bytes
 17270 ;; Hardware stack levels used:    1
 17271 ;; Hardware stack levels required when called:    7
 17272 ;; This function calls:
 17273 ;;		_CC2500_WriteCommand
 17274 ;;		_DelayTime_1us
 17275 ;; This function is called by:
 17276 ;;		_CC2500_PowerOnInitial
 17277 ;; This function uses a non-reentrant model
 17278 ;;
 17279                           
 17280                           
 17281                           ;psect for function _CC2500_FrequencyCabr
 17282  1BA7                     _CC2500_FrequencyCabr:	
 17283                           
 17284                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17285                           
 17286                           ;incstack = 0
 17287                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17288  1BA7  3033               	movlw	51
 17289  1BA8  319E  262C  319B   	fcall	_CC2500_WriteCommand
 17290                           
 17291                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17292  1BAB  30E8               	movlw	232
 17293  1BAC  0020               	movlb	0	; select bank0
 17294  1BAD  00A0               	movwf	DelayTime_1us@count
 17295  1BAE  3003               	movlw	3
 17296  1BAF  00A1               	movwf	DelayTime_1us@count+1
 17297  1BB0  3190  2095         	fcall	_DelayTime_1us
 17298  1BB2  0008               	return
 17299  1BB3                     __end_of_CC2500_FrequencyCabr:	
 17300                           
 17301                           	psect	text115
 17302  1095                     __ptext115:	
 17303 ;; *************** function _DelayTime_1us *****************
 17304 ;; Defined at:
 17305 ;;		line 323 in file "../src/CC2500_B1.c"
 17306 ;; Parameters:    Size  Location     Type
 17307 ;;  count           2    0[BANK0 ] int 
 17308 ;; Auto vars:     Size  Location     Type
 17309 ;;  j               2    4[BANK0 ] unsigned int 
 17310 ;;  i               2    2[BANK0 ] unsigned int 
 17311 ;; Return value:  Size  Location     Type
 17312 ;;		None               void
 17313 ;; Registers used:
 17314 ;;		wreg, status,2
 17315 ;; Tracked objects:
 17316 ;;		On entry : 0/0
 17317 ;;		On exit  : 0/0
 17318 ;;		Unchanged: 0/0
 17319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17320 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17321 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17323 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17324 ;;Total ram usage:        6 bytes
 17325 ;; Hardware stack levels used:    1
 17326 ;; Hardware stack levels required when called:    5
 17327 ;; This function calls:
 17328 ;;		Nothing
 17329 ;; This function is called by:
 17330 ;;		_CC2500_PowerRST
 17331 ;;		_CC2500_FrequencyCabr
 17332 ;; This function uses a non-reentrant model
 17333 ;;
 17334                           
 17335                           
 17336                           ;psect for function _DelayTime_1us
 17337  1095                     _DelayTime_1us:	
 17338                           
 17339                           ;CC2500_B1.c: 324: unsigned int i, j;
 17340                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 17341                           
 17342                           ;incstack = 0
 17343                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17344  1095  3001               	movlw	1
 17345  1096  0020               	movlb	0	; select bank0
 17346  1097  00A2               	movwf	DelayTime_1us@i
 17347  1098  3000               	movlw	0
 17348  1099  00A3               	movwf	DelayTime_1us@i+1
 17349  109A                     l374:	
 17350  109A  0821               	movf	DelayTime_1us@count+1,w
 17351  109B  0223               	subwf	DelayTime_1us@i+1,w
 17352  109C  1D03               	skipz
 17353  109D  28A0               	goto	u10085
 17354  109E  0820               	movf	DelayTime_1us@count,w
 17355  109F  0222               	subwf	DelayTime_1us@i,w
 17356  10A0                     u10085:	
 17357  10A0  1803               	btfsc	3,0
 17358  10A1  0008               	return
 17359                           
 17360                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 17361  10A2  01A4               	clrf	DelayTime_1us@j
 17362  10A3  01A5               	clrf	DelayTime_1us@j+1
 17363  10A4  3000               	movlw	0
 17364  10A5  0225               	subwf	DelayTime_1us@j+1,w
 17365  10A6  3002               	movlw	2
 17366  10A7  1903               	skipnz
 17367  10A8  0224               	subwf	DelayTime_1us@j,w
 17368  10A9  1803               	btfsc	3,0
 17369  10AA  28B6               	goto	l9270
 17370  10AB                     l9268:	
 17371  10AB  3001               	movlw	1
 17372  10AC  07A4               	addwf	DelayTime_1us@j,f
 17373  10AD  3000               	movlw	0
 17374  10AE  3DA5               	addwfc	DelayTime_1us@j+1,f
 17375  10AF  3000               	movlw	0
 17376  10B0  0225               	subwf	DelayTime_1us@j+1,w
 17377  10B1  3002               	movlw	2
 17378  10B2  1903               	skipnz
 17379  10B3  0224               	subwf	DelayTime_1us@j,w
 17380  10B4  1C03               	skipc
 17381  10B5  28AB               	goto	l9268
 17382  10B6                     l9270:	
 17383  10B6  3001               	movlw	1
 17384  10B7  07A2               	addwf	DelayTime_1us@i,f
 17385  10B8  3000               	movlw	0
 17386  10B9  3DA3               	addwfc	DelayTime_1us@i+1,f
 17387  10BA  289A               	goto	l374
 17388  10BB                     __end_of_DelayTime_1us:	
 17389                           
 17390                           	psect	text116
 17391  1B40                     __ptext116:	
 17392 ;; *************** function _CC2500_ClearTXFIFO *****************
 17393 ;; Defined at:
 17394 ;;		line 190 in file "../src/CC2500_B1.c"
 17395 ;; Parameters:    Size  Location     Type
 17396 ;;		None
 17397 ;; Auto vars:     Size  Location     Type
 17398 ;;		None
 17399 ;; Return value:  Size  Location     Type
 17400 ;;		None               void
 17401 ;; Registers used:
 17402 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17403 ;; Tracked objects:
 17404 ;;		On entry : 0/0
 17405 ;;		On exit  : 0/0
 17406 ;;		Unchanged: 0/0
 17407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17412 ;;Total ram usage:        0 bytes
 17413 ;; Hardware stack levels used:    1
 17414 ;; Hardware stack levels required when called:    7
 17415 ;; This function calls:
 17416 ;;		_CC2500_WriteCommand
 17417 ;; This function is called by:
 17418 ;;		_CC2500_PowerOnInitial
 17419 ;; This function uses a non-reentrant model
 17420 ;;
 17421                           
 17422                           
 17423                           ;psect for function _CC2500_ClearTXFIFO
 17424  1B40                     _CC2500_ClearTXFIFO:	
 17425                           
 17426                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 17427                           
 17428                           ;incstack = 0
 17429                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17430  1B40  303B               	movlw	59
 17431  1B41  319E  262C         	fcall	_CC2500_WriteCommand
 17432  1B43  0008               	return
 17433  1B44                     __end_of_CC2500_ClearTXFIFO:	
 17434                           
 17435                           	psect	text117
 17436  1B3C                     __ptext117:	
 17437 ;; *************** function _CC2500_ClearRXFIFO *****************
 17438 ;; Defined at:
 17439 ;;		line 197 in file "../src/CC2500_B1.c"
 17440 ;; Parameters:    Size  Location     Type
 17441 ;;		None
 17442 ;; Auto vars:     Size  Location     Type
 17443 ;;		None
 17444 ;; Return value:  Size  Location     Type
 17445 ;;		None               void
 17446 ;; Registers used:
 17447 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17448 ;; Tracked objects:
 17449 ;;		On entry : 0/0
 17450 ;;		On exit  : 0/0
 17451 ;;		Unchanged: 0/0
 17452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17457 ;;Total ram usage:        0 bytes
 17458 ;; Hardware stack levels used:    1
 17459 ;; Hardware stack levels required when called:    7
 17460 ;; This function calls:
 17461 ;;		_CC2500_WriteCommand
 17462 ;; This function is called by:
 17463 ;;		_CC2500_PowerOnInitial
 17464 ;; This function uses a non-reentrant model
 17465 ;;
 17466                           
 17467                           
 17468                           ;psect for function _CC2500_ClearRXFIFO
 17469  1B3C                     _CC2500_ClearRXFIFO:	
 17470                           
 17471                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 17472                           
 17473                           ;incstack = 0
 17474                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17475  1B3C  303A               	movlw	58
 17476  1B3D  319E  262C         	fcall	_CC2500_WriteCommand
 17477  1B3F  0008               	return
 17478  1B40                     __end_of_CC2500_ClearRXFIFO:	
 17479                           
 17480                           	psect	text118
 17481  1E2C                     __ptext118:	
 17482 ;; *************** function _CC2500_WriteCommand *****************
 17483 ;; Defined at:
 17484 ;;		line 288 in file "../src/CC2500_B1.c"
 17485 ;; Parameters:    Size  Location     Type
 17486 ;;  command         1    wreg     unsigned char 
 17487 ;; Auto vars:     Size  Location     Type
 17488 ;;  command         1    3[BANK0 ] unsigned char 
 17489 ;; Return value:  Size  Location     Type
 17490 ;;		None               void
 17491 ;; Registers used:
 17492 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17493 ;; Tracked objects:
 17494 ;;		On entry : 0/0
 17495 ;;		On exit  : 0/0
 17496 ;;		Unchanged: 0/0
 17497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17501 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17502 ;;Total ram usage:        2 bytes
 17503 ;; Hardware stack levels used:    1
 17504 ;; Hardware stack levels required when called:    6
 17505 ;; This function calls:
 17506 ;;		_CC2500_WriteByte
 17507 ;;		_Timeout_Counter
 17508 ;;		_set_TimeoutCleared
 17509 ;; This function is called by:
 17510 ;;		_CC2500_TxData
 17511 ;;		_CC2500_ClearTXFIFO
 17512 ;;		_CC2500_ClearRXFIFO
 17513 ;;		_CC2500_FrequencyCabr
 17514 ;;		_CC2500_SIDLEMode
 17515 ;;		_setRF_Main
 17516 ;;		_RF_RxDisable
 17517 ;; This function uses a non-reentrant model
 17518 ;;
 17519                           
 17520                           
 17521                           ;psect for function _CC2500_WriteCommand
 17522  1E2C                     _CC2500_WriteCommand:	
 17523                           
 17524                           ;incstack = 0
 17525                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17526                           ;CC2500_WriteCommand@command stored from wreg
 17527  1E2C  0020               	movlb	0	; select bank0
 17528  1E2D  00A3               	movwf	CC2500_WriteCommand@command
 17529                           
 17530                           ;CC2500_B1.c: 289: RC4 = 0;
 17531  1E2E  120E               	bcf	14,4	;volatile
 17532                           
 17533                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 17534  1E2F  0823               	movf	CC2500_WriteCommand@command,w
 17535  1E30  00A2               	movwf	??_CC2500_WriteCommand
 17536  1E31  0822               	movf	??_CC2500_WriteCommand,w
 17537  1E32  0021               	movlb	1	; select bank1
 17538  1E33  00D2               	movwf	_SPI0Buffer^(0+128)
 17539                           
 17540                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 17541  1E34  2E38               	goto	l8986
 17542  1E35                     l8984:	
 17543                           
 17544                           ;CC2500_B1.c: 293: Timeout_Counter();
 17545  1E35  319D  2579  319E   	fcall	_Timeout_Counter
 17546  1E38                     l8986:	
 17547  1E38  0020               	movlb	0	; select bank0
 17548  1E39  1D0E               	btfss	14,2	;volatile
 17549  1E3A  2E3E               	goto	l8990
 17550  1E3B  0021               	movlb	1	; select bank1
 17551  1E3C  1D2D               	btfss	(_myMain^(0+128)+13),2
 17552  1E3D  2E35               	goto	l8984
 17553  1E3E                     l8990:	
 17554                           
 17555                           ;CC2500_B1.c: 294: };
 17556                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 17557  1E3E  319B  234C  319E   	fcall	_set_TimeoutCleared
 17558                           
 17559                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 17560  1E41  319D  25FA         	fcall	_CC2500_WriteByte
 17561                           
 17562                           ;CC2500_B1.c: 298: RC4 = 1;
 17563  1E43  0020               	movlb	0	; select bank0
 17564  1E44  160E               	bsf	14,4	;volatile
 17565  1E45  0008               	return
 17566  1E46                     __end_of_CC2500_WriteCommand:	
 17567                           
 17568                           	psect	text119
 17569  1B4C                     __ptext119:	
 17570 ;; *************** function _set_TimeoutCleared *****************
 17571 ;; Defined at:
 17572 ;;		line 270 in file "../src/Main_B1.c"
 17573 ;; Parameters:    Size  Location     Type
 17574 ;;		None
 17575 ;; Auto vars:     Size  Location     Type
 17576 ;;		None
 17577 ;; Return value:  Size  Location     Type
 17578 ;;		None               void
 17579 ;; Registers used:
 17580 ;;		status,2
 17581 ;; Tracked objects:
 17582 ;;		On entry : 0/0
 17583 ;;		On exit  : 0/0
 17584 ;;		Unchanged: 0/0
 17585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17590 ;;Total ram usage:        0 bytes
 17591 ;; Hardware stack levels used:    1
 17592 ;; Hardware stack levels required when called:    5
 17593 ;; This function calls:
 17594 ;;		Nothing
 17595 ;; This function is called by:
 17596 ;;		_CC2500_TxData
 17597 ;;		_CC2500_RxData
 17598 ;;		_CC2500_PowerRST
 17599 ;;		_CC2500_WriteREG
 17600 ;;		_CC2500_WriteCommand
 17601 ;;		_CC2500_ReadStatus
 17602 ;;		_getAD
 17603 ;;		_TouchPower
 17604 ;;		_CC2500_ReadREG
 17605 ;; This function uses a non-reentrant model
 17606 ;;
 17607                           
 17608                           
 17609                           ;psect for function _set_TimeoutCleared
 17610  1B4C                     _set_TimeoutCleared:	
 17611                           
 17612                           ;Main_B1.c: 271: myMain.Timeout = 0;
 17613                           
 17614                           ;incstack = 0
 17615                           ; Regs used in _set_TimeoutCleared: [status,2]
 17616  1B4C  0021               	movlb	1	; select bank1
 17617  1B4D  112D               	bcf	(_myMain^(0+128)+13),2
 17618                           
 17619                           ;Main_B1.c: 272: myMain.Timeout_Counter = 0;
 17620  1B4E  01AE               	clrf	(_myMain^(0+128)+14)
 17621  1B4F  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17622  1B50  0008               	return
 17623  1B51                     __end_of_set_TimeoutCleared:	
 17624                           
 17625                           	psect	text120
 17626  1D79                     __ptext120:	
 17627 ;; *************** function _Timeout_Counter *****************
 17628 ;; Defined at:
 17629 ;;		line 261 in file "../src/Main_B1.c"
 17630 ;; Parameters:    Size  Location     Type
 17631 ;;		None
 17632 ;; Auto vars:     Size  Location     Type
 17633 ;;		None
 17634 ;; Return value:  Size  Location     Type
 17635 ;;		None               void
 17636 ;; Registers used:
 17637 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17638 ;; Tracked objects:
 17639 ;;		On entry : 0/0
 17640 ;;		On exit  : 0/0
 17641 ;;		Unchanged: 0/0
 17642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17647 ;;Total ram usage:        0 bytes
 17648 ;; Hardware stack levels used:    1
 17649 ;; Hardware stack levels required when called:    5
 17650 ;; This function calls:
 17651 ;;		Nothing
 17652 ;; This function is called by:
 17653 ;;		_CC2500_TxData
 17654 ;;		_CC2500_RxData
 17655 ;;		_CC2500_PowerRST
 17656 ;;		_CC2500_WriteREG
 17657 ;;		_CC2500_WriteCommand
 17658 ;;		_CC2500_ReadStatus
 17659 ;;		_getAD
 17660 ;;		_TouchPower
 17661 ;;		_CC2500_ReadREG
 17662 ;; This function uses a non-reentrant model
 17663 ;;
 17664                           
 17665                           
 17666                           ;psect for function _Timeout_Counter
 17667  1D79                     _Timeout_Counter:	
 17668                           
 17669                           ;Main_B1.c: 262: myMain.Timeout_Counter++;
 17670                           
 17671                           ;incstack = 0
 17672                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17673  1D79  3001               	movlw	1
 17674  1D7A  0021               	movlb	1	; select bank1
 17675  1D7B  07AE               	addwf	(_myMain^(0+128)+14),f
 17676  1D7C  3000               	movlw	0
 17677  1D7D  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 17678                           
 17679                           ;Main_B1.c: 263: if (myMain.Timeout_Counter == 10000) {
 17680  1D7E  300E               	movlw	14
 17681  1D7F  3EA0               	addlw	_myMain& (0+255)
 17682  1D80  0086               	movwf	6
 17683  1D81  0187               	clrf	7
 17684  1D82  3F40               	moviw [0]fsr1
 17685  1D83  3A10               	xorlw	16
 17686  1D84  1D03               	skipz
 17687  1D85  2D88               	goto	u9505
 17688  1D86  3F41               	moviw [1]fsr1
 17689  1D87  3A27               	xorlw	39
 17690  1D88                     u9505:	
 17691  1D88  1D03               	skipz
 17692  1D89  0008               	return
 17693                           
 17694                           ;Main_B1.c: 264: myMain.Timeout_Counter = 0;
 17695  1D8A  01AE               	clrf	(_myMain^(0+128)+14)
 17696  1D8B  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17697                           
 17698                           ;Main_B1.c: 265: myMain.Timeout = 1;
 17699  1D8C  152D               	bsf	(_myMain^(0+128)+13),2
 17700  1D8D  0008               	return
 17701  1D8E                     __end_of_Timeout_Counter:	
 17702                           
 17703                           	psect	text121
 17704  1DFA                     __ptext121:	
 17705 ;; *************** function _CC2500_WriteByte *****************
 17706 ;; Defined at:
 17707 ;;		line 222 in file "../src/CC2500_B1.c"
 17708 ;; Parameters:    Size  Location     Type
 17709 ;;		None
 17710 ;; Auto vars:     Size  Location     Type
 17711 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17712 ;; Return value:  Size  Location     Type
 17713 ;;		None               void
 17714 ;; Registers used:
 17715 ;;		wreg, status,2, status,0
 17716 ;; Tracked objects:
 17717 ;;		On entry : 0/0
 17718 ;;		On exit  : 0/0
 17719 ;;		Unchanged: 0/0
 17720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17724 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17725 ;;Total ram usage:        2 bytes
 17726 ;; Hardware stack levels used:    1
 17727 ;; Hardware stack levels required when called:    5
 17728 ;; This function calls:
 17729 ;;		Nothing
 17730 ;; This function is called by:
 17731 ;;		_CC2500_TxData
 17732 ;;		_CC2500_RxData
 17733 ;;		_CC2500_PowerRST
 17734 ;;		_CC2500_WriteREG
 17735 ;;		_CC2500_WriteCommand
 17736 ;;		_CC2500_ReadStatus
 17737 ;;		_CC2500_ReadREG
 17738 ;; This function uses a non-reentrant model
 17739 ;;
 17740                           
 17741                           
 17742                           ;psect for function _CC2500_WriteByte
 17743  1DFA                     _CC2500_WriteByte:	
 17744                           
 17745                           ;CC2500_B1.c: 223: unsigned char loop_a;
 17746                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 17747                           
 17748                           ;incstack = 0
 17749                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17750  1DFA  0020               	movlb	0	; select bank0
 17751  1DFB  01A1               	clrf	CC2500_WriteByte@loop_a
 17752  1DFC                     L11:	
 17753  1DFC  3008               	movlw	8
 17754  1DFD  0221               	subwf	CC2500_WriteByte@loop_a,w
 17755  1DFE  1803               	btfsc	3,0
 17756  1DFF  0008               	return
 17757                           
 17758                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 17759  1E00  0021               	movlb	1	; select bank1
 17760  1E01  1FD2               	btfss	_SPI0Buffer^(0+128),7
 17761  1E02  2E06               	goto	l330
 17762                           
 17763                           ;CC2500_B1.c: 226: RC0 = 1;
 17764  1E03  0020               	movlb	0	; select bank0
 17765  1E04  140E               	bsf	14,0	;volatile
 17766  1E05  2E08               	goto	l331
 17767  1E06                     l330:	
 17768                           
 17769                           ;CC2500_B1.c: 227: else
 17770                           ;CC2500_B1.c: 228: RC0 = 0;
 17771  1E06  0020               	movlb	0	; select bank0
 17772  1E07  100E               	bcf	14,0	;volatile
 17773  1E08                     l331:	
 17774                           
 17775                           ;CC2500_B1.c: 229: RC1 = 1;
 17776  1E08  148E               	bsf	14,1	;volatile
 17777                           
 17778                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 17779  1E09  1003               	clrc
 17780  1E0A  0021               	movlb	1	; select bank1
 17781  1E0B  0DD2               	rlf	_SPI0Buffer^(0+128),f
 17782                           
 17783                           ;CC2500_B1.c: 231: RC1 = 0;
 17784  1E0C  0020               	movlb	0	; select bank0
 17785  1E0D  108E               	bcf	14,1	;volatile
 17786  1E0E  3001               	movlw	1
 17787  1E0F  00A0               	movwf	??_CC2500_WriteByte
 17788  1E10  0820               	movf	??_CC2500_WriteByte,w
 17789  1E11  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17790  1E12  2DFC               	goto	L11
 17791  1E13                     __end_of_CC2500_WriteByte:	
 17792                           
 17793                           	psect	text122
 17794  14B6                     __ptext122:	
 17795 ;; *************** function _Buzzer_Main *****************
 17796 ;; Defined at:
 17797 ;;		line 46 in file "../src/Buzzer_B1.c"
 17798 ;; Parameters:    Size  Location     Type
 17799 ;;		None
 17800 ;; Auto vars:     Size  Location     Type
 17801 ;;		None
 17802 ;; Return value:  Size  Location     Type
 17803 ;;		None               void
 17804 ;; Registers used:
 17805 ;;		wreg, status,2, status,0
 17806 ;; Tracked objects:
 17807 ;;		On entry : 0/0
 17808 ;;		On exit  : 0/0
 17809 ;;		Unchanged: 0/0
 17810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17814 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17815 ;;Total ram usage:        1 bytes
 17816 ;; Hardware stack levels used:    1
 17817 ;; Hardware stack levels required when called:    5
 17818 ;; This function calls:
 17819 ;;		Nothing
 17820 ;; This function is called by:
 17821 ;;		_main
 17822 ;; This function uses a non-reentrant model
 17823 ;;
 17824                           
 17825                           
 17826                           ;psect for function _Buzzer_Main
 17827  14B6                     _Buzzer_Main:	
 17828                           
 17829                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17830                           
 17831                           ;incstack = 0
 17832                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17833  14B6  0021               	movlb	1	; select bank1
 17834  14B7  1CB0               	btfss	_Buz1^(0+128),1
 17835  14B8  0008               	return
 17836                           
 17837                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17838  14B9  3001               	movlw	1
 17839  14BA  07B1               	addwf	(_Buz1^(0+128)+1),f
 17840  14BB  3000               	movlw	0
 17841  14BC  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 17842                           
 17843                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17844  14BD  0837               	movf	((_Buz1+1)^(0+128)+6),w
 17845  14BE  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 17846  14BF  1D03               	skipz
 17847  14C0  2CC3               	goto	u11505
 17848  14C1  0836               	movf	(_Buz1^(0+128)+6),w
 17849  14C2  0231               	subwf	(_Buz1^(0+128)+1),w
 17850  14C3                     u11505:	
 17851  14C3  1C03               	skipc
 17852  14C4  0008               	return
 17853                           
 17854                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17855  14C5  01B1               	clrf	(_Buz1^(0+128)+1)
 17856  14C6  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 17857                           
 17858                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17859  14C7  12B0               	bcf	_Buz1^(0+128),5
 17860  14C8  0020               	movlb	0	; select bank0
 17861  14C9  1D8D               	btfss	13,3	;volatile
 17862  14CA  2CCD               	goto	l10192
 17863  14CB  0021               	movlb	1	; select bank1
 17864  14CC  16B0               	bsf	_Buz1^(0+128),5
 17865  14CD                     l10192:	
 17866                           
 17867                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17868  14CD  0021               	movlb	1	; select bank1
 17869  14CE  1AB0               	btfsc	_Buz1^(0+128),5
 17870  14CF  2CF9               	goto	l106
 17871                           
 17872                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17873  14D0  08B3               	movf	(_Buz1^(0+128)+3),f
 17874  14D1  1D03               	skipz
 17875  14D2  2CF5               	goto	l107
 17876                           
 17877                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17878  14D3  1DB0               	btfss	_Buz1^(0+128),3
 17879  14D4  2CE3               	goto	l108
 17880                           
 17881                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17882  14D5  11B0               	bcf	_Buz1^(0+128),3
 17883                           
 17884                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17885  14D6  0834               	movf	(_Buz1^(0+128)+4),w
 17886  14D7  0020               	movlb	0	; select bank0
 17887  14D8  00A0               	movwf	??_Buzzer_Main
 17888  14D9  0820               	movf	??_Buzzer_Main,w
 17889  14DA  0021               	movlb	1	; select bank1
 17890  14DB  00B3               	movwf	(_Buz1^(0+128)+3)
 17891                           
 17892                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17893  14DC  0839               	movf	((_Buz1+1)^(0+128)+8),w
 17894  14DD  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17895  14DE  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17896  14DF  0838               	movf	(_Buz1^(0+128)+8),w
 17897  14E0  01B6               	clrf	(_Buz1^(0+128)+6)
 17898  14E1  07B6               	addwf	(_Buz1^(0+128)+6),f
 17899                           
 17900                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17901  14E2  0008               	return
 17902  14E3                     l108:	
 17903  14E3  1E30               	btfss	_Buz1^(0+128),4
 17904  14E4  2CF3               	goto	l110
 17905                           
 17906                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17907  14E5  1230               	bcf	_Buz1^(0+128),4
 17908                           
 17909                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17910  14E6  0835               	movf	(_Buz1^(0+128)+5),w
 17911  14E7  0020               	movlb	0	; select bank0
 17912  14E8  00A0               	movwf	??_Buzzer_Main
 17913  14E9  0820               	movf	??_Buzzer_Main,w
 17914  14EA  0021               	movlb	1	; select bank1
 17915  14EB  00B3               	movwf	(_Buz1^(0+128)+3)
 17916                           
 17917                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17918  14EC  083B               	movf	((_Buz1+1)^(0+128)+10),w
 17919  14ED  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17920  14EE  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17921  14EF  083A               	movf	(_Buz1^(0+128)+10),w
 17922  14F0  01B6               	clrf	(_Buz1^(0+128)+6)
 17923  14F1  07B6               	addwf	(_Buz1^(0+128)+6),f
 17924                           
 17925                           ;Buzzer_B1.c: 62: } else {
 17926  14F2  0008               	return
 17927  14F3                     l110:	
 17928                           
 17929                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17930  14F3  10B0               	bcf	_Buz1^(0+128),1
 17931                           
 17932                           ;Buzzer_B1.c: 64: }
 17933                           ;Buzzer_B1.c: 65: } else {
 17934  14F4  0008               	return
 17935  14F5                     l107:	
 17936                           
 17937                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17938  14F5  16B0               	bsf	_Buz1^(0+128),5
 17939                           
 17940                           ;Buzzer_B1.c: 68: RB3 = 1;
 17941  14F6  0020               	movlb	0	; select bank0
 17942  14F7  158D               	bsf	13,3	;volatile
 17943                           
 17944                           ;Buzzer_B1.c: 69: }
 17945                           ;Buzzer_B1.c: 70: } else {
 17946  14F8  0008               	return
 17947  14F9                     l106:	
 17948                           
 17949                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17950  14F9  12B0               	bcf	_Buz1^(0+128),5
 17951                           
 17952                           ;Buzzer_B1.c: 73: RB3 = 0;
 17953  14FA  0020               	movlb	0	; select bank0
 17954  14FB  118D               	bcf	13,3	;volatile
 17955                           
 17956                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17957  14FC  3001               	movlw	1
 17958  14FD  0021               	movlb	1	; select bank1
 17959  14FE  02B3               	subwf	(_Buz1^(0+128)+3),f
 17960  14FF  0008               	return
 17961  1500                     __end_of_Buzzer_Main:	
 17962                           
 17963                           	psect	text123
 17964  1B2D                     __ptext123:	
 17965 ;; *************** function _Buzzer_Initialization *****************
 17966 ;; Defined at:
 17967 ;;		line 11 in file "../src/Buzzer_B1.c"
 17968 ;; Parameters:    Size  Location     Type
 17969 ;;		None
 17970 ;; Auto vars:     Size  Location     Type
 17971 ;;		None
 17972 ;; Return value:  Size  Location     Type
 17973 ;;		None               void
 17974 ;; Registers used:
 17975 ;;		None
 17976 ;; Tracked objects:
 17977 ;;		On entry : 0/0
 17978 ;;		On exit  : 0/0
 17979 ;;		Unchanged: 0/0
 17980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17985 ;;Total ram usage:        0 bytes
 17986 ;; Hardware stack levels used:    1
 17987 ;; Hardware stack levels required when called:    5
 17988 ;; This function calls:
 17989 ;;		Nothing
 17990 ;; This function is called by:
 17991 ;;		_main
 17992 ;; This function uses a non-reentrant model
 17993 ;;
 17994                           
 17995                           
 17996                           ;psect for function _Buzzer_Initialization
 17997  1B2D                     _Buzzer_Initialization:	
 17998                           
 17999                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18000                           
 18001                           ;incstack = 0
 18002                           ; Regs used in _Buzzer_Initialization: []
 18003  1B2D  0021               	movlb	1	; select bank1
 18004  1B2E  1430               	bsf	_Buz1^(0+128),0
 18005  1B2F  0008               	return
 18006  1B30                     __end_of_Buzzer_Initialization:	
 18007                           
 18008                           	psect	intentry
 18009  0004                     __pintentry:	
 18010 ;; *************** function _ISR *****************
 18011 ;; Defined at:
 18012 ;;		line 107 in file "../src/MCU_B1.c"
 18013 ;; Parameters:    Size  Location     Type
 18014 ;;		None
 18015 ;; Auto vars:     Size  Location     Type
 18016 ;;		None
 18017 ;; Return value:  Size  Location     Type
 18018 ;;		None               void
 18019 ;; Registers used:
 18020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18021 ;; Tracked objects:
 18022 ;;		On entry : 0/0
 18023 ;;		On exit  : 0/0
 18024 ;;		Unchanged: 0/0
 18025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18028 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18029 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18030 ;;Total ram usage:        1 bytes
 18031 ;; Hardware stack levels used:    1
 18032 ;; Hardware stack levels required when called:    4
 18033 ;; This function calls:
 18034 ;;		_IOC_ISR
 18035 ;;		_TMR1_ISR
 18036 ;; This function is called by:
 18037 ;;		Interrupt level 1
 18038 ;; This function uses a non-reentrant model
 18039 ;;
 18040                           
 18041  0004                     _ISR:	
 18042                           
 18043                           ;incstack = 0
 18044                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18045  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18046  0005  3180               	pagesel	$
 18047  0006  0020               	movlb	0	; select bank0
 18048  0007  087F               	movf	127,w
 18049  0008  00F5               	movwf	??_ISR
 18050                           
 18051                           ;MCU_B1.c: 109: IOC_ISR();
 18052  0009  319C  2422  3180   	fcall	_IOC_ISR
 18053                           
 18054                           ;MCU_B1.c: 111: ;;
 18055                           ;MCU_B1.c: 113: TMR1_ISR();
 18056  000C  3191  210A         	fcall	_TMR1_ISR
 18057  000E  0875               	movf	??_ISR,w
 18058  000F  0020               	movlb	0	; select bank0
 18059  0010  00FF               	movwf	127
 18060  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18061  0012  0009               	retfie
 18062  0013                     __end_of_ISR:	
 18063                           
 18064                           	psect	text125
 18065  110A                     __ptext125:	
 18066 ;; *************** function _TMR1_ISR *****************
 18067 ;; Defined at:
 18068 ;;		line 209 in file "../src/MCU_B1.c"
 18069 ;; Parameters:    Size  Location     Type
 18070 ;;		None
 18071 ;; Auto vars:     Size  Location     Type
 18072 ;;		None
 18073 ;; Return value:  Size  Location     Type
 18074 ;;		None               void
 18075 ;; Registers used:
 18076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18077 ;; Tracked objects:
 18078 ;;		On entry : 0/0
 18079 ;;		On exit  : 0/0
 18080 ;;		Unchanged: 0/0
 18081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18086 ;;Total ram usage:        0 bytes
 18087 ;; Hardware stack levels used:    1
 18088 ;; Hardware stack levels required when called:    2
 18089 ;; This function calls:
 18090 ;;		_setDimmerLights_IntrControl
 18091 ;; This function is called by:
 18092 ;;		_ISR
 18093 ;; This function uses a non-reentrant model
 18094 ;;
 18095                           
 18096                           
 18097                           ;psect for function _TMR1_ISR
 18098  110A                     _TMR1_ISR:	
 18099                           
 18100                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18101                           
 18102                           ;incstack = 0
 18103                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18104  110A  0021               	movlb	1	; select bank1
 18105  110B  1C11               	btfss	17,0	;volatile
 18106  110C  0008               	return
 18107  110D  0020               	movlb	0	; select bank0
 18108  110E  1C11               	btfss	17,0	;volatile
 18109  110F  0008               	return
 18110                           
 18111                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18112  1110  30FA               	movlw	250
 18113  1111  0097               	movwf	23	;volatile
 18114                           
 18115                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18116  1112  3038               	movlw	56
 18117  1113  0096               	movwf	22	;volatile
 18118                           
 18119                           ;MCU_B1.c: 214: TMR1IF = 0;
 18120  1114  1011               	bcf	17,0	;volatile
 18121                           
 18122                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18123  1115  3001               	movlw	1
 18124  1116  3180  2049  3191   	fcall	_setDimmerLights_IntrControl
 18125                           
 18126                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18127  1119  3002               	movlw	2
 18128  111A  3180  2049  3191   	fcall	_setDimmerLights_IntrControl
 18129                           
 18130                           ;MCU_B1.c: 234: Timer1.Count++;
 18131  111D  3001               	movlw	1
 18132  111E  0022               	movlb	2	; select bank2
 18133  111F  07A1               	addwf	(_Timer1^(0+256)+1),f
 18134  1120  3000               	movlw	0
 18135  1121  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18136                           
 18137                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18138  1122  3001               	movlw	1
 18139  1123  3E20               	addlw	_Timer1& (0+255)
 18140  1124  0086               	movwf	6
 18141  1125  3001               	movlw	1	; select bank2/3
 18142  1126  0087               	movwf	7
 18143  1127  3F40               	moviw [0]fsr1
 18144  1128  3A64               	xorlw	100
 18145  1129  1D03               	skipz
 18146  112A  292D               	goto	u775_25
 18147  112B  3F41               	moviw [1]fsr1
 18148  112C  3A00               	xorlw	0
 18149  112D                     u775_25:	
 18150  112D  1D03               	skipz
 18151  112E  0008               	return
 18152                           
 18153                           ;MCU_B1.c: 236: {
 18154                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18155  112F  01A1               	clrf	(_Timer1^(0+256)+1)
 18156  1130  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18157                           
 18158                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18159  1131  1420               	bsf	_Timer1^(0+256),0
 18160  1132  0008               	return
 18161  1133                     __end_of_TMR1_ISR:	
 18162                           
 18163                           	psect	text126
 18164  0049                     __ptext126:	
 18165 ;; *************** function _setDimmerLights_IntrControl *****************
 18166 ;; Defined at:
 18167 ;;		line 93 in file "../src/Dimmer_B1.c"
 18168 ;; Parameters:    Size  Location     Type
 18169 ;;  lights          1    wreg     unsigned char 
 18170 ;; Auto vars:     Size  Location     Type
 18171 ;;  lights          1    4[COMMON] unsigned char 
 18172 ;; Return value:  Size  Location     Type
 18173 ;;		None               void
 18174 ;; Registers used:
 18175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18176 ;; Tracked objects:
 18177 ;;		On entry : 0/0
 18178 ;;		On exit  : 0/0
 18179 ;;		Unchanged: 0/0
 18180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18182 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18183 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18184 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18185 ;;Total ram usage:        3 bytes
 18186 ;; Hardware stack levels used:    1
 18187 ;; Hardware stack levels required when called:    1
 18188 ;; This function calls:
 18189 ;;		_DimmerIntrPointSelect
 18190 ;; This function is called by:
 18191 ;;		_TMR1_ISR
 18192 ;; This function uses a non-reentrant model
 18193 ;;
 18194                           
 18195                           
 18196                           ;psect for function _setDimmerLights_IntrControl
 18197  0049                     _setDimmerLights_IntrControl:	
 18198                           
 18199                           ;incstack = 0
 18200                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18201                           ;setDimmerLights_IntrControl@lights stored from wreg
 18202  0049  00F4               	movwf	setDimmerLights_IntrControl@lights
 18203                           
 18204                           ;Dimmer_B1.c: 95: DimmerIntrPointSelect(lights);
 18205  004A  0874               	movf	setDimmerLights_IntrControl@lights,w
 18206  004B  319C  2483  3180   	fcall	_DimmerIntrPointSelect
 18207                           
 18208                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->GO == 1) {
 18209  004E  0878               	movf	_DimmerLightsIntr,w
 18210  004F  0086               	movwf	6
 18211  0050  3001               	movlw	1	; select bank2/3
 18212  0051  0087               	movwf	7
 18213  0052  1C01               	btfss	1,0
 18214  0053  28A0               	goto	i1l7146
 18215                           
 18216                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Count++;
 18217  0054  3001               	movlw	1
 18218  0055  00F2               	movwf	??_setDimmerLights_IntrControl
 18219  0056  0878               	movf	_DimmerLightsIntr,w
 18220  0057  3E03               	addlw	3
 18221  0058  0086               	movwf	6
 18222  0059  3001               	movlw	1	; select bank2/3
 18223  005A  0087               	movwf	7
 18224  005B  0872               	movf	??_setDimmerLights_IntrControl,w
 18225  005C  0781               	addwf	1,f
 18226                           
 18227                           ;Dimmer_B1.c: 98: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r.Correction)) {
 18228  005D  0878               	movf	_DimmerLightsIntr,w
 18229  005E  3E04               	addlw	4
 18230  005F  0086               	movwf	6
 18231  0060  3001               	movlw	1	; select bank2/3
 18232  0061  0087               	movwf	7
 18233  0062  0801               	movf	1,w
 18234  0063  0021               	movlb	1	; select bank1
 18235  0064  074A               	addwf	(_Dimmer^(0+128)+2),w
 18236  0065  00F2               	movwf	??_setDimmerLights_IntrControl
 18237  0066  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18238  0067  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 18239  0068  0878               	movf	_DimmerLightsIntr,w
 18240  0069  3E03               	addlw	3
 18241  006A  0086               	movwf	6
 18242  006B  3001               	movlw	1	; select bank2/3
 18243  006C  0087               	movwf	7
 18244  006D  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18245  006E  3A80               	xorlw	128
 18246  006F  3C80               	sublw	128
 18247  0070  1D03               	skipz
 18248  0071  2874               	goto	u653_25
 18249  0072  0872               	movf	??_setDimmerLights_IntrControl,w
 18250  0073  0201               	subwf	1,w
 18251  0074                     u653_25:	
 18252  0074  1C03               	skipc
 18253  0075  2970               	goto	i1l745
 18254                           
 18255                           ;Dimmer_B1.c: 99: DimmerLightsIntr->Count = 0;
 18256  0076  0878               	movf	_DimmerLightsIntr,w
 18257  0077  3E03               	addlw	3
 18258  0078  0086               	movwf	6
 18259  0079  3001               	movlw	1	; select bank2/3
 18260  007A  0087               	movwf	7
 18261  007B  0181               	clrf	1
 18262                           
 18263                           ;Dimmer_B1.c: 100: DimmerLightsIntr->GO = 0;
 18264  007C  0878               	movf	_DimmerLightsIntr,w
 18265  007D  0086               	movwf	6
 18266  007E  3001               	movlw	1	; select bank2/3
 18267  007F  0087               	movwf	7
 18268  0080  1001               	bcf	1,0
 18269                           
 18270                           ;Dimmer_B1.c: 102: if (DimmerLightsIntr->StatusFlag == 1) {
 18271  0081  0878               	movf	_DimmerLightsIntr,w
 18272  0082  0086               	movwf	6
 18273  0083  3001               	movlw	1	; select bank2/3
 18274  0084  0087               	movwf	7
 18275  0085  1F01               	btfss	1,6
 18276  0086  2970               	goto	i1l745
 18277                           
 18278                           ;Dimmer_B1.c: 103: DimmerLightsIntr->Flag = 1;
 18279  0087  0878               	movf	_DimmerLightsIntr,w
 18280  0088  3E08               	addlw	8
 18281  0089  0086               	movwf	6
 18282  008A  3001               	movlw	1	; select bank2/3
 18283  008B  0087               	movwf	7
 18284  008C  1401               	bsf	1,0
 18285                           
 18286                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Triac = 1;
 18287  008D  0878               	movf	_DimmerLightsIntr,w
 18288  008E  3E08               	addlw	8
 18289  008F  0086               	movwf	6
 18290  0090  3001               	movlw	1	; select bank2/3
 18291  0091  0087               	movwf	7
 18292  0092  1681               	bsf	1,5
 18293                           
 18294                           ;Dimmer_B1.c: 106: if (lights == 1) {
 18295  0093  0874               	movf	setDimmerLights_IntrControl@lights,w
 18296  0094  3A01               	xorlw	1
 18297  0095  1D03               	skipz
 18298  0096  2899               	goto	i1l7142
 18299                           
 18300                           ;Dimmer_B1.c: 107: RA7 = 1;
 18301  0097  0020               	movlb	0	; select bank0
 18302  0098  178C               	bsf	12,7	;volatile
 18303  0099                     i1l7142:	
 18304                           ;Dimmer_B1.c: 108: ;;
 18305                           
 18306                           
 18307                           ;Dimmer_B1.c: 109: }
 18308                           ;Dimmer_B1.c: 112: if (lights == 2) {
 18309  0099  0874               	movf	setDimmerLights_IntrControl@lights,w
 18310  009A  3A02               	xorlw	2
 18311  009B  1D03               	skipz
 18312  009C  2970               	goto	i1l745
 18313                           
 18314                           ;Dimmer_B1.c: 113: RB4 = 1;
 18315  009D  0020               	movlb	0	; select bank0
 18316  009E  160D               	bsf	13,4	;volatile
 18317                           
 18318                           ;Dimmer_B1.c: 114: }
 18319                           ;Dimmer_B1.c: 121: }
 18320                           ;Dimmer_B1.c: 122: }
 18321                           ;Dimmer_B1.c: 123: } else {
 18322  009F  2970               	goto	i1l745
 18323  00A0                     i1l7146:	
 18324                           
 18325                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->Flag == 1) {
 18326  00A0  0878               	movf	_DimmerLightsIntr,w
 18327  00A1  3E08               	addlw	8
 18328  00A2  0086               	movwf	6
 18329  00A3  3001               	movlw	1	; select bank2/3
 18330  00A4  0087               	movwf	7
 18331  00A5  1C01               	btfss	1,0
 18332  00A6  2970               	goto	i1l745
 18333                           
 18334                           ;Dimmer_B1.c: 125: DimmerLightsIntr->Flag = 0;
 18335  00A7  0878               	movf	_DimmerLightsIntr,w
 18336  00A8  3E08               	addlw	8
 18337  00A9  0086               	movwf	6
 18338  00AA  3001               	movlw	1	; select bank2/3
 18339  00AB  0087               	movwf	7
 18340  00AC  1001               	bcf	1,0
 18341                           
 18342                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->Signal == 1) {
 18343  00AD  0878               	movf	_DimmerLightsIntr,w
 18344  00AE  0086               	movwf	6
 18345  00AF  3001               	movlw	1	; select bank2/3
 18346  00B0  0087               	movwf	7
 18347  00B1  1C81               	btfss	1,1
 18348  00B2  2970               	goto	i1l745
 18349                           
 18350                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingTime++;
 18351  00B3  3001               	movlw	1
 18352  00B4  00F2               	movwf	??_setDimmerLights_IntrControl
 18353  00B5  0A78               	incf	_DimmerLightsIntr,w
 18354  00B6  0086               	movwf	6
 18355  00B7  3001               	movlw	1	; select bank2/3
 18356  00B8  0087               	movwf	7
 18357  00B9  0872               	movf	??_setDimmerLights_IntrControl,w
 18358  00BA  0781               	addwf	1,f
 18359                           
 18360                           ;Dimmer_B1.c: 128: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18361  00BB  0A78               	incf	_DimmerLightsIntr,w
 18362  00BC  0086               	movwf	6
 18363  00BD  3001               	movlw	1	; select bank2/3
 18364  00BE  0087               	movwf	7
 18365  00BF  0878               	movf	_DimmerLightsIntr,w
 18366  00C0  3E02               	addlw	2
 18367  00C1  0084               	movwf	4
 18368  00C2  3001               	movlw	1	; select bank2/3
 18369  00C3  0085               	movwf	5
 18370  00C4  0800               	movf	0,w
 18371  00C5  0201               	subwf	1,w
 18372  00C6  1C03               	skipc
 18373  00C7  2970               	goto	i1l745
 18374                           
 18375                           ;Dimmer_B1.c: 129: DimmerLightsIntr->DimmingTime = 0;
 18376  00C8  0A78               	incf	_DimmerLightsIntr,w
 18377  00C9  0086               	movwf	6
 18378  00CA  3001               	movlw	1	; select bank2/3
 18379  00CB  0087               	movwf	7
 18380  00CC  0181               	clrf	1
 18381                           
 18382                           ;Dimmer_B1.c: 130: if (DimmerLightsIntr->AdjFlag == 1) {
 18383  00CD  0878               	movf	_DimmerLightsIntr,w
 18384  00CE  0086               	movwf	6
 18385  00CF  3001               	movlw	1	; select bank2/3
 18386  00D0  0087               	movwf	7
 18387  00D1  1D81               	btfss	1,3
 18388  00D2  2909               	goto	i1l7172
 18389                           
 18390                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjStatus == 0) {
 18391  00D3  0878               	movf	_DimmerLightsIntr,w
 18392  00D4  0086               	movwf	6
 18393  00D5  3001               	movlw	1	; select bank2/3
 18394  00D6  0087               	movwf	7
 18395  00D7  1A01               	btfsc	1,4
 18396  00D8  28F0               	goto	i1l7166
 18397                           
 18398                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 18399  00D9  0878               	movf	_DimmerLightsIntr,w
 18400  00DA  3E04               	addlw	4
 18401  00DB  0086               	movwf	6
 18402  00DC  3001               	movlw	1	; select bank2/3
 18403  00DD  0087               	movwf	7
 18404  00DE  3021               	movlw	33
 18405  00DF  0201               	subwf	1,w
 18406  00E0  1C03               	skipc
 18407  00E1  28EA               	goto	i1l7164
 18408                           
 18409                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue--;
 18410  00E2  0878               	movf	_DimmerLightsIntr,w
 18411  00E3  3E04               	addlw	4
 18412  00E4  0086               	movwf	6
 18413  00E5  3001               	movlw	1	; select bank2/3
 18414  00E6  0087               	movwf	7
 18415  00E7  3001               	movlw	1
 18416  00E8  0281               	subwf	1,f
 18417                           
 18418                           ;Dimmer_B1.c: 134: } else {
 18419  00E9  2970               	goto	i1l745
 18420  00EA                     i1l7164:	
 18421                           
 18422                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 1;
 18423  00EA  0878               	movf	_DimmerLightsIntr,w
 18424  00EB  0086               	movwf	6
 18425  00EC  3001               	movlw	1	; select bank2/3
 18426  00ED  0087               	movwf	7
 18427  00EE  1601               	bsf	1,4
 18428                           
 18429                           ;Dimmer_B1.c: 136: }
 18430                           ;Dimmer_B1.c: 137: } else {
 18431  00EF  2970               	goto	i1l745
 18432  00F0                     i1l7166:	
 18433                           
 18434                           ;Dimmer_B1.c: 138: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 18435  00F0  0878               	movf	_DimmerLightsIntr,w
 18436  00F1  3E04               	addlw	4
 18437  00F2  0086               	movwf	6
 18438  00F3  3001               	movlw	1	; select bank2/3
 18439  00F4  0087               	movwf	7
 18440  00F5  303C               	movlw	60
 18441  00F6  0201               	subwf	1,w
 18442  00F7  1803               	skipnc
 18443  00F8  2903               	goto	i1l7170
 18444                           
 18445                           ;Dimmer_B1.c: 139: DimmerLightsIntr->DimmingValue++;
 18446  00F9  3001               	movlw	1
 18447  00FA  00F2               	movwf	??_setDimmerLights_IntrControl
 18448  00FB  0878               	movf	_DimmerLightsIntr,w
 18449  00FC  3E04               	addlw	4
 18450  00FD  0086               	movwf	6
 18451  00FE  3001               	movlw	1	; select bank2/3
 18452  00FF  0087               	movwf	7
 18453  0100  0872               	movf	??_setDimmerLights_IntrControl,w
 18454  0101  0781               	addwf	1,f
 18455                           
 18456                           ;Dimmer_B1.c: 140: } else {
 18457  0102  2970               	goto	i1l745
 18458  0103                     i1l7170:	
 18459                           
 18460                           ;Dimmer_B1.c: 141: DimmerLightsIntr->AdjStatus = 0;
 18461  0103  0878               	movf	_DimmerLightsIntr,w
 18462  0104  0086               	movwf	6
 18463  0105  3001               	movlw	1	; select bank2/3
 18464  0106  0087               	movwf	7
 18465  0107  1201               	bcf	1,4
 18466                           
 18467                           ;Dimmer_B1.c: 142: }
 18468                           ;Dimmer_B1.c: 143: }
 18469                           ;Dimmer_B1.c: 144: } else if (DimmerLightsIntr->AdjRF == 1) {
 18470  0108  2970               	goto	i1l745
 18471  0109                     i1l7172:	
 18472  0109  0878               	movf	_DimmerLightsIntr,w
 18473  010A  0086               	movwf	6
 18474  010B  3001               	movlw	1	; select bank2/3
 18475  010C  0087               	movwf	7
 18476  010D  1D01               	btfss	1,2
 18477  010E  2950               	goto	i1l7186
 18478                           
 18479                           ;Dimmer_B1.c: 145: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 18480  010F  0878               	movf	_DimmerLightsIntr,w
 18481  0110  3E05               	addlw	5
 18482  0111  0086               	movwf	6
 18483  0112  3001               	movlw	1	; select bank2/3
 18484  0113  0087               	movwf	7
 18485  0114  0878               	movf	_DimmerLightsIntr,w
 18486  0115  3E04               	addlw	4
 18487  0116  0084               	movwf	4
 18488  0117  3001               	movlw	1	; select bank2/3
 18489  0118  0085               	movwf	5
 18490  0119  0800               	movf	0,w
 18491  011A  0201               	subwf	1,w
 18492  011B  1803               	skipnc
 18493  011C  2925               	goto	i1l7178
 18494                           
 18495                           ;Dimmer_B1.c: 146: DimmerLightsIntr->DimmingValue--;
 18496  011D  0878               	movf	_DimmerLightsIntr,w
 18497  011E  3E04               	addlw	4
 18498  011F  0086               	movwf	6
 18499  0120  3001               	movlw	1	; select bank2/3
 18500  0121  0087               	movwf	7
 18501  0122  3001               	movlw	1
 18502  0123  0281               	subwf	1,f
 18503                           
 18504                           ;Dimmer_B1.c: 147: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 18505  0124  293C               	goto	i1l7182
 18506  0125                     i1l7178:	
 18507  0125  0878               	movf	_DimmerLightsIntr,w
 18508  0126  3E04               	addlw	4
 18509  0127  0086               	movwf	6
 18510  0128  3001               	movlw	1	; select bank2/3
 18511  0129  0087               	movwf	7
 18512  012A  0878               	movf	_DimmerLightsIntr,w
 18513  012B  3E05               	addlw	5
 18514  012C  0084               	movwf	4
 18515  012D  3001               	movlw	1	; select bank2/3
 18516  012E  0085               	movwf	5
 18517  012F  0800               	movf	0,w
 18518  0130  0201               	subwf	1,w
 18519  0131  1803               	skipnc
 18520  0132  293C               	goto	i1l7182
 18521                           
 18522                           ;Dimmer_B1.c: 148: DimmerLightsIntr->DimmingValue++;
 18523  0133  3001               	movlw	1
 18524  0134  00F2               	movwf	??_setDimmerLights_IntrControl
 18525  0135  0878               	movf	_DimmerLightsIntr,w
 18526  0136  3E04               	addlw	4
 18527  0137  0086               	movwf	6
 18528  0138  3001               	movlw	1	; select bank2/3
 18529  0139  0087               	movwf	7
 18530  013A  0872               	movf	??_setDimmerLights_IntrControl,w
 18531  013B  0781               	addwf	1,f
 18532  013C                     i1l7182:	
 18533                           
 18534                           ;Dimmer_B1.c: 149: }
 18535                           ;Dimmer_B1.c: 150: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18536  013C  0878               	movf	_DimmerLightsIntr,w
 18537  013D  3E05               	addlw	5
 18538  013E  0086               	movwf	6
 18539  013F  3001               	movlw	1	; select bank2/3
 18540  0140  0087               	movwf	7
 18541  0141  0878               	movf	_DimmerLightsIntr,w
 18542  0142  3E04               	addlw	4
 18543  0143  0084               	movwf	4
 18544  0144  3001               	movlw	1	; select bank2/3
 18545  0145  0085               	movwf	5
 18546  0146  0800               	movf	0,w
 18547  0147  0601               	xorwf	1,w
 18548  0148  1D03               	skipz
 18549  0149  2970               	goto	i1l745
 18550                           
 18551                           ;Dimmer_B1.c: 151: DimmerLightsIntr->AdjRF = 0;
 18552  014A  0878               	movf	_DimmerLightsIntr,w
 18553  014B  0086               	movwf	6
 18554  014C  3001               	movlw	1	; select bank2/3
 18555  014D  0087               	movwf	7
 18556  014E  1101               	bcf	1,2
 18557  014F  296B               	goto	i1l7192
 18558  0150                     i1l7186:	
 18559                           ;Dimmer_B1.c: 153: }
 18560                           ;Dimmer_B1.c: 154: } else {
 18561                           
 18562                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 18563                           
 18564                           
 18565                           ;Dimmer_B1.c: 155: if (DimmerLightsIntr->Status == 1) {
 18566  0150  0878               	movf	_DimmerLightsIntr,w
 18567  0151  0086               	movwf	6
 18568  0152  3001               	movlw	1	; select bank2/3
 18569  0153  0087               	movwf	7
 18570  0154  1E81               	btfss	1,5
 18571  0155  2970               	goto	i1l745
 18572                           
 18573                           ;Dimmer_B1.c: 156: DimmerLightsIntr->DimmingValue--;
 18574  0156  0878               	movf	_DimmerLightsIntr,w
 18575  0157  3E04               	addlw	4
 18576  0158  0086               	movwf	6
 18577  0159  3001               	movlw	1	; select bank2/3
 18578  015A  0087               	movwf	7
 18579  015B  3001               	movlw	1
 18580  015C  0281               	subwf	1,f
 18581                           
 18582                           ;Dimmer_B1.c: 157: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 18583  015D  0878               	movf	_DimmerLightsIntr,w
 18584  015E  3E05               	addlw	5
 18585  015F  0086               	movwf	6
 18586  0160  3001               	movlw	1	; select bank2/3
 18587  0161  0087               	movwf	7
 18588  0162  0878               	movf	_DimmerLightsIntr,w
 18589  0163  3E04               	addlw	4
 18590  0164  0084               	movwf	4
 18591  0165  3001               	movlw	1	; select bank2/3
 18592  0166  0085               	movwf	5
 18593  0167  0800               	movf	0,w
 18594  0168  0201               	subwf	1,w
 18595  0169  1C03               	skipc
 18596  016A  2970               	goto	i1l745
 18597  016B                     i1l7192:	
 18598                           
 18599                           ;Dimmer_B1.c: 158: DimmerLightsIntr->Signal = 0;
 18600  016B  0878               	movf	_DimmerLightsIntr,w
 18601  016C  0086               	movwf	6
 18602  016D  3001               	movlw	1	; select bank2/3
 18603  016E  0087               	movwf	7
 18604  016F  1081               	bcf	1,1
 18605  0170                     i1l745:	
 18606                           
 18607                           ;Dimmer_B1.c: 159: }
 18608                           ;Dimmer_B1.c: 160: }
 18609                           ;Dimmer_B1.c: 185: }
 18610                           ;Dimmer_B1.c: 186: }
 18611                           ;Dimmer_B1.c: 187: }
 18612                           ;Dimmer_B1.c: 188: }
 18613                           ;Dimmer_B1.c: 189: }
 18614                           ;Dimmer_B1.c: 190: if (DimmerLightsIntr->Triac == 1) {
 18615  0170  0878               	movf	_DimmerLightsIntr,w
 18616  0171  3E08               	addlw	8
 18617  0172  0086               	movwf	6
 18618  0173  3001               	movlw	1	; select bank2/3
 18619  0174  0087               	movwf	7
 18620  0175  1E81               	btfss	1,5
 18621  0176  29A2               	goto	i1l7210
 18622                           
 18623                           ;Dimmer_B1.c: 191: DimmerLightsIntr->TriacTime++;
 18624  0177  3001               	movlw	1
 18625  0178  00F2               	movwf	??_setDimmerLights_IntrControl
 18626  0179  0878               	movf	_DimmerLightsIntr,w
 18627  017A  3E07               	addlw	7
 18628  017B  0086               	movwf	6
 18629  017C  3001               	movlw	1	; select bank2/3
 18630  017D  0087               	movwf	7
 18631  017E  0872               	movf	??_setDimmerLights_IntrControl,w
 18632  017F  0781               	addwf	1,f
 18633                           
 18634                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->TriacTime >= 5) {
 18635  0180  0878               	movf	_DimmerLightsIntr,w
 18636  0181  3E07               	addlw	7
 18637  0182  0086               	movwf	6
 18638  0183  3001               	movlw	1	; select bank2/3
 18639  0184  0087               	movwf	7
 18640  0185  3005               	movlw	5
 18641  0186  0201               	subwf	1,w
 18642  0187  1C03               	skipc
 18643  0188  0008               	return
 18644                           
 18645                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime = 0;
 18646  0189  0878               	movf	_DimmerLightsIntr,w
 18647  018A  3E07               	addlw	7
 18648  018B  0086               	movwf	6
 18649  018C  3001               	movlw	1	; select bank2/3
 18650  018D  0087               	movwf	7
 18651  018E  0181               	clrf	1
 18652                           
 18653                           ;Dimmer_B1.c: 194: DimmerLightsIntr->Triac = 0;
 18654  018F  0878               	movf	_DimmerLightsIntr,w
 18655  0190  3E08               	addlw	8
 18656  0191  0086               	movwf	6
 18657  0192  3001               	movlw	1	; select bank2/3
 18658  0193  0087               	movwf	7
 18659  0194  1281               	bcf	1,5
 18660                           
 18661                           ;Dimmer_B1.c: 197: if (lights == 1) {
 18662  0195  0874               	movf	setDimmerLights_IntrControl@lights,w
 18663  0196  3A01               	xorlw	1
 18664  0197  1D03               	skipz
 18665  0198  299B               	goto	i1l7206
 18666                           
 18667                           ;Dimmer_B1.c: 198: RA7 = 0;
 18668  0199  0020               	movlb	0	; select bank0
 18669  019A  138C               	bcf	12,7	;volatile
 18670  019B                     i1l7206:	
 18671                           ;Dimmer_B1.c: 199: ;;
 18672                           
 18673                           
 18674                           ;Dimmer_B1.c: 200: }
 18675                           ;Dimmer_B1.c: 203: if (lights == 2) {
 18676  019B  0874               	movf	setDimmerLights_IntrControl@lights,w
 18677  019C  3A02               	xorlw	2
 18678  019D  1D03               	skipz
 18679  019E  0008               	return
 18680                           
 18681                           ;Dimmer_B1.c: 204: RB4 = 0;
 18682  019F  0020               	movlb	0	; select bank0
 18683  01A0  120D               	bcf	13,4	;volatile
 18684                           
 18685                           ;Dimmer_B1.c: 205: }
 18686                           ;Dimmer_B1.c: 212: }
 18687                           ;Dimmer_B1.c: 213: } else {
 18688  01A1  0008               	return
 18689  01A2                     i1l7210:	
 18690                           
 18691                           ;Dimmer_B1.c: 214: if (DimmerLightsIntr->TriacFlag == 1 && DimmerLightsIntr->GO == 0) {
 18692  01A2  0878               	movf	_DimmerLightsIntr,w
 18693  01A3  3E09               	addlw	9
 18694  01A4  0086               	movwf	6
 18695  01A5  3001               	movlw	1	; select bank2/3
 18696  01A6  0087               	movwf	7
 18697  01A7  1E81               	btfss	1,5
 18698  01A8  0008               	return
 18699  01A9  0878               	movf	_DimmerLightsIntr,w
 18700  01AA  0086               	movwf	6
 18701  01AB  3001               	movlw	1	; select bank2/3
 18702  01AC  0087               	movwf	7
 18703  01AD  1801               	btfsc	1,0
 18704  01AE  0008               	return
 18705                           
 18706                           ;Dimmer_B1.c: 215: DimmerLightsIntr->TriacCount++;
 18707  01AF  3001               	movlw	1
 18708  01B0  00F2               	movwf	??_setDimmerLights_IntrControl
 18709  01B1  0878               	movf	_DimmerLightsIntr,w
 18710  01B2  3E0A               	addlw	10
 18711  01B3  0086               	movwf	6
 18712  01B4  3001               	movlw	1	; select bank2/3
 18713  01B5  0087               	movwf	7
 18714  01B6  0872               	movf	??_setDimmerLights_IntrControl,w
 18715  01B7  0781               	addwf	1,f
 18716                           
 18717                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacCount == 2) {
 18718  01B8  0878               	movf	_DimmerLightsIntr,w
 18719  01B9  3E0A               	addlw	10
 18720  01BA  0086               	movwf	6
 18721  01BB  3001               	movlw	1	; select bank2/3
 18722  01BC  0087               	movwf	7
 18723  01BD  0801               	movf	1,w
 18724  01BE  3A02               	xorlw	2
 18725  01BF  1D03               	skipz
 18726  01C0  0008               	return
 18727                           
 18728                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount = 0;
 18729  01C1  0878               	movf	_DimmerLightsIntr,w
 18730  01C2  3E0A               	addlw	10
 18731  01C3  0086               	movwf	6
 18732  01C4  3001               	movlw	1	; select bank2/3
 18733  01C5  0087               	movwf	7
 18734  01C6  0181               	clrf	1
 18735                           
 18736                           ;Dimmer_B1.c: 218: DimmerLightsIntr->TriacFlag = 0;
 18737  01C7  0878               	movf	_DimmerLightsIntr,w
 18738  01C8  3E09               	addlw	9
 18739  01C9  0086               	movwf	6
 18740  01CA  3001               	movlw	1	; select bank2/3
 18741  01CB  0087               	movwf	7
 18742  01CC  1281               	bcf	1,5
 18743  01CD  0008               	return
 18744  01CE                     __end_of_setDimmerLights_IntrControl:	
 18745                           
 18746                           	psect	text127
 18747  1C83                     __ptext127:	
 18748 ;; *************** function _DimmerIntrPointSelect *****************
 18749 ;; Defined at:
 18750 ;;		line 71 in file "../src/Dimmer_B1.c"
 18751 ;; Parameters:    Size  Location     Type
 18752 ;;  lights          1    wreg     unsigned char 
 18753 ;; Auto vars:     Size  Location     Type
 18754 ;;  lights          1    1[COMMON] unsigned char 
 18755 ;; Return value:  Size  Location     Type
 18756 ;;		None               void
 18757 ;; Registers used:
 18758 ;;		wreg
 18759 ;; Tracked objects:
 18760 ;;		On entry : 0/0
 18761 ;;		On exit  : 0/0
 18762 ;;		Unchanged: 0/0
 18763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18765 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18767 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18768 ;;Total ram usage:        2 bytes
 18769 ;; Hardware stack levels used:    1
 18770 ;; This function calls:
 18771 ;;		Nothing
 18772 ;; This function is called by:
 18773 ;;		_setDimmerLights_IntrControl
 18774 ;; This function uses a non-reentrant model
 18775 ;;
 18776                           
 18777                           
 18778                           ;psect for function _DimmerIntrPointSelect
 18779  1C83                     _DimmerIntrPointSelect:	
 18780                           
 18781                           ;incstack = 0
 18782                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18783                           ;DimmerIntrPointSelect@lights stored from wreg
 18784  1C83  00F1               	movwf	DimmerIntrPointSelect@lights
 18785                           
 18786                           ;Dimmer_B1.c: 73: if (lights == 1) {
 18787  1C84  0871               	movf	DimmerIntrPointSelect@lights,w
 18788  1C85  3A01               	xorlw	1
 18789  1C86  1D03               	skipz
 18790  1C87  2C8C               	goto	i1l735
 18791                           
 18792                           ;Dimmer_B1.c: 74: DimmerLightsIntr = &DimmerLights1;
 18793  1C88  30BE               	movlw	_DimmerLights1& (0+255)
 18794  1C89  00F0               	movwf	??_DimmerIntrPointSelect
 18795  1C8A  0870               	movf	??_DimmerIntrPointSelect,w
 18796  1C8B  00F8               	movwf	_DimmerLightsIntr
 18797  1C8C                     i1l735:	
 18798                           
 18799                           ;Dimmer_B1.c: 75: }
 18800                           ;Dimmer_B1.c: 78: if (lights == 2) {
 18801  1C8C  0871               	movf	DimmerIntrPointSelect@lights,w
 18802  1C8D  3A02               	xorlw	2
 18803  1C8E  1D03               	skipz
 18804  1C8F  0008               	return
 18805                           
 18806                           ;Dimmer_B1.c: 79: DimmerLightsIntr = &DimmerLights2;
 18807  1C90  30CD               	movlw	_DimmerLights2& (0+255)
 18808  1C91  00F0               	movwf	??_DimmerIntrPointSelect
 18809  1C92  0870               	movf	??_DimmerIntrPointSelect,w
 18810  1C93  00F8               	movwf	_DimmerLightsIntr
 18811  1C94  0008               	return
 18812  1C95                     __end_of_DimmerIntrPointSelect:	
 18813                           
 18814                           	psect	text128
 18815  1C22                     __ptext128:	
 18816 ;; *************** function _IOC_ISR *****************
 18817 ;; Defined at:
 18818 ;;		line 401 in file "../src/MCU_B1.c"
 18819 ;; Parameters:    Size  Location     Type
 18820 ;;		None
 18821 ;; Auto vars:     Size  Location     Type
 18822 ;;		None
 18823 ;; Return value:  Size  Location     Type
 18824 ;;		None               void
 18825 ;; Registers used:
 18826 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18827 ;; Tracked objects:
 18828 ;;		On entry : 0/0
 18829 ;;		On exit  : 0/0
 18830 ;;		Unchanged: 0/0
 18831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18836 ;;Total ram usage:        0 bytes
 18837 ;; Hardware stack levels used:    1
 18838 ;; Hardware stack levels required when called:    3
 18839 ;; This function calls:
 18840 ;;		_setDimmerReClock
 18841 ;; This function is called by:
 18842 ;;		_ISR
 18843 ;; This function uses a non-reentrant model
 18844 ;;
 18845                           
 18846                           
 18847                           ;psect for function _IOC_ISR
 18848  1C22                     _IOC_ISR:	
 18849                           
 18850                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18851                           
 18852                           ;incstack = 0
 18853                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18854  1C22  1D8B               	btfss	11,3	;volatile
 18855  1C23  0008               	return
 18856  1C24  1C0B               	btfss	11,0	;volatile
 18857  1C25  0008               	return
 18858  1C26  0027               	movlb	7	; select bank7
 18859  1C27  1D16               	btfss	22,2	;volatile
 18860  1C28  0008               	return
 18861                           
 18862                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18863  1C29  1116               	bcf	22,2	;volatile
 18864                           
 18865                           ;MCU_B1.c: 404: IOCIF = 0;
 18866  1C2A  100B               	bcf	11,0	;volatile
 18867                           
 18868                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18869  1C2B  0021               	movlb	1	; select bank1
 18870  1C2C  1C20               	btfss	_myMain^(0+128),0
 18871  1C2D  0008               	return
 18872                           
 18873                           ;MCU_B1.c: 408: setDimmerReClock();
 18874  1C2E  319B  2369         	fcall	_setDimmerReClock
 18875  1C30  0008               	return
 18876  1C31                     __end_of_IOC_ISR:	
 18877                           
 18878                           	psect	text129
 18879  1B69                     __ptext129:	
 18880 ;; *************** function _setDimmerReClock *****************
 18881 ;; Defined at:
 18882 ;;		line 244 in file "../src/MCU_B1.c"
 18883 ;; Parameters:    Size  Location     Type
 18884 ;;		None
 18885 ;; Auto vars:     Size  Location     Type
 18886 ;;		None
 18887 ;; Return value:  Size  Location     Type
 18888 ;;		None               void
 18889 ;; Registers used:
 18890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18891 ;; Tracked objects:
 18892 ;;		On entry : 0/0
 18893 ;;		On exit  : 0/0
 18894 ;;		Unchanged: 0/0
 18895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18900 ;;Total ram usage:        0 bytes
 18901 ;; Hardware stack levels used:    1
 18902 ;; Hardware stack levels required when called:    2
 18903 ;; This function calls:
 18904 ;;		_setDimmerLights_IntrIOC_GO
 18905 ;; This function is called by:
 18906 ;;		_IOC_ISR
 18907 ;; This function uses a non-reentrant model
 18908 ;;
 18909                           
 18910                           
 18911                           ;psect for function _setDimmerReClock
 18912  1B69                     _setDimmerReClock:	
 18913                           
 18914                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18915                           
 18916                           ;incstack = 0
 18917                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18918  1B69  3001               	movlw	1
 18919  1B6A  3190  20E2  319B   	fcall	_setDimmerLights_IntrIOC_GO
 18920                           
 18921                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 18922  1B6D  3002               	movlw	2
 18923  1B6E  3190  20E2         	fcall	_setDimmerLights_IntrIOC_GO
 18924  1B70  0008               	return
 18925  1B71                     __end_of_setDimmerReClock:	
 18926                           
 18927                           	psect	text130
 18928  10E2                     __ptext130:	
 18929 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18930 ;; Defined at:
 18931 ;;		line 28 in file "../src/Dimmer_B1.c"
 18932 ;; Parameters:    Size  Location     Type
 18933 ;;  lights          1    wreg     unsigned char 
 18934 ;; Auto vars:     Size  Location     Type
 18935 ;;  lights          1    2[COMMON] unsigned char 
 18936 ;; Return value:  Size  Location     Type
 18937 ;;		None               void
 18938 ;; Registers used:
 18939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18940 ;; Tracked objects:
 18941 ;;		On entry : 0/0
 18942 ;;		On exit  : 0/0
 18943 ;;		Unchanged: 0/0
 18944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18946 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18948 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18949 ;;Total ram usage:        1 bytes
 18950 ;; Hardware stack levels used:    1
 18951 ;; Hardware stack levels required when called:    1
 18952 ;; This function calls:
 18953 ;;		_DimmerIntrIOCPointSelect
 18954 ;; This function is called by:
 18955 ;;		_setDimmerReClock
 18956 ;; This function uses a non-reentrant model
 18957 ;;
 18958                           
 18959                           
 18960                           ;psect for function _setDimmerLights_IntrIOC_GO
 18961  10E2                     _setDimmerLights_IntrIOC_GO:	
 18962                           
 18963                           ;incstack = 0
 18964                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18965                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18966  10E2  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18967                           
 18968                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18969  10E3  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18970  10E4  319D  2529  3190   	fcall	_DimmerIntrIOCPointSelect
 18971                           
 18972                           ;Dimmer_B1.c: 31: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 18973  10E7  0021               	movlb	1	; select bank1
 18974  10E8  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18975  10E9  0086               	movwf	6
 18976  10EA  3001               	movlw	1	; select bank2/3
 18977  10EB  0087               	movwf	7
 18978  10EC  1801               	btfsc	1,0
 18979  10ED  0008               	return
 18980  10EE  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18981  10EF  3E09               	addlw	9
 18982  10F0  0086               	movwf	6
 18983  10F1  3001               	movlw	1	; select bank2/3
 18984  10F2  0087               	movwf	7
 18985  10F3  1A81               	btfsc	1,5
 18986  10F4  0008               	return
 18987                           
 18988                           ;Dimmer_B1.c: 32: DimmerLightsIntrIOC->GO = 1;
 18989  10F5  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18990  10F6  0086               	movwf	6
 18991  10F7  3001               	movlw	1	; select bank2/3
 18992  10F8  0087               	movwf	7
 18993  10F9  1401               	bsf	1,0
 18994                           
 18995                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->TriacFlag = 1;
 18996  10FA  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18997  10FB  3E09               	addlw	9
 18998  10FC  0086               	movwf	6
 18999  10FD  3001               	movlw	1	; select bank2/3
 19000  10FE  0087               	movwf	7
 19001  10FF  1681               	bsf	1,5
 19002                           
 19003                           ;Dimmer_B1.c: 34: if (RB2 == 1) {
 19004  1100  0020               	movlb	0	; select bank0
 19005  1101  1D0D               	btfss	13,2	;volatile
 19006  1102  2907               	goto	i1l6712
 19007                           
 19008                           ;Dimmer_B1.c: 35: Dimmer.Correction = 1;
 19009  1103  0021               	movlb	1	; select bank1
 19010  1104  01CA               	clrf	(_Dimmer^(0+128)+2)
 19011  1105  0ACA               	incf	(_Dimmer^(0+128)+2),f
 19012                           
 19013                           ;Dimmer_B1.c: 36: } else {
 19014  1106  0008               	return
 19015  1107                     i1l6712:	
 19016                           
 19017                           ;Dimmer_B1.c: 37: Dimmer.Correction = 0;
 19018  1107  0021               	movlb	1	; select bank1
 19019  1108  01CA               	clrf	(_Dimmer^(0+128)+2)
 19020  1109  0008               	return
 19021  110A                     __end_of_setDimmerLights_IntrIOC_GO:	
 19022                           
 19023                           	psect	text131
 19024  1D29                     __ptext131:	
 19025 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19026 ;; Defined at:
 19027 ;;		line 8 in file "../src/Dimmer_B1.c"
 19028 ;; Parameters:    Size  Location     Type
 19029 ;;  lights          1    wreg     unsigned char 
 19030 ;; Auto vars:     Size  Location     Type
 19031 ;;  lights          1    1[COMMON] unsigned char 
 19032 ;; Return value:  Size  Location     Type
 19033 ;;		None               void
 19034 ;; Registers used:
 19035 ;;		wreg
 19036 ;; Tracked objects:
 19037 ;;		On entry : 0/0
 19038 ;;		On exit  : 0/0
 19039 ;;		Unchanged: 0/0
 19040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19042 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19043 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19044 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19045 ;;Total ram usage:        2 bytes
 19046 ;; Hardware stack levels used:    1
 19047 ;; This function calls:
 19048 ;;		Nothing
 19049 ;; This function is called by:
 19050 ;;		_setDimmerLights_IntrIOC_GO
 19051 ;; This function uses a non-reentrant model
 19052 ;;
 19053                           
 19054                           
 19055                           ;psect for function _DimmerIntrIOCPointSelect
 19056  1D29                     _DimmerIntrIOCPointSelect:	
 19057                           
 19058                           ;incstack = 0
 19059                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19060                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19061  1D29  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19062                           
 19063                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19064  1D2A  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19065  1D2B  3A01               	xorlw	1
 19066  1D2C  1D03               	skipz
 19067  1D2D  2D33               	goto	i1l724
 19068                           
 19069                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19070  1D2E  30BE               	movlw	_DimmerLights1& (0+255)
 19071  1D2F  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19072  1D30  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19073  1D31  0021               	movlb	1	; select bank1
 19074  1D32  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19075  1D33                     i1l724:	
 19076                           
 19077                           ;Dimmer_B1.c: 12: }
 19078                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19079  1D33  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19080  1D34  3A02               	xorlw	2
 19081  1D35  1D03               	skipz
 19082  1D36  0008               	return
 19083                           
 19084                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19085  1D37  30CD               	movlw	_DimmerLights2& (0+255)
 19086  1D38  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19087  1D39  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19088  1D3A  0021               	movlb	1	; select bank1
 19089  1D3B  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19090  1D3C  0008               	return
 19091  1D3D                     __end_of_DimmerIntrIOCPointSelect:	
 19092  007E                     btemp	set	126	;btemp
 19093  007E                     pic14e$flags	set	126
 19094  007E                     wtemp	set	126
 19095  007E                     wtemp0	set	126
 19096  0080                     wtemp1	set	128
 19097  0082                     wtemp2	set	130
 19098  0084                     wtemp3	set	132
 19099  0086                     wtemp4	set	134
 19100  0088                     wtemp5	set	136
 19101  007F                     wtemp6	set	127
 19102  007E                     ttemp	set	126
 19103  007E                     ttemp0	set	126
 19104  0081                     ttemp1	set	129
 19105  0084                     ttemp2	set	132
 19106  0087                     ttemp3	set	135
 19107  007F                     ttemp4	set	127
 19108  007E                     ltemp	set	126
 19109  007E                     ltemp0	set	126
 19110  0082                     ltemp1	set	130
 19111  0086                     ltemp2	set	134
 19112  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         261
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     79      79
    BANK1            80      5      79
    BANK2            80      0      77
    BANK3            80      4      73
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK2[2]), DlySw1(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _main->_Switch_Main
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_getMain_All_Error_Status
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setRF_DimmerLights
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_setRF_DimmerLights
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Switch_Main->_setMain_Exception

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  173542
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1705
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     669
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0     238
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0     238
                                              7 BANK0      2     2      0
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   43570
                                             77 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   27047
                                             70 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     604
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0   16189
                                             75 BANK0      2     2      0
                                              0 BANK1      5     5      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0   12795
                                             70 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1182
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1182
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   59261
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   59261
                                             75 BANK0      4     4      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   58034
                                             73 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1767
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   55995
                             _setBuz
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   36129
                                             70 BANK0      3     3      0
             _getDimmerLights_Status
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18161
                                             68 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   17842
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   17749
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   17656
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    4020
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4925
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1199
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      71
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0     114
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1306
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1306
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1739
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1442
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   10215
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1102
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   14698
                                             70 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   14092
                                             69 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   10294
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1    1876
                                              7 BANK0      3     2      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1151
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     297
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   34351
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   34351
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0   11996
                                             66 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1705
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                4     4      0   12318
                                             66 BANK0      4     4      0
            _DimmerLightsPointSelect
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    9693
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    8711
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     579
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    4368
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3665
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    3324
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1679
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     154
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     154
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
           _setRF_DimmerLights
             _setPercentValue
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _setTxData
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      5      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      49      11       91.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     185      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     185      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Nov 15 11:02:17 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 177E                                       l98 1792  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1FDC  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 0079                     _getDimmerLights_Line 1D16  
                 __end_of_setDelayOff_GO 0946                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 1646  
                   _setDimmerLights_Line 1DA3                             ___ftadd@sign 0048  
                                    l110 14F3                                      l106 14F9  
                                    l107 14F5                                      l108 14E3  
                                    l330 1E06                                      l331 1E08  
                   _setDimmerLights_SwOn 1470                                      l255 0AA6  
                                    l280 0C44                                      l281 0C8B  
                                    l374 109A                                      l582 0A02  
                                    l835 08D9                                      l775 1CE7  
                                    l873 1D1F                                      l786 1215  
                                    l874 1D26                                      _GIE 005F  
                                    _CRC 00CB                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 00CF  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00BC                                      _ISR 0004  
                                    _WDT 0125             getDimmerLights_Status@lights 0022  
                                    _Sw1 0154                                      _Sw2 01DC  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1E13  
                  _Buzzer_Initialization 1B2D                          __end_of_ADC_Set 1B69  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023             getDimmerLights_Status@status 0023  
                        _setDimmerLights 0D99                   _setMain_Exception$3924 00EB  
                      ??_getSw_KeyStatus 0020                    _setDimmerLights_AdjRF 1F97  
                                   ?_ISR 0070          setDimmerLights_ErrorClose@count 0067  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1C31  
                             Load_Main@i 002F                               Load_Main@j 002B  
                           ___ftdiv@sign 003D                                     l1005 1F20  
                                   l1006 1F2A                                     l1040 13DF  
                                   l1322 11B1                                     l1331 1546  
                                   l1308 12B9                                     l2204 05E3  
                                   l2205 05DF                                     l2207 061C  
               ?_DimmerLightsPointSelect 0070                                     l2262 12F1  
                                   l2246 0BC7                                     l1519 1363  
                         _Load_Main$4305 002D                                     l2280 16C3  
                                   l2256 0C18                                     l1562 11CE  
                                   l2610 1FEC                                     l1563 11E9  
                                   l2195 0664                                     l2276 0BAB  
                                   l2620 0334                          __end_of_IOC_Set 1BEF  
                                   l2197 05A1                                     l2198 05A3  
                                   l2622 020D                                     l1567 11E5  
                                   l2199 05AB                                     l2288 1390  
                                   l1692 0374                                     l1844 0F53  
                                   l1693 044B                                     l2902 0979  
                                   l1694 0449                                     l1689 047B  
                                   l2594 1DBF                                     l2931 0520  
                                   l2908 0990                                     l9000 107A  
                                   l9002 107D                    _setDimmerLights_SwOff 0886  
                                   l9006 1083                                     l9120 0B3F  
                                   l8330 0956                                     l9026 11C9  
                                   l9210 0C1F                                     l8410 04D9  
                                   l8340 097E                                     l8332 0960  
                                   l9300 1181                                     l9036 11E0  
                                   l9028 11D2                                     l9212 0C22  
                                   l8420 04FB                                     l8500 075B  
                                   l9140 0B84                                     l8342 0986  
                                   l8334 0965                                     l8326 094F  
                                   l9302 1165                                     l9062 15BF  
                                   l9070 15C7                                     l9230 0C3B  
                                   l8430 051C                                     l8422 04FF  
                                   l9142 0B88                                     l9134 0B6B  
                                   l9304 1186                                     l9048 15AE  
                                   l9056 15B6                                     l9216 0C28  
                                   l9160 0A75                                     l8416 04EC  
                                   l9144 0B8C                                     l8354 1C98  
                                   l9082 15E3                                     l9218 0C2B  
                                   l8434 0532                                     l8418 04F6  
                                   l8530 07C8                                     l8522 07B4  
                                   l8506 0771                                     l9138 0B80  
                                   l9244 0C56                                     l9228 0C41  
                                   l9164 0A7B                                     l8428 0512  
                                   l9148 0B90                                     l9270 10B6  
                                   l8358 1C9E                                     l8550 0D2B  
                                   l9078 15DF                                     l9086 15E7  
                                   l9326 0DED                                     l9246 0C6F  
                                   l9190 0AB9                                     l9182 0AAC  
                                   l9158 0A72                                     l8438 0544  
                                   l8534 07D0                                     l8518 07AC  
                                   l8608 0829                                     l8376 1F80  
                                   l8464 0F84                                     l9096 1DB0  
                                   l9192 0ABC                                     l9184 0AAF  
                                   l9504 1C7D                                     l8448 055F  
                                   l8392 04B0                                     l9282 1FCB  
                                   l9610 1414                                     l8458 0F6E  
                                   l8570 0D69                                     l8722 0B2E  
                                   l8642 15FD                                     l9346 1564  
                                   l9258 0C8D                                     l9178 0A8D  
                                   l9268 10AB                                     l9276 1FC2  
                                   l9620 1424                                     l9604 140B  
                                   l8580 0D82                                     l8660 161C  
                                   l9460 1199                                     l9196 0AC2  
                                   l9188 0AB5                                     l8388 04A9  
                                   l9524 0BCA                    _myMain_Initialization 1C31  
                                   l9278 1FC5                                     l9614 141B  
                                   l9606 140E                                     l8742 0923  
                                   l8486 0FDE                                     l8478 0FC5  
                                   l8670 1637                                     l8398 04BF  
                                   l9616 141E                                     l8592 1D48  
                                   l8744 0930                                     l8584 0D90  
                                   l8576 0D76                                     l8568 0D5B  
                                   l8760 1C5A                                     l8648 1608  
                                   l9552 0C0E                                     l9536 0BE2  
                                   l9392 17DD                                     l9368 1269  
                                   l8746 0939                                     l8738 091D  
                                   l8578 0D7F                                     l8674 163F  
                                   l8666 162E                                     l8658 1610  
                                   l9546 0C03                                     l9394 17B2  
                                   l9562 1D5C                                     l9810 1F43  
                                   l9716 166A                                     l8932 1E8C  
                                   l9396 17E3                                     l9718 1670  
                                   l8934 1E92                                     l9814 1F48  
                                   l8848 14B0                                     l9728 1697  
                                   l9832 151C                                     l8960 16CA  
                                   l9576 1EE3                                     l9920 0ED2  
                                   l9808 1F40                                     _CFGS 0CAE  
                                   l8874 08CD                                     l9826 1507  
                                   l9586 1EEF                                     l9578 1EE5  
                                   l8884 122C                                     l8964 16E3  
                                   l9860 0A2D                                     l9852 0A15  
                                   l9588 1EF3                                     l8990 1E3E  
                                   l9870 0A4B                                     l9854 0A22  
                                   l9950 0F22                                     l8984 1E35  
                                   l8976 137E                                     l9960 0F37  
                           __CFG_WDTE$ON 0000                                     l8986 1E38  
                                   l9866 0A3B                                     l9962 0F38  
                                   l9876 0A5B                                     l9878 0A64  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   _PEIE 005E                                     u9015 07D1  
                                   u9025 07D7                                     u9115 0D77  
                                   u9055 0D32                                     u8515 0974  
                                   u9235 1613                                     u9340 0ADC  
                                   u9085 0D5C                                     u9175 0815  
                                   u8535 0981                                     u9255 161D  
                                   u9505 1D88                                     u9345 0ADA  
                                   u9265 1627                                     u8705 04DA  
                                   u9275 162F                                     u8565 0997  
                                   u8495 095B                                     u8735 04ED  
                                   u8905 0FDF                                     u8765 0500  
                                   u8865 0F96                                     u8945 077D  
                                   u8875 0FA6                                     u8795 0513  
                                   u8955 078D                                     _LWLO 0CAD  
                                   u8885 0FC6                                     u8895 0FD5  
                                   u8975 07B5                                     u8985 07BB  
                                   _RSSI 00D0                                     _WREN 0CAA  
                                   _Buz1 00B0                                     _Load 0127  
                                   _Temp 00D8                                     _main 16F5  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0A08  
                        __end_of_RF_Main 1B36                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0020                                     btemp 007E  
                        __end_of_WDT_Set 1C07                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1B69  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 13A5                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                        ?_getDimmer_LoadOK 0070  
                                  ??_ISR 0075                             ___fttol@exp1 0058  
                           ___fttol@lval 0054                   _getDimmerLights_Status 1C40  
                     ??_getDimmer_LoadOK 0020           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1BE3         setDimmerLights_ErrorClose@lights 0068  
          __end_of_DimmerIntrPointSelect 1C95                    ?_getDimmerLights_Line 0070  
                                  l10000 05C2                                    l10102 01F8  
                                  l10034 0601                                    l10036 0603  
                                  l10052 0631                                    l10142 02AB  
                                  l10118 023B                                    l10240 120C  
                                  l10064 0652                                    l10128 026D  
                                  l10152 02DD                                    l10242 120F  
                                  l10244 1217                                    l10084 1DC4  
                                  l10192 14CD                                    l10088 1DCA  
                                  l10408 131D                                    l10274 06DA  
                                  l10514 0414                                    l10178 0330  
                                  l10426 134D                                    l10508 0407  
                                  l10516 041A                                    l10526 042F  
                                  l10374 0CD7                                    l10366 0CB2  
                                  l10458 0363                                    l10394 0D0C  
                                  l10378 0CDF                                    l10484 03B8  
                                  l10574 0469                                    l10478 038E  
                                  l10662 1719                    ?_setDimmerLights_Main 0070  
                                  l10666 1724                                    l10598 1FF5  
                  ?_setDimmerLights_Line 0070                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 01E5  
                        __end_of___awdiv 1646                          __end_of___ftadd 0577  
                        __end_of___ftdiv 1000                                    u10125 116E  
                                  u11005 0F28                                    u11105 05BC  
                                  u10225 17BB                                    u10085 10A0  
                                  u12005 03CD                          __end_of___ftmul 07F8  
                                  u11235 0642                          ___awdiv@divisor 0020  
                                  _T1CON 0018                                    u11505 14C3  
                                  u12065 0420                          __end_of___fttol 0D99  
                                  u11725 0CC5                                    u11815 1314  
                                  u11665 12B0                                    u11825 1323  
                                  u11845 133D                                    u11775 0CF9  
                                  u11855 135B                                    u10985 0F13  
                                  _IOCBF 0396                                    u11985 03BA  
                                  u11995 03BF                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l724 1D33  
                                  i1l735 1C8C                                    i1l745 0170  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 00EA                  __end_of_Timeout_Counter 1D8E  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 110A  
             _setDimmerLights_IntrIOC_GO 10E2                         __end_of_TMR1_ISR 1133  
           __size_of_CC2500_WriteCommand 001A       __end_of_setDimmerLights_ErrorClose 1800  
             _setDimmerLights_ErrorClose 17A6                         __end_of_TMR1_Set 1BFB  
                                  _getAD 1F35                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1CDD              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03D0  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1DE3  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0012             __end_of_getMain_LightsStatus 1189  
          __end_of_setLED_Initialization 1CB9                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0AD2  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 082B                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                        ??_setPercentValue 0059  
                           __end_of_main 174D                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1B4C                       ??_setMemory_Modify 0020  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0E25                     _setSw_Initialization 07F8  
                                 ??_main 006F                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0B3E  
                         _setMemory_Data 1BB3                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03D0                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1CF0                   ?_setDimmerLights_AdjRF 0070  
               __size_of_setRFSW_Control 0058                  ??_Switch_Initialization 0025  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
           setDimmerLights_AdjControl@sw 0028                        ??_getRF_KeyStatus 0020  
                 ?_setDimmerLights_SwOff 0070                              _DlyOff_Main 09A7  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006F  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1F97                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 09A7                 _getMain_All_Error_Status 11B8  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1E99  
                                 i1l7210 01A2                                   i1l7206 019B  
                                 i1l7142 0099                                   i1l7170 0103  
                                 i1l7146 00A0                                   i1l7164 00EA  
                                 i1l7172 0109                                   i1l7182 013C  
                                 i1l7166 00F0                                   i1l6712 1107  
                                 i1l7192 016B                                   i1l7178 0125  
                                 i1l7186 0150                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                                 u653_25 0074                       __size_of_Load_Main 0144  
                                 _TMR1IE 0488                                   _TMR1IF 0088  
                                 u775_25 112D                                   _IO_Set 1E13  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1066           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1DA3                                   _Dimmer 00C8  
                                 _DlySw1 0169                                   _DlySw2 016B  
             __end_of_Mcu_Initialization 1CCB                      __end_of_Buzzer_Main 1500  
                                 _Memory 0220                                   _Timer1 0120  
     __end_of_setDimmerLights_TriggerAdj 1F15               _setDimmerLights_TriggerAdj 1EF5  
                                 ___bmul 1C95                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                    setDimmerLights@lights 0029  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                   ??_getDimmerLights_Line 0020  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                 ??_setDimmerLights_Line 0020                                   _r_data 00D6  
                                 _s_data 00D7                   ??_setDimmerLights_SwOn 0062  
                                 _setLED 159F                                   _myMain 00A0  
                 __end_of_setMemory_Data 1BBF                         _DimmerLightsIntr 0078  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0027  
                       ___awdiv@quotient 0027                                   _setBuz 174D  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 1B56  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039              ?_setDimmerLights_AdjControl 0070  
    __end_of_setDimmerLights_IntrControl 01CE              _setDimmerLights_IntrControl 0049  
               Flash_Memory_Read@address 0022                         ?_Timeout_Counter 0070  
             __end_of_setMemory_LoopSave 1D16              getMain_Lights_Count@status1 0022  
            getMain_Lights_Count@status2 0023              getMain_Lights_Count@status3 0021  
                  __end_of_SwPointSelect 1D65             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 0074                  __size_of_LedPointSelect 0020  
                __size_of_getMain_LoadOK 000E                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009               getMain_LightsStatus@status 0028  
                             _TouchPower 1DB8               ?_getAll_DimmerLights_AdjGO 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0886         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0045                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                   _getRF_KeyStatus$5706 0022                            ?_my_MainTimer 0070  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                             __pidataBANK4 1F55  
                          __end_of_getAD 1F55                                ?_TMR1_ISR 0070  
                              ?_TMR1_Set 0070                   setLoad_AH_AL_Restore@i 0021  
              setMemory_LoopSave@command 0021             __size_of_setDimmerLights_Adj 0051  
                     _LED_Initialization 1BCB                          _getSw_KeyStatus 1ED6  
              ??_setControl_Lights_Table 0069                       getRF_KeyStatus@key 0021  
                       ??_DelayTimejudge 0024                          ?_setMemory_Data 0020  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0027  
                   _getMain_Lights_Count 1DCD                                ?_WDT_Main 0070  
                      __end_of_Load_Main 0481                       __size_of_getBuz_GO 0011  
                   _getMain_LightsStatus 115D               __end_of_set_TimeoutCleared 1B51  
               __end_of_setDimmerReClock 1B71                       __size_of_getRxData 006F  
                    ?_LED_Initialization 0070                    getMain_LightsStatus@i 0026  
                      ?_CC2500_WriteByte 0070                           _DimmerLights11 00CC  
                         _DimmerLights22 00CD                     __size_of_setLED_Main 0041  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1B36                       ??_CC2500_WriteByte 0020  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                               __pbssBANK4 0220  
                              ?_Fosc_Set 0070                              _Buzzer_Main 14B6  
                      ??_setRFSW_Control 0066                        __end_of_Temp_Main 1B3C  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1B71  
                             __pnvCOMMON 007B                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 006D                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0077                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 16F5                      _CC2500_WriteCommand 1E2C  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0075  
                          ?_setTemp_Main 0070                               _getLoad_AD 0C91  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                               _getLoad_OK 1B81  
                     __size_of_setTxData 0099                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                    ?_getMain_Lights_Count 0070  
                                _ADC_Set 1B62                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 12F5                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1BA7  
                     _setRFSW_AdjControl 1365                                  _IOC_ISR 1C22  
                                _IOC_Set 1BE3                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 1289  
              __size_of_getDimmer_LoadOK 0008                        _Flash_Memory_Read 1E46  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0076  
                 __size_of_CC2500_TxData 0068              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 01A0  
                                _RF_Main 1B33                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1BFB  
        __end_of_setControl_Lights_Table 0BAC                          setRF_Main@error 006E  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 142A                  ??_setLoad_AH_AL_Restore 0020  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1BB3  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 1C72  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                                _VarLED1 0161                                  _VarLED2 0165  
         __end_of_getDimmerLights_Status 1C50                        __end_of_getRxData 0C1B  
                __end_of_getSw_KeyStatus 1EF5                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1D3D                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1EB7                     ??_setRFSW_AdjControl 0064  
                         ??_setTemp_Main 0027                          __size_of___bmul 0012  
                                ___awdiv 15F2                                  ___ftadd 0481  
                                ___ftdiv 0F57                                  ___ftmul 0744  
                                ___fttol 0D12                      __end_of_Switch_Main 2000  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1C72  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0053                     setRFSW_AdjControl@sw 0067  
                        __size_of_setBuz 0059                                  __ptext1 132C  
                                __ptext2 1C31                                  __ptext3 12F5  
                                __ptext4 0C91                                  __ptext5 1F35  
                                __ptext6 1CCB                                  __ptext7 0002  
                                __ptext8 1B39                                  __ptext9 0EBE  
                ??_setDimmerLights_AdjRF 005F                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1C83                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 12BF  
              __end_of_Flash_Memory_Read 1E60                  ??_setDimmerLights_SwOff 0062  
                             _setRF_Main 0577                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1B79                        _DimmerLights_Main 11EB  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1B9C  
             __end_of_CC2500_ClearRXFIFO 1B40                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1B44            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 007B                           _LedPointSelect 1F15  
                    _DelayOffPointSelect 1D3D                           _getMain_LoadOK 1C14  
                                clrloop0 1B5D           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1C14                     end_of_initialization 0045  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 1133  
                          _DelayTime_1us 1095                        __end_of_setTxData 0EBE  
             __end_of_Flash_Memory_Write 11B8                                  init_ram 1B56  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0066  
                   Flash_Memory_Read@ret 0023                                  initloop 1B57  
                             _setSw_Main 01CE                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 0064                        _CC2500_ReadStatus 1070  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1CA7  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 0C1B  
                          _CC2500_TxData 0A6A                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 1500  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1067                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 121F                       _Mcu_Initialization 1CB9  
               __size_of_CC2500_PowerRST 0044                     __end_of_my_MainTimer 1365  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1F35                  __end_of_setPercentValue 1470  
                 __end_of_getMain_LoadOK 1C22                 __size_of_CC2500_WriteREG 0023  
              __end_of_CC2500_InitSetREG 115D                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 154E  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1095  
            ??_getAll_DimmerLights_AdjGO 0020          getMain_All_Error_Status@command 0025  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1E2C  
                   _setRF_Initialization 1B9C                       _setMemory_LoopSave 1D03  
                            _Switch_Main 1FDC                        __size_of_LED_Main 000C  
                       ?_getSw_KeyStatus 0070                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1CDD  
                __end_of_getRF_KeyStatus 1C83                        _setMain_Exception 0A08  
                       ??_setMemory_Data 0021                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1D8E                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                     ?_setMain_Exception 0070                      ?_setMemory_LoopSave 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1CA7  
               setMain_Exception@command 00EE                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1D29          _setDimmerLights_AdjControl$2578 0027  
                      getSw_KeyStatus@sw 0024                        __size_of_TMR1_ISR 0029  
          __size_of_getDimmerLights_Line 0013                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C            __size_of_setDimmerLights_Main 0057  
                         __end_of_setLED 15F2            __size_of_setDimmerLights_Line 0015  
          __size_of_setDimmerLights_SwOn 0046                           __end_of_setBuz 17A6  
                    ??_setMain_Exception 006B                     _CC2500_FrequencyCabr 1BA7  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 169D  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 121F  
                        ?_LedPointSelect 0070                                _Load_Main 033D  
                            __end_of_ISR 0013                          ?_getMain_LoadOK 0070  
                       _getDimmer_LoadOK 1B89                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1ED6  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0F57                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1B4C                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 015D  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0037                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 0A6A                __size_of_CC2500_WriteByte 0019  
                              _Temp_Main 1B39                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D1  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D4                              __pdataBANK4 0245  
              _getAll_DimmerLights_AdjGO 1C50                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0069                        ??_CC2500_ReadByte 0020  
       __end_of_getMain_All_Error_Status 11EB                         _CC2500_SIDLEMode 1B44  
             __size_of_DimmerLights_Main 0034                __end_of_setRF_DimmerValue 1254  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
         _getAll_DimmerLights_AdjGO$2558 0022                              __pbssCOMMON 0076  
                               ?_IOC_Set 0070                                ___latbits 0003  
                       _setMemory_Modify 1CF0                               ?_Load_Main 0070  
                          __pcstackBANK0 0020                            __pcstackBANK1 00EA  
                          __pcstackBANK3 01E5                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 008C  
                          DlyOff_Main@sw 0068                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 0061  
             __size_of_CC2500_ReadStatus 0025                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01BE  
                          _DimmerLights2 01CD                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1E7C                 setRFSW_AdjControl@status 0066  
                        ??_CC2500_TxData 0024                           getRxData@error 006A  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00F1  
                         Load_Main@adjgo 002C                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002E                   _setTemp_Initialization 0800  
                              _getBuz_GO 1C61      __end_of_Flash_Memory_Initialization 0744  
            _Flash_Memory_Initialization 0668                                 ?___awdiv 0020  
                              __ptext100 08E5                                __ptext101 0801  
                              __ptext110 13E6                                __ptext102 1C95  
                              __ptext111 1133                                __ptext103 1C40  
                              __ptext120 1D79                                __ptext112 1EB7  
                              __ptext104 1CDD                                __ptext121 1DFA  
                              __ptext113 1FB9                                __ptext105 1B71  
                              __ptext130 10E2                                __ptext122 14B6  
                              __ptext114 1BA7                                __ptext106 1B91  
                              __ptext131 1D29                                __ptext123 1B2D  
                              __ptext115 1095                                __ptext107 1D3D  
                              __ptext116 1B40                                __ptext108 1D8E  
                              __ptext125 110A                                __ptext117 1B3C  
                              __ptext109 1B44                                 ?___ftadd 003E  
                              __ptext126 0049                                __ptext118 1E2C  
                              __ptext127 1C83                                __ptext119 1B4C  
                              __ptext128 1C22                                __ptext129 1B69  
                              _getRxData 0BAC                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                  __size_of_my_MainTimer 0039                  __end_of_setRFSW_Control 16F5  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1B30  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0021  
                     __end_of_TouchPower 1DCD                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
          __end_of_setDimmerLights_AdjRF 1FB9                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2495 0068                                _r_address 00D5  
         __size_of_setDimmerLights_SwOff 005F           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 08E5             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1C40                           __size_of_getAD 0020  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1D51  
                    __end_of_setLED_Main 13E6                      _DimmerLightsIntrIOC 00CE  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1B39  
           setDimmerLights_SwOff@command 0064                        _CC2500_rfSettings 102F  
                               _LED_Main 1BD7                          SwPointSelect@sw 0021  
                              clear_ram0 1B5C                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 0062                             _my_MainTimer 132C  
                              _setTxData 0E25      __end_of_DimmerLights_Initialization 1DFA  
            _DimmerLights_Initialization 1DE3                       _CC2500_ClearRXFIFO 1B3C  
                     _CC2500_ClearTXFIFO 1B40           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1D79                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 1189                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 110A  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1BEF  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 0123  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1E46  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1CCB  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0023  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 006C  
                  __size_of_setTemp_Main 0099                  __size_of_setDelayOff_GO 0061  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0076  
                           setSw_Main@sw 0068         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1BCB  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 12F5  
                  _DlyOff_Initialization 1B91                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1B48  
                       __size_of_WDT_Set 000C                    setRFSW_Control@status 0067  
                setMain_Exception@status 00ED                       __end_of_getLoad_AD 0D12  
                     __end_of_getLoad_OK 1B89                    _Switch_Initialization 1C07  
      __size_of_getMain_All_Error_Status 0033                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0028                ?_getMain_All_Error_Status 0070  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 132C  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1DFA  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 005E  
                               _SwDetect 00D3                              ??_Temp_Main 0029  
                      setRFSW_Control@sw 0068            _getMain_All_Error_Status$3941 0021  
          _getMain_All_Error_Status$3950 0023                 __end_of_getDimmer_LoadOK 1B91  
                    _Load_Initialization 1B51                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0035  
                           _setTemp_Main 0EBE                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 setDimmerLights_SwOn@idle 0063  
                               ___awtoft 1F75                         ??_LedPointSelect 0020  
                               ___ftpack 0946            __size_of_getMain_Lights_Count 0016  
                       ??_getMain_LoadOK 0021            __size_of_getMain_LightsStatus 002C  
                      getTemp_AD@channel 0025                             ??_setRF_Main 006B  
                   CC2500_WriteREG@value 0022                              _setLED_Main 13A5  
             __end_of_setRF_DimmerLights 0B3E                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E       __size_of_getAll_DimmerLights_AdjGO 0011  
                   ?_Load_Initialization 0070                                 __ptext10 1B36  
                               __ptext11 0800                                 __ptext20 1D16  
                               __ptext12 1FDC                                 __ptext21 1C07  
                               __ptext13 01CE                                 __ptext30 169D  
                               __ptext22 07F8                                 __ptext14 1D65  
                               __ptext31 1365                                 __ptext23 1DB8  
                               __ptext15 1254                                 __ptext40 0A6A  
                               __ptext32 121F                                 __ptext24 1B33  
                               __ptext16 1ED6                                 __ptext41 0C1B  
                               __ptext33 1F97                                 __ptext25 0577  
                               __ptext17 1D51                                 __ptext50 1BE3  
                               __ptext42 1070                                 __ptext34 082B  
                               __ptext26 0BAC                                 __ptext18 0A08  
                               __ptext51 1B48                                 __ptext43 1E7C  
                               __ptext35 0744                                 __ptext27 12BF  
                               __ptext19 17A6                                 __ptext60 13A5  
                               __ptext52 1B62                                 __ptext44 1B30  
                               __ptext36 0481                                 __ptext28 1D03  
                               __ptext61 1BCB                                 __ptext53 033D  
                               __ptext45 1B9C                                 __ptext37 1CF0  
                               __ptext29 0B3E                                 __ptext70 1E46  
                               __ptext62 1CA7                                 __ptext54 1C14  
                               __ptext46 1CB9                                 __ptext38 1C72  
                               __ptext71 11EB                                 __ptext63 1289  
                               __ptext55 1B89                                 __ptext47 1BFB  
                               __ptext39 1C61                                 __ptext80 1B81  
                               __ptext72 1646                                 __ptext64 1500  
                               __ptext56 1DCD                                 __ptext48 1BEF  
                               __ptext81 1DE3                                 __ptext73 154E  
                               __ptext65 1BBF                                 __ptext57 1B51  
                               __ptext49 1E13                                 __ptext90 0886  
                               __ptext82 10BB                                 __ptext74 0D99  
                               __ptext66 0668                                 __ptext58 1E60  
                               __ptext91 0E25                                 __ptext83 1066  
                               __ptext75 159F                                 __ptext67 1BB3  
                               __ptext59 1BD7                                 __ptext92 0AD2  
                               __ptext84 1B79                                 __ptext76 1F15  
                               __ptext68 1189                                 __ptext93 142A  
                               __ptext85 09A7                                 __ptext77 1DA3  
                               __ptext69 1067                                 __ptext94 0D12  
                               __ptext86 1470                                 __ptext78 11B8  
                               __ptext95 0F57                                 __ptext87 174D  
                               __ptext79 115D                                 __ptext96 1F75  
                               __ptext88 15F2                                 __ptext97 0946  
                               __ptext89 1C50                                 __ptext98 1EF5  
                               __ptext99 1E99                                 __product 0245  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               ??_getDimmerLights_Status 0022           __size_of_Dimmer_Initialization 0001  
           __end_of_getDimmerLights_Line 1D29            __end_of_Dimmer_Initialization 1067  
           __end_of_setDimmerLights_Main 169D             __end_of_setDimmerLights_Line 1DB8  
                       Switch_Main@error 006E             __end_of_setDimmerLights_SwOn 14B6  
                 getDimmer_LoadOK@status 0020                             ??_setSw_Main 0066  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1D65                 __end_of_CC2500_SIDLEMode 1B48  
             setDimmerLights_Main@lights 0065              __end_of_DelayOffPointSelect 1D51  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 006D  
              __size_of_setDimmerReClock 0008           setDimmerLights_AdjControl@idle 0026  
                        _CC2500_ReadByte 1E7C                       _CC2500_InitPATable 1EB7  
               __end_of_setMemory_Modify 1D03            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 0668                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 0069  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0069  
                           getLoad_OK@ok 0020         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 01E5                                 main@argv 01E7  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$6776 0021  
                   _getSw_KeyStatus$6777 0022                          _CC2500_PowerRST 13E6  
               __size_of_getSw_KeyStatus 001F              __end_of_Flash_Memory_Modify 154E  
                      ??_getPercentValue 0059                              _setLog_Code 12BF  
            __end_of_Flash_Memory_Unlock 1070                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1FB9                       __end_of_setSw_Main 033D  
                  ??_Load_Initialization 0022                            _Transceive_OK 03D1  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 0801  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0066  
                setDimmerLights_SwOff@sw 0065        __end_of_getAll_DimmerLights_AdjGO 1C61  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 10E2  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 10BB  
            __end_of_setDimmerLights_Adj 159F                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1B30     __size_of_setDimmerLights_IntrControl 0185  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1BBF  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00D2  
        __end_of_DelayOff_Initialization 1B79      __size_of_setDimmerLights_IntrIOC_GO 0028  
    __size_of_setDimmerLights_ErrorClose 005A                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1B81       __end_of_setDimmerLights_AdjControl 1289  
             _setDimmerLights_AdjControl 1254                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 08E5  
       __size_of_setControl_Lights_Table 006E                   __end_of_DelayTimejudge 082B  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0066                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 10BB                  __end_of_CC2500_ReadByte 1E99  
           __end_of_setSw_Initialization 0800                          _Timeout_Counter 1D79  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005B  
             __end_of_LED_Initialization 1BD7         __size_of_setDimmerLights_Trigger 001E  
         __end_of_setTemp_Initialization 0801                 __size_of_setPercentValue 0046  
                setMemory_Modify@command 0021                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1B33                    __end_of_CC2500_RxData 0C91  
                  __end_of_CC2500_TxData 0AD2                    _setLoad_AH_AL_Restore 1E60  
                __end_of_CC2500_PowerRST 142A           getAll_DimmerLights_AdjGO@adjgo 0021  
