

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Oct 24 14:30:12 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	intentry,global,class=CODE,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	dabs	1,0x7E,2
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  0090                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  0116                     	;# 
   202  0117                     	;# 
   203  011D                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  018E                     	;# 
   207  0191                     	;# 
   208  0191                     	;# 
   209  0192                     	;# 
   210  0193                     	;# 
   211  0193                     	;# 
   212  0194                     	;# 
   213  0195                     	;# 
   214  0196                     	;# 
   215  0197                     	;# 
   216  0199                     	;# 
   217  019A                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019C                     	;# 
   223  019C                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019F                     	;# 
   227  020D                     	;# 
   228  0210                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0216                     	;# 
   241  0216                     	;# 
   242  0217                     	;# 
   243  0217                     	;# 
   244  0291                     	;# 
   245  0291                     	;# 
   246  0292                     	;# 
   247  0293                     	;# 
   248  0298                     	;# 
   249  0298                     	;# 
   250  0299                     	;# 
   251  029A                     	;# 
   252  0394                     	;# 
   253  0395                     	;# 
   254  0396                     	;# 
   255  0FE4                     	;# 
   256  0FE5                     	;# 
   257  0FE6                     	;# 
   258  0FE7                     	;# 
   259  0FE8                     	;# 
   260  0FE9                     	;# 
   261  0FEA                     	;# 
   262  0FEB                     	;# 
   263  0FED                     	;# 
   264  0FEE                     	;# 
   265  0FEF                     	;# 
   266  0000                     	;# 
   267  0001                     	;# 
   268  0002                     	;# 
   269  0003                     	;# 
   270  0004                     	;# 
   271  0005                     	;# 
   272  0006                     	;# 
   273  0007                     	;# 
   274  0008                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000D                     	;# 
   280  000E                     	;# 
   281  0010                     	;# 
   282  0011                     	;# 
   283  0012                     	;# 
   284  0015                     	;# 
   285  0016                     	;# 
   286  0016                     	;# 
   287  0017                     	;# 
   288  0018                     	;# 
   289  0019                     	;# 
   290  001A                     	;# 
   291  001B                     	;# 
   292  001C                     	;# 
   293  008C                     	;# 
   294  008D                     	;# 
   295  008E                     	;# 
   296  0090                     	;# 
   297  0091                     	;# 
   298  0092                     	;# 
   299  0095                     	;# 
   300  0096                     	;# 
   301  0097                     	;# 
   302  0099                     	;# 
   303  009A                     	;# 
   304  009B                     	;# 
   305  009B                     	;# 
   306  009C                     	;# 
   307  009D                     	;# 
   308  009E                     	;# 
   309  010C                     	;# 
   310  010D                     	;# 
   311  010E                     	;# 
   312  0116                     	;# 
   313  0117                     	;# 
   314  011D                     	;# 
   315  018C                     	;# 
   316  018D                     	;# 
   317  018E                     	;# 
   318  0191                     	;# 
   319  0191                     	;# 
   320  0192                     	;# 
   321  0193                     	;# 
   322  0193                     	;# 
   323  0194                     	;# 
   324  0195                     	;# 
   325  0196                     	;# 
   326  0197                     	;# 
   327  0199                     	;# 
   328  019A                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019C                     	;# 
   334  019C                     	;# 
   335  019D                     	;# 
   336  019E                     	;# 
   337  019F                     	;# 
   338  020D                     	;# 
   339  0210                     	;# 
   340  0211                     	;# 
   341  0211                     	;# 
   342  0212                     	;# 
   343  0212                     	;# 
   344  0213                     	;# 
   345  0213                     	;# 
   346  0214                     	;# 
   347  0214                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0216                     	;# 
   352  0216                     	;# 
   353  0217                     	;# 
   354  0217                     	;# 
   355  0291                     	;# 
   356  0291                     	;# 
   357  0292                     	;# 
   358  0293                     	;# 
   359  0298                     	;# 
   360  0298                     	;# 
   361  0299                     	;# 
   362  029A                     	;# 
   363  0394                     	;# 
   364  0395                     	;# 
   365  0396                     	;# 
   366  0FE4                     	;# 
   367  0FE5                     	;# 
   368  0FE6                     	;# 
   369  0FE7                     	;# 
   370  0FE8                     	;# 
   371  0FE9                     	;# 
   372  0FEA                     	;# 
   373  0FEB                     	;# 
   374  0FED                     	;# 
   375  0FEE                     	;# 
   376  0FEF                     	;# 
   377  0000                     	;# 
   378  0001                     	;# 
   379  0002                     	;# 
   380  0003                     	;# 
   381  0004                     	;# 
   382  0005                     	;# 
   383  0006                     	;# 
   384  0007                     	;# 
   385  0008                     	;# 
   386  0009                     	;# 
   387  000A                     	;# 
   388  000B                     	;# 
   389  000C                     	;# 
   390  000D                     	;# 
   391  000E                     	;# 
   392  0010                     	;# 
   393  0011                     	;# 
   394  0012                     	;# 
   395  0015                     	;# 
   396  0016                     	;# 
   397  0016                     	;# 
   398  0017                     	;# 
   399  0018                     	;# 
   400  0019                     	;# 
   401  001A                     	;# 
   402  001B                     	;# 
   403  001C                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  0090                     	;# 
   408  0091                     	;# 
   409  0092                     	;# 
   410  0095                     	;# 
   411  0096                     	;# 
   412  0097                     	;# 
   413  0099                     	;# 
   414  009A                     	;# 
   415  009B                     	;# 
   416  009B                     	;# 
   417  009C                     	;# 
   418  009D                     	;# 
   419  009E                     	;# 
   420  010C                     	;# 
   421  010D                     	;# 
   422  010E                     	;# 
   423  0116                     	;# 
   424  0117                     	;# 
   425  011D                     	;# 
   426  018C                     	;# 
   427  018D                     	;# 
   428  018E                     	;# 
   429  0191                     	;# 
   430  0191                     	;# 
   431  0192                     	;# 
   432  0193                     	;# 
   433  0193                     	;# 
   434  0194                     	;# 
   435  0195                     	;# 
   436  0196                     	;# 
   437  0197                     	;# 
   438  0199                     	;# 
   439  019A                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019C                     	;# 
   445  019C                     	;# 
   446  019D                     	;# 
   447  019E                     	;# 
   448  019F                     	;# 
   449  020D                     	;# 
   450  0210                     	;# 
   451  0211                     	;# 
   452  0211                     	;# 
   453  0212                     	;# 
   454  0212                     	;# 
   455  0213                     	;# 
   456  0213                     	;# 
   457  0214                     	;# 
   458  0214                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0216                     	;# 
   463  0216                     	;# 
   464  0217                     	;# 
   465  0217                     	;# 
   466  0291                     	;# 
   467  0291                     	;# 
   468  0292                     	;# 
   469  0293                     	;# 
   470  0298                     	;# 
   471  0298                     	;# 
   472  0299                     	;# 
   473  029A                     	;# 
   474  0394                     	;# 
   475  0395                     	;# 
   476  0396                     	;# 
   477  0FE4                     	;# 
   478  0FE5                     	;# 
   479  0FE6                     	;# 
   480  0FE7                     	;# 
   481  0FE8                     	;# 
   482  0FE9                     	;# 
   483  0FEA                     	;# 
   484  0FEB                     	;# 
   485  0FED                     	;# 
   486  0FEE                     	;# 
   487  0FEF                     	;# 
   488  0000                     	;# 
   489  0001                     	;# 
   490  0002                     	;# 
   491  0003                     	;# 
   492  0004                     	;# 
   493  0005                     	;# 
   494  0006                     	;# 
   495  0007                     	;# 
   496  0008                     	;# 
   497  0009                     	;# 
   498  000A                     	;# 
   499  000B                     	;# 
   500  000C                     	;# 
   501  000D                     	;# 
   502  000E                     	;# 
   503  0010                     	;# 
   504  0011                     	;# 
   505  0012                     	;# 
   506  0015                     	;# 
   507  0016                     	;# 
   508  0016                     	;# 
   509  0017                     	;# 
   510  0018                     	;# 
   511  0019                     	;# 
   512  001A                     	;# 
   513  001B                     	;# 
   514  001C                     	;# 
   515  008C                     	;# 
   516  008D                     	;# 
   517  008E                     	;# 
   518  0090                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0095                     	;# 
   522  0096                     	;# 
   523  0097                     	;# 
   524  0099                     	;# 
   525  009A                     	;# 
   526  009B                     	;# 
   527  009B                     	;# 
   528  009C                     	;# 
   529  009D                     	;# 
   530  009E                     	;# 
   531  010C                     	;# 
   532  010D                     	;# 
   533  010E                     	;# 
   534  0116                     	;# 
   535  0117                     	;# 
   536  011D                     	;# 
   537  018C                     	;# 
   538  018D                     	;# 
   539  018E                     	;# 
   540  0191                     	;# 
   541  0191                     	;# 
   542  0192                     	;# 
   543  0193                     	;# 
   544  0193                     	;# 
   545  0194                     	;# 
   546  0195                     	;# 
   547  0196                     	;# 
   548  0197                     	;# 
   549  0199                     	;# 
   550  019A                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019C                     	;# 
   556  019C                     	;# 
   557  019D                     	;# 
   558  019E                     	;# 
   559  019F                     	;# 
   560  020D                     	;# 
   561  0210                     	;# 
   562  0211                     	;# 
   563  0211                     	;# 
   564  0212                     	;# 
   565  0212                     	;# 
   566  0213                     	;# 
   567  0213                     	;# 
   568  0214                     	;# 
   569  0214                     	;# 
   570  0215                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0216                     	;# 
   574  0216                     	;# 
   575  0217                     	;# 
   576  0217                     	;# 
   577  0291                     	;# 
   578  0291                     	;# 
   579  0292                     	;# 
   580  0293                     	;# 
   581  0298                     	;# 
   582  0298                     	;# 
   583  0299                     	;# 
   584  029A                     	;# 
   585  0394                     	;# 
   586  0395                     	;# 
   587  0396                     	;# 
   588  0FE4                     	;# 
   589  0FE5                     	;# 
   590  0FE6                     	;# 
   591  0FE7                     	;# 
   592  0FE8                     	;# 
   593  0FE9                     	;# 
   594  0FEA                     	;# 
   595  0FEB                     	;# 
   596  0FED                     	;# 
   597  0FEE                     	;# 
   598  0FEF                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  0010                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0015                     	;# 
   618  0016                     	;# 
   619  0016                     	;# 
   620  0017                     	;# 
   621  0018                     	;# 
   622  0019                     	;# 
   623  001A                     	;# 
   624  001B                     	;# 
   625  001C                     	;# 
   626  008C                     	;# 
   627  008D                     	;# 
   628  008E                     	;# 
   629  0090                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0095                     	;# 
   633  0096                     	;# 
   634  0097                     	;# 
   635  0099                     	;# 
   636  009A                     	;# 
   637  009B                     	;# 
   638  009B                     	;# 
   639  009C                     	;# 
   640  009D                     	;# 
   641  009E                     	;# 
   642  010C                     	;# 
   643  010D                     	;# 
   644  010E                     	;# 
   645  0116                     	;# 
   646  0117                     	;# 
   647  011D                     	;# 
   648  018C                     	;# 
   649  018D                     	;# 
   650  018E                     	;# 
   651  0191                     	;# 
   652  0191                     	;# 
   653  0192                     	;# 
   654  0193                     	;# 
   655  0193                     	;# 
   656  0194                     	;# 
   657  0195                     	;# 
   658  0196                     	;# 
   659  0197                     	;# 
   660  0199                     	;# 
   661  019A                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019C                     	;# 
   667  019C                     	;# 
   668  019D                     	;# 
   669  019E                     	;# 
   670  019F                     	;# 
   671  020D                     	;# 
   672  0210                     	;# 
   673  0211                     	;# 
   674  0211                     	;# 
   675  0212                     	;# 
   676  0212                     	;# 
   677  0213                     	;# 
   678  0213                     	;# 
   679  0214                     	;# 
   680  0214                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0216                     	;# 
   685  0216                     	;# 
   686  0217                     	;# 
   687  0217                     	;# 
   688  0291                     	;# 
   689  0291                     	;# 
   690  0292                     	;# 
   691  0293                     	;# 
   692  0298                     	;# 
   693  0298                     	;# 
   694  0299                     	;# 
   695  029A                     	;# 
   696  0394                     	;# 
   697  0395                     	;# 
   698  0396                     	;# 
   699  0FE4                     	;# 
   700  0FE5                     	;# 
   701  0FE6                     	;# 
   702  0FE7                     	;# 
   703  0FE8                     	;# 
   704  0FE9                     	;# 
   705  0FEA                     	;# 
   706  0FEB                     	;# 
   707  0FED                     	;# 
   708  0FEE                     	;# 
   709  0FEF                     	;# 
   710  0000                     	;# 
   711  0001                     	;# 
   712  0002                     	;# 
   713  0003                     	;# 
   714  0004                     	;# 
   715  0005                     	;# 
   716  0006                     	;# 
   717  0007                     	;# 
   718  0008                     	;# 
   719  0009                     	;# 
   720  000A                     	;# 
   721  000B                     	;# 
   722  000C                     	;# 
   723  000D                     	;# 
   724  000E                     	;# 
   725  0010                     	;# 
   726  0011                     	;# 
   727  0012                     	;# 
   728  0015                     	;# 
   729  0016                     	;# 
   730  0016                     	;# 
   731  0017                     	;# 
   732  0018                     	;# 
   733  0019                     	;# 
   734  001A                     	;# 
   735  001B                     	;# 
   736  001C                     	;# 
   737  008C                     	;# 
   738  008D                     	;# 
   739  008E                     	;# 
   740  0090                     	;# 
   741  0091                     	;# 
   742  0092                     	;# 
   743  0095                     	;# 
   744  0096                     	;# 
   745  0097                     	;# 
   746  0099                     	;# 
   747  009A                     	;# 
   748  009B                     	;# 
   749  009B                     	;# 
   750  009C                     	;# 
   751  009D                     	;# 
   752  009E                     	;# 
   753  010C                     	;# 
   754  010D                     	;# 
   755  010E                     	;# 
   756  0116                     	;# 
   757  0117                     	;# 
   758  011D                     	;# 
   759  018C                     	;# 
   760  018D                     	;# 
   761  018E                     	;# 
   762  0191                     	;# 
   763  0191                     	;# 
   764  0192                     	;# 
   765  0193                     	;# 
   766  0193                     	;# 
   767  0194                     	;# 
   768  0195                     	;# 
   769  0196                     	;# 
   770  0197                     	;# 
   771  0199                     	;# 
   772  019A                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019C                     	;# 
   778  019C                     	;# 
   779  019D                     	;# 
   780  019E                     	;# 
   781  019F                     	;# 
   782  020D                     	;# 
   783  0210                     	;# 
   784  0211                     	;# 
   785  0211                     	;# 
   786  0212                     	;# 
   787  0212                     	;# 
   788  0213                     	;# 
   789  0213                     	;# 
   790  0214                     	;# 
   791  0214                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0216                     	;# 
   796  0216                     	;# 
   797  0217                     	;# 
   798  0217                     	;# 
   799  0291                     	;# 
   800  0291                     	;# 
   801  0292                     	;# 
   802  0293                     	;# 
   803  0298                     	;# 
   804  0298                     	;# 
   805  0299                     	;# 
   806  029A                     	;# 
   807  0394                     	;# 
   808  0395                     	;# 
   809  0396                     	;# 
   810  0FE4                     	;# 
   811  0FE5                     	;# 
   812  0FE6                     	;# 
   813  0FE7                     	;# 
   814  0FE8                     	;# 
   815  0FE9                     	;# 
   816  0FEA                     	;# 
   817  0FEB                     	;# 
   818  0FED                     	;# 
   819  0FEE                     	;# 
   820  0FEF                     	;# 
   821  0000                     	;# 
   822  0001                     	;# 
   823  0002                     	;# 
   824  0003                     	;# 
   825  0004                     	;# 
   826  0005                     	;# 
   827  0006                     	;# 
   828  0007                     	;# 
   829  0008                     	;# 
   830  0009                     	;# 
   831  000A                     	;# 
   832  000B                     	;# 
   833  000C                     	;# 
   834  000D                     	;# 
   835  000E                     	;# 
   836  0010                     	;# 
   837  0011                     	;# 
   838  0012                     	;# 
   839  0015                     	;# 
   840  0016                     	;# 
   841  0016                     	;# 
   842  0017                     	;# 
   843  0018                     	;# 
   844  0019                     	;# 
   845  001A                     	;# 
   846  001B                     	;# 
   847  001C                     	;# 
   848  008C                     	;# 
   849  008D                     	;# 
   850  008E                     	;# 
   851  0090                     	;# 
   852  0091                     	;# 
   853  0092                     	;# 
   854  0095                     	;# 
   855  0096                     	;# 
   856  0097                     	;# 
   857  0099                     	;# 
   858  009A                     	;# 
   859  009B                     	;# 
   860  009B                     	;# 
   861  009C                     	;# 
   862  009D                     	;# 
   863  009E                     	;# 
   864  010C                     	;# 
   865  010D                     	;# 
   866  010E                     	;# 
   867  0116                     	;# 
   868  0117                     	;# 
   869  011D                     	;# 
   870  018C                     	;# 
   871  018D                     	;# 
   872  018E                     	;# 
   873  0191                     	;# 
   874  0191                     	;# 
   875  0192                     	;# 
   876  0193                     	;# 
   877  0193                     	;# 
   878  0194                     	;# 
   879  0195                     	;# 
   880  0196                     	;# 
   881  0197                     	;# 
   882  0199                     	;# 
   883  019A                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019C                     	;# 
   889  019C                     	;# 
   890  019D                     	;# 
   891  019E                     	;# 
   892  019F                     	;# 
   893  020D                     	;# 
   894  0210                     	;# 
   895  0211                     	;# 
   896  0211                     	;# 
   897  0212                     	;# 
   898  0212                     	;# 
   899  0213                     	;# 
   900  0213                     	;# 
   901  0214                     	;# 
   902  0214                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0216                     	;# 
   907  0216                     	;# 
   908  0217                     	;# 
   909  0217                     	;# 
   910  0291                     	;# 
   911  0291                     	;# 
   912  0292                     	;# 
   913  0293                     	;# 
   914  0298                     	;# 
   915  0298                     	;# 
   916  0299                     	;# 
   917  029A                     	;# 
   918  0394                     	;# 
   919  0395                     	;# 
   920  0396                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000D                     	;# 
   946  000E                     	;# 
   947  0010                     	;# 
   948  0011                     	;# 
   949  0012                     	;# 
   950  0015                     	;# 
   951  0016                     	;# 
   952  0016                     	;# 
   953  0017                     	;# 
   954  0018                     	;# 
   955  0019                     	;# 
   956  001A                     	;# 
   957  001B                     	;# 
   958  001C                     	;# 
   959  008C                     	;# 
   960  008D                     	;# 
   961  008E                     	;# 
   962  0090                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0095                     	;# 
   966  0096                     	;# 
   967  0097                     	;# 
   968  0099                     	;# 
   969  009A                     	;# 
   970  009B                     	;# 
   971  009B                     	;# 
   972  009C                     	;# 
   973  009D                     	;# 
   974  009E                     	;# 
   975  010C                     	;# 
   976  010D                     	;# 
   977  010E                     	;# 
   978  0116                     	;# 
   979  0117                     	;# 
   980  011D                     	;# 
   981  018C                     	;# 
   982  018D                     	;# 
   983  018E                     	;# 
   984  0191                     	;# 
   985  0191                     	;# 
   986  0192                     	;# 
   987  0193                     	;# 
   988  0193                     	;# 
   989  0194                     	;# 
   990  0195                     	;# 
   991  0196                     	;# 
   992  0197                     	;# 
   993  0199                     	;# 
   994  019A                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019C                     	;# 
  1000  019C                     	;# 
  1001  019D                     	;# 
  1002  019E                     	;# 
  1003  019F                     	;# 
  1004  020D                     	;# 
  1005  0210                     	;# 
  1006  0211                     	;# 
  1007  0211                     	;# 
  1008  0212                     	;# 
  1009  0212                     	;# 
  1010  0213                     	;# 
  1011  0213                     	;# 
  1012  0214                     	;# 
  1013  0214                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0216                     	;# 
  1018  0216                     	;# 
  1019  0217                     	;# 
  1020  0217                     	;# 
  1021  0291                     	;# 
  1022  0291                     	;# 
  1023  0292                     	;# 
  1024  0293                     	;# 
  1025  0298                     	;# 
  1026  0298                     	;# 
  1027  0299                     	;# 
  1028  029A                     	;# 
  1029  0394                     	;# 
  1030  0395                     	;# 
  1031  0396                     	;# 
  1032  0FE4                     	;# 
  1033  0FE5                     	;# 
  1034  0FE6                     	;# 
  1035  0FE7                     	;# 
  1036  0FE8                     	;# 
  1037  0FE9                     	;# 
  1038  0FEA                     	;# 
  1039  0FEB                     	;# 
  1040  0FED                     	;# 
  1041  0FEE                     	;# 
  1042  0FEF                     	;# 
  1043  0000                     	;# 
  1044  0001                     	;# 
  1045  0002                     	;# 
  1046  0003                     	;# 
  1047  0004                     	;# 
  1048  0005                     	;# 
  1049  0006                     	;# 
  1050  0007                     	;# 
  1051  0008                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  000E                     	;# 
  1058  0010                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0015                     	;# 
  1062  0016                     	;# 
  1063  0016                     	;# 
  1064  0017                     	;# 
  1065  0018                     	;# 
  1066  0019                     	;# 
  1067  001A                     	;# 
  1068  001B                     	;# 
  1069  001C                     	;# 
  1070  008C                     	;# 
  1071  008D                     	;# 
  1072  008E                     	;# 
  1073  0090                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0099                     	;# 
  1080  009A                     	;# 
  1081  009B                     	;# 
  1082  009B                     	;# 
  1083  009C                     	;# 
  1084  009D                     	;# 
  1085  009E                     	;# 
  1086  010C                     	;# 
  1087  010D                     	;# 
  1088  010E                     	;# 
  1089  0116                     	;# 
  1090  0117                     	;# 
  1091  011D                     	;# 
  1092  018C                     	;# 
  1093  018D                     	;# 
  1094  018E                     	;# 
  1095  0191                     	;# 
  1096  0191                     	;# 
  1097  0192                     	;# 
  1098  0193                     	;# 
  1099  0193                     	;# 
  1100  0194                     	;# 
  1101  0195                     	;# 
  1102  0196                     	;# 
  1103  0197                     	;# 
  1104  0199                     	;# 
  1105  019A                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019C                     	;# 
  1111  019C                     	;# 
  1112  019D                     	;# 
  1113  019E                     	;# 
  1114  019F                     	;# 
  1115  020D                     	;# 
  1116  0210                     	;# 
  1117  0211                     	;# 
  1118  0211                     	;# 
  1119  0212                     	;# 
  1120  0212                     	;# 
  1121  0213                     	;# 
  1122  0213                     	;# 
  1123  0214                     	;# 
  1124  0214                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0216                     	;# 
  1129  0216                     	;# 
  1130  0217                     	;# 
  1131  0217                     	;# 
  1132  0291                     	;# 
  1133  0291                     	;# 
  1134  0292                     	;# 
  1135  0293                     	;# 
  1136  0298                     	;# 
  1137  0298                     	;# 
  1138  0299                     	;# 
  1139  029A                     	;# 
  1140  0394                     	;# 
  1141  0395                     	;# 
  1142  0396                     	;# 
  1143  0FE4                     	;# 
  1144  0FE5                     	;# 
  1145  0FE6                     	;# 
  1146  0FE7                     	;# 
  1147  0FE8                     	;# 
  1148  0FE9                     	;# 
  1149  0FEA                     	;# 
  1150  0FEB                     	;# 
  1151  0FED                     	;# 
  1152  0FEE                     	;# 
  1153  0FEF                     	;# 
  1154  0000                     	;# 
  1155  0001                     	;# 
  1156  0002                     	;# 
  1157  0003                     	;# 
  1158  0004                     	;# 
  1159  0005                     	;# 
  1160  0006                     	;# 
  1161  0007                     	;# 
  1162  0008                     	;# 
  1163  0009                     	;# 
  1164  000A                     	;# 
  1165  000B                     	;# 
  1166  000C                     	;# 
  1167  000D                     	;# 
  1168  000E                     	;# 
  1169  0010                     	;# 
  1170  0011                     	;# 
  1171  0012                     	;# 
  1172  0015                     	;# 
  1173  0016                     	;# 
  1174  0016                     	;# 
  1175  0017                     	;# 
  1176  0018                     	;# 
  1177  0019                     	;# 
  1178  001A                     	;# 
  1179  001B                     	;# 
  1180  001C                     	;# 
  1181  008C                     	;# 
  1182  008D                     	;# 
  1183  008E                     	;# 
  1184  0090                     	;# 
  1185  0091                     	;# 
  1186  0092                     	;# 
  1187  0095                     	;# 
  1188  0096                     	;# 
  1189  0097                     	;# 
  1190  0099                     	;# 
  1191  009A                     	;# 
  1192  009B                     	;# 
  1193  009B                     	;# 
  1194  009C                     	;# 
  1195  009D                     	;# 
  1196  009E                     	;# 
  1197  010C                     	;# 
  1198  010D                     	;# 
  1199  010E                     	;# 
  1200  0116                     	;# 
  1201  0117                     	;# 
  1202  011D                     	;# 
  1203  018C                     	;# 
  1204  018D                     	;# 
  1205  018E                     	;# 
  1206  0191                     	;# 
  1207  0191                     	;# 
  1208  0192                     	;# 
  1209  0193                     	;# 
  1210  0193                     	;# 
  1211  0194                     	;# 
  1212  0195                     	;# 
  1213  0196                     	;# 
  1214  0197                     	;# 
  1215  0199                     	;# 
  1216  019A                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019C                     	;# 
  1222  019C                     	;# 
  1223  019D                     	;# 
  1224  019E                     	;# 
  1225  019F                     	;# 
  1226  020D                     	;# 
  1227  0210                     	;# 
  1228  0211                     	;# 
  1229  0211                     	;# 
  1230  0212                     	;# 
  1231  0212                     	;# 
  1232  0213                     	;# 
  1233  0213                     	;# 
  1234  0214                     	;# 
  1235  0214                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0216                     	;# 
  1240  0216                     	;# 
  1241  0217                     	;# 
  1242  0217                     	;# 
  1243  0291                     	;# 
  1244  0291                     	;# 
  1245  0292                     	;# 
  1246  0293                     	;# 
  1247  0298                     	;# 
  1248  0298                     	;# 
  1249  0299                     	;# 
  1250  029A                     	;# 
  1251  0394                     	;# 
  1252  0395                     	;# 
  1253  0396                     	;# 
  1254  0FE4                     	;# 
  1255  0FE5                     	;# 
  1256  0FE6                     	;# 
  1257  0FE7                     	;# 
  1258  0FE8                     	;# 
  1259  0FE9                     	;# 
  1260  0FEA                     	;# 
  1261  0FEB                     	;# 
  1262  0FED                     	;# 
  1263  0FEE                     	;# 
  1264  0FEF                     	;# 
  1265  0000                     	;# 
  1266  0001                     	;# 
  1267  0002                     	;# 
  1268  0003                     	;# 
  1269  0004                     	;# 
  1270  0005                     	;# 
  1271  0006                     	;# 
  1272  0007                     	;# 
  1273  0008                     	;# 
  1274  0009                     	;# 
  1275  000A                     	;# 
  1276  000B                     	;# 
  1277  000C                     	;# 
  1278  000D                     	;# 
  1279  000E                     	;# 
  1280  0010                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0015                     	;# 
  1284  0016                     	;# 
  1285  0016                     	;# 
  1286  0017                     	;# 
  1287  0018                     	;# 
  1288  0019                     	;# 
  1289  001A                     	;# 
  1290  001B                     	;# 
  1291  001C                     	;# 
  1292  008C                     	;# 
  1293  008D                     	;# 
  1294  008E                     	;# 
  1295  0090                     	;# 
  1296  0091                     	;# 
  1297  0092                     	;# 
  1298  0095                     	;# 
  1299  0096                     	;# 
  1300  0097                     	;# 
  1301  0099                     	;# 
  1302  009A                     	;# 
  1303  009B                     	;# 
  1304  009B                     	;# 
  1305  009C                     	;# 
  1306  009D                     	;# 
  1307  009E                     	;# 
  1308  010C                     	;# 
  1309  010D                     	;# 
  1310  010E                     	;# 
  1311  0116                     	;# 
  1312  0117                     	;# 
  1313  011D                     	;# 
  1314  018C                     	;# 
  1315  018D                     	;# 
  1316  018E                     	;# 
  1317  0191                     	;# 
  1318  0191                     	;# 
  1319  0192                     	;# 
  1320  0193                     	;# 
  1321  0193                     	;# 
  1322  0194                     	;# 
  1323  0195                     	;# 
  1324  0196                     	;# 
  1325  0197                     	;# 
  1326  0199                     	;# 
  1327  019A                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019C                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019E                     	;# 
  1336  019F                     	;# 
  1337  020D                     	;# 
  1338  0210                     	;# 
  1339  0211                     	;# 
  1340  0211                     	;# 
  1341  0212                     	;# 
  1342  0212                     	;# 
  1343  0213                     	;# 
  1344  0213                     	;# 
  1345  0214                     	;# 
  1346  0214                     	;# 
  1347  0215                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0216                     	;# 
  1351  0216                     	;# 
  1352  0217                     	;# 
  1353  0217                     	;# 
  1354  0291                     	;# 
  1355  0291                     	;# 
  1356  0292                     	;# 
  1357  0293                     	;# 
  1358  0298                     	;# 
  1359  0298                     	;# 
  1360  0299                     	;# 
  1361  029A                     	;# 
  1362  0394                     	;# 
  1363  0395                     	;# 
  1364  0396                     	;# 
  1365  0FE4                     	;# 
  1366  0FE5                     	;# 
  1367  0FE6                     	;# 
  1368  0FE7                     	;# 
  1369  0FE8                     	;# 
  1370  0FE9                     	;# 
  1371  0FEA                     	;# 
  1372  0FEB                     	;# 
  1373  0FED                     	;# 
  1374  0FEE                     	;# 
  1375  0FEF                     	;# 
  1376  0000                     	;# 
  1377  0001                     	;# 
  1378  0002                     	;# 
  1379  0003                     	;# 
  1380  0004                     	;# 
  1381  0005                     	;# 
  1382  0006                     	;# 
  1383  0007                     	;# 
  1384  0008                     	;# 
  1385  0009                     	;# 
  1386  000A                     	;# 
  1387  000B                     	;# 
  1388  000C                     	;# 
  1389  000D                     	;# 
  1390  000E                     	;# 
  1391  0010                     	;# 
  1392  0011                     	;# 
  1393  0012                     	;# 
  1394  0015                     	;# 
  1395  0016                     	;# 
  1396  0016                     	;# 
  1397  0017                     	;# 
  1398  0018                     	;# 
  1399  0019                     	;# 
  1400  001A                     	;# 
  1401  001B                     	;# 
  1402  001C                     	;# 
  1403  008C                     	;# 
  1404  008D                     	;# 
  1405  008E                     	;# 
  1406  0090                     	;# 
  1407  0091                     	;# 
  1408  0092                     	;# 
  1409  0095                     	;# 
  1410  0096                     	;# 
  1411  0097                     	;# 
  1412  0099                     	;# 
  1413  009A                     	;# 
  1414  009B                     	;# 
  1415  009B                     	;# 
  1416  009C                     	;# 
  1417  009D                     	;# 
  1418  009E                     	;# 
  1419  010C                     	;# 
  1420  010D                     	;# 
  1421  010E                     	;# 
  1422  0116                     	;# 
  1423  0117                     	;# 
  1424  011D                     	;# 
  1425  018C                     	;# 
  1426  018D                     	;# 
  1427  018E                     	;# 
  1428  0191                     	;# 
  1429  0191                     	;# 
  1430  0192                     	;# 
  1431  0193                     	;# 
  1432  0193                     	;# 
  1433  0194                     	;# 
  1434  0195                     	;# 
  1435  0196                     	;# 
  1436  0197                     	;# 
  1437  0199                     	;# 
  1438  019A                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019C                     	;# 
  1444  019C                     	;# 
  1445  019D                     	;# 
  1446  019E                     	;# 
  1447  019F                     	;# 
  1448  020D                     	;# 
  1449  0210                     	;# 
  1450  0211                     	;# 
  1451  0211                     	;# 
  1452  0212                     	;# 
  1453  0212                     	;# 
  1454  0213                     	;# 
  1455  0213                     	;# 
  1456  0214                     	;# 
  1457  0214                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0216                     	;# 
  1462  0216                     	;# 
  1463  0217                     	;# 
  1464  0217                     	;# 
  1465  0291                     	;# 
  1466  0291                     	;# 
  1467  0292                     	;# 
  1468  0293                     	;# 
  1469  0298                     	;# 
  1470  0298                     	;# 
  1471  0299                     	;# 
  1472  029A                     	;# 
  1473  0394                     	;# 
  1474  0395                     	;# 
  1475  0396                     	;# 
  1476  0FE4                     	;# 
  1477  0FE5                     	;# 
  1478  0FE6                     	;# 
  1479  0FE7                     	;# 
  1480  0FE8                     	;# 
  1481  0FE9                     	;# 
  1482  0FEA                     	;# 
  1483  0FEB                     	;# 
  1484  0FED                     	;# 
  1485  0FEE                     	;# 
  1486  0FEF                     	;# 
  1487  0000                     	;# 
  1488  0001                     	;# 
  1489  0002                     	;# 
  1490  0003                     	;# 
  1491  0004                     	;# 
  1492  0005                     	;# 
  1493  0006                     	;# 
  1494  0007                     	;# 
  1495  0008                     	;# 
  1496  0009                     	;# 
  1497  000A                     	;# 
  1498  000B                     	;# 
  1499  000C                     	;# 
  1500  000D                     	;# 
  1501  000E                     	;# 
  1502  0010                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0015                     	;# 
  1506  0016                     	;# 
  1507  0016                     	;# 
  1508  0017                     	;# 
  1509  0018                     	;# 
  1510  0019                     	;# 
  1511  001A                     	;# 
  1512  001B                     	;# 
  1513  001C                     	;# 
  1514  008C                     	;# 
  1515  008D                     	;# 
  1516  008E                     	;# 
  1517  0090                     	;# 
  1518  0091                     	;# 
  1519  0092                     	;# 
  1520  0095                     	;# 
  1521  0096                     	;# 
  1522  0097                     	;# 
  1523  0099                     	;# 
  1524  009A                     	;# 
  1525  009B                     	;# 
  1526  009B                     	;# 
  1527  009C                     	;# 
  1528  009D                     	;# 
  1529  009E                     	;# 
  1530  010C                     	;# 
  1531  010D                     	;# 
  1532  010E                     	;# 
  1533  0116                     	;# 
  1534  0117                     	;# 
  1535  011D                     	;# 
  1536  018C                     	;# 
  1537  018D                     	;# 
  1538  018E                     	;# 
  1539  0191                     	;# 
  1540  0191                     	;# 
  1541  0192                     	;# 
  1542  0193                     	;# 
  1543  0193                     	;# 
  1544  0194                     	;# 
  1545  0195                     	;# 
  1546  0196                     	;# 
  1547  0197                     	;# 
  1548  0199                     	;# 
  1549  019A                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019C                     	;# 
  1555  019C                     	;# 
  1556  019D                     	;# 
  1557  019E                     	;# 
  1558  019F                     	;# 
  1559  020D                     	;# 
  1560  0210                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0216                     	;# 
  1573  0216                     	;# 
  1574  0217                     	;# 
  1575  0217                     	;# 
  1576  0291                     	;# 
  1577  0291                     	;# 
  1578  0292                     	;# 
  1579  0293                     	;# 
  1580  0298                     	;# 
  1581  0298                     	;# 
  1582  0299                     	;# 
  1583  029A                     	;# 
  1584  0394                     	;# 
  1585  0395                     	;# 
  1586  0396                     	;# 
  1587  0FE4                     	;# 
  1588  0FE5                     	;# 
  1589  0FE6                     	;# 
  1590  0FE7                     	;# 
  1591  0FE8                     	;# 
  1592  0FE9                     	;# 
  1593  0FEA                     	;# 
  1594  0FEB                     	;# 
  1595  0FED                     	;# 
  1596  0FEE                     	;# 
  1597  0FEF                     	;# 
  1598  0000                     	;# 
  1599  0001                     	;# 
  1600  0002                     	;# 
  1601  0003                     	;# 
  1602  0004                     	;# 
  1603  0005                     	;# 
  1604  0006                     	;# 
  1605  0007                     	;# 
  1606  0008                     	;# 
  1607  0009                     	;# 
  1608  000A                     	;# 
  1609  000B                     	;# 
  1610  000C                     	;# 
  1611  000D                     	;# 
  1612  000E                     	;# 
  1613  0010                     	;# 
  1614  0011                     	;# 
  1615  0012                     	;# 
  1616  0015                     	;# 
  1617  0016                     	;# 
  1618  0016                     	;# 
  1619  0017                     	;# 
  1620  0018                     	;# 
  1621  0019                     	;# 
  1622  001A                     	;# 
  1623  001B                     	;# 
  1624  001C                     	;# 
  1625  008C                     	;# 
  1626  008D                     	;# 
  1627  008E                     	;# 
  1628  0090                     	;# 
  1629  0091                     	;# 
  1630  0092                     	;# 
  1631  0095                     	;# 
  1632  0096                     	;# 
  1633  0097                     	;# 
  1634  0099                     	;# 
  1635  009A                     	;# 
  1636  009B                     	;# 
  1637  009B                     	;# 
  1638  009C                     	;# 
  1639  009D                     	;# 
  1640  009E                     	;# 
  1641  010C                     	;# 
  1642  010D                     	;# 
  1643  010E                     	;# 
  1644  0116                     	;# 
  1645  0117                     	;# 
  1646  011D                     	;# 
  1647  018C                     	;# 
  1648  018D                     	;# 
  1649  018E                     	;# 
  1650  0191                     	;# 
  1651  0191                     	;# 
  1652  0192                     	;# 
  1653  0193                     	;# 
  1654  0193                     	;# 
  1655  0194                     	;# 
  1656  0195                     	;# 
  1657  0196                     	;# 
  1658  0197                     	;# 
  1659  0199                     	;# 
  1660  019A                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019C                     	;# 
  1666  019C                     	;# 
  1667  019D                     	;# 
  1668  019E                     	;# 
  1669  019F                     	;# 
  1670  020D                     	;# 
  1671  0210                     	;# 
  1672  0211                     	;# 
  1673  0211                     	;# 
  1674  0212                     	;# 
  1675  0212                     	;# 
  1676  0213                     	;# 
  1677  0213                     	;# 
  1678  0214                     	;# 
  1679  0214                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0216                     	;# 
  1684  0216                     	;# 
  1685  0217                     	;# 
  1686  0217                     	;# 
  1687  0291                     	;# 
  1688  0291                     	;# 
  1689  0292                     	;# 
  1690  0293                     	;# 
  1691  0298                     	;# 
  1692  0298                     	;# 
  1693  0299                     	;# 
  1694  029A                     	;# 
  1695  0394                     	;# 
  1696  0395                     	;# 
  1697  0396                     	;# 
  1698  0FE4                     	;# 
  1699  0FE5                     	;# 
  1700  0FE6                     	;# 
  1701  0FE7                     	;# 
  1702  0FE8                     	;# 
  1703  0FE9                     	;# 
  1704  0FEA                     	;# 
  1705  0FEB                     	;# 
  1706  0FED                     	;# 
  1707  0FEE                     	;# 
  1708  0FEF                     	;# 
  1709  0000                     	;# 
  1710  0001                     	;# 
  1711  0002                     	;# 
  1712  0003                     	;# 
  1713  0004                     	;# 
  1714  0005                     	;# 
  1715  0006                     	;# 
  1716  0007                     	;# 
  1717  0008                     	;# 
  1718  0009                     	;# 
  1719  000A                     	;# 
  1720  000B                     	;# 
  1721  000C                     	;# 
  1722  000D                     	;# 
  1723  000E                     	;# 
  1724  0010                     	;# 
  1725  0011                     	;# 
  1726  0012                     	;# 
  1727  0015                     	;# 
  1728  0016                     	;# 
  1729  0016                     	;# 
  1730  0017                     	;# 
  1731  0018                     	;# 
  1732  0019                     	;# 
  1733  001A                     	;# 
  1734  001B                     	;# 
  1735  001C                     	;# 
  1736  008C                     	;# 
  1737  008D                     	;# 
  1738  008E                     	;# 
  1739  0090                     	;# 
  1740  0091                     	;# 
  1741  0092                     	;# 
  1742  0095                     	;# 
  1743  0096                     	;# 
  1744  0097                     	;# 
  1745  0099                     	;# 
  1746  009A                     	;# 
  1747  009B                     	;# 
  1748  009B                     	;# 
  1749  009C                     	;# 
  1750  009D                     	;# 
  1751  009E                     	;# 
  1752  010C                     	;# 
  1753  010D                     	;# 
  1754  010E                     	;# 
  1755  0116                     	;# 
  1756  0117                     	;# 
  1757  011D                     	;# 
  1758  018C                     	;# 
  1759  018D                     	;# 
  1760  018E                     	;# 
  1761  0191                     	;# 
  1762  0191                     	;# 
  1763  0192                     	;# 
  1764  0193                     	;# 
  1765  0193                     	;# 
  1766  0194                     	;# 
  1767  0195                     	;# 
  1768  0196                     	;# 
  1769  0197                     	;# 
  1770  0199                     	;# 
  1771  019A                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019C                     	;# 
  1777  019C                     	;# 
  1778  019D                     	;# 
  1779  019E                     	;# 
  1780  019F                     	;# 
  1781  020D                     	;# 
  1782  0210                     	;# 
  1783  0211                     	;# 
  1784  0211                     	;# 
  1785  0212                     	;# 
  1786  0212                     	;# 
  1787  0213                     	;# 
  1788  0213                     	;# 
  1789  0214                     	;# 
  1790  0214                     	;# 
  1791  0215                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0216                     	;# 
  1795  0216                     	;# 
  1796  0217                     	;# 
  1797  0217                     	;# 
  1798  0291                     	;# 
  1799  0291                     	;# 
  1800  0292                     	;# 
  1801  0293                     	;# 
  1802  0298                     	;# 
  1803  0298                     	;# 
  1804  0299                     	;# 
  1805  029A                     	;# 
  1806  0394                     	;# 
  1807  0395                     	;# 
  1808  0396                     	;# 
  1809  0FE4                     	;# 
  1810  0FE5                     	;# 
  1811  0FE6                     	;# 
  1812  0FE7                     	;# 
  1813  0FE8                     	;# 
  1814  0FE9                     	;# 
  1815  0FEA                     	;# 
  1816  0FEB                     	;# 
  1817  0FED                     	;# 
  1818  0FEE                     	;# 
  1819  0FEF                     	;# 
  1820  0000                     	;# 
  1821  0001                     	;# 
  1822  0002                     	;# 
  1823  0003                     	;# 
  1824  0004                     	;# 
  1825  0005                     	;# 
  1826  0006                     	;# 
  1827  0007                     	;# 
  1828  0008                     	;# 
  1829  0009                     	;# 
  1830  000A                     	;# 
  1831  000B                     	;# 
  1832  000C                     	;# 
  1833  000D                     	;# 
  1834  000E                     	;# 
  1835  0010                     	;# 
  1836  0011                     	;# 
  1837  0012                     	;# 
  1838  0015                     	;# 
  1839  0016                     	;# 
  1840  0016                     	;# 
  1841  0017                     	;# 
  1842  0018                     	;# 
  1843  0019                     	;# 
  1844  001A                     	;# 
  1845  001B                     	;# 
  1846  001C                     	;# 
  1847  008C                     	;# 
  1848  008D                     	;# 
  1849  008E                     	;# 
  1850  0090                     	;# 
  1851  0091                     	;# 
  1852  0092                     	;# 
  1853  0095                     	;# 
  1854  0096                     	;# 
  1855  0097                     	;# 
  1856  0099                     	;# 
  1857  009A                     	;# 
  1858  009B                     	;# 
  1859  009B                     	;# 
  1860  009C                     	;# 
  1861  009D                     	;# 
  1862  009E                     	;# 
  1863  010C                     	;# 
  1864  010D                     	;# 
  1865  010E                     	;# 
  1866  0116                     	;# 
  1867  0117                     	;# 
  1868  011D                     	;# 
  1869  018C                     	;# 
  1870  018D                     	;# 
  1871  018E                     	;# 
  1872  0191                     	;# 
  1873  0191                     	;# 
  1874  0192                     	;# 
  1875  0193                     	;# 
  1876  0193                     	;# 
  1877  0194                     	;# 
  1878  0195                     	;# 
  1879  0196                     	;# 
  1880  0197                     	;# 
  1881  0199                     	;# 
  1882  019A                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019C                     	;# 
  1888  019C                     	;# 
  1889  019D                     	;# 
  1890  019E                     	;# 
  1891  019F                     	;# 
  1892  020D                     	;# 
  1893  0210                     	;# 
  1894  0211                     	;# 
  1895  0211                     	;# 
  1896  0212                     	;# 
  1897  0212                     	;# 
  1898  0213                     	;# 
  1899  0213                     	;# 
  1900  0214                     	;# 
  1901  0214                     	;# 
  1902  0215                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0216                     	;# 
  1906  0216                     	;# 
  1907  0217                     	;# 
  1908  0217                     	;# 
  1909  0291                     	;# 
  1910  0291                     	;# 
  1911  0292                     	;# 
  1912  0293                     	;# 
  1913  0298                     	;# 
  1914  0298                     	;# 
  1915  0299                     	;# 
  1916  029A                     	;# 
  1917  0394                     	;# 
  1918  0395                     	;# 
  1919  0396                     	;# 
  1920  0FE4                     	;# 
  1921  0FE5                     	;# 
  1922  0FE6                     	;# 
  1923  0FE7                     	;# 
  1924  0FE8                     	;# 
  1925  0FE9                     	;# 
  1926  0FEA                     	;# 
  1927  0FEB                     	;# 
  1928  0FED                     	;# 
  1929  0FEE                     	;# 
  1930  0FEF                     	;# 
  1931  0000                     	;# 
  1932  0001                     	;# 
  1933  0002                     	;# 
  1934  0003                     	;# 
  1935  0004                     	;# 
  1936  0005                     	;# 
  1937  0006                     	;# 
  1938  0007                     	;# 
  1939  0008                     	;# 
  1940  0009                     	;# 
  1941  000A                     	;# 
  1942  000B                     	;# 
  1943  000C                     	;# 
  1944  000D                     	;# 
  1945  000E                     	;# 
  1946  0010                     	;# 
  1947  0011                     	;# 
  1948  0012                     	;# 
  1949  0015                     	;# 
  1950  0016                     	;# 
  1951  0016                     	;# 
  1952  0017                     	;# 
  1953  0018                     	;# 
  1954  0019                     	;# 
  1955  001A                     	;# 
  1956  001B                     	;# 
  1957  001C                     	;# 
  1958  008C                     	;# 
  1959  008D                     	;# 
  1960  008E                     	;# 
  1961  0090                     	;# 
  1962  0091                     	;# 
  1963  0092                     	;# 
  1964  0095                     	;# 
  1965  0096                     	;# 
  1966  0097                     	;# 
  1967  0099                     	;# 
  1968  009A                     	;# 
  1969  009B                     	;# 
  1970  009B                     	;# 
  1971  009C                     	;# 
  1972  009D                     	;# 
  1973  009E                     	;# 
  1974  010C                     	;# 
  1975  010D                     	;# 
  1976  010E                     	;# 
  1977  0116                     	;# 
  1978  0117                     	;# 
  1979  011D                     	;# 
  1980  018C                     	;# 
  1981  018D                     	;# 
  1982  018E                     	;# 
  1983  0191                     	;# 
  1984  0191                     	;# 
  1985  0192                     	;# 
  1986  0193                     	;# 
  1987  0193                     	;# 
  1988  0194                     	;# 
  1989  0195                     	;# 
  1990  0196                     	;# 
  1991  0197                     	;# 
  1992  0199                     	;# 
  1993  019A                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019C                     	;# 
  1999  019C                     	;# 
  2000  019D                     	;# 
  2001  019E                     	;# 
  2002  019F                     	;# 
  2003  020D                     	;# 
  2004  0210                     	;# 
  2005  0211                     	;# 
  2006  0211                     	;# 
  2007  0212                     	;# 
  2008  0212                     	;# 
  2009  0213                     	;# 
  2010  0213                     	;# 
  2011  0214                     	;# 
  2012  0214                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0216                     	;# 
  2017  0216                     	;# 
  2018  0217                     	;# 
  2019  0217                     	;# 
  2020  0291                     	;# 
  2021  0291                     	;# 
  2022  0292                     	;# 
  2023  0293                     	;# 
  2024  0298                     	;# 
  2025  0298                     	;# 
  2026  0299                     	;# 
  2027  029A                     	;# 
  2028  0394                     	;# 
  2029  0395                     	;# 
  2030  0396                     	;# 
  2031  0FE4                     	;# 
  2032  0FE5                     	;# 
  2033  0FE6                     	;# 
  2034  0FE7                     	;# 
  2035  0FE8                     	;# 
  2036  0FE9                     	;# 
  2037  0FEA                     	;# 
  2038  0FEB                     	;# 
  2039  0FED                     	;# 
  2040  0FEE                     	;# 
  2041  0FEF                     	;# 
  2042                           
  2043                           	psect	idataBANK3
  2044  1174                     __pidataBANK3:	
  2045                           
  2046                           ;initializer for __product
  2047  1174  3463               	retlw	99
  2048  1175  3402               	retlw	2
  2049  1176  3400               	retlw	0
  2050  1177  3400               	retlw	0
  2051  1178  3400               	retlw	0
  2052  1179  3400               	retlw	0
  2053  117A  3400               	retlw	0
  2054  117B  3400               	retlw	0
  2055  117C  3400               	retlw	0
  2056  117D  3400               	retlw	0
  2057  117E  3400               	retlw	0
  2058  117F  3400               	retlw	0
  2059  1180  34FF               	retlw	255
  2060  1181  34FF               	retlw	255
  2061  1182  34FF               	retlw	255
  2062  1183  3400               	retlw	0
  2063  1184  3400               	retlw	0
  2064  1185  3400               	retlw	0
  2065  1186  3400               	retlw	0
  2066  1187  3400               	retlw	0
  2067  1188  3400               	retlw	0
  2068  1189  3400               	retlw	0
  2069  118A  3400               	retlw	0
  2070  118B  3400               	retlw	0
  2071  118C  3400               	retlw	0
  2072  118D  3400               	retlw	0
  2073  118E  3400               	retlw	0
  2074  118F  3400               	retlw	0
  2075  1190  3400               	retlw	0
  2076  1191  3400               	retlw	0
  2077  1192  3400               	retlw	0
  2078  1193  3400               	retlw	0
  2079                           
  2080                           	psect	stringtext
  2081  1000                     __pstringtext:	
  2082  1000                     _CC2500_registers_address:	
  2083  1000  3403               	retlw	3
  2084  1001  3416               	retlw	22
  2085  1002  3417               	retlw	23
  2086  1003  341E               	retlw	30
  2087  1004  341F               	retlw	31
  2088  1005  3420               	retlw	32
  2089  1006  342A               	retlw	42
  2090  1007  342B               	retlw	43
  2091  1008  340B               	retlw	11
  2092  1009  340C               	retlw	12
  2093  100A  340D               	retlw	13
  2094  100B  340E               	retlw	14
  2095  100C  340F               	retlw	15
  2096  100D  3410               	retlw	16
  2097  100E  3411               	retlw	17
  2098  100F  3412               	retlw	18
  2099  1010  3413               	retlw	19
  2100  1011  3414               	retlw	20
  2101  1012  340A               	retlw	10
  2102  1013  3415               	retlw	21
  2103  1014  3421               	retlw	33
  2104  1015  3422               	retlw	34
  2105  1016  3418               	retlw	24
  2106  1017  3419               	retlw	25
  2107  1018  341A               	retlw	26
  2108  1019  341B               	retlw	27
  2109  101A  341C               	retlw	28
  2110  101B  341D               	retlw	29
  2111  101C  3423               	retlw	35
  2112  101D  3424               	retlw	36
  2113  101E  3425               	retlw	37
  2114  101F  3426               	retlw	38
  2115  1020  3429               	retlw	41
  2116  1021  342C               	retlw	44
  2117  1022  342D               	retlw	45
  2118  1023  342E               	retlw	46
  2119  1024  3400               	retlw	0
  2120  1025  3401               	retlw	1
  2121  1026  3402               	retlw	2
  2122  1027  3407               	retlw	7
  2123  1028  3408               	retlw	8
  2124  1029  3409               	retlw	9
  2125  102A  3406               	retlw	6
  2126  102B  3404               	retlw	4
  2127  102C  3405               	retlw	5
  2128  102D  3427               	retlw	39
  2129  102E  3428               	retlw	40
  2130  102F                     __end_of_CC2500_registers_address:	
  2131  102F                     _CC2500_rfSettings:	
  2132  102F  3407               	retlw	7
  2133  1030  3407               	retlw	7
  2134  1031  3430               	retlw	48
  2135  1032  3487               	retlw	135
  2136  1033  346B               	retlw	107
  2137  1034  34F8               	retlw	248
  2138  1035  347F               	retlw	127
  2139  1036  343F               	retlw	63
  2140  1037  3409               	retlw	9
  2141  1038  3400               	retlw	0
  2142  1039  345C               	retlw	92
  2143  103A  34A7               	retlw	167
  2144  103B  3462               	retlw	98
  2145  103C  3486               	retlw	134
  2146  103D  3483               	retlw	131
  2147  103E  3403               	retlw	3
  2148  103F  3422               	retlw	34
  2149  1040  34F8               	retlw	248
  2150  1041  3400               	retlw	0
  2151  1042  3444               	retlw	68
  2152  1043  34B6               	retlw	182
  2153  1044  3410               	retlw	16
  2154  1045  3418               	retlw	24
  2155  1046  341D               	retlw	29
  2156  1047  341C               	retlw	28
  2157  1048  34C7               	retlw	199
  2158  1049  3400               	retlw	0
  2159  104A  34B2               	retlw	178
  2160  104B  34EA               	retlw	234
  2161  104C  340A               	retlw	10
  2162  104D  3400               	retlw	0
  2163  104E  3411               	retlw	17
  2164  104F  3459               	retlw	89
  2165  1050  3488               	retlw	136
  2166  1051  3431               	retlw	49
  2167  1052  340B               	retlw	11
  2168  1053  342F               	retlw	47
  2169  1054  342E               	retlw	46
  2170  1055  3406               	retlw	6
  2171  1056  3404               	retlw	4
  2172  1057  3405               	retlw	5
  2173  1058  3400               	retlw	0
  2174  1059  3430               	retlw	48
  2175  105A  34D3               	retlw	211
  2176  105B  3491               	retlw	145
  2177  105C  3441               	retlw	65
  2178  105D  3400               	retlw	0
  2179  105E                     __end_of_CC2500_rfSettings:	
  2180  105E                     _CC2500_patable_vaule:	
  2181  105E  34FE               	retlw	254
  2182  105F  34FE               	retlw	254
  2183  1060  34FE               	retlw	254
  2184  1061  34FE               	retlw	254
  2185  1062  34FE               	retlw	254
  2186  1063  34FE               	retlw	254
  2187  1064  34FE               	retlw	254
  2188  1065  34FE               	retlw	254
  2189  1066                     __end_of_CC2500_patable_vaule:	
  2190                           
  2191                           	psect	nvBANK0
  2192  006D                     __pnvBANK0:	
  2193  006D                     _product:	
  2194  006D                     	ds	1
  2195  000C                     _PORTA	set	12
  2196  000D                     _PORTB	set	13
  2197  000E                     _PORTC	set	14
  2198  0015                     _TMR0	set	21
  2199  005F                     _GIE	set	95
  2200  005B                     _IOCIE	set	91
  2201  0058                     _IOCIF	set	88
  2202  005E                     _PEIE	set	94
  2203  0060                     _RA0	set	96
  2204  0063                     _RA3	set	99
  2205  0064                     _RA4	set	100
  2206  0066                     _RA6	set	102
  2207  0067                     _RA7	set	103
  2208  0068                     _RB0	set	104
  2209  0069                     _RB1	set	105
  2210  006A                     _RB2	set	106
  2211  006B                     _RB3	set	107
  2212  006C                     _RB4	set	108
  2213  006D                     _RB5	set	109
  2214  0070                     _RC0	set	112
  2215  0071                     _RC1	set	113
  2216  0072                     _RC2	set	114
  2217  0074                     _RC4	set	116
  2218  0075                     _RC5	set	117
  2219  0077                     _RC7	set	119
  2220  005D                     _TMR0IE	set	93
  2221  005A                     _TMR0IF	set	90
  2222  009D                     _ADCON0	set	157
  2223  009E                     _ADCON1	set	158
  2224  009C                     _ADRESH	set	156
  2225  009B                     _ADRESL	set	155
  2226  0095                     _OPTION_REG	set	149
  2227  0099                     _OSCCON	set	153
  2228  008C                     _TRISA	set	140
  2229  008D                     _TRISB	set	141
  2230  008E                     _TRISC	set	142
  2231  0097                     _WDTCON	set	151
  2232  04E9                     _GO_nDONE	set	1257
  2233  0117                     _FVRCON	set	279
  2234  010C                     _LATA	set	268
  2235  010D                     _LATB	set	269
  2236  010E                     _LATC	set	270
  2237  018C                     _ANSELA	set	396
  2238  018D                     _ANSELB	set	397
  2239  018E                     _ANSELC	set	398
  2240  0192                     _PMADRH	set	402
  2241  0191                     _PMADRL	set	401
  2242  0196                     _PMCON2	set	406
  2243  0194                     _PMDATH	set	404
  2244  0193                     _PMDATL	set	403
  2245  0CAE                     _CFGS	set	3246
  2246  0CAC                     _FREE	set	3244
  2247  0CAD                     _LWLO	set	3245
  2248  0CA8                     _RD	set	3240
  2249  0CA9                     _WR	set	3241
  2250  0CAA                     _WREN	set	3242
  2251  1069                     _WPUB1	set	4201
  2252  106A                     _WPUB2	set	4202
  2253  0396                     _IOCBF	set	918
  2254  0395                     _IOCBN	set	917
  2255  0394                     _IOCBP	set	916
  2256  1CB2                     _IOCBF2	set	7346
  2257                           
  2258                           ; #config settings
  2259  0000                     
  2260                           	psect	cinit
  2261  0015                     start_initialization:	
  2262  0015                     __initialization:	
  2263                           
  2264                           ; Clear objects allocated to BITCOMMON
  2265  0015  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2266                           
  2267                           ; Clear objects allocated to COMMON
  2268  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2269  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2270  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2271  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2272  001A  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  2273                           
  2274                           ; Clear objects allocated to BANK0
  2275  001B  01E9               	clrf	__pbssBANK0& (0+127)
  2276  001C  01EA               	clrf	(__pbssBANK0+1)& (0+127)
  2277  001D  01EB               	clrf	(__pbssBANK0+2)& (0+127)
  2278  001E  01EC               	clrf	(__pbssBANK0+3)& (0+127)
  2279                           
  2280                           ; Clear objects allocated to BANK1
  2281  001F  30A0               	movlw	low __pbssBANK1
  2282  0020  0084               	movwf	4
  2283  0021  3000               	movlw	high __pbssBANK1
  2284  0022  0085               	movwf	5
  2285  0023  3050               	movlw	80
  2286  0024  319D  25B2  3180   	fcall	clear_ram0
  2287                           
  2288                           ; Clear objects allocated to BANK2
  2289  0027  3020               	movlw	low __pbssBANK2
  2290  0028  0084               	movwf	4
  2291  0029  3001               	movlw	high __pbssBANK2
  2292  002A  0085               	movwf	5
  2293  002B  304E               	movlw	78
  2294  002C  319D  25B2  3180   	fcall	clear_ram0
  2295                           
  2296                           ; Clear objects allocated to BANK3
  2297  002F  30C0               	movlw	low __pbssBANK3
  2298  0030  0084               	movwf	4
  2299  0031  3001               	movlw	high __pbssBANK3
  2300  0032  0085               	movwf	5
  2301  0033  3018               	movlw	24
  2302  0034  319D  25B2  3180   	fcall	clear_ram0
  2303                           
  2304                           ; Initialize objects allocated to BANK3
  2305  0037  3074               	movlw	low __pidataBANK3
  2306  0038  0084               	movwf	4
  2307  0039  3091               	movlw	(high __pidataBANK3)| (0+128)
  2308  003A  0085               	movwf	5
  2309  003B  30A0               	movlw	low __pdataBANK3
  2310  003C  0086               	movwf	6
  2311  003D  3001               	movlw	high __pdataBANK3
  2312  003E  0087               	movwf	7
  2313  003F  3020               	movlw	32
  2314  0040  319D  25AC         	fcall	init_ram
  2315  0042                     end_of_initialization:	
  2316                           ;End of C runtime variable initialization code
  2317                           
  2318  0042                     __end_of__initialization:	
  2319  0042  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2320  0043  0020               	movlb	0
  2321  0044  3188  2802         	ljmp	_main	;jump to C main() function
  2322                           
  2323                           	psect	bitbssCOMMON
  2324  03D8                     __pbitbssCOMMON:	
  2325  03D8                     _Receive_OK:	
  2326  03D8                     	ds	1
  2327  03D9                     _Transceive_OK:	
  2328  03D9                     	ds	1
  2329                           
  2330                           	psect	bssCOMMON
  2331  0076                     __pbssCOMMON:	
  2332  0076                     _Dimmer:	
  2333  0076                     	ds	1
  2334  0077                     _DimmerLightsIntr:	
  2335  0077                     	ds	1
  2336  0078                     _DimmerLightsIntrIOC:	
  2337  0078                     	ds	1
  2338  0079                     _RFSW:	
  2339  0079                     	ds	1
  2340  007A                     _SPI0Buffer:	
  2341  007A                     	ds	1
  2342                           
  2343                           	psect	bssBANK0
  2344  0069                     __pbssBANK0:	
  2345  0069                     _DelayOff:	
  2346  0069                     	ds	1
  2347  006A                     _DimmerLights:	
  2348  006A                     	ds	1
  2349  006B                     _LED:	
  2350  006B                     	ds	1
  2351  006C                     _Sw:	
  2352  006C                     	ds	1
  2353                           
  2354                           	psect	bssBANK1
  2355  00A0                     __pbssBANK1:	
  2356  00A0                     _myMain:	
  2357  00A0                     	ds	18
  2358  00B2                     _Buz1:	
  2359  00B2                     	ds	12
  2360  00BE                     _RF1:	
  2361  00BE                     	ds	10
  2362  00C8                     _PF1:	
  2363  00C8                     	ds	8
  2364  00D0                     _RF_Count:	
  2365  00D0                     	ds	2
  2366  00D2                     _WDT:	
  2367  00D2                     	ds	2
  2368  00D4                     _CRC:	
  2369  00D4                     	ds	1
  2370  00D5                     _DimmerLights11:	
  2371  00D5                     	ds	1
  2372  00D6                     _RSSI:	
  2373  00D6                     	ds	1
  2374  00D7                     _Rx_Length:	
  2375  00D7                     	ds	1
  2376  00D8                     _Tx_Length:	
  2377  00D8                     	ds	1
  2378  00D9                     _r_address:	
  2379  00D9                     	ds	1
  2380  00DA                     _r_data:	
  2381  00DA                     	ds	1
  2382  00DB                     _s_data:	
  2383  00DB                     	ds	1
  2384  00DC                     _Temp1:	
  2385  00DC                     	ds	14
  2386  00EA                     _Dimmer1:	
  2387  00EA                     	ds	3
  2388  00ED                     _DlySw1:	
  2389  00ED                     	ds	2
  2390  00EF                     _RFSW1:	
  2391  00EF                     	ds	1
  2392                           
  2393                           	psect	bssBANK2
  2394  0120                     __pbssBANK2:	
  2395  0120                     _RF_Data:	
  2396  0120                     	ds	21
  2397  0135                     _Timer0:	
  2398  0135                     	ds	8
  2399  013D                     _Memory:	
  2400  013D                     	ds	37
  2401  0162                     _VarErrLED:	
  2402  0162                     	ds	4
  2403  0166                     _VarLED1:	
  2404  0166                     	ds	4
  2405  016A                     _VarLED2:	
  2406  016A                     	ds	4
  2407                           
  2408                           	psect	bssBANK3
  2409  01C0                     __pbssBANK3:	
  2410  01C0                     _DimmerLights1:	
  2411  01C0                     	ds	15
  2412  01CF                     _Sw1:	
  2413  01CF                     	ds	9
  2414                           
  2415                           	psect	dataBANK3
  2416  01A0                     __pdataBANK3:	
  2417  01A0                     __product:	
  2418  01A0                     	ds	32
  2419                           
  2420                           	psect	clrtext
  2421  1DB2                     clear_ram0:	
  2422                           ;	Called with FSR0 containing the base address, and
  2423                           ;	WREG with the size to clear
  2424                           
  2425  1DB2  0064               	clrwdt	;clear the watchdog before getting into this loop
  2426  1DB3                     clrloop0:	
  2427  1DB3  0180               	clrf	0	;clear RAM location pointed to by FSR
  2428  1DB4  3101               	addfsr 0,1
  2429  1DB5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2430  1DB6  2DB3               	goto	clrloop0	;have we reached the end yet?
  2431  1DB7  3400               	retlw	0	;all done for this memory range, return
  2432                           
  2433                           	psect	inittext
  2434  1DAC                     init_ram:	
  2435  1DAC  00FE               	movwf	126
  2436  1DAD                     initloop:	
  2437  1DAD  0012               	moviw fsr0++
  2438  1DAE  001E               	movwi fsr1++
  2439  1DAF  0BFE               	decfsz	126,f
  2440  1DB0  2DAD               	goto	initloop
  2441  1DB1  3400               	retlw	0
  2442                           
  2443                           	psect	cstackBANK3
  2444  01D8                     __pcstackBANK3:	
  2445  01D8                     ?_main:	
  2446  01D8                     main@argc:	
  2447                           ; 2 bytes @ 0x0
  2448                           
  2449                           
  2450                           ; 2 bytes @ 0x0
  2451  01D8                     	ds	2
  2452  01DA                     main@argv:	
  2453                           
  2454                           ; 2 bytes @ 0x2
  2455  01DA                     	ds	2
  2456                           
  2457                           	psect	cstackCOMMON
  2458  0070                     __pcstackCOMMON:	
  2459  0070                     ?_Timeout_Counter:	
  2460  0070                     ?_set_TimeoutCleared:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0070                     ?_CC2500_WriteByte:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0070                     ?_CC2500_WriteCommand:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0070                     ?_CC2500_ReadStatus:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0070                     ?_CC2500_ReadByte:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0070                     ?_CC2500_PowerRST:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0070                     ?_CC2500_InitSetREG:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0070                     ?_CC2500_InitPATable:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0070                     ?_CC2500_ClearTXFIFO:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_CC2500_ClearRXFIFO:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_CC2500_FrequencyCabr:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_CC2500_SIDLEMode:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_DlyOff_Initialization:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_DlyOff_Main:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_setTxData:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_setDimmerLights_Initialization:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_Dimmer_Initialization:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_setMemory_GO:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_setDimmerLights_Main:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_setDimmerLights_ERROR:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_setLED_Initialization:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_setLED_Main:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_Fosc_Set:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_IO_Set:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_TMR0_Set:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_ADC_Set:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_IOC_Set:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_WDT_Set:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_IOC_ISR:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_TMR0_ISR:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_Flash_Memory_Write:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_Flash_Memory_Modify:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_WDT_Clearing:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_myMain_Initialization:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_Temp_Initialization:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_PowerFault_Initialization:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_Switch_Initialization:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_RF_Initialization:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_getTemp_AD:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_getPowerFault_AD:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_my_MainTime:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_Temp_Main:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_PowerFault_Main:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_Switch_Main:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_RF_Main:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_setTemp_Enable:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_setSw_Enable:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_setRF_Enable:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_setTemp_Initialization:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_setTemp_Main:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_setOverTemp_Exceptions:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_setPowerFault_Initialization:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_setPowerFault_Main:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_setPowerFault_Exceptions:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_setRF_Initialization:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_setRF_Main:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_getRxData:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setLog_Code:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_setControl_Lights_Table:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_setRFSW_Control:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setRFSW_AdjControl:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setRF_DimmerValue:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setSw_Initialization:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setSw_Main:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_Sw_DimmerOnFunc:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_Sw_DimmerAdjFunc:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_Sw_DimmerOffFunc:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_Buzzer_Initialization:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_Buzzer_Main:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_CC2500_TxData:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_CC2500_RxData:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_CC2500_PowerOnInitial:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_DelayOffPointSelect:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_DelayOff_Initialization:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_DelayOff_Main:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_DimmerIntrIOCPointSelect:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ??_DimmerIntrIOCPointSelect:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_DimmerIntrPointSelect:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ??_DimmerIntrPointSelect:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_setDimmerLights_IntrControl:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_DimmerLightsPointSelect:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_DimmerLights_Initialization:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_DimmerLights_Close:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_DimmerLights_Main:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_DimmerLights_Exceptions:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_setDimmerLights_AdjRF:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_LedPointSelect:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_LED_Initialization:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_LED_Main:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Mcu_Initialization:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_ISR:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_setDimmerReClock:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Flash_Memory_Initialization:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Flash_Memory_Main:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_Flash_Memory_Unlock:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_Flash_Memory_Erasing:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_WDT_Main:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setRF_Learn:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_RfSWPointSelect:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_TouchPower:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_SwPointSelect:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_DelayTimejudge:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_getDimmerLights_StatusFlag:	
  2770                           ; 1 bytes @ 0x0
  2771                           
  2772  0070                     ?_getPercentValue:	
  2773                           ; 1 bytes @ 0x0
  2774                           
  2775  0070                     ?_Flash_Memory_Read:	
  2776                           ; 1 bytes @ 0x0
  2777                           
  2778  0070                     ?_getPF_Safe:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781  0070                     ?_setPercentValue:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0070                     ?_getTemp_Safe:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787                           
  2788                           ; 1 bytes @ 0x0
  2789  0070                     	ds	1
  2790  0071                     DimmerIntrIOCPointSelect@lights:	
  2791  0071                     DimmerIntrPointSelect@lights:	
  2792                           ; 1 bytes @ 0x1
  2793                           
  2794                           
  2795                           ; 1 bytes @ 0x1
  2796  0071                     	ds	1
  2797  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2798  0072                     ??_setDimmerLights_IntrControl:	
  2799                           ; 0 bytes @ 0x2
  2800                           
  2801  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2802                           ; 0 bytes @ 0x2
  2803                           
  2804                           
  2805                           ; 1 bytes @ 0x2
  2806  0072                     	ds	1
  2807  0073                     ??_IOC_ISR:	
  2808  0073                     ??_setDimmerReClock:	
  2809                           ; 0 bytes @ 0x3
  2810                           
  2811                           
  2812                           ; 0 bytes @ 0x3
  2813  0073                     	ds	1
  2814  0074                     setDimmerLights_IntrControl@lights:	
  2815                           
  2816                           ; 1 bytes @ 0x4
  2817  0074                     	ds	1
  2818  0075                     ??_TMR0_ISR:	
  2819  0075                     ??_ISR:	
  2820                           ; 0 bytes @ 0x5
  2821                           
  2822                           
  2823                           ; 0 bytes @ 0x5
  2824  0075                     	ds	1
  2825                           
  2826                           	psect	cstackBANK0
  2827  0020                     __pcstackBANK0:	
  2828  0020                     ??_Timeout_Counter:	
  2829  0020                     ??_set_TimeoutCleared:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_CC2500_WriteByte:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_CC2500_ReadByte:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ?_DelayTime_1us:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_setTxData:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_Dimmer_Initialization:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_getDimmerLights_StatusFlag:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_setMemory_GO:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_Fosc_Set:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_IO_Set:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_TMR0_Set:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_ADC_Set:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_IOC_Set:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_WDT_Set:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_Flash_Memory_Read:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_Flash_Memory_Write:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_WDT_Clearing:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_myMain_Initialization:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_Temp_Initialization:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_PowerFault_Initialization:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_setTemp_Enable:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_setRF_Enable:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_setTemp_Initialization:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_getPF_Safe:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_setPowerFault_Initialization:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_setRF_Initialization:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ??_Buzzer_Initialization:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ??_Buzzer_Main:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ??_DelayOffPointSelect:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ??_DimmerLightsPointSelect:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ??_LedPointSelect:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ??_Flash_Memory_Unlock:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0020                     ??_Flash_Memory_Erasing:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0020                     ??_WDT_Main:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0020                     ??_getTemp_Safe:	
  2932                           ; 0 bytes @ 0x0
  2933                           
  2934  0020                     ??_setRF_Learn:	
  2935                           ; 0 bytes @ 0x0
  2936                           
  2937  0020                     ??_RfSWPointSelect:	
  2938                           ; 0 bytes @ 0x0
  2939                           
  2940  0020                     ??_TouchPower:	
  2941                           ; 0 bytes @ 0x0
  2942                           
  2943  0020                     ??_SwPointSelect:	
  2944                           ; 0 bytes @ 0x0
  2945                           
  2946  0020                     ?___bmul:	
  2947                           ; 0 bytes @ 0x0
  2948                           
  2949  0020                     ?_getBuz_GO:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0020                     ?_getAD:	
  2953                           ; 2 bytes @ 0x0
  2954                           
  2955  0020                     ?___awdiv:	
  2956                           ; 2 bytes @ 0x0
  2957                           
  2958  0020                     ?___ftpack:	
  2959                           ; 2 bytes @ 0x0
  2960                           
  2961  0020                     getDimmerLights_StatusFlag@Status:	
  2962                           ; 3 bytes @ 0x0
  2963                           
  2964  0020                     getAD@adcon1:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0020                     setTemp_Enable@command:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0020                     getTemp_Safe@result:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0020                     getPF_Safe@i:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0020                     setRF_Learn@command:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0020                     setRF_Enable@command:	
  2980                           ; 1 bytes @ 0x0
  2981                           
  2982  0020                     ___bmul@multiplicand:	
  2983                           ; 1 bytes @ 0x0
  2984                           
  2985  0020                     DelayTime_1us@count:	
  2986                           ; 1 bytes @ 0x0
  2987                           
  2988  0020                     ___awdiv@divisor:	
  2989                           ; 2 bytes @ 0x0
  2990                           
  2991  0020                     ___ftpack@arg:	
  2992                           ; 2 bytes @ 0x0
  2993                           
  2994                           
  2995                           ; 3 bytes @ 0x0
  2996  0020                     	ds	1
  2997  0021                     ??_RF_Initialization:	
  2998  0021                     ??_Mcu_Initialization:	
  2999                           ; 0 bytes @ 0x1
  3000                           
  3001  0021                     ??___bmul:	
  3002                           ; 0 bytes @ 0x1
  3003                           
  3004  0021                     CC2500_WriteByte@loop_a:	
  3005                           ; 0 bytes @ 0x1
  3006                           
  3007  0021                     CC2500_ReadByte@loop_b:	
  3008                           ; 1 bytes @ 0x1
  3009                           
  3010  0021                     DelayOffPointSelect@sw:	
  3011                           ; 1 bytes @ 0x1
  3012                           
  3013  0021                     DimmerLightsPointSelect@lights:	
  3014                           ; 1 bytes @ 0x1
  3015                           
  3016  0021                     LedPointSelect@led:	
  3017                           ; 1 bytes @ 0x1
  3018                           
  3019  0021                     Flash_Memory_Read@i:	
  3020                           ; 1 bytes @ 0x1
  3021                           
  3022  0021                     Flash_Memory_Write@i:	
  3023                           ; 1 bytes @ 0x1
  3024                           
  3025  0021                     RfSWPointSelect@sw:	
  3026                           ; 1 bytes @ 0x1
  3027                           
  3028  0021                     SwPointSelect@sw:	
  3029                           ; 1 bytes @ 0x1
  3030                           
  3031                           
  3032                           ; 1 bytes @ 0x1
  3033  0021                     	ds	1
  3034  0022                     ??_CC2500_WriteCommand:	
  3035  0022                     ??_CC2500_ReadStatus:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0022                     ??_DelayTime_1us:	
  3039                           ; 0 bytes @ 0x2
  3040                           
  3041  0022                     ?_CC2500_WriteREG:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0022                     ??_DlyOff_Initialization:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0022                     ?_setSw_Status:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0022                     ?_setRFSW_Status:	
  3051                           ; 0 bytes @ 0x2
  3052                           
  3053  0022                     ?_setDimmerLights_Trigger:	
  3054                           ; 0 bytes @ 0x2
  3055                           
  3056  0022                     ?_setDimmerLights_Switch:	
  3057                           ; 0 bytes @ 0x2
  3058                           
  3059  0022                     ??_setDimmerLights_Initialization:	
  3060                           ; 0 bytes @ 0x2
  3061                           
  3062  0022                     ?_setDimmerLights_TriggerERROR:	
  3063                           ; 0 bytes @ 0x2
  3064                           
  3065  0022                     ?_setLED:	
  3066                           ; 0 bytes @ 0x2
  3067                           
  3068  0022                     ??_setLED_Main:	
  3069                           ; 0 bytes @ 0x2
  3070                           
  3071  0022                     ??_setSw_Enable:	
  3072                           ; 0 bytes @ 0x2
  3073                           
  3074  0022                     ??_getBuz_GO:	
  3075                           ; 0 bytes @ 0x2
  3076                           
  3077  0022                     ?_setDimmerLights_AdjGo:	
  3078                           ; 0 bytes @ 0x2
  3079                           
  3080  0022                     ?_setDimmerLights_TriggerAdj:	
  3081                           ; 0 bytes @ 0x2
  3082                           
  3083  0022                     CC2500_WriteREG@value:	
  3084                           ; 0 bytes @ 0x2
  3085                           
  3086  0022                     DlyOff_Initialization@sw:	
  3087                           ; 1 bytes @ 0x2
  3088                           
  3089  0022                     setDimmerLights_TriggerERROR@command:	
  3090                           ; 1 bytes @ 0x2
  3091                           
  3092  0022                     setDimmerLights_Switch@command:	
  3093                           ; 1 bytes @ 0x2
  3094                           
  3095  0022                     setDimmerLights_AdjGo@command:	
  3096                           ; 1 bytes @ 0x2
  3097                           
  3098  0022                     setDimmerLights_Trigger@command:	
  3099                           ; 1 bytes @ 0x2
  3100                           
  3101  0022                     setDimmerLights_TriggerAdj@command:	
  3102                           ; 1 bytes @ 0x2
  3103                           
  3104  0022                     setLED@command:	
  3105                           ; 1 bytes @ 0x2
  3106                           
  3107  0022                     Flash_Memory_Read@address:	
  3108                           ; 1 bytes @ 0x2
  3109                           
  3110  0022                     setMemory_GO@command:	
  3111                           ; 1 bytes @ 0x2
  3112                           
  3113  0022                     setRFSW_Status@command:	
  3114                           ; 1 bytes @ 0x2
  3115                           
  3116  0022                     setSw_Enable@command:	
  3117                           ; 1 bytes @ 0x2
  3118                           
  3119  0022                     setSw_Status@command:	
  3120                           ; 1 bytes @ 0x2
  3121                           
  3122  0022                     ___bmul@product:	
  3123                           ; 1 bytes @ 0x2
  3124                           
  3125  0022                     DelayTime_1us@i:	
  3126                           ; 1 bytes @ 0x2
  3127                           
  3128  0022                     ___awdiv@dividend:	
  3129                           ; 2 bytes @ 0x2
  3130                           
  3131                           
  3132                           ; 2 bytes @ 0x2
  3133  0022                     	ds	1
  3134  0023                     ??_CC2500_WriteREG:	
  3135  0023                     ??_setSw_Status:	
  3136                           ; 0 bytes @ 0x3
  3137                           
  3138  0023                     ??_setRFSW_Status:	
  3139                           ; 0 bytes @ 0x3
  3140                           
  3141  0023                     ??_setDimmerLights_Trigger:	
  3142                           ; 0 bytes @ 0x3
  3143                           
  3144  0023                     ??_setDimmerLights_Switch:	
  3145                           ; 0 bytes @ 0x3
  3146                           
  3147  0023                     ??_setDimmerLights_TriggerERROR:	
  3148                           ; 0 bytes @ 0x3
  3149                           
  3150  0023                     ??_setLED:	
  3151                           ; 0 bytes @ 0x3
  3152                           
  3153  0023                     ??_DelayOff_Initialization:	
  3154                           ; 0 bytes @ 0x3
  3155                           
  3156  0023                     ??_DimmerLights_Close:	
  3157                           ; 0 bytes @ 0x3
  3158                           
  3159  0023                     ??_setDimmerLights_AdjGo:	
  3160                           ; 0 bytes @ 0x3
  3161                           
  3162  0023                     ??_setDimmerLights_TriggerAdj:	
  3163                           ; 0 bytes @ 0x3
  3164                           
  3165  0023                     ??_getAD:	
  3166                           ; 0 bytes @ 0x3
  3167                           
  3168  0023                     CC2500_WriteCommand@command:	
  3169                           ; 0 bytes @ 0x3
  3170                           
  3171  0023                     CC2500_ReadStatus@status_addr:	
  3172                           ; 1 bytes @ 0x3
  3173                           
  3174  0023                     setDimmerLights_Initialization@lights:	
  3175                           ; 1 bytes @ 0x3
  3176                           
  3177  0023                     setDimmerLights_TriggerERROR@lights:	
  3178                           ; 1 bytes @ 0x3
  3179                           
  3180  0023                     setDimmerLights_Switch@lights:	
  3181                           ; 1 bytes @ 0x3
  3182                           
  3183  0023                     setDimmerLights_AdjGo@lights:	
  3184                           ; 1 bytes @ 0x3
  3185                           
  3186  0023                     setDimmerLights_Trigger@lights:	
  3187                           ; 1 bytes @ 0x3
  3188                           
  3189  0023                     setDimmerLights_TriggerAdj@lights:	
  3190                           ; 1 bytes @ 0x3
  3191                           
  3192  0023                     setLED@led:	
  3193                           ; 1 bytes @ 0x3
  3194                           
  3195  0023                     getAD@adcon0:	
  3196                           ; 1 bytes @ 0x3
  3197                           
  3198  0023                     Flash_Memory_Read@ret:	
  3199                           ; 1 bytes @ 0x3
  3200                           
  3201  0023                     setRFSW_Status@sw:	
  3202                           ; 1 bytes @ 0x3
  3203                           
  3204  0023                     setSw_Status@sw:	
  3205                           ; 1 bytes @ 0x3
  3206                           
  3207  0023                     ___bmul@multiplier:	
  3208                           ; 1 bytes @ 0x3
  3209                           
  3210  0023                     ___ftpack@exp:	
  3211                           ; 1 bytes @ 0x3
  3212                           
  3213                           
  3214                           ; 1 bytes @ 0x3
  3215  0023                     	ds	1
  3216  0024                     ??_CC2500_ClearTXFIFO:	
  3217  0024                     ??_CC2500_ClearRXFIFO:	
  3218                           ; 0 bytes @ 0x4
  3219                           
  3220  0024                     ??_CC2500_SIDLEMode:	
  3221                           ; 0 bytes @ 0x4
  3222                           
  3223  0024                     ??_DelayTimejudge:	
  3224                           ; 0 bytes @ 0x4
  3225                           
  3226  0024                     ?_setDimmerLights:	
  3227                           ; 0 bytes @ 0x4
  3228                           
  3229  0024                     ??_setDimmerLights_ERROR:	
  3230                           ; 0 bytes @ 0x4
  3231                           
  3232  0024                     ??_setLED_Initialization:	
  3233                           ; 0 bytes @ 0x4
  3234                           
  3235  0024                     ??_Flash_Memory_Modify:	
  3236                           ; 0 bytes @ 0x4
  3237                           
  3238  0024                     ??_getTemp_AD:	
  3239                           ; 0 bytes @ 0x4
  3240                           
  3241  0024                     ??_getPowerFault_AD:	
  3242                           ; 0 bytes @ 0x4
  3243                           
  3244  0024                     ??_setSw_Initialization:	
  3245                           ; 0 bytes @ 0x4
  3246                           
  3247  0024                     ??_Sw_DimmerAdjFunc:	
  3248                           ; 0 bytes @ 0x4
  3249                           
  3250  0024                     ??_CC2500_TxData:	
  3251                           ; 0 bytes @ 0x4
  3252                           
  3253  0024                     ??_CC2500_RxData:	
  3254                           ; 0 bytes @ 0x4
  3255                           
  3256  0024                     ??_DimmerLights_Initialization:	
  3257                           ; 0 bytes @ 0x4
  3258                           
  3259  0024                     ??___awdiv:	
  3260                           ; 0 bytes @ 0x4
  3261                           
  3262  0024                     CC2500_WriteREG@w_addr:	
  3263                           ; 0 bytes @ 0x4
  3264                           
  3265  0024                     setDimmerLights@status:	
  3266                           ; 1 bytes @ 0x4
  3267                           
  3268  0024                     setLED_Initialization@led:	
  3269                           ; 1 bytes @ 0x4
  3270                           
  3271  0024                     setLED_Main@led:	
  3272                           ; 1 bytes @ 0x4
  3273                           
  3274  0024                     setSw_Initialization@sw:	
  3275                           ; 1 bytes @ 0x4
  3276                           
  3277  0024                     Sw_DimmerAdjFunc@Idle:	
  3278                           ; 1 bytes @ 0x4
  3279                           
  3280  0024                     ___ftpack@sign:	
  3281                           ; 1 bytes @ 0x4
  3282                           
  3283  0024                     getBuz_GO@i:	
  3284                           ; 1 bytes @ 0x4
  3285                           
  3286  0024                     DelayTime_1us@j:	
  3287                           ; 2 bytes @ 0x4
  3288                           
  3289                           
  3290                           ; 2 bytes @ 0x4
  3291  0024                     	ds	1
  3292  0025                     ??_CC2500_InitSetREG:	
  3293  0025                     ??_CC2500_InitPATable:	
  3294                           ; 0 bytes @ 0x5
  3295                           
  3296  0025                     ??_setDimmerLights:	
  3297                           ; 0 bytes @ 0x5
  3298                           
  3299  0025                     ??_Switch_Initialization:	
  3300                           ; 0 bytes @ 0x5
  3301                           
  3302  0025                     ??___ftpack:	
  3303                           ; 0 bytes @ 0x5
  3304                           
  3305  0025                     ??_LED_Initialization:	
  3306                           ; 0 bytes @ 0x5
  3307                           
  3308  0025                     ??_LED_Main:	
  3309                           ; 0 bytes @ 0x5
  3310                           
  3311  0025                     CC2500_TxData@loop_e:	
  3312                           ; 0 bytes @ 0x5
  3313                           
  3314  0025                     CC2500_RxData@loop_f:	
  3315                           ; 1 bytes @ 0x5
  3316                           
  3317  0025                     setDimmerLights_ERROR@lights:	
  3318                           ; 1 bytes @ 0x5
  3319                           
  3320  0025                     Flash_Memory_Modify@i:	
  3321                           ; 1 bytes @ 0x5
  3322                           
  3323  0025                     getTemp_AD@channel:	
  3324                           ; 1 bytes @ 0x5
  3325                           
  3326  0025                     getPowerFault_AD@channel:	
  3327                           ; 1 bytes @ 0x5
  3328                           
  3329  0025                     Sw_DimmerAdjFunc@sw:	
  3330                           ; 1 bytes @ 0x5
  3331                           
  3332  0025                     ___awdiv@counter:	
  3333                           ; 1 bytes @ 0x5
  3334                           
  3335                           
  3336                           ; 1 bytes @ 0x5
  3337  0025                     	ds	1
  3338  0026                     ??_CC2500_PowerRST:	
  3339  0026                     ??_CC2500_FrequencyCabr:	
  3340                           ; 0 bytes @ 0x6
  3341                           
  3342  0026                     ??_Flash_Memory_Main:	
  3343                           ; 0 bytes @ 0x6
  3344                           
  3345  0026                     CC2500_InitSetREG@temp1:	
  3346                           ; 0 bytes @ 0x6
  3347                           
  3348  0026                     CC2500_InitPATable@temp:	
  3349                           ; 1 bytes @ 0x6
  3350                           
  3351  0026                     DelayTimejudge@i:	
  3352                           ; 1 bytes @ 0x6
  3353                           
  3354  0026                     setDimmerLights@lights:	
  3355                           ; 1 bytes @ 0x6
  3356                           
  3357  0026                     ___awdiv@sign:	
  3358                           ; 1 bytes @ 0x6
  3359                           
  3360                           
  3361                           ; 1 bytes @ 0x6
  3362  0026                     	ds	1
  3363  0027                     CC2500_InitSetREG@temp2:	
  3364  0027                     CC2500_InitPATable@loop_d:	
  3365                           ; 1 bytes @ 0x7
  3366                           
  3367  0027                     DelayTimejudge@j:	
  3368                           ; 1 bytes @ 0x7
  3369                           
  3370  0027                     ___awdiv@quotient:	
  3371                           ; 1 bytes @ 0x7
  3372                           
  3373                           
  3374                           ; 2 bytes @ 0x7
  3375  0027                     	ds	1
  3376  0028                     ?___awtoft:	
  3377  0028                     CC2500_InitSetREG@loop_c:	
  3378                           ; 3 bytes @ 0x8
  3379                           
  3380  0028                     DelayTimejudge@k:	
  3381                           ; 1 bytes @ 0x8
  3382                           
  3383  0028                     ___awtoft@c:	
  3384                           ; 1 bytes @ 0x8
  3385                           
  3386                           
  3387                           ; 2 bytes @ 0x8
  3388  0028                     	ds	1
  3389  0029                     ?_setBuz:	
  3390  0029                     ??_CC2500_PowerOnInitial:	
  3391                           ; 0 bytes @ 0x9
  3392                           
  3393  0029                     DelayTimejudge@value:	
  3394                           ; 0 bytes @ 0x9
  3395                           
  3396  0029                     setBuz@time:	
  3397                           ; 1 bytes @ 0x9
  3398                           
  3399                           
  3400                           ; 2 bytes @ 0x9
  3401  0029                     	ds	1
  3402  002A                     ?_setDelayOff_GO:	
  3403  002A                     setDelayOff_GO@command:	
  3404                           ; 0 bytes @ 0xA
  3405                           
  3406                           
  3407                           ; 1 bytes @ 0xA
  3408  002A                     	ds	1
  3409  002B                     ??_setBuz:	
  3410  002B                     ??___awtoft:	
  3411                           ; 0 bytes @ 0xB
  3412                           
  3413  002B                     setDelayOff_GO@value:	
  3414                           ; 0 bytes @ 0xB
  3415                           
  3416                           
  3417                           ; 1 bytes @ 0xB
  3418  002B                     	ds	1
  3419  002C                     ??_setDelayOff_GO:	
  3420  002C                     setBuz@count:	
  3421                           ; 0 bytes @ 0xC
  3422                           
  3423                           
  3424                           ; 1 bytes @ 0xC
  3425  002C                     	ds	1
  3426  002D                     ??_my_MainTime:	
  3427  002D                     ??_setLog_Code:	
  3428                           ; 0 bytes @ 0xD
  3429                           
  3430  002D                     ??_DimmerLights_Exceptions:	
  3431                           ; 0 bytes @ 0xD
  3432                           
  3433  002D                     DimmerLights_Exceptions@status:	
  3434                           ; 0 bytes @ 0xD
  3435                           
  3436  002D                     ___awtoft@sign:	
  3437                           ; 1 bytes @ 0xD
  3438                           
  3439                           
  3440                           ; 1 bytes @ 0xD
  3441  002D                     	ds	1
  3442  002E                     ??_setOverTemp_Exceptions:	
  3443  002E                     ??_setPowerFault_Exceptions:	
  3444                           ; 0 bytes @ 0xE
  3445                           
  3446  002E                     ?___ftdiv:	
  3447                           ; 0 bytes @ 0xE
  3448                           
  3449  002E                     ?___ftmul:	
  3450                           ; 3 bytes @ 0xE
  3451                           
  3452  002E                     setDelayOff_GO@sw:	
  3453                           ; 3 bytes @ 0xE
  3454                           
  3455  002E                     ___ftdiv@f2:	
  3456                           ; 1 bytes @ 0xE
  3457                           
  3458  002E                     ___ftmul@f1:	
  3459                           ; 3 bytes @ 0xE
  3460                           
  3461                           
  3462                           ; 3 bytes @ 0xE
  3463  002E                     	ds	1
  3464  002F                     setOverTemp_Exceptions@i:	
  3465  002F                     setPowerFault_Exceptions@i:	
  3466                           ; 1 bytes @ 0xF
  3467                           
  3468                           
  3469                           ; 1 bytes @ 0xF
  3470  002F                     	ds	1
  3471  0030                     setOverTemp_Exceptions@command:	
  3472  0030                     setPowerFault_Exceptions@command:	
  3473                           ; 1 bytes @ 0x10
  3474                           
  3475                           
  3476                           ; 1 bytes @ 0x10
  3477  0030                     	ds	1
  3478  0031                     ??_setTemp_Main:	
  3479  0031                     ??_setPowerFault_Main:	
  3480                           ; 0 bytes @ 0x11
  3481                           
  3482  0031                     ___ftdiv@f1:	
  3483                           ; 0 bytes @ 0x11
  3484                           
  3485  0031                     ___ftmul@f2:	
  3486                           ; 3 bytes @ 0x11
  3487                           
  3488                           
  3489                           ; 3 bytes @ 0x11
  3490  0031                     	ds	1
  3491  0032                     ??_Temp_Main:	
  3492  0032                     ??_PowerFault_Main:	
  3493                           ; 0 bytes @ 0x12
  3494                           
  3495                           
  3496                           ; 0 bytes @ 0x12
  3497  0032                     	ds	2
  3498  0034                     ??___ftdiv:	
  3499  0034                     ??___ftmul:	
  3500                           ; 0 bytes @ 0x14
  3501                           
  3502                           
  3503                           ; 0 bytes @ 0x14
  3504  0034                     	ds	4
  3505  0038                     ___ftdiv@cntr:	
  3506  0038                     ___ftmul@exp:	
  3507                           ; 1 bytes @ 0x18
  3508                           
  3509                           
  3510                           ; 1 bytes @ 0x18
  3511  0038                     	ds	1
  3512  0039                     ___ftdiv@f3:	
  3513  0039                     ___ftmul@f3_as_product:	
  3514                           ; 3 bytes @ 0x19
  3515                           
  3516                           
  3517                           ; 3 bytes @ 0x19
  3518  0039                     	ds	3
  3519  003C                     ___ftdiv@exp:	
  3520  003C                     ___ftmul@cntr:	
  3521                           ; 1 bytes @ 0x1C
  3522                           
  3523                           
  3524                           ; 1 bytes @ 0x1C
  3525  003C                     	ds	1
  3526  003D                     ___ftdiv@sign:	
  3527  003D                     ___ftmul@sign:	
  3528                           ; 1 bytes @ 0x1D
  3529                           
  3530                           
  3531                           ; 1 bytes @ 0x1D
  3532  003D                     	ds	1
  3533  003E                     ?___ftadd:	
  3534  003E                     ___ftadd@f1:	
  3535                           ; 3 bytes @ 0x1E
  3536                           
  3537                           
  3538                           ; 3 bytes @ 0x1E
  3539  003E                     	ds	3
  3540  0041                     ___ftadd@f2:	
  3541                           
  3542                           ; 3 bytes @ 0x21
  3543  0041                     	ds	3
  3544  0044                     ??___ftadd:	
  3545                           
  3546                           ; 0 bytes @ 0x24
  3547  0044                     	ds	4
  3548  0048                     ___ftadd@sign:	
  3549                           
  3550                           ; 1 bytes @ 0x28
  3551  0048                     	ds	1
  3552  0049                     ___ftadd@exp2:	
  3553                           
  3554                           ; 1 bytes @ 0x29
  3555  0049                     	ds	1
  3556  004A                     ___ftadd@exp1:	
  3557                           
  3558                           ; 1 bytes @ 0x2A
  3559  004A                     	ds	1
  3560  004B                     ?___fttol:	
  3561  004B                     ___fttol@f1:	
  3562                           ; 4 bytes @ 0x2B
  3563                           
  3564                           
  3565                           ; 3 bytes @ 0x2B
  3566  004B                     	ds	4
  3567  004F                     ??___fttol:	
  3568                           
  3569                           ; 0 bytes @ 0x2F
  3570  004F                     	ds	4
  3571  0053                     ___fttol@sign1:	
  3572                           
  3573                           ; 1 bytes @ 0x33
  3574  0053                     	ds	1
  3575  0054                     ___fttol@lval:	
  3576                           
  3577                           ; 4 bytes @ 0x34
  3578  0054                     	ds	4
  3579  0058                     ___fttol@exp1:	
  3580                           
  3581                           ; 1 bytes @ 0x38
  3582  0058                     	ds	1
  3583  0059                     ??_getPercentValue:	
  3584  0059                     ??_setPercentValue:	
  3585                           ; 0 bytes @ 0x39
  3586                           
  3587  0059                     setPercentValue@value:	
  3588                           ; 0 bytes @ 0x39
  3589                           
  3590                           
  3591                           ; 1 bytes @ 0x39
  3592  0059                     	ds	1
  3593  005A                     setPercentValue@i:	
  3594                           
  3595                           ; 3 bytes @ 0x3A
  3596  005A                     	ds	1
  3597  005B                     getPercentValue@value:	
  3598                           
  3599                           ; 1 bytes @ 0x3B
  3600  005B                     	ds	1
  3601  005C                     getPercentValue@i:	
  3602                           
  3603                           ; 3 bytes @ 0x3C
  3604  005C                     	ds	1
  3605  005D                     ?_setRF_DimmerLights:	
  3606  005D                     ??_Flash_Memory_Initialization:	
  3607                           ; 0 bytes @ 0x3D
  3608                           
  3609  005D                     setRF_DimmerLights@on:	
  3610                           ; 0 bytes @ 0x3D
  3611                           
  3612                           
  3613                           ; 1 bytes @ 0x3D
  3614  005D                     	ds	1
  3615  005E                     ??_setRF_DimmerLights:	
  3616  005E                     Flash_Memory_Initialization@i:	
  3617                           ; 0 bytes @ 0x3E
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0x3E
  3621  005E                     	ds	1
  3622  005F                     ??_setDimmerLights_AdjRF:	
  3623                           
  3624                           ; 0 bytes @ 0x3F
  3625  005F                     	ds	1
  3626  0060                     setDimmerLights_AdjRF@lights:	
  3627  0060                     setRF_DimmerLights@status:	
  3628                           ; 1 bytes @ 0x40
  3629                           
  3630                           
  3631                           ; 1 bytes @ 0x40
  3632  0060                     	ds	1
  3633  0061                     ??_setRF_DimmerValue:	
  3634  0061                     setRF_DimmerLights@lights:	
  3635                           ; 0 bytes @ 0x41
  3636                           
  3637                           
  3638                           ; 1 bytes @ 0x41
  3639  0061                     	ds	1
  3640  0062                     ??_DlyOff_Main:	
  3641  0062                     ?_setDimmerLights_Adj:	
  3642                           ; 0 bytes @ 0x42
  3643                           
  3644  0062                     ??_setRFSW_Control:	
  3645                           ; 0 bytes @ 0x42
  3646                           
  3647  0062                     ??_Sw_DimmerOnFunc:	
  3648                           ; 0 bytes @ 0x42
  3649                           
  3650  0062                     ??_Sw_DimmerOffFunc:	
  3651                           ; 0 bytes @ 0x42
  3652                           
  3653  0062                     setDimmerLights_Adj@status:	
  3654                           ; 0 bytes @ 0x42
  3655                           
  3656  0062                     Sw_DimmerOnFunc@Idle:	
  3657                           ; 1 bytes @ 0x42
  3658                           
  3659                           
  3660                           ; 1 bytes @ 0x42
  3661  0062                     	ds	1
  3662  0063                     ??_setDimmerLights_Adj:	
  3663  0063                     setRFSW_Control@sw:	
  3664                           ; 0 bytes @ 0x43
  3665                           
  3666  0063                     setRF_DimmerValue@lights:	
  3667                           ; 1 bytes @ 0x43
  3668                           
  3669  0063                     Sw_DimmerOnFunc@sw:	
  3670                           ; 1 bytes @ 0x43
  3671                           
  3672                           
  3673                           ; 1 bytes @ 0x43
  3674  0063                     	ds	1
  3675  0064                     ??_setRFSW_AdjControl:	
  3676  0064                     DlyOff_Main@sw:	
  3677                           ; 0 bytes @ 0x44
  3678                           
  3679  0064                     setDimmerLights_Adj@lights:	
  3680                           ; 1 bytes @ 0x44
  3681                           
  3682  0064                     Sw_DimmerOffFunc@sw:	
  3683                           ; 1 bytes @ 0x44
  3684                           
  3685                           
  3686                           ; 1 bytes @ 0x44
  3687  0064                     	ds	1
  3688  0065                     ??_setDimmerLights_Main:	
  3689  0065                     ??_setSw_Main:	
  3690                           ; 0 bytes @ 0x45
  3691                           
  3692  0065                     ??_DelayOff_Main:	
  3693                           ; 0 bytes @ 0x45
  3694                           
  3695  0065                     setDimmerLights_Main@clear:	
  3696                           ; 0 bytes @ 0x45
  3697                           
  3698                           
  3699                           ; 1 bytes @ 0x45
  3700  0065                     	ds	1
  3701  0066                     setDimmerLights_Main@lights:	
  3702  0066                     setRFSW_AdjControl@sw:	
  3703                           ; 1 bytes @ 0x46
  3704                           
  3705                           
  3706                           ; 1 bytes @ 0x46
  3707  0066                     	ds	1
  3708  0067                     ??_setRF_Main:	
  3709  0067                     ??_getRxData:	
  3710                           ; 0 bytes @ 0x47
  3711                           
  3712  0067                     ??_setControl_Lights_Table:	
  3713                           ; 0 bytes @ 0x47
  3714                           
  3715  0067                     ??_DimmerLights_Main:	
  3716                           ; 0 bytes @ 0x47
  3717                           
  3718  0067                     _setSw_Main$6351:	
  3719                           ; 0 bytes @ 0x47
  3720                           
  3721                           
  3722                           ; 1 bytes @ 0x47
  3723  0067                     	ds	1
  3724  0068                     _setRF_Main$5315:	
  3725  0068                     setSw_Main@sw:	
  3726                           ; 1 bytes @ 0x48
  3727                           
  3728                           
  3729                           ; 1 bytes @ 0x48
  3730  0068                     	ds	1
  3731  0069                     ??_Switch_Main:	
  3732  0069                     ??_RF_Main:	
  3733                           ; 0 bytes @ 0x49
  3734                           
  3735  0069                     ??_main:	
  3736                           ; 0 bytes @ 0x49
  3737                           
  3738                           
  3739                           	psect	maintext
  3740  0802                     __pmaintext:	
  3741                           ; 0 bytes @ 0x49
  3742 ;;
  3743 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3744 ;;
  3745 ;; *************** function _main *****************
  3746 ;; Defined at:
  3747 ;;		line 7 in file "../src/Main_B1.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;  argc            2    0[BANK3 ] int 
  3750 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  2    0[BANK3 ] int 
  3755 ;; Registers used:
  3756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 17F/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3762 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3765 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3766 ;;Total ram usage:        4 bytes
  3767 ;; Hardware stack levels required when called:   15
  3768 ;; This function calls:
  3769 ;;		_Buzzer_Initialization
  3770 ;;		_Buzzer_Main
  3771 ;;		_CC2500_PowerOnInitial
  3772 ;;		_DelayOff_Initialization
  3773 ;;		_DelayOff_Main
  3774 ;;		_DimmerLights_Initialization
  3775 ;;		_DimmerLights_Main
  3776 ;;		_Flash_Memory_Initialization
  3777 ;;		_Flash_Memory_Main
  3778 ;;		_LED_Initialization
  3779 ;;		_LED_Main
  3780 ;;		_Mcu_Initialization
  3781 ;;		_PowerFault_Initialization
  3782 ;;		_PowerFault_Main
  3783 ;;		_RF_Initialization
  3784 ;;		_RF_Main
  3785 ;;		_Switch_Initialization
  3786 ;;		_Switch_Main
  3787 ;;		_Temp_Initialization
  3788 ;;		_Temp_Main
  3789 ;;		_WDT_Main
  3790 ;;		_getPowerFault_AD
  3791 ;;		_getTemp_AD
  3792 ;;		_myMain_Initialization
  3793 ;;		_my_MainTime
  3794 ;; This function is called by:
  3795 ;;		Startup code after reset
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           
  3800                           ;psect for function _main
  3801  0802                     _main:	
  3802                           
  3803                           ;Main_B1.c: 8: myMain_Initialization();
  3804                           
  3805                           ;incstack = 0
  3806                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3807  0802  319F  270D  3188   	fcall	_myMain_Initialization
  3808                           
  3809                           ;Main_B1.c: 9: Mcu_Initialization();
  3810  0805  319F  278E  3188   	fcall	_Mcu_Initialization
  3811                           
  3812                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3813  0808  3184  24EE  3188   	fcall	_Flash_Memory_Initialization
  3814                           
  3815                           ;Main_B1.c: 11: LED_Initialization();
  3816  080B  319E  2678  3188   	fcall	_LED_Initialization
  3817                           
  3818                           ;Main_B1.c: 12: Buzzer_Initialization();
  3819  080E  319D  256A  3188   	fcall	_Buzzer_Initialization
  3820                           
  3821                           ;Main_B1.c: 14: ;;
  3822                           ;Main_B1.c: 15: Temp_Initialization();
  3823  0811  319D  257C  3188   	fcall	_Temp_Initialization
  3824                           
  3825                           ;Main_B1.c: 16: ;;
  3826                           ;Main_B1.c: 17: PowerFault_Initialization();
  3827  0814  319D  256D  3188   	fcall	_PowerFault_Initialization
  3828                           
  3829                           ;Main_B1.c: 18: DelayOff_Initialization();
  3830  0817  319D  2592  3188   	fcall	_DelayOff_Initialization
  3831                           
  3832                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3833  081A  319E  269D  3188   	fcall	_DimmerLights_Initialization
  3834                           
  3835                           ;Main_B1.c: 21: ;;
  3836                           ;Main_B1.c: 22: ;;
  3837                           ;Main_B1.c: 23: ;;
  3838                           ;Main_B1.c: 24: Switch_Initialization();
  3839  081D  319D  25F7  3188   	fcall	_Switch_Initialization
  3840                           
  3841                           ;Main_B1.c: 25: RF_Initialization();
  3842  0820  319D  2573  3188   	fcall	_RF_Initialization
  3843                           
  3844                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3845  0823  3190  206B  3188   	fcall	_CC2500_PowerOnInitial
  3846  0826                     l9499:	
  3847                           ;Main_B1.c: 27: ;;
  3848                           ;Main_B1.c: 30: while (1) {
  3849                           
  3850                           
  3851                           ;Main_B1.c: 32: if (myMain.PowerON) {
  3852  0826  0021               	movlb	1	; select bank1
  3853  0827  1C20               	btfss	_myMain^(0+128),0
  3854  0828  2831               	goto	l9503
  3855                           
  3856                           ;Main_B1.c: 34: ;;
  3857                           ;Main_B1.c: 38: ;;
  3858                           ;Main_B1.c: 42: getTemp_AD(0x09);
  3859  0829  3009               	movlw	9
  3860  082A  3193  23FD  3188   	fcall	_getTemp_AD
  3861                           
  3862                           ;Main_B1.c: 46: getPowerFault_AD(0x11);
  3863  082D  3011               	movlw	17
  3864  082E  3192  2265  3188   	fcall	_getPowerFault_AD
  3865  0831                     l9503:	
  3866                           
  3867                           ;Main_B1.c: 61: }
  3868                           ;Main_B1.c: 64: if (myMain.T0_Timerout) {
  3869  0831  0021               	movlb	1	; select bank1
  3870  0832  1CA0               	btfss	_myMain^(0+128),1
  3871  0833  2826               	goto	l9499
  3872                           
  3873                           ;Main_B1.c: 65: myMain.T0_Timerout = 0;
  3874  0834  10A0               	bcf	_myMain^(0+128),1
  3875                           
  3876                           ;Main_B1.c: 66: my_MainTime();
  3877  0835  3196  2677  3188   	fcall	_my_MainTime
  3878                           
  3879                           ;Main_B1.c: 67: WDT_Main();
  3880  0838  319F  27B2  3188   	fcall	_WDT_Main
  3881                           
  3882                           ;Main_B1.c: 68: ;;
  3883                           ;Main_B1.c: 69: ;;
  3884                           ;Main_B1.c: 70: if (myMain.PowerON) {
  3885  083B  0021               	movlb	1	; select bank1
  3886  083C  1C20               	btfss	_myMain^(0+128),0
  3887  083D  2826               	goto	l9499
  3888                           
  3889                           ;Main_B1.c: 71: Flash_Memory_Main();
  3890  083E  3191  2135  3188   	fcall	_Flash_Memory_Main
  3891                           
  3892                           ;Main_B1.c: 73: LED_Main();
  3893  0841  319E  2684  3188   	fcall	_LED_Main
  3894                           
  3895                           ;Main_B1.c: 74: Buzzer_Main();
  3896  0844  3196  26BD  3188   	fcall	_Buzzer_Main
  3897                           
  3898                           ;Main_B1.c: 76: ;;
  3899                           ;Main_B1.c: 77: Temp_Main();
  3900  0847  319D  257F  3188   	fcall	_Temp_Main
  3901                           
  3902                           ;Main_B1.c: 78: ;;
  3903                           ;Main_B1.c: 79: PowerFault_Main();
  3904  084A  319D  2570  3188   	fcall	_PowerFault_Main
  3905                           
  3906                           ;Main_B1.c: 81: ;;
  3907                           ;Main_B1.c: 82: DimmerLights_Main();
  3908  084D  319D  25B8  3188   	fcall	_DimmerLights_Main
  3909                           
  3910                           ;Main_B1.c: 83: Switch_Main();
  3911  0850  319D  25A2  3188   	fcall	_Switch_Main
  3912                           
  3913                           ;Main_B1.c: 84: ;;
  3914                           ;Main_B1.c: 85: ;;
  3915                           ;Main_B1.c: 87: RF_Main();
  3916  0853  319D  2576  3188   	fcall	_RF_Main
  3917                           
  3918                           ;Main_B1.c: 88: DelayOff_Main();
  3919  0856  319D  2596  3188   	fcall	_DelayOff_Main
  3920                           
  3921                           ;Main_B1.c: 89: ;;
  3922  0859  2826               	goto	l9499
  3923  085A                     __end_of_main:	
  3924                           ;Main_B1.c: 90: }
  3925                           ;Main_B1.c: 91: }
  3926                           ;Main_B1.c: 109: }
  3927                           ;Main_B1.c: 110: return (0);
  3928                           ;	Return value of _main is never used
  3929                           
  3930                           
  3931                           	psect	text1
  3932  1677                     __ptext1:	
  3933 ;; *************** function _my_MainTime *****************
  3934 ;; Defined at:
  3935 ;;		line 127 in file "../src/Main_B1.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;		None
  3940 ;; Return value:  Size  Location     Type
  3941 ;;		None               void
  3942 ;; Registers used:
  3943 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3953 ;;Total ram usage:        0 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    7
  3956 ;; This function calls:
  3957 ;;		_setBuz
  3958 ;;		_setRF_Enable
  3959 ;;		_setSw_Enable
  3960 ;;		_setTemp_Enable
  3961 ;; This function is called by:
  3962 ;;		_main
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function _my_MainTime
  3968  1677                     _my_MainTime:	
  3969                           
  3970                           ;Main_B1.c: 129: if (myMain.PowerON == 0) {
  3971                           
  3972                           ;incstack = 0
  3973                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3974  1677  0021               	movlb	1	; select bank1
  3975  1678  1820               	btfsc	_myMain^(0+128),0
  3976  1679  2EA4               	goto	l9425
  3977                           
  3978                           ;Main_B1.c: 130: myMain.PowerCount++;
  3979  167A  3001               	movlw	1
  3980  167B  07A1               	addwf	(_myMain^(0+128)+1),f
  3981  167C  3000               	movlw	0
  3982  167D  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  3983                           
  3984                           ;Main_B1.c: 131: if (myMain.PowerCount == 150)
  3985  167E  3001               	movlw	1
  3986  167F  3EA0               	addlw	_myMain& (0+255)
  3987  1680  0086               	movwf	6
  3988  1681  0187               	clrf	7
  3989  1682  3F40               	moviw [0]fsr1
  3990  1683  3A96               	xorlw	150
  3991  1684  1D03               	skipz
  3992  1685  2E88               	goto	u9765
  3993  1686  3F41               	moviw [1]fsr1
  3994  1687  3A00               	xorlw	0
  3995  1688                     u9765:	
  3996  1688  1D03               	skipz
  3997  1689  0008               	return
  3998                           
  3999                           ;Main_B1.c: 132: {
  4000                           ;Main_B1.c: 133: myMain.PowerCount = 0;
  4001  168A  01A1               	clrf	(_myMain^(0+128)+1)
  4002  168B  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4003                           
  4004                           ;Main_B1.c: 134: myMain.PowerON = 1;
  4005  168C  1420               	bsf	_myMain^(0+128),0
  4006                           
  4007                           ;Main_B1.c: 137: setTemp_Enable(1);
  4008  168D  3001               	movlw	1
  4009  168E  319D  25E6  3196   	fcall	_setTemp_Enable
  4010                           
  4011                           ;Main_B1.c: 141: ;;
  4012                           ;Main_B1.c: 147: setBuz(3, 50);
  4013  1691  3032               	movlw	50
  4014  1692  0020               	movlb	0	; select bank0
  4015  1693  00A9               	movwf	setBuz@time
  4016  1694  3000               	movlw	0
  4017  1695  00AA               	movwf	setBuz@time+1
  4018  1696  3003               	movlw	3
  4019  1697  3188  205A  3196   	fcall	_setBuz
  4020                           
  4021                           ;Main_B1.c: 148: myMain.SelfTest = 1;
  4022  169A  0021               	movlb	1	; select bank1
  4023  169B  1720               	bsf	_myMain^(0+128),6
  4024                           
  4025                           ;Main_B1.c: 150: setSw_Enable(1);
  4026  169C  3001               	movlw	1
  4027  169D  319E  26EF  3196   	fcall	_setSw_Enable
  4028                           
  4029                           ;Main_B1.c: 153: setRF_Enable(1);
  4030  16A0  3001               	movlw	1
  4031  16A1  319E  26D2         	fcall	_setRF_Enable
  4032                           
  4033                           ;Main_B1.c: 157: }
  4034                           ;Main_B1.c: 158: } else {
  4035  16A3  0008               	return
  4036  16A4                     l9425:	
  4037                           
  4038                           ;Main_B1.c: 166: myMain.Count1++;
  4039  16A4  3001               	movlw	1
  4040  16A5  0021               	movlb	1	; select bank1
  4041  16A6  07A5               	addwf	(_myMain^(0+128)+5),f
  4042  16A7  3000               	movlw	0
  4043  16A8  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4044                           
  4045                           ;Main_B1.c: 167: if (myMain.Count1 == 100)
  4046  16A9  3005               	movlw	5
  4047  16AA  3EA0               	addlw	_myMain& (0+255)
  4048  16AB  0086               	movwf	6
  4049  16AC  0187               	clrf	7
  4050  16AD  3F40               	moviw [0]fsr1
  4051  16AE  3A64               	xorlw	100
  4052  16AF  1D03               	skipz
  4053  16B0  2EB3               	goto	u9775
  4054  16B1  3F41               	moviw [1]fsr1
  4055  16B2  3A00               	xorlw	0
  4056  16B3                     u9775:	
  4057  16B3  1D03               	skipz
  4058  16B4  0008               	return
  4059                           
  4060                           ;Main_B1.c: 168: {
  4061                           ;Main_B1.c: 169: myMain.Count1 = 0;
  4062  16B5  01A5               	clrf	(_myMain^(0+128)+5)
  4063  16B6  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4064                           
  4065                           ;Main_B1.c: 182: if (myMain.Flag) {
  4066  16B7  1DA0               	btfss	_myMain^(0+128),3
  4067  16B8  2EBB               	goto	l1449
  4068                           
  4069                           ;Main_B1.c: 183: myMain.Flag = 0;
  4070  16B9  11A0               	bcf	_myMain^(0+128),3
  4071                           
  4072                           ;Main_B1.c: 192: } else {
  4073  16BA  0008               	return
  4074  16BB                     l1449:	
  4075                           
  4076                           ;Main_B1.c: 193: myMain.Flag = 1;
  4077  16BB  15A0               	bsf	_myMain^(0+128),3
  4078  16BC  0008               	return
  4079  16BD                     __end_of_my_MainTime:	
  4080                           
  4081                           	psect	text2
  4082  1DE6                     __ptext2:	
  4083 ;; *************** function _setTemp_Enable *****************
  4084 ;; Defined at:
  4085 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;  command         1    wreg     unsigned char 
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;  command         1    0[BANK0 ] unsigned char 
  4090 ;; Return value:  Size  Location     Type
  4091 ;;		None               void
  4092 ;; Registers used:
  4093 ;;		wreg
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4100 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4102 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4103 ;;Total ram usage:        1 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    5
  4106 ;; This function calls:
  4107 ;;		Nothing
  4108 ;; This function is called by:
  4109 ;;		_my_MainTime
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           
  4114                           ;psect for function _setTemp_Enable
  4115  1DE6                     _setTemp_Enable:	
  4116                           
  4117                           ;incstack = 0
  4118                           ; Regs used in _setTemp_Enable: [wreg]
  4119                           ;setTemp_Enable@command stored from wreg
  4120  1DE6  0020               	movlb	0	; select bank0
  4121  1DE7  00A0               	movwf	setTemp_Enable@command
  4122                           
  4123                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4124  1DE8  0820               	movf	setTemp_Enable@command,w
  4125  1DE9  0021               	movlb	1	; select bank1
  4126  1DEA  105C               	bcf	_Temp1^(0+128),0
  4127  1DEB  1D03               	skipz
  4128  1DEC  145C               	bsf	_Temp1^(0+128),0
  4129  1DED  0008               	return
  4130  1DEE                     __end_of_setTemp_Enable:	
  4131                           
  4132                           	psect	text3
  4133  1F0D                     __ptext3:	
  4134 ;; *************** function _myMain_Initialization *****************
  4135 ;; Defined at:
  4136 ;;		line 115 in file "../src/Main_B1.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;		None
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;		None
  4141 ;; Return value:  Size  Location     Type
  4142 ;;		None               void
  4143 ;; Registers used:
  4144 ;;		wreg, fsr1l, fsr1h
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;Total ram usage:        1 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    5
  4157 ;; This function calls:
  4158 ;;		Nothing
  4159 ;; This function is called by:
  4160 ;;		_main
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           
  4165                           ;psect for function _myMain_Initialization
  4166  1F0D                     _myMain_Initialization:	
  4167                           
  4168                           ;Main_B1.c: 117: product = &_product;
  4169                           
  4170                           ;incstack = 0
  4171                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4172  1F0D  30A0               	movlw	__product& (0+255)
  4173  1F0E  0020               	movlb	0	; select bank0
  4174  1F0F  00A0               	movwf	??_myMain_Initialization
  4175  1F10  0820               	movf	??_myMain_Initialization,w
  4176  1F11  00ED               	movwf	_product
  4177                           
  4178                           ;Main_B1.c: 118: product->Data[20] = 209;
  4179  1F12  30D1               	movlw	209
  4180  1F13  00A0               	movwf	??_myMain_Initialization
  4181  1F14  086D               	movf	_product,w
  4182  1F15  3E14               	addlw	20
  4183  1F16  0086               	movwf	6
  4184  1F17  3001               	movlw	1	; select bank2/3
  4185  1F18  0087               	movwf	7
  4186  1F19  0820               	movf	??_myMain_Initialization,w
  4187  1F1A  0081               	movwf	1
  4188  1F1B  0008               	return
  4189  1F1C                     __end_of_myMain_Initialization:	
  4190                           
  4191                           	psect	text4
  4192  13FD                     __ptext4:	
  4193 ;; *************** function _getTemp_AD *****************
  4194 ;; Defined at:
  4195 ;;		line 33 in file "../src/OverTemperature_B1.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;  channel         1    wreg     unsigned char 
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;  channel         1    5[BANK0 ] unsigned char 
  4200 ;; Return value:  Size  Location     Type
  4201 ;;		None               void
  4202 ;; Registers used:
  4203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4204 ;; Tracked objects:
  4205 ;;		On entry : 0/0
  4206 ;;		On exit  : 0/0
  4207 ;;		Unchanged: 0/0
  4208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4211 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;Total ram usage:        2 bytes
  4214 ;; Hardware stack levels used:    1
  4215 ;; Hardware stack levels required when called:    7
  4216 ;; This function calls:
  4217 ;;		_getAD
  4218 ;; This function is called by:
  4219 ;;		_main
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           
  4224                           ;psect for function _getTemp_AD
  4225  13FD                     _getTemp_AD:	
  4226                           
  4227                           ;incstack = 0
  4228                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4229                           ;getTemp_AD@channel stored from wreg
  4230  13FD  0020               	movlb	0	; select bank0
  4231  13FE  00A5               	movwf	getTemp_AD@channel
  4232                           
  4233                           ;OverTemperature_B1.c: 34: if (Temp1.ADtoGO == 1) {
  4234  13FF  0021               	movlb	1	; select bank1
  4235  1400  1D5C               	btfss	_Temp1^(0+128),2
  4236  1401  0008               	return
  4237                           
  4238                           ;OverTemperature_B1.c: 35: Temp1.ADRES = getAD(channel, 0xf0);
  4239  1402  30F0               	movlw	240
  4240  1403  0020               	movlb	0	; select bank0
  4241  1404  00A4               	movwf	??_getTemp_AD
  4242  1405  0824               	movf	??_getTemp_AD,w
  4243  1406  00A0               	movwf	getAD@adcon1
  4244  1407  0825               	movf	getTemp_AD@channel,w
  4245  1408  3191  2154  3193   	fcall	_getAD
  4246  140B  0020               	movlb	0	; select bank0
  4247  140C  0821               	movf	?_getAD+1,w
  4248  140D  0021               	movlb	1	; select bank1
  4249  140E  01E9               	clrf	((_Temp1+1)^(0+128)+12)
  4250  140F  07E9               	addwf	((_Temp1+1)^(0+128)+12),f
  4251  1410  0020               	movlb	0	; select bank0
  4252  1411  0820               	movf	?_getAD,w
  4253  1412  0021               	movlb	1	; select bank1
  4254  1413  01E8               	clrf	(_Temp1^(0+128)+12)
  4255  1414  07E8               	addwf	(_Temp1^(0+128)+12),f
  4256                           
  4257                           ;OverTemperature_B1.c: 36: if (Temp1.ADH[0] < Temp1.ADRES) {
  4258  1415  0869               	movf	((_Temp1+1)^(0+128)+12),w
  4259  1416  0265               	subwf	((_Temp1+1)^(0+128)+8),w
  4260  1417  1D03               	skipz
  4261  1418  2C1B               	goto	u9715
  4262  1419  0868               	movf	(_Temp1^(0+128)+12),w
  4263  141A  0264               	subwf	(_Temp1^(0+128)+8),w
  4264  141B                     u9715:	
  4265  141B  1803               	skipnc
  4266  141C  2C24               	goto	l9393
  4267                           
  4268                           ;OverTemperature_B1.c: 37: Temp1.ADH[0] = Temp1.ADRES;
  4269  141D  0869               	movf	((_Temp1+1)^(0+128)+12),w
  4270  141E  01E5               	clrf	((_Temp1+1)^(0+128)+8)
  4271  141F  07E5               	addwf	((_Temp1+1)^(0+128)+8),f
  4272  1420  0868               	movf	(_Temp1^(0+128)+12),w
  4273  1421  01E4               	clrf	(_Temp1^(0+128)+8)
  4274  1422  07E4               	addwf	(_Temp1^(0+128)+8),f
  4275                           
  4276                           ;OverTemperature_B1.c: 38: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4277  1423  0008               	return
  4278  1424                     l9393:	
  4279  1424  0869               	movf	((_Temp1+1)^(0+128)+12),w
  4280  1425  0267               	subwf	((_Temp1+1)^(0+128)+10),w
  4281  1426  1D03               	skipz
  4282  1427  2C2A               	goto	u9725
  4283  1428  0868               	movf	(_Temp1^(0+128)+12),w
  4284  1429  0266               	subwf	(_Temp1^(0+128)+10),w
  4285  142A                     u9725:	
  4286  142A  1803               	skipnc
  4287  142B  0008               	return
  4288                           
  4289                           ;OverTemperature_B1.c: 39: Temp1.ADH[1] = Temp1.ADRES;
  4290  142C  0869               	movf	((_Temp1+1)^(0+128)+12),w
  4291  142D  01E7               	clrf	((_Temp1+1)^(0+128)+10)
  4292  142E  07E7               	addwf	((_Temp1+1)^(0+128)+10),f
  4293  142F  0868               	movf	(_Temp1^(0+128)+12),w
  4294  1430  01E6               	clrf	(_Temp1^(0+128)+10)
  4295  1431  07E6               	addwf	(_Temp1^(0+128)+10),f
  4296  1432  0008               	return
  4297  1433                     __end_of_getTemp_AD:	
  4298                           
  4299                           	psect	text5
  4300  1265                     __ptext5:	
  4301 ;; *************** function _getPowerFault_AD *****************
  4302 ;; Defined at:
  4303 ;;		line 45 in file "../src/PowerFault_B1.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;  channel         1    wreg     unsigned char 
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;  channel         1    5[BANK0 ] unsigned char 
  4308 ;; Return value:  Size  Location     Type
  4309 ;;		None               void
  4310 ;; Registers used:
  4311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4320 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;Total ram usage:        2 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    7
  4324 ;; This function calls:
  4325 ;;		_getAD
  4326 ;; This function is called by:
  4327 ;;		_main
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           
  4332                           ;psect for function _getPowerFault_AD
  4333  1265                     _getPowerFault_AD:	
  4334                           
  4335                           ;incstack = 0
  4336                           ; Regs used in _getPowerFault_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4337                           ;getPowerFault_AD@channel stored from wreg
  4338  1265  0020               	movlb	0	; select bank0
  4339  1266  00A5               	movwf	getPowerFault_AD@channel
  4340                           
  4341                           ;PowerFault_B1.c: 46: if (PF1.ADtoGO == 1) {
  4342  1267  0021               	movlb	1	; select bank1
  4343  1268  1DC8               	btfss	_PF1^(0+128),3
  4344  1269  0008               	return
  4345                           
  4346                           ;PowerFault_B1.c: 47: PF1.ADRES = getAD(channel, 0xf0);
  4347  126A  30F0               	movlw	240
  4348  126B  0020               	movlb	0	; select bank0
  4349  126C  00A4               	movwf	??_getPowerFault_AD
  4350  126D  0824               	movf	??_getPowerFault_AD,w
  4351  126E  00A0               	movwf	getAD@adcon1
  4352  126F  0825               	movf	getPowerFault_AD@channel,w
  4353  1270  3191  2154  3192   	fcall	_getAD
  4354  1273  0020               	movlb	0	; select bank0
  4355  1274  0821               	movf	?_getAD+1,w
  4356  1275  0021               	movlb	1	; select bank1
  4357  1276  01CF               	clrf	((_PF1+1)^(0+128)+6)
  4358  1277  07CF               	addwf	((_PF1+1)^(0+128)+6),f
  4359  1278  0020               	movlb	0	; select bank0
  4360  1279  0820               	movf	?_getAD,w
  4361  127A  0021               	movlb	1	; select bank1
  4362  127B  01CE               	clrf	(_PF1^(0+128)+6)
  4363  127C  07CE               	addwf	(_PF1^(0+128)+6),f
  4364                           
  4365                           ;PowerFault_B1.c: 48: if (PF1.AD < PF1.ADRES) {
  4366  127D  084F               	movf	((_PF1+1)^(0+128)+6),w
  4367  127E  024D               	subwf	((_PF1+1)^(0+128)+4),w
  4368  127F  1D03               	skipz
  4369  1280  2A83               	goto	u9745
  4370  1281  084E               	movf	(_PF1^(0+128)+6),w
  4371  1282  024C               	subwf	(_PF1^(0+128)+4),w
  4372  1283                     u9745:	
  4373  1283  1803               	skipnc
  4374  1284  0008               	return
  4375                           
  4376                           ;PowerFault_B1.c: 49: PF1.AD = PF1.ADRES;
  4377  1285  084F               	movf	((_PF1+1)^(0+128)+6),w
  4378  1286  01CD               	clrf	((_PF1+1)^(0+128)+4)
  4379  1287  07CD               	addwf	((_PF1+1)^(0+128)+4),f
  4380  1288  084E               	movf	(_PF1^(0+128)+6),w
  4381  1289  01CC               	clrf	(_PF1^(0+128)+4)
  4382  128A  07CC               	addwf	(_PF1^(0+128)+4),f
  4383  128B  0008               	return
  4384  128C                     __end_of_getPowerFault_AD:	
  4385                           
  4386                           	psect	text6
  4387  1154                     __ptext6:	
  4388 ;; *************** function _getAD *****************
  4389 ;; Defined at:
  4390 ;;		line 350 in file "../src/MCU_B1.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;  adcon0          1    wreg     unsigned char 
  4393 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  2    0[BANK0 ] int 
  4398 ;; Registers used:
  4399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4405 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;Total ram usage:        4 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    6
  4412 ;; This function calls:
  4413 ;;		_Timeout_Counter
  4414 ;;		_set_TimeoutCleared
  4415 ;; This function is called by:
  4416 ;;		_getTemp_AD
  4417 ;;		_getPowerFault_AD
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           
  4422                           ;psect for function _getAD
  4423  1154                     _getAD:	
  4424                           
  4425                           ;incstack = 0
  4426                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4427                           ;getAD@adcon0 stored from wreg
  4428  1154  0020               	movlb	0	; select bank0
  4429  1155  00A3               	movwf	getAD@adcon0
  4430                           
  4431                           ;MCU_B1.c: 351: ADCON0 = adcon0;
  4432  1156  0823               	movf	getAD@adcon0,w
  4433  1157  0021               	movlb	1	; select bank1
  4434  1158  009D               	movwf	29	;volatile
  4435                           
  4436                           ;MCU_B1.c: 352: ADCON1 = adcon1;
  4437  1159  0020               	movlb	0	; select bank0
  4438  115A  0820               	movf	getAD@adcon1,w
  4439  115B  0021               	movlb	1	; select bank1
  4440  115C  009E               	movwf	30	;volatile
  4441                           
  4442                           ;MCU_B1.c: 353: GO_nDONE = 1;
  4443  115D  149D               	bsf	29,1	;volatile
  4444                           
  4445                           ;MCU_B1.c: 354: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4446  115E  2962               	goto	l8867
  4447  115F                     l8865:	
  4448                           
  4449                           ;MCU_B1.c: 355: Timeout_Counter();
  4450  115F  319F  27EB  3191   	fcall	_Timeout_Counter
  4451  1162                     l8867:	
  4452  1162  0021               	movlb	1	; select bank1
  4453  1163  1C9D               	btfss	29,1	;volatile
  4454  1164  2967               	goto	l8871
  4455  1165  1D2F               	btfss	(_myMain^(0+128)+15),2
  4456  1166  295F               	goto	l8865
  4457  1167                     l8871:	
  4458                           
  4459                           ;MCU_B1.c: 356: };
  4460                           ;MCU_B1.c: 357: set_TimeoutCleared();
  4461  1167  3190  2066         	fcall	_set_TimeoutCleared
  4462                           
  4463                           ;MCU_B1.c: 358: return ((ADRESH*256)+ADRESL);
  4464  1169  0021               	movlb	1	; select bank1
  4465  116A  081C               	movf	28,w	;volatile
  4466  116B  0020               	movlb	0	; select bank0
  4467  116C  01A1               	clrf	?_getAD+1
  4468  116D  07A1               	addwf	?_getAD+1,f
  4469  116E  0021               	movlb	1	; select bank1
  4470  116F  081B               	movf	27,w	;volatile
  4471  1170  0020               	movlb	0	; select bank0
  4472  1171  01A0               	clrf	?_getAD
  4473  1172  07A0               	addwf	?_getAD,f
  4474  1173  0008               	return
  4475  1174                     __end_of_getAD:	
  4476                           
  4477                           	psect	text7
  4478  1FB2                     __ptext7:	
  4479 ;; *************** function _WDT_Main *****************
  4480 ;; Defined at:
  4481 ;;		line 909 in file "../src/MCU_B1.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;		None
  4484 ;; Auto vars:     Size  Location     Type
  4485 ;;		None
  4486 ;; Return value:  Size  Location     Type
  4487 ;;		None               void
  4488 ;; Registers used:
  4489 ;;		wreg, status,2, status,0, pclath, cstack
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4498 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4499 ;;Total ram usage:        1 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    6
  4502 ;; This function calls:
  4503 ;;		_WDT_Clearing
  4504 ;; This function is called by:
  4505 ;;		_main
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           
  4510                           ;psect for function _WDT_Main
  4511  1FB2                     _WDT_Main:	
  4512                           
  4513                           ;MCU_B1.c: 910: if (WDT.Enable == 1) {
  4514                           
  4515                           ;incstack = 0
  4516                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4517  1FB2  0021               	movlb	1	; select bank1
  4518  1FB3  1C52               	btfss	_WDT^(0+128),0
  4519  1FB4  0008               	return
  4520                           
  4521                           ;MCU_B1.c: 911: if (WDT.Count-- > 0) {
  4522  1FB5  3001               	movlw	1
  4523  1FB6  02D3               	subwf	(_WDT^(0+128)+1),f
  4524  1FB7  0853               	movf	(_WDT^(0+128)+1),w
  4525  1FB8  3AFF               	xorlw	255
  4526  1FB9  1903               	skipnz
  4527  1FBA  0008               	return
  4528                           
  4529                           ;MCU_B1.c: 912: WDT.Count = 10;
  4530  1FBB  300A               	movlw	10
  4531  1FBC  0020               	movlb	0	; select bank0
  4532  1FBD  00A0               	movwf	??_WDT_Main
  4533  1FBE  0820               	movf	??_WDT_Main,w
  4534  1FBF  0021               	movlb	1	; select bank1
  4535  1FC0  00D3               	movwf	(_WDT^(0+128)+1)
  4536                           
  4537                           ;MCU_B1.c: 913: WDT_Clearing();
  4538  1FC1  3180  2002         	fcall	_WDT_Clearing
  4539  1FC3  0008               	return
  4540  1FC4                     __end_of_WDT_Main:	
  4541                           
  4542                           	psect	text8
  4543  0002                     __ptext8:	
  4544 ;; *************** function _WDT_Clearing *****************
  4545 ;; Defined at:
  4546 ;;		line 919 in file "../src/MCU_B1.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;		None
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;		None
  4551 ;; Return value:  Size  Location     Type
  4552 ;;		None               void
  4553 ;; Registers used:
  4554 ;;		None
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4564 ;;Total ram usage:        0 bytes
  4565 ;; Hardware stack levels used:    1
  4566 ;; Hardware stack levels required when called:    5
  4567 ;; This function calls:
  4568 ;;		Nothing
  4569 ;; This function is called by:
  4570 ;;		_WDT_Main
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           
  4575                           ;psect for function _WDT_Clearing
  4576  0002                     _WDT_Clearing:	
  4577                           
  4578                           ;incstack = 0
  4579                           ; Regs used in _WDT_Clearing: []
  4580  0002  0064               	clrwdt	;# 
  4581  0003  0008               	return
  4582  0004                     __end_of_WDT_Clearing:	
  4583                           
  4584                           	psect	text9
  4585  1D7F                     __ptext9:	
  4586 ;; *************** function _Temp_Main *****************
  4587 ;; Defined at:
  4588 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;		None
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;		None
  4593 ;; Return value:  Size  Location     Type
  4594 ;;		None               void
  4595 ;; Registers used:
  4596 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4606 ;;Total ram usage:        0 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:   11
  4609 ;; This function calls:
  4610 ;;		_setTemp_Main
  4611 ;; This function is called by:
  4612 ;;		_main
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           
  4617                           ;psect for function _Temp_Main
  4618  1D7F                     _Temp_Main:	
  4619                           
  4620                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4621                           
  4622                           ;incstack = 0
  4623                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4624  1D7F  318E  2668         	fcall	_setTemp_Main
  4625  1D81  0008               	return
  4626  1D82                     __end_of_Temp_Main:	
  4627                           
  4628                           	psect	text10
  4629  0E68                     __ptext10:	
  4630 ;; *************** function _setTemp_Main *****************
  4631 ;; Defined at:
  4632 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;		None
  4635 ;; Auto vars:     Size  Location     Type
  4636 ;;		None
  4637 ;; Return value:  Size  Location     Type
  4638 ;;		None               void
  4639 ;; Registers used:
  4640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4641 ;; Tracked objects:
  4642 ;;		On entry : 0/0
  4643 ;;		On exit  : 0/0
  4644 ;;		Unchanged: 0/0
  4645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4649 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4650 ;;Total ram usage:        1 bytes
  4651 ;; Hardware stack levels used:    1
  4652 ;; Hardware stack levels required when called:   10
  4653 ;; This function calls:
  4654 ;;		_getPF_Safe
  4655 ;;		_setOverTemp_Exceptions
  4656 ;; This function is called by:
  4657 ;;		_Temp_Main
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661                           
  4662                           ;psect for function _setTemp_Main
  4663  0E68                     _setTemp_Main:	
  4664                           
  4665                           ;OverTemperature_B1.c: 58: if (Temp1.Enable == 1) {
  4666                           
  4667                           ;incstack = 0
  4668                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4669  0E68  0021               	movlb	1	; select bank1
  4670  0E69  1C5C               	btfss	_Temp1^(0+128),0
  4671  0E6A  0008               	return
  4672                           
  4673                           ;OverTemperature_B1.c: 59: if (Temp1.ADtoGO == 0) {
  4674  0E6B  195C               	btfsc	_Temp1^(0+128),2
  4675  0E6C  2E8A               	goto	l8923
  4676                           
  4677                           ;OverTemperature_B1.c: 60: Temp1.Time++;
  4678  0E6D  3001               	movlw	1
  4679  0E6E  07DD               	addwf	(_Temp1^(0+128)+1),f
  4680  0E6F  3000               	movlw	0
  4681  0E70  3DDE               	addwfc	((_Temp1+1)^(0+128)+1),f
  4682                           
  4683                           ;OverTemperature_B1.c: 62: {
  4684                           ;OverTemperature_B1.c: 63: if (1 == 1 && getPF_Safe() == 1) {
  4685  0E71  3001               	movlw	1
  4686  0E72  025E               	subwf	((_Temp1+1)^(0+128)+1),w
  4687  0E73  30F4               	movlw	244
  4688  0E74  1903               	skipnz
  4689  0E75  025D               	subwf	(_Temp1^(0+128)+1),w
  4690  0E76  1C03               	skipc
  4691  0E77  0008               	return
  4692  0E78  319D  25DE  318E   	fcall	_getPF_Safe
  4693  0E7B  3A01               	xorlw	1
  4694  0E7C  1D03               	skipz
  4695  0E7D  2E84               	goto	l8921
  4696                           
  4697                           ;OverTemperature_B1.c: 64: Temp1.Time = 0;
  4698  0E7E  0021               	movlb	1	; select bank1
  4699  0E7F  01DD               	clrf	(_Temp1^(0+128)+1)
  4700  0E80  01DE               	clrf	((_Temp1+1)^(0+128)+1)
  4701                           
  4702                           ;OverTemperature_B1.c: 65: Temp1.ADtoGO = 1;
  4703  0E81  155C               	bsf	_Temp1^(0+128),2
  4704                           
  4705                           ;OverTemperature_B1.c: 66: Temp1.Safe = 0;
  4706  0E82  125C               	bcf	_Temp1^(0+128),4
  4707                           
  4708                           ;OverTemperature_B1.c: 68: } else {
  4709  0E83  0008               	return
  4710  0E84                     l8921:	
  4711                           
  4712                           ;OverTemperature_B1.c: 69: Temp1.Time = 1000;
  4713  0E84  30E8               	movlw	232
  4714  0E85  0021               	movlb	1	; select bank1
  4715  0E86  00DD               	movwf	(_Temp1^(0+128)+1)
  4716  0E87  3003               	movlw	3
  4717  0E88  00DE               	movwf	(_Temp1^(0+128)+2)
  4718                           
  4719                           ;OverTemperature_B1.c: 70: }
  4720                           ;OverTemperature_B1.c: 71: }
  4721                           ;OverTemperature_B1.c: 72: } else {
  4722  0E89  0008               	return
  4723  0E8A                     l8923:	
  4724                           
  4725                           ;OverTemperature_B1.c: 73: Temp1.Time++;
  4726  0E8A  3001               	movlw	1
  4727  0E8B  07DD               	addwf	(_Temp1^(0+128)+1),f
  4728  0E8C  3000               	movlw	0
  4729  0E8D  3DDE               	addwfc	((_Temp1+1)^(0+128)+1),f
  4730                           
  4731                           ;OverTemperature_B1.c: 74: if (Temp1.Time >= 4) {
  4732  0E8E  3000               	movlw	0
  4733  0E8F  025E               	subwf	((_Temp1+1)^(0+128)+1),w
  4734  0E90  3004               	movlw	4
  4735  0E91  1903               	skipnz
  4736  0E92  025D               	subwf	(_Temp1^(0+128)+1),w
  4737  0E93  1C03               	skipc
  4738  0E94  0008               	return
  4739                           
  4740                           ;OverTemperature_B1.c: 75: Temp1.Time = 0;
  4741  0E95  01DD               	clrf	(_Temp1^(0+128)+1)
  4742  0E96  01DE               	clrf	((_Temp1+1)^(0+128)+1)
  4743                           
  4744                           ;OverTemperature_B1.c: 76: Temp1.ADtoGO = 0;
  4745  0E97  115C               	bcf	_Temp1^(0+128),2
  4746                           
  4747                           ;OverTemperature_B1.c: 77: Temp1.AD = Temp1.ADH[1];
  4748  0E98  0867               	movf	((_Temp1+1)^(0+128)+10),w
  4749  0E99  01E3               	clrf	((_Temp1+1)^(0+128)+6)
  4750  0E9A  07E3               	addwf	((_Temp1+1)^(0+128)+6),f
  4751  0E9B  0866               	movf	(_Temp1^(0+128)+10),w
  4752  0E9C  01E2               	clrf	(_Temp1^(0+128)+6)
  4753  0E9D  07E2               	addwf	(_Temp1^(0+128)+6),f
  4754                           
  4755                           ;OverTemperature_B1.c: 78: if (Temp1.ERROR == 1) {
  4756  0E9E  1CDC               	btfss	_Temp1^(0+128),1
  4757  0E9F  2EB7               	goto	l8945
  4758                           
  4759                           ;OverTemperature_B1.c: 79: if (Temp1.AD >= 600) {
  4760  0EA0  3002               	movlw	2
  4761  0EA1  0263               	subwf	((_Temp1+1)^(0+128)+6),w
  4762  0EA2  3058               	movlw	88
  4763  0EA3  1903               	skipnz
  4764  0EA4  0262               	subwf	(_Temp1^(0+128)+6),w
  4765  0EA5  1C03               	skipc
  4766  0EA6  2ECE               	goto	l8955
  4767                           
  4768                           ;OverTemperature_B1.c: 80: Temp1.Count++;
  4769  0EA7  3001               	movlw	1
  4770  0EA8  0020               	movlb	0	; select bank0
  4771  0EA9  00B1               	movwf	??_setTemp_Main
  4772  0EAA  0831               	movf	??_setTemp_Main,w
  4773  0EAB  0021               	movlb	1	; select bank1
  4774  0EAC  07DF               	addwf	(_Temp1^(0+128)+3),f
  4775                           
  4776                           ;OverTemperature_B1.c: 81: if (Temp1.Count >= 3) {
  4777  0EAD  3003               	movlw	3
  4778  0EAE  025F               	subwf	(_Temp1^(0+128)+3),w
  4779  0EAF  1C03               	skipc
  4780  0EB0  2ED0               	goto	l8957
  4781                           
  4782                           ;OverTemperature_B1.c: 82: Temp1.Count = 0;
  4783  0EB1  01DF               	clrf	(_Temp1^(0+128)+3)
  4784                           
  4785                           ;OverTemperature_B1.c: 83: setOverTemp_Exceptions(0);
  4786  0EB2  3000               	movlw	0
  4787  0EB3  3196  2631  318E   	fcall	_setOverTemp_Exceptions
  4788                           
  4789                           ;OverTemperature_B1.c: 84: }
  4790                           ;OverTemperature_B1.c: 85: } else {
  4791  0EB6  2ED0               	goto	l8957
  4792  0EB7                     l8945:	
  4793                           ;OverTemperature_B1.c: 87: }
  4794                           ;OverTemperature_B1.c: 88: } else {
  4795                           
  4796                           ;OverTemperature_B1.c: 86: Temp1.Count = 0;
  4797                           
  4798                           
  4799                           ;OverTemperature_B1.c: 89: if (Temp1.AD <= 550) {
  4800  0EB7  3002               	movlw	2
  4801  0EB8  0263               	subwf	((_Temp1+1)^(0+128)+6),w
  4802  0EB9  3027               	movlw	39
  4803  0EBA  1903               	skipnz
  4804  0EBB  0262               	subwf	(_Temp1^(0+128)+6),w
  4805  0EBC  1803               	skipnc
  4806  0EBD  2ECE               	goto	l8955
  4807                           
  4808                           ;OverTemperature_B1.c: 90: Temp1.Count++;
  4809  0EBE  3001               	movlw	1
  4810  0EBF  0020               	movlb	0	; select bank0
  4811  0EC0  00B1               	movwf	??_setTemp_Main
  4812  0EC1  0831               	movf	??_setTemp_Main,w
  4813  0EC2  0021               	movlb	1	; select bank1
  4814  0EC3  07DF               	addwf	(_Temp1^(0+128)+3),f
  4815                           
  4816                           ;OverTemperature_B1.c: 91: if (Temp1.Count >= 3) {
  4817  0EC4  3003               	movlw	3
  4818  0EC5  025F               	subwf	(_Temp1^(0+128)+3),w
  4819  0EC6  1C03               	skipc
  4820  0EC7  2ED0               	goto	l8957
  4821                           
  4822                           ;OverTemperature_B1.c: 92: Temp1.Count = 0;
  4823  0EC8  01DF               	clrf	(_Temp1^(0+128)+3)
  4824                           
  4825                           ;OverTemperature_B1.c: 93: setOverTemp_Exceptions(1);
  4826  0EC9  3001               	movlw	1
  4827  0ECA  3196  2631  318E   	fcall	_setOverTemp_Exceptions
  4828                           
  4829                           ;OverTemperature_B1.c: 94: }
  4830                           ;OverTemperature_B1.c: 95: } else {
  4831  0ECD  2ED0               	goto	l8957
  4832  0ECE                     l8955:	
  4833                           
  4834                           ;OverTemperature_B1.c: 96: Temp1.Count = 0;
  4835  0ECE  0021               	movlb	1	; select bank1
  4836  0ECF  01DF               	clrf	(_Temp1^(0+128)+3)
  4837  0ED0                     l8957:	
  4838                           
  4839                           ;OverTemperature_B1.c: 97: }
  4840                           ;OverTemperature_B1.c: 98: }
  4841                           ;OverTemperature_B1.c: 99: if (Temp1.ERROR == 0) {
  4842  0ED0  0021               	movlb	1	; select bank1
  4843  0ED1  1CDC               	btfss	_Temp1^(0+128),1
  4844                           
  4845                           ;OverTemperature_B1.c: 100: Temp1.Safe = 1;
  4846  0ED2  165C               	bsf	_Temp1^(0+128),4
  4847                           
  4848                           ;OverTemperature_B1.c: 101: }
  4849                           ;OverTemperature_B1.c: 102: product->Data[24]=Temp1.AD >> 8;
  4850  0ED3  0863               	movf	((_Temp1+1)^(0+128)+6),w
  4851  0ED4  0020               	movlb	0	; select bank0
  4852  0ED5  00B1               	movwf	??_setTemp_Main
  4853  0ED6  086D               	movf	_product,w
  4854  0ED7  3E18               	addlw	24
  4855  0ED8  0086               	movwf	6
  4856  0ED9  3001               	movlw	1	; select bank2/3
  4857  0EDA  0087               	movwf	7
  4858  0EDB  0831               	movf	??_setTemp_Main,w
  4859  0EDC  0081               	movwf	1
  4860                           
  4861                           ;OverTemperature_B1.c: 103: product->Data[25]=Temp1.AD;
  4862  0EDD  0021               	movlb	1	; select bank1
  4863  0EDE  0862               	movf	(_Temp1^(0+128)+6),w
  4864  0EDF  0020               	movlb	0	; select bank0
  4865  0EE0  00B1               	movwf	??_setTemp_Main
  4866  0EE1  086D               	movf	_product,w
  4867  0EE2  3E19               	addlw	25
  4868  0EE3  0086               	movwf	6
  4869  0EE4  3001               	movlw	1	; select bank2/3
  4870  0EE5  0087               	movwf	7
  4871  0EE6  0831               	movf	??_setTemp_Main,w
  4872  0EE7  0081               	movwf	1
  4873                           
  4874                           ;OverTemperature_B1.c: 106: Temp1.ADH[0] = 0;
  4875  0EE8  0021               	movlb	1	; select bank1
  4876  0EE9  01E4               	clrf	(_Temp1^(0+128)+8)
  4877  0EEA  01E5               	clrf	((_Temp1+1)^(0+128)+8)
  4878                           
  4879                           ;OverTemperature_B1.c: 107: Temp1.ADH[1] = 0;
  4880  0EEB  01E6               	clrf	(_Temp1^(0+128)+10)
  4881  0EEC  01E7               	clrf	((_Temp1+1)^(0+128)+10)
  4882  0EED  0008               	return
  4883  0EEE                     __end_of_setTemp_Main:	
  4884                           
  4885                           	psect	text11
  4886  1631                     __ptext11:	
  4887 ;; *************** function _setOverTemp_Exceptions *****************
  4888 ;; Defined at:
  4889 ;;		line 114 in file "../src/OverTemperature_B1.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;  command         1    wreg     unsigned char 
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  command         1   16[BANK0 ] unsigned char 
  4894 ;;  i               1   15[BANK0 ] unsigned char 
  4895 ;; Return value:  Size  Location     Type
  4896 ;;		None               void
  4897 ;; Registers used:
  4898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4905 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4906 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;Total ram usage:        3 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:    9
  4911 ;; This function calls:
  4912 ;;		_DimmerLights_Exceptions
  4913 ;;		_setBuz
  4914 ;;		_setLED
  4915 ;;		_setRF_Enable
  4916 ;;		_setSw_Enable
  4917 ;; This function is called by:
  4918 ;;		_setTemp_Main
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           
  4923                           ;psect for function _setOverTemp_Exceptions
  4924  1631                     _setOverTemp_Exceptions:	
  4925                           
  4926                           ;incstack = 0
  4927                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  4928                           ;setOverTemp_Exceptions@command stored from wreg
  4929  1631  0020               	movlb	0	; select bank0
  4930  1632  00B0               	movwf	setOverTemp_Exceptions@command
  4931                           
  4932                           ;OverTemperature_B1.c: 115: char i = command == 1 ? 0 : 1;
  4933  1633  0830               	movf	setOverTemp_Exceptions@command,w
  4934  1634  3A01               	xorlw	1
  4935  1635  3000               	movlw	0
  4936  1636  1D03               	skipz
  4937  1637  3001               	movlw	1
  4938  1638  00AE               	movwf	??_setOverTemp_Exceptions
  4939  1639  082E               	movf	??_setOverTemp_Exceptions,w
  4940  163A  00AF               	movwf	setOverTemp_Exceptions@i
  4941                           
  4942                           ;OverTemperature_B1.c: 116: Temp1.ERROR = command;
  4943  163B  0830               	movf	setOverTemp_Exceptions@command,w
  4944  163C  0021               	movlb	1	; select bank1
  4945  163D  10DC               	bcf	_Temp1^(0+128),1
  4946  163E  1D03               	skipz
  4947  163F  14DC               	bsf	_Temp1^(0+128),1
  4948                           
  4949                           ;OverTemperature_B1.c: 117: Temp1.Safe = i;
  4950  1640  0020               	movlb	0	; select bank0
  4951  1641  082F               	movf	setOverTemp_Exceptions@i,w
  4952  1642  0021               	movlb	1	; select bank1
  4953  1643  125C               	bcf	_Temp1^(0+128),4
  4954  1644  1D03               	skipz
  4955  1645  165C               	bsf	_Temp1^(0+128),4
  4956                           
  4957                           ;OverTemperature_B1.c: 118: if (command == 1) {
  4958  1646  0020               	movlb	0	; select bank0
  4959  1647  0830               	movf	setOverTemp_Exceptions@command,w
  4960  1648  3A01               	xorlw	1
  4961  1649  1D03               	skipz
  4962  164A  2E57               	goto	l8511
  4963                           
  4964                           ;OverTemperature_B1.c: 119: DimmerLights_Exceptions(1);
  4965  164B  3001               	movlw	1
  4966  164C  3194  24E3  3196   	fcall	_DimmerLights_Exceptions
  4967                           
  4968                           ;OverTemperature_B1.c: 121: setLED(2, 1);
  4969  164F  0020               	movlb	0	; select bank0
  4970  1650  01A2               	clrf	setLED@command
  4971  1651  0AA2               	incf	setLED@command,f
  4972  1652  3002               	movlw	2
  4973  1653  3189  2169  3196   	fcall	_setLED
  4974                           
  4975                           ;OverTemperature_B1.c: 123: } else if (command == 0) {
  4976  1656  2E63               	goto	l8515
  4977  1657                     l8511:	
  4978  1657  0020               	movlb	0	; select bank0
  4979  1658  08B0               	movf	setOverTemp_Exceptions@command,f
  4980  1659  1D03               	skipz
  4981  165A  2E63               	goto	l8515
  4982                           
  4983                           ;OverTemperature_B1.c: 124: setBuz(2, 100);
  4984  165B  3064               	movlw	100
  4985  165C  00A9               	movwf	setBuz@time
  4986  165D  3000               	movlw	0
  4987  165E  00AA               	movwf	setBuz@time+1
  4988  165F  3002               	movlw	2
  4989  1660  3188  205A  3196   	fcall	_setBuz
  4990  1663                     l8515:	
  4991                           
  4992                           ;OverTemperature_B1.c: 125: }
  4993                           ;OverTemperature_B1.c: 128: setLED(99, command + 10);
  4994  1663  0020               	movlb	0	; select bank0
  4995  1664  0830               	movf	setOverTemp_Exceptions@command,w
  4996  1665  3E0A               	addlw	10
  4997  1666  00AE               	movwf	??_setOverTemp_Exceptions
  4998  1667  082E               	movf	??_setOverTemp_Exceptions,w
  4999  1668  00A2               	movwf	setLED@command
  5000  1669  3063               	movlw	99
  5001  166A  3189  2169  3196   	fcall	_setLED
  5002                           
  5003                           ;OverTemperature_B1.c: 130: setSw_Enable(i);
  5004  166D  0020               	movlb	0	; select bank0
  5005  166E  082F               	movf	setOverTemp_Exceptions@i,w
  5006  166F  319E  26EF  3196   	fcall	_setSw_Enable
  5007                           
  5008                           ;OverTemperature_B1.c: 132: setRF_Enable(i);
  5009  1672  0020               	movlb	0	; select bank0
  5010  1673  082F               	movf	setOverTemp_Exceptions@i,w
  5011  1674  319E  26D2         	fcall	_setRF_Enable
  5012  1676  0008               	return
  5013  1677                     __end_of_setOverTemp_Exceptions:	
  5014                           
  5015                           	psect	text12
  5016  1DDE                     __ptext12:	
  5017 ;; *************** function _getPF_Safe *****************
  5018 ;; Defined at:
  5019 ;;		line 34 in file "../src/PowerFault_B1.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;		None
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;  i               1    0[BANK0 ] unsigned char 
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      unsigned char 
  5026 ;; Registers used:
  5027 ;;		wreg, status,2
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5036 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5037 ;;Total ram usage:        1 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    5
  5040 ;; This function calls:
  5041 ;;		Nothing
  5042 ;; This function is called by:
  5043 ;;		_setTemp_Main
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           
  5048                           ;psect for function _getPF_Safe
  5049  1DDE                     _getPF_Safe:	
  5050                           
  5051                           ;PowerFault_B1.c: 35: char i = PF1.Safe;
  5052                           
  5053                           ;incstack = 0
  5054                           ; Regs used in _getPF_Safe: [wreg+status,2]
  5055  1DDE  3000               	movlw	0
  5056  1DDF  0021               	movlb	1	; select bank1
  5057  1DE0  1948               	btfsc	_PF1^(0+128),2
  5058  1DE1  3001               	movlw	1
  5059  1DE2  0020               	movlb	0	; select bank0
  5060  1DE3  00A0               	movwf	getPF_Safe@i
  5061                           
  5062                           ;PowerFault_B1.c: 36: return i;
  5063  1DE4  0820               	movf	getPF_Safe@i,w
  5064  1DE5  0008               	return
  5065  1DE6                     __end_of_getPF_Safe:	
  5066                           
  5067                           	psect	text13
  5068  1D7C                     __ptext13:	
  5069 ;; *************** function _Temp_Initialization *****************
  5070 ;; Defined at:
  5071 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;		None
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;		None
  5076 ;; Return value:  Size  Location     Type
  5077 ;;		None               void
  5078 ;; Registers used:
  5079 ;;		status,2, status,0, pclath, cstack
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5089 ;;Total ram usage:        0 bytes
  5090 ;; Hardware stack levels used:    1
  5091 ;; Hardware stack levels required when called:    6
  5092 ;; This function calls:
  5093 ;;		_setTemp_Initialization
  5094 ;; This function is called by:
  5095 ;;		_main
  5096 ;; This function uses a non-reentrant model
  5097 ;;
  5098                           
  5099                           
  5100                           ;psect for function _Temp_Initialization
  5101  1D7C                     _Temp_Initialization:	
  5102                           
  5103                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5104                           
  5105                           ;incstack = 0
  5106                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5107  1D7C  319D  2579         	fcall	_setTemp_Initialization
  5108  1D7E  0008               	return
  5109  1D7F                     __end_of_Temp_Initialization:	
  5110                           
  5111                           	psect	text14
  5112  1D79                     __ptext14:	
  5113 ;; *************** function _setTemp_Initialization *****************
  5114 ;; Defined at:
  5115 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;		None
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;		None
  5120 ;; Return value:  Size  Location     Type
  5121 ;;		None               void
  5122 ;; Registers used:
  5123 ;;		None
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5133 ;;Total ram usage:        0 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:    5
  5136 ;; This function calls:
  5137 ;;		Nothing
  5138 ;; This function is called by:
  5139 ;;		_Temp_Initialization
  5140 ;; This function uses a non-reentrant model
  5141 ;;
  5142                           
  5143                           
  5144                           ;psect for function _setTemp_Initialization
  5145  1D79                     _setTemp_Initialization:	
  5146                           
  5147                           ;OverTemperature_B1.c: 46: Temp1.Safe = 1;
  5148                           
  5149                           ;incstack = 0
  5150                           ; Regs used in _setTemp_Initialization: []
  5151  1D79  0021               	movlb	1	; select bank1
  5152  1D7A  165C               	bsf	_Temp1^(0+128),4
  5153  1D7B  0008               	return
  5154  1D7C                     __end_of_setTemp_Initialization:	
  5155                           
  5156                           	psect	text15
  5157  1DA2                     __ptext15:	
  5158 ;; *************** function _Switch_Main *****************
  5159 ;; Defined at:
  5160 ;;		line 67 in file "../src/Switch_B1.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;		None
  5165 ;; Return value:  Size  Location     Type
  5166 ;;		None               void
  5167 ;; Registers used:
  5168 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5169 ;; Tracked objects:
  5170 ;;		On entry : 0/0
  5171 ;;		On exit  : 0/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5178 ;;Total ram usage:        0 bytes
  5179 ;; Hardware stack levels used:    1
  5180 ;; Hardware stack levels required when called:   11
  5181 ;; This function calls:
  5182 ;;		_setSw_Main
  5183 ;; This function is called by:
  5184 ;;		_main
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           
  5189                           ;psect for function _Switch_Main
  5190  1DA2                     _Switch_Main:	
  5191                           
  5192                           ;Switch_B1.c: 69: setSw_Main(1);
  5193                           
  5194                           ;incstack = 0
  5195                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5196  1DA2  3001               	movlw	1
  5197  1DA3  3181  21F0         	fcall	_setSw_Main
  5198  1DA5  0008               	return
  5199  1DA6                     __end_of_Switch_Main:	
  5200                           
  5201                           	psect	text16
  5202  01F0                     __ptext16:	
  5203 ;; *************** function _setSw_Main *****************
  5204 ;; Defined at:
  5205 ;;		line 117 in file "../src/Switch_B1.c"
  5206 ;; Parameters:    Size  Location     Type
  5207 ;;  sw              1    wreg     unsigned char 
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;  sw              1   72[BANK0 ] unsigned char 
  5210 ;; Return value:  Size  Location     Type
  5211 ;;		None               void
  5212 ;; Registers used:
  5213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5220 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5222 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5223 ;;Total ram usage:        4 bytes
  5224 ;; Hardware stack levels used:    1
  5225 ;; Hardware stack levels required when called:   10
  5226 ;; This function calls:
  5227 ;;		_SwPointSelect
  5228 ;;		_Sw_DimmerAdjFunc
  5229 ;;		_Sw_DimmerOffFunc
  5230 ;;		_Sw_DimmerOnFunc
  5231 ;;		_setBuz
  5232 ;;		_setRF_Learn
  5233 ;; This function is called by:
  5234 ;;		_Switch_Main
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           
  5239                           ;psect for function _setSw_Main
  5240  01F0                     _setSw_Main:	
  5241                           
  5242                           ;incstack = 0
  5243                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5244                           ;setSw_Main@sw stored from wreg
  5245  01F0  0020               	movlb	0	; select bank0
  5246  01F1  00E8               	movwf	setSw_Main@sw
  5247                           
  5248                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5249  01F2  0868               	movf	setSw_Main@sw,w
  5250  01F3  319E  264A  3181   	fcall	_SwPointSelect
  5251                           
  5252                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5253  01F6  0020               	movlb	0	; select bank0
  5254  01F7  086C               	movf	_Sw,w
  5255  01F8  0086               	movwf	6
  5256  01F9  3001               	movlw	1	; select bank2/3
  5257  01FA  0087               	movwf	7
  5258  01FB  1C01               	btfss	1,0
  5259  01FC  0008               	return
  5260                           
  5261                           ;Switch_B1.c: 139: Sw->Touch = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5262  01FD  01E7               	clrf	_setSw_Main$6351
  5263  01FE  0AE7               	incf	_setSw_Main$6351,f
  5264  01FF  1F0C               	btfss	12,6	;volatile
  5265  0200  1A0C               	btfsc	12,4	;volatile
  5266  0201  2A06               	goto	l9165
  5267  0202  1C0C               	btfss	12,0	;volatile
  5268  0203  188D               	btfsc	13,1	;volatile
  5269  0204  2A06               	goto	l9165
  5270  0205  01E7               	clrf	_setSw_Main$6351
  5271  0206                     l9165:	
  5272  0206  086C               	movf	_Sw,w
  5273  0207  0086               	movwf	6
  5274  0208  3001               	movlw	1	; select bank2/3
  5275  0209  0087               	movwf	7
  5276  020A  0867               	movf	_setSw_Main$6351,w
  5277  020B  1081               	bcf	1,1
  5278  020C  1D03               	skipz
  5279  020D  1481               	bsf	1,1
  5280                           
  5281                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  5282  020E  086C               	movf	_Sw,w
  5283  020F  0086               	movwf	6
  5284  0210  3001               	movlw	1	; select bank2/3
  5285  0211  0087               	movwf	7
  5286  0212  1C81               	btfss	1,1
  5287  0213  2AD8               	goto	l9215
  5288                           
  5289                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  5290  0214  086C               	movf	_Sw,w
  5291  0215  0086               	movwf	6
  5292  0216  3001               	movlw	1	; select bank2/3
  5293  0217  0087               	movwf	7
  5294  0218  1901               	btfsc	1,2
  5295  0219  2A3B               	goto	l9181
  5296                           
  5297                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  5298  021A  3001               	movlw	1
  5299  021B  00E5               	movwf	??_setSw_Main
  5300  021C  086C               	movf	_Sw,w
  5301  021D  3E02               	addlw	2
  5302  021E  0086               	movwf	6
  5303  021F  3001               	movlw	1	; select bank2/3
  5304  0220  0087               	movwf	7
  5305  0221  0865               	movf	??_setSw_Main,w
  5306  0222  0781               	addwf	1,f
  5307                           
  5308                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  5309  0223  086C               	movf	_Sw,w
  5310  0224  3E02               	addlw	2
  5311  0225  0086               	movwf	6
  5312  0226  3001               	movlw	1	; select bank2/3
  5313  0227  0087               	movwf	7
  5314  0228  3005               	movlw	5
  5315  0229  0201               	subwf	1,w
  5316  022A  1C03               	skipc
  5317  022B  0008               	return
  5318                           
  5319                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  5320  022C  086C               	movf	_Sw,w
  5321  022D  3E02               	addlw	2
  5322  022E  0086               	movwf	6
  5323  022F  3001               	movlw	1	; select bank2/3
  5324  0230  0087               	movwf	7
  5325  0231  0181               	clrf	1
  5326                           
  5327                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  5328  0232  086C               	movf	_Sw,w
  5329  0233  0086               	movwf	6
  5330  0234  3001               	movlw	1	; select bank2/3
  5331  0235  0087               	movwf	7
  5332  0236  1501               	bsf	1,2
  5333                           
  5334                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  5335  0237  0868               	movf	setSw_Main@sw,w
  5336  0238  3197  27A9         	fcall	_Sw_DimmerOnFunc
  5337                           
  5338                           ;Switch_B1.c: 173: }
  5339                           ;Switch_B1.c: 174: } else {
  5340  023A  0008               	return
  5341  023B                     l9181:	
  5342                           
  5343                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  5344  023B  0020               	movlb	0	; select bank0
  5345  023C  086C               	movf	_Sw,w
  5346  023D  0086               	movwf	6
  5347  023E  3001               	movlw	1	; select bank2/3
  5348  023F  0087               	movwf	7
  5349  0240  1981               	btfsc	1,3
  5350  0241  2A68               	goto	l9191
  5351                           
  5352                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  5353  0242  086C               	movf	_Sw,w
  5354  0243  3E03               	addlw	3
  5355  0244  0086               	movwf	6
  5356  0245  3001               	movlw	1	; select bank2/3
  5357  0246  0087               	movwf	7
  5358  0247  3001               	movlw	1
  5359  0248  0781               	addwf	1,f
  5360  0249  3141               	addfsr 1,1
  5361  024A  1803               	skipnc
  5362  024B  0A81               	incf	1,f
  5363                           
  5364                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  5365  024C  086C               	movf	_Sw,w
  5366  024D  3E03               	addlw	3
  5367  024E  0086               	movwf	6
  5368  024F  3001               	movlw	1	; select bank2/3
  5369  0250  0087               	movwf	7
  5370  0251  3F40               	moviw [0]fsr1
  5371  0252  00E5               	movwf	??_setSw_Main
  5372  0253  3F41               	moviw [1]fsr1
  5373  0254  00E6               	movwf	??_setSw_Main+1
  5374  0255  3000               	movlw	0
  5375  0256  0266               	subwf	??_setSw_Main+1,w
  5376  0257  3096               	movlw	150
  5377  0258  1903               	skipnz
  5378  0259  0265               	subwf	??_setSw_Main,w
  5379  025A  1C03               	skipc
  5380  025B  0008               	return
  5381                           
  5382                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  5383  025C  086C               	movf	_Sw,w
  5384  025D  3E03               	addlw	3
  5385  025E  0086               	movwf	6
  5386  025F  3001               	movlw	1	; select bank2/3
  5387  0260  0087               	movwf	7
  5388  0261  3000               	movlw	0
  5389  0262  3FC0               	movwi [0]fsr1
  5390  0263  3FC1               	movwi [1]fsr1
  5391                           
  5392                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  5393  0264  0868               	movf	setSw_Main@sw,w
  5394  0265  3193  2365         	fcall	_Sw_DimmerAdjFunc
  5395                           
  5396                           ;Switch_B1.c: 184: }
  5397                           ;Switch_B1.c: 185: } else {
  5398  0267  0008               	return
  5399  0268                     l9191:	
  5400                           
  5401                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  5402  0268  0020               	movlb	0	; select bank0
  5403  0269  086C               	movf	_Sw,w
  5404  026A  0086               	movwf	6
  5405  026B  3001               	movlw	1	; select bank2/3
  5406  026C  0087               	movwf	7
  5407  026D  1A01               	btfsc	1,4
  5408  026E  2AA6               	goto	l9205
  5409                           
  5410                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  5411  026F  086C               	movf	_Sw,w
  5412  0270  3E05               	addlw	5
  5413  0271  0086               	movwf	6
  5414  0272  3001               	movlw	1	; select bank2/3
  5415  0273  0087               	movwf	7
  5416  0274  3001               	movlw	1
  5417  0275  0781               	addwf	1,f
  5418  0276  3141               	addfsr 1,1
  5419  0277  1803               	skipnc
  5420  0278  0A81               	incf	1,f
  5421                           
  5422                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  5423  0279  086C               	movf	_Sw,w
  5424  027A  3E05               	addlw	5
  5425  027B  0086               	movwf	6
  5426  027C  3001               	movlw	1	; select bank2/3
  5427  027D  0087               	movwf	7
  5428  027E  3F40               	moviw [0]fsr1
  5429  027F  00E5               	movwf	??_setSw_Main
  5430  0280  3F41               	moviw [1]fsr1
  5431  0281  00E6               	movwf	??_setSw_Main+1
  5432  0282  3000               	movlw	0
  5433  0283  0266               	subwf	??_setSw_Main+1,w
  5434  0284  3096               	movlw	150
  5435  0285  1903               	skipnz
  5436  0286  0265               	subwf	??_setSw_Main,w
  5437  0287  1C03               	skipc
  5438  0288  0008               	return
  5439                           
  5440                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  5441  0289  086C               	movf	_Sw,w
  5442  028A  3E05               	addlw	5
  5443  028B  0086               	movwf	6
  5444  028C  3001               	movlw	1	; select bank2/3
  5445  028D  0087               	movwf	7
  5446  028E  3000               	movlw	0
  5447  028F  3FC0               	movwi [0]fsr1
  5448  0290  3FC1               	movwi [1]fsr1
  5449                           
  5450                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  5451  0291  086C               	movf	_Sw,w
  5452  0292  0086               	movwf	6
  5453  0293  3001               	movlw	1	; select bank2/3
  5454  0294  0087               	movwf	7
  5455  0295  1601               	bsf	1,4
  5456                           
  5457                           ;Switch_B1.c: 193: setRF_Learn(1);
  5458  0296  3001               	movlw	1
  5459  0297  319D  25D6  3181   	fcall	_setRF_Learn
  5460                           
  5461                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  5462  029A  0021               	movlb	1	; select bank1
  5463  029B  1FA0               	btfss	_myMain^(0+128),7
  5464  029C  0008               	return
  5465                           
  5466                           ;Switch_B1.c: 196: setBuz(2, 100);
  5467  029D  3064               	movlw	100
  5468  029E  0020               	movlb	0	; select bank0
  5469  029F  00A9               	movwf	setBuz@time
  5470  02A0  3000               	movlw	0
  5471  02A1  00AA               	movwf	setBuz@time+1
  5472  02A2  3002               	movlw	2
  5473  02A3  3188  205A         	fcall	_setBuz
  5474                           
  5475                           ;Switch_B1.c: 197: }
  5476                           ;Switch_B1.c: 199: }
  5477                           ;Switch_B1.c: 200: } else {
  5478  02A5  0008               	return
  5479  02A6                     l9205:	
  5480                           
  5481                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  5482  02A6  0020               	movlb	0	; select bank0
  5483  02A7  086C               	movf	_Sw,w
  5484  02A8  0086               	movwf	6
  5485  02A9  3001               	movlw	1	; select bank2/3
  5486  02AA  0087               	movwf	7
  5487  02AB  1A81               	btfsc	1,5
  5488  02AC  0008               	return
  5489                           
  5490                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  5491  02AD  086C               	movf	_Sw,w
  5492  02AE  3E07               	addlw	7
  5493  02AF  0086               	movwf	6
  5494  02B0  3001               	movlw	1	; select bank2/3
  5495  02B1  0087               	movwf	7
  5496  02B2  3001               	movlw	1
  5497  02B3  0781               	addwf	1,f
  5498  02B4  3141               	addfsr 1,1
  5499  02B5  1803               	skipnc
  5500  02B6  0A81               	incf	1,f
  5501                           
  5502                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  5503  02B7  086C               	movf	_Sw,w
  5504  02B8  3E07               	addlw	7
  5505  02B9  0086               	movwf	6
  5506  02BA  3001               	movlw	1	; select bank2/3
  5507  02BB  0087               	movwf	7
  5508  02BC  3F40               	moviw [0]fsr1
  5509  02BD  00E5               	movwf	??_setSw_Main
  5510  02BE  3F41               	moviw [1]fsr1
  5511  02BF  00E6               	movwf	??_setSw_Main+1
  5512  02C0  3001               	movlw	1
  5513  02C1  0266               	subwf	??_setSw_Main+1,w
  5514  02C2  302C               	movlw	44
  5515  02C3  1903               	skipnz
  5516  02C4  0265               	subwf	??_setSw_Main,w
  5517  02C5  1C03               	skipc
  5518  02C6  0008               	return
  5519                           
  5520                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5521  02C7  086C               	movf	_Sw,w
  5522  02C8  3E07               	addlw	7
  5523  02C9  0086               	movwf	6
  5524  02CA  3001               	movlw	1	; select bank2/3
  5525  02CB  0087               	movwf	7
  5526  02CC  3000               	movlw	0
  5527  02CD  3FC0               	movwi [0]fsr1
  5528  02CE  3FC1               	movwi [1]fsr1
  5529                           
  5530                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  5531  02CF  086C               	movf	_Sw,w
  5532  02D0  0086               	movwf	6
  5533  02D1  3001               	movlw	1	; select bank2/3
  5534  02D2  0087               	movwf	7
  5535  02D3  1681               	bsf	1,5
  5536                           
  5537                           ;Switch_B1.c: 208: setRF_Learn(0);
  5538  02D4  3000               	movlw	0
  5539  02D5  319D  25D6         	fcall	_setRF_Learn
  5540                           
  5541                           ;Switch_B1.c: 211: }
  5542                           ;Switch_B1.c: 212: }
  5543                           ;Switch_B1.c: 213: }
  5544                           ;Switch_B1.c: 214: }
  5545                           ;Switch_B1.c: 215: }
  5546                           ;Switch_B1.c: 216: } else {
  5547  02D7  0008               	return
  5548  02D8                     l9215:	
  5549                           
  5550                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  5551  02D8  0020               	movlb	0	; select bank0
  5552  02D9  086C               	movf	_Sw,w
  5553  02DA  0086               	movwf	6
  5554  02DB  3001               	movlw	1	; select bank2/3
  5555  02DC  0087               	movwf	7
  5556  02DD  1D01               	btfss	1,2
  5557  02DE  0008               	return
  5558                           
  5559                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  5560  02DF  3001               	movlw	1
  5561  02E0  00E5               	movwf	??_setSw_Main
  5562  02E1  086C               	movf	_Sw,w
  5563  02E2  3E02               	addlw	2
  5564  02E3  0086               	movwf	6
  5565  02E4  3001               	movlw	1	; select bank2/3
  5566  02E5  0087               	movwf	7
  5567  02E6  0865               	movf	??_setSw_Main,w
  5568  02E7  0781               	addwf	1,f
  5569                           
  5570                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  5571  02E8  086C               	movf	_Sw,w
  5572  02E9  3E02               	addlw	2
  5573  02EA  0086               	movwf	6
  5574  02EB  3001               	movlw	1	; select bank2/3
  5575  02EC  0087               	movwf	7
  5576  02ED  3005               	movlw	5
  5577  02EE  0201               	subwf	1,w
  5578  02EF  1C03               	skipc
  5579  02F0  0008               	return
  5580                           
  5581                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  5582  02F1  086C               	movf	_Sw,w
  5583  02F2  3E02               	addlw	2
  5584  02F3  0086               	movwf	6
  5585  02F4  3001               	movlw	1	; select bank2/3
  5586  02F5  0087               	movwf	7
  5587  02F6  0181               	clrf	1
  5588                           
  5589                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  5590  02F7  086C               	movf	_Sw,w
  5591  02F8  0086               	movwf	6
  5592  02F9  3001               	movlw	1	; select bank2/3
  5593  02FA  0087               	movwf	7
  5594  02FB  1101               	bcf	1,2
  5595                           
  5596                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  5597  02FC  086C               	movf	_Sw,w
  5598  02FD  3E03               	addlw	3
  5599  02FE  0086               	movwf	6
  5600  02FF  3001               	movlw	1	; select bank2/3
  5601  0300  0087               	movwf	7
  5602  0301  3000               	movlw	0
  5603  0302  3FC0               	movwi [0]fsr1
  5604  0303  3FC1               	movwi [1]fsr1
  5605                           
  5606                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  5607  0304  086C               	movf	_Sw,w
  5608  0305  0086               	movwf	6
  5609  0306  3001               	movlw	1	; select bank2/3
  5610  0307  0087               	movwf	7
  5611  0308  1181               	bcf	1,3
  5612                           
  5613                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  5614  0309  086C               	movf	_Sw,w
  5615  030A  3E05               	addlw	5
  5616  030B  0086               	movwf	6
  5617  030C  3001               	movlw	1	; select bank2/3
  5618  030D  0087               	movwf	7
  5619  030E  3000               	movlw	0
  5620  030F  3FC0               	movwi [0]fsr1
  5621  0310  3FC1               	movwi [1]fsr1
  5622                           
  5623                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  5624  0311  086C               	movf	_Sw,w
  5625  0312  0086               	movwf	6
  5626  0313  3001               	movlw	1	; select bank2/3
  5627  0314  0087               	movwf	7
  5628  0315  1201               	bcf	1,4
  5629                           
  5630                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  5631  0316  086C               	movf	_Sw,w
  5632  0317  3E07               	addlw	7
  5633  0318  0086               	movwf	6
  5634  0319  3001               	movlw	1	; select bank2/3
  5635  031A  0087               	movwf	7
  5636  031B  3000               	movlw	0
  5637  031C  3FC0               	movwi [0]fsr1
  5638  031D  3FC1               	movwi [1]fsr1
  5639                           
  5640                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  5641  031E  086C               	movf	_Sw,w
  5642  031F  0086               	movwf	6
  5643  0320  3001               	movlw	1	; select bank2/3
  5644  0321  0087               	movwf	7
  5645  0322  1281               	bcf	1,5
  5646                           
  5647                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  5648  0323  0868               	movf	setSw_Main@sw,w
  5649  0324  318C  2493  3181   	fcall	_Sw_DimmerOffFunc
  5650                           
  5651                           ;Switch_B1.c: 232: setRF_Learn(0);
  5652  0327  3000               	movlw	0
  5653  0328  319D  25D6         	fcall	_setRF_Learn
  5654  032A  0008               	return
  5655  032B                     __end_of_setSw_Main:	
  5656                           
  5657                           	psect	text17
  5658  1DD6                     __ptext17:	
  5659 ;; *************** function _setRF_Learn *****************
  5660 ;; Defined at:
  5661 ;;		line 23 in file "../src/RF_Control_B1.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;  command         1    wreg     unsigned char 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  command         1    0[BANK0 ] unsigned char 
  5666 ;; Return value:  Size  Location     Type
  5667 ;;		None               void
  5668 ;; Registers used:
  5669 ;;		wreg
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5676 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5678 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5679 ;;Total ram usage:        1 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    5
  5682 ;; This function calls:
  5683 ;;		Nothing
  5684 ;; This function is called by:
  5685 ;;		_setSw_Main
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           
  5690                           ;psect for function _setRF_Learn
  5691  1DD6                     _setRF_Learn:	
  5692                           
  5693                           ;incstack = 0
  5694                           ; Regs used in _setRF_Learn: [wreg]
  5695                           ;setRF_Learn@command stored from wreg
  5696  1DD6  0020               	movlb	0	; select bank0
  5697  1DD7  00A0               	movwf	setRF_Learn@command
  5698                           
  5699                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  5700  1DD8  0820               	movf	setRF_Learn@command,w
  5701  1DD9  0021               	movlb	1	; select bank1
  5702  1DDA  133E               	bcf	_RF1^(0+128),6
  5703  1DDB  1D03               	skipz
  5704  1DDC  173E               	bsf	_RF1^(0+128),6
  5705  1DDD  0008               	return
  5706  1DDE                     __end_of_setRF_Learn:	
  5707                           
  5708                           	psect	text18
  5709  17A9                     __ptext18:	
  5710 ;; *************** function _Sw_DimmerOnFunc *****************
  5711 ;; Defined at:
  5712 ;;		line 241 in file "../src/Switch_B1.c"
  5713 ;; Parameters:    Size  Location     Type
  5714 ;;  sw              1    wreg     unsigned char 
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;  sw              1   67[BANK0 ] unsigned char 
  5717 ;;  Idle            1   66[BANK0 ] unsigned char 
  5718 ;; Return value:  Size  Location     Type
  5719 ;;		None               void
  5720 ;; Registers used:
  5721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5722 ;; Tracked objects:
  5723 ;;		On entry : 0/0
  5724 ;;		On exit  : 0/0
  5725 ;;		Unchanged: 0/0
  5726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5728 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5730 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5731 ;;Total ram usage:        2 bytes
  5732 ;; Hardware stack levels used:    1
  5733 ;; Hardware stack levels required when called:    9
  5734 ;; This function calls:
  5735 ;;		_setBuz
  5736 ;;		_setDimmerLights_Switch
  5737 ;;		_setDimmerLights_Trigger
  5738 ;;		_setRFSW_Status
  5739 ;;		_setRF_DimmerLights
  5740 ;;		_setTxData
  5741 ;; This function is called by:
  5742 ;;		_setSw_Main
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           
  5747                           ;psect for function _Sw_DimmerOnFunc
  5748  17A9                     _Sw_DimmerOnFunc:	
  5749                           
  5750                           ;incstack = 0
  5751                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5752                           ;Sw_DimmerOnFunc@sw stored from wreg
  5753  17A9  0020               	movlb	0	; select bank0
  5754  17AA  00E3               	movwf	Sw_DimmerOnFunc@sw
  5755                           
  5756                           ;Switch_B1.c: 242: char Idle = 1;
  5757  17AB  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5758  17AC  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5759                           
  5760                           ;Switch_B1.c: 263: if (Idle == 1) {
  5761  17AD  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5762  17AE  3A01               	xorlw	1
  5763  17AF  1D03               	skipz
  5764  17B0  0008               	return
  5765                           
  5766                           ;Switch_B1.c: 264: Sw->Flag = 1;
  5767  17B1  086C               	movf	_Sw,w
  5768  17B2  0086               	movwf	6
  5769  17B3  3001               	movlw	1	; select bank2/3
  5770  17B4  0087               	movwf	7
  5771  17B5  1781               	bsf	1,7
  5772                           
  5773                           ;Switch_B1.c: 265: setBuz(1, 100);
  5774  17B6  3064               	movlw	100
  5775  17B7  00A9               	movwf	setBuz@time
  5776  17B8  3000               	movlw	0
  5777  17B9  00AA               	movwf	setBuz@time+1
  5778  17BA  3001               	movlw	1
  5779  17BB  3188  205A  3197   	fcall	_setBuz
  5780                           
  5781                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  5782  17BE  0020               	movlb	0	; select bank0
  5783  17BF  086C               	movf	_Sw,w
  5784  17C0  0086               	movwf	6
  5785  17C1  3001               	movlw	1	; select bank2/3
  5786  17C2  0087               	movwf	7
  5787  17C3  1B01               	btfsc	1,6
  5788  17C4  2FEE               	goto	l8593
  5789                           
  5790                           ;Switch_B1.c: 267: Sw->Status = 1;
  5791  17C5  086C               	movf	_Sw,w
  5792  17C6  0086               	movwf	6
  5793  17C7  3001               	movlw	1	; select bank2/3
  5794  17C8  0087               	movwf	7
  5795  17C9  1701               	bsf	1,6
  5796                           
  5797                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  5798  17CA  01A2               	clrf	setRFSW_Status@command
  5799  17CB  0AA2               	incf	setRFSW_Status@command,f
  5800  17CC  0863               	movf	Sw_DimmerOnFunc@sw,w
  5801  17CD  319E  26C4  3197   	fcall	_setRFSW_Status
  5802                           
  5803                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  5804  17D0  0020               	movlb	0	; select bank0
  5805  17D1  01A2               	clrf	setDimmerLights_Trigger@command
  5806  17D2  0AA2               	incf	setDimmerLights_Trigger@command,f
  5807  17D3  0863               	movf	Sw_DimmerOnFunc@sw,w
  5808  17D4  319F  272C  3197   	fcall	_setDimmerLights_Trigger
  5809                           
  5810                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  5811  17D7  0020               	movlb	0	; select bank0
  5812  17D8  01A2               	clrf	setDimmerLights_Switch@command
  5813  17D9  0AA2               	incf	setDimmerLights_Switch@command,f
  5814  17DA  0863               	movf	Sw_DimmerOnFunc@sw,w
  5815  17DB  319F  271C  3197   	fcall	_setDimmerLights_Switch
  5816                           
  5817                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  5818  17DE  0020               	movlb	0	; select bank0
  5819  17DF  086C               	movf	_Sw,w
  5820  17E0  0086               	movwf	6
  5821  17E1  3001               	movlw	1	; select bank2/3
  5822  17E2  0087               	movwf	7
  5823  17E3  3000               	movlw	0
  5824  17E4  1B01               	btfsc	1,6
  5825  17E5  3001               	movlw	1
  5826  17E6  00DD               	movwf	setRF_DimmerLights@on
  5827  17E7  0863               	movf	Sw_DimmerOnFunc@sw,w
  5828  17E8  318C  2427  3197   	fcall	_setRF_DimmerLights
  5829                           
  5830                           ;Switch_B1.c: 274: setTxData();
  5831  17EB  3185  25B5         	fcall	_setTxData
  5832                           
  5833                           ;Switch_B1.c: 276: } else {
  5834  17ED  0008               	return
  5835  17EE                     l8593:	
  5836                           
  5837                           ;Switch_B1.c: 277: Sw->Status = 0;
  5838  17EE  0020               	movlb	0	; select bank0
  5839  17EF  086C               	movf	_Sw,w
  5840  17F0  0086               	movwf	6
  5841  17F1  3001               	movlw	1	; select bank2/3
  5842  17F2  0087               	movwf	7
  5843  17F3  1301               	bcf	1,6
  5844                           
  5845                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  5846  17F4  086C               	movf	_Sw,w
  5847  17F5  0086               	movwf	6
  5848  17F6  3001               	movlw	1	; select bank2/3
  5849  17F7  0087               	movwf	7
  5850  17F8  3000               	movlw	0
  5851  17F9  1B01               	btfsc	1,6
  5852  17FA  3001               	movlw	1
  5853  17FB  00A2               	movwf	setRFSW_Status@command
  5854  17FC  0863               	movf	Sw_DimmerOnFunc@sw,w
  5855  17FD  319E  26C4         	fcall	_setRFSW_Status
  5856  17FF  0008               	return
  5857  1800                     __end_of_Sw_DimmerOnFunc:	
  5858                           
  5859                           	psect	text19
  5860  0C93                     __ptext19:	
  5861 ;; *************** function _Sw_DimmerOffFunc *****************
  5862 ;; Defined at:
  5863 ;;		line 284 in file "../src/Switch_B1.c"
  5864 ;; Parameters:    Size  Location     Type
  5865 ;;  sw              1    wreg     unsigned char 
  5866 ;; Auto vars:     Size  Location     Type
  5867 ;;  sw              1   68[BANK0 ] unsigned char 
  5868 ;; Return value:  Size  Location     Type
  5869 ;;		None               void
  5870 ;; Registers used:
  5871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5878 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5879 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5880 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5881 ;;Total ram usage:        3 bytes
  5882 ;; Hardware stack levels used:    1
  5883 ;; Hardware stack levels required when called:    9
  5884 ;; This function calls:
  5885 ;;		_setDelayOff_GO
  5886 ;;		_setDimmerLights_AdjGo
  5887 ;;		_setDimmerLights_Switch
  5888 ;;		_setDimmerLights_Trigger
  5889 ;;		_setDimmerLights_TriggerAdj
  5890 ;;		_setRF_DimmerLights
  5891 ;;		_setTxData
  5892 ;; This function is called by:
  5893 ;;		_setSw_Main
  5894 ;; This function uses a non-reentrant model
  5895 ;;
  5896                           
  5897                           
  5898                           ;psect for function _Sw_DimmerOffFunc
  5899  0C93                     _Sw_DimmerOffFunc:	
  5900                           
  5901                           ;incstack = 0
  5902                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5903                           ;Sw_DimmerOffFunc@sw stored from wreg
  5904  0C93  0020               	movlb	0	; select bank0
  5905  0C94  00E4               	movwf	Sw_DimmerOffFunc@sw
  5906                           
  5907                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  5908  0C95  086C               	movf	_Sw,w
  5909  0C96  0086               	movwf	6
  5910  0C97  3001               	movlw	1	; select bank2/3
  5911  0C98  0087               	movwf	7
  5912  0C99  1F81               	btfss	1,7
  5913  0C9A  0008               	return
  5914                           
  5915                           ;Switch_B1.c: 286: Sw->Flag = 0;
  5916  0C9B  086C               	movf	_Sw,w
  5917  0C9C  0086               	movwf	6
  5918  0C9D  3001               	movlw	1	; select bank2/3
  5919  0C9E  0087               	movwf	7
  5920  0C9F  1381               	bcf	1,7
  5921                           
  5922                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  5923  0CA0  086C               	movf	_Sw,w
  5924  0CA1  0086               	movwf	6
  5925  0CA2  3001               	movlw	1	; select bank2/3
  5926  0CA3  0087               	movwf	7
  5927  0CA4  1F01               	btfss	1,6
  5928  0CA5  2CDE               	goto	l8629
  5929                           
  5930                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  5931  0CA6  0A6C               	incf	_Sw,w
  5932  0CA7  0086               	movwf	6
  5933  0CA8  3001               	movlw	1	; select bank2/3
  5934  0CA9  0087               	movwf	7
  5935  0CAA  1C01               	btfss	1,0
  5936  0CAB  0008               	return
  5937                           
  5938                           ;Switch_B1.c: 289: Sw->Adj = 0;
  5939  0CAC  0A6C               	incf	_Sw,w
  5940  0CAD  0086               	movwf	6
  5941  0CAE  3001               	movlw	1	; select bank2/3
  5942  0CAF  0087               	movwf	7
  5943  0CB0  1001               	bcf	1,0
  5944                           
  5945                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  5946  0CB1  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5947  0CB2  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5948  0CB3  0864               	movf	Sw_DimmerOffFunc@sw,w
  5949  0CB4  319F  275C  318C   	fcall	_setDimmerLights_TriggerAdj
  5950                           
  5951                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  5952  0CB7  0020               	movlb	0	; select bank0
  5953  0CB8  01A2               	clrf	setDimmerLights_AdjGo@command
  5954  0CB9  0864               	movf	Sw_DimmerOffFunc@sw,w
  5955  0CBA  319F  274C  318C   	fcall	_setDimmerLights_AdjGo
  5956                           
  5957                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  5958  0CBD  0020               	movlb	0	; select bank0
  5959  0CBE  0864               	movf	Sw_DimmerOffFunc@sw,w
  5960  0CBF  3E1A               	addlw	26
  5961  0CC0  076D               	addwf	_product,w
  5962  0CC1  00E2               	movwf	??_Sw_DimmerOffFunc
  5963  0CC2  0862               	movf	??_Sw_DimmerOffFunc,w
  5964  0CC3  0086               	movwf	6
  5965  0CC4  3001               	movlw	1	; select bank2/3
  5966  0CC5  0087               	movwf	7
  5967  0CC6  0801               	movf	1,w
  5968  0CC7  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5969  0CC8  086D               	movf	_product,w
  5970  0CC9  3E11               	addlw	17
  5971  0CCA  0086               	movwf	6
  5972  0CCB  3001               	movlw	1	; select bank2/3
  5973  0CCC  0087               	movwf	7
  5974  0CCD  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5975  0CCE  0081               	movwf	1
  5976                           
  5977                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  5978  0CCF  086C               	movf	_Sw,w
  5979  0CD0  0086               	movwf	6
  5980  0CD1  3001               	movlw	1	; select bank2/3
  5981  0CD2  0087               	movwf	7
  5982  0CD3  3000               	movlw	0
  5983  0CD4  1B01               	btfsc	1,6
  5984  0CD5  3001               	movlw	1
  5985  0CD6  00DD               	movwf	setRF_DimmerLights@on
  5986  0CD7  0864               	movf	Sw_DimmerOffFunc@sw,w
  5987  0CD8  318C  2427  318C   	fcall	_setRF_DimmerLights
  5988                           
  5989                           ;Switch_B1.c: 295: setTxData();
  5990  0CDB  3185  25B5         	fcall	_setTxData
  5991                           
  5992                           ;Switch_B1.c: 297: }
  5993                           ;Switch_B1.c: 298: } else {
  5994  0CDD  0008               	return
  5995  0CDE                     l8629:	
  5996                           
  5997                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  5998  0CDE  0020               	movlb	0	; select bank0
  5999  0CDF  01A2               	clrf	setDimmerLights_Trigger@command
  6000  0CE0  0AA2               	incf	setDimmerLights_Trigger@command,f
  6001  0CE1  0864               	movf	Sw_DimmerOffFunc@sw,w
  6002  0CE2  319F  272C  318C   	fcall	_setDimmerLights_Trigger
  6003                           
  6004                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  6005  0CE5  0020               	movlb	0	; select bank0
  6006  0CE6  01A2               	clrf	setDimmerLights_Switch@command
  6007  0CE7  0864               	movf	Sw_DimmerOffFunc@sw,w
  6008  0CE8  319F  271C  318C   	fcall	_setDimmerLights_Switch
  6009                           
  6010                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  6011  0CEB  0020               	movlb	0	; select bank0
  6012  0CEC  01AA               	clrf	setDelayOff_GO@command
  6013  0CED  01AB               	clrf	setDelayOff_GO@value
  6014  0CEE  0864               	movf	Sw_DimmerOffFunc@sw,w
  6015  0CEF  3189  21C7  318C   	fcall	_setDelayOff_GO
  6016                           
  6017                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  6018  0CF2  0020               	movlb	0	; select bank0
  6019  0CF3  086C               	movf	_Sw,w
  6020  0CF4  0086               	movwf	6
  6021  0CF5  3001               	movlw	1	; select bank2/3
  6022  0CF6  0087               	movwf	7
  6023  0CF7  3000               	movlw	0
  6024  0CF8  1B01               	btfsc	1,6
  6025  0CF9  3001               	movlw	1
  6026  0CFA  00DD               	movwf	setRF_DimmerLights@on
  6027  0CFB  0864               	movf	Sw_DimmerOffFunc@sw,w
  6028  0CFC  318C  2427  318C   	fcall	_setRF_DimmerLights
  6029                           
  6030                           ;Switch_B1.c: 304: setTxData();
  6031  0CFF  3185  25B5         	fcall	_setTxData
  6032  0D01  0008               	return
  6033  0D02                     __end_of_Sw_DimmerOffFunc:	
  6034                           
  6035                           	psect	text20
  6036  1365                     __ptext20:	
  6037 ;; *************** function _Sw_DimmerAdjFunc *****************
  6038 ;; Defined at:
  6039 ;;		line 311 in file "../src/Switch_B1.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;  sw              1    wreg     unsigned char 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;  sw              1    5[BANK0 ] unsigned char 
  6044 ;;  Idle            1    4[BANK0 ] unsigned char 
  6045 ;; Return value:  Size  Location     Type
  6046 ;;		None               void
  6047 ;; Registers used:
  6048 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6055 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;Total ram usage:        2 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; Hardware stack levels required when called:    7
  6061 ;; This function calls:
  6062 ;;		_setDimmerLights_AdjGo
  6063 ;;		_setDimmerLights_TriggerAdj
  6064 ;;		_setRFSW_Status
  6065 ;; This function is called by:
  6066 ;;		_setSw_Main
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           
  6071                           ;psect for function _Sw_DimmerAdjFunc
  6072  1365                     _Sw_DimmerAdjFunc:	
  6073                           
  6074                           ;incstack = 0
  6075                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6076                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6077  1365  0020               	movlb	0	; select bank0
  6078  1366  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6079                           
  6080                           ;Switch_B1.c: 312: char Idle = 1;
  6081  1367  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6082  1368  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6083                           
  6084                           ;Switch_B1.c: 332: if (Idle == 1) {
  6085  1369  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6086  136A  3A01               	xorlw	1
  6087  136B  1D03               	skipz
  6088  136C  0008               	return
  6089                           
  6090                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  6091  136D  086C               	movf	_Sw,w
  6092  136E  0086               	movwf	6
  6093  136F  3001               	movlw	1	; select bank2/3
  6094  1370  0087               	movwf	7
  6095  1371  1F81               	btfss	1,7
  6096  1372  0008               	return
  6097                           
  6098                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  6099  1373  086C               	movf	_Sw,w
  6100  1374  0086               	movwf	6
  6101  1375  3001               	movlw	1	; select bank2/3
  6102  1376  0087               	movwf	7
  6103  1377  1581               	bsf	1,3
  6104                           
  6105                           ;Switch_B1.c: 335: Sw->Adj = 1;
  6106  1378  0A6C               	incf	_Sw,w
  6107  1379  0086               	movwf	6
  6108  137A  3001               	movlw	1	; select bank2/3
  6109  137B  0087               	movwf	7
  6110  137C  1401               	bsf	1,0
  6111                           
  6112                           ;Switch_B1.c: 336: Sw->Status = 1;
  6113  137D  086C               	movf	_Sw,w
  6114  137E  0086               	movwf	6
  6115  137F  3001               	movlw	1	; select bank2/3
  6116  1380  0087               	movwf	7
  6117  1381  1701               	bsf	1,6
  6118                           
  6119                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  6120  1382  01A2               	clrf	setRFSW_Status@command
  6121  1383  0AA2               	incf	setRFSW_Status@command,f
  6122  1384  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6123  1385  319E  26C4  3193   	fcall	_setRFSW_Status
  6124                           
  6125                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  6126  1388  0020               	movlb	0	; select bank0
  6127  1389  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6128  138A  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6129  138B  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6130  138C  319F  275C  3193   	fcall	_setDimmerLights_TriggerAdj
  6131                           
  6132                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  6133  138F  0020               	movlb	0	; select bank0
  6134  1390  01A2               	clrf	setDimmerLights_AdjGo@command
  6135  1391  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6136  1392  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6137  1393  319F  274C         	fcall	_setDimmerLights_AdjGo
  6138  1395  0008               	return
  6139  1396                     __end_of_Sw_DimmerAdjFunc:	
  6140                           
  6141                           	psect	text21
  6142  1F5C                     __ptext21:	
  6143 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6144 ;; Defined at:
  6145 ;;		line 720 in file "../src/Dimmer_B1.c"
  6146 ;; Parameters:    Size  Location     Type
  6147 ;;  lights          1    wreg     unsigned char 
  6148 ;;  command         1    2[BANK0 ] unsigned char 
  6149 ;; Auto vars:     Size  Location     Type
  6150 ;;  lights          1    3[BANK0 ] unsigned char 
  6151 ;; Return value:  Size  Location     Type
  6152 ;;		None               void
  6153 ;; Registers used:
  6154 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6155 ;; Tracked objects:
  6156 ;;		On entry : 0/0
  6157 ;;		On exit  : 0/0
  6158 ;;		Unchanged: 0/0
  6159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6160 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6164 ;;Total ram usage:        2 bytes
  6165 ;; Hardware stack levels used:    1
  6166 ;; Hardware stack levels required when called:    6
  6167 ;; This function calls:
  6168 ;;		_DimmerLightsPointSelect
  6169 ;; This function is called by:
  6170 ;;		_Sw_DimmerOffFunc
  6171 ;;		_Sw_DimmerAdjFunc
  6172 ;; This function uses a non-reentrant model
  6173 ;;
  6174                           
  6175                           
  6176                           ;psect for function _setDimmerLights_TriggerAdj
  6177  1F5C                     _setDimmerLights_TriggerAdj:	
  6178                           
  6179                           ;incstack = 0
  6180                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6181                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6182  1F5C  0020               	movlb	0	; select bank0
  6183  1F5D  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6184                           
  6185                           ;Dimmer_B1.c: 722: DimmerLightsPointSelect(lights);
  6186  1F5E  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6187  1F5F  319E  2634         	fcall	_DimmerLightsPointSelect
  6188                           
  6189                           ;Dimmer_B1.c: 723: DimmerLights->TriggerAdj = command;
  6190  1F61  0020               	movlb	0	; select bank0
  6191  1F62  086A               	movf	_DimmerLights,w
  6192  1F63  3E08               	addlw	8
  6193  1F64  0086               	movwf	6
  6194  1F65  3001               	movlw	1	; select bank2/3
  6195  1F66  0087               	movwf	7
  6196  1F67  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6197  1F68  1201               	bcf	1,4
  6198  1F69  1D03               	skipz
  6199  1F6A  1601               	bsf	1,4
  6200  1F6B  0008               	return
  6201  1F6C                     __end_of_setDimmerLights_TriggerAdj:	
  6202                           
  6203                           	psect	text22
  6204  1F4C                     __ptext22:	
  6205 ;; *************** function _setDimmerLights_AdjGo *****************
  6206 ;; Defined at:
  6207 ;;		line 708 in file "../src/Dimmer_B1.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;  lights          1    wreg     unsigned char 
  6210 ;;  command         1    2[BANK0 ] unsigned char 
  6211 ;; Auto vars:     Size  Location     Type
  6212 ;;  lights          1    3[BANK0 ] unsigned char 
  6213 ;; Return value:  Size  Location     Type
  6214 ;;		None               void
  6215 ;; Registers used:
  6216 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6217 ;; Tracked objects:
  6218 ;;		On entry : 0/0
  6219 ;;		On exit  : 0/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6222 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6225 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6226 ;;Total ram usage:        2 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; Hardware stack levels required when called:    6
  6229 ;; This function calls:
  6230 ;;		_DimmerLightsPointSelect
  6231 ;; This function is called by:
  6232 ;;		_Sw_DimmerOffFunc
  6233 ;;		_Sw_DimmerAdjFunc
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           
  6238                           ;psect for function _setDimmerLights_AdjGo
  6239  1F4C                     _setDimmerLights_AdjGo:	
  6240                           
  6241                           ;incstack = 0
  6242                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6243                           ;setDimmerLights_AdjGo@lights stored from wreg
  6244  1F4C  0020               	movlb	0	; select bank0
  6245  1F4D  00A3               	movwf	setDimmerLights_AdjGo@lights
  6246                           
  6247                           ;Dimmer_B1.c: 710: DimmerLightsPointSelect(lights);
  6248  1F4E  0823               	movf	setDimmerLights_AdjGo@lights,w
  6249  1F4F  319E  2634         	fcall	_DimmerLightsPointSelect
  6250                           
  6251                           ;Dimmer_B1.c: 711: DimmerLights->AdjGo = command;
  6252  1F51  0020               	movlb	0	; select bank0
  6253  1F52  086A               	movf	_DimmerLights,w
  6254  1F53  3E08               	addlw	8
  6255  1F54  0086               	movwf	6
  6256  1F55  3001               	movlw	1	; select bank2/3
  6257  1F56  0087               	movwf	7
  6258  1F57  0822               	movf	setDimmerLights_AdjGo@command,w
  6259  1F58  1181               	bcf	1,3
  6260  1F59  1D03               	skipz
  6261  1F5A  1581               	bsf	1,3
  6262  1F5B  0008               	return
  6263  1F5C                     __end_of_setDimmerLights_AdjGo:	
  6264                           
  6265                           	psect	text23
  6266  1DF7                     __ptext23:	
  6267 ;; *************** function _Switch_Initialization *****************
  6268 ;; Defined at:
  6269 ;;		line 41 in file "../src/Switch_B1.c"
  6270 ;; Parameters:    Size  Location     Type
  6271 ;;		None
  6272 ;; Auto vars:     Size  Location     Type
  6273 ;;		None
  6274 ;; Return value:  Size  Location     Type
  6275 ;;		None               void
  6276 ;; Registers used:
  6277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6278 ;; Tracked objects:
  6279 ;;		On entry : 0/0
  6280 ;;		On exit  : 0/0
  6281 ;;		Unchanged: 0/0
  6282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6287 ;;Total ram usage:        0 bytes
  6288 ;; Hardware stack levels used:    1
  6289 ;; Hardware stack levels required when called:    8
  6290 ;; This function calls:
  6291 ;;		_TouchPower
  6292 ;;		_setSw_Initialization
  6293 ;; This function is called by:
  6294 ;;		_main
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298                           
  6299                           ;psect for function _Switch_Initialization
  6300  1DF7                     _Switch_Initialization:	
  6301                           
  6302                           ;Switch_B1.c: 42: TouchPower();
  6303                           
  6304                           ;incstack = 0
  6305                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6306  1DF7  319E  26FE  319D   	fcall	_TouchPower
  6307                           
  6308                           ;Switch_B1.c: 44: WPUB1 = 0;
  6309  1DFA  0024               	movlb	4	; select bank4
  6310  1DFB  108D               	bcf	13,1	;volatile
  6311                           
  6312                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6313  1DFC  3001               	movlw	1
  6314  1DFD  319F  273C         	fcall	_setSw_Initialization
  6315  1DFF  0008               	return
  6316  1E00                     __end_of_Switch_Initialization:	
  6317                           
  6318                           	psect	text24
  6319  1F3C                     __ptext24:	
  6320 ;; *************** function _setSw_Initialization *****************
  6321 ;; Defined at:
  6322 ;;		line 83 in file "../src/Switch_B1.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;  sw              1    wreg     unsigned char 
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  sw              1    4[BANK0 ] unsigned char 
  6327 ;; Return value:  Size  Location     Type
  6328 ;;		None               void
  6329 ;; Registers used:
  6330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;Total ram usage:        1 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:    7
  6343 ;; This function calls:
  6344 ;;		_setLED
  6345 ;; This function is called by:
  6346 ;;		_Switch_Initialization
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           
  6351                           ;psect for function _setSw_Initialization
  6352  1F3C                     _setSw_Initialization:	
  6353                           
  6354                           ;incstack = 0
  6355                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6356                           ;setSw_Initialization@sw stored from wreg
  6357  1F3C  0020               	movlb	0	; select bank0
  6358  1F3D  00A4               	movwf	setSw_Initialization@sw
  6359                           
  6360                           ;Switch_B1.c: 84: setLED(sw, 1);
  6361  1F3E  01A2               	clrf	setLED@command
  6362  1F3F  0AA2               	incf	setLED@command,f
  6363  1F40  0824               	movf	setSw_Initialization@sw,w
  6364  1F41  3189  2169  319F   	fcall	_setLED
  6365                           
  6366                           ;Switch_B1.c: 86: setLED(sw + 1, 1);
  6367  1F44  0020               	movlb	0	; select bank0
  6368  1F45  01A2               	clrf	setLED@command
  6369  1F46  0AA2               	incf	setLED@command,f
  6370  1F47  0824               	movf	setSw_Initialization@sw,w
  6371  1F48  3E01               	addlw	1
  6372  1F49  3189  2169         	fcall	_setLED
  6373  1F4B  0008               	return
  6374  1F4C                     __end_of_setSw_Initialization:	
  6375                           
  6376                           	psect	text25
  6377  1EFE                     __ptext25:	
  6378 ;; *************** function _TouchPower *****************
  6379 ;; Defined at:
  6380 ;;		line 10 in file "../src/Switch_B1.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;		None
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;		None
  6385 ;; Return value:  Size  Location     Type
  6386 ;;		None               void
  6387 ;; Registers used:
  6388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;Total ram usage:        0 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:    6
  6401 ;; This function calls:
  6402 ;;		_Timeout_Counter
  6403 ;;		_set_TimeoutCleared
  6404 ;; This function is called by:
  6405 ;;		_Switch_Initialization
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           
  6410                           ;psect for function _TouchPower
  6411  1EFE                     _TouchPower:	
  6412                           
  6413                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6414                           
  6415                           ;incstack = 0
  6416                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6417  1EFE  2F04               	goto	l9143
  6418  1EFF                     l2468:	
  6419                           
  6420                           ;Switch_B1.c: 12: RC5 = 1;
  6421  1EFF  0020               	movlb	0	; select bank0
  6422  1F00  168E               	bsf	14,5	;volatile
  6423                           
  6424                           ;Switch_B1.c: 13: Timeout_Counter();
  6425  1F01  319F  27EB  319E   	fcall	_Timeout_Counter
  6426  1F04                     l9143:	
  6427  1F04  0020               	movlb	0	; select bank0
  6428  1F05  1A8E               	btfsc	14,5	;volatile
  6429  1F06  2F0A               	goto	l9147
  6430  1F07  0021               	movlb	1	; select bank1
  6431  1F08  1D2F               	btfss	(_myMain^(0+128)+15),2
  6432  1F09  2EFF               	goto	l2468
  6433  1F0A                     l9147:	
  6434                           
  6435                           ;Switch_B1.c: 14: }
  6436                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6437  1F0A  3190  2066         	fcall	_set_TimeoutCleared
  6438  1F0C  0008               	return
  6439  1F0D                     __end_of_TouchPower:	
  6440                           
  6441                           	psect	text26
  6442  1D76                     __ptext26:	
  6443 ;; *************** function _RF_Main *****************
  6444 ;; Defined at:
  6445 ;;		line 16 in file "../src/RF_Control_B1.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;		None
  6448 ;; Auto vars:     Size  Location     Type
  6449 ;;		None
  6450 ;; Return value:  Size  Location     Type
  6451 ;;		None               void
  6452 ;; Registers used:
  6453 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6454 ;; Tracked objects:
  6455 ;;		On entry : 0/0
  6456 ;;		On exit  : 0/0
  6457 ;;		Unchanged: 0/0
  6458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6463 ;;Total ram usage:        0 bytes
  6464 ;; Hardware stack levels used:    1
  6465 ;; Hardware stack levels required when called:   14
  6466 ;; This function calls:
  6467 ;;		_setRF_Main
  6468 ;; This function is called by:
  6469 ;;		_main
  6470 ;; This function uses a non-reentrant model
  6471 ;;
  6472                           
  6473                           
  6474                           ;psect for function _RF_Main
  6475  1D76                     _RF_Main:	
  6476                           
  6477                           ;RF_Control_B1.c: 18: setRF_Main();
  6478                           
  6479                           ;incstack = 0
  6480                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6481  1D76  3184  2421         	fcall	_setRF_Main
  6482  1D78  0008               	return
  6483  1D79                     __end_of_RF_Main:	
  6484                           
  6485                           	psect	text27
  6486  0421                     __ptext27:	
  6487 ;; *************** function _setRF_Main *****************
  6488 ;; Defined at:
  6489 ;;		line 52 in file "../src/RF_Control_B1.c"
  6490 ;; Parameters:    Size  Location     Type
  6491 ;;		None
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;  Receive_OK      1    0        unsigned char 
  6494 ;;  loop_f          1    0        unsigned char 
  6495 ;; Return value:  Size  Location     Type
  6496 ;;		None               void
  6497 ;; Registers used:
  6498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;Total ram usage:        2 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:   13
  6511 ;; This function calls:
  6512 ;;		_CC2500_ReadStatus
  6513 ;;		_CC2500_RxData
  6514 ;;		_CC2500_TxData
  6515 ;;		_CC2500_WriteCommand
  6516 ;;		_getBuz_GO
  6517 ;;		_getRxData
  6518 ;; This function is called by:
  6519 ;;		_RF_Main
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           
  6524                           ;psect for function _setRF_Main
  6525  0421                     _setRF_Main:	
  6526                           
  6527                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  6528                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6529                           
  6530                           ;incstack = 0
  6531                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6532  0421  0021               	movlb	1	; select bank1
  6533  0422  1C3E               	btfss	_RF1^(0+128),0
  6534  0423  0008               	return
  6535                           
  6536                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6537  0424  319F  277D  3184   	fcall	_getBuz_GO
  6538  0427  0020               	movlb	0	; select bank0
  6539  0428  0821               	movf	?_getBuz_GO+1,w
  6540  0429  0420               	iorwf	?_getBuz_GO,w
  6541  042A  1D03               	skipz
  6542  042B  0008               	return
  6543                           
  6544                           ;RF_Control_B1.c: 68: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6545  042C  01E8               	clrf	_setRF_Main$5315
  6546  042D  0AE8               	incf	_setRF_Main$5315,f
  6547  042E  1F0C               	btfss	12,6	;volatile
  6548  042F  1A0C               	btfsc	12,4	;volatile
  6549  0430  2C35               	goto	l9041
  6550  0431  1C0C               	btfss	12,0	;volatile
  6551  0432  188D               	btfsc	13,1	;volatile
  6552  0433  2C35               	goto	l9041
  6553  0434  01E8               	clrf	_setRF_Main$5315
  6554  0435                     l9041:	
  6555  0435  0868               	movf	_setRF_Main$5315,w
  6556  0436  0021               	movlb	1	; select bank1
  6557  0437  13BE               	bcf	_RF1^(0+128),7
  6558  0438  1D03               	skipz
  6559  0439  17BE               	bsf	_RF1^(0+128),7
  6560                           
  6561                           ;RF_Control_B1.c: 71: if (RF1.Key == 1 && RF1.Learn == 0) {
  6562  043A  1BBE               	btfsc	_RF1^(0+128),7
  6563  043B  1B3E               	btfsc	_RF1^(0+128),6
  6564  043C  2C41               	goto	l2078
  6565                           
  6566                           ;RF_Control_B1.c: 72: RF1.Count = 0;
  6567  043D  01C0               	clrf	(_RF1^(0+128)+2)
  6568                           
  6569                           ;RF_Control_B1.c: 73: RF1.Run = 1;
  6570  043E  14BF               	bsf	(_RF1^(0+128)+1),1
  6571                           
  6572                           ;RF_Control_B1.c: 74: RF1.RxStatus = 0;
  6573  043F  11BE               	bcf	_RF1^(0+128),3
  6574                           
  6575                           ;RF_Control_B1.c: 76: } else {
  6576  0440  0008               	return
  6577  0441                     l2078:	
  6578                           
  6579                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6580  0441  18BF               	btfsc	(_RF1^(0+128)+1),1
  6581  0442  1B3E               	btfsc	_RF1^(0+128),6
  6582  0443  2C51               	goto	l9063
  6583                           
  6584                           ;RF_Control_B1.c: 78: RF1.Count++;
  6585  0444  3001               	movlw	1
  6586  0445  0020               	movlb	0	; select bank0
  6587  0446  00E7               	movwf	??_setRF_Main
  6588  0447  0867               	movf	??_setRF_Main,w
  6589  0448  0021               	movlb	1	; select bank1
  6590  0449  07C0               	addwf	(_RF1^(0+128)+2),f
  6591                           
  6592                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6593  044A  0840               	movf	(_RF1^(0+128)+2),w
  6594  044B  0644               	xorwf	(_RF1^(0+128)+6),w
  6595  044C  1D03               	skipz
  6596  044D  2CC1               	goto	l9117
  6597                           
  6598                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6599  044E  01C0               	clrf	(_RF1^(0+128)+2)
  6600                           
  6601                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6602  044F  10BF               	bcf	(_RF1^(0+128)+1),1
  6603                           
  6604                           ;RF_Control_B1.c: 82: }
  6605                           ;RF_Control_B1.c: 83: } else {
  6606  0450  2CC1               	goto	l9117
  6607  0451                     l9063:	
  6608                           
  6609                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6610  0451  01C0               	clrf	(_RF1^(0+128)+2)
  6611                           
  6612                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6613  0452  10BF               	bcf	(_RF1^(0+128)+1),1
  6614                           
  6615                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6616  0453  193E               	btfsc	_RF1^(0+128),2
  6617  0454  1B3E               	btfsc	_RF1^(0+128),6
  6618  0455  2C71               	goto	l2083
  6619                           
  6620                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6621  0456  113E               	bcf	_RF1^(0+128),2
  6622                           
  6623                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6624  0457  11BE               	bcf	_RF1^(0+128),3
  6625                           
  6626                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6627  0458  10BE               	bcf	_RF1^(0+128),1
  6628                           
  6629                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  6630  0459  303B               	movlw	59
  6631  045A  3191  21D7  3184   	fcall	_CC2500_ReadStatus
  6632                           
  6633                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  6634  045D  0021               	movlb	1	; select bank1
  6635  045E  085B               	movf	_s_data^(0+128),w
  6636  045F  1903               	btfsc	3,2
  6637  0460  2C6D               	goto	l2084
  6638                           
  6639                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  6640  0461  3036               	movlw	54
  6641  0462  3190  20AD  3184   	fcall	_CC2500_WriteCommand
  6642                           
  6643                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  6644  0465  303B               	movlw	59
  6645  0466  3190  20AD  3184   	fcall	_CC2500_WriteCommand
  6646                           
  6647                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  6648  0469  303A               	movlw	58
  6649  046A  3190  20AD  3184   	fcall	_CC2500_WriteCommand
  6650  046D                     l2084:	
  6651                           
  6652                           ;RF_Control_B1.c: 97: }
  6653                           ;RF_Control_B1.c: 98: CC2500_TxData();
  6654  046D  318A  2287  3184   	fcall	_CC2500_TxData
  6655                           
  6656                           ;RF_Control_B1.c: 100: } else {
  6657  0470  2CC1               	goto	l9117
  6658  0471                     l2083:	
  6659                           
  6660                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  6661  0471  1DBE               	btfss	_RF1^(0+128),3
  6662  0472  2CAC               	goto	l2086
  6663                           
  6664                           ;RF_Control_B1.c: 103: CC2500_RxData();
  6665  0473  318D  2502  3184   	fcall	_CC2500_RxData
  6666                           
  6667                           ;RF_Control_B1.c: 104: if (RF1.ReceiveGO == 1) {
  6668  0476  0021               	movlb	1	; select bank1
  6669  0477  1CBE               	btfss	_RF1^(0+128),1
  6670  0478  2CC1               	goto	l9117
  6671                           
  6672                           ;RF_Control_B1.c: 105: RF1.ReceiveGO = 0;
  6673  0479  10BE               	bcf	_RF1^(0+128),1
  6674                           
  6675                           ;RF_Control_B1.c: 106: RF1.Correction = 0;
  6676  047A  12BF               	bcf	(_RF1^(0+128)+1),5
  6677                           
  6678                           ;RF_Control_B1.c: 107: RF1.CorrectionCounter = 0;
  6679  047B  01C6               	clrf	(_RF1^(0+128)+8)
  6680  047C  01C7               	clrf	((_RF1+1)^(0+128)+8)
  6681                           
  6682                           ;RF_Control_B1.c: 115: getRxData();
  6683  047D  318B  2353  3184   	fcall	_getRxData
  6684                           
  6685                           ;RF_Control_B1.c: 118: RF1.Run = 1;
  6686  0480  0021               	movlb	1	; select bank1
  6687  0481  14BF               	bsf	(_RF1^(0+128)+1),1
  6688                           
  6689                           ;RF_Control_B1.c: 119: RB5 = RB5 == 1 ? 0 : 1;
  6690  0482  3020               	movlw	32
  6691  0483  0020               	movlb	0	; select bank0
  6692  0484  068D               	xorwf	13,f
  6693                           
  6694                           ;RF_Control_B1.c: 120: if (RF1.Checked == 1) {
  6695  0485  0021               	movlb	1	; select bank1
  6696  0486  1DBF               	btfss	(_RF1^(0+128)+1),3
  6697  0487  2C94               	goto	l9101
  6698                           
  6699                           ;RF_Control_B1.c: 121: if (RF1.RunTime > 20) {
  6700  0488  3015               	movlw	21
  6701  0489  0244               	subwf	(_RF1^(0+128)+6),w
  6702  048A  1C03               	skipc
  6703  048B  2C92               	goto	l9099
  6704                           
  6705                           ;RF_Control_B1.c: 122: RF1.RunTime = 20;
  6706  048C  3014               	movlw	20
  6707  048D  0020               	movlb	0	; select bank0
  6708  048E  00E7               	movwf	??_setRF_Main
  6709  048F  0867               	movf	??_setRF_Main,w
  6710  0490  0021               	movlb	1	; select bank1
  6711  0491  00C4               	movwf	(_RF1^(0+128)+6)
  6712  0492                     l9099:	
  6713                           
  6714                           ;RF_Control_B1.c: 123: }
  6715                           ;RF_Control_B1.c: 124: RF1.CheckCount = 0;
  6716  0492  01C1               	clrf	(_RF1^(0+128)+3)
  6717                           
  6718                           ;RF_Control_B1.c: 125: } else {
  6719  0493  2CC1               	goto	l9117
  6720  0494                     l9101:	
  6721                           
  6722                           ;RF_Control_B1.c: 126: RF1.CheckCount++;
  6723  0494  3001               	movlw	1
  6724  0495  0020               	movlb	0	; select bank0
  6725  0496  00E7               	movwf	??_setRF_Main
  6726  0497  0867               	movf	??_setRF_Main,w
  6727  0498  0021               	movlb	1	; select bank1
  6728  0499  07C1               	addwf	(_RF1^(0+128)+3),f
  6729                           
  6730                           ;RF_Control_B1.c: 127: if (RF1.CheckCount == 2) {
  6731  049A  0841               	movf	(_RF1^(0+128)+3),w
  6732  049B  3A02               	xorlw	2
  6733  049C  1D03               	skipz
  6734  049D  2CC1               	goto	l9117
  6735                           
  6736                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  6737  049E  01C1               	clrf	(_RF1^(0+128)+3)
  6738                           
  6739                           ;RF_Control_B1.c: 129: RF1.CheckedCounter = 0;
  6740  049F  01C2               	clrf	(_RF1^(0+128)+4)
  6741  04A0  01C3               	clrf	((_RF1+1)^(0+128)+4)
  6742                           
  6743                           ;RF_Control_B1.c: 130: if (RF1.RunTime < 200) {
  6744  04A1  30C8               	movlw	200
  6745  04A2  0244               	subwf	(_RF1^(0+128)+6),w
  6746  04A3  1803               	skipnc
  6747  04A4  2CC1               	goto	l9117
  6748                           
  6749                           ;RF_Control_B1.c: 131: RF1.RunTime += 10;
  6750  04A5  300A               	movlw	10
  6751  04A6  0020               	movlb	0	; select bank0
  6752  04A7  00E7               	movwf	??_setRF_Main
  6753  04A8  0867               	movf	??_setRF_Main,w
  6754  04A9  0021               	movlb	1	; select bank1
  6755  04AA  07C4               	addwf	(_RF1^(0+128)+6),f
  6756                           
  6757                           ;RF_Control_B1.c: 132: }
  6758                           ;RF_Control_B1.c: 133: }
  6759                           ;RF_Control_B1.c: 134: }
  6760                           ;RF_Control_B1.c: 135: }
  6761                           ;RF_Control_B1.c: 136: } else {
  6762  04AB  2CC1               	goto	l9117
  6763  04AC                     l2086:	
  6764                           
  6765                           ;RF_Control_B1.c: 138: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6766  04AC  1DBE               	btfss	_RF1^(0+128),3
  6767  04AD  18BE               	btfsc	_RF1^(0+128),1
  6768  04AE  2CC1               	goto	l9117
  6769                           
  6770                           ;RF_Control_B1.c: 139: RF1.RxStatus = 1;
  6771  04AF  15BE               	bsf	_RF1^(0+128),3
  6772                           
  6773                           ;RF_Control_B1.c: 140: RF1.Correction = 1;
  6774  04B0  16BF               	bsf	(_RF1^(0+128)+1),5
  6775                           
  6776                           ;RF_Control_B1.c: 142: CC2500_WriteCommand(0x36);
  6777  04B1  3036               	movlw	54
  6778  04B2  3190  20AD  3184   	fcall	_CC2500_WriteCommand
  6779                           
  6780                           ;RF_Control_B1.c: 143: CC2500_WriteCommand(0x3B);
  6781  04B5  303B               	movlw	59
  6782  04B6  3190  20AD  3184   	fcall	_CC2500_WriteCommand
  6783                           
  6784                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x3A);
  6785  04B9  303A               	movlw	58
  6786  04BA  3190  20AD  3184   	fcall	_CC2500_WriteCommand
  6787                           
  6788                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x34);
  6789  04BD  3034               	movlw	52
  6790  04BE  3190  20AD  3184   	fcall	_CC2500_WriteCommand
  6791  04C1                     l9117:	
  6792                           
  6793                           ;RF_Control_B1.c: 147: }
  6794                           ;RF_Control_B1.c: 149: }
  6795                           ;RF_Control_B1.c: 150: }
  6796                           ;RF_Control_B1.c: 151: }
  6797                           ;RF_Control_B1.c: 152: if (RF1.RxStatus == 1) {
  6798  04C1  0021               	movlb	1	; select bank1
  6799  04C2  1DBE               	btfss	_RF1^(0+128),3
  6800  04C3  2CDC               	goto	l9129
  6801                           
  6802                           ;RF_Control_B1.c: 153: if (RF1.RunTime > 20) {
  6803  04C4  3015               	movlw	21
  6804  04C5  0244               	subwf	(_RF1^(0+128)+6),w
  6805  04C6  1C03               	skipc
  6806  04C7  2CDC               	goto	l9129
  6807                           
  6808                           ;RF_Control_B1.c: 154: RF1.CheckedCounter++;
  6809  04C8  3001               	movlw	1
  6810  04C9  07C2               	addwf	(_RF1^(0+128)+4),f
  6811  04CA  3000               	movlw	0
  6812  04CB  3DC3               	addwfc	((_RF1+1)^(0+128)+4),f
  6813                           
  6814                           ;RF_Control_B1.c: 155: if (RF1.CheckedCounter == 1000) {
  6815  04CC  3004               	movlw	4
  6816  04CD  3EBE               	addlw	_RF1& (0+255)
  6817  04CE  0086               	movwf	6
  6818  04CF  0187               	clrf	7
  6819  04D0  3F40               	moviw [0]fsr1
  6820  04D1  3AE8               	xorlw	232
  6821  04D2  1D03               	skipz
  6822  04D3  2CD6               	goto	u9325
  6823  04D4  3F41               	moviw [1]fsr1
  6824  04D5  3A03               	xorlw	3
  6825  04D6                     u9325:	
  6826  04D6  1D03               	skipz
  6827  04D7  2CDC               	goto	l9129
  6828                           
  6829                           ;RF_Control_B1.c: 156: RF1.CheckedCounter = 0;
  6830  04D8  01C2               	clrf	(_RF1^(0+128)+4)
  6831  04D9  01C3               	clrf	((_RF1+1)^(0+128)+4)
  6832                           
  6833                           ;RF_Control_B1.c: 157: RF1.RunTime -= 10;
  6834  04DA  300A               	movlw	10
  6835  04DB  02C4               	subwf	(_RF1^(0+128)+6),f
  6836  04DC                     l9129:	
  6837                           
  6838                           ;RF_Control_B1.c: 158: }
  6839                           ;RF_Control_B1.c: 159: }
  6840                           ;RF_Control_B1.c: 160: }
  6841                           ;RF_Control_B1.c: 161: if (RF1.Correction == 1) {
  6842  04DC  1EBF               	btfss	(_RF1^(0+128)+1),5
  6843  04DD  0008               	return
  6844                           
  6845                           ;RF_Control_B1.c: 162: RF1.CorrectionCounter++;
  6846  04DE  3001               	movlw	1
  6847  04DF  07C6               	addwf	(_RF1^(0+128)+8),f
  6848  04E0  3000               	movlw	0
  6849  04E1  3DC7               	addwfc	((_RF1+1)^(0+128)+8),f
  6850                           
  6851                           ;RF_Control_B1.c: 163: if (RF1.CorrectionCounter >= 30000) {
  6852  04E2  3075               	movlw	117
  6853  04E3  0247               	subwf	((_RF1+1)^(0+128)+8),w
  6854  04E4  3030               	movlw	48
  6855  04E5  1903               	skipnz
  6856  04E6  0246               	subwf	(_RF1^(0+128)+8),w
  6857  04E7  1C03               	skipc
  6858  04E8  0008               	return
  6859                           
  6860                           ;RF_Control_B1.c: 164: RF1.CorrectionCounter = 0;
  6861  04E9  01C6               	clrf	(_RF1^(0+128)+8)
  6862  04EA  01C7               	clrf	((_RF1+1)^(0+128)+8)
  6863                           
  6864                           ;RF_Control_B1.c: 165: RF1.RxStatus = 0;
  6865  04EB  11BE               	bcf	_RF1^(0+128),3
  6866                           
  6867                           ;RF_Control_B1.c: 166: RF1.ReceiveGO = 0;
  6868  04EC  10BE               	bcf	_RF1^(0+128),1
  6869  04ED  0008               	return
  6870  04EE                     __end_of_setRF_Main:	
  6871                           
  6872                           	psect	text28
  6873  0B53                     __ptext28:	
  6874 ;; *************** function _getRxData *****************
  6875 ;; Defined at:
  6876 ;;		line 249 in file "../src/RF_Control_B1.c"
  6877 ;; Parameters:    Size  Location     Type
  6878 ;;		None
  6879 ;; Auto vars:     Size  Location     Type
  6880 ;;		None
  6881 ;; Return value:  Size  Location     Type
  6882 ;;		None               void
  6883 ;; Registers used:
  6884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6885 ;; Tracked objects:
  6886 ;;		On entry : 0/0
  6887 ;;		On exit  : 0/0
  6888 ;;		Unchanged: 0/0
  6889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6894 ;;Total ram usage:        0 bytes
  6895 ;; Hardware stack levels used:    1
  6896 ;; Hardware stack levels required when called:   12
  6897 ;; This function calls:
  6898 ;;		_setControl_Lights_Table
  6899 ;;		_setLog_Code
  6900 ;; This function is called by:
  6901 ;;		_setRF_Main
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905                           
  6906                           ;psect for function _getRxData
  6907  0B53                     _getRxData:	
  6908                           
  6909                           ;RF_Control_B1.c: 250: if (RF1.Learn == 1) {
  6910                           
  6911                           ;incstack = 0
  6912                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6913  0B53  0021               	movlb	1	; select bank1
  6914  0B54  1F3E               	btfss	_RF1^(0+128),6
  6915  0B55  2B66               	goto	l8537
  6916                           
  6917                           ;RF_Control_B1.c: 251: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6918  0B56  0022               	movlb	2	; select bank2
  6919  0B57  08A0               	movf	_RF_Data^(0+256),f
  6920  0B58  1D03               	skipz
  6921  0B59  2B63               	goto	l2117
  6922  0B5A  0821               	movf	(_RF_Data^(0+256)+1),w
  6923  0B5B  3A64               	xorlw	100
  6924  0B5C  1D03               	skipz
  6925  0B5D  2B63               	goto	l2117
  6926                           
  6927                           ;RF_Control_B1.c: 252: setLog_Code();
  6928  0B5E  3193  2396         	fcall	_setLog_Code
  6929                           
  6930                           ;RF_Control_B1.c: 253: RF1.Checked = 1;
  6931  0B60  0021               	movlb	1	; select bank1
  6932  0B61  15BF               	bsf	(_RF1^(0+128)+1),3
  6933                           
  6934                           ;RF_Control_B1.c: 254: } else {
  6935  0B62  0008               	return
  6936  0B63                     l2117:	
  6937                           
  6938                           ;RF_Control_B1.c: 255: RF1.Checked = 0;
  6939  0B63  0021               	movlb	1	; select bank1
  6940  0B64  11BF               	bcf	(_RF1^(0+128)+1),3
  6941                           
  6942                           ;RF_Control_B1.c: 256: }
  6943                           ;RF_Control_B1.c: 257: } else {
  6944  0B65  0008               	return
  6945  0B66                     l8537:	
  6946                           
  6947                           ;RF_Control_B1.c: 258: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6948  0B66  0022               	movlb	2	; select bank2
  6949  0B67  08A0               	movf	_RF_Data^(0+256),f
  6950  0B68  1D03               	skipz
  6951  0B69  2BA4               	goto	l8559
  6952  0B6A  0821               	movf	(_RF_Data^(0+256)+1),w
  6953  0B6B  3A02               	xorlw	2
  6954  0B6C  1D03               	skipz
  6955  0B6D  2BA4               	goto	l8559
  6956                           
  6957                           ;RF_Control_B1.c: 260: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6958  0B6E  082C               	movf	(_RF_Data^(0+256)+12),w
  6959  0B6F  3AFF               	xorlw	255
  6960  0B70  1D03               	skipz
  6961  0B71  2B7E               	goto	l8549
  6962  0B72  082D               	movf	(_RF_Data^(0+256)+13),w
  6963  0B73  3AFF               	xorlw	255
  6964  0B74  1D03               	skipz
  6965  0B75  2B7E               	goto	l8549
  6966  0B76  082E               	movf	(_RF_Data^(0+256)+14),w
  6967  0B77  3AFF               	xorlw	255
  6968  0B78  1D03               	skipz
  6969  0B79  2B7E               	goto	l8549
  6970                           
  6971                           ;RF_Control_B1.c: 261: __nop();
  6972  0B7A  0000               	nop
  6973                           
  6974                           ;RF_Control_B1.c: 262: RF1.Checked = 0;
  6975  0B7B  0021               	movlb	1	; select bank1
  6976  0B7C  11BF               	bcf	(_RF1^(0+128)+1),3
  6977                           
  6978                           ;RF_Control_B1.c: 263: } else {
  6979  0B7D  0008               	return
  6980  0B7E                     l8549:	
  6981                           
  6982                           ;RF_Control_B1.c: 264: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6983  0B7E  0020               	movlb	0	; select bank0
  6984  0B7F  086D               	movf	_product,w
  6985  0B80  3E0C               	addlw	12
  6986  0B81  0086               	movwf	6
  6987  0B82  3001               	movlw	1	; select bank2/3
  6988  0B83  0087               	movwf	7
  6989  0B84  0022               	movlb	2	; select bank2
  6990  0B85  082C               	movf	(_RF_Data^(0+256)+12),w
  6991  0B86  0601               	xorwf	1,w
  6992  0B87  1D03               	skipz
  6993  0B88  0008               	return
  6994  0B89  0020               	movlb	0	; select bank0
  6995  0B8A  086D               	movf	_product,w
  6996  0B8B  3E0D               	addlw	13
  6997  0B8C  0086               	movwf	6
  6998  0B8D  3001               	movlw	1	; select bank2/3
  6999  0B8E  0087               	movwf	7
  7000  0B8F  0022               	movlb	2	; select bank2
  7001  0B90  082D               	movf	(_RF_Data^(0+256)+13),w
  7002  0B91  0601               	xorwf	1,w
  7003  0B92  1D03               	skipz
  7004  0B93  0008               	return
  7005  0B94  0020               	movlb	0	; select bank0
  7006  0B95  086D               	movf	_product,w
  7007  0B96  3E0E               	addlw	14
  7008  0B97  0086               	movwf	6
  7009  0B98  3001               	movlw	1	; select bank2/3
  7010  0B99  0087               	movwf	7
  7011  0B9A  0022               	movlb	2	; select bank2
  7012  0B9B  082E               	movf	(_RF_Data^(0+256)+14),w
  7013  0B9C  0601               	xorwf	1,w
  7014  0B9D  1D03               	skipz
  7015  0B9E  0008               	return
  7016                           
  7017                           ;RF_Control_B1.c: 265: setControl_Lights_Table();
  7018  0B9F  318A  22EC         	fcall	_setControl_Lights_Table
  7019                           
  7020                           ;RF_Control_B1.c: 266: RF1.Checked = 1;
  7021  0BA1  0021               	movlb	1	; select bank1
  7022  0BA2  15BF               	bsf	(_RF1^(0+128)+1),3
  7023                           
  7024                           ;RF_Control_B1.c: 267: }
  7025                           ;RF_Control_B1.c: 268: }
  7026                           ;RF_Control_B1.c: 269: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7027  0BA3  0008               	return
  7028  0BA4                     l8559:	
  7029  0BA4  0022               	movlb	2	; select bank2
  7030  0BA5  0820               	movf	_RF_Data^(0+256),w
  7031  0BA6  3AFF               	xorlw	255
  7032  0BA7  1D03               	skipz
  7033  0BA8  2BAF               	goto	l8565
  7034  0BA9  0821               	movf	(_RF_Data^(0+256)+1),w
  7035  0BAA  3A02               	xorlw	2
  7036  0BAB  1D03               	skipz
  7037  0BAC  2BAF               	goto	l8565
  7038                           
  7039                           ;RF_Control_B1.c: 270: __nop();
  7040  0BAD  0000               	nop
  7041                           
  7042                           ;RF_Control_B1.c: 271: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7043  0BAE  0008               	return
  7044  0BAF                     l8565:	
  7045  0BAF  0022               	movlb	2	; select bank2
  7046  0BB0  08A0               	movf	_RF_Data^(0+256),f
  7047  0BB1  1D03               	skipz
  7048  0BB2  2BB9               	goto	l2127
  7049  0BB3  0821               	movf	(_RF_Data^(0+256)+1),w
  7050  0BB4  3A65               	xorlw	101
  7051  0BB5  1D03               	skipz
  7052  0BB6  2BB9               	goto	l2127
  7053                           
  7054                           ;RF_Control_B1.c: 272: __nop();
  7055  0BB7  0000               	nop
  7056                           
  7057                           ;RF_Control_B1.c: 273: } else {
  7058  0BB8  0008               	return
  7059  0BB9                     l2127:	
  7060                           
  7061                           ;RF_Control_B1.c: 274: RF1.Checked = 0;
  7062  0BB9  0021               	movlb	1	; select bank1
  7063  0BBA  11BF               	bcf	(_RF1^(0+128)+1),3
  7064  0BBB  0008               	return
  7065  0BBC                     __end_of_getRxData:	
  7066                           
  7067                           	psect	text29
  7068  1396                     __ptext29:	
  7069 ;; *************** function _setLog_Code *****************
  7070 ;; Defined at:
  7071 ;;		line 284 in file "../src/RF_Control_B1.c"
  7072 ;; Parameters:    Size  Location     Type
  7073 ;;		None
  7074 ;; Auto vars:     Size  Location     Type
  7075 ;;		None
  7076 ;; Return value:  Size  Location     Type
  7077 ;;		None               void
  7078 ;; Registers used:
  7079 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7080 ;; Tracked objects:
  7081 ;;		On entry : 0/0
  7082 ;;		On exit  : 0/0
  7083 ;;		Unchanged: 0/0
  7084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7087 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7088 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7089 ;;Total ram usage:        1 bytes
  7090 ;; Hardware stack levels used:    1
  7091 ;; Hardware stack levels required when called:    7
  7092 ;; This function calls:
  7093 ;;		_setBuz
  7094 ;; This function is called by:
  7095 ;;		_getRxData
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           
  7100                           ;psect for function _setLog_Code
  7101  1396                     _setLog_Code:	
  7102                           
  7103                           ;RF_Control_B1.c: 285: product->Data[12]=RF_Data[12];
  7104                           
  7105                           ;incstack = 0
  7106                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7107  1396  0022               	movlb	2	; select bank2
  7108  1397  082C               	movf	(_RF_Data^(0+256)+12),w
  7109  1398  0020               	movlb	0	; select bank0
  7110  1399  00AD               	movwf	??_setLog_Code
  7111  139A  086D               	movf	_product,w
  7112  139B  3E0C               	addlw	12
  7113  139C  0086               	movwf	6
  7114  139D  3001               	movlw	1	; select bank2/3
  7115  139E  0087               	movwf	7
  7116  139F  082D               	movf	??_setLog_Code,w
  7117  13A0  0081               	movwf	1
  7118                           
  7119                           ;RF_Control_B1.c: 286: product->Data[13]=RF_Data[13];
  7120  13A1  0022               	movlb	2	; select bank2
  7121  13A2  082D               	movf	(_RF_Data^(0+256)+13),w
  7122  13A3  0020               	movlb	0	; select bank0
  7123  13A4  00AD               	movwf	??_setLog_Code
  7124  13A5  086D               	movf	_product,w
  7125  13A6  3E0D               	addlw	13
  7126  13A7  0086               	movwf	6
  7127  13A8  3001               	movlw	1	; select bank2/3
  7128  13A9  0087               	movwf	7
  7129  13AA  082D               	movf	??_setLog_Code,w
  7130  13AB  0081               	movwf	1
  7131                           
  7132                           ;RF_Control_B1.c: 287: product->Data[14]=RF_Data[14];
  7133  13AC  0022               	movlb	2	; select bank2
  7134  13AD  082E               	movf	(_RF_Data^(0+256)+14),w
  7135  13AE  0020               	movlb	0	; select bank0
  7136  13AF  00AD               	movwf	??_setLog_Code
  7137  13B0  086D               	movf	_product,w
  7138  13B1  3E0E               	addlw	14
  7139  13B2  0086               	movwf	6
  7140  13B3  3001               	movlw	1	; select bank2/3
  7141  13B4  0087               	movwf	7
  7142  13B5  082D               	movf	??_setLog_Code,w
  7143  13B6  0081               	movwf	1
  7144                           
  7145                           ;RF_Control_B1.c: 288: setBuz(1, 100);
  7146  13B7  3064               	movlw	100
  7147  13B8  00A9               	movwf	setBuz@time
  7148  13B9  3000               	movlw	0
  7149  13BA  00AA               	movwf	setBuz@time+1
  7150  13BB  3001               	movlw	1
  7151  13BC  3188  205A  3193   	fcall	_setBuz
  7152                           
  7153                           ;RF_Control_B1.c: 289: RF1.Learn = 0;
  7154  13BF  0021               	movlb	1	; select bank1
  7155  13C0  133E               	bcf	_RF1^(0+128),6
  7156                           
  7157                           ;RF_Control_B1.c: 290: if (myMain.First) {
  7158  13C1  1FA0               	btfss	_myMain^(0+128),7
  7159  13C2  2BC5               	goto	l2132
  7160                           
  7161                           ;RF_Control_B1.c: 291: Memory.LoopSave=1;
  7162  13C3  0022               	movlb	2	; select bank2
  7163  13C4  1561               	bsf	(_Memory^(0+256)+36),2
  7164  13C5                     l2132:	
  7165                           
  7166                           ;RF_Control_B1.c: 292: }
  7167                           ;RF_Control_B1.c: 293: Memory.Modify=1;
  7168  13C5  0022               	movlb	2	; select bank2
  7169  13C6  1461               	bsf	(_Memory^(0+256)+36),0
  7170  13C7  0008               	return
  7171  13C8                     __end_of_setLog_Code:	
  7172                           
  7173                           	psect	text30
  7174  0AEC                     __ptext30:	
  7175 ;; *************** function _setControl_Lights_Table *****************
  7176 ;; Defined at:
  7177 ;;		line 297 in file "../src/RF_Control_B1.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;		None
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;		None
  7182 ;; Return value:  Size  Location     Type
  7183 ;;		None               void
  7184 ;; Registers used:
  7185 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7186 ;; Tracked objects:
  7187 ;;		On entry : 0/0
  7188 ;;		On exit  : 0/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7195 ;;Total ram usage:        0 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; Hardware stack levels required when called:   11
  7198 ;; This function calls:
  7199 ;;		_setBuz
  7200 ;;		_setDimmerLights
  7201 ;;		_setRFSW_AdjControl
  7202 ;;		_setRFSW_Control
  7203 ;;		_setRFSW_Status
  7204 ;;		_setSw_Status
  7205 ;;		_setTxData
  7206 ;; This function is called by:
  7207 ;;		_getRxData
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           
  7212                           ;psect for function _setControl_Lights_Table
  7213  0AEC                     _setControl_Lights_Table:	
  7214                           
  7215                           ;RF_Control_B1.c: 298: if (RF_Data[15] == 0x00) {
  7216                           
  7217                           ;incstack = 0
  7218                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7219  0AEC  0022               	movlb	2	; select bank2
  7220  0AED  08AF               	movf	(_RF_Data^(0+256)+15),f
  7221  0AEE  1D03               	skipz
  7222  0AEF  2B26               	goto	l8261
  7223                           
  7224                           ;RF_Control_B1.c: 300: setDimmerLights(1, 0);
  7225  0AF0  0020               	movlb	0	; select bank0
  7226  0AF1  01A4               	clrf	setDimmerLights@status
  7227  0AF2  3001               	movlw	1
  7228  0AF3  318D  25E9  318A   	fcall	_setDimmerLights
  7229                           
  7230                           ;RF_Control_B1.c: 301: setRFSW_Status(1, 0);
  7231  0AF6  0020               	movlb	0	; select bank0
  7232  0AF7  01A2               	clrf	setRFSW_Status@command
  7233  0AF8  3001               	movlw	1
  7234  0AF9  319E  26C4  318A   	fcall	_setRFSW_Status
  7235                           
  7236                           ;RF_Control_B1.c: 302: setSw_Status(1, 0);
  7237  0AFC  0020               	movlb	0	; select bank0
  7238  0AFD  01A2               	clrf	setSw_Status@command
  7239  0AFE  3001               	movlw	1
  7240  0AFF  319E  26E0  318A   	fcall	_setSw_Status
  7241                           
  7242                           ;RF_Control_B1.c: 315: product->Data[9]=0;
  7243  0B02  0020               	movlb	0	; select bank0
  7244  0B03  086D               	movf	_product,w
  7245  0B04  3E09               	addlw	9
  7246  0B05  0086               	movwf	6
  7247  0B06  3001               	movlw	1	; select bank2/3
  7248  0B07  0087               	movwf	7
  7249  0B08  0181               	clrf	1
  7250                           
  7251                           ;RF_Control_B1.c: 316: product->Data[11]=0;
  7252  0B09  086D               	movf	_product,w
  7253  0B0A  3E0B               	addlw	11
  7254  0B0B  0086               	movwf	6
  7255  0B0C  3001               	movlw	1	; select bank2/3
  7256  0B0D  0087               	movwf	7
  7257  0B0E  0181               	clrf	1
  7258                           
  7259                           ;RF_Control_B1.c: 317: product->Data[15]=0;
  7260  0B0F  086D               	movf	_product,w
  7261  0B10  3E0F               	addlw	15
  7262  0B11  0086               	movwf	6
  7263  0B12  3001               	movlw	1	; select bank2/3
  7264  0B13  0087               	movwf	7
  7265  0B14  0181               	clrf	1
  7266                           
  7267                           ;RF_Control_B1.c: 318: product->Data[17]=0;
  7268  0B15  086D               	movf	_product,w
  7269  0B16  3E11               	addlw	17
  7270  0B17  0086               	movwf	6
  7271  0B18  3001               	movlw	1	; select bank2/3
  7272  0B19  0087               	movwf	7
  7273  0B1A  0181               	clrf	1
  7274                           
  7275                           ;RF_Control_B1.c: 319: setBuz(1, 100);
  7276  0B1B  3064               	movlw	100
  7277  0B1C  00A9               	movwf	setBuz@time
  7278  0B1D  3000               	movlw	0
  7279  0B1E  00AA               	movwf	setBuz@time+1
  7280  0B1F  3001               	movlw	1
  7281  0B20  3188  205A  318A   	fcall	_setBuz
  7282                           
  7283                           ;RF_Control_B1.c: 320: setTxData();
  7284  0B23  3185  25B5         	fcall	_setTxData
  7285                           
  7286                           ;RF_Control_B1.c: 321: } else if (RF_Data[15] == 0x20) {
  7287  0B25  0008               	return
  7288  0B26                     l8261:	
  7289  0B26  0022               	movlb	2	; select bank2
  7290  0B27  082F               	movf	(_RF_Data^(0+256)+15),w
  7291  0B28  3A20               	xorlw	32
  7292  0B29  1D03               	skipz
  7293  0B2A  2B41               	goto	l8267
  7294                           
  7295                           ;RF_Control_B1.c: 322: product->Data[9]=0;
  7296  0B2B  0020               	movlb	0	; select bank0
  7297  0B2C  086D               	movf	_product,w
  7298  0B2D  3E09               	addlw	9
  7299  0B2E  0086               	movwf	6
  7300  0B2F  3001               	movlw	1	; select bank2/3
  7301  0B30  0087               	movwf	7
  7302  0B31  0181               	clrf	1
  7303                           
  7304                           ;RF_Control_B1.c: 323: product->Data[11]=0;
  7305  0B32  086D               	movf	_product,w
  7306  0B33  3E0B               	addlw	11
  7307  0B34  0086               	movwf	6
  7308  0B35  3001               	movlw	1	; select bank2/3
  7309  0B36  0087               	movwf	7
  7310  0B37  0181               	clrf	1
  7311                           
  7312                           ;RF_Control_B1.c: 324: product->Data[17]=0;
  7313  0B38  086D               	movf	_product,w
  7314  0B39  3E11               	addlw	17
  7315  0B3A  0086               	movwf	6
  7316  0B3B  3001               	movlw	1	; select bank2/3
  7317  0B3C  0087               	movwf	7
  7318  0B3D  0181               	clrf	1
  7319                           
  7320                           ;RF_Control_B1.c: 325: setTxData();
  7321  0B3E  3185  25B5         	fcall	_setTxData
  7322                           
  7323                           ;RF_Control_B1.c: 326: }
  7324  0B40  0008               	return
  7325  0B41                     l8267:	
  7326                           
  7327                           ;RF_Control_B1.c: 328: else if (RF_Data[15] == 0x01) {
  7328  0B41  0022               	movlb	2	; select bank2
  7329  0B42  082F               	movf	(_RF_Data^(0+256)+15),w
  7330  0B43  3A01               	xorlw	1
  7331  0B44  1D03               	skipz
  7332  0B45  2B4A               	goto	l8271
  7333                           
  7334                           ;RF_Control_B1.c: 329: setRFSW_Control(1);
  7335  0B46  3001               	movlw	1
  7336  0B47  318F  2775         	fcall	_setRFSW_Control
  7337                           
  7338                           ;RF_Control_B1.c: 330: }
  7339  0B49  0008               	return
  7340  0B4A                     l8271:	
  7341                           
  7342                           ;RF_Control_B1.c: 332: else if (RF_Data[15] == 0x11) {
  7343  0B4A  0022               	movlb	2	; select bank2
  7344  0B4B  082F               	movf	(_RF_Data^(0+256)+15),w
  7345  0B4C  3A11               	xorlw	17
  7346  0B4D  1D03               	skipz
  7347  0B4E  0008               	return
  7348                           
  7349                           ;RF_Control_B1.c: 333: setRFSW_AdjControl(1);
  7350  0B4F  3001               	movlw	1
  7351  0B50  3194  246C         	fcall	_setRFSW_AdjControl
  7352  0B52  0008               	return
  7353  0B53                     __end_of_setControl_Lights_Table:	
  7354                           
  7355                           	psect	text31
  7356  0F75                     __ptext31:	
  7357 ;; *************** function _setRFSW_Control *****************
  7358 ;; Defined at:
  7359 ;;		line 385 in file "../src/RF_Control_B1.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;  sw              1    wreg     unsigned char 
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;  sw              1   67[BANK0 ] unsigned char 
  7364 ;; Return value:  Size  Location     Type
  7365 ;;		None               void
  7366 ;; Registers used:
  7367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;Total ram usage:        2 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    9
  7380 ;; This function calls:
  7381 ;;		_RfSWPointSelect
  7382 ;;		_setBuz
  7383 ;;		_setDelayOff_GO
  7384 ;;		_setDimmerLights_Switch
  7385 ;;		_setDimmerLights_Trigger
  7386 ;;		_setRF_DimmerLights
  7387 ;;		_setSw_Status
  7388 ;;		_setTxData
  7389 ;; This function is called by:
  7390 ;;		_setControl_Lights_Table
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394                           
  7395                           ;psect for function _setRFSW_Control
  7396  0F75                     _setRFSW_Control:	
  7397                           
  7398                           ;incstack = 0
  7399                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7400                           ;setRFSW_Control@sw stored from wreg
  7401  0F75  0020               	movlb	0	; select bank0
  7402  0F76  00E3               	movwf	setRFSW_Control@sw
  7403                           
  7404                           ;RF_Control_B1.c: 386: RfSWPointSelect(sw);
  7405  0F77  0863               	movf	setRFSW_Control@sw,w
  7406  0F78  319E  263F  318F   	fcall	_RfSWPointSelect
  7407                           
  7408                           ;RF_Control_B1.c: 387: if (RFSW->Status == 0) {
  7409  0F7B  0879               	movf	_RFSW,w
  7410  0F7C  0086               	movwf	6
  7411  0F7D  0187               	clrf	7
  7412  0F7E  1801               	btfsc	1,0
  7413  0F7F  2FB4               	goto	l8109
  7414                           
  7415                           ;RF_Control_B1.c: 388: if (RF_Data[16] == 0x80) {
  7416  0F80  0022               	movlb	2	; select bank2
  7417  0F81  0830               	movf	(_RF_Data^(0+256)+16),w
  7418  0F82  3A80               	xorlw	128
  7419  0F83  1D03               	skipz
  7420  0F84  2F92               	goto	l8099
  7421                           
  7422                           ;RF_Control_B1.c: 389: setDelayOff_GO(sw, 1, RF_Data[17]);
  7423  0F85  0020               	movlb	0	; select bank0
  7424  0F86  01AA               	clrf	setDelayOff_GO@command
  7425  0F87  0AAA               	incf	setDelayOff_GO@command,f
  7426  0F88  0022               	movlb	2	; select bank2
  7427  0F89  0831               	movf	(_RF_Data^(0+256)+17),w
  7428  0F8A  0020               	movlb	0	; select bank0
  7429  0F8B  00E2               	movwf	??_setRFSW_Control
  7430  0F8C  0862               	movf	??_setRFSW_Control,w
  7431  0F8D  00AB               	movwf	setDelayOff_GO@value
  7432  0F8E  0863               	movf	setRFSW_Control@sw,w
  7433  0F8F  3189  21C7  318F   	fcall	_setDelayOff_GO
  7434  0F92                     l8099:	
  7435                           
  7436                           ;RF_Control_B1.c: 390: }
  7437                           ;RF_Control_B1.c: 391: RFSW->Status = 1;
  7438  0F92  0879               	movf	_RFSW,w
  7439  0F93  0086               	movwf	6
  7440  0F94  0187               	clrf	7
  7441  0F95  1401               	bsf	1,0
  7442                           
  7443                           ;RF_Control_B1.c: 392: setSw_Status(sw, 1);
  7444  0F96  0020               	movlb	0	; select bank0
  7445  0F97  01A2               	clrf	setSw_Status@command
  7446  0F98  0AA2               	incf	setSw_Status@command,f
  7447  0F99  0863               	movf	setRFSW_Control@sw,w
  7448  0F9A  319E  26E0  318F   	fcall	_setSw_Status
  7449                           
  7450                           ;RF_Control_B1.c: 394: setDimmerLights_Trigger(sw, 1);
  7451  0F9D  0020               	movlb	0	; select bank0
  7452  0F9E  01A2               	clrf	setDimmerLights_Trigger@command
  7453  0F9F  0AA2               	incf	setDimmerLights_Trigger@command,f
  7454  0FA0  0863               	movf	setRFSW_Control@sw,w
  7455  0FA1  319F  272C  318F   	fcall	_setDimmerLights_Trigger
  7456                           
  7457                           ;RF_Control_B1.c: 395: setDimmerLights_Switch(sw, 1);
  7458  0FA4  0020               	movlb	0	; select bank0
  7459  0FA5  01A2               	clrf	setDimmerLights_Switch@command
  7460  0FA6  0AA2               	incf	setDimmerLights_Switch@command,f
  7461  0FA7  0863               	movf	setRFSW_Control@sw,w
  7462  0FA8  319F  271C  318F   	fcall	_setDimmerLights_Switch
  7463                           
  7464                           ;RF_Control_B1.c: 397: setRF_DimmerLights(sw, RFSW->Status);
  7465  0FAB  0879               	movf	_RFSW,w
  7466  0FAC  0086               	movwf	6
  7467  0FAD  0187               	clrf	7
  7468  0FAE  3000               	movlw	0
  7469  0FAF  1801               	btfsc	1,0
  7470  0FB0  3001               	movlw	1
  7471  0FB1  0020               	movlb	0	; select bank0
  7472  0FB2  00DD               	movwf	setRF_DimmerLights@on
  7473  0FB3  2FF0               	goto	L1
  7474  0FB4                     l8109:	
  7475                           ;RF_Control_B1.c: 398: } else {
  7476                           
  7477                           
  7478                           ;RF_Control_B1.c: 399: if (RF_Data[16] == 0x80) {
  7479  0FB4  0022               	movlb	2	; select bank2
  7480  0FB5  0830               	movf	(_RF_Data^(0+256)+16),w
  7481  0FB6  3A80               	xorlw	128
  7482  0FB7  1D03               	skipz
  7483  0FB8  2FCA               	goto	l8113
  7484                           
  7485                           ;RF_Control_B1.c: 400: setDelayOff_GO(sw, 1, RF_Data[17]);
  7486  0FB9  0020               	movlb	0	; select bank0
  7487  0FBA  01AA               	clrf	setDelayOff_GO@command
  7488  0FBB  0AAA               	incf	setDelayOff_GO@command,f
  7489  0FBC  0022               	movlb	2	; select bank2
  7490  0FBD  0831               	movf	(_RF_Data^(0+256)+17),w
  7491  0FBE  0020               	movlb	0	; select bank0
  7492  0FBF  00E2               	movwf	??_setRFSW_Control
  7493  0FC0  0862               	movf	??_setRFSW_Control,w
  7494  0FC1  00AB               	movwf	setDelayOff_GO@value
  7495  0FC2  0863               	movf	setRFSW_Control@sw,w
  7496  0FC3  3189  21C7  318F   	fcall	_setDelayOff_GO
  7497                           
  7498                           ;RF_Control_B1.c: 401: setRF_DimmerLights(sw, 1);
  7499  0FC6  0020               	movlb	0	; select bank0
  7500  0FC7  01DD               	clrf	setRF_DimmerLights@on
  7501  0FC8  0ADD               	incf	setRF_DimmerLights@on,f
  7502  0FC9  2FF0               	goto	L1
  7503  0FCA                     l8113:	
  7504                           ;RF_Control_B1.c: 402: } else {
  7505                           
  7506                           
  7507                           ;RF_Control_B1.c: 403: RFSW->Status = 0;
  7508  0FCA  0879               	movf	_RFSW,w
  7509  0FCB  0086               	movwf	6
  7510  0FCC  0187               	clrf	7
  7511  0FCD  1001               	bcf	1,0
  7512                           
  7513                           ;RF_Control_B1.c: 404: setSw_Status(sw, 0);
  7514  0FCE  0020               	movlb	0	; select bank0
  7515  0FCF  01A2               	clrf	setSw_Status@command
  7516  0FD0  0863               	movf	setRFSW_Control@sw,w
  7517  0FD1  319E  26E0  318F   	fcall	_setSw_Status
  7518                           
  7519                           ;RF_Control_B1.c: 406: setDimmerLights_Trigger(sw, 1);
  7520  0FD4  0020               	movlb	0	; select bank0
  7521  0FD5  01A2               	clrf	setDimmerLights_Trigger@command
  7522  0FD6  0AA2               	incf	setDimmerLights_Trigger@command,f
  7523  0FD7  0863               	movf	setRFSW_Control@sw,w
  7524  0FD8  319F  272C  318F   	fcall	_setDimmerLights_Trigger
  7525                           
  7526                           ;RF_Control_B1.c: 407: setDimmerLights_Switch(sw, RFSW->Status);
  7527  0FDB  0879               	movf	_RFSW,w
  7528  0FDC  0086               	movwf	6
  7529  0FDD  0187               	clrf	7
  7530  0FDE  3000               	movlw	0
  7531  0FDF  1801               	btfsc	1,0
  7532  0FE0  3001               	movlw	1
  7533  0FE1  0020               	movlb	0	; select bank0
  7534  0FE2  00A2               	movwf	setDimmerLights_Switch@command
  7535  0FE3  0863               	movf	setRFSW_Control@sw,w
  7536  0FE4  319F  271C  318F   	fcall	_setDimmerLights_Switch
  7537                           
  7538                           ;RF_Control_B1.c: 409: setDelayOff_GO(sw, 0, 0);
  7539  0FE7  0020               	movlb	0	; select bank0
  7540  0FE8  01AA               	clrf	setDelayOff_GO@command
  7541  0FE9  01AB               	clrf	setDelayOff_GO@value
  7542  0FEA  0863               	movf	setRFSW_Control@sw,w
  7543  0FEB  3189  21C7  318F   	fcall	_setDelayOff_GO
  7544                           
  7545                           ;RF_Control_B1.c: 410: setRF_DimmerLights(sw, 0);
  7546  0FEE  0020               	movlb	0	; select bank0
  7547  0FEF  01DD               	clrf	setRF_DimmerLights@on
  7548  0FF0                     L1:	
  7549  0FF0  0863               	movf	setRFSW_Control@sw,w
  7550  0FF1  318C  2427  318F   	fcall	_setRF_DimmerLights
  7551                           
  7552                           ;RF_Control_B1.c: 411: }
  7553                           ;RF_Control_B1.c: 412: }
  7554                           ;RF_Control_B1.c: 413: setBuz(1, 100);
  7555  0FF4  3064               	movlw	100
  7556  0FF5  0020               	movlb	0	; select bank0
  7557  0FF6  00A9               	movwf	setBuz@time
  7558  0FF7  3000               	movlw	0
  7559  0FF8  00AA               	movwf	setBuz@time+1
  7560  0FF9  3001               	movlw	1
  7561  0FFA  3188  205A  318F   	fcall	_setBuz
  7562                           
  7563                           ;RF_Control_B1.c: 414: setTxData();
  7564  0FFD  3185  25B5         	fcall	_setTxData
  7565  0FFF  0008               	return
  7566  1000                     __end_of_setRFSW_Control:	
  7567                           
  7568                           	psect	text32
  7569  09C7                     __ptext32:	
  7570 ;; *************** function _setDelayOff_GO *****************
  7571 ;; Defined at:
  7572 ;;		line 86 in file "../src/DelayOff_B1.c"
  7573 ;; Parameters:    Size  Location     Type
  7574 ;;  sw              1    wreg     unsigned char 
  7575 ;;  command         1   10[BANK0 ] unsigned char 
  7576 ;;  value           1   11[BANK0 ] unsigned char 
  7577 ;; Auto vars:     Size  Location     Type
  7578 ;;  sw              1   14[BANK0 ] unsigned char 
  7579 ;; Return value:  Size  Location     Type
  7580 ;;		None               void
  7581 ;; Registers used:
  7582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7583 ;; Tracked objects:
  7584 ;;		On entry : 0/0
  7585 ;;		On exit  : 0/0
  7586 ;;		Unchanged: 0/0
  7587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7588 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7590 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7591 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;Total ram usage:        5 bytes
  7593 ;; Hardware stack levels used:    1
  7594 ;; Hardware stack levels required when called:    7
  7595 ;; This function calls:
  7596 ;;		_DelayOffPointSelect
  7597 ;;		_DelayTimejudge
  7598 ;; This function is called by:
  7599 ;;		_setRFSW_Control
  7600 ;;		_Sw_DimmerOffFunc
  7601 ;; This function uses a non-reentrant model
  7602 ;;
  7603                           
  7604                           
  7605                           ;psect for function _setDelayOff_GO
  7606  09C7                     _setDelayOff_GO:	
  7607                           
  7608                           ;incstack = 0
  7609                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7610                           ;setDelayOff_GO@sw stored from wreg
  7611  09C7  0020               	movlb	0	; select bank0
  7612  09C8  00AE               	movwf	setDelayOff_GO@sw
  7613                           
  7614                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  7615  09C9  082E               	movf	setDelayOff_GO@sw,w
  7616  09CA  319E  261E  3189   	fcall	_DelayOffPointSelect
  7617                           
  7618                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  7619  09CD  0020               	movlb	0	; select bank0
  7620  09CE  0869               	movf	_DelayOff,w
  7621  09CF  0086               	movwf	6
  7622  09D0  0187               	clrf	7
  7623  09D1  1C01               	btfss	1,0
  7624  09D2  0008               	return
  7625                           
  7626                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  7627  09D3  082A               	movf	setDelayOff_GO@command,w
  7628  09D4  3A01               	xorlw	1
  7629  09D5  3000               	movlw	0
  7630  09D6  1903               	skipnz
  7631  09D7  3001               	movlw	1
  7632  09D8  00AC               	movwf	??_setDelayOff_GO
  7633  09D9  0869               	movf	_DelayOff,w
  7634  09DA  0086               	movwf	6
  7635  09DB  0187               	clrf	7
  7636  09DC  0DAC               	rlf	??_setDelayOff_GO,f
  7637  09DD  0801               	movf	1,w
  7638  09DE  062C               	xorwf	??_setDelayOff_GO,w
  7639  09DF  39FD               	andlw	-3
  7640  09E0  062C               	xorwf	??_setDelayOff_GO,w
  7641  09E1  0081               	movwf	1
  7642                           
  7643                           ;DelayOff_B1.c: 90: if (command == 1) {
  7644  09E2  082A               	movf	setDelayOff_GO@command,w
  7645  09E3  3A01               	xorlw	1
  7646  09E4  1D03               	skipz
  7647  09E5  2A0F               	goto	l7913
  7648                           
  7649                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7650  09E6  082B               	movf	setDelayOff_GO@value,w
  7651  09E7  3192  22B6  3189   	fcall	_DelayTimejudge
  7652  09EA  0020               	movlb	0	; select bank0
  7653  09EB  00AC               	movwf	??_setDelayOff_GO
  7654  09EC  0869               	movf	_DelayOff,w
  7655  09ED  0086               	movwf	6
  7656  09EE  0187               	clrf	7
  7657  09EF  082C               	movf	??_setDelayOff_GO,w
  7658  09F0  0081               	movwf	1
  7659                           
  7660                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7661  09F1  300F               	movlw	15
  7662  09F2  052B               	andwf	setDelayOff_GO@value,w
  7663  09F3  00AC               	movwf	??_setDelayOff_GO
  7664  09F4  082C               	movf	??_setDelayOff_GO,w
  7665  09F5  3A05               	xorlw	5
  7666  09F6  1903               	skipnz
  7667  09F7  29FC               	goto	l7907
  7668  09F8  082B               	movf	setDelayOff_GO@value,w
  7669  09F9  390F               	andlw	15
  7670  09FA  1D03               	btfss	3,2
  7671  09FB  2A02               	goto	l7911
  7672  09FC                     l7907:	
  7673  09FC  3026               	movlw	38
  7674  09FD  022B               	subwf	setDelayOff_GO@value,w
  7675  09FE  1803               	skipnc
  7676  09FF  2A02               	goto	l7911
  7677                           
  7678                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7679  0A00  082B               	movf	setDelayOff_GO@value,w
  7680  0A01  2A03               	goto	L2
  7681  0A02                     l7911:	
  7682                           ;DelayOff_B1.c: 94: } else {
  7683                           
  7684                           
  7685                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7686  0A02  3005               	movlw	5
  7687  0A03                     L2:	
  7688  0A03  00AC               	movwf	??_setDelayOff_GO
  7689  0A04  082E               	movf	setDelayOff_GO@sw,w
  7690  0A05  3E1A               	addlw	26
  7691  0A06  076D               	addwf	_product,w
  7692  0A07  00AD               	movwf	??_setDelayOff_GO+1
  7693  0A08  082D               	movf	??_setDelayOff_GO+1,w
  7694  0A09  0086               	movwf	6
  7695  0A0A  3001               	movlw	1	; select bank2/3
  7696  0A0B  0087               	movwf	7
  7697  0A0C  082C               	movf	??_setDelayOff_GO,w
  7698  0A0D  0081               	movwf	1
  7699                           
  7700                           ;DelayOff_B1.c: 96: }
  7701                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7702  0A0E  2A1B               	goto	l7917
  7703  0A0F                     l7913:	
  7704  0A0F  08AA               	movf	setDelayOff_GO@command,f
  7705  0A10  1D03               	skipz
  7706  0A11  2A1B               	goto	l7917
  7707                           
  7708                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  7709  0A12  082E               	movf	setDelayOff_GO@sw,w
  7710  0A13  3E1A               	addlw	26
  7711  0A14  076D               	addwf	_product,w
  7712  0A15  00AC               	movwf	??_setDelayOff_GO
  7713  0A16  082C               	movf	??_setDelayOff_GO,w
  7714  0A17  0086               	movwf	6
  7715  0A18  3001               	movlw	1	; select bank2/3
  7716  0A19  0087               	movwf	7
  7717  0A1A  0181               	clrf	1
  7718  0A1B                     l7917:	
  7719                           
  7720                           ;DelayOff_B1.c: 99: }
  7721                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  7722  0A1B  0869               	movf	_DelayOff,w
  7723  0A1C  0086               	movwf	6
  7724  0A1D  0187               	clrf	7
  7725  0A1E  3000               	movlw	0
  7726  0A1F  3FC0               	movwi [0]fsr1
  7727  0A20  3FC1               	movwi [1]fsr1
  7728                           
  7729                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  7730  0A21  0869               	movf	_DelayOff,w
  7731  0A22  0086               	movwf	6
  7732  0A23  0187               	clrf	7
  7733  0A24  0181               	clrf	1
  7734  0A25  0008               	return
  7735  0A26                     __end_of_setDelayOff_GO:	
  7736                           
  7737                           	psect	text33
  7738  12B6                     __ptext33:	
  7739 ;; *************** function _DelayTimejudge *****************
  7740 ;; Defined at:
  7741 ;;		line 106 in file "../src/DelayOff_B1.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;  value           1    wreg     unsigned char 
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;  value           1    9[BANK0 ] unsigned char 
  7746 ;;  k               1    8[BANK0 ] unsigned char 
  7747 ;;  j               1    7[BANK0 ] unsigned char 
  7748 ;;  i               1    6[BANK0 ] unsigned char 
  7749 ;; Return value:  Size  Location     Type
  7750 ;;                  1    wreg      unsigned char 
  7751 ;; Registers used:
  7752 ;;		wreg, status,2, status,0, pclath, cstack
  7753 ;; Tracked objects:
  7754 ;;		On entry : 0/0
  7755 ;;		On exit  : 0/0
  7756 ;;		Unchanged: 0/0
  7757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7759 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7761 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7762 ;;Total ram usage:        6 bytes
  7763 ;; Hardware stack levels used:    1
  7764 ;; Hardware stack levels required when called:    6
  7765 ;; This function calls:
  7766 ;;		___bmul
  7767 ;; This function is called by:
  7768 ;;		_setDelayOff_GO
  7769 ;; This function uses a non-reentrant model
  7770 ;;
  7771                           
  7772                           
  7773                           ;psect for function _DelayTimejudge
  7774  12B6                     _DelayTimejudge:	
  7775                           
  7776                           ;incstack = 0
  7777                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7778                           ;DelayTimejudge@value stored from wreg
  7779  12B6  0020               	movlb	0	; select bank0
  7780  12B7  00A9               	movwf	DelayTimejudge@value
  7781                           
  7782                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7783  12B8  3005               	movlw	5
  7784  12B9  00A4               	movwf	??_DelayTimejudge
  7785  12BA  0824               	movf	??_DelayTimejudge,w
  7786  12BB  00A6               	movwf	DelayTimejudge@i
  7787  12BC  01A7               	clrf	DelayTimejudge@j
  7788  12BD  01A8               	clrf	DelayTimejudge@k
  7789                           
  7790                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7791  12BE  3031               	movlw	49
  7792  12BF  0229               	subwf	DelayTimejudge@value,w
  7793  12C0  1803               	skipnc
  7794  12C1  2ADE               	goto	l7705
  7795                           
  7796                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7797  12C2  0829               	movf	DelayTimejudge@value,w
  7798  12C3  390F               	andlw	15
  7799  12C4  00A4               	movwf	??_DelayTimejudge
  7800  12C5  0824               	movf	??_DelayTimejudge,w
  7801  12C6  00A7               	movwf	DelayTimejudge@j
  7802                           
  7803                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7804  12C7  0829               	movf	DelayTimejudge@value,w
  7805  12C8  00A4               	movwf	??_DelayTimejudge
  7806  12C9  3004               	movlw	4
  7807  12CA                     u7335:	
  7808  12CA  36A4               	lsrf	??_DelayTimejudge,f
  7809  12CB  0B89               	decfsz	9,f
  7810  12CC  2ACA               	goto	u7335
  7811  12CD  0824               	movf	??_DelayTimejudge,w
  7812  12CE  390F               	andlw	15
  7813  12CF  00A5               	movwf	??_DelayTimejudge+1
  7814  12D0  0825               	movf	??_DelayTimejudge+1,w
  7815  12D1  00A8               	movwf	DelayTimejudge@k
  7816                           
  7817                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7818  12D2  300A               	movlw	10
  7819  12D3  00A4               	movwf	??_DelayTimejudge
  7820  12D4  0824               	movf	??_DelayTimejudge,w
  7821  12D5  00A0               	movwf	___bmul@multiplicand
  7822  12D6  0828               	movf	DelayTimejudge@k,w
  7823  12D7  319F  27A0         	fcall	___bmul
  7824  12D9  0020               	movlb	0	; select bank0
  7825  12DA  0727               	addwf	DelayTimejudge@j,w
  7826  12DB  00A5               	movwf	??_DelayTimejudge+1
  7827  12DC  0825               	movf	??_DelayTimejudge+1,w
  7828  12DD  00A6               	movwf	DelayTimejudge@i
  7829  12DE                     l7705:	
  7830                           
  7831                           ;DelayOff_B1.c: 112: }
  7832                           ;DelayOff_B1.c: 133: return i;
  7833  12DE  0826               	movf	DelayTimejudge@i,w
  7834  12DF  0008               	return
  7835  12E0                     __end_of_DelayTimejudge:	
  7836                           
  7837                           	psect	text34
  7838  1FA0                     __ptext34:	
  7839 ;; *************** function ___bmul *****************
  7840 ;; Defined at:
  7841 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7842 ;; Parameters:    Size  Location     Type
  7843 ;;  multiplier      1    wreg     unsigned char 
  7844 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7845 ;; Auto vars:     Size  Location     Type
  7846 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7847 ;;  product         1    2[BANK0 ] unsigned char 
  7848 ;; Return value:  Size  Location     Type
  7849 ;;                  1    wreg      unsigned char 
  7850 ;; Registers used:
  7851 ;;		wreg, status,2, status,0
  7852 ;; Tracked objects:
  7853 ;;		On entry : 0/0
  7854 ;;		On exit  : 0/0
  7855 ;;		Unchanged: 0/0
  7856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7857 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7858 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7859 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7860 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7861 ;;Total ram usage:        4 bytes
  7862 ;; Hardware stack levels used:    1
  7863 ;; Hardware stack levels required when called:    5
  7864 ;; This function calls:
  7865 ;;		Nothing
  7866 ;; This function is called by:
  7867 ;;		_DelayTimejudge
  7868 ;; This function uses a non-reentrant model
  7869 ;;
  7870                           
  7871                           
  7872                           ;psect for function ___bmul
  7873  1FA0                     ___bmul:	
  7874                           
  7875                           ;incstack = 0
  7876                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7877                           ;___bmul@multiplier stored from wreg
  7878  1FA0  0020               	movlb	0	; select bank0
  7879  1FA1  00A3               	movwf	___bmul@multiplier
  7880  1FA2  01A2               	clrf	___bmul@product
  7881  1FA3                     l7675:	
  7882  1FA3  1C23               	btfss	___bmul@multiplier,0
  7883  1FA4  2FA9               	goto	l7679
  7884  1FA5  0820               	movf	___bmul@multiplicand,w
  7885  1FA6  00A1               	movwf	??___bmul
  7886  1FA7  0821               	movf	??___bmul,w
  7887  1FA8  07A2               	addwf	___bmul@product,f
  7888  1FA9                     l7679:	
  7889  1FA9  1003               	clrc
  7890  1FAA  0DA0               	rlf	___bmul@multiplicand,f
  7891  1FAB  1003               	clrc
  7892  1FAC  0CA3               	rrf	___bmul@multiplier,f
  7893  1FAD  08A3               	movf	___bmul@multiplier,f
  7894  1FAE  1D03               	skipz
  7895  1FAF  2FA3               	goto	l7675
  7896  1FB0  0822               	movf	___bmul@product,w
  7897  1FB1  0008               	return
  7898  1FB2                     __end_of___bmul:	
  7899                           
  7900                           	psect	text35
  7901  146C                     __ptext35:	
  7902 ;; *************** function _setRFSW_AdjControl *****************
  7903 ;; Defined at:
  7904 ;;		line 418 in file "../src/RF_Control_B1.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;  sw              1    wreg     unsigned char 
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;  sw              1   70[BANK0 ] unsigned char 
  7909 ;; Return value:  Size  Location     Type
  7910 ;;		None               void
  7911 ;; Registers used:
  7912 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7919 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7920 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;Total ram usage:        3 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; Hardware stack levels required when called:   10
  7925 ;; This function calls:
  7926 ;;		_RfSWPointSelect
  7927 ;;		_setRF_DimmerValue
  7928 ;;		_setTxData
  7929 ;; This function is called by:
  7930 ;;		_setControl_Lights_Table
  7931 ;; This function uses a non-reentrant model
  7932 ;;
  7933                           
  7934                           
  7935                           ;psect for function _setRFSW_AdjControl
  7936  146C                     _setRFSW_AdjControl:	
  7937                           
  7938                           ;incstack = 0
  7939                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7940                           ;setRFSW_AdjControl@sw stored from wreg
  7941  146C  0020               	movlb	0	; select bank0
  7942  146D  00E6               	movwf	setRFSW_AdjControl@sw
  7943                           
  7944                           ;RF_Control_B1.c: 419: RfSWPointSelect(sw);
  7945  146E  0866               	movf	setRFSW_AdjControl@sw,w
  7946  146F  319E  263F  3194   	fcall	_RfSWPointSelect
  7947                           
  7948                           ;RF_Control_B1.c: 420: if (RFSW->Status == 1) {
  7949  1472  0879               	movf	_RFSW,w
  7950  1473  0086               	movwf	6
  7951  1474  0187               	clrf	7
  7952  1475  1C01               	btfss	1,0
  7953  1476  2C7F               	goto	l8137
  7954                           
  7955                           ;RF_Control_B1.c: 421: Memory.Modify=1;
  7956  1477  0022               	movlb	2	; select bank2
  7957  1478  1461               	bsf	(_Memory^(0+256)+36),0
  7958                           
  7959                           ;RF_Control_B1.c: 422: setRF_DimmerValue(sw);
  7960  1479  0020               	movlb	0	; select bank0
  7961  147A  0866               	movf	setRFSW_AdjControl@sw,w
  7962  147B  3193  23C8  3194   	fcall	_setRF_DimmerValue
  7963                           
  7964                           ;RF_Control_B1.c: 423: } else {
  7965  147E  2C91               	goto	l2159
  7966  147F                     l8137:	
  7967                           
  7968                           ;RF_Control_B1.c: 424: product->Data[9]=product->Data[20 + sw];
  7969  147F  0020               	movlb	0	; select bank0
  7970  1480  0866               	movf	setRFSW_AdjControl@sw,w
  7971  1481  3E14               	addlw	20
  7972  1482  076D               	addwf	_product,w
  7973  1483  00E4               	movwf	??_setRFSW_AdjControl
  7974  1484  0864               	movf	??_setRFSW_AdjControl,w
  7975  1485  0086               	movwf	6
  7976  1486  3001               	movlw	1	; select bank2/3
  7977  1487  0087               	movwf	7
  7978  1488  0801               	movf	1,w
  7979  1489  00E5               	movwf	??_setRFSW_AdjControl+1
  7980  148A  086D               	movf	_product,w
  7981  148B  3E09               	addlw	9
  7982  148C  0086               	movwf	6
  7983  148D  3001               	movlw	1	; select bank2/3
  7984  148E  0087               	movwf	7
  7985  148F  0865               	movf	??_setRFSW_AdjControl+1,w
  7986  1490  0081               	movwf	1
  7987  1491                     l2159:	
  7988                           
  7989                           ;RF_Control_B1.c: 425: }
  7990                           ;RF_Control_B1.c: 426: product->Data[17]=product->Data[26 + sw];
  7991  1491  0020               	movlb	0	; select bank0
  7992  1492  0866               	movf	setRFSW_AdjControl@sw,w
  7993  1493  3E1A               	addlw	26
  7994  1494  076D               	addwf	_product,w
  7995  1495  00E4               	movwf	??_setRFSW_AdjControl
  7996  1496  0864               	movf	??_setRFSW_AdjControl,w
  7997  1497  0086               	movwf	6
  7998  1498  3001               	movlw	1	; select bank2/3
  7999  1499  0087               	movwf	7
  8000  149A  0801               	movf	1,w
  8001  149B  00E5               	movwf	??_setRFSW_AdjControl+1
  8002  149C  086D               	movf	_product,w
  8003  149D  3E11               	addlw	17
  8004  149E  0086               	movwf	6
  8005  149F  3001               	movlw	1	; select bank2/3
  8006  14A0  0087               	movwf	7
  8007  14A1  0865               	movf	??_setRFSW_AdjControl+1,w
  8008  14A2  0081               	movwf	1
  8009                           
  8010                           ;RF_Control_B1.c: 427: setTxData();
  8011  14A3  3185  25B5         	fcall	_setTxData
  8012  14A5  0008               	return
  8013  14A6                     __end_of_setRFSW_AdjControl:	
  8014                           
  8015                           	psect	text36
  8016  13C8                     __ptext36:	
  8017 ;; *************** function _setRF_DimmerValue *****************
  8018 ;; Defined at:
  8019 ;;		line 438 in file "../src/RF_Control_B1.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;  lights          1    wreg     unsigned char 
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;  lights          1   67[BANK0 ] unsigned char 
  8024 ;; Return value:  Size  Location     Type
  8025 ;;		None               void
  8026 ;; Registers used:
  8027 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8035 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8036 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8037 ;;Total ram usage:        3 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; Hardware stack levels required when called:    9
  8040 ;; This function calls:
  8041 ;;		_setDimmerLights_AdjRF
  8042 ;; This function is called by:
  8043 ;;		_setRFSW_AdjControl
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           
  8048                           ;psect for function _setRF_DimmerValue
  8049  13C8                     _setRF_DimmerValue:	
  8050                           
  8051                           ;incstack = 0
  8052                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8053                           ;setRF_DimmerValue@lights stored from wreg
  8054  13C8  0020               	movlb	0	; select bank0
  8055  13C9  00E3               	movwf	setRF_DimmerValue@lights
  8056                           
  8057                           ;RF_Control_B1.c: 439: if (RF_Data[9] > 0x64) {
  8058  13CA  3065               	movlw	101
  8059  13CB  0022               	movlb	2	; select bank2
  8060  13CC  0229               	subwf	(_RF_Data^(0+256)+9),w
  8061  13CD  1C03               	skipc
  8062  13CE  2BD5               	goto	l7981
  8063                           
  8064                           ;RF_Control_B1.c: 440: RF_Data[9] = 0x64;
  8065  13CF  3064               	movlw	100
  8066  13D0  0020               	movlb	0	; select bank0
  8067  13D1  00E1               	movwf	??_setRF_DimmerValue
  8068  13D2  0861               	movf	??_setRF_DimmerValue,w
  8069  13D3  0022               	movlb	2	; select bank2
  8070  13D4  00A9               	movwf	(_RF_Data^(0+256)+9)
  8071  13D5                     l7981:	
  8072                           
  8073                           ;RF_Control_B1.c: 441: }
  8074                           ;RF_Control_B1.c: 442: product->Data[9]=RF_Data[9];
  8075  13D5  0829               	movf	(_RF_Data^(0+256)+9),w
  8076  13D6  0020               	movlb	0	; select bank0
  8077  13D7  00E1               	movwf	??_setRF_DimmerValue
  8078  13D8  086D               	movf	_product,w
  8079  13D9  3E09               	addlw	9
  8080  13DA  0086               	movwf	6
  8081  13DB  3001               	movlw	1	; select bank2/3
  8082  13DC  0087               	movwf	7
  8083  13DD  0861               	movf	??_setRF_DimmerValue,w
  8084  13DE  0081               	movwf	1
  8085                           
  8086                           ;RF_Control_B1.c: 443: product->Data[11]=lights;
  8087  13DF  0863               	movf	setRF_DimmerValue@lights,w
  8088  13E0  00E1               	movwf	??_setRF_DimmerValue
  8089  13E1  086D               	movf	_product,w
  8090  13E2  3E0B               	addlw	11
  8091  13E3  0086               	movwf	6
  8092  13E4  3001               	movlw	1	; select bank2/3
  8093  13E5  0087               	movwf	7
  8094  13E6  0861               	movf	??_setRF_DimmerValue,w
  8095  13E7  0081               	movwf	1
  8096                           
  8097                           ;RF_Control_B1.c: 444: product->Data[(20 + lights)]=product->Data[9];
  8098  13E8  086D               	movf	_product,w
  8099  13E9  3E09               	addlw	9
  8100  13EA  0086               	movwf	6
  8101  13EB  3001               	movlw	1	; select bank2/3
  8102  13EC  0087               	movwf	7
  8103  13ED  0801               	movf	1,w
  8104  13EE  00E1               	movwf	??_setRF_DimmerValue
  8105  13EF  0863               	movf	setRF_DimmerValue@lights,w
  8106  13F0  3E14               	addlw	20
  8107  13F1  076D               	addwf	_product,w
  8108  13F2  00E2               	movwf	??_setRF_DimmerValue+1
  8109  13F3  0862               	movf	??_setRF_DimmerValue+1,w
  8110  13F4  0086               	movwf	6
  8111  13F5  3001               	movlw	1	; select bank2/3
  8112  13F6  0087               	movwf	7
  8113  13F7  0861               	movf	??_setRF_DimmerValue,w
  8114  13F8  0081               	movwf	1
  8115                           
  8116                           ;RF_Control_B1.c: 445: setDimmerLights_AdjRF(lights);
  8117  13F9  0863               	movf	setRF_DimmerValue@lights,w
  8118  13FA  3192  221C         	fcall	_setDimmerLights_AdjRF
  8119  13FC  0008               	return
  8120  13FD                     __end_of_setRF_DimmerValue:	
  8121                           
  8122                           	psect	text37
  8123  121C                     __ptext37:	
  8124 ;; *************** function _setDimmerLights_AdjRF *****************
  8125 ;; Defined at:
  8126 ;;		line 688 in file "../src/Dimmer_B1.c"
  8127 ;; Parameters:    Size  Location     Type
  8128 ;;  lights          1    wreg     unsigned char 
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;  lights          1   64[BANK0 ] unsigned char 
  8131 ;; Return value:  Size  Location     Type
  8132 ;;		None               void
  8133 ;; Registers used:
  8134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8141 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8143 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;Total ram usage:        2 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:    8
  8147 ;; This function calls:
  8148 ;;		_DimmerLightsPointSelect
  8149 ;;		_getPercentValue
  8150 ;; This function is called by:
  8151 ;;		_setRF_DimmerValue
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           
  8156                           ;psect for function _setDimmerLights_AdjRF
  8157  121C                     _setDimmerLights_AdjRF:	
  8158                           
  8159                           ;incstack = 0
  8160                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8161                           ;setDimmerLights_AdjRF@lights stored from wreg
  8162  121C  0020               	movlb	0	; select bank0
  8163  121D  00E0               	movwf	setDimmerLights_AdjRF@lights
  8164                           
  8165                           ;Dimmer_B1.c: 690: DimmerLightsPointSelect(lights);
  8166  121E  0860               	movf	setDimmerLights_AdjRF@lights,w
  8167  121F  319E  2634  3192   	fcall	_DimmerLightsPointSelect
  8168                           
  8169                           ;Dimmer_B1.c: 691: DimmerLights->AdjRF = 1;
  8170  1222  0020               	movlb	0	; select bank0
  8171  1223  086A               	movf	_DimmerLights,w
  8172  1224  0086               	movwf	6
  8173  1225  3001               	movlw	1	; select bank2/3
  8174  1226  0087               	movwf	7
  8175  1227  1501               	bsf	1,2
  8176                           
  8177                           ;Dimmer_B1.c: 692: DimmerLights->Signal = 1;
  8178  1228  086A               	movf	_DimmerLights,w
  8179  1229  0086               	movwf	6
  8180  122A  3001               	movlw	1	; select bank2/3
  8181  122B  0087               	movwf	7
  8182  122C  1481               	bsf	1,1
  8183                           
  8184                           ;Dimmer_B1.c: 693: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8185  122D  086D               	movf	_product,w
  8186  122E  3E09               	addlw	9
  8187  122F  0086               	movwf	6
  8188  1230  3001               	movlw	1	; select bank2/3
  8189  1231  0087               	movwf	7
  8190  1232  0801               	movf	1,w
  8191  1233  3189  210E         	fcall	_getPercentValue
  8192  1235  0020               	movlb	0	; select bank0
  8193  1236  00DF               	movwf	??_setDimmerLights_AdjRF
  8194  1237  086A               	movf	_DimmerLights,w
  8195  1238  3E05               	addlw	5
  8196  1239  0086               	movwf	6
  8197  123A  3001               	movlw	1	; select bank2/3
  8198  123B  0087               	movwf	7
  8199  123C  085F               	movf	??_setDimmerLights_AdjRF,w
  8200  123D  0081               	movwf	1
  8201  123E  0008               	return
  8202  123F                     __end_of_setDimmerLights_AdjRF:	
  8203                           
  8204                           	psect	text38
  8205  090E                     __ptext38:	
  8206 ;; *************** function _getPercentValue *****************
  8207 ;; Defined at:
  8208 ;;		line 761 in file "../src/Dimmer_B1.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;  value           1    wreg     unsigned char 
  8211 ;; Auto vars:     Size  Location     Type
  8212 ;;  value           1   59[BANK0 ] unsigned char 
  8213 ;;  i               3   60[BANK0 ] float 
  8214 ;; Return value:  Size  Location     Type
  8215 ;;                  1    wreg      unsigned char 
  8216 ;; Registers used:
  8217 ;;		wreg, status,2, status,0, pclath, cstack
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;Total ram usage:        6 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    7
  8230 ;; This function calls:
  8231 ;;		___awtoft
  8232 ;;		___ftadd
  8233 ;;		___ftdiv
  8234 ;;		___ftmul
  8235 ;;		___fttol
  8236 ;; This function is called by:
  8237 ;;		_setDimmerLights_AdjRF
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           
  8242                           ;psect for function _getPercentValue
  8243  090E                     _getPercentValue:	
  8244                           
  8245                           ;incstack = 0
  8246                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8247                           ;getPercentValue@value stored from wreg
  8248  090E  0020               	movlb	0	; select bank0
  8249  090F  00DB               	movwf	getPercentValue@value
  8250                           
  8251                           ;Dimmer_B1.c: 763: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8252  0910  3000               	movlw	0
  8253  0911  00DC               	movwf	getPercentValue@i
  8254  0912  30E0               	movlw	224
  8255  0913  00DD               	movwf	getPercentValue@i+1
  8256  0914  3041               	movlw	65
  8257  0915  00DE               	movwf	getPercentValue@i+2
  8258                           
  8259                           ;Dimmer_B1.c: 764: i /= 100;
  8260  0916  3000               	movlw	0
  8261  0917  00AE               	movwf	___ftdiv@f2
  8262  0918  30C8               	movlw	200
  8263  0919  00AF               	movwf	___ftdiv@f2+1
  8264  091A  3042               	movlw	66
  8265  091B  00B0               	movwf	___ftdiv@f2+2
  8266  091C  085C               	movf	getPercentValue@i,w
  8267  091D  00B1               	movwf	___ftdiv@f1
  8268  091E  085D               	movf	getPercentValue@i+1,w
  8269  091F  00B2               	movwf	___ftdiv@f1+1
  8270  0920  085E               	movf	getPercentValue@i+2,w
  8271  0921  00B3               	movwf	___ftdiv@f1+2
  8272  0922  3187  2728  3189   	fcall	___ftdiv
  8273  0925  0020               	movlb	0	; select bank0
  8274  0926  082E               	movf	?___ftdiv,w
  8275  0927  00DC               	movwf	getPercentValue@i
  8276  0928  082F               	movf	?___ftdiv+1,w
  8277  0929  00DD               	movwf	getPercentValue@i+1
  8278  092A  0830               	movf	?___ftdiv+2,w
  8279  092B  00DE               	movwf	getPercentValue@i+2
  8280                           
  8281                           ;Dimmer_B1.c: 765: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8282  092C  085B               	movf	getPercentValue@value,w
  8283  092D  00D9               	movwf	??_getPercentValue
  8284  092E  01DA               	clrf	??_getPercentValue+1
  8285  092F  09D9               	comf	??_getPercentValue,f
  8286  0930  09DA               	comf	??_getPercentValue+1,f
  8287  0931  0AD9               	incf	??_getPercentValue,f
  8288  0932  1903               	skipnz
  8289  0933  0ADA               	incf	??_getPercentValue+1,f
  8290  0934  0859               	movf	??_getPercentValue,w
  8291  0935  3E64               	addlw	100
  8292  0936  00A8               	movwf	___awtoft@c
  8293  0937  3000               	movlw	0
  8294  0938  3D5A               	addwfc	??_getPercentValue+1,w
  8295  0939  00A9               	movwf	___awtoft@c+1
  8296  093A  3191  21B5  3189   	fcall	___awtoft
  8297  093D  0020               	movlb	0	; select bank0
  8298  093E  0828               	movf	?___awtoft,w
  8299  093F  00B1               	movwf	___ftmul@f2
  8300  0940  0829               	movf	?___awtoft+1,w
  8301  0941  00B2               	movwf	___ftmul@f2+1
  8302  0942  082A               	movf	?___awtoft+2,w
  8303  0943  00B3               	movwf	___ftmul@f2+2
  8304  0944  085C               	movf	getPercentValue@i,w
  8305  0945  00AE               	movwf	___ftmul@f1
  8306  0946  085D               	movf	getPercentValue@i+1,w
  8307  0947  00AF               	movwf	___ftmul@f1+1
  8308  0948  085E               	movf	getPercentValue@i+2,w
  8309  0949  00B0               	movwf	___ftmul@f1+2
  8310  094A  3186  2674  3189   	fcall	___ftmul
  8311  094D  0020               	movlb	0	; select bank0
  8312  094E  082E               	movf	?___ftmul,w
  8313  094F  00C1               	movwf	___ftadd@f2
  8314  0950  082F               	movf	?___ftmul+1,w
  8315  0951  00C2               	movwf	___ftadd@f2+1
  8316  0952  0830               	movf	?___ftmul+2,w
  8317  0953  00C3               	movwf	___ftadd@f2+2
  8318  0954  3000               	movlw	0
  8319  0955  00BE               	movwf	___ftadd@f1
  8320  0956  3000               	movlw	0
  8321  0957  00BF               	movwf	___ftadd@f1+1
  8322  0958  3042               	movlw	66
  8323  0959  00C0               	movwf	___ftadd@f1+2
  8324  095A  3183  232B  3189   	fcall	___ftadd
  8325  095D  0020               	movlb	0	; select bank0
  8326  095E  083E               	movf	?___ftadd,w
  8327  095F  00CB               	movwf	___fttol@f1
  8328  0960  083F               	movf	?___ftadd+1,w
  8329  0961  00CC               	movwf	___fttol@f1+1
  8330  0962  0840               	movf	?___ftadd+2,w
  8331  0963  00CD               	movwf	___fttol@f1+2
  8332  0964  318E  26EE         	fcall	___fttol
  8333  0966  0020               	movlb	0	; select bank0
  8334  0967  084B               	movf	?___fttol,w
  8335  0968  0008               	return
  8336  0969                     __end_of_getPercentValue:	
  8337                           
  8338                           	psect	text39
  8339  0674                     __ptext39:	
  8340 ;; *************** function ___ftmul *****************
  8341 ;; Defined at:
  8342 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8343 ;; Parameters:    Size  Location     Type
  8344 ;;  f1              3   14[BANK0 ] float 
  8345 ;;  f2              3   17[BANK0 ] float 
  8346 ;; Auto vars:     Size  Location     Type
  8347 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8348 ;;  sign            1   29[BANK0 ] unsigned char 
  8349 ;;  cntr            1   28[BANK0 ] unsigned char 
  8350 ;;  exp             1   24[BANK0 ] unsigned char 
  8351 ;; Return value:  Size  Location     Type
  8352 ;;                  3   14[BANK0 ] float 
  8353 ;; Registers used:
  8354 ;;		wreg, status,2, status,0, pclath, cstack
  8355 ;; Tracked objects:
  8356 ;;		On entry : 0/0
  8357 ;;		On exit  : 0/0
  8358 ;;		Unchanged: 0/0
  8359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8360 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8361 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8362 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8363 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8364 ;;Total ram usage:       16 bytes
  8365 ;; Hardware stack levels used:    1
  8366 ;; Hardware stack levels required when called:    6
  8367 ;; This function calls:
  8368 ;;		___ftpack
  8369 ;; This function is called by:
  8370 ;;		_getPercentValue
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           
  8375                           ;psect for function ___ftmul
  8376  0674                     ___ftmul:	
  8377                           
  8378                           ;incstack = 0
  8379                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8380  0674  0020               	movlb	0	; select bank0
  8381  0675  082E               	movf	___ftmul@f1,w
  8382  0676  00B4               	movwf	??___ftmul
  8383  0677  082F               	movf	___ftmul@f1+1,w
  8384  0678  00B5               	movwf	??___ftmul+1
  8385  0679  0830               	movf	___ftmul@f1+2,w
  8386  067A  00B6               	movwf	??___ftmul+2
  8387  067B  1003               	clrc
  8388  067C  0D35               	rlf	??___ftmul+1,w
  8389  067D  0D36               	rlf	??___ftmul+2,w
  8390  067E  00B7               	movwf	??___ftmul+3
  8391  067F  0837               	movf	??___ftmul+3,w
  8392  0680  00B8               	movwf	___ftmul@exp
  8393  0681  08B8               	movf	___ftmul@exp,f
  8394  0682  1D03               	skipz
  8395  0683  2E8B               	goto	l5489
  8396  0684  3000               	movlw	0
  8397  0685  00AE               	movwf	?___ftmul
  8398  0686  3000               	movlw	0
  8399  0687  00AF               	movwf	?___ftmul+1
  8400  0688  3000               	movlw	0
  8401  0689  00B0               	movwf	?___ftmul+2
  8402  068A  0008               	return
  8403  068B                     l5489:	
  8404  068B  0831               	movf	___ftmul@f2,w
  8405  068C  00B4               	movwf	??___ftmul
  8406  068D  0832               	movf	___ftmul@f2+1,w
  8407  068E  00B5               	movwf	??___ftmul+1
  8408  068F  0833               	movf	___ftmul@f2+2,w
  8409  0690  00B6               	movwf	??___ftmul+2
  8410  0691  1003               	clrc
  8411  0692  0D35               	rlf	??___ftmul+1,w
  8412  0693  0D36               	rlf	??___ftmul+2,w
  8413  0694  00B7               	movwf	??___ftmul+3
  8414  0695  0837               	movf	??___ftmul+3,w
  8415  0696  00BD               	movwf	___ftmul@sign
  8416  0697  08BD               	movf	___ftmul@sign,f
  8417  0698  1D03               	skipz
  8418  0699  2EA1               	goto	l5495
  8419  069A  3000               	movlw	0
  8420  069B  00AE               	movwf	?___ftmul
  8421  069C  3000               	movlw	0
  8422  069D  00AF               	movwf	?___ftmul+1
  8423  069E  3000               	movlw	0
  8424  069F  00B0               	movwf	?___ftmul+2
  8425  06A0  0008               	return
  8426  06A1                     l5495:	
  8427  06A1  083D               	movf	___ftmul@sign,w
  8428  06A2  3E7B               	addlw	123
  8429  06A3  00B4               	movwf	??___ftmul
  8430  06A4  0834               	movf	??___ftmul,w
  8431  06A5  07B8               	addwf	___ftmul@exp,f
  8432  06A6  082E               	movf	___ftmul@f1,w
  8433  06A7  00B4               	movwf	??___ftmul
  8434  06A8  082F               	movf	___ftmul@f1+1,w
  8435  06A9  00B5               	movwf	??___ftmul+1
  8436  06AA  0830               	movf	___ftmul@f1+2,w
  8437  06AB  00B6               	movwf	??___ftmul+2
  8438  06AC  3010               	movlw	16
  8439  06AD                     u4095:	
  8440  06AD  36B6               	lsrf	??___ftmul+2,f
  8441  06AE  0CB5               	rrf	??___ftmul+1,f
  8442  06AF  0CB4               	rrf	??___ftmul,f
  8443  06B0  0B89               	decfsz	9,f
  8444  06B1  2EAD               	goto	u4095
  8445  06B2  0834               	movf	??___ftmul,w
  8446  06B3  00B7               	movwf	??___ftmul+3
  8447  06B4  0837               	movf	??___ftmul+3,w
  8448  06B5  00BD               	movwf	___ftmul@sign
  8449  06B6  0831               	movf	___ftmul@f2,w
  8450  06B7  00B4               	movwf	??___ftmul
  8451  06B8  0832               	movf	___ftmul@f2+1,w
  8452  06B9  00B5               	movwf	??___ftmul+1
  8453  06BA  0833               	movf	___ftmul@f2+2,w
  8454  06BB  00B6               	movwf	??___ftmul+2
  8455  06BC  3010               	movlw	16
  8456  06BD                     u4105:	
  8457  06BD  36B6               	lsrf	??___ftmul+2,f
  8458  06BE  0CB5               	rrf	??___ftmul+1,f
  8459  06BF  0CB4               	rrf	??___ftmul,f
  8460  06C0  0B89               	decfsz	9,f
  8461  06C1  2EBD               	goto	u4105
  8462  06C2  0834               	movf	??___ftmul,w
  8463  06C3  00B7               	movwf	??___ftmul+3
  8464  06C4  0837               	movf	??___ftmul+3,w
  8465  06C5  06BD               	xorwf	___ftmul@sign,f
  8466  06C6  3080               	movlw	128
  8467  06C7  00B4               	movwf	??___ftmul
  8468  06C8  0834               	movf	??___ftmul,w
  8469  06C9  05BD               	andwf	___ftmul@sign,f
  8470  06CA  17AF               	bsf	___ftmul@f1+1,7
  8471  06CB  17B2               	bsf	___ftmul@f2+1,7
  8472  06CC  30FF               	movlw	255
  8473  06CD  05B1               	andwf	___ftmul@f2,f
  8474  06CE  30FF               	movlw	255
  8475  06CF  05B2               	andwf	___ftmul@f2+1,f
  8476  06D0  3000               	movlw	0
  8477  06D1  05B3               	andwf	___ftmul@f2+2,f
  8478  06D2  3000               	movlw	0
  8479  06D3  00B9               	movwf	___ftmul@f3_as_product
  8480  06D4  3000               	movlw	0
  8481  06D5  00BA               	movwf	___ftmul@f3_as_product+1
  8482  06D6  3000               	movlw	0
  8483  06D7  00BB               	movwf	___ftmul@f3_as_product+2
  8484  06D8  3007               	movlw	7
  8485  06D9  00B4               	movwf	??___ftmul
  8486  06DA  0834               	movf	??___ftmul,w
  8487  06DB  00BC               	movwf	___ftmul@cntr
  8488  06DC                     l5507:	
  8489  06DC  1C2E               	btfss	___ftmul@f1,0
  8490  06DD  2EE4               	goto	l5511
  8491  06DE  0831               	movf	___ftmul@f2,w
  8492  06DF  07B9               	addwf	___ftmul@f3_as_product,f
  8493  06E0  0832               	movf	___ftmul@f2+1,w
  8494  06E1  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8495  06E2  0833               	movf	___ftmul@f2+2,w
  8496  06E3  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8497  06E4                     l5511:	
  8498  06E4  3001               	movlw	1
  8499  06E5                     u4125:	
  8500  06E5  36B0               	lsrf	___ftmul@f1+2,f
  8501  06E6  0CAF               	rrf	___ftmul@f1+1,f
  8502  06E7  0CAE               	rrf	___ftmul@f1,f
  8503  06E8  0B89               	decfsz	9,f
  8504  06E9  2EE5               	goto	u4125
  8505  06EA  3001               	movlw	1
  8506  06EB                     u4135:	
  8507  06EB  35B1               	lslf	___ftmul@f2,f
  8508  06EC  0DB2               	rlf	___ftmul@f2+1,f
  8509  06ED  0DB3               	rlf	___ftmul@f2+2,f
  8510  06EE  0B89               	decfsz	9,f
  8511  06EF  2EEB               	goto	u4135
  8512  06F0  3001               	movlw	1
  8513  06F1  02BC               	subwf	___ftmul@cntr,f
  8514  06F2  1D03               	btfss	3,2
  8515  06F3  2EDC               	goto	l5507
  8516  06F4  3009               	movlw	9
  8517  06F5  00B4               	movwf	??___ftmul
  8518  06F6  0834               	movf	??___ftmul,w
  8519  06F7  00BC               	movwf	___ftmul@cntr
  8520  06F8                     l5519:	
  8521  06F8  1C2E               	btfss	___ftmul@f1,0
  8522  06F9  2F00               	goto	l5523
  8523  06FA  0831               	movf	___ftmul@f2,w
  8524  06FB  07B9               	addwf	___ftmul@f3_as_product,f
  8525  06FC  0832               	movf	___ftmul@f2+1,w
  8526  06FD  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8527  06FE  0833               	movf	___ftmul@f2+2,w
  8528  06FF  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8529  0700                     l5523:	
  8530  0700  3001               	movlw	1
  8531  0701                     u4165:	
  8532  0701  36B0               	lsrf	___ftmul@f1+2,f
  8533  0702  0CAF               	rrf	___ftmul@f1+1,f
  8534  0703  0CAE               	rrf	___ftmul@f1,f
  8535  0704  0B89               	decfsz	9,f
  8536  0705  2F01               	goto	u4165
  8537  0706  3001               	movlw	1
  8538  0707                     u4175:	
  8539  0707  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8540  0708  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8541  0709  0CB9               	rrf	___ftmul@f3_as_product,f
  8542  070A  0B89               	decfsz	9,f
  8543  070B  2F07               	goto	u4175
  8544  070C  3001               	movlw	1
  8545  070D  02BC               	subwf	___ftmul@cntr,f
  8546  070E  1D03               	btfss	3,2
  8547  070F  2EF8               	goto	l5519
  8548  0710  0839               	movf	___ftmul@f3_as_product,w
  8549  0711  00A0               	movwf	___ftpack@arg
  8550  0712  083A               	movf	___ftmul@f3_as_product+1,w
  8551  0713  00A1               	movwf	___ftpack@arg+1
  8552  0714  083B               	movf	___ftmul@f3_as_product+2,w
  8553  0715  00A2               	movwf	___ftpack@arg+2
  8554  0716  0838               	movf	___ftmul@exp,w
  8555  0717  00B4               	movwf	??___ftmul
  8556  0718  0834               	movf	??___ftmul,w
  8557  0719  00A3               	movwf	___ftpack@exp
  8558  071A  083D               	movf	___ftmul@sign,w
  8559  071B  00B5               	movwf	??___ftmul+1
  8560  071C  0835               	movf	??___ftmul+1,w
  8561  071D  00A4               	movwf	___ftpack@sign
  8562  071E  318A  2226         	fcall	___ftpack
  8563  0720  0020               	movlb	0	; select bank0
  8564  0721  0820               	movf	?___ftpack,w
  8565  0722  00AE               	movwf	?___ftmul
  8566  0723  0821               	movf	?___ftpack+1,w
  8567  0724  00AF               	movwf	?___ftmul+1
  8568  0725  0822               	movf	?___ftpack+2,w
  8569  0726  00B0               	movwf	?___ftmul+2
  8570  0727  0008               	return
  8571  0728                     __end_of___ftmul:	
  8572                           
  8573                           	psect	text40
  8574  032B                     __ptext40:	
  8575 ;; *************** function ___ftadd *****************
  8576 ;; Defined at:
  8577 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8578 ;; Parameters:    Size  Location     Type
  8579 ;;  f1              3   30[BANK0 ] float 
  8580 ;;  f2              3   33[BANK0 ] float 
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;  exp1            1   42[BANK0 ] unsigned char 
  8583 ;;  exp2            1   41[BANK0 ] unsigned char 
  8584 ;;  sign            1   40[BANK0 ] unsigned char 
  8585 ;; Return value:  Size  Location     Type
  8586 ;;                  3   30[BANK0 ] float 
  8587 ;; Registers used:
  8588 ;;		wreg, status,2, status,0, pclath, cstack
  8589 ;; Tracked objects:
  8590 ;;		On entry : 0/0
  8591 ;;		On exit  : 0/0
  8592 ;;		Unchanged: 0/0
  8593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8594 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8595 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8596 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8597 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;Total ram usage:       13 bytes
  8599 ;; Hardware stack levels used:    1
  8600 ;; Hardware stack levels required when called:    6
  8601 ;; This function calls:
  8602 ;;		___ftpack
  8603 ;; This function is called by:
  8604 ;;		_getPercentValue
  8605 ;; This function uses a non-reentrant model
  8606 ;;
  8607                           
  8608                           
  8609                           ;psect for function ___ftadd
  8610  032B                     ___ftadd:	
  8611                           
  8612                           ;incstack = 0
  8613                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8614  032B  0020               	movlb	0	; select bank0
  8615  032C  083E               	movf	___ftadd@f1,w
  8616  032D  00C4               	movwf	??___ftadd
  8617  032E  083F               	movf	___ftadd@f1+1,w
  8618  032F  00C5               	movwf	??___ftadd+1
  8619  0330  0840               	movf	___ftadd@f1+2,w
  8620  0331  00C6               	movwf	??___ftadd+2
  8621  0332  1003               	clrc
  8622  0333  0D45               	rlf	??___ftadd+1,w
  8623  0334  0D46               	rlf	??___ftadd+2,w
  8624  0335  00C7               	movwf	??___ftadd+3
  8625  0336  0847               	movf	??___ftadd+3,w
  8626  0337  00CA               	movwf	___ftadd@exp1
  8627  0338  0841               	movf	___ftadd@f2,w
  8628  0339  00C4               	movwf	??___ftadd
  8629  033A  0842               	movf	___ftadd@f2+1,w
  8630  033B  00C5               	movwf	??___ftadd+1
  8631  033C  0843               	movf	___ftadd@f2+2,w
  8632  033D  00C6               	movwf	??___ftadd+2
  8633  033E  1003               	clrc
  8634  033F  0D45               	rlf	??___ftadd+1,w
  8635  0340  0D46               	rlf	??___ftadd+2,w
  8636  0341  00C7               	movwf	??___ftadd+3
  8637  0342  0847               	movf	??___ftadd+3,w
  8638  0343  00C9               	movwf	___ftadd@exp2
  8639  0344  084A               	movf	___ftadd@exp1,w
  8640  0345  1903               	btfsc	3,2
  8641  0346  2B53               	goto	l5377
  8642  0347  0849               	movf	___ftadd@exp2,w
  8643  0348  024A               	subwf	___ftadd@exp1,w
  8644  0349  1803               	skipnc
  8645  034A  2B5A               	goto	l5381
  8646  034B  034A               	decf	___ftadd@exp1,w
  8647  034C  3AFF               	xorlw	255
  8648  034D  0749               	addwf	___ftadd@exp2,w
  8649  034E  00C4               	movwf	??___ftadd
  8650  034F  3019               	movlw	25
  8651  0350  0244               	subwf	??___ftadd,w
  8652  0351  1C03               	skipc
  8653  0352  2B5A               	goto	l5381
  8654  0353                     l5377:	
  8655  0353  0841               	movf	___ftadd@f2,w
  8656  0354  00BE               	movwf	?___ftadd
  8657  0355  0842               	movf	___ftadd@f2+1,w
  8658  0356  00BF               	movwf	?___ftadd+1
  8659  0357  0843               	movf	___ftadd@f2+2,w
  8660  0358  00C0               	movwf	?___ftadd+2
  8661  0359  0008               	return
  8662  035A                     l5381:	
  8663  035A  0849               	movf	___ftadd@exp2,w
  8664  035B  1903               	btfsc	3,2
  8665  035C  0008               	return
  8666  035D  084A               	movf	___ftadd@exp1,w
  8667  035E  0249               	subwf	___ftadd@exp2,w
  8668  035F  1803               	skipnc
  8669  0360  2B69               	goto	l5387
  8670  0361  0349               	decf	___ftadd@exp2,w
  8671  0362  3AFF               	xorlw	255
  8672  0363  074A               	addwf	___ftadd@exp1,w
  8673  0364  00C4               	movwf	??___ftadd
  8674  0365  3019               	movlw	25
  8675  0366  0244               	subwf	??___ftadd,w
  8676  0367  1803               	btfsc	3,0
  8677  0368  0008               	return
  8678  0369                     l5387:	
  8679  0369  3006               	movlw	6
  8680  036A  00C4               	movwf	??___ftadd
  8681  036B  0844               	movf	??___ftadd,w
  8682  036C  00C8               	movwf	___ftadd@sign
  8683  036D  1BC0               	btfsc	___ftadd@f1+2,7
  8684  036E  17C8               	bsf	___ftadd@sign,7
  8685  036F  1BC3               	btfsc	___ftadd@f2+2,7
  8686  0370  1748               	bsf	___ftadd@sign,6
  8687  0371  17BF               	bsf	___ftadd@f1+1,7
  8688  0372  30FF               	movlw	255
  8689  0373  05BE               	andwf	___ftadd@f1,f
  8690  0374  30FF               	movlw	255
  8691  0375  05BF               	andwf	___ftadd@f1+1,f
  8692  0376  3000               	movlw	0
  8693  0377  05C0               	andwf	___ftadd@f1+2,f
  8694  0378  17C2               	bsf	___ftadd@f2+1,7
  8695  0379  30FF               	movlw	255
  8696  037A  05C1               	andwf	___ftadd@f2,f
  8697  037B  30FF               	movlw	255
  8698  037C  05C2               	andwf	___ftadd@f2+1,f
  8699  037D  3000               	movlw	0
  8700  037E  05C3               	andwf	___ftadd@f2+2,f
  8701  037F  0849               	movf	___ftadd@exp2,w
  8702  0380  024A               	subwf	___ftadd@exp1,w
  8703  0381  1803               	skipnc
  8704  0382  2BA5               	goto	l5409
  8705  0383                     l5399:	
  8706  0383  3001               	movlw	1
  8707  0384                     u3855:	
  8708  0384  35C1               	lslf	___ftadd@f2,f
  8709  0385  0DC2               	rlf	___ftadd@f2+1,f
  8710  0386  0DC3               	rlf	___ftadd@f2+2,f
  8711  0387  0B89               	decfsz	9,f
  8712  0388  2B84               	goto	u3855
  8713  0389  3001               	movlw	1
  8714  038A  02C9               	subwf	___ftadd@exp2,f
  8715  038B  0849               	movf	___ftadd@exp2,w
  8716  038C  064A               	xorwf	___ftadd@exp1,w
  8717  038D  1903               	skipnz
  8718  038E  2BA0               	goto	l5407
  8719  038F  3001               	movlw	1
  8720  0390  02C8               	subwf	___ftadd@sign,f
  8721  0391  0848               	movf	___ftadd@sign,w
  8722  0392  3907               	andlw	7
  8723  0393  1903               	btfsc	3,2
  8724  0394  2BA0               	goto	l5407
  8725  0395  2B83               	goto	l5399
  8726  0396                     l5405:	
  8727  0396  3001               	movlw	1
  8728  0397                     u3885:	
  8729  0397  36C0               	lsrf	___ftadd@f1+2,f
  8730  0398  0CBF               	rrf	___ftadd@f1+1,f
  8731  0399  0CBE               	rrf	___ftadd@f1,f
  8732  039A  0B89               	decfsz	9,f
  8733  039B  2B97               	goto	u3885
  8734  039C  3001               	movlw	1
  8735  039D  00C4               	movwf	??___ftadd
  8736  039E  0844               	movf	??___ftadd,w
  8737  039F  07CA               	addwf	___ftadd@exp1,f
  8738  03A0                     l5407:	
  8739  03A0  084A               	movf	___ftadd@exp1,w
  8740  03A1  0649               	xorwf	___ftadd@exp2,w
  8741  03A2  1903               	btfsc	3,2
  8742  03A3  2BCA               	goto	l2810
  8743  03A4  2B96               	goto	l5405
  8744  03A5                     l5409:	
  8745  03A5  084A               	movf	___ftadd@exp1,w
  8746  03A6  0249               	subwf	___ftadd@exp2,w
  8747  03A7  1803               	skipnc
  8748  03A8  2BCA               	goto	l2810
  8749  03A9                     l5411:	
  8750  03A9  3001               	movlw	1
  8751  03AA                     u3915:	
  8752  03AA  35BE               	lslf	___ftadd@f1,f
  8753  03AB  0DBF               	rlf	___ftadd@f1+1,f
  8754  03AC  0DC0               	rlf	___ftadd@f1+2,f
  8755  03AD  0B89               	decfsz	9,f
  8756  03AE  2BAA               	goto	u3915
  8757  03AF  3001               	movlw	1
  8758  03B0  02CA               	subwf	___ftadd@exp1,f
  8759  03B1  0849               	movf	___ftadd@exp2,w
  8760  03B2  064A               	xorwf	___ftadd@exp1,w
  8761  03B3  1903               	skipnz
  8762  03B4  2BC6               	goto	l5419
  8763  03B5  3001               	movlw	1
  8764  03B6  02C8               	subwf	___ftadd@sign,f
  8765  03B7  0848               	movf	___ftadd@sign,w
  8766  03B8  3907               	andlw	7
  8767  03B9  1903               	btfsc	3,2
  8768  03BA  2BC6               	goto	l5419
  8769  03BB  2BA9               	goto	l5411
  8770  03BC                     l5417:	
  8771  03BC  3001               	movlw	1
  8772  03BD                     u3945:	
  8773  03BD  36C3               	lsrf	___ftadd@f2+2,f
  8774  03BE  0CC2               	rrf	___ftadd@f2+1,f
  8775  03BF  0CC1               	rrf	___ftadd@f2,f
  8776  03C0  0B89               	decfsz	9,f
  8777  03C1  2BBD               	goto	u3945
  8778  03C2  3001               	movlw	1
  8779  03C3  00C4               	movwf	??___ftadd
  8780  03C4  0844               	movf	??___ftadd,w
  8781  03C5  07C9               	addwf	___ftadd@exp2,f
  8782  03C6                     l5419:	
  8783  03C6  084A               	movf	___ftadd@exp1,w
  8784  03C7  0649               	xorwf	___ftadd@exp2,w
  8785  03C8  1D03               	skipz
  8786  03C9  2BBC               	goto	l5417
  8787  03CA                     l2810:	
  8788  03CA  1FC8               	btfss	___ftadd@sign,7
  8789  03CB  2BDC               	goto	l5423
  8790  03CC  30FF               	movlw	255
  8791  03CD  06BE               	xorwf	___ftadd@f1,f
  8792  03CE  30FF               	movlw	255
  8793  03CF  06BF               	xorwf	___ftadd@f1+1,f
  8794  03D0  30FF               	movlw	255
  8795  03D1  06C0               	xorwf	___ftadd@f1+2,f
  8796  03D2  3001               	movlw	1
  8797  03D3  07BE               	addwf	___ftadd@f1,f
  8798  03D4  3000               	movlw	0
  8799  03D5  1803               	skipnc
  8800  03D6  3001               	movlw	1
  8801  03D7  07BF               	addwf	___ftadd@f1+1,f
  8802  03D8  3000               	movlw	0
  8803  03D9  1803               	skipnc
  8804  03DA  3001               	movlw	1
  8805  03DB  07C0               	addwf	___ftadd@f1+2,f
  8806  03DC                     l5423:	
  8807  03DC  1F48               	btfss	___ftadd@sign,6
  8808  03DD  2BEE               	goto	l5427
  8809  03DE  30FF               	movlw	255
  8810  03DF  06C1               	xorwf	___ftadd@f2,f
  8811  03E0  30FF               	movlw	255
  8812  03E1  06C2               	xorwf	___ftadd@f2+1,f
  8813  03E2  30FF               	movlw	255
  8814  03E3  06C3               	xorwf	___ftadd@f2+2,f
  8815  03E4  3001               	movlw	1
  8816  03E5  07C1               	addwf	___ftadd@f2,f
  8817  03E6  3000               	movlw	0
  8818  03E7  1803               	skipnc
  8819  03E8  3001               	movlw	1
  8820  03E9  07C2               	addwf	___ftadd@f2+1,f
  8821  03EA  3000               	movlw	0
  8822  03EB  1803               	skipnc
  8823  03EC  3001               	movlw	1
  8824  03ED  07C3               	addwf	___ftadd@f2+2,f
  8825  03EE                     l5427:	
  8826  03EE  01C8               	clrf	___ftadd@sign
  8827  03EF  083E               	movf	___ftadd@f1,w
  8828  03F0  07C1               	addwf	___ftadd@f2,f
  8829  03F1  083F               	movf	___ftadd@f1+1,w
  8830  03F2  3DC2               	addwfc	___ftadd@f2+1,f
  8831  03F3  0840               	movf	___ftadd@f1+2,w
  8832  03F4  3DC3               	addwfc	___ftadd@f2+2,f
  8833  03F5  1FC3               	btfss	___ftadd@f2+2,7
  8834  03F6  2C09               	goto	l5437
  8835  03F7  30FF               	movlw	255
  8836  03F8  06C1               	xorwf	___ftadd@f2,f
  8837  03F9  30FF               	movlw	255
  8838  03FA  06C2               	xorwf	___ftadd@f2+1,f
  8839  03FB  30FF               	movlw	255
  8840  03FC  06C3               	xorwf	___ftadd@f2+2,f
  8841  03FD  3001               	movlw	1
  8842  03FE  07C1               	addwf	___ftadd@f2,f
  8843  03FF  3000               	movlw	0
  8844  0400  1803               	skipnc
  8845  0401  3001               	movlw	1
  8846  0402  07C2               	addwf	___ftadd@f2+1,f
  8847  0403  3000               	movlw	0
  8848  0404  1803               	skipnc
  8849  0405  3001               	movlw	1
  8850  0406  07C3               	addwf	___ftadd@f2+2,f
  8851  0407  01C8               	clrf	___ftadd@sign
  8852  0408  0AC8               	incf	___ftadd@sign,f
  8853  0409                     l5437:	
  8854  0409  0841               	movf	___ftadd@f2,w
  8855  040A  00A0               	movwf	___ftpack@arg
  8856  040B  0842               	movf	___ftadd@f2+1,w
  8857  040C  00A1               	movwf	___ftpack@arg+1
  8858  040D  0843               	movf	___ftadd@f2+2,w
  8859  040E  00A2               	movwf	___ftpack@arg+2
  8860  040F  084A               	movf	___ftadd@exp1,w
  8861  0410  00C4               	movwf	??___ftadd
  8862  0411  0844               	movf	??___ftadd,w
  8863  0412  00A3               	movwf	___ftpack@exp
  8864  0413  0848               	movf	___ftadd@sign,w
  8865  0414  00C5               	movwf	??___ftadd+1
  8866  0415  0845               	movf	??___ftadd+1,w
  8867  0416  00A4               	movwf	___ftpack@sign
  8868  0417  318A  2226         	fcall	___ftpack
  8869  0419  0020               	movlb	0	; select bank0
  8870  041A  0820               	movf	?___ftpack,w
  8871  041B  00BE               	movwf	?___ftadd
  8872  041C  0821               	movf	?___ftpack+1,w
  8873  041D  00BF               	movwf	?___ftadd+1
  8874  041E  0822               	movf	?___ftpack+2,w
  8875  041F  00C0               	movwf	?___ftadd+2
  8876  0420  0008               	return
  8877  0421                     __end_of___ftadd:	
  8878                           
  8879                           	psect	text41
  8880  1F7D                     __ptext41:	
  8881 ;; *************** function _getBuz_GO *****************
  8882 ;; Defined at:
  8883 ;;		line 82 in file "../src/Buzzer_B1.c"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;		None
  8886 ;; Auto vars:     Size  Location     Type
  8887 ;;  i               2    4[BANK0 ] int 
  8888 ;; Return value:  Size  Location     Type
  8889 ;;                  2    0[BANK0 ] int 
  8890 ;; Registers used:
  8891 ;;		wreg, status,2, status,0
  8892 ;; Tracked objects:
  8893 ;;		On entry : 0/0
  8894 ;;		On exit  : 0/0
  8895 ;;		Unchanged: 0/0
  8896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8897 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8900 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8901 ;;Total ram usage:        6 bytes
  8902 ;; Hardware stack levels used:    1
  8903 ;; Hardware stack levels required when called:    5
  8904 ;; This function calls:
  8905 ;;		Nothing
  8906 ;; This function is called by:
  8907 ;;		_setRF_Main
  8908 ;; This function uses a non-reentrant model
  8909 ;;
  8910                           
  8911                           
  8912                           ;psect for function _getBuz_GO
  8913  1F7D                     _getBuz_GO:	
  8914                           
  8915                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8916                           
  8917                           ;incstack = 0
  8918                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8919  1F7D  0021               	movlb	1	; select bank1
  8920  1F7E  0C32               	rrf	_Buz1^(0+128),w
  8921  1F7F  3901               	andlw	1
  8922  1F80  0020               	movlb	0	; select bank0
  8923  1F81  00A2               	movwf	??_getBuz_GO
  8924  1F82  01A3               	clrf	??_getBuz_GO+1
  8925  1F83  0822               	movf	??_getBuz_GO,w
  8926  1F84  00A4               	movwf	getBuz_GO@i
  8927  1F85  0823               	movf	??_getBuz_GO+1,w
  8928  1F86  00A5               	movwf	getBuz_GO@i+1
  8929                           
  8930                           ;Buzzer_B1.c: 84: return i;
  8931  1F87  0825               	movf	getBuz_GO@i+1,w
  8932  1F88  01A1               	clrf	?_getBuz_GO+1
  8933  1F89  07A1               	addwf	?_getBuz_GO+1,f
  8934  1F8A  0824               	movf	getBuz_GO@i,w
  8935  1F8B  01A0               	clrf	?_getBuz_GO
  8936  1F8C  07A0               	addwf	?_getBuz_GO,f
  8937  1F8D  0008               	return
  8938  1F8E                     __end_of_getBuz_GO:	
  8939                           
  8940                           	psect	text42
  8941  0A87                     __ptext42:	
  8942 ;; *************** function _CC2500_TxData *****************
  8943 ;; Defined at:
  8944 ;;		line 32 in file "../src/CC2500_B1.c"
  8945 ;; Parameters:    Size  Location     Type
  8946 ;;		None
  8947 ;; Auto vars:     Size  Location     Type
  8948 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8949 ;; Return value:  Size  Location     Type
  8950 ;;		None               void
  8951 ;; Registers used:
  8952 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8953 ;; Tracked objects:
  8954 ;;		On entry : 0/0
  8955 ;;		On exit  : 0/0
  8956 ;;		Unchanged: 0/0
  8957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;Total ram usage:        2 bytes
  8963 ;; Hardware stack levels used:    1
  8964 ;; Hardware stack levels required when called:    7
  8965 ;; This function calls:
  8966 ;;		_CC2500_WriteByte
  8967 ;;		_CC2500_WriteCommand
  8968 ;;		_Timeout_Counter
  8969 ;;		_set_TimeoutCleared
  8970 ;; This function is called by:
  8971 ;;		_setRF_Main
  8972 ;; This function uses a non-reentrant model
  8973 ;;
  8974                           
  8975                           
  8976                           ;psect for function _CC2500_TxData
  8977  0A87                     _CC2500_TxData:	
  8978                           
  8979                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8980                           ;CC2500_B1.c: 35: RC4 = 0;
  8981                           
  8982                           ;incstack = 0
  8983                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8984  0A87  0020               	movlb	0	; select bank0
  8985  0A88  120E               	bcf	14,4	;volatile
  8986                           
  8987                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8988  0A89  307F               	movlw	127
  8989  0A8A  00A4               	movwf	??_CC2500_TxData
  8990  0A8B  0824               	movf	??_CC2500_TxData,w
  8991  0A8C  00FA               	movwf	_SPI0Buffer
  8992                           
  8993                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8994  0A8D  2A91               	goto	l8285
  8995  0A8E                     l8283:	
  8996                           
  8997                           ;CC2500_B1.c: 38: Timeout_Counter();
  8998  0A8E  319F  27EB  318A   	fcall	_Timeout_Counter
  8999  0A91                     l8285:	
  9000  0A91  0020               	movlb	0	; select bank0
  9001  0A92  1D0E               	btfss	14,2	;volatile
  9002  0A93  2A97               	goto	l8289
  9003  0A94  0021               	movlb	1	; select bank1
  9004  0A95  1D2F               	btfss	(_myMain^(0+128)+15),2
  9005  0A96  2A8E               	goto	l8283
  9006  0A97                     l8289:	
  9007                           
  9008                           ;CC2500_B1.c: 39: };
  9009                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9010  0A97  3190  2066  318A   	fcall	_set_TimeoutCleared
  9011                           
  9012                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9013  0A9A  319F  27D7  318A   	fcall	_CC2500_WriteByte
  9014                           
  9015                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9016  0A9D  0021               	movlb	1	; select bank1
  9017  0A9E  0858               	movf	_Tx_Length^(0+128),w
  9018  0A9F  0020               	movlb	0	; select bank0
  9019  0AA0  00A4               	movwf	??_CC2500_TxData
  9020  0AA1  0824               	movf	??_CC2500_TxData,w
  9021  0AA2  00FA               	movwf	_SPI0Buffer
  9022                           
  9023                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9024  0AA3  319F  27D7  318A   	fcall	_CC2500_WriteByte
  9025                           
  9026                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9027  0AA6  0020               	movlb	0	; select bank0
  9028  0AA7  01A5               	clrf	CC2500_TxData@loop_e
  9029  0AA8                     l8303:	
  9030  0AA8  0021               	movlb	1	; select bank1
  9031  0AA9  0858               	movf	_Tx_Length^(0+128),w
  9032  0AAA  0020               	movlb	0	; select bank0
  9033  0AAB  0225               	subwf	CC2500_TxData@loop_e,w
  9034  0AAC  1803               	btfsc	3,0
  9035  0AAD  2AC0               	goto	l247
  9036                           
  9037                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9038  0AAE  0825               	movf	CC2500_TxData@loop_e,w
  9039  0AAF  3E20               	addlw	_RF_Data& (0+255)
  9040  0AB0  0086               	movwf	6
  9041  0AB1  3001               	movlw	1	; select bank2/3
  9042  0AB2  0087               	movwf	7
  9043  0AB3  0801               	movf	1,w
  9044  0AB4  00A4               	movwf	??_CC2500_TxData
  9045  0AB5  0824               	movf	??_CC2500_TxData,w
  9046  0AB6  00FA               	movwf	_SPI0Buffer
  9047                           
  9048                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9049  0AB7  319F  27D7  318A   	fcall	_CC2500_WriteByte
  9050  0ABA  3001               	movlw	1
  9051  0ABB  0020               	movlb	0	; select bank0
  9052  0ABC  00A4               	movwf	??_CC2500_TxData
  9053  0ABD  0824               	movf	??_CC2500_TxData,w
  9054  0ABE  07A5               	addwf	CC2500_TxData@loop_e,f
  9055  0ABF  2AA8               	goto	l8303
  9056  0AC0                     l247:	
  9057                           
  9058                           ;CC2500_B1.c: 48: }
  9059                           ;CC2500_B1.c: 49: RC4 = 1;
  9060  0AC0  160E               	bsf	14,4	;volatile
  9061                           
  9062                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9063  0AC1  3035               	movlw	53
  9064  0AC2  3190  20AD  318A   	fcall	_CC2500_WriteCommand
  9065                           
  9066                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9067  0AC5  2AC9               	goto	l8309
  9068  0AC6                     l8307:	
  9069                           
  9070                           ;CC2500_B1.c: 52: Timeout_Counter();
  9071  0AC6  319F  27EB  318A   	fcall	_Timeout_Counter
  9072  0AC9                     l8309:	
  9073  0AC9  0020               	movlb	0	; select bank0
  9074  0ACA  180D               	btfsc	13,0	;volatile
  9075  0ACB  2ACF               	goto	l8313
  9076  0ACC  0021               	movlb	1	; select bank1
  9077  0ACD  1D2F               	btfss	(_myMain^(0+128)+15),2
  9078  0ACE  2AC6               	goto	l8307
  9079  0ACF                     l8313:	
  9080                           
  9081                           ;CC2500_B1.c: 53: };
  9082                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9083  0ACF  3190  2066  318A   	fcall	_set_TimeoutCleared
  9084                           
  9085                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9086  0AD2  2AD6               	goto	l8317
  9087  0AD3                     l8315:	
  9088                           
  9089                           ;CC2500_B1.c: 57: Timeout_Counter();
  9090  0AD3  319F  27EB  318A   	fcall	_Timeout_Counter
  9091  0AD6                     l8317:	
  9092  0AD6  0020               	movlb	0	; select bank0
  9093  0AD7  1C0D               	btfss	13,0	;volatile
  9094  0AD8  2ADC               	goto	l8321
  9095  0AD9  0021               	movlb	1	; select bank1
  9096  0ADA  1D2F               	btfss	(_myMain^(0+128)+15),2
  9097  0ADB  2AD3               	goto	l8315
  9098  0ADC                     l8321:	
  9099                           
  9100                           ;CC2500_B1.c: 58: };
  9101                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9102  0ADC  3190  2066  318A   	fcall	_set_TimeoutCleared
  9103                           
  9104                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9105  0ADF  3036               	movlw	54
  9106  0AE0  3190  20AD  318A   	fcall	_CC2500_WriteCommand
  9107                           
  9108                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9109  0AE3  303B               	movlw	59
  9110  0AE4  3190  20AD  318A   	fcall	_CC2500_WriteCommand
  9111                           
  9112                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9113  0AE7  303A               	movlw	58
  9114  0AE8  3190  20AD         	fcall	_CC2500_WriteCommand
  9115                           
  9116                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9117  0AEA  14FB               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9118  0AEB  0008               	return
  9119  0AEC                     __end_of_CC2500_TxData:	
  9120                           
  9121                           	psect	text43
  9122  0D02                     __ptext43:	
  9123 ;; *************** function _CC2500_RxData *****************
  9124 ;; Defined at:
  9125 ;;		line 70 in file "../src/CC2500_B1.c"
  9126 ;; Parameters:    Size  Location     Type
  9127 ;;		None
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9130 ;; Return value:  Size  Location     Type
  9131 ;;		None               void
  9132 ;; Registers used:
  9133 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9134 ;; Tracked objects:
  9135 ;;		On entry : 0/0
  9136 ;;		On exit  : 0/0
  9137 ;;		Unchanged: 0/0
  9138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9140 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9141 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9142 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9143 ;;Total ram usage:        2 bytes
  9144 ;; Hardware stack levels used:    1
  9145 ;; Hardware stack levels required when called:    7
  9146 ;; This function calls:
  9147 ;;		_CC2500_ReadByte
  9148 ;;		_CC2500_ReadStatus
  9149 ;;		_CC2500_WriteByte
  9150 ;;		_Timeout_Counter
  9151 ;;		_set_TimeoutCleared
  9152 ;; This function is called by:
  9153 ;;		_setRF_Main
  9154 ;; This function uses a non-reentrant model
  9155 ;;
  9156                           
  9157                           
  9158                           ;psect for function _CC2500_RxData
  9159  0D02                     _CC2500_RxData:	
  9160                           
  9161                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9162                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9163                           
  9164                           ;incstack = 0
  9165                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9166  0D02  0020               	movlb	0	; select bank0
  9167  0D03  180D               	btfsc	13,0	;volatile
  9168  0D04  2D09               	goto	l8337
  9169  0D05  2D12               	goto	l8343
  9170  0D06                     l8335:	
  9171                           ;CC2500_B1.c: 76: {
  9172                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9173                           
  9174                           
  9175                           ;CC2500_B1.c: 78: Timeout_Counter();
  9176  0D06  319F  27EB  318D   	fcall	_Timeout_Counter
  9177  0D09                     l8337:	
  9178  0D09  0020               	movlb	0	; select bank0
  9179  0D0A  1C0D               	btfss	13,0	;volatile
  9180  0D0B  2D0F               	goto	l8341
  9181  0D0C  0021               	movlb	1	; select bank1
  9182  0D0D  1D2F               	btfss	(_myMain^(0+128)+15),2
  9183  0D0E  2D06               	goto	l8335
  9184  0D0F                     l8341:	
  9185                           
  9186                           ;CC2500_B1.c: 79: };
  9187                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9188  0D0F  3190  2066  318D   	fcall	_set_TimeoutCleared
  9189  0D12                     l8343:	
  9190                           
  9191                           ;CC2500_B1.c: 81: }
  9192                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9193  0D12  303B               	movlw	59
  9194  0D13  3191  21D7  318D   	fcall	_CC2500_ReadStatus
  9195                           
  9196                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9197  0D16  0021               	movlb	1	; select bank1
  9198  0D17  085B               	movf	_s_data^(0+128),w
  9199  0D18  1903               	btfsc	3,2
  9200  0D19  0008               	return
  9201                           
  9202                           ;CC2500_B1.c: 86: RC4 = 0;
  9203  0D1A  0020               	movlb	0	; select bank0
  9204  0D1B  120E               	bcf	14,4	;volatile
  9205                           
  9206                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9207  0D1C  30FF               	movlw	255
  9208  0D1D  00A4               	movwf	??_CC2500_RxData
  9209  0D1E  0824               	movf	??_CC2500_RxData,w
  9210  0D1F  00FA               	movwf	_SPI0Buffer
  9211                           
  9212                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9213  0D20  2D27               	goto	l8353
  9214  0D21                     l8355:	
  9215  0D21  0021               	movlb	1	; select bank1
  9216  0D22  192F               	btfsc	(_myMain^(0+128)+15),2
  9217  0D23  2D2A               	goto	l272
  9218                           
  9219                           ;CC2500_B1.c: 89: Timeout_Counter();
  9220  0D24  319F  27EB  318D   	fcall	_Timeout_Counter
  9221  0D27                     l8353:	
  9222  0D27  0020               	movlb	0	; select bank0
  9223  0D28  190E               	btfsc	14,2	;volatile
  9224  0D29  2D21               	goto	l8355
  9225  0D2A                     l272:	
  9226                           
  9227                           ;CC2500_B1.c: 90: };
  9228                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9229  0D2A  0021               	movlb	1	; select bank1
  9230  0D2B  192F               	btfsc	(_myMain^(0+128)+15),2
  9231  0D2C  2D6D               	goto	l273
  9232                           
  9233                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9234  0D2D  319F  27D7  318D   	fcall	_CC2500_WriteByte
  9235                           
  9236                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9237  0D30  3190  2096  318D   	fcall	_CC2500_ReadByte
  9238                           
  9239                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9240  0D33  087A               	movf	_SPI0Buffer,w
  9241  0D34  0020               	movlb	0	; select bank0
  9242  0D35  00A4               	movwf	??_CC2500_RxData
  9243  0D36  0824               	movf	??_CC2500_RxData,w
  9244  0D37  0021               	movlb	1	; select bank1
  9245  0D38  00D7               	movwf	_Rx_Length^(0+128)
  9246                           
  9247                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9248  0D39  0020               	movlb	0	; select bank0
  9249  0D3A  01A5               	clrf	CC2500_RxData@loop_f
  9250  0D3B                     l8369:	
  9251  0D3B  0021               	movlb	1	; select bank1
  9252  0D3C  0857               	movf	_Rx_Length^(0+128),w
  9253  0D3D  0020               	movlb	0	; select bank0
  9254  0D3E  0225               	subwf	CC2500_RxData@loop_f,w
  9255  0D3F  1803               	btfsc	3,0
  9256  0D40  2D53               	goto	l8371
  9257                           
  9258                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9259  0D41  3190  2096  318D   	fcall	_CC2500_ReadByte
  9260                           
  9261                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9262  0D44  087A               	movf	_SPI0Buffer,w
  9263  0D45  0020               	movlb	0	; select bank0
  9264  0D46  00A4               	movwf	??_CC2500_RxData
  9265  0D47  0825               	movf	CC2500_RxData@loop_f,w
  9266  0D48  3E20               	addlw	_RF_Data& (0+255)
  9267  0D49  0086               	movwf	6
  9268  0D4A  3001               	movlw	1	; select bank2/3
  9269  0D4B  0087               	movwf	7
  9270  0D4C  0824               	movf	??_CC2500_RxData,w
  9271  0D4D  0081               	movwf	1
  9272  0D4E  3001               	movlw	1
  9273  0D4F  00A4               	movwf	??_CC2500_RxData
  9274  0D50  0824               	movf	??_CC2500_RxData,w
  9275  0D51  07A5               	addwf	CC2500_RxData@loop_f,f
  9276  0D52  2D3B               	goto	l8369
  9277  0D53                     l8371:	
  9278                           
  9279                           ;CC2500_B1.c: 99: }
  9280                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9281  0D53  3190  2096  318D   	fcall	_CC2500_ReadByte
  9282                           
  9283                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9284  0D56  087A               	movf	_SPI0Buffer,w
  9285  0D57  0020               	movlb	0	; select bank0
  9286  0D58  00A4               	movwf	??_CC2500_RxData
  9287  0D59  0824               	movf	??_CC2500_RxData,w
  9288  0D5A  0021               	movlb	1	; select bank1
  9289  0D5B  00D6               	movwf	_RSSI^(0+128)
  9290                           
  9291                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9292  0D5C  3190  2096  318D   	fcall	_CC2500_ReadByte
  9293                           
  9294                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9295  0D5F  087A               	movf	_SPI0Buffer,w
  9296  0D60  0020               	movlb	0	; select bank0
  9297  0D61  00A4               	movwf	??_CC2500_RxData
  9298  0D62  0824               	movf	??_CC2500_RxData,w
  9299  0D63  0021               	movlb	1	; select bank1
  9300  0D64  00D4               	movwf	_CRC^(0+128)
  9301                           
  9302                           ;CC2500_B1.c: 104: RC4 = 1;
  9303  0D65  0020               	movlb	0	; select bank0
  9304  0D66  160E               	bsf	14,4	;volatile
  9305                           
  9306                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9307  0D67  0021               	movlb	1	; select bank1
  9308  0D68  1BD4               	btfsc	_CRC^(0+128),7
  9309                           
  9310                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9311  0D69  147B               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9312                           
  9313                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9314  0D6A  11BE               	bcf	_RF1^(0+128),3
  9315                           
  9316                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9317  0D6B  14BE               	bsf	_RF1^(0+128),1
  9318                           
  9319                           ;CC2500_B1.c: 110: } else {
  9320  0D6C  2D6F               	goto	l8383
  9321  0D6D                     l273:	
  9322                           
  9323                           ;CC2500_B1.c: 111: RC4 = 1;
  9324  0D6D  0020               	movlb	0	; select bank0
  9325  0D6E  160E               	bsf	14,4	;volatile
  9326  0D6F                     l8383:	
  9327                           
  9328                           ;CC2500_B1.c: 112: }
  9329                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9330  0D6F  3190  2066         	fcall	_set_TimeoutCleared
  9331  0D71  0021               	movlb	1	; select bank1
  9332  0D72  0008               	return
  9333  0D73                     __end_of_CC2500_RxData:	
  9334                           
  9335                           	psect	text44
  9336  11D7                     __ptext44:	
  9337 ;; *************** function _CC2500_ReadStatus *****************
  9338 ;; Defined at:
  9339 ;;		line 304 in file "../src/CC2500_B1.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;  status_addr     1    wreg     unsigned char 
  9342 ;; Auto vars:     Size  Location     Type
  9343 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9344 ;; Return value:  Size  Location     Type
  9345 ;;		None               void
  9346 ;; Registers used:
  9347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9348 ;; Tracked objects:
  9349 ;;		On entry : 0/0
  9350 ;;		On exit  : 0/0
  9351 ;;		Unchanged: 0/0
  9352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9357 ;;Total ram usage:        2 bytes
  9358 ;; Hardware stack levels used:    1
  9359 ;; Hardware stack levels required when called:    6
  9360 ;; This function calls:
  9361 ;;		_CC2500_ReadByte
  9362 ;;		_CC2500_WriteByte
  9363 ;;		_Timeout_Counter
  9364 ;;		_set_TimeoutCleared
  9365 ;; This function is called by:
  9366 ;;		_CC2500_RxData
  9367 ;;		_setRF_Main
  9368 ;; This function uses a non-reentrant model
  9369 ;;
  9370                           
  9371                           
  9372                           ;psect for function _CC2500_ReadStatus
  9373  11D7                     _CC2500_ReadStatus:	
  9374                           
  9375                           ;incstack = 0
  9376                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9377                           ;CC2500_ReadStatus@status_addr stored from wreg
  9378  11D7  0020               	movlb	0	; select bank0
  9379  11D8  00A3               	movwf	CC2500_ReadStatus@status_addr
  9380                           
  9381                           ;CC2500_B1.c: 305: RC4 = 0;
  9382  11D9  120E               	bcf	14,4	;volatile
  9383                           
  9384                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9385  11DA  0823               	movf	CC2500_ReadStatus@status_addr,w
  9386  11DB  3EC0               	addlw	192
  9387  11DC  00A2               	movwf	??_CC2500_ReadStatus
  9388  11DD  0822               	movf	??_CC2500_ReadStatus,w
  9389  11DE  00FA               	movwf	_SPI0Buffer
  9390                           
  9391                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9392  11DF  29E3               	goto	l8163
  9393  11E0                     l8161:	
  9394                           
  9395                           ;CC2500_B1.c: 309: Timeout_Counter();
  9396  11E0  319F  27EB  3191   	fcall	_Timeout_Counter
  9397  11E3                     l8163:	
  9398  11E3  0020               	movlb	0	; select bank0
  9399  11E4  1D0E               	btfss	14,2	;volatile
  9400  11E5  29E9               	goto	l8167
  9401  11E6  0021               	movlb	1	; select bank1
  9402  11E7  1D2F               	btfss	(_myMain^(0+128)+15),2
  9403  11E8  29E0               	goto	l8161
  9404  11E9                     l8167:	
  9405                           
  9406                           ;CC2500_B1.c: 310: };
  9407                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9408  11E9  3190  2066  3191   	fcall	_set_TimeoutCleared
  9409                           
  9410                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9411  11EC  319F  27D7  3191   	fcall	_CC2500_WriteByte
  9412                           
  9413                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9414  11EF  3190  2096         	fcall	_CC2500_ReadByte
  9415                           
  9416                           ;CC2500_B1.c: 315: RC4 = 1;
  9417  11F1  0020               	movlb	0	; select bank0
  9418  11F2  160E               	bsf	14,4	;volatile
  9419                           
  9420                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9421  11F3  087A               	movf	_SPI0Buffer,w
  9422  11F4  00A2               	movwf	??_CC2500_ReadStatus
  9423  11F5  0822               	movf	??_CC2500_ReadStatus,w
  9424  11F6  0021               	movlb	1	; select bank1
  9425  11F7  00DB               	movwf	_s_data^(0+128)
  9426  11F8  0008               	return
  9427  11F9                     __end_of_CC2500_ReadStatus:	
  9428                           
  9429                           	psect	text45
  9430  1096                     __ptext45:	
  9431 ;; *************** function _CC2500_ReadByte *****************
  9432 ;; Defined at:
  9433 ;;		line 238 in file "../src/CC2500_B1.c"
  9434 ;; Parameters:    Size  Location     Type
  9435 ;;		None
  9436 ;; Auto vars:     Size  Location     Type
  9437 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9438 ;; Return value:  Size  Location     Type
  9439 ;;		None               void
  9440 ;; Registers used:
  9441 ;;		wreg, status,2, status,0
  9442 ;; Tracked objects:
  9443 ;;		On entry : 0/0
  9444 ;;		On exit  : 0/0
  9445 ;;		Unchanged: 0/0
  9446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9448 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9449 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9450 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;Total ram usage:        2 bytes
  9452 ;; Hardware stack levels used:    1
  9453 ;; Hardware stack levels required when called:    5
  9454 ;; This function calls:
  9455 ;;		Nothing
  9456 ;; This function is called by:
  9457 ;;		_CC2500_RxData
  9458 ;;		_CC2500_ReadStatus
  9459 ;;		_CC2500_ReadREG
  9460 ;; This function uses a non-reentrant model
  9461 ;;
  9462                           
  9463                           
  9464                           ;psect for function _CC2500_ReadByte
  9465  1096                     _CC2500_ReadByte:	
  9466                           
  9467                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9468                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9469                           
  9470                           ;incstack = 0
  9471                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9472  1096  0020               	movlb	0	; select bank0
  9473  1097  01A1               	clrf	CC2500_ReadByte@loop_b
  9474  1098                     L3:	
  9475  1098  3008               	movlw	8
  9476  1099  0221               	subwf	CC2500_ReadByte@loop_b,w
  9477  109A  1803               	btfsc	3,0
  9478  109B  0008               	return
  9479                           
  9480                           ;CC2500_B1.c: 241: RC1 = 1;
  9481  109C  148E               	bsf	14,1	;volatile
  9482                           
  9483                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9484  109D  1003               	clrc
  9485  109E  0DFA               	rlf	_SPI0Buffer,f
  9486                           
  9487                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9488  109F  1D0E               	btfss	14,2	;volatile
  9489  10A0  28A3               	goto	l8029
  9490                           
  9491                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9492  10A1  147A               	bsf	_SPI0Buffer,0
  9493  10A2  28A7               	goto	l8031
  9494  10A3                     l8029:	
  9495                           
  9496                           ;CC2500_B1.c: 245: else
  9497                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9498  10A3  30FE               	movlw	254
  9499  10A4  00A0               	movwf	??_CC2500_ReadByte
  9500  10A5  0820               	movf	??_CC2500_ReadByte,w
  9501  10A6  05FA               	andwf	_SPI0Buffer,f
  9502  10A7                     l8031:	
  9503                           
  9504                           ;CC2500_B1.c: 247: RC1 = 0;
  9505  10A7  108E               	bcf	14,1	;volatile
  9506  10A8  3001               	movlw	1
  9507  10A9  00A0               	movwf	??_CC2500_ReadByte
  9508  10AA  0820               	movf	??_CC2500_ReadByte,w
  9509  10AB  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9510  10AC  2898               	goto	L3
  9511  10AD                     __end_of_CC2500_ReadByte:	
  9512                           
  9513                           	psect	text46
  9514  1D73                     __ptext46:	
  9515 ;; *************** function _RF_Initialization *****************
  9516 ;; Defined at:
  9517 ;;		line 9 in file "../src/RF_Control_B1.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;		None
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;		None
  9522 ;; Return value:  Size  Location     Type
  9523 ;;		None               void
  9524 ;; Registers used:
  9525 ;;		wreg, status,2, status,0, pclath, cstack
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;Total ram usage:        0 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    6
  9538 ;; This function calls:
  9539 ;;		_setRF_Initialization
  9540 ;; This function is called by:
  9541 ;;		_main
  9542 ;; This function uses a non-reentrant model
  9543 ;;
  9544                           
  9545                           
  9546                           ;psect for function _RF_Initialization
  9547  1D73                     _RF_Initialization:	
  9548                           
  9549                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9550                           
  9551                           ;incstack = 0
  9552                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9553  1D73  319E  26B7         	fcall	_setRF_Initialization
  9554  1D75  0008               	return
  9555  1D76                     __end_of_RF_Initialization:	
  9556                           
  9557                           	psect	text47
  9558  1EB7                     __ptext47:	
  9559 ;; *************** function _setRF_Initialization *****************
  9560 ;; Defined at:
  9561 ;;		line 43 in file "../src/RF_Control_B1.c"
  9562 ;; Parameters:    Size  Location     Type
  9563 ;;		None
  9564 ;; Auto vars:     Size  Location     Type
  9565 ;;		None
  9566 ;; Return value:  Size  Location     Type
  9567 ;;		None               void
  9568 ;; Registers used:
  9569 ;;		wreg
  9570 ;; Tracked objects:
  9571 ;;		On entry : 0/0
  9572 ;;		On exit  : 0/0
  9573 ;;		Unchanged: 0/0
  9574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9577 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9578 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9579 ;;Total ram usage:        1 bytes
  9580 ;; Hardware stack levels used:    1
  9581 ;; Hardware stack levels required when called:    5
  9582 ;; This function calls:
  9583 ;;		Nothing
  9584 ;; This function is called by:
  9585 ;;		_RF_Initialization
  9586 ;; This function uses a non-reentrant model
  9587 ;;
  9588                           
  9589                           
  9590                           ;psect for function _setRF_Initialization
  9591  1EB7                     _setRF_Initialization:	
  9592                           
  9593                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9594                           
  9595                           ;incstack = 0
  9596                           ; Regs used in _setRF_Initialization: [wreg]
  9597  1EB7  3015               	movlw	21
  9598  1EB8  0020               	movlb	0	; select bank0
  9599  1EB9  00A0               	movwf	??_setRF_Initialization
  9600  1EBA  0820               	movf	??_setRF_Initialization,w
  9601  1EBB  0021               	movlb	1	; select bank1
  9602  1EBC  00D8               	movwf	_Tx_Length^(0+128)
  9603                           
  9604                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
  9605  1EBD  3014               	movlw	20
  9606  1EBE  0020               	movlb	0	; select bank0
  9607  1EBF  00A0               	movwf	??_setRF_Initialization
  9608  1EC0  0820               	movf	??_setRF_Initialization,w
  9609  1EC1  0021               	movlb	1	; select bank1
  9610  1EC2  00C4               	movwf	(_RF1^(0+128)+6)
  9611  1EC3  0008               	return
  9612  1EC4                     __end_of_setRF_Initialization:	
  9613                           
  9614                           	psect	text48
  9615  1D70                     __ptext48:	
  9616 ;; *************** function _PowerFault_Main *****************
  9617 ;; Defined at:
  9618 ;;		line 17 in file "../src/PowerFault_B1.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;		None
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;		None
  9623 ;; Return value:  Size  Location     Type
  9624 ;;		None               void
  9625 ;; Registers used:
  9626 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;Total ram usage:        0 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; Hardware stack levels required when called:   11
  9639 ;; This function calls:
  9640 ;;		_setPowerFault_Main
  9641 ;; This function is called by:
  9642 ;;		_main
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           
  9647                           ;psect for function _PowerFault_Main
  9648  1D70                     _PowerFault_Main:	
  9649                           
  9650                           ;PowerFault_B1.c: 19: setPowerFault_Main();
  9651                           
  9652                           ;incstack = 0
  9653                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9654  1D70  318D  2573         	fcall	_setPowerFault_Main
  9655  1D72  0008               	return
  9656  1D73                     __end_of_PowerFault_Main:	
  9657                           
  9658                           	psect	text49
  9659  0D73                     __ptext49:	
  9660 ;; *************** function _setPowerFault_Main *****************
  9661 ;; Defined at:
  9662 ;;		line 55 in file "../src/PowerFault_B1.c"
  9663 ;; Parameters:    Size  Location     Type
  9664 ;;		None
  9665 ;; Auto vars:     Size  Location     Type
  9666 ;;		None
  9667 ;; Return value:  Size  Location     Type
  9668 ;;		None               void
  9669 ;; Registers used:
  9670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9671 ;; Tracked objects:
  9672 ;;		On entry : 0/0
  9673 ;;		On exit  : 0/0
  9674 ;;		Unchanged: 0/0
  9675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9680 ;;Total ram usage:        1 bytes
  9681 ;; Hardware stack levels used:    1
  9682 ;; Hardware stack levels required when called:   10
  9683 ;; This function calls:
  9684 ;;		_getTemp_Safe
  9685 ;;		_setPowerFault_Exceptions
  9686 ;; This function is called by:
  9687 ;;		_PowerFault_Main
  9688 ;; This function uses a non-reentrant model
  9689 ;;
  9690                           
  9691                           
  9692                           ;psect for function _setPowerFault_Main
  9693  0D73                     _setPowerFault_Main:	
  9694                           
  9695                           ;PowerFault_B1.c: 56: if (PF1.Enable == 1) {
  9696                           
  9697                           ;incstack = 0
  9698                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9699  0D73  0021               	movlb	1	; select bank1
  9700  0D74  1C48               	btfss	_PF1^(0+128),0
  9701  0D75  0008               	return
  9702                           
  9703                           ;PowerFault_B1.c: 57: if (PF1.ADtoGO == 0) {
  9704  0D76  19C8               	btfsc	_PF1^(0+128),3
  9705  0D77  2D95               	goto	l8983
  9706                           
  9707                           ;PowerFault_B1.c: 58: PF1.Time++;
  9708  0D78  3001               	movlw	1
  9709  0D79  07CA               	addwf	(_PF1^(0+128)+2),f
  9710  0D7A  3000               	movlw	0
  9711  0D7B  3DCB               	addwfc	((_PF1+1)^(0+128)+2),f
  9712                           
  9713                           ;PowerFault_B1.c: 60: {
  9714                           ;PowerFault_B1.c: 61: if (1 == 1 && getTemp_Safe() == 1) {
  9715  0D7C  3002               	movlw	2
  9716  0D7D  024B               	subwf	((_PF1+1)^(0+128)+2),w
  9717  0D7E  30BC               	movlw	188
  9718  0D7F  1903               	skipnz
  9719  0D80  024A               	subwf	(_PF1^(0+128)+2),w
  9720  0D81  1C03               	skipc
  9721  0D82  0008               	return
  9722  0D83  319D  25CE  318D   	fcall	_getTemp_Safe
  9723  0D86  3A01               	xorlw	1
  9724  0D87  1D03               	skipz
  9725  0D88  2D8F               	goto	l8981
  9726                           
  9727                           ;PowerFault_B1.c: 62: PF1.Time = 0;
  9728  0D89  0021               	movlb	1	; select bank1
  9729  0D8A  01CA               	clrf	(_PF1^(0+128)+2)
  9730  0D8B  01CB               	clrf	((_PF1+1)^(0+128)+2)
  9731                           
  9732                           ;PowerFault_B1.c: 63: PF1.ADtoGO = 1;
  9733  0D8C  15C8               	bsf	_PF1^(0+128),3
  9734                           
  9735                           ;PowerFault_B1.c: 64: PF1.Safe = 0;
  9736  0D8D  1148               	bcf	_PF1^(0+128),2
  9737                           
  9738                           ;PowerFault_B1.c: 65: } else {
  9739  0D8E  0008               	return
  9740  0D8F                     l8981:	
  9741                           
  9742                           ;PowerFault_B1.c: 66: PF1.Time = 700;
  9743  0D8F  30BC               	movlw	188
  9744  0D90  0021               	movlb	1	; select bank1
  9745  0D91  00CA               	movwf	(_PF1^(0+128)+2)
  9746  0D92  3002               	movlw	2
  9747  0D93  00CB               	movwf	(_PF1^(0+128)+3)
  9748                           
  9749                           ;PowerFault_B1.c: 67: }
  9750                           ;PowerFault_B1.c: 68: }
  9751                           ;PowerFault_B1.c: 69: } else {
  9752  0D94  0008               	return
  9753  0D95                     l8983:	
  9754                           
  9755                           ;PowerFault_B1.c: 70: PF1.Time++;
  9756  0D95  3001               	movlw	1
  9757  0D96  07CA               	addwf	(_PF1^(0+128)+2),f
  9758  0D97  3000               	movlw	0
  9759  0D98  3DCB               	addwfc	((_PF1+1)^(0+128)+2),f
  9760                           
  9761                           ;PowerFault_B1.c: 71: if (PF1.Time >= 2)
  9762  0D99  3000               	movlw	0
  9763  0D9A  024B               	subwf	((_PF1+1)^(0+128)+2),w
  9764  0D9B  3002               	movlw	2
  9765  0D9C  1903               	skipnz
  9766  0D9D  024A               	subwf	(_PF1^(0+128)+2),w
  9767  0D9E  1C03               	skipc
  9768  0D9F  0008               	return
  9769                           
  9770                           ;PowerFault_B1.c: 72: {
  9771                           ;PowerFault_B1.c: 73: PF1.Time = 0;
  9772  0DA0  01CA               	clrf	(_PF1^(0+128)+2)
  9773  0DA1  01CB               	clrf	((_PF1+1)^(0+128)+2)
  9774                           
  9775                           ;PowerFault_B1.c: 74: PF1.ADtoGO = 0;
  9776  0DA2  11C8               	bcf	_PF1^(0+128),3
  9777                           
  9778                           ;PowerFault_B1.c: 76: if (PF1.ERROR == 1) {
  9779  0DA3  1CC8               	btfss	_PF1^(0+128),1
  9780  0DA4  2DC3               	goto	l9005
  9781                           
  9782                           ;PowerFault_B1.c: 77: if (PF1.AD <= (300 + 100) && PF1.AD >= (300 - 100)) {
  9783  0DA5  3001               	movlw	1
  9784  0DA6  024D               	subwf	((_PF1+1)^(0+128)+4),w
  9785  0DA7  3091               	movlw	145
  9786  0DA8  1903               	skipnz
  9787  0DA9  024C               	subwf	(_PF1^(0+128)+4),w
  9788  0DAA  1803               	skipnc
  9789  0DAB  2DE1               	goto	l9017
  9790  0DAC  3000               	movlw	0
  9791  0DAD  024D               	subwf	((_PF1+1)^(0+128)+4),w
  9792  0DAE  30C8               	movlw	200
  9793  0DAF  1903               	skipnz
  9794  0DB0  024C               	subwf	(_PF1^(0+128)+4),w
  9795  0DB1  1C03               	skipc
  9796  0DB2  2DE1               	goto	l9017
  9797                           
  9798                           ;PowerFault_B1.c: 78: PF1.Count++;
  9799  0DB3  3001               	movlw	1
  9800  0DB4  0020               	movlb	0	; select bank0
  9801  0DB5  00B1               	movwf	??_setPowerFault_Main
  9802  0DB6  0831               	movf	??_setPowerFault_Main,w
  9803  0DB7  0021               	movlb	1	; select bank1
  9804  0DB8  07C9               	addwf	(_PF1^(0+128)+1),f
  9805                           
  9806                           ;PowerFault_B1.c: 79: if (PF1.Count > 1) {
  9807  0DB9  3002               	movlw	2
  9808  0DBA  0249               	subwf	(_PF1^(0+128)+1),w
  9809  0DBB  1C03               	skipc
  9810  0DBC  2DE3               	goto	l9019
  9811                           
  9812                           ;PowerFault_B1.c: 80: PF1.Count = 0;
  9813  0DBD  01C9               	clrf	(_PF1^(0+128)+1)
  9814                           
  9815                           ;PowerFault_B1.c: 81: setPowerFault_Exceptions(0);
  9816  0DBE  3000               	movlw	0
  9817  0DBF  3194  2433  318D   	fcall	_setPowerFault_Exceptions
  9818                           
  9819                           ;PowerFault_B1.c: 82: }
  9820                           ;PowerFault_B1.c: 83: } else {
  9821  0DC2  2DE3               	goto	l9019
  9822  0DC3                     l9005:	
  9823                           ;PowerFault_B1.c: 85: }
  9824                           ;PowerFault_B1.c: 86: } else {
  9825                           
  9826                           ;PowerFault_B1.c: 84: PF1.Count = 0;
  9827                           
  9828                           
  9829                           ;PowerFault_B1.c: 87: if (PF1.AD >= (300 + 100) || PF1.AD <= (310 - 100)) {
  9830  0DC3  3001               	movlw	1
  9831  0DC4  024D               	subwf	((_PF1+1)^(0+128)+4),w
  9832  0DC5  3090               	movlw	144
  9833  0DC6  1903               	skipnz
  9834  0DC7  024C               	subwf	(_PF1^(0+128)+4),w
  9835  0DC8  1803               	skipnc
  9836  0DC9  2DD1               	goto	l9009
  9837  0DCA  3000               	movlw	0
  9838  0DCB  024D               	subwf	((_PF1+1)^(0+128)+4),w
  9839  0DCC  30D3               	movlw	211
  9840  0DCD  1903               	skipnz
  9841  0DCE  024C               	subwf	(_PF1^(0+128)+4),w
  9842  0DCF  1803               	skipnc
  9843  0DD0  2DE1               	goto	l9017
  9844  0DD1                     l9009:	
  9845                           
  9846                           ;PowerFault_B1.c: 88: PF1.Count++;
  9847  0DD1  3001               	movlw	1
  9848  0DD2  0020               	movlb	0	; select bank0
  9849  0DD3  00B1               	movwf	??_setPowerFault_Main
  9850  0DD4  0831               	movf	??_setPowerFault_Main,w
  9851  0DD5  0021               	movlb	1	; select bank1
  9852  0DD6  07C9               	addwf	(_PF1^(0+128)+1),f
  9853                           
  9854                           ;PowerFault_B1.c: 89: if (PF1.Count > 1) {
  9855  0DD7  3002               	movlw	2
  9856  0DD8  0249               	subwf	(_PF1^(0+128)+1),w
  9857  0DD9  1C03               	skipc
  9858  0DDA  2DE3               	goto	l9019
  9859                           
  9860                           ;PowerFault_B1.c: 90: PF1.Count = 0;
  9861  0DDB  01C9               	clrf	(_PF1^(0+128)+1)
  9862                           
  9863                           ;PowerFault_B1.c: 91: setPowerFault_Exceptions(1);
  9864  0DDC  3001               	movlw	1
  9865  0DDD  3194  2433  318D   	fcall	_setPowerFault_Exceptions
  9866                           
  9867                           ;PowerFault_B1.c: 92: }
  9868                           ;PowerFault_B1.c: 93: } else {
  9869  0DE0  2DE3               	goto	l9019
  9870  0DE1                     l9017:	
  9871                           
  9872                           ;PowerFault_B1.c: 94: PF1.Count = 0;
  9873  0DE1  0021               	movlb	1	; select bank1
  9874  0DE2  01C9               	clrf	(_PF1^(0+128)+1)
  9875  0DE3                     l9019:	
  9876                           
  9877                           ;PowerFault_B1.c: 95: }
  9878                           ;PowerFault_B1.c: 97: }
  9879                           ;PowerFault_B1.c: 98: if (PF1.ERROR == 0) {
  9880  0DE3  0021               	movlb	1	; select bank1
  9881  0DE4  1CC8               	btfss	_PF1^(0+128),1
  9882                           
  9883                           ;PowerFault_B1.c: 99: PF1.Safe = 1;
  9884  0DE5  1548               	bsf	_PF1^(0+128),2
  9885                           
  9886                           ;PowerFault_B1.c: 100: }
  9887                           ;PowerFault_B1.c: 101: PF1.AD = 0;
  9888  0DE6  01CC               	clrf	(_PF1^(0+128)+4)
  9889  0DE7  01CD               	clrf	((_PF1+1)^(0+128)+4)
  9890  0DE8  0008               	return
  9891  0DE9                     __end_of_setPowerFault_Main:	
  9892                           
  9893                           	psect	text50
  9894  1433                     __ptext50:	
  9895 ;; *************** function _setPowerFault_Exceptions *****************
  9896 ;; Defined at:
  9897 ;;		line 107 in file "../src/PowerFault_B1.c"
  9898 ;; Parameters:    Size  Location     Type
  9899 ;;  command         1    wreg     unsigned char 
  9900 ;; Auto vars:     Size  Location     Type
  9901 ;;  command         1   16[BANK0 ] unsigned char 
  9902 ;;  i               1   15[BANK0 ] unsigned char 
  9903 ;; Return value:  Size  Location     Type
  9904 ;;		None               void
  9905 ;; Registers used:
  9906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9907 ;; Tracked objects:
  9908 ;;		On entry : 0/0
  9909 ;;		On exit  : 0/0
  9910 ;;		Unchanged: 0/0
  9911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9914 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9915 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9916 ;;Total ram usage:        3 bytes
  9917 ;; Hardware stack levels used:    1
  9918 ;; Hardware stack levels required when called:    9
  9919 ;; This function calls:
  9920 ;;		_DimmerLights_Exceptions
  9921 ;;		_setLED
  9922 ;;		_setRF_Enable
  9923 ;;		_setSw_Enable
  9924 ;; This function is called by:
  9925 ;;		_setPowerFault_Main
  9926 ;; This function uses a non-reentrant model
  9927 ;;
  9928                           
  9929                           
  9930                           ;psect for function _setPowerFault_Exceptions
  9931  1433                     _setPowerFault_Exceptions:	
  9932                           
  9933                           ;incstack = 0
  9934                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9935                           ;setPowerFault_Exceptions@command stored from wreg
  9936  1433  0020               	movlb	0	; select bank0
  9937  1434  00B0               	movwf	setPowerFault_Exceptions@command
  9938                           
  9939                           ;PowerFault_B1.c: 108: char i = command == 1 ? 0 : 1;
  9940  1435  0830               	movf	setPowerFault_Exceptions@command,w
  9941  1436  3A01               	xorlw	1
  9942  1437  3000               	movlw	0
  9943  1438  1D03               	skipz
  9944  1439  3001               	movlw	1
  9945  143A  00AE               	movwf	??_setPowerFault_Exceptions
  9946  143B  082E               	movf	??_setPowerFault_Exceptions,w
  9947  143C  00AF               	movwf	setPowerFault_Exceptions@i
  9948                           
  9949                           ;PowerFault_B1.c: 109: PF1.ERROR = command;
  9950  143D  0830               	movf	setPowerFault_Exceptions@command,w
  9951  143E  0021               	movlb	1	; select bank1
  9952  143F  10C8               	bcf	_PF1^(0+128),1
  9953  1440  1D03               	skipz
  9954  1441  14C8               	bsf	_PF1^(0+128),1
  9955                           
  9956                           ;PowerFault_B1.c: 110: PF1.Safe = i;
  9957  1442  0020               	movlb	0	; select bank0
  9958  1443  082F               	movf	setPowerFault_Exceptions@i,w
  9959  1444  0021               	movlb	1	; select bank1
  9960  1445  1148               	bcf	_PF1^(0+128),2
  9961  1446  1D03               	skipz
  9962  1447  1548               	bsf	_PF1^(0+128),2
  9963                           
  9964                           ;PowerFault_B1.c: 111: if (command == 1) {
  9965  1448  0020               	movlb	0	; select bank0
  9966  1449  0830               	movf	setPowerFault_Exceptions@command,w
  9967  144A  3A01               	xorlw	1
  9968  144B  1D03               	skipz
  9969  144C  2C58               	goto	l1913
  9970                           
  9971                           ;PowerFault_B1.c: 112: DimmerLights_Exceptions(3);
  9972  144D  3003               	movlw	3
  9973  144E  3194  24E3  3194   	fcall	_DimmerLights_Exceptions
  9974                           
  9975                           ;PowerFault_B1.c: 114: setLED(2, 1);
  9976  1451  0020               	movlb	0	; select bank0
  9977  1452  01A2               	clrf	setLED@command
  9978  1453  0AA2               	incf	setLED@command,f
  9979  1454  3002               	movlw	2
  9980  1455  3189  2169  3194   	fcall	_setLED
  9981  1458                     l1913:	
  9982                           
  9983                           ;PowerFault_B1.c: 116: }
  9984                           ;PowerFault_B1.c: 117: setLED(99, command + 10);
  9985  1458  0020               	movlb	0	; select bank0
  9986  1459  0830               	movf	setPowerFault_Exceptions@command,w
  9987  145A  3E0A               	addlw	10
  9988  145B  00AE               	movwf	??_setPowerFault_Exceptions
  9989  145C  082E               	movf	??_setPowerFault_Exceptions,w
  9990  145D  00A2               	movwf	setLED@command
  9991  145E  3063               	movlw	99
  9992  145F  3189  2169  3194   	fcall	_setLED
  9993                           
  9994                           ;PowerFault_B1.c: 119: setSw_Enable(i);
  9995  1462  0020               	movlb	0	; select bank0
  9996  1463  082F               	movf	setPowerFault_Exceptions@i,w
  9997  1464  319E  26EF  3194   	fcall	_setSw_Enable
  9998                           
  9999                           ;PowerFault_B1.c: 121: setRF_Enable(i);
 10000  1467  0020               	movlb	0	; select bank0
 10001  1468  082F               	movf	setPowerFault_Exceptions@i,w
 10002  1469  319E  26D2         	fcall	_setRF_Enable
 10003  146B  0008               	return
 10004  146C                     __end_of_setPowerFault_Exceptions:	
 10005                           
 10006                           	psect	text51
 10007  1EEF                     __ptext51:	
 10008 ;; *************** function _setSw_Enable *****************
 10009 ;; Defined at:
 10010 ;;		line 91 in file "../src/Switch_B1.c"
 10011 ;; Parameters:    Size  Location     Type
 10012 ;;  command         1    wreg     unsigned char 
 10013 ;; Auto vars:     Size  Location     Type
 10014 ;;  command         1    2[BANK0 ] unsigned char 
 10015 ;; Return value:  Size  Location     Type
 10016 ;;		None               void
 10017 ;; Registers used:
 10018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10019 ;; Tracked objects:
 10020 ;;		On entry : 0/0
 10021 ;;		On exit  : 0/0
 10022 ;;		Unchanged: 0/0
 10023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10027 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10028 ;;Total ram usage:        1 bytes
 10029 ;; Hardware stack levels used:    1
 10030 ;; Hardware stack levels required when called:    6
 10031 ;; This function calls:
 10032 ;;		_SwPointSelect
 10033 ;; This function is called by:
 10034 ;;		_my_MainTime
 10035 ;;		_setOverTemp_Exceptions
 10036 ;;		_setPowerFault_Exceptions
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           
 10041                           ;psect for function _setSw_Enable
 10042  1EEF                     _setSw_Enable:	
 10043                           
 10044                           ;incstack = 0
 10045                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10046                           ;setSw_Enable@command stored from wreg
 10047  1EEF  0020               	movlb	0	; select bank0
 10048  1EF0  00A2               	movwf	setSw_Enable@command
 10049                           
 10050                           ;Switch_B1.c: 94: SwPointSelect(1);
 10051  1EF1  3001               	movlw	1
 10052  1EF2  319E  264A         	fcall	_SwPointSelect
 10053                           
 10054                           ;Switch_B1.c: 95: Sw->Enable = command;
 10055  1EF4  0020               	movlb	0	; select bank0
 10056  1EF5  086C               	movf	_Sw,w
 10057  1EF6  0086               	movwf	6
 10058  1EF7  3001               	movlw	1	; select bank2/3
 10059  1EF8  0087               	movwf	7
 10060  1EF9  0822               	movf	setSw_Enable@command,w
 10061  1EFA  1001               	bcf	1,0
 10062  1EFB  1D03               	skipz
 10063  1EFC  1401               	bsf	1,0
 10064  1EFD  0008               	return
 10065  1EFE                     __end_of_setSw_Enable:	
 10066                           
 10067                           	psect	text52
 10068  1ED2                     __ptext52:	
 10069 ;; *************** function _setRF_Enable *****************
 10070 ;; Defined at:
 10071 ;;		line 224 in file "../src/RF_Control_B1.c"
 10072 ;; Parameters:    Size  Location     Type
 10073 ;;  command         1    wreg     unsigned char 
 10074 ;; Auto vars:     Size  Location     Type
 10075 ;;  command         1    0[BANK0 ] unsigned char 
 10076 ;; Return value:  Size  Location     Type
 10077 ;;		None               void
 10078 ;; Registers used:
 10079 ;;		wreg, status,2
 10080 ;; Tracked objects:
 10081 ;;		On entry : 0/0
 10082 ;;		On exit  : 0/0
 10083 ;;		Unchanged: 0/0
 10084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;Total ram usage:        1 bytes
 10090 ;; Hardware stack levels used:    1
 10091 ;; Hardware stack levels required when called:    5
 10092 ;; This function calls:
 10093 ;;		Nothing
 10094 ;; This function is called by:
 10095 ;;		_my_MainTime
 10096 ;;		_setOverTemp_Exceptions
 10097 ;;		_setPowerFault_Exceptions
 10098 ;; This function uses a non-reentrant model
 10099 ;;
 10100                           
 10101                           
 10102                           ;psect for function _setRF_Enable
 10103  1ED2                     _setRF_Enable:	
 10104                           
 10105                           ;incstack = 0
 10106                           ; Regs used in _setRF_Enable: [wreg+status,2]
 10107                           ;setRF_Enable@command stored from wreg
 10108  1ED2  0020               	movlb	0	; select bank0
 10109  1ED3  00A0               	movwf	setRF_Enable@command
 10110                           
 10111                           ;RF_Control_B1.c: 225: RF1.Enable = command;
 10112  1ED4  0820               	movf	setRF_Enable@command,w
 10113  1ED5  0021               	movlb	1	; select bank1
 10114  1ED6  103E               	bcf	_RF1^(0+128),0
 10115  1ED7  1D03               	skipz
 10116  1ED8  143E               	bsf	_RF1^(0+128),0
 10117                           
 10118                           ;RF_Control_B1.c: 226: RF1.Learn = 0;
 10119  1ED9  133E               	bcf	_RF1^(0+128),6
 10120                           
 10121                           ;RF_Control_B1.c: 227: RF1.TransceiveGO = 0;
 10122  1EDA  113E               	bcf	_RF1^(0+128),2
 10123                           
 10124                           ;RF_Control_B1.c: 228: RF1.RxStatus = 0;
 10125  1EDB  11BE               	bcf	_RF1^(0+128),3
 10126                           
 10127                           ;RF_Control_B1.c: 229: RF1.ReceiveGO = 0;
 10128  1EDC  10BE               	bcf	_RF1^(0+128),1
 10129                           
 10130                           ;RF_Control_B1.c: 230: RF1.DebounceTime = 0;
 10131  1EDD  01C5               	clrf	(_RF1^(0+128)+7)
 10132                           
 10133                           ;RF_Control_B1.c: 231: RF1.Debounce = 0;
 10134  1EDE  12BE               	bcf	_RF1^(0+128),5
 10135  1EDF  0008               	return
 10136  1EE0                     __end_of_setRF_Enable:	
 10137                           
 10138                           	psect	text53
 10139  14E3                     __ptext53:	
 10140 ;; *************** function _DimmerLights_Exceptions *****************
 10141 ;; Defined at:
 10142 ;;		line 522 in file "../src/Dimmer_B1.c"
 10143 ;; Parameters:    Size  Location     Type
 10144 ;;  status          1    wreg     unsigned char 
 10145 ;; Auto vars:     Size  Location     Type
 10146 ;;  status          1   13[BANK0 ] unsigned char 
 10147 ;; Return value:  Size  Location     Type
 10148 ;;		None               void
 10149 ;; Registers used:
 10150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10160 ;;Total ram usage:        1 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; Hardware stack levels required when called:    8
 10163 ;; This function calls:
 10164 ;;		_getDimmerLights_StatusFlag
 10165 ;;		_setBuz
 10166 ;;		_setDimmerLights_ERROR
 10167 ;;		_setDimmerLights_TriggerERROR
 10168 ;; This function is called by:
 10169 ;;		_setOverTemp_Exceptions
 10170 ;;		_setPowerFault_Exceptions
 10171 ;; This function uses a non-reentrant model
 10172 ;;
 10173                           
 10174                           
 10175                           ;psect for function _DimmerLights_Exceptions
 10176  14E3                     _DimmerLights_Exceptions:	
 10177                           
 10178                           ;incstack = 0
 10179                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10180                           ;DimmerLights_Exceptions@status stored from wreg
 10181  14E3  0020               	movlb	0	; select bank0
 10182  14E4  00AD               	movwf	DimmerLights_Exceptions@status
 10183                           
 10184                           ;Dimmer_B1.c: 523: if (status == 1) {
 10185  14E5  082D               	movf	DimmerLights_Exceptions@status,w
 10186  14E6  3A01               	xorlw	1
 10187  14E7  1D03               	skipz
 10188  14E8  2CF9               	goto	l8185
 10189                           
 10190                           ;Dimmer_B1.c: 524: if (getDimmerLights_StatusFlag() == 1) {
 10191  14E9  319E  2614  3194   	fcall	_getDimmerLights_StatusFlag
 10192  14EC  3A01               	xorlw	1
 10193  14ED  1D03               	skipz
 10194  14EE  2D10               	goto	l8193
 10195                           
 10196                           ;Dimmer_B1.c: 525: setBuz(10, 300);
 10197  14EF  302C               	movlw	44
 10198  14F0  0020               	movlb	0	; select bank0
 10199  14F1  00A9               	movwf	setBuz@time
 10200  14F2  3001               	movlw	1
 10201  14F3  00AA               	movwf	setBuz@time+1
 10202  14F4  300A               	movlw	10
 10203  14F5  3188  205A  3194   	fcall	_setBuz
 10204  14F8  2D10               	goto	l8193
 10205  14F9                     l8185:	
 10206                           ;Dimmer_B1.c: 537: } else if (status == 2)
 10207                           
 10208                           ;Dimmer_B1.c: 526: }
 10209                           ;Dimmer_B1.c: 529: setDimmerLights_ERROR(1);
 10210                           
 10211  14F9  0020               	movlb	0	; select bank0
 10212  14FA  082D               	movf	DimmerLights_Exceptions@status,w
 10213  14FB  3A02               	xorlw	2
 10214  14FC  1D03               	skipz
 10215  14FD  2D0B               	goto	l8191
 10216                           
 10217                           ;Dimmer_B1.c: 538: {
 10218                           ;Dimmer_B1.c: 539: setBuz(5, 300);
 10219  14FE  302C               	movlw	44
 10220  14FF  00A9               	movwf	setBuz@time
 10221  1500  3001               	movlw	1
 10222  1501  00AA               	movwf	setBuz@time+1
 10223  1502  3005               	movlw	5
 10224  1503  3188  205A  3194   	fcall	_setBuz
 10225                           
 10226                           ;Dimmer_B1.c: 540: setDimmerLights_ERROR(Dimmer->Load);
 10227  1506  0A76               	incf	_Dimmer,w
 10228  1507  0086               	movwf	6
 10229  1508  0187               	clrf	7
 10230  1509  0801               	movf	1,w
 10231  150A  2D11               	goto	L4
 10232  150B                     l8191:	
 10233                           ;Dimmer_B1.c: 541: } else if (status == 3)
 10234                           
 10235  150B  0020               	movlb	0	; select bank0
 10236  150C  082D               	movf	DimmerLights_Exceptions@status,w
 10237  150D  3A03               	xorlw	3
 10238  150E  1D03               	skipz
 10239  150F  2D14               	goto	l797
 10240  1510                     l8193:	
 10241                           
 10242                           ;Dimmer_B1.c: 542: {
 10243                           ;Dimmer_B1.c: 544: setDimmerLights_ERROR(1);
 10244  1510  3001               	movlw	1
 10245  1511                     L4:	
 10246  1511  3197  2707  3194   	fcall	_setDimmerLights_ERROR
 10247  1514                     l797:	
 10248                           
 10249                           ;Dimmer_B1.c: 552: }
 10250                           ;Dimmer_B1.c: 555: setDimmerLights_TriggerERROR(1, 0);
 10251  1514  0020               	movlb	0	; select bank0
 10252  1515  01A2               	clrf	setDimmerLights_TriggerERROR@command
 10253  1516  3001               	movlw	1
 10254  1517  3192  22E0  3194   	fcall	_setDimmerLights_TriggerERROR
 10255                           
 10256                           ;Dimmer_B1.c: 564: if (myMain.SelfTest == 0) {
 10257  151A  0021               	movlb	1	; select bank1
 10258  151B  1B20               	btfsc	_myMain^(0+128),6
 10259  151C  0008               	return
 10260                           
 10261                           ;Dimmer_B1.c: 565: myMain.i = 0;
 10262  151D  102E               	bcf	(_myMain^(0+128)+14),0
 10263                           
 10264                           ;Dimmer_B1.c: 566: myMain.j = 0;
 10265  151E  10AE               	bcf	(_myMain^(0+128)+14),1
 10266                           
 10267                           ;Dimmer_B1.c: 567: myMain.k = 1;
 10268  151F  152E               	bsf	(_myMain^(0+128)+14),2
 10269                           
 10270                           ;Dimmer_B1.c: 568: myMain.Count2 = 0;
 10271  1520  01A7               	clrf	(_myMain^(0+128)+7)
 10272  1521  01A8               	clrf	((_myMain+1)^(0+128)+7)
 10273  1522  0008               	return
 10274  1523                     __end_of_DimmerLights_Exceptions:	
 10275                           
 10276                           	psect	text54
 10277  12E0                     __ptext54:	
 10278 ;; *************** function _setDimmerLights_TriggerERROR *****************
 10279 ;; Defined at:
 10280 ;;		line 591 in file "../src/Dimmer_B1.c"
 10281 ;; Parameters:    Size  Location     Type
 10282 ;;  lights          1    wreg     unsigned char 
 10283 ;;  command         1    2[BANK0 ] unsigned char 
 10284 ;; Auto vars:     Size  Location     Type
 10285 ;;  lights          1    3[BANK0 ] unsigned char 
 10286 ;; Return value:  Size  Location     Type
 10287 ;;		None               void
 10288 ;; Registers used:
 10289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10290 ;; Tracked objects:
 10291 ;;		On entry : 0/0
 10292 ;;		On exit  : 0/0
 10293 ;;		Unchanged: 0/0
 10294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10295 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10296 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;Total ram usage:        2 bytes
 10300 ;; Hardware stack levels used:    1
 10301 ;; Hardware stack levels required when called:    6
 10302 ;; This function calls:
 10303 ;;		_DimmerLightsPointSelect
 10304 ;; This function is called by:
 10305 ;;		_DimmerLights_Exceptions
 10306 ;; This function uses a non-reentrant model
 10307 ;;
 10308                           
 10309                           
 10310                           ;psect for function _setDimmerLights_TriggerERROR
 10311  12E0                     _setDimmerLights_TriggerERROR:	
 10312                           
 10313                           ;incstack = 0
 10314                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 10315                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 10316  12E0  0020               	movlb	0	; select bank0
 10317  12E1  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 10318                           
 10319                           ;Dimmer_B1.c: 593: DimmerLightsPointSelect(lights);
 10320  12E2  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 10321  12E3  319E  2634         	fcall	_DimmerLightsPointSelect
 10322                           
 10323                           ;Dimmer_B1.c: 594: DimmerLights->Trigger = command;
 10324  12E5  0020               	movlb	0	; select bank0
 10325  12E6  086A               	movf	_DimmerLights,w
 10326  12E7  3E08               	addlw	8
 10327  12E8  0086               	movwf	6
 10328  12E9  3001               	movlw	1	; select bank2/3
 10329  12EA  0087               	movwf	7
 10330  12EB  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10331  12EC  1101               	bcf	1,2
 10332  12ED  1D03               	skipz
 10333  12EE  1501               	bsf	1,2
 10334                           
 10335                           ;Dimmer_B1.c: 595: DimmerLights->Switch = command;
 10336  12EF  086A               	movf	_DimmerLights,w
 10337  12F0  3E08               	addlw	8
 10338  12F1  0086               	movwf	6
 10339  12F2  3001               	movlw	1	; select bank2/3
 10340  12F3  0087               	movwf	7
 10341  12F4  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10342  12F5  1081               	bcf	1,1
 10343  12F6  1D03               	skipz
 10344  12F7  1481               	bsf	1,1
 10345                           
 10346                           ;Dimmer_B1.c: 596: DimmerLights->TriggerAdj = command;
 10347  12F8  086A               	movf	_DimmerLights,w
 10348  12F9  3E08               	addlw	8
 10349  12FA  0086               	movwf	6
 10350  12FB  3001               	movlw	1	; select bank2/3
 10351  12FC  0087               	movwf	7
 10352  12FD  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10353  12FE  1201               	bcf	1,4
 10354  12FF  1D03               	skipz
 10355  1300  1601               	bsf	1,4
 10356                           
 10357                           ;Dimmer_B1.c: 597: DimmerLights->AdjGo = command;
 10358  1301  086A               	movf	_DimmerLights,w
 10359  1302  3E08               	addlw	8
 10360  1303  0086               	movwf	6
 10361  1304  3001               	movlw	1	; select bank2/3
 10362  1305  0087               	movwf	7
 10363  1306  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10364  1307  1181               	bcf	1,3
 10365  1308  1D03               	skipz
 10366  1309  1581               	bsf	1,3
 10367  130A  0008               	return
 10368  130B                     __end_of_setDimmerLights_TriggerERROR:	
 10369                           
 10370                           	psect	text55
 10371  1707                     __ptext55:	
 10372 ;; *************** function _setDimmerLights_ERROR *****************
 10373 ;; Defined at:
 10374 ;;		line 573 in file "../src/Dimmer_B1.c"
 10375 ;; Parameters:    Size  Location     Type
 10376 ;;  lights          1    wreg     unsigned char 
 10377 ;; Auto vars:     Size  Location     Type
 10378 ;;  lights          1    5[BANK0 ] unsigned char 
 10379 ;; Return value:  Size  Location     Type
 10380 ;;		None               void
 10381 ;; Registers used:
 10382 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10383 ;; Tracked objects:
 10384 ;;		On entry : 0/0
 10385 ;;		On exit  : 0/0
 10386 ;;		Unchanged: 0/0
 10387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10392 ;;Total ram usage:        2 bytes
 10393 ;; Hardware stack levels used:    1
 10394 ;; Hardware stack levels required when called:    7
 10395 ;; This function calls:
 10396 ;;		_DimmerLightsPointSelect
 10397 ;;		_setLED
 10398 ;;		_setRFSW_Status
 10399 ;;		_setSw_Status
 10400 ;; This function is called by:
 10401 ;;		_DimmerLights_Exceptions
 10402 ;; This function uses a non-reentrant model
 10403 ;;
 10404                           
 10405                           
 10406                           ;psect for function _setDimmerLights_ERROR
 10407  1707                     _setDimmerLights_ERROR:	
 10408                           
 10409                           ;incstack = 0
 10410                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10411                           ;setDimmerLights_ERROR@lights stored from wreg
 10412  1707  0020               	movlb	0	; select bank0
 10413  1708  00A5               	movwf	setDimmerLights_ERROR@lights
 10414                           
 10415                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(lights);
 10416  1709  0825               	movf	setDimmerLights_ERROR@lights,w
 10417  170A  319E  2634  3197   	fcall	_DimmerLightsPointSelect
 10418                           
 10419                           ;Dimmer_B1.c: 575: if (DimmerLights->Status == 1) {
 10420  170D  0020               	movlb	0	; select bank0
 10421  170E  086A               	movf	_DimmerLights,w
 10422  170F  0086               	movwf	6
 10423  1710  3001               	movlw	1	; select bank2/3
 10424  1711  0087               	movwf	7
 10425  1712  1E81               	btfss	1,5
 10426  1713  0008               	return
 10427                           
 10428                           ;Dimmer_B1.c: 577: DimmerLights->Signal = 0;
 10429  1714  086A               	movf	_DimmerLights,w
 10430  1715  0086               	movwf	6
 10431  1716  3001               	movlw	1	; select bank2/3
 10432  1717  0087               	movwf	7
 10433  1718  1081               	bcf	1,1
 10434                           
 10435                           ;Dimmer_B1.c: 578: DimmerLights->AdjFlag = 0;
 10436  1719  086A               	movf	_DimmerLights,w
 10437  171A  0086               	movwf	6
 10438  171B  3001               	movlw	1	; select bank2/3
 10439  171C  0087               	movwf	7
 10440  171D  1181               	bcf	1,3
 10441                           
 10442                           ;Dimmer_B1.c: 579: DimmerLights->AdjStatus = 0;
 10443  171E  086A               	movf	_DimmerLights,w
 10444  171F  0086               	movwf	6
 10445  1720  3001               	movlw	1	; select bank2/3
 10446  1721  0087               	movwf	7
 10447  1722  1201               	bcf	1,4
 10448                           
 10449                           ;Dimmer_B1.c: 580: DimmerLights->StatusFlag = 0;
 10450  1723  086A               	movf	_DimmerLights,w
 10451  1724  0086               	movwf	6
 10452  1725  3001               	movlw	1	; select bank2/3
 10453  1726  0087               	movwf	7
 10454  1727  1301               	bcf	1,6
 10455                           
 10456                           ;Dimmer_B1.c: 581: DimmerLights->DimmingTimeValue = 7;
 10457  1728  3007               	movlw	7
 10458  1729  00A4               	movwf	??_setDimmerLights_ERROR
 10459  172A  086A               	movf	_DimmerLights,w
 10460  172B  3E02               	addlw	2
 10461  172C  0086               	movwf	6
 10462  172D  3001               	movlw	1	; select bank2/3
 10463  172E  0087               	movwf	7
 10464  172F  0824               	movf	??_setDimmerLights_ERROR,w
 10465  1730  0081               	movwf	1
 10466                           
 10467                           ;Dimmer_B1.c: 582: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 10468  1731  086A               	movf	_DimmerLights,w
 10469  1732  3E06               	addlw	6
 10470  1733  0086               	movwf	6
 10471  1734  3001               	movlw	1	; select bank2/3
 10472  1735  0087               	movwf	7
 10473  1736  0801               	movf	1,w
 10474  1737  00A4               	movwf	??_setDimmerLights_ERROR
 10475  1738  086A               	movf	_DimmerLights,w
 10476  1739  3E04               	addlw	4
 10477  173A  0086               	movwf	6
 10478  173B  3001               	movlw	1	; select bank2/3
 10479  173C  0087               	movwf	7
 10480  173D  0824               	movf	??_setDimmerLights_ERROR,w
 10481  173E  0081               	movwf	1
 10482                           
 10483                           ;Dimmer_B1.c: 583: Dimmer->Detect = 1;
 10484  173F  0876               	movf	_Dimmer,w
 10485  1740  0086               	movwf	6
 10486  1741  0187               	clrf	7
 10487  1742  1401               	bsf	1,0
 10488                           
 10489                           ;Dimmer_B1.c: 584: ;;
 10490                           ;Dimmer_B1.c: 585: setLED(lights, 1);
 10491  1743  01A2               	clrf	setLED@command
 10492  1744  0AA2               	incf	setLED@command,f
 10493  1745  0825               	movf	setDimmerLights_ERROR@lights,w
 10494  1746  3189  2169  3197   	fcall	_setLED
 10495                           
 10496                           ;Dimmer_B1.c: 586: setSw_Status(lights, 0);
 10497  1749  0020               	movlb	0	; select bank0
 10498  174A  01A2               	clrf	setSw_Status@command
 10499  174B  0825               	movf	setDimmerLights_ERROR@lights,w
 10500  174C  319E  26E0  3197   	fcall	_setSw_Status
 10501                           
 10502                           ;Dimmer_B1.c: 587: setRFSW_Status(lights, 0);
 10503  174F  0020               	movlb	0	; select bank0
 10504  1750  01A2               	clrf	setRFSW_Status@command
 10505  1751  0825               	movf	setDimmerLights_ERROR@lights,w
 10506  1752  319E  26C4         	fcall	_setRFSW_Status
 10507  1754  0008               	return
 10508  1755                     __end_of_setDimmerLights_ERROR:	
 10509                           
 10510                           	psect	text56
 10511  1DCE                     __ptext56:	
 10512 ;; *************** function _getTemp_Safe *****************
 10513 ;; Defined at:
 10514 ;;		line 21 in file "../src/OverTemperature_B1.c"
 10515 ;; Parameters:    Size  Location     Type
 10516 ;;		None
 10517 ;; Auto vars:     Size  Location     Type
 10518 ;;  result          1    0[BANK0 ] unsigned char 
 10519 ;; Return value:  Size  Location     Type
 10520 ;;                  1    wreg      unsigned char 
 10521 ;; Registers used:
 10522 ;;		wreg, status,2
 10523 ;; Tracked objects:
 10524 ;;		On entry : 0/0
 10525 ;;		On exit  : 0/0
 10526 ;;		Unchanged: 0/0
 10527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10531 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10532 ;;Total ram usage:        1 bytes
 10533 ;; Hardware stack levels used:    1
 10534 ;; Hardware stack levels required when called:    5
 10535 ;; This function calls:
 10536 ;;		Nothing
 10537 ;; This function is called by:
 10538 ;;		_setPowerFault_Main
 10539 ;; This function uses a non-reentrant model
 10540 ;;
 10541                           
 10542                           
 10543                           ;psect for function _getTemp_Safe
 10544  1DCE                     _getTemp_Safe:	
 10545                           
 10546                           ;OverTemperature_B1.c: 22: char result = Temp1.Safe;
 10547                           
 10548                           ;incstack = 0
 10549                           ; Regs used in _getTemp_Safe: [wreg+status,2]
 10550  1DCE  3000               	movlw	0
 10551  1DCF  0021               	movlb	1	; select bank1
 10552  1DD0  1A5C               	btfsc	_Temp1^(0+128),4
 10553  1DD1  3001               	movlw	1
 10554  1DD2  0020               	movlb	0	; select bank0
 10555  1DD3  00A0               	movwf	getTemp_Safe@result
 10556                           
 10557                           ;OverTemperature_B1.c: 23: return result;
 10558  1DD4  0820               	movf	getTemp_Safe@result,w
 10559  1DD5  0008               	return
 10560  1DD6                     __end_of_getTemp_Safe:	
 10561                           
 10562                           	psect	text57
 10563  1D6D                     __ptext57:	
 10564 ;; *************** function _PowerFault_Initialization *****************
 10565 ;; Defined at:
 10566 ;;		line 10 in file "../src/PowerFault_B1.c"
 10567 ;; Parameters:    Size  Location     Type
 10568 ;;		None
 10569 ;; Auto vars:     Size  Location     Type
 10570 ;;		None
 10571 ;; Return value:  Size  Location     Type
 10572 ;;		None               void
 10573 ;; Registers used:
 10574 ;;		status,2, status,0, pclath, cstack
 10575 ;; Tracked objects:
 10576 ;;		On entry : 0/0
 10577 ;;		On exit  : 0/0
 10578 ;;		Unchanged: 0/0
 10579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10584 ;;Total ram usage:        0 bytes
 10585 ;; Hardware stack levels used:    1
 10586 ;; Hardware stack levels required when called:    6
 10587 ;; This function calls:
 10588 ;;		_setPowerFault_Initialization
 10589 ;; This function is called by:
 10590 ;;		_main
 10591 ;; This function uses a non-reentrant model
 10592 ;;
 10593                           
 10594                           
 10595                           ;psect for function _PowerFault_Initialization
 10596  1D6D                     _PowerFault_Initialization:	
 10597                           
 10598                           ;PowerFault_B1.c: 12: setPowerFault_Initialization();
 10599                           
 10600                           ;incstack = 0
 10601                           ; Regs used in _PowerFault_Initialization: [status,2+status,0+pclath+cstack]
 10602  1D6D  319D  259E         	fcall	_setPowerFault_Initialization
 10603  1D6F  0008               	return
 10604  1D70                     __end_of_PowerFault_Initialization:	
 10605                           
 10606                           	psect	text58
 10607  1D9E                     __ptext58:	
 10608 ;; *************** function _setPowerFault_Initialization *****************
 10609 ;; Defined at:
 10610 ;;		line 24 in file "../src/PowerFault_B1.c"
 10611 ;; Parameters:    Size  Location     Type
 10612 ;;		None
 10613 ;; Auto vars:     Size  Location     Type
 10614 ;;		None
 10615 ;; Return value:  Size  Location     Type
 10616 ;;		None               void
 10617 ;; Registers used:
 10618 ;;		None
 10619 ;; Tracked objects:
 10620 ;;		On entry : 0/0
 10621 ;;		On exit  : 0/0
 10622 ;;		Unchanged: 0/0
 10623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;Total ram usage:        0 bytes
 10629 ;; Hardware stack levels used:    1
 10630 ;; Hardware stack levels required when called:    5
 10631 ;; This function calls:
 10632 ;;		Nothing
 10633 ;; This function is called by:
 10634 ;;		_PowerFault_Initialization
 10635 ;; This function uses a non-reentrant model
 10636 ;;
 10637                           
 10638                           
 10639                           ;psect for function _setPowerFault_Initialization
 10640  1D9E                     _setPowerFault_Initialization:	
 10641                           
 10642                           ;PowerFault_B1.c: 25: PF1.Enable = 1;
 10643                           
 10644                           ;incstack = 0
 10645                           ; Regs used in _setPowerFault_Initialization: []
 10646  1D9E  0021               	movlb	1	; select bank1
 10647  1D9F  1448               	bsf	_PF1^(0+128),0
 10648                           
 10649                           ;PowerFault_B1.c: 26: PF1.Safe = 1;
 10650  1DA0  1548               	bsf	_PF1^(0+128),2
 10651  1DA1  0008               	return
 10652  1DA2                     __end_of_setPowerFault_Initialization:	
 10653                           
 10654                           	psect	text59
 10655  1F8E                     __ptext59:	
 10656 ;; *************** function _Mcu_Initialization *****************
 10657 ;; Defined at:
 10658 ;;		line 30 in file "../src/MCU_B1.c"
 10659 ;; Parameters:    Size  Location     Type
 10660 ;;		None
 10661 ;; Auto vars:     Size  Location     Type
 10662 ;;		None
 10663 ;; Return value:  Size  Location     Type
 10664 ;;		None               void
 10665 ;; Registers used:
 10666 ;;		wreg, status,2, status,0, pclath, cstack
 10667 ;; Tracked objects:
 10668 ;;		On entry : 0/0
 10669 ;;		On exit  : 0/0
 10670 ;;		Unchanged: 0/0
 10671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;Total ram usage:        0 bytes
 10677 ;; Hardware stack levels used:    1
 10678 ;; Hardware stack levels required when called:    6
 10679 ;; This function calls:
 10680 ;;		_ADC_Set
 10681 ;;		_Fosc_Set
 10682 ;;		_IOC_Set
 10683 ;;		_IO_Set
 10684 ;;		_TMR0_Set
 10685 ;;		_WDT_Set
 10686 ;; This function is called by:
 10687 ;;		_main
 10688 ;; This function uses a non-reentrant model
 10689 ;;
 10690                           
 10691                           
 10692                           ;psect for function _Mcu_Initialization
 10693  1F8E                     _Mcu_Initialization:	
 10694                           
 10695                           ;MCU_B1.c: 32: Fosc_Set();
 10696                           
 10697                           ;incstack = 0
 10698                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10699  1F8E  319D  259A  319F   	fcall	_Fosc_Set
 10700                           
 10701                           ;MCU_B1.c: 34: IO_Set();
 10702  1F91  3190  20C6  319F   	fcall	_IO_Set
 10703                           
 10704                           ;MCU_B1.c: 36: TMR0_Set();
 10705  1F94  319D  25C6  319F   	fcall	_TMR0_Set
 10706                           
 10707                           ;MCU_B1.c: 38: ;;
 10708                           ;MCU_B1.c: 40: ADC_Set();
 10709  1F97  319D  25BF  319F   	fcall	_ADC_Set
 10710                           
 10711                           ;MCU_B1.c: 44: ;;
 10712                           ;MCU_B1.c: 46: IOC_Set();
 10713  1F9A  319E  26AA  319F   	fcall	_IOC_Set
 10714                           
 10715                           ;MCU_B1.c: 48: ;;
 10716                           ;MCU_B1.c: 50: ;;
 10717                           ;MCU_B1.c: 52: WDT_Set();
 10718  1F9D  319E  2655         	fcall	_WDT_Set
 10719  1F9F  0008               	return
 10720  1FA0                     __end_of_Mcu_Initialization:	
 10721                           
 10722                           	psect	text60
 10723  1E55                     __ptext60:	
 10724 ;; *************** function _WDT_Set *****************
 10725 ;; Defined at:
 10726 ;;		line 902 in file "../src/MCU_B1.c"
 10727 ;; Parameters:    Size  Location     Type
 10728 ;;		None
 10729 ;; Auto vars:     Size  Location     Type
 10730 ;;		None
 10731 ;; Return value:  Size  Location     Type
 10732 ;;		None               void
 10733 ;; Registers used:
 10734 ;;		wreg
 10735 ;; Tracked objects:
 10736 ;;		On entry : 0/0
 10737 ;;		On exit  : 0/0
 10738 ;;		Unchanged: 0/0
 10739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10742 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10743 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10744 ;;Total ram usage:        1 bytes
 10745 ;; Hardware stack levels used:    1
 10746 ;; Hardware stack levels required when called:    5
 10747 ;; This function calls:
 10748 ;;		Nothing
 10749 ;; This function is called by:
 10750 ;;		_Mcu_Initialization
 10751 ;; This function uses a non-reentrant model
 10752 ;;
 10753                           
 10754                           
 10755                           ;psect for function _WDT_Set
 10756  1E55                     _WDT_Set:	
 10757                           
 10758                           ;MCU_B1.c: 903: WDTCON = 0b00010111;;
 10759                           
 10760                           ;incstack = 0
 10761                           ; Regs used in _WDT_Set: [wreg]
 10762  1E55  3017               	movlw	23
 10763  1E56  0021               	movlb	1	; select bank1
 10764  1E57  0097               	movwf	23	;volatile
 10765                           
 10766                           ;MCU_B1.c: 904: WDT.Enable = 1;
 10767  1E58  1452               	bsf	_WDT^(0+128),0
 10768                           
 10769                           ;MCU_B1.c: 905: WDT.Count = 10;
 10770  1E59  300A               	movlw	10
 10771  1E5A  0020               	movlb	0	; select bank0
 10772  1E5B  00A0               	movwf	??_WDT_Set
 10773  1E5C  0820               	movf	??_WDT_Set,w
 10774  1E5D  0021               	movlb	1	; select bank1
 10775  1E5E  00D3               	movwf	(_WDT^(0+128)+1)
 10776  1E5F  0008               	return
 10777  1E60                     __end_of_WDT_Set:	
 10778                           
 10779                           	psect	text61
 10780  1DC6                     __ptext61:	
 10781 ;; *************** function _TMR0_Set *****************
 10782 ;; Defined at:
 10783 ;;		line 126 in file "../src/MCU_B1.c"
 10784 ;; Parameters:    Size  Location     Type
 10785 ;;		None
 10786 ;; Auto vars:     Size  Location     Type
 10787 ;;		None
 10788 ;; Return value:  Size  Location     Type
 10789 ;;		None               void
 10790 ;; Registers used:
 10791 ;;		wreg, status,2
 10792 ;; Tracked objects:
 10793 ;;		On entry : 0/0
 10794 ;;		On exit  : 0/0
 10795 ;;		Unchanged: 0/0
 10796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10801 ;;Total ram usage:        0 bytes
 10802 ;; Hardware stack levels used:    1
 10803 ;; Hardware stack levels required when called:    5
 10804 ;; This function calls:
 10805 ;;		Nothing
 10806 ;; This function is called by:
 10807 ;;		_Mcu_Initialization
 10808 ;; This function uses a non-reentrant model
 10809 ;;
 10810                           
 10811                           
 10812                           ;psect for function _TMR0_Set
 10813  1DC6                     _TMR0_Set:	
 10814                           
 10815                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
 10816                           
 10817                           ;incstack = 0
 10818                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10819  1DC6  0021               	movlb	1	; select bank1
 10820  1DC7  0195               	clrf	21	;volatile
 10821                           
 10822                           ;MCU_B1.c: 129: TMR0 = (256-190);
 10823  1DC8  3042               	movlw	66
 10824  1DC9  0020               	movlb	0	; select bank0
 10825  1DCA  0095               	movwf	21	;volatile
 10826                           
 10827                           ;MCU_B1.c: 130: TMR0IE = 1;
 10828  1DCB  168B               	bsf	11,5	;volatile
 10829                           
 10830                           ;MCU_B1.c: 131: GIE = 1;
 10831  1DCC  178B               	bsf	11,7	;volatile
 10832  1DCD  0008               	return
 10833  1DCE                     __end_of_TMR0_Set:	
 10834                           
 10835                           	psect	text62
 10836  10C6                     __ptext62:	
 10837 ;; *************** function _IO_Set *****************
 10838 ;; Defined at:
 10839 ;;		line 60 in file "../src/MCU_B1.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;		None
 10842 ;; Auto vars:     Size  Location     Type
 10843 ;;		None
 10844 ;; Return value:  Size  Location     Type
 10845 ;;		None               void
 10846 ;; Registers used:
 10847 ;;		wreg, status,2
 10848 ;; Tracked objects:
 10849 ;;		On entry : 0/0
 10850 ;;		On exit  : 0/0
 10851 ;;		Unchanged: 0/0
 10852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10857 ;;Total ram usage:        0 bytes
 10858 ;; Hardware stack levels used:    1
 10859 ;; Hardware stack levels required when called:    5
 10860 ;; This function calls:
 10861 ;;		Nothing
 10862 ;; This function is called by:
 10863 ;;		_Mcu_Initialization
 10864 ;; This function uses a non-reentrant model
 10865 ;;
 10866                           
 10867                           
 10868                           ;psect for function _IO_Set
 10869  10C6                     _IO_Set:	
 10870                           
 10871                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10872                           
 10873                           ;incstack = 0
 10874                           ; Regs used in _IO_Set: [wreg+status,2]
 10875  10C6  3077               	movlw	119
 10876  10C7  0021               	movlb	1	; select bank1
 10877  10C8  008C               	movwf	12	;volatile
 10878                           
 10879                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10880  10C9  3007               	movlw	7
 10881  10CA  008D               	movwf	13	;volatile
 10882                           
 10883                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10884  10CB  300C               	movlw	12
 10885  10CC  008E               	movwf	14	;volatile
 10886                           
 10887                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10888  10CD  0022               	movlb	2	; select bank2
 10889  10CE  018C               	clrf	12	;volatile
 10890                           
 10891                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10892  10CF  3002               	movlw	2
 10893  10D0  008D               	movwf	13	;volatile
 10894                           
 10895                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10896  10D1  018E               	clrf	14	;volatile
 10897                           
 10898                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10899  10D2  3022               	movlw	34
 10900  10D3  0023               	movlb	3	; select bank3
 10901  10D4  008C               	movwf	12	;volatile
 10902                           
 10903                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10904  10D5  018D               	clrf	13	;volatile
 10905                           
 10906                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10907  10D6  018E               	clrf	14	;volatile
 10908                           
 10909                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10910  10D7  3077               	movlw	119
 10911  10D8  0020               	movlb	0	; select bank0
 10912  10D9  008C               	movwf	12	;volatile
 10913                           
 10914                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10915  10DA  3007               	movlw	7
 10916  10DB  008D               	movwf	13	;volatile
 10917                           
 10918                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10919  10DC  300C               	movlw	12
 10920  10DD  008E               	movwf	14	;volatile
 10921  10DE  0008               	return
 10922  10DF                     __end_of_IO_Set:	
 10923                           
 10924                           	psect	text63
 10925  1EAA                     __ptext63:	
 10926 ;; *************** function _IOC_Set *****************
 10927 ;; Defined at:
 10928 ;;		line 264 in file "../src/MCU_B1.c"
 10929 ;; Parameters:    Size  Location     Type
 10930 ;;		None
 10931 ;; Auto vars:     Size  Location     Type
 10932 ;;		None
 10933 ;; Return value:  Size  Location     Type
 10934 ;;		None               void
 10935 ;; Registers used:
 10936 ;;		wreg, status,2
 10937 ;; Tracked objects:
 10938 ;;		On entry : 0/0
 10939 ;;		On exit  : 0/0
 10940 ;;		Unchanged: 0/0
 10941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;Total ram usage:        0 bytes
 10947 ;; Hardware stack levels used:    1
 10948 ;; Hardware stack levels required when called:    5
 10949 ;; This function calls:
 10950 ;;		Nothing
 10951 ;; This function is called by:
 10952 ;;		_Mcu_Initialization
 10953 ;; This function uses a non-reentrant model
 10954 ;;
 10955                           
 10956                           
 10957                           ;psect for function _IOC_Set
 10958  1EAA                     _IOC_Set:	
 10959                           
 10960                           ;MCU_B1.c: 265: WPUB2 = 0;
 10961                           
 10962                           ;incstack = 0
 10963                           ; Regs used in _IOC_Set: [wreg+status,2]
 10964  1EAA  0024               	movlb	4	; select bank4
 10965  1EAB  110D               	bcf	13,2	;volatile
 10966                           
 10967                           ;MCU_B1.c: 268: IOCBP = 0b00000100;
 10968  1EAC  3004               	movlw	4
 10969  1EAD  0027               	movlb	7	; select bank7
 10970  1EAE  0094               	movwf	20	;volatile
 10971                           
 10972                           ;MCU_B1.c: 269: IOCBN = 0b00000100;
 10973  1EAF  3004               	movlw	4
 10974  1EB0  0095               	movwf	21	;volatile
 10975                           
 10976                           ;MCU_B1.c: 289: IOCBF = 0b00000000;
 10977  1EB1  0196               	clrf	22	;volatile
 10978                           
 10979                           ;MCU_B1.c: 291: IOCIE = 1;
 10980  1EB2  158B               	bsf	11,3	;volatile
 10981                           
 10982                           ;MCU_B1.c: 292: IOCIF = 0;
 10983  1EB3  100B               	bcf	11,0	;volatile
 10984                           
 10985                           ;MCU_B1.c: 293: PEIE = 1;
 10986  1EB4  170B               	bsf	11,6	;volatile
 10987                           
 10988                           ;MCU_B1.c: 294: GIE = 1;
 10989  1EB5  178B               	bsf	11,7	;volatile
 10990  1EB6  0008               	return
 10991  1EB7                     __end_of_IOC_Set:	
 10992                           
 10993                           	psect	text64
 10994  1D9A                     __ptext64:	
 10995 ;; *************** function _Fosc_Set *****************
 10996 ;; Defined at:
 10997 ;;		line 56 in file "../src/MCU_B1.c"
 10998 ;; Parameters:    Size  Location     Type
 10999 ;;		None
 11000 ;; Auto vars:     Size  Location     Type
 11001 ;;		None
 11002 ;; Return value:  Size  Location     Type
 11003 ;;		None               void
 11004 ;; Registers used:
 11005 ;;		wreg
 11006 ;; Tracked objects:
 11007 ;;		On entry : 0/0
 11008 ;;		On exit  : 0/0
 11009 ;;		Unchanged: 0/0
 11010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11015 ;;Total ram usage:        0 bytes
 11016 ;; Hardware stack levels used:    1
 11017 ;; Hardware stack levels required when called:    5
 11018 ;; This function calls:
 11019 ;;		Nothing
 11020 ;; This function is called by:
 11021 ;;		_Mcu_Initialization
 11022 ;; This function uses a non-reentrant model
 11023 ;;
 11024                           
 11025                           
 11026                           ;psect for function _Fosc_Set
 11027  1D9A                     _Fosc_Set:	
 11028                           
 11029                           ;MCU_B1.c: 57: OSCCON = 0x78;
 11030                           
 11031                           ;incstack = 0
 11032                           ; Regs used in _Fosc_Set: [wreg]
 11033  1D9A  3078               	movlw	120
 11034  1D9B  0021               	movlb	1	; select bank1
 11035  1D9C  0099               	movwf	25	;volatile
 11036  1D9D  0008               	return
 11037  1D9E                     __end_of_Fosc_Set:	
 11038                           
 11039                           	psect	text65
 11040  1DBF                     __ptext65:	
 11041 ;; *************** function _ADC_Set *****************
 11042 ;; Defined at:
 11043 ;;		line 316 in file "../src/MCU_B1.c"
 11044 ;; Parameters:    Size  Location     Type
 11045 ;;		None
 11046 ;; Auto vars:     Size  Location     Type
 11047 ;;		None
 11048 ;; Return value:  Size  Location     Type
 11049 ;;		None               void
 11050 ;; Registers used:
 11051 ;;		wreg
 11052 ;; Tracked objects:
 11053 ;;		On entry : 0/0
 11054 ;;		On exit  : 0/0
 11055 ;;		Unchanged: 0/0
 11056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11061 ;;Total ram usage:        0 bytes
 11062 ;; Hardware stack levels used:    1
 11063 ;; Hardware stack levels required when called:    5
 11064 ;; This function calls:
 11065 ;;		Nothing
 11066 ;; This function is called by:
 11067 ;;		_Mcu_Initialization
 11068 ;; This function uses a non-reentrant model
 11069 ;;
 11070                           
 11071                           
 11072                           ;psect for function _ADC_Set
 11073  1DBF                     _ADC_Set:	
 11074                           
 11075                           ;MCU_B1.c: 317: ADCON1 = 0xf2;
 11076                           
 11077                           ;incstack = 0
 11078                           ; Regs used in _ADC_Set: [wreg]
 11079  1DBF  30F2               	movlw	242
 11080  1DC0  0021               	movlb	1	; select bank1
 11081  1DC1  009E               	movwf	30	;volatile
 11082                           
 11083                           ;MCU_B1.c: 318: FVRCON = 0xc0;
 11084  1DC2  30C0               	movlw	192
 11085  1DC3  0022               	movlb	2	; select bank2
 11086  1DC4  0097               	movwf	23	;volatile
 11087  1DC5  0008               	return
 11088  1DC6                     __end_of_ADC_Set:	
 11089                           
 11090                           	psect	text66
 11091  1E84                     __ptext66:	
 11092 ;; *************** function _LED_Main *****************
 11093 ;; Defined at:
 11094 ;;		line 47 in file "../src/LED_B1.c"
 11095 ;; Parameters:    Size  Location     Type
 11096 ;;		None
 11097 ;; Auto vars:     Size  Location     Type
 11098 ;;		None
 11099 ;; Return value:  Size  Location     Type
 11100 ;;		None               void
 11101 ;; Registers used:
 11102 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11103 ;; Tracked objects:
 11104 ;;		On entry : 0/0
 11105 ;;		On exit  : 0/0
 11106 ;;		Unchanged: 0/0
 11107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11112 ;;Total ram usage:        0 bytes
 11113 ;; Hardware stack levels used:    1
 11114 ;; Hardware stack levels required when called:    7
 11115 ;; This function calls:
 11116 ;;		_setLED_Main
 11117 ;; This function is called by:
 11118 ;;		_main
 11119 ;; This function uses a non-reentrant model
 11120 ;;
 11121                           
 11122                           
 11123                           ;psect for function _LED_Main
 11124  1E84                     _LED_Main:	
 11125                           
 11126                           ;LED_B1.c: 49: setLED_Main(1);
 11127                           
 11128                           ;incstack = 0
 11129                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11130  1E84  3001               	movlw	1
 11131  1E85  3195  2523  319E   	fcall	_setLED_Main
 11132                           
 11133                           ;LED_B1.c: 52: setLED_Main(2);
 11134  1E88  3002               	movlw	2
 11135  1E89  3195  2523  319E   	fcall	_setLED_Main
 11136                           
 11137                           ;LED_B1.c: 58: setLED_Main(99);
 11138  1E8C  3063               	movlw	99
 11139  1E8D  3195  2523         	fcall	_setLED_Main
 11140  1E8F  0008               	return
 11141  1E90                     __end_of_LED_Main:	
 11142                           
 11143                           	psect	text67
 11144  1523                     __ptext67:	
 11145 ;; *************** function _setLED_Main *****************
 11146 ;; Defined at:
 11147 ;;		line 192 in file "../src/LED_B1.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;  led             1    wreg     unsigned char 
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;  led             1    4[BANK0 ] unsigned char 
 11152 ;; Return value:  Size  Location     Type
 11153 ;;		None               void
 11154 ;; Registers used:
 11155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/0
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;Total ram usage:        3 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; Hardware stack levels required when called:    6
 11168 ;; This function calls:
 11169 ;;		_LedPointSelect
 11170 ;; This function is called by:
 11171 ;;		_LED_Main
 11172 ;; This function uses a non-reentrant model
 11173 ;;
 11174                           
 11175                           
 11176                           ;psect for function _setLED_Main
 11177  1523                     _setLED_Main:	
 11178                           
 11179                           ;incstack = 0
 11180                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11181                           ;setLED_Main@led stored from wreg
 11182  1523  0020               	movlb	0	; select bank0
 11183  1524  00A4               	movwf	setLED_Main@led
 11184                           
 11185                           ;LED_B1.c: 193: LedPointSelect(led);
 11186  1525  0824               	movf	setLED_Main@led,w
 11187  1526  3190  20F9  3195   	fcall	_LedPointSelect
 11188                           
 11189                           ;LED_B1.c: 194: if (LED->GO == 1) {
 11190  1529  0020               	movlb	0	; select bank0
 11191  152A  086B               	movf	_LED,w
 11192  152B  0086               	movwf	6
 11193  152C  3001               	movlw	1	; select bank2/3
 11194  152D  0087               	movwf	7
 11195  152E  1C81               	btfss	1,1
 11196  152F  0008               	return
 11197                           
 11198                           ;LED_B1.c: 195: LED->Time++;
 11199  1530  0A6B               	incf	_LED,w
 11200  1531  0086               	movwf	6
 11201  1532  3001               	movlw	1	; select bank2/3
 11202  1533  0087               	movwf	7
 11203  1534  3001               	movlw	1
 11204  1535  0781               	addwf	1,f
 11205  1536  3141               	addfsr 1,1
 11206  1537  1803               	skipnc
 11207  1538  0A81               	incf	1,f
 11208                           
 11209                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 11210  1539  0A6B               	incf	_LED,w
 11211  153A  0086               	movwf	6
 11212  153B  3001               	movlw	1	; select bank2/3
 11213  153C  0087               	movwf	7
 11214  153D  3F40               	moviw [0]fsr1
 11215  153E  00A2               	movwf	??_setLED_Main
 11216  153F  3F41               	moviw [1]fsr1
 11217  1540  00A3               	movwf	??_setLED_Main+1
 11218  1541  3000               	movlw	0
 11219  1542  0223               	subwf	??_setLED_Main+1,w
 11220  1543  3032               	movlw	50
 11221  1544  1903               	skipnz
 11222  1545  0222               	subwf	??_setLED_Main,w
 11223  1546  1C03               	skipc
 11224  1547  0008               	return
 11225                           
 11226                           ;LED_B1.c: 197: LED->Time = 0;
 11227  1548  0A6B               	incf	_LED,w
 11228  1549  0086               	movwf	6
 11229  154A  3001               	movlw	1	; select bank2/3
 11230  154B  0087               	movwf	7
 11231  154C  3000               	movlw	0
 11232  154D  3FC0               	movwi [0]fsr1
 11233  154E  3FC1               	movwi [1]fsr1
 11234                           
 11235                           ;LED_B1.c: 199: if (led == 1) {
 11236  154F  0824               	movf	setLED_Main@led,w
 11237  1550  3A01               	xorlw	1
 11238  1551  1D03               	skipz
 11239  1552  2D56               	goto	l8805
 11240                           
 11241                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 11242  1553  3008               	movlw	8
 11243  1554  068C               	xorwf	12,f
 11244                           
 11245                           ;LED_B1.c: 201: }
 11246  1555  0008               	return
 11247  1556                     l8805:	
 11248                           
 11249                           ;LED_B1.c: 204: else if (led == 2) {
 11250  1556  0824               	movf	setLED_Main@led,w
 11251  1557  3A02               	xorlw	2
 11252  1558  1D03               	skipz
 11253  1559  2D5D               	goto	l8809
 11254                           
 11255                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 11256  155A  3080               	movlw	128
 11257  155B  068E               	xorwf	14,f
 11258                           
 11259                           ;LED_B1.c: 206: }
 11260  155C  0008               	return
 11261  155D                     l8809:	
 11262                           
 11263                           ;LED_B1.c: 214: else if (led == 99) {
 11264  155D  0824               	movf	setLED_Main@led,w
 11265  155E  3A63               	xorlw	99
 11266  155F  1D03               	skipz
 11267  1560  0008               	return
 11268                           
 11269                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 11270  1561  3020               	movlw	32
 11271  1562  068D               	xorwf	13,f
 11272  1563  0008               	return
 11273  1564                     __end_of_setLED_Main:	
 11274                           
 11275                           	psect	text68
 11276  1E78                     __ptext68:	
 11277 ;; *************** function _LED_Initialization *****************
 11278 ;; Defined at:
 11279 ;;		line 31 in file "../src/LED_B1.c"
 11280 ;; Parameters:    Size  Location     Type
 11281 ;;		None
 11282 ;; Auto vars:     Size  Location     Type
 11283 ;;		None
 11284 ;; Return value:  Size  Location     Type
 11285 ;;		None               void
 11286 ;; Registers used:
 11287 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11288 ;; Tracked objects:
 11289 ;;		On entry : 0/0
 11290 ;;		On exit  : 0/0
 11291 ;;		Unchanged: 0/0
 11292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11297 ;;Total ram usage:        0 bytes
 11298 ;; Hardware stack levels used:    1
 11299 ;; Hardware stack levels required when called:    8
 11300 ;; This function calls:
 11301 ;;		_setLED_Initialization
 11302 ;; This function is called by:
 11303 ;;		_main
 11304 ;; This function uses a non-reentrant model
 11305 ;;
 11306                           
 11307                           
 11308                           ;psect for function _LED_Initialization
 11309  1E78                     _LED_Initialization:	
 11310                           
 11311                           ;LED_B1.c: 33: setLED_Initialization(1);
 11312                           
 11313                           ;incstack = 0
 11314                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11315  1E78  3001               	movlw	1
 11316  1E79  319F  276C  319E   	fcall	_setLED_Initialization
 11317                           
 11318                           ;LED_B1.c: 36: setLED_Initialization(2);
 11319  1E7C  3002               	movlw	2
 11320  1E7D  319F  276C  319E   	fcall	_setLED_Initialization
 11321                           
 11322                           ;LED_B1.c: 42: setLED_Initialization(99);
 11323  1E80  3063               	movlw	99
 11324  1E81  319F  276C         	fcall	_setLED_Initialization
 11325  1E83  0008               	return
 11326  1E84                     __end_of_LED_Initialization:	
 11327                           
 11328                           	psect	text69
 11329  1F6C                     __ptext69:	
 11330 ;; *************** function _setLED_Initialization *****************
 11331 ;; Defined at:
 11332 ;;		line 63 in file "../src/LED_B1.c"
 11333 ;; Parameters:    Size  Location     Type
 11334 ;;  led             1    wreg     unsigned char 
 11335 ;; Auto vars:     Size  Location     Type
 11336 ;;  led             1    4[BANK0 ] unsigned char 
 11337 ;; Return value:  Size  Location     Type
 11338 ;;		None               void
 11339 ;; Registers used:
 11340 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11341 ;; Tracked objects:
 11342 ;;		On entry : 0/0
 11343 ;;		On exit  : 0/0
 11344 ;;		Unchanged: 0/0
 11345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11347 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11349 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11350 ;;Total ram usage:        1 bytes
 11351 ;; Hardware stack levels used:    1
 11352 ;; Hardware stack levels required when called:    7
 11353 ;; This function calls:
 11354 ;;		_LedPointSelect
 11355 ;;		_setLED
 11356 ;; This function is called by:
 11357 ;;		_LED_Initialization
 11358 ;; This function uses a non-reentrant model
 11359 ;;
 11360                           
 11361                           
 11362                           ;psect for function _setLED_Initialization
 11363  1F6C                     _setLED_Initialization:	
 11364                           
 11365                           ;incstack = 0
 11366                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11367                           ;setLED_Initialization@led stored from wreg
 11368  1F6C  0020               	movlb	0	; select bank0
 11369  1F6D  00A4               	movwf	setLED_Initialization@led
 11370                           
 11371                           ;LED_B1.c: 64: LedPointSelect(led);
 11372  1F6E  0824               	movf	setLED_Initialization@led,w
 11373  1F6F  3190  20F9  319F   	fcall	_LedPointSelect
 11374                           
 11375                           ;LED_B1.c: 65: LED->Enable = 1;
 11376  1F72  0020               	movlb	0	; select bank0
 11377  1F73  086B               	movf	_LED,w
 11378  1F74  0086               	movwf	6
 11379  1F75  3001               	movlw	1	; select bank2/3
 11380  1F76  0087               	movwf	7
 11381  1F77  1401               	bsf	1,0
 11382                           
 11383                           ;LED_B1.c: 66: setLED(led, 0);
 11384  1F78  01A2               	clrf	setLED@command
 11385  1F79  0824               	movf	setLED_Initialization@led,w
 11386  1F7A  3189  2169         	fcall	_setLED
 11387  1F7C  0008               	return
 11388  1F7D                     __end_of_setLED_Initialization:	
 11389                           
 11390                           	psect	text70
 11391  1135                     __ptext70:	
 11392 ;; *************** function _Flash_Memory_Main *****************
 11393 ;; Defined at:
 11394 ;;		line 797 in file "../src/MCU_B1.c"
 11395 ;; Parameters:    Size  Location     Type
 11396 ;;		None
 11397 ;; Auto vars:     Size  Location     Type
 11398 ;;		None
 11399 ;; Return value:  Size  Location     Type
 11400 ;;		None               void
 11401 ;; Registers used:
 11402 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11403 ;; Tracked objects:
 11404 ;;		On entry : 0/0
 11405 ;;		On exit  : 0/0
 11406 ;;		Unchanged: 0/0
 11407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11412 ;;Total ram usage:        0 bytes
 11413 ;; Hardware stack levels used:    1
 11414 ;; Hardware stack levels required when called:    8
 11415 ;; This function calls:
 11416 ;;		_Flash_Memory_Modify
 11417 ;; This function is called by:
 11418 ;;		_main
 11419 ;; This function uses a non-reentrant model
 11420 ;;
 11421                           
 11422                           
 11423                           ;psect for function _Flash_Memory_Main
 11424  1135                     _Flash_Memory_Main:	
 11425                           
 11426                           ;MCU_B1.c: 798: if (Memory.GO == 1) {
 11427                           
 11428                           ;incstack = 0
 11429                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11430  1135  0022               	movlb	2	; select bank2
 11431  1136  1CE1               	btfss	(_Memory^(0+256)+36),1
 11432  1137  0008               	return
 11433                           
 11434                           ;MCU_B1.c: 799: if (Memory.Modify == 1) {
 11435  1138  1C61               	btfss	(_Memory^(0+256)+36),0
 11436  1139  2952               	goto	l1254
 11437                           
 11438                           ;MCU_B1.c: 800: Memory.Time++;
 11439  113A  3001               	movlw	1
 11440  113B  07DF               	addwf	(_Memory^(0+256)+34),f
 11441  113C  3000               	movlw	0
 11442  113D  3DE0               	addwfc	((_Memory+1)^(0+256)+34),f
 11443                           
 11444                           ;MCU_B1.c: 801: if (Memory.Time == 25)
 11445  113E  3022               	movlw	34
 11446  113F  3E3D               	addlw	_Memory& (0+255)
 11447  1140  0086               	movwf	6
 11448  1141  3001               	movlw	1	; select bank2/3
 11449  1142  0087               	movwf	7
 11450  1143  3F40               	moviw [0]fsr1
 11451  1144  3A19               	xorlw	25
 11452  1145  1D03               	skipz
 11453  1146  2949               	goto	u9675
 11454  1147  3F41               	moviw [1]fsr1
 11455  1148  3A00               	xorlw	0
 11456  1149                     u9675:	
 11457  1149  1D03               	skipz
 11458  114A  0008               	return
 11459                           
 11460                           ;MCU_B1.c: 802: {
 11461                           ;MCU_B1.c: 803: Memory.Time = 0;
 11462  114B  01DF               	clrf	(_Memory^(0+256)+34)
 11463  114C  01E0               	clrf	((_Memory+1)^(0+256)+34)
 11464                           
 11465                           ;MCU_B1.c: 804: Memory.Modify = 0;
 11466  114D  1061               	bcf	(_Memory^(0+256)+36),0
 11467                           
 11468                           ;MCU_B1.c: 805: Memory.GO = 0;
 11469  114E  10E1               	bcf	(_Memory^(0+256)+36),1
 11470                           
 11471                           ;MCU_B1.c: 806: Flash_Memory_Modify();
 11472  114F  3195  25A7         	fcall	_Flash_Memory_Modify
 11473                           
 11474                           ;MCU_B1.c: 807: }
 11475                           ;MCU_B1.c: 808: } else {
 11476  1151  0008               	return
 11477  1152                     l1254:	
 11478                           
 11479                           ;MCU_B1.c: 809: Memory.GO = 0;
 11480  1152  10E1               	bcf	(_Memory^(0+256)+36),1
 11481  1153  0008               	return
 11482  1154                     __end_of_Flash_Memory_Main:	
 11483                           
 11484                           	psect	text71
 11485  15A7                     __ptext71:	
 11486 ;; *************** function _Flash_Memory_Modify *****************
 11487 ;; Defined at:
 11488 ;;		line 866 in file "../src/MCU_B1.c"
 11489 ;; Parameters:    Size  Location     Type
 11490 ;;		None
 11491 ;; Auto vars:     Size  Location     Type
 11492 ;;  i               1    5[BANK0 ] unsigned char 
 11493 ;; Return value:  Size  Location     Type
 11494 ;;		None               void
 11495 ;; Registers used:
 11496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11497 ;; Tracked objects:
 11498 ;;		On entry : 0/0
 11499 ;;		On exit  : 0/0
 11500 ;;		Unchanged: 0/0
 11501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11503 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11505 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11506 ;;Total ram usage:        2 bytes
 11507 ;; Hardware stack levels used:    1
 11508 ;; Hardware stack levels required when called:    7
 11509 ;; This function calls:
 11510 ;;		_Flash_Memory_Erasing
 11511 ;;		_Flash_Memory_Read
 11512 ;;		_Flash_Memory_Write
 11513 ;; This function is called by:
 11514 ;;		_Flash_Memory_Main
 11515 ;; This function uses a non-reentrant model
 11516 ;;
 11517                           
 11518                           
 11519                           ;psect for function _Flash_Memory_Modify
 11520  15A7                     _Flash_Memory_Modify:	
 11521                           
 11522                           ;MCU_B1.c: 867: char i = 0;
 11523                           
 11524                           ;incstack = 0
 11525                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11526  15A7  0020               	movlb	0	; select bank0
 11527  15A8  01A5               	clrf	Flash_Memory_Modify@i
 11528                           
 11529                           ;MCU_B1.c: 868: for (i = 0; i < 32; i++) {
 11530  15A9  01A5               	clrf	Flash_Memory_Modify@i
 11531  15AA  3020               	movlw	32
 11532  15AB  0225               	subwf	Flash_Memory_Modify@i,w
 11533  15AC  1803               	btfsc	3,0
 11534  15AD  2DC3               	goto	l8889
 11535  15AE                     l8883:	
 11536                           
 11537                           ;MCU_B1.c: 869: Memory.Data[i] = Flash_Memory_Read(i);
 11538  15AE  0825               	movf	Flash_Memory_Modify@i,w
 11539  15AF  3190  20DF  3195   	fcall	_Flash_Memory_Read
 11540  15B2  0020               	movlb	0	; select bank0
 11541  15B3  00A4               	movwf	??_Flash_Memory_Modify
 11542  15B4  0825               	movf	Flash_Memory_Modify@i,w
 11543  15B5  3E3D               	addlw	_Memory& (0+255)
 11544  15B6  0086               	movwf	6
 11545  15B7  3001               	movlw	1	; select bank2/3
 11546  15B8  0087               	movwf	7
 11547  15B9  0824               	movf	??_Flash_Memory_Modify,w
 11548  15BA  0081               	movwf	1
 11549  15BB  3001               	movlw	1
 11550  15BC  00A4               	movwf	??_Flash_Memory_Modify
 11551  15BD  0824               	movf	??_Flash_Memory_Modify,w
 11552  15BE  07A5               	addwf	Flash_Memory_Modify@i,f
 11553  15BF  3020               	movlw	32
 11554  15C0  0225               	subwf	Flash_Memory_Modify@i,w
 11555  15C1  1C03               	skipc
 11556  15C2  2DAE               	goto	l8883
 11557  15C3                     l8889:	
 11558                           
 11559                           ;MCU_B1.c: 870: }
 11560                           ;MCU_B1.c: 871: Memory.Data[0]=product->Data[12];
 11561  15C3  086D               	movf	_product,w
 11562  15C4  0086               	movwf	6
 11563  15C5  3001               	movlw	1	; select bank2/3
 11564  15C6  0087               	movwf	7
 11565  15C7  3001               	movlw	1	; select bank2/3
 11566  15C8  3F4C               	moviw [12]fsr1
 11567  15C9  0022               	movlb	2	; select bank2
 11568  15CA  00BD               	movwf	_Memory^(0+256)
 11569                           
 11570                           ;MCU_B1.c: 872: Memory.Data[1]=product->Data[13];
 11571  15CB  0020               	movlb	0	; select bank0
 11572  15CC  086D               	movf	_product,w
 11573  15CD  0086               	movwf	6
 11574  15CE  3001               	movlw	1	; select bank2/3
 11575  15CF  0087               	movwf	7
 11576  15D0  3001               	movlw	1	; select bank2/3
 11577  15D1  3F4D               	moviw [13]fsr1
 11578  15D2  0022               	movlb	2	; select bank2
 11579  15D3  00BE               	movwf	(_Memory^(0+256)+1)
 11580                           
 11581                           ;MCU_B1.c: 873: Memory.Data[2]=product->Data[14];
 11582  15D4  0020               	movlb	0	; select bank0
 11583  15D5  086D               	movf	_product,w
 11584  15D6  0086               	movwf	6
 11585  15D7  3001               	movlw	1	; select bank2/3
 11586  15D8  0087               	movwf	7
 11587  15D9  3001               	movlw	1	; select bank2/3
 11588  15DA  3F4E               	moviw [14]fsr1
 11589  15DB  0022               	movlb	2	; select bank2
 11590  15DC  00BF               	movwf	(_Memory^(0+256)+2)
 11591                           
 11592                           ;MCU_B1.c: 879: if (Memory.LoopSave == 1) {
 11593  15DD  1D61               	btfss	(_Memory^(0+256)+36),2
 11594  15DE  2DE3               	goto	l1276
 11595                           
 11596                           ;MCU_B1.c: 880: Memory.LoopSave = 0;
 11597  15DF  1161               	bcf	(_Memory^(0+256)+36),2
 11598                           
 11599                           ;MCU_B1.c: 881: myMain.FirstOpen = 0;
 11600  15E0  0021               	movlb	1	; select bank1
 11601  15E1  12A0               	bcf	_myMain^(0+128),5
 11602                           
 11603                           ;MCU_B1.c: 882: myMain.First = 0;
 11604  15E2  13A0               	bcf	_myMain^(0+128),7
 11605  15E3                     l1276:	
 11606                           
 11607                           ;MCU_B1.c: 884: }
 11608                           ;MCU_B1.c: 885: GIE = 0;
 11609  15E3  138B               	bcf	11,7	;volatile
 11610                           
 11611                           ;MCU_B1.c: 886: Flash_Memory_Erasing();
 11612  15E4  319E  266C  3195   	fcall	_Flash_Memory_Erasing
 11613                           
 11614                           ;MCU_B1.c: 887: Flash_Memory_Write();
 11615  15E7  3187  27D1         	fcall	_Flash_Memory_Write
 11616                           
 11617                           ;MCU_B1.c: 888: GIE = 1;
 11618  15E9  178B               	bsf	11,7	;volatile
 11619  15EA  0008               	return
 11620  15EB                     __end_of_Flash_Memory_Modify:	
 11621                           
 11622                           	psect	text72
 11623  1E6C                     __ptext72:	
 11624 ;; *************** function _Flash_Memory_Erasing *****************
 11625 ;; Defined at:
 11626 ;;		line 855 in file "../src/MCU_B1.c"
 11627 ;; Parameters:    Size  Location     Type
 11628 ;;		None
 11629 ;; Auto vars:     Size  Location     Type
 11630 ;;		None
 11631 ;; Return value:  Size  Location     Type
 11632 ;;		None               void
 11633 ;; Registers used:
 11634 ;;		wreg, status,2, status,0, pclath, cstack
 11635 ;; Tracked objects:
 11636 ;;		On entry : 0/0
 11637 ;;		On exit  : 0/0
 11638 ;;		Unchanged: 0/0
 11639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;Total ram usage:        0 bytes
 11645 ;; Hardware stack levels used:    1
 11646 ;; Hardware stack levels required when called:    6
 11647 ;; This function calls:
 11648 ;;		_Flash_Memory_Unlock
 11649 ;; This function is called by:
 11650 ;;		_Flash_Memory_Modify
 11651 ;; This function uses a non-reentrant model
 11652 ;;
 11653                           
 11654                           
 11655                           ;psect for function _Flash_Memory_Erasing
 11656  1E6C                     _Flash_Memory_Erasing:	
 11657                           
 11658                           ;MCU_B1.c: 856: CFGS = 0;
 11659                           
 11660                           ;incstack = 0
 11661                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11662  1E6C  0023               	movlb	3	; select bank3
 11663  1E6D  1315               	bcf	21,6	;volatile
 11664                           
 11665                           ;MCU_B1.c: 857: PMADRH = 0x30;
 11666  1E6E  3030               	movlw	48
 11667  1E6F  0092               	movwf	18	;volatile
 11668                           
 11669                           ;MCU_B1.c: 858: PMADRL = 0x00;
 11670  1E70  0191               	clrf	17	;volatile
 11671                           
 11672                           ;MCU_B1.c: 859: FREE = 1;
 11673  1E71  1615               	bsf	21,4	;volatile
 11674                           
 11675                           ;MCU_B1.c: 860: WREN = 1;
 11676  1E72  1515               	bsf	21,2	;volatile
 11677                           
 11678                           ;MCU_B1.c: 861: Flash_Memory_Unlock();
 11679  1E73  319D  25EE         	fcall	_Flash_Memory_Unlock
 11680                           
 11681                           ;MCU_B1.c: 862: WREN = 0;
 11682  1E75  0023               	movlb	3	; select bank3
 11683  1E76  1115               	bcf	21,2	;volatile
 11684  1E77  0008               	return
 11685  1E78                     __end_of_Flash_Memory_Erasing:	
 11686                           
 11687                           	psect	text73
 11688  04EE                     __ptext73:	
 11689 ;; *************** function _Flash_Memory_Initialization *****************
 11690 ;; Defined at:
 11691 ;;		line 756 in file "../src/MCU_B1.c"
 11692 ;; Parameters:    Size  Location     Type
 11693 ;;		None
 11694 ;; Auto vars:     Size  Location     Type
 11695 ;;  i               1   62[BANK0 ] unsigned char 
 11696 ;; Return value:  Size  Location     Type
 11697 ;;		None               void
 11698 ;; Registers used:
 11699 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11700 ;; Tracked objects:
 11701 ;;		On entry : 0/0
 11702 ;;		On exit  : 0/0
 11703 ;;		Unchanged: 0/0
 11704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11708 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11709 ;;Total ram usage:        2 bytes
 11710 ;; Hardware stack levels used:    1
 11711 ;; Hardware stack levels required when called:    8
 11712 ;; This function calls:
 11713 ;;		_Flash_Memory_Read
 11714 ;;		_Flash_Memory_Write
 11715 ;;		_setPercentValue
 11716 ;; This function is called by:
 11717 ;;		_main
 11718 ;; This function uses a non-reentrant model
 11719 ;;
 11720                           
 11721                           
 11722                           ;psect for function _Flash_Memory_Initialization
 11723  04EE                     _Flash_Memory_Initialization:	
 11724                           
 11725                           ;MCU_B1.c: 757: char i = 0;
 11726                           
 11727                           ;incstack = 0
 11728                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11729  04EE  0020               	movlb	0	; select bank0
 11730  04EF  01DE               	clrf	Flash_Memory_Initialization@i
 11731                           
 11732                           ;MCU_B1.c: 758: if (Flash_Memory_Read(31) == 0xaa) {
 11733  04F0  301F               	movlw	31
 11734  04F1  3190  20DF  3184   	fcall	_Flash_Memory_Read
 11735  04F4  3AAA               	xorlw	170
 11736  04F5  1D03               	skipz
 11737  04F6  2D60               	goto	l9317
 11738                           
 11739                           ;MCU_B1.c: 759: product->Data[12] = Flash_Memory_Read(0);
 11740  04F7  3000               	movlw	0
 11741  04F8  3190  20DF  3184   	fcall	_Flash_Memory_Read
 11742  04FB  0020               	movlb	0	; select bank0
 11743  04FC  00DD               	movwf	??_Flash_Memory_Initialization
 11744  04FD  086D               	movf	_product,w
 11745  04FE  3E0C               	addlw	12
 11746  04FF  0086               	movwf	6
 11747  0500  3001               	movlw	1	; select bank2/3
 11748  0501  0087               	movwf	7
 11749  0502  085D               	movf	??_Flash_Memory_Initialization,w
 11750  0503  0081               	movwf	1
 11751                           
 11752                           ;MCU_B1.c: 760: product->Data[13] = Flash_Memory_Read(1);
 11753  0504  3001               	movlw	1
 11754  0505  3190  20DF  3184   	fcall	_Flash_Memory_Read
 11755  0508  0020               	movlb	0	; select bank0
 11756  0509  00DD               	movwf	??_Flash_Memory_Initialization
 11757  050A  086D               	movf	_product,w
 11758  050B  3E0D               	addlw	13
 11759  050C  0086               	movwf	6
 11760  050D  3001               	movlw	1	; select bank2/3
 11761  050E  0087               	movwf	7
 11762  050F  085D               	movf	??_Flash_Memory_Initialization,w
 11763  0510  0081               	movwf	1
 11764                           
 11765                           ;MCU_B1.c: 761: product->Data[14] = Flash_Memory_Read(2);
 11766  0511  3002               	movlw	2
 11767  0512  3190  20DF  3184   	fcall	_Flash_Memory_Read
 11768  0515  0020               	movlb	0	; select bank0
 11769  0516  00DD               	movwf	??_Flash_Memory_Initialization
 11770  0517  086D               	movf	_product,w
 11771  0518  3E0E               	addlw	14
 11772  0519  0086               	movwf	6
 11773  051A  3001               	movlw	1	; select bank2/3
 11774  051B  0087               	movwf	7
 11775  051C  085D               	movf	??_Flash_Memory_Initialization,w
 11776  051D  0081               	movwf	1
 11777                           
 11778                           ;MCU_B1.c: 767: i = setPercentValue(((char)((100-60)*0.8)));
 11779  051E  3020               	movlw	32
 11780  051F  3195  25EB  3184   	fcall	_setPercentValue
 11781  0522  0020               	movlb	0	; select bank0
 11782  0523  00DD               	movwf	??_Flash_Memory_Initialization
 11783  0524  085D               	movf	??_Flash_Memory_Initialization,w
 11784  0525  00DE               	movwf	Flash_Memory_Initialization@i
 11785                           
 11786                           ;MCU_B1.c: 768: product->Data[21] = i;
 11787  0526  085E               	movf	Flash_Memory_Initialization@i,w
 11788  0527  00DD               	movwf	??_Flash_Memory_Initialization
 11789  0528  086D               	movf	_product,w
 11790  0529  3E15               	addlw	21
 11791  052A  0086               	movwf	6
 11792  052B  3001               	movlw	1	; select bank2/3
 11793  052C  0087               	movwf	7
 11794  052D  085D               	movf	??_Flash_Memory_Initialization,w
 11795  052E  0081               	movwf	1
 11796                           
 11797                           ;MCU_B1.c: 769: product->Data[22] = i;
 11798  052F  085E               	movf	Flash_Memory_Initialization@i,w
 11799  0530  00DD               	movwf	??_Flash_Memory_Initialization
 11800  0531  086D               	movf	_product,w
 11801  0532  3E16               	addlw	22
 11802  0533  0086               	movwf	6
 11803  0534  3001               	movlw	1	; select bank2/3
 11804  0535  0087               	movwf	7
 11805  0536  085D               	movf	??_Flash_Memory_Initialization,w
 11806  0537  0081               	movwf	1
 11807                           
 11808                           ;MCU_B1.c: 770: product->Data[23] = i;
 11809  0538  085E               	movf	Flash_Memory_Initialization@i,w
 11810  0539  00DD               	movwf	??_Flash_Memory_Initialization
 11811  053A  086D               	movf	_product,w
 11812  053B  3E17               	addlw	23
 11813  053C  0086               	movwf	6
 11814  053D  3001               	movlw	1	; select bank2/3
 11815  053E  0087               	movwf	7
 11816  053F  085D               	movf	??_Flash_Memory_Initialization,w
 11817  0540  0081               	movwf	1
 11818                           
 11819                           ;MCU_B1.c: 772: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11820  0541  086D               	movf	_product,w
 11821  0542  3E0C               	addlw	12
 11822  0543  0086               	movwf	6
 11823  0544  3001               	movlw	1	; select bank2/3
 11824  0545  0087               	movwf	7
 11825  0546  0801               	movf	1,w
 11826  0547  3AFF               	xorlw	255
 11827  0548  1D03               	skipz
 11828  0549  0008               	return
 11829  054A  086D               	movf	_product,w
 11830  054B  3E0D               	addlw	13
 11831  054C  0086               	movwf	6
 11832  054D  3001               	movlw	1	; select bank2/3
 11833  054E  0087               	movwf	7
 11834  054F  0801               	movf	1,w
 11835  0550  3AFF               	xorlw	255
 11836  0551  1D03               	skipz
 11837  0552  0008               	return
 11838  0553  086D               	movf	_product,w
 11839  0554  3E0E               	addlw	14
 11840  0555  0086               	movwf	6
 11841  0556  3001               	movlw	1	; select bank2/3
 11842  0557  0087               	movwf	7
 11843  0558  0801               	movf	1,w
 11844  0559  3AFF               	xorlw	255
 11845  055A  1D03               	skipz
 11846  055B  0008               	return
 11847                           
 11848                           ;MCU_B1.c: 773: myMain.FirstOpen = 1;
 11849  055C  0021               	movlb	1	; select bank1
 11850  055D  16A0               	bsf	_myMain^(0+128),5
 11851                           
 11852                           ;MCU_B1.c: 774: myMain.First = 1;
 11853  055E  17A0               	bsf	_myMain^(0+128),7
 11854                           
 11855                           ;MCU_B1.c: 775: }
 11856                           ;MCU_B1.c: 776: } else {
 11857  055F  0008               	return
 11858  0560                     l9317:	
 11859                           
 11860                           ;MCU_B1.c: 777: i = setPercentValue(((char)((100-60)*0.8)));
 11861  0560  3020               	movlw	32
 11862  0561  3195  25EB  3184   	fcall	_setPercentValue
 11863  0564  0020               	movlb	0	; select bank0
 11864  0565  00DD               	movwf	??_Flash_Memory_Initialization
 11865  0566  085D               	movf	??_Flash_Memory_Initialization,w
 11866  0567  00DE               	movwf	Flash_Memory_Initialization@i
 11867                           
 11868                           ;MCU_B1.c: 778: Memory.Data[0]=0xff;
 11869  0568  30FF               	movlw	255
 11870  0569  00DD               	movwf	??_Flash_Memory_Initialization
 11871  056A  085D               	movf	??_Flash_Memory_Initialization,w
 11872  056B  0022               	movlb	2	; select bank2
 11873  056C  00BD               	movwf	_Memory^(0+256)
 11874                           
 11875                           ;MCU_B1.c: 779: Memory.Data[1]=0xff;
 11876  056D  30FF               	movlw	255
 11877  056E  0020               	movlb	0	; select bank0
 11878  056F  00DD               	movwf	??_Flash_Memory_Initialization
 11879  0570  085D               	movf	??_Flash_Memory_Initialization,w
 11880  0571  0022               	movlb	2	; select bank2
 11881  0572  00BE               	movwf	(_Memory^(0+256)+1)
 11882                           
 11883                           ;MCU_B1.c: 780: Memory.Data[2]=0xff;
 11884  0573  30FF               	movlw	255
 11885  0574  0020               	movlb	0	; select bank0
 11886  0575  00DD               	movwf	??_Flash_Memory_Initialization
 11887  0576  085D               	movf	??_Flash_Memory_Initialization,w
 11888  0577  0022               	movlb	2	; select bank2
 11889  0578  00BF               	movwf	(_Memory^(0+256)+2)
 11890                           
 11891                           ;MCU_B1.c: 781: Memory.Data[3]=0xff;
 11892  0579  30FF               	movlw	255
 11893  057A  0020               	movlb	0	; select bank0
 11894  057B  00DD               	movwf	??_Flash_Memory_Initialization
 11895  057C  085D               	movf	??_Flash_Memory_Initialization,w
 11896  057D  0022               	movlb	2	; select bank2
 11897  057E  00C0               	movwf	(_Memory^(0+256)+3)
 11898                           
 11899                           ;MCU_B1.c: 782: Memory.Data[4]=0xff;
 11900  057F  30FF               	movlw	255
 11901  0580  0020               	movlb	0	; select bank0
 11902  0581  00DD               	movwf	??_Flash_Memory_Initialization
 11903  0582  085D               	movf	??_Flash_Memory_Initialization,w
 11904  0583  0022               	movlb	2	; select bank2
 11905  0584  00C1               	movwf	(_Memory^(0+256)+4)
 11906                           
 11907                           ;MCU_B1.c: 783: Memory.Data[5]=0xff;
 11908  0585  30FF               	movlw	255
 11909  0586  0020               	movlb	0	; select bank0
 11910  0587  00DD               	movwf	??_Flash_Memory_Initialization
 11911  0588  085D               	movf	??_Flash_Memory_Initialization,w
 11912  0589  0022               	movlb	2	; select bank2
 11913  058A  00C2               	movwf	(_Memory^(0+256)+5)
 11914                           
 11915                           ;MCU_B1.c: 784: Memory.Data[31]=0xaa;
 11916  058B  30AA               	movlw	170
 11917  058C  0020               	movlb	0	; select bank0
 11918  058D  00DD               	movwf	??_Flash_Memory_Initialization
 11919  058E  085D               	movf	??_Flash_Memory_Initialization,w
 11920  058F  0022               	movlb	2	; select bank2
 11921  0590  00DC               	movwf	(_Memory^(0+256)+31)
 11922                           
 11923                           ;MCU_B1.c: 785: product->Data[21] = i;
 11924  0591  0020               	movlb	0	; select bank0
 11925  0592  085E               	movf	Flash_Memory_Initialization@i,w
 11926  0593  00DD               	movwf	??_Flash_Memory_Initialization
 11927  0594  086D               	movf	_product,w
 11928  0595  3E15               	addlw	21
 11929  0596  0086               	movwf	6
 11930  0597  3001               	movlw	1	; select bank2/3
 11931  0598  0087               	movwf	7
 11932  0599  085D               	movf	??_Flash_Memory_Initialization,w
 11933  059A  0081               	movwf	1
 11934                           
 11935                           ;MCU_B1.c: 786: product->Data[22] = i;
 11936  059B  085E               	movf	Flash_Memory_Initialization@i,w
 11937  059C  00DD               	movwf	??_Flash_Memory_Initialization
 11938  059D  086D               	movf	_product,w
 11939  059E  3E16               	addlw	22
 11940  059F  0086               	movwf	6
 11941  05A0  3001               	movlw	1	; select bank2/3
 11942  05A1  0087               	movwf	7
 11943  05A2  085D               	movf	??_Flash_Memory_Initialization,w
 11944  05A3  0081               	movwf	1
 11945                           
 11946                           ;MCU_B1.c: 787: product->Data[23] = i;
 11947  05A4  085E               	movf	Flash_Memory_Initialization@i,w
 11948  05A5  00DD               	movwf	??_Flash_Memory_Initialization
 11949  05A6  086D               	movf	_product,w
 11950  05A7  3E17               	addlw	23
 11951  05A8  0086               	movwf	6
 11952  05A9  3001               	movlw	1	; select bank2/3
 11953  05AA  0087               	movwf	7
 11954  05AB  085D               	movf	??_Flash_Memory_Initialization,w
 11955  05AC  0081               	movwf	1
 11956                           
 11957                           ;MCU_B1.c: 788: GIE = 0;
 11958  05AD  138B               	bcf	11,7	;volatile
 11959                           
 11960                           ;MCU_B1.c: 789: Flash_Memory_Write();
 11961  05AE  3187  27D1         	fcall	_Flash_Memory_Write
 11962                           
 11963                           ;MCU_B1.c: 790: GIE = 1;
 11964  05B0  178B               	bsf	11,7	;volatile
 11965                           
 11966                           ;MCU_B1.c: 791: myMain.FirstOpen = 1;
 11967  05B1  0021               	movlb	1	; select bank1
 11968  05B2  16A0               	bsf	_myMain^(0+128),5
 11969                           
 11970                           ;MCU_B1.c: 792: myMain.First = 1;
 11971  05B3  17A0               	bsf	_myMain^(0+128),7
 11972  05B4  0008               	return
 11973  05B5                     __end_of_Flash_Memory_Initialization:	
 11974                           
 11975                           	psect	text74
 11976  07D1                     __ptext74:	
 11977 ;; *************** function _Flash_Memory_Write *****************
 11978 ;; Defined at:
 11979 ;;		line 836 in file "../src/MCU_B1.c"
 11980 ;; Parameters:    Size  Location     Type
 11981 ;;		None
 11982 ;; Auto vars:     Size  Location     Type
 11983 ;;  i               1    1[BANK0 ] unsigned char 
 11984 ;; Return value:  Size  Location     Type
 11985 ;;		None               void
 11986 ;; Registers used:
 11987 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11988 ;; Tracked objects:
 11989 ;;		On entry : 0/0
 11990 ;;		On exit  : 0/0
 11991 ;;		Unchanged: 0/0
 11992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11994 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11995 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;Total ram usage:        2 bytes
 11998 ;; Hardware stack levels used:    1
 11999 ;; Hardware stack levels required when called:    6
 12000 ;; This function calls:
 12001 ;;		_Flash_Memory_Unlock
 12002 ;; This function is called by:
 12003 ;;		_Flash_Memory_Initialization
 12004 ;;		_Flash_Memory_Modify
 12005 ;; This function uses a non-reentrant model
 12006 ;;
 12007                           
 12008                           
 12009                           ;psect for function _Flash_Memory_Write
 12010  07D1                     _Flash_Memory_Write:	
 12011                           
 12012                           ;MCU_B1.c: 837: char i = 0;
 12013                           
 12014                           ;incstack = 0
 12015                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12016  07D1  0020               	movlb	0	; select bank0
 12017  07D2  01A1               	clrf	Flash_Memory_Write@i
 12018                           
 12019                           ;MCU_B1.c: 838: CFGS = 0;
 12020  07D3  0023               	movlb	3	; select bank3
 12021  07D4  1315               	bcf	21,6	;volatile
 12022                           
 12023                           ;MCU_B1.c: 839: PMADRH = 0x30;
 12024  07D5  3030               	movlw	48
 12025  07D6  0092               	movwf	18	;volatile
 12026                           
 12027                           ;MCU_B1.c: 840: PMDATH = 0;
 12028  07D7  0194               	clrf	20	;volatile
 12029                           
 12030                           ;MCU_B1.c: 841: FREE = 0;
 12031  07D8  1215               	bcf	21,4	;volatile
 12032                           
 12033                           ;MCU_B1.c: 842: LWLO = 1;
 12034  07D9  1695               	bsf	21,5	;volatile
 12035                           
 12036                           ;MCU_B1.c: 843: WREN = 1;
 12037  07DA  1515               	bsf	21,2	;volatile
 12038                           
 12039                           ;MCU_B1.c: 844: for (i = 0; i < 32; i++) {
 12040  07DB  0020               	movlb	0	; select bank0
 12041  07DC  01A1               	clrf	Flash_Memory_Write@i
 12042  07DD  3020               	movlw	32
 12043  07DE  0221               	subwf	Flash_Memory_Write@i,w
 12044  07DF  1803               	btfsc	3,0
 12045  07E0  2FF9               	goto	l1267
 12046  07E1                     l8467:	
 12047                           
 12048                           ;MCU_B1.c: 845: PMADRL = i;
 12049  07E1  0821               	movf	Flash_Memory_Write@i,w
 12050  07E2  0023               	movlb	3	; select bank3
 12051  07E3  0091               	movwf	17	;volatile
 12052                           
 12053                           ;MCU_B1.c: 846: PMDATL = Memory.Data[i];
 12054  07E4  0020               	movlb	0	; select bank0
 12055  07E5  0821               	movf	Flash_Memory_Write@i,w
 12056  07E6  3E3D               	addlw	_Memory& (0+255)
 12057  07E7  0086               	movwf	6
 12058  07E8  3001               	movlw	1	; select bank2/3
 12059  07E9  0087               	movwf	7
 12060  07EA  0801               	movf	1,w
 12061  07EB  0023               	movlb	3	; select bank3
 12062  07EC  0093               	movwf	19	;volatile
 12063                           
 12064                           ;MCU_B1.c: 847: Flash_Memory_Unlock();
 12065  07ED  319D  25EE  3187   	fcall	_Flash_Memory_Unlock
 12066  07F0  3001               	movlw	1
 12067  07F1  0020               	movlb	0	; select bank0
 12068  07F2  00A0               	movwf	??_Flash_Memory_Write
 12069  07F3  0820               	movf	??_Flash_Memory_Write,w
 12070  07F4  07A1               	addwf	Flash_Memory_Write@i,f
 12071  07F5  3020               	movlw	32
 12072  07F6  0221               	subwf	Flash_Memory_Write@i,w
 12073  07F7  1C03               	skipc
 12074  07F8  2FE1               	goto	l8467
 12075  07F9                     l1267:	
 12076                           
 12077                           ;MCU_B1.c: 848: }
 12078                           ;MCU_B1.c: 849: LWLO = 0;
 12079  07F9  0023               	movlb	3	; select bank3
 12080  07FA  1295               	bcf	21,5	;volatile
 12081                           
 12082                           ;MCU_B1.c: 850: Flash_Memory_Unlock();
 12083  07FB  319D  25EE         	fcall	_Flash_Memory_Unlock
 12084                           
 12085                           ;MCU_B1.c: 851: WREN = 0;
 12086  07FD  0023               	movlb	3	; select bank3
 12087  07FE  1115               	bcf	21,2	;volatile
 12088  07FF  0008               	return
 12089  0800                     __end_of_Flash_Memory_Write:	
 12090                           
 12091                           	psect	text75
 12092  1DEE                     __ptext75:	
 12093 ;; *************** function _Flash_Memory_Unlock *****************
 12094 ;; Defined at:
 12095 ;;		line 815 in file "../src/MCU_B1.c"
 12096 ;; Parameters:    Size  Location     Type
 12097 ;;		None
 12098 ;; Auto vars:     Size  Location     Type
 12099 ;;		None
 12100 ;; Return value:  Size  Location     Type
 12101 ;;		None               void
 12102 ;; Registers used:
 12103 ;;		wreg
 12104 ;; Tracked objects:
 12105 ;;		On entry : 0/0
 12106 ;;		On exit  : 0/0
 12107 ;;		Unchanged: 0/0
 12108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12113 ;;Total ram usage:        0 bytes
 12114 ;; Hardware stack levels used:    1
 12115 ;; Hardware stack levels required when called:    5
 12116 ;; This function calls:
 12117 ;;		Nothing
 12118 ;; This function is called by:
 12119 ;;		_Flash_Memory_Write
 12120 ;;		_Flash_Memory_Erasing
 12121 ;; This function uses a non-reentrant model
 12122 ;;
 12123                           
 12124                           
 12125                           ;psect for function _Flash_Memory_Unlock
 12126  1DEE                     _Flash_Memory_Unlock:	
 12127                           
 12128                           ;MCU_B1.c: 816: PMCON2 = 0x55;
 12129                           
 12130                           ;incstack = 0
 12131                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12132  1DEE  3055               	movlw	85
 12133  1DEF  0023               	movlb	3	; select bank3
 12134  1DF0  0096               	movwf	22	;volatile
 12135                           
 12136                           ;MCU_B1.c: 817: PMCON2 = 0xaa;
 12137  1DF1  30AA               	movlw	170
 12138  1DF2  0096               	movwf	22	;volatile
 12139                           
 12140                           ;MCU_B1.c: 818: WR = 1;
 12141  1DF3  1495               	bsf	21,1	;volatile
 12142                           
 12143                           ;MCU_B1.c: 819: __nop();
 12144  1DF4  0000               	nop
 12145                           
 12146                           ;MCU_B1.c: 820: __nop();
 12147  1DF5  0000               	nop
 12148  1DF6  0008               	return
 12149  1DF7                     __end_of_Flash_Memory_Unlock:	
 12150                           
 12151                           	psect	text76
 12152  10DF                     __ptext76:	
 12153 ;; *************** function _Flash_Memory_Read *****************
 12154 ;; Defined at:
 12155 ;;		line 824 in file "../src/MCU_B1.c"
 12156 ;; Parameters:    Size  Location     Type
 12157 ;;  address         1    wreg     unsigned char 
 12158 ;; Auto vars:     Size  Location     Type
 12159 ;;  address         1    2[BANK0 ] unsigned char 
 12160 ;;  ret             1    3[BANK0 ] unsigned char 
 12161 ;;  i               1    1[BANK0 ] unsigned char 
 12162 ;; Return value:  Size  Location     Type
 12163 ;;                  1    wreg      unsigned char 
 12164 ;; Registers used:
 12165 ;;		wreg, status,2
 12166 ;; Tracked objects:
 12167 ;;		On entry : 0/0
 12168 ;;		On exit  : 0/0
 12169 ;;		Unchanged: 0/0
 12170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12172 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12174 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;Total ram usage:        4 bytes
 12176 ;; Hardware stack levels used:    1
 12177 ;; Hardware stack levels required when called:    5
 12178 ;; This function calls:
 12179 ;;		Nothing
 12180 ;; This function is called by:
 12181 ;;		_Flash_Memory_Initialization
 12182 ;;		_Flash_Memory_Modify
 12183 ;; This function uses a non-reentrant model
 12184 ;;
 12185                           
 12186                           
 12187                           ;psect for function _Flash_Memory_Read
 12188  10DF                     _Flash_Memory_Read:	
 12189                           
 12190                           ;incstack = 0
 12191                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12192                           ;Flash_Memory_Read@address stored from wreg
 12193  10DF  0020               	movlb	0	; select bank0
 12194  10E0  00A2               	movwf	Flash_Memory_Read@address
 12195                           
 12196                           ;MCU_B1.c: 825: char i = 0, ret = 0;
 12197  10E1  01A1               	clrf	Flash_Memory_Read@i
 12198  10E2  01A3               	clrf	Flash_Memory_Read@ret
 12199                           
 12200                           ;MCU_B1.c: 826: PMADRH = 0x30;
 12201  10E3  3030               	movlw	48
 12202  10E4  0023               	movlb	3	; select bank3
 12203  10E5  0092               	movwf	18	;volatile
 12204                           
 12205                           ;MCU_B1.c: 827: PMADRL = address;
 12206  10E6  0020               	movlb	0	; select bank0
 12207  10E7  0822               	movf	Flash_Memory_Read@address,w
 12208  10E8  0023               	movlb	3	; select bank3
 12209  10E9  0091               	movwf	17	;volatile
 12210                           
 12211                           ;MCU_B1.c: 828: CFGS = 0;
 12212  10EA  1315               	bcf	21,6	;volatile
 12213                           
 12214                           ;MCU_B1.c: 829: RD = 1;
 12215  10EB  1415               	bsf	21,0	;volatile
 12216                           
 12217                           ;MCU_B1.c: 830: i = PMDATH;
 12218  10EC  0814               	movf	20,w	;volatile
 12219  10ED  0020               	movlb	0	; select bank0
 12220  10EE  00A0               	movwf	??_Flash_Memory_Read
 12221  10EF  0820               	movf	??_Flash_Memory_Read,w
 12222  10F0  00A1               	movwf	Flash_Memory_Read@i
 12223                           
 12224                           ;MCU_B1.c: 831: ret = PMDATL;
 12225  10F1  0023               	movlb	3	; select bank3
 12226  10F2  0813               	movf	19,w	;volatile
 12227  10F3  0020               	movlb	0	; select bank0
 12228  10F4  00A0               	movwf	??_Flash_Memory_Read
 12229  10F5  0820               	movf	??_Flash_Memory_Read,w
 12230  10F6  00A3               	movwf	Flash_Memory_Read@ret
 12231                           
 12232                           ;MCU_B1.c: 832: return ret;
 12233  10F7  0823               	movf	Flash_Memory_Read@ret,w
 12234  10F8  0008               	return
 12235  10F9                     __end_of_Flash_Memory_Read:	
 12236                           
 12237                           	psect	text77
 12238  1DB8                     __ptext77:	
 12239 ;; *************** function _DimmerLights_Main *****************
 12240 ;; Defined at:
 12241 ;;		line 416 in file "../src/Dimmer_B1.c"
 12242 ;; Parameters:    Size  Location     Type
 12243 ;;		None
 12244 ;; Auto vars:     Size  Location     Type
 12245 ;;		None
 12246 ;; Return value:  Size  Location     Type
 12247 ;;		None               void
 12248 ;; Registers used:
 12249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12250 ;; Tracked objects:
 12251 ;;		On entry : 0/0
 12252 ;;		On exit  : 0/0
 12253 ;;		Unchanged: 0/0
 12254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12259 ;;Total ram usage:        0 bytes
 12260 ;; Hardware stack levels used:    1
 12261 ;; Hardware stack levels required when called:   11
 12262 ;; This function calls:
 12263 ;;		_DimmerLights_Close
 12264 ;;		_setDimmerLights_Main
 12265 ;; This function is called by:
 12266 ;;		_main
 12267 ;; This function uses a non-reentrant model
 12268 ;;
 12269                           
 12270                           
 12271                           ;psect for function _DimmerLights_Main
 12272  1DB8                     _DimmerLights_Main:	
 12273                           
 12274                           ;Dimmer_B1.c: 419: setDimmerLights_Main(1);
 12275                           
 12276                           ;incstack = 0
 12277                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12278  1DB8  3001               	movlw	1
 12279  1DB9  3188  20B3  319D   	fcall	_setDimmerLights_Main
 12280                           
 12281                           ;Dimmer_B1.c: 430: DimmerLights_Close();
 12282  1DBC  319F  27C4         	fcall	_DimmerLights_Close
 12283  1DBE  0008               	return
 12284  1DBF                     __end_of_DimmerLights_Main:	
 12285                           
 12286                           	psect	text78
 12287  08B3                     __ptext78:	
 12288 ;; *************** function _setDimmerLights_Main *****************
 12289 ;; Defined at:
 12290 ;;		line 434 in file "../src/Dimmer_B1.c"
 12291 ;; Parameters:    Size  Location     Type
 12292 ;;  lights          1    wreg     unsigned char 
 12293 ;; Auto vars:     Size  Location     Type
 12294 ;;  lights          1   70[BANK0 ] unsigned char 
 12295 ;;  clear           1   69[BANK0 ] unsigned char 
 12296 ;; Return value:  Size  Location     Type
 12297 ;;		None               void
 12298 ;; Registers used:
 12299 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12300 ;; Tracked objects:
 12301 ;;		On entry : 0/0
 12302 ;;		On exit  : 0/0
 12303 ;;		Unchanged: 0/0
 12304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12306 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12308 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12309 ;;Total ram usage:        2 bytes
 12310 ;; Hardware stack levels used:    1
 12311 ;; Hardware stack levels required when called:   10
 12312 ;; This function calls:
 12313 ;;		_DimmerLightsPointSelect
 12314 ;;		_setBuz
 12315 ;;		_setDimmerLights
 12316 ;;		_setDimmerLights_Adj
 12317 ;; This function is called by:
 12318 ;;		_DimmerLights_Main
 12319 ;; This function uses a non-reentrant model
 12320 ;;
 12321                           
 12322                           
 12323                           ;psect for function _setDimmerLights_Main
 12324  08B3                     _setDimmerLights_Main:	
 12325                           
 12326                           ;incstack = 0
 12327                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12328                           ;setDimmerLights_Main@lights stored from wreg
 12329  08B3  0020               	movlb	0	; select bank0
 12330  08B4  00E6               	movwf	setDimmerLights_Main@lights
 12331                           
 12332                           ;Dimmer_B1.c: 435: char clear = 1;
 12333  08B5  01E5               	clrf	setDimmerLights_Main@clear
 12334  08B6  0AE5               	incf	setDimmerLights_Main@clear,f
 12335                           
 12336                           ;Dimmer_B1.c: 436: DimmerLightsPointSelect(lights);
 12337  08B7  0866               	movf	setDimmerLights_Main@lights,w
 12338  08B8  319E  2634  3188   	fcall	_DimmerLightsPointSelect
 12339                           
 12340                           ;Dimmer_B1.c: 456: if (DimmerLights->Trigger == 1) {
 12341  08BB  0020               	movlb	0	; select bank0
 12342  08BC  086A               	movf	_DimmerLights,w
 12343  08BD  3E08               	addlw	8
 12344  08BE  0086               	movwf	6
 12345  08BF  3001               	movlw	1	; select bank2/3
 12346  08C0  0087               	movwf	7
 12347  08C1  1D01               	btfss	1,2
 12348  08C2  28E0               	goto	l8773
 12349                           
 12350                           ;Dimmer_B1.c: 457: if (clear == 1) {
 12351  08C3  0865               	movf	setDimmerLights_Main@clear,w
 12352  08C4  3A01               	xorlw	1
 12353  08C5  1D03               	skipz
 12354  08C6  0008               	return
 12355                           
 12356                           ;Dimmer_B1.c: 458: DimmerLights->Trigger = 0;
 12357  08C7  086A               	movf	_DimmerLights,w
 12358  08C8  3E08               	addlw	8
 12359  08C9  0086               	movwf	6
 12360  08CA  3001               	movlw	1	; select bank2/3
 12361  08CB  0087               	movwf	7
 12362  08CC  1101               	bcf	1,2
 12363                           
 12364                           ;Dimmer_B1.c: 459: if (DimmerLights->Switch == 1) {
 12365  08CD  086A               	movf	_DimmerLights,w
 12366  08CE  3E08               	addlw	8
 12367  08CF  0086               	movwf	6
 12368  08D0  3001               	movlw	1	; select bank2/3
 12369  08D1  0087               	movwf	7
 12370  08D2  1C81               	btfss	1,1
 12371  08D3  28DA               	goto	l8771
 12372                           
 12373                           ;Dimmer_B1.c: 460: setDimmerLights(lights, 1);
 12374  08D4  01A4               	clrf	setDimmerLights@status
 12375  08D5  0AA4               	incf	setDimmerLights@status,f
 12376  08D6  0866               	movf	setDimmerLights_Main@lights,w
 12377  08D7  318D  25E9         	fcall	_setDimmerLights
 12378                           
 12379                           ;Dimmer_B1.c: 461: } else {
 12380  08D9  0008               	return
 12381  08DA                     l8771:	
 12382                           
 12383                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 0);
 12384  08DA  0020               	movlb	0	; select bank0
 12385  08DB  01A4               	clrf	setDimmerLights@status
 12386  08DC  0866               	movf	setDimmerLights_Main@lights,w
 12387  08DD  318D  25E9         	fcall	_setDimmerLights
 12388                           
 12389                           ;Dimmer_B1.c: 463: }
 12390                           ;Dimmer_B1.c: 467: }
 12391                           ;Dimmer_B1.c: 468: } else {
 12392  08DF  0008               	return
 12393  08E0                     l8773:	
 12394                           
 12395                           ;Dimmer_B1.c: 469: if (DimmerLights->TriggerAdj == 1) {
 12396  08E0  0020               	movlb	0	; select bank0
 12397  08E1  086A               	movf	_DimmerLights,w
 12398  08E2  3E08               	addlw	8
 12399  08E3  0086               	movwf	6
 12400  08E4  3001               	movlw	1	; select bank2/3
 12401  08E5  0087               	movwf	7
 12402  08E6  1E01               	btfss	1,4
 12403  08E7  0008               	return
 12404                           
 12405                           ;Dimmer_B1.c: 470: if (clear == 1) {
 12406  08E8  0865               	movf	setDimmerLights_Main@clear,w
 12407  08E9  3A01               	xorlw	1
 12408  08EA  1D03               	skipz
 12409  08EB  0008               	return
 12410                           
 12411                           ;Dimmer_B1.c: 471: DimmerLights->TriggerAdj = 0;
 12412  08EC  086A               	movf	_DimmerLights,w
 12413  08ED  3E08               	addlw	8
 12414  08EE  0086               	movwf	6
 12415  08EF  3001               	movlw	1	; select bank2/3
 12416  08F0  0087               	movwf	7
 12417  08F1  1201               	bcf	1,4
 12418                           
 12419                           ;Dimmer_B1.c: 472: if (DimmerLights->AdjGo == 1) {
 12420  08F2  086A               	movf	_DimmerLights,w
 12421  08F3  3E08               	addlw	8
 12422  08F4  0086               	movwf	6
 12423  08F5  3001               	movlw	1	; select bank2/3
 12424  08F6  0087               	movwf	7
 12425  08F7  1D81               	btfss	1,3
 12426  08F8  2908               	goto	l8783
 12427                           
 12428                           ;Dimmer_B1.c: 473: setDimmerLights_Adj(lights, 1);
 12429  08F9  01E2               	clrf	setDimmerLights_Adj@status
 12430  08FA  0AE2               	incf	setDimmerLights_Adj@status,f
 12431  08FB  0866               	movf	setDimmerLights_Main@lights,w
 12432  08FC  3194  24A6  3188   	fcall	_setDimmerLights_Adj
 12433                           
 12434                           ;Dimmer_B1.c: 474: setBuz(1, 100);
 12435  08FF  3064               	movlw	100
 12436  0900  0020               	movlb	0	; select bank0
 12437  0901  00A9               	movwf	setBuz@time
 12438  0902  3000               	movlw	0
 12439  0903  00AA               	movwf	setBuz@time+1
 12440  0904  3001               	movlw	1
 12441  0905  3188  205A         	fcall	_setBuz
 12442                           
 12443                           ;Dimmer_B1.c: 475: } else {
 12444  0907  0008               	return
 12445  0908                     l8783:	
 12446                           
 12447                           ;Dimmer_B1.c: 476: setDimmerLights_Adj(lights, 0);
 12448  0908  0020               	movlb	0	; select bank0
 12449  0909  01E2               	clrf	setDimmerLights_Adj@status
 12450  090A  0866               	movf	setDimmerLights_Main@lights,w
 12451  090B  3194  24A6         	fcall	_setDimmerLights_Adj
 12452  090D  0008               	return
 12453  090E                     __end_of_setDimmerLights_Main:	
 12454                           
 12455                           	psect	text79
 12456  14A6                     __ptext79:	
 12457 ;; *************** function _setDimmerLights_Adj *****************
 12458 ;; Defined at:
 12459 ;;		line 655 in file "../src/Dimmer_B1.c"
 12460 ;; Parameters:    Size  Location     Type
 12461 ;;  lights          1    wreg     unsigned char 
 12462 ;;  status          1   66[BANK0 ] unsigned char 
 12463 ;; Auto vars:     Size  Location     Type
 12464 ;;  lights          1   68[BANK0 ] unsigned char 
 12465 ;; Return value:  Size  Location     Type
 12466 ;;		None               void
 12467 ;; Registers used:
 12468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12469 ;; Tracked objects:
 12470 ;;		On entry : 0/0
 12471 ;;		On exit  : 0/0
 12472 ;;		Unchanged: 0/0
 12473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12474 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12476 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12478 ;;Total ram usage:        3 bytes
 12479 ;; Hardware stack levels used:    1
 12480 ;; Hardware stack levels required when called:    9
 12481 ;; This function calls:
 12482 ;;		_DimmerLightsPointSelect
 12483 ;;		_setRF_DimmerLights
 12484 ;;		_setTxData
 12485 ;; This function is called by:
 12486 ;;		_setDimmerLights_Main
 12487 ;; This function uses a non-reentrant model
 12488 ;;
 12489                           
 12490                           
 12491                           ;psect for function _setDimmerLights_Adj
 12492  14A6                     _setDimmerLights_Adj:	
 12493                           
 12494                           ;incstack = 0
 12495                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12496                           ;setDimmerLights_Adj@lights stored from wreg
 12497  14A6  0020               	movlb	0	; select bank0
 12498  14A7  00E4               	movwf	setDimmerLights_Adj@lights
 12499                           
 12500                           ;Dimmer_B1.c: 656: DimmerLightsPointSelect(lights);
 12501  14A8  0864               	movf	setDimmerLights_Adj@lights,w
 12502  14A9  319E  2634  3194   	fcall	_DimmerLightsPointSelect
 12503                           
 12504                           ;Dimmer_B1.c: 657: if (status == 1) {
 12505  14AC  0020               	movlb	0	; select bank0
 12506  14AD  0862               	movf	setDimmerLights_Adj@status,w
 12507  14AE  3A01               	xorlw	1
 12508  14AF  1D03               	skipz
 12509  14B0  2CBC               	goto	l8421
 12510                           
 12511                           ;Dimmer_B1.c: 658: DimmerLights->AdjFlag = 1;
 12512  14B1  086A               	movf	_DimmerLights,w
 12513  14B2  0086               	movwf	6
 12514  14B3  3001               	movlw	1	; select bank2/3
 12515  14B4  0087               	movwf	7
 12516  14B5  1581               	bsf	1,3
 12517                           
 12518                           ;Dimmer_B1.c: 659: DimmerLights->Signal = 1;
 12519  14B6  086A               	movf	_DimmerLights,w
 12520  14B7  0086               	movwf	6
 12521  14B8  3001               	movlw	1	; select bank2/3
 12522  14B9  0087               	movwf	7
 12523  14BA  1481               	bsf	1,1
 12524                           
 12525                           ;Dimmer_B1.c: 660: } else {
 12526  14BB  0008               	return
 12527  14BC                     l8421:	
 12528                           
 12529                           ;Dimmer_B1.c: 661: if (DimmerLights->AdjFlag == 1) {
 12530  14BC  086A               	movf	_DimmerLights,w
 12531  14BD  0086               	movwf	6
 12532  14BE  3001               	movlw	1	; select bank2/3
 12533  14BF  0087               	movwf	7
 12534  14C0  1D81               	btfss	1,3
 12535  14C1  0008               	return
 12536                           
 12537                           ;Dimmer_B1.c: 663: DimmerLights->Signal = 0;
 12538  14C2  086A               	movf	_DimmerLights,w
 12539  14C3  0086               	movwf	6
 12540  14C4  3001               	movlw	1	; select bank2/3
 12541  14C5  0087               	movwf	7
 12542  14C6  1081               	bcf	1,1
 12543                           
 12544                           ;Dimmer_B1.c: 664: DimmerLights->AdjFlag = 0;
 12545  14C7  086A               	movf	_DimmerLights,w
 12546  14C8  0086               	movwf	6
 12547  14C9  3001               	movlw	1	; select bank2/3
 12548  14CA  0087               	movwf	7
 12549  14CB  1181               	bcf	1,3
 12550                           
 12551                           ;Dimmer_B1.c: 665: ;;
 12552                           ;Dimmer_B1.c: 666: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12553  14CC  086A               	movf	_DimmerLights,w
 12554  14CD  3E04               	addlw	4
 12555  14CE  0086               	movwf	6
 12556  14CF  3001               	movlw	1	; select bank2/3
 12557  14D0  0087               	movwf	7
 12558  14D1  0801               	movf	1,w
 12559  14D2  00E3               	movwf	??_setDimmerLights_Adj
 12560  14D3  086A               	movf	_DimmerLights,w
 12561  14D4  3E05               	addlw	5
 12562  14D5  0086               	movwf	6
 12563  14D6  3001               	movlw	1	; select bank2/3
 12564  14D7  0087               	movwf	7
 12565  14D8  0863               	movf	??_setDimmerLights_Adj,w
 12566  14D9  0081               	movwf	1
 12567                           
 12568                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, 1);
 12569  14DA  01DD               	clrf	setRF_DimmerLights@on
 12570  14DB  0ADD               	incf	setRF_DimmerLights@on,f
 12571  14DC  0864               	movf	setDimmerLights_Adj@lights,w
 12572  14DD  318C  2427  3194   	fcall	_setRF_DimmerLights
 12573                           
 12574                           ;Dimmer_B1.c: 675: setTxData();
 12575  14E0  3185  25B5         	fcall	_setTxData
 12576  14E2  0008               	return
 12577  14E3                     __end_of_setDimmerLights_Adj:	
 12578                           
 12579                           	psect	text80
 12580  0DE9                     __ptext80:	
 12581 ;; *************** function _setDimmerLights *****************
 12582 ;; Defined at:
 12583 ;;		line 602 in file "../src/Dimmer_B1.c"
 12584 ;; Parameters:    Size  Location     Type
 12585 ;;  lights          1    wreg     unsigned char 
 12586 ;;  status          1    4[BANK0 ] unsigned char 
 12587 ;; Auto vars:     Size  Location     Type
 12588 ;;  lights          1    6[BANK0 ] unsigned char 
 12589 ;; Return value:  Size  Location     Type
 12590 ;;		None               void
 12591 ;; Registers used:
 12592 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12593 ;; Tracked objects:
 12594 ;;		On entry : 0/0
 12595 ;;		On exit  : 0/0
 12596 ;;		Unchanged: 0/0
 12597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12598 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12601 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12602 ;;Total ram usage:        3 bytes
 12603 ;; Hardware stack levels used:    1
 12604 ;; Hardware stack levels required when called:    7
 12605 ;; This function calls:
 12606 ;;		_DimmerLightsPointSelect
 12607 ;;		_setLED
 12608 ;;		_setMemory_GO
 12609 ;; This function is called by:
 12610 ;;		_setDimmerLights_Main
 12611 ;;		_setControl_Lights_Table
 12612 ;; This function uses a non-reentrant model
 12613 ;;
 12614                           
 12615                           
 12616                           ;psect for function _setDimmerLights
 12617  0DE9                     _setDimmerLights:	
 12618                           
 12619                           ;incstack = 0
 12620                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12621                           ;setDimmerLights@lights stored from wreg
 12622  0DE9  0020               	movlb	0	; select bank0
 12623  0DEA  00A6               	movwf	setDimmerLights@lights
 12624                           
 12625                           ;Dimmer_B1.c: 603: DimmerLightsPointSelect(lights);
 12626  0DEB  0826               	movf	setDimmerLights@lights,w
 12627  0DEC  319E  2634  318D   	fcall	_DimmerLightsPointSelect
 12628                           
 12629                           ;Dimmer_B1.c: 604: Dimmer->Load = lights;
 12630  0DEF  0020               	movlb	0	; select bank0
 12631  0DF0  0826               	movf	setDimmerLights@lights,w
 12632  0DF1  00A5               	movwf	??_setDimmerLights
 12633  0DF2  0A76               	incf	_Dimmer,w
 12634  0DF3  0086               	movwf	6
 12635  0DF4  0187               	clrf	7
 12636  0DF5  0825               	movf	??_setDimmerLights,w
 12637  0DF6  0081               	movwf	1
 12638                           
 12639                           ;Dimmer_B1.c: 605: if (status == 1) {
 12640  0DF7  0824               	movf	setDimmerLights@status,w
 12641  0DF8  3A01               	xorlw	1
 12642  0DF9  1D03               	skipz
 12643  0DFA  2E3C               	goto	l8067
 12644                           
 12645                           ;Dimmer_B1.c: 606: DimmerLights->Status = 1;
 12646  0DFB  086A               	movf	_DimmerLights,w
 12647  0DFC  0086               	movwf	6
 12648  0DFD  3001               	movlw	1	; select bank2/3
 12649  0DFE  0087               	movwf	7
 12650  0DFF  1681               	bsf	1,5
 12651                           
 12652                           ;Dimmer_B1.c: 607: setLED(lights, 0);
 12653  0E00  01A2               	clrf	setLED@command
 12654  0E01  0826               	movf	setDimmerLights@lights,w
 12655  0E02  3189  2169  318D   	fcall	_setLED
 12656                           
 12657                           ;Dimmer_B1.c: 608: RC7=!0;
 12658  0E05  0020               	movlb	0	; select bank0
 12659  0E06  178E               	bsf	14,7	;volatile
 12660                           
 12661                           ;Dimmer_B1.c: 609: ;;
 12662                           ;Dimmer_B1.c: 611: DimmerLights->Signal = 1;
 12663  0E07  086A               	movf	_DimmerLights,w
 12664  0E08  0086               	movwf	6
 12665  0E09  3001               	movlw	1	; select bank2/3
 12666  0E0A  0087               	movwf	7
 12667  0E0B  1481               	bsf	1,1
 12668                           
 12669                           ;Dimmer_B1.c: 612: DimmerLights->DimmingTimeValue = 7;
 12670  0E0C  3007               	movlw	7
 12671  0E0D  00A5               	movwf	??_setDimmerLights
 12672  0E0E  086A               	movf	_DimmerLights,w
 12673  0E0F  3E02               	addlw	2
 12674  0E10  0086               	movwf	6
 12675  0E11  3001               	movlw	1	; select bank2/3
 12676  0E12  0087               	movwf	7
 12677  0E13  0825               	movf	??_setDimmerLights,w
 12678  0E14  0081               	movwf	1
 12679                           
 12680                           ;Dimmer_B1.c: 614: if (DimmerLights->StatusFlag == 0) {
 12681  0E15  086A               	movf	_DimmerLights,w
 12682  0E16  0086               	movwf	6
 12683  0E17  3001               	movlw	1	; select bank2/3
 12684  0E18  0087               	movwf	7
 12685  0E19  1B01               	btfsc	1,6
 12686  0E1A  0008               	return
 12687                           
 12688                           ;Dimmer_B1.c: 615: DimmerLights->StatusFlag = 1;
 12689  0E1B  086A               	movf	_DimmerLights,w
 12690  0E1C  0086               	movwf	6
 12691  0E1D  3001               	movlw	1	; select bank2/3
 12692  0E1E  0087               	movwf	7
 12693  0E1F  1701               	bsf	1,6
 12694                           
 12695                           ;Dimmer_B1.c: 616: ;;
 12696                           ;Dimmer_B1.c: 617: setMemory_GO(0);
 12697  0E20  3000               	movlw	0
 12698  0E21  3190  2080         	fcall	_setMemory_GO
 12699                           
 12700                           ;Dimmer_B1.c: 620: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12701  0E23  0020               	movlb	0	; select bank0
 12702  0E24  086A               	movf	_DimmerLights,w
 12703  0E25  3E05               	addlw	5
 12704  0E26  0086               	movwf	6
 12705  0E27  3001               	movlw	1	; select bank2/3
 12706  0E28  0087               	movwf	7
 12707  0E29  0801               	movf	1,w
 12708  0E2A  00A5               	movwf	??_setDimmerLights
 12709  0E2B  086A               	movf	_DimmerLights,w
 12710  0E2C  3E04               	addlw	4
 12711  0E2D  0086               	movwf	6
 12712  0E2E  3001               	movlw	1	; select bank2/3
 12713  0E2F  0087               	movwf	7
 12714  0E30  0825               	movf	??_setDimmerLights,w
 12715  0E31  0081               	movwf	1
 12716                           
 12717                           ;Dimmer_B1.c: 624: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 12718  0E32  3020               	movlw	32
 12719  0E33  00A5               	movwf	??_setDimmerLights
 12720  0E34  086A               	movf	_DimmerLights,w
 12721  0E35  3E04               	addlw	4
 12722  0E36  0086               	movwf	6
 12723  0E37  3001               	movlw	1	; select bank2/3
 12724  0E38  0087               	movwf	7
 12725  0E39  0825               	movf	??_setDimmerLights,w
 12726  0E3A  0081               	movwf	1
 12727                           
 12728                           ;Dimmer_B1.c: 626: }
 12729                           ;Dimmer_B1.c: 627: } else {
 12730  0E3B  0008               	return
 12731  0E3C                     l8067:	
 12732                           
 12733                           ;Dimmer_B1.c: 628: DimmerLights->Status = 0;
 12734  0E3C  086A               	movf	_DimmerLights,w
 12735  0E3D  0086               	movwf	6
 12736  0E3E  3001               	movlw	1	; select bank2/3
 12737  0E3F  0087               	movwf	7
 12738  0E40  1281               	bcf	1,5
 12739                           
 12740                           ;Dimmer_B1.c: 630: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12741  0E41  086A               	movf	_DimmerLights,w
 12742  0E42  3E06               	addlw	6
 12743  0E43  0086               	movwf	6
 12744  0E44  3001               	movlw	1	; select bank2/3
 12745  0E45  0087               	movwf	7
 12746  0E46  0801               	movf	1,w
 12747  0E47  00A5               	movwf	??_setDimmerLights
 12748  0E48  086A               	movf	_DimmerLights,w
 12749  0E49  3E04               	addlw	4
 12750  0E4A  0086               	movwf	6
 12751  0E4B  3001               	movlw	1	; select bank2/3
 12752  0E4C  0087               	movwf	7
 12753  0E4D  0825               	movf	??_setDimmerLights,w
 12754  0E4E  0081               	movwf	1
 12755                           
 12756                           ;Dimmer_B1.c: 637: DimmerLights->Signal = 1;
 12757  0E4F  086A               	movf	_DimmerLights,w
 12758  0E50  0086               	movwf	6
 12759  0E51  3001               	movlw	1	; select bank2/3
 12760  0E52  0087               	movwf	7
 12761  0E53  1481               	bsf	1,1
 12762                           
 12763                           ;Dimmer_B1.c: 638: DimmerLights->AdjFlag = 0;
 12764  0E54  086A               	movf	_DimmerLights,w
 12765  0E55  0086               	movwf	6
 12766  0E56  3001               	movlw	1	; select bank2/3
 12767  0E57  0087               	movwf	7
 12768  0E58  1181               	bcf	1,3
 12769                           
 12770                           ;Dimmer_B1.c: 639: DimmerLights->AdjStatus = 0;
 12771  0E59  086A               	movf	_DimmerLights,w
 12772  0E5A  0086               	movwf	6
 12773  0E5B  3001               	movlw	1	; select bank2/3
 12774  0E5C  0087               	movwf	7
 12775  0E5D  1201               	bcf	1,4
 12776                           
 12777                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 12778  0E5E  3007               	movlw	7
 12779  0E5F  00A5               	movwf	??_setDimmerLights
 12780  0E60  086A               	movf	_DimmerLights,w
 12781  0E61  3E02               	addlw	2
 12782  0E62  0086               	movwf	6
 12783  0E63  3001               	movlw	1	; select bank2/3
 12784  0E64  0087               	movwf	7
 12785  0E65  0825               	movf	??_setDimmerLights,w
 12786  0E66  0081               	movwf	1
 12787  0E67  0008               	return
 12788  0E68                     __end_of_setDimmerLights:	
 12789                           
 12790                           	psect	text81
 12791  0969                     __ptext81:	
 12792 ;; *************** function _setLED *****************
 12793 ;; Defined at:
 12794 ;;		line 70 in file "../src/LED_B1.c"
 12795 ;; Parameters:    Size  Location     Type
 12796 ;;  led             1    wreg     unsigned char 
 12797 ;;  command         1    2[BANK0 ] unsigned char 
 12798 ;; Auto vars:     Size  Location     Type
 12799 ;;  led             1    3[BANK0 ] unsigned char 
 12800 ;; Return value:  Size  Location     Type
 12801 ;;		None               void
 12802 ;; Registers used:
 12803 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12804 ;; Tracked objects:
 12805 ;;		On entry : 0/0
 12806 ;;		On exit  : 0/0
 12807 ;;		Unchanged: 0/0
 12808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12809 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12812 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12813 ;;Total ram usage:        2 bytes
 12814 ;; Hardware stack levels used:    1
 12815 ;; Hardware stack levels required when called:    6
 12816 ;; This function calls:
 12817 ;;		_LedPointSelect
 12818 ;; This function is called by:
 12819 ;;		_setDimmerLights_ERROR
 12820 ;;		_setDimmerLights
 12821 ;;		_setLED_Initialization
 12822 ;;		_setOverTemp_Exceptions
 12823 ;;		_setPowerFault_Exceptions
 12824 ;;		_setSw_Initialization
 12825 ;; This function uses a non-reentrant model
 12826 ;;
 12827                           
 12828                           
 12829                           ;psect for function _setLED
 12830  0969                     _setLED:	
 12831                           
 12832                           ;incstack = 0
 12833                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12834                           ;setLED@led stored from wreg
 12835  0969  0020               	movlb	0	; select bank0
 12836  096A  00A3               	movwf	setLED@led
 12837                           
 12838                           ;LED_B1.c: 71: LedPointSelect(led);
 12839  096B  0823               	movf	setLED@led,w
 12840  096C  3190  20F9  3189   	fcall	_LedPointSelect
 12841                           
 12842                           ;LED_B1.c: 72: if (command == 0) {
 12843  096F  0020               	movlb	0	; select bank0
 12844  0970  08A2               	movf	setLED@command,f
 12845  0971  1D03               	skipz
 12846  0972  2985               	goto	l7943
 12847                           
 12848                           ;LED_B1.c: 74: if (led == 1) {
 12849  0973  0823               	movf	setLED@led,w
 12850  0974  3A01               	xorlw	1
 12851  0975  1D03               	skipz
 12852  0976  2979               	goto	l7935
 12853                           
 12854                           ;LED_B1.c: 78: RA3 = 1;
 12855  0977  158C               	bsf	12,3	;volatile
 12856                           
 12857                           ;LED_B1.c: 80: }
 12858  0978  0008               	return
 12859  0979                     l7935:	
 12860                           
 12861                           ;LED_B1.c: 83: else if (led == 2) {
 12862  0979  0823               	movf	setLED@led,w
 12863  097A  3A02               	xorlw	2
 12864  097B  1D03               	skipz
 12865  097C  297F               	goto	l7939
 12866                           
 12867                           ;LED_B1.c: 87: RC7 = 1;
 12868  097D  178E               	bsf	14,7	;volatile
 12869                           
 12870                           ;LED_B1.c: 89: }
 12871  097E  0008               	return
 12872  097F                     l7939:	
 12873                           
 12874                           ;LED_B1.c: 101: else if (led == 99) {
 12875  097F  0823               	movf	setLED@led,w
 12876  0980  3A63               	xorlw	99
 12877  0981  1D03               	skipz
 12878  0982  0008               	return
 12879                           
 12880                           ;LED_B1.c: 105: RB5 = 1;
 12881  0983  168D               	bsf	13,5	;volatile
 12882                           
 12883                           ;LED_B1.c: 107: }
 12884                           ;LED_B1.c: 109: } else if (command == 1) {
 12885  0984  0008               	return
 12886  0985                     l7943:	
 12887  0985  0822               	movf	setLED@command,w
 12888  0986  3A01               	xorlw	1
 12889  0987  1D03               	skipz
 12890  0988  299B               	goto	l7957
 12891                           
 12892                           ;LED_B1.c: 111: if (led == 1) {
 12893  0989  0823               	movf	setLED@led,w
 12894  098A  3A01               	xorlw	1
 12895  098B  1D03               	skipz
 12896  098C  298F               	goto	l7949
 12897                           
 12898                           ;LED_B1.c: 115: RA3 = 0;
 12899  098D  118C               	bcf	12,3	;volatile
 12900                           
 12901                           ;LED_B1.c: 117: }
 12902  098E  0008               	return
 12903  098F                     l7949:	
 12904                           
 12905                           ;LED_B1.c: 120: else if (led == 2) {
 12906  098F  0823               	movf	setLED@led,w
 12907  0990  3A02               	xorlw	2
 12908  0991  1D03               	skipz
 12909  0992  2995               	goto	l7953
 12910                           
 12911                           ;LED_B1.c: 124: RC7 = 0;
 12912  0993  138E               	bcf	14,7	;volatile
 12913                           
 12914                           ;LED_B1.c: 126: }
 12915  0994  0008               	return
 12916  0995                     l7953:	
 12917                           
 12918                           ;LED_B1.c: 138: else if (led == 99) {
 12919  0995  0823               	movf	setLED@led,w
 12920  0996  3A63               	xorlw	99
 12921  0997  1D03               	skipz
 12922  0998  0008               	return
 12923                           
 12924                           ;LED_B1.c: 142: RB5 = 0;
 12925  0999  128D               	bcf	13,5	;volatile
 12926                           
 12927                           ;LED_B1.c: 144: }
 12928                           ;LED_B1.c: 146: } else if (command == 10) {
 12929  099A  0008               	return
 12930  099B                     l7957:	
 12931  099B  0822               	movf	setLED@command,w
 12932  099C  3A0A               	xorlw	10
 12933  099D  1D03               	skipz
 12934  099E  29BD               	goto	l7973
 12935                           
 12936                           ;LED_B1.c: 147: LED->GO = 0;
 12937  099F  086B               	movf	_LED,w
 12938  09A0  0086               	movwf	6
 12939  09A1  3001               	movlw	1	; select bank2/3
 12940  09A2  0087               	movwf	7
 12941  09A3  1081               	bcf	1,1
 12942                           
 12943                           ;LED_B1.c: 148: LED->Time = 0;
 12944  09A4  0A6B               	incf	_LED,w
 12945  09A5  0086               	movwf	6
 12946  09A6  3001               	movlw	1	; select bank2/3
 12947  09A7  0087               	movwf	7
 12948  09A8  3000               	movlw	0
 12949  09A9  3FC0               	movwi [0]fsr1
 12950  09AA  3FC1               	movwi [1]fsr1
 12951                           
 12952                           ;LED_B1.c: 150: if (led == 1) {
 12953  09AB  0823               	movf	setLED@led,w
 12954  09AC  3A01               	xorlw	1
 12955  09AD  1D03               	skipz
 12956  09AE  29B1               	goto	l7965
 12957                           
 12958                           ;LED_B1.c: 154: RA3 = 1;
 12959  09AF  158C               	bsf	12,3	;volatile
 12960                           
 12961                           ;LED_B1.c: 156: }
 12962  09B0  0008               	return
 12963  09B1                     l7965:	
 12964                           
 12965                           ;LED_B1.c: 159: else if (led == 2) {
 12966  09B1  0823               	movf	setLED@led,w
 12967  09B2  3A02               	xorlw	2
 12968  09B3  1D03               	skipz
 12969  09B4  29B7               	goto	l7969
 12970                           
 12971                           ;LED_B1.c: 163: RC7 = 1;
 12972  09B5  178E               	bsf	14,7	;volatile
 12973                           
 12974                           ;LED_B1.c: 165: }
 12975  09B6  0008               	return
 12976  09B7                     l7969:	
 12977                           
 12978                           ;LED_B1.c: 177: else if (led == 99) {
 12979  09B7  0823               	movf	setLED@led,w
 12980  09B8  3A63               	xorlw	99
 12981  09B9  1D03               	skipz
 12982  09BA  0008               	return
 12983                           
 12984                           ;LED_B1.c: 181: RB5 = 1;
 12985  09BB  168D               	bsf	13,5	;volatile
 12986                           
 12987                           ;LED_B1.c: 183: }
 12988                           ;LED_B1.c: 185: } else if (command == 11) {
 12989  09BC  0008               	return
 12990  09BD                     l7973:	
 12991  09BD  0822               	movf	setLED@command,w
 12992  09BE  3A0B               	xorlw	11
 12993  09BF  1D03               	skipz
 12994  09C0  0008               	return
 12995                           
 12996                           ;LED_B1.c: 186: LED->GO = 1;
 12997  09C1  086B               	movf	_LED,w
 12998  09C2  0086               	movwf	6
 12999  09C3  3001               	movlw	1	; select bank2/3
 13000  09C4  0087               	movwf	7
 13001  09C5  1481               	bsf	1,1
 13002  09C6  0008               	return
 13003  09C7                     __end_of_setLED:	
 13004                           
 13005                           	psect	text82
 13006  10F9                     __ptext82:	
 13007 ;; *************** function _LedPointSelect *****************
 13008 ;; Defined at:
 13009 ;;		line 7 in file "../src/LED_B1.c"
 13010 ;; Parameters:    Size  Location     Type
 13011 ;;  led             1    wreg     unsigned char 
 13012 ;; Auto vars:     Size  Location     Type
 13013 ;;  led             1    1[BANK0 ] unsigned char 
 13014 ;; Return value:  Size  Location     Type
 13015 ;;		None               void
 13016 ;; Registers used:
 13017 ;;		wreg
 13018 ;; Tracked objects:
 13019 ;;		On entry : 0/0
 13020 ;;		On exit  : 0/0
 13021 ;;		Unchanged: 0/0
 13022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;Total ram usage:        2 bytes
 13028 ;; Hardware stack levels used:    1
 13029 ;; Hardware stack levels required when called:    5
 13030 ;; This function calls:
 13031 ;;		Nothing
 13032 ;; This function is called by:
 13033 ;;		_setLED_Initialization
 13034 ;;		_setLED
 13035 ;;		_setLED_Main
 13036 ;; This function uses a non-reentrant model
 13037 ;;
 13038                           
 13039                           
 13040                           ;psect for function _LedPointSelect
 13041  10F9                     _LedPointSelect:	
 13042                           
 13043                           ;incstack = 0
 13044                           ; Regs used in _LedPointSelect: [wreg]
 13045                           ;LedPointSelect@led stored from wreg
 13046  10F9  0020               	movlb	0	; select bank0
 13047  10FA  00A1               	movwf	LedPointSelect@led
 13048                           
 13049                           ;LED_B1.c: 9: if (led == 1) {
 13050  10FB  0821               	movf	LedPointSelect@led,w
 13051  10FC  3A01               	xorlw	1
 13052  10FD  1D03               	skipz
 13053  10FE  2904               	goto	l7729
 13054                           
 13055                           ;LED_B1.c: 10: LED = &VarLED1;
 13056  10FF  3066               	movlw	_VarLED1& (0+255)
 13057  1100  00A0               	movwf	??_LedPointSelect
 13058  1101  0820               	movf	??_LedPointSelect,w
 13059  1102  00EB               	movwf	_LED
 13060                           
 13061                           ;LED_B1.c: 11: }
 13062  1103  0008               	return
 13063  1104                     l7729:	
 13064                           
 13065                           ;LED_B1.c: 14: else if (led == 2) {
 13066  1104  0821               	movf	LedPointSelect@led,w
 13067  1105  3A02               	xorlw	2
 13068  1106  1D03               	skipz
 13069  1107  290D               	goto	l7733
 13070                           
 13071                           ;LED_B1.c: 15: LED = &VarLED2;
 13072  1108  306A               	movlw	_VarLED2& (0+255)
 13073  1109  00A0               	movwf	??_LedPointSelect
 13074  110A  0820               	movf	??_LedPointSelect,w
 13075  110B  00EB               	movwf	_LED
 13076                           
 13077                           ;LED_B1.c: 16: }
 13078  110C  0008               	return
 13079  110D                     l7733:	
 13080                           
 13081                           ;LED_B1.c: 24: else if (led == 99) {
 13082  110D  0821               	movf	LedPointSelect@led,w
 13083  110E  3A63               	xorlw	99
 13084  110F  1D03               	skipz
 13085  1110  0008               	return
 13086                           
 13087                           ;LED_B1.c: 25: LED = &VarErrLED;
 13088  1111  3062               	movlw	_VarErrLED& (0+255)
 13089  1112  00A0               	movwf	??_LedPointSelect
 13090  1113  0820               	movf	??_LedPointSelect,w
 13091  1114  00EB               	movwf	_LED
 13092  1115  0008               	return
 13093  1116                     __end_of_LedPointSelect:	
 13094                           
 13095                           	psect	text83
 13096  1FC4                     __ptext83:	
 13097 ;; *************** function _DimmerLights_Close *****************
 13098 ;; Defined at:
 13099 ;;		line 405 in file "../src/Dimmer_B1.c"
 13100 ;; Parameters:    Size  Location     Type
 13101 ;;		None
 13102 ;; Auto vars:     Size  Location     Type
 13103 ;;		None
 13104 ;; Return value:  Size  Location     Type
 13105 ;;		None               void
 13106 ;; Registers used:
 13107 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13108 ;; Tracked objects:
 13109 ;;		On entry : 0/0
 13110 ;;		On exit  : 0/0
 13111 ;;		Unchanged: 0/0
 13112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13117 ;;Total ram usage:        0 bytes
 13118 ;; Hardware stack levels used:    1
 13119 ;; Hardware stack levels required when called:    6
 13120 ;; This function calls:
 13121 ;;		_getDimmerLights_StatusFlag
 13122 ;;		_setMemory_GO
 13123 ;; This function is called by:
 13124 ;;		_DimmerLights_Main
 13125 ;; This function uses a non-reentrant model
 13126 ;;
 13127                           
 13128                           
 13129                           ;psect for function _DimmerLights_Close
 13130  1FC4                     _DimmerLights_Close:	
 13131                           
 13132                           ;Dimmer_B1.c: 406: if (Dimmer->Detect == 1) {
 13133                           
 13134                           ;incstack = 0
 13135                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13136  1FC4  0876               	movf	_Dimmer,w
 13137  1FC5  0086               	movwf	6
 13138  1FC6  0187               	clrf	7
 13139  1FC7  1C01               	btfss	1,0
 13140  1FC8  0008               	return
 13141                           
 13142                           ;Dimmer_B1.c: 407: Dimmer->Detect = 0;
 13143  1FC9  0876               	movf	_Dimmer,w
 13144  1FCA  0086               	movwf	6
 13145  1FCB  0187               	clrf	7
 13146  1FCC  1001               	bcf	1,0
 13147                           
 13148                           ;Dimmer_B1.c: 408: if (getDimmerLights_StatusFlag() == 0) {
 13149  1FCD  319E  2614  319F   	fcall	_getDimmerLights_StatusFlag
 13150  1FD0  3800               	iorlw	0
 13151  1FD1  1D03               	skipz
 13152  1FD2  0008               	return
 13153                           
 13154                           ;Dimmer_B1.c: 409: ;;
 13155                           ;Dimmer_B1.c: 410: setMemory_GO(1);
 13156  1FD3  3001               	movlw	1
 13157  1FD4  3190  2080         	fcall	_setMemory_GO
 13158  1FD6  0008               	return
 13159  1FD7                     __end_of_DimmerLights_Close:	
 13160                           
 13161                           	psect	text84
 13162  1080                     __ptext84:	
 13163 ;; *************** function _setMemory_GO *****************
 13164 ;; Defined at:
 13165 ;;		line 892 in file "../src/MCU_B1.c"
 13166 ;; Parameters:    Size  Location     Type
 13167 ;;  command         1    wreg     unsigned char 
 13168 ;; Auto vars:     Size  Location     Type
 13169 ;;  command         1    2[BANK0 ] unsigned char 
 13170 ;; Return value:  Size  Location     Type
 13171 ;;		None               void
 13172 ;; Registers used:
 13173 ;;		wreg, status,2, status,0
 13174 ;; Tracked objects:
 13175 ;;		On entry : 0/0
 13176 ;;		On exit  : 0/0
 13177 ;;		Unchanged: 0/0
 13178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13182 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13183 ;;Total ram usage:        3 bytes
 13184 ;; Hardware stack levels used:    1
 13185 ;; Hardware stack levels required when called:    5
 13186 ;; This function calls:
 13187 ;;		Nothing
 13188 ;; This function is called by:
 13189 ;;		_DimmerLights_Close
 13190 ;;		_setDimmerLights
 13191 ;; This function uses a non-reentrant model
 13192 ;;
 13193                           
 13194                           
 13195                           ;psect for function _setMemory_GO
 13196  1080                     _setMemory_GO:	
 13197                           
 13198                           ;incstack = 0
 13199                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 13200                           ;setMemory_GO@command stored from wreg
 13201  1080  0020               	movlb	0	; select bank0
 13202  1081  00A2               	movwf	setMemory_GO@command
 13203                           
 13204                           ;MCU_B1.c: 893: Memory.GO = command;
 13205  1082  0822               	movf	setMemory_GO@command,w
 13206  1083  0022               	movlb	2	; select bank2
 13207  1084  10E1               	bcf	(_Memory^(0+256)+36),1
 13208  1085  1D03               	skipz
 13209  1086  14E1               	bsf	(_Memory^(0+256)+36),1
 13210                           
 13211                           ;MCU_B1.c: 894: if (command == 0) {
 13212  1087  0020               	movlb	0	; select bank0
 13213  1088  08A2               	movf	setMemory_GO@command,f
 13214  1089  1D03               	skipz
 13215  108A  0008               	return
 13216                           
 13217                           ;MCU_B1.c: 895: Memory.Time = command;
 13218  108B  0822               	movf	setMemory_GO@command,w
 13219  108C  00A0               	movwf	??_setMemory_GO
 13220  108D  01A1               	clrf	??_setMemory_GO+1
 13221  108E  0820               	movf	??_setMemory_GO,w
 13222  108F  0022               	movlb	2	; select bank2
 13223  1090  00DF               	movwf	(_Memory^(0+256)+34)
 13224  1091  0020               	movlb	0	; select bank0
 13225  1092  0821               	movf	??_setMemory_GO+1,w
 13226  1093  0022               	movlb	2	; select bank2
 13227  1094  00E0               	movwf	((_Memory+1)^(0+256)+34)
 13228  1095  0008               	return
 13229  1096                     __end_of_setMemory_GO:	
 13230                           
 13231                           	psect	text85
 13232  1E14                     __ptext85:	
 13233 ;; *************** function _getDimmerLights_StatusFlag *****************
 13234 ;; Defined at:
 13235 ;;		line 484 in file "../src/Dimmer_B1.c"
 13236 ;; Parameters:    Size  Location     Type
 13237 ;;		None
 13238 ;; Auto vars:     Size  Location     Type
 13239 ;;  Status          1    0[BANK0 ] unsigned char 
 13240 ;; Return value:  Size  Location     Type
 13241 ;;                  1    wreg      unsigned char 
 13242 ;; Registers used:
 13243 ;;		wreg, status,2
 13244 ;; Tracked objects:
 13245 ;;		On entry : 0/0
 13246 ;;		On exit  : 0/0
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;Total ram usage:        1 bytes
 13254 ;; Hardware stack levels used:    1
 13255 ;; Hardware stack levels required when called:    5
 13256 ;; This function calls:
 13257 ;;		Nothing
 13258 ;; This function is called by:
 13259 ;;		_DimmerLights_Close
 13260 ;;		_DimmerLights_Exceptions
 13261 ;; This function uses a non-reentrant model
 13262 ;;
 13263                           
 13264                           
 13265                           ;psect for function _getDimmerLights_StatusFlag
 13266  1E14                     _getDimmerLights_StatusFlag:	
 13267                           
 13268                           ;Dimmer_B1.c: 485: char Status = 0;
 13269                           
 13270                           ;incstack = 0
 13271                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 13272  1E14  0020               	movlb	0	; select bank0
 13273  1E15  01A0               	clrf	getDimmerLights_StatusFlag@Status
 13274                           
 13275                           ;Dimmer_B1.c: 496: Status = (DimmerLights1.StatusFlag == 1) ? 1 : 0;
 13276  1E16  3000               	movlw	0
 13277  1E17  0023               	movlb	3	; select bank3
 13278  1E18  1B40               	btfsc	_DimmerLights1^(0+384),6
 13279  1E19  3001               	movlw	1
 13280  1E1A  0020               	movlb	0	; select bank0
 13281  1E1B  00A0               	movwf	getDimmerLights_StatusFlag@Status
 13282                           
 13283                           ;Dimmer_B1.c: 499: return Status;
 13284  1E1C  0820               	movf	getDimmerLights_StatusFlag@Status,w
 13285  1E1D  0008               	return
 13286  1E1E                     __end_of_getDimmerLights_StatusFlag:	
 13287                           
 13288                           	psect	text86
 13289  1E9D                     __ptext86:	
 13290 ;; *************** function _DimmerLights_Initialization *****************
 13291 ;; Defined at:
 13292 ;;		line 343 in file "../src/Dimmer_B1.c"
 13293 ;; Parameters:    Size  Location     Type
 13294 ;;		None
 13295 ;; Auto vars:     Size  Location     Type
 13296 ;;		None
 13297 ;; Return value:  Size  Location     Type
 13298 ;;		None               void
 13299 ;; Registers used:
 13300 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13301 ;; Tracked objects:
 13302 ;;		On entry : 0/0
 13303 ;;		On exit  : 0/0
 13304 ;;		Unchanged: 0/0
 13305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13308 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13309 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13310 ;;Total ram usage:        1 bytes
 13311 ;; Hardware stack levels used:    1
 13312 ;; Hardware stack levels required when called:    7
 13313 ;; This function calls:
 13314 ;;		_Dimmer_Initialization
 13315 ;;		_setDimmerLights_Initialization
 13316 ;; This function is called by:
 13317 ;;		_main
 13318 ;; This function uses a non-reentrant model
 13319 ;;
 13320                           
 13321                           
 13322                           ;psect for function _DimmerLights_Initialization
 13323  1E9D                     _DimmerLights_Initialization:	
 13324                           
 13325                           ;Dimmer_B1.c: 346: DimmerLights11 = &DimmerLights1;
 13326                           
 13327                           ;incstack = 0
 13328                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13329  1E9D  30C0               	movlw	_DimmerLights1& (0+255)
 13330  1E9E  0020               	movlb	0	; select bank0
 13331  1E9F  00A4               	movwf	??_DimmerLights_Initialization
 13332  1EA0  0824               	movf	??_DimmerLights_Initialization,w
 13333  1EA1  0021               	movlb	1	; select bank1
 13334  1EA2  00D5               	movwf	_DimmerLights11^(0+128)
 13335                           
 13336                           ;Dimmer_B1.c: 347: setDimmerLights_Initialization(1);
 13337  1EA3  3001               	movlw	1
 13338  1EA4  3193  2338  319E   	fcall	_setDimmerLights_Initialization
 13339                           
 13340                           ;Dimmer_B1.c: 361: Dimmer_Initialization();
 13341  1EA7  319D  25A6         	fcall	_Dimmer_Initialization
 13342  1EA9  0008               	return
 13343  1EAA                     __end_of_DimmerLights_Initialization:	
 13344                           
 13345                           	psect	text87
 13346  1338                     __ptext87:	
 13347 ;; *************** function _setDimmerLights_Initialization *****************
 13348 ;; Defined at:
 13349 ;;		line 366 in file "../src/Dimmer_B1.c"
 13350 ;; Parameters:    Size  Location     Type
 13351 ;;  lights          1    wreg     unsigned char 
 13352 ;; Auto vars:     Size  Location     Type
 13353 ;;  lights          1    3[BANK0 ] unsigned char 
 13354 ;; Return value:  Size  Location     Type
 13355 ;;		None               void
 13356 ;; Registers used:
 13357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13358 ;; Tracked objects:
 13359 ;;		On entry : 0/0
 13360 ;;		On exit  : 0/0
 13361 ;;		Unchanged: 0/0
 13362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13364 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13366 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13367 ;;Total ram usage:        2 bytes
 13368 ;; Hardware stack levels used:    1
 13369 ;; Hardware stack levels required when called:    6
 13370 ;; This function calls:
 13371 ;;		_DimmerLightsPointSelect
 13372 ;; This function is called by:
 13373 ;;		_DimmerLights_Initialization
 13374 ;; This function uses a non-reentrant model
 13375 ;;
 13376                           
 13377                           
 13378                           ;psect for function _setDimmerLights_Initialization
 13379  1338                     _setDimmerLights_Initialization:	
 13380                           
 13381                           ;incstack = 0
 13382                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13383                           ;setDimmerLights_Initialization@lights stored from wreg
 13384  1338  0020               	movlb	0	; select bank0
 13385  1339  00A3               	movwf	setDimmerLights_Initialization@lights
 13386                           
 13387                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 13388  133A  0823               	movf	setDimmerLights_Initialization@lights,w
 13389  133B  319E  2634         	fcall	_DimmerLightsPointSelect
 13390                           
 13391                           ;Dimmer_B1.c: 369: DimmerLights->Clear = 1;
 13392  133D  0020               	movlb	0	; select bank0
 13393  133E  086A               	movf	_DimmerLights,w
 13394  133F  3E09               	addlw	9
 13395  1340  0086               	movwf	6
 13396  1341  3001               	movlw	1	; select bank2/3
 13397  1342  0087               	movwf	7
 13398  1343  1501               	bsf	1,2
 13399                           
 13400                           ;Dimmer_B1.c: 375: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13401  1344  3020               	movlw	32
 13402  1345  00A2               	movwf	??_setDimmerLights_Initialization
 13403  1346  086A               	movf	_DimmerLights,w
 13404  1347  3E05               	addlw	5
 13405  1348  0086               	movwf	6
 13406  1349  3001               	movlw	1	; select bank2/3
 13407  134A  0087               	movwf	7
 13408  134B  0822               	movf	??_setDimmerLights_Initialization,w
 13409  134C  0081               	movwf	1
 13410                           
 13411                           ;Dimmer_B1.c: 376: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13412  134D  303C               	movlw	60
 13413  134E  00A2               	movwf	??_setDimmerLights_Initialization
 13414  134F  086A               	movf	_DimmerLights,w
 13415  1350  3E06               	addlw	6
 13416  1351  0086               	movwf	6
 13417  1352  3001               	movlw	1	; select bank2/3
 13418  1353  0087               	movwf	7
 13419  1354  0822               	movf	??_setDimmerLights_Initialization,w
 13420  1355  0081               	movwf	1
 13421                           
 13422                           ;Dimmer_B1.c: 386: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13423  1356  086A               	movf	_DimmerLights,w
 13424  1357  3E06               	addlw	6
 13425  1358  0086               	movwf	6
 13426  1359  3001               	movlw	1	; select bank2/3
 13427  135A  0087               	movwf	7
 13428  135B  0801               	movf	1,w
 13429  135C  00A2               	movwf	??_setDimmerLights_Initialization
 13430  135D  086A               	movf	_DimmerLights,w
 13431  135E  3E04               	addlw	4
 13432  135F  0086               	movwf	6
 13433  1360  3001               	movlw	1	; select bank2/3
 13434  1361  0087               	movwf	7
 13435  1362  0822               	movf	??_setDimmerLights_Initialization,w
 13436  1363  0081               	movwf	1
 13437  1364  0008               	return
 13438  1365                     __end_of_setDimmerLights_Initialization:	
 13439                           
 13440                           	psect	text88
 13441  1DA6                     __ptext88:	
 13442 ;; *************** function _Dimmer_Initialization *****************
 13443 ;; Defined at:
 13444 ;;		line 795 in file "../src/Dimmer_B1.c"
 13445 ;; Parameters:    Size  Location     Type
 13446 ;;		None
 13447 ;; Auto vars:     Size  Location     Type
 13448 ;;		None
 13449 ;; Return value:  Size  Location     Type
 13450 ;;		None               void
 13451 ;; Registers used:
 13452 ;;		wreg
 13453 ;; Tracked objects:
 13454 ;;		On entry : 0/0
 13455 ;;		On exit  : 0/0
 13456 ;;		Unchanged: 0/0
 13457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;Total ram usage:        1 bytes
 13463 ;; Hardware stack levels used:    1
 13464 ;; Hardware stack levels required when called:    5
 13465 ;; This function calls:
 13466 ;;		Nothing
 13467 ;; This function is called by:
 13468 ;;		_DimmerLights_Initialization
 13469 ;; This function uses a non-reentrant model
 13470 ;;
 13471                           
 13472                           
 13473                           ;psect for function _Dimmer_Initialization
 13474  1DA6                     _Dimmer_Initialization:	
 13475                           
 13476                           ;Dimmer_B1.c: 797: Dimmer = &Dimmer1;
 13477                           
 13478                           ;incstack = 0
 13479                           ; Regs used in _Dimmer_Initialization: [wreg]
 13480  1DA6  30EA               	movlw	_Dimmer1& (0+255)
 13481  1DA7  0020               	movlb	0	; select bank0
 13482  1DA8  00A0               	movwf	??_Dimmer_Initialization
 13483  1DA9  0820               	movf	??_Dimmer_Initialization,w
 13484  1DAA  00F6               	movwf	_Dimmer
 13485  1DAB  0008               	return
 13486  1DAC                     __end_of_Dimmer_Initialization:	
 13487                           
 13488                           	psect	text89
 13489  1D96                     __ptext89:	
 13490 ;; *************** function _DelayOff_Main *****************
 13491 ;; Defined at:
 13492 ;;		line 41 in file "../src/DelayOff_B1.c"
 13493 ;; Parameters:    Size  Location     Type
 13494 ;;		None
 13495 ;; Auto vars:     Size  Location     Type
 13496 ;;		None
 13497 ;; Return value:  Size  Location     Type
 13498 ;;		None               void
 13499 ;; Registers used:
 13500 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13501 ;; Tracked objects:
 13502 ;;		On entry : 0/0
 13503 ;;		On exit  : 0/0
 13504 ;;		Unchanged: 0/0
 13505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13510 ;;Total ram usage:        0 bytes
 13511 ;; Hardware stack levels used:    1
 13512 ;; Hardware stack levels required when called:   10
 13513 ;; This function calls:
 13514 ;;		_DlyOff_Main
 13515 ;; This function is called by:
 13516 ;;		_main
 13517 ;; This function uses a non-reentrant model
 13518 ;;
 13519                           
 13520                           
 13521                           ;psect for function _DelayOff_Main
 13522  1D96                     _DelayOff_Main:	
 13523                           
 13524                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13525                           
 13526                           ;incstack = 0
 13527                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13528  1D96  3001               	movlw	1
 13529  1D97  318B  23BC         	fcall	_DlyOff_Main
 13530  1D99  0008               	return
 13531  1D9A                     __end_of_DelayOff_Main:	
 13532                           
 13533                           	psect	text90
 13534  0BBC                     __ptext90:	
 13535 ;; *************** function _DlyOff_Main *****************
 13536 ;; Defined at:
 13537 ;;		line 62 in file "../src/DelayOff_B1.c"
 13538 ;; Parameters:    Size  Location     Type
 13539 ;;  sw              1    wreg     unsigned char 
 13540 ;; Auto vars:     Size  Location     Type
 13541 ;;  sw              1   68[BANK0 ] unsigned char 
 13542 ;; Return value:  Size  Location     Type
 13543 ;;		None               void
 13544 ;; Registers used:
 13545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13546 ;; Tracked objects:
 13547 ;;		On entry : 0/0
 13548 ;;		On exit  : 0/0
 13549 ;;		Unchanged: 0/0
 13550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13553 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13554 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13555 ;;Total ram usage:        3 bytes
 13556 ;; Hardware stack levels used:    1
 13557 ;; Hardware stack levels required when called:    9
 13558 ;; This function calls:
 13559 ;;		_DelayOffPointSelect
 13560 ;;		_setBuz
 13561 ;;		_setDimmerLights_Switch
 13562 ;;		_setDimmerLights_Trigger
 13563 ;;		_setRFSW_Status
 13564 ;;		_setRF_DimmerLights
 13565 ;;		_setSw_Status
 13566 ;;		_setTxData
 13567 ;; This function is called by:
 13568 ;;		_DelayOff_Main
 13569 ;; This function uses a non-reentrant model
 13570 ;;
 13571                           
 13572                           
 13573                           ;psect for function _DlyOff_Main
 13574  0BBC                     _DlyOff_Main:	
 13575                           
 13576                           ;incstack = 0
 13577                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13578                           ;DlyOff_Main@sw stored from wreg
 13579  0BBC  0020               	movlb	0	; select bank0
 13580  0BBD  00E4               	movwf	DlyOff_Main@sw
 13581                           
 13582                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13583  0BBE  0864               	movf	DlyOff_Main@sw,w
 13584  0BBF  319E  261E  318B   	fcall	_DelayOffPointSelect
 13585                           
 13586                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13587  0BC2  0020               	movlb	0	; select bank0
 13588  0BC3  0869               	movf	_DelayOff,w
 13589  0BC4  0086               	movwf	6
 13590  0BC5  0187               	clrf	7
 13591  0BC6  1C81               	btfss	1,1
 13592  0BC7  0008               	return
 13593                           
 13594                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13595  0BC8  0869               	movf	_DelayOff,w
 13596  0BC9  0086               	movwf	6
 13597  0BCA  0187               	clrf	7
 13598  0BCB  3001               	movlw	1
 13599  0BCC  0781               	addwf	1,f
 13600  0BCD  3141               	addfsr 1,1
 13601  0BCE  1803               	skipnc
 13602  0BCF  0A81               	incf	1,f
 13603                           
 13604                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5600) {
 13605  0BD0  0869               	movf	_DelayOff,w
 13606  0BD1  0086               	movwf	6
 13607  0BD2  0187               	clrf	7
 13608  0BD3  3F40               	moviw [0]fsr1
 13609  0BD4  00E2               	movwf	??_DlyOff_Main
 13610  0BD5  3F41               	moviw [1]fsr1
 13611  0BD6  00E3               	movwf	??_DlyOff_Main+1
 13612  0BD7  3015               	movlw	21
 13613  0BD8  0263               	subwf	??_DlyOff_Main+1,w
 13614  0BD9  30E0               	movlw	224
 13615  0BDA  1903               	skipnz
 13616  0BDB  0262               	subwf	??_DlyOff_Main,w
 13617  0BDC  1C03               	skipc
 13618  0BDD  0008               	return
 13619                           
 13620                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13621  0BDE  0869               	movf	_DelayOff,w
 13622  0BDF  0086               	movwf	6
 13623  0BE0  0187               	clrf	7
 13624  0BE1  3000               	movlw	0
 13625  0BE2  3FC0               	movwi [0]fsr1
 13626  0BE3  3FC1               	movwi [1]fsr1
 13627                           
 13628                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13629  0BE4  3001               	movlw	1
 13630  0BE5  00E2               	movwf	??_DlyOff_Main
 13631  0BE6  0869               	movf	_DelayOff,w
 13632  0BE7  0086               	movwf	6
 13633  0BE8  0187               	clrf	7
 13634  0BE9  0862               	movf	??_DlyOff_Main,w
 13635  0BEA  0781               	addwf	1,f
 13636                           
 13637                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13638  0BEB  0869               	movf	_DelayOff,w
 13639  0BEC  0086               	movwf	6
 13640  0BED  0187               	clrf	7
 13641  0BEE  0869               	movf	_DelayOff,w
 13642  0BEF  0084               	movwf	4
 13643  0BF0  0185               	clrf	5
 13644  0BF1  0800               	movf	0,w
 13645  0BF2  0201               	subwf	1,w
 13646  0BF3  1C03               	skipc
 13647  0BF4  0008               	return
 13648                           
 13649                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13650  0BF5  0869               	movf	_DelayOff,w
 13651  0BF6  0086               	movwf	6
 13652  0BF7  0187               	clrf	7
 13653  0BF8  0181               	clrf	1
 13654                           
 13655                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 13656  0BF9  0869               	movf	_DelayOff,w
 13657  0BFA  0086               	movwf	6
 13658  0BFB  0187               	clrf	7
 13659  0BFC  1081               	bcf	1,1
 13660                           
 13661                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 13662  0BFD  01A2               	clrf	setSw_Status@command
 13663  0BFE  0864               	movf	DlyOff_Main@sw,w
 13664  0BFF  319E  26E0  318B   	fcall	_setSw_Status
 13665                           
 13666                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 13667  0C02  0020               	movlb	0	; select bank0
 13668  0C03  01A2               	clrf	setRFSW_Status@command
 13669  0C04  0864               	movf	DlyOff_Main@sw,w
 13670  0C05  319E  26C4  318B   	fcall	_setRFSW_Status
 13671                           
 13672                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 13673  0C08  0020               	movlb	0	; select bank0
 13674  0C09  01DD               	clrf	setRF_DimmerLights@on
 13675  0C0A  0864               	movf	DlyOff_Main@sw,w
 13676  0C0B  318C  2427  318B   	fcall	_setRF_DimmerLights
 13677                           
 13678                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 13679  0C0E  0020               	movlb	0	; select bank0
 13680  0C0F  01A2               	clrf	setDimmerLights_Trigger@command
 13681  0C10  0AA2               	incf	setDimmerLights_Trigger@command,f
 13682  0C11  0864               	movf	DlyOff_Main@sw,w
 13683  0C12  319F  272C  318B   	fcall	_setDimmerLights_Trigger
 13684                           
 13685                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 13686  0C15  0020               	movlb	0	; select bank0
 13687  0C16  01A2               	clrf	setDimmerLights_Switch@command
 13688  0C17  0864               	movf	DlyOff_Main@sw,w
 13689  0C18  319F  271C  318B   	fcall	_setDimmerLights_Switch
 13690                           
 13691                           ;DelayOff_B1.c: 78: setTxData();
 13692  0C1B  3185  25B5  318B   	fcall	_setTxData
 13693                           
 13694                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 13695  0C1E  3064               	movlw	100
 13696  0C1F  0020               	movlb	0	; select bank0
 13697  0C20  00A9               	movwf	setBuz@time
 13698  0C21  3000               	movlw	0
 13699  0C22  00AA               	movwf	setBuz@time+1
 13700  0C23  3001               	movlw	1
 13701  0C24  3188  205A         	fcall	_setBuz
 13702  0C26  0008               	return
 13703  0C27                     __end_of_DlyOff_Main:	
 13704                           
 13705                           	psect	text91
 13706  05B5                     __ptext91:	
 13707 ;; *************** function _setTxData *****************
 13708 ;; Defined at:
 13709 ;;		line 183 in file "../src/RF_Control_B1.c"
 13710 ;; Parameters:    Size  Location     Type
 13711 ;;		None
 13712 ;; Auto vars:     Size  Location     Type
 13713 ;;  i               1    0        unsigned char 
 13714 ;; Return value:  Size  Location     Type
 13715 ;;		None               void
 13716 ;; Registers used:
 13717 ;;		wreg, fsr1l, fsr1h
 13718 ;; Tracked objects:
 13719 ;;		On entry : 0/0
 13720 ;;		On exit  : 0/0
 13721 ;;		Unchanged: 0/0
 13722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13726 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13727 ;;Total ram usage:        1 bytes
 13728 ;; Hardware stack levels used:    1
 13729 ;; Hardware stack levels required when called:    5
 13730 ;; This function calls:
 13731 ;;		Nothing
 13732 ;; This function is called by:
 13733 ;;		_DlyOff_Main
 13734 ;;		_setDimmerLights_Adj
 13735 ;;		_setControl_Lights_Table
 13736 ;;		_setRFSW_Control
 13737 ;;		_setRFSW_AdjControl
 13738 ;;		_Sw_DimmerOnFunc
 13739 ;;		_Sw_DimmerOffFunc
 13740 ;; This function uses a non-reentrant model
 13741 ;;
 13742                           
 13743                           
 13744                           ;psect for function _setTxData
 13745  05B5                     _setTxData:	
 13746                           
 13747                           ;RF_Control_B1.c: 184: char i;
 13748                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 13749                           
 13750                           ;incstack = 0
 13751                           ; Regs used in _setTxData: [wregfsr1]
 13752  05B5  0021               	movlb	1	; select bank1
 13753  05B6  1C3E               	btfss	_RF1^(0+128),0
 13754  05B7  0008               	return
 13755                           
 13756                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 13757  05B8  153E               	bsf	_RF1^(0+128),2
 13758                           
 13759                           ;RF_Control_B1.c: 188: RF1.RunTime = 20;
 13760  05B9  3014               	movlw	20
 13761  05BA  0020               	movlb	0	; select bank0
 13762  05BB  00A0               	movwf	??_setTxData
 13763  05BC  0820               	movf	??_setTxData,w
 13764  05BD  0021               	movlb	1	; select bank1
 13765  05BE  00C4               	movwf	(_RF1^(0+128)+6)
 13766                           
 13767                           ;RF_Control_B1.c: 198: RF_Data[0] = 0x63;
 13768  05BF  3063               	movlw	99
 13769  05C0  0020               	movlb	0	; select bank0
 13770  05C1  00A0               	movwf	??_setTxData
 13771  05C2  0820               	movf	??_setTxData,w
 13772  05C3  0022               	movlb	2	; select bank2
 13773  05C4  00A0               	movwf	_RF_Data^(0+256)
 13774                           
 13775                           ;RF_Control_B1.c: 199: RF_Data[1] = 0x02;
 13776  05C5  3002               	movlw	2
 13777  05C6  0020               	movlb	0	; select bank0
 13778  05C7  00A0               	movwf	??_setTxData
 13779  05C8  0820               	movf	??_setTxData,w
 13780  05C9  0022               	movlb	2	; select bank2
 13781  05CA  00A1               	movwf	(_RF_Data^(0+256)+1)
 13782                           
 13783                           ;RF_Control_B1.c: 200: RF_Data[2] = product->Data[2];
 13784  05CB  0020               	movlb	0	; select bank0
 13785  05CC  086D               	movf	_product,w
 13786  05CD  0086               	movwf	6
 13787  05CE  3001               	movlw	1	; select bank2/3
 13788  05CF  0087               	movwf	7
 13789  05D0  3001               	movlw	1	; select bank2/3
 13790  05D1  3F42               	moviw [2]fsr1
 13791  05D2  0022               	movlb	2	; select bank2
 13792  05D3  00A2               	movwf	(_RF_Data^(0+256)+2)
 13793                           
 13794                           ;RF_Control_B1.c: 201: RF_Data[3] = product->Data[3];
 13795  05D4  0020               	movlb	0	; select bank0
 13796  05D5  086D               	movf	_product,w
 13797  05D6  0086               	movwf	6
 13798  05D7  3001               	movlw	1	; select bank2/3
 13799  05D8  0087               	movwf	7
 13800  05D9  3001               	movlw	1	; select bank2/3
 13801  05DA  3F43               	moviw [3]fsr1
 13802  05DB  0022               	movlb	2	; select bank2
 13803  05DC  00A3               	movwf	(_RF_Data^(0+256)+3)
 13804                           
 13805                           ;RF_Control_B1.c: 202: RF_Data[4] = product->Data[4];
 13806  05DD  0020               	movlb	0	; select bank0
 13807  05DE  086D               	movf	_product,w
 13808  05DF  0086               	movwf	6
 13809  05E0  3001               	movlw	1	; select bank2/3
 13810  05E1  0087               	movwf	7
 13811  05E2  3001               	movlw	1	; select bank2/3
 13812  05E3  3F44               	moviw [4]fsr1
 13813  05E4  0022               	movlb	2	; select bank2
 13814  05E5  00A4               	movwf	(_RF_Data^(0+256)+4)
 13815                           
 13816                           ;RF_Control_B1.c: 203: RF_Data[5] = product->Data[5];
 13817  05E6  0020               	movlb	0	; select bank0
 13818  05E7  086D               	movf	_product,w
 13819  05E8  0086               	movwf	6
 13820  05E9  3001               	movlw	1	; select bank2/3
 13821  05EA  0087               	movwf	7
 13822  05EB  3001               	movlw	1	; select bank2/3
 13823  05EC  3F45               	moviw [5]fsr1
 13824  05ED  0022               	movlb	2	; select bank2
 13825  05EE  00A5               	movwf	(_RF_Data^(0+256)+5)
 13826                           
 13827                           ;RF_Control_B1.c: 204: RF_Data[6] = product->Data[6];
 13828  05EF  0020               	movlb	0	; select bank0
 13829  05F0  086D               	movf	_product,w
 13830  05F1  0086               	movwf	6
 13831  05F2  3001               	movlw	1	; select bank2/3
 13832  05F3  0087               	movwf	7
 13833  05F4  3001               	movlw	1	; select bank2/3
 13834  05F5  3F46               	moviw [6]fsr1
 13835  05F6  0022               	movlb	2	; select bank2
 13836  05F7  00A6               	movwf	(_RF_Data^(0+256)+6)
 13837                           
 13838                           ;RF_Control_B1.c: 205: RF_Data[7] = product->Data[7];
 13839  05F8  0020               	movlb	0	; select bank0
 13840  05F9  086D               	movf	_product,w
 13841  05FA  0086               	movwf	6
 13842  05FB  3001               	movlw	1	; select bank2/3
 13843  05FC  0087               	movwf	7
 13844  05FD  3001               	movlw	1	; select bank2/3
 13845  05FE  3F47               	moviw [7]fsr1
 13846  05FF  0022               	movlb	2	; select bank2
 13847  0600  00A7               	movwf	(_RF_Data^(0+256)+7)
 13848                           
 13849                           ;RF_Control_B1.c: 206: RF_Data[8] = product->Data[8];
 13850  0601  0020               	movlb	0	; select bank0
 13851  0602  086D               	movf	_product,w
 13852  0603  0086               	movwf	6
 13853  0604  3001               	movlw	1	; select bank2/3
 13854  0605  0087               	movwf	7
 13855  0606  3001               	movlw	1	; select bank2/3
 13856  0607  3F48               	moviw [8]fsr1
 13857  0608  0022               	movlb	2	; select bank2
 13858  0609  00A8               	movwf	(_RF_Data^(0+256)+8)
 13859                           
 13860                           ;RF_Control_B1.c: 207: RF_Data[9] = product->Data[9];
 13861  060A  0020               	movlb	0	; select bank0
 13862  060B  086D               	movf	_product,w
 13863  060C  0086               	movwf	6
 13864  060D  3001               	movlw	1	; select bank2/3
 13865  060E  0087               	movwf	7
 13866  060F  3001               	movlw	1	; select bank2/3
 13867  0610  3F49               	moviw [9]fsr1
 13868  0611  0022               	movlb	2	; select bank2
 13869  0612  00A9               	movwf	(_RF_Data^(0+256)+9)
 13870                           
 13871                           ;RF_Control_B1.c: 208: RF_Data[10] = product->Data[10];
 13872  0613  0020               	movlb	0	; select bank0
 13873  0614  086D               	movf	_product,w
 13874  0615  0086               	movwf	6
 13875  0616  3001               	movlw	1	; select bank2/3
 13876  0617  0087               	movwf	7
 13877  0618  3001               	movlw	1	; select bank2/3
 13878  0619  3F4A               	moviw [10]fsr1
 13879  061A  0022               	movlb	2	; select bank2
 13880  061B  00AA               	movwf	(_RF_Data^(0+256)+10)
 13881                           
 13882                           ;RF_Control_B1.c: 209: RF_Data[11] = product->Data[11];
 13883  061C  0020               	movlb	0	; select bank0
 13884  061D  086D               	movf	_product,w
 13885  061E  0086               	movwf	6
 13886  061F  3001               	movlw	1	; select bank2/3
 13887  0620  0087               	movwf	7
 13888  0621  3001               	movlw	1	; select bank2/3
 13889  0622  3F4B               	moviw [11]fsr1
 13890  0623  0022               	movlb	2	; select bank2
 13891  0624  00AB               	movwf	(_RF_Data^(0+256)+11)
 13892                           
 13893                           ;RF_Control_B1.c: 210: RF_Data[12] = product->Data[12];
 13894  0625  0020               	movlb	0	; select bank0
 13895  0626  086D               	movf	_product,w
 13896  0627  0086               	movwf	6
 13897  0628  3001               	movlw	1	; select bank2/3
 13898  0629  0087               	movwf	7
 13899  062A  3001               	movlw	1	; select bank2/3
 13900  062B  3F4C               	moviw [12]fsr1
 13901  062C  0022               	movlb	2	; select bank2
 13902  062D  00AC               	movwf	(_RF_Data^(0+256)+12)
 13903                           
 13904                           ;RF_Control_B1.c: 211: RF_Data[13] = product->Data[13];
 13905  062E  0020               	movlb	0	; select bank0
 13906  062F  086D               	movf	_product,w
 13907  0630  0086               	movwf	6
 13908  0631  3001               	movlw	1	; select bank2/3
 13909  0632  0087               	movwf	7
 13910  0633  3001               	movlw	1	; select bank2/3
 13911  0634  3F4D               	moviw [13]fsr1
 13912  0635  0022               	movlb	2	; select bank2
 13913  0636  00AD               	movwf	(_RF_Data^(0+256)+13)
 13914                           
 13915                           ;RF_Control_B1.c: 212: RF_Data[14] = product->Data[14];
 13916  0637  0020               	movlb	0	; select bank0
 13917  0638  086D               	movf	_product,w
 13918  0639  0086               	movwf	6
 13919  063A  3001               	movlw	1	; select bank2/3
 13920  063B  0087               	movwf	7
 13921  063C  3001               	movlw	1	; select bank2/3
 13922  063D  3F4E               	moviw [14]fsr1
 13923  063E  0022               	movlb	2	; select bank2
 13924  063F  00AE               	movwf	(_RF_Data^(0+256)+14)
 13925                           
 13926                           ;RF_Control_B1.c: 213: RF_Data[15] = product->Data[15];
 13927  0640  0020               	movlb	0	; select bank0
 13928  0641  086D               	movf	_product,w
 13929  0642  0086               	movwf	6
 13930  0643  3001               	movlw	1	; select bank2/3
 13931  0644  0087               	movwf	7
 13932  0645  3001               	movlw	1	; select bank2/3
 13933  0646  3F4F               	moviw [15]fsr1
 13934  0647  0022               	movlb	2	; select bank2
 13935  0648  00AF               	movwf	(_RF_Data^(0+256)+15)
 13936                           
 13937                           ;RF_Control_B1.c: 214: RF_Data[16] = product->Data[16];
 13938  0649  0020               	movlb	0	; select bank0
 13939  064A  086D               	movf	_product,w
 13940  064B  0086               	movwf	6
 13941  064C  3001               	movlw	1	; select bank2/3
 13942  064D  0087               	movwf	7
 13943  064E  3001               	movlw	1	; select bank2/3
 13944  064F  3F50               	moviw [16]fsr1
 13945  0650  0022               	movlb	2	; select bank2
 13946  0651  00B0               	movwf	(_RF_Data^(0+256)+16)
 13947                           
 13948                           ;RF_Control_B1.c: 215: RF_Data[17] = product->Data[17];
 13949  0652  0020               	movlb	0	; select bank0
 13950  0653  086D               	movf	_product,w
 13951  0654  0086               	movwf	6
 13952  0655  3001               	movlw	1	; select bank2/3
 13953  0656  0087               	movwf	7
 13954  0657  3001               	movlw	1	; select bank2/3
 13955  0658  3F51               	moviw [17]fsr1
 13956  0659  0022               	movlb	2	; select bank2
 13957  065A  00B1               	movwf	(_RF_Data^(0+256)+17)
 13958                           
 13959                           ;RF_Control_B1.c: 216: RF_Data[18] = product->Data[18];
 13960  065B  0020               	movlb	0	; select bank0
 13961  065C  086D               	movf	_product,w
 13962  065D  0086               	movwf	6
 13963  065E  3001               	movlw	1	; select bank2/3
 13964  065F  0087               	movwf	7
 13965  0660  3001               	movlw	1	; select bank2/3
 13966  0661  3F52               	moviw [18]fsr1
 13967  0662  0022               	movlb	2	; select bank2
 13968  0663  00B2               	movwf	(_RF_Data^(0+256)+18)
 13969                           
 13970                           ;RF_Control_B1.c: 217: RF_Data[19] = product->Data[19];
 13971  0664  0020               	movlb	0	; select bank0
 13972  0665  086D               	movf	_product,w
 13973  0666  0086               	movwf	6
 13974  0667  3001               	movlw	1	; select bank2/3
 13975  0668  0087               	movwf	7
 13976  0669  3001               	movlw	1	; select bank2/3
 13977  066A  3F53               	moviw [19]fsr1
 13978  066B  0022               	movlb	2	; select bank2
 13979  066C  00B3               	movwf	(_RF_Data^(0+256)+19)
 13980                           
 13981                           ;RF_Control_B1.c: 218: RF_Data[20] = 209;
 13982  066D  30D1               	movlw	209
 13983  066E  0020               	movlb	0	; select bank0
 13984  066F  00A0               	movwf	??_setTxData
 13985  0670  0820               	movf	??_setTxData,w
 13986  0671  0022               	movlb	2	; select bank2
 13987  0672  00B4               	movwf	(_RF_Data^(0+256)+20)
 13988  0673  0008               	return
 13989  0674                     __end_of_setTxData:	
 13990                           
 13991                           	psect	text92
 13992  1EE0                     __ptext92:	
 13993 ;; *************** function _setSw_Status *****************
 13994 ;; Defined at:
 13995 ;;		line 111 in file "../src/Switch_B1.c"
 13996 ;; Parameters:    Size  Location     Type
 13997 ;;  sw              1    wreg     unsigned char 
 13998 ;;  command         1    2[BANK0 ] unsigned char 
 13999 ;; Auto vars:     Size  Location     Type
 14000 ;;  sw              1    3[BANK0 ] unsigned char 
 14001 ;; Return value:  Size  Location     Type
 14002 ;;		None               void
 14003 ;; Registers used:
 14004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14005 ;; Tracked objects:
 14006 ;;		On entry : 0/0
 14007 ;;		On exit  : 0/0
 14008 ;;		Unchanged: 0/0
 14009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14010 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14011 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14013 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14014 ;;Total ram usage:        2 bytes
 14015 ;; Hardware stack levels used:    1
 14016 ;; Hardware stack levels required when called:    6
 14017 ;; This function calls:
 14018 ;;		_SwPointSelect
 14019 ;; This function is called by:
 14020 ;;		_DlyOff_Main
 14021 ;;		_setDimmerLights_ERROR
 14022 ;;		_setControl_Lights_Table
 14023 ;;		_setRFSW_Control
 14024 ;; This function uses a non-reentrant model
 14025 ;;
 14026                           
 14027                           
 14028                           ;psect for function _setSw_Status
 14029  1EE0                     _setSw_Status:	
 14030                           
 14031                           ;incstack = 0
 14032                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14033                           ;setSw_Status@sw stored from wreg
 14034  1EE0  0020               	movlb	0	; select bank0
 14035  1EE1  00A3               	movwf	setSw_Status@sw
 14036                           
 14037                           ;Switch_B1.c: 112: SwPointSelect(sw);
 14038  1EE2  0823               	movf	setSw_Status@sw,w
 14039  1EE3  319E  264A         	fcall	_SwPointSelect
 14040                           
 14041                           ;Switch_B1.c: 113: Sw->Status = command;
 14042  1EE5  0020               	movlb	0	; select bank0
 14043  1EE6  086C               	movf	_Sw,w
 14044  1EE7  0086               	movwf	6
 14045  1EE8  3001               	movlw	1	; select bank2/3
 14046  1EE9  0087               	movwf	7
 14047  1EEA  0822               	movf	setSw_Status@command,w
 14048  1EEB  1301               	bcf	1,6
 14049  1EEC  1D03               	skipz
 14050  1EED  1701               	bsf	1,6
 14051  1EEE  0008               	return
 14052  1EEF                     __end_of_setSw_Status:	
 14053                           
 14054                           	psect	text93
 14055  1E4A                     __ptext93:	
 14056 ;; *************** function _SwPointSelect *****************
 14057 ;; Defined at:
 14058 ;;		line 21 in file "../src/Switch_B1.c"
 14059 ;; Parameters:    Size  Location     Type
 14060 ;;  sw              1    wreg     unsigned char 
 14061 ;; Auto vars:     Size  Location     Type
 14062 ;;  sw              1    1[BANK0 ] unsigned char 
 14063 ;; Return value:  Size  Location     Type
 14064 ;;		None               void
 14065 ;; Registers used:
 14066 ;;		wreg
 14067 ;; Tracked objects:
 14068 ;;		On entry : 0/0
 14069 ;;		On exit  : 0/0
 14070 ;;		Unchanged: 0/0
 14071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14075 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14076 ;;Total ram usage:        2 bytes
 14077 ;; Hardware stack levels used:    1
 14078 ;; Hardware stack levels required when called:    5
 14079 ;; This function calls:
 14080 ;;		Nothing
 14081 ;; This function is called by:
 14082 ;;		_setSw_Enable
 14083 ;;		_setSw_Status
 14084 ;;		_setSw_Main
 14085 ;;		_Sw_Detect
 14086 ;; This function uses a non-reentrant model
 14087 ;;
 14088                           
 14089                           
 14090                           ;psect for function _SwPointSelect
 14091  1E4A                     _SwPointSelect:	
 14092                           
 14093                           ;incstack = 0
 14094                           ; Regs used in _SwPointSelect: [wreg]
 14095                           ;SwPointSelect@sw stored from wreg
 14096  1E4A  0020               	movlb	0	; select bank0
 14097  1E4B  00A1               	movwf	SwPointSelect@sw
 14098                           
 14099                           ;Switch_B1.c: 24: if (sw == 1) {
 14100  1E4C  0821               	movf	SwPointSelect@sw,w
 14101  1E4D  3A01               	xorlw	1
 14102  1E4E  1D03               	skipz
 14103  1E4F  0008               	return
 14104                           
 14105                           ;Switch_B1.c: 25: Sw = &Sw1;
 14106  1E50  30CF               	movlw	_Sw1& (0+255)
 14107  1E51  00A0               	movwf	??_SwPointSelect
 14108  1E52  0820               	movf	??_SwPointSelect,w
 14109  1E53  00EC               	movwf	_Sw
 14110  1E54  0008               	return
 14111  1E55                     __end_of_SwPointSelect:	
 14112                           
 14113                           	psect	text94
 14114  0C27                     __ptext94:	
 14115 ;; *************** function _setRF_DimmerLights *****************
 14116 ;; Defined at:
 14117 ;;		line 449 in file "../src/RF_Control_B1.c"
 14118 ;; Parameters:    Size  Location     Type
 14119 ;;  lights          1    wreg     unsigned char 
 14120 ;;  on              1   61[BANK0 ] unsigned char 
 14121 ;; Auto vars:     Size  Location     Type
 14122 ;;  lights          1   65[BANK0 ] unsigned char 
 14123 ;;  status          1   64[BANK0 ] unsigned char 
 14124 ;; Return value:  Size  Location     Type
 14125 ;;		None               void
 14126 ;; Registers used:
 14127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14128 ;; Tracked objects:
 14129 ;;		On entry : 0/0
 14130 ;;		On exit  : 0/0
 14131 ;;		Unchanged: 0/0
 14132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14133 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14134 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14135 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;Total ram usage:        5 bytes
 14138 ;; Hardware stack levels used:    1
 14139 ;; Hardware stack levels required when called:    8
 14140 ;; This function calls:
 14141 ;;		_setPercentValue
 14142 ;; This function is called by:
 14143 ;;		_DlyOff_Main
 14144 ;;		_setDimmerLights_Adj
 14145 ;;		_setRFSW_Control
 14146 ;;		_Sw_DimmerOnFunc
 14147 ;;		_Sw_DimmerOffFunc
 14148 ;; This function uses a non-reentrant model
 14149 ;;
 14150                           
 14151                           
 14152                           ;psect for function _setRF_DimmerLights
 14153  0C27                     _setRF_DimmerLights:	
 14154                           
 14155                           ;incstack = 0
 14156                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14157                           ;setRF_DimmerLights@lights stored from wreg
 14158  0C27  0020               	movlb	0	; select bank0
 14159  0C28  00E1               	movwf	setRF_DimmerLights@lights
 14160                           
 14161                           ;RF_Control_B1.c: 450: char status;
 14162                           ;RF_Control_B1.c: 451: status = 1;
 14163  0C29  01E0               	clrf	setRF_DimmerLights@status
 14164  0C2A  0AE0               	incf	setRF_DimmerLights@status,f
 14165                           
 14166                           ;RF_Control_B1.c: 452: status <<= (lights - 1);
 14167  0C2B  0861               	movf	setRF_DimmerLights@lights,w
 14168  0C2C  3EFF               	addlw	-1
 14169  0C2D  0A89               	incf	9,f
 14170  0C2E  2C31               	goto	u7530
 14171  0C2F                     u7535:	
 14172  0C2F  1003               	clrc
 14173  0C30  0DE0               	rlf	setRF_DimmerLights@status,f
 14174  0C31                     u7530:	
 14175  0C31  3EFF               	addlw	-1
 14176  0C32  1D03               	skipz
 14177  0C33  2C2F               	goto	u7535
 14178                           
 14179                           ;RF_Control_B1.c: 453: product->Data[11]=lights;
 14180  0C34  0861               	movf	setRF_DimmerLights@lights,w
 14181  0C35  00DE               	movwf	??_setRF_DimmerLights
 14182  0C36  086D               	movf	_product,w
 14183  0C37  3E0B               	addlw	11
 14184  0C38  0086               	movwf	6
 14185  0C39  3001               	movlw	1	; select bank2/3
 14186  0C3A  0087               	movwf	7
 14187  0C3B  085E               	movf	??_setRF_DimmerLights,w
 14188  0C3C  0081               	movwf	1
 14189                           
 14190                           ;RF_Control_B1.c: 456: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 14191  0C3D  3020               	movlw	32
 14192  0C3E  3195  25EB  318C   	fcall	_setPercentValue
 14193  0C41  0020               	movlb	0	; select bank0
 14194  0C42  00DE               	movwf	??_setRF_DimmerLights
 14195  0C43  0861               	movf	setRF_DimmerLights@lights,w
 14196  0C44  3E14               	addlw	20
 14197  0C45  076D               	addwf	_product,w
 14198  0C46  00DF               	movwf	??_setRF_DimmerLights+1
 14199  0C47  085F               	movf	??_setRF_DimmerLights+1,w
 14200  0C48  0086               	movwf	6
 14201  0C49  3001               	movlw	1	; select bank2/3
 14202  0C4A  0087               	movwf	7
 14203  0C4B  085E               	movf	??_setRF_DimmerLights,w
 14204  0C4C  0081               	movwf	1
 14205                           
 14206                           ;RF_Control_B1.c: 459: product->Data[9]=product->Data[20 + lights];
 14207  0C4D  0861               	movf	setRF_DimmerLights@lights,w
 14208  0C4E  3E14               	addlw	20
 14209  0C4F  076D               	addwf	_product,w
 14210  0C50  00DE               	movwf	??_setRF_DimmerLights
 14211  0C51  085E               	movf	??_setRF_DimmerLights,w
 14212  0C52  0086               	movwf	6
 14213  0C53  3001               	movlw	1	; select bank2/3
 14214  0C54  0087               	movwf	7
 14215  0C55  0801               	movf	1,w
 14216  0C56  00DF               	movwf	??_setRF_DimmerLights+1
 14217  0C57  086D               	movf	_product,w
 14218  0C58  3E09               	addlw	9
 14219  0C59  0086               	movwf	6
 14220  0C5A  3001               	movlw	1	; select bank2/3
 14221  0C5B  0087               	movwf	7
 14222  0C5C  085F               	movf	??_setRF_DimmerLights+1,w
 14223  0C5D  0081               	movwf	1
 14224                           
 14225                           ;RF_Control_B1.c: 460: product->Data[17]=product->Data[26 + lights];
 14226  0C5E  0861               	movf	setRF_DimmerLights@lights,w
 14227  0C5F  3E1A               	addlw	26
 14228  0C60  076D               	addwf	_product,w
 14229  0C61  00DE               	movwf	??_setRF_DimmerLights
 14230  0C62  085E               	movf	??_setRF_DimmerLights,w
 14231  0C63  0086               	movwf	6
 14232  0C64  3001               	movlw	1	; select bank2/3
 14233  0C65  0087               	movwf	7
 14234  0C66  0801               	movf	1,w
 14235  0C67  00DF               	movwf	??_setRF_DimmerLights+1
 14236  0C68  086D               	movf	_product,w
 14237  0C69  3E11               	addlw	17
 14238  0C6A  0086               	movwf	6
 14239  0C6B  3001               	movlw	1	; select bank2/3
 14240  0C6C  0087               	movwf	7
 14241  0C6D  085F               	movf	??_setRF_DimmerLights+1,w
 14242  0C6E  0081               	movwf	1
 14243                           
 14244                           ;RF_Control_B1.c: 461: if (on == 1) {
 14245  0C6F  085D               	movf	setRF_DimmerLights@on,w
 14246  0C70  3A01               	xorlw	1
 14247  0C71  1D03               	skipz
 14248  0C72  2C83               	goto	l7841
 14249                           
 14250                           ;RF_Control_B1.c: 462: product->Data[15]=(product->Data[15] | status);
 14251  0C73  086D               	movf	_product,w
 14252  0C74  3E0F               	addlw	15
 14253  0C75  0086               	movwf	6
 14254  0C76  3001               	movlw	1	; select bank2/3
 14255  0C77  0087               	movwf	7
 14256  0C78  0801               	movf	1,w
 14257  0C79  0460               	iorwf	setRF_DimmerLights@status,w
 14258  0C7A  00DE               	movwf	??_setRF_DimmerLights
 14259  0C7B  086D               	movf	_product,w
 14260  0C7C  3E0F               	addlw	15
 14261  0C7D  0086               	movwf	6
 14262  0C7E  3001               	movlw	1	; select bank2/3
 14263  0C7F  0087               	movwf	7
 14264  0C80  085E               	movf	??_setRF_DimmerLights,w
 14265  0C81  0081               	movwf	1
 14266                           
 14267                           ;RF_Control_B1.c: 463: } else {
 14268  0C82  0008               	return
 14269  0C83                     l7841:	
 14270                           
 14271                           ;RF_Control_B1.c: 464: product->Data[15]=(product->Data[15]&(~status));
 14272  0C83  086D               	movf	_product,w
 14273  0C84  3E0F               	addlw	15
 14274  0C85  0086               	movwf	6
 14275  0C86  3001               	movlw	1	; select bank2/3
 14276  0C87  0087               	movwf	7
 14277  0C88  0960               	comf	setRF_DimmerLights@status,w
 14278  0C89  0501               	andwf	1,w
 14279  0C8A  00DE               	movwf	??_setRF_DimmerLights
 14280  0C8B  086D               	movf	_product,w
 14281  0C8C  3E0F               	addlw	15
 14282  0C8D  0086               	movwf	6
 14283  0C8E  3001               	movlw	1	; select bank2/3
 14284  0C8F  0087               	movwf	7
 14285  0C90  085E               	movf	??_setRF_DimmerLights,w
 14286  0C91  0081               	movwf	1
 14287  0C92  0008               	return
 14288  0C93                     __end_of_setRF_DimmerLights:	
 14289                           
 14290                           	psect	text95
 14291  15EB                     __ptext95:	
 14292 ;; *************** function _setPercentValue *****************
 14293 ;; Defined at:
 14294 ;;		line 777 in file "../src/Dimmer_B1.c"
 14295 ;; Parameters:    Size  Location     Type
 14296 ;;  value           1    wreg     unsigned char 
 14297 ;; Auto vars:     Size  Location     Type
 14298 ;;  value           1   57[BANK0 ] unsigned char 
 14299 ;;  i               3   58[BANK0 ] float 
 14300 ;; Return value:  Size  Location     Type
 14301 ;;                  1    wreg      unsigned char 
 14302 ;; Registers used:
 14303 ;;		wreg, status,2, status,0, pclath, cstack
 14304 ;; Tracked objects:
 14305 ;;		On entry : 0/0
 14306 ;;		On exit  : 0/0
 14307 ;;		Unchanged: 0/0
 14308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14310 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14312 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14313 ;;Total ram usage:        4 bytes
 14314 ;; Hardware stack levels used:    1
 14315 ;; Hardware stack levels required when called:    7
 14316 ;; This function calls:
 14317 ;;		___awtoft
 14318 ;;		___ftdiv
 14319 ;;		___fttol
 14320 ;; This function is called by:
 14321 ;;		_Flash_Memory_Initialization
 14322 ;;		_setRF_DimmerLights
 14323 ;; This function uses a non-reentrant model
 14324 ;;
 14325                           
 14326                           
 14327                           ;psect for function _setPercentValue
 14328  15EB                     _setPercentValue:	
 14329                           
 14330                           ;incstack = 0
 14331                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 14332                           ;setPercentValue@value stored from wreg
 14333  15EB  0020               	movlb	0	; select bank0
 14334  15EC  00D9               	movwf	setPercentValue@value
 14335                           
 14336                           ;Dimmer_B1.c: 779: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 14337  15ED  3000               	movlw	0
 14338  15EE  00DA               	movwf	setPercentValue@i
 14339  15EF  30E0               	movlw	224
 14340  15F0  00DB               	movwf	setPercentValue@i+1
 14341  15F1  3041               	movlw	65
 14342  15F2  00DC               	movwf	setPercentValue@i+2
 14343                           
 14344                           ;Dimmer_B1.c: 780: i /= 100;
 14345  15F3  3000               	movlw	0
 14346  15F4  00AE               	movwf	___ftdiv@f2
 14347  15F5  30C8               	movlw	200
 14348  15F6  00AF               	movwf	___ftdiv@f2+1
 14349  15F7  3042               	movlw	66
 14350  15F8  00B0               	movwf	___ftdiv@f2+2
 14351  15F9  085A               	movf	setPercentValue@i,w
 14352  15FA  00B1               	movwf	___ftdiv@f1
 14353  15FB  085B               	movf	setPercentValue@i+1,w
 14354  15FC  00B2               	movwf	___ftdiv@f1+1
 14355  15FD  085C               	movf	setPercentValue@i+2,w
 14356  15FE  00B3               	movwf	___ftdiv@f1+2
 14357  15FF  3187  2728  3195   	fcall	___ftdiv
 14358  1602  0020               	movlb	0	; select bank0
 14359  1603  082E               	movf	?___ftdiv,w
 14360  1604  00DA               	movwf	setPercentValue@i
 14361  1605  082F               	movf	?___ftdiv+1,w
 14362  1606  00DB               	movwf	setPercentValue@i+1
 14363  1607  0830               	movf	?___ftdiv+2,w
 14364  1608  00DC               	movwf	setPercentValue@i+2
 14365                           
 14366                           ;Dimmer_B1.c: 781: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 14367  1609  0859               	movf	setPercentValue@value,w
 14368  160A  3EE0               	addlw	224
 14369  160B  00A8               	movwf	___awtoft@c
 14370  160C  30FF               	movlw	255
 14371  160D  1803               	skipnc
 14372  160E  3000               	movlw	0
 14373  160F  00A9               	movwf	___awtoft@c+1
 14374  1610  3191  21B5  3195   	fcall	___awtoft
 14375  1613  0020               	movlb	0	; select bank0
 14376  1614  0828               	movf	?___awtoft,w
 14377  1615  00B1               	movwf	___ftdiv@f1
 14378  1616  0829               	movf	?___awtoft+1,w
 14379  1617  00B2               	movwf	___ftdiv@f1+1
 14380  1618  082A               	movf	?___awtoft+2,w
 14381  1619  00B3               	movwf	___ftdiv@f1+2
 14382  161A  085A               	movf	setPercentValue@i,w
 14383  161B  00AE               	movwf	___ftdiv@f2
 14384  161C  085B               	movf	setPercentValue@i+1,w
 14385  161D  00AF               	movwf	___ftdiv@f2+1
 14386  161E  085C               	movf	setPercentValue@i+2,w
 14387  161F  00B0               	movwf	___ftdiv@f2+2
 14388  1620  3187  2728  3195   	fcall	___ftdiv
 14389  1623  0020               	movlb	0	; select bank0
 14390  1624  082E               	movf	?___ftdiv,w
 14391  1625  00CB               	movwf	___fttol@f1
 14392  1626  082F               	movf	?___ftdiv+1,w
 14393  1627  00CC               	movwf	___fttol@f1+1
 14394  1628  0830               	movf	?___ftdiv+2,w
 14395  1629  00CD               	movwf	___fttol@f1+2
 14396  162A  318E  26EE         	fcall	___fttol
 14397  162C  0020               	movlb	0	; select bank0
 14398  162D  034B               	decf	?___fttol,w
 14399  162E  3AFF               	xorlw	255
 14400  162F  3E64               	addlw	100
 14401  1630  0008               	return
 14402  1631                     __end_of_setPercentValue:	
 14403                           
 14404                           	psect	text96
 14405  0EEE                     __ptext96:	
 14406 ;; *************** function ___fttol *****************
 14407 ;; Defined at:
 14408 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14409 ;; Parameters:    Size  Location     Type
 14410 ;;  f1              3   43[BANK0 ] float 
 14411 ;; Auto vars:     Size  Location     Type
 14412 ;;  lval            4   52[BANK0 ] unsigned long 
 14413 ;;  exp1            1   56[BANK0 ] unsigned char 
 14414 ;;  sign1           1   51[BANK0 ] unsigned char 
 14415 ;; Return value:  Size  Location     Type
 14416 ;;                  4   43[BANK0 ] long 
 14417 ;; Registers used:
 14418 ;;		wreg, status,2, status,0
 14419 ;; Tracked objects:
 14420 ;;		On entry : 0/0
 14421 ;;		On exit  : 0/0
 14422 ;;		Unchanged: 0/0
 14423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14424 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14425 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14426 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14427 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14428 ;;Total ram usage:       14 bytes
 14429 ;; Hardware stack levels used:    1
 14430 ;; Hardware stack levels required when called:    5
 14431 ;; This function calls:
 14432 ;;		Nothing
 14433 ;; This function is called by:
 14434 ;;		_getPercentValue
 14435 ;;		_setPercentValue
 14436 ;; This function uses a non-reentrant model
 14437 ;;
 14438                           
 14439                           
 14440                           ;psect for function ___fttol
 14441  0EEE                     ___fttol:	
 14442                           
 14443                           ;incstack = 0
 14444                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14445  0EEE  0020               	movlb	0	; select bank0
 14446  0EEF  084B               	movf	___fttol@f1,w
 14447  0EF0  00CF               	movwf	??___fttol
 14448  0EF1  084C               	movf	___fttol@f1+1,w
 14449  0EF2  00D0               	movwf	??___fttol+1
 14450  0EF3  084D               	movf	___fttol@f1+2,w
 14451  0EF4  00D1               	movwf	??___fttol+2
 14452  0EF5  1003               	clrc
 14453  0EF6  0D50               	rlf	??___fttol+1,w
 14454  0EF7  0D51               	rlf	??___fttol+2,w
 14455  0EF8  00D2               	movwf	??___fttol+3
 14456  0EF9  0852               	movf	??___fttol+3,w
 14457  0EFA  00D8               	movwf	___fttol@exp1
 14458  0EFB  08D8               	movf	___fttol@exp1,f
 14459  0EFC  1D03               	skipz
 14460  0EFD  2F07               	goto	l5539
 14461  0EFE  3000               	movlw	0
 14462  0EFF  00CE               	movwf	?___fttol+3
 14463  0F00  3000               	movlw	0
 14464  0F01  00CD               	movwf	?___fttol+2
 14465  0F02  3000               	movlw	0
 14466  0F03  00CC               	movwf	?___fttol+1
 14467  0F04  3000               	movlw	0
 14468  0F05  00CB               	movwf	?___fttol
 14469  0F06  0008               	return
 14470  0F07                     l5539:	
 14471  0F07  084B               	movf	___fttol@f1,w
 14472  0F08  00CF               	movwf	??___fttol
 14473  0F09  084C               	movf	___fttol@f1+1,w
 14474  0F0A  00D0               	movwf	??___fttol+1
 14475  0F0B  084D               	movf	___fttol@f1+2,w
 14476  0F0C  00D1               	movwf	??___fttol+2
 14477  0F0D  3017               	movlw	23
 14478  0F0E                     u4205:	
 14479  0F0E  36D1               	lsrf	??___fttol+2,f
 14480  0F0F  0CD0               	rrf	??___fttol+1,f
 14481  0F10  0CCF               	rrf	??___fttol,f
 14482  0F11  0B89               	decfsz	9,f
 14483  0F12  2F0E               	goto	u4205
 14484  0F13  084F               	movf	??___fttol,w
 14485  0F14  00D2               	movwf	??___fttol+3
 14486  0F15  0852               	movf	??___fttol+3,w
 14487  0F16  00D3               	movwf	___fttol@sign1
 14488  0F17  17CC               	bsf	___fttol@f1+1,7
 14489  0F18  30FF               	movlw	255
 14490  0F19  05CB               	andwf	___fttol@f1,f
 14491  0F1A  30FF               	movlw	255
 14492  0F1B  05CC               	andwf	___fttol@f1+1,f
 14493  0F1C  3000               	movlw	0
 14494  0F1D  05CD               	andwf	___fttol@f1+2,f
 14495  0F1E  084B               	movf	___fttol@f1,w
 14496  0F1F  00D4               	movwf	___fttol@lval
 14497  0F20  084C               	movf	___fttol@f1+1,w
 14498  0F21  00D5               	movwf	___fttol@lval+1
 14499  0F22  084D               	movf	___fttol@f1+2,w
 14500  0F23  00D6               	movwf	___fttol@lval+2
 14501  0F24  01D7               	clrf	___fttol@lval+3
 14502  0F25  308E               	movlw	142
 14503  0F26  02D8               	subwf	___fttol@exp1,f
 14504  0F27  1FD8               	btfss	___fttol@exp1,7
 14505  0F28  2F45               	goto	l5559
 14506  0F29  0858               	movf	___fttol@exp1,w
 14507  0F2A  3A80               	xorlw	128
 14508  0F2B  3E8F               	addlw	143
 14509  0F2C  1803               	skipnc
 14510  0F2D  2F37               	goto	l5557
 14511  0F2E  3000               	movlw	0
 14512  0F2F  00CE               	movwf	?___fttol+3
 14513  0F30  3000               	movlw	0
 14514  0F31  00CD               	movwf	?___fttol+2
 14515  0F32  3000               	movlw	0
 14516  0F33  00CC               	movwf	?___fttol+1
 14517  0F34  3000               	movlw	0
 14518  0F35  00CB               	movwf	?___fttol
 14519  0F36  0008               	return
 14520  0F37                     l5557:	
 14521  0F37  3001               	movlw	1
 14522  0F38                     u4235:	
 14523  0F38  36D7               	lsrf	___fttol@lval+3,f
 14524  0F39  0CD6               	rrf	___fttol@lval+2,f
 14525  0F3A  0CD5               	rrf	___fttol@lval+1,f
 14526  0F3B  0CD4               	rrf	___fttol@lval,f
 14527  0F3C  0B89               	decfsz	9,f
 14528  0F3D  2F38               	goto	u4235
 14529  0F3E  3001               	movlw	1
 14530  0F3F  00CF               	movwf	??___fttol
 14531  0F40  084F               	movf	??___fttol,w
 14532  0F41  07D8               	addwf	___fttol@exp1,f
 14533  0F42  1903               	btfsc	3,2
 14534  0F43  2F5E               	goto	l5569
 14535  0F44  2F37               	goto	l5557
 14536  0F45                     l5559:	
 14537  0F45  3018               	movlw	24
 14538  0F46  0258               	subwf	___fttol@exp1,w
 14539  0F47  1C03               	skipc
 14540  0F48  2F5B               	goto	l5567
 14541  0F49  3000               	movlw	0
 14542  0F4A  00CE               	movwf	?___fttol+3
 14543  0F4B  3000               	movlw	0
 14544  0F4C  00CD               	movwf	?___fttol+2
 14545  0F4D  3000               	movlw	0
 14546  0F4E  00CC               	movwf	?___fttol+1
 14547  0F4F  3000               	movlw	0
 14548  0F50  00CB               	movwf	?___fttol
 14549  0F51  0008               	return
 14550  0F52                     l5565:	
 14551  0F52  3001               	movlw	1
 14552  0F53                     u4265:	
 14553  0F53  35D4               	lslf	___fttol@lval,f
 14554  0F54  0DD5               	rlf	___fttol@lval+1,f
 14555  0F55  0DD6               	rlf	___fttol@lval+2,f
 14556  0F56  0DD7               	rlf	___fttol@lval+3,f
 14557  0F57  0B89               	decfsz	9,f
 14558  0F58  2F53               	goto	u4265
 14559  0F59  3001               	movlw	1
 14560  0F5A  02D8               	subwf	___fttol@exp1,f
 14561  0F5B                     l5567:	
 14562  0F5B  08D8               	movf	___fttol@exp1,f
 14563  0F5C  1D03               	skipz
 14564  0F5D  2F52               	goto	l5565
 14565  0F5E                     l5569:	
 14566  0F5E  0853               	movf	___fttol@sign1,w
 14567  0F5F  1903               	btfsc	3,2
 14568  0F60  2F6C               	goto	l5573
 14569  0F61  09D4               	comf	___fttol@lval,f
 14570  0F62  09D5               	comf	___fttol@lval+1,f
 14571  0F63  09D6               	comf	___fttol@lval+2,f
 14572  0F64  09D7               	comf	___fttol@lval+3,f
 14573  0F65  0AD4               	incf	___fttol@lval,f
 14574  0F66  1903               	skipnz
 14575  0F67  0AD5               	incf	___fttol@lval+1,f
 14576  0F68  1903               	skipnz
 14577  0F69  0AD6               	incf	___fttol@lval+2,f
 14578  0F6A  1903               	skipnz
 14579  0F6B  0AD7               	incf	___fttol@lval+3,f
 14580  0F6C                     l5573:	
 14581  0F6C  0857               	movf	___fttol@lval+3,w
 14582  0F6D  00CE               	movwf	?___fttol+3
 14583  0F6E  0856               	movf	___fttol@lval+2,w
 14584  0F6F  00CD               	movwf	?___fttol+2
 14585  0F70  0855               	movf	___fttol@lval+1,w
 14586  0F71  00CC               	movwf	?___fttol+1
 14587  0F72  0854               	movf	___fttol@lval,w
 14588  0F73  00CB               	movwf	?___fttol
 14589  0F74  0008               	return
 14590  0F75                     __end_of___fttol:	
 14591                           
 14592                           	psect	text97
 14593  0728                     __ptext97:	
 14594 ;; *************** function ___ftdiv *****************
 14595 ;; Defined at:
 14596 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14597 ;; Parameters:    Size  Location     Type
 14598 ;;  f2              3   14[BANK0 ] float 
 14599 ;;  f1              3   17[BANK0 ] float 
 14600 ;; Auto vars:     Size  Location     Type
 14601 ;;  f3              3   25[BANK0 ] float 
 14602 ;;  sign            1   29[BANK0 ] unsigned char 
 14603 ;;  exp             1   28[BANK0 ] unsigned char 
 14604 ;;  cntr            1   24[BANK0 ] unsigned char 
 14605 ;; Return value:  Size  Location     Type
 14606 ;;                  3   14[BANK0 ] float 
 14607 ;; Registers used:
 14608 ;;		wreg, status,2, status,0, pclath, cstack
 14609 ;; Tracked objects:
 14610 ;;		On entry : 0/0
 14611 ;;		On exit  : 0/0
 14612 ;;		Unchanged: 0/0
 14613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14614 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14615 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14616 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14617 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14618 ;;Total ram usage:       16 bytes
 14619 ;; Hardware stack levels used:    1
 14620 ;; Hardware stack levels required when called:    6
 14621 ;; This function calls:
 14622 ;;		___ftpack
 14623 ;; This function is called by:
 14624 ;;		_getPercentValue
 14625 ;;		_setPercentValue
 14626 ;; This function uses a non-reentrant model
 14627 ;;
 14628                           
 14629                           
 14630                           ;psect for function ___ftdiv
 14631  0728                     ___ftdiv:	
 14632                           
 14633                           ;incstack = 0
 14634                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14635  0728  0020               	movlb	0	; select bank0
 14636  0729  0831               	movf	___ftdiv@f1,w
 14637  072A  00B4               	movwf	??___ftdiv
 14638  072B  0832               	movf	___ftdiv@f1+1,w
 14639  072C  00B5               	movwf	??___ftdiv+1
 14640  072D  0833               	movf	___ftdiv@f1+2,w
 14641  072E  00B6               	movwf	??___ftdiv+2
 14642  072F  1003               	clrc
 14643  0730  0D35               	rlf	??___ftdiv+1,w
 14644  0731  0D36               	rlf	??___ftdiv+2,w
 14645  0732  00B7               	movwf	??___ftdiv+3
 14646  0733  0837               	movf	??___ftdiv+3,w
 14647  0734  00BC               	movwf	___ftdiv@exp
 14648  0735  08BC               	movf	___ftdiv@exp,f
 14649  0736  1D03               	skipz
 14650  0737  2F3F               	goto	l5447
 14651  0738  3000               	movlw	0
 14652  0739  00AE               	movwf	?___ftdiv
 14653  073A  3000               	movlw	0
 14654  073B  00AF               	movwf	?___ftdiv+1
 14655  073C  3000               	movlw	0
 14656  073D  00B0               	movwf	?___ftdiv+2
 14657  073E  0008               	return
 14658  073F                     l5447:	
 14659  073F  082E               	movf	___ftdiv@f2,w
 14660  0740  00B4               	movwf	??___ftdiv
 14661  0741  082F               	movf	___ftdiv@f2+1,w
 14662  0742  00B5               	movwf	??___ftdiv+1
 14663  0743  0830               	movf	___ftdiv@f2+2,w
 14664  0744  00B6               	movwf	??___ftdiv+2
 14665  0745  1003               	clrc
 14666  0746  0D35               	rlf	??___ftdiv+1,w
 14667  0747  0D36               	rlf	??___ftdiv+2,w
 14668  0748  00B7               	movwf	??___ftdiv+3
 14669  0749  0837               	movf	??___ftdiv+3,w
 14670  074A  00BD               	movwf	___ftdiv@sign
 14671  074B  08BD               	movf	___ftdiv@sign,f
 14672  074C  1D03               	skipz
 14673  074D  2F55               	goto	l5453
 14674  074E  3000               	movlw	0
 14675  074F  00AE               	movwf	?___ftdiv
 14676  0750  3000               	movlw	0
 14677  0751  00AF               	movwf	?___ftdiv+1
 14678  0752  3000               	movlw	0
 14679  0753  00B0               	movwf	?___ftdiv+2
 14680  0754  0008               	return
 14681  0755                     l5453:	
 14682  0755  3000               	movlw	0
 14683  0756  00B9               	movwf	___ftdiv@f3
 14684  0757  3000               	movlw	0
 14685  0758  00BA               	movwf	___ftdiv@f3+1
 14686  0759  3000               	movlw	0
 14687  075A  00BB               	movwf	___ftdiv@f3+2
 14688  075B  3089               	movlw	137
 14689  075C  073D               	addwf	___ftdiv@sign,w
 14690  075D  00B4               	movwf	??___ftdiv
 14691  075E  0834               	movf	??___ftdiv,w
 14692  075F  02BC               	subwf	___ftdiv@exp,f
 14693  0760  0831               	movf	___ftdiv@f1,w
 14694  0761  00B4               	movwf	??___ftdiv
 14695  0762  0832               	movf	___ftdiv@f1+1,w
 14696  0763  00B5               	movwf	??___ftdiv+1
 14697  0764  0833               	movf	___ftdiv@f1+2,w
 14698  0765  00B6               	movwf	??___ftdiv+2
 14699  0766  3010               	movlw	16
 14700  0767                     u4015:	
 14701  0767  36B6               	lsrf	??___ftdiv+2,f
 14702  0768  0CB5               	rrf	??___ftdiv+1,f
 14703  0769  0CB4               	rrf	??___ftdiv,f
 14704  076A  0B89               	decfsz	9,f
 14705  076B  2F67               	goto	u4015
 14706  076C  0834               	movf	??___ftdiv,w
 14707  076D  00B7               	movwf	??___ftdiv+3
 14708  076E  0837               	movf	??___ftdiv+3,w
 14709  076F  00BD               	movwf	___ftdiv@sign
 14710  0770  082E               	movf	___ftdiv@f2,w
 14711  0771  00B4               	movwf	??___ftdiv
 14712  0772  082F               	movf	___ftdiv@f2+1,w
 14713  0773  00B5               	movwf	??___ftdiv+1
 14714  0774  0830               	movf	___ftdiv@f2+2,w
 14715  0775  00B6               	movwf	??___ftdiv+2
 14716  0776  3010               	movlw	16
 14717  0777                     u4025:	
 14718  0777  36B6               	lsrf	??___ftdiv+2,f
 14719  0778  0CB5               	rrf	??___ftdiv+1,f
 14720  0779  0CB4               	rrf	??___ftdiv,f
 14721  077A  0B89               	decfsz	9,f
 14722  077B  2F77               	goto	u4025
 14723  077C  0834               	movf	??___ftdiv,w
 14724  077D  00B7               	movwf	??___ftdiv+3
 14725  077E  0837               	movf	??___ftdiv+3,w
 14726  077F  06BD               	xorwf	___ftdiv@sign,f
 14727  0780  3080               	movlw	128
 14728  0781  00B4               	movwf	??___ftdiv
 14729  0782  0834               	movf	??___ftdiv,w
 14730  0783  05BD               	andwf	___ftdiv@sign,f
 14731  0784  17B2               	bsf	___ftdiv@f1+1,7
 14732  0785  30FF               	movlw	255
 14733  0786  05B1               	andwf	___ftdiv@f1,f
 14734  0787  30FF               	movlw	255
 14735  0788  05B2               	andwf	___ftdiv@f1+1,f
 14736  0789  3000               	movlw	0
 14737  078A  05B3               	andwf	___ftdiv@f1+2,f
 14738  078B  17AF               	bsf	___ftdiv@f2+1,7
 14739  078C  30FF               	movlw	255
 14740  078D  05AE               	andwf	___ftdiv@f2,f
 14741  078E  30FF               	movlw	255
 14742  078F  05AF               	andwf	___ftdiv@f2+1,f
 14743  0790  3000               	movlw	0
 14744  0791  05B0               	andwf	___ftdiv@f2+2,f
 14745  0792  3018               	movlw	24
 14746  0793  00B4               	movwf	??___ftdiv
 14747  0794  0834               	movf	??___ftdiv,w
 14748  0795  00B8               	movwf	___ftdiv@cntr
 14749  0796                     l5467:	
 14750  0796  3001               	movlw	1
 14751  0797                     u4035:	
 14752  0797  35B9               	lslf	___ftdiv@f3,f
 14753  0798  0DBA               	rlf	___ftdiv@f3+1,f
 14754  0799  0DBB               	rlf	___ftdiv@f3+2,f
 14755  079A  0B89               	decfsz	9,f
 14756  079B  2F97               	goto	u4035
 14757  079C  0830               	movf	___ftdiv@f2+2,w
 14758  079D  0233               	subwf	___ftdiv@f1+2,w
 14759  079E  1D03               	skipz
 14760  079F  2FA6               	goto	u4045
 14761  07A0  082F               	movf	___ftdiv@f2+1,w
 14762  07A1  0232               	subwf	___ftdiv@f1+1,w
 14763  07A2  1D03               	skipz
 14764  07A3  2FA6               	goto	u4045
 14765  07A4  082E               	movf	___ftdiv@f2,w
 14766  07A5  0231               	subwf	___ftdiv@f1,w
 14767  07A6                     u4045:	
 14768  07A6  1C03               	skipc
 14769  07A7  2FAF               	goto	l5475
 14770  07A8  082E               	movf	___ftdiv@f2,w
 14771  07A9  02B1               	subwf	___ftdiv@f1,f
 14772  07AA  082F               	movf	___ftdiv@f2+1,w
 14773  07AB  3BB2               	subwfb	___ftdiv@f1+1,f
 14774  07AC  0830               	movf	___ftdiv@f2+2,w
 14775  07AD  3BB3               	subwfb	___ftdiv@f1+2,f
 14776  07AE  1439               	bsf	___ftdiv@f3,0
 14777  07AF                     l5475:	
 14778  07AF  3001               	movlw	1
 14779  07B0                     u4055:	
 14780  07B0  35B1               	lslf	___ftdiv@f1,f
 14781  07B1  0DB2               	rlf	___ftdiv@f1+1,f
 14782  07B2  0DB3               	rlf	___ftdiv@f1+2,f
 14783  07B3  0B89               	decfsz	9,f
 14784  07B4  2FB0               	goto	u4055
 14785  07B5  3001               	movlw	1
 14786  07B6  02B8               	subwf	___ftdiv@cntr,f
 14787  07B7  1D03               	btfss	3,2
 14788  07B8  2F96               	goto	l5467
 14789  07B9  0839               	movf	___ftdiv@f3,w
 14790  07BA  00A0               	movwf	___ftpack@arg
 14791  07BB  083A               	movf	___ftdiv@f3+1,w
 14792  07BC  00A1               	movwf	___ftpack@arg+1
 14793  07BD  083B               	movf	___ftdiv@f3+2,w
 14794  07BE  00A2               	movwf	___ftpack@arg+2
 14795  07BF  083C               	movf	___ftdiv@exp,w
 14796  07C0  00B4               	movwf	??___ftdiv
 14797  07C1  0834               	movf	??___ftdiv,w
 14798  07C2  00A3               	movwf	___ftpack@exp
 14799  07C3  083D               	movf	___ftdiv@sign,w
 14800  07C4  00B5               	movwf	??___ftdiv+1
 14801  07C5  0835               	movf	??___ftdiv+1,w
 14802  07C6  00A4               	movwf	___ftpack@sign
 14803  07C7  318A  2226         	fcall	___ftpack
 14804  07C9  0020               	movlb	0	; select bank0
 14805  07CA  0820               	movf	?___ftpack,w
 14806  07CB  00AE               	movwf	?___ftdiv
 14807  07CC  0821               	movf	?___ftpack+1,w
 14808  07CD  00AF               	movwf	?___ftdiv+1
 14809  07CE  0822               	movf	?___ftpack+2,w
 14810  07CF  00B0               	movwf	?___ftdiv+2
 14811  07D0  0008               	return
 14812  07D1                     __end_of___ftdiv:	
 14813                           
 14814                           	psect	text98
 14815  11B5                     __ptext98:	
 14816 ;; *************** function ___awtoft *****************
 14817 ;; Defined at:
 14818 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14819 ;; Parameters:    Size  Location     Type
 14820 ;;  c               2    8[BANK0 ] int 
 14821 ;; Auto vars:     Size  Location     Type
 14822 ;;  sign            1   13[BANK0 ] unsigned char 
 14823 ;; Return value:  Size  Location     Type
 14824 ;;                  3    8[BANK0 ] float 
 14825 ;; Registers used:
 14826 ;;		wreg, status,2, status,0, pclath, cstack
 14827 ;; Tracked objects:
 14828 ;;		On entry : 0/0
 14829 ;;		On exit  : 0/0
 14830 ;;		Unchanged: 0/0
 14831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14832 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14834 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14835 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14836 ;;Total ram usage:        6 bytes
 14837 ;; Hardware stack levels used:    1
 14838 ;; Hardware stack levels required when called:    6
 14839 ;; This function calls:
 14840 ;;		___ftpack
 14841 ;; This function is called by:
 14842 ;;		_getPercentValue
 14843 ;;		_setPercentValue
 14844 ;; This function uses a non-reentrant model
 14845 ;;
 14846                           
 14847                           
 14848                           ;psect for function ___awtoft
 14849  11B5                     ___awtoft:	
 14850                           
 14851                           ;incstack = 0
 14852                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14853  11B5  0020               	movlb	0	; select bank0
 14854  11B6  01AD               	clrf	___awtoft@sign
 14855  11B7  1FA9               	btfss	___awtoft@c+1,7
 14856  11B8  29C0               	goto	l7657
 14857  11B9  09A8               	comf	___awtoft@c,f
 14858  11BA  09A9               	comf	___awtoft@c+1,f
 14859  11BB  0AA8               	incf	___awtoft@c,f
 14860  11BC  1903               	skipnz
 14861  11BD  0AA9               	incf	___awtoft@c+1,f
 14862  11BE  01AD               	clrf	___awtoft@sign
 14863  11BF  0AAD               	incf	___awtoft@sign,f
 14864  11C0                     l7657:	
 14865  11C0  0828               	movf	___awtoft@c,w
 14866  11C1  00A0               	movwf	___ftpack@arg
 14867  11C2  0829               	movf	___awtoft@c+1,w
 14868  11C3  00A1               	movwf	___ftpack@arg+1
 14869  11C4  01A2               	clrf	___ftpack@arg+2
 14870  11C5  308E               	movlw	142
 14871  11C6  00AB               	movwf	??___awtoft
 14872  11C7  082B               	movf	??___awtoft,w
 14873  11C8  00A3               	movwf	___ftpack@exp
 14874  11C9  082D               	movf	___awtoft@sign,w
 14875  11CA  00AC               	movwf	??___awtoft+1
 14876  11CB  082C               	movf	??___awtoft+1,w
 14877  11CC  00A4               	movwf	___ftpack@sign
 14878  11CD  318A  2226         	fcall	___ftpack
 14879  11CF  0020               	movlb	0	; select bank0
 14880  11D0  0820               	movf	?___ftpack,w
 14881  11D1  00A8               	movwf	?___awtoft
 14882  11D2  0821               	movf	?___ftpack+1,w
 14883  11D3  00A9               	movwf	?___awtoft+1
 14884  11D4  0822               	movf	?___ftpack+2,w
 14885  11D5  00AA               	movwf	?___awtoft+2
 14886  11D6  0008               	return
 14887  11D7                     __end_of___awtoft:	
 14888                           
 14889                           	psect	text99
 14890  0A26                     __ptext99:	
 14891 ;; *************** function ___ftpack *****************
 14892 ;; Defined at:
 14893 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14894 ;; Parameters:    Size  Location     Type
 14895 ;;  arg             3    0[BANK0 ] unsigned um
 14896 ;;  exp             1    3[BANK0 ] unsigned char 
 14897 ;;  sign            1    4[BANK0 ] unsigned char 
 14898 ;; Auto vars:     Size  Location     Type
 14899 ;;		None
 14900 ;; Return value:  Size  Location     Type
 14901 ;;                  3    0[BANK0 ] float 
 14902 ;; Registers used:
 14903 ;;		wreg, status,2, status,0
 14904 ;; Tracked objects:
 14905 ;;		On entry : 0/0
 14906 ;;		On exit  : 0/0
 14907 ;;		Unchanged: 0/0
 14908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14909 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14911 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14912 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14913 ;;Total ram usage:        8 bytes
 14914 ;; Hardware stack levels used:    1
 14915 ;; Hardware stack levels required when called:    5
 14916 ;; This function calls:
 14917 ;;		Nothing
 14918 ;; This function is called by:
 14919 ;;		___awtoft
 14920 ;;		___ftadd
 14921 ;;		___ftdiv
 14922 ;;		___ftmul
 14923 ;; This function uses a non-reentrant model
 14924 ;;
 14925                           
 14926                           
 14927                           ;psect for function ___ftpack
 14928  0A26                     ___ftpack:	
 14929                           
 14930                           ;incstack = 0
 14931                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14932  0A26  0020               	movlb	0	; select bank0
 14933  0A27  0823               	movf	___ftpack@exp,w
 14934  0A28  1903               	btfsc	3,2
 14935  0A29  2A2F               	goto	l5331
 14936  0A2A  0822               	movf	___ftpack@arg+2,w
 14937  0A2B  0421               	iorwf	___ftpack@arg+1,w
 14938  0A2C  0420               	iorwf	___ftpack@arg,w
 14939  0A2D  1D03               	skipz
 14940  0A2E  2A40               	goto	l5337
 14941  0A2F                     l5331:	
 14942  0A2F  3000               	movlw	0
 14943  0A30  00A0               	movwf	?___ftpack
 14944  0A31  3000               	movlw	0
 14945  0A32  00A1               	movwf	?___ftpack+1
 14946  0A33  3000               	movlw	0
 14947  0A34  00A2               	movwf	?___ftpack+2
 14948  0A35  0008               	return
 14949  0A36                     l5335:	
 14950  0A36  3001               	movlw	1
 14951  0A37  00A5               	movwf	??___ftpack
 14952  0A38  0825               	movf	??___ftpack,w
 14953  0A39  07A3               	addwf	___ftpack@exp,f
 14954  0A3A  3001               	movlw	1
 14955  0A3B                     u3665:	
 14956  0A3B  36A2               	lsrf	___ftpack@arg+2,f
 14957  0A3C  0CA1               	rrf	___ftpack@arg+1,f
 14958  0A3D  0CA0               	rrf	___ftpack@arg,f
 14959  0A3E  0B89               	decfsz	9,f
 14960  0A3F  2A3B               	goto	u3665
 14961  0A40                     l5337:	
 14962  0A40  30FE               	movlw	254
 14963  0A41  0522               	andwf	___ftpack@arg+2,w
 14964  0A42  1903               	btfsc	3,2
 14965  0A43  2A59               	goto	l2781
 14966  0A44  2A36               	goto	l5335
 14967  0A45                     l5339:	
 14968  0A45  3001               	movlw	1
 14969  0A46  00A5               	movwf	??___ftpack
 14970  0A47  0825               	movf	??___ftpack,w
 14971  0A48  07A3               	addwf	___ftpack@exp,f
 14972  0A49  3001               	movlw	1
 14973  0A4A  07A0               	addwf	___ftpack@arg,f
 14974  0A4B  3000               	movlw	0
 14975  0A4C  1803               	skipnc
 14976  0A4D  3001               	movlw	1
 14977  0A4E  07A1               	addwf	___ftpack@arg+1,f
 14978  0A4F  3000               	movlw	0
 14979  0A50  1803               	skipnc
 14980  0A51  3001               	movlw	1
 14981  0A52  07A2               	addwf	___ftpack@arg+2,f
 14982  0A53  3001               	movlw	1
 14983  0A54                     u3685:	
 14984  0A54  36A2               	lsrf	___ftpack@arg+2,f
 14985  0A55  0CA1               	rrf	___ftpack@arg+1,f
 14986  0A56  0CA0               	rrf	___ftpack@arg,f
 14987  0A57  0B89               	decfsz	9,f
 14988  0A58  2A54               	goto	u3685
 14989  0A59                     l2781:	
 14990  0A59  30FF               	movlw	255
 14991  0A5A  0522               	andwf	___ftpack@arg+2,w
 14992  0A5B  1903               	btfsc	3,2
 14993  0A5C  2A66               	goto	l5347
 14994  0A5D  2A45               	goto	l5339
 14995  0A5E                     l5345:	
 14996  0A5E  3001               	movlw	1
 14997  0A5F  02A3               	subwf	___ftpack@exp,f
 14998  0A60  3001               	movlw	1
 14999  0A61                     u3705:	
 15000  0A61  35A0               	lslf	___ftpack@arg,f
 15001  0A62  0DA1               	rlf	___ftpack@arg+1,f
 15002  0A63  0DA2               	rlf	___ftpack@arg+2,f
 15003  0A64  0B89               	decfsz	9,f
 15004  0A65  2A61               	goto	u3705
 15005  0A66                     l5347:	
 15006  0A66  1FA1               	btfss	___ftpack@arg+1,7
 15007  0A67  2A5E               	goto	l5345
 15008  0A68  1823               	btfsc	___ftpack@exp,0
 15009  0A69  2A70               	goto	l2787
 15010  0A6A  30FF               	movlw	255
 15011  0A6B  05A0               	andwf	___ftpack@arg,f
 15012  0A6C  307F               	movlw	127
 15013  0A6D  05A1               	andwf	___ftpack@arg+1,f
 15014  0A6E  30FF               	movlw	255
 15015  0A6F  05A2               	andwf	___ftpack@arg+2,f
 15016  0A70                     l2787:	
 15017  0A70  1003               	clrc
 15018  0A71  0CA3               	rrf	___ftpack@exp,f
 15019  0A72  0823               	movf	___ftpack@exp,w
 15020  0A73  00A5               	movwf	??___ftpack
 15021  0A74  01A6               	clrf	??___ftpack+1
 15022  0A75  01A7               	clrf	??___ftpack+2
 15023  0A76  3010               	movlw	16
 15024  0A77                     u3735:	
 15025  0A77  35A5               	lslf	??___ftpack,f
 15026  0A78  0DA6               	rlf	??___ftpack+1,f
 15027  0A79  0DA7               	rlf	??___ftpack+2,f
 15028  0A7A  0B89               	decfsz	9,f
 15029  0A7B  2A77               	goto	u3735
 15030  0A7C  0825               	movf	??___ftpack,w
 15031  0A7D  04A0               	iorwf	___ftpack@arg,f
 15032  0A7E  0826               	movf	??___ftpack+1,w
 15033  0A7F  04A1               	iorwf	___ftpack@arg+1,f
 15034  0A80  0827               	movf	??___ftpack+2,w
 15035  0A81  04A2               	iorwf	___ftpack@arg+2,f
 15036  0A82  0824               	movf	___ftpack@sign,w
 15037  0A83  1903               	btfsc	3,2
 15038  0A84  0008               	return
 15039  0A85  17A2               	bsf	___ftpack@arg+2,7
 15040  0A86  0008               	return
 15041  0A87                     __end_of___ftpack:	
 15042                           
 15043                           	psect	text100
 15044  1EC4                     __ptext100:	
 15045 ;; *************** function _setRFSW_Status *****************
 15046 ;; Defined at:
 15047 ;;		line 431 in file "../src/RF_Control_B1.c"
 15048 ;; Parameters:    Size  Location     Type
 15049 ;;  sw              1    wreg     unsigned char 
 15050 ;;  command         1    2[BANK0 ] unsigned char 
 15051 ;; Auto vars:     Size  Location     Type
 15052 ;;  sw              1    3[BANK0 ] unsigned char 
 15053 ;; Return value:  Size  Location     Type
 15054 ;;		None               void
 15055 ;; Registers used:
 15056 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15057 ;; Tracked objects:
 15058 ;;		On entry : 0/0
 15059 ;;		On exit  : 0/0
 15060 ;;		Unchanged: 0/0
 15061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15062 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15063 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15065 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15066 ;;Total ram usage:        2 bytes
 15067 ;; Hardware stack levels used:    1
 15068 ;; Hardware stack levels required when called:    6
 15069 ;; This function calls:
 15070 ;;		_RfSWPointSelect
 15071 ;; This function is called by:
 15072 ;;		_DlyOff_Main
 15073 ;;		_setDimmerLights_ERROR
 15074 ;;		_setControl_Lights_Table
 15075 ;;		_Sw_DimmerOnFunc
 15076 ;;		_Sw_DimmerAdjFunc
 15077 ;; This function uses a non-reentrant model
 15078 ;;
 15079                           
 15080                           
 15081                           ;psect for function _setRFSW_Status
 15082  1EC4                     _setRFSW_Status:	
 15083                           
 15084                           ;incstack = 0
 15085                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15086                           ;setRFSW_Status@sw stored from wreg
 15087  1EC4  0020               	movlb	0	; select bank0
 15088  1EC5  00A3               	movwf	setRFSW_Status@sw
 15089                           
 15090                           ;RF_Control_B1.c: 432: RfSWPointSelect(sw);
 15091  1EC6  0823               	movf	setRFSW_Status@sw,w
 15092  1EC7  319E  263F         	fcall	_RfSWPointSelect
 15093                           
 15094                           ;RF_Control_B1.c: 433: RFSW->Status = command;
 15095  1EC9  0879               	movf	_RFSW,w
 15096  1ECA  0086               	movwf	6
 15097  1ECB  0187               	clrf	7
 15098  1ECC  0020               	movlb	0	; select bank0
 15099  1ECD  0822               	movf	setRFSW_Status@command,w
 15100  1ECE  1001               	bcf	1,0
 15101  1ECF  1D03               	skipz
 15102  1ED0  1401               	bsf	1,0
 15103  1ED1  0008               	return
 15104  1ED2                     __end_of_setRFSW_Status:	
 15105                           
 15106                           	psect	text101
 15107  1E3F                     __ptext101:	
 15108 ;; *************** function _RfSWPointSelect *****************
 15109 ;; Defined at:
 15110 ;;		line 366 in file "../src/RF_Control_B1.c"
 15111 ;; Parameters:    Size  Location     Type
 15112 ;;  sw              1    wreg     unsigned char 
 15113 ;; Auto vars:     Size  Location     Type
 15114 ;;  sw              1    1[BANK0 ] unsigned char 
 15115 ;; Return value:  Size  Location     Type
 15116 ;;		None               void
 15117 ;; Registers used:
 15118 ;;		wreg
 15119 ;; Tracked objects:
 15120 ;;		On entry : 0/0
 15121 ;;		On exit  : 0/0
 15122 ;;		Unchanged: 0/0
 15123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15125 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15127 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15128 ;;Total ram usage:        2 bytes
 15129 ;; Hardware stack levels used:    1
 15130 ;; Hardware stack levels required when called:    5
 15131 ;; This function calls:
 15132 ;;		Nothing
 15133 ;; This function is called by:
 15134 ;;		_setRFSW_Control
 15135 ;;		_setRFSW_AdjControl
 15136 ;;		_setRFSW_Status
 15137 ;; This function uses a non-reentrant model
 15138 ;;
 15139                           
 15140                           
 15141                           ;psect for function _RfSWPointSelect
 15142  1E3F                     _RfSWPointSelect:	
 15143                           
 15144                           ;incstack = 0
 15145                           ; Regs used in _RfSWPointSelect: [wreg]
 15146                           ;RfSWPointSelect@sw stored from wreg
 15147  1E3F  0020               	movlb	0	; select bank0
 15148  1E40  00A1               	movwf	RfSWPointSelect@sw
 15149                           
 15150                           ;RF_Control_B1.c: 368: if (sw == 1) {
 15151  1E41  0821               	movf	RfSWPointSelect@sw,w
 15152  1E42  3A01               	xorlw	1
 15153  1E43  1D03               	skipz
 15154  1E44  0008               	return
 15155                           
 15156                           ;RF_Control_B1.c: 369: RFSW = &RFSW1;
 15157  1E45  30EF               	movlw	_RFSW1& (0+255)
 15158  1E46  00A0               	movwf	??_RfSWPointSelect
 15159  1E47  0820               	movf	??_RfSWPointSelect,w
 15160  1E48  00F9               	movwf	_RFSW
 15161  1E49  0008               	return
 15162  1E4A                     __end_of_RfSWPointSelect:	
 15163                           
 15164                           	psect	text102
 15165  1F2C                     __ptext102:	
 15166 ;; *************** function _setDimmerLights_Trigger *****************
 15167 ;; Defined at:
 15168 ;;		line 714 in file "../src/Dimmer_B1.c"
 15169 ;; Parameters:    Size  Location     Type
 15170 ;;  lights          1    wreg     unsigned char 
 15171 ;;  command         1    2[BANK0 ] unsigned char 
 15172 ;; Auto vars:     Size  Location     Type
 15173 ;;  lights          1    3[BANK0 ] unsigned char 
 15174 ;; Return value:  Size  Location     Type
 15175 ;;		None               void
 15176 ;; Registers used:
 15177 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15178 ;; Tracked objects:
 15179 ;;		On entry : 0/0
 15180 ;;		On exit  : 0/0
 15181 ;;		Unchanged: 0/0
 15182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15183 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15186 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15187 ;;Total ram usage:        2 bytes
 15188 ;; Hardware stack levels used:    1
 15189 ;; Hardware stack levels required when called:    6
 15190 ;; This function calls:
 15191 ;;		_DimmerLightsPointSelect
 15192 ;; This function is called by:
 15193 ;;		_DlyOff_Main
 15194 ;;		_setRFSW_Control
 15195 ;;		_Sw_DimmerOnFunc
 15196 ;;		_Sw_DimmerOffFunc
 15197 ;; This function uses a non-reentrant model
 15198 ;;
 15199                           
 15200                           
 15201                           ;psect for function _setDimmerLights_Trigger
 15202  1F2C                     _setDimmerLights_Trigger:	
 15203                           
 15204                           ;incstack = 0
 15205                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15206                           ;setDimmerLights_Trigger@lights stored from wreg
 15207  1F2C  0020               	movlb	0	; select bank0
 15208  1F2D  00A3               	movwf	setDimmerLights_Trigger@lights
 15209                           
 15210                           ;Dimmer_B1.c: 716: DimmerLightsPointSelect(lights);
 15211  1F2E  0823               	movf	setDimmerLights_Trigger@lights,w
 15212  1F2F  319E  2634         	fcall	_DimmerLightsPointSelect
 15213                           
 15214                           ;Dimmer_B1.c: 717: DimmerLights->Trigger = command;
 15215  1F31  0020               	movlb	0	; select bank0
 15216  1F32  086A               	movf	_DimmerLights,w
 15217  1F33  3E08               	addlw	8
 15218  1F34  0086               	movwf	6
 15219  1F35  3001               	movlw	1	; select bank2/3
 15220  1F36  0087               	movwf	7
 15221  1F37  0822               	movf	setDimmerLights_Trigger@command,w
 15222  1F38  1101               	bcf	1,2
 15223  1F39  1D03               	skipz
 15224  1F3A  1501               	bsf	1,2
 15225  1F3B  0008               	return
 15226  1F3C                     __end_of_setDimmerLights_Trigger:	
 15227                           
 15228                           	psect	text103
 15229  1F1C                     __ptext103:	
 15230 ;; *************** function _setDimmerLights_Switch *****************
 15231 ;; Defined at:
 15232 ;;		line 702 in file "../src/Dimmer_B1.c"
 15233 ;; Parameters:    Size  Location     Type
 15234 ;;  lights          1    wreg     unsigned char 
 15235 ;;  command         1    2[BANK0 ] unsigned char 
 15236 ;; Auto vars:     Size  Location     Type
 15237 ;;  lights          1    3[BANK0 ] unsigned char 
 15238 ;; Return value:  Size  Location     Type
 15239 ;;		None               void
 15240 ;; Registers used:
 15241 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15242 ;; Tracked objects:
 15243 ;;		On entry : 0/0
 15244 ;;		On exit  : 0/0
 15245 ;;		Unchanged: 0/0
 15246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15247 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15250 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15251 ;;Total ram usage:        2 bytes
 15252 ;; Hardware stack levels used:    1
 15253 ;; Hardware stack levels required when called:    6
 15254 ;; This function calls:
 15255 ;;		_DimmerLightsPointSelect
 15256 ;; This function is called by:
 15257 ;;		_DlyOff_Main
 15258 ;;		_setRFSW_Control
 15259 ;;		_Sw_DimmerOnFunc
 15260 ;;		_Sw_DimmerOffFunc
 15261 ;; This function uses a non-reentrant model
 15262 ;;
 15263                           
 15264                           
 15265                           ;psect for function _setDimmerLights_Switch
 15266  1F1C                     _setDimmerLights_Switch:	
 15267                           
 15268                           ;incstack = 0
 15269                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15270                           ;setDimmerLights_Switch@lights stored from wreg
 15271  1F1C  0020               	movlb	0	; select bank0
 15272  1F1D  00A3               	movwf	setDimmerLights_Switch@lights
 15273                           
 15274                           ;Dimmer_B1.c: 704: DimmerLightsPointSelect(lights);
 15275  1F1E  0823               	movf	setDimmerLights_Switch@lights,w
 15276  1F1F  319E  2634         	fcall	_DimmerLightsPointSelect
 15277                           
 15278                           ;Dimmer_B1.c: 705: DimmerLights->Switch = command;
 15279  1F21  0020               	movlb	0	; select bank0
 15280  1F22  086A               	movf	_DimmerLights,w
 15281  1F23  3E08               	addlw	8
 15282  1F24  0086               	movwf	6
 15283  1F25  3001               	movlw	1	; select bank2/3
 15284  1F26  0087               	movwf	7
 15285  1F27  0822               	movf	setDimmerLights_Switch@command,w
 15286  1F28  1081               	bcf	1,1
 15287  1F29  1D03               	skipz
 15288  1F2A  1481               	bsf	1,1
 15289  1F2B  0008               	return
 15290  1F2C                     __end_of_setDimmerLights_Switch:	
 15291                           
 15292                           	psect	text104
 15293  1E34                     __ptext104:	
 15294 ;; *************** function _DimmerLightsPointSelect *****************
 15295 ;; Defined at:
 15296 ;;		line 324 in file "../src/Dimmer_B1.c"
 15297 ;; Parameters:    Size  Location     Type
 15298 ;;  lights          1    wreg     unsigned char 
 15299 ;; Auto vars:     Size  Location     Type
 15300 ;;  lights          1    1[BANK0 ] unsigned char 
 15301 ;; Return value:  Size  Location     Type
 15302 ;;		None               void
 15303 ;; Registers used:
 15304 ;;		wreg
 15305 ;; Tracked objects:
 15306 ;;		On entry : 0/0
 15307 ;;		On exit  : 0/0
 15308 ;;		Unchanged: 0/0
 15309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15312 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15313 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15314 ;;Total ram usage:        2 bytes
 15315 ;; Hardware stack levels used:    1
 15316 ;; Hardware stack levels required when called:    5
 15317 ;; This function calls:
 15318 ;;		Nothing
 15319 ;; This function is called by:
 15320 ;;		_setDimmerLights_Initialization
 15321 ;;		_setDimmerLights_Main
 15322 ;;		_setDimmerLights_ERROR
 15323 ;;		_setDimmerLights_TriggerERROR
 15324 ;;		_setDimmerLights
 15325 ;;		_setDimmerLights_Adj
 15326 ;;		_setDimmerLights_AdjRF
 15327 ;;		_setDimmerLights_Switch
 15328 ;;		_setDimmerLights_AdjGo
 15329 ;;		_setDimmerLights_Trigger
 15330 ;;		_setDimmerLights_TriggerAdj
 15331 ;;		_setDimmerLights_GO
 15332 ;;		_setDimmerLights_MaxmumValue
 15333 ;;		_setDimmerLights_Clear
 15334 ;; This function uses a non-reentrant model
 15335 ;;
 15336                           
 15337                           
 15338                           ;psect for function _DimmerLightsPointSelect
 15339  1E34                     _DimmerLightsPointSelect:	
 15340                           
 15341                           ;incstack = 0
 15342                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15343                           ;DimmerLightsPointSelect@lights stored from wreg
 15344  1E34  0020               	movlb	0	; select bank0
 15345  1E35  00A1               	movwf	DimmerLightsPointSelect@lights
 15346                           
 15347                           ;Dimmer_B1.c: 326: if (lights == 1) {
 15348  1E36  0821               	movf	DimmerLightsPointSelect@lights,w
 15349  1E37  3A01               	xorlw	1
 15350  1E38  1D03               	skipz
 15351  1E39  0008               	return
 15352                           
 15353                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 15354  1E3A  30C0               	movlw	_DimmerLights1& (0+255)
 15355  1E3B  00A0               	movwf	??_DimmerLightsPointSelect
 15356  1E3C  0820               	movf	??_DimmerLightsPointSelect,w
 15357  1E3D  00EA               	movwf	_DimmerLights
 15358  1E3E  0008               	return
 15359  1E3F                     __end_of_DimmerLightsPointSelect:	
 15360                           
 15361                           	psect	text105
 15362  085A                     __ptext105:	
 15363 ;; *************** function _setBuz *****************
 15364 ;; Defined at:
 15365 ;;		line 22 in file "../src/Buzzer_B1.c"
 15366 ;; Parameters:    Size  Location     Type
 15367 ;;  count           1    wreg     unsigned char 
 15368 ;;  time            2    9[BANK0 ] int 
 15369 ;; Auto vars:     Size  Location     Type
 15370 ;;  count           1   12[BANK0 ] unsigned char 
 15371 ;; Return value:  Size  Location     Type
 15372 ;;		None               void
 15373 ;; Registers used:
 15374 ;;		wreg, status,2, status,0, pclath, cstack
 15375 ;; Tracked objects:
 15376 ;;		On entry : 0/0
 15377 ;;		On exit  : 0/0
 15378 ;;		Unchanged: 0/0
 15379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15380 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15382 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15383 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15384 ;;Total ram usage:        4 bytes
 15385 ;; Hardware stack levels used:    1
 15386 ;; Hardware stack levels required when called:    6
 15387 ;; This function calls:
 15388 ;;		___awdiv
 15389 ;; This function is called by:
 15390 ;;		_DlyOff_Main
 15391 ;;		_setDimmerLights_Main
 15392 ;;		_DimmerLights_Exceptions
 15393 ;;		_my_MainTime
 15394 ;;		_setOverTemp_Exceptions
 15395 ;;		_setLog_Code
 15396 ;;		_setControl_Lights_Table
 15397 ;;		_setRFSW_Control
 15398 ;;		_setSw_Main
 15399 ;;		_Sw_DimmerOnFunc
 15400 ;; This function uses a non-reentrant model
 15401 ;;
 15402                           
 15403                           
 15404                           ;psect for function _setBuz
 15405  085A                     _setBuz:	
 15406                           
 15407                           ;incstack = 0
 15408                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15409                           ;setBuz@count stored from wreg
 15410  085A  0020               	movlb	0	; select bank0
 15411  085B  00AC               	movwf	setBuz@count
 15412                           
 15413                           ;Buzzer_B1.c: 23: time /= 10;
 15414  085C  300A               	movlw	10
 15415  085D  00A0               	movwf	___awdiv@divisor
 15416  085E  3000               	movlw	0
 15417  085F  00A1               	movwf	___awdiv@divisor+1
 15418  0860  082A               	movf	setBuz@time+1,w
 15419  0861  01A3               	clrf	___awdiv@dividend+1
 15420  0862  07A3               	addwf	___awdiv@dividend+1,f
 15421  0863  0829               	movf	setBuz@time,w
 15422  0864  01A2               	clrf	___awdiv@dividend
 15423  0865  07A2               	addwf	___awdiv@dividend,f
 15424  0866  3197  2755  3188   	fcall	___awdiv
 15425  0869  0020               	movlb	0	; select bank0
 15426  086A  0821               	movf	?___awdiv+1,w
 15427  086B  01AA               	clrf	setBuz@time+1
 15428  086C  07AA               	addwf	setBuz@time+1,f
 15429  086D  0820               	movf	?___awdiv,w
 15430  086E  01A9               	clrf	setBuz@time
 15431  086F  07A9               	addwf	setBuz@time,f
 15432                           
 15433                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15434  0870  0021               	movlb	1	; select bank1
 15435  0871  1C32               	btfss	_Buz1^(0+128),0
 15436  0872  0008               	return
 15437                           
 15438                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15439  0873  18B2               	btfsc	_Buz1^(0+128),1
 15440  0874  288B               	goto	l92
 15441                           
 15442                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15443  0875  14B2               	bsf	_Buz1^(0+128),1
 15444                           
 15445                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15446  0876  01B3               	clrf	(_Buz1^(0+128)+1)
 15447  0877  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 15448                           
 15449                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15450  0878  0020               	movlb	0	; select bank0
 15451  0879  082C               	movf	setBuz@count,w
 15452  087A  00AB               	movwf	??_setBuz
 15453  087B  082B               	movf	??_setBuz,w
 15454  087C  0021               	movlb	1	; select bank1
 15455  087D  00B5               	movwf	(_Buz1^(0+128)+3)
 15456                           
 15457                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15458  087E  0020               	movlb	0	; select bank0
 15459  087F  082A               	movf	setBuz@time+1,w
 15460  0880  0021               	movlb	1	; select bank1
 15461  0881  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 15462  0882  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 15463  0883  0020               	movlb	0	; select bank0
 15464  0884  0829               	movf	setBuz@time,w
 15465  0885  0021               	movlb	1	; select bank1
 15466  0886  01B8               	clrf	(_Buz1^(0+128)+6)
 15467  0887  07B8               	addwf	(_Buz1^(0+128)+6),f
 15468                           
 15469                           ;Buzzer_B1.c: 30: RB3 = 1;
 15470  0888  0020               	movlb	0	; select bank0
 15471  0889  158D               	bsf	13,3	;volatile
 15472                           
 15473                           ;Buzzer_B1.c: 31: } else {
 15474  088A  0008               	return
 15475  088B                     l92:	
 15476                           
 15477                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15478  088B  19B2               	btfsc	_Buz1^(0+128),3
 15479  088C  289F               	goto	l94
 15480                           
 15481                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15482  088D  15B2               	bsf	_Buz1^(0+128),3
 15483                           
 15484                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15485  088E  0020               	movlb	0	; select bank0
 15486  088F  082C               	movf	setBuz@count,w
 15487  0890  00AB               	movwf	??_setBuz
 15488  0891  082B               	movf	??_setBuz,w
 15489  0892  0021               	movlb	1	; select bank1
 15490  0893  00B6               	movwf	(_Buz1^(0+128)+4)
 15491                           
 15492                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15493  0894  0020               	movlb	0	; select bank0
 15494  0895  082A               	movf	setBuz@time+1,w
 15495  0896  0021               	movlb	1	; select bank1
 15496  0897  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 15497  0898  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 15498  0899  0020               	movlb	0	; select bank0
 15499  089A  0829               	movf	setBuz@time,w
 15500  089B  0021               	movlb	1	; select bank1
 15501  089C  01BA               	clrf	(_Buz1^(0+128)+8)
 15502  089D  07BA               	addwf	(_Buz1^(0+128)+8),f
 15503                           
 15504                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15505  089E  0008               	return
 15506  089F                     l94:	
 15507  089F  1A32               	btfsc	_Buz1^(0+128),4
 15508  08A0  0008               	return
 15509                           
 15510                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15511  08A1  1632               	bsf	_Buz1^(0+128),4
 15512                           
 15513                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15514  08A2  0020               	movlb	0	; select bank0
 15515  08A3  082C               	movf	setBuz@count,w
 15516  08A4  00AB               	movwf	??_setBuz
 15517  08A5  082B               	movf	??_setBuz,w
 15518  08A6  0021               	movlb	1	; select bank1
 15519  08A7  00B7               	movwf	(_Buz1^(0+128)+5)
 15520                           
 15521                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15522  08A8  0020               	movlb	0	; select bank0
 15523  08A9  082A               	movf	setBuz@time+1,w
 15524  08AA  0021               	movlb	1	; select bank1
 15525  08AB  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 15526  08AC  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 15527  08AD  0020               	movlb	0	; select bank0
 15528  08AE  0829               	movf	setBuz@time,w
 15529  08AF  0021               	movlb	1	; select bank1
 15530  08B0  01BC               	clrf	(_Buz1^(0+128)+10)
 15531  08B1  07BC               	addwf	(_Buz1^(0+128)+10),f
 15532  08B2  0008               	return
 15533  08B3                     __end_of_setBuz:	
 15534                           
 15535                           	psect	text106
 15536  1755                     __ptext106:	
 15537 ;; *************** function ___awdiv *****************
 15538 ;; Defined at:
 15539 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15540 ;; Parameters:    Size  Location     Type
 15541 ;;  divisor         2    0[BANK0 ] int 
 15542 ;;  dividend        2    2[BANK0 ] int 
 15543 ;; Auto vars:     Size  Location     Type
 15544 ;;  quotient        2    7[BANK0 ] int 
 15545 ;;  sign            1    6[BANK0 ] unsigned char 
 15546 ;;  counter         1    5[BANK0 ] unsigned char 
 15547 ;; Return value:  Size  Location     Type
 15548 ;;                  2    0[BANK0 ] int 
 15549 ;; Registers used:
 15550 ;;		wreg, status,2, status,0
 15551 ;; Tracked objects:
 15552 ;;		On entry : 0/0
 15553 ;;		On exit  : 0/0
 15554 ;;		Unchanged: 0/0
 15555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15556 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15557 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15559 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15560 ;;Total ram usage:        9 bytes
 15561 ;; Hardware stack levels used:    1
 15562 ;; Hardware stack levels required when called:    5
 15563 ;; This function calls:
 15564 ;;		Nothing
 15565 ;; This function is called by:
 15566 ;;		_setBuz
 15567 ;; This function uses a non-reentrant model
 15568 ;;
 15569                           
 15570                           
 15571                           ;psect for function ___awdiv
 15572  1755                     ___awdiv:	
 15573                           
 15574                           ;incstack = 0
 15575                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15576  1755  0020               	movlb	0	; select bank0
 15577  1756  01A6               	clrf	___awdiv@sign
 15578  1757  1FA1               	btfss	___awdiv@divisor+1,7
 15579  1758  2F60               	goto	l7753
 15580  1759  09A0               	comf	___awdiv@divisor,f
 15581  175A  09A1               	comf	___awdiv@divisor+1,f
 15582  175B  0AA0               	incf	___awdiv@divisor,f
 15583  175C  1903               	skipnz
 15584  175D  0AA1               	incf	___awdiv@divisor+1,f
 15585  175E  01A6               	clrf	___awdiv@sign
 15586  175F  0AA6               	incf	___awdiv@sign,f
 15587  1760                     l7753:	
 15588  1760  1FA3               	btfss	___awdiv@dividend+1,7
 15589  1761  2F6B               	goto	l7759
 15590  1762  09A2               	comf	___awdiv@dividend,f
 15591  1763  09A3               	comf	___awdiv@dividend+1,f
 15592  1764  0AA2               	incf	___awdiv@dividend,f
 15593  1765  1903               	skipnz
 15594  1766  0AA3               	incf	___awdiv@dividend+1,f
 15595  1767  3001               	movlw	1
 15596  1768  00A4               	movwf	??___awdiv
 15597  1769  0824               	movf	??___awdiv,w
 15598  176A  06A6               	xorwf	___awdiv@sign,f
 15599  176B                     l7759:	
 15600  176B  01A7               	clrf	___awdiv@quotient
 15601  176C  01A8               	clrf	___awdiv@quotient+1
 15602  176D  0821               	movf	___awdiv@divisor+1,w
 15603  176E  0420               	iorwf	___awdiv@divisor,w
 15604  176F  1903               	skipnz
 15605  1770  2F9A               	goto	l7781
 15606  1771  01A5               	clrf	___awdiv@counter
 15607  1772  0AA5               	incf	___awdiv@counter,f
 15608  1773                     l7769:	
 15609  1773  1BA1               	btfsc	___awdiv@divisor+1,7
 15610  1774  2F7F               	goto	l7771
 15611  1775  3001               	movlw	1
 15612  1776                     u7425:	
 15613  1776  35A0               	lslf	___awdiv@divisor,f
 15614  1777  0DA1               	rlf	___awdiv@divisor+1,f
 15615  1778  0B89               	decfsz	9,f
 15616  1779  2F76               	goto	u7425
 15617  177A  3001               	movlw	1
 15618  177B  00A4               	movwf	??___awdiv
 15619  177C  0824               	movf	??___awdiv,w
 15620  177D  07A5               	addwf	___awdiv@counter,f
 15621  177E  2F73               	goto	l7769
 15622  177F                     l7771:	
 15623  177F  3001               	movlw	1
 15624  1780                     u7445:	
 15625  1780  35A7               	lslf	___awdiv@quotient,f
 15626  1781  0DA8               	rlf	___awdiv@quotient+1,f
 15627  1782  0B89               	decfsz	9,f
 15628  1783  2F80               	goto	u7445
 15629  1784  0821               	movf	___awdiv@divisor+1,w
 15630  1785  0223               	subwf	___awdiv@dividend+1,w
 15631  1786  1D03               	skipz
 15632  1787  2F8A               	goto	u7455
 15633  1788  0820               	movf	___awdiv@divisor,w
 15634  1789  0222               	subwf	___awdiv@dividend,w
 15635  178A                     u7455:	
 15636  178A  1C03               	skipc
 15637  178B  2F91               	goto	l7777
 15638  178C  0820               	movf	___awdiv@divisor,w
 15639  178D  02A2               	subwf	___awdiv@dividend,f
 15640  178E  0821               	movf	___awdiv@divisor+1,w
 15641  178F  3BA3               	subwfb	___awdiv@dividend+1,f
 15642  1790  1427               	bsf	___awdiv@quotient,0
 15643  1791                     l7777:	
 15644  1791  3001               	movlw	1
 15645  1792                     u7465:	
 15646  1792  36A1               	lsrf	___awdiv@divisor+1,f
 15647  1793  0CA0               	rrf	___awdiv@divisor,f
 15648  1794  0B89               	decfsz	9,f
 15649  1795  2F92               	goto	u7465
 15650  1796  3001               	movlw	1
 15651  1797  02A5               	subwf	___awdiv@counter,f
 15652  1798  1D03               	btfss	3,2
 15653  1799  2F7F               	goto	l7771
 15654  179A                     l7781:	
 15655  179A  0826               	movf	___awdiv@sign,w
 15656  179B  1903               	btfsc	3,2
 15657  179C  2FA2               	goto	l7785
 15658  179D  09A7               	comf	___awdiv@quotient,f
 15659  179E  09A8               	comf	___awdiv@quotient+1,f
 15660  179F  0AA7               	incf	___awdiv@quotient,f
 15661  17A0  1903               	skipnz
 15662  17A1  0AA8               	incf	___awdiv@quotient+1,f
 15663  17A2                     l7785:	
 15664  17A2  0828               	movf	___awdiv@quotient+1,w
 15665  17A3  01A1               	clrf	?___awdiv+1
 15666  17A4  07A1               	addwf	?___awdiv+1,f
 15667  17A5  0827               	movf	___awdiv@quotient,w
 15668  17A6  01A0               	clrf	?___awdiv
 15669  17A7  07A0               	addwf	?___awdiv,f
 15670  17A8  0008               	return
 15671  17A9                     __end_of___awdiv:	
 15672                           
 15673                           	psect	text107
 15674  1D92                     __ptext107:	
 15675 ;; *************** function _DelayOff_Initialization *****************
 15676 ;; Defined at:
 15677 ;;		line 26 in file "../src/DelayOff_B1.c"
 15678 ;; Parameters:    Size  Location     Type
 15679 ;;		None
 15680 ;; Auto vars:     Size  Location     Type
 15681 ;;		None
 15682 ;; Return value:  Size  Location     Type
 15683 ;;		None               void
 15684 ;; Registers used:
 15685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15686 ;; Tracked objects:
 15687 ;;		On entry : 0/0
 15688 ;;		On exit  : 0/0
 15689 ;;		Unchanged: 0/0
 15690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15695 ;;Total ram usage:        0 bytes
 15696 ;; Hardware stack levels used:    1
 15697 ;; Hardware stack levels required when called:    7
 15698 ;; This function calls:
 15699 ;;		_DlyOff_Initialization
 15700 ;; This function is called by:
 15701 ;;		_main
 15702 ;; This function uses a non-reentrant model
 15703 ;;
 15704                           
 15705                           
 15706                           ;psect for function _DelayOff_Initialization
 15707  1D92                     _DelayOff_Initialization:	
 15708                           
 15709                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15710                           
 15711                           ;incstack = 0
 15712                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15713  1D92  3001               	movlw	1
 15714  1D93  319E  2629         	fcall	_DlyOff_Initialization
 15715  1D95  0008               	return
 15716  1D96                     __end_of_DelayOff_Initialization:	
 15717                           
 15718                           	psect	text108
 15719  1E29                     __ptext108:	
 15720 ;; *************** function _DlyOff_Initialization *****************
 15721 ;; Defined at:
 15722 ;;		line 56 in file "../src/DelayOff_B1.c"
 15723 ;; Parameters:    Size  Location     Type
 15724 ;;  sw              1    wreg     unsigned char 
 15725 ;; Auto vars:     Size  Location     Type
 15726 ;;  sw              1    2[BANK0 ] unsigned char 
 15727 ;; Return value:  Size  Location     Type
 15728 ;;		None               void
 15729 ;; Registers used:
 15730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15731 ;; Tracked objects:
 15732 ;;		On entry : 0/0
 15733 ;;		On exit  : 0/0
 15734 ;;		Unchanged: 0/0
 15735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15739 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15740 ;;Total ram usage:        1 bytes
 15741 ;; Hardware stack levels used:    1
 15742 ;; Hardware stack levels required when called:    6
 15743 ;; This function calls:
 15744 ;;		_DelayOffPointSelect
 15745 ;; This function is called by:
 15746 ;;		_DelayOff_Initialization
 15747 ;; This function uses a non-reentrant model
 15748 ;;
 15749                           
 15750                           
 15751                           ;psect for function _DlyOff_Initialization
 15752  1E29                     _DlyOff_Initialization:	
 15753                           
 15754                           ;incstack = 0
 15755                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15756                           ;DlyOff_Initialization@sw stored from wreg
 15757  1E29  0020               	movlb	0	; select bank0
 15758  1E2A  00A2               	movwf	DlyOff_Initialization@sw
 15759                           
 15760                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15761  1E2B  0822               	movf	DlyOff_Initialization@sw,w
 15762  1E2C  319E  261E         	fcall	_DelayOffPointSelect
 15763                           
 15764                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 15765  1E2E  0020               	movlb	0	; select bank0
 15766  1E2F  0869               	movf	_DelayOff,w
 15767  1E30  0086               	movwf	6
 15768  1E31  0187               	clrf	7
 15769  1E32  1401               	bsf	1,0
 15770  1E33  0008               	return
 15771  1E34                     __end_of_DlyOff_Initialization:	
 15772                           
 15773                           	psect	text109
 15774  1E1E                     __ptext109:	
 15775 ;; *************** function _DelayOffPointSelect *****************
 15776 ;; Defined at:
 15777 ;;		line 7 in file "../src/DelayOff_B1.c"
 15778 ;; Parameters:    Size  Location     Type
 15779 ;;  sw              1    wreg     unsigned char 
 15780 ;; Auto vars:     Size  Location     Type
 15781 ;;  sw              1    1[BANK0 ] unsigned char 
 15782 ;; Return value:  Size  Location     Type
 15783 ;;		None               void
 15784 ;; Registers used:
 15785 ;;		wreg
 15786 ;; Tracked objects:
 15787 ;;		On entry : 0/0
 15788 ;;		On exit  : 0/0
 15789 ;;		Unchanged: 0/0
 15790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15794 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15795 ;;Total ram usage:        2 bytes
 15796 ;; Hardware stack levels used:    1
 15797 ;; Hardware stack levels required when called:    5
 15798 ;; This function calls:
 15799 ;;		Nothing
 15800 ;; This function is called by:
 15801 ;;		_DlyOff_Initialization
 15802 ;;		_DlyOff_Main
 15803 ;;		_setDelayOff_GO
 15804 ;; This function uses a non-reentrant model
 15805 ;;
 15806                           
 15807                           
 15808                           ;psect for function _DelayOffPointSelect
 15809  1E1E                     _DelayOffPointSelect:	
 15810                           
 15811                           ;incstack = 0
 15812                           ; Regs used in _DelayOffPointSelect: [wreg]
 15813                           ;DelayOffPointSelect@sw stored from wreg
 15814  1E1E  0020               	movlb	0	; select bank0
 15815  1E1F  00A1               	movwf	DelayOffPointSelect@sw
 15816                           
 15817                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15818  1E20  0821               	movf	DelayOffPointSelect@sw,w
 15819  1E21  3A01               	xorlw	1
 15820  1E22  1D03               	skipz
 15821  1E23  0008               	return
 15822                           
 15823                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15824  1E24  30ED               	movlw	_DlySw1& (0+255)
 15825  1E25  00A0               	movwf	??_DelayOffPointSelect
 15826  1E26  0820               	movf	??_DelayOffPointSelect,w
 15827  1E27  00E9               	movwf	_DelayOff
 15828  1E28  0008               	return
 15829  1E29                     __end_of_DelayOffPointSelect:	
 15830                           
 15831                           	psect	text110
 15832  106B                     __ptext110:	
 15833 ;; *************** function _CC2500_PowerOnInitial *****************
 15834 ;; Defined at:
 15835 ;;		line 122 in file "../src/CC2500_B1.c"
 15836 ;; Parameters:    Size  Location     Type
 15837 ;;		None
 15838 ;; Auto vars:     Size  Location     Type
 15839 ;;		None
 15840 ;; Return value:  Size  Location     Type
 15841 ;;		None               void
 15842 ;; Registers used:
 15843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15844 ;; Tracked objects:
 15845 ;;		On entry : 0/0
 15846 ;;		On exit  : 0/0
 15847 ;;		Unchanged: 0/0
 15848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15853 ;;Total ram usage:        0 bytes
 15854 ;; Hardware stack levels used:    1
 15855 ;; Hardware stack levels required when called:    8
 15856 ;; This function calls:
 15857 ;;		_CC2500_ClearRXFIFO
 15858 ;;		_CC2500_ClearTXFIFO
 15859 ;;		_CC2500_FrequencyCabr
 15860 ;;		_CC2500_InitPATable
 15861 ;;		_CC2500_InitSetREG
 15862 ;;		_CC2500_PowerRST
 15863 ;;		_CC2500_SIDLEMode
 15864 ;; This function is called by:
 15865 ;;		_main
 15866 ;; This function uses a non-reentrant model
 15867 ;;
 15868                           
 15869                           
 15870                           ;psect for function _CC2500_PowerOnInitial
 15871  106B                     _CC2500_PowerOnInitial:	
 15872                           
 15873                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 15874                           
 15875                           ;incstack = 0
 15876                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15877  106B  3195  2564  3190   	fcall	_CC2500_PowerRST
 15878                           
 15879                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 15880  106E  3192  228C  3190   	fcall	_CC2500_InitSetREG
 15881                           
 15882                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 15883  1071  3191  2116  3190   	fcall	_CC2500_InitPATable
 15884                           
 15885                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 15886  1074  319D  258A  3190   	fcall	_CC2500_ClearTXFIFO
 15887                           
 15888                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 15889  1077  319D  2586  3190   	fcall	_CC2500_ClearRXFIFO
 15890                           
 15891                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 15892  107A  319E  2660  3190   	fcall	_CC2500_FrequencyCabr
 15893                           
 15894                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 15895  107D  319D  258E         	fcall	_CC2500_SIDLEMode
 15896  107F  0008               	return
 15897  1080                     __end_of_CC2500_PowerOnInitial:	
 15898                           
 15899                           	psect	text111
 15900  1D8E                     __ptext111:	
 15901 ;; *************** function _CC2500_SIDLEMode *****************
 15902 ;; Defined at:
 15903 ;;		line 212 in file "../src/CC2500_B1.c"
 15904 ;; Parameters:    Size  Location     Type
 15905 ;;		None
 15906 ;; Auto vars:     Size  Location     Type
 15907 ;;		None
 15908 ;; Return value:  Size  Location     Type
 15909 ;;		None               void
 15910 ;; Registers used:
 15911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15912 ;; Tracked objects:
 15913 ;;		On entry : 0/0
 15914 ;;		On exit  : 0/0
 15915 ;;		Unchanged: 0/0
 15916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15921 ;;Total ram usage:        0 bytes
 15922 ;; Hardware stack levels used:    1
 15923 ;; Hardware stack levels required when called:    7
 15924 ;; This function calls:
 15925 ;;		_CC2500_WriteCommand
 15926 ;; This function is called by:
 15927 ;;		_CC2500_PowerOnInitial
 15928 ;; This function uses a non-reentrant model
 15929 ;;
 15930                           
 15931                           
 15932                           ;psect for function _CC2500_SIDLEMode
 15933  1D8E                     _CC2500_SIDLEMode:	
 15934                           
 15935                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 15936                           
 15937                           ;incstack = 0
 15938                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15939  1D8E  3036               	movlw	54
 15940  1D8F  3190  20AD         	fcall	_CC2500_WriteCommand
 15941  1D91  0008               	return
 15942  1D92                     __end_of_CC2500_SIDLEMode:	
 15943                           
 15944                           	psect	text112
 15945  1564                     __ptext112:	
 15946 ;; *************** function _CC2500_PowerRST *****************
 15947 ;; Defined at:
 15948 ;;		line 135 in file "../src/CC2500_B1.c"
 15949 ;; Parameters:    Size  Location     Type
 15950 ;;		None
 15951 ;; Auto vars:     Size  Location     Type
 15952 ;;		None
 15953 ;; Return value:  Size  Location     Type
 15954 ;;		None               void
 15955 ;; Registers used:
 15956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15957 ;; Tracked objects:
 15958 ;;		On entry : 0/0
 15959 ;;		On exit  : 0/0
 15960 ;;		Unchanged: 0/0
 15961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15965 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15966 ;;Total ram usage:        1 bytes
 15967 ;; Hardware stack levels used:    1
 15968 ;; Hardware stack levels required when called:    6
 15969 ;; This function calls:
 15970 ;;		_CC2500_WriteByte
 15971 ;;		_DelayTime_1us
 15972 ;;		_Timeout_Counter
 15973 ;;		_set_TimeoutCleared
 15974 ;; This function is called by:
 15975 ;;		_CC2500_PowerOnInitial
 15976 ;; This function uses a non-reentrant model
 15977 ;;
 15978                           
 15979                           
 15980                           ;psect for function _CC2500_PowerRST
 15981  1564                     _CC2500_PowerRST:	
 15982                           
 15983                           ;CC2500_B1.c: 136: RC1 = 0;
 15984                           
 15985                           ;incstack = 0
 15986                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15987  1564  0020               	movlb	0	; select bank0
 15988  1565  108E               	bcf	14,1	;volatile
 15989                           
 15990                           ;CC2500_B1.c: 137: RC0 = 0;
 15991  1566  100E               	bcf	14,0	;volatile
 15992                           
 15993                           ;CC2500_B1.c: 138: RC4 = 1;
 15994  1567  160E               	bsf	14,4	;volatile
 15995                           
 15996                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 15997  1568  300A               	movlw	10
 15998  1569  00A0               	movwf	DelayTime_1us@count
 15999  156A  3000               	movlw	0
 16000  156B  00A1               	movwf	DelayTime_1us@count+1
 16001  156C  3192  223F  3195   	fcall	_DelayTime_1us
 16002                           
 16003                           ;CC2500_B1.c: 140: RC4 = 0;
 16004  156F  0020               	movlb	0	; select bank0
 16005  1570  120E               	bcf	14,4	;volatile
 16006                           
 16007                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 16008  1571  300A               	movlw	10
 16009  1572  00A0               	movwf	DelayTime_1us@count
 16010  1573  3000               	movlw	0
 16011  1574  00A1               	movwf	DelayTime_1us@count+1
 16012  1575  3192  223F  3195   	fcall	_DelayTime_1us
 16013                           
 16014                           ;CC2500_B1.c: 142: RC4 = 1;
 16015  1578  0020               	movlb	0	; select bank0
 16016  1579  160E               	bsf	14,4	;volatile
 16017                           
 16018                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 16019  157A  3028               	movlw	40
 16020  157B  00A0               	movwf	DelayTime_1us@count
 16021  157C  3000               	movlw	0
 16022  157D  00A1               	movwf	DelayTime_1us@count+1
 16023  157E  3192  223F  3195   	fcall	_DelayTime_1us
 16024                           
 16025                           ;CC2500_B1.c: 144: RC4 = 0;
 16026  1581  0020               	movlb	0	; select bank0
 16027  1582  120E               	bcf	14,4	;volatile
 16028                           
 16029                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 16030  1583  3030               	movlw	48
 16031  1584  00A6               	movwf	??_CC2500_PowerRST
 16032  1585  0826               	movf	??_CC2500_PowerRST,w
 16033  1586  00FA               	movwf	_SPI0Buffer
 16034                           
 16035                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 16036  1587  2D8B               	goto	l8645
 16037  1588                     l8643:	
 16038                           
 16039                           ;CC2500_B1.c: 147: Timeout_Counter();
 16040  1588  319F  27EB  3195   	fcall	_Timeout_Counter
 16041  158B                     l8645:	
 16042  158B  0020               	movlb	0	; select bank0
 16043  158C  1D0E               	btfss	14,2	;volatile
 16044  158D  2D91               	goto	l8649
 16045  158E  0021               	movlb	1	; select bank1
 16046  158F  1D2F               	btfss	(_myMain^(0+128)+15),2
 16047  1590  2D88               	goto	l8643
 16048  1591                     l8649:	
 16049                           
 16050                           ;CC2500_B1.c: 148: };
 16051                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 16052  1591  3190  2066  3195   	fcall	_set_TimeoutCleared
 16053                           
 16054                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 16055  1594  319F  27D7  3195   	fcall	_CC2500_WriteByte
 16056                           
 16057                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 16058  1597  2D9B               	goto	l8655
 16059  1598                     l8653:	
 16060                           
 16061                           ;CC2500_B1.c: 152: Timeout_Counter();
 16062  1598  319F  27EB  3195   	fcall	_Timeout_Counter
 16063  159B                     l8655:	
 16064  159B  0020               	movlb	0	; select bank0
 16065  159C  1D0E               	btfss	14,2	;volatile
 16066  159D  2DA1               	goto	l8659
 16067  159E  0021               	movlb	1	; select bank1
 16068  159F  1D2F               	btfss	(_myMain^(0+128)+15),2
 16069  15A0  2D98               	goto	l8653
 16070  15A1                     l8659:	
 16071                           
 16072                           ;CC2500_B1.c: 153: };
 16073                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 16074  15A1  3190  2066         	fcall	_set_TimeoutCleared
 16075                           
 16076                           ;CC2500_B1.c: 155: RC0 = 0;
 16077  15A3  0020               	movlb	0	; select bank0
 16078  15A4  100E               	bcf	14,0	;volatile
 16079                           
 16080                           ;CC2500_B1.c: 156: RC4 = 1;
 16081  15A5  160E               	bsf	14,4	;volatile
 16082  15A6  0008               	return
 16083  15A7                     __end_of_CC2500_PowerRST:	
 16084                           
 16085                           	psect	text113
 16086  128C                     __ptext113:	
 16087 ;; *************** function _CC2500_InitSetREG *****************
 16088 ;; Defined at:
 16089 ;;		line 162 in file "../src/CC2500_B1.c"
 16090 ;; Parameters:    Size  Location     Type
 16091 ;;		None
 16092 ;; Auto vars:     Size  Location     Type
 16093 ;;  loop_c          1    8[BANK0 ] unsigned char 
 16094 ;;  temp2           1    7[BANK0 ] unsigned char 
 16095 ;;  temp1           1    6[BANK0 ] unsigned char 
 16096 ;; Return value:  Size  Location     Type
 16097 ;;		None               void
 16098 ;; Registers used:
 16099 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16100 ;; Tracked objects:
 16101 ;;		On entry : 0/0
 16102 ;;		On exit  : 0/0
 16103 ;;		Unchanged: 0/0
 16104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16106 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16108 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16109 ;;Total ram usage:        4 bytes
 16110 ;; Hardware stack levels used:    1
 16111 ;; Hardware stack levels required when called:    7
 16112 ;; This function calls:
 16113 ;;		_CC2500_WriteREG
 16114 ;; This function is called by:
 16115 ;;		_CC2500_PowerOnInitial
 16116 ;; This function uses a non-reentrant model
 16117 ;;
 16118                           
 16119                           
 16120                           ;psect for function _CC2500_InitSetREG
 16121  128C                     _CC2500_InitSetREG:	
 16122                           
 16123                           ;CC2500_B1.c: 163: unsigned char loop_c;
 16124                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 16125                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 16126                           
 16127                           ;incstack = 0
 16128                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16129  128C  0020               	movlb	0	; select bank0
 16130  128D  01A8               	clrf	CC2500_InitSetREG@loop_c
 16131  128E                     L5:	
 16132  128E  302F               	movlw	47
 16133  128F  0228               	subwf	CC2500_InitSetREG@loop_c,w
 16134  1290  1803               	btfsc	3,0
 16135  1291  0008               	return
 16136                           
 16137                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 16138  1292  0828               	movf	CC2500_InitSetREG@loop_c,w
 16139  1293  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 16140  1294  0084               	movwf	4
 16141  1295  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 16142  1296  1803               	skipnc
 16143  1297  3E01               	addlw	1
 16144  1298  0085               	movwf	5
 16145  1299  0800               	movf	0,w	;code access
 16146  129A  00A5               	movwf	??_CC2500_InitSetREG
 16147  129B  0825               	movf	??_CC2500_InitSetREG,w
 16148  129C  00A6               	movwf	CC2500_InitSetREG@temp1
 16149                           
 16150                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 16151  129D  0828               	movf	CC2500_InitSetREG@loop_c,w
 16152  129E  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 16153  129F  0084               	movwf	4
 16154  12A0  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 16155  12A1  1803               	skipnc
 16156  12A2  3E01               	addlw	1
 16157  12A3  0085               	movwf	5
 16158  12A4  0800               	movf	0,w	;code access
 16159  12A5  00A5               	movwf	??_CC2500_InitSetREG
 16160  12A6  0825               	movf	??_CC2500_InitSetREG,w
 16161  12A7  00A7               	movwf	CC2500_InitSetREG@temp2
 16162                           
 16163                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 16164  12A8  0827               	movf	CC2500_InitSetREG@temp2,w
 16165  12A9  00A5               	movwf	??_CC2500_InitSetREG
 16166  12AA  0825               	movf	??_CC2500_InitSetREG,w
 16167  12AB  00A2               	movwf	CC2500_WriteREG@value
 16168  12AC  0826               	movf	CC2500_InitSetREG@temp1,w
 16169  12AD  3191  2194  3192   	fcall	_CC2500_WriteREG
 16170  12B0  3001               	movlw	1
 16171  12B1  0020               	movlb	0	; select bank0
 16172  12B2  00A5               	movwf	??_CC2500_InitSetREG
 16173  12B3  0825               	movf	??_CC2500_InitSetREG,w
 16174  12B4  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 16175  12B5  2A8E               	goto	L5
 16176  12B6                     __end_of_CC2500_InitSetREG:	
 16177                           
 16178                           	psect	text114
 16179  1116                     __ptext114:	
 16180 ;; *************** function _CC2500_InitPATable *****************
 16181 ;; Defined at:
 16182 ;;		line 177 in file "../src/CC2500_B1.c"
 16183 ;; Parameters:    Size  Location     Type
 16184 ;;		None
 16185 ;; Auto vars:     Size  Location     Type
 16186 ;;  loop_d          1    7[BANK0 ] unsigned char 
 16187 ;;  temp            1    6[BANK0 ] unsigned char 
 16188 ;; Return value:  Size  Location     Type
 16189 ;;		None               void
 16190 ;; Registers used:
 16191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16192 ;; Tracked objects:
 16193 ;;		On entry : 0/0
 16194 ;;		On exit  : 0/0
 16195 ;;		Unchanged: 0/0
 16196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16198 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16200 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16201 ;;Total ram usage:        3 bytes
 16202 ;; Hardware stack levels used:    1
 16203 ;; Hardware stack levels required when called:    7
 16204 ;; This function calls:
 16205 ;;		_CC2500_WriteREG
 16206 ;; This function is called by:
 16207 ;;		_CC2500_PowerOnInitial
 16208 ;; This function uses a non-reentrant model
 16209 ;;
 16210                           
 16211                           
 16212                           ;psect for function _CC2500_InitPATable
 16213  1116                     _CC2500_InitPATable:	
 16214                           
 16215                           ;CC2500_B1.c: 178: unsigned char loop_d;
 16216                           ;CC2500_B1.c: 179: unsigned char temp;
 16217                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 16218                           
 16219                           ;incstack = 0
 16220                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16221  1116  0020               	movlb	0	; select bank0
 16222  1117  01A7               	clrf	CC2500_InitPATable@loop_d
 16223  1118                     L6:	
 16224  1118  3008               	movlw	8
 16225  1119  0227               	subwf	CC2500_InitPATable@loop_d,w
 16226  111A  1803               	btfsc	3,0
 16227  111B  0008               	return
 16228                           
 16229                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 16230  111C  0827               	movf	CC2500_InitPATable@loop_d,w
 16231  111D  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 16232  111E  0084               	movwf	4
 16233  111F  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 16234  1120  1803               	skipnc
 16235  1121  3E01               	addlw	1
 16236  1122  0085               	movwf	5
 16237  1123  0800               	movf	0,w	;code access
 16238  1124  00A5               	movwf	??_CC2500_InitPATable
 16239  1125  0825               	movf	??_CC2500_InitPATable,w
 16240  1126  00A6               	movwf	CC2500_InitPATable@temp
 16241                           
 16242                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 16243  1127  0826               	movf	CC2500_InitPATable@temp,w
 16244  1128  00A5               	movwf	??_CC2500_InitPATable
 16245  1129  0825               	movf	??_CC2500_InitPATable,w
 16246  112A  00A2               	movwf	CC2500_WriteREG@value
 16247  112B  303E               	movlw	62
 16248  112C  3191  2194  3191   	fcall	_CC2500_WriteREG
 16249  112F  3001               	movlw	1
 16250  1130  0020               	movlb	0	; select bank0
 16251  1131  00A5               	movwf	??_CC2500_InitPATable
 16252  1132  0825               	movf	??_CC2500_InitPATable,w
 16253  1133  07A7               	addwf	CC2500_InitPATable@loop_d,f
 16254  1134  2918               	goto	L6
 16255  1135                     __end_of_CC2500_InitPATable:	
 16256                           
 16257                           	psect	text115
 16258  1194                     __ptext115:	
 16259 ;; *************** function _CC2500_WriteREG *****************
 16260 ;; Defined at:
 16261 ;;		line 254 in file "../src/CC2500_B1.c"
 16262 ;; Parameters:    Size  Location     Type
 16263 ;;  w_addr          1    wreg     unsigned char 
 16264 ;;  value           1    2[BANK0 ] unsigned char 
 16265 ;; Auto vars:     Size  Location     Type
 16266 ;;  w_addr          1    4[BANK0 ] unsigned char 
 16267 ;; Return value:  Size  Location     Type
 16268 ;;		None               void
 16269 ;; Registers used:
 16270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16271 ;; Tracked objects:
 16272 ;;		On entry : 0/0
 16273 ;;		On exit  : 0/0
 16274 ;;		Unchanged: 0/0
 16275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16276 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16279 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16280 ;;Total ram usage:        3 bytes
 16281 ;; Hardware stack levels used:    1
 16282 ;; Hardware stack levels required when called:    6
 16283 ;; This function calls:
 16284 ;;		_CC2500_WriteByte
 16285 ;;		_Timeout_Counter
 16286 ;;		_set_TimeoutCleared
 16287 ;; This function is called by:
 16288 ;;		_CC2500_InitSetREG
 16289 ;;		_CC2500_InitPATable
 16290 ;; This function uses a non-reentrant model
 16291 ;;
 16292                           
 16293                           
 16294                           ;psect for function _CC2500_WriteREG
 16295  1194                     _CC2500_WriteREG:	
 16296                           
 16297                           ;incstack = 0
 16298                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16299                           ;CC2500_WriteREG@w_addr stored from wreg
 16300  1194  0020               	movlb	0	; select bank0
 16301  1195  00A4               	movwf	CC2500_WriteREG@w_addr
 16302                           
 16303                           ;CC2500_B1.c: 255: RC4 = 0;
 16304  1196  120E               	bcf	14,4	;volatile
 16305                           
 16306                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 16307  1197  0824               	movf	CC2500_WriteREG@w_addr,w
 16308  1198  00A3               	movwf	??_CC2500_WriteREG
 16309  1199  0823               	movf	??_CC2500_WriteREG,w
 16310  119A  00FA               	movwf	_SPI0Buffer
 16311                           
 16312                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 16313  119B  299F               	goto	l8403
 16314  119C                     l8401:	
 16315                           
 16316                           ;CC2500_B1.c: 258: Timeout_Counter();
 16317  119C  319F  27EB  3191   	fcall	_Timeout_Counter
 16318  119F                     l8403:	
 16319  119F  0020               	movlb	0	; select bank0
 16320  11A0  1D0E               	btfss	14,2	;volatile
 16321  11A1  29A5               	goto	l8407
 16322  11A2  0021               	movlb	1	; select bank1
 16323  11A3  1D2F               	btfss	(_myMain^(0+128)+15),2
 16324  11A4  299C               	goto	l8401
 16325  11A5                     l8407:	
 16326                           
 16327                           ;CC2500_B1.c: 259: };
 16328                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 16329  11A5  3190  2066  3191   	fcall	_set_TimeoutCleared
 16330                           
 16331                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 16332  11A8  319F  27D7  3191   	fcall	_CC2500_WriteByte
 16333                           
 16334                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 16335  11AB  0020               	movlb	0	; select bank0
 16336  11AC  0822               	movf	CC2500_WriteREG@value,w
 16337  11AD  00A3               	movwf	??_CC2500_WriteREG
 16338  11AE  0823               	movf	??_CC2500_WriteREG,w
 16339  11AF  00FA               	movwf	_SPI0Buffer
 16340                           
 16341                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 16342  11B0  319F  27D7         	fcall	_CC2500_WriteByte
 16343                           
 16344                           ;CC2500_B1.c: 265: RC4 = 1;
 16345  11B2  0020               	movlb	0	; select bank0
 16346  11B3  160E               	bsf	14,4	;volatile
 16347  11B4  0008               	return
 16348  11B5                     __end_of_CC2500_WriteREG:	
 16349                           
 16350                           	psect	text116
 16351  1E60                     __ptext116:	
 16352 ;; *************** function _CC2500_FrequencyCabr *****************
 16353 ;; Defined at:
 16354 ;;		line 204 in file "../src/CC2500_B1.c"
 16355 ;; Parameters:    Size  Location     Type
 16356 ;;		None
 16357 ;; Auto vars:     Size  Location     Type
 16358 ;;		None
 16359 ;; Return value:  Size  Location     Type
 16360 ;;		None               void
 16361 ;; Registers used:
 16362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16363 ;; Tracked objects:
 16364 ;;		On entry : 0/0
 16365 ;;		On exit  : 0/0
 16366 ;;		Unchanged: 0/0
 16367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16372 ;;Total ram usage:        0 bytes
 16373 ;; Hardware stack levels used:    1
 16374 ;; Hardware stack levels required when called:    7
 16375 ;; This function calls:
 16376 ;;		_CC2500_WriteCommand
 16377 ;;		_DelayTime_1us
 16378 ;; This function is called by:
 16379 ;;		_CC2500_PowerOnInitial
 16380 ;; This function uses a non-reentrant model
 16381 ;;
 16382                           
 16383                           
 16384                           ;psect for function _CC2500_FrequencyCabr
 16385  1E60                     _CC2500_FrequencyCabr:	
 16386                           
 16387                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 16388                           
 16389                           ;incstack = 0
 16390                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16391  1E60  3033               	movlw	51
 16392  1E61  3190  20AD  319E   	fcall	_CC2500_WriteCommand
 16393                           
 16394                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 16395  1E64  30E8               	movlw	232
 16396  1E65  0020               	movlb	0	; select bank0
 16397  1E66  00A0               	movwf	DelayTime_1us@count
 16398  1E67  3003               	movlw	3
 16399  1E68  00A1               	movwf	DelayTime_1us@count+1
 16400  1E69  3192  223F         	fcall	_DelayTime_1us
 16401  1E6B  0008               	return
 16402  1E6C                     __end_of_CC2500_FrequencyCabr:	
 16403                           
 16404                           	psect	text117
 16405  123F                     __ptext117:	
 16406 ;; *************** function _DelayTime_1us *****************
 16407 ;; Defined at:
 16408 ;;		line 323 in file "../src/CC2500_B1.c"
 16409 ;; Parameters:    Size  Location     Type
 16410 ;;  count           2    0[BANK0 ] int 
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;  j               2    4[BANK0 ] unsigned int 
 16413 ;;  i               2    2[BANK0 ] unsigned int 
 16414 ;; Return value:  Size  Location     Type
 16415 ;;		None               void
 16416 ;; Registers used:
 16417 ;;		wreg, status,2
 16418 ;; Tracked objects:
 16419 ;;		On entry : 0/0
 16420 ;;		On exit  : 0/0
 16421 ;;		Unchanged: 0/0
 16422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16423 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16427 ;;Total ram usage:        6 bytes
 16428 ;; Hardware stack levels used:    1
 16429 ;; Hardware stack levels required when called:    5
 16430 ;; This function calls:
 16431 ;;		Nothing
 16432 ;; This function is called by:
 16433 ;;		_CC2500_PowerRST
 16434 ;;		_CC2500_FrequencyCabr
 16435 ;; This function uses a non-reentrant model
 16436 ;;
 16437                           
 16438                           
 16439                           ;psect for function _DelayTime_1us
 16440  123F                     _DelayTime_1us:	
 16441                           
 16442                           ;CC2500_B1.c: 324: unsigned int i, j;
 16443                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 16444                           
 16445                           ;incstack = 0
 16446                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16447  123F  3001               	movlw	1
 16448  1240  0020               	movlb	0	; select bank0
 16449  1241  00A2               	movwf	DelayTime_1us@i
 16450  1242  3000               	movlw	0
 16451  1243  00A3               	movwf	DelayTime_1us@i+1
 16452  1244                     l366:	
 16453  1244  0821               	movf	DelayTime_1us@count+1,w
 16454  1245  0223               	subwf	DelayTime_1us@i+1,w
 16455  1246  1D03               	skipz
 16456  1247  2A4A               	goto	u8235
 16457  1248  0820               	movf	DelayTime_1us@count,w
 16458  1249  0222               	subwf	DelayTime_1us@i,w
 16459  124A                     u8235:	
 16460  124A  1803               	btfsc	3,0
 16461  124B  0008               	return
 16462                           
 16463                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 16464  124C  01A4               	clrf	DelayTime_1us@j
 16465  124D  01A5               	clrf	DelayTime_1us@j+1
 16466  124E  3000               	movlw	0
 16467  124F  0225               	subwf	DelayTime_1us@j+1,w
 16468  1250  3002               	movlw	2
 16469  1251  1903               	skipnz
 16470  1252  0224               	subwf	DelayTime_1us@j,w
 16471  1253  1803               	btfsc	3,0
 16472  1254  2A60               	goto	l8395
 16473  1255                     l8393:	
 16474  1255  3001               	movlw	1
 16475  1256  07A4               	addwf	DelayTime_1us@j,f
 16476  1257  3000               	movlw	0
 16477  1258  3DA5               	addwfc	DelayTime_1us@j+1,f
 16478  1259  3000               	movlw	0
 16479  125A  0225               	subwf	DelayTime_1us@j+1,w
 16480  125B  3002               	movlw	2
 16481  125C  1903               	skipnz
 16482  125D  0224               	subwf	DelayTime_1us@j,w
 16483  125E  1C03               	skipc
 16484  125F  2A55               	goto	l8393
 16485  1260                     l8395:	
 16486  1260  3001               	movlw	1
 16487  1261  07A2               	addwf	DelayTime_1us@i,f
 16488  1262  3000               	movlw	0
 16489  1263  3DA3               	addwfc	DelayTime_1us@i+1,f
 16490  1264  2A44               	goto	l366
 16491  1265                     __end_of_DelayTime_1us:	
 16492                           
 16493                           	psect	text118
 16494  1D8A                     __ptext118:	
 16495 ;; *************** function _CC2500_ClearTXFIFO *****************
 16496 ;; Defined at:
 16497 ;;		line 190 in file "../src/CC2500_B1.c"
 16498 ;; Parameters:    Size  Location     Type
 16499 ;;		None
 16500 ;; Auto vars:     Size  Location     Type
 16501 ;;		None
 16502 ;; Return value:  Size  Location     Type
 16503 ;;		None               void
 16504 ;; Registers used:
 16505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16506 ;; Tracked objects:
 16507 ;;		On entry : 0/0
 16508 ;;		On exit  : 0/0
 16509 ;;		Unchanged: 0/0
 16510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16515 ;;Total ram usage:        0 bytes
 16516 ;; Hardware stack levels used:    1
 16517 ;; Hardware stack levels required when called:    7
 16518 ;; This function calls:
 16519 ;;		_CC2500_WriteCommand
 16520 ;; This function is called by:
 16521 ;;		_CC2500_PowerOnInitial
 16522 ;; This function uses a non-reentrant model
 16523 ;;
 16524                           
 16525                           
 16526                           ;psect for function _CC2500_ClearTXFIFO
 16527  1D8A                     _CC2500_ClearTXFIFO:	
 16528                           
 16529                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 16530                           
 16531                           ;incstack = 0
 16532                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16533  1D8A  303B               	movlw	59
 16534  1D8B  3190  20AD         	fcall	_CC2500_WriteCommand
 16535  1D8D  0008               	return
 16536  1D8E                     __end_of_CC2500_ClearTXFIFO:	
 16537                           
 16538                           	psect	text119
 16539  1D86                     __ptext119:	
 16540 ;; *************** function _CC2500_ClearRXFIFO *****************
 16541 ;; Defined at:
 16542 ;;		line 197 in file "../src/CC2500_B1.c"
 16543 ;; Parameters:    Size  Location     Type
 16544 ;;		None
 16545 ;; Auto vars:     Size  Location     Type
 16546 ;;		None
 16547 ;; Return value:  Size  Location     Type
 16548 ;;		None               void
 16549 ;; Registers used:
 16550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16551 ;; Tracked objects:
 16552 ;;		On entry : 0/0
 16553 ;;		On exit  : 0/0
 16554 ;;		Unchanged: 0/0
 16555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16560 ;;Total ram usage:        0 bytes
 16561 ;; Hardware stack levels used:    1
 16562 ;; Hardware stack levels required when called:    7
 16563 ;; This function calls:
 16564 ;;		_CC2500_WriteCommand
 16565 ;; This function is called by:
 16566 ;;		_CC2500_PowerOnInitial
 16567 ;; This function uses a non-reentrant model
 16568 ;;
 16569                           
 16570                           
 16571                           ;psect for function _CC2500_ClearRXFIFO
 16572  1D86                     _CC2500_ClearRXFIFO:	
 16573                           
 16574                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 16575                           
 16576                           ;incstack = 0
 16577                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16578  1D86  303A               	movlw	58
 16579  1D87  3190  20AD         	fcall	_CC2500_WriteCommand
 16580  1D89  0008               	return
 16581  1D8A                     __end_of_CC2500_ClearRXFIFO:	
 16582                           
 16583                           	psect	text120
 16584  10AD                     __ptext120:	
 16585 ;; *************** function _CC2500_WriteCommand *****************
 16586 ;; Defined at:
 16587 ;;		line 288 in file "../src/CC2500_B1.c"
 16588 ;; Parameters:    Size  Location     Type
 16589 ;;  command         1    wreg     unsigned char 
 16590 ;; Auto vars:     Size  Location     Type
 16591 ;;  command         1    3[BANK0 ] unsigned char 
 16592 ;; Return value:  Size  Location     Type
 16593 ;;		None               void
 16594 ;; Registers used:
 16595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16596 ;; Tracked objects:
 16597 ;;		On entry : 0/0
 16598 ;;		On exit  : 0/0
 16599 ;;		Unchanged: 0/0
 16600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16605 ;;Total ram usage:        2 bytes
 16606 ;; Hardware stack levels used:    1
 16607 ;; Hardware stack levels required when called:    6
 16608 ;; This function calls:
 16609 ;;		_CC2500_WriteByte
 16610 ;;		_Timeout_Counter
 16611 ;;		_set_TimeoutCleared
 16612 ;; This function is called by:
 16613 ;;		_CC2500_TxData
 16614 ;;		_CC2500_ClearTXFIFO
 16615 ;;		_CC2500_ClearRXFIFO
 16616 ;;		_CC2500_FrequencyCabr
 16617 ;;		_CC2500_SIDLEMode
 16618 ;;		_setRF_Main
 16619 ;;		_RF_RxDisable
 16620 ;; This function uses a non-reentrant model
 16621 ;;
 16622                           
 16623                           
 16624                           ;psect for function _CC2500_WriteCommand
 16625  10AD                     _CC2500_WriteCommand:	
 16626                           
 16627                           ;incstack = 0
 16628                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16629                           ;CC2500_WriteCommand@command stored from wreg
 16630  10AD  0020               	movlb	0	; select bank0
 16631  10AE  00A3               	movwf	CC2500_WriteCommand@command
 16632                           
 16633                           ;CC2500_B1.c: 289: RC4 = 0;
 16634  10AF  120E               	bcf	14,4	;volatile
 16635                           
 16636                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 16637  10B0  0823               	movf	CC2500_WriteCommand@command,w
 16638  10B1  00A2               	movwf	??_CC2500_WriteCommand
 16639  10B2  0822               	movf	??_CC2500_WriteCommand,w
 16640  10B3  00FA               	movwf	_SPI0Buffer
 16641                           
 16642                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 16643  10B4  28B8               	goto	l8147
 16644  10B5                     l8145:	
 16645                           
 16646                           ;CC2500_B1.c: 293: Timeout_Counter();
 16647  10B5  319F  27EB  3190   	fcall	_Timeout_Counter
 16648  10B8                     l8147:	
 16649  10B8  0020               	movlb	0	; select bank0
 16650  10B9  1D0E               	btfss	14,2	;volatile
 16651  10BA  28BE               	goto	l8151
 16652  10BB  0021               	movlb	1	; select bank1
 16653  10BC  1D2F               	btfss	(_myMain^(0+128)+15),2
 16654  10BD  28B5               	goto	l8145
 16655  10BE                     l8151:	
 16656                           
 16657                           ;CC2500_B1.c: 294: };
 16658                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 16659  10BE  3190  2066  3190   	fcall	_set_TimeoutCleared
 16660                           
 16661                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 16662  10C1  319F  27D7         	fcall	_CC2500_WriteByte
 16663                           
 16664                           ;CC2500_B1.c: 298: RC4 = 1;
 16665  10C3  0020               	movlb	0	; select bank0
 16666  10C4  160E               	bsf	14,4	;volatile
 16667  10C5  0008               	return
 16668  10C6                     __end_of_CC2500_WriteCommand:	
 16669                           
 16670                           	psect	text121
 16671  1066                     __ptext121:	
 16672 ;; *************** function _set_TimeoutCleared *****************
 16673 ;; Defined at:
 16674 ;;		line 217 in file "../src/Main_B1.c"
 16675 ;; Parameters:    Size  Location     Type
 16676 ;;		None
 16677 ;; Auto vars:     Size  Location     Type
 16678 ;;		None
 16679 ;; Return value:  Size  Location     Type
 16680 ;;		None               void
 16681 ;; Registers used:
 16682 ;;		status,2
 16683 ;; Tracked objects:
 16684 ;;		On entry : 0/0
 16685 ;;		On exit  : 0/0
 16686 ;;		Unchanged: 0/0
 16687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16692 ;;Total ram usage:        0 bytes
 16693 ;; Hardware stack levels used:    1
 16694 ;; Hardware stack levels required when called:    5
 16695 ;; This function calls:
 16696 ;;		Nothing
 16697 ;; This function is called by:
 16698 ;;		_CC2500_TxData
 16699 ;;		_CC2500_RxData
 16700 ;;		_CC2500_PowerRST
 16701 ;;		_CC2500_WriteREG
 16702 ;;		_CC2500_WriteCommand
 16703 ;;		_CC2500_ReadStatus
 16704 ;;		_getAD
 16705 ;;		_TouchPower
 16706 ;;		_CC2500_ReadREG
 16707 ;; This function uses a non-reentrant model
 16708 ;;
 16709                           
 16710                           
 16711                           ;psect for function _set_TimeoutCleared
 16712  1066                     _set_TimeoutCleared:	
 16713                           
 16714                           ;Main_B1.c: 218: myMain.Timeout = 0;
 16715                           
 16716                           ;incstack = 0
 16717                           ; Regs used in _set_TimeoutCleared: [status,2]
 16718  1066  0021               	movlb	1	; select bank1
 16719  1067  112F               	bcf	(_myMain^(0+128)+15),2
 16720                           
 16721                           ;Main_B1.c: 219: myMain.Timeout_Counter = 0;
 16722  1068  01B0               	clrf	(_myMain^(0+128)+16)
 16723  1069  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16724  106A  0008               	return
 16725  106B                     __end_of_set_TimeoutCleared:	
 16726                           
 16727                           	psect	text122
 16728  1FEB                     __ptext122:	
 16729 ;; *************** function _Timeout_Counter *****************
 16730 ;; Defined at:
 16731 ;;		line 208 in file "../src/Main_B1.c"
 16732 ;; Parameters:    Size  Location     Type
 16733 ;;		None
 16734 ;; Auto vars:     Size  Location     Type
 16735 ;;		None
 16736 ;; Return value:  Size  Location     Type
 16737 ;;		None               void
 16738 ;; Registers used:
 16739 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16740 ;; Tracked objects:
 16741 ;;		On entry : 0/0
 16742 ;;		On exit  : 0/0
 16743 ;;		Unchanged: 0/0
 16744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16749 ;;Total ram usage:        0 bytes
 16750 ;; Hardware stack levels used:    1
 16751 ;; Hardware stack levels required when called:    5
 16752 ;; This function calls:
 16753 ;;		Nothing
 16754 ;; This function is called by:
 16755 ;;		_CC2500_TxData
 16756 ;;		_CC2500_RxData
 16757 ;;		_CC2500_PowerRST
 16758 ;;		_CC2500_WriteREG
 16759 ;;		_CC2500_WriteCommand
 16760 ;;		_CC2500_ReadStatus
 16761 ;;		_getAD
 16762 ;;		_TouchPower
 16763 ;;		_CC2500_ReadREG
 16764 ;; This function uses a non-reentrant model
 16765 ;;
 16766                           
 16767                           
 16768                           ;psect for function _Timeout_Counter
 16769  1FEB                     _Timeout_Counter:	
 16770                           
 16771                           ;Main_B1.c: 209: myMain.Timeout_Counter++;
 16772                           
 16773                           ;incstack = 0
 16774                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16775  1FEB  3001               	movlw	1
 16776  1FEC  0021               	movlb	1	; select bank1
 16777  1FED  07B0               	addwf	(_myMain^(0+128)+16),f
 16778  1FEE  3000               	movlw	0
 16779  1FEF  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 16780                           
 16781                           ;Main_B1.c: 210: if (myMain.Timeout_Counter == 10000) {
 16782  1FF0  3010               	movlw	16
 16783  1FF1  3EA0               	addlw	_myMain& (0+255)
 16784  1FF2  0086               	movwf	6
 16785  1FF3  0187               	clrf	7
 16786  1FF4  3F40               	moviw [0]fsr1
 16787  1FF5  3A10               	xorlw	16
 16788  1FF6  1D03               	skipz
 16789  1FF7  2FFA               	goto	u7775
 16790  1FF8  3F41               	moviw [1]fsr1
 16791  1FF9  3A27               	xorlw	39
 16792  1FFA                     u7775:	
 16793  1FFA  1D03               	skipz
 16794  1FFB  0008               	return
 16795                           
 16796                           ;Main_B1.c: 211: myMain.Timeout_Counter = 0;
 16797  1FFC  01B0               	clrf	(_myMain^(0+128)+16)
 16798  1FFD  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16799                           
 16800                           ;Main_B1.c: 212: myMain.Timeout = 1;
 16801  1FFE  152F               	bsf	(_myMain^(0+128)+15),2
 16802  1FFF  0008               	return
 16803  2000                     __end_of_Timeout_Counter:	
 16804                           
 16805                           	psect	text123
 16806  1FD7                     __ptext123:	
 16807 ;; *************** function _CC2500_WriteByte *****************
 16808 ;; Defined at:
 16809 ;;		line 222 in file "../src/CC2500_B1.c"
 16810 ;; Parameters:    Size  Location     Type
 16811 ;;		None
 16812 ;; Auto vars:     Size  Location     Type
 16813 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16814 ;; Return value:  Size  Location     Type
 16815 ;;		None               void
 16816 ;; Registers used:
 16817 ;;		wreg, status,2, status,0
 16818 ;; Tracked objects:
 16819 ;;		On entry : 0/0
 16820 ;;		On exit  : 0/0
 16821 ;;		Unchanged: 0/0
 16822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16824 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16825 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16826 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16827 ;;Total ram usage:        2 bytes
 16828 ;; Hardware stack levels used:    1
 16829 ;; Hardware stack levels required when called:    5
 16830 ;; This function calls:
 16831 ;;		Nothing
 16832 ;; This function is called by:
 16833 ;;		_CC2500_TxData
 16834 ;;		_CC2500_RxData
 16835 ;;		_CC2500_PowerRST
 16836 ;;		_CC2500_WriteREG
 16837 ;;		_CC2500_WriteCommand
 16838 ;;		_CC2500_ReadStatus
 16839 ;;		_CC2500_ReadREG
 16840 ;; This function uses a non-reentrant model
 16841 ;;
 16842                           
 16843                           
 16844                           ;psect for function _CC2500_WriteByte
 16845  1FD7                     _CC2500_WriteByte:	
 16846                           
 16847                           ;CC2500_B1.c: 223: unsigned char loop_a;
 16848                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 16849                           
 16850                           ;incstack = 0
 16851                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16852  1FD7  0020               	movlb	0	; select bank0
 16853  1FD8  01A1               	clrf	CC2500_WriteByte@loop_a
 16854  1FD9                     L7:	
 16855  1FD9  3008               	movlw	8
 16856  1FDA  0221               	subwf	CC2500_WriteByte@loop_a,w
 16857  1FDB  1803               	btfsc	3,0
 16858  1FDC  0008               	return
 16859                           
 16860                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 16861  1FDD  1FFA               	btfss	_SPI0Buffer,7
 16862  1FDE  2FE1               	goto	l322
 16863                           
 16864                           ;CC2500_B1.c: 226: RC0 = 1;
 16865  1FDF  140E               	bsf	14,0	;volatile
 16866  1FE0  2FE2               	goto	l323
 16867  1FE1                     l322:	
 16868                           
 16869                           ;CC2500_B1.c: 227: else
 16870                           ;CC2500_B1.c: 228: RC0 = 0;
 16871  1FE1  100E               	bcf	14,0	;volatile
 16872  1FE2                     l323:	
 16873                           
 16874                           ;CC2500_B1.c: 229: RC1 = 1;
 16875  1FE2  148E               	bsf	14,1	;volatile
 16876                           
 16877                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 16878  1FE3  1003               	clrc
 16879  1FE4  0DFA               	rlf	_SPI0Buffer,f
 16880                           
 16881                           ;CC2500_B1.c: 231: RC1 = 0;
 16882  1FE5  108E               	bcf	14,1	;volatile
 16883  1FE6  3001               	movlw	1
 16884  1FE7  00A0               	movwf	??_CC2500_WriteByte
 16885  1FE8  0820               	movf	??_CC2500_WriteByte,w
 16886  1FE9  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16887  1FEA  2FD9               	goto	L7
 16888  1FEB                     __end_of_CC2500_WriteByte:	
 16889                           
 16890                           	psect	text124
 16891  16BD                     __ptext124:	
 16892 ;; *************** function _Buzzer_Main *****************
 16893 ;; Defined at:
 16894 ;;		line 46 in file "../src/Buzzer_B1.c"
 16895 ;; Parameters:    Size  Location     Type
 16896 ;;		None
 16897 ;; Auto vars:     Size  Location     Type
 16898 ;;		None
 16899 ;; Return value:  Size  Location     Type
 16900 ;;		None               void
 16901 ;; Registers used:
 16902 ;;		wreg, status,2, status,0
 16903 ;; Tracked objects:
 16904 ;;		On entry : 0/0
 16905 ;;		On exit  : 0/0
 16906 ;;		Unchanged: 0/0
 16907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16910 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16911 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16912 ;;Total ram usage:        1 bytes
 16913 ;; Hardware stack levels used:    1
 16914 ;; Hardware stack levels required when called:    5
 16915 ;; This function calls:
 16916 ;;		Nothing
 16917 ;; This function is called by:
 16918 ;;		_main
 16919 ;; This function uses a non-reentrant model
 16920 ;;
 16921                           
 16922                           
 16923                           ;psect for function _Buzzer_Main
 16924  16BD                     _Buzzer_Main:	
 16925                           
 16926                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 16927                           
 16928                           ;incstack = 0
 16929                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 16930  16BD  0021               	movlb	1	; select bank1
 16931  16BE  1CB2               	btfss	_Buz1^(0+128),1
 16932  16BF  0008               	return
 16933                           
 16934                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 16935  16C0  3001               	movlw	1
 16936  16C1  07B3               	addwf	(_Buz1^(0+128)+1),f
 16937  16C2  3000               	movlw	0
 16938  16C3  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 16939                           
 16940                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 16941  16C4  0839               	movf	((_Buz1+1)^(0+128)+6),w
 16942  16C5  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 16943  16C6  1D03               	skipz
 16944  16C7  2ECA               	goto	u9555
 16945  16C8  0838               	movf	(_Buz1^(0+128)+6),w
 16946  16C9  0233               	subwf	(_Buz1^(0+128)+1),w
 16947  16CA                     u9555:	
 16948  16CA  1C03               	skipc
 16949  16CB  0008               	return
 16950                           
 16951                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 16952  16CC  01B3               	clrf	(_Buz1^(0+128)+1)
 16953  16CD  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 16954                           
 16955                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 16956  16CE  12B2               	bcf	_Buz1^(0+128),5
 16957  16CF  0020               	movlb	0	; select bank0
 16958  16D0  1D8D               	btfss	13,3	;volatile
 16959  16D1  2ED4               	goto	l9251
 16960  16D2  0021               	movlb	1	; select bank1
 16961  16D3  16B2               	bsf	_Buz1^(0+128),5
 16962  16D4                     l9251:	
 16963                           
 16964                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 16965  16D4  0021               	movlb	1	; select bank1
 16966  16D5  1AB2               	btfsc	_Buz1^(0+128),5
 16967  16D6  2F00               	goto	l102
 16968                           
 16969                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 16970  16D7  08B5               	movf	(_Buz1^(0+128)+3),f
 16971  16D8  1D03               	skipz
 16972  16D9  2EFC               	goto	l103
 16973                           
 16974                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 16975  16DA  1DB2               	btfss	_Buz1^(0+128),3
 16976  16DB  2EEA               	goto	l104
 16977                           
 16978                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 16979  16DC  11B2               	bcf	_Buz1^(0+128),3
 16980                           
 16981                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 16982  16DD  0836               	movf	(_Buz1^(0+128)+4),w
 16983  16DE  0020               	movlb	0	; select bank0
 16984  16DF  00A0               	movwf	??_Buzzer_Main
 16985  16E0  0820               	movf	??_Buzzer_Main,w
 16986  16E1  0021               	movlb	1	; select bank1
 16987  16E2  00B5               	movwf	(_Buz1^(0+128)+3)
 16988                           
 16989                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 16990  16E3  083B               	movf	((_Buz1+1)^(0+128)+8),w
 16991  16E4  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 16992  16E5  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 16993  16E6  083A               	movf	(_Buz1^(0+128)+8),w
 16994  16E7  01B8               	clrf	(_Buz1^(0+128)+6)
 16995  16E8  07B8               	addwf	(_Buz1^(0+128)+6),f
 16996                           
 16997                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 16998  16E9  0008               	return
 16999  16EA                     l104:	
 17000  16EA  1E32               	btfss	_Buz1^(0+128),4
 17001  16EB  2EFA               	goto	l106
 17002                           
 17003                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17004  16EC  1232               	bcf	_Buz1^(0+128),4
 17005                           
 17006                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17007  16ED  0837               	movf	(_Buz1^(0+128)+5),w
 17008  16EE  0020               	movlb	0	; select bank0
 17009  16EF  00A0               	movwf	??_Buzzer_Main
 17010  16F0  0820               	movf	??_Buzzer_Main,w
 17011  16F1  0021               	movlb	1	; select bank1
 17012  16F2  00B5               	movwf	(_Buz1^(0+128)+3)
 17013                           
 17014                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17015  16F3  083D               	movf	((_Buz1+1)^(0+128)+10),w
 17016  16F4  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 17017  16F5  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 17018  16F6  083C               	movf	(_Buz1^(0+128)+10),w
 17019  16F7  01B8               	clrf	(_Buz1^(0+128)+6)
 17020  16F8  07B8               	addwf	(_Buz1^(0+128)+6),f
 17021                           
 17022                           ;Buzzer_B1.c: 62: } else {
 17023  16F9  0008               	return
 17024  16FA                     l106:	
 17025                           
 17026                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17027  16FA  10B2               	bcf	_Buz1^(0+128),1
 17028                           
 17029                           ;Buzzer_B1.c: 64: }
 17030                           ;Buzzer_B1.c: 65: } else {
 17031  16FB  0008               	return
 17032  16FC                     l103:	
 17033                           
 17034                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17035  16FC  16B2               	bsf	_Buz1^(0+128),5
 17036                           
 17037                           ;Buzzer_B1.c: 68: RB3 = 1;
 17038  16FD  0020               	movlb	0	; select bank0
 17039  16FE  158D               	bsf	13,3	;volatile
 17040                           
 17041                           ;Buzzer_B1.c: 69: }
 17042                           ;Buzzer_B1.c: 70: } else {
 17043  16FF  0008               	return
 17044  1700                     l102:	
 17045                           
 17046                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17047  1700  12B2               	bcf	_Buz1^(0+128),5
 17048                           
 17049                           ;Buzzer_B1.c: 73: RB3 = 0;
 17050  1701  0020               	movlb	0	; select bank0
 17051  1702  118D               	bcf	13,3	;volatile
 17052                           
 17053                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17054  1703  3001               	movlw	1
 17055  1704  0021               	movlb	1	; select bank1
 17056  1705  02B5               	subwf	(_Buz1^(0+128)+3),f
 17057  1706  0008               	return
 17058  1707                     __end_of_Buzzer_Main:	
 17059                           
 17060                           	psect	text125
 17061  1D6A                     __ptext125:	
 17062 ;; *************** function _Buzzer_Initialization *****************
 17063 ;; Defined at:
 17064 ;;		line 11 in file "../src/Buzzer_B1.c"
 17065 ;; Parameters:    Size  Location     Type
 17066 ;;		None
 17067 ;; Auto vars:     Size  Location     Type
 17068 ;;		None
 17069 ;; Return value:  Size  Location     Type
 17070 ;;		None               void
 17071 ;; Registers used:
 17072 ;;		None
 17073 ;; Tracked objects:
 17074 ;;		On entry : 0/0
 17075 ;;		On exit  : 0/0
 17076 ;;		Unchanged: 0/0
 17077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17082 ;;Total ram usage:        0 bytes
 17083 ;; Hardware stack levels used:    1
 17084 ;; Hardware stack levels required when called:    5
 17085 ;; This function calls:
 17086 ;;		Nothing
 17087 ;; This function is called by:
 17088 ;;		_main
 17089 ;; This function uses a non-reentrant model
 17090 ;;
 17091                           
 17092                           
 17093                           ;psect for function _Buzzer_Initialization
 17094  1D6A                     _Buzzer_Initialization:	
 17095                           
 17096                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 17097                           
 17098                           ;incstack = 0
 17099                           ; Regs used in _Buzzer_Initialization: []
 17100  1D6A  0021               	movlb	1	; select bank1
 17101  1D6B  1432               	bsf	_Buz1^(0+128),0
 17102  1D6C  0008               	return
 17103  1D6D                     __end_of_Buzzer_Initialization:	
 17104                           
 17105                           	psect	intentry
 17106  0004                     __pintentry:	
 17107 ;; *************** function _ISR *****************
 17108 ;; Defined at:
 17109 ;;		line 107 in file "../src/MCU_B1.c"
 17110 ;; Parameters:    Size  Location     Type
 17111 ;;		None
 17112 ;; Auto vars:     Size  Location     Type
 17113 ;;		None
 17114 ;; Return value:  Size  Location     Type
 17115 ;;		None               void
 17116 ;; Registers used:
 17117 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17118 ;; Tracked objects:
 17119 ;;		On entry : 0/0
 17120 ;;		On exit  : 0/0
 17121 ;;		Unchanged: 0/0
 17122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17125 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17126 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17127 ;;Total ram usage:        1 bytes
 17128 ;; Hardware stack levels used:    1
 17129 ;; Hardware stack levels required when called:    4
 17130 ;; This function calls:
 17131 ;;		_IOC_ISR
 17132 ;;		_TMR0_ISR
 17133 ;; This function is called by:
 17134 ;;		Interrupt level 1
 17135 ;; This function uses a non-reentrant model
 17136 ;;
 17137                           
 17138  0004                     _ISR:	
 17139                           
 17140                           ;incstack = 0
 17141                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17142  0004  147E               	bsf	126,0	;set compiler interrupt flag
 17143  0005  3180               	pagesel	$
 17144  0006  0020               	movlb	0	; select bank0
 17145  0007  087F               	movf	127,w
 17146  0008  00F5               	movwf	??_ISR
 17147                           
 17148                           ;MCU_B1.c: 109: IOC_ISR();
 17149  0009  319E  2690  3180   	fcall	_IOC_ISR
 17150                           
 17151                           ;MCU_B1.c: 111: TMR0_ISR();
 17152  000C  3191  21F9         	fcall	_TMR0_ISR
 17153  000E  0875               	movf	??_ISR,w
 17154  000F  0020               	movlb	0	; select bank0
 17155  0010  00FF               	movwf	127
 17156  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 17157  0012  0009               	retfie
 17158  0013                     __end_of_ISR:	
 17159                           
 17160                           	psect	text127
 17161  11F9                     __ptext127:	
 17162 ;; *************** function _TMR0_ISR *****************
 17163 ;; Defined at:
 17164 ;;		line 135 in file "../src/MCU_B1.c"
 17165 ;; Parameters:    Size  Location     Type
 17166 ;;		None
 17167 ;; Auto vars:     Size  Location     Type
 17168 ;;		None
 17169 ;; Return value:  Size  Location     Type
 17170 ;;		None               void
 17171 ;; Registers used:
 17172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17173 ;; Tracked objects:
 17174 ;;		On entry : 0/0
 17175 ;;		On exit  : 0/0
 17176 ;;		Unchanged: 0/0
 17177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17182 ;;Total ram usage:        0 bytes
 17183 ;; Hardware stack levels used:    1
 17184 ;; Hardware stack levels required when called:    2
 17185 ;; This function calls:
 17186 ;;		_setDimmerLights_IntrControl
 17187 ;; This function is called by:
 17188 ;;		_ISR
 17189 ;; This function uses a non-reentrant model
 17190 ;;
 17191                           
 17192                           
 17193                           ;psect for function _TMR0_ISR
 17194  11F9                     _TMR0_ISR:	
 17195                           
 17196                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 17197                           
 17198                           ;incstack = 0
 17199                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17200  11F9  1E8B               	btfss	11,5	;volatile
 17201  11FA  0008               	return
 17202  11FB  1D0B               	btfss	11,2	;volatile
 17203  11FC  0008               	return
 17204                           
 17205                           ;MCU_B1.c: 138: TMR0 = (256-190);
 17206  11FD  3042               	movlw	66
 17207  11FE  0020               	movlb	0	; select bank0
 17208  11FF  0095               	movwf	21	;volatile
 17209                           
 17210                           ;MCU_B1.c: 139: TMR0IF = 0;
 17211  1200  110B               	bcf	11,2	;volatile
 17212                           
 17213                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 17214  1201  3001               	movlw	1
 17215  1202  3180  2046  3191   	fcall	_setDimmerLights_IntrControl
 17216                           
 17217                           ;MCU_B1.c: 160: Timer0.Count++;
 17218  1205  3001               	movlw	1
 17219  1206  0022               	movlb	2	; select bank2
 17220  1207  07B6               	addwf	(_Timer0^(0+256)+1),f
 17221  1208  3000               	movlw	0
 17222  1209  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 17223                           
 17224                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 17225  120A  3001               	movlw	1
 17226  120B  3E35               	addlw	_Timer0& (0+255)
 17227  120C  0086               	movwf	6
 17228  120D  3001               	movlw	1	; select bank2/3
 17229  120E  0087               	movwf	7
 17230  120F  3F40               	moviw [0]fsr1
 17231  1210  3A64               	xorlw	100
 17232  1211  1D03               	skipz
 17233  1212  2A15               	goto	u696_25
 17234  1213  3F41               	moviw [1]fsr1
 17235  1214  3A00               	xorlw	0
 17236  1215                     u696_25:	
 17237  1215  1D03               	skipz
 17238  1216  0008               	return
 17239                           
 17240                           ;MCU_B1.c: 162: Timer0.Count = 0;
 17241  1217  01B6               	clrf	(_Timer0^(0+256)+1)
 17242  1218  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 17243                           
 17244                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 17245  1219  0021               	movlb	1	; select bank1
 17246  121A  14A0               	bsf	_myMain^(0+128),1
 17247  121B  0008               	return
 17248  121C                     __end_of_TMR0_ISR:	
 17249                           
 17250                           	psect	text128
 17251  0046                     __ptext128:	
 17252 ;; *************** function _setDimmerLights_IntrControl *****************
 17253 ;; Defined at:
 17254 ;;		line 94 in file "../src/Dimmer_B1.c"
 17255 ;; Parameters:    Size  Location     Type
 17256 ;;  lights          1    wreg     unsigned char 
 17257 ;; Auto vars:     Size  Location     Type
 17258 ;;  lights          1    4[COMMON] unsigned char 
 17259 ;; Return value:  Size  Location     Type
 17260 ;;		None               void
 17261 ;; Registers used:
 17262 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17263 ;; Tracked objects:
 17264 ;;		On entry : 0/0
 17265 ;;		On exit  : 0/0
 17266 ;;		Unchanged: 0/0
 17267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17269 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17270 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17271 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17272 ;;Total ram usage:        3 bytes
 17273 ;; Hardware stack levels used:    1
 17274 ;; Hardware stack levels required when called:    1
 17275 ;; This function calls:
 17276 ;;		_DimmerIntrPointSelect
 17277 ;; This function is called by:
 17278 ;;		_TMR0_ISR
 17279 ;; This function uses a non-reentrant model
 17280 ;;
 17281                           
 17282                           
 17283                           ;psect for function _setDimmerLights_IntrControl
 17284  0046                     _setDimmerLights_IntrControl:	
 17285                           
 17286                           ;incstack = 0
 17287                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17288                           ;setDimmerLights_IntrControl@lights stored from wreg
 17289  0046  00F4               	movwf	setDimmerLights_IntrControl@lights
 17290                           
 17291                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 17292  0047  0874               	movf	setDimmerLights_IntrControl@lights,w
 17293  0048  319E  260A  3180   	fcall	_DimmerIntrPointSelect
 17294                           
 17295                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 17296  004B  0877               	movf	_DimmerLightsIntr,w
 17297  004C  0086               	movwf	6
 17298  004D  3001               	movlw	1	; select bank2/3
 17299  004E  0087               	movwf	7
 17300  004F  1C01               	btfss	1,0
 17301  0050  289B               	goto	i1l6697
 17302                           
 17303                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 17304  0051  3001               	movlw	1
 17305  0052  00F2               	movwf	??_setDimmerLights_IntrControl
 17306  0053  0877               	movf	_DimmerLightsIntr,w
 17307  0054  3E03               	addlw	3
 17308  0055  0086               	movwf	6
 17309  0056  3001               	movlw	1	; select bank2/3
 17310  0057  0087               	movwf	7
 17311  0058  0872               	movf	??_setDimmerLights_IntrControl,w
 17312  0059  0781               	addwf	1,f
 17313                           
 17314                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r->Correction)) {
 17315  005A  0876               	movf	_Dimmer,w
 17316  005B  3E02               	addlw	2
 17317  005C  0086               	movwf	6
 17318  005D  0187               	clrf	7
 17319  005E  0877               	movf	_DimmerLightsIntr,w
 17320  005F  3E04               	addlw	4
 17321  0060  0084               	movwf	4
 17322  0061  3001               	movlw	1	; select bank2/3
 17323  0062  0085               	movwf	5
 17324  0063  0800               	movf	0,w
 17325  0064  0701               	addwf	1,w
 17326  0065  00F2               	movwf	??_setDimmerLights_IntrControl
 17327  0066  01F3               	clrf	??_setDimmerLights_IntrControl+1
 17328  0067  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 17329  0068  0877               	movf	_DimmerLightsIntr,w
 17330  0069  3E03               	addlw	3
 17331  006A  0086               	movwf	6
 17332  006B  3001               	movlw	1	; select bank2/3
 17333  006C  0087               	movwf	7
 17334  006D  0873               	movf	??_setDimmerLights_IntrControl+1,w
 17335  006E  3A80               	xorlw	128
 17336  006F  3C80               	sublw	128
 17337  0070  1D03               	skipz
 17338  0071  2874               	goto	u573_25
 17339  0072  0872               	movf	??_setDimmerLights_IntrControl,w
 17340  0073  0201               	subwf	1,w
 17341  0074                     u573_25:	
 17342  0074  1C03               	skipc
 17343  0075  299E               	goto	i1l6755
 17344                           
 17345                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 17346  0076  0877               	movf	_DimmerLightsIntr,w
 17347  0077  3E03               	addlw	3
 17348  0078  0086               	movwf	6
 17349  0079  3001               	movlw	1	; select bank2/3
 17350  007A  0087               	movwf	7
 17351  007B  0181               	clrf	1
 17352                           
 17353                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 17354  007C  0877               	movf	_DimmerLightsIntr,w
 17355  007D  0086               	movwf	6
 17356  007E  3001               	movlw	1	; select bank2/3
 17357  007F  0087               	movwf	7
 17358  0080  1001               	bcf	1,0
 17359                           
 17360                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 17361  0081  0877               	movf	_DimmerLightsIntr,w
 17362  0082  0086               	movwf	6
 17363  0083  3001               	movlw	1	; select bank2/3
 17364  0084  0087               	movwf	7
 17365  0085  1F01               	btfss	1,6
 17366  0086  299E               	goto	i1l6755
 17367                           
 17368                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 17369  0087  0877               	movf	_DimmerLightsIntr,w
 17370  0088  3E08               	addlw	8
 17371  0089  0086               	movwf	6
 17372  008A  3001               	movlw	1	; select bank2/3
 17373  008B  0087               	movwf	7
 17374  008C  1401               	bsf	1,0
 17375                           
 17376                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 17377  008D  0877               	movf	_DimmerLightsIntr,w
 17378  008E  3E08               	addlw	8
 17379  008F  0086               	movwf	6
 17380  0090  3001               	movlw	1	; select bank2/3
 17381  0091  0087               	movwf	7
 17382  0092  1681               	bsf	1,5
 17383                           
 17384                           ;Dimmer_B1.c: 107: if (lights == 1) {
 17385  0093  0874               	movf	setDimmerLights_IntrControl@lights,w
 17386  0094  3A01               	xorlw	1
 17387  0095  1D03               	skipz
 17388  0096  299E               	goto	i1l6755
 17389                           
 17390                           ;Dimmer_B1.c: 108: RA7 = 1;
 17391  0097  0020               	movlb	0	; select bank0
 17392  0098  178C               	bsf	12,7	;volatile
 17393                           
 17394                           ;Dimmer_B1.c: 109: RB4=1;
 17395  0099  160D               	bsf	13,4	;volatile
 17396                           
 17397                           ;Dimmer_B1.c: 110: }
 17398                           ;Dimmer_B1.c: 122: }
 17399                           ;Dimmer_B1.c: 123: }
 17400                           ;Dimmer_B1.c: 124: } else {
 17401  009A  299E               	goto	i1l6755
 17402  009B                     i1l6697:	
 17403                           
 17404                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 17405  009B  0877               	movf	_DimmerLightsIntr,w
 17406  009C  3E08               	addlw	8
 17407  009D  0086               	movwf	6
 17408  009E  3001               	movlw	1	; select bank2/3
 17409  009F  0087               	movwf	7
 17410  00A0  1C01               	btfss	1,0
 17411  00A1  299E               	goto	i1l6755
 17412                           
 17413                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 17414  00A2  0877               	movf	_DimmerLightsIntr,w
 17415  00A3  3E08               	addlw	8
 17416  00A4  0086               	movwf	6
 17417  00A5  3001               	movlw	1	; select bank2/3
 17418  00A6  0087               	movwf	7
 17419  00A7  1001               	bcf	1,0
 17420                           
 17421                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 17422  00A8  0877               	movf	_DimmerLightsIntr,w
 17423  00A9  0086               	movwf	6
 17424  00AA  3001               	movlw	1	; select bank2/3
 17425  00AB  0087               	movwf	7
 17426  00AC  1C81               	btfss	1,1
 17427  00AD  299E               	goto	i1l6755
 17428                           
 17429                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 17430  00AE  3001               	movlw	1
 17431  00AF  00F2               	movwf	??_setDimmerLights_IntrControl
 17432  00B0  0A77               	incf	_DimmerLightsIntr,w
 17433  00B1  0086               	movwf	6
 17434  00B2  3001               	movlw	1	; select bank2/3
 17435  00B3  0087               	movwf	7
 17436  00B4  0872               	movf	??_setDimmerLights_IntrControl,w
 17437  00B5  0781               	addwf	1,f
 17438                           
 17439                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17440  00B6  0A77               	incf	_DimmerLightsIntr,w
 17441  00B7  0086               	movwf	6
 17442  00B8  3001               	movlw	1	; select bank2/3
 17443  00B9  0087               	movwf	7
 17444  00BA  0877               	movf	_DimmerLightsIntr,w
 17445  00BB  3E02               	addlw	2
 17446  00BC  0084               	movwf	4
 17447  00BD  3001               	movlw	1	; select bank2/3
 17448  00BE  0085               	movwf	5
 17449  00BF  0800               	movf	0,w
 17450  00C0  0201               	subwf	1,w
 17451  00C1  1C03               	skipc
 17452  00C2  299E               	goto	i1l6755
 17453                           
 17454                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 17455  00C3  0A77               	incf	_DimmerLightsIntr,w
 17456  00C4  0086               	movwf	6
 17457  00C5  3001               	movlw	1	; select bank2/3
 17458  00C6  0087               	movwf	7
 17459  00C7  0181               	clrf	1
 17460                           
 17461                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 17462  00C8  0877               	movf	_DimmerLightsIntr,w
 17463  00C9  0086               	movwf	6
 17464  00CA  3001               	movlw	1	; select bank2/3
 17465  00CB  0087               	movwf	7
 17466  00CC  1D81               	btfss	1,3
 17467  00CD  2904               	goto	i1l6723
 17468                           
 17469                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 17470  00CE  0877               	movf	_DimmerLightsIntr,w
 17471  00CF  0086               	movwf	6
 17472  00D0  3001               	movlw	1	; select bank2/3
 17473  00D1  0087               	movwf	7
 17474  00D2  1A01               	btfsc	1,4
 17475  00D3  28EB               	goto	i1l6717
 17476                           
 17477                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 17478  00D4  0877               	movf	_DimmerLightsIntr,w
 17479  00D5  3E04               	addlw	4
 17480  00D6  0086               	movwf	6
 17481  00D7  3001               	movlw	1	; select bank2/3
 17482  00D8  0087               	movwf	7
 17483  00D9  3021               	movlw	33
 17484  00DA  0201               	subwf	1,w
 17485  00DB  1C03               	skipc
 17486  00DC  28E5               	goto	i1l6715
 17487                           
 17488                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 17489  00DD  0877               	movf	_DimmerLightsIntr,w
 17490  00DE  3E04               	addlw	4
 17491  00DF  0086               	movwf	6
 17492  00E0  3001               	movlw	1	; select bank2/3
 17493  00E1  0087               	movwf	7
 17494  00E2  3001               	movlw	1
 17495  00E3  0281               	subwf	1,f
 17496                           
 17497                           ;Dimmer_B1.c: 135: } else {
 17498  00E4  299E               	goto	i1l6755
 17499  00E5                     i1l6715:	
 17500                           
 17501                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 17502  00E5  0877               	movf	_DimmerLightsIntr,w
 17503  00E6  0086               	movwf	6
 17504  00E7  3001               	movlw	1	; select bank2/3
 17505  00E8  0087               	movwf	7
 17506  00E9  1601               	bsf	1,4
 17507                           
 17508                           ;Dimmer_B1.c: 137: }
 17509                           ;Dimmer_B1.c: 138: } else {
 17510  00EA  299E               	goto	i1l6755
 17511  00EB                     i1l6717:	
 17512                           
 17513                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17514  00EB  0877               	movf	_DimmerLightsIntr,w
 17515  00EC  3E04               	addlw	4
 17516  00ED  0086               	movwf	6
 17517  00EE  3001               	movlw	1	; select bank2/3
 17518  00EF  0087               	movwf	7
 17519  00F0  303C               	movlw	60
 17520  00F1  0201               	subwf	1,w
 17521  00F2  1803               	skipnc
 17522  00F3  28FE               	goto	i1l6721
 17523                           
 17524                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 17525  00F4  3001               	movlw	1
 17526  00F5  00F2               	movwf	??_setDimmerLights_IntrControl
 17527  00F6  0877               	movf	_DimmerLightsIntr,w
 17528  00F7  3E04               	addlw	4
 17529  00F8  0086               	movwf	6
 17530  00F9  3001               	movlw	1	; select bank2/3
 17531  00FA  0087               	movwf	7
 17532  00FB  0872               	movf	??_setDimmerLights_IntrControl,w
 17533  00FC  0781               	addwf	1,f
 17534                           
 17535                           ;Dimmer_B1.c: 141: } else {
 17536  00FD  299E               	goto	i1l6755
 17537  00FE                     i1l6721:	
 17538                           
 17539                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 17540  00FE  0877               	movf	_DimmerLightsIntr,w
 17541  00FF  0086               	movwf	6
 17542  0100  3001               	movlw	1	; select bank2/3
 17543  0101  0087               	movwf	7
 17544  0102  1201               	bcf	1,4
 17545                           
 17546                           ;Dimmer_B1.c: 143: }
 17547                           ;Dimmer_B1.c: 144: }
 17548                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 17549  0103  299E               	goto	i1l6755
 17550  0104                     i1l6723:	
 17551  0104  0877               	movf	_DimmerLightsIntr,w
 17552  0105  0086               	movwf	6
 17553  0106  3001               	movlw	1	; select bank2/3
 17554  0107  0087               	movwf	7
 17555  0108  1D01               	btfss	1,2
 17556  0109  294B               	goto	i1l6737
 17557                           
 17558                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17559  010A  0877               	movf	_DimmerLightsIntr,w
 17560  010B  3E05               	addlw	5
 17561  010C  0086               	movwf	6
 17562  010D  3001               	movlw	1	; select bank2/3
 17563  010E  0087               	movwf	7
 17564  010F  0877               	movf	_DimmerLightsIntr,w
 17565  0110  3E04               	addlw	4
 17566  0111  0084               	movwf	4
 17567  0112  3001               	movlw	1	; select bank2/3
 17568  0113  0085               	movwf	5
 17569  0114  0800               	movf	0,w
 17570  0115  0201               	subwf	1,w
 17571  0116  1803               	skipnc
 17572  0117  2920               	goto	i1l6729
 17573                           
 17574                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 17575  0118  0877               	movf	_DimmerLightsIntr,w
 17576  0119  3E04               	addlw	4
 17577  011A  0086               	movwf	6
 17578  011B  3001               	movlw	1	; select bank2/3
 17579  011C  0087               	movwf	7
 17580  011D  3001               	movlw	1
 17581  011E  0281               	subwf	1,f
 17582                           
 17583                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17584  011F  2937               	goto	i1l6733
 17585  0120                     i1l6729:	
 17586  0120  0877               	movf	_DimmerLightsIntr,w
 17587  0121  3E04               	addlw	4
 17588  0122  0086               	movwf	6
 17589  0123  3001               	movlw	1	; select bank2/3
 17590  0124  0087               	movwf	7
 17591  0125  0877               	movf	_DimmerLightsIntr,w
 17592  0126  3E05               	addlw	5
 17593  0127  0084               	movwf	4
 17594  0128  3001               	movlw	1	; select bank2/3
 17595  0129  0085               	movwf	5
 17596  012A  0800               	movf	0,w
 17597  012B  0201               	subwf	1,w
 17598  012C  1803               	skipnc
 17599  012D  2937               	goto	i1l6733
 17600                           
 17601                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 17602  012E  3001               	movlw	1
 17603  012F  00F2               	movwf	??_setDimmerLights_IntrControl
 17604  0130  0877               	movf	_DimmerLightsIntr,w
 17605  0131  3E04               	addlw	4
 17606  0132  0086               	movwf	6
 17607  0133  3001               	movlw	1	; select bank2/3
 17608  0134  0087               	movwf	7
 17609  0135  0872               	movf	??_setDimmerLights_IntrControl,w
 17610  0136  0781               	addwf	1,f
 17611  0137                     i1l6733:	
 17612                           
 17613                           ;Dimmer_B1.c: 150: }
 17614                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17615  0137  0877               	movf	_DimmerLightsIntr,w
 17616  0138  3E05               	addlw	5
 17617  0139  0086               	movwf	6
 17618  013A  3001               	movlw	1	; select bank2/3
 17619  013B  0087               	movwf	7
 17620  013C  0877               	movf	_DimmerLightsIntr,w
 17621  013D  3E04               	addlw	4
 17622  013E  0084               	movwf	4
 17623  013F  3001               	movlw	1	; select bank2/3
 17624  0140  0085               	movwf	5
 17625  0141  0800               	movf	0,w
 17626  0142  0601               	xorwf	1,w
 17627  0143  1D03               	skipz
 17628  0144  299E               	goto	i1l6755
 17629                           
 17630                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 17631  0145  0877               	movf	_DimmerLightsIntr,w
 17632  0146  0086               	movwf	6
 17633  0147  3001               	movlw	1	; select bank2/3
 17634  0148  0087               	movwf	7
 17635  0149  1101               	bcf	1,2
 17636  014A  2966               	goto	i1l6743
 17637  014B                     i1l6737:	
 17638                           ;Dimmer_B1.c: 154: }
 17639                           ;Dimmer_B1.c: 155: } else {
 17640                           
 17641                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 17642                           
 17643                           
 17644                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 17645  014B  0877               	movf	_DimmerLightsIntr,w
 17646  014C  0086               	movwf	6
 17647  014D  3001               	movlw	1	; select bank2/3
 17648  014E  0087               	movwf	7
 17649  014F  1E81               	btfss	1,5
 17650  0150  296C               	goto	i1l6745
 17651                           
 17652                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 17653  0151  0877               	movf	_DimmerLightsIntr,w
 17654  0152  3E04               	addlw	4
 17655  0153  0086               	movwf	6
 17656  0154  3001               	movlw	1	; select bank2/3
 17657  0155  0087               	movwf	7
 17658  0156  3001               	movlw	1
 17659  0157  0281               	subwf	1,f
 17660                           
 17661                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17662  0158  0877               	movf	_DimmerLightsIntr,w
 17663  0159  3E05               	addlw	5
 17664  015A  0086               	movwf	6
 17665  015B  3001               	movlw	1	; select bank2/3
 17666  015C  0087               	movwf	7
 17667  015D  0877               	movf	_DimmerLightsIntr,w
 17668  015E  3E04               	addlw	4
 17669  015F  0084               	movwf	4
 17670  0160  3001               	movlw	1	; select bank2/3
 17671  0161  0085               	movwf	5
 17672  0162  0800               	movf	0,w
 17673  0163  0201               	subwf	1,w
 17674  0164  1C03               	skipc
 17675  0165  299E               	goto	i1l6755
 17676  0166                     i1l6743:	
 17677                           
 17678                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 17679  0166  0877               	movf	_DimmerLightsIntr,w
 17680  0167  0086               	movwf	6
 17681  0168  3001               	movlw	1	; select bank2/3
 17682  0169  0087               	movwf	7
 17683  016A  1081               	bcf	1,1
 17684                           
 17685                           ;Dimmer_B1.c: 160: }
 17686                           ;Dimmer_B1.c: 161: } else {
 17687  016B  299E               	goto	i1l6755
 17688  016C                     i1l6745:	
 17689                           
 17690                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 17691  016C  3001               	movlw	1
 17692  016D  00F2               	movwf	??_setDimmerLights_IntrControl
 17693  016E  0877               	movf	_DimmerLightsIntr,w
 17694  016F  3E04               	addlw	4
 17695  0170  0086               	movwf	6
 17696  0171  3001               	movlw	1	; select bank2/3
 17697  0172  0087               	movwf	7
 17698  0173  0872               	movf	??_setDimmerLights_IntrControl,w
 17699  0174  0781               	addwf	1,f
 17700                           
 17701                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17702  0175  0877               	movf	_DimmerLightsIntr,w
 17703  0176  3E04               	addlw	4
 17704  0177  0086               	movwf	6
 17705  0178  3001               	movlw	1	; select bank2/3
 17706  0179  0087               	movwf	7
 17707  017A  0877               	movf	_DimmerLightsIntr,w
 17708  017B  3E06               	addlw	6
 17709  017C  0084               	movwf	4
 17710  017D  3001               	movlw	1	; select bank2/3
 17711  017E  0085               	movwf	5
 17712  017F  0800               	movf	0,w
 17713  0180  0201               	subwf	1,w
 17714  0181  1C03               	skipc
 17715  0182  299E               	goto	i1l6755
 17716                           
 17717                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 17718  0183  0877               	movf	_DimmerLightsIntr,w
 17719  0184  0086               	movwf	6
 17720  0185  3001               	movlw	1	; select bank2/3
 17721  0186  0087               	movwf	7
 17722  0187  1081               	bcf	1,1
 17723                           
 17724                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 17725  0188  0877               	movf	_DimmerLightsIntr,w
 17726  0189  0086               	movwf	6
 17727  018A  3001               	movlw	1	; select bank2/3
 17728  018B  0087               	movwf	7
 17729  018C  1301               	bcf	1,6
 17730                           
 17731                           ;Dimmer_B1.c: 166: DimmerLightsIntr->Clear = 1;
 17732  018D  0877               	movf	_DimmerLightsIntr,w
 17733  018E  3E09               	addlw	9
 17734  018F  0086               	movwf	6
 17735  0190  3001               	movlw	1	; select bank2/3
 17736  0191  0087               	movwf	7
 17737  0192  1501               	bsf	1,2
 17738                           
 17739                           ;Dimmer_B1.c: 167: Dimmer->Detect = 1;
 17740  0193  0876               	movf	_Dimmer,w
 17741  0194  0086               	movwf	6
 17742  0195  0187               	clrf	7
 17743  0196  1401               	bsf	1,0
 17744                           
 17745                           ;Dimmer_B1.c: 169: if (lights == 1) {
 17746  0197  0874               	movf	setDimmerLights_IntrControl@lights,w
 17747  0198  3A01               	xorlw	1
 17748  0199  1D03               	skipz
 17749  019A  299E               	goto	i1l6755
 17750                           
 17751                           ;Dimmer_B1.c: 170: RA3 = 0;
 17752  019B  0020               	movlb	0	; select bank0
 17753  019C  118C               	bcf	12,3	;volatile
 17754                           
 17755                           ;Dimmer_B1.c: 171: RC7=!1;
 17756  019D  138E               	bcf	14,7	;volatile
 17757  019E                     i1l6755:	
 17758                           ;Dimmer_B1.c: 172: }
 17759                           ;Dimmer_B1.c: 184: ;;
 17760                           
 17761                           
 17762                           ;Dimmer_B1.c: 185: }
 17763                           ;Dimmer_B1.c: 186: }
 17764                           ;Dimmer_B1.c: 187: }
 17765                           ;Dimmer_B1.c: 188: }
 17766                           ;Dimmer_B1.c: 189: }
 17767                           ;Dimmer_B1.c: 190: }
 17768                           ;Dimmer_B1.c: 191: }
 17769                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->Triac == 1) {
 17770  019E  0877               	movf	_DimmerLightsIntr,w
 17771  019F  3E08               	addlw	8
 17772  01A0  0086               	movwf	6
 17773  01A1  3001               	movlw	1	; select bank2/3
 17774  01A2  0087               	movwf	7
 17775  01A3  1E81               	btfss	1,5
 17776  01A4  29CA               	goto	i1l6769
 17777                           
 17778                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime++;
 17779  01A5  3001               	movlw	1
 17780  01A6  00F2               	movwf	??_setDimmerLights_IntrControl
 17781  01A7  0877               	movf	_DimmerLightsIntr,w
 17782  01A8  3E07               	addlw	7
 17783  01A9  0086               	movwf	6
 17784  01AA  3001               	movlw	1	; select bank2/3
 17785  01AB  0087               	movwf	7
 17786  01AC  0872               	movf	??_setDimmerLights_IntrControl,w
 17787  01AD  0781               	addwf	1,f
 17788                           
 17789                           ;Dimmer_B1.c: 194: if (DimmerLightsIntr->TriacTime >= 5) {
 17790  01AE  0877               	movf	_DimmerLightsIntr,w
 17791  01AF  3E07               	addlw	7
 17792  01B0  0086               	movwf	6
 17793  01B1  3001               	movlw	1	; select bank2/3
 17794  01B2  0087               	movwf	7
 17795  01B3  3005               	movlw	5
 17796  01B4  0201               	subwf	1,w
 17797  01B5  1C03               	skipc
 17798  01B6  29CA               	goto	i1l6769
 17799                           
 17800                           ;Dimmer_B1.c: 195: DimmerLightsIntr->TriacTime = 0;
 17801  01B7  0877               	movf	_DimmerLightsIntr,w
 17802  01B8  3E07               	addlw	7
 17803  01B9  0086               	movwf	6
 17804  01BA  3001               	movlw	1	; select bank2/3
 17805  01BB  0087               	movwf	7
 17806  01BC  0181               	clrf	1
 17807                           
 17808                           ;Dimmer_B1.c: 196: DimmerLightsIntr->Triac = 0;
 17809  01BD  0877               	movf	_DimmerLightsIntr,w
 17810  01BE  3E08               	addlw	8
 17811  01BF  0086               	movwf	6
 17812  01C0  3001               	movlw	1	; select bank2/3
 17813  01C1  0087               	movwf	7
 17814  01C2  1281               	bcf	1,5
 17815                           
 17816                           ;Dimmer_B1.c: 199: if (lights == 1) {
 17817  01C3  0874               	movf	setDimmerLights_IntrControl@lights,w
 17818  01C4  3A01               	xorlw	1
 17819  01C5  1D03               	skipz
 17820  01C6  29CA               	goto	i1l6769
 17821                           
 17822                           ;Dimmer_B1.c: 200: RA7 = 0;
 17823  01C7  0020               	movlb	0	; select bank0
 17824  01C8  138C               	bcf	12,7	;volatile
 17825                           
 17826                           ;Dimmer_B1.c: 201: RB4=0;
 17827  01C9  120D               	bcf	13,4	;volatile
 17828  01CA                     i1l6769:	
 17829                           
 17830                           ;Dimmer_B1.c: 202: }
 17831                           ;Dimmer_B1.c: 214: }
 17832                           ;Dimmer_B1.c: 215: }
 17833                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacFlag == 1) {
 17834  01CA  0877               	movf	_DimmerLightsIntr,w
 17835  01CB  3E09               	addlw	9
 17836  01CC  0086               	movwf	6
 17837  01CD  3001               	movlw	1	; select bank2/3
 17838  01CE  0087               	movwf	7
 17839  01CF  1E81               	btfss	1,5
 17840  01D0  0008               	return
 17841                           
 17842                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount++;
 17843  01D1  3001               	movlw	1
 17844  01D2  00F2               	movwf	??_setDimmerLights_IntrControl
 17845  01D3  0877               	movf	_DimmerLightsIntr,w
 17846  01D4  3E0A               	addlw	10
 17847  01D5  0086               	movwf	6
 17848  01D6  3001               	movlw	1	; select bank2/3
 17849  01D7  0087               	movwf	7
 17850  01D8  0872               	movf	??_setDimmerLights_IntrControl,w
 17851  01D9  0781               	addwf	1,f
 17852                           
 17853                           ;Dimmer_B1.c: 218: if (DimmerLightsIntr->TriacCount == 70) {
 17854  01DA  0877               	movf	_DimmerLightsIntr,w
 17855  01DB  3E0A               	addlw	10
 17856  01DC  0086               	movwf	6
 17857  01DD  3001               	movlw	1	; select bank2/3
 17858  01DE  0087               	movwf	7
 17859  01DF  0801               	movf	1,w
 17860  01E0  3A46               	xorlw	70
 17861  01E1  1D03               	skipz
 17862  01E2  0008               	return
 17863                           
 17864                           ;Dimmer_B1.c: 219: DimmerLightsIntr->TriacCount = 0;
 17865  01E3  0877               	movf	_DimmerLightsIntr,w
 17866  01E4  3E0A               	addlw	10
 17867  01E5  0086               	movwf	6
 17868  01E6  3001               	movlw	1	; select bank2/3
 17869  01E7  0087               	movwf	7
 17870  01E8  0181               	clrf	1
 17871                           
 17872                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacFlag = 0;
 17873  01E9  0877               	movf	_DimmerLightsIntr,w
 17874  01EA  3E09               	addlw	9
 17875  01EB  0086               	movwf	6
 17876  01EC  3001               	movlw	1	; select bank2/3
 17877  01ED  0087               	movwf	7
 17878  01EE  1281               	bcf	1,5
 17879  01EF  0008               	return
 17880  01F0                     __end_of_setDimmerLights_IntrControl:	
 17881                           
 17882                           	psect	text129
 17883  1E0A                     __ptext129:	
 17884 ;; *************** function _DimmerIntrPointSelect *****************
 17885 ;; Defined at:
 17886 ;;		line 72 in file "../src/Dimmer_B1.c"
 17887 ;; Parameters:    Size  Location     Type
 17888 ;;  lights          1    wreg     unsigned char 
 17889 ;; Auto vars:     Size  Location     Type
 17890 ;;  lights          1    1[COMMON] unsigned char 
 17891 ;; Return value:  Size  Location     Type
 17892 ;;		None               void
 17893 ;; Registers used:
 17894 ;;		wreg
 17895 ;; Tracked objects:
 17896 ;;		On entry : 0/0
 17897 ;;		On exit  : 0/0
 17898 ;;		Unchanged: 0/0
 17899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17901 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17902 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17903 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17904 ;;Total ram usage:        2 bytes
 17905 ;; Hardware stack levels used:    1
 17906 ;; This function calls:
 17907 ;;		Nothing
 17908 ;; This function is called by:
 17909 ;;		_setDimmerLights_IntrControl
 17910 ;; This function uses a non-reentrant model
 17911 ;;
 17912                           
 17913                           
 17914                           ;psect for function _DimmerIntrPointSelect
 17915  1E0A                     _DimmerIntrPointSelect:	
 17916                           
 17917                           ;incstack = 0
 17918                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17919                           ;DimmerIntrPointSelect@lights stored from wreg
 17920  1E0A  00F1               	movwf	DimmerIntrPointSelect@lights
 17921                           
 17922                           ;Dimmer_B1.c: 74: if (lights == 1) {
 17923  1E0B  0871               	movf	DimmerIntrPointSelect@lights,w
 17924  1E0C  3A01               	xorlw	1
 17925  1E0D  1D03               	skipz
 17926  1E0E  0008               	return
 17927                           
 17928                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 17929  1E0F  30C0               	movlw	_DimmerLights1& (0+255)
 17930  1E10  00F0               	movwf	??_DimmerIntrPointSelect
 17931  1E11  0870               	movf	??_DimmerIntrPointSelect,w
 17932  1E12  00F7               	movwf	_DimmerLightsIntr
 17933  1E13  0008               	return
 17934  1E14                     __end_of_DimmerIntrPointSelect:	
 17935                           
 17936                           	psect	text130
 17937  1E90                     __ptext130:	
 17938 ;; *************** function _IOC_ISR *****************
 17939 ;; Defined at:
 17940 ;;		line 298 in file "../src/MCU_B1.c"
 17941 ;; Parameters:    Size  Location     Type
 17942 ;;		None
 17943 ;; Auto vars:     Size  Location     Type
 17944 ;;		None
 17945 ;; Return value:  Size  Location     Type
 17946 ;;		None               void
 17947 ;; Registers used:
 17948 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17949 ;; Tracked objects:
 17950 ;;		On entry : 0/0
 17951 ;;		On exit  : 0/0
 17952 ;;		Unchanged: 0/0
 17953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17958 ;;Total ram usage:        0 bytes
 17959 ;; Hardware stack levels used:    1
 17960 ;; Hardware stack levels required when called:    3
 17961 ;; This function calls:
 17962 ;;		_setDimmerReClock
 17963 ;; This function is called by:
 17964 ;;		_ISR
 17965 ;; This function uses a non-reentrant model
 17966 ;;
 17967                           
 17968                           
 17969                           ;psect for function _IOC_ISR
 17970  1E90                     _IOC_ISR:	
 17971                           
 17972                           ;MCU_B1.c: 299: if (IOCIE == 1 && IOCBF2 == 1) {
 17973                           
 17974                           ;incstack = 0
 17975                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17976  1E90  1D8B               	btfss	11,3	;volatile
 17977  1E91  0008               	return
 17978  1E92  0027               	movlb	7	; select bank7
 17979  1E93  1D16               	btfss	22,2	;volatile
 17980  1E94  0008               	return
 17981                           
 17982                           ;MCU_B1.c: 300: IOCBF2 = 0;
 17983  1E95  1116               	bcf	22,2	;volatile
 17984                           
 17985                           ;MCU_B1.c: 301: IOCIF = 0;
 17986  1E96  100B               	bcf	11,0	;volatile
 17987                           
 17988                           ;MCU_B1.c: 302: if (myMain.PowerON == 1) {
 17989  1E97  0021               	movlb	1	; select bank1
 17990  1E98  1C20               	btfss	_myMain^(0+128),0
 17991  1E99  0008               	return
 17992                           
 17993                           ;MCU_B1.c: 304: setDimmerReClock();
 17994  1E9A  319D  2582         	fcall	_setDimmerReClock
 17995  1E9C  0008               	return
 17996  1E9D                     __end_of_IOC_ISR:	
 17997                           
 17998                           	psect	text131
 17999  1D82                     __ptext131:	
 18000 ;; *************** function _setDimmerReClock *****************
 18001 ;; Defined at:
 18002 ;;		line 170 in file "../src/MCU_B1.c"
 18003 ;; Parameters:    Size  Location     Type
 18004 ;;		None
 18005 ;; Auto vars:     Size  Location     Type
 18006 ;;		None
 18007 ;; Return value:  Size  Location     Type
 18008 ;;		None               void
 18009 ;; Registers used:
 18010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18011 ;; Tracked objects:
 18012 ;;		On entry : 0/0
 18013 ;;		On exit  : 0/0
 18014 ;;		Unchanged: 0/0
 18015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18020 ;;Total ram usage:        0 bytes
 18021 ;; Hardware stack levels used:    1
 18022 ;; Hardware stack levels required when called:    2
 18023 ;; This function calls:
 18024 ;;		_setDimmerLights_IntrIOC_GO
 18025 ;; This function is called by:
 18026 ;;		_IOC_ISR
 18027 ;; This function uses a non-reentrant model
 18028 ;;
 18029                           
 18030                           
 18031                           ;psect for function _setDimmerReClock
 18032  1D82                     _setDimmerReClock:	
 18033                           
 18034                           ;MCU_B1.c: 175: setDimmerLights_IntrIOC_GO(1);
 18035                           
 18036                           ;incstack = 0
 18037                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18038  1D82  3001               	movlw	1
 18039  1D83  3193  230B         	fcall	_setDimmerLights_IntrIOC_GO
 18040  1D85  0008               	return
 18041  1D86                     __end_of_setDimmerReClock:	
 18042                           
 18043                           	psect	text132
 18044  130B                     __ptext132:	
 18045 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18046 ;; Defined at:
 18047 ;;		line 28 in file "../src/Dimmer_B1.c"
 18048 ;; Parameters:    Size  Location     Type
 18049 ;;  lights          1    wreg     unsigned char 
 18050 ;; Auto vars:     Size  Location     Type
 18051 ;;  lights          1    2[COMMON] unsigned char 
 18052 ;; Return value:  Size  Location     Type
 18053 ;;		None               void
 18054 ;; Registers used:
 18055 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18056 ;; Tracked objects:
 18057 ;;		On entry : 0/0
 18058 ;;		On exit  : 0/0
 18059 ;;		Unchanged: 0/0
 18060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18064 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18065 ;;Total ram usage:        1 bytes
 18066 ;; Hardware stack levels used:    1
 18067 ;; Hardware stack levels required when called:    1
 18068 ;; This function calls:
 18069 ;;		_DimmerIntrIOCPointSelect
 18070 ;; This function is called by:
 18071 ;;		_setDimmerReClock
 18072 ;; This function uses a non-reentrant model
 18073 ;;
 18074                           
 18075                           
 18076                           ;psect for function _setDimmerLights_IntrIOC_GO
 18077  130B                     _setDimmerLights_IntrIOC_GO:	
 18078                           
 18079                           ;incstack = 0
 18080                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18081                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18082  130B  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18083                           
 18084                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 18085  130C  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18086  130D  319E  2600  3193   	fcall	_DimmerIntrIOCPointSelect
 18087                           
 18088                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 18089  1310  0878               	movf	_DimmerLightsIntrIOC,w
 18090  1311  0086               	movwf	6
 18091  1312  3001               	movlw	1	; select bank2/3
 18092  1313  0087               	movwf	7
 18093  1314  1801               	btfsc	1,0
 18094  1315  0008               	return
 18095  1316  0878               	movf	_DimmerLightsIntrIOC,w
 18096  1317  3E09               	addlw	9
 18097  1318  0086               	movwf	6
 18098  1319  3001               	movlw	1	; select bank2/3
 18099  131A  0087               	movwf	7
 18100  131B  1A81               	btfsc	1,5
 18101  131C  0008               	return
 18102                           
 18103                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 18104  131D  0878               	movf	_DimmerLightsIntrIOC,w
 18105  131E  0086               	movwf	6
 18106  131F  3001               	movlw	1	; select bank2/3
 18107  1320  0087               	movwf	7
 18108  1321  1401               	bsf	1,0
 18109                           
 18110                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 18111  1322  0878               	movf	_DimmerLightsIntrIOC,w
 18112  1323  3E09               	addlw	9
 18113  1324  0086               	movwf	6
 18114  1325  3001               	movlw	1	; select bank2/3
 18115  1326  0087               	movwf	7
 18116  1327  1681               	bsf	1,5
 18117                           
 18118                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 18119  1328  0020               	movlb	0	; select bank0
 18120  1329  1D0D               	btfss	13,2	;volatile
 18121  132A  2B32               	goto	i1l6347
 18122                           
 18123                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 18124  132B  0876               	movf	_Dimmer,w
 18125  132C  3E02               	addlw	2
 18126  132D  0086               	movwf	6
 18127  132E  0187               	clrf	7
 18128  132F  0181               	clrf	1
 18129  1330  0A81               	incf	1,f
 18130                           
 18131                           ;Dimmer_B1.c: 37: } else {
 18132  1331  0008               	return
 18133  1332                     i1l6347:	
 18134                           
 18135                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 18136  1332  0876               	movf	_Dimmer,w
 18137  1333  3E02               	addlw	2
 18138  1334  0086               	movwf	6
 18139  1335  0187               	clrf	7
 18140  1336  0181               	clrf	1
 18141  1337  0008               	return
 18142  1338                     __end_of_setDimmerLights_IntrIOC_GO:	
 18143                           
 18144                           	psect	text133
 18145  1E00                     __ptext133:	
 18146 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18147 ;; Defined at:
 18148 ;;		line 8 in file "../src/Dimmer_B1.c"
 18149 ;; Parameters:    Size  Location     Type
 18150 ;;  lights          1    wreg     unsigned char 
 18151 ;; Auto vars:     Size  Location     Type
 18152 ;;  lights          1    1[COMMON] unsigned char 
 18153 ;; Return value:  Size  Location     Type
 18154 ;;		None               void
 18155 ;; Registers used:
 18156 ;;		wreg
 18157 ;; Tracked objects:
 18158 ;;		On entry : 0/0
 18159 ;;		On exit  : 0/0
 18160 ;;		Unchanged: 0/0
 18161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18163 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18164 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18165 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18166 ;;Total ram usage:        2 bytes
 18167 ;; Hardware stack levels used:    1
 18168 ;; This function calls:
 18169 ;;		Nothing
 18170 ;; This function is called by:
 18171 ;;		_setDimmerLights_IntrIOC_GO
 18172 ;; This function uses a non-reentrant model
 18173 ;;
 18174                           
 18175                           
 18176                           ;psect for function _DimmerIntrIOCPointSelect
 18177  1E00                     _DimmerIntrIOCPointSelect:	
 18178                           
 18179                           ;incstack = 0
 18180                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18181                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18182  1E00  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18183                           
 18184                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18185  1E01  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18186  1E02  3A01               	xorlw	1
 18187  1E03  1D03               	skipz
 18188  1E04  0008               	return
 18189                           
 18190                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18191  1E05  30C0               	movlw	_DimmerLights1& (0+255)
 18192  1E06  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18193  1E07  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18194  1E08  00F8               	movwf	_DimmerLightsIntrIOC
 18195  1E09  0008               	return
 18196  1E0A                     __end_of_DimmerIntrIOCPointSelect:	
 18197  007E                     btemp	set	126	;btemp
 18198  007E                     pic14e$flags	set	126
 18199  007E                     wtemp	set	126
 18200  007E                     wtemp0	set	126
 18201  0080                     wtemp1	set	128
 18202  0082                     wtemp2	set	130
 18203  0084                     wtemp3	set	132
 18204  0086                     wtemp4	set	134
 18205  0088                     wtemp5	set	136
 18206  007F                     wtemp6	set	127
 18207  007E                     ttemp	set	126
 18208  007E                     ttemp0	set	126
 18209  0081                     ttemp1	set	129
 18210  0084                     ttemp2	set	132
 18211  0087                     ttemp3	set	135
 18212  007F                     ttemp4	set	127
 18213  007E                     ltemp	set	126
 18214  007E                     ltemp0	set	126
 18215  0082                     ltemp1	set	130
 18216  0086                     ltemp2	set	134
 18217  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         191
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     73      78
    BANK1            80      0      80
    BANK2            80      0      78
    BANK3            80      4      60
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  126584
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                   _getPowerFault_AD
                         _getTemp_AD
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    2141
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    9243
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    9243
                                             17 BANK0      1     1      0
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    9209
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   28622
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   28622
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0   12665
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   12271
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1446
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     301
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     301
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1525
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1525
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   37975
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   37975
                                             71 BANK0      2     2      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   37032
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    2017
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35015
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   14485
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1679
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15160
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15005
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14912
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14850
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    7195
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   1     1      0    7195
                                             17 BANK0      1     1      0
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             3     3      0    7161
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      62
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    5385
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     290
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2948
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1618
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1618
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7832
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   13269
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   13139
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    8848
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2023
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1463
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     130
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      62
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      62
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   13306
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   13306
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     613
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8516
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7430
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3214
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     717
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     613
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     613
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    2017
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     154
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     110
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      44
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      44
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      44
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getPowerFault_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      3C      11       75.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     134      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     134      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Oct 24 14:30:12 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       l92 088B  
                                     l94 089F                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 11B5                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006C  
     __end_of_getDimmerLights_StatusFlag 1E1E               _getDimmerLights_StatusFlag 1E14  
                 __end_of_setDelayOff_GO 0A26                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
                   _setDimmerLights_Main 08B3                             ___ftadd@sign 0048  
                                    l102 1700                                      l103 16FC  
                                    l104 16EA                                      l106 16FA  
                                    l322 1FE1                                      l323 1FE2  
                                    l247 0AC0                                      l272 0D2A  
                                    l273 0D6D                                      l366 1244  
                                    l797 1514                                      _GIE 005F  
                                    _CRC 00D4                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 000D  
                                    _RB1 0069                                      _RA3 0063  
                                    _PF1 00C8                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 006B                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BE  
                                    _ISR 0004                                      _WDT 00D2  
        setPowerFault_Exceptions@command 0030                                      _Sw1 01CF  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1FEB  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 1D6A  
                        __end_of_ADC_Set 1DC6                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0DE9                    _setDimmerLights_ERROR 1707  
                  _setDimmerLights_AdjRF 121C                    _setDimmerLights_AdjGo 1F4C  
                __size_of_setTemp_Enable 0008                                     ?_ISR 0070  
                        _PowerFault_Main 1D70                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1E9D                             ___ftdiv@sign 003D  
                                   l2132 13C5                                     l2117 0B63  
                                   l1254 1152                                     l2127 0BB9  
               ?_DimmerLightsPointSelect 0070                                     l1267 07F9  
                                   l2083 0471                                     l1276 15E3  
                                   l2084 046D                                     l2086 04AC  
                                   l2078 0441                                     l2159 1491  
                                   l1449 16BB                          __end_of_IOC_Set 1EB7  
                                   l1913 1458                                     l2810 03CA  
                                   l2468 1EFF                                     l5331 0A2F  
                                   l5411 03A9                                     l2781 0A59  
                                   l5405 0396                                     l5335 0A36  
                                   l5423 03DC                                     l5407 03A0  
                                   l5511 06E4                                     l5345 0A5E  
                                   l5337 0A40                                     l5417 03BC  
                                   l5409 03A5                                     l2787 0A70  
                                   l5347 0A66                                     l5339 0A45  
                                   l5427 03EE                                     l5419 03C6  
                                   l5523 0700                                     l5507 06DC  
                                   l5453 0755                                     l5437 0409  
                                   l5381 035A                                     l5447 073F  
                                   l8031 10A7                                     l5519 06F8  
                                   l5377 0353                                     l8113 0FCA  
                                   l5475 07AF                                     l5467 0796  
                                   l5539 0F07                                     l5387 0369  
                                   l5573 0F6C                                     l5565 0F52  
                                   l5557 0F37                                     l9005 0DC3  
                                   l8029 10A3                                     l8109 0FB4  
                                   l9101 0494                                     l8151 10BE  
                                   l5567 0F5B                                     l5559 0F45  
                                   l8303 0AA8                                     l5399 0383  
                                   l5495 06A1                                     l8145 10B5  
                                   l8401 119C                                     l5569 0F5E  
                                   l9017 0DE1                                     l9009 0DD1  
                                   l8161 11E0                                     l8321 0ADC  
                                   l8313 0ACF                                     l5489 068B  
                                   l8137 147F                                     l9041 0435  
                                   l8147 10B8                                     l8403 119F  
                                   l8067 0E3C                                     l9019 0DE3  
                                   l8163 11E3                                     l8315 0AD3  
                                   l8307 0AC6                                     l8421 14BC  
                                   l8341 0D0F                                     l8317 0AD6  
                                   l8309 0AC9                                     l8261 0B26  
                                   l9117 04C1                                     l9205 02A6  
                                   l8407 11A5                                     l8191 150B  
                                   l8167 11E9                                     l8335 0D06  
                                   l8343 0D12                                     l8271 0B4A  
                                   l9063 0451                                     l9143 1F04  
                                   l9215 02D8                                     l8511 1657  
                                   l8193 1510                                     l8185 14F9  
                                   l8353 0D27                                     l8337 0D09  
                                   l7705 12DE                                     l9129 04DC  
                                   l9251 16D4                                     l8371 0D53  
                                   l8355 0D21                                     l8283 0A8E  
                                   l8099 0F92                                     l8267 0B41  
                                   l9147 1F0A                                     l8515 1663  
                                   l7733 110D                                     l9317 0560  
                                   l8285 0A91                                     l9181 023B  
                                   l9165 0206                                     l8383 0D6F  
                                   l7911 0A02                                     l9191 0268  
                                   l9503 0831                                     l8393 1255  
                                   l7753 1760                                     l7657 11C0  
                                   l7841 0C83                                     l7729 1104  
                                   l8369 0D3B                                     l8289 0A97  
                                   l7913 0A0F                                     l8537 0B66  
                                   l9425 16A4                                     l8395 1260  
                                   l8643 1588                                     l7771 177F  
                                   l8467 07E1                                     l7675 1FA3  
                                   l7907 09FC                                     l9099 0492  
                                   l8653 1598                                     l8645 158B  
                                   l7781 179A                                     l8805 1556  
                                   l7917 0A1B                                     l8565 0BAF  
                                   l8549 0B7E                                     l8629 0CDE  
                  _myMain_Initialization 1F0D                                     l8655 159B  
                                   l7759 176B                                     l7935 0979  
                                   l7943 0985                                     l7679 1FA9  
                                   l8559 0BA4                                     l8649 1591  
                                   l7785 17A2                                     l7777 1791  
                                   l7769 1773                                     l7953 0995  
                                   l8809 155D                                     l8593 17EE  
                                   l8921 0E84                                     l9393 1424  
                                   l8659 15A1                                     l7939 097F  
                                   l8771 08DA                                     l8923 0E8A  
                                   l7965 09B1                                     l7973 09BD  
                                   l7949 098F                                     l7957 099B  
                                   l8773 08E0                                     l7981 13D5  
                                   l8783 0908                                     l8871 1167  
                                   l7969 09B7                                     l8945 0EB7  
                                   l8865 115F                                     _CFGS 0CAE  
                                   l8883 15AE                                     l8955 0ECE  
                                   l8867 1162                                     l9499 0826  
                                   l8981 0D8F                                     l8957 0ED0  
                                   l8983 0D95                             __CFG_WDTE$ON 0000  
                                   l8889 15C3                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4015 0767  
                                   u4025 0777                                     u4105 06BD  
                                   u4035 0797                                     u4045 07A6  
                                   u4205 0F0E                                     u4125 06E5  
                                   u4055 07B0                                     u4135 06EB  
                                   u4235 0F38                                     u4165 0701  
                                   u4175 0707                                     u4095 06AD  
                                   u3705 0A61                                     u4265 0F53  
                                   _PEIE 005E                                     u3735 0A77  
                                   u3665 0A3B                                     u3915 03AA  
                                   u3685 0A54                                     u3855 0384  
                                   u3945 03BD                                     u3885 0397  
                                   u7335 12CA                                     u7425 1776  
                                   u7530 0C31                                     u8235 124A  
                                   u7445 1780                                     u7455 178A  
                                   u7535 0C2F                                     u7465 1792  
                                   u9325 04D6                                     u7775 1FFA  
                                   u9555 16CA                                     u9715 141B  
                                   u9725 142A                                     u9745 1283  
                                   u9675 1149                                     _LWLO 0CAD  
                                   u9765 1688                                     _RFSW 0079  
                                   u9775 16B3                                     _TMR0 0015  
                                   _RSSI 00D6                                     _WREN 0CAA  
                                   _Buz1 00B2                                     _main 0802  
                           ___ftpack@arg 0020        __end_of_PowerFault_Initialization 1D70  
                    __end_of_DlyOff_Main 0C27                          __end_of_RF_Main 1D79  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1E60  
                                   ltemp 007E            __size_of_setRF_Initialization 000D  
                       _setDimmerReClock 1D82                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 1433                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 14A6                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003              __size_of_setPowerFault_Main 0076  
                                  ??_ISR 0075                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 000A  
                       __end_of_LED_Main 1E90            __end_of_DimmerIntrPointSelect 1E14  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
              setPowerFault_Exceptions@i 002F                                    ?_main 01D8  
                        __end_of___awdiv 17A9                          __end_of___ftadd 0421  
                        __end_of___ftdiv 07D1                          __end_of___ftmul 0728  
                        ___awdiv@divisor 0020                          __end_of___fttol 0F75  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                 _setDimmerLights_Switch 1F1C                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00EF  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                __end_of_Timeout_Counter 2000                            __CFG_WRT$HALF 0000  
                                  _Temp1 00DC       __end_of_setDimmerLights_IntrIOC_GO 1338  
             _setDimmerLights_IntrIOC_GO 130B                         __end_of_TMR0_ISR 121C  
           __size_of_CC2500_WriteCommand 0019                         __end_of_TMR0_Set 1DCE  
                                  _getAD 1154                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 1523            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1FC4              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03D8  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 1F7D  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 0C27              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
                         setSw_Status@sw 0023         __size_of_DelayOff_Initialization 0004  
                           ?_my_MainTime 0070                setDimmerLights_Main@clear 0065  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 090E  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 085A  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1D9E  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0E68                     _setSw_Initialization 1F3C  
                setOverTemp_Exceptions@i 002F                                   ??_main 0069  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0AEC                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 000A                  ??_DlyOff_Initialization 0022  
                __end_of_PowerFault_Main 1D73                               _Receive_OK 03D8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                 ?_setDimmerLights_ERROR 0070                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1E3F                   ?_setDimmerLights_AdjRF 0070  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 008B  
                       ??_setRFSW_Status 0023                  ??_Switch_Initialization 0025  
                   __end_of_getTemp_Safe 1DD6                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020                              _DlyOff_Main 0BBC  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 0069  
                                 _ADRESH 009C                                   _ADRESL 009B  
                      ?_getPowerFault_AD 0070                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 11D7  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 0A87  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1F2C  
                                 i1l6347 1332                                   i1l6721 00FE  
                                 i1l6715 00E5                                   i1l6723 0104  
                                 i1l6733 0137                                   i1l6717 00EB  
                                 i1l6743 0166                                   i1l6745 016C  
                                 i1l6729 0120                                   i1l6737 014B  
                                 i1l6755 019E                                   i1l6769 01CA  
                                 i1l6697 009B                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                       ??_getPowerFault_AD 0024  
                                 _OSCCON 0099                                   u573_25 0074  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 10C6                                   u696_25 1215  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1DA6           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1080                                   _Dimmer 0076  
                                 _DlySw1 00ED               __end_of_Mcu_Initialization 1FA0  
                    __end_of_Buzzer_Main 1707                                   _Memory 013D  
                                 _Timer0 0135       __end_of_setDimmerLights_TriggerAdj 1F6C  
             _setDimmerLights_TriggerAdj 1F5C                                   ___bmul 1FA0  
          setDimmerLights_Switch@command 0022                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 000B  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00DA  
                                 _s_data 00DB                                   _setLED 0969  
                                 _myMain 00A0                         _DimmerLightsIntr 0077  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                       ___awdiv@quotient 0027                                   _setBuz 085A  
                     __size_of_Temp_Main 0003         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020      __end_of_setDimmerLights_IntrControl 01F0  
            _setDimmerLights_IntrControl 0046                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0070  
                  __end_of_SwPointSelect 1E55                  getPowerFault_AD@channel 0025  
                          ?_setRF_Enable 0070                           _setTemp_Enable 1DE6  
                        _RfSWPointSelect 1E3F             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 0074              __size_of_DimmerLights_Close 0013  
                __size_of_LedPointSelect 001D                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1EFE  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0969  
       __end_of_CC2500_registers_address 102F     __end_of_setPowerFault_Initialization 1DA2  
  __size_of_setPowerFault_Initialization 0004             _setPowerFault_Initialization 1D9E  
                __end_of__initialization 0042              ??_PowerFault_Initialization 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK3 1174  
                          __end_of_getAD 1174                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003D  
                     _LED_Initialization 1E78                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 0040                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0070            ??_Flash_Memory_Initialization 005D  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 106B  
                       ?_PowerFault_Main 0070                 __end_of_setDimmerReClock 1D86  
                     __size_of_getRxData 0069                      ?_LED_Initialization 0070  
                 __end_of_setTemp_Enable 1DEE                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0020                           _DimmerLights11 00D5  
                   __size_of_setLED_Main 0041                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1D7C  
                     ??_CC2500_WriteByte 0020               ??_setPowerFault_Exceptions 002E  
           setDimmerLights_Switch@lights 0023                               __pbssBANK0 0069  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01C0                                ?_Fosc_Set 0070  
                            _Buzzer_Main 16BD                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 1D82                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0025  
                          ?_setMemory_GO 0070                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1D92            ?_setPowerFault_Initialization 0070  
                             _getPF_Safe 1DDE                            ??_Switch_Main 0069  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006A  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 0008                       getTemp_Safe@result 0020  
                            setBuz@count 002C                               __pmaintext 0802  
                    _CC2500_WriteCommand 10AD                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 000B  
                       ??_setDelayOff_GO 002C                     __size_of_my_MainTime 0046  
          ??_DimmerLights_Initialization 0024                               ??_TMR0_ISR 0075  
                          ?_setTemp_Main 0070                               ??_TMR0_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00BF  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1DBF                _PowerFault_Initialization 1D6D  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 13FD  
                             ??_WDT_Main 0020             __end_of_setRF_Initialization 1EC4  
                  __size_of_getTemp_Safe 0008                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 146C                  __end_of_RfSWPointSelect 1E4A  
                      Sw_DimmerOnFunc@sw 0063                                  _IOC_ISR 1E90  
                        ?_setTemp_Enable 0070                                  _IOC_Set 1EAA  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1135                        _Flash_Memory_Read 10DF  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0071  
                 __size_of_CC2500_TxData 0065                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                                  _RF_Data 0120  
                                _RF_Main 1D76                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1E55  
        __end_of_setControl_Lights_Table 0B53                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 17A9  
                        _setPercentValue 15EB                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00EA  
           __end_of_CC2500_FrequencyCabr 1E6C                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1F8E                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0166  
                                _VarLED2 016A                        __end_of_getRxData 0BBC  
             __end_of_setPowerFault_Main 0DE9                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1E0A                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1F3C                     ??_setRFSW_AdjControl 0064  
                           _getTemp_Safe 1DCE                           ??_setTemp_Main 0031  
                        __size_of___bmul 0012           __end_of_setDimmerLights_Switch 1F2C  
                                ___awdiv 1755                                  ___ftadd 032B  
                         ??_setSw_Enable 0022                                  ___ftdiv 0728  
                                ___ftmul 0674                                  ___fttol 0EEE  
                    __end_of_Switch_Main 1DA6                  ??_Buzzer_Initialization 0020  
               ??_setOverTemp_Exceptions 002E                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005E  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0059                           ??_setSw_Status 0023  
                                __ptext1 1677                                  __ptext2 1DE6  
                                __ptext3 1F0D                                  __ptext4 13FD  
                                __ptext5 1265                                  __ptext6 1154  
                                __ptext7 1FB2                                  __ptext8 0002  
                                __ptext9 1D7F                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                    Sw_DimmerOnFunc@Idle 0062                    _DimmerIntrPointSelect 1E0A  
                           __size_of_ISR 000F                __end_of_Flash_Memory_Main 1154  
              __end_of_Flash_Memory_Read 10F9                               _setRF_Main 0421  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1D96  
                      _DimmerLights_Main 1DB8           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1E34  
             __end_of_CC2500_ClearRXFIFO 1D8A                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1D8E            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006D                           _LedPointSelect 10F9  
                    _DelayOffPointSelect 1E1E                                  clrloop0 1DB3  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 1E00  
                   end_of_initialization 0042                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 128C                            _DelayTime_1us 123F  
                      __end_of_setTxData 0674               __end_of_Flash_Memory_Write 0800  
                                init_ram 1DAC                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1DAD                               _setSw_Main 01F0  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 11D7  
                            ?_getPF_Safe 0070                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1F6C                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0D02  
                          _CC2500_TxData 0A87                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1EE0           ??_setPowerFault_Initialization 0020  
            ?_setDimmerLights_TriggerAdj 0022                __size_of_getPowerFault_AD 0027  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 15A7                  _DimmerLights_Exceptions 14E3  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1DEE  
                    ??_CC2500_ReadStatus 0022         getDimmerLights_StatusFlag@Status 0020  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 000F                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 1DBF  
                     _Mcu_Initialization 1F8E                 __size_of_CC2500_PowerRST 0043  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$6351 0067                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1116                  __end_of_Sw_DimmerOnFunc 1800  
                __end_of_setPercentValue 1631                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 12B6                      ?_Mcu_Initialization 0070  
       __end_of_setPowerFault_Exceptions 146C                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 14A6                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 11F9                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 10DF                     _setRF_Initialization 1EB7  
                            _Switch_Main 1DA2                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1E34                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 106B                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1FB2  
              __size_of_Sw_DimmerAdjFunc 0031                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1E00                        __size_of_TMR0_ISR 0023  
        __size_of_setOverTemp_Exceptions 0046                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 0008                     __end_of_setMemory_GO 1096  
          __size_of_setDimmerLights_Main 005B                           __end_of_setLED 09C7  
                         __end_of_setBuz 08B3                     _CC2500_FrequencyCabr 1E60  
              __size_of_Sw_DimmerOffFunc 006F               __size_of_Flash_Memory_Main 001F  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 0F75                        __size_of_WDT_Main 0012  
                    __size_of_getPF_Safe 0008                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 13C8  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1FD7  
                            __end_of_ISR 0013                    ??_Flash_Memory_Modify 0024  
     __size_of_PowerFault_Initialization 0003                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1135  
        __size_of_setTemp_Initialization 0003                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0EEE  
                   __end_of_setSw_Enable 1EFE                             ?_Buzzer_Main 0070  
                     _set_TimeoutCleared 1066                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 0162  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0036                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1EEF                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
                __size_of_setRFSW_Status 000E                __size_of_CC2500_WriteByte 0014  
                              _Temp_Main 1D7F                ??_DimmerLights_Exceptions 002D  
          setOverTemp_Exceptions@command 0030                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D7  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 000B  
                              _Tx_Length 00D8                              __pdataBANK3 01A0  
                               ??_setLED 0023                         ??_setTemp_Enable 0020  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1D8E               __size_of_DimmerLights_Main 0007  
              __end_of_setRF_DimmerValue 13FD                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$5315 0068                              __pbssCOMMON 0076  
                               ?_IOC_Set 0070                                ___latbits 0003  
                  setTemp_Enable@command 0020                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                          __pcstackBANK3 01D8                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 007F  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                 __size_of_PowerFault_Main 0003  
                   __size_of_DlyOff_Main 006B               __size_of_CC2500_ReadStatus 0022  
                 _setOverTemp_Exceptions 1631                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01C0  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020                    __size_of_setRF_Enable 000E  
                        ??_CC2500_RxData 0024                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006D                            ??_my_MainTime 002D  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00CD  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                 _setTemp_Initialization 1D79                                _getBuz_GO 1F7D  
                       _getPowerFault_AD 1265        __size_of_setPowerFault_Exceptions 0039  
    __end_of_Flash_Memory_Initialization 05B5              _Flash_Memory_Initialization 04EE  
                               ?___awdiv 0020                ?_setPowerFault_Exceptions 0070  
                              __ptext100 1EC4                                __ptext101 1E3F  
                              __ptext110 106B                                __ptext102 1F2C  
                              __ptext111 1D8E                                __ptext103 1F1C  
                              __ptext120 10AD                                __ptext112 1564  
                              __ptext104 1E34                                __ptext121 1066  
                              __ptext113 128C                                __ptext105 085A  
                              __ptext130 1E90                                __ptext122 1FEB  
                              __ptext114 1116                                __ptext106 1755  
                              __ptext131 1D82                                __ptext123 1FD7  
                              __ptext115 1194                                __ptext107 1D92  
                              __ptext132 130B                                __ptext124 16BD  
                              __ptext116 1E60                                __ptext108 1E29  
                              __ptext133 1E00                                __ptext125 1D6A  
                              __ptext117 123F                                __ptext109 1E1E  
                               ?___ftadd 003E                                __ptext118 1D8A  
                              __ptext127 11F9                                __ptext119 1D86  
                              __ptext128 0046                                __ptext129 1E0A  
                              _getRxData 0B53                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 1000            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 0003            __end_of_Buzzer_Initialization 1D6D  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 1F0D  
                     _setPowerFault_Main 0D73       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 004E                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 013B  
          __end_of_setDimmerLights_ERROR 1755             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 123F            __end_of_setDimmerLights_AdjGo 1F5C  
                 CC2500_WriteByte@loop_a 0021                                _r_address 00D9  
         __size_of_myMain_Initialization 000F             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1F1C                      ?_setPowerFault_Main 0070  
                         __size_of_getAD 0020                             _setRF_Enable 1ED2  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1E4A  
                     Sw_DimmerOffFunc@sw 0064                      __end_of_setLED_Main 1564  
                    _DimmerLightsIntrIOC 0078                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1D7F                        _CC2500_rfSettings 102F  
                               _LED_Main 1E84                             ??_getPF_Safe 0020  
                        SwPointSelect@sw 0021                                clear_ram0 1DB2  
               CC2500_InitPATable@loop_d 0027                                _setTxData 05B5  
    __end_of_DimmerLights_Initialization 1EAA              _DimmerLights_Initialization 1E9D  
                     _CC2500_ClearRXFIFO 1D86                       _CC2500_ClearTXFIFO 1D8A  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1DDE  
                   ??_setPowerFault_Main 0031                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003A  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 07D1  
                             ?_getRxData 0070                                 _TMR0_ISR 11F9  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                               _TMR0_Set 1DC6                         _Sw_DimmerAdjFunc 1365  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
                    __end_of_my_MainTime 16BD        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00D0                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 10C6                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1FB2                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0C93  
                  __size_of_setTemp_Main 0086                  __size_of_setDelayOff_GO 005F  
                  __size_of_setSw_Enable 000F                                 _DelayOff 0069  
                           setSw_Main@sw 0068         setDimmerLights_IntrIOC_GO@lights 0072  
                     __end_of_getPF_Safe 1DE6                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1E78                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 13C8                    _DlyOff_Initialization 1E29  
                  __size_of_setSw_Status 000F                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1D9A  
                       __size_of_WDT_Set 000B                    _Switch_Initialization 1DF7  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 1EC4                             _setMemory_GO 1080  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 1433  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1FD7  
           Flash_Memory_Initialization@i 005E                              ??_Temp_Main 0032  
                      ??_PowerFault_Main 0032                        setRFSW_Control@sw 0063  
                              setLED@led 0023     __end_of_setDimmerLights_TriggerERROR 130B  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 12E0  
                ??_DimmerIntrPointSelect 0070                             _setTemp_Main 0E68  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1EEF                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                                 ___awtoft 11B5  
                       ??_LedPointSelect 0020                                 ___ftpack 0A26  
                           _setSw_Status 1EE0                        getTemp_AD@channel 0025  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1523                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0C93                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E                                 __ptext10 0E68  
                               __ptext11 1631                                 __ptext20 1365  
                               __ptext12 1DDE                                 __ptext21 1F5C  
                               __ptext13 1D7C                                 __ptext30 0AEC  
                               __ptext22 1F4C                                 __ptext14 1D79  
                               __ptext31 0F75                                 __ptext23 1DF7  
                               __ptext15 1DA2                                 __ptext40 032B  
                               __ptext32 09C7                                 __ptext24 1F3C  
                               __ptext16 01F0                                 __ptext41 1F7D  
                               __ptext33 12B6                                 __ptext25 1EFE  
                               __ptext17 1DD6                                 __ptext50 1433  
                               __ptext42 0A87                                 __ptext34 1FA0  
                               __ptext26 1D76                                 __ptext18 17A9  
                               __ptext51 1EEF                                 __ptext43 0D02  
                               __ptext35 146C                                 __ptext27 0421  
                               __ptext19 0C93                                 __ptext60 1E55  
                               __ptext52 1ED2                                 __ptext44 11D7  
                               __ptext36 13C8                                 __ptext28 0B53  
                               __ptext61 1DC6                                 __ptext53 14E3  
                               __ptext45 1096                                 __ptext37 121C  
                               __ptext29 1396                                 __ptext70 1135  
                               __ptext62 10C6                                 __ptext54 12E0  
                               __ptext46 1D73                                 __ptext38 090E  
                               __ptext71 15A7                                 __ptext63 1EAA  
                               __ptext55 1707                                 __ptext47 1EB7  
                               __ptext39 0674                                 __ptext80 0DE9  
                               __ptext72 1E6C                                 __ptext64 1D9A  
                               __ptext56 1DCE                                 __ptext48 1D70  
                               __ptext81 0969                                 __ptext73 04EE  
                               __ptext65 1DBF                                 __ptext57 1D6D  
                               __ptext49 0D73                                 __ptext90 0BBC  
                               __ptext82 10F9                                 __ptext74 07D1  
                               __ptext66 1E84                                 __ptext58 1D9E  
                               __ptext91 05B5                                 __ptext83 1FC4  
                               __ptext75 1DEE                                 __ptext67 1523  
                               __ptext59 1F8E                                 __ptext92 1EE0  
                               __ptext84 1080                                 __ptext76 10DF  
                               __ptext68 1E78                                 __ptext93 1E4A  
                               __ptext85 1E14                                 __ptext77 1DB8  
                               __ptext69 1F6C                                 __ptext94 0C27  
                               __ptext86 1E9D                                 __ptext78 08B3  
                               __ptext95 15EB                                 __ptext87 1338  
                               __ptext79 14A6                                 __ptext96 0EEE  
                               __ptext88 1DA6                                 __ptext97 0728  
                               __ptext89 1D96                                 __ptext98 11B5  
                               __ptext99 0A26                                 __product 01A0  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               __size_of_RfSWPointSelect 000B           __size_of_Dimmer_Initialization 0006  
                 __end_of_setRFSW_Status 1ED2            __end_of_Dimmer_Initialization 1DAC  
           __end_of_setDimmerLights_Main 090E              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1DD6  
               __end_of_CC2500_SIDLEMode 1D92               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1E29               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1FC4                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 0004                              getPF_Safe@i 0020  
                        _CC2500_ReadByte 1096                              _my_MainTime 1677  
                     _CC2500_InitPATable 1116      __size_of_getDimmerLights_StatusFlag 000A  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 04EE  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0067  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 01D8            ?_setDimmerLights_TriggerERROR 0022  
                               main@argv 01DA                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 1564              __end_of_Flash_Memory_Modify 15EB  
                      ??_getPercentValue 0059                              _setLog_Code 1396  
            __end_of_Flash_Memory_Unlock 1DF7                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1194                       __end_of_setSw_Main 032B  
                          _Transceive_OK 03D9                   ?_DlyOff_Initialization 0070  
                ?_setOverTemp_Exceptions 0070                           _DelayTimejudge 12B6  
                            pic14e$flags 007E                 __end_of_getPowerFault_AD 128C  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1365  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1338  
            __end_of_setDimmerLights_Adj 14E3                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1D73     __size_of_setDimmerLights_IntrControl 01AA  
                          ?_getTemp_Safe 0070                     _Flash_Memory_Erasing 1E6C  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007A  
        __end_of_DelayOff_Initialization 1D96      __size_of_setDimmerLights_IntrIOC_GO 002D  
                             _OPTION_REG 0095                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1D9A                      ??_RF_Initialization 0021  
                         _setDelayOff_GO 09C7         __size_of_setControl_Lights_Table 0067  
                 __end_of_DelayTimejudge 12E0           __end_of_setOverTemp_Exceptions 1677  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 1265  
               __end_of_Sw_DimmerAdjFunc 1396                  __end_of_CC2500_ReadByte 10AD  
           __end_of_setSw_Initialization 1F4C                          _Timeout_Counter 1FEB  
                   getPercentValue@value 005B               ?_PowerFault_Initialization 0070  
             __end_of_LED_Initialization 1E84         __size_of_setDimmerLights_Trigger 0010  
         __end_of_setTemp_Initialization 1D7C                 __size_of_Sw_DimmerOnFunc 0057  
               ?_DimmerLights_Exceptions 0070                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1D76  
               __end_of_Sw_DimmerOffFunc 0D02          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    __end_of_CC2500_RxData 0D73  
                  __end_of_CC2500_TxData 0AEC                           ??_getTemp_Safe 0020  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 15A7  
