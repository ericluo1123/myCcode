

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Nov 11 17:23:48 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	intentry,global,class=CODE,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	dabs	1,0x7E,2
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  008C                     	;# 
   180  008D                     	;# 
   181  008E                     	;# 
   182  0090                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0099                     	;# 
   189  009A                     	;# 
   190  009B                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  010C                     	;# 
   196  010D                     	;# 
   197  010E                     	;# 
   198  0116                     	;# 
   199  0117                     	;# 
   200  011D                     	;# 
   201  018C                     	;# 
   202  018D                     	;# 
   203  018E                     	;# 
   204  0191                     	;# 
   205  0191                     	;# 
   206  0192                     	;# 
   207  0193                     	;# 
   208  0193                     	;# 
   209  0194                     	;# 
   210  0195                     	;# 
   211  0196                     	;# 
   212  0197                     	;# 
   213  0199                     	;# 
   214  019A                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019C                     	;# 
   220  019C                     	;# 
   221  019D                     	;# 
   222  019E                     	;# 
   223  019F                     	;# 
   224  020D                     	;# 
   225  0210                     	;# 
   226  0211                     	;# 
   227  0211                     	;# 
   228  0212                     	;# 
   229  0212                     	;# 
   230  0213                     	;# 
   231  0213                     	;# 
   232  0214                     	;# 
   233  0214                     	;# 
   234  0215                     	;# 
   235  0215                     	;# 
   236  0215                     	;# 
   237  0216                     	;# 
   238  0216                     	;# 
   239  0217                     	;# 
   240  0217                     	;# 
   241  0291                     	;# 
   242  0291                     	;# 
   243  0292                     	;# 
   244  0293                     	;# 
   245  0298                     	;# 
   246  0298                     	;# 
   247  0299                     	;# 
   248  029A                     	;# 
   249  0394                     	;# 
   250  0395                     	;# 
   251  0396                     	;# 
   252  0FE4                     	;# 
   253  0FE5                     	;# 
   254  0FE6                     	;# 
   255  0FE7                     	;# 
   256  0FE8                     	;# 
   257  0FE9                     	;# 
   258  0FEA                     	;# 
   259  0FEB                     	;# 
   260  0FED                     	;# 
   261  0FEE                     	;# 
   262  0FEF                     	;# 
   263  0000                     	;# 
   264  0001                     	;# 
   265  0002                     	;# 
   266  0003                     	;# 
   267  0004                     	;# 
   268  0005                     	;# 
   269  0006                     	;# 
   270  0007                     	;# 
   271  0008                     	;# 
   272  0009                     	;# 
   273  000A                     	;# 
   274  000B                     	;# 
   275  000C                     	;# 
   276  000D                     	;# 
   277  000E                     	;# 
   278  0010                     	;# 
   279  0011                     	;# 
   280  0012                     	;# 
   281  0015                     	;# 
   282  0016                     	;# 
   283  0016                     	;# 
   284  0017                     	;# 
   285  0018                     	;# 
   286  0019                     	;# 
   287  001A                     	;# 
   288  001B                     	;# 
   289  001C                     	;# 
   290  008C                     	;# 
   291  008D                     	;# 
   292  008E                     	;# 
   293  0090                     	;# 
   294  0091                     	;# 
   295  0092                     	;# 
   296  0095                     	;# 
   297  0096                     	;# 
   298  0097                     	;# 
   299  0099                     	;# 
   300  009A                     	;# 
   301  009B                     	;# 
   302  009B                     	;# 
   303  009C                     	;# 
   304  009D                     	;# 
   305  009E                     	;# 
   306  010C                     	;# 
   307  010D                     	;# 
   308  010E                     	;# 
   309  0116                     	;# 
   310  0117                     	;# 
   311  011D                     	;# 
   312  018C                     	;# 
   313  018D                     	;# 
   314  018E                     	;# 
   315  0191                     	;# 
   316  0191                     	;# 
   317  0192                     	;# 
   318  0193                     	;# 
   319  0193                     	;# 
   320  0194                     	;# 
   321  0195                     	;# 
   322  0196                     	;# 
   323  0197                     	;# 
   324  0199                     	;# 
   325  019A                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019C                     	;# 
   331  019C                     	;# 
   332  019D                     	;# 
   333  019E                     	;# 
   334  019F                     	;# 
   335  020D                     	;# 
   336  0210                     	;# 
   337  0211                     	;# 
   338  0211                     	;# 
   339  0212                     	;# 
   340  0212                     	;# 
   341  0213                     	;# 
   342  0213                     	;# 
   343  0214                     	;# 
   344  0214                     	;# 
   345  0215                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0216                     	;# 
   349  0216                     	;# 
   350  0217                     	;# 
   351  0217                     	;# 
   352  0291                     	;# 
   353  0291                     	;# 
   354  0292                     	;# 
   355  0293                     	;# 
   356  0298                     	;# 
   357  0298                     	;# 
   358  0299                     	;# 
   359  029A                     	;# 
   360  0394                     	;# 
   361  0395                     	;# 
   362  0396                     	;# 
   363  0FE4                     	;# 
   364  0FE5                     	;# 
   365  0FE6                     	;# 
   366  0FE7                     	;# 
   367  0FE8                     	;# 
   368  0FE9                     	;# 
   369  0FEA                     	;# 
   370  0FEB                     	;# 
   371  0FED                     	;# 
   372  0FEE                     	;# 
   373  0FEF                     	;# 
   374  0000                     	;# 
   375  0001                     	;# 
   376  0002                     	;# 
   377  0003                     	;# 
   378  0004                     	;# 
   379  0005                     	;# 
   380  0006                     	;# 
   381  0007                     	;# 
   382  0008                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  000D                     	;# 
   388  000E                     	;# 
   389  0010                     	;# 
   390  0011                     	;# 
   391  0012                     	;# 
   392  0015                     	;# 
   393  0016                     	;# 
   394  0016                     	;# 
   395  0017                     	;# 
   396  0018                     	;# 
   397  0019                     	;# 
   398  001A                     	;# 
   399  001B                     	;# 
   400  001C                     	;# 
   401  008C                     	;# 
   402  008D                     	;# 
   403  008E                     	;# 
   404  0090                     	;# 
   405  0091                     	;# 
   406  0092                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0097                     	;# 
   410  0099                     	;# 
   411  009A                     	;# 
   412  009B                     	;# 
   413  009B                     	;# 
   414  009C                     	;# 
   415  009D                     	;# 
   416  009E                     	;# 
   417  010C                     	;# 
   418  010D                     	;# 
   419  010E                     	;# 
   420  0116                     	;# 
   421  0117                     	;# 
   422  011D                     	;# 
   423  018C                     	;# 
   424  018D                     	;# 
   425  018E                     	;# 
   426  0191                     	;# 
   427  0191                     	;# 
   428  0192                     	;# 
   429  0193                     	;# 
   430  0193                     	;# 
   431  0194                     	;# 
   432  0195                     	;# 
   433  0196                     	;# 
   434  0197                     	;# 
   435  0199                     	;# 
   436  019A                     	;# 
   437  019B                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019C                     	;# 
   442  019C                     	;# 
   443  019D                     	;# 
   444  019E                     	;# 
   445  019F                     	;# 
   446  020D                     	;# 
   447  0210                     	;# 
   448  0211                     	;# 
   449  0211                     	;# 
   450  0212                     	;# 
   451  0212                     	;# 
   452  0213                     	;# 
   453  0213                     	;# 
   454  0214                     	;# 
   455  0214                     	;# 
   456  0215                     	;# 
   457  0215                     	;# 
   458  0215                     	;# 
   459  0216                     	;# 
   460  0216                     	;# 
   461  0217                     	;# 
   462  0217                     	;# 
   463  0291                     	;# 
   464  0291                     	;# 
   465  0292                     	;# 
   466  0293                     	;# 
   467  0298                     	;# 
   468  0298                     	;# 
   469  0299                     	;# 
   470  029A                     	;# 
   471  0394                     	;# 
   472  0395                     	;# 
   473  0396                     	;# 
   474  0FE4                     	;# 
   475  0FE5                     	;# 
   476  0FE6                     	;# 
   477  0FE7                     	;# 
   478  0FE8                     	;# 
   479  0FE9                     	;# 
   480  0FEA                     	;# 
   481  0FEB                     	;# 
   482  0FED                     	;# 
   483  0FEE                     	;# 
   484  0FEF                     	;# 
   485  0000                     	;# 
   486  0001                     	;# 
   487  0002                     	;# 
   488  0003                     	;# 
   489  0004                     	;# 
   490  0005                     	;# 
   491  0006                     	;# 
   492  0007                     	;# 
   493  0008                     	;# 
   494  0009                     	;# 
   495  000A                     	;# 
   496  000B                     	;# 
   497  000C                     	;# 
   498  000D                     	;# 
   499  000E                     	;# 
   500  0010                     	;# 
   501  0011                     	;# 
   502  0012                     	;# 
   503  0015                     	;# 
   504  0016                     	;# 
   505  0016                     	;# 
   506  0017                     	;# 
   507  0018                     	;# 
   508  0019                     	;# 
   509  001A                     	;# 
   510  001B                     	;# 
   511  001C                     	;# 
   512  008C                     	;# 
   513  008D                     	;# 
   514  008E                     	;# 
   515  0090                     	;# 
   516  0091                     	;# 
   517  0092                     	;# 
   518  0095                     	;# 
   519  0096                     	;# 
   520  0097                     	;# 
   521  0099                     	;# 
   522  009A                     	;# 
   523  009B                     	;# 
   524  009B                     	;# 
   525  009C                     	;# 
   526  009D                     	;# 
   527  009E                     	;# 
   528  010C                     	;# 
   529  010D                     	;# 
   530  010E                     	;# 
   531  0116                     	;# 
   532  0117                     	;# 
   533  011D                     	;# 
   534  018C                     	;# 
   535  018D                     	;# 
   536  018E                     	;# 
   537  0191                     	;# 
   538  0191                     	;# 
   539  0192                     	;# 
   540  0193                     	;# 
   541  0193                     	;# 
   542  0194                     	;# 
   543  0195                     	;# 
   544  0196                     	;# 
   545  0197                     	;# 
   546  0199                     	;# 
   547  019A                     	;# 
   548  019B                     	;# 
   549  019B                     	;# 
   550  019B                     	;# 
   551  019B                     	;# 
   552  019C                     	;# 
   553  019C                     	;# 
   554  019D                     	;# 
   555  019E                     	;# 
   556  019F                     	;# 
   557  020D                     	;# 
   558  0210                     	;# 
   559  0211                     	;# 
   560  0211                     	;# 
   561  0212                     	;# 
   562  0212                     	;# 
   563  0213                     	;# 
   564  0213                     	;# 
   565  0214                     	;# 
   566  0214                     	;# 
   567  0215                     	;# 
   568  0215                     	;# 
   569  0215                     	;# 
   570  0216                     	;# 
   571  0216                     	;# 
   572  0217                     	;# 
   573  0217                     	;# 
   574  0291                     	;# 
   575  0291                     	;# 
   576  0292                     	;# 
   577  0293                     	;# 
   578  0298                     	;# 
   579  0298                     	;# 
   580  0299                     	;# 
   581  029A                     	;# 
   582  0394                     	;# 
   583  0395                     	;# 
   584  0396                     	;# 
   585  0FE4                     	;# 
   586  0FE5                     	;# 
   587  0FE6                     	;# 
   588  0FE7                     	;# 
   589  0FE8                     	;# 
   590  0FE9                     	;# 
   591  0FEA                     	;# 
   592  0FEB                     	;# 
   593  0FED                     	;# 
   594  0FEE                     	;# 
   595  0FEF                     	;# 
   596  0000                     	;# 
   597  0001                     	;# 
   598  0002                     	;# 
   599  0003                     	;# 
   600  0004                     	;# 
   601  0005                     	;# 
   602  0006                     	;# 
   603  0007                     	;# 
   604  0008                     	;# 
   605  0009                     	;# 
   606  000A                     	;# 
   607  000B                     	;# 
   608  000C                     	;# 
   609  000D                     	;# 
   610  000E                     	;# 
   611  0010                     	;# 
   612  0011                     	;# 
   613  0012                     	;# 
   614  0015                     	;# 
   615  0016                     	;# 
   616  0016                     	;# 
   617  0017                     	;# 
   618  0018                     	;# 
   619  0019                     	;# 
   620  001A                     	;# 
   621  001B                     	;# 
   622  001C                     	;# 
   623  008C                     	;# 
   624  008D                     	;# 
   625  008E                     	;# 
   626  0090                     	;# 
   627  0091                     	;# 
   628  0092                     	;# 
   629  0095                     	;# 
   630  0096                     	;# 
   631  0097                     	;# 
   632  0099                     	;# 
   633  009A                     	;# 
   634  009B                     	;# 
   635  009B                     	;# 
   636  009C                     	;# 
   637  009D                     	;# 
   638  009E                     	;# 
   639  010C                     	;# 
   640  010D                     	;# 
   641  010E                     	;# 
   642  0116                     	;# 
   643  0117                     	;# 
   644  011D                     	;# 
   645  018C                     	;# 
   646  018D                     	;# 
   647  018E                     	;# 
   648  0191                     	;# 
   649  0191                     	;# 
   650  0192                     	;# 
   651  0193                     	;# 
   652  0193                     	;# 
   653  0194                     	;# 
   654  0195                     	;# 
   655  0196                     	;# 
   656  0197                     	;# 
   657  0199                     	;# 
   658  019A                     	;# 
   659  019B                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019C                     	;# 
   664  019C                     	;# 
   665  019D                     	;# 
   666  019E                     	;# 
   667  019F                     	;# 
   668  020D                     	;# 
   669  0210                     	;# 
   670  0211                     	;# 
   671  0211                     	;# 
   672  0212                     	;# 
   673  0212                     	;# 
   674  0213                     	;# 
   675  0213                     	;# 
   676  0214                     	;# 
   677  0214                     	;# 
   678  0215                     	;# 
   679  0215                     	;# 
   680  0215                     	;# 
   681  0216                     	;# 
   682  0216                     	;# 
   683  0217                     	;# 
   684  0217                     	;# 
   685  0291                     	;# 
   686  0291                     	;# 
   687  0292                     	;# 
   688  0293                     	;# 
   689  0298                     	;# 
   690  0298                     	;# 
   691  0299                     	;# 
   692  029A                     	;# 
   693  0394                     	;# 
   694  0395                     	;# 
   695  0396                     	;# 
   696  0FE4                     	;# 
   697  0FE5                     	;# 
   698  0FE6                     	;# 
   699  0FE7                     	;# 
   700  0FE8                     	;# 
   701  0FE9                     	;# 
   702  0FEA                     	;# 
   703  0FEB                     	;# 
   704  0FED                     	;# 
   705  0FEE                     	;# 
   706  0FEF                     	;# 
   707  0000                     	;# 
   708  0001                     	;# 
   709  0002                     	;# 
   710  0003                     	;# 
   711  0004                     	;# 
   712  0005                     	;# 
   713  0006                     	;# 
   714  0007                     	;# 
   715  0008                     	;# 
   716  0009                     	;# 
   717  000A                     	;# 
   718  000B                     	;# 
   719  000C                     	;# 
   720  000D                     	;# 
   721  000E                     	;# 
   722  0010                     	;# 
   723  0011                     	;# 
   724  0012                     	;# 
   725  0015                     	;# 
   726  0016                     	;# 
   727  0016                     	;# 
   728  0017                     	;# 
   729  0018                     	;# 
   730  0019                     	;# 
   731  001A                     	;# 
   732  001B                     	;# 
   733  001C                     	;# 
   734  008C                     	;# 
   735  008D                     	;# 
   736  008E                     	;# 
   737  0090                     	;# 
   738  0091                     	;# 
   739  0092                     	;# 
   740  0095                     	;# 
   741  0096                     	;# 
   742  0097                     	;# 
   743  0099                     	;# 
   744  009A                     	;# 
   745  009B                     	;# 
   746  009B                     	;# 
   747  009C                     	;# 
   748  009D                     	;# 
   749  009E                     	;# 
   750  010C                     	;# 
   751  010D                     	;# 
   752  010E                     	;# 
   753  0116                     	;# 
   754  0117                     	;# 
   755  011D                     	;# 
   756  018C                     	;# 
   757  018D                     	;# 
   758  018E                     	;# 
   759  0191                     	;# 
   760  0191                     	;# 
   761  0192                     	;# 
   762  0193                     	;# 
   763  0193                     	;# 
   764  0194                     	;# 
   765  0195                     	;# 
   766  0196                     	;# 
   767  0197                     	;# 
   768  0199                     	;# 
   769  019A                     	;# 
   770  019B                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019C                     	;# 
   775  019C                     	;# 
   776  019D                     	;# 
   777  019E                     	;# 
   778  019F                     	;# 
   779  020D                     	;# 
   780  0210                     	;# 
   781  0211                     	;# 
   782  0211                     	;# 
   783  0212                     	;# 
   784  0212                     	;# 
   785  0213                     	;# 
   786  0213                     	;# 
   787  0214                     	;# 
   788  0214                     	;# 
   789  0215                     	;# 
   790  0215                     	;# 
   791  0215                     	;# 
   792  0216                     	;# 
   793  0216                     	;# 
   794  0217                     	;# 
   795  0217                     	;# 
   796  0291                     	;# 
   797  0291                     	;# 
   798  0292                     	;# 
   799  0293                     	;# 
   800  0298                     	;# 
   801  0298                     	;# 
   802  0299                     	;# 
   803  029A                     	;# 
   804  0394                     	;# 
   805  0395                     	;# 
   806  0396                     	;# 
   807  0FE4                     	;# 
   808  0FE5                     	;# 
   809  0FE6                     	;# 
   810  0FE7                     	;# 
   811  0FE8                     	;# 
   812  0FE9                     	;# 
   813  0FEA                     	;# 
   814  0FEB                     	;# 
   815  0FED                     	;# 
   816  0FEE                     	;# 
   817  0FEF                     	;# 
   818  0000                     	;# 
   819  0001                     	;# 
   820  0002                     	;# 
   821  0003                     	;# 
   822  0004                     	;# 
   823  0005                     	;# 
   824  0006                     	;# 
   825  0007                     	;# 
   826  0008                     	;# 
   827  0009                     	;# 
   828  000A                     	;# 
   829  000B                     	;# 
   830  000C                     	;# 
   831  000D                     	;# 
   832  000E                     	;# 
   833  0010                     	;# 
   834  0011                     	;# 
   835  0012                     	;# 
   836  0015                     	;# 
   837  0016                     	;# 
   838  0016                     	;# 
   839  0017                     	;# 
   840  0018                     	;# 
   841  0019                     	;# 
   842  001A                     	;# 
   843  001B                     	;# 
   844  001C                     	;# 
   845  008C                     	;# 
   846  008D                     	;# 
   847  008E                     	;# 
   848  0090                     	;# 
   849  0091                     	;# 
   850  0092                     	;# 
   851  0095                     	;# 
   852  0096                     	;# 
   853  0097                     	;# 
   854  0099                     	;# 
   855  009A                     	;# 
   856  009B                     	;# 
   857  009B                     	;# 
   858  009C                     	;# 
   859  009D                     	;# 
   860  009E                     	;# 
   861  010C                     	;# 
   862  010D                     	;# 
   863  010E                     	;# 
   864  0116                     	;# 
   865  0117                     	;# 
   866  011D                     	;# 
   867  018C                     	;# 
   868  018D                     	;# 
   869  018E                     	;# 
   870  0191                     	;# 
   871  0191                     	;# 
   872  0192                     	;# 
   873  0193                     	;# 
   874  0193                     	;# 
   875  0194                     	;# 
   876  0195                     	;# 
   877  0196                     	;# 
   878  0197                     	;# 
   879  0199                     	;# 
   880  019A                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019C                     	;# 
   886  019C                     	;# 
   887  019D                     	;# 
   888  019E                     	;# 
   889  019F                     	;# 
   890  020D                     	;# 
   891  0210                     	;# 
   892  0211                     	;# 
   893  0211                     	;# 
   894  0212                     	;# 
   895  0212                     	;# 
   896  0213                     	;# 
   897  0213                     	;# 
   898  0214                     	;# 
   899  0214                     	;# 
   900  0215                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0216                     	;# 
   904  0216                     	;# 
   905  0217                     	;# 
   906  0217                     	;# 
   907  0291                     	;# 
   908  0291                     	;# 
   909  0292                     	;# 
   910  0293                     	;# 
   911  0298                     	;# 
   912  0298                     	;# 
   913  0299                     	;# 
   914  029A                     	;# 
   915  0394                     	;# 
   916  0395                     	;# 
   917  0396                     	;# 
   918  0FE4                     	;# 
   919  0FE5                     	;# 
   920  0FE6                     	;# 
   921  0FE7                     	;# 
   922  0FE8                     	;# 
   923  0FE9                     	;# 
   924  0FEA                     	;# 
   925  0FEB                     	;# 
   926  0FED                     	;# 
   927  0FEE                     	;# 
   928  0FEF                     	;# 
   929  0000                     	;# 
   930  0001                     	;# 
   931  0002                     	;# 
   932  0003                     	;# 
   933  0004                     	;# 
   934  0005                     	;# 
   935  0006                     	;# 
   936  0007                     	;# 
   937  0008                     	;# 
   938  0009                     	;# 
   939  000A                     	;# 
   940  000B                     	;# 
   941  000C                     	;# 
   942  000D                     	;# 
   943  000E                     	;# 
   944  0010                     	;# 
   945  0011                     	;# 
   946  0012                     	;# 
   947  0015                     	;# 
   948  0016                     	;# 
   949  0016                     	;# 
   950  0017                     	;# 
   951  0018                     	;# 
   952  0019                     	;# 
   953  001A                     	;# 
   954  001B                     	;# 
   955  001C                     	;# 
   956  008C                     	;# 
   957  008D                     	;# 
   958  008E                     	;# 
   959  0090                     	;# 
   960  0091                     	;# 
   961  0092                     	;# 
   962  0095                     	;# 
   963  0096                     	;# 
   964  0097                     	;# 
   965  0099                     	;# 
   966  009A                     	;# 
   967  009B                     	;# 
   968  009B                     	;# 
   969  009C                     	;# 
   970  009D                     	;# 
   971  009E                     	;# 
   972  010C                     	;# 
   973  010D                     	;# 
   974  010E                     	;# 
   975  0116                     	;# 
   976  0117                     	;# 
   977  011D                     	;# 
   978  018C                     	;# 
   979  018D                     	;# 
   980  018E                     	;# 
   981  0191                     	;# 
   982  0191                     	;# 
   983  0192                     	;# 
   984  0193                     	;# 
   985  0193                     	;# 
   986  0194                     	;# 
   987  0195                     	;# 
   988  0196                     	;# 
   989  0197                     	;# 
   990  0199                     	;# 
   991  019A                     	;# 
   992  019B                     	;# 
   993  019B                     	;# 
   994  019B                     	;# 
   995  019B                     	;# 
   996  019C                     	;# 
   997  019C                     	;# 
   998  019D                     	;# 
   999  019E                     	;# 
  1000  019F                     	;# 
  1001  020D                     	;# 
  1002  0210                     	;# 
  1003  0211                     	;# 
  1004  0211                     	;# 
  1005  0212                     	;# 
  1006  0212                     	;# 
  1007  0213                     	;# 
  1008  0213                     	;# 
  1009  0214                     	;# 
  1010  0214                     	;# 
  1011  0215                     	;# 
  1012  0215                     	;# 
  1013  0215                     	;# 
  1014  0216                     	;# 
  1015  0216                     	;# 
  1016  0217                     	;# 
  1017  0217                     	;# 
  1018  0291                     	;# 
  1019  0291                     	;# 
  1020  0292                     	;# 
  1021  0293                     	;# 
  1022  0298                     	;# 
  1023  0298                     	;# 
  1024  0299                     	;# 
  1025  029A                     	;# 
  1026  0394                     	;# 
  1027  0395                     	;# 
  1028  0396                     	;# 
  1029  0FE4                     	;# 
  1030  0FE5                     	;# 
  1031  0FE6                     	;# 
  1032  0FE7                     	;# 
  1033  0FE8                     	;# 
  1034  0FE9                     	;# 
  1035  0FEA                     	;# 
  1036  0FEB                     	;# 
  1037  0FED                     	;# 
  1038  0FEE                     	;# 
  1039  0FEF                     	;# 
  1040  0000                     	;# 
  1041  0001                     	;# 
  1042  0002                     	;# 
  1043  0003                     	;# 
  1044  0004                     	;# 
  1045  0005                     	;# 
  1046  0006                     	;# 
  1047  0007                     	;# 
  1048  0008                     	;# 
  1049  0009                     	;# 
  1050  000A                     	;# 
  1051  000B                     	;# 
  1052  000C                     	;# 
  1053  000D                     	;# 
  1054  000E                     	;# 
  1055  0010                     	;# 
  1056  0011                     	;# 
  1057  0012                     	;# 
  1058  0015                     	;# 
  1059  0016                     	;# 
  1060  0016                     	;# 
  1061  0017                     	;# 
  1062  0018                     	;# 
  1063  0019                     	;# 
  1064  001A                     	;# 
  1065  001B                     	;# 
  1066  001C                     	;# 
  1067  008C                     	;# 
  1068  008D                     	;# 
  1069  008E                     	;# 
  1070  0090                     	;# 
  1071  0091                     	;# 
  1072  0092                     	;# 
  1073  0095                     	;# 
  1074  0096                     	;# 
  1075  0097                     	;# 
  1076  0099                     	;# 
  1077  009A                     	;# 
  1078  009B                     	;# 
  1079  009B                     	;# 
  1080  009C                     	;# 
  1081  009D                     	;# 
  1082  009E                     	;# 
  1083  010C                     	;# 
  1084  010D                     	;# 
  1085  010E                     	;# 
  1086  0116                     	;# 
  1087  0117                     	;# 
  1088  011D                     	;# 
  1089  018C                     	;# 
  1090  018D                     	;# 
  1091  018E                     	;# 
  1092  0191                     	;# 
  1093  0191                     	;# 
  1094  0192                     	;# 
  1095  0193                     	;# 
  1096  0193                     	;# 
  1097  0194                     	;# 
  1098  0195                     	;# 
  1099  0196                     	;# 
  1100  0197                     	;# 
  1101  0199                     	;# 
  1102  019A                     	;# 
  1103  019B                     	;# 
  1104  019B                     	;# 
  1105  019B                     	;# 
  1106  019B                     	;# 
  1107  019C                     	;# 
  1108  019C                     	;# 
  1109  019D                     	;# 
  1110  019E                     	;# 
  1111  019F                     	;# 
  1112  020D                     	;# 
  1113  0210                     	;# 
  1114  0211                     	;# 
  1115  0211                     	;# 
  1116  0212                     	;# 
  1117  0212                     	;# 
  1118  0213                     	;# 
  1119  0213                     	;# 
  1120  0214                     	;# 
  1121  0214                     	;# 
  1122  0215                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0216                     	;# 
  1126  0216                     	;# 
  1127  0217                     	;# 
  1128  0217                     	;# 
  1129  0291                     	;# 
  1130  0291                     	;# 
  1131  0292                     	;# 
  1132  0293                     	;# 
  1133  0298                     	;# 
  1134  0298                     	;# 
  1135  0299                     	;# 
  1136  029A                     	;# 
  1137  0394                     	;# 
  1138  0395                     	;# 
  1139  0396                     	;# 
  1140  0FE4                     	;# 
  1141  0FE5                     	;# 
  1142  0FE6                     	;# 
  1143  0FE7                     	;# 
  1144  0FE8                     	;# 
  1145  0FE9                     	;# 
  1146  0FEA                     	;# 
  1147  0FEB                     	;# 
  1148  0FED                     	;# 
  1149  0FEE                     	;# 
  1150  0FEF                     	;# 
  1151  0000                     	;# 
  1152  0001                     	;# 
  1153  0002                     	;# 
  1154  0003                     	;# 
  1155  0004                     	;# 
  1156  0005                     	;# 
  1157  0006                     	;# 
  1158  0007                     	;# 
  1159  0008                     	;# 
  1160  0009                     	;# 
  1161  000A                     	;# 
  1162  000B                     	;# 
  1163  000C                     	;# 
  1164  000D                     	;# 
  1165  000E                     	;# 
  1166  0010                     	;# 
  1167  0011                     	;# 
  1168  0012                     	;# 
  1169  0015                     	;# 
  1170  0016                     	;# 
  1171  0016                     	;# 
  1172  0017                     	;# 
  1173  0018                     	;# 
  1174  0019                     	;# 
  1175  001A                     	;# 
  1176  001B                     	;# 
  1177  001C                     	;# 
  1178  008C                     	;# 
  1179  008D                     	;# 
  1180  008E                     	;# 
  1181  0090                     	;# 
  1182  0091                     	;# 
  1183  0092                     	;# 
  1184  0095                     	;# 
  1185  0096                     	;# 
  1186  0097                     	;# 
  1187  0099                     	;# 
  1188  009A                     	;# 
  1189  009B                     	;# 
  1190  009B                     	;# 
  1191  009C                     	;# 
  1192  009D                     	;# 
  1193  009E                     	;# 
  1194  010C                     	;# 
  1195  010D                     	;# 
  1196  010E                     	;# 
  1197  0116                     	;# 
  1198  0117                     	;# 
  1199  011D                     	;# 
  1200  018C                     	;# 
  1201  018D                     	;# 
  1202  018E                     	;# 
  1203  0191                     	;# 
  1204  0191                     	;# 
  1205  0192                     	;# 
  1206  0193                     	;# 
  1207  0193                     	;# 
  1208  0194                     	;# 
  1209  0195                     	;# 
  1210  0196                     	;# 
  1211  0197                     	;# 
  1212  0199                     	;# 
  1213  019A                     	;# 
  1214  019B                     	;# 
  1215  019B                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019C                     	;# 
  1219  019C                     	;# 
  1220  019D                     	;# 
  1221  019E                     	;# 
  1222  019F                     	;# 
  1223  020D                     	;# 
  1224  0210                     	;# 
  1225  0211                     	;# 
  1226  0211                     	;# 
  1227  0212                     	;# 
  1228  0212                     	;# 
  1229  0213                     	;# 
  1230  0213                     	;# 
  1231  0214                     	;# 
  1232  0214                     	;# 
  1233  0215                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0216                     	;# 
  1237  0216                     	;# 
  1238  0217                     	;# 
  1239  0217                     	;# 
  1240  0291                     	;# 
  1241  0291                     	;# 
  1242  0292                     	;# 
  1243  0293                     	;# 
  1244  0298                     	;# 
  1245  0298                     	;# 
  1246  0299                     	;# 
  1247  029A                     	;# 
  1248  0394                     	;# 
  1249  0395                     	;# 
  1250  0396                     	;# 
  1251  0FE4                     	;# 
  1252  0FE5                     	;# 
  1253  0FE6                     	;# 
  1254  0FE7                     	;# 
  1255  0FE8                     	;# 
  1256  0FE9                     	;# 
  1257  0FEA                     	;# 
  1258  0FEB                     	;# 
  1259  0FED                     	;# 
  1260  0FEE                     	;# 
  1261  0FEF                     	;# 
  1262  0000                     	;# 
  1263  0001                     	;# 
  1264  0002                     	;# 
  1265  0003                     	;# 
  1266  0004                     	;# 
  1267  0005                     	;# 
  1268  0006                     	;# 
  1269  0007                     	;# 
  1270  0008                     	;# 
  1271  0009                     	;# 
  1272  000A                     	;# 
  1273  000B                     	;# 
  1274  000C                     	;# 
  1275  000D                     	;# 
  1276  000E                     	;# 
  1277  0010                     	;# 
  1278  0011                     	;# 
  1279  0012                     	;# 
  1280  0015                     	;# 
  1281  0016                     	;# 
  1282  0016                     	;# 
  1283  0017                     	;# 
  1284  0018                     	;# 
  1285  0019                     	;# 
  1286  001A                     	;# 
  1287  001B                     	;# 
  1288  001C                     	;# 
  1289  008C                     	;# 
  1290  008D                     	;# 
  1291  008E                     	;# 
  1292  0090                     	;# 
  1293  0091                     	;# 
  1294  0092                     	;# 
  1295  0095                     	;# 
  1296  0096                     	;# 
  1297  0097                     	;# 
  1298  0099                     	;# 
  1299  009A                     	;# 
  1300  009B                     	;# 
  1301  009B                     	;# 
  1302  009C                     	;# 
  1303  009D                     	;# 
  1304  009E                     	;# 
  1305  010C                     	;# 
  1306  010D                     	;# 
  1307  010E                     	;# 
  1308  0116                     	;# 
  1309  0117                     	;# 
  1310  011D                     	;# 
  1311  018C                     	;# 
  1312  018D                     	;# 
  1313  018E                     	;# 
  1314  0191                     	;# 
  1315  0191                     	;# 
  1316  0192                     	;# 
  1317  0193                     	;# 
  1318  0193                     	;# 
  1319  0194                     	;# 
  1320  0195                     	;# 
  1321  0196                     	;# 
  1322  0197                     	;# 
  1323  0199                     	;# 
  1324  019A                     	;# 
  1325  019B                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019C                     	;# 
  1330  019C                     	;# 
  1331  019D                     	;# 
  1332  019E                     	;# 
  1333  019F                     	;# 
  1334  020D                     	;# 
  1335  0210                     	;# 
  1336  0211                     	;# 
  1337  0211                     	;# 
  1338  0212                     	;# 
  1339  0212                     	;# 
  1340  0213                     	;# 
  1341  0213                     	;# 
  1342  0214                     	;# 
  1343  0214                     	;# 
  1344  0215                     	;# 
  1345  0215                     	;# 
  1346  0215                     	;# 
  1347  0216                     	;# 
  1348  0216                     	;# 
  1349  0217                     	;# 
  1350  0217                     	;# 
  1351  0291                     	;# 
  1352  0291                     	;# 
  1353  0292                     	;# 
  1354  0293                     	;# 
  1355  0298                     	;# 
  1356  0298                     	;# 
  1357  0299                     	;# 
  1358  029A                     	;# 
  1359  0394                     	;# 
  1360  0395                     	;# 
  1361  0396                     	;# 
  1362  0FE4                     	;# 
  1363  0FE5                     	;# 
  1364  0FE6                     	;# 
  1365  0FE7                     	;# 
  1366  0FE8                     	;# 
  1367  0FE9                     	;# 
  1368  0FEA                     	;# 
  1369  0FEB                     	;# 
  1370  0FED                     	;# 
  1371  0FEE                     	;# 
  1372  0FEF                     	;# 
  1373  0000                     	;# 
  1374  0001                     	;# 
  1375  0002                     	;# 
  1376  0003                     	;# 
  1377  0004                     	;# 
  1378  0005                     	;# 
  1379  0006                     	;# 
  1380  0007                     	;# 
  1381  0008                     	;# 
  1382  0009                     	;# 
  1383  000A                     	;# 
  1384  000B                     	;# 
  1385  000C                     	;# 
  1386  000D                     	;# 
  1387  000E                     	;# 
  1388  0010                     	;# 
  1389  0011                     	;# 
  1390  0012                     	;# 
  1391  0015                     	;# 
  1392  0016                     	;# 
  1393  0016                     	;# 
  1394  0017                     	;# 
  1395  0018                     	;# 
  1396  0019                     	;# 
  1397  001A                     	;# 
  1398  001B                     	;# 
  1399  001C                     	;# 
  1400  008C                     	;# 
  1401  008D                     	;# 
  1402  008E                     	;# 
  1403  0090                     	;# 
  1404  0091                     	;# 
  1405  0092                     	;# 
  1406  0095                     	;# 
  1407  0096                     	;# 
  1408  0097                     	;# 
  1409  0099                     	;# 
  1410  009A                     	;# 
  1411  009B                     	;# 
  1412  009B                     	;# 
  1413  009C                     	;# 
  1414  009D                     	;# 
  1415  009E                     	;# 
  1416  010C                     	;# 
  1417  010D                     	;# 
  1418  010E                     	;# 
  1419  0116                     	;# 
  1420  0117                     	;# 
  1421  011D                     	;# 
  1422  018C                     	;# 
  1423  018D                     	;# 
  1424  018E                     	;# 
  1425  0191                     	;# 
  1426  0191                     	;# 
  1427  0192                     	;# 
  1428  0193                     	;# 
  1429  0193                     	;# 
  1430  0194                     	;# 
  1431  0195                     	;# 
  1432  0196                     	;# 
  1433  0197                     	;# 
  1434  0199                     	;# 
  1435  019A                     	;# 
  1436  019B                     	;# 
  1437  019B                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019C                     	;# 
  1441  019C                     	;# 
  1442  019D                     	;# 
  1443  019E                     	;# 
  1444  019F                     	;# 
  1445  020D                     	;# 
  1446  0210                     	;# 
  1447  0211                     	;# 
  1448  0211                     	;# 
  1449  0212                     	;# 
  1450  0212                     	;# 
  1451  0213                     	;# 
  1452  0213                     	;# 
  1453  0214                     	;# 
  1454  0214                     	;# 
  1455  0215                     	;# 
  1456  0215                     	;# 
  1457  0215                     	;# 
  1458  0216                     	;# 
  1459  0216                     	;# 
  1460  0217                     	;# 
  1461  0217                     	;# 
  1462  0291                     	;# 
  1463  0291                     	;# 
  1464  0292                     	;# 
  1465  0293                     	;# 
  1466  0298                     	;# 
  1467  0298                     	;# 
  1468  0299                     	;# 
  1469  029A                     	;# 
  1470  0394                     	;# 
  1471  0395                     	;# 
  1472  0396                     	;# 
  1473  0FE4                     	;# 
  1474  0FE5                     	;# 
  1475  0FE6                     	;# 
  1476  0FE7                     	;# 
  1477  0FE8                     	;# 
  1478  0FE9                     	;# 
  1479  0FEA                     	;# 
  1480  0FEB                     	;# 
  1481  0FED                     	;# 
  1482  0FEE                     	;# 
  1483  0FEF                     	;# 
  1484  0000                     	;# 
  1485  0001                     	;# 
  1486  0002                     	;# 
  1487  0003                     	;# 
  1488  0004                     	;# 
  1489  0005                     	;# 
  1490  0006                     	;# 
  1491  0007                     	;# 
  1492  0008                     	;# 
  1493  0009                     	;# 
  1494  000A                     	;# 
  1495  000B                     	;# 
  1496  000C                     	;# 
  1497  000D                     	;# 
  1498  000E                     	;# 
  1499  0010                     	;# 
  1500  0011                     	;# 
  1501  0012                     	;# 
  1502  0015                     	;# 
  1503  0016                     	;# 
  1504  0016                     	;# 
  1505  0017                     	;# 
  1506  0018                     	;# 
  1507  0019                     	;# 
  1508  001A                     	;# 
  1509  001B                     	;# 
  1510  001C                     	;# 
  1511  008C                     	;# 
  1512  008D                     	;# 
  1513  008E                     	;# 
  1514  0090                     	;# 
  1515  0091                     	;# 
  1516  0092                     	;# 
  1517  0095                     	;# 
  1518  0096                     	;# 
  1519  0097                     	;# 
  1520  0099                     	;# 
  1521  009A                     	;# 
  1522  009B                     	;# 
  1523  009B                     	;# 
  1524  009C                     	;# 
  1525  009D                     	;# 
  1526  009E                     	;# 
  1527  010C                     	;# 
  1528  010D                     	;# 
  1529  010E                     	;# 
  1530  0116                     	;# 
  1531  0117                     	;# 
  1532  011D                     	;# 
  1533  018C                     	;# 
  1534  018D                     	;# 
  1535  018E                     	;# 
  1536  0191                     	;# 
  1537  0191                     	;# 
  1538  0192                     	;# 
  1539  0193                     	;# 
  1540  0193                     	;# 
  1541  0194                     	;# 
  1542  0195                     	;# 
  1543  0196                     	;# 
  1544  0197                     	;# 
  1545  0199                     	;# 
  1546  019A                     	;# 
  1547  019B                     	;# 
  1548  019B                     	;# 
  1549  019B                     	;# 
  1550  019B                     	;# 
  1551  019C                     	;# 
  1552  019C                     	;# 
  1553  019D                     	;# 
  1554  019E                     	;# 
  1555  019F                     	;# 
  1556  020D                     	;# 
  1557  0210                     	;# 
  1558  0211                     	;# 
  1559  0211                     	;# 
  1560  0212                     	;# 
  1561  0212                     	;# 
  1562  0213                     	;# 
  1563  0213                     	;# 
  1564  0214                     	;# 
  1565  0214                     	;# 
  1566  0215                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0216                     	;# 
  1570  0216                     	;# 
  1571  0217                     	;# 
  1572  0217                     	;# 
  1573  0291                     	;# 
  1574  0291                     	;# 
  1575  0292                     	;# 
  1576  0293                     	;# 
  1577  0298                     	;# 
  1578  0298                     	;# 
  1579  0299                     	;# 
  1580  029A                     	;# 
  1581  0394                     	;# 
  1582  0395                     	;# 
  1583  0396                     	;# 
  1584  0FE4                     	;# 
  1585  0FE5                     	;# 
  1586  0FE6                     	;# 
  1587  0FE7                     	;# 
  1588  0FE8                     	;# 
  1589  0FE9                     	;# 
  1590  0FEA                     	;# 
  1591  0FEB                     	;# 
  1592  0FED                     	;# 
  1593  0FEE                     	;# 
  1594  0FEF                     	;# 
  1595  0000                     	;# 
  1596  0001                     	;# 
  1597  0002                     	;# 
  1598  0003                     	;# 
  1599  0004                     	;# 
  1600  0005                     	;# 
  1601  0006                     	;# 
  1602  0007                     	;# 
  1603  0008                     	;# 
  1604  0009                     	;# 
  1605  000A                     	;# 
  1606  000B                     	;# 
  1607  000C                     	;# 
  1608  000D                     	;# 
  1609  000E                     	;# 
  1610  0010                     	;# 
  1611  0011                     	;# 
  1612  0012                     	;# 
  1613  0015                     	;# 
  1614  0016                     	;# 
  1615  0016                     	;# 
  1616  0017                     	;# 
  1617  0018                     	;# 
  1618  0019                     	;# 
  1619  001A                     	;# 
  1620  001B                     	;# 
  1621  001C                     	;# 
  1622  008C                     	;# 
  1623  008D                     	;# 
  1624  008E                     	;# 
  1625  0090                     	;# 
  1626  0091                     	;# 
  1627  0092                     	;# 
  1628  0095                     	;# 
  1629  0096                     	;# 
  1630  0097                     	;# 
  1631  0099                     	;# 
  1632  009A                     	;# 
  1633  009B                     	;# 
  1634  009B                     	;# 
  1635  009C                     	;# 
  1636  009D                     	;# 
  1637  009E                     	;# 
  1638  010C                     	;# 
  1639  010D                     	;# 
  1640  010E                     	;# 
  1641  0116                     	;# 
  1642  0117                     	;# 
  1643  011D                     	;# 
  1644  018C                     	;# 
  1645  018D                     	;# 
  1646  018E                     	;# 
  1647  0191                     	;# 
  1648  0191                     	;# 
  1649  0192                     	;# 
  1650  0193                     	;# 
  1651  0193                     	;# 
  1652  0194                     	;# 
  1653  0195                     	;# 
  1654  0196                     	;# 
  1655  0197                     	;# 
  1656  0199                     	;# 
  1657  019A                     	;# 
  1658  019B                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019C                     	;# 
  1663  019C                     	;# 
  1664  019D                     	;# 
  1665  019E                     	;# 
  1666  019F                     	;# 
  1667  020D                     	;# 
  1668  0210                     	;# 
  1669  0211                     	;# 
  1670  0211                     	;# 
  1671  0212                     	;# 
  1672  0212                     	;# 
  1673  0213                     	;# 
  1674  0213                     	;# 
  1675  0214                     	;# 
  1676  0214                     	;# 
  1677  0215                     	;# 
  1678  0215                     	;# 
  1679  0215                     	;# 
  1680  0216                     	;# 
  1681  0216                     	;# 
  1682  0217                     	;# 
  1683  0217                     	;# 
  1684  0291                     	;# 
  1685  0291                     	;# 
  1686  0292                     	;# 
  1687  0293                     	;# 
  1688  0298                     	;# 
  1689  0298                     	;# 
  1690  0299                     	;# 
  1691  029A                     	;# 
  1692  0394                     	;# 
  1693  0395                     	;# 
  1694  0396                     	;# 
  1695  0FE4                     	;# 
  1696  0FE5                     	;# 
  1697  0FE6                     	;# 
  1698  0FE7                     	;# 
  1699  0FE8                     	;# 
  1700  0FE9                     	;# 
  1701  0FEA                     	;# 
  1702  0FEB                     	;# 
  1703  0FED                     	;# 
  1704  0FEE                     	;# 
  1705  0FEF                     	;# 
  1706  0000                     	;# 
  1707  0001                     	;# 
  1708  0002                     	;# 
  1709  0003                     	;# 
  1710  0004                     	;# 
  1711  0005                     	;# 
  1712  0006                     	;# 
  1713  0007                     	;# 
  1714  0008                     	;# 
  1715  0009                     	;# 
  1716  000A                     	;# 
  1717  000B                     	;# 
  1718  000C                     	;# 
  1719  000D                     	;# 
  1720  000E                     	;# 
  1721  0010                     	;# 
  1722  0011                     	;# 
  1723  0012                     	;# 
  1724  0015                     	;# 
  1725  0016                     	;# 
  1726  0016                     	;# 
  1727  0017                     	;# 
  1728  0018                     	;# 
  1729  0019                     	;# 
  1730  001A                     	;# 
  1731  001B                     	;# 
  1732  001C                     	;# 
  1733  008C                     	;# 
  1734  008D                     	;# 
  1735  008E                     	;# 
  1736  0090                     	;# 
  1737  0091                     	;# 
  1738  0092                     	;# 
  1739  0095                     	;# 
  1740  0096                     	;# 
  1741  0097                     	;# 
  1742  0099                     	;# 
  1743  009A                     	;# 
  1744  009B                     	;# 
  1745  009B                     	;# 
  1746  009C                     	;# 
  1747  009D                     	;# 
  1748  009E                     	;# 
  1749  010C                     	;# 
  1750  010D                     	;# 
  1751  010E                     	;# 
  1752  0116                     	;# 
  1753  0117                     	;# 
  1754  011D                     	;# 
  1755  018C                     	;# 
  1756  018D                     	;# 
  1757  018E                     	;# 
  1758  0191                     	;# 
  1759  0191                     	;# 
  1760  0192                     	;# 
  1761  0193                     	;# 
  1762  0193                     	;# 
  1763  0194                     	;# 
  1764  0195                     	;# 
  1765  0196                     	;# 
  1766  0197                     	;# 
  1767  0199                     	;# 
  1768  019A                     	;# 
  1769  019B                     	;# 
  1770  019B                     	;# 
  1771  019B                     	;# 
  1772  019B                     	;# 
  1773  019C                     	;# 
  1774  019C                     	;# 
  1775  019D                     	;# 
  1776  019E                     	;# 
  1777  019F                     	;# 
  1778  020D                     	;# 
  1779  0210                     	;# 
  1780  0211                     	;# 
  1781  0211                     	;# 
  1782  0212                     	;# 
  1783  0212                     	;# 
  1784  0213                     	;# 
  1785  0213                     	;# 
  1786  0214                     	;# 
  1787  0214                     	;# 
  1788  0215                     	;# 
  1789  0215                     	;# 
  1790  0215                     	;# 
  1791  0216                     	;# 
  1792  0216                     	;# 
  1793  0217                     	;# 
  1794  0217                     	;# 
  1795  0291                     	;# 
  1796  0291                     	;# 
  1797  0292                     	;# 
  1798  0293                     	;# 
  1799  0298                     	;# 
  1800  0298                     	;# 
  1801  0299                     	;# 
  1802  029A                     	;# 
  1803  0394                     	;# 
  1804  0395                     	;# 
  1805  0396                     	;# 
  1806  0FE4                     	;# 
  1807  0FE5                     	;# 
  1808  0FE6                     	;# 
  1809  0FE7                     	;# 
  1810  0FE8                     	;# 
  1811  0FE9                     	;# 
  1812  0FEA                     	;# 
  1813  0FEB                     	;# 
  1814  0FED                     	;# 
  1815  0FEE                     	;# 
  1816  0FEF                     	;# 
  1817  0000                     	;# 
  1818  0001                     	;# 
  1819  0002                     	;# 
  1820  0003                     	;# 
  1821  0004                     	;# 
  1822  0005                     	;# 
  1823  0006                     	;# 
  1824  0007                     	;# 
  1825  0008                     	;# 
  1826  0009                     	;# 
  1827  000A                     	;# 
  1828  000B                     	;# 
  1829  000C                     	;# 
  1830  000D                     	;# 
  1831  000E                     	;# 
  1832  0010                     	;# 
  1833  0011                     	;# 
  1834  0012                     	;# 
  1835  0015                     	;# 
  1836  0016                     	;# 
  1837  0016                     	;# 
  1838  0017                     	;# 
  1839  0018                     	;# 
  1840  0019                     	;# 
  1841  001A                     	;# 
  1842  001B                     	;# 
  1843  001C                     	;# 
  1844  008C                     	;# 
  1845  008D                     	;# 
  1846  008E                     	;# 
  1847  0090                     	;# 
  1848  0091                     	;# 
  1849  0092                     	;# 
  1850  0095                     	;# 
  1851  0096                     	;# 
  1852  0097                     	;# 
  1853  0099                     	;# 
  1854  009A                     	;# 
  1855  009B                     	;# 
  1856  009B                     	;# 
  1857  009C                     	;# 
  1858  009D                     	;# 
  1859  009E                     	;# 
  1860  010C                     	;# 
  1861  010D                     	;# 
  1862  010E                     	;# 
  1863  0116                     	;# 
  1864  0117                     	;# 
  1865  011D                     	;# 
  1866  018C                     	;# 
  1867  018D                     	;# 
  1868  018E                     	;# 
  1869  0191                     	;# 
  1870  0191                     	;# 
  1871  0192                     	;# 
  1872  0193                     	;# 
  1873  0193                     	;# 
  1874  0194                     	;# 
  1875  0195                     	;# 
  1876  0196                     	;# 
  1877  0197                     	;# 
  1878  0199                     	;# 
  1879  019A                     	;# 
  1880  019B                     	;# 
  1881  019B                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019C                     	;# 
  1885  019C                     	;# 
  1886  019D                     	;# 
  1887  019E                     	;# 
  1888  019F                     	;# 
  1889  020D                     	;# 
  1890  0210                     	;# 
  1891  0211                     	;# 
  1892  0211                     	;# 
  1893  0212                     	;# 
  1894  0212                     	;# 
  1895  0213                     	;# 
  1896  0213                     	;# 
  1897  0214                     	;# 
  1898  0214                     	;# 
  1899  0215                     	;# 
  1900  0215                     	;# 
  1901  0215                     	;# 
  1902  0216                     	;# 
  1903  0216                     	;# 
  1904  0217                     	;# 
  1905  0217                     	;# 
  1906  0291                     	;# 
  1907  0291                     	;# 
  1908  0292                     	;# 
  1909  0293                     	;# 
  1910  0298                     	;# 
  1911  0298                     	;# 
  1912  0299                     	;# 
  1913  029A                     	;# 
  1914  0394                     	;# 
  1915  0395                     	;# 
  1916  0396                     	;# 
  1917  0FE4                     	;# 
  1918  0FE5                     	;# 
  1919  0FE6                     	;# 
  1920  0FE7                     	;# 
  1921  0FE8                     	;# 
  1922  0FE9                     	;# 
  1923  0FEA                     	;# 
  1924  0FEB                     	;# 
  1925  0FED                     	;# 
  1926  0FEE                     	;# 
  1927  0FEF                     	;# 
  1928  0000                     	;# 
  1929  0001                     	;# 
  1930  0002                     	;# 
  1931  0003                     	;# 
  1932  0004                     	;# 
  1933  0005                     	;# 
  1934  0006                     	;# 
  1935  0007                     	;# 
  1936  0008                     	;# 
  1937  0009                     	;# 
  1938  000A                     	;# 
  1939  000B                     	;# 
  1940  000C                     	;# 
  1941  000D                     	;# 
  1942  000E                     	;# 
  1943  0010                     	;# 
  1944  0011                     	;# 
  1945  0012                     	;# 
  1946  0015                     	;# 
  1947  0016                     	;# 
  1948  0016                     	;# 
  1949  0017                     	;# 
  1950  0018                     	;# 
  1951  0019                     	;# 
  1952  001A                     	;# 
  1953  001B                     	;# 
  1954  001C                     	;# 
  1955  008C                     	;# 
  1956  008D                     	;# 
  1957  008E                     	;# 
  1958  0090                     	;# 
  1959  0091                     	;# 
  1960  0092                     	;# 
  1961  0095                     	;# 
  1962  0096                     	;# 
  1963  0097                     	;# 
  1964  0099                     	;# 
  1965  009A                     	;# 
  1966  009B                     	;# 
  1967  009B                     	;# 
  1968  009C                     	;# 
  1969  009D                     	;# 
  1970  009E                     	;# 
  1971  010C                     	;# 
  1972  010D                     	;# 
  1973  010E                     	;# 
  1974  0116                     	;# 
  1975  0117                     	;# 
  1976  011D                     	;# 
  1977  018C                     	;# 
  1978  018D                     	;# 
  1979  018E                     	;# 
  1980  0191                     	;# 
  1981  0191                     	;# 
  1982  0192                     	;# 
  1983  0193                     	;# 
  1984  0193                     	;# 
  1985  0194                     	;# 
  1986  0195                     	;# 
  1987  0196                     	;# 
  1988  0197                     	;# 
  1989  0199                     	;# 
  1990  019A                     	;# 
  1991  019B                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019C                     	;# 
  1996  019C                     	;# 
  1997  019D                     	;# 
  1998  019E                     	;# 
  1999  019F                     	;# 
  2000  020D                     	;# 
  2001  0210                     	;# 
  2002  0211                     	;# 
  2003  0211                     	;# 
  2004  0212                     	;# 
  2005  0212                     	;# 
  2006  0213                     	;# 
  2007  0213                     	;# 
  2008  0214                     	;# 
  2009  0214                     	;# 
  2010  0215                     	;# 
  2011  0215                     	;# 
  2012  0215                     	;# 
  2013  0216                     	;# 
  2014  0216                     	;# 
  2015  0217                     	;# 
  2016  0217                     	;# 
  2017  0291                     	;# 
  2018  0291                     	;# 
  2019  0292                     	;# 
  2020  0293                     	;# 
  2021  0298                     	;# 
  2022  0298                     	;# 
  2023  0299                     	;# 
  2024  029A                     	;# 
  2025  0394                     	;# 
  2026  0395                     	;# 
  2027  0396                     	;# 
  2028  0FE4                     	;# 
  2029  0FE5                     	;# 
  2030  0FE6                     	;# 
  2031  0FE7                     	;# 
  2032  0FE8                     	;# 
  2033  0FE9                     	;# 
  2034  0FEA                     	;# 
  2035  0FEB                     	;# 
  2036  0FED                     	;# 
  2037  0FEE                     	;# 
  2038  0FEF                     	;# 
  2039                           
  2040                           	psect	idataBANK4
  2041  1E70                     __pidataBANK4:	
  2042                           
  2043                           ;initializer for __product
  2044  1E70  3463               	retlw	99
  2045  1E71  3402               	retlw	2
  2046  1E72  3400               	retlw	0
  2047  1E73  3400               	retlw	0
  2048  1E74  3400               	retlw	0
  2049  1E75  3400               	retlw	0
  2050  1E76  3400               	retlw	0
  2051  1E77  3400               	retlw	0
  2052  1E78  3400               	retlw	0
  2053  1E79  3400               	retlw	0
  2054  1E7A  3400               	retlw	0
  2055  1E7B  3400               	retlw	0
  2056  1E7C  34FF               	retlw	255
  2057  1E7D  34FF               	retlw	255
  2058  1E7E  34FF               	retlw	255
  2059  1E7F  3400               	retlw	0
  2060  1E80  3400               	retlw	0
  2061  1E81  3400               	retlw	0
  2062  1E82  3400               	retlw	0
  2063  1E83  3400               	retlw	0
  2064  1E84  3400               	retlw	0
  2065  1E85  3400               	retlw	0
  2066  1E86  3400               	retlw	0
  2067  1E87  3400               	retlw	0
  2068  1E88  3400               	retlw	0
  2069  1E89  3400               	retlw	0
  2070  1E8A  3400               	retlw	0
  2071  1E8B  3400               	retlw	0
  2072  1E8C  3400               	retlw	0
  2073  1E8D  3400               	retlw	0
  2074  1E8E  3400               	retlw	0
  2075  1E8F  3400               	retlw	0
  2076                           
  2077                           	psect	stringtext
  2078  1000                     __pstringtext:	
  2079  1000                     _CC2500_registers_address:	
  2080  1000  3403               	retlw	3
  2081  1001  3416               	retlw	22
  2082  1002  3417               	retlw	23
  2083  1003  341E               	retlw	30
  2084  1004  341F               	retlw	31
  2085  1005  3420               	retlw	32
  2086  1006  342A               	retlw	42
  2087  1007  342B               	retlw	43
  2088  1008  340B               	retlw	11
  2089  1009  340C               	retlw	12
  2090  100A  340D               	retlw	13
  2091  100B  340E               	retlw	14
  2092  100C  340F               	retlw	15
  2093  100D  3410               	retlw	16
  2094  100E  3411               	retlw	17
  2095  100F  3412               	retlw	18
  2096  1010  3413               	retlw	19
  2097  1011  3414               	retlw	20
  2098  1012  340A               	retlw	10
  2099  1013  3415               	retlw	21
  2100  1014  3421               	retlw	33
  2101  1015  3422               	retlw	34
  2102  1016  3418               	retlw	24
  2103  1017  3419               	retlw	25
  2104  1018  341A               	retlw	26
  2105  1019  341B               	retlw	27
  2106  101A  341C               	retlw	28
  2107  101B  341D               	retlw	29
  2108  101C  3423               	retlw	35
  2109  101D  3424               	retlw	36
  2110  101E  3425               	retlw	37
  2111  101F  3426               	retlw	38
  2112  1020  3429               	retlw	41
  2113  1021  342C               	retlw	44
  2114  1022  342D               	retlw	45
  2115  1023  342E               	retlw	46
  2116  1024  3400               	retlw	0
  2117  1025  3401               	retlw	1
  2118  1026  3402               	retlw	2
  2119  1027  3407               	retlw	7
  2120  1028  3408               	retlw	8
  2121  1029  3409               	retlw	9
  2122  102A  3406               	retlw	6
  2123  102B  3404               	retlw	4
  2124  102C  3405               	retlw	5
  2125  102D  3427               	retlw	39
  2126  102E  3428               	retlw	40
  2127  102F                     __end_of_CC2500_registers_address:	
  2128  102F                     _CC2500_rfSettings:	
  2129  102F  3407               	retlw	7
  2130  1030  3407               	retlw	7
  2131  1031  3430               	retlw	48
  2132  1032  3487               	retlw	135
  2133  1033  346B               	retlw	107
  2134  1034  34F8               	retlw	248
  2135  1035  347F               	retlw	127
  2136  1036  343F               	retlw	63
  2137  1037  3409               	retlw	9
  2138  1038  3400               	retlw	0
  2139  1039  345C               	retlw	92
  2140  103A  34A7               	retlw	167
  2141  103B  3462               	retlw	98
  2142  103C  3486               	retlw	134
  2143  103D  3483               	retlw	131
  2144  103E  3403               	retlw	3
  2145  103F  3422               	retlw	34
  2146  1040  34F8               	retlw	248
  2147  1041  3400               	retlw	0
  2148  1042  3444               	retlw	68
  2149  1043  34B6               	retlw	182
  2150  1044  3410               	retlw	16
  2151  1045  3418               	retlw	24
  2152  1046  341D               	retlw	29
  2153  1047  341C               	retlw	28
  2154  1048  34C7               	retlw	199
  2155  1049  3400               	retlw	0
  2156  104A  34B2               	retlw	178
  2157  104B  34EA               	retlw	234
  2158  104C  340A               	retlw	10
  2159  104D  3400               	retlw	0
  2160  104E  3411               	retlw	17
  2161  104F  3459               	retlw	89
  2162  1050  3488               	retlw	136
  2163  1051  3431               	retlw	49
  2164  1052  340B               	retlw	11
  2165  1053  342F               	retlw	47
  2166  1054  342E               	retlw	46
  2167  1055  3406               	retlw	6
  2168  1056  3404               	retlw	4
  2169  1057  3405               	retlw	5
  2170  1058  3400               	retlw	0
  2171  1059  3430               	retlw	48
  2172  105A  34D3               	retlw	211
  2173  105B  3491               	retlw	145
  2174  105C  3441               	retlw	65
  2175  105D  3400               	retlw	0
  2176  105E                     __end_of_CC2500_rfSettings:	
  2177  105E                     _CC2500_patable_vaule:	
  2178  105E  34FE               	retlw	254
  2179  105F  34FE               	retlw	254
  2180  1060  34FE               	retlw	254
  2181  1061  34FE               	retlw	254
  2182  1062  34FE               	retlw	254
  2183  1063  34FE               	retlw	254
  2184  1064  34FE               	retlw	254
  2185  1065  34FE               	retlw	254
  2186  1066                     __end_of_CC2500_patable_vaule:	
  2187                           
  2188                           	psect	nvCOMMON
  2189  007B                     __pnvCOMMON:	
  2190  007B                     _product:	
  2191  007B                     	ds	1
  2192  000C                     _PORTA	set	12
  2193  000D                     _PORTB	set	13
  2194  000E                     _PORTC	set	14
  2195  0018                     _T1CON	set	24
  2196  0017                     _TMR1H	set	23
  2197  0016                     _TMR1L	set	22
  2198  005F                     _GIE	set	95
  2199  005B                     _IOCIE	set	91
  2200  0058                     _IOCIF	set	88
  2201  005E                     _PEIE	set	94
  2202  0060                     _RA0	set	96
  2203  0063                     _RA3	set	99
  2204  0064                     _RA4	set	100
  2205  0066                     _RA6	set	102
  2206  0067                     _RA7	set	103
  2207  0068                     _RB0	set	104
  2208  0069                     _RB1	set	105
  2209  006A                     _RB2	set	106
  2210  006B                     _RB3	set	107
  2211  006C                     _RB4	set	108
  2212  006D                     _RB5	set	109
  2213  0070                     _RC0	set	112
  2214  0071                     _RC1	set	113
  2215  0072                     _RC2	set	114
  2216  0074                     _RC4	set	116
  2217  0075                     _RC5	set	117
  2218  0077                     _RC7	set	119
  2219  0088                     _TMR1IF	set	136
  2220  009D                     _ADCON0	set	157
  2221  009E                     _ADCON1	set	158
  2222  009C                     _ADRESH	set	156
  2223  009B                     _ADRESL	set	155
  2224  0099                     _OSCCON	set	153
  2225  008C                     _TRISA	set	140
  2226  008D                     _TRISB	set	141
  2227  008E                     _TRISC	set	142
  2228  0097                     _WDTCON	set	151
  2229  04E9                     _GO_nDONE	set	1257
  2230  0488                     _TMR1IE	set	1160
  2231  0117                     _FVRCON	set	279
  2232  010C                     _LATA	set	268
  2233  010D                     _LATB	set	269
  2234  010E                     _LATC	set	270
  2235  018C                     _ANSELA	set	396
  2236  018D                     _ANSELB	set	397
  2237  018E                     _ANSELC	set	398
  2238  0192                     _PMADRH	set	402
  2239  0191                     _PMADRL	set	401
  2240  0196                     _PMCON2	set	406
  2241  0194                     _PMDATH	set	404
  2242  0193                     _PMDATL	set	403
  2243  0CAE                     _CFGS	set	3246
  2244  0CAC                     _FREE	set	3244
  2245  0CAD                     _LWLO	set	3245
  2246  0CA8                     _RD	set	3240
  2247  0CA9                     _WR	set	3241
  2248  0CAA                     _WREN	set	3242
  2249  1069                     _WPUB1	set	4201
  2250  106A                     _WPUB2	set	4202
  2251  0396                     _IOCBF	set	918
  2252  0395                     _IOCBN	set	917
  2253  0394                     _IOCBP	set	916
  2254  1CB2                     _IOCBF2	set	7346
  2255                           
  2256                           ; #config settings
  2257  0000                     
  2258                           	psect	cinit
  2259  0015                     start_initialization:	
  2260  0015                     __initialization:	
  2261                           
  2262                           ; Clear objects allocated to BITCOMMON
  2263  0015  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2264                           
  2265                           ; Clear objects allocated to COMMON
  2266  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2267  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2268  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2269  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2270                           
  2271                           ; Clear objects allocated to BANK1
  2272  001A  30A0               	movlw	low __pbssBANK1
  2273  001B  0084               	movwf	4
  2274  001C  3000               	movlw	high __pbssBANK1
  2275  001D  0085               	movwf	5
  2276  001E  304A               	movlw	74
  2277  001F  319A  22E6  3180   	fcall	clear_ram0
  2278                           
  2279                           ; Clear objects allocated to BANK2
  2280  0022  3020               	movlw	low __pbssBANK2
  2281  0023  0084               	movwf	4
  2282  0024  3001               	movlw	high __pbssBANK2
  2283  0025  0085               	movwf	5
  2284  0026  304D               	movlw	77
  2285  0027  319A  22E6  3180   	fcall	clear_ram0
  2286                           
  2287                           ; Clear objects allocated to BANK3
  2288  002A  30A0               	movlw	low __pbssBANK3
  2289  002B  0084               	movwf	4
  2290  002C  3001               	movlw	high __pbssBANK3
  2291  002D  0085               	movwf	5
  2292  002E  3045               	movlw	69
  2293  002F  319A  22E6  3180   	fcall	clear_ram0
  2294                           
  2295                           ; Clear objects allocated to BANK4
  2296  0032  3020               	movlw	low __pbssBANK4
  2297  0033  0084               	movwf	4
  2298  0034  3002               	movlw	high __pbssBANK4
  2299  0035  0085               	movwf	5
  2300  0036  3025               	movlw	37
  2301  0037  319A  22E6  3180   	fcall	clear_ram0
  2302                           
  2303                           ; Initialize objects allocated to BANK4
  2304  003A  3070               	movlw	low __pidataBANK4
  2305  003B  0084               	movwf	4
  2306  003C  309E               	movlw	(high __pidataBANK4)| (0+128)
  2307  003D  0085               	movwf	5
  2308  003E  3045               	movlw	low __pdataBANK4
  2309  003F  0086               	movwf	6
  2310  0040  3002               	movlw	high __pdataBANK4
  2311  0041  0087               	movwf	7
  2312  0042  3020               	movlw	32
  2313  0043  319A  22E0         	fcall	init_ram
  2314  0045                     end_of_initialization:	
  2315                           ;End of C runtime variable initialization code
  2316                           
  2317  0045                     __end_of__initialization:	
  2318  0045  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2319  0046  0020               	movlb	0
  2320  0047  3195  2DDA         	ljmp	_main	;jump to C main() function
  2321                           
  2322                           	psect	bitbssCOMMON
  2323  03D0                     __pbitbssCOMMON:	
  2324  03D0                     _Receive_OK:	
  2325  03D0                     	ds	1
  2326  03D1                     _Transceive_OK:	
  2327  03D1                     	ds	1
  2328                           
  2329                           	psect	bssCOMMON
  2330  0076                     __pbssCOMMON:	
  2331  0076                     _DelayOff:	
  2332  0076                     	ds	1
  2333  0077                     _DimmerLights:	
  2334  0077                     	ds	1
  2335  0078                     _DimmerLightsIntr:	
  2336  0078                     	ds	1
  2337  0079                     _Sw:	
  2338  0079                     	ds	1
  2339                           
  2340                           	psect	bssBANK1
  2341  00A0                     __pbssBANK1:	
  2342  00A0                     _myMain:	
  2343  00A0                     	ds	16
  2344  00B0                     _Buz1:	
  2345  00B0                     	ds	12
  2346  00BC                     _RF1:	
  2347  00BC                     	ds	12
  2348  00C8                     _Dimmer:	
  2349  00C8                     	ds	3
  2350  00CB                     _CRC:	
  2351  00CB                     	ds	1
  2352  00CC                     _DimmerLights11:	
  2353  00CC                     	ds	1
  2354  00CD                     _DimmerLights22:	
  2355  00CD                     	ds	1
  2356  00CE                     _DimmerLightsIntrIOC:	
  2357  00CE                     	ds	1
  2358  00CF                     _LED:	
  2359  00CF                     	ds	1
  2360  00D0                     _RSSI:	
  2361  00D0                     	ds	1
  2362  00D1                     _Rx_Length:	
  2363  00D1                     	ds	1
  2364  00D2                     _SPI0Buffer:	
  2365  00D2                     	ds	1
  2366  00D3                     _SwDetect:	
  2367  00D3                     	ds	1
  2368  00D4                     _Tx_Length:	
  2369  00D4                     	ds	1
  2370  00D5                     _r_address:	
  2371  00D5                     	ds	1
  2372  00D6                     _r_data:	
  2373  00D6                     	ds	1
  2374  00D7                     _s_data:	
  2375  00D7                     	ds	1
  2376  00D8                     _Temp:	
  2377  00D8                     	ds	18
  2378                           
  2379                           	psect	bssBANK2
  2380  0120                     __pbssBANK2:	
  2381  0120                     _Timer1:	
  2382  0120                     	ds	3
  2383  0123                     _RF_Count:	
  2384  0123                     	ds	2
  2385  0125                     _WDT:	
  2386  0125                     	ds	2
  2387  0127                     _Load:	
  2388  0127                     	ds	45
  2389  0154                     _Sw1:	
  2390  0154                     	ds	9
  2391  015D                     _VarErrLED:	
  2392  015D                     	ds	4
  2393  0161                     _VarLED1:	
  2394  0161                     	ds	4
  2395  0165                     _VarLED2:	
  2396  0165                     	ds	4
  2397  0169                     _DlySw1:	
  2398  0169                     	ds	2
  2399  016B                     _DlySw2:	
  2400  016B                     	ds	2
  2401                           
  2402                           	psect	bssBANK3
  2403  01A0                     __pbssBANK3:	
  2404  01A0                     _RF_Data:	
  2405  01A0                     	ds	30
  2406  01BE                     _DimmerLights1:	
  2407  01BE                     	ds	15
  2408  01CD                     _DimmerLights2:	
  2409  01CD                     	ds	15
  2410  01DC                     _Sw2:	
  2411  01DC                     	ds	9
  2412                           
  2413                           	psect	bssBANK4
  2414  0220                     __pbssBANK4:	
  2415  0220                     _Memory:	
  2416  0220                     	ds	37
  2417                           
  2418                           	psect	dataBANK4
  2419  0245                     __pdataBANK4:	
  2420  0245                     __product:	
  2421  0245                     	ds	32
  2422                           
  2423                           	psect	clrtext
  2424  1AE6                     clear_ram0:	
  2425                           ;	Called with FSR0 containing the base address, and
  2426                           ;	WREG with the size to clear
  2427                           
  2428  1AE6  0064               	clrwdt	;clear the watchdog before getting into this loop
  2429  1AE7                     clrloop0:	
  2430  1AE7  0180               	clrf	0	;clear RAM location pointed to by FSR
  2431  1AE8  3101               	addfsr 0,1
  2432  1AE9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2433  1AEA  2AE7               	goto	clrloop0	;have we reached the end yet?
  2434  1AEB  3400               	retlw	0	;all done for this memory range, return
  2435                           
  2436                           	psect	inittext
  2437  1AE0                     init_ram:	
  2438  1AE0  00FE               	movwf	126
  2439  1AE1                     initloop:	
  2440  1AE1  0012               	moviw fsr0++
  2441  1AE2  001E               	movwi fsr1++
  2442  1AE3  0BFE               	decfsz	126,f
  2443  1AE4  2AE1               	goto	initloop
  2444  1AE5  3400               	retlw	0
  2445                           
  2446                           	psect	cstackBANK3
  2447  01E5                     __pcstackBANK3:	
  2448  01E5                     ?_main:	
  2449  01E5                     main@argc:	
  2450                           ; 2 bytes @ 0x0
  2451                           
  2452                           
  2453                           ; 2 bytes @ 0x0
  2454  01E5                     	ds	2
  2455  01E7                     main@argv:	
  2456                           
  2457                           ; 2 bytes @ 0x2
  2458  01E7                     	ds	2
  2459                           
  2460                           	psect	cstackBANK1
  2461  00EA                     __pcstackBANK1:	
  2462  00EA                     setMain_Exception@buz:	
  2463                           
  2464                           ; 1 bytes @ 0x0
  2465  00EA                     	ds	1
  2466  00EB                     _setMain_Exception$3908:	
  2467                           
  2468                           ; 2 bytes @ 0x1
  2469  00EB                     	ds	2
  2470  00ED                     setMain_Exception@status:	
  2471                           
  2472                           ; 1 bytes @ 0x3
  2473  00ED                     	ds	1
  2474  00EE                     setMain_Exception@command:	
  2475                           
  2476                           ; 1 bytes @ 0x4
  2477  00EE                     	ds	1
  2478                           
  2479                           	psect	cstackCOMMON
  2480  0070                     __pcstackCOMMON:	
  2481  0070                     ?_Timeout_Counter:	
  2482  0070                     ?_set_TimeoutCleared:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_CC2500_WriteByte:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_CC2500_WriteCommand:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_CC2500_ReadStatus:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_CC2500_ReadByte:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_CC2500_PowerRST:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_CC2500_InitSetREG:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_CC2500_InitPATable:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_CC2500_ClearTXFIFO:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_CC2500_ClearRXFIFO:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_CC2500_FrequencyCabr:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_CC2500_SIDLEMode:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_DlyOff_Initialization:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_DlyOff_Main:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_setDimmerLights_SwOn:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_setDimmerLights_SwOff:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_setDimmerLights_Initialization:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_Dimmer_Initialization:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_setDimmerLights_Main:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_setTxData:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_setLED_Initialization:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_setLED_Main:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_Fosc_Set:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_IO_Set:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_TMR1_Set:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_ADC_Set:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_IOC_Set:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_WDT_Set:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_IOC_ISR:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_TMR1_ISR:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_Flash_Memory_Write:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_Flash_Memory_Modify:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_WDT_Clearing:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_myMain_Initialization:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_Temp_Initialization:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_Load_Initialization:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_Switch_Initialization:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_RF_Initialization:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_getLoad_AD:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_getTemp_AD:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_my_MainTimer:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_Temp_Main:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_Load_Main:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_Switch_Main:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_RF_Main:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setLoad_AH_AL_Restore:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setTemp_Initialization:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setTemp_Main:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setRF_Initialization:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setRF_Main:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_getRxData:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setLog_Code:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_setControl_Lights_Table:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setRFSW_Control:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setRFSW_AdjControl:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setRF_DimmerValue:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setSw_Initialization:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setSw_Main:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_Buzzer_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_Buzzer_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_CC2500_TxData:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_CC2500_RxData:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_CC2500_PowerOnInitial:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_DelayOffPointSelect:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_DelayOff_Initialization:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_DelayOff_Main:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_DimmerIntrIOCPointSelect:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ??_DimmerIntrIOCPointSelect:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_DimmerIntrPointSelect:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ??_DimmerIntrPointSelect:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_setDimmerLights_IntrControl:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_DimmerLightsPointSelect:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_DimmerLights_Initialization:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_DimmerLights_Main:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_setDimmerLights_AdjControl:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_setDimmerLights_ErrorClose:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_setDimmerLights_AdjRF:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_LedPointSelect:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_LED_Initialization:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_LED_Main:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Mcu_Initialization:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_ISR:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setDimmerReClock:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Flash_Memory_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Flash_Memory_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Flash_Memory_Unlock:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Flash_Memory_Erasing:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setMemory_Modify:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setMemory_LoopSave:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_WDT_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setMain_Exception:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setRF_Learn:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_TouchPower:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_SwPointSelect:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_getDimmerLights_Status:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_DelayTimejudge:	
  2771                           ; 1 bytes @ 0x0
  2772                           
  2773  0070                     ?_getMain_All_Error_Status:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0070                     ?_getLoad_OK:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0070                     ?_getPercentValue:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0070                     ?_Flash_Memory_Read:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785  0070                     ?_getMain_LightsStatus:	
  2786                           ; 1 bytes @ 0x0
  2787                           
  2788  0070                     ?_getRF_KeyStatus:	
  2789                           ; 1 bytes @ 0x0
  2790                           
  2791  0070                     ?_getSw_KeyStatus:	
  2792                           ; 1 bytes @ 0x0
  2793                           
  2794  0070                     ?_getAll_DimmerLights_AdjGO:	
  2795                           ; 1 bytes @ 0x0
  2796                           
  2797  0070                     ?_getDimmer_LoadOK:	
  2798                           ; 1 bytes @ 0x0
  2799                           
  2800  0070                     ?_setPercentValue:	
  2801                           ; 1 bytes @ 0x0
  2802                           
  2803  0070                     ?_getMain_Lights_Count:	
  2804                           ; 1 bytes @ 0x0
  2805                           
  2806  0070                     ?_getMain_LoadOK:	
  2807                           ; 1 bytes @ 0x0
  2808                           
  2809                           
  2810                           ; 1 bytes @ 0x0
  2811  0070                     	ds	1
  2812  0071                     DimmerIntrIOCPointSelect@lights:	
  2813  0071                     DimmerIntrPointSelect@lights:	
  2814                           ; 1 bytes @ 0x1
  2815                           
  2816                           
  2817                           ; 1 bytes @ 0x1
  2818  0071                     	ds	1
  2819  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2820  0072                     ??_setDimmerLights_IntrControl:	
  2821                           ; 0 bytes @ 0x2
  2822                           
  2823  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2824                           ; 0 bytes @ 0x2
  2825                           
  2826                           
  2827                           ; 1 bytes @ 0x2
  2828  0072                     	ds	1
  2829  0073                     ??_IOC_ISR:	
  2830  0073                     ??_setDimmerReClock:	
  2831                           ; 0 bytes @ 0x3
  2832                           
  2833                           
  2834                           ; 0 bytes @ 0x3
  2835  0073                     	ds	1
  2836  0074                     setDimmerLights_IntrControl@lights:	
  2837                           
  2838                           ; 1 bytes @ 0x4
  2839  0074                     	ds	1
  2840  0075                     ??_TMR1_ISR:	
  2841  0075                     ??_ISR:	
  2842                           ; 0 bytes @ 0x5
  2843                           
  2844                           
  2845                           ; 0 bytes @ 0x5
  2846  0075                     	ds	1
  2847                           
  2848                           	psect	cstackBANK0
  2849  0020                     __pcstackBANK0:	
  2850  0020                     ??_Timeout_Counter:	
  2851  0020                     ??_set_TimeoutCleared:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_CC2500_WriteByte:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_CC2500_ReadByte:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ?_DelayTime_1us:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_Dimmer_Initialization:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_getMain_All_Error_Status:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_getLoad_OK:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_setTxData:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_Fosc_Set:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_IO_Set:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_TMR1_Set:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_ADC_Set:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ??_IOC_Set:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_WDT_Set:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_Flash_Memory_Read:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ?_setMemory_Data:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_Flash_Memory_Write:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_WDT_Clearing:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_myMain_Initialization:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ??_Temp_Initialization:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ??_setLoad_AH_AL_Restore:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ??_setTemp_Initialization:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0020                     ??_setRF_Initialization:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0020                     ??_getRF_KeyStatus:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0020                     ??_Buzzer_Initialization:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0020                     ??_Buzzer_Main:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0020                     ??_DelayOffPointSelect:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0020                     ??_DimmerLightsPointSelect:	
  2933                           ; 0 bytes @ 0x0
  2934                           
  2935  0020                     ??_getSw_KeyStatus:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0020                     ??_getAll_DimmerLights_AdjGO:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0020                     ??_getDimmer_LoadOK:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0020                     ??_LedPointSelect:	
  2945                           ; 0 bytes @ 0x0
  2946                           
  2947  0020                     ??_Flash_Memory_Unlock:	
  2948                           ; 0 bytes @ 0x0
  2949                           
  2950  0020                     ??_Flash_Memory_Erasing:	
  2951                           ; 0 bytes @ 0x0
  2952                           
  2953  0020                     ??_setMemory_Modify:	
  2954                           ; 0 bytes @ 0x0
  2955                           
  2956  0020                     ??_setMemory_LoopSave:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0020                     ??_WDT_Main:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0020                     ??_getMain_Lights_Count:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0020                     ??_setRF_Learn:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0020                     ??_TouchPower:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0020                     ??_SwPointSelect:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0020                     ?___bmul:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0020                     ?_getBuz_GO:	
  2978                           ; 1 bytes @ 0x0
  2979                           
  2980  0020                     ?_getAD:	
  2981                           ; 2 bytes @ 0x0
  2982                           
  2983  0020                     ?___awdiv:	
  2984                           ; 2 bytes @ 0x0
  2985                           
  2986  0020                     ?___ftpack:	
  2987                           ; 2 bytes @ 0x0
  2988                           
  2989  0020                     getAD@adcon1:	
  2990                           ; 3 bytes @ 0x0
  2991                           
  2992  0020                     setMemory_Data@data:	
  2993                           ; 1 bytes @ 0x0
  2994                           
  2995  0020                     getMain_Lights_Count@count:	
  2996                           ; 1 bytes @ 0x0
  2997                           
  2998  0020                     getLoad_OK@ok:	
  2999                           ; 1 bytes @ 0x0
  3000                           
  3001  0020                     ___bmul@multiplicand:	
  3002                           ; 1 bytes @ 0x0
  3003                           
  3004  0020                     DelayTime_1us@count:	
  3005                           ; 1 bytes @ 0x0
  3006                           
  3007  0020                     ___awdiv@divisor:	
  3008                           ; 2 bytes @ 0x0
  3009                           
  3010  0020                     ___ftpack@arg:	
  3011                           ; 2 bytes @ 0x0
  3012                           
  3013                           
  3014                           ; 3 bytes @ 0x0
  3015  0020                     	ds	1
  3016  0021                     ??_setMemory_Data:	
  3017  0021                     ??_RF_Initialization:	
  3018                           ; 0 bytes @ 0x1
  3019                           
  3020  0021                     ??_Mcu_Initialization:	
  3021                           ; 0 bytes @ 0x1
  3022                           
  3023  0021                     ??___bmul:	
  3024                           ; 0 bytes @ 0x1
  3025                           
  3026  0021                     CC2500_WriteByte@loop_a:	
  3027                           ; 0 bytes @ 0x1
  3028                           
  3029  0021                     CC2500_ReadByte@loop_b:	
  3030                           ; 1 bytes @ 0x1
  3031                           
  3032  0021                     DelayOffPointSelect@sw:	
  3033                           ; 1 bytes @ 0x1
  3034                           
  3035  0021                     DimmerLightsPointSelect@lights:	
  3036                           ; 1 bytes @ 0x1
  3037                           
  3038  0021                     _getSw_KeyStatus$2556:	
  3039                           ; 1 bytes @ 0x1
  3040                           
  3041  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3042                           ; 1 bytes @ 0x1
  3043                           
  3044  0021                     getDimmer_LoadOK@status:	
  3045                           ; 1 bytes @ 0x1
  3046                           
  3047  0021                     LedPointSelect@led:	
  3048                           ; 1 bytes @ 0x1
  3049                           
  3050  0021                     Flash_Memory_Read@i:	
  3051                           ; 1 bytes @ 0x1
  3052                           
  3053  0021                     Flash_Memory_Write@i:	
  3054                           ; 1 bytes @ 0x1
  3055                           
  3056  0021                     setMemory_Modify@command:	
  3057                           ; 1 bytes @ 0x1
  3058                           
  3059  0021                     setMemory_LoopSave@command:	
  3060                           ; 1 bytes @ 0x1
  3061                           
  3062  0021                     getMain_Lights_Count@status3:	
  3063                           ; 1 bytes @ 0x1
  3064                           
  3065  0021                     setLoad_AH_AL_Restore@i:	
  3066                           ; 1 bytes @ 0x1
  3067                           
  3068  0021                     setRF_Learn@command:	
  3069                           ; 1 bytes @ 0x1
  3070                           
  3071  0021                     getRF_KeyStatus@key:	
  3072                           ; 1 bytes @ 0x1
  3073                           
  3074  0021                     SwPointSelect@sw:	
  3075                           ; 1 bytes @ 0x1
  3076                           
  3077  0021                     _getMain_All_Error_Status$3925:	
  3078                           ; 1 bytes @ 0x1
  3079                           
  3080                           
  3081                           ; 2 bytes @ 0x1
  3082  0021                     	ds	1
  3083  0022                     ??_CC2500_WriteCommand:	
  3084  0022                     ??_CC2500_ReadStatus:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0022                     ??_DelayTime_1us:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0022                     ?_CC2500_WriteREG:	
  3091                           ; 0 bytes @ 0x2
  3092                           
  3093  0022                     ??_DlyOff_Initialization:	
  3094                           ; 0 bytes @ 0x2
  3095                           
  3096  0022                     ??_getDimmerLights_Status:	
  3097                           ; 0 bytes @ 0x2
  3098                           
  3099  0022                     ??_setDimmerLights_Initialization:	
  3100                           ; 0 bytes @ 0x2
  3101                           
  3102  0022                     ?_setDimmerLights_Trigger:	
  3103                           ; 0 bytes @ 0x2
  3104                           
  3105  0022                     ?_setDimmerLights_TriggerAdj:	
  3106                           ; 0 bytes @ 0x2
  3107                           
  3108  0022                     ?_setLED:	
  3109                           ; 0 bytes @ 0x2
  3110                           
  3111  0022                     ??_setLED_Main:	
  3112                           ; 0 bytes @ 0x2
  3113                           
  3114  0022                     ??_Load_Initialization:	
  3115                           ; 0 bytes @ 0x2
  3116                           
  3117  0022                     ??_getBuz_GO:	
  3118                           ; 0 bytes @ 0x2
  3119                           
  3120  0022                     ??_getMain_LoadOK:	
  3121                           ; 0 bytes @ 0x2
  3122                           
  3123  0022                     CC2500_WriteREG@value:	
  3124                           ; 0 bytes @ 0x2
  3125                           
  3126  0022                     DlyOff_Initialization@sw:	
  3127                           ; 1 bytes @ 0x2
  3128                           
  3129  0022                     getDimmerLights_Status@lights:	
  3130                           ; 1 bytes @ 0x2
  3131                           
  3132  0022                     _getSw_KeyStatus$2557:	
  3133                           ; 1 bytes @ 0x2
  3134                           
  3135  0022                     _getAll_DimmerLights_AdjGO$2560:	
  3136                           ; 1 bytes @ 0x2
  3137                           
  3138  0022                     setDimmerLights_Trigger@command:	
  3139                           ; 1 bytes @ 0x2
  3140                           
  3141  0022                     setDimmerLights_TriggerAdj@command:	
  3142                           ; 1 bytes @ 0x2
  3143                           
  3144  0022                     setLED@command:	
  3145                           ; 1 bytes @ 0x2
  3146                           
  3147  0022                     Flash_Memory_Read@address:	
  3148                           ; 1 bytes @ 0x2
  3149                           
  3150  0022                     setMemory_Data@address:	
  3151                           ; 1 bytes @ 0x2
  3152                           
  3153  0022                     getMain_Lights_Count@status1:	
  3154                           ; 1 bytes @ 0x2
  3155                           
  3156  0022                     _getRF_KeyStatus$5689:	
  3157                           ; 1 bytes @ 0x2
  3158                           
  3159  0022                     ___bmul@product:	
  3160                           ; 1 bytes @ 0x2
  3161                           
  3162  0022                     DelayTime_1us@i:	
  3163                           ; 1 bytes @ 0x2
  3164                           
  3165  0022                     ___awdiv@dividend:	
  3166                           ; 2 bytes @ 0x2
  3167                           
  3168                           
  3169                           ; 2 bytes @ 0x2
  3170  0022                     	ds	1
  3171  0023                     ??_CC2500_WriteREG:	
  3172  0023                     ??_setDimmerLights_Trigger:	
  3173                           ; 0 bytes @ 0x3
  3174                           
  3175  0023                     ??_setDimmerLights_TriggerAdj:	
  3176                           ; 0 bytes @ 0x3
  3177                           
  3178  0023                     ??_setLED:	
  3179                           ; 0 bytes @ 0x3
  3180                           
  3181  0023                     ??_DelayOff_Initialization:	
  3182                           ; 0 bytes @ 0x3
  3183                           
  3184  0023                     ??_getAD:	
  3185                           ; 0 bytes @ 0x3
  3186                           
  3187  0023                     CC2500_WriteCommand@command:	
  3188                           ; 0 bytes @ 0x3
  3189                           
  3190  0023                     CC2500_ReadStatus@status_addr:	
  3191                           ; 1 bytes @ 0x3
  3192                           
  3193  0023                     setDimmerLights_Initialization@lights:	
  3194                           ; 1 bytes @ 0x3
  3195                           
  3196  0023                     getDimmerLights_Status@status:	
  3197                           ; 1 bytes @ 0x3
  3198                           
  3199  0023                     getSw_KeyStatus@status:	
  3200                           ; 1 bytes @ 0x3
  3201                           
  3202  0023                     setLED@led:	
  3203                           ; 1 bytes @ 0x3
  3204                           
  3205  0023                     getAD@adcon0:	
  3206                           ; 1 bytes @ 0x3
  3207                           
  3208  0023                     Flash_Memory_Read@ret:	
  3209                           ; 1 bytes @ 0x3
  3210                           
  3211  0023                     getMain_Lights_Count@status2:	
  3212                           ; 1 bytes @ 0x3
  3213                           
  3214  0023                     getMain_LoadOK@ok:	
  3215                           ; 1 bytes @ 0x3
  3216                           
  3217  0023                     ___bmul@multiplier:	
  3218                           ; 1 bytes @ 0x3
  3219                           
  3220  0023                     ___ftpack@exp:	
  3221                           ; 1 bytes @ 0x3
  3222                           
  3223  0023                     _getMain_All_Error_Status$3934:	
  3224                           ; 1 bytes @ 0x3
  3225                           
  3226                           
  3227                           ; 2 bytes @ 0x3
  3228  0023                     	ds	1
  3229  0024                     ??_CC2500_ClearTXFIFO:	
  3230  0024                     ??_CC2500_ClearRXFIFO:	
  3231                           ; 0 bytes @ 0x4
  3232                           
  3233  0024                     ??_CC2500_SIDLEMode:	
  3234                           ; 0 bytes @ 0x4
  3235                           
  3236  0024                     ??_DelayTimejudge:	
  3237                           ; 0 bytes @ 0x4
  3238                           
  3239  0024                     ??_setLED_Initialization:	
  3240                           ; 0 bytes @ 0x4
  3241                           
  3242  0024                     ??_getMain_LightsStatus:	
  3243                           ; 0 bytes @ 0x4
  3244                           
  3245  0024                     ??_Flash_Memory_Modify:	
  3246                           ; 0 bytes @ 0x4
  3247                           
  3248  0024                     ??_getLoad_AD:	
  3249                           ; 0 bytes @ 0x4
  3250                           
  3251  0024                     ??_getTemp_AD:	
  3252                           ; 0 bytes @ 0x4
  3253                           
  3254  0024                     ??_setSw_Initialization:	
  3255                           ; 0 bytes @ 0x4
  3256                           
  3257  0024                     ??_CC2500_TxData:	
  3258                           ; 0 bytes @ 0x4
  3259                           
  3260  0024                     ??_CC2500_RxData:	
  3261                           ; 0 bytes @ 0x4
  3262                           
  3263  0024                     ??_DimmerLights_Initialization:	
  3264                           ; 0 bytes @ 0x4
  3265                           
  3266  0024                     ??___awdiv:	
  3267                           ; 0 bytes @ 0x4
  3268                           
  3269  0024                     CC2500_WriteREG@w_addr:	
  3270                           ; 0 bytes @ 0x4
  3271                           
  3272  0024                     getSw_KeyStatus@sw:	
  3273                           ; 1 bytes @ 0x4
  3274                           
  3275  0024                     setDimmerLights_Trigger@lights:	
  3276                           ; 1 bytes @ 0x4
  3277                           
  3278  0024                     setDimmerLights_TriggerAdj@lights:	
  3279                           ; 1 bytes @ 0x4
  3280                           
  3281  0024                     setLED_Initialization@led:	
  3282                           ; 1 bytes @ 0x4
  3283                           
  3284  0024                     setLED_Main@led:	
  3285                           ; 1 bytes @ 0x4
  3286                           
  3287  0024                     setSw_Initialization@sw:	
  3288                           ; 1 bytes @ 0x4
  3289                           
  3290  0024                     ___ftpack@sign:	
  3291                           ; 1 bytes @ 0x4
  3292                           
  3293  0024                     getBuz_GO@i:	
  3294                           ; 1 bytes @ 0x4
  3295                           
  3296  0024                     DelayTime_1us@j:	
  3297                           ; 2 bytes @ 0x4
  3298                           
  3299                           
  3300                           ; 2 bytes @ 0x4
  3301  0024                     	ds	1
  3302  0025                     ??_CC2500_InitSetREG:	
  3303  0025                     ??_CC2500_InitPATable:	
  3304                           ; 0 bytes @ 0x5
  3305                           
  3306  0025                     ??_Switch_Initialization:	
  3307                           ; 0 bytes @ 0x5
  3308                           
  3309  0025                     ??___ftpack:	
  3310                           ; 0 bytes @ 0x5
  3311                           
  3312  0025                     ??_setDimmerLights_AdjControl:	
  3313                           ; 0 bytes @ 0x5
  3314                           
  3315  0025                     ??_LED_Initialization:	
  3316                           ; 0 bytes @ 0x5
  3317                           
  3318  0025                     ??_LED_Main:	
  3319                           ; 0 bytes @ 0x5
  3320                           
  3321  0025                     CC2500_TxData@loop_e:	
  3322                           ; 0 bytes @ 0x5
  3323                           
  3324  0025                     CC2500_RxData@loop_f:	
  3325                           ; 1 bytes @ 0x5
  3326                           
  3327  0025                     Flash_Memory_Modify@i:	
  3328                           ; 1 bytes @ 0x5
  3329                           
  3330  0025                     getMain_LightsStatus@count:	
  3331                           ; 1 bytes @ 0x5
  3332                           
  3333  0025                     getMain_All_Error_Status@command:	
  3334                           ; 1 bytes @ 0x5
  3335                           
  3336  0025                     getTemp_AD@channel:	
  3337                           ; 1 bytes @ 0x5
  3338                           
  3339  0025                     ___awdiv@counter:	
  3340                           ; 1 bytes @ 0x5
  3341                           
  3342                           
  3343                           ; 1 bytes @ 0x5
  3344  0025                     	ds	1
  3345  0026                     ??_CC2500_PowerRST:	
  3346  0026                     ??_CC2500_FrequencyCabr:	
  3347                           ; 0 bytes @ 0x6
  3348                           
  3349  0026                     CC2500_InitSetREG@temp1:	
  3350                           ; 0 bytes @ 0x6
  3351                           
  3352  0026                     CC2500_InitPATable@temp:	
  3353                           ; 1 bytes @ 0x6
  3354                           
  3355  0026                     DelayTimejudge@i:	
  3356                           ; 1 bytes @ 0x6
  3357                           
  3358  0026                     setDimmerLights_AdjControl@idle:	
  3359                           ; 1 bytes @ 0x6
  3360                           
  3361  0026                     getMain_All_Error_Status@status:	
  3362                           ; 1 bytes @ 0x6
  3363                           
  3364  0026                     getLoad_AD@channel:	
  3365                           ; 1 bytes @ 0x6
  3366                           
  3367  0026                     ___awdiv@sign:	
  3368                           ; 1 bytes @ 0x6
  3369                           
  3370  0026                     getMain_LightsStatus@i:	
  3371                           ; 1 bytes @ 0x6
  3372                           
  3373                           
  3374                           ; 2 bytes @ 0x6
  3375  0026                     	ds	1
  3376  0027                     ?_setDimmerLights:	
  3377  0027                     ??_setTemp_Main:	
  3378                           ; 0 bytes @ 0x7
  3379                           
  3380  0027                     CC2500_InitSetREG@temp2:	
  3381                           ; 0 bytes @ 0x7
  3382                           
  3383  0027                     CC2500_InitPATable@loop_d:	
  3384                           ; 1 bytes @ 0x7
  3385                           
  3386  0027                     DelayTimejudge@j:	
  3387                           ; 1 bytes @ 0x7
  3388                           
  3389  0027                     setDimmerLights_AdjControl@sw:	
  3390                           ; 1 bytes @ 0x7
  3391                           
  3392  0027                     setDimmerLights@status:	
  3393                           ; 1 bytes @ 0x7
  3394                           
  3395  0027                     getLoad_AD@k:	
  3396                           ; 1 bytes @ 0x7
  3397                           
  3398  0027                     ___awdiv@quotient:	
  3399                           ; 1 bytes @ 0x7
  3400                           
  3401                           
  3402                           ; 2 bytes @ 0x7
  3403  0027                     	ds	1
  3404  0028                     ??_setDimmerLights:	
  3405  0028                     ?___awtoft:	
  3406                           ; 0 bytes @ 0x8
  3407                           
  3408  0028                     CC2500_InitSetREG@loop_c:	
  3409                           ; 3 bytes @ 0x8
  3410                           
  3411  0028                     DelayTimejudge@k:	
  3412                           ; 1 bytes @ 0x8
  3413                           
  3414  0028                     getMain_LightsStatus@status:	
  3415                           ; 1 bytes @ 0x8
  3416                           
  3417  0028                     getLoad_AD@j:	
  3418                           ; 1 bytes @ 0x8
  3419                           
  3420  0028                     ___awtoft@c:	
  3421                           ; 1 bytes @ 0x8
  3422                           
  3423                           
  3424                           ; 2 bytes @ 0x8
  3425  0028                     	ds	1
  3426  0029                     ??_Temp_Main:	
  3427  0029                     ??_Load_Main:	
  3428                           ; 0 bytes @ 0x9
  3429                           
  3430  0029                     ?_setBuz:	
  3431                           ; 0 bytes @ 0x9
  3432                           
  3433  0029                     ??_CC2500_PowerOnInitial:	
  3434                           ; 0 bytes @ 0x9
  3435                           
  3436  0029                     ??_Flash_Memory_Main:	
  3437                           ; 0 bytes @ 0x9
  3438                           
  3439  0029                     DelayTimejudge@value:	
  3440                           ; 0 bytes @ 0x9
  3441                           
  3442  0029                     getLoad_AD@i:	
  3443                           ; 1 bytes @ 0x9
  3444                           
  3445  0029                     setBuz@time:	
  3446                           ; 1 bytes @ 0x9
  3447                           
  3448                           
  3449                           ; 2 bytes @ 0x9
  3450  0029                     	ds	1
  3451  002A                     ?_setDelayOff_GO:	
  3452  002A                     setDelayOff_GO@command:	
  3453                           ; 0 bytes @ 0xA
  3454                           
  3455  002A                     _setDimmerLights$2592:	
  3456                           ; 1 bytes @ 0xA
  3457                           
  3458                           
  3459                           ; 2 bytes @ 0xA
  3460  002A                     	ds	1
  3461  002B                     ??_setBuz:	
  3462  002B                     ??___awtoft:	
  3463                           ; 0 bytes @ 0xB
  3464                           
  3465  002B                     setDelayOff_GO@value:	
  3466                           ; 0 bytes @ 0xB
  3467                           
  3468  002B                     Load_Main@j:	
  3469                           ; 1 bytes @ 0xB
  3470                           
  3471                           
  3472                           ; 1 bytes @ 0xB
  3473  002B                     	ds	1
  3474  002C                     ??_setDelayOff_GO:	
  3475  002C                     setBuz@count:	
  3476                           ; 0 bytes @ 0xC
  3477                           
  3478  002C                     setDimmerLights@lights:	
  3479                           ; 1 bytes @ 0xC
  3480                           
  3481  002C                     Load_Main@error:	
  3482                           ; 1 bytes @ 0xC
  3483                           
  3484                           
  3485                           ; 1 bytes @ 0xC
  3486  002C                     	ds	1
  3487  002D                     ??_my_MainTimer:	
  3488  002D                     ??_setLog_Code:	
  3489                           ; 0 bytes @ 0xD
  3490                           
  3491  002D                     _Load_Main$4288:	
  3492                           ; 0 bytes @ 0xD
  3493                           
  3494  002D                     ___awtoft@sign:	
  3495                           ; 1 bytes @ 0xD
  3496                           
  3497                           
  3498                           ; 1 bytes @ 0xD
  3499  002D                     	ds	1
  3500  002E                     ?___ftdiv:	
  3501  002E                     ?___ftmul:	
  3502                           ; 3 bytes @ 0xE
  3503                           
  3504  002E                     setDelayOff_GO@sw:	
  3505                           ; 3 bytes @ 0xE
  3506                           
  3507  002E                     Load_Main@i:	
  3508                           ; 1 bytes @ 0xE
  3509                           
  3510  002E                     ___ftdiv@f2:	
  3511                           ; 1 bytes @ 0xE
  3512                           
  3513  002E                     ___ftmul@f1:	
  3514                           ; 3 bytes @ 0xE
  3515                           
  3516                           
  3517                           ; 3 bytes @ 0xE
  3518  002E                     	ds	3
  3519  0031                     ___ftdiv@f1:	
  3520  0031                     ___ftmul@f2:	
  3521                           ; 3 bytes @ 0x11
  3522                           
  3523                           
  3524                           ; 3 bytes @ 0x11
  3525  0031                     	ds	3
  3526  0034                     ??___ftdiv:	
  3527  0034                     ??___ftmul:	
  3528                           ; 0 bytes @ 0x14
  3529                           
  3530                           
  3531                           ; 0 bytes @ 0x14
  3532  0034                     	ds	4
  3533  0038                     ___ftdiv@cntr:	
  3534  0038                     ___ftmul@exp:	
  3535                           ; 1 bytes @ 0x18
  3536                           
  3537                           
  3538                           ; 1 bytes @ 0x18
  3539  0038                     	ds	1
  3540  0039                     ___ftdiv@f3:	
  3541  0039                     ___ftmul@f3_as_product:	
  3542                           ; 3 bytes @ 0x19
  3543                           
  3544                           
  3545                           ; 3 bytes @ 0x19
  3546  0039                     	ds	3
  3547  003C                     ___ftdiv@exp:	
  3548  003C                     ___ftmul@cntr:	
  3549                           ; 1 bytes @ 0x1C
  3550                           
  3551                           
  3552                           ; 1 bytes @ 0x1C
  3553  003C                     	ds	1
  3554  003D                     ___ftdiv@sign:	
  3555  003D                     ___ftmul@sign:	
  3556                           ; 1 bytes @ 0x1D
  3557                           
  3558                           
  3559                           ; 1 bytes @ 0x1D
  3560  003D                     	ds	1
  3561  003E                     ?___ftadd:	
  3562  003E                     ___ftadd@f1:	
  3563                           ; 3 bytes @ 0x1E
  3564                           
  3565                           
  3566                           ; 3 bytes @ 0x1E
  3567  003E                     	ds	3
  3568  0041                     ___ftadd@f2:	
  3569                           
  3570                           ; 3 bytes @ 0x21
  3571  0041                     	ds	3
  3572  0044                     ??___ftadd:	
  3573                           
  3574                           ; 0 bytes @ 0x24
  3575  0044                     	ds	4
  3576  0048                     ___ftadd@sign:	
  3577                           
  3578                           ; 1 bytes @ 0x28
  3579  0048                     	ds	1
  3580  0049                     ___ftadd@exp2:	
  3581                           
  3582                           ; 1 bytes @ 0x29
  3583  0049                     	ds	1
  3584  004A                     ___ftadd@exp1:	
  3585                           
  3586                           ; 1 bytes @ 0x2A
  3587  004A                     	ds	1
  3588  004B                     ?___fttol:	
  3589  004B                     ___fttol@f1:	
  3590                           ; 4 bytes @ 0x2B
  3591                           
  3592                           
  3593                           ; 3 bytes @ 0x2B
  3594  004B                     	ds	4
  3595  004F                     ??___fttol:	
  3596                           
  3597                           ; 0 bytes @ 0x2F
  3598  004F                     	ds	4
  3599  0053                     ___fttol@sign1:	
  3600                           
  3601                           ; 1 bytes @ 0x33
  3602  0053                     	ds	1
  3603  0054                     ___fttol@lval:	
  3604                           
  3605                           ; 4 bytes @ 0x34
  3606  0054                     	ds	4
  3607  0058                     ___fttol@exp1:	
  3608                           
  3609                           ; 1 bytes @ 0x38
  3610  0058                     	ds	1
  3611  0059                     ??_getPercentValue:	
  3612  0059                     ??_setPercentValue:	
  3613                           ; 0 bytes @ 0x39
  3614                           
  3615  0059                     setPercentValue@value:	
  3616                           ; 0 bytes @ 0x39
  3617                           
  3618                           
  3619                           ; 1 bytes @ 0x39
  3620  0059                     	ds	1
  3621  005A                     setPercentValue@i:	
  3622                           
  3623                           ; 3 bytes @ 0x3A
  3624  005A                     	ds	1
  3625  005B                     getPercentValue@value:	
  3626                           
  3627                           ; 1 bytes @ 0x3B
  3628  005B                     	ds	1
  3629  005C                     getPercentValue@i:	
  3630                           
  3631                           ; 3 bytes @ 0x3C
  3632  005C                     	ds	1
  3633  005D                     ?_setRF_DimmerLights:	
  3634  005D                     ??_Flash_Memory_Initialization:	
  3635                           ; 0 bytes @ 0x3D
  3636                           
  3637  005D                     setRF_DimmerLights@on:	
  3638                           ; 0 bytes @ 0x3D
  3639                           
  3640                           
  3641                           ; 1 bytes @ 0x3D
  3642  005D                     	ds	1
  3643  005E                     ??_setRF_DimmerLights:	
  3644  005E                     Flash_Memory_Initialization@i:	
  3645                           ; 0 bytes @ 0x3E
  3646                           
  3647                           
  3648                           ; 1 bytes @ 0x3E
  3649  005E                     	ds	1
  3650  005F                     ??_setDimmerLights_AdjRF:	
  3651                           
  3652                           ; 0 bytes @ 0x3F
  3653  005F                     	ds	1
  3654  0060                     setDimmerLights_AdjRF@lights:	
  3655  0060                     setRF_DimmerLights@status:	
  3656                           ; 1 bytes @ 0x40
  3657                           
  3658                           
  3659                           ; 1 bytes @ 0x40
  3660  0060                     	ds	1
  3661  0061                     ??_setRF_DimmerValue:	
  3662  0061                     setRF_DimmerLights@lights:	
  3663                           ; 0 bytes @ 0x41
  3664                           
  3665                           
  3666                           ; 1 bytes @ 0x41
  3667  0061                     	ds	1
  3668  0062                     ??_setDimmerLights_SwOn:	
  3669  0062                     ??_setDimmerLights_SwOff:	
  3670                           ; 0 bytes @ 0x42
  3671                           
  3672  0062                     ?_setDimmerLights_Adj:	
  3673                           ; 0 bytes @ 0x42
  3674                           
  3675  0062                     setDimmerLights_Adj@status:	
  3676                           ; 0 bytes @ 0x42
  3677                           
  3678                           
  3679                           ; 1 bytes @ 0x42
  3680  0062                     	ds	1
  3681  0063                     ??_setDimmerLights_Adj:	
  3682  0063                     setDimmerLights_SwOn@idle:	
  3683                           ; 0 bytes @ 0x43
  3684                           
  3685  0063                     setRF_DimmerValue@lights:	
  3686                           ; 1 bytes @ 0x43
  3687                           
  3688                           
  3689                           ; 1 bytes @ 0x43
  3690  0063                     	ds	1
  3691  0064                     ??_setRFSW_AdjControl:	
  3692  0064                     setDimmerLights_SwOn@sw:	
  3693                           ; 0 bytes @ 0x44
  3694                           
  3695  0064                     setDimmerLights_SwOff@command:	
  3696                           ; 1 bytes @ 0x44
  3697                           
  3698  0064                     setDimmerLights_Adj@lights:	
  3699                           ; 1 bytes @ 0x44
  3700                           
  3701                           
  3702                           ; 1 bytes @ 0x44
  3703  0064                     	ds	1
  3704  0065                     ??_setDimmerLights_Main:	
  3705  0065                     setDimmerLights_SwOff@sw:	
  3706                           ; 0 bytes @ 0x45
  3707                           
  3708                           
  3709                           ; 1 bytes @ 0x45
  3710  0065                     	ds	1
  3711  0066                     ??_DlyOff_Main:	
  3712  0066                     ??_setRFSW_Control:	
  3713                           ; 0 bytes @ 0x46
  3714                           
  3715  0066                     ??_setSw_Main:	
  3716                           ; 0 bytes @ 0x46
  3717                           
  3718  0066                     ??_setDimmerLights_ErrorClose:	
  3719                           ; 0 bytes @ 0x46
  3720                           
  3721  0066                     setRFSW_AdjControl@sw:	
  3722                           ; 0 bytes @ 0x46
  3723                           
  3724                           
  3725                           ; 1 bytes @ 0x46
  3726  0066                     	ds	1
  3727  0067                     setDimmerLights_ErrorClose@count:	
  3728  0067                     setRFSW_Control@sw:	
  3729                           ; 1 bytes @ 0x47
  3730                           
  3731  0067                     _setDimmerLights_Main$2502:	
  3732                           ; 1 bytes @ 0x47
  3733                           
  3734                           
  3735                           ; 2 bytes @ 0x47
  3736  0067                     	ds	1
  3737  0068                     ??_getRxData:	
  3738  0068                     ??_setControl_Lights_Table:	
  3739                           ; 0 bytes @ 0x48
  3740                           
  3741  0068                     DlyOff_Main@sw:	
  3742                           ; 0 bytes @ 0x48
  3743                           
  3744  0068                     setDimmerLights_ErrorClose@lights:	
  3745                           ; 1 bytes @ 0x48
  3746                           
  3747  0068                     setSw_Main@sw:	
  3748                           ; 1 bytes @ 0x48
  3749                           
  3750                           
  3751                           ; 1 bytes @ 0x48
  3752  0068                     	ds	1
  3753  0069                     ??_DelayOff_Main:	
  3754  0069                     setDimmerLights_Main@lights:	
  3755                           ; 0 bytes @ 0x49
  3756                           
  3757  0069                     getRxData@error:	
  3758                           ; 1 bytes @ 0x49
  3759                           
  3760  0069                     setDimmerLights_ErrorClose@i:	
  3761                           ; 1 bytes @ 0x49
  3762                           
  3763                           
  3764                           ; 2 bytes @ 0x49
  3765  0069                     	ds	1
  3766  006A                     ??_setRF_Main:	
  3767  006A                     ??_DimmerLights_Main:	
  3768                           ; 0 bytes @ 0x4A
  3769                           
  3770                           
  3771                           ; 0 bytes @ 0x4A
  3772  006A                     	ds	1
  3773  006B                     ??_setMain_Exception:	
  3774  006B                     setRF_Main@loop_f:	
  3775                           ; 0 bytes @ 0x4B
  3776                           
  3777                           
  3778                           ; 1 bytes @ 0x4B
  3779  006B                     	ds	1
  3780  006C                     ??_Switch_Main:	
  3781  006C                     setRF_Main@Receive_OK:	
  3782                           ; 0 bytes @ 0x4C
  3783                           
  3784                           
  3785                           ; 1 bytes @ 0x4C
  3786  006C                     	ds	1
  3787  006D                     setRF_Main@error:	
  3788  006D                     Switch_Main@error:	
  3789                           ; 1 bytes @ 0x4D
  3790                           
  3791                           
  3792                           ; 1 bytes @ 0x4D
  3793  006D                     	ds	1
  3794  006E                     ??_RF_Main:	
  3795  006E                     ??_main:	
  3796                           ; 0 bytes @ 0x4E
  3797                           
  3798                           
  3799                           	psect	maintext
  3800  15DA                     __pmaintext:	
  3801                           ; 0 bytes @ 0x4E
  3802 ;;
  3803 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3804 ;;
  3805 ;; *************** function _main *****************
  3806 ;; Defined at:
  3807 ;;		line 7 in file "../src/Main_B1.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  argc            2    0[BANK3 ] int 
  3810 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;		None
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  2    0[BANK3 ] int 
  3815 ;; Registers used:
  3816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 17F/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3822 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3825 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3826 ;;Total ram usage:        4 bytes
  3827 ;; Hardware stack levels required when called:   15
  3828 ;; This function calls:
  3829 ;;		_Buzzer_Initialization
  3830 ;;		_Buzzer_Main
  3831 ;;		_CC2500_PowerOnInitial
  3832 ;;		_DelayOff_Initialization
  3833 ;;		_DelayOff_Main
  3834 ;;		_DimmerLights_Initialization
  3835 ;;		_DimmerLights_Main
  3836 ;;		_Flash_Memory_Initialization
  3837 ;;		_Flash_Memory_Main
  3838 ;;		_LED_Initialization
  3839 ;;		_LED_Main
  3840 ;;		_Load_Initialization
  3841 ;;		_Load_Main
  3842 ;;		_Mcu_Initialization
  3843 ;;		_RF_Initialization
  3844 ;;		_RF_Main
  3845 ;;		_Switch_Initialization
  3846 ;;		_Switch_Main
  3847 ;;		_Temp_Initialization
  3848 ;;		_Temp_Main
  3849 ;;		_WDT_Main
  3850 ;;		_getLoad_AD
  3851 ;;		_getTemp_AD
  3852 ;;		_myMain_Initialization
  3853 ;;		_my_MainTimer
  3854 ;; This function is called by:
  3855 ;;		Startup code after reset
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           
  3860                           ;psect for function _main
  3861  15DA                     _main:	
  3862                           
  3863                           ;Main_B1.c: 8: myMain_Initialization();
  3864                           
  3865                           ;incstack = 0
  3866                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3867  15DA  3188  2000  3195   	fcall	_myMain_Initialization
  3868                           
  3869                           ;Main_B1.c: 9: Mcu_Initialization();
  3870  15DD  319C  2451  3195   	fcall	_Mcu_Initialization
  3871                           
  3872                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3873  15E0  3187  270E  3195   	fcall	_Flash_Memory_Initialization
  3874                           
  3875                           ;Main_B1.c: 11: LED_Initialization();
  3876  15E3  319B  2366  3195   	fcall	_LED_Initialization
  3877                           
  3878                           ;Main_B1.c: 12: Buzzer_Initialization();
  3879  15E6  319A  22B7  3195   	fcall	_Buzzer_Initialization
  3880                           
  3881                           ;Main_B1.c: 14: ;;
  3882                           ;Main_B1.c: 15: Temp_Initialization();
  3883  15E9  319A  22C0  3195   	fcall	_Temp_Initialization
  3884                           
  3885                           ;Main_B1.c: 16: Load_Initialization();
  3886  15EC  319A  22DB  3195   	fcall	_Load_Initialization
  3887                           
  3888                           ;Main_B1.c: 17: ;;
  3889                           ;Main_B1.c: 18: DelayOff_Initialization();
  3890  15EF  319A  22FB  3195   	fcall	_DelayOff_Initialization
  3891                           
  3892                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3893  15F2  319D  253D  3195   	fcall	_DimmerLights_Initialization
  3894                           
  3895                           ;Main_B1.c: 21: ;;
  3896                           ;Main_B1.c: 22: ;;
  3897                           ;Main_B1.c: 23: ;;
  3898                           ;Main_B1.c: 24: Switch_Initialization();
  3899  15F5  319B  23AE  3195   	fcall	_Switch_Initialization
  3900                           
  3901                           ;Main_B1.c: 25: RF_Initialization();
  3902  15F8  319A  22BA  3195   	fcall	_RF_Initialization
  3903                           
  3904                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3905  15FB  319D  2513  3195   	fcall	_CC2500_PowerOnInitial
  3906  15FE                     l10667:	
  3907                           ;Main_B1.c: 27: ;;
  3908                           ;Main_B1.c: 29: while (1) {
  3909                           
  3910                           
  3911                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  3912  15FE  0021               	movlb	1	; select bank1
  3913  15FF  1C20               	btfss	_myMain^(0+128),0
  3914  1600  2E09               	goto	l10671
  3915                           
  3916                           ;Main_B1.c: 37: getLoad_AD(0x05);
  3917  1601  3005               	movlw	5
  3918  1602  318B  23D5  3195   	fcall	_getLoad_AD
  3919                           
  3920                           ;Main_B1.c: 41: getTemp_AD(0x09);
  3921  1605  3009               	movlw	9
  3922  1606  3192  2236  3195   	fcall	_getTemp_AD
  3923  1609                     l10671:	
  3924                           
  3925                           ;Main_B1.c: 56: }
  3926                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  3927  1609  0022               	movlb	2	; select bank2
  3928  160A  1C20               	btfss	_Timer1^(0+256),0
  3929  160B  2DFE               	goto	l10667
  3930                           
  3931                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  3932  160C  1020               	bcf	_Timer1^(0+256),0
  3933                           
  3934                           ;Main_B1.c: 94: my_MainTimer();
  3935  160D  3194  2490  3195   	fcall	_my_MainTimer
  3936                           
  3937                           ;Main_B1.c: 95: WDT_Main();
  3938  1610  319C  2463  3195   	fcall	_WDT_Main
  3939                           
  3940                           ;Main_B1.c: 96: ;;
  3941                           ;Main_B1.c: 97: ;;
  3942                           ;Main_B1.c: 98: if (myMain.PowerON == 1) {
  3943  1613  0021               	movlb	1	; select bank1
  3944  1614  1C20               	btfss	_myMain^(0+128),0
  3945  1615  2DFE               	goto	l10667
  3946                           
  3947                           ;Main_B1.c: 99: Flash_Memory_Main();
  3948  1616  3191  21CA  3195   	fcall	_Flash_Memory_Main
  3949                           
  3950                           ;Main_B1.c: 101: LED_Main();
  3951  1619  319B  2372  3195   	fcall	_LED_Main
  3952                           
  3953                           ;Main_B1.c: 102: Buzzer_Main();
  3954  161C  3193  23F8  3195   	fcall	_Buzzer_Main
  3955                           
  3956                           ;Main_B1.c: 104: ;;
  3957                           ;Main_B1.c: 105: Temp_Main();
  3958  161F  319A  22C3  3195   	fcall	_Temp_Main
  3959                           
  3960                           ;Main_B1.c: 106: Load_Main();
  3961  1622  3180  2049  3195   	fcall	_Load_Main
  3962                           
  3963                           ;Main_B1.c: 107: ;;
  3964                           ;Main_B1.c: 109: ;;
  3965                           ;Main_B1.c: 110: DimmerLights_Main();
  3966  1625  319B  2313  3195   	fcall	_DimmerLights_Main
  3967                           
  3968                           ;Main_B1.c: 111: Switch_Main();
  3969  1628  319F  2719  3195   	fcall	_Switch_Main
  3970                           
  3971                           ;Main_B1.c: 112: ;;
  3972                           ;Main_B1.c: 113: ;;
  3973                           ;Main_B1.c: 115: RF_Main();
  3974  162B  319A  22BD  3195   	fcall	_RF_Main
  3975                           
  3976                           ;Main_B1.c: 116: DelayOff_Main();
  3977  162E  319B  2303  3195   	fcall	_DelayOff_Main
  3978                           
  3979                           ;Main_B1.c: 117: ;;
  3980  1631  2DFE               	goto	l10667
  3981  1632                     __end_of_main:	
  3982                           ;Main_B1.c: 125: }
  3983                           ;Main_B1.c: 126: }
  3984                           ;Main_B1.c: 160: }
  3985                           ;Main_B1.c: 161: return (0);
  3986                           ;	Return value of _main is never used
  3987                           
  3988                           
  3989                           	psect	text1
  3990  1490                     __ptext1:	
  3991 ;; *************** function _my_MainTimer *****************
  3992 ;; Defined at:
  3993 ;;		line 180 in file "../src/Main_B1.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;		None
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;		None
  3998 ;; Return value:  Size  Location     Type
  3999 ;;		None               void
  4000 ;; Registers used:
  4001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4011 ;;Total ram usage:        0 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    7
  4014 ;; This function calls:
  4015 ;;		_setBuz
  4016 ;;		_setTxData
  4017 ;; This function is called by:
  4018 ;;		_main
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           
  4023                           ;psect for function _my_MainTimer
  4024  1490                     _my_MainTimer:	
  4025                           
  4026                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  4027                           
  4028                           ;incstack = 0
  4029                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4030  1490  0021               	movlb	1	; select bank1
  4031  1491  1820               	btfsc	_myMain^(0+128),0
  4032  1492  2CB2               	goto	l10389
  4033                           
  4034                           ;Main_B1.c: 183: myMain.PowerCount++;
  4035  1493  3001               	movlw	1
  4036  1494  07A2               	addwf	(_myMain^(0+128)+2),f
  4037  1495  3000               	movlw	0
  4038  1496  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  4039                           
  4040                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  4041  1497  3002               	movlw	2
  4042  1498  3EA0               	addlw	_myMain& (0+255)
  4043  1499  0086               	movwf	6
  4044  149A  0187               	clrf	7
  4045  149B  3F40               	moviw [0]fsr1
  4046  149C  3A96               	xorlw	150
  4047  149D  1D03               	skipz
  4048  149E  2CA1               	goto	u11665
  4049  149F  3F41               	moviw [1]fsr1
  4050  14A0  3A00               	xorlw	0
  4051  14A1                     u11665:	
  4052  14A1  1D03               	skipz
  4053  14A2  2CC9               	goto	l10399
  4054                           
  4055                           ;Main_B1.c: 185: {
  4056                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  4057  14A3  01A2               	clrf	(_myMain^(0+128)+2)
  4058  14A4  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4059                           
  4060                           ;Main_B1.c: 187: myMain.PowerON = 1;
  4061  14A5  1420               	bsf	_myMain^(0+128),0
  4062                           
  4063                           ;Main_B1.c: 193: setBuz(3, 50);
  4064  14A6  3032               	movlw	50
  4065  14A7  0020               	movlb	0	; select bank0
  4066  14A8  00A9               	movwf	setBuz@time
  4067  14A9  3000               	movlw	0
  4068  14AA  00AA               	movwf	setBuz@time+1
  4069  14AB  3003               	movlw	3
  4070  14AC  3196  2632  3194   	fcall	_setBuz
  4071                           
  4072                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  4073  14AF  0021               	movlb	1	; select bank1
  4074  14B0  1620               	bsf	_myMain^(0+128),4
  4075                           
  4076                           ;Main_B1.c: 203: }
  4077                           ;Main_B1.c: 204: } else {
  4078  14B1  2CC9               	goto	l10399
  4079  14B2                     l10389:	
  4080                           
  4081                           ;Main_B1.c: 212: myMain.Count1++;
  4082  14B2  3001               	movlw	1
  4083  14B3  07A6               	addwf	(_myMain^(0+128)+6),f
  4084  14B4  3000               	movlw	0
  4085  14B5  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4086                           
  4087                           ;Main_B1.c: 213: if (myMain.Count1 == 100)
  4088  14B6  3006               	movlw	6
  4089  14B7  3EA0               	addlw	_myMain& (0+255)
  4090  14B8  0086               	movwf	6
  4091  14B9  0187               	clrf	7
  4092  14BA  3F40               	moviw [0]fsr1
  4093  14BB  3A64               	xorlw	100
  4094  14BC  1D03               	skipz
  4095  14BD  2CC0               	goto	u11675
  4096  14BE  3F41               	moviw [1]fsr1
  4097  14BF  3A00               	xorlw	0
  4098  14C0                     u11675:	
  4099  14C0  1D03               	skipz
  4100  14C1  2CC9               	goto	l10399
  4101                           
  4102                           ;Main_B1.c: 214: {
  4103                           ;Main_B1.c: 215: myMain.Count1 = 0;
  4104  14C2  01A6               	clrf	(_myMain^(0+128)+6)
  4105  14C3  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4106                           
  4107                           ;Main_B1.c: 227: if (myMain.Flag) {
  4108  14C4  1CA0               	btfss	_myMain^(0+128),1
  4109  14C5  2CC8               	goto	l1542
  4110                           
  4111                           ;Main_B1.c: 228: myMain.Flag = 0;
  4112  14C6  10A0               	bcf	_myMain^(0+128),1
  4113                           
  4114                           ;Main_B1.c: 237: } else {
  4115  14C7  2CC9               	goto	l10399
  4116  14C8                     l1542:	
  4117                           
  4118                           ;Main_B1.c: 238: myMain.Flag = 1;
  4119  14C8  14A0               	bsf	_myMain^(0+128),1
  4120  14C9                     l10399:	
  4121                           
  4122                           ;Main_B1.c: 247: }
  4123                           ;Main_B1.c: 248: }
  4124                           ;Main_B1.c: 250: }
  4125                           ;Main_B1.c: 252: myMain.Count2++;
  4126  14C9  3001               	movlw	1
  4127  14CA  07A8               	addwf	(_myMain^(0+128)+8),f
  4128  14CB  3000               	movlw	0
  4129  14CC  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  4130                           
  4131                           ;Main_B1.c: 253: if (myMain.Count2 == 100) {
  4132  14CD  3008               	movlw	8
  4133  14CE  3EA0               	addlw	_myMain& (0+255)
  4134  14CF  0086               	movwf	6
  4135  14D0  0187               	clrf	7
  4136  14D1  3F40               	moviw [0]fsr1
  4137  14D2  3A64               	xorlw	100
  4138  14D3  1D03               	skipz
  4139  14D4  2CD7               	goto	u11695
  4140  14D5  3F41               	moviw [1]fsr1
  4141  14D6  3A00               	xorlw	0
  4142  14D7                     u11695:	
  4143  14D7  1D03               	skipz
  4144  14D8  0008               	return
  4145                           
  4146                           ;Main_B1.c: 254: myMain.Count2 = 0;
  4147  14D9  01A8               	clrf	(_myMain^(0+128)+8)
  4148  14DA  01A9               	clrf	((_myMain+1)^(0+128)+8)
  4149                           
  4150                           ;Main_B1.c: 255: setTxData();
  4151  14DB  318D  2571         	fcall	_setTxData
  4152  14DD  0008               	return
  4153  14DE                     __end_of_my_MainTimer:	
  4154                           
  4155                           	psect	text2
  4156  0800                     __ptext2:	
  4157 ;; *************** function _myMain_Initialization *****************
  4158 ;; Defined at:
  4159 ;;		line 167 in file "../src/Main_B1.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;		None
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;		None
  4164 ;; Return value:  Size  Location     Type
  4165 ;;		None               void
  4166 ;; Registers used:
  4167 ;;		wreg, fsr1l, fsr1h
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4177 ;;Total ram usage:        1 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:    5
  4180 ;; This function calls:
  4181 ;;		Nothing
  4182 ;; This function is called by:
  4183 ;;		_main
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           
  4188                           ;psect for function _myMain_Initialization
  4189  0800                     _myMain_Initialization:	
  4190                           
  4191                           ;Main_B1.c: 169: product = &_product;
  4192                           
  4193                           ;incstack = 0
  4194                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4195  0800  3045               	movlw	__product& (0+255)
  4196  0801  0020               	movlb	0	; select bank0
  4197  0802  00A0               	movwf	??_myMain_Initialization
  4198  0803  0820               	movf	??_myMain_Initialization,w
  4199  0804  00FB               	movwf	_product
  4200                           
  4201                           ;Main_B1.c: 170: product->Data[20] = 210;
  4202  0805  30D2               	movlw	210
  4203  0806  00A0               	movwf	??_myMain_Initialization
  4204  0807  087B               	movf	_product,w
  4205  0808  3E14               	addlw	20
  4206  0809  0086               	movwf	6
  4207  080A  3002               	movlw	2	; select bank4/5
  4208  080B  0087               	movwf	7
  4209  080C  0820               	movf	??_myMain_Initialization,w
  4210  080D  0081               	movwf	1
  4211  080E  0008               	return
  4212  080F                     __end_of_myMain_Initialization:	
  4213                           
  4214                           	psect	text3
  4215  1236                     __ptext3:	
  4216 ;; *************** function _getTemp_AD *****************
  4217 ;; Defined at:
  4218 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;  channel         1    wreg     unsigned char 
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;  channel         1    5[BANK0 ] unsigned char 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;		None               void
  4225 ;; Registers used:
  4226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4236 ;;Total ram usage:        2 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    7
  4239 ;; This function calls:
  4240 ;;		_getAD
  4241 ;; This function is called by:
  4242 ;;		_main
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           
  4247                           ;psect for function _getTemp_AD
  4248  1236                     _getTemp_AD:	
  4249                           
  4250                           ;incstack = 0
  4251                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4252                           ;getTemp_AD@channel stored from wreg
  4253  1236  0020               	movlb	0	; select bank0
  4254  1237  00A5               	movwf	getTemp_AD@channel
  4255                           
  4256                           ;OverTemperature_B1.c: 33: if (Temp.ADtoGO == 1) {
  4257  1238  0021               	movlb	1	; select bank1
  4258  1239  1D58               	btfss	_Temp^(0+128),2
  4259  123A  0008               	return
  4260                           
  4261                           ;OverTemperature_B1.c: 34: Temp.GO = 1;
  4262  123B  1658               	bsf	_Temp^(0+128),4
  4263                           
  4264                           ;OverTemperature_B1.c: 35: Temp.ADRES = getAD(channel, 0xf0);
  4265  123C  30F0               	movlw	240
  4266  123D  0020               	movlb	0	; select bank0
  4267  123E  00A4               	movwf	??_getTemp_AD
  4268  123F  0824               	movf	??_getTemp_AD,w
  4269  1240  00A0               	movwf	getAD@adcon1
  4270  1241  0825               	movf	getTemp_AD@channel,w
  4271  1242  319E  2650  3192   	fcall	_getAD
  4272  1245  0020               	movlb	0	; select bank0
  4273  1246  0821               	movf	?_getAD+1,w
  4274  1247  0021               	movlb	1	; select bank1
  4275  1248  01E5               	clrf	((_Temp+1)^(0+128)+12)
  4276  1249  07E5               	addwf	((_Temp+1)^(0+128)+12),f
  4277  124A  0020               	movlb	0	; select bank0
  4278  124B  0820               	movf	?_getAD,w
  4279  124C  0021               	movlb	1	; select bank1
  4280  124D  01E4               	clrf	(_Temp^(0+128)+12)
  4281  124E  07E4               	addwf	(_Temp^(0+128)+12),f
  4282                           
  4283                           ;OverTemperature_B1.c: 36: if (Temp.ADH[0] < Temp.ADRES) {
  4284  124F  0865               	movf	((_Temp+1)^(0+128)+12),w
  4285  1250  0261               	subwf	((_Temp+1)^(0+128)+8),w
  4286  1251  1D03               	skipz
  4287  1252  2A55               	goto	u11635
  4288  1253  0864               	movf	(_Temp^(0+128)+12),w
  4289  1254  0260               	subwf	(_Temp^(0+128)+8),w
  4290  1255                     u11635:	
  4291  1255  1803               	skipnc
  4292  1256  2A5E               	goto	l10371
  4293                           
  4294                           ;OverTemperature_B1.c: 37: Temp.ADH[0] = Temp.ADRES;
  4295  1257  0865               	movf	((_Temp+1)^(0+128)+12),w
  4296  1258  01E1               	clrf	((_Temp+1)^(0+128)+8)
  4297  1259  07E1               	addwf	((_Temp+1)^(0+128)+8),f
  4298  125A  0864               	movf	(_Temp^(0+128)+12),w
  4299  125B  01E0               	clrf	(_Temp^(0+128)+8)
  4300  125C  07E0               	addwf	(_Temp^(0+128)+8),f
  4301                           
  4302                           ;OverTemperature_B1.c: 38: } else if (Temp.ADH[1] < Temp.ADRES) {
  4303  125D  0008               	return
  4304  125E                     l10371:	
  4305  125E  0865               	movf	((_Temp+1)^(0+128)+12),w
  4306  125F  0263               	subwf	((_Temp+1)^(0+128)+10),w
  4307  1260  1D03               	skipz
  4308  1261  2A64               	goto	u11645
  4309  1262  0864               	movf	(_Temp^(0+128)+12),w
  4310  1263  0262               	subwf	(_Temp^(0+128)+10),w
  4311  1264                     u11645:	
  4312  1264  1803               	skipnc
  4313  1265  0008               	return
  4314                           
  4315                           ;OverTemperature_B1.c: 39: Temp.ADH[1] = Temp.ADRES;
  4316  1266  0865               	movf	((_Temp+1)^(0+128)+12),w
  4317  1267  01E3               	clrf	((_Temp+1)^(0+128)+10)
  4318  1268  07E3               	addwf	((_Temp+1)^(0+128)+10),f
  4319  1269  0864               	movf	(_Temp^(0+128)+12),w
  4320  126A  01E2               	clrf	(_Temp^(0+128)+10)
  4321  126B  07E2               	addwf	(_Temp^(0+128)+10),f
  4322  126C  0008               	return
  4323  126D                     __end_of_getTemp_AD:	
  4324                           
  4325                           	psect	text4
  4326  0BD5                     __ptext4:	
  4327 ;; *************** function _getLoad_AD *****************
  4328 ;; Defined at:
  4329 ;;		line 15 in file "../src/OverLoad_B1.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  channel         1    wreg     unsigned char 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  channel         1    6[BANK0 ] unsigned char 
  4334 ;;  i               1    9[BANK0 ] unsigned char 
  4335 ;;  j               1    8[BANK0 ] unsigned char 
  4336 ;;  k               1    7[BANK0 ] unsigned char 
  4337 ;; Return value:  Size  Location     Type
  4338 ;;		None               void
  4339 ;; Registers used:
  4340 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4347 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4348 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4349 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4350 ;;Total ram usage:        6 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; Hardware stack levels required when called:    7
  4353 ;; This function calls:
  4354 ;;		_getAD
  4355 ;; This function is called by:
  4356 ;;		_main
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           
  4361                           ;psect for function _getLoad_AD
  4362  0BD5                     _getLoad_AD:	
  4363                           
  4364                           ;incstack = 0
  4365                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4366                           ;getLoad_AD@channel stored from wreg
  4367  0BD5  0020               	movlb	0	; select bank0
  4368  0BD6  00A6               	movwf	getLoad_AD@channel
  4369                           
  4370                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4371  0BD7  01A9               	clrf	getLoad_AD@i
  4372  0BD8  01A8               	clrf	getLoad_AD@j
  4373  0BD9  01A7               	clrf	getLoad_AD@k
  4374                           
  4375                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4376  0BDA  0022               	movlb	2	; select bank2
  4377  0BDB  1E27               	btfss	_Load^(0+256),4
  4378  0BDC  0008               	return
  4379                           
  4380                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4381  0BDD  30F3               	movlw	243
  4382  0BDE  0020               	movlb	0	; select bank0
  4383  0BDF  00A4               	movwf	??_getLoad_AD
  4384  0BE0  0824               	movf	??_getLoad_AD,w
  4385  0BE1  00A0               	movwf	getAD@adcon1
  4386  0BE2  0826               	movf	getLoad_AD@channel,w
  4387  0BE3  319E  2650  318B   	fcall	_getAD
  4388  0BE6  0020               	movlb	0	; select bank0
  4389  0BE7  0821               	movf	?_getAD+1,w
  4390  0BE8  0022               	movlb	2	; select bank2
  4391  0BE9  01C9               	clrf	((_Load+1)^(0+256)+33)
  4392  0BEA  07C9               	addwf	((_Load+1)^(0+256)+33),f
  4393  0BEB  0020               	movlb	0	; select bank0
  4394  0BEC  0820               	movf	?_getAD,w
  4395  0BED  0022               	movlb	2	; select bank2
  4396  0BEE  01C8               	clrf	(_Load^(0+256)+33)
  4397  0BEF  07C8               	addwf	(_Load^(0+256)+33),f
  4398                           
  4399                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4400  0BF0  0020               	movlb	0	; select bank0
  4401  0BF1  01A9               	clrf	getLoad_AD@i
  4402  0BF2  3004               	movlw	4
  4403  0BF3  0229               	subwf	getLoad_AD@i,w
  4404  0BF4  1803               	btfsc	3,0
  4405  0BF5  2C23               	goto	l10341
  4406  0BF6                     l10329:	
  4407                           
  4408                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4409  0BF6  3529               	lslf	getLoad_AD@i,w
  4410  0BF7  3E32               	addlw	(_Load+11)& (0+255)
  4411  0BF8  0086               	movwf	6
  4412  0BF9  3001               	movlw	1	; select bank2/3
  4413  0BFA  0087               	movwf	7
  4414  0BFB  3F40               	moviw [0]fsr1
  4415  0BFC  00A4               	movwf	??_getLoad_AD
  4416  0BFD  3F41               	moviw [1]fsr1
  4417  0BFE  00A5               	movwf	??_getLoad_AD+1
  4418  0BFF  0022               	movlb	2	; select bank2
  4419  0C00  0849               	movf	((_Load+1)^(0+256)+33),w
  4420  0C01  0020               	movlb	0	; select bank0
  4421  0C02  0225               	subwf	??_getLoad_AD+1,w
  4422  0C03  1D03               	skipz
  4423  0C04  2C09               	goto	u11545
  4424  0C05  0022               	movlb	2	; select bank2
  4425  0C06  0848               	movf	(_Load^(0+256)+33),w
  4426  0C07  0020               	movlb	0	; select bank0
  4427  0C08  0224               	subwf	??_getLoad_AD,w
  4428  0C09                     u11545:	
  4429  0C09  1803               	skipnc
  4430  0C0A  2C1B               	goto	l10337
  4431  0C0B  08A8               	movf	getLoad_AD@j,f
  4432  0C0C  1D03               	skipz
  4433  0C0D  2C1B               	goto	l10337
  4434                           
  4435                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4436  0C0E  3529               	lslf	getLoad_AD@i,w
  4437  0C0F  3E32               	addlw	(_Load+11)& (0+255)
  4438  0C10  0086               	movwf	6
  4439  0C11  3001               	movlw	1	; select bank2/3
  4440  0C12  0087               	movwf	7
  4441  0C13  0022               	movlb	2	; select bank2
  4442  0C14  0848               	movf	(_Load^(0+256)+33),w
  4443  0C15  3FC0               	movwi [0]fsr1
  4444  0C16  0849               	movf	((_Load+1)^(0+256)+33),w
  4445  0C17  3FC1               	movwi [1]fsr1
  4446                           
  4447                           ;OverLoad_B1.c: 24: j = 1;
  4448  0C18  0020               	movlb	0	; select bank0
  4449  0C19  01A8               	clrf	getLoad_AD@j
  4450  0C1A  0AA8               	incf	getLoad_AD@j,f
  4451  0C1B                     l10337:	
  4452  0C1B  3001               	movlw	1
  4453  0C1C  00A4               	movwf	??_getLoad_AD
  4454  0C1D  0824               	movf	??_getLoad_AD,w
  4455  0C1E  07A9               	addwf	getLoad_AD@i,f
  4456  0C1F  3004               	movlw	4
  4457  0C20  0229               	subwf	getLoad_AD@i,w
  4458  0C21  1C03               	skipc
  4459  0C22  2BF6               	goto	l10329
  4460  0C23                     l10341:	
  4461                           
  4462                           ;OverLoad_B1.c: 25: }
  4463                           ;OverLoad_B1.c: 26: }
  4464                           ;OverLoad_B1.c: 27: if (j == 0) {
  4465  0C23  08A8               	movf	getLoad_AD@j,f
  4466  0C24  1D03               	skipz
  4467  0C25  0008               	return
  4468                           
  4469                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4470  0C26  01A9               	clrf	getLoad_AD@i
  4471  0C27                     L1:	
  4472  0C27  3004               	movlw	4
  4473  0C28  0229               	subwf	getLoad_AD@i,w
  4474  0C29  1803               	btfsc	3,0
  4475  0C2A  0008               	return
  4476                           
  4477                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4478  0C2B  3529               	lslf	getLoad_AD@i,w
  4479  0C2C  3E3C               	addlw	(_Load+21)& (0+255)
  4480  0C2D  0086               	movwf	6
  4481  0C2E  3001               	movlw	1	; select bank2/3
  4482  0C2F  0087               	movwf	7
  4483  0C30  3F40               	moviw [0]fsr1
  4484  0C31  00A4               	movwf	??_getLoad_AD
  4485  0C32  3F41               	moviw [1]fsr1
  4486  0C33  00A5               	movwf	??_getLoad_AD+1
  4487  0C34  0825               	movf	??_getLoad_AD+1,w
  4488  0C35  0022               	movlb	2	; select bank2
  4489  0C36  0249               	subwf	((_Load+1)^(0+256)+33),w
  4490  0C37  1D03               	skipz
  4491  0C38  2C3D               	goto	u11595
  4492  0C39  0020               	movlb	0	; select bank0
  4493  0C3A  0824               	movf	??_getLoad_AD,w
  4494  0C3B  0022               	movlb	2	; select bank2
  4495  0C3C  0248               	subwf	(_Load^(0+256)+33),w
  4496  0C3D                     u11595:	
  4497  0C3D  1803               	skipnc
  4498  0C3E  2C50               	goto	l10357
  4499  0C3F  0020               	movlb	0	; select bank0
  4500  0C40  08A7               	movf	getLoad_AD@k,f
  4501  0C41  1D03               	skipz
  4502  0C42  2C50               	goto	l10357
  4503                           
  4504                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4505  0C43  3529               	lslf	getLoad_AD@i,w
  4506  0C44  3E3C               	addlw	(_Load+21)& (0+255)
  4507  0C45  0086               	movwf	6
  4508  0C46  3001               	movlw	1	; select bank2/3
  4509  0C47  0087               	movwf	7
  4510  0C48  0022               	movlb	2	; select bank2
  4511  0C49  0848               	movf	(_Load^(0+256)+33),w
  4512  0C4A  3FC0               	movwi [0]fsr1
  4513  0C4B  0849               	movf	((_Load+1)^(0+256)+33),w
  4514  0C4C  3FC1               	movwi [1]fsr1
  4515                           
  4516                           ;OverLoad_B1.c: 31: k = 1;
  4517  0C4D  0020               	movlb	0	; select bank0
  4518  0C4E  01A7               	clrf	getLoad_AD@k
  4519  0C4F  0AA7               	incf	getLoad_AD@k,f
  4520  0C50                     l10357:	
  4521  0C50  3001               	movlw	1
  4522  0C51  0020               	movlb	0	; select bank0
  4523  0C52  00A4               	movwf	??_getLoad_AD
  4524  0C53  0824               	movf	??_getLoad_AD,w
  4525  0C54  07A9               	addwf	getLoad_AD@i,f
  4526  0C55  2C27               	goto	L1
  4527  0C56                     __end_of_getLoad_AD:	
  4528                           
  4529                           	psect	text5
  4530  1E50                     __ptext5:	
  4531 ;; *************** function _getAD *****************
  4532 ;; Defined at:
  4533 ;;		line 454 in file "../src/MCU_B1.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;  adcon0          1    wreg     unsigned char 
  4536 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  2    0[BANK0 ] int 
  4541 ;; Registers used:
  4542 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4548 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4549 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4551 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4552 ;;Total ram usage:        4 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    6
  4555 ;; This function calls:
  4556 ;;		_Timeout_Counter
  4557 ;;		_set_TimeoutCleared
  4558 ;; This function is called by:
  4559 ;;		_getLoad_AD
  4560 ;;		_getTemp_AD
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564                           
  4565                           ;psect for function _getAD
  4566  1E50                     _getAD:	
  4567                           
  4568                           ;incstack = 0
  4569                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4570                           ;getAD@adcon0 stored from wreg
  4571  1E50  0020               	movlb	0	; select bank0
  4572  1E51  00A3               	movwf	getAD@adcon0
  4573                           
  4574                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4575  1E52  0823               	movf	getAD@adcon0,w
  4576  1E53  0021               	movlb	1	; select bank1
  4577  1E54  009D               	movwf	29	;volatile
  4578                           
  4579                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4580  1E55  0020               	movlb	0	; select bank0
  4581  1E56  0820               	movf	getAD@adcon1,w
  4582  1E57  0021               	movlb	1	; select bank1
  4583  1E58  009E               	movwf	30	;volatile
  4584                           
  4585                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4586  1E59  149D               	bsf	29,1	;volatile
  4587                           
  4588                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4589  1E5A  2E5E               	goto	l9789
  4590  1E5B                     l9787:	
  4591                           
  4592                           ;MCU_B1.c: 459: Timeout_Counter();
  4593  1E5B  319C  24FE  319E   	fcall	_Timeout_Counter
  4594  1E5E                     l9789:	
  4595  1E5E  0021               	movlb	1	; select bank1
  4596  1E5F  1C9D               	btfss	29,1	;volatile
  4597  1E60  2E63               	goto	l9793
  4598  1E61  1D2D               	btfss	(_myMain^(0+128)+13),2
  4599  1E62  2E5B               	goto	l9787
  4600  1E63                     l9793:	
  4601                           
  4602                           ;MCU_B1.c: 460: };
  4603                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4604  1E63  319A  22D6         	fcall	_set_TimeoutCleared
  4605                           
  4606                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4607  1E65  0021               	movlb	1	; select bank1
  4608  1E66  081C               	movf	28,w	;volatile
  4609  1E67  0020               	movlb	0	; select bank0
  4610  1E68  01A1               	clrf	?_getAD+1
  4611  1E69  07A1               	addwf	?_getAD+1,f
  4612  1E6A  0021               	movlb	1	; select bank1
  4613  1E6B  081B               	movf	27,w	;volatile
  4614  1E6C  0020               	movlb	0	; select bank0
  4615  1E6D  01A0               	clrf	?_getAD
  4616  1E6E  07A0               	addwf	?_getAD,f
  4617  1E6F  0008               	return
  4618  1E70                     __end_of_getAD:	
  4619                           
  4620                           	psect	text6
  4621  1C63                     __ptext6:	
  4622 ;; *************** function _WDT_Main *****************
  4623 ;; Defined at:
  4624 ;;		line 1033 in file "../src/MCU_B1.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;		None
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;		None
  4629 ;; Return value:  Size  Location     Type
  4630 ;;		None               void
  4631 ;; Registers used:
  4632 ;;		wreg, status,2, status,0, pclath, cstack
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4640 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4641 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4642 ;;Total ram usage:        1 bytes
  4643 ;; Hardware stack levels used:    1
  4644 ;; Hardware stack levels required when called:    6
  4645 ;; This function calls:
  4646 ;;		_WDT_Clearing
  4647 ;; This function is called by:
  4648 ;;		_main
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           
  4652                           
  4653                           ;psect for function _WDT_Main
  4654  1C63                     _WDT_Main:	
  4655                           
  4656                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  4657                           
  4658                           ;incstack = 0
  4659                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4660  1C63  0022               	movlb	2	; select bank2
  4661  1C64  1C25               	btfss	_WDT^(0+256),0
  4662  1C65  0008               	return
  4663                           
  4664                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  4665  1C66  3001               	movlw	1
  4666  1C67  02A6               	subwf	(_WDT^(0+256)+1),f
  4667  1C68  0826               	movf	(_WDT^(0+256)+1),w
  4668  1C69  3AFF               	xorlw	255
  4669  1C6A  1903               	skipnz
  4670  1C6B  0008               	return
  4671                           
  4672                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  4673  1C6C  3064               	movlw	100
  4674  1C6D  0020               	movlb	0	; select bank0
  4675  1C6E  00A0               	movwf	??_WDT_Main
  4676  1C6F  0820               	movf	??_WDT_Main,w
  4677  1C70  0022               	movlb	2	; select bank2
  4678  1C71  00A6               	movwf	(_WDT^(0+256)+1)
  4679                           
  4680                           ;MCU_B1.c: 1037: WDT_Clearing();
  4681  1C72  3180  2002         	fcall	_WDT_Clearing
  4682  1C74  0008               	return
  4683  1C75                     __end_of_WDT_Main:	
  4684                           
  4685                           	psect	text7
  4686  0002                     __ptext7:	
  4687 ;; *************** function _WDT_Clearing *****************
  4688 ;; Defined at:
  4689 ;;		line 1043 in file "../src/MCU_B1.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;		None
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;		None               void
  4696 ;; Registers used:
  4697 ;;		None
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4707 ;;Total ram usage:        0 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    5
  4710 ;; This function calls:
  4711 ;;		Nothing
  4712 ;; This function is called by:
  4713 ;;		_WDT_Main
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           
  4718                           ;psect for function _WDT_Clearing
  4719  0002                     _WDT_Clearing:	
  4720                           
  4721                           ;incstack = 0
  4722                           ; Regs used in _WDT_Clearing: []
  4723  0002  0064               	clrwdt	;# 
  4724  0003  0008               	return
  4725  0004                     __end_of_WDT_Clearing:	
  4726                           
  4727                           	psect	text8
  4728  1AC3                     __ptext8:	
  4729 ;; *************** function _Temp_Main *****************
  4730 ;; Defined at:
  4731 ;;		line 51 in file "../src/OverTemperature_B1.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;		None
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;		None
  4736 ;; Return value:  Size  Location     Type
  4737 ;;		None               void
  4738 ;; Registers used:
  4739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4749 ;;Total ram usage:        0 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:    7
  4752 ;; This function calls:
  4753 ;;		_setTemp_Main
  4754 ;; This function is called by:
  4755 ;;		_main
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           
  4760                           ;psect for function _Temp_Main
  4761  1AC3                     _Temp_Main:	
  4762                           
  4763                           ;OverTemperature_B1.c: 53: setTemp_Main();
  4764                           
  4765                           ;incstack = 0
  4766                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4767  1AC3  318E  260A         	fcall	_setTemp_Main
  4768  1AC5  0008               	return
  4769  1AC6                     __end_of_Temp_Main:	
  4770                           
  4771                           	psect	text9
  4772  0E0A                     __ptext9:	
  4773 ;; *************** function _setTemp_Main *****************
  4774 ;; Defined at:
  4775 ;;		line 58 in file "../src/OverTemperature_B1.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;		None
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;		None
  4780 ;; Return value:  Size  Location     Type
  4781 ;;		None               void
  4782 ;; Registers used:
  4783 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4793 ;;Total ram usage:        2 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; Hardware stack levels required when called:    6
  4796 ;; This function calls:
  4797 ;;		_getMain_All_Error_Status
  4798 ;; This function is called by:
  4799 ;;		_Temp_Main
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           
  4804                           ;psect for function _setTemp_Main
  4805  0E0A                     _setTemp_Main:	
  4806                           
  4807                           ;OverTemperature_B1.c: 59: if (Temp.Enable == 1) {
  4808                           
  4809                           ;incstack = 0
  4810                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4811  0E0A  0021               	movlb	1	; select bank1
  4812  0E0B  1C58               	btfss	_Temp^(0+128),0
  4813  0E0C  2E9F               	goto	l1869
  4814                           
  4815                           ;OverTemperature_B1.c: 60: if (Temp.ADtoGO == 0) {
  4816  0E0D  1958               	btfsc	_Temp^(0+128),2
  4817  0E0E  2E1E               	goto	l9897
  4818                           
  4819                           ;OverTemperature_B1.c: 61: Temp.Time++;
  4820  0E0F  3001               	movlw	1
  4821  0E10  07D9               	addwf	(_Temp^(0+128)+1),f
  4822  0E11  3000               	movlw	0
  4823  0E12  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  4824                           
  4825                           ;OverTemperature_B1.c: 62: if (Temp.Time >= 500) {
  4826  0E13  3001               	movlw	1
  4827  0E14  025A               	subwf	((_Temp+1)^(0+128)+1),w
  4828  0E15  30F4               	movlw	244
  4829  0E16  1903               	skipnz
  4830  0E17  0259               	subwf	(_Temp^(0+128)+1),w
  4831  0E18  1C03               	skipc
  4832  0E19  0008               	return
  4833                           
  4834                           ;OverTemperature_B1.c: 63: Temp.Time = 0;
  4835  0E1A  01D9               	clrf	(_Temp^(0+128)+1)
  4836  0E1B  01DA               	clrf	((_Temp+1)^(0+128)+1)
  4837                           
  4838                           ;OverTemperature_B1.c: 64: Temp.ADtoGO = 1;
  4839  0E1C  1558               	bsf	_Temp^(0+128),2
  4840                           
  4841                           ;OverTemperature_B1.c: 65: }
  4842                           ;OverTemperature_B1.c: 66: } else {
  4843  0E1D  0008               	return
  4844  0E1E                     l9897:	
  4845                           
  4846                           ;OverTemperature_B1.c: 67: if (getMain_All_Error_Status(2) == 0) {
  4847  0E1E  3002               	movlw	2
  4848  0E1F  3191  2162  318E   	fcall	_getMain_All_Error_Status
  4849  0E22  3800               	iorlw	0
  4850  0E23  1D03               	skipz
  4851  0E24  0008               	return
  4852                           
  4853                           ;OverTemperature_B1.c: 68: Temp.Time++;
  4854  0E25  3001               	movlw	1
  4855  0E26  0021               	movlb	1	; select bank1
  4856  0E27  07D9               	addwf	(_Temp^(0+128)+1),f
  4857  0E28  3000               	movlw	0
  4858  0E29  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  4859                           
  4860                           ;OverTemperature_B1.c: 69: if (Temp.Time >= 5) {
  4861  0E2A  3000               	movlw	0
  4862  0E2B  025A               	subwf	((_Temp+1)^(0+128)+1),w
  4863  0E2C  3005               	movlw	5
  4864  0E2D  1903               	skipnz
  4865  0E2E  0259               	subwf	(_Temp^(0+128)+1),w
  4866  0E2F  1C03               	skipc
  4867  0E30  0008               	return
  4868                           
  4869                           ;OverTemperature_B1.c: 70: Temp.Time = 0;
  4870  0E31  01D9               	clrf	(_Temp^(0+128)+1)
  4871  0E32  01DA               	clrf	((_Temp+1)^(0+128)+1)
  4872                           
  4873                           ;OverTemperature_B1.c: 71: if (Temp.GO == 1) {
  4874  0E33  1E58               	btfss	_Temp^(0+128),4
  4875  0E34  0008               	return
  4876                           
  4877                           ;OverTemperature_B1.c: 72: Temp.ADtoGO = 0;
  4878  0E35  1158               	bcf	_Temp^(0+128),2
  4879                           
  4880                           ;OverTemperature_B1.c: 73: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4881  0E36  300A               	movlw	10
  4882  0E37  3ED8               	addlw	_Temp& (0+255)
  4883  0E38  0086               	movwf	6
  4884  0E39  0187               	clrf	7
  4885  0E3A  3008               	movlw	8
  4886  0E3B  3ED8               	addlw	_Temp& (0+255)
  4887  0E3C  0084               	movwf	4
  4888  0E3D  0185               	clrf	5
  4889  0E3E  3F40               	moviw [0]fsr1
  4890  0E3F  0700               	addwf	0,w
  4891  0E40  0020               	movlb	0	; select bank0
  4892  0E41  00A7               	movwf	??_setTemp_Main
  4893  0E42  3101               	addfsr 0,1
  4894  0E43  3F41               	moviw [1]fsr1
  4895  0E44  3D00               	addwfc	0,w
  4896  0E45  00A8               	movwf	??_setTemp_Main+1
  4897  0E46  36A8               	lsrf	??_setTemp_Main+1,f
  4898  0E47  0CA7               	rrf	??_setTemp_Main,f
  4899  0E48  0827               	movf	??_setTemp_Main,w
  4900  0E49  0021               	movlb	1	; select bank1
  4901  0E4A  00DE               	movwf	(_Temp^(0+128)+6)
  4902  0E4B  0020               	movlb	0	; select bank0
  4903  0E4C  0828               	movf	??_setTemp_Main+1,w
  4904  0E4D  0021               	movlb	1	; select bank1
  4905  0E4E  00DF               	movwf	((_Temp+1)^(0+128)+6)
  4906                           
  4907                           ;OverTemperature_B1.c: 83: Temp.SafeValue = 600;
  4908  0E4F  3058               	movlw	88
  4909  0E50  00E6               	movwf	(_Temp^(0+128)+14)
  4910  0E51  3002               	movlw	2
  4911  0E52  00E7               	movwf	(_Temp^(0+128)+15)
  4912                           
  4913                           ;OverTemperature_B1.c: 84: Temp.DangerValue = 550;
  4914  0E53  3026               	movlw	38
  4915  0E54  00E8               	movwf	(_Temp^(0+128)+16)
  4916  0E55  3002               	movlw	2
  4917  0E56  00E9               	movwf	(_Temp^(0+128)+17)
  4918                           
  4919                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  4920  0E57  1CD8               	btfss	_Temp^(0+128),1
  4921  0E58  2E6E               	goto	l9927
  4922                           
  4923                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  4924  0E59  0867               	movf	((_Temp+1)^(0+128)+14),w
  4925  0E5A  025F               	subwf	((_Temp+1)^(0+128)+6),w
  4926  0E5B  1D03               	skipz
  4927  0E5C  2E5F               	goto	u10845
  4928  0E5D  0866               	movf	(_Temp^(0+128)+14),w
  4929  0E5E  025E               	subwf	(_Temp^(0+128)+6),w
  4930  0E5F                     u10845:	
  4931  0E5F  1C03               	skipc
  4932  0E60  2E83               	goto	l9937
  4933                           
  4934                           ;OverTemperature_B1.c: 92: Temp.Count++;
  4935  0E61  3001               	movlw	1
  4936  0E62  0020               	movlb	0	; select bank0
  4937  0E63  00A7               	movwf	??_setTemp_Main
  4938  0E64  0827               	movf	??_setTemp_Main,w
  4939  0E65  0021               	movlb	1	; select bank1
  4940  0E66  07DB               	addwf	(_Temp^(0+128)+3),f
  4941                           
  4942                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  4943  0E67  3003               	movlw	3
  4944  0E68  025B               	subwf	(_Temp^(0+128)+3),w
  4945  0E69  1C03               	skipc
  4946  0E6A  2E84               	goto	l9939
  4947                           
  4948                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  4949  0E6B  01DB               	clrf	(_Temp^(0+128)+3)
  4950                           
  4951                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  4952  0E6C  10D8               	bcf	_Temp^(0+128),1
  4953                           
  4954                           ;OverTemperature_B1.c: 96: }
  4955                           ;OverTemperature_B1.c: 97: } else {
  4956  0E6D  2E84               	goto	l9939
  4957  0E6E                     l9927:	
  4958                           ;OverTemperature_B1.c: 99: }
  4959                           ;OverTemperature_B1.c: 100: } else {
  4960                           
  4961                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  4962                           
  4963                           
  4964                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  4965  0E6E  085F               	movf	((_Temp+1)^(0+128)+6),w
  4966  0E6F  0269               	subwf	((_Temp+1)^(0+128)+16),w
  4967  0E70  1D03               	skipz
  4968  0E71  2E74               	goto	u10865
  4969  0E72  085E               	movf	(_Temp^(0+128)+6),w
  4970  0E73  0268               	subwf	(_Temp^(0+128)+16),w
  4971  0E74                     u10865:	
  4972  0E74  1C03               	skipc
  4973  0E75  2E83               	goto	l9937
  4974                           
  4975                           ;OverTemperature_B1.c: 102: Temp.Count++;
  4976  0E76  3001               	movlw	1
  4977  0E77  0020               	movlb	0	; select bank0
  4978  0E78  00A7               	movwf	??_setTemp_Main
  4979  0E79  0827               	movf	??_setTemp_Main,w
  4980  0E7A  0021               	movlb	1	; select bank1
  4981  0E7B  07DB               	addwf	(_Temp^(0+128)+3),f
  4982                           
  4983                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  4984  0E7C  3003               	movlw	3
  4985  0E7D  025B               	subwf	(_Temp^(0+128)+3),w
  4986  0E7E  1C03               	skipc
  4987  0E7F  2E84               	goto	l9939
  4988                           
  4989                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  4990  0E80  01DB               	clrf	(_Temp^(0+128)+3)
  4991                           
  4992                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  4993  0E81  14D8               	bsf	_Temp^(0+128),1
  4994                           
  4995                           ;OverTemperature_B1.c: 106: }
  4996                           ;OverTemperature_B1.c: 107: } else {
  4997  0E82  2E84               	goto	l9939
  4998  0E83                     l9937:	
  4999                           
  5000                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5001  0E83  01DB               	clrf	(_Temp^(0+128)+3)
  5002  0E84                     l9939:	
  5003                           
  5004                           ;OverTemperature_B1.c: 109: }
  5005                           ;OverTemperature_B1.c: 110: }
  5006                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5007  0E84  085F               	movf	((_Temp+1)^(0+128)+6),w
  5008  0E85  0020               	movlb	0	; select bank0
  5009  0E86  00A7               	movwf	??_setTemp_Main
  5010  0E87  087B               	movf	_product,w
  5011  0E88  3E18               	addlw	24
  5012  0E89  0086               	movwf	6
  5013  0E8A  3002               	movlw	2	; select bank4/5
  5014  0E8B  0087               	movwf	7
  5015  0E8C  0827               	movf	??_setTemp_Main,w
  5016  0E8D  0081               	movwf	1
  5017                           
  5018                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5019  0E8E  0021               	movlb	1	; select bank1
  5020  0E8F  085E               	movf	(_Temp^(0+128)+6),w
  5021  0E90  0020               	movlb	0	; select bank0
  5022  0E91  00A7               	movwf	??_setTemp_Main
  5023  0E92  087B               	movf	_product,w
  5024  0E93  3E19               	addlw	25
  5025  0E94  0086               	movwf	6
  5026  0E95  3002               	movlw	2	; select bank4/5
  5027  0E96  0087               	movwf	7
  5028  0E97  0827               	movf	??_setTemp_Main,w
  5029  0E98  0081               	movwf	1
  5030                           
  5031                           ;OverTemperature_B1.c: 115: Temp.ADH[0] = 0;
  5032  0E99  0021               	movlb	1	; select bank1
  5033  0E9A  01E0               	clrf	(_Temp^(0+128)+8)
  5034  0E9B  01E1               	clrf	((_Temp+1)^(0+128)+8)
  5035                           
  5036                           ;OverTemperature_B1.c: 116: Temp.ADH[1] = 0;
  5037  0E9C  01E2               	clrf	(_Temp^(0+128)+10)
  5038  0E9D  01E3               	clrf	((_Temp+1)^(0+128)+10)
  5039                           
  5040                           ;OverTemperature_B1.c: 117: }
  5041                           ;OverTemperature_B1.c: 118: }
  5042                           ;OverTemperature_B1.c: 119: }
  5043                           ;OverTemperature_B1.c: 120: }
  5044                           ;OverTemperature_B1.c: 121: } else {
  5045  0E9E  0008               	return
  5046  0E9F                     l1869:	
  5047                           
  5048                           ;OverTemperature_B1.c: 122: if (myMain.PowerON == 1) {
  5049  0E9F  1C20               	btfss	_myMain^(0+128),0
  5050  0EA0  0008               	return
  5051                           
  5052                           ;OverTemperature_B1.c: 123: Temp.Enable = 1;
  5053  0EA1  1458               	bsf	_Temp^(0+128),0
  5054  0EA2  0008               	return
  5055  0EA3                     __end_of_setTemp_Main:	
  5056                           
  5057                           	psect	text10
  5058  1AC0                     __ptext10:	
  5059 ;; *************** function _Temp_Initialization *****************
  5060 ;; Defined at:
  5061 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;		None
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;		None
  5066 ;; Return value:  Size  Location     Type
  5067 ;;		None               void
  5068 ;; Registers used:
  5069 ;;		status,2, status,0, pclath, cstack
  5070 ;; Tracked objects:
  5071 ;;		On entry : 0/0
  5072 ;;		On exit  : 0/0
  5073 ;;		Unchanged: 0/0
  5074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5079 ;;Total ram usage:        0 bytes
  5080 ;; Hardware stack levels used:    1
  5081 ;; Hardware stack levels required when called:    6
  5082 ;; This function calls:
  5083 ;;		_setTemp_Initialization
  5084 ;; This function is called by:
  5085 ;;		_main
  5086 ;; This function uses a non-reentrant model
  5087 ;;
  5088                           
  5089                           
  5090                           ;psect for function _Temp_Initialization
  5091  1AC0                     _Temp_Initialization:	
  5092                           
  5093                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5094                           
  5095                           ;incstack = 0
  5096                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5097  1AC0  319A  22B6         	fcall	_setTemp_Initialization
  5098  1AC2  0008               	return
  5099  1AC3                     __end_of_Temp_Initialization:	
  5100                           
  5101                           	psect	text11
  5102  1AB6                     __ptext11:	
  5103 ;; *************** function _setTemp_Initialization *****************
  5104 ;; Defined at:
  5105 ;;		line 46 in file "../src/OverTemperature_B1.c"
  5106 ;; Parameters:    Size  Location     Type
  5107 ;;		None
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;		None
  5110 ;; Return value:  Size  Location     Type
  5111 ;;		None               void
  5112 ;; Registers used:
  5113 ;;		None
  5114 ;; Tracked objects:
  5115 ;;		On entry : 0/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5123 ;;Total ram usage:        0 bytes
  5124 ;; Hardware stack levels used:    1
  5125 ;; Hardware stack levels required when called:    5
  5126 ;; This function calls:
  5127 ;;		Nothing
  5128 ;; This function is called by:
  5129 ;;		_Temp_Initialization
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           
  5134                           ;psect for function _setTemp_Initialization
  5135  1AB6                     _setTemp_Initialization:	
  5136                           
  5137                           ;incstack = 0
  5138                           ; Regs used in _setTemp_Initialization: []
  5139  1AB6  0008               	return
  5140  1AB7                     __end_of_setTemp_Initialization:	
  5141                           
  5142                           	psect	text12
  5143  1F19                     __ptext12:	
  5144 ;; *************** function _Switch_Main *****************
  5145 ;; Defined at:
  5146 ;;		line 72 in file "../src/Switch_B1.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;		None
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;  error           1   77[BANK0 ] unsigned char 
  5151 ;; Return value:  Size  Location     Type
  5152 ;;		None               void
  5153 ;; Registers used:
  5154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5163 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5164 ;;Total ram usage:        2 bytes
  5165 ;; Hardware stack levels used:    1
  5166 ;; Hardware stack levels required when called:   12
  5167 ;; This function calls:
  5168 ;;		_TouchPower
  5169 ;;		_getMain_All_Error_Status
  5170 ;;		_setMain_Exception
  5171 ;;		_setSw_Main
  5172 ;; This function is called by:
  5173 ;;		_main
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           
  5178                           ;psect for function _Switch_Main
  5179  1F19                     _Switch_Main:	
  5180                           
  5181                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5182                           
  5183                           ;incstack = 0
  5184                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5185  1F19  3000               	movlw	0
  5186  1F1A  3191  2162  319F   	fcall	_getMain_All_Error_Status
  5187  1F1D  0020               	movlb	0	; select bank0
  5188  1F1E  00EC               	movwf	??_Switch_Main
  5189  1F1F  086C               	movf	??_Switch_Main,w
  5190  1F20  00ED               	movwf	Switch_Main@error
  5191                           
  5192                           ;Switch_B1.c: 74: if (error != 0) {
  5193  1F21  086D               	movf	Switch_Main@error,w
  5194  1F22  1903               	btfsc	3,2
  5195  1F23  2F29               	goto	l2627
  5196                           
  5197                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5198  1F24  0021               	movlb	1	; select bank1
  5199  1F25  1853               	btfsc	_SwDetect^(0+128),0
  5200  1F26  2F32               	goto	l10603
  5201                           
  5202                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5203  1F27  1453               	bsf	_SwDetect^(0+128),0
  5204  1F28  2F2D               	goto	L2
  5205  1F29                     l2627:	
  5206                           ;Switch_B1.c: 80: }
  5207                           ;Switch_B1.c: 81: } else {
  5208                           
  5209                           ;Switch_B1.c: 78: setMain_Exception(error);
  5210                           
  5211                           
  5212                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5213  1F29  0021               	movlb	1	; select bank1
  5214  1F2A  1C53               	btfss	_SwDetect^(0+128),0
  5215  1F2B  2F32               	goto	l10603
  5216                           
  5217                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5218  1F2C  1053               	bcf	_SwDetect^(0+128),0
  5219  1F2D                     L2:	
  5220                           
  5221                           ;Switch_B1.c: 85: setMain_Exception(error);
  5222  1F2D  0020               	movlb	0	; select bank0
  5223  1F2E  086D               	movf	Switch_Main@error,w
  5224  1F2F  3195  2584  319F   	fcall	_setMain_Exception
  5225  1F32                     l10603:	
  5226                           
  5227                           ;Switch_B1.c: 87: }
  5228                           ;Switch_B1.c: 88: }
  5229                           ;Switch_B1.c: 91: setSw_Main(1);
  5230  1F32  3001               	movlw	1
  5231  1F33  3183  23B8  319F   	fcall	_setSw_Main
  5232                           
  5233                           ;Switch_B1.c: 95: setSw_Main(2);
  5234  1F36  3002               	movlw	2
  5235  1F37  3183  23B8  319F   	fcall	_setSw_Main
  5236                           
  5237                           ;Switch_B1.c: 103: TouchPower();
  5238  1F3A  319D  2528         	fcall	_TouchPower
  5239  1F3C  0008               	return
  5240  1F3D                     __end_of_Switch_Main:	
  5241                           
  5242                           	psect	text13
  5243  03B8                     __ptext13:	
  5244 ;; *************** function _setSw_Main *****************
  5245 ;; Defined at:
  5246 ;;		line 137 in file "../src/Switch_B1.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;  sw              1    wreg     unsigned char 
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;  sw              1   72[BANK0 ] unsigned char 
  5251 ;; Return value:  Size  Location     Type
  5252 ;;		None               void
  5253 ;; Registers used:
  5254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5261 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5262 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5263 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5264 ;;Total ram usage:        3 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:   10
  5267 ;; This function calls:
  5268 ;;		_SwPointSelect
  5269 ;;		_getSw_KeyStatus
  5270 ;;		_setBuz
  5271 ;;		_setDimmerLights_AdjControl
  5272 ;;		_setDimmerLights_SwOff
  5273 ;;		_setDimmerLights_SwOn
  5274 ;;		_setRF_Learn
  5275 ;; This function is called by:
  5276 ;;		_Switch_Main
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           
  5281                           ;psect for function _setSw_Main
  5282  03B8                     _setSw_Main:	
  5283                           
  5284                           ;incstack = 0
  5285                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5286                           ;setSw_Main@sw stored from wreg
  5287  03B8  0020               	movlb	0	; select bank0
  5288  03B9  00E8               	movwf	setSw_Main@sw
  5289                           
  5290                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5291  03BA  0868               	movf	setSw_Main@sw,w
  5292  03BB  319C  24D6  3183   	fcall	_SwPointSelect
  5293                           
  5294                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5295  03BE  0879               	movf	_Sw,w
  5296  03BF  0086               	movwf	6
  5297  03C0  3001               	movlw	1	; select bank2/3
  5298  03C1  0087               	movwf	7
  5299  03C2  1C01               	btfss	1,0
  5300  03C3  2D1E               	goto	l2637
  5301                           
  5302                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5303  03C4  0021               	movlb	1	; select bank1
  5304  03C5  1853               	btfsc	_SwDetect^(0+128),0
  5305  03C6  2BE2               	goto	l10079
  5306                           
  5307                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5308  03C7  0A79               	incf	_Sw,w
  5309  03C8  0086               	movwf	6
  5310  03C9  3001               	movlw	1	; select bank2/3
  5311  03CA  0087               	movwf	7
  5312  03CB  1081               	bcf	1,1
  5313                           
  5314                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5315  03CC  0020               	movlb	0	; select bank0
  5316  03CD  0868               	movf	setSw_Main@sw,w
  5317  03CE  3190  2066  3183   	fcall	_getSw_KeyStatus
  5318  03D1  3A01               	xorlw	1
  5319  03D2  3000               	movlw	0
  5320  03D3  1903               	skipnz
  5321  03D4  3001               	movlw	1
  5322  03D5  0020               	movlb	0	; select bank0
  5323  03D6  00E6               	movwf	??_setSw_Main
  5324  03D7  0879               	movf	_Sw,w
  5325  03D8  0086               	movwf	6
  5326  03D9  3001               	movlw	1	; select bank2/3
  5327  03DA  0087               	movwf	7
  5328  03DB  0DE6               	rlf	??_setSw_Main,f
  5329  03DC  0801               	movf	1,w
  5330  03DD  0666               	xorwf	??_setSw_Main,w
  5331  03DE  39FD               	andlw	-3
  5332  03DF  0666               	xorwf	??_setSw_Main,w
  5333  03E0  0081               	movwf	1
  5334                           
  5335                           ;Switch_B1.c: 143: } else {
  5336  03E1  2BF7               	goto	l2639
  5337  03E2                     l10079:	
  5338                           
  5339                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5340  03E2  0A79               	incf	_Sw,w
  5341  03E3  0086               	movwf	6
  5342  03E4  3001               	movlw	1	; select bank2/3
  5343  03E5  0087               	movwf	7
  5344  03E6  1881               	btfsc	1,1
  5345  03E7  2BF7               	goto	l2639
  5346                           
  5347                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5348  03E8  0A79               	incf	_Sw,w
  5349  03E9  0086               	movwf	6
  5350  03EA  3001               	movlw	1	; select bank2/3
  5351  03EB  0087               	movwf	7
  5352  03EC  1481               	bsf	1,1
  5353                           
  5354                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5355  03ED  0879               	movf	_Sw,w
  5356  03EE  0086               	movwf	6
  5357  03EF  3001               	movlw	1	; select bank2/3
  5358  03F0  0087               	movwf	7
  5359  03F1  1081               	bcf	1,1
  5360                           
  5361                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5362  03F2  0879               	movf	_Sw,w
  5363  03F3  0086               	movwf	6
  5364  03F4  3001               	movlw	1	; select bank2/3
  5365  03F5  0087               	movwf	7
  5366  03F6  1501               	bsf	1,2
  5367  03F7                     l2639:	
  5368                           
  5369                           ;Switch_B1.c: 148: }
  5370                           ;Switch_B1.c: 149: }
  5371                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5372  03F7  0879               	movf	_Sw,w
  5373  03F8  0086               	movwf	6
  5374  03F9  3001               	movlw	1	; select bank2/3
  5375  03FA  0087               	movwf	7
  5376  03FB  1C81               	btfss	1,1
  5377  03FC  2CC7               	goto	l10129
  5378                           
  5379                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5380  03FD  0879               	movf	_Sw,w
  5381  03FE  0086               	movwf	6
  5382  03FF  3001               	movlw	1	; select bank2/3
  5383  0400  0087               	movwf	7
  5384  0401  1901               	btfsc	1,2
  5385  0402  2C25               	goto	l10095
  5386                           
  5387                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5388  0403  3001               	movlw	1
  5389  0404  0020               	movlb	0	; select bank0
  5390  0405  00E6               	movwf	??_setSw_Main
  5391  0406  0879               	movf	_Sw,w
  5392  0407  3E02               	addlw	2
  5393  0408  0086               	movwf	6
  5394  0409  3001               	movlw	1	; select bank2/3
  5395  040A  0087               	movwf	7
  5396  040B  0866               	movf	??_setSw_Main,w
  5397  040C  0781               	addwf	1,f
  5398                           
  5399                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5400  040D  0879               	movf	_Sw,w
  5401  040E  3E02               	addlw	2
  5402  040F  0086               	movwf	6
  5403  0410  3001               	movlw	1	; select bank2/3
  5404  0411  0087               	movwf	7
  5405  0412  3005               	movlw	5
  5406  0413  0201               	subwf	1,w
  5407  0414  1C03               	skipc
  5408  0415  0008               	return
  5409                           
  5410                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5411  0416  0879               	movf	_Sw,w
  5412  0417  3E02               	addlw	2
  5413  0418  0086               	movwf	6
  5414  0419  3001               	movlw	1	; select bank2/3
  5415  041A  0087               	movwf	7
  5416  041B  0181               	clrf	1
  5417                           
  5418                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5419  041C  0879               	movf	_Sw,w
  5420  041D  0086               	movwf	6
  5421  041E  3001               	movlw	1	; select bank2/3
  5422  041F  0087               	movwf	7
  5423  0420  1501               	bsf	1,2
  5424                           
  5425                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5426  0421  0868               	movf	setSw_Main@sw,w
  5427  0422  3193  23B2         	fcall	_setDimmerLights_SwOn
  5428                           
  5429                           ;Switch_B1.c: 162: }
  5430                           ;Switch_B1.c: 163: } else {
  5431  0424  0008               	return
  5432  0425                     l10095:	
  5433                           
  5434                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5435  0425  0879               	movf	_Sw,w
  5436  0426  0086               	movwf	6
  5437  0427  3001               	movlw	1	; select bank2/3
  5438  0428  0087               	movwf	7
  5439  0429  1981               	btfsc	1,3
  5440  042A  2C57               	goto	l10105
  5441                           
  5442                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5443  042B  0879               	movf	_Sw,w
  5444  042C  3E03               	addlw	3
  5445  042D  0086               	movwf	6
  5446  042E  3001               	movlw	1	; select bank2/3
  5447  042F  0087               	movwf	7
  5448  0430  3001               	movlw	1
  5449  0431  0781               	addwf	1,f
  5450  0432  3141               	addfsr 1,1
  5451  0433  1803               	skipnc
  5452  0434  0A81               	incf	1,f
  5453                           
  5454                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5455  0435  0879               	movf	_Sw,w
  5456  0436  3E03               	addlw	3
  5457  0437  0086               	movwf	6
  5458  0438  3001               	movlw	1	; select bank2/3
  5459  0439  0087               	movwf	7
  5460  043A  3F40               	moviw [0]fsr1
  5461  043B  0020               	movlb	0	; select bank0
  5462  043C  00E6               	movwf	??_setSw_Main
  5463  043D  3F41               	moviw [1]fsr1
  5464  043E  00E7               	movwf	??_setSw_Main+1
  5465  043F  3000               	movlw	0
  5466  0440  0267               	subwf	??_setSw_Main+1,w
  5467  0441  3096               	movlw	150
  5468  0442  1903               	skipnz
  5469  0443  0266               	subwf	??_setSw_Main,w
  5470  0444  1C03               	skipc
  5471  0445  0008               	return
  5472                           
  5473                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5474  0446  0879               	movf	_Sw,w
  5475  0447  3E03               	addlw	3
  5476  0448  0086               	movwf	6
  5477  0449  3001               	movlw	1	; select bank2/3
  5478  044A  0087               	movwf	7
  5479  044B  3000               	movlw	0
  5480  044C  3FC0               	movwi [0]fsr1
  5481  044D  3FC1               	movwi [1]fsr1
  5482                           
  5483                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5484  044E  0879               	movf	_Sw,w
  5485  044F  0086               	movwf	6
  5486  0450  3001               	movlw	1	; select bank2/3
  5487  0451  0087               	movwf	7
  5488  0452  1581               	bsf	1,3
  5489                           
  5490                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5491  0453  0868               	movf	setSw_Main@sw,w
  5492  0454  3191  2105         	fcall	_setDimmerLights_AdjControl
  5493                           
  5494                           ;Switch_B1.c: 174: }
  5495                           ;Switch_B1.c: 175: } else {
  5496  0456  0008               	return
  5497  0457                     l10105:	
  5498                           
  5499                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5500  0457  0879               	movf	_Sw,w
  5501  0458  0086               	movwf	6
  5502  0459  3001               	movlw	1	; select bank2/3
  5503  045A  0087               	movwf	7
  5504  045B  1A01               	btfsc	1,4
  5505  045C  2C95               	goto	l10119
  5506                           
  5507                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5508  045D  0879               	movf	_Sw,w
  5509  045E  3E05               	addlw	5
  5510  045F  0086               	movwf	6
  5511  0460  3001               	movlw	1	; select bank2/3
  5512  0461  0087               	movwf	7
  5513  0462  3001               	movlw	1
  5514  0463  0781               	addwf	1,f
  5515  0464  3141               	addfsr 1,1
  5516  0465  1803               	skipnc
  5517  0466  0A81               	incf	1,f
  5518                           
  5519                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5520  0467  0879               	movf	_Sw,w
  5521  0468  3E05               	addlw	5
  5522  0469  0086               	movwf	6
  5523  046A  3001               	movlw	1	; select bank2/3
  5524  046B  0087               	movwf	7
  5525  046C  3F40               	moviw [0]fsr1
  5526  046D  0020               	movlb	0	; select bank0
  5527  046E  00E6               	movwf	??_setSw_Main
  5528  046F  3F41               	moviw [1]fsr1
  5529  0470  00E7               	movwf	??_setSw_Main+1
  5530  0471  3000               	movlw	0
  5531  0472  0267               	subwf	??_setSw_Main+1,w
  5532  0473  3096               	movlw	150
  5533  0474  1903               	skipnz
  5534  0475  0266               	subwf	??_setSw_Main,w
  5535  0476  1C03               	skipc
  5536  0477  0008               	return
  5537                           
  5538                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5539  0478  0879               	movf	_Sw,w
  5540  0479  3E05               	addlw	5
  5541  047A  0086               	movwf	6
  5542  047B  3001               	movlw	1	; select bank2/3
  5543  047C  0087               	movwf	7
  5544  047D  3000               	movlw	0
  5545  047E  3FC0               	movwi [0]fsr1
  5546  047F  3FC1               	movwi [1]fsr1
  5547                           
  5548                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5549  0480  0879               	movf	_Sw,w
  5550  0481  0086               	movwf	6
  5551  0482  3001               	movlw	1	; select bank2/3
  5552  0483  0087               	movwf	7
  5553  0484  1601               	bsf	1,4
  5554                           
  5555                           ;Switch_B1.c: 183: setRF_Learn(1);
  5556  0485  3001               	movlw	1
  5557  0486  319C  24EA  3183   	fcall	_setRF_Learn
  5558                           
  5559                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5560  0489  0021               	movlb	1	; select bank1
  5561  048A  1EA0               	btfss	_myMain^(0+128),5
  5562  048B  0008               	return
  5563                           
  5564                           ;Switch_B1.c: 186: setBuz(2, 100);
  5565  048C  3064               	movlw	100
  5566  048D  0020               	movlb	0	; select bank0
  5567  048E  00A9               	movwf	setBuz@time
  5568  048F  3000               	movlw	0
  5569  0490  00AA               	movwf	setBuz@time+1
  5570  0491  3002               	movlw	2
  5571  0492  3196  2632         	fcall	_setBuz
  5572                           
  5573                           ;Switch_B1.c: 187: }
  5574                           ;Switch_B1.c: 189: }
  5575                           ;Switch_B1.c: 190: } else {
  5576  0494  0008               	return
  5577  0495                     l10119:	
  5578                           
  5579                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5580  0495  0879               	movf	_Sw,w
  5581  0496  0086               	movwf	6
  5582  0497  3001               	movlw	1	; select bank2/3
  5583  0498  0087               	movwf	7
  5584  0499  1A81               	btfsc	1,5
  5585  049A  0008               	return
  5586                           
  5587                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5588  049B  0879               	movf	_Sw,w
  5589  049C  3E07               	addlw	7
  5590  049D  0086               	movwf	6
  5591  049E  3001               	movlw	1	; select bank2/3
  5592  049F  0087               	movwf	7
  5593  04A0  3001               	movlw	1
  5594  04A1  0781               	addwf	1,f
  5595  04A2  3141               	addfsr 1,1
  5596  04A3  1803               	skipnc
  5597  04A4  0A81               	incf	1,f
  5598                           
  5599                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5600  04A5  0879               	movf	_Sw,w
  5601  04A6  3E07               	addlw	7
  5602  04A7  0086               	movwf	6
  5603  04A8  3001               	movlw	1	; select bank2/3
  5604  04A9  0087               	movwf	7
  5605  04AA  3F40               	moviw [0]fsr1
  5606  04AB  0020               	movlb	0	; select bank0
  5607  04AC  00E6               	movwf	??_setSw_Main
  5608  04AD  3F41               	moviw [1]fsr1
  5609  04AE  00E7               	movwf	??_setSw_Main+1
  5610  04AF  3001               	movlw	1
  5611  04B0  0267               	subwf	??_setSw_Main+1,w
  5612  04B1  302C               	movlw	44
  5613  04B2  1903               	skipnz
  5614  04B3  0266               	subwf	??_setSw_Main,w
  5615  04B4  1C03               	skipc
  5616  04B5  0008               	return
  5617                           
  5618                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5619  04B6  0879               	movf	_Sw,w
  5620  04B7  3E07               	addlw	7
  5621  04B8  0086               	movwf	6
  5622  04B9  3001               	movlw	1	; select bank2/3
  5623  04BA  0087               	movwf	7
  5624  04BB  3000               	movlw	0
  5625  04BC  3FC0               	movwi [0]fsr1
  5626  04BD  3FC1               	movwi [1]fsr1
  5627                           
  5628                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5629  04BE  0879               	movf	_Sw,w
  5630  04BF  0086               	movwf	6
  5631  04C0  3001               	movlw	1	; select bank2/3
  5632  04C1  0087               	movwf	7
  5633  04C2  1681               	bsf	1,5
  5634                           
  5635                           ;Switch_B1.c: 198: setRF_Learn(0);
  5636  04C3  3000               	movlw	0
  5637  04C4  319C  24EA         	fcall	_setRF_Learn
  5638                           
  5639                           ;Switch_B1.c: 201: }
  5640                           ;Switch_B1.c: 202: }
  5641                           ;Switch_B1.c: 203: }
  5642                           ;Switch_B1.c: 204: }
  5643                           ;Switch_B1.c: 205: }
  5644                           ;Switch_B1.c: 206: } else {
  5645  04C6  0008               	return
  5646  04C7                     l10129:	
  5647                           
  5648                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5649  04C7  0879               	movf	_Sw,w
  5650  04C8  0086               	movwf	6
  5651  04C9  3001               	movlw	1	; select bank2/3
  5652  04CA  0087               	movwf	7
  5653  04CB  1D01               	btfss	1,2
  5654  04CC  0008               	return
  5655                           
  5656                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5657  04CD  3001               	movlw	1
  5658  04CE  0020               	movlb	0	; select bank0
  5659  04CF  00E6               	movwf	??_setSw_Main
  5660  04D0  0879               	movf	_Sw,w
  5661  04D1  3E02               	addlw	2
  5662  04D2  0086               	movwf	6
  5663  04D3  3001               	movlw	1	; select bank2/3
  5664  04D4  0087               	movwf	7
  5665  04D5  0866               	movf	??_setSw_Main,w
  5666  04D6  0781               	addwf	1,f
  5667                           
  5668                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5669  04D7  0879               	movf	_Sw,w
  5670  04D8  3E02               	addlw	2
  5671  04D9  0086               	movwf	6
  5672  04DA  3001               	movlw	1	; select bank2/3
  5673  04DB  0087               	movwf	7
  5674  04DC  3005               	movlw	5
  5675  04DD  0201               	subwf	1,w
  5676  04DE  1C03               	skipc
  5677  04DF  0008               	return
  5678                           
  5679                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5680  04E0  0879               	movf	_Sw,w
  5681  04E1  3E02               	addlw	2
  5682  04E2  0086               	movwf	6
  5683  04E3  3001               	movlw	1	; select bank2/3
  5684  04E4  0087               	movwf	7
  5685  04E5  0181               	clrf	1
  5686                           
  5687                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5688  04E6  0879               	movf	_Sw,w
  5689  04E7  0086               	movwf	6
  5690  04E8  3001               	movlw	1	; select bank2/3
  5691  04E9  0087               	movwf	7
  5692  04EA  1101               	bcf	1,2
  5693                           
  5694                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5695  04EB  0879               	movf	_Sw,w
  5696  04EC  3E03               	addlw	3
  5697  04ED  0086               	movwf	6
  5698  04EE  3001               	movlw	1	; select bank2/3
  5699  04EF  0087               	movwf	7
  5700  04F0  3000               	movlw	0
  5701  04F1  3FC0               	movwi [0]fsr1
  5702  04F2  3FC1               	movwi [1]fsr1
  5703                           
  5704                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5705  04F3  0879               	movf	_Sw,w
  5706  04F4  0086               	movwf	6
  5707  04F5  3001               	movlw	1	; select bank2/3
  5708  04F6  0087               	movwf	7
  5709  04F7  1181               	bcf	1,3
  5710                           
  5711                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5712  04F8  0879               	movf	_Sw,w
  5713  04F9  3E05               	addlw	5
  5714  04FA  0086               	movwf	6
  5715  04FB  3001               	movlw	1	; select bank2/3
  5716  04FC  0087               	movwf	7
  5717  04FD  3000               	movlw	0
  5718  04FE  3FC0               	movwi [0]fsr1
  5719  04FF  3FC1               	movwi [1]fsr1
  5720                           
  5721                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5722  0500  0879               	movf	_Sw,w
  5723  0501  0086               	movwf	6
  5724  0502  3001               	movlw	1	; select bank2/3
  5725  0503  0087               	movwf	7
  5726  0504  1201               	bcf	1,4
  5727                           
  5728                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5729  0505  0879               	movf	_Sw,w
  5730  0506  3E07               	addlw	7
  5731  0507  0086               	movwf	6
  5732  0508  3001               	movlw	1	; select bank2/3
  5733  0509  0087               	movwf	7
  5734  050A  3000               	movlw	0
  5735  050B  3FC0               	movwi [0]fsr1
  5736  050C  3FC1               	movwi [1]fsr1
  5737                           
  5738                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5739  050D  0879               	movf	_Sw,w
  5740  050E  0086               	movwf	6
  5741  050F  3001               	movlw	1	; select bank2/3
  5742  0510  0087               	movwf	7
  5743  0511  1281               	bcf	1,5
  5744                           
  5745                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5746  0512  0021               	movlb	1	; select bank1
  5747  0513  1853               	btfsc	_SwDetect^(0+128),0
  5748  0514  2D1A               	goto	l10155
  5749                           
  5750                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5751  0515  0020               	movlb	0	; select bank0
  5752  0516  0868               	movf	setSw_Main@sw,w
  5753  0517  3197  2740  3183   	fcall	_setDimmerLights_SwOff
  5754  051A                     l10155:	
  5755                           
  5756                           ;Switch_B1.c: 221: }
  5757                           ;Switch_B1.c: 224: setRF_Learn(0);
  5758  051A  3000               	movlw	0
  5759  051B  319C  24EA         	fcall	_setRF_Learn
  5760                           
  5761                           ;Switch_B1.c: 226: }
  5762                           ;Switch_B1.c: 227: }
  5763                           ;Switch_B1.c: 228: }
  5764                           ;Switch_B1.c: 229: } else {
  5765  051D  0008               	return
  5766  051E                     l2637:	
  5767                           
  5768                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5769  051E  0021               	movlb	1	; select bank1
  5770  051F  1C20               	btfss	_myMain^(0+128),0
  5771  0520  0008               	return
  5772                           
  5773                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5774  0521  0879               	movf	_Sw,w
  5775  0522  0086               	movwf	6
  5776  0523  3001               	movlw	1	; select bank2/3
  5777  0524  0087               	movwf	7
  5778  0525  1401               	bsf	1,0
  5779  0526  0008               	return
  5780  0527                     __end_of_setSw_Main:	
  5781                           
  5782                           	psect	text14
  5783  1CEA                     __ptext14:	
  5784 ;; *************** function _setRF_Learn *****************
  5785 ;; Defined at:
  5786 ;;		line 23 in file "../src/RF_Control_B1.c"
  5787 ;; Parameters:    Size  Location     Type
  5788 ;;  command         1    wreg     unsigned char 
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;  command         1    1[BANK0 ] unsigned char 
  5791 ;; Return value:  Size  Location     Type
  5792 ;;		None               void
  5793 ;; Registers used:
  5794 ;;		wreg, status,2, status,0
  5795 ;; Tracked objects:
  5796 ;;		On entry : 0/0
  5797 ;;		On exit  : 0/0
  5798 ;;		Unchanged: 0/0
  5799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5801 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5802 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5804 ;;Total ram usage:        2 bytes
  5805 ;; Hardware stack levels used:    1
  5806 ;; Hardware stack levels required when called:    5
  5807 ;; This function calls:
  5808 ;;		Nothing
  5809 ;; This function is called by:
  5810 ;;		_setSw_Main
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           
  5815                           ;psect for function _setRF_Learn
  5816  1CEA                     _setRF_Learn:	
  5817                           
  5818                           ;incstack = 0
  5819                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5820                           ;setRF_Learn@command stored from wreg
  5821  1CEA  0020               	movlb	0	; select bank0
  5822  1CEB  00A1               	movwf	setRF_Learn@command
  5823                           
  5824                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5825  1CEC  0821               	movf	setRF_Learn@command,w
  5826  1CED  3A01               	xorlw	1
  5827  1CEE  3000               	movlw	0
  5828  1CEF  1903               	skipnz
  5829  1CF0  3001               	movlw	1
  5830  1CF1  00A0               	movwf	??_setRF_Learn
  5831  1CF2  0EA0               	swapf	??_setRF_Learn,f
  5832  1CF3  0DA0               	rlf	??_setRF_Learn,f
  5833  1CF4  0DA0               	rlf	??_setRF_Learn,f
  5834  1CF5  0021               	movlb	1	; select bank1
  5835  1CF6  083C               	movf	_RF1^(0+128),w
  5836  1CF7  0020               	movlb	0	; select bank0
  5837  1CF8  0620               	xorwf	??_setRF_Learn,w
  5838  1CF9  39BF               	andlw	-65
  5839  1CFA  0620               	xorwf	??_setRF_Learn,w
  5840  1CFB  0021               	movlb	1	; select bank1
  5841  1CFC  00BC               	movwf	_RF1^(0+128)
  5842  1CFD  0008               	return
  5843  1CFE                     __end_of_setRF_Learn:	
  5844                           
  5845                           	psect	text15
  5846  1105                     __ptext15:	
  5847 ;; *************** function _setDimmerLights_AdjControl *****************
  5848 ;; Defined at:
  5849 ;;		line 600 in file "../src/Dimmer_B1.c"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;  sw              1    wreg     unsigned char 
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  sw              1    7[BANK0 ] unsigned char 
  5854 ;;  idle            1    6[BANK0 ] unsigned char 
  5855 ;; Return value:  Size  Location     Type
  5856 ;;		None               void
  5857 ;; Registers used:
  5858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5865 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5867 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5868 ;;Total ram usage:        3 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    7
  5871 ;; This function calls:
  5872 ;;		_DimmerLightsPointSelect
  5873 ;;		_getAll_DimmerLights_AdjGO
  5874 ;;		_setDimmerLights_TriggerAdj
  5875 ;; This function is called by:
  5876 ;;		_setSw_Main
  5877 ;; This function uses a non-reentrant model
  5878 ;;
  5879                           
  5880                           
  5881                           ;psect for function _setDimmerLights_AdjControl
  5882  1105                     _setDimmerLights_AdjControl:	
  5883                           
  5884                           ;incstack = 0
  5885                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5886                           ;setDimmerLights_AdjControl@sw stored from wreg
  5887  1105  0020               	movlb	0	; select bank0
  5888  1106  00A7               	movwf	setDimmerLights_AdjControl@sw
  5889                           
  5890                           ;Dimmer_B1.c: 601: DimmerLightsPointSelect(sw);
  5891  1107  0827               	movf	setDimmerLights_AdjControl@sw,w
  5892  1108  319C  2475  3191   	fcall	_DimmerLightsPointSelect
  5893                           
  5894                           ;Dimmer_B1.c: 602: char idle = 0;
  5895  110B  0020               	movlb	0	; select bank0
  5896  110C  01A6               	clrf	setDimmerLights_AdjControl@idle
  5897                           
  5898                           ;Dimmer_B1.c: 604: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  5899  110D  319B  23E8  3191   	fcall	_getAll_DimmerLights_AdjGO
  5900  1110  3A01               	xorlw	1
  5901  1111  3000               	movlw	0
  5902  1112  1903               	skipnz
  5903  1113  3001               	movlw	1
  5904  1114  0020               	movlb	0	; select bank0
  5905  1115  00A5               	movwf	??_setDimmerLights_AdjControl
  5906  1116  0825               	movf	??_setDimmerLights_AdjControl,w
  5907  1117  00A6               	movwf	setDimmerLights_AdjControl@idle
  5908                           
  5909                           ;Dimmer_B1.c: 606: if (idle == 0) {
  5910  1118  08A6               	movf	setDimmerLights_AdjControl@idle,f
  5911  1119  1D03               	skipz
  5912  111A  0008               	return
  5913                           
  5914                           ;Dimmer_B1.c: 607: if (DimmerLights->SwFlag == 1) {
  5915  111B  0877               	movf	_DimmerLights,w
  5916  111C  3E09               	addlw	9
  5917  111D  0086               	movwf	6
  5918  111E  3001               	movlw	1	; select bank2/3
  5919  111F  0087               	movwf	7
  5920  1120  1F01               	btfss	1,6
  5921  1121  0008               	return
  5922                           
  5923                           ;Dimmer_B1.c: 608: DimmerLights->SwAdj = 1;
  5924  1122  0877               	movf	_DimmerLights,w
  5925  1123  3E09               	addlw	9
  5926  1124  0086               	movwf	6
  5927  1125  3001               	movlw	1	; select bank2/3
  5928  1126  0087               	movwf	7
  5929  1127  1781               	bsf	1,7
  5930                           
  5931                           ;Dimmer_B1.c: 609: DimmerLights->Status = 1;
  5932  1128  0877               	movf	_DimmerLights,w
  5933  1129  0086               	movwf	6
  5934  112A  3001               	movlw	1	; select bank2/3
  5935  112B  0087               	movwf	7
  5936  112C  1681               	bsf	1,5
  5937                           
  5938                           ;Dimmer_B1.c: 610: setDimmerLights_TriggerAdj(sw, 1);
  5939  112D  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5940  112E  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5941  112F  0827               	movf	setDimmerLights_AdjControl@sw,w
  5942  1130  319E  2630         	fcall	_setDimmerLights_TriggerAdj
  5943  1132  0008               	return
  5944  1133                     __end_of_setDimmerLights_AdjControl:	
  5945                           
  5946                           	psect	text16
  5947  1066                     __ptext16:	
  5948 ;; *************** function _getSw_KeyStatus *****************
  5949 ;; Defined at:
  5950 ;;		line 511 in file "../src/Dimmer_B1.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;  sw              1    wreg     unsigned char 
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;  sw              1    4[BANK0 ] unsigned char 
  5955 ;;  status          1    3[BANK0 ] unsigned char 
  5956 ;; Return value:  Size  Location     Type
  5957 ;;                  1    wreg      unsigned char 
  5958 ;; Registers used:
  5959 ;;		wreg, status,2
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5968 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;Total ram usage:        5 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    5
  5972 ;; This function calls:
  5973 ;;		Nothing
  5974 ;; This function is called by:
  5975 ;;		_setSw_Main
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           
  5980                           ;psect for function _getSw_KeyStatus
  5981  1066                     _getSw_KeyStatus:	
  5982                           
  5983                           ;incstack = 0
  5984                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  5985                           ;getSw_KeyStatus@sw stored from wreg
  5986  1066  0020               	movlb	0	; select bank0
  5987  1067  00A4               	movwf	getSw_KeyStatus@sw
  5988                           
  5989                           ;Dimmer_B1.c: 512: char status = 0;
  5990  1068  01A3               	clrf	getSw_KeyStatus@status
  5991                           
  5992                           ;Dimmer_B1.c: 524: if (sw == 1) {
  5993  1069  0824               	movf	getSw_KeyStatus@sw,w
  5994  106A  3A01               	xorlw	1
  5995  106B  1D03               	skipz
  5996  106C  2875               	goto	l9343
  5997                           
  5998                           ;Dimmer_B1.c: 525: status = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  5999  106D  01A1               	clrf	_getSw_KeyStatus$2556
  6000  106E  0AA1               	incf	_getSw_KeyStatus$2556,f
  6001  106F  1F0C               	btfss	12,6	;volatile
  6002  1070  1A0C               	btfsc	12,4	;volatile
  6003  1071  2873               	goto	l9341
  6004  1072  01A1               	clrf	_getSw_KeyStatus$2556
  6005  1073                     l9341:	
  6006  1073  0821               	movf	_getSw_KeyStatus$2556,w
  6007  1074  2880               	goto	L3
  6008  1075                     l9343:	
  6009                           ;Dimmer_B1.c: 526: } else if (sw == 2) {
  6010                           
  6011  1075  0824               	movf	getSw_KeyStatus@sw,w
  6012  1076  3A02               	xorlw	2
  6013  1077  1D03               	skipz
  6014  1078  2883               	goto	l9353
  6015                           
  6016                           ;Dimmer_B1.c: 527: status = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  6017  1079  01A2               	clrf	_getSw_KeyStatus$2557
  6018  107A  0AA2               	incf	_getSw_KeyStatus$2557,f
  6019  107B  1C0C               	btfss	12,0	;volatile
  6020  107C  188D               	btfsc	13,1	;volatile
  6021  107D  287F               	goto	l9351
  6022  107E  01A2               	clrf	_getSw_KeyStatus$2557
  6023  107F                     l9351:	
  6024  107F  0822               	movf	_getSw_KeyStatus$2557,w
  6025  1080                     L3:	
  6026  1080  00A0               	movwf	??_getSw_KeyStatus
  6027  1081  0820               	movf	??_getSw_KeyStatus,w
  6028  1082  00A3               	movwf	getSw_KeyStatus@status
  6029  1083                     l9353:	
  6030                           
  6031                           ;Dimmer_B1.c: 528: }
  6032                           ;Dimmer_B1.c: 535: return status;
  6033  1083  0823               	movf	getSw_KeyStatus@status,w
  6034  1084  0008               	return
  6035  1085                     __end_of_getSw_KeyStatus:	
  6036                           
  6037                           	psect	text17
  6038  1CD6                     __ptext17:	
  6039 ;; *************** function _SwPointSelect *****************
  6040 ;; Defined at:
  6041 ;;		line 25 in file "../src/Switch_B1.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;  sw              1    wreg     unsigned char 
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;  sw              1    1[BANK0 ] unsigned char 
  6046 ;; Return value:  Size  Location     Type
  6047 ;;		None               void
  6048 ;; Registers used:
  6049 ;;		wreg
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;Total ram usage:        2 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:    5
  6062 ;; This function calls:
  6063 ;;		Nothing
  6064 ;; This function is called by:
  6065 ;;		_setSw_Main
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           
  6070                           ;psect for function _SwPointSelect
  6071  1CD6                     _SwPointSelect:	
  6072                           
  6073                           ;incstack = 0
  6074                           ; Regs used in _SwPointSelect: [wreg]
  6075                           ;SwPointSelect@sw stored from wreg
  6076  1CD6  0020               	movlb	0	; select bank0
  6077  1CD7  00A1               	movwf	SwPointSelect@sw
  6078                           
  6079                           ;Switch_B1.c: 28: if (sw == 1) {
  6080  1CD8  0821               	movf	SwPointSelect@sw,w
  6081  1CD9  3A01               	xorlw	1
  6082  1CDA  1D03               	skipz
  6083  1CDB  2CE1               	goto	l9559
  6084                           
  6085                           ;Switch_B1.c: 29: Sw = &Sw1;
  6086  1CDC  3054               	movlw	_Sw1& (0+255)
  6087  1CDD  00A0               	movwf	??_SwPointSelect
  6088  1CDE  0820               	movf	??_SwPointSelect,w
  6089  1CDF  00F9               	movwf	_Sw
  6090                           
  6091                           ;Switch_B1.c: 30: }
  6092  1CE0  0008               	return
  6093  1CE1                     l9559:	
  6094                           
  6095                           ;Switch_B1.c: 33: else if (sw == 2) {
  6096  1CE1  0821               	movf	SwPointSelect@sw,w
  6097  1CE2  3A02               	xorlw	2
  6098  1CE3  1D03               	skipz
  6099  1CE4  0008               	return
  6100                           
  6101                           ;Switch_B1.c: 34: Sw = &Sw2;
  6102  1CE5  30DC               	movlw	_Sw2& (0+255)
  6103  1CE6  00A0               	movwf	??_SwPointSelect
  6104  1CE7  0820               	movf	??_SwPointSelect,w
  6105  1CE8  00F9               	movwf	_Sw
  6106  1CE9  0008               	return
  6107  1CEA                     __end_of_SwPointSelect:	
  6108                           
  6109                           	psect	text18
  6110  1584                     __ptext18:	
  6111 ;; *************** function _setMain_Exception *****************
  6112 ;; Defined at:
  6113 ;;		line 276 in file "../src/Main_B1.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;  command         1    wreg     unsigned char 
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;  command         1    4[BANK1 ] unsigned char 
  6118 ;;  status          1    3[BANK1 ] unsigned char 
  6119 ;;  buz             1    0[BANK1 ] unsigned char 
  6120 ;; Return value:  Size  Location     Type
  6121 ;;		None               void
  6122 ;; Registers used:
  6123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 0/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;Total ram usage:        6 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; Hardware stack levels required when called:   11
  6136 ;; This function calls:
  6137 ;;		_getMain_LightsStatus
  6138 ;;		_setBuz
  6139 ;;		_setDimmerLights_ErrorClose
  6140 ;;		_setLED
  6141 ;; This function is called by:
  6142 ;;		_Switch_Main
  6143 ;; This function uses a non-reentrant model
  6144 ;;
  6145                           
  6146                           
  6147                           ;psect for function _setMain_Exception
  6148  1584                     _setMain_Exception:	
  6149                           
  6150                           ;incstack = 0
  6151                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6152                           ;setMain_Exception@command stored from wreg
  6153  1584  0021               	movlb	1	; select bank1
  6154  1585  00EE               	movwf	setMain_Exception@command^(0+128)
  6155                           
  6156                           ;Main_B1.c: 277: char status = 0, buz = 0;
  6157  1586  01ED               	clrf	setMain_Exception@status^(0+128)
  6158  1587  01EA               	clrf	setMain_Exception@buz^(0+128)
  6159                           
  6160                           ;Main_B1.c: 292: status = command == 3 ? 1 : 255;
  6161  1588  086E               	movf	setMain_Exception@command^(0+128),w
  6162  1589  3A03               	xorlw	3
  6163  158A  1903               	skipnz
  6164  158B  2D8E               	goto	l9831
  6165  158C  30FF               	movlw	255
  6166  158D  2D8F               	goto	L4
  6167  158E                     l9831:	
  6168  158E  3001               	movlw	1
  6169  158F                     L4:	
  6170  158F  00EB               	movwf	_setMain_Exception$3908^(0+128)
  6171  1590  3000               	movlw	0
  6172  1591  00EC               	movwf	(_setMain_Exception$3908^(0+128)+1)
  6173  1592  086B               	movf	_setMain_Exception$3908^(0+128),w
  6174  1593  0020               	movlb	0	; select bank0
  6175  1594  00EB               	movwf	??_setMain_Exception
  6176  1595  086B               	movf	??_setMain_Exception,w
  6177  1596  0021               	movlb	1	; select bank1
  6178  1597  00ED               	movwf	setMain_Exception@status^(0+128)
  6179                           
  6180                           ;Main_B1.c: 294: if (command == 0) {
  6181  1598  08EE               	movf	setMain_Exception@command^(0+128),f
  6182  1599  1D03               	skipz
  6183  159A  2D9D               	goto	l9837
  6184                           
  6185                           ;Main_B1.c: 295: setLED(99, 10);
  6186  159B  300A               	movlw	10
  6187  159C  2D9E               	goto	L5
  6188  159D                     l9837:	
  6189                           ;Main_B1.c: 296: } else {
  6190                           
  6191                           
  6192                           ;Main_B1.c: 297: setLED(99, 11);
  6193  159D  300B               	movlw	11
  6194  159E                     L5:	
  6195  159E  0020               	movlb	0	; select bank0
  6196  159F  00EB               	movwf	??_setMain_Exception
  6197  15A0  086B               	movf	??_setMain_Exception,w
  6198  15A1  00A2               	movwf	setLED@command
  6199  15A2  3063               	movlw	99
  6200  15A3  3188  20D1  3195   	fcall	_setLED
  6201                           
  6202                           ;Main_B1.c: 298: }
  6203                           ;Main_B1.c: 299: if (command != 0) {
  6204  15A6  0021               	movlb	1	; select bank1
  6205  15A7  086E               	movf	setMain_Exception@command^(0+128),w
  6206  15A8  1903               	btfsc	3,2
  6207  15A9  0008               	return
  6208                           
  6209                           ;Main_B1.c: 300: switch (command) {
  6210  15AA  2DCB               	goto	l9853
  6211  15AB                     l9843:	
  6212                           ;Main_B1.c: 301: case 2:
  6213                           
  6214                           
  6215                           ;Main_B1.c: 302: if (getMain_LightsStatus() == 1) {
  6216  15AB  3190  20D9  3195   	fcall	_getMain_LightsStatus
  6217  15AE  3A01               	xorlw	1
  6218  15AF  1D03               	skipz
  6219  15B0  2DD4               	goto	l9855
  6220                           
  6221                           ;Main_B1.c: 303: setBuz(10, 300);
  6222  15B1  302C               	movlw	44
  6223  15B2  0020               	movlb	0	; select bank0
  6224  15B3  00A9               	movwf	setBuz@time
  6225  15B4  3001               	movlw	1
  6226  15B5  00AA               	movwf	setBuz@time+1
  6227  15B6  300A               	movlw	10
  6228  15B7  3196  2632  3195   	fcall	_setBuz
  6229                           
  6230                           ;Main_B1.c: 304: }
  6231                           ;Main_B1.c: 305: break;
  6232  15BA  2DD4               	goto	l9855
  6233  15BB                     l9847:	
  6234                           ;Main_B1.c: 306: case 3:
  6235                           
  6236                           
  6237                           ;Main_B1.c: 307: if (getMain_LightsStatus() == 1) {
  6238  15BB  3190  20D9  3195   	fcall	_getMain_LightsStatus
  6239  15BE  3A01               	xorlw	1
  6240  15BF  1D03               	skipz
  6241  15C0  2DD4               	goto	l9855
  6242                           
  6243                           ;Main_B1.c: 308: setBuz(5, 300);
  6244  15C1  302C               	movlw	44
  6245  15C2  0020               	movlb	0	; select bank0
  6246  15C3  00A9               	movwf	setBuz@time
  6247  15C4  3001               	movlw	1
  6248  15C5  00AA               	movwf	setBuz@time+1
  6249  15C6  3005               	movlw	5
  6250  15C7  3196  2632  3195   	fcall	_setBuz
  6251                           
  6252                           ;Main_B1.c: 311: }
  6253                           
  6254                           ;Main_B1.c: 309: }
  6255                           ;Main_B1.c: 310: break;
  6256  15CA  2DD4               	goto	l9855
  6257  15CB                     l9853:	
  6258  15CB  0021               	movlb	1	; select bank1
  6259  15CC  086E               	movf	setMain_Exception@command^(0+128),w
  6260                           
  6261                           ; Switch size 1, requested type "space"
  6262                           ; Number of cases is 2, Range of values is 2 to 3
  6263                           ; switch strategies available:
  6264                           ; Name         Instructions Cycles
  6265                           ; simple_byte            7     4 (average)
  6266                           ; direct_byte           13     9 (fixed)
  6267                           ; jumptable            263     9 (fixed)
  6268                           ;	Chosen strategy is simple_byte
  6269  15CD  3A02               	xorlw	2	; case 2
  6270  15CE  1903               	skipnz
  6271  15CF  2DAB               	goto	l9843
  6272  15D0  3A01               	xorlw	1	; case 3
  6273  15D1  1903               	skipnz
  6274  15D2  2DBB               	goto	l9847
  6275  15D3  2DD4               	goto	l9855
  6276  15D4                     l9855:	
  6277                           
  6278                           ;Main_B1.c: 312: setDimmerLights_ErrorClose(status);
  6279  15D4  0021               	movlb	1	; select bank1
  6280  15D5  086D               	movf	setMain_Exception@status^(0+128),w
  6281  15D6  3196  268B         	fcall	_setDimmerLights_ErrorClose
  6282  15D8  0021               	movlb	1	; select bank1
  6283  15D9  0008               	return
  6284  15DA                     __end_of_setMain_Exception:	
  6285                           
  6286                           	psect	text19
  6287  168B                     __ptext19:	
  6288 ;; *************** function _setDimmerLights_ErrorClose *****************
  6289 ;; Defined at:
  6290 ;;		line 616 in file "../src/Dimmer_B1.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;  lights          1    wreg     unsigned char 
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;  lights          1   72[BANK0 ] unsigned char 
  6295 ;;  i               2   73[BANK0 ] int 
  6296 ;;  count           1   71[BANK0 ] unsigned char 
  6297 ;; Return value:  Size  Location     Type
  6298 ;;		None               void
  6299 ;; Registers used:
  6300 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;Total ram usage:        5 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:   10
  6313 ;; This function calls:
  6314 ;;		_DimmerLightsPointSelect
  6315 ;;		_getDimmerLights_Status
  6316 ;;		_setDimmerLights_SwOff
  6317 ;; This function is called by:
  6318 ;;		_setMain_Exception
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           
  6323                           ;psect for function _setDimmerLights_ErrorClose
  6324  168B                     _setDimmerLights_ErrorClose:	
  6325                           
  6326                           ;incstack = 0
  6327                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6328                           ;setDimmerLights_ErrorClose@lights stored from wreg
  6329  168B  0020               	movlb	0	; select bank0
  6330  168C  00E8               	movwf	setDimmerLights_ErrorClose@lights
  6331                           
  6332                           ;Dimmer_B1.c: 617: if (lights == 255) {
  6333  168D  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6334  168E  3AFF               	xorlw	255
  6335  168F  1D03               	skipz
  6336  1690  2EC8               	goto	l9387
  6337                           
  6338                           ;Dimmer_B1.c: 622: char count = 2;
  6339  1691  3002               	movlw	2
  6340  1692  00E6               	movwf	??_setDimmerLights_ErrorClose
  6341  1693  0866               	movf	??_setDimmerLights_ErrorClose,w
  6342  1694  00E7               	movwf	setDimmerLights_ErrorClose@count
  6343                           
  6344                           ;Dimmer_B1.c: 627: for (int i = 0; i < count; i++) {
  6345  1695  01E9               	clrf	setDimmerLights_ErrorClose@i
  6346  1696  01EA               	clrf	setDimmerLights_ErrorClose@i+1
  6347  1697                     l9385:	
  6348  1697  086A               	movf	setDimmerLights_ErrorClose@i+1,w
  6349  1698  3A80               	xorlw	128
  6350  1699  00E6               	movwf	??_setDimmerLights_ErrorClose
  6351  169A  3080               	movlw	128
  6352  169B  0266               	subwf	??_setDimmerLights_ErrorClose,w
  6353  169C  1D03               	skipz
  6354  169D  2EA0               	goto	u10115
  6355  169E  0867               	movf	setDimmerLights_ErrorClose@count,w
  6356  169F  0269               	subwf	setDimmerLights_ErrorClose@i,w
  6357  16A0                     u10115:	
  6358  16A0  1803               	btfsc	3,0
  6359  16A1  0008               	return
  6360                           
  6361                           ;Dimmer_B1.c: 628: DimmerLightsPointSelect(i + 1);
  6362  16A2  0020               	movlb	0	; select bank0
  6363  16A3  0869               	movf	setDimmerLights_ErrorClose@i,w
  6364  16A4  3E01               	addlw	1
  6365  16A5  319C  2475  3196   	fcall	_DimmerLightsPointSelect
  6366                           
  6367                           ;Dimmer_B1.c: 629: if (getDimmerLights_Status(i + 1) == 1) {
  6368  16A8  0020               	movlb	0	; select bank0
  6369  16A9  0869               	movf	setDimmerLights_ErrorClose@i,w
  6370  16AA  3E01               	addlw	1
  6371  16AB  319B  23D8  3196   	fcall	_getDimmerLights_Status
  6372  16AE  3A01               	xorlw	1
  6373  16AF  1D03               	skipz
  6374  16B0  2EC2               	goto	l9383
  6375                           
  6376                           ;Dimmer_B1.c: 630: DimmerLights->SwFlag = 1;
  6377  16B1  0877               	movf	_DimmerLights,w
  6378  16B2  3E09               	addlw	9
  6379  16B3  0086               	movwf	6
  6380  16B4  3001               	movlw	1	; select bank2/3
  6381  16B5  0087               	movwf	7
  6382  16B6  1701               	bsf	1,6
  6383                           
  6384                           ;Dimmer_B1.c: 631: DimmerLights->Status = 0;
  6385  16B7  0877               	movf	_DimmerLights,w
  6386  16B8  0086               	movwf	6
  6387  16B9  3001               	movlw	1	; select bank2/3
  6388  16BA  0087               	movwf	7
  6389  16BB  1281               	bcf	1,5
  6390                           
  6391                           ;Dimmer_B1.c: 632: setDimmerLights_SwOff(i + 1);
  6392  16BC  0020               	movlb	0	; select bank0
  6393  16BD  0869               	movf	setDimmerLights_ErrorClose@i,w
  6394  16BE  3E01               	addlw	1
  6395  16BF  3197  2740  3196   	fcall	_setDimmerLights_SwOff
  6396  16C2                     l9383:	
  6397  16C2  3001               	movlw	1
  6398  16C3  0020               	movlb	0	; select bank0
  6399  16C4  07E9               	addwf	setDimmerLights_ErrorClose@i,f
  6400  16C5  3000               	movlw	0
  6401  16C6  3DEA               	addwfc	setDimmerLights_ErrorClose@i+1,f
  6402  16C7  2E97               	goto	l9385
  6403  16C8                     l9387:	
  6404                           ;Dimmer_B1.c: 633: }
  6405                           ;Dimmer_B1.c: 634: }
  6406                           ;Dimmer_B1.c: 635: } else {
  6407                           
  6408                           
  6409                           ;Dimmer_B1.c: 636: DimmerLightsPointSelect(lights);
  6410  16C8  0020               	movlb	0	; select bank0
  6411  16C9  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6412  16CA  319C  2475  3196   	fcall	_DimmerLightsPointSelect
  6413                           
  6414                           ;Dimmer_B1.c: 637: if (getDimmerLights_Status(lights) == 1) {
  6415  16CD  0020               	movlb	0	; select bank0
  6416  16CE  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6417  16CF  319B  23D8  3196   	fcall	_getDimmerLights_Status
  6418  16D2  3A01               	xorlw	1
  6419  16D3  1D03               	skipz
  6420  16D4  0008               	return
  6421                           
  6422                           ;Dimmer_B1.c: 638: DimmerLights->SwFlag = 1;
  6423  16D5  0877               	movf	_DimmerLights,w
  6424  16D6  3E09               	addlw	9
  6425  16D7  0086               	movwf	6
  6426  16D8  3001               	movlw	1	; select bank2/3
  6427  16D9  0087               	movwf	7
  6428  16DA  1701               	bsf	1,6
  6429                           
  6430                           ;Dimmer_B1.c: 639: DimmerLights->Status = 0;
  6431  16DB  0877               	movf	_DimmerLights,w
  6432  16DC  0086               	movwf	6
  6433  16DD  3001               	movlw	1	; select bank2/3
  6434  16DE  0087               	movwf	7
  6435  16DF  1281               	bcf	1,5
  6436                           
  6437                           ;Dimmer_B1.c: 640: setDimmerLights_SwOff(lights);
  6438  16E0  0020               	movlb	0	; select bank0
  6439  16E1  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6440  16E2  3197  2740         	fcall	_setDimmerLights_SwOff
  6441  16E4  0008               	return
  6442  16E5                     __end_of_setDimmerLights_ErrorClose:	
  6443                           
  6444                           	psect	text20
  6445  1BAE                     __ptext20:	
  6446 ;; *************** function _Switch_Initialization *****************
  6447 ;; Defined at:
  6448 ;;		line 46 in file "../src/Switch_B1.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;		None
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;		None
  6453 ;; Return value:  Size  Location     Type
  6454 ;;		None               void
  6455 ;; Registers used:
  6456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6457 ;; Tracked objects:
  6458 ;;		On entry : 0/0
  6459 ;;		On exit  : 0/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6466 ;;Total ram usage:        0 bytes
  6467 ;; Hardware stack levels used:    1
  6468 ;; Hardware stack levels required when called:    8
  6469 ;; This function calls:
  6470 ;;		_TouchPower
  6471 ;;		_setSw_Initialization
  6472 ;; This function is called by:
  6473 ;;		_main
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           
  6478                           ;psect for function _Switch_Initialization
  6479  1BAE                     _Switch_Initialization:	
  6480                           
  6481                           ;Switch_B1.c: 47: TouchPower();
  6482                           
  6483                           ;incstack = 0
  6484                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6485  1BAE  319D  2528  319B   	fcall	_TouchPower
  6486                           
  6487                           ;Switch_B1.c: 49: WPUB1 = 0;
  6488  1BB1  0024               	movlb	4	; select bank4
  6489  1BB2  108D               	bcf	13,1	;volatile
  6490                           
  6491                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6492  1BB3  3001               	movlw	1
  6493  1BB4  319B  231B  319B   	fcall	_setSw_Initialization
  6494                           
  6495                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6496  1BB7  3002               	movlw	2
  6497  1BB8  319B  231B         	fcall	_setSw_Initialization
  6498  1BBA  0008               	return
  6499  1BBB                     __end_of_Switch_Initialization:	
  6500                           
  6501                           	psect	text21
  6502  1B1B                     __ptext21:	
  6503 ;; *************** function _setSw_Initialization *****************
  6504 ;; Defined at:
  6505 ;;		line 109 in file "../src/Switch_B1.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;  sw              1    wreg     unsigned char 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  sw              1    4[BANK0 ] unsigned char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;		None               void
  6512 ;; Registers used:
  6513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;Total ram usage:        1 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    7
  6526 ;; This function calls:
  6527 ;;		_setLED
  6528 ;; This function is called by:
  6529 ;;		_Switch_Initialization
  6530 ;; This function uses a non-reentrant model
  6531 ;;
  6532                           
  6533                           
  6534                           ;psect for function _setSw_Initialization
  6535  1B1B                     _setSw_Initialization:	
  6536                           
  6537                           ;incstack = 0
  6538                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6539                           ;setSw_Initialization@sw stored from wreg
  6540  1B1B  0020               	movlb	0	; select bank0
  6541  1B1C  00A4               	movwf	setSw_Initialization@sw
  6542                           
  6543                           ;Switch_B1.c: 110: setLED(sw, 1);
  6544  1B1D  01A2               	clrf	setLED@command
  6545  1B1E  0AA2               	incf	setLED@command,f
  6546  1B1F  0824               	movf	setSw_Initialization@sw,w
  6547  1B20  3188  20D1         	fcall	_setLED
  6548  1B22  0008               	return
  6549  1B23                     __end_of_setSw_Initialization:	
  6550                           
  6551                           	psect	text22
  6552  1D28                     __ptext22:	
  6553 ;; *************** function _TouchPower *****************
  6554 ;; Defined at:
  6555 ;;		line 10 in file "../src/Switch_B1.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;		None
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;		None
  6560 ;; Return value:  Size  Location     Type
  6561 ;;		None               void
  6562 ;; Registers used:
  6563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;Total ram usage:        0 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; Hardware stack levels required when called:    6
  6576 ;; This function calls:
  6577 ;;		_Timeout_Counter
  6578 ;;		_set_TimeoutCleared
  6579 ;; This function is called by:
  6580 ;;		_Switch_Initialization
  6581 ;;		_Switch_Main
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           
  6586                           ;psect for function _TouchPower
  6587  1D28                     _TouchPower:	
  6588                           
  6589                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6590                           
  6591                           ;incstack = 0
  6592                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6593  1D28  0020               	movlb	0	; select bank0
  6594  1D29  1A8E               	btfsc	14,5	;volatile
  6595  1D2A  0008               	return
  6596                           
  6597                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6598  1D2B  0021               	movlb	1	; select bank1
  6599  1D2C  1C20               	btfss	_myMain^(0+128),0
  6600  1D2D  0008               	return
  6601  1D2E  2D34               	goto	l10061
  6602  1D2F                     l2611:	
  6603                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6604                           
  6605                           
  6606                           ;Switch_B1.c: 14: RC5 = 1;
  6607  1D2F  0020               	movlb	0	; select bank0
  6608  1D30  168E               	bsf	14,5	;volatile
  6609                           
  6610                           ;Switch_B1.c: 15: Timeout_Counter();
  6611  1D31  319C  24FE  319D   	fcall	_Timeout_Counter
  6612  1D34                     l10061:	
  6613  1D34  0020               	movlb	0	; select bank0
  6614  1D35  1A8E               	btfsc	14,5	;volatile
  6615  1D36  2D3A               	goto	l10065
  6616  1D37  0021               	movlb	1	; select bank1
  6617  1D38  1D2D               	btfss	(_myMain^(0+128)+13),2
  6618  1D39  2D2F               	goto	l2611
  6619  1D3A                     l10065:	
  6620                           
  6621                           ;Switch_B1.c: 16: }
  6622                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6623  1D3A  319A  22D6         	fcall	_set_TimeoutCleared
  6624  1D3C  0008               	return
  6625  1D3D                     __end_of_TouchPower:	
  6626                           
  6627                           	psect	text23
  6628  1ABD                     __ptext23:	
  6629 ;; *************** function _RF_Main *****************
  6630 ;; Defined at:
  6631 ;;		line 16 in file "../src/RF_Control_B1.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;		None
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;		None
  6636 ;; Return value:  Size  Location     Type
  6637 ;;		None               void
  6638 ;; Registers used:
  6639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;Total ram usage:        0 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:   14
  6652 ;; This function calls:
  6653 ;;		_setRF_Main
  6654 ;; This function is called by:
  6655 ;;		_main
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           
  6660                           ;psect for function _RF_Main
  6661  1ABD                     _RF_Main:	
  6662                           
  6663                           ;RF_Control_B1.c: 18: setRF_Main();
  6664                           
  6665                           ;incstack = 0
  6666                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6667  1ABD  3186  261D         	fcall	_setRF_Main
  6668  1ABF  0008               	return
  6669  1AC0                     __end_of_RF_Main:	
  6670                           
  6671                           	psect	text24
  6672  061D                     __ptext24:	
  6673 ;; *************** function _setRF_Main *****************
  6674 ;; Defined at:
  6675 ;;		line 52 in file "../src/RF_Control_B1.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;		None
  6678 ;; Auto vars:     Size  Location     Type
  6679 ;;  error           1   77[BANK0 ] unsigned char 
  6680 ;;  Receive_OK      1   76[BANK0 ] unsigned char 
  6681 ;;  loop_f          1   75[BANK0 ] unsigned char 
  6682 ;; Return value:  Size  Location     Type
  6683 ;;		None               void
  6684 ;; Registers used:
  6685 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6695 ;;Total ram usage:        4 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:   13
  6698 ;; This function calls:
  6699 ;;		_CC2500_ReadStatus
  6700 ;;		_CC2500_RxData
  6701 ;;		_CC2500_TxData
  6702 ;;		_CC2500_WriteCommand
  6703 ;;		_getBuz_GO
  6704 ;;		_getMain_All_Error_Status
  6705 ;;		_getRF_KeyStatus
  6706 ;;		_getRxData
  6707 ;; This function is called by:
  6708 ;;		_RF_Main
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           
  6713                           ;psect for function _setRF_Main
  6714  061D                     _setRF_Main:	
  6715                           
  6716                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6717                           
  6718                           ;incstack = 0
  6719                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6720  061D  0020               	movlb	0	; select bank0
  6721  061E  01EB               	clrf	setRF_Main@loop_f
  6722  061F  01EC               	clrf	setRF_Main@Receive_OK
  6723  0620  01ED               	clrf	setRF_Main@error
  6724                           
  6725                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6726  0621  0021               	movlb	1	; select bank1
  6727  0622  1C3C               	btfss	_RF1^(0+128),0
  6728  0623  2F0A               	goto	l2220
  6729                           
  6730                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6731  0624  319B  23F9  3186   	fcall	_getBuz_GO
  6732  0627  0020               	movlb	0	; select bank0
  6733  0628  0821               	movf	?_getBuz_GO+1,w
  6734  0629  0420               	iorwf	?_getBuz_GO,w
  6735  062A  1D03               	skipz
  6736  062B  0008               	return
  6737                           
  6738                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6739  062C  3000               	movlw	0
  6740  062D  3191  2162  3186   	fcall	_getMain_All_Error_Status
  6741  0630  3800               	iorlw	0
  6742  0631  1D03               	skipz
  6743  0632  2E47               	goto	l2222
  6744                           
  6745                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6746  0633  319C  240A  3186   	fcall	_getRF_KeyStatus
  6747  0636  3A01               	xorlw	1
  6748  0637  3000               	movlw	0
  6749  0638  1903               	skipnz
  6750  0639  3001               	movlw	1
  6751  063A  0020               	movlb	0	; select bank0
  6752  063B  00EA               	movwf	??_setRF_Main
  6753  063C  0CEA               	rrf	??_setRF_Main,f
  6754  063D  0CEA               	rrf	??_setRF_Main,f
  6755  063E  0021               	movlb	1	; select bank1
  6756  063F  083C               	movf	_RF1^(0+128),w
  6757  0640  0020               	movlb	0	; select bank0
  6758  0641  066A               	xorwf	??_setRF_Main,w
  6759  0642  397F               	andlw	-129
  6760  0643  066A               	xorwf	??_setRF_Main,w
  6761  0644  0021               	movlb	1	; select bank1
  6762  0645  00BC               	movwf	_RF1^(0+128)
  6763                           
  6764                           ;RF_Control_B1.c: 65: } else {
  6765  0646  2E49               	goto	l2223
  6766  0647                     l2222:	
  6767                           
  6768                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6769  0647  0021               	movlb	1	; select bank1
  6770  0648  13BC               	bcf	_RF1^(0+128),7
  6771  0649                     l2223:	
  6772                           
  6773                           ;RF_Control_B1.c: 70: }
  6774                           ;RF_Control_B1.c: 73: if (RF1.Key == 1 && RF1.Learn == 0) {
  6775  0649  1BBC               	btfsc	_RF1^(0+128),7
  6776  064A  1B3C               	btfsc	_RF1^(0+128),6
  6777  064B  2E51               	goto	l2224
  6778                           
  6779                           ;RF_Control_B1.c: 74: RF1.Count = 0;
  6780  064C  01BE               	clrf	(_RF1^(0+128)+2)
  6781  064D  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6782                           
  6783                           ;RF_Control_B1.c: 75: RF1.Run = 1;
  6784  064E  14BD               	bsf	(_RF1^(0+128)+1),1
  6785                           
  6786                           ;RF_Control_B1.c: 76: RF1.RxStatus = 0;
  6787  064F  11BC               	bcf	_RF1^(0+128),3
  6788                           
  6789                           ;RF_Control_B1.c: 78: } else {
  6790  0650  0008               	return
  6791  0651                     l2224:	
  6792                           
  6793                           ;RF_Control_B1.c: 79: if (RF1.Run == 1 && RF1.Learn == 0) {
  6794  0651  18BD               	btfsc	(_RF1^(0+128)+1),1
  6795  0652  1B3C               	btfsc	_RF1^(0+128),6
  6796  0653  2E68               	goto	l9977
  6797                           
  6798                           ;RF_Control_B1.c: 80: RF1.Count++;
  6799  0654  3001               	movlw	1
  6800  0655  07BE               	addwf	(_RF1^(0+128)+2),f
  6801  0656  3000               	movlw	0
  6802  0657  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  6803                           
  6804                           ;RF_Control_B1.c: 81: if (RF1.Count == RF1.RunTime) {
  6805  0658  3002               	movlw	2
  6806  0659  3EBC               	addlw	_RF1& (0+255)
  6807  065A  0086               	movwf	6
  6808  065B  0187               	clrf	7
  6809  065C  3F40               	moviw [0]fsr1
  6810  065D  0643               	xorwf	(_RF1^(0+128)+7),w
  6811  065E  1D03               	skipz
  6812  065F  2E62               	goto	u10965
  6813  0660  3F41               	moviw [1]fsr1
  6814  0661  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  6815  0662                     u10965:	
  6816  0662  1D03               	skipz
  6817  0663  2ED7               	goto	l10029
  6818                           
  6819                           ;RF_Control_B1.c: 82: RF1.Count = 0;
  6820  0664  01BE               	clrf	(_RF1^(0+128)+2)
  6821  0665  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6822                           
  6823                           ;RF_Control_B1.c: 83: RF1.Run = 0;
  6824  0666  10BD               	bcf	(_RF1^(0+128)+1),1
  6825                           
  6826                           ;RF_Control_B1.c: 84: }
  6827                           ;RF_Control_B1.c: 85: } else {
  6828  0667  2ED7               	goto	l10029
  6829  0668                     l9977:	
  6830                           
  6831                           ;RF_Control_B1.c: 86: RF1.Count = 0;
  6832  0668  01BE               	clrf	(_RF1^(0+128)+2)
  6833  0669  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6834                           
  6835                           ;RF_Control_B1.c: 87: RF1.Run = 0;
  6836  066A  10BD               	bcf	(_RF1^(0+128)+1),1
  6837                           
  6838                           ;RF_Control_B1.c: 89: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6839  066B  193C               	btfsc	_RF1^(0+128),2
  6840  066C  1B3C               	btfsc	_RF1^(0+128),6
  6841  066D  2E89               	goto	l2229
  6842                           
  6843                           ;RF_Control_B1.c: 90: RF1.TransceiveGO = 0;
  6844  066E  113C               	bcf	_RF1^(0+128),2
  6845                           
  6846                           ;RF_Control_B1.c: 91: RF1.RxStatus = 0;
  6847  066F  11BC               	bcf	_RF1^(0+128),3
  6848                           
  6849                           ;RF_Control_B1.c: 92: RF1.ReceiveGO = 0;
  6850  0670  10BC               	bcf	_RF1^(0+128),1
  6851                           
  6852                           ;RF_Control_B1.c: 94: CC2500_ReadStatus(0x3B);
  6853  0671  303B               	movlw	59
  6854  0672  319F  273D  3186   	fcall	_CC2500_ReadStatus
  6855                           
  6856                           ;RF_Control_B1.c: 95: if (s_data != 0) {
  6857  0675  0021               	movlb	1	; select bank1
  6858  0676  0857               	movf	_s_data^(0+128),w
  6859  0677  1903               	btfsc	3,2
  6860  0678  2E85               	goto	l2230
  6861                           
  6862                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x36);
  6863  0679  3036               	movlw	54
  6864  067A  319D  2586  3186   	fcall	_CC2500_WriteCommand
  6865                           
  6866                           ;RF_Control_B1.c: 97: CC2500_WriteCommand(0x3B);
  6867  067D  303B               	movlw	59
  6868  067E  319D  2586  3186   	fcall	_CC2500_WriteCommand
  6869                           
  6870                           ;RF_Control_B1.c: 98: CC2500_WriteCommand(0x3A);
  6871  0681  303A               	movlw	58
  6872  0682  319D  2586  3186   	fcall	_CC2500_WriteCommand
  6873  0685                     l2230:	
  6874                           
  6875                           ;RF_Control_B1.c: 99: }
  6876                           ;RF_Control_B1.c: 100: CC2500_TxData();
  6877  0685  3189  2132  3186   	fcall	_CC2500_TxData
  6878                           
  6879                           ;RF_Control_B1.c: 102: } else {
  6880  0688  2ED7               	goto	l10029
  6881  0689                     l2229:	
  6882                           
  6883                           ;RF_Control_B1.c: 104: if (RF1.RxStatus == 1) {
  6884  0689  1DBC               	btfss	_RF1^(0+128),3
  6885  068A  2EC2               	goto	l2232
  6886                           
  6887                           ;RF_Control_B1.c: 105: CC2500_RxData();
  6888  068B  318A  22E3  3186   	fcall	_CC2500_RxData
  6889                           
  6890                           ;RF_Control_B1.c: 106: if (RF1.ReceiveGO == 1) {
  6891  068E  0021               	movlb	1	; select bank1
  6892  068F  1CBC               	btfss	_RF1^(0+128),1
  6893  0690  2ED7               	goto	l10029
  6894                           
  6895                           ;RF_Control_B1.c: 107: RF1.ReceiveGO = 0;
  6896  0691  10BC               	bcf	_RF1^(0+128),1
  6897                           
  6898                           ;RF_Control_B1.c: 108: RF1.Correction = 0;
  6899  0692  12BD               	bcf	(_RF1^(0+128)+1),5
  6900                           
  6901                           ;RF_Control_B1.c: 109: RF1.CorrectionCounter = 0;
  6902  0693  01C6               	clrf	(_RF1^(0+128)+10)
  6903  0694  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6904                           
  6905                           ;RF_Control_B1.c: 118: getRxData();
  6906  0695  318A  2274  3186   	fcall	_getRxData
  6907                           
  6908                           ;RF_Control_B1.c: 122: RF1.Run = 1;
  6909  0698  0021               	movlb	1	; select bank1
  6910  0699  14BD               	bsf	(_RF1^(0+128)+1),1
  6911                           
  6912                           ;RF_Control_B1.c: 124: if (RF1.Checked == 1) {
  6913  069A  1DBD               	btfss	(_RF1^(0+128)+1),3
  6914  069B  2EA9               	goto	l10013
  6915                           
  6916                           ;RF_Control_B1.c: 125: if (RF1.RunTime > 10) {
  6917  069C  3000               	movlw	0
  6918  069D  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6919  069E  300B               	movlw	11
  6920  069F  1903               	skipnz
  6921  06A0  0243               	subwf	(_RF1^(0+128)+7),w
  6922  06A1  1C03               	skipc
  6923  06A2  2EA7               	goto	l10011
  6924                           
  6925                           ;RF_Control_B1.c: 126: RF1.RunTime = 10;
  6926  06A3  300A               	movlw	10
  6927  06A4  00C3               	movwf	(_RF1^(0+128)+7)
  6928  06A5  3000               	movlw	0
  6929  06A6  00C4               	movwf	(_RF1^(0+128)+8)
  6930  06A7                     l10011:	
  6931                           
  6932                           ;RF_Control_B1.c: 127: }
  6933                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  6934  06A7  01C0               	clrf	(_RF1^(0+128)+4)
  6935                           
  6936                           ;RF_Control_B1.c: 129: } else {
  6937  06A8  2ED7               	goto	l10029
  6938  06A9                     l10013:	
  6939                           
  6940                           ;RF_Control_B1.c: 130: RF1.CheckCount++;
  6941  06A9  3001               	movlw	1
  6942  06AA  0020               	movlb	0	; select bank0
  6943  06AB  00EA               	movwf	??_setRF_Main
  6944  06AC  086A               	movf	??_setRF_Main,w
  6945  06AD  0021               	movlb	1	; select bank1
  6946  06AE  07C0               	addwf	(_RF1^(0+128)+4),f
  6947                           
  6948                           ;RF_Control_B1.c: 131: if (RF1.CheckCount == 2) {
  6949  06AF  0840               	movf	(_RF1^(0+128)+4),w
  6950  06B0  3A02               	xorlw	2
  6951  06B1  1D03               	skipz
  6952  06B2  2ED7               	goto	l10029
  6953                           
  6954                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  6955  06B3  01C0               	clrf	(_RF1^(0+128)+4)
  6956                           
  6957                           ;RF_Control_B1.c: 133: RF1.CheckedCounter = 0;
  6958  06B4  01C1               	clrf	(_RF1^(0+128)+5)
  6959  06B5  01C2               	clrf	((_RF1+1)^(0+128)+5)
  6960                           
  6961                           ;RF_Control_B1.c: 134: if (RF1.RunTime < 200) {
  6962  06B6  3000               	movlw	0
  6963  06B7  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6964  06B8  30C8               	movlw	200
  6965  06B9  1903               	skipnz
  6966  06BA  0243               	subwf	(_RF1^(0+128)+7),w
  6967  06BB  1803               	skipnc
  6968  06BC  2ED7               	goto	l10029
  6969                           
  6970                           ;RF_Control_B1.c: 135: RF1.RunTime += 10;
  6971  06BD  300A               	movlw	10
  6972  06BE  07C3               	addwf	(_RF1^(0+128)+7),f
  6973  06BF  3000               	movlw	0
  6974  06C0  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  6975                           
  6976                           ;RF_Control_B1.c: 136: }
  6977                           ;RF_Control_B1.c: 137: }
  6978                           ;RF_Control_B1.c: 138: }
  6979                           ;RF_Control_B1.c: 139: }
  6980                           ;RF_Control_B1.c: 140: } else {
  6981  06C1  2ED7               	goto	l10029
  6982  06C2                     l2232:	
  6983                           
  6984                           ;RF_Control_B1.c: 142: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6985  06C2  1DBC               	btfss	_RF1^(0+128),3
  6986  06C3  18BC               	btfsc	_RF1^(0+128),1
  6987  06C4  2ED7               	goto	l10029
  6988                           
  6989                           ;RF_Control_B1.c: 143: RF1.RxStatus = 1;
  6990  06C5  15BC               	bsf	_RF1^(0+128),3
  6991                           
  6992                           ;RF_Control_B1.c: 144: RF1.Correction = 1;
  6993  06C6  16BD               	bsf	(_RF1^(0+128)+1),5
  6994                           
  6995                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x36);
  6996  06C7  3036               	movlw	54
  6997  06C8  319D  2586  3186   	fcall	_CC2500_WriteCommand
  6998                           
  6999                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x3B);
  7000  06CB  303B               	movlw	59
  7001  06CC  319D  2586  3186   	fcall	_CC2500_WriteCommand
  7002                           
  7003                           ;RF_Control_B1.c: 148: CC2500_WriteCommand(0x3A);
  7004  06CF  303A               	movlw	58
  7005  06D0  319D  2586  3186   	fcall	_CC2500_WriteCommand
  7006                           
  7007                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x34);
  7008  06D3  3034               	movlw	52
  7009  06D4  319D  2586  3186   	fcall	_CC2500_WriteCommand
  7010  06D7                     l10029:	
  7011                           
  7012                           ;RF_Control_B1.c: 151: }
  7013                           ;RF_Control_B1.c: 153: }
  7014                           ;RF_Control_B1.c: 154: }
  7015                           ;RF_Control_B1.c: 155: }
  7016                           ;RF_Control_B1.c: 156: if (RF1.RxStatus == 1) {
  7017  06D7  0021               	movlb	1	; select bank1
  7018  06D8  1DBC               	btfss	_RF1^(0+128),3
  7019  06D9  2EF8               	goto	l10041
  7020                           
  7021                           ;RF_Control_B1.c: 157: RF1.CheckedCounter++;
  7022  06DA  3001               	movlw	1
  7023  06DB  07C1               	addwf	(_RF1^(0+128)+5),f
  7024  06DC  3000               	movlw	0
  7025  06DD  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  7026                           
  7027                           ;RF_Control_B1.c: 158: if (RF1.CheckedCounter == 100) {
  7028  06DE  3005               	movlw	5
  7029  06DF  3EBC               	addlw	_RF1& (0+255)
  7030  06E0  0086               	movwf	6
  7031  06E1  0187               	clrf	7
  7032  06E2  3F40               	moviw [0]fsr1
  7033  06E3  3A64               	xorlw	100
  7034  06E4  1D03               	skipz
  7035  06E5  2EE8               	goto	u11095
  7036  06E6  3F41               	moviw [1]fsr1
  7037  06E7  3A00               	xorlw	0
  7038  06E8                     u11095:	
  7039  06E8  1D03               	skipz
  7040  06E9  2EF8               	goto	l10041
  7041                           
  7042                           ;RF_Control_B1.c: 159: RF1.CheckedCounter = 0;
  7043  06EA  01C1               	clrf	(_RF1^(0+128)+5)
  7044  06EB  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7045                           
  7046                           ;RF_Control_B1.c: 160: RF1.CheckCount = 0;
  7047  06EC  01C0               	clrf	(_RF1^(0+128)+4)
  7048                           
  7049                           ;RF_Control_B1.c: 161: if (RF1.RunTime > 10) {
  7050  06ED  3000               	movlw	0
  7051  06EE  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7052  06EF  300B               	movlw	11
  7053  06F0  1903               	skipnz
  7054  06F1  0243               	subwf	(_RF1^(0+128)+7),w
  7055  06F2  1C03               	skipc
  7056  06F3  2EF8               	goto	l10041
  7057                           
  7058                           ;RF_Control_B1.c: 162: RF1.RunTime -= 10;
  7059  06F4  300A               	movlw	10
  7060  06F5  02C3               	subwf	(_RF1^(0+128)+7),f
  7061  06F6  3000               	movlw	0
  7062  06F7  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  7063  06F8                     l10041:	
  7064                           
  7065                           ;RF_Control_B1.c: 163: }
  7066                           ;RF_Control_B1.c: 164: }
  7067                           ;RF_Control_B1.c: 165: }
  7068                           ;RF_Control_B1.c: 166: if (RF1.Correction == 1) {
  7069  06F8  1EBD               	btfss	(_RF1^(0+128)+1),5
  7070  06F9  0008               	return
  7071                           
  7072                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter++;
  7073  06FA  3001               	movlw	1
  7074  06FB  07C6               	addwf	(_RF1^(0+128)+10),f
  7075  06FC  3000               	movlw	0
  7076  06FD  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  7077                           
  7078                           ;RF_Control_B1.c: 168: if (RF1.CorrectionCounter >= 30000) {
  7079  06FE  3075               	movlw	117
  7080  06FF  0247               	subwf	((_RF1+1)^(0+128)+10),w
  7081  0700  3030               	movlw	48
  7082  0701  1903               	skipnz
  7083  0702  0246               	subwf	(_RF1^(0+128)+10),w
  7084  0703  1C03               	skipc
  7085  0704  0008               	return
  7086                           
  7087                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter = 0;
  7088  0705  01C6               	clrf	(_RF1^(0+128)+10)
  7089  0706  01C7               	clrf	((_RF1+1)^(0+128)+10)
  7090                           
  7091                           ;RF_Control_B1.c: 170: RF1.RxStatus = 0;
  7092  0707  11BC               	bcf	_RF1^(0+128),3
  7093                           
  7094                           ;RF_Control_B1.c: 171: RF1.ReceiveGO = 0;
  7095  0708  10BC               	bcf	_RF1^(0+128),1
  7096                           
  7097                           ;RF_Control_B1.c: 172: }
  7098                           ;RF_Control_B1.c: 173: }
  7099                           ;RF_Control_B1.c: 174: }
  7100                           ;RF_Control_B1.c: 175: }
  7101                           ;RF_Control_B1.c: 182: } else {
  7102  0709  0008               	return
  7103  070A                     l2220:	
  7104                           
  7105                           ;RF_Control_B1.c: 183: if (myMain.PowerON == 1) {
  7106  070A  1C20               	btfss	_myMain^(0+128),0
  7107  070B  0008               	return
  7108                           
  7109                           ;RF_Control_B1.c: 184: RF1.Enable = 1;
  7110  070C  143C               	bsf	_RF1^(0+128),0
  7111  070D  0008               	return
  7112  070E                     __end_of_setRF_Main:	
  7113                           
  7114                           	psect	text25
  7115  0A74                     __ptext25:	
  7116 ;; *************** function _getRxData *****************
  7117 ;; Defined at:
  7118 ;;		line 272 in file "../src/RF_Control_B1.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;		None
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;  error           1   73[BANK0 ] unsigned char 
  7123 ;; Return value:  Size  Location     Type
  7124 ;;		None               void
  7125 ;; Registers used:
  7126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7133 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7134 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7135 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7136 ;;Total ram usage:        2 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; Hardware stack levels required when called:   12
  7139 ;; This function calls:
  7140 ;;		_getMain_All_Error_Status
  7141 ;;		_setControl_Lights_Table
  7142 ;;		_setLog_Code
  7143 ;; This function is called by:
  7144 ;;		_setRF_Main
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           
  7149                           ;psect for function _getRxData
  7150  0A74                     _getRxData:	
  7151                           
  7152                           ;RF_Control_B1.c: 273: char error = getMain_All_Error_Status(0);
  7153                           
  7154                           ;incstack = 0
  7155                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7156  0A74  3000               	movlw	0
  7157  0A75  3191  2162  318A   	fcall	_getMain_All_Error_Status
  7158  0A78  0020               	movlb	0	; select bank0
  7159  0A79  00E8               	movwf	??_getRxData
  7160  0A7A  0868               	movf	??_getRxData,w
  7161  0A7B  00E9               	movwf	getRxData@error
  7162                           
  7163                           ;RF_Control_B1.c: 274: if (error == 0) {
  7164  0A7C  08E9               	movf	getRxData@error,f
  7165  0A7D  1D03               	skipz
  7166  0A7E  0008               	return
  7167                           
  7168                           ;RF_Control_B1.c: 275: if (RF1.Learn == 1) {
  7169  0A7F  0021               	movlb	1	; select bank1
  7170  0A80  1F3C               	btfss	_RF1^(0+128),6
  7171  0A81  2A92               	goto	l9521
  7172                           
  7173                           ;RF_Control_B1.c: 276: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7174  0A82  0023               	movlb	3	; select bank3
  7175  0A83  08A0               	movf	_RF_Data^(0+384),f
  7176  0A84  1D03               	skipz
  7177  0A85  2A8F               	goto	l2271
  7178  0A86  0821               	movf	(_RF_Data^(0+384)+1),w
  7179  0A87  3A64               	xorlw	100
  7180  0A88  1D03               	skipz
  7181  0A89  2A8F               	goto	l2271
  7182                           
  7183                           ;RF_Control_B1.c: 277: setLog_Code();
  7184  0A8A  3192  2200         	fcall	_setLog_Code
  7185                           
  7186                           ;RF_Control_B1.c: 278: RF1.Checked = 1;
  7187  0A8C  0021               	movlb	1	; select bank1
  7188  0A8D  15BD               	bsf	(_RF1^(0+128)+1),3
  7189                           
  7190                           ;RF_Control_B1.c: 279: } else {
  7191  0A8E  0008               	return
  7192  0A8F                     l2271:	
  7193                           
  7194                           ;RF_Control_B1.c: 280: RF1.Checked = 0;
  7195  0A8F  0021               	movlb	1	; select bank1
  7196  0A90  11BD               	bcf	(_RF1^(0+128)+1),3
  7197                           
  7198                           ;RF_Control_B1.c: 281: }
  7199                           ;RF_Control_B1.c: 282: } else {
  7200  0A91  0008               	return
  7201  0A92                     l9521:	
  7202                           
  7203                           ;RF_Control_B1.c: 283: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7204  0A92  0023               	movlb	3	; select bank3
  7205  0A93  08A0               	movf	_RF_Data^(0+384),f
  7206  0A94  1D03               	skipz
  7207  0A95  2ACB               	goto	l9543
  7208  0A96  0821               	movf	(_RF_Data^(0+384)+1),w
  7209  0A97  3A02               	xorlw	2
  7210  0A98  1D03               	skipz
  7211  0A99  2ACB               	goto	l9543
  7212                           
  7213                           ;RF_Control_B1.c: 285: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7214  0A9A  082C               	movf	(_RF_Data^(0+384)+12),w
  7215  0A9B  3AFF               	xorlw	255
  7216  0A9C  1D03               	skipz
  7217  0A9D  2AAA               	goto	l9533
  7218  0A9E  082D               	movf	(_RF_Data^(0+384)+13),w
  7219  0A9F  3AFF               	xorlw	255
  7220  0AA0  1D03               	skipz
  7221  0AA1  2AAA               	goto	l9533
  7222  0AA2  082E               	movf	(_RF_Data^(0+384)+14),w
  7223  0AA3  3AFF               	xorlw	255
  7224  0AA4  1D03               	skipz
  7225  0AA5  2AAA               	goto	l9533
  7226                           
  7227                           ;RF_Control_B1.c: 286: __nop();
  7228  0AA6  0000               	nop
  7229                           
  7230                           ;RF_Control_B1.c: 287: RF1.Checked = 0;
  7231  0AA7  0021               	movlb	1	; select bank1
  7232  0AA8  11BD               	bcf	(_RF1^(0+128)+1),3
  7233                           
  7234                           ;RF_Control_B1.c: 288: } else {
  7235  0AA9  0008               	return
  7236  0AAA                     l9533:	
  7237                           
  7238                           ;RF_Control_B1.c: 289: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7239  0AAA  087B               	movf	_product,w
  7240  0AAB  3E0C               	addlw	12
  7241  0AAC  0086               	movwf	6
  7242  0AAD  3002               	movlw	2	; select bank4/5
  7243  0AAE  0087               	movwf	7
  7244  0AAF  0023               	movlb	3	; select bank3
  7245  0AB0  082C               	movf	(_RF_Data^(0+384)+12),w
  7246  0AB1  0601               	xorwf	1,w
  7247  0AB2  1D03               	skipz
  7248  0AB3  0008               	return
  7249  0AB4  087B               	movf	_product,w
  7250  0AB5  3E0D               	addlw	13
  7251  0AB6  0086               	movwf	6
  7252  0AB7  3002               	movlw	2	; select bank4/5
  7253  0AB8  0087               	movwf	7
  7254  0AB9  082D               	movf	(_RF_Data^(0+384)+13),w
  7255  0ABA  0601               	xorwf	1,w
  7256  0ABB  1D03               	skipz
  7257  0ABC  0008               	return
  7258  0ABD  087B               	movf	_product,w
  7259  0ABE  3E0E               	addlw	14
  7260  0ABF  0086               	movwf	6
  7261  0AC0  3002               	movlw	2	; select bank4/5
  7262  0AC1  0087               	movwf	7
  7263  0AC2  082E               	movf	(_RF_Data^(0+384)+14),w
  7264  0AC3  0601               	xorwf	1,w
  7265  0AC4  1D03               	skipz
  7266  0AC5  0008               	return
  7267                           
  7268                           ;RF_Control_B1.c: 290: setControl_Lights_Table();
  7269  0AC6  318A  2206         	fcall	_setControl_Lights_Table
  7270                           
  7271                           ;RF_Control_B1.c: 291: RF1.Checked = 1;
  7272  0AC8  0021               	movlb	1	; select bank1
  7273  0AC9  15BD               	bsf	(_RF1^(0+128)+1),3
  7274                           
  7275                           ;RF_Control_B1.c: 292: }
  7276                           ;RF_Control_B1.c: 293: }
  7277                           ;RF_Control_B1.c: 294: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7278  0ACA  0008               	return
  7279  0ACB                     l9543:	
  7280  0ACB  0023               	movlb	3	; select bank3
  7281  0ACC  0820               	movf	_RF_Data^(0+384),w
  7282  0ACD  3AFF               	xorlw	255
  7283  0ACE  1D03               	skipz
  7284  0ACF  2AD6               	goto	l9549
  7285  0AD0  0821               	movf	(_RF_Data^(0+384)+1),w
  7286  0AD1  3A02               	xorlw	2
  7287  0AD2  1D03               	skipz
  7288  0AD3  2AD6               	goto	l9549
  7289                           
  7290                           ;RF_Control_B1.c: 295: __nop();
  7291  0AD4  0000               	nop
  7292                           
  7293                           ;RF_Control_B1.c: 296: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7294  0AD5  0008               	return
  7295  0AD6                     l9549:	
  7296  0AD6  0023               	movlb	3	; select bank3
  7297  0AD7  08A0               	movf	_RF_Data^(0+384),f
  7298  0AD8  1D03               	skipz
  7299  0AD9  2AE0               	goto	l2281
  7300  0ADA  0821               	movf	(_RF_Data^(0+384)+1),w
  7301  0ADB  3A65               	xorlw	101
  7302  0ADC  1D03               	skipz
  7303  0ADD  2AE0               	goto	l2281
  7304                           
  7305                           ;RF_Control_B1.c: 297: __nop();
  7306  0ADE  0000               	nop
  7307                           
  7308                           ;RF_Control_B1.c: 298: } else {
  7309  0ADF  0008               	return
  7310  0AE0                     l2281:	
  7311                           
  7312                           ;RF_Control_B1.c: 299: RF1.Checked = 0;
  7313  0AE0  0021               	movlb	1	; select bank1
  7314  0AE1  11BD               	bcf	(_RF1^(0+128)+1),3
  7315                           
  7316                           ;RF_Control_B1.c: 300: }
  7317                           ;RF_Control_B1.c: 305: }
  7318                           ;RF_Control_B1.c: 306: } else {
  7319  0AE2  0008               	return
  7320  0AE3                     __end_of_getRxData:	
  7321                           ;RF_Control_B1.c: 307: ;
  7322                           
  7323                           
  7324                           	psect	text26
  7325  1200                     __ptext26:	
  7326 ;; *************** function _setLog_Code *****************
  7327 ;; Defined at:
  7328 ;;		line 312 in file "../src/RF_Control_B1.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;		None
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;		None
  7333 ;; Return value:  Size  Location     Type
  7334 ;;		None               void
  7335 ;; Registers used:
  7336 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7346 ;;Total ram usage:        1 bytes
  7347 ;; Hardware stack levels used:    1
  7348 ;; Hardware stack levels required when called:    7
  7349 ;; This function calls:
  7350 ;;		_setBuz
  7351 ;;		_setMemory_LoopSave
  7352 ;;		_setMemory_Modify
  7353 ;; This function is called by:
  7354 ;;		_getRxData
  7355 ;; This function uses a non-reentrant model
  7356 ;;
  7357                           
  7358                           
  7359                           ;psect for function _setLog_Code
  7360  1200                     _setLog_Code:	
  7361                           
  7362                           ;RF_Control_B1.c: 313: RF1.Learn = 0;
  7363                           
  7364                           ;incstack = 0
  7365                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7366  1200  0021               	movlb	1	; select bank1
  7367  1201  133C               	bcf	_RF1^(0+128),6
  7368                           
  7369                           ;RF_Control_B1.c: 314: product->Data[12]=RF_Data[12];
  7370  1202  0023               	movlb	3	; select bank3
  7371  1203  082C               	movf	(_RF_Data^(0+384)+12),w
  7372  1204  0020               	movlb	0	; select bank0
  7373  1205  00AD               	movwf	??_setLog_Code
  7374  1206  087B               	movf	_product,w
  7375  1207  3E0C               	addlw	12
  7376  1208  0086               	movwf	6
  7377  1209  3002               	movlw	2	; select bank4/5
  7378  120A  0087               	movwf	7
  7379  120B  082D               	movf	??_setLog_Code,w
  7380  120C  0081               	movwf	1
  7381                           
  7382                           ;RF_Control_B1.c: 315: product->Data[13]=RF_Data[13];
  7383  120D  0023               	movlb	3	; select bank3
  7384  120E  082D               	movf	(_RF_Data^(0+384)+13),w
  7385  120F  0020               	movlb	0	; select bank0
  7386  1210  00AD               	movwf	??_setLog_Code
  7387  1211  087B               	movf	_product,w
  7388  1212  3E0D               	addlw	13
  7389  1213  0086               	movwf	6
  7390  1214  3002               	movlw	2	; select bank4/5
  7391  1215  0087               	movwf	7
  7392  1216  082D               	movf	??_setLog_Code,w
  7393  1217  0081               	movwf	1
  7394                           
  7395                           ;RF_Control_B1.c: 316: product->Data[14]=RF_Data[14];
  7396  1218  0023               	movlb	3	; select bank3
  7397  1219  082E               	movf	(_RF_Data^(0+384)+14),w
  7398  121A  0020               	movlb	0	; select bank0
  7399  121B  00AD               	movwf	??_setLog_Code
  7400  121C  087B               	movf	_product,w
  7401  121D  3E0E               	addlw	14
  7402  121E  0086               	movwf	6
  7403  121F  3002               	movlw	2	; select bank4/5
  7404  1220  0087               	movwf	7
  7405  1221  082D               	movf	??_setLog_Code,w
  7406  1222  0081               	movwf	1
  7407                           
  7408                           ;RF_Control_B1.c: 317: setBuz(1, 100);
  7409  1223  3064               	movlw	100
  7410  1224  00A9               	movwf	setBuz@time
  7411  1225  3000               	movlw	0
  7412  1226  00AA               	movwf	setBuz@time+1
  7413  1227  3001               	movlw	1
  7414  1228  3196  2632  3192   	fcall	_setBuz
  7415                           
  7416                           ;RF_Control_B1.c: 318: if (myMain.First == 1) {
  7417  122B  0021               	movlb	1	; select bank1
  7418  122C  1EA0               	btfss	_myMain^(0+128),5
  7419  122D  2A32               	goto	l2287
  7420                           
  7421                           ;RF_Control_B1.c: 319: setMemory_LoopSave(1);
  7422  122E  3001               	movlw	1
  7423  122F  319C  249B  3192   	fcall	_setMemory_LoopSave
  7424  1232                     l2287:	
  7425                           
  7426                           ;RF_Control_B1.c: 320: }
  7427                           ;RF_Control_B1.c: 321: setMemory_Modify(1);
  7428  1232  3001               	movlw	1
  7429  1233  319C  2488         	fcall	_setMemory_Modify
  7430  1235  0008               	return
  7431  1236                     __end_of_setLog_Code:	
  7432                           
  7433                           	psect	text27
  7434  1C9B                     __ptext27:	
  7435 ;; *************** function _setMemory_LoopSave *****************
  7436 ;; Defined at:
  7437 ;;		line 1006 in file "../src/MCU_B1.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;  command         1    wreg     unsigned char 
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;  command         1    1[BANK0 ] unsigned char 
  7442 ;; Return value:  Size  Location     Type
  7443 ;;		None               void
  7444 ;; Registers used:
  7445 ;;		wreg, status,2, status,0
  7446 ;; Tracked objects:
  7447 ;;		On entry : 0/0
  7448 ;;		On exit  : 0/0
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7454 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7455 ;;Total ram usage:        2 bytes
  7456 ;; Hardware stack levels used:    1
  7457 ;; Hardware stack levels required when called:    5
  7458 ;; This function calls:
  7459 ;;		Nothing
  7460 ;; This function is called by:
  7461 ;;		_setLog_Code
  7462 ;; This function uses a non-reentrant model
  7463 ;;
  7464                           
  7465                           
  7466                           ;psect for function _setMemory_LoopSave
  7467  1C9B                     _setMemory_LoopSave:	
  7468                           
  7469                           ;incstack = 0
  7470                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7471                           ;setMemory_LoopSave@command stored from wreg
  7472  1C9B  0020               	movlb	0	; select bank0
  7473  1C9C  00A1               	movwf	setMemory_LoopSave@command
  7474                           
  7475                           ;MCU_B1.c: 1007: Memory.LoopSave = command == 1 ? 1 : 0;
  7476  1C9D  0821               	movf	setMemory_LoopSave@command,w
  7477  1C9E  3A01               	xorlw	1
  7478  1C9F  3000               	movlw	0
  7479  1CA0  1903               	skipnz
  7480  1CA1  3001               	movlw	1
  7481  1CA2  00A0               	movwf	??_setMemory_LoopSave
  7482  1CA3  0DA0               	rlf	??_setMemory_LoopSave,f
  7483  1CA4  0DA0               	rlf	??_setMemory_LoopSave,f
  7484  1CA5  0024               	movlb	4	; select bank4
  7485  1CA6  0844               	movf	(_Memory^(0+512)+36),w
  7486  1CA7  0020               	movlb	0	; select bank0
  7487  1CA8  0620               	xorwf	??_setMemory_LoopSave,w
  7488  1CA9  39FB               	andlw	-5
  7489  1CAA  0620               	xorwf	??_setMemory_LoopSave,w
  7490  1CAB  0024               	movlb	4	; select bank4
  7491  1CAC  00C4               	movwf	(_Memory^(0+512)+36)
  7492  1CAD  0008               	return
  7493  1CAE                     __end_of_setMemory_LoopSave:	
  7494                           
  7495                           	psect	text28
  7496  0A06                     __ptext28:	
  7497 ;; *************** function _setControl_Lights_Table *****************
  7498 ;; Defined at:
  7499 ;;		line 325 in file "../src/RF_Control_B1.c"
  7500 ;; Parameters:    Size  Location     Type
  7501 ;;		None
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;		None
  7504 ;; Return value:  Size  Location     Type
  7505 ;;		None               void
  7506 ;; Registers used:
  7507 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7508 ;; Tracked objects:
  7509 ;;		On entry : 0/0
  7510 ;;		On exit  : 0/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;Total ram usage:        0 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:   11
  7520 ;; This function calls:
  7521 ;;		_setBuz
  7522 ;;		_setRFSW_AdjControl
  7523 ;;		_setRFSW_Control
  7524 ;;		_setTxData
  7525 ;; This function is called by:
  7526 ;;		_getRxData
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           
  7531                           ;psect for function _setControl_Lights_Table
  7532  0A06                     _setControl_Lights_Table:	
  7533                           
  7534                           ;RF_Control_B1.c: 326: switch (RF_Data[15]) {
  7535                           
  7536                           ;incstack = 0
  7537                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7538  0A06  2A58               	goto	l9147
  7539  0A07                     l9119:	
  7540                           ;RF_Control_B1.c: 327: case 0x00:
  7541                           
  7542                           
  7543                           ;RF_Control_B1.c: 330: setRFSW_Control(1);
  7544  0A07  3001               	movlw	1
  7545  0A08  3194  24DE  318A   	fcall	_setRFSW_Control
  7546                           
  7547                           ;RF_Control_B1.c: 336: setRFSW_Control(2);
  7548  0A0B  3002               	movlw	2
  7549  0A0C  3194  24DE  318A   	fcall	_setRFSW_Control
  7550                           
  7551                           ;RF_Control_B1.c: 344: product->Data[9]=0;
  7552  0A0F  087B               	movf	_product,w
  7553  0A10  3E09               	addlw	9
  7554  0A11  0086               	movwf	6
  7555  0A12  3002               	movlw	2	; select bank4/5
  7556  0A13  0087               	movwf	7
  7557  0A14  0181               	clrf	1
  7558                           
  7559                           ;RF_Control_B1.c: 345: product->Data[11]=0;
  7560  0A15  087B               	movf	_product,w
  7561  0A16  3E0B               	addlw	11
  7562  0A17  0086               	movwf	6
  7563  0A18  3002               	movlw	2	; select bank4/5
  7564  0A19  0087               	movwf	7
  7565  0A1A  0181               	clrf	1
  7566                           
  7567                           ;RF_Control_B1.c: 346: product->Data[15]=0;
  7568  0A1B  087B               	movf	_product,w
  7569  0A1C  3E0F               	addlw	15
  7570  0A1D  0086               	movwf	6
  7571  0A1E  3002               	movlw	2	; select bank4/5
  7572  0A1F  0087               	movwf	7
  7573  0A20  0181               	clrf	1
  7574                           
  7575                           ;RF_Control_B1.c: 347: product->Data[17]=0;
  7576  0A21  087B               	movf	_product,w
  7577  0A22  3E11               	addlw	17
  7578  0A23  0086               	movwf	6
  7579  0A24  3002               	movlw	2	; select bank4/5
  7580  0A25  0087               	movwf	7
  7581  0A26  0181               	clrf	1
  7582                           
  7583                           ;RF_Control_B1.c: 348: setBuz(1, 100);
  7584  0A27  3064               	movlw	100
  7585  0A28  0020               	movlb	0	; select bank0
  7586  0A29  00A9               	movwf	setBuz@time
  7587  0A2A  3000               	movlw	0
  7588  0A2B  00AA               	movwf	setBuz@time+1
  7589  0A2C  3001               	movlw	1
  7590  0A2D  3196  2632  318A   	fcall	_setBuz
  7591                           
  7592                           ;RF_Control_B1.c: 349: setTxData();
  7593  0A30  318D  2571         	fcall	_setTxData
  7594                           
  7595                           ;RF_Control_B1.c: 350: break;
  7596  0A32  0008               	return
  7597  0A33                     l9133:	
  7598                           ;RF_Control_B1.c: 351: case 0x20:
  7599                           
  7600                           
  7601                           ;RF_Control_B1.c: 352: product->Data[9]=0;
  7602  0A33  087B               	movf	_product,w
  7603  0A34  3E09               	addlw	9
  7604  0A35  0086               	movwf	6
  7605  0A36  3002               	movlw	2	; select bank4/5
  7606  0A37  0087               	movwf	7
  7607  0A38  0181               	clrf	1
  7608                           
  7609                           ;RF_Control_B1.c: 353: product->Data[11]=0;
  7610  0A39  087B               	movf	_product,w
  7611  0A3A  3E0B               	addlw	11
  7612  0A3B  0086               	movwf	6
  7613  0A3C  3002               	movlw	2	; select bank4/5
  7614  0A3D  0087               	movwf	7
  7615  0A3E  0181               	clrf	1
  7616                           
  7617                           ;RF_Control_B1.c: 354: product->Data[17]=0;
  7618  0A3F  087B               	movf	_product,w
  7619  0A40  3E11               	addlw	17
  7620  0A41  0086               	movwf	6
  7621  0A42  3002               	movlw	2	; select bank4/5
  7622  0A43  0087               	movwf	7
  7623  0A44  0181               	clrf	1
  7624                           
  7625                           ;RF_Control_B1.c: 355: setTxData();
  7626  0A45  318D  2571         	fcall	_setTxData
  7627                           
  7628                           ;RF_Control_B1.c: 356: break;
  7629  0A47  0008               	return
  7630  0A48                     l9137:	
  7631                           ;RF_Control_B1.c: 357: case 0x01:
  7632                           
  7633                           
  7634                           ;RF_Control_B1.c: 359: setRFSW_Control(1);
  7635  0A48  3001               	movlw	1
  7636  0A49  3194  24DE         	fcall	_setRFSW_Control
  7637                           
  7638                           ;RF_Control_B1.c: 361: break;
  7639  0A4B  0008               	return
  7640  0A4C                     l9139:	
  7641                           ;RF_Control_B1.c: 362: case 0x02:
  7642                           
  7643                           
  7644                           ;RF_Control_B1.c: 364: setRFSW_Control(2);
  7645  0A4C  3002               	movlw	2
  7646  0A4D  3194  24DE         	fcall	_setRFSW_Control
  7647                           
  7648                           ;RF_Control_B1.c: 371: break;
  7649                           
  7650                           ;RF_Control_B1.c: 367: case 0x03:
  7651                           
  7652                           ;RF_Control_B1.c: 366: break;
  7653  0A4F  0008               	return
  7654  0A50                     l9141:	
  7655                           ;RF_Control_B1.c: 372: case 0x11:
  7656                           
  7657                           
  7658                           ;RF_Control_B1.c: 375: setRFSW_AdjControl(1);
  7659  0A50  3001               	movlw	1
  7660  0A51  3192  226D         	fcall	_setRFSW_AdjControl
  7661                           
  7662                           ;RF_Control_B1.c: 378: break;
  7663  0A53  0008               	return
  7664  0A54                     l9143:	
  7665                           ;RF_Control_B1.c: 379: case 0x21:
  7666                           
  7667                           
  7668                           ;RF_Control_B1.c: 382: setRFSW_AdjControl(2);
  7669  0A54  3002               	movlw	2
  7670  0A55  3192  226D         	fcall	_setRFSW_AdjControl
  7671                           
  7672                           ;RF_Control_B1.c: 393: }
  7673                           
  7674                           ;RF_Control_B1.c: 392: break;
  7675                           
  7676                           ;RF_Control_B1.c: 386: case 0x31:
  7677                           
  7678                           ;RF_Control_B1.c: 385: break;
  7679  0A57  0008               	return
  7680  0A58                     l9147:	
  7681  0A58  0023               	movlb	3	; select bank3
  7682  0A59  082F               	movf	(_RF_Data^(0+384)+15),w
  7683                           
  7684                           ; Switch size 1, requested type "space"
  7685                           ; Number of cases is 8, Range of values is 0 to 49
  7686                           ; switch strategies available:
  7687                           ; Name         Instructions Cycles
  7688                           ; simple_byte           25    13 (average)
  7689                           ; direct_byte          106     6 (fixed)
  7690                           ; jumptable            260     6 (fixed)
  7691                           ;	Chosen strategy is simple_byte
  7692  0A5A  3A00               	xorlw	0	; case 0
  7693  0A5B  1903               	skipnz
  7694  0A5C  2A07               	goto	l9119
  7695  0A5D  3A01               	xorlw	1	; case 1
  7696  0A5E  1903               	skipnz
  7697  0A5F  2A48               	goto	l9137
  7698  0A60  3A03               	xorlw	3	; case 2
  7699  0A61  1903               	skipnz
  7700  0A62  2A4C               	goto	l9139
  7701  0A63  3A01               	xorlw	1	; case 3
  7702  0A64  1903               	skipnz
  7703  0A65  2A73               	goto	l2301
  7704  0A66  3A12               	xorlw	18	; case 17
  7705  0A67  1903               	skipnz
  7706  0A68  2A50               	goto	l9141
  7707  0A69  3A31               	xorlw	49	; case 32
  7708  0A6A  1903               	skipnz
  7709  0A6B  2A33               	goto	l9133
  7710  0A6C  3A01               	xorlw	1	; case 33
  7711  0A6D  1903               	skipnz
  7712  0A6E  2A54               	goto	l9143
  7713  0A6F  3A10               	xorlw	16	; case 49
  7714  0A70  1903               	skipnz
  7715  0A71  2A73               	goto	l2301
  7716  0A72  2A73               	goto	l2301
  7717  0A73                     l2301:	
  7718  0A73  0008               	return
  7719  0A74                     __end_of_setControl_Lights_Table:	
  7720                           
  7721                           	psect	text29
  7722  14DE                     __ptext29:	
  7723 ;; *************** function _setRFSW_Control *****************
  7724 ;; Defined at:
  7725 ;;		line 476 in file "../src/RF_Control_B1.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;  sw              1    wreg     unsigned char 
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;  sw              1   71[BANK0 ] unsigned char 
  7730 ;; Return value:  Size  Location     Type
  7731 ;;		None               void
  7732 ;; Registers used:
  7733 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7740 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7743 ;;Total ram usage:        2 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:   10
  7746 ;; This function calls:
  7747 ;;		_getDimmerLights_Status
  7748 ;;		_setDelayOff_GO
  7749 ;;		_setDimmerLights_SwOff
  7750 ;;		_setDimmerLights_SwOn
  7751 ;;		_setRF_DimmerLights
  7752 ;; This function is called by:
  7753 ;;		_setControl_Lights_Table
  7754 ;; This function uses a non-reentrant model
  7755 ;;
  7756                           
  7757                           
  7758                           ;psect for function _setRFSW_Control
  7759  14DE                     _setRFSW_Control:	
  7760                           
  7761                           ;incstack = 0
  7762                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7763                           ;setRFSW_Control@sw stored from wreg
  7764  14DE  0020               	movlb	0	; select bank0
  7765  14DF  00E7               	movwf	setRFSW_Control@sw
  7766                           
  7767                           ;RF_Control_B1.c: 479: setDimmerLights_SwOn(sw);
  7768  14E0  0867               	movf	setRFSW_Control@sw,w
  7769  14E1  3193  23B2  3194   	fcall	_setDimmerLights_SwOn
  7770                           
  7771                           ;RF_Control_B1.c: 481: if (getDimmerLights_Status(sw) == 1) {
  7772  14E4  0020               	movlb	0	; select bank0
  7773  14E5  0867               	movf	setRFSW_Control@sw,w
  7774  14E6  319B  23D8  3194   	fcall	_getDimmerLights_Status
  7775  14E9  3A01               	xorlw	1
  7776  14EA  1D03               	skipz
  7777  14EB  2D05               	goto	l8973
  7778                           
  7779                           ;RF_Control_B1.c: 482: if (RF_Data[16] == 0x80) {
  7780  14EC  0023               	movlb	3	; select bank3
  7781  14ED  0830               	movf	(_RF_Data^(0+384)+16),w
  7782  14EE  3A80               	xorlw	128
  7783  14EF  1D03               	skipz
  7784  14F0  2CFE               	goto	l2305
  7785                           
  7786                           ;RF_Control_B1.c: 483: setDelayOff_GO(sw, 1, RF_Data[17]);
  7787  14F1  0020               	movlb	0	; select bank0
  7788  14F2  01AA               	clrf	setDelayOff_GO@command
  7789  14F3  0AAA               	incf	setDelayOff_GO@command,f
  7790  14F4  0023               	movlb	3	; select bank3
  7791  14F5  0831               	movf	(_RF_Data^(0+384)+17),w
  7792  14F6  0020               	movlb	0	; select bank0
  7793  14F7  00E6               	movwf	??_setRFSW_Control
  7794  14F8  0866               	movf	??_setRFSW_Control,w
  7795  14F9  00AB               	movwf	setDelayOff_GO@value
  7796  14FA  0867               	movf	setRFSW_Control@sw,w
  7797  14FB  3197  279F  3194   	fcall	_setDelayOff_GO
  7798  14FE                     l2305:	
  7799                           
  7800                           ;RF_Control_B1.c: 484: }
  7801                           ;RF_Control_B1.c: 486: setRF_DimmerLights(sw, 1);
  7802  14FE  0020               	movlb	0	; select bank0
  7803  14FF  01DD               	clrf	setRF_DimmerLights@on
  7804  1500  0ADD               	incf	setRF_DimmerLights@on,f
  7805  1501  0867               	movf	setRFSW_Control@sw,w
  7806  1502  3189  219A         	fcall	_setRF_DimmerLights
  7807                           
  7808                           ;RF_Control_B1.c: 488: } else {
  7809  1504  0008               	return
  7810  1505                     l8973:	
  7811                           
  7812                           ;RF_Control_B1.c: 489: if (RF_Data[16] == 0x80) {
  7813  1505  0023               	movlb	3	; select bank3
  7814  1506  0830               	movf	(_RF_Data^(0+384)+16),w
  7815  1507  3A80               	xorlw	128
  7816  1508  1D03               	skipz
  7817  1509  2D1E               	goto	l8977
  7818                           
  7819                           ;RF_Control_B1.c: 490: setDelayOff_GO(sw, 1, RF_Data[17]);
  7820  150A  0020               	movlb	0	; select bank0
  7821  150B  01AA               	clrf	setDelayOff_GO@command
  7822  150C  0AAA               	incf	setDelayOff_GO@command,f
  7823  150D  0023               	movlb	3	; select bank3
  7824  150E  0831               	movf	(_RF_Data^(0+384)+17),w
  7825  150F  0020               	movlb	0	; select bank0
  7826  1510  00E6               	movwf	??_setRFSW_Control
  7827  1511  0866               	movf	??_setRFSW_Control,w
  7828  1512  00AB               	movwf	setDelayOff_GO@value
  7829  1513  0867               	movf	setRFSW_Control@sw,w
  7830  1514  3197  279F  3194   	fcall	_setDelayOff_GO
  7831                           
  7832                           ;RF_Control_B1.c: 491: setRF_DimmerLights(sw, 1);
  7833  1517  0020               	movlb	0	; select bank0
  7834  1518  01DD               	clrf	setRF_DimmerLights@on
  7835  1519  0ADD               	incf	setRF_DimmerLights@on,f
  7836  151A  0867               	movf	setRFSW_Control@sw,w
  7837  151B  3189  219A         	fcall	_setRF_DimmerLights
  7838                           
  7839                           ;RF_Control_B1.c: 492: } else {
  7840  151D  0008               	return
  7841  151E                     l8977:	
  7842                           
  7843                           ;RF_Control_B1.c: 494: setDimmerLights_SwOff(sw);
  7844  151E  0020               	movlb	0	; select bank0
  7845  151F  0867               	movf	setRFSW_Control@sw,w
  7846  1520  3197  2740  3194   	fcall	_setDimmerLights_SwOff
  7847                           
  7848                           ;RF_Control_B1.c: 495: setRF_DimmerLights(sw, 0);
  7849  1523  0020               	movlb	0	; select bank0
  7850  1524  01DD               	clrf	setRF_DimmerLights@on
  7851  1525  0867               	movf	setRFSW_Control@sw,w
  7852  1526  3189  219A  3194   	fcall	_setRF_DimmerLights
  7853                           
  7854                           ;RF_Control_B1.c: 497: setDelayOff_GO(sw, 0, 0);
  7855  1529  0020               	movlb	0	; select bank0
  7856  152A  01AA               	clrf	setDelayOff_GO@command
  7857  152B  01AB               	clrf	setDelayOff_GO@value
  7858  152C  0867               	movf	setRFSW_Control@sw,w
  7859  152D  3197  279F         	fcall	_setDelayOff_GO
  7860  152F  0008               	return
  7861  1530                     __end_of_setRFSW_Control:	
  7862                           
  7863                           	psect	text30
  7864  126D                     __ptext30:	
  7865 ;; *************** function _setRFSW_AdjControl *****************
  7866 ;; Defined at:
  7867 ;;		line 503 in file "../src/RF_Control_B1.c"
  7868 ;; Parameters:    Size  Location     Type
  7869 ;;  sw              1    wreg     unsigned char 
  7870 ;; Auto vars:     Size  Location     Type
  7871 ;;  sw              1   70[BANK0 ] unsigned char 
  7872 ;; Return value:  Size  Location     Type
  7873 ;;		None               void
  7874 ;; Registers used:
  7875 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7876 ;; Tracked objects:
  7877 ;;		On entry : 0/0
  7878 ;;		On exit  : 0/0
  7879 ;;		Unchanged: 0/0
  7880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7882 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7883 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7884 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7885 ;;Total ram usage:        3 bytes
  7886 ;; Hardware stack levels used:    1
  7887 ;; Hardware stack levels required when called:   10
  7888 ;; This function calls:
  7889 ;;		_getDimmerLights_Status
  7890 ;;		_setMemory_Modify
  7891 ;;		_setRF_DimmerValue
  7892 ;;		_setTxData
  7893 ;; This function is called by:
  7894 ;;		_setControl_Lights_Table
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           
  7899                           ;psect for function _setRFSW_AdjControl
  7900  126D                     _setRFSW_AdjControl:	
  7901                           
  7902                           ;incstack = 0
  7903                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7904                           ;setRFSW_AdjControl@sw stored from wreg
  7905  126D  0020               	movlb	0	; select bank0
  7906  126E  00E6               	movwf	setRFSW_AdjControl@sw
  7907                           
  7908                           ;RF_Control_B1.c: 505: if (getDimmerLights_Status(sw) == 1) {
  7909  126F  0866               	movf	setRFSW_AdjControl@sw,w
  7910  1270  319B  23D8  3192   	fcall	_getDimmerLights_Status
  7911  1273  3A01               	xorlw	1
  7912  1274  1D03               	skipz
  7913  1275  2A80               	goto	l8985
  7914                           
  7915                           ;RF_Control_B1.c: 506: setMemory_Modify(1);
  7916  1276  3001               	movlw	1
  7917  1277  319C  2488  3192   	fcall	_setMemory_Modify
  7918                           
  7919                           ;RF_Control_B1.c: 507: setRF_DimmerValue(sw);
  7920  127A  0020               	movlb	0	; select bank0
  7921  127B  0866               	movf	setRFSW_AdjControl@sw,w
  7922  127C  3191  2195  3192   	fcall	_setRF_DimmerValue
  7923                           
  7924                           ;RF_Control_B1.c: 508: } else {
  7925  127F  2A92               	goto	l2313
  7926  1280                     l8985:	
  7927                           
  7928                           ;RF_Control_B1.c: 509: product->Data[9]=product->Data[20 + sw];
  7929  1280  0020               	movlb	0	; select bank0
  7930  1281  0866               	movf	setRFSW_AdjControl@sw,w
  7931  1282  3E14               	addlw	20
  7932  1283  077B               	addwf	_product,w
  7933  1284  00E4               	movwf	??_setRFSW_AdjControl
  7934  1285  0864               	movf	??_setRFSW_AdjControl,w
  7935  1286  0086               	movwf	6
  7936  1287  3002               	movlw	2	; select bank4/5
  7937  1288  0087               	movwf	7
  7938  1289  0801               	movf	1,w
  7939  128A  00E5               	movwf	??_setRFSW_AdjControl+1
  7940  128B  087B               	movf	_product,w
  7941  128C  3E09               	addlw	9
  7942  128D  0086               	movwf	6
  7943  128E  3002               	movlw	2	; select bank4/5
  7944  128F  0087               	movwf	7
  7945  1290  0865               	movf	??_setRFSW_AdjControl+1,w
  7946  1291  0081               	movwf	1
  7947  1292                     l2313:	
  7948                           
  7949                           ;RF_Control_B1.c: 510: }
  7950                           ;RF_Control_B1.c: 511: product->Data[17]=product->Data[26 + sw];
  7951  1292  0020               	movlb	0	; select bank0
  7952  1293  0866               	movf	setRFSW_AdjControl@sw,w
  7953  1294  3E1A               	addlw	26
  7954  1295  077B               	addwf	_product,w
  7955  1296  00E4               	movwf	??_setRFSW_AdjControl
  7956  1297  0864               	movf	??_setRFSW_AdjControl,w
  7957  1298  0086               	movwf	6
  7958  1299  3002               	movlw	2	; select bank4/5
  7959  129A  0087               	movwf	7
  7960  129B  0801               	movf	1,w
  7961  129C  00E5               	movwf	??_setRFSW_AdjControl+1
  7962  129D  087B               	movf	_product,w
  7963  129E  3E11               	addlw	17
  7964  129F  0086               	movwf	6
  7965  12A0  3002               	movlw	2	; select bank4/5
  7966  12A1  0087               	movwf	7
  7967  12A2  0865               	movf	??_setRFSW_AdjControl+1,w
  7968  12A3  0081               	movwf	1
  7969                           
  7970                           ;RF_Control_B1.c: 512: setTxData();
  7971  12A4  318D  2571         	fcall	_setTxData
  7972  12A6  0008               	return
  7973  12A7                     __end_of_setRFSW_AdjControl:	
  7974                           
  7975                           	psect	text31
  7976  1195                     __ptext31:	
  7977 ;; *************** function _setRF_DimmerValue *****************
  7978 ;; Defined at:
  7979 ;;		line 517 in file "../src/RF_Control_B1.c"
  7980 ;; Parameters:    Size  Location     Type
  7981 ;;  lights          1    wreg     unsigned char 
  7982 ;; Auto vars:     Size  Location     Type
  7983 ;;  lights          1   67[BANK0 ] unsigned char 
  7984 ;; Return value:  Size  Location     Type
  7985 ;;		None               void
  7986 ;; Registers used:
  7987 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7988 ;; Tracked objects:
  7989 ;;		On entry : 0/0
  7990 ;;		On exit  : 0/0
  7991 ;;		Unchanged: 0/0
  7992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7994 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7995 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7996 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7997 ;;Total ram usage:        3 bytes
  7998 ;; Hardware stack levels used:    1
  7999 ;; Hardware stack levels required when called:    9
  8000 ;; This function calls:
  8001 ;;		_setDimmerLights_AdjRF
  8002 ;; This function is called by:
  8003 ;;		_setRFSW_AdjControl
  8004 ;; This function uses a non-reentrant model
  8005 ;;
  8006                           
  8007                           
  8008                           ;psect for function _setRF_DimmerValue
  8009  1195                     _setRF_DimmerValue:	
  8010                           
  8011                           ;incstack = 0
  8012                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8013                           ;setRF_DimmerValue@lights stored from wreg
  8014  1195  0020               	movlb	0	; select bank0
  8015  1196  00E3               	movwf	setRF_DimmerValue@lights
  8016                           
  8017                           ;RF_Control_B1.c: 518: if (RF_Data[9] > 0x64) {
  8018  1197  3065               	movlw	101
  8019  1198  0023               	movlb	3	; select bank3
  8020  1199  0229               	subwf	(_RF_Data^(0+384)+9),w
  8021  119A  1C03               	skipc
  8022  119B  29A2               	goto	l8899
  8023                           
  8024                           ;RF_Control_B1.c: 519: RF_Data[9] = 0x64;
  8025  119C  3064               	movlw	100
  8026  119D  0020               	movlb	0	; select bank0
  8027  119E  00E1               	movwf	??_setRF_DimmerValue
  8028  119F  0861               	movf	??_setRF_DimmerValue,w
  8029  11A0  0023               	movlb	3	; select bank3
  8030  11A1  00A9               	movwf	(_RF_Data^(0+384)+9)
  8031  11A2                     l8899:	
  8032                           
  8033                           ;RF_Control_B1.c: 520: }
  8034                           ;RF_Control_B1.c: 521: product->Data[9]=RF_Data[9];
  8035  11A2  0829               	movf	(_RF_Data^(0+384)+9),w
  8036  11A3  0020               	movlb	0	; select bank0
  8037  11A4  00E1               	movwf	??_setRF_DimmerValue
  8038  11A5  087B               	movf	_product,w
  8039  11A6  3E09               	addlw	9
  8040  11A7  0086               	movwf	6
  8041  11A8  3002               	movlw	2	; select bank4/5
  8042  11A9  0087               	movwf	7
  8043  11AA  0861               	movf	??_setRF_DimmerValue,w
  8044  11AB  0081               	movwf	1
  8045                           
  8046                           ;RF_Control_B1.c: 522: product->Data[11]=lights;
  8047  11AC  0863               	movf	setRF_DimmerValue@lights,w
  8048  11AD  00E1               	movwf	??_setRF_DimmerValue
  8049  11AE  087B               	movf	_product,w
  8050  11AF  3E0B               	addlw	11
  8051  11B0  0086               	movwf	6
  8052  11B1  3002               	movlw	2	; select bank4/5
  8053  11B2  0087               	movwf	7
  8054  11B3  0861               	movf	??_setRF_DimmerValue,w
  8055  11B4  0081               	movwf	1
  8056                           
  8057                           ;RF_Control_B1.c: 523: product->Data[(20 + lights)]=product->Data[9];
  8058  11B5  087B               	movf	_product,w
  8059  11B6  3E09               	addlw	9
  8060  11B7  0086               	movwf	6
  8061  11B8  3002               	movlw	2	; select bank4/5
  8062  11B9  0087               	movwf	7
  8063  11BA  0801               	movf	1,w
  8064  11BB  00E1               	movwf	??_setRF_DimmerValue
  8065  11BC  0863               	movf	setRF_DimmerValue@lights,w
  8066  11BD  3E14               	addlw	20
  8067  11BE  077B               	addwf	_product,w
  8068  11BF  00E2               	movwf	??_setRF_DimmerValue+1
  8069  11C0  0862               	movf	??_setRF_DimmerValue+1,w
  8070  11C1  0086               	movwf	6
  8071  11C2  3002               	movlw	2	; select bank4/5
  8072  11C3  0087               	movwf	7
  8073  11C4  0861               	movf	??_setRF_DimmerValue,w
  8074  11C5  0081               	movwf	1
  8075                           
  8076                           ;RF_Control_B1.c: 524: setDimmerLights_AdjRF(lights);
  8077  11C6  0863               	movf	setRF_DimmerValue@lights,w
  8078  11C7  319E  26D4         	fcall	_setDimmerLights_AdjRF
  8079  11C9  0008               	return
  8080  11CA                     __end_of_setRF_DimmerValue:	
  8081                           
  8082                           	psect	text32
  8083  1ED4                     __ptext32:	
  8084 ;; *************** function _setDimmerLights_AdjRF *****************
  8085 ;; Defined at:
  8086 ;;		line 740 in file "../src/Dimmer_B1.c"
  8087 ;; Parameters:    Size  Location     Type
  8088 ;;  lights          1    wreg     unsigned char 
  8089 ;; Auto vars:     Size  Location     Type
  8090 ;;  lights          1   64[BANK0 ] unsigned char 
  8091 ;; Return value:  Size  Location     Type
  8092 ;;		None               void
  8093 ;; Registers used:
  8094 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8095 ;; Tracked objects:
  8096 ;;		On entry : 0/0
  8097 ;;		On exit  : 0/0
  8098 ;;		Unchanged: 0/0
  8099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8101 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;Total ram usage:        2 bytes
  8105 ;; Hardware stack levels used:    1
  8106 ;; Hardware stack levels required when called:    8
  8107 ;; This function calls:
  8108 ;;		_DimmerLightsPointSelect
  8109 ;;		_getPercentValue
  8110 ;; This function is called by:
  8111 ;;		_setRF_DimmerValue
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           
  8116                           ;psect for function _setDimmerLights_AdjRF
  8117  1ED4                     _setDimmerLights_AdjRF:	
  8118                           
  8119                           ;incstack = 0
  8120                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8121                           ;setDimmerLights_AdjRF@lights stored from wreg
  8122  1ED4  0020               	movlb	0	; select bank0
  8123  1ED5  00E0               	movwf	setDimmerLights_AdjRF@lights
  8124                           
  8125                           ;Dimmer_B1.c: 741: DimmerLightsPointSelect(lights);
  8126  1ED6  0860               	movf	setDimmerLights_AdjRF@lights,w
  8127  1ED7  319C  2475  319E   	fcall	_DimmerLightsPointSelect
  8128                           
  8129                           ;Dimmer_B1.c: 742: DimmerLights->AdjRF = 1;
  8130  1EDA  0877               	movf	_DimmerLights,w
  8131  1EDB  0086               	movwf	6
  8132  1EDC  3001               	movlw	1	; select bank2/3
  8133  1EDD  0087               	movwf	7
  8134  1EDE  1501               	bsf	1,2
  8135                           
  8136                           ;Dimmer_B1.c: 743: DimmerLights->Signal = 1;
  8137  1EDF  0877               	movf	_DimmerLights,w
  8138  1EE0  0086               	movwf	6
  8139  1EE1  3001               	movlw	1	; select bank2/3
  8140  1EE2  0087               	movwf	7
  8141  1EE3  1481               	bsf	1,1
  8142                           
  8143                           ;Dimmer_B1.c: 744: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8144  1EE4  087B               	movf	_product,w
  8145  1EE5  3E09               	addlw	9
  8146  1EE6  0086               	movwf	6
  8147  1EE7  3002               	movlw	2	; select bank4/5
  8148  1EE8  0087               	movwf	7
  8149  1EE9  0801               	movf	1,w
  8150  1EEA  3196  26E5         	fcall	_getPercentValue
  8151  1EEC  0020               	movlb	0	; select bank0
  8152  1EED  00DF               	movwf	??_setDimmerLights_AdjRF
  8153  1EEE  0877               	movf	_DimmerLights,w
  8154  1EEF  3E05               	addlw	5
  8155  1EF0  0086               	movwf	6
  8156  1EF1  3001               	movlw	1	; select bank2/3
  8157  1EF2  0087               	movwf	7
  8158  1EF3  085F               	movf	??_setDimmerLights_AdjRF,w
  8159  1EF4  0081               	movwf	1
  8160  1EF5  0008               	return
  8161  1EF6                     __end_of_setDimmerLights_AdjRF:	
  8162                           
  8163                           	psect	text33
  8164  16E5                     __ptext33:	
  8165 ;; *************** function _getPercentValue *****************
  8166 ;; Defined at:
  8167 ;;		line 886 in file "../src/Dimmer_B1.c"
  8168 ;; Parameters:    Size  Location     Type
  8169 ;;  value           1    wreg     unsigned char 
  8170 ;; Auto vars:     Size  Location     Type
  8171 ;;  value           1   59[BANK0 ] unsigned char 
  8172 ;;  i               3   60[BANK0 ] float 
  8173 ;; Return value:  Size  Location     Type
  8174 ;;                  1    wreg      unsigned char 
  8175 ;; Registers used:
  8176 ;;		wreg, status,2, status,0, pclath, cstack
  8177 ;; Tracked objects:
  8178 ;;		On entry : 0/0
  8179 ;;		On exit  : 0/0
  8180 ;;		Unchanged: 0/0
  8181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8183 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8184 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8186 ;;Total ram usage:        6 bytes
  8187 ;; Hardware stack levels used:    1
  8188 ;; Hardware stack levels required when called:    7
  8189 ;; This function calls:
  8190 ;;		___awtoft
  8191 ;;		___ftadd
  8192 ;;		___ftdiv
  8193 ;;		___ftmul
  8194 ;;		___fttol
  8195 ;; This function is called by:
  8196 ;;		_setDimmerLights_AdjRF
  8197 ;; This function uses a non-reentrant model
  8198 ;;
  8199                           
  8200                           
  8201                           ;psect for function _getPercentValue
  8202  16E5                     _getPercentValue:	
  8203                           
  8204                           ;incstack = 0
  8205                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8206                           ;getPercentValue@value stored from wreg
  8207  16E5  0020               	movlb	0	; select bank0
  8208  16E6  00DB               	movwf	getPercentValue@value
  8209                           
  8210                           ;Dimmer_B1.c: 888: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8211  16E7  3000               	movlw	0
  8212  16E8  00DC               	movwf	getPercentValue@i
  8213  16E9  30E0               	movlw	224
  8214  16EA  00DD               	movwf	getPercentValue@i+1
  8215  16EB  3041               	movlw	65
  8216  16EC  00DE               	movwf	getPercentValue@i+2
  8217                           
  8218                           ;Dimmer_B1.c: 889: i /= 100;
  8219  16ED  3000               	movlw	0
  8220  16EE  00AE               	movwf	___ftdiv@f2
  8221  16EF  30C8               	movlw	200
  8222  16F0  00AF               	movwf	___ftdiv@f2+1
  8223  16F1  3042               	movlw	66
  8224  16F2  00B0               	movwf	___ftdiv@f2+2
  8225  16F3  085C               	movf	getPercentValue@i,w
  8226  16F4  00B1               	movwf	___ftdiv@f1
  8227  16F5  085D               	movf	getPercentValue@i+1,w
  8228  16F6  00B2               	movwf	___ftdiv@f1+1
  8229  16F7  085E               	movf	getPercentValue@i+2,w
  8230  16F8  00B3               	movwf	___ftdiv@f1+2
  8231  16F9  318E  26A3  3196   	fcall	___ftdiv
  8232  16FC  0020               	movlb	0	; select bank0
  8233  16FD  082E               	movf	?___ftdiv,w
  8234  16FE  00DC               	movwf	getPercentValue@i
  8235  16FF  082F               	movf	?___ftdiv+1,w
  8236  1700  00DD               	movwf	getPercentValue@i+1
  8237  1701  0830               	movf	?___ftdiv+2,w
  8238  1702  00DE               	movwf	getPercentValue@i+2
  8239                           
  8240                           ;Dimmer_B1.c: 890: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8241  1703  085B               	movf	getPercentValue@value,w
  8242  1704  00D9               	movwf	??_getPercentValue
  8243  1705  01DA               	clrf	??_getPercentValue+1
  8244  1706  09D9               	comf	??_getPercentValue,f
  8245  1707  09DA               	comf	??_getPercentValue+1,f
  8246  1708  0AD9               	incf	??_getPercentValue,f
  8247  1709  1903               	skipnz
  8248  170A  0ADA               	incf	??_getPercentValue+1,f
  8249  170B  0859               	movf	??_getPercentValue,w
  8250  170C  3E64               	addlw	100
  8251  170D  00A8               	movwf	___awtoft@c
  8252  170E  3000               	movlw	0
  8253  170F  3D5A               	addwfc	??_getPercentValue+1,w
  8254  1710  00A9               	movwf	___awtoft@c+1
  8255  1711  319E  2690  3196   	fcall	___awtoft
  8256  1714  0020               	movlb	0	; select bank0
  8257  1715  0828               	movf	?___awtoft,w
  8258  1716  00B1               	movwf	___ftmul@f2
  8259  1717  0829               	movf	?___awtoft+1,w
  8260  1718  00B2               	movwf	___ftmul@f2+1
  8261  1719  082A               	movf	?___awtoft+2,w
  8262  171A  00B3               	movwf	___ftmul@f2+2
  8263  171B  085C               	movf	getPercentValue@i,w
  8264  171C  00AE               	movwf	___ftmul@f1
  8265  171D  085D               	movf	getPercentValue@i+1,w
  8266  171E  00AF               	movwf	___ftmul@f1+1
  8267  171F  085E               	movf	getPercentValue@i+2,w
  8268  1720  00B0               	movwf	___ftmul@f1+2
  8269  1721  318F  274C  3196   	fcall	___ftmul
  8270  1724  0020               	movlb	0	; select bank0
  8271  1725  082E               	movf	?___ftmul,w
  8272  1726  00C1               	movwf	___ftadd@f2
  8273  1727  082F               	movf	?___ftmul+1,w
  8274  1728  00C2               	movwf	___ftadd@f2+1
  8275  1729  0830               	movf	?___ftmul+2,w
  8276  172A  00C3               	movwf	___ftadd@f2+2
  8277  172B  3000               	movlw	0
  8278  172C  00BE               	movwf	___ftadd@f1
  8279  172D  3000               	movlw	0
  8280  172E  00BF               	movwf	___ftadd@f1+1
  8281  172F  3042               	movlw	66
  8282  1730  00C0               	movwf	___ftadd@f1+2
  8283  1731  3185  2527  3196   	fcall	___ftadd
  8284  1734  0020               	movlb	0	; select bank0
  8285  1735  083E               	movf	?___ftadd,w
  8286  1736  00CB               	movwf	___fttol@f1
  8287  1737  083F               	movf	?___ftadd+1,w
  8288  1738  00CC               	movwf	___fttol@f1+1
  8289  1739  0840               	movf	?___ftadd+2,w
  8290  173A  00CD               	movwf	___fttol@f1+2
  8291  173B  318C  2456         	fcall	___fttol
  8292  173D  0020               	movlb	0	; select bank0
  8293  173E  084B               	movf	?___fttol,w
  8294  173F  0008               	return
  8295  1740                     __end_of_getPercentValue:	
  8296                           
  8297                           	psect	text34
  8298  0F4C                     __ptext34:	
  8299 ;; *************** function ___ftmul *****************
  8300 ;; Defined at:
  8301 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;  f1              3   14[BANK0 ] float 
  8304 ;;  f2              3   17[BANK0 ] float 
  8305 ;; Auto vars:     Size  Location     Type
  8306 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8307 ;;  sign            1   29[BANK0 ] unsigned char 
  8308 ;;  cntr            1   28[BANK0 ] unsigned char 
  8309 ;;  exp             1   24[BANK0 ] unsigned char 
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  3   14[BANK0 ] float 
  8312 ;; Registers used:
  8313 ;;		wreg, status,2, status,0, pclath, cstack
  8314 ;; Tracked objects:
  8315 ;;		On entry : 0/0
  8316 ;;		On exit  : 0/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8319 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8320 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8321 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8322 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8323 ;;Total ram usage:       16 bytes
  8324 ;; Hardware stack levels used:    1
  8325 ;; Hardware stack levels required when called:    6
  8326 ;; This function calls:
  8327 ;;		___ftpack
  8328 ;; This function is called by:
  8329 ;;		_getPercentValue
  8330 ;; This function uses a non-reentrant model
  8331 ;;
  8332                           
  8333                           
  8334                           ;psect for function ___ftmul
  8335  0F4C                     ___ftmul:	
  8336                           
  8337                           ;incstack = 0
  8338                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8339  0F4C  0020               	movlb	0	; select bank0
  8340  0F4D  082E               	movf	___ftmul@f1,w
  8341  0F4E  00B4               	movwf	??___ftmul
  8342  0F4F  082F               	movf	___ftmul@f1+1,w
  8343  0F50  00B5               	movwf	??___ftmul+1
  8344  0F51  0830               	movf	___ftmul@f1+2,w
  8345  0F52  00B6               	movwf	??___ftmul+2
  8346  0F53  1003               	clrc
  8347  0F54  0D35               	rlf	??___ftmul+1,w
  8348  0F55  0D36               	rlf	??___ftmul+2,w
  8349  0F56  00B7               	movwf	??___ftmul+3
  8350  0F57  0837               	movf	??___ftmul+3,w
  8351  0F58  00B8               	movwf	___ftmul@exp
  8352  0F59  08B8               	movf	___ftmul@exp,f
  8353  0F5A  1D03               	skipz
  8354  0F5B  2F63               	goto	l8515
  8355  0F5C  3000               	movlw	0
  8356  0F5D  00AE               	movwf	?___ftmul
  8357  0F5E  3000               	movlw	0
  8358  0F5F  00AF               	movwf	?___ftmul+1
  8359  0F60  3000               	movlw	0
  8360  0F61  00B0               	movwf	?___ftmul+2
  8361  0F62  0008               	return
  8362  0F63                     l8515:	
  8363  0F63  0831               	movf	___ftmul@f2,w
  8364  0F64  00B4               	movwf	??___ftmul
  8365  0F65  0832               	movf	___ftmul@f2+1,w
  8366  0F66  00B5               	movwf	??___ftmul+1
  8367  0F67  0833               	movf	___ftmul@f2+2,w
  8368  0F68  00B6               	movwf	??___ftmul+2
  8369  0F69  1003               	clrc
  8370  0F6A  0D35               	rlf	??___ftmul+1,w
  8371  0F6B  0D36               	rlf	??___ftmul+2,w
  8372  0F6C  00B7               	movwf	??___ftmul+3
  8373  0F6D  0837               	movf	??___ftmul+3,w
  8374  0F6E  00BD               	movwf	___ftmul@sign
  8375  0F6F  08BD               	movf	___ftmul@sign,f
  8376  0F70  1D03               	skipz
  8377  0F71  2F79               	goto	l8521
  8378  0F72  3000               	movlw	0
  8379  0F73  00AE               	movwf	?___ftmul
  8380  0F74  3000               	movlw	0
  8381  0F75  00AF               	movwf	?___ftmul+1
  8382  0F76  3000               	movlw	0
  8383  0F77  00B0               	movwf	?___ftmul+2
  8384  0F78  0008               	return
  8385  0F79                     l8521:	
  8386  0F79  083D               	movf	___ftmul@sign,w
  8387  0F7A  3E7B               	addlw	123
  8388  0F7B  00B4               	movwf	??___ftmul
  8389  0F7C  0834               	movf	??___ftmul,w
  8390  0F7D  07B8               	addwf	___ftmul@exp,f
  8391  0F7E  082E               	movf	___ftmul@f1,w
  8392  0F7F  00B4               	movwf	??___ftmul
  8393  0F80  082F               	movf	___ftmul@f1+1,w
  8394  0F81  00B5               	movwf	??___ftmul+1
  8395  0F82  0830               	movf	___ftmul@f1+2,w
  8396  0F83  00B6               	movwf	??___ftmul+2
  8397  0F84  3010               	movlw	16
  8398  0F85                     u8825:	
  8399  0F85  36B6               	lsrf	??___ftmul+2,f
  8400  0F86  0CB5               	rrf	??___ftmul+1,f
  8401  0F87  0CB4               	rrf	??___ftmul,f
  8402  0F88  0B89               	decfsz	9,f
  8403  0F89  2F85               	goto	u8825
  8404  0F8A  0834               	movf	??___ftmul,w
  8405  0F8B  00B7               	movwf	??___ftmul+3
  8406  0F8C  0837               	movf	??___ftmul+3,w
  8407  0F8D  00BD               	movwf	___ftmul@sign
  8408  0F8E  0831               	movf	___ftmul@f2,w
  8409  0F8F  00B4               	movwf	??___ftmul
  8410  0F90  0832               	movf	___ftmul@f2+1,w
  8411  0F91  00B5               	movwf	??___ftmul+1
  8412  0F92  0833               	movf	___ftmul@f2+2,w
  8413  0F93  00B6               	movwf	??___ftmul+2
  8414  0F94  3010               	movlw	16
  8415  0F95                     u8835:	
  8416  0F95  36B6               	lsrf	??___ftmul+2,f
  8417  0F96  0CB5               	rrf	??___ftmul+1,f
  8418  0F97  0CB4               	rrf	??___ftmul,f
  8419  0F98  0B89               	decfsz	9,f
  8420  0F99  2F95               	goto	u8835
  8421  0F9A  0834               	movf	??___ftmul,w
  8422  0F9B  00B7               	movwf	??___ftmul+3
  8423  0F9C  0837               	movf	??___ftmul+3,w
  8424  0F9D  06BD               	xorwf	___ftmul@sign,f
  8425  0F9E  3080               	movlw	128
  8426  0F9F  00B4               	movwf	??___ftmul
  8427  0FA0  0834               	movf	??___ftmul,w
  8428  0FA1  05BD               	andwf	___ftmul@sign,f
  8429  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8430  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8431  0FA4  30FF               	movlw	255
  8432  0FA5  05B1               	andwf	___ftmul@f2,f
  8433  0FA6  30FF               	movlw	255
  8434  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8435  0FA8  3000               	movlw	0
  8436  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8437  0FAA  3000               	movlw	0
  8438  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8439  0FAC  3000               	movlw	0
  8440  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8441  0FAE  3000               	movlw	0
  8442  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8443  0FB0  3007               	movlw	7
  8444  0FB1  00B4               	movwf	??___ftmul
  8445  0FB2  0834               	movf	??___ftmul,w
  8446  0FB3  00BC               	movwf	___ftmul@cntr
  8447  0FB4                     l8533:	
  8448  0FB4  1C2E               	btfss	___ftmul@f1,0
  8449  0FB5  2FBC               	goto	l8537
  8450  0FB6  0831               	movf	___ftmul@f2,w
  8451  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8452  0FB8  0832               	movf	___ftmul@f2+1,w
  8453  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8454  0FBA  0833               	movf	___ftmul@f2+2,w
  8455  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8456  0FBC                     l8537:	
  8457  0FBC  3001               	movlw	1
  8458  0FBD                     u8855:	
  8459  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8460  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8461  0FBF  0CAE               	rrf	___ftmul@f1,f
  8462  0FC0  0B89               	decfsz	9,f
  8463  0FC1  2FBD               	goto	u8855
  8464  0FC2  3001               	movlw	1
  8465  0FC3                     u8865:	
  8466  0FC3  35B1               	lslf	___ftmul@f2,f
  8467  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8468  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8469  0FC6  0B89               	decfsz	9,f
  8470  0FC7  2FC3               	goto	u8865
  8471  0FC8  3001               	movlw	1
  8472  0FC9  02BC               	subwf	___ftmul@cntr,f
  8473  0FCA  1D03               	btfss	3,2
  8474  0FCB  2FB4               	goto	l8533
  8475  0FCC  3009               	movlw	9
  8476  0FCD  00B4               	movwf	??___ftmul
  8477  0FCE  0834               	movf	??___ftmul,w
  8478  0FCF  00BC               	movwf	___ftmul@cntr
  8479  0FD0                     l8545:	
  8480  0FD0  1C2E               	btfss	___ftmul@f1,0
  8481  0FD1  2FD8               	goto	l8549
  8482  0FD2  0831               	movf	___ftmul@f2,w
  8483  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8484  0FD4  0832               	movf	___ftmul@f2+1,w
  8485  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8486  0FD6  0833               	movf	___ftmul@f2+2,w
  8487  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8488  0FD8                     l8549:	
  8489  0FD8  3001               	movlw	1
  8490  0FD9                     u8895:	
  8491  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8492  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8493  0FDB  0CAE               	rrf	___ftmul@f1,f
  8494  0FDC  0B89               	decfsz	9,f
  8495  0FDD  2FD9               	goto	u8895
  8496  0FDE  3001               	movlw	1
  8497  0FDF                     u8905:	
  8498  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8499  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8500  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8501  0FE2  0B89               	decfsz	9,f
  8502  0FE3  2FDF               	goto	u8905
  8503  0FE4  3001               	movlw	1
  8504  0FE5  02BC               	subwf	___ftmul@cntr,f
  8505  0FE6  1D03               	btfss	3,2
  8506  0FE7  2FD0               	goto	l8545
  8507  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8508  0FE9  00A0               	movwf	___ftpack@arg
  8509  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8510  0FEB  00A1               	movwf	___ftpack@arg+1
  8511  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8512  0FED  00A2               	movwf	___ftpack@arg+2
  8513  0FEE  0838               	movf	___ftmul@exp,w
  8514  0FEF  00B4               	movwf	??___ftmul
  8515  0FF0  0834               	movf	??___ftmul,w
  8516  0FF1  00A3               	movwf	___ftpack@exp
  8517  0FF2  083D               	movf	___ftmul@sign,w
  8518  0FF3  00B5               	movwf	??___ftmul+1
  8519  0FF4  0835               	movf	??___ftmul+1,w
  8520  0FF5  00A4               	movwf	___ftpack@sign
  8521  0FF6  3188  200F         	fcall	___ftpack
  8522  0FF8  0020               	movlb	0	; select bank0
  8523  0FF9  0820               	movf	?___ftpack,w
  8524  0FFA  00AE               	movwf	?___ftmul
  8525  0FFB  0821               	movf	?___ftpack+1,w
  8526  0FFC  00AF               	movwf	?___ftmul+1
  8527  0FFD  0822               	movf	?___ftpack+2,w
  8528  0FFE  00B0               	movwf	?___ftmul+2
  8529  0FFF  0008               	return
  8530  1000                     __end_of___ftmul:	
  8531                           
  8532                           	psect	text35
  8533  0527                     __ptext35:	
  8534 ;; *************** function ___ftadd *****************
  8535 ;; Defined at:
  8536 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;  f1              3   30[BANK0 ] float 
  8539 ;;  f2              3   33[BANK0 ] float 
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;  exp1            1   42[BANK0 ] unsigned char 
  8542 ;;  exp2            1   41[BANK0 ] unsigned char 
  8543 ;;  sign            1   40[BANK0 ] unsigned char 
  8544 ;; Return value:  Size  Location     Type
  8545 ;;                  3   30[BANK0 ] float 
  8546 ;; Registers used:
  8547 ;;		wreg, status,2, status,0, pclath, cstack
  8548 ;; Tracked objects:
  8549 ;;		On entry : 0/0
  8550 ;;		On exit  : 0/0
  8551 ;;		Unchanged: 0/0
  8552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8553 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;Total ram usage:       13 bytes
  8558 ;; Hardware stack levels used:    1
  8559 ;; Hardware stack levels required when called:    6
  8560 ;; This function calls:
  8561 ;;		___ftpack
  8562 ;; This function is called by:
  8563 ;;		_getPercentValue
  8564 ;; This function uses a non-reentrant model
  8565 ;;
  8566                           
  8567                           
  8568                           ;psect for function ___ftadd
  8569  0527                     ___ftadd:	
  8570                           
  8571                           ;incstack = 0
  8572                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8573  0527  0020               	movlb	0	; select bank0
  8574  0528  083E               	movf	___ftadd@f1,w
  8575  0529  00C4               	movwf	??___ftadd
  8576  052A  083F               	movf	___ftadd@f1+1,w
  8577  052B  00C5               	movwf	??___ftadd+1
  8578  052C  0840               	movf	___ftadd@f1+2,w
  8579  052D  00C6               	movwf	??___ftadd+2
  8580  052E  1003               	clrc
  8581  052F  0D45               	rlf	??___ftadd+1,w
  8582  0530  0D46               	rlf	??___ftadd+2,w
  8583  0531  00C7               	movwf	??___ftadd+3
  8584  0532  0847               	movf	??___ftadd+3,w
  8585  0533  00CA               	movwf	___ftadd@exp1
  8586  0534  0841               	movf	___ftadd@f2,w
  8587  0535  00C4               	movwf	??___ftadd
  8588  0536  0842               	movf	___ftadd@f2+1,w
  8589  0537  00C5               	movwf	??___ftadd+1
  8590  0538  0843               	movf	___ftadd@f2+2,w
  8591  0539  00C6               	movwf	??___ftadd+2
  8592  053A  1003               	clrc
  8593  053B  0D45               	rlf	??___ftadd+1,w
  8594  053C  0D46               	rlf	??___ftadd+2,w
  8595  053D  00C7               	movwf	??___ftadd+3
  8596  053E  0847               	movf	??___ftadd+3,w
  8597  053F  00C9               	movwf	___ftadd@exp2
  8598  0540  084A               	movf	___ftadd@exp1,w
  8599  0541  1903               	btfsc	3,2
  8600  0542  2D4F               	goto	l8403
  8601  0543  0849               	movf	___ftadd@exp2,w
  8602  0544  024A               	subwf	___ftadd@exp1,w
  8603  0545  1803               	skipnc
  8604  0546  2D56               	goto	l8407
  8605  0547  034A               	decf	___ftadd@exp1,w
  8606  0548  3AFF               	xorlw	255
  8607  0549  0749               	addwf	___ftadd@exp2,w
  8608  054A  00C4               	movwf	??___ftadd
  8609  054B  3019               	movlw	25
  8610  054C  0244               	subwf	??___ftadd,w
  8611  054D  1C03               	skipc
  8612  054E  2D56               	goto	l8407
  8613  054F                     l8403:	
  8614  054F  0841               	movf	___ftadd@f2,w
  8615  0550  00BE               	movwf	?___ftadd
  8616  0551  0842               	movf	___ftadd@f2+1,w
  8617  0552  00BF               	movwf	?___ftadd+1
  8618  0553  0843               	movf	___ftadd@f2+2,w
  8619  0554  00C0               	movwf	?___ftadd+2
  8620  0555  0008               	return
  8621  0556                     l8407:	
  8622  0556  0849               	movf	___ftadd@exp2,w
  8623  0557  1903               	btfsc	3,2
  8624  0558  0008               	return
  8625  0559  084A               	movf	___ftadd@exp1,w
  8626  055A  0249               	subwf	___ftadd@exp2,w
  8627  055B  1803               	skipnc
  8628  055C  2D65               	goto	l8413
  8629  055D  0349               	decf	___ftadd@exp2,w
  8630  055E  3AFF               	xorlw	255
  8631  055F  074A               	addwf	___ftadd@exp1,w
  8632  0560  00C4               	movwf	??___ftadd
  8633  0561  3019               	movlw	25
  8634  0562  0244               	subwf	??___ftadd,w
  8635  0563  1803               	btfsc	3,0
  8636  0564  0008               	return
  8637  0565                     l8413:	
  8638  0565  3006               	movlw	6
  8639  0566  00C4               	movwf	??___ftadd
  8640  0567  0844               	movf	??___ftadd,w
  8641  0568  00C8               	movwf	___ftadd@sign
  8642  0569  1BC0               	btfsc	___ftadd@f1+2,7
  8643  056A  17C8               	bsf	___ftadd@sign,7
  8644  056B  1BC3               	btfsc	___ftadd@f2+2,7
  8645  056C  1748               	bsf	___ftadd@sign,6
  8646  056D  17BF               	bsf	___ftadd@f1+1,7
  8647  056E  30FF               	movlw	255
  8648  056F  05BE               	andwf	___ftadd@f1,f
  8649  0570  30FF               	movlw	255
  8650  0571  05BF               	andwf	___ftadd@f1+1,f
  8651  0572  3000               	movlw	0
  8652  0573  05C0               	andwf	___ftadd@f1+2,f
  8653  0574  17C2               	bsf	___ftadd@f2+1,7
  8654  0575  30FF               	movlw	255
  8655  0576  05C1               	andwf	___ftadd@f2,f
  8656  0577  30FF               	movlw	255
  8657  0578  05C2               	andwf	___ftadd@f2+1,f
  8658  0579  3000               	movlw	0
  8659  057A  05C3               	andwf	___ftadd@f2+2,f
  8660  057B  0849               	movf	___ftadd@exp2,w
  8661  057C  024A               	subwf	___ftadd@exp1,w
  8662  057D  1803               	skipnc
  8663  057E  2DA1               	goto	l8435
  8664  057F                     l8425:	
  8665  057F  3001               	movlw	1
  8666  0580                     u8585:	
  8667  0580  35C1               	lslf	___ftadd@f2,f
  8668  0581  0DC2               	rlf	___ftadd@f2+1,f
  8669  0582  0DC3               	rlf	___ftadd@f2+2,f
  8670  0583  0B89               	decfsz	9,f
  8671  0584  2D80               	goto	u8585
  8672  0585  3001               	movlw	1
  8673  0586  02C9               	subwf	___ftadd@exp2,f
  8674  0587  0849               	movf	___ftadd@exp2,w
  8675  0588  064A               	xorwf	___ftadd@exp1,w
  8676  0589  1903               	skipnz
  8677  058A  2D9C               	goto	l8433
  8678  058B  3001               	movlw	1
  8679  058C  02C8               	subwf	___ftadd@sign,f
  8680  058D  0848               	movf	___ftadd@sign,w
  8681  058E  3907               	andlw	7
  8682  058F  1903               	btfsc	3,2
  8683  0590  2D9C               	goto	l8433
  8684  0591  2D7F               	goto	l8425
  8685  0592                     l8431:	
  8686  0592  3001               	movlw	1
  8687  0593                     u8615:	
  8688  0593  36C0               	lsrf	___ftadd@f1+2,f
  8689  0594  0CBF               	rrf	___ftadd@f1+1,f
  8690  0595  0CBE               	rrf	___ftadd@f1,f
  8691  0596  0B89               	decfsz	9,f
  8692  0597  2D93               	goto	u8615
  8693  0598  3001               	movlw	1
  8694  0599  00C4               	movwf	??___ftadd
  8695  059A  0844               	movf	??___ftadd,w
  8696  059B  07CA               	addwf	___ftadd@exp1,f
  8697  059C                     l8433:	
  8698  059C  084A               	movf	___ftadd@exp1,w
  8699  059D  0649               	xorwf	___ftadd@exp2,w
  8700  059E  1903               	btfsc	3,2
  8701  059F  2DC6               	goto	l2938
  8702  05A0  2D92               	goto	l8431
  8703  05A1                     l8435:	
  8704  05A1  084A               	movf	___ftadd@exp1,w
  8705  05A2  0249               	subwf	___ftadd@exp2,w
  8706  05A3  1803               	skipnc
  8707  05A4  2DC6               	goto	l2938
  8708  05A5                     l8437:	
  8709  05A5  3001               	movlw	1
  8710  05A6                     u8645:	
  8711  05A6  35BE               	lslf	___ftadd@f1,f
  8712  05A7  0DBF               	rlf	___ftadd@f1+1,f
  8713  05A8  0DC0               	rlf	___ftadd@f1+2,f
  8714  05A9  0B89               	decfsz	9,f
  8715  05AA  2DA6               	goto	u8645
  8716  05AB  3001               	movlw	1
  8717  05AC  02CA               	subwf	___ftadd@exp1,f
  8718  05AD  0849               	movf	___ftadd@exp2,w
  8719  05AE  064A               	xorwf	___ftadd@exp1,w
  8720  05AF  1903               	skipnz
  8721  05B0  2DC2               	goto	l8445
  8722  05B1  3001               	movlw	1
  8723  05B2  02C8               	subwf	___ftadd@sign,f
  8724  05B3  0848               	movf	___ftadd@sign,w
  8725  05B4  3907               	andlw	7
  8726  05B5  1903               	btfsc	3,2
  8727  05B6  2DC2               	goto	l8445
  8728  05B7  2DA5               	goto	l8437
  8729  05B8                     l8443:	
  8730  05B8  3001               	movlw	1
  8731  05B9                     u8675:	
  8732  05B9  36C3               	lsrf	___ftadd@f2+2,f
  8733  05BA  0CC2               	rrf	___ftadd@f2+1,f
  8734  05BB  0CC1               	rrf	___ftadd@f2,f
  8735  05BC  0B89               	decfsz	9,f
  8736  05BD  2DB9               	goto	u8675
  8737  05BE  3001               	movlw	1
  8738  05BF  00C4               	movwf	??___ftadd
  8739  05C0  0844               	movf	??___ftadd,w
  8740  05C1  07C9               	addwf	___ftadd@exp2,f
  8741  05C2                     l8445:	
  8742  05C2  084A               	movf	___ftadd@exp1,w
  8743  05C3  0649               	xorwf	___ftadd@exp2,w
  8744  05C4  1D03               	skipz
  8745  05C5  2DB8               	goto	l8443
  8746  05C6                     l2938:	
  8747  05C6  1FC8               	btfss	___ftadd@sign,7
  8748  05C7  2DD8               	goto	l8449
  8749  05C8  30FF               	movlw	255
  8750  05C9  06BE               	xorwf	___ftadd@f1,f
  8751  05CA  30FF               	movlw	255
  8752  05CB  06BF               	xorwf	___ftadd@f1+1,f
  8753  05CC  30FF               	movlw	255
  8754  05CD  06C0               	xorwf	___ftadd@f1+2,f
  8755  05CE  3001               	movlw	1
  8756  05CF  07BE               	addwf	___ftadd@f1,f
  8757  05D0  3000               	movlw	0
  8758  05D1  1803               	skipnc
  8759  05D2  3001               	movlw	1
  8760  05D3  07BF               	addwf	___ftadd@f1+1,f
  8761  05D4  3000               	movlw	0
  8762  05D5  1803               	skipnc
  8763  05D6  3001               	movlw	1
  8764  05D7  07C0               	addwf	___ftadd@f1+2,f
  8765  05D8                     l8449:	
  8766  05D8  1F48               	btfss	___ftadd@sign,6
  8767  05D9  2DEA               	goto	l8453
  8768  05DA  30FF               	movlw	255
  8769  05DB  06C1               	xorwf	___ftadd@f2,f
  8770  05DC  30FF               	movlw	255
  8771  05DD  06C2               	xorwf	___ftadd@f2+1,f
  8772  05DE  30FF               	movlw	255
  8773  05DF  06C3               	xorwf	___ftadd@f2+2,f
  8774  05E0  3001               	movlw	1
  8775  05E1  07C1               	addwf	___ftadd@f2,f
  8776  05E2  3000               	movlw	0
  8777  05E3  1803               	skipnc
  8778  05E4  3001               	movlw	1
  8779  05E5  07C2               	addwf	___ftadd@f2+1,f
  8780  05E6  3000               	movlw	0
  8781  05E7  1803               	skipnc
  8782  05E8  3001               	movlw	1
  8783  05E9  07C3               	addwf	___ftadd@f2+2,f
  8784  05EA                     l8453:	
  8785  05EA  01C8               	clrf	___ftadd@sign
  8786  05EB  083E               	movf	___ftadd@f1,w
  8787  05EC  07C1               	addwf	___ftadd@f2,f
  8788  05ED  083F               	movf	___ftadd@f1+1,w
  8789  05EE  3DC2               	addwfc	___ftadd@f2+1,f
  8790  05EF  0840               	movf	___ftadd@f1+2,w
  8791  05F0  3DC3               	addwfc	___ftadd@f2+2,f
  8792  05F1  1FC3               	btfss	___ftadd@f2+2,7
  8793  05F2  2E05               	goto	l8463
  8794  05F3  30FF               	movlw	255
  8795  05F4  06C1               	xorwf	___ftadd@f2,f
  8796  05F5  30FF               	movlw	255
  8797  05F6  06C2               	xorwf	___ftadd@f2+1,f
  8798  05F7  30FF               	movlw	255
  8799  05F8  06C3               	xorwf	___ftadd@f2+2,f
  8800  05F9  3001               	movlw	1
  8801  05FA  07C1               	addwf	___ftadd@f2,f
  8802  05FB  3000               	movlw	0
  8803  05FC  1803               	skipnc
  8804  05FD  3001               	movlw	1
  8805  05FE  07C2               	addwf	___ftadd@f2+1,f
  8806  05FF  3000               	movlw	0
  8807  0600  1803               	skipnc
  8808  0601  3001               	movlw	1
  8809  0602  07C3               	addwf	___ftadd@f2+2,f
  8810  0603  01C8               	clrf	___ftadd@sign
  8811  0604  0AC8               	incf	___ftadd@sign,f
  8812  0605                     l8463:	
  8813  0605  0841               	movf	___ftadd@f2,w
  8814  0606  00A0               	movwf	___ftpack@arg
  8815  0607  0842               	movf	___ftadd@f2+1,w
  8816  0608  00A1               	movwf	___ftpack@arg+1
  8817  0609  0843               	movf	___ftadd@f2+2,w
  8818  060A  00A2               	movwf	___ftpack@arg+2
  8819  060B  084A               	movf	___ftadd@exp1,w
  8820  060C  00C4               	movwf	??___ftadd
  8821  060D  0844               	movf	??___ftadd,w
  8822  060E  00A3               	movwf	___ftpack@exp
  8823  060F  0848               	movf	___ftadd@sign,w
  8824  0610  00C5               	movwf	??___ftadd+1
  8825  0611  0845               	movf	??___ftadd+1,w
  8826  0612  00A4               	movwf	___ftpack@sign
  8827  0613  3188  200F         	fcall	___ftpack
  8828  0615  0020               	movlb	0	; select bank0
  8829  0616  0820               	movf	?___ftpack,w
  8830  0617  00BE               	movwf	?___ftadd
  8831  0618  0821               	movf	?___ftpack+1,w
  8832  0619  00BF               	movwf	?___ftadd+1
  8833  061A  0822               	movf	?___ftpack+2,w
  8834  061B  00C0               	movwf	?___ftadd+2
  8835  061C  0008               	return
  8836  061D                     __end_of___ftadd:	
  8837                           
  8838                           	psect	text36
  8839  1C88                     __ptext36:	
  8840 ;; *************** function _setMemory_Modify *****************
  8841 ;; Defined at:
  8842 ;;		line 1000 in file "../src/MCU_B1.c"
  8843 ;; Parameters:    Size  Location     Type
  8844 ;;  command         1    wreg     unsigned char 
  8845 ;; Auto vars:     Size  Location     Type
  8846 ;;  command         1    1[BANK0 ] unsigned char 
  8847 ;; Return value:  Size  Location     Type
  8848 ;;		None               void
  8849 ;; Registers used:
  8850 ;;		wreg, status,2, status,0
  8851 ;; Tracked objects:
  8852 ;;		On entry : 0/0
  8853 ;;		On exit  : 0/0
  8854 ;;		Unchanged: 0/0
  8855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8857 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8858 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8859 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8860 ;;Total ram usage:        2 bytes
  8861 ;; Hardware stack levels used:    1
  8862 ;; Hardware stack levels required when called:    5
  8863 ;; This function calls:
  8864 ;;		Nothing
  8865 ;; This function is called by:
  8866 ;;		_setLog_Code
  8867 ;;		_setRFSW_AdjControl
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           
  8872                           ;psect for function _setMemory_Modify
  8873  1C88                     _setMemory_Modify:	
  8874                           
  8875                           ;incstack = 0
  8876                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8877                           ;setMemory_Modify@command stored from wreg
  8878  1C88  0020               	movlb	0	; select bank0
  8879  1C89  00A1               	movwf	setMemory_Modify@command
  8880                           
  8881                           ;MCU_B1.c: 1001: Memory.Modify = command == 1 ? 1 : 0;
  8882  1C8A  0821               	movf	setMemory_Modify@command,w
  8883  1C8B  3A01               	xorlw	1
  8884  1C8C  3000               	movlw	0
  8885  1C8D  1903               	skipnz
  8886  1C8E  3001               	movlw	1
  8887  1C8F  00A0               	movwf	??_setMemory_Modify
  8888  1C90  0024               	movlb	4	; select bank4
  8889  1C91  0844               	movf	(_Memory^(0+512)+36),w
  8890  1C92  0020               	movlb	0	; select bank0
  8891  1C93  0620               	xorwf	??_setMemory_Modify,w
  8892  1C94  39FE               	andlw	-2
  8893  1C95  0620               	xorwf	??_setMemory_Modify,w
  8894  1C96  0024               	movlb	4	; select bank4
  8895  1C97  00C4               	movwf	(_Memory^(0+512)+36)
  8896                           
  8897                           ;MCU_B1.c: 1002: Memory.Time = 0;
  8898  1C98  01C2               	clrf	(_Memory^(0+512)+34)
  8899  1C99  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8900  1C9A  0008               	return
  8901  1C9B                     __end_of_setMemory_Modify:	
  8902                           
  8903                           	psect	text37
  8904  1C0A                     __ptext37:	
  8905 ;; *************** function _getRF_KeyStatus *****************
  8906 ;; Defined at:
  8907 ;;		line 190 in file "../src/RF_Control_B1.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;		None
  8910 ;; Auto vars:     Size  Location     Type
  8911 ;;  key             1    1[BANK0 ] unsigned char 
  8912 ;; Return value:  Size  Location     Type
  8913 ;;                  1    wreg      unsigned char 
  8914 ;; Registers used:
  8915 ;;		wreg, status,2
  8916 ;; Tracked objects:
  8917 ;;		On entry : 0/0
  8918 ;;		On exit  : 0/0
  8919 ;;		Unchanged: 0/0
  8920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8922 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;Total ram usage:        3 bytes
  8926 ;; Hardware stack levels used:    1
  8927 ;; Hardware stack levels required when called:    5
  8928 ;; This function calls:
  8929 ;;		Nothing
  8930 ;; This function is called by:
  8931 ;;		_setRF_Main
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           
  8936                           ;psect for function _getRF_KeyStatus
  8937  1C0A                     _getRF_KeyStatus:	
  8938                           
  8939                           ;RF_Control_B1.c: 191: char key = 0;
  8940                           
  8941                           ;incstack = 0
  8942                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8943  1C0A  0020               	movlb	0	; select bank0
  8944  1C0B  01A1               	clrf	getRF_KeyStatus@key
  8945                           
  8946                           ;RF_Control_B1.c: 197: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8947  1C0C  01A2               	clrf	_getRF_KeyStatus$5689
  8948  1C0D  0AA2               	incf	_getRF_KeyStatus$5689,f
  8949  1C0E  1F0C               	btfss	12,6	;volatile
  8950  1C0F  1A0C               	btfsc	12,4	;volatile
  8951  1C10  2C15               	goto	l9501
  8952  1C11  1C0C               	btfss	12,0	;volatile
  8953  1C12  188D               	btfsc	13,1	;volatile
  8954  1C13  2C15               	goto	l9501
  8955  1C14  01A2               	clrf	_getRF_KeyStatus$5689
  8956  1C15                     l9501:	
  8957  1C15  0822               	movf	_getRF_KeyStatus$5689,w
  8958  1C16  00A0               	movwf	??_getRF_KeyStatus
  8959  1C17  0820               	movf	??_getRF_KeyStatus,w
  8960  1C18  00A1               	movwf	getRF_KeyStatus@key
  8961                           
  8962                           ;RF_Control_B1.c: 203: return key;
  8963  1C19  0821               	movf	getRF_KeyStatus@key,w
  8964  1C1A  0008               	return
  8965  1C1B                     __end_of_getRF_KeyStatus:	
  8966                           
  8967                           	psect	text38
  8968  1BF9                     __ptext38:	
  8969 ;; *************** function _getBuz_GO *****************
  8970 ;; Defined at:
  8971 ;;		line 82 in file "../src/Buzzer_B1.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;		None
  8974 ;; Auto vars:     Size  Location     Type
  8975 ;;  i               2    4[BANK0 ] int 
  8976 ;; Return value:  Size  Location     Type
  8977 ;;                  2    0[BANK0 ] int 
  8978 ;; Registers used:
  8979 ;;		wreg, status,2, status,0
  8980 ;; Tracked objects:
  8981 ;;		On entry : 0/0
  8982 ;;		On exit  : 0/0
  8983 ;;		Unchanged: 0/0
  8984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8985 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;Total ram usage:        6 bytes
  8990 ;; Hardware stack levels used:    1
  8991 ;; Hardware stack levels required when called:    5
  8992 ;; This function calls:
  8993 ;;		Nothing
  8994 ;; This function is called by:
  8995 ;;		_setRF_Main
  8996 ;; This function uses a non-reentrant model
  8997 ;;
  8998                           
  8999                           
  9000                           ;psect for function _getBuz_GO
  9001  1BF9                     _getBuz_GO:	
  9002                           
  9003                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9004                           
  9005                           ;incstack = 0
  9006                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9007  1BF9  0021               	movlb	1	; select bank1
  9008  1BFA  0C30               	rrf	_Buz1^(0+128),w
  9009  1BFB  3901               	andlw	1
  9010  1BFC  0020               	movlb	0	; select bank0
  9011  1BFD  00A2               	movwf	??_getBuz_GO
  9012  1BFE  01A3               	clrf	??_getBuz_GO+1
  9013  1BFF  0822               	movf	??_getBuz_GO,w
  9014  1C00  00A4               	movwf	getBuz_GO@i
  9015  1C01  0823               	movf	??_getBuz_GO+1,w
  9016  1C02  00A5               	movwf	getBuz_GO@i+1
  9017                           
  9018                           ;Buzzer_B1.c: 84: return i;
  9019  1C03  0825               	movf	getBuz_GO@i+1,w
  9020  1C04  01A1               	clrf	?_getBuz_GO+1
  9021  1C05  07A1               	addwf	?_getBuz_GO+1,f
  9022  1C06  0824               	movf	getBuz_GO@i,w
  9023  1C07  01A0               	clrf	?_getBuz_GO
  9024  1C08  07A0               	addwf	?_getBuz_GO,f
  9025  1C09  0008               	return
  9026  1C0A                     __end_of_getBuz_GO:	
  9027                           
  9028                           	psect	text39
  9029  0932                     __ptext39:	
  9030 ;; *************** function _CC2500_TxData *****************
  9031 ;; Defined at:
  9032 ;;		line 32 in file "../src/CC2500_B1.c"
  9033 ;; Parameters:    Size  Location     Type
  9034 ;;		None
  9035 ;; Auto vars:     Size  Location     Type
  9036 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9037 ;; Return value:  Size  Location     Type
  9038 ;;		None               void
  9039 ;; Registers used:
  9040 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9041 ;; Tracked objects:
  9042 ;;		On entry : 0/0
  9043 ;;		On exit  : 0/0
  9044 ;;		Unchanged: 0/0
  9045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9048 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;Total ram usage:        2 bytes
  9051 ;; Hardware stack levels used:    1
  9052 ;; Hardware stack levels required when called:    7
  9053 ;; This function calls:
  9054 ;;		_CC2500_WriteByte
  9055 ;;		_CC2500_WriteCommand
  9056 ;;		_Timeout_Counter
  9057 ;;		_set_TimeoutCleared
  9058 ;; This function is called by:
  9059 ;;		_setRF_Main
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           
  9064                           ;psect for function _CC2500_TxData
  9065  0932                     _CC2500_TxData:	
  9066                           
  9067                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9068                           ;CC2500_B1.c: 35: RC4 = 0;
  9069                           
  9070                           ;incstack = 0
  9071                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9072  0932  0020               	movlb	0	; select bank0
  9073  0933  120E               	bcf	14,4	;volatile
  9074                           
  9075                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9076  0934  307F               	movlw	127
  9077  0935  00A4               	movwf	??_CC2500_TxData
  9078  0936  0824               	movf	??_CC2500_TxData,w
  9079  0937  0021               	movlb	1	; select bank1
  9080  0938  00D2               	movwf	_SPI0Buffer^(0+128)
  9081                           
  9082                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9083  0939  293D               	goto	l9159
  9084  093A                     l9157:	
  9085                           
  9086                           ;CC2500_B1.c: 38: Timeout_Counter();
  9087  093A  319C  24FE  3189   	fcall	_Timeout_Counter
  9088  093D                     l9159:	
  9089  093D  0020               	movlb	0	; select bank0
  9090  093E  1D0E               	btfss	14,2	;volatile
  9091  093F  2943               	goto	l9163
  9092  0940  0021               	movlb	1	; select bank1
  9093  0941  1D2D               	btfss	(_myMain^(0+128)+13),2
  9094  0942  293A               	goto	l9157
  9095  0943                     l9163:	
  9096                           
  9097                           ;CC2500_B1.c: 39: };
  9098                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9099  0943  319A  22D6  3189   	fcall	_set_TimeoutCleared
  9100                           
  9101                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9102  0946  319D  2554  3189   	fcall	_CC2500_WriteByte
  9103                           
  9104                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9105  0949  0021               	movlb	1	; select bank1
  9106  094A  0854               	movf	_Tx_Length^(0+128),w
  9107  094B  0020               	movlb	0	; select bank0
  9108  094C  00A4               	movwf	??_CC2500_TxData
  9109  094D  0824               	movf	??_CC2500_TxData,w
  9110  094E  0021               	movlb	1	; select bank1
  9111  094F  00D2               	movwf	_SPI0Buffer^(0+128)
  9112                           
  9113                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9114  0950  319D  2554  3189   	fcall	_CC2500_WriteByte
  9115                           
  9116                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9117  0953  0020               	movlb	0	; select bank0
  9118  0954  01A5               	clrf	CC2500_TxData@loop_e
  9119  0955                     l9177:	
  9120  0955  0021               	movlb	1	; select bank1
  9121  0956  0854               	movf	_Tx_Length^(0+128),w
  9122  0957  0020               	movlb	0	; select bank0
  9123  0958  0225               	subwf	CC2500_TxData@loop_e,w
  9124  0959  1803               	btfsc	3,0
  9125  095A  296E               	goto	l255
  9126                           
  9127                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9128  095B  0825               	movf	CC2500_TxData@loop_e,w
  9129  095C  3EA0               	addlw	_RF_Data& (0+255)
  9130  095D  0086               	movwf	6
  9131  095E  3001               	movlw	1	; select bank3/4
  9132  095F  0087               	movwf	7
  9133  0960  0801               	movf	1,w
  9134  0961  00A4               	movwf	??_CC2500_TxData
  9135  0962  0824               	movf	??_CC2500_TxData,w
  9136  0963  0021               	movlb	1	; select bank1
  9137  0964  00D2               	movwf	_SPI0Buffer^(0+128)
  9138                           
  9139                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9140  0965  319D  2554  3189   	fcall	_CC2500_WriteByte
  9141  0968  3001               	movlw	1
  9142  0969  0020               	movlb	0	; select bank0
  9143  096A  00A4               	movwf	??_CC2500_TxData
  9144  096B  0824               	movf	??_CC2500_TxData,w
  9145  096C  07A5               	addwf	CC2500_TxData@loop_e,f
  9146  096D  2955               	goto	l9177
  9147  096E                     l255:	
  9148                           
  9149                           ;CC2500_B1.c: 48: }
  9150                           ;CC2500_B1.c: 49: RC4 = 1;
  9151  096E  160E               	bsf	14,4	;volatile
  9152                           
  9153                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9154  096F  3035               	movlw	53
  9155  0970  319D  2586  3189   	fcall	_CC2500_WriteCommand
  9156                           
  9157                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9158  0973  2977               	goto	l9183
  9159  0974                     l9181:	
  9160                           
  9161                           ;CC2500_B1.c: 52: Timeout_Counter();
  9162  0974  319C  24FE  3189   	fcall	_Timeout_Counter
  9163  0977                     l9183:	
  9164  0977  0020               	movlb	0	; select bank0
  9165  0978  180D               	btfsc	13,0	;volatile
  9166  0979  297D               	goto	l9187
  9167  097A  0021               	movlb	1	; select bank1
  9168  097B  1D2D               	btfss	(_myMain^(0+128)+13),2
  9169  097C  2974               	goto	l9181
  9170  097D                     l9187:	
  9171                           
  9172                           ;CC2500_B1.c: 53: };
  9173                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9174  097D  319A  22D6  3189   	fcall	_set_TimeoutCleared
  9175                           
  9176                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9177  0980  2984               	goto	l9191
  9178  0981                     l9189:	
  9179                           
  9180                           ;CC2500_B1.c: 57: Timeout_Counter();
  9181  0981  319C  24FE  3189   	fcall	_Timeout_Counter
  9182  0984                     l9191:	
  9183  0984  0020               	movlb	0	; select bank0
  9184  0985  1C0D               	btfss	13,0	;volatile
  9185  0986  298A               	goto	l9195
  9186  0987  0021               	movlb	1	; select bank1
  9187  0988  1D2D               	btfss	(_myMain^(0+128)+13),2
  9188  0989  2981               	goto	l9189
  9189  098A                     l9195:	
  9190                           
  9191                           ;CC2500_B1.c: 58: };
  9192                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9193  098A  319A  22D6  3189   	fcall	_set_TimeoutCleared
  9194                           
  9195                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9196  098D  3036               	movlw	54
  9197  098E  319D  2586  3189   	fcall	_CC2500_WriteCommand
  9198                           
  9199                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9200  0991  303B               	movlw	59
  9201  0992  319D  2586  3189   	fcall	_CC2500_WriteCommand
  9202                           
  9203                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9204  0995  303A               	movlw	58
  9205  0996  319D  2586         	fcall	_CC2500_WriteCommand
  9206                           
  9207                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9208  0998  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9209  0999  0008               	return
  9210  099A                     __end_of_CC2500_TxData:	
  9211                           
  9212                           	psect	text40
  9213  0AE3                     __ptext40:	
  9214 ;; *************** function _CC2500_RxData *****************
  9215 ;; Defined at:
  9216 ;;		line 70 in file "../src/CC2500_B1.c"
  9217 ;; Parameters:    Size  Location     Type
  9218 ;;		None
  9219 ;; Auto vars:     Size  Location     Type
  9220 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9221 ;; Return value:  Size  Location     Type
  9222 ;;		None               void
  9223 ;; Registers used:
  9224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9225 ;; Tracked objects:
  9226 ;;		On entry : 0/0
  9227 ;;		On exit  : 0/0
  9228 ;;		Unchanged: 0/0
  9229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9232 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9233 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;Total ram usage:        2 bytes
  9235 ;; Hardware stack levels used:    1
  9236 ;; Hardware stack levels required when called:    7
  9237 ;; This function calls:
  9238 ;;		_CC2500_ReadByte
  9239 ;;		_CC2500_ReadStatus
  9240 ;;		_CC2500_WriteByte
  9241 ;;		_Timeout_Counter
  9242 ;;		_set_TimeoutCleared
  9243 ;; This function is called by:
  9244 ;;		_setRF_Main
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           
  9249                           ;psect for function _CC2500_RxData
  9250  0AE3                     _CC2500_RxData:	
  9251                           
  9252                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9253                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9254                           
  9255                           ;incstack = 0
  9256                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9257  0AE3  0020               	movlb	0	; select bank0
  9258  0AE4  180D               	btfsc	13,0	;volatile
  9259  0AE5  2AEA               	goto	l9211
  9260  0AE6  2AF3               	goto	l9217
  9261  0AE7                     l9209:	
  9262                           ;CC2500_B1.c: 76: {
  9263                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9264                           
  9265                           
  9266                           ;CC2500_B1.c: 78: Timeout_Counter();
  9267  0AE7  319C  24FE  318A   	fcall	_Timeout_Counter
  9268  0AEA                     l9211:	
  9269  0AEA  0020               	movlb	0	; select bank0
  9270  0AEB  1C0D               	btfss	13,0	;volatile
  9271  0AEC  2AF0               	goto	l9215
  9272  0AED  0021               	movlb	1	; select bank1
  9273  0AEE  1D2D               	btfss	(_myMain^(0+128)+13),2
  9274  0AEF  2AE7               	goto	l9209
  9275  0AF0                     l9215:	
  9276                           
  9277                           ;CC2500_B1.c: 79: };
  9278                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9279  0AF0  319A  22D6  318A   	fcall	_set_TimeoutCleared
  9280  0AF3                     l9217:	
  9281                           
  9282                           ;CC2500_B1.c: 81: }
  9283                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9284  0AF3  303B               	movlw	59
  9285  0AF4  319F  273D  318A   	fcall	_CC2500_ReadStatus
  9286                           
  9287                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9288  0AF7  0021               	movlb	1	; select bank1
  9289  0AF8  0857               	movf	_s_data^(0+128),w
  9290  0AF9  1903               	btfsc	3,2
  9291  0AFA  0008               	return
  9292                           
  9293                           ;CC2500_B1.c: 86: RC4 = 0;
  9294  0AFB  0020               	movlb	0	; select bank0
  9295  0AFC  120E               	bcf	14,4	;volatile
  9296                           
  9297                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9298  0AFD  30FF               	movlw	255
  9299  0AFE  00A4               	movwf	??_CC2500_RxData
  9300  0AFF  0824               	movf	??_CC2500_RxData,w
  9301  0B00  0021               	movlb	1	; select bank1
  9302  0B01  00D2               	movwf	_SPI0Buffer^(0+128)
  9303                           
  9304                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9305  0B02  2B09               	goto	l9227
  9306  0B03                     l9229:	
  9307  0B03  0021               	movlb	1	; select bank1
  9308  0B04  192D               	btfsc	(_myMain^(0+128)+13),2
  9309  0B05  2B0C               	goto	l280
  9310                           
  9311                           ;CC2500_B1.c: 89: Timeout_Counter();
  9312  0B06  319C  24FE  318A   	fcall	_Timeout_Counter
  9313  0B09                     l9227:	
  9314  0B09  0020               	movlb	0	; select bank0
  9315  0B0A  190E               	btfsc	14,2	;volatile
  9316  0B0B  2B03               	goto	l9229
  9317  0B0C                     l280:	
  9318                           
  9319                           ;CC2500_B1.c: 90: };
  9320                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9321  0B0C  0021               	movlb	1	; select bank1
  9322  0B0D  192D               	btfsc	(_myMain^(0+128)+13),2
  9323  0B0E  2B53               	goto	l281
  9324                           
  9325                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9326  0B0F  319D  2554  318A   	fcall	_CC2500_WriteByte
  9327                           
  9328                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9329  0B12  319D  25D6  318A   	fcall	_CC2500_ReadByte
  9330                           
  9331                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9332  0B15  0021               	movlb	1	; select bank1
  9333  0B16  0852               	movf	_SPI0Buffer^(0+128),w
  9334  0B17  0020               	movlb	0	; select bank0
  9335  0B18  00A4               	movwf	??_CC2500_RxData
  9336  0B19  0824               	movf	??_CC2500_RxData,w
  9337  0B1A  0021               	movlb	1	; select bank1
  9338  0B1B  00D1               	movwf	_Rx_Length^(0+128)
  9339                           
  9340                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9341  0B1C  0020               	movlb	0	; select bank0
  9342  0B1D  01A5               	clrf	CC2500_RxData@loop_f
  9343  0B1E                     l9243:	
  9344  0B1E  0021               	movlb	1	; select bank1
  9345  0B1F  0851               	movf	_Rx_Length^(0+128),w
  9346  0B20  0020               	movlb	0	; select bank0
  9347  0B21  0225               	subwf	CC2500_RxData@loop_f,w
  9348  0B22  1803               	btfsc	3,0
  9349  0B23  2B37               	goto	l9245
  9350                           
  9351                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9352  0B24  319D  25D6  318A   	fcall	_CC2500_ReadByte
  9353                           
  9354                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9355  0B27  0021               	movlb	1	; select bank1
  9356  0B28  0852               	movf	_SPI0Buffer^(0+128),w
  9357  0B29  0020               	movlb	0	; select bank0
  9358  0B2A  00A4               	movwf	??_CC2500_RxData
  9359  0B2B  0825               	movf	CC2500_RxData@loop_f,w
  9360  0B2C  3EA0               	addlw	_RF_Data& (0+255)
  9361  0B2D  0086               	movwf	6
  9362  0B2E  3001               	movlw	1	; select bank3/4
  9363  0B2F  0087               	movwf	7
  9364  0B30  0824               	movf	??_CC2500_RxData,w
  9365  0B31  0081               	movwf	1
  9366  0B32  3001               	movlw	1
  9367  0B33  00A4               	movwf	??_CC2500_RxData
  9368  0B34  0824               	movf	??_CC2500_RxData,w
  9369  0B35  07A5               	addwf	CC2500_RxData@loop_f,f
  9370  0B36  2B1E               	goto	l9243
  9371  0B37                     l9245:	
  9372                           
  9373                           ;CC2500_B1.c: 99: }
  9374                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9375  0B37  319D  25D6  318A   	fcall	_CC2500_ReadByte
  9376                           
  9377                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9378  0B3A  0021               	movlb	1	; select bank1
  9379  0B3B  0852               	movf	_SPI0Buffer^(0+128),w
  9380  0B3C  0020               	movlb	0	; select bank0
  9381  0B3D  00A4               	movwf	??_CC2500_RxData
  9382  0B3E  0824               	movf	??_CC2500_RxData,w
  9383  0B3F  0021               	movlb	1	; select bank1
  9384  0B40  00D0               	movwf	_RSSI^(0+128)
  9385                           
  9386                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9387  0B41  319D  25D6  318A   	fcall	_CC2500_ReadByte
  9388                           
  9389                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9390  0B44  0021               	movlb	1	; select bank1
  9391  0B45  0852               	movf	_SPI0Buffer^(0+128),w
  9392  0B46  0020               	movlb	0	; select bank0
  9393  0B47  00A4               	movwf	??_CC2500_RxData
  9394  0B48  0824               	movf	??_CC2500_RxData,w
  9395  0B49  0021               	movlb	1	; select bank1
  9396  0B4A  00CB               	movwf	_CRC^(0+128)
  9397                           
  9398                           ;CC2500_B1.c: 104: RC4 = 1;
  9399  0B4B  0020               	movlb	0	; select bank0
  9400  0B4C  160E               	bsf	14,4	;volatile
  9401                           
  9402                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9403  0B4D  0021               	movlb	1	; select bank1
  9404  0B4E  1BCB               	btfsc	_CRC^(0+128),7
  9405                           
  9406                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9407  0B4F  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9408                           
  9409                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9410  0B50  11BC               	bcf	_RF1^(0+128),3
  9411                           
  9412                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9413  0B51  14BC               	bsf	_RF1^(0+128),1
  9414                           
  9415                           ;CC2500_B1.c: 110: } else {
  9416  0B52  2B55               	goto	l9257
  9417  0B53                     l281:	
  9418                           
  9419                           ;CC2500_B1.c: 111: RC4 = 1;
  9420  0B53  0020               	movlb	0	; select bank0
  9421  0B54  160E               	bsf	14,4	;volatile
  9422  0B55                     l9257:	
  9423                           
  9424                           ;CC2500_B1.c: 112: }
  9425                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9426  0B55  319A  22D6         	fcall	_set_TimeoutCleared
  9427  0B57  0021               	movlb	1	; select bank1
  9428  0B58  0008               	return
  9429  0B59                     __end_of_CC2500_RxData:	
  9430                           
  9431                           	psect	text41
  9432  1F3D                     __ptext41:	
  9433 ;; *************** function _CC2500_ReadStatus *****************
  9434 ;; Defined at:
  9435 ;;		line 304 in file "../src/CC2500_B1.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;  status_addr     1    wreg     unsigned char 
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9440 ;; Return value:  Size  Location     Type
  9441 ;;		None               void
  9442 ;; Registers used:
  9443 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9450 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;Total ram usage:        2 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; Hardware stack levels required when called:    6
  9456 ;; This function calls:
  9457 ;;		_CC2500_ReadByte
  9458 ;;		_CC2500_WriteByte
  9459 ;;		_Timeout_Counter
  9460 ;;		_set_TimeoutCleared
  9461 ;; This function is called by:
  9462 ;;		_CC2500_RxData
  9463 ;;		_setRF_Main
  9464 ;; This function uses a non-reentrant model
  9465 ;;
  9466                           
  9467                           
  9468                           ;psect for function _CC2500_ReadStatus
  9469  1F3D                     _CC2500_ReadStatus:	
  9470                           
  9471                           ;incstack = 0
  9472                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9473                           ;CC2500_ReadStatus@status_addr stored from wreg
  9474  1F3D  0020               	movlb	0	; select bank0
  9475  1F3E  00A3               	movwf	CC2500_ReadStatus@status_addr
  9476                           
  9477                           ;CC2500_B1.c: 305: RC4 = 0;
  9478  1F3F  120E               	bcf	14,4	;volatile
  9479                           
  9480                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9481  1F40  0823               	movf	CC2500_ReadStatus@status_addr,w
  9482  1F41  3EC0               	addlw	192
  9483  1F42  00A2               	movwf	??_CC2500_ReadStatus
  9484  1F43  0822               	movf	??_CC2500_ReadStatus,w
  9485  1F44  0021               	movlb	1	; select bank1
  9486  1F45  00D2               	movwf	_SPI0Buffer^(0+128)
  9487                           
  9488                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9489  1F46  2F4A               	goto	l9011
  9490  1F47                     l9009:	
  9491                           
  9492                           ;CC2500_B1.c: 309: Timeout_Counter();
  9493  1F47  319C  24FE  319F   	fcall	_Timeout_Counter
  9494  1F4A                     l9011:	
  9495  1F4A  0020               	movlb	0	; select bank0
  9496  1F4B  1D0E               	btfss	14,2	;volatile
  9497  1F4C  2F50               	goto	l9015
  9498  1F4D  0021               	movlb	1	; select bank1
  9499  1F4E  1D2D               	btfss	(_myMain^(0+128)+13),2
  9500  1F4F  2F47               	goto	l9009
  9501  1F50                     l9015:	
  9502                           
  9503                           ;CC2500_B1.c: 310: };
  9504                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9505  1F50  319A  22D6  319F   	fcall	_set_TimeoutCleared
  9506                           
  9507                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9508  1F53  319D  2554  319F   	fcall	_CC2500_WriteByte
  9509                           
  9510                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9511  1F56  319D  25D6         	fcall	_CC2500_ReadByte
  9512                           
  9513                           ;CC2500_B1.c: 315: RC4 = 1;
  9514  1F58  0020               	movlb	0	; select bank0
  9515  1F59  160E               	bsf	14,4	;volatile
  9516                           
  9517                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9518  1F5A  0021               	movlb	1	; select bank1
  9519  1F5B  0852               	movf	_SPI0Buffer^(0+128),w
  9520  1F5C  0020               	movlb	0	; select bank0
  9521  1F5D  00A2               	movwf	??_CC2500_ReadStatus
  9522  1F5E  0822               	movf	??_CC2500_ReadStatus,w
  9523  1F5F  0021               	movlb	1	; select bank1
  9524  1F60  00D7               	movwf	_s_data^(0+128)
  9525  1F61  0008               	return
  9526  1F62                     __end_of_CC2500_ReadStatus:	
  9527                           
  9528                           	psect	text42
  9529  1DD6                     __ptext42:	
  9530 ;; *************** function _CC2500_ReadByte *****************
  9531 ;; Defined at:
  9532 ;;		line 238 in file "../src/CC2500_B1.c"
  9533 ;; Parameters:    Size  Location     Type
  9534 ;;		None
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9537 ;; Return value:  Size  Location     Type
  9538 ;;		None               void
  9539 ;; Registers used:
  9540 ;;		wreg, status,2, status,0
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;Total ram usage:        2 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    5
  9553 ;; This function calls:
  9554 ;;		Nothing
  9555 ;; This function is called by:
  9556 ;;		_CC2500_RxData
  9557 ;;		_CC2500_ReadStatus
  9558 ;;		_CC2500_ReadREG
  9559 ;; This function uses a non-reentrant model
  9560 ;;
  9561                           
  9562                           
  9563                           ;psect for function _CC2500_ReadByte
  9564  1DD6                     _CC2500_ReadByte:	
  9565                           
  9566                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9567                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9568                           
  9569                           ;incstack = 0
  9570                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9571  1DD6  0020               	movlb	0	; select bank0
  9572  1DD7  01A1               	clrf	CC2500_ReadByte@loop_b
  9573  1DD8                     L6:	
  9574  1DD8  3008               	movlw	8
  9575  1DD9  0221               	subwf	CC2500_ReadByte@loop_b,w
  9576  1DDA  1803               	btfsc	3,0
  9577  1DDB  0008               	return
  9578                           
  9579                           ;CC2500_B1.c: 241: RC1 = 1;
  9580  1DDC  148E               	bsf	14,1	;volatile
  9581                           
  9582                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9583  1DDD  1003               	clrc
  9584  1DDE  0021               	movlb	1	; select bank1
  9585  1DDF  0DD2               	rlf	_SPI0Buffer^(0+128),f
  9586                           
  9587                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9588  1DE0  0020               	movlb	0	; select bank0
  9589  1DE1  1D0E               	btfss	14,2	;volatile
  9590  1DE2  2DE6               	goto	l8947
  9591                           
  9592                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9593  1DE3  0021               	movlb	1	; select bank1
  9594  1DE4  1452               	bsf	_SPI0Buffer^(0+128),0
  9595  1DE5  2DEC               	goto	l8949
  9596  1DE6                     l8947:	
  9597                           
  9598                           ;CC2500_B1.c: 245: else
  9599                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9600  1DE6  30FE               	movlw	254
  9601  1DE7  0020               	movlb	0	; select bank0
  9602  1DE8  00A0               	movwf	??_CC2500_ReadByte
  9603  1DE9  0820               	movf	??_CC2500_ReadByte,w
  9604  1DEA  0021               	movlb	1	; select bank1
  9605  1DEB  05D2               	andwf	_SPI0Buffer^(0+128),f
  9606  1DEC                     l8949:	
  9607                           
  9608                           ;CC2500_B1.c: 247: RC1 = 0;
  9609  1DEC  0020               	movlb	0	; select bank0
  9610  1DED  108E               	bcf	14,1	;volatile
  9611  1DEE  3001               	movlw	1
  9612  1DEF  00A0               	movwf	??_CC2500_ReadByte
  9613  1DF0  0820               	movf	??_CC2500_ReadByte,w
  9614  1DF1  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9615  1DF2  2DD8               	goto	L6
  9616  1DF3                     __end_of_CC2500_ReadByte:	
  9617                           
  9618                           	psect	text43
  9619  1ABA                     __ptext43:	
  9620 ;; *************** function _RF_Initialization *****************
  9621 ;; Defined at:
  9622 ;;		line 9 in file "../src/RF_Control_B1.c"
  9623 ;; Parameters:    Size  Location     Type
  9624 ;;		None
  9625 ;; Auto vars:     Size  Location     Type
  9626 ;;		None
  9627 ;; Return value:  Size  Location     Type
  9628 ;;		None               void
  9629 ;; Registers used:
  9630 ;;		wreg, status,2, status,0, pclath, cstack
  9631 ;; Tracked objects:
  9632 ;;		On entry : 0/0
  9633 ;;		On exit  : 0/0
  9634 ;;		Unchanged: 0/0
  9635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;Total ram usage:        0 bytes
  9641 ;; Hardware stack levels used:    1
  9642 ;; Hardware stack levels required when called:    6
  9643 ;; This function calls:
  9644 ;;		_setRF_Initialization
  9645 ;; This function is called by:
  9646 ;;		_main
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           
  9651                           ;psect for function _RF_Initialization
  9652  1ABA                     _RF_Initialization:	
  9653                           
  9654                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9655                           
  9656                           ;incstack = 0
  9657                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9658  1ABA  319B  2337         	fcall	_setRF_Initialization
  9659  1ABC  0008               	return
  9660  1ABD                     __end_of_RF_Initialization:	
  9661                           
  9662                           	psect	text44
  9663  1B37                     __ptext44:	
  9664 ;; *************** function _setRF_Initialization *****************
  9665 ;; Defined at:
  9666 ;;		line 43 in file "../src/RF_Control_B1.c"
  9667 ;; Parameters:    Size  Location     Type
  9668 ;;		None
  9669 ;; Auto vars:     Size  Location     Type
  9670 ;;		None
  9671 ;; Return value:  Size  Location     Type
  9672 ;;		None               void
  9673 ;; Registers used:
  9674 ;;		wreg
  9675 ;; Tracked objects:
  9676 ;;		On entry : 0/0
  9677 ;;		On exit  : 0/0
  9678 ;;		Unchanged: 0/0
  9679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;Total ram usage:        1 bytes
  9685 ;; Hardware stack levels used:    1
  9686 ;; Hardware stack levels required when called:    5
  9687 ;; This function calls:
  9688 ;;		Nothing
  9689 ;; This function is called by:
  9690 ;;		_RF_Initialization
  9691 ;; This function uses a non-reentrant model
  9692 ;;
  9693                           
  9694                           
  9695                           ;psect for function _setRF_Initialization
  9696  1B37                     _setRF_Initialization:	
  9697                           
  9698                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9699                           
  9700                           ;incstack = 0
  9701                           ; Regs used in _setRF_Initialization: [wreg]
  9702  1B37  3015               	movlw	21
  9703  1B38  0020               	movlb	0	; select bank0
  9704  1B39  00A0               	movwf	??_setRF_Initialization
  9705  1B3A  0820               	movf	??_setRF_Initialization,w
  9706  1B3B  0021               	movlb	1	; select bank1
  9707  1B3C  00D4               	movwf	_Tx_Length^(0+128)
  9708                           
  9709                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9710  1B3D  300A               	movlw	10
  9711  1B3E  00C3               	movwf	(_RF1^(0+128)+7)
  9712  1B3F  3000               	movlw	0
  9713  1B40  00C4               	movwf	(_RF1^(0+128)+8)
  9714  1B41  0008               	return
  9715  1B42                     __end_of_setRF_Initialization:	
  9716                           
  9717                           	psect	text45
  9718  1C51                     __ptext45:	
  9719 ;; *************** function _Mcu_Initialization *****************
  9720 ;; Defined at:
  9721 ;;		line 30 in file "../src/MCU_B1.c"
  9722 ;; Parameters:    Size  Location     Type
  9723 ;;		None
  9724 ;; Auto vars:     Size  Location     Type
  9725 ;;		None
  9726 ;; Return value:  Size  Location     Type
  9727 ;;		None               void
  9728 ;; Registers used:
  9729 ;;		wreg, status,2, status,0, pclath, cstack
  9730 ;; Tracked objects:
  9731 ;;		On entry : 0/0
  9732 ;;		On exit  : 0/0
  9733 ;;		Unchanged: 0/0
  9734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9739 ;;Total ram usage:        0 bytes
  9740 ;; Hardware stack levels used:    1
  9741 ;; Hardware stack levels required when called:    6
  9742 ;; This function calls:
  9743 ;;		_ADC_Set
  9744 ;;		_Fosc_Set
  9745 ;;		_IOC_Set
  9746 ;;		_IO_Set
  9747 ;;		_TMR1_Set
  9748 ;;		_WDT_Set
  9749 ;; This function is called by:
  9750 ;;		_main
  9751 ;; This function uses a non-reentrant model
  9752 ;;
  9753                           
  9754                           
  9755                           ;psect for function _Mcu_Initialization
  9756  1C51                     _Mcu_Initialization:	
  9757                           
  9758                           ;MCU_B1.c: 32: Fosc_Set();
  9759                           
  9760                           ;incstack = 0
  9761                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9762  1C51  319A  22D2  319C   	fcall	_Fosc_Set
  9763                           
  9764                           ;MCU_B1.c: 34: IO_Set();
  9765  1C54  319D  256D  319C   	fcall	_IO_Set
  9766                           
  9767                           ;MCU_B1.c: 36: ;;
  9768                           ;MCU_B1.c: 38: TMR1_Set();
  9769  1C57  319B  2396  319C   	fcall	_TMR1_Set
  9770                           
  9771                           ;MCU_B1.c: 40: ADC_Set();
  9772  1C5A  319A  22EC  319C   	fcall	_ADC_Set
  9773                           
  9774                           ;MCU_B1.c: 42: ;;
  9775                           ;MCU_B1.c: 44: ;;
  9776                           ;MCU_B1.c: 46: IOC_Set();
  9777  1C5D  319B  238A  319C   	fcall	_IOC_Set
  9778                           
  9779                           ;MCU_B1.c: 48: ;;
  9780                           ;MCU_B1.c: 50: ;;
  9781                           ;MCU_B1.c: 52: WDT_Set();
  9782  1C60  319B  23A2         	fcall	_WDT_Set
  9783  1C62  0008               	return
  9784  1C63                     __end_of_Mcu_Initialization:	
  9785                           
  9786                           	psect	text46
  9787  1BA2                     __ptext46:	
  9788 ;; *************** function _WDT_Set *****************
  9789 ;; Defined at:
  9790 ;;		line 1019 in file "../src/MCU_B1.c"
  9791 ;; Parameters:    Size  Location     Type
  9792 ;;		None
  9793 ;; Auto vars:     Size  Location     Type
  9794 ;;		None
  9795 ;; Return value:  Size  Location     Type
  9796 ;;		None               void
  9797 ;; Registers used:
  9798 ;;		wreg
  9799 ;; Tracked objects:
  9800 ;;		On entry : 0/0
  9801 ;;		On exit  : 0/0
  9802 ;;		Unchanged: 0/0
  9803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9806 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9807 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;Total ram usage:        1 bytes
  9809 ;; Hardware stack levels used:    1
  9810 ;; Hardware stack levels required when called:    5
  9811 ;; This function calls:
  9812 ;;		Nothing
  9813 ;; This function is called by:
  9814 ;;		_Mcu_Initialization
  9815 ;; This function uses a non-reentrant model
  9816 ;;
  9817                           
  9818                           
  9819                           ;psect for function _WDT_Set
  9820  1BA2                     _WDT_Set:	
  9821                           
  9822                           ;MCU_B1.c: 1026: WDTCON = 0b00010111;;
  9823                           
  9824                           ;incstack = 0
  9825                           ; Regs used in _WDT_Set: [wreg]
  9826  1BA2  3017               	movlw	23
  9827  1BA3  0021               	movlb	1	; select bank1
  9828  1BA4  0097               	movwf	23	;volatile
  9829                           
  9830                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  9831  1BA5  0022               	movlb	2	; select bank2
  9832  1BA6  1425               	bsf	_WDT^(0+256),0
  9833                           
  9834                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  9835  1BA7  300A               	movlw	10
  9836  1BA8  0020               	movlb	0	; select bank0
  9837  1BA9  00A0               	movwf	??_WDT_Set
  9838  1BAA  0820               	movf	??_WDT_Set,w
  9839  1BAB  0022               	movlb	2	; select bank2
  9840  1BAC  00A6               	movwf	(_WDT^(0+256)+1)
  9841  1BAD  0008               	return
  9842  1BAE                     __end_of_WDT_Set:	
  9843                           
  9844                           	psect	text47
  9845  1B96                     __ptext47:	
  9846 ;; *************** function _TMR1_Set *****************
  9847 ;; Defined at:
  9848 ;;		line 199 in file "../src/MCU_B1.c"
  9849 ;; Parameters:    Size  Location     Type
  9850 ;;		None
  9851 ;; Auto vars:     Size  Location     Type
  9852 ;;		None
  9853 ;; Return value:  Size  Location     Type
  9854 ;;		None               void
  9855 ;; Registers used:
  9856 ;;		wreg
  9857 ;; Tracked objects:
  9858 ;;		On entry : 0/0
  9859 ;;		On exit  : 0/0
  9860 ;;		Unchanged: 0/0
  9861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9866 ;;Total ram usage:        0 bytes
  9867 ;; Hardware stack levels used:    1
  9868 ;; Hardware stack levels required when called:    5
  9869 ;; This function calls:
  9870 ;;		Nothing
  9871 ;; This function is called by:
  9872 ;;		_Mcu_Initialization
  9873 ;; This function uses a non-reentrant model
  9874 ;;
  9875                           
  9876                           
  9877                           ;psect for function _TMR1_Set
  9878  1B96                     _TMR1_Set:	
  9879                           
  9880                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9881                           
  9882                           ;incstack = 0
  9883                           ; Regs used in _TMR1_Set: [wreg]
  9884  1B96  3041               	movlw	65
  9885  1B97  0020               	movlb	0	; select bank0
  9886  1B98  0098               	movwf	24	;volatile
  9887                           
  9888                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9889  1B99  30FA               	movlw	250
  9890  1B9A  0097               	movwf	23	;volatile
  9891                           
  9892                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9893  1B9B  3038               	movlw	56
  9894  1B9C  0096               	movwf	22	;volatile
  9895                           
  9896                           ;MCU_B1.c: 203: TMR1IE = 1;
  9897  1B9D  0021               	movlb	1	; select bank1
  9898  1B9E  1411               	bsf	17,0	;volatile
  9899                           
  9900                           ;MCU_B1.c: 204: PEIE = 1;
  9901  1B9F  170B               	bsf	11,6	;volatile
  9902                           
  9903                           ;MCU_B1.c: 205: GIE = 1;
  9904  1BA0  178B               	bsf	11,7	;volatile
  9905  1BA1  0008               	return
  9906  1BA2                     __end_of_TMR1_Set:	
  9907                           
  9908                           	psect	text48
  9909  1D6D                     __ptext48:	
  9910 ;; *************** function _IO_Set *****************
  9911 ;; Defined at:
  9912 ;;		line 60 in file "../src/MCU_B1.c"
  9913 ;; Parameters:    Size  Location     Type
  9914 ;;		None
  9915 ;; Auto vars:     Size  Location     Type
  9916 ;;		None
  9917 ;; Return value:  Size  Location     Type
  9918 ;;		None               void
  9919 ;; Registers used:
  9920 ;;		wreg, status,2
  9921 ;; Tracked objects:
  9922 ;;		On entry : 0/0
  9923 ;;		On exit  : 0/0
  9924 ;;		Unchanged: 0/0
  9925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9930 ;;Total ram usage:        0 bytes
  9931 ;; Hardware stack levels used:    1
  9932 ;; Hardware stack levels required when called:    5
  9933 ;; This function calls:
  9934 ;;		Nothing
  9935 ;; This function is called by:
  9936 ;;		_Mcu_Initialization
  9937 ;; This function uses a non-reentrant model
  9938 ;;
  9939                           
  9940                           
  9941                           ;psect for function _IO_Set
  9942  1D6D                     _IO_Set:	
  9943                           
  9944                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9945                           
  9946                           ;incstack = 0
  9947                           ; Regs used in _IO_Set: [wreg+status,2]
  9948  1D6D  3077               	movlw	119
  9949  1D6E  0021               	movlb	1	; select bank1
  9950  1D6F  008C               	movwf	12	;volatile
  9951                           
  9952                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9953  1D70  3007               	movlw	7
  9954  1D71  008D               	movwf	13	;volatile
  9955                           
  9956                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9957  1D72  300C               	movlw	12
  9958  1D73  008E               	movwf	14	;volatile
  9959                           
  9960                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9961  1D74  0022               	movlb	2	; select bank2
  9962  1D75  018C               	clrf	12	;volatile
  9963                           
  9964                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9965  1D76  3002               	movlw	2
  9966  1D77  008D               	movwf	13	;volatile
  9967                           
  9968                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9969  1D78  018E               	clrf	14	;volatile
  9970                           
  9971                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9972  1D79  3022               	movlw	34
  9973  1D7A  0023               	movlb	3	; select bank3
  9974  1D7B  008C               	movwf	12	;volatile
  9975                           
  9976                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9977  1D7C  018D               	clrf	13	;volatile
  9978                           
  9979                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9980  1D7D  018E               	clrf	14	;volatile
  9981                           
  9982                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9983  1D7E  3077               	movlw	119
  9984  1D7F  0020               	movlb	0	; select bank0
  9985  1D80  008C               	movwf	12	;volatile
  9986                           
  9987                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9988  1D81  3007               	movlw	7
  9989  1D82  008D               	movwf	13	;volatile
  9990                           
  9991                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9992  1D83  300C               	movlw	12
  9993  1D84  008E               	movwf	14	;volatile
  9994  1D85  0008               	return
  9995  1D86                     __end_of_IO_Set:	
  9996                           
  9997                           	psect	text49
  9998  1B8A                     __ptext49:	
  9999 ;; *************** function _IOC_Set *****************
 10000 ;; Defined at:
 10001 ;;		line 367 in file "../src/MCU_B1.c"
 10002 ;; Parameters:    Size  Location     Type
 10003 ;;		None
 10004 ;; Auto vars:     Size  Location     Type
 10005 ;;		None
 10006 ;; Return value:  Size  Location     Type
 10007 ;;		None               void
 10008 ;; Registers used:
 10009 ;;		wreg, status,2
 10010 ;; Tracked objects:
 10011 ;;		On entry : 0/0
 10012 ;;		On exit  : 0/0
 10013 ;;		Unchanged: 0/0
 10014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;Total ram usage:        0 bytes
 10020 ;; Hardware stack levels used:    1
 10021 ;; Hardware stack levels required when called:    5
 10022 ;; This function calls:
 10023 ;;		Nothing
 10024 ;; This function is called by:
 10025 ;;		_Mcu_Initialization
 10026 ;; This function uses a non-reentrant model
 10027 ;;
 10028                           
 10029                           
 10030                           ;psect for function _IOC_Set
 10031  1B8A                     _IOC_Set:	
 10032                           
 10033                           ;MCU_B1.c: 368: WPUB2 = 0;
 10034                           
 10035                           ;incstack = 0
 10036                           ; Regs used in _IOC_Set: [wreg+status,2]
 10037  1B8A  0024               	movlb	4	; select bank4
 10038  1B8B  110D               	bcf	13,2	;volatile
 10039                           
 10040                           ;MCU_B1.c: 376: IOCBP = 0b00000000;
 10041  1B8C  0027               	movlb	7	; select bank7
 10042  1B8D  0194               	clrf	20	;volatile
 10043                           
 10044                           ;MCU_B1.c: 377: IOCBN = 0b00000100;
 10045  1B8E  3004               	movlw	4
 10046  1B8F  0095               	movwf	21	;volatile
 10047                           
 10048                           ;MCU_B1.c: 393: IOCBF = 0b00000000;
 10049  1B90  0196               	clrf	22	;volatile
 10050                           
 10051                           ;MCU_B1.c: 395: IOCIE = 1;
 10052  1B91  158B               	bsf	11,3	;volatile
 10053                           
 10054                           ;MCU_B1.c: 396: IOCIF = 0;
 10055  1B92  100B               	bcf	11,0	;volatile
 10056                           
 10057                           ;MCU_B1.c: 397: PEIE = 1;
 10058  1B93  170B               	bsf	11,6	;volatile
 10059                           
 10060                           ;MCU_B1.c: 398: GIE = 1;
 10061  1B94  178B               	bsf	11,7	;volatile
 10062  1B95  0008               	return
 10063  1B96                     __end_of_IOC_Set:	
 10064                           
 10065                           	psect	text50
 10066  1AD2                     __ptext50:	
 10067 ;; *************** function _Fosc_Set *****************
 10068 ;; Defined at:
 10069 ;;		line 56 in file "../src/MCU_B1.c"
 10070 ;; Parameters:    Size  Location     Type
 10071 ;;		None
 10072 ;; Auto vars:     Size  Location     Type
 10073 ;;		None
 10074 ;; Return value:  Size  Location     Type
 10075 ;;		None               void
 10076 ;; Registers used:
 10077 ;;		wreg
 10078 ;; Tracked objects:
 10079 ;;		On entry : 0/0
 10080 ;;		On exit  : 0/0
 10081 ;;		Unchanged: 0/0
 10082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;Total ram usage:        0 bytes
 10088 ;; Hardware stack levels used:    1
 10089 ;; Hardware stack levels required when called:    5
 10090 ;; This function calls:
 10091 ;;		Nothing
 10092 ;; This function is called by:
 10093 ;;		_Mcu_Initialization
 10094 ;; This function uses a non-reentrant model
 10095 ;;
 10096                           
 10097                           
 10098                           ;psect for function _Fosc_Set
 10099  1AD2                     _Fosc_Set:	
 10100                           
 10101                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10102                           
 10103                           ;incstack = 0
 10104                           ; Regs used in _Fosc_Set: [wreg]
 10105  1AD2  3078               	movlw	120
 10106  1AD3  0021               	movlb	1	; select bank1
 10107  1AD4  0099               	movwf	25	;volatile
 10108  1AD5  0008               	return
 10109  1AD6                     __end_of_Fosc_Set:	
 10110                           
 10111                           	psect	text51
 10112  1AEC                     __ptext51:	
 10113 ;; *************** function _ADC_Set *****************
 10114 ;; Defined at:
 10115 ;;		line 420 in file "../src/MCU_B1.c"
 10116 ;; Parameters:    Size  Location     Type
 10117 ;;		None
 10118 ;; Auto vars:     Size  Location     Type
 10119 ;;		None
 10120 ;; Return value:  Size  Location     Type
 10121 ;;		None               void
 10122 ;; Registers used:
 10123 ;;		wreg
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;Total ram usage:        0 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:    5
 10136 ;; This function calls:
 10137 ;;		Nothing
 10138 ;; This function is called by:
 10139 ;;		_Mcu_Initialization
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           
 10144                           ;psect for function _ADC_Set
 10145  1AEC                     _ADC_Set:	
 10146                           
 10147                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10148                           
 10149                           ;incstack = 0
 10150                           ; Regs used in _ADC_Set: [wreg]
 10151  1AEC  30F3               	movlw	243
 10152  1AED  0021               	movlb	1	; select bank1
 10153  1AEE  009E               	movwf	30	;volatile
 10154                           
 10155                           ;MCU_B1.c: 422: FVRCON = 0xc0;
 10156  1AEF  30C0               	movlw	192
 10157  1AF0  0022               	movlb	2	; select bank2
 10158  1AF1  0097               	movwf	23	;volatile
 10159  1AF2  0008               	return
 10160  1AF3                     __end_of_ADC_Set:	
 10161                           
 10162                           	psect	text52
 10163  0049                     __ptext52:	
 10164 ;; *************** function _Load_Main *****************
 10165 ;; Defined at:
 10166 ;;		line 39 in file "../src/OverLoad_B1.c"
 10167 ;; Parameters:    Size  Location     Type
 10168 ;;		None
 10169 ;; Auto vars:     Size  Location     Type
 10170 ;;  i               1   14[BANK0 ] unsigned char 
 10171 ;;  error           1   12[BANK0 ] unsigned char 
 10172 ;;  j               1   11[BANK0 ] unsigned char 
 10173 ;; Return value:  Size  Location     Type
 10174 ;;		None               void
 10175 ;; Registers used:
 10176 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10177 ;; Tracked objects:
 10178 ;;		On entry : 0/0
 10179 ;;		On exit  : 0/0
 10180 ;;		Unchanged: 0/0
 10181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10183 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10184 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10185 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10186 ;;Total ram usage:        6 bytes
 10187 ;; Hardware stack levels used:    1
 10188 ;; Hardware stack levels required when called:    8
 10189 ;; This function calls:
 10190 ;;		_getMain_All_Error_Status
 10191 ;;		_getMain_LightsStatus
 10192 ;;		_getMain_Lights_Count
 10193 ;;		_getMain_LoadOK
 10194 ;;		_setLoad_AH_AL_Restore
 10195 ;; This function is called by:
 10196 ;;		_main
 10197 ;; This function uses a non-reentrant model
 10198 ;;
 10199                           
 10200                           
 10201                           ;psect for function _Load_Main
 10202  0049                     _Load_Main:	
 10203                           
 10204                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = 0;
 10205                           
 10206                           ;incstack = 0
 10207                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10208  0049  0020               	movlb	0	; select bank0
 10209  004A  01AE               	clrf	Load_Main@i
 10210  004B  01AB               	clrf	Load_Main@j
 10211  004C  01AC               	clrf	Load_Main@error
 10212                           
 10213                           ;OverLoad_B1.c: 41: if (Load.Enable == 1) {
 10214  004D  0022               	movlb	2	; select bank2
 10215  004E  1C27               	btfss	_Load^(0+256),0
 10216  004F  2A06               	goto	l1713
 10217                           
 10218                           ;OverLoad_B1.c: 42: Load.GO = 0;
 10219  0050  10A7               	bcf	_Load^(0+256),1
 10220                           
 10221                           ;OverLoad_B1.c: 44: Load.GO = getMain_LightsStatus() == 1 && getMain_All_Error_Status(0)
      +                           == 0 ? 1 : 0;
 10222  0051  0020               	movlb	0	; select bank0
 10223  0052  01AD               	clrf	_Load_Main$4288
 10224  0053  3190  20D9  3180   	fcall	_getMain_LightsStatus
 10225  0056  3A01               	xorlw	1
 10226  0057  1D03               	skipz
 10227  0058  2863               	goto	l10423
 10228  0059  3000               	movlw	0
 10229  005A  3191  2162  3180   	fcall	_getMain_All_Error_Status
 10230  005D  3800               	iorlw	0
 10231  005E  1D03               	skipz
 10232  005F  2863               	goto	l10423
 10233  0060  0020               	movlb	0	; select bank0
 10234  0061  01AD               	clrf	_Load_Main$4288
 10235  0062  0AAD               	incf	_Load_Main$4288,f
 10236  0063                     l10423:	
 10237  0063  0020               	movlb	0	; select bank0
 10238  0064  082D               	movf	_Load_Main$4288,w
 10239  0065  0022               	movlb	2	; select bank2
 10240  0066  10A7               	bcf	_Load^(0+256),1
 10241  0067  1D03               	skipz
 10242  0068  14A7               	bsf	_Load^(0+256),1
 10243                           
 10244                           ;OverLoad_B1.c: 46: if (Load.OK == 1) {
 10245  0069  1FA7               	btfss	_Load^(0+256),7
 10246  006A  2874               	goto	l10433
 10247                           
 10248                           ;OverLoad_B1.c: 47: if (getMain_LoadOK() == 0) {
 10249  006B  319B  23BB  3180   	fcall	_getMain_LoadOK
 10250  006E  3800               	iorlw	0
 10251  006F  1D03               	skipz
 10252  0070  2874               	goto	l10433
 10253                           
 10254                           ;OverLoad_B1.c: 48: Load.OK = 0;
 10255  0071  0022               	movlb	2	; select bank2
 10256  0072  13A7               	bcf	_Load^(0+256),7
 10257                           
 10258                           ;OverLoad_B1.c: 49: Load.Count = 0;
 10259  0073  01D0               	clrf	(_Load^(0+256)+41)
 10260  0074                     l10433:	
 10261                           
 10262                           ;OverLoad_B1.c: 50: }
 10263                           ;OverLoad_B1.c: 51: }
 10264                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10265  0074  0022               	movlb	2	; select bank2
 10266  0075  1CA7               	btfss	_Load^(0+256),1
 10267  0076  29A7               	goto	l1718
 10268                           
 10269                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10270  0077  1527               	bsf	_Load^(0+256),2
 10271                           
 10272                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10273  0078  1E27               	btfss	_Load^(0+256),4
 10274  0079  29A5               	goto	l1719
 10275                           
 10276                           ;OverLoad_B1.c: 58: Load.Time++;
 10277  007A  3001               	movlw	1
 10278  007B  07A8               	addwf	(_Load^(0+256)+1),f
 10279  007C  3000               	movlw	0
 10280  007D  3DA9               	addwfc	((_Load+1)^(0+256)+1),f
 10281                           
 10282                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10283  007E  3000               	movlw	0
 10284  007F  0229               	subwf	((_Load+1)^(0+256)+1),w
 10285  0080  3005               	movlw	5
 10286  0081  1903               	skipnz
 10287  0082  0228               	subwf	(_Load^(0+256)+1),w
 10288  0083  1C03               	skipc
 10289  0084  0008               	return
 10290                           
 10291                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10292  0085  01A8               	clrf	(_Load^(0+256)+1)
 10293  0086  01A9               	clrf	((_Load+1)^(0+256)+1)
 10294                           
 10295                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10296  0087  1227               	bcf	_Load^(0+256),4
 10297                           
 10298                           ;OverLoad_B1.c: 62: Load.LightsCount = getMain_Lights_Count();
 10299  0088  3187  27EA  3180   	fcall	_getMain_Lights_Count
 10300  008B  0020               	movlb	0	; select bank0
 10301  008C  00A9               	movwf	??_Load_Main
 10302  008D  0829               	movf	??_Load_Main,w
 10303  008E  0022               	movlb	2	; select bank2
 10304  008F  00D2               	movwf	(_Load^(0+256)+43)
 10305                           
 10306                           ;OverLoad_B1.c: 65: for (i = 0; i < 4; i++) {
 10307  0090  0020               	movlb	0	; select bank0
 10308  0091  01AE               	clrf	Load_Main@i
 10309  0092  3004               	movlw	4
 10310  0093  022E               	subwf	Load_Main@i,w
 10311  0094  1803               	btfsc	3,0
 10312  0095  28C0               	goto	l10457
 10313  0096                     l10451:	
 10314                           
 10315                           ;OverLoad_B1.c: 66: Load.ADH += Load.AH[i];
 10316  0096  352E               	lslf	Load_Main@i,w
 10317  0097  3E32               	addlw	(_Load+11)& (0+255)
 10318  0098  0086               	movwf	6
 10319  0099  3001               	movlw	1	; select bank2/3
 10320  009A  0087               	movwf	7
 10321  009B  3F40               	moviw [0]fsr1
 10322  009C  00A9               	movwf	??_Load_Main
 10323  009D  3F41               	moviw [1]fsr1
 10324  009E  00AA               	movwf	??_Load_Main+1
 10325  009F  0829               	movf	??_Load_Main,w
 10326  00A0  0022               	movlb	2	; select bank2
 10327  00A1  07AC               	addwf	(_Load^(0+256)+5),f
 10328  00A2  0020               	movlb	0	; select bank0
 10329  00A3  082A               	movf	??_Load_Main+1,w
 10330  00A4  0022               	movlb	2	; select bank2
 10331  00A5  3DAD               	addwfc	((_Load+1)^(0+256)+5),f
 10332                           
 10333                           ;OverLoad_B1.c: 67: Load.ADL += Load.AL[i];
 10334  00A6  0020               	movlb	0	; select bank0
 10335  00A7  352E               	lslf	Load_Main@i,w
 10336  00A8  3E3C               	addlw	(_Load+21)& (0+255)
 10337  00A9  0086               	movwf	6
 10338  00AA  3001               	movlw	1	; select bank2/3
 10339  00AB  0087               	movwf	7
 10340  00AC  3F40               	moviw [0]fsr1
 10341  00AD  00A9               	movwf	??_Load_Main
 10342  00AE  3F41               	moviw [1]fsr1
 10343  00AF  00AA               	movwf	??_Load_Main+1
 10344  00B0  0829               	movf	??_Load_Main,w
 10345  00B1  0022               	movlb	2	; select bank2
 10346  00B2  07AE               	addwf	(_Load^(0+256)+7),f
 10347  00B3  0020               	movlb	0	; select bank0
 10348  00B4  082A               	movf	??_Load_Main+1,w
 10349  00B5  0022               	movlb	2	; select bank2
 10350  00B6  3DAF               	addwfc	((_Load+1)^(0+256)+7),f
 10351  00B7  3001               	movlw	1
 10352  00B8  0020               	movlb	0	; select bank0
 10353  00B9  00A9               	movwf	??_Load_Main
 10354  00BA  0829               	movf	??_Load_Main,w
 10355  00BB  07AE               	addwf	Load_Main@i,f
 10356  00BC  3004               	movlw	4
 10357  00BD  022E               	subwf	Load_Main@i,w
 10358  00BE  1C03               	skipc
 10359  00BF  2896               	goto	l10451
 10360  00C0                     l10457:	
 10361                           
 10362                           ;OverLoad_B1.c: 68: }
 10363                           ;OverLoad_B1.c: 69: Load.ADH /= 4;
 10364  00C0  3002               	movlw	2
 10365  00C1  0022               	movlb	2	; select bank2
 10366  00C2                     u11805:	
 10367  00C2  36AD               	lsrf	((_Load+1)^(0+256)+5),f
 10368  00C3  0CAC               	rrf	(_Load^(0+256)+5),f
 10369  00C4  0B89               	decfsz	9,f
 10370  00C5  28C2               	goto	u11805
 10371                           
 10372                           ;OverLoad_B1.c: 70: Load.ADL /= 4;
 10373  00C6  3002               	movlw	2
 10374  00C7                     u11815:	
 10375  00C7  36AF               	lsrf	((_Load+1)^(0+256)+7),f
 10376  00C8  0CAE               	rrf	(_Load^(0+256)+7),f
 10377  00C9  0B89               	decfsz	9,f
 10378  00CA  28C7               	goto	u11815
 10379                           
 10380                           ;OverLoad_B1.c: 71: product->Data[16]=Load.ADH >> 8;
 10381  00CB  082D               	movf	((_Load+1)^(0+256)+5),w
 10382  00CC  0020               	movlb	0	; select bank0
 10383  00CD  00A9               	movwf	??_Load_Main
 10384  00CE  087B               	movf	_product,w
 10385  00CF  3E10               	addlw	16
 10386  00D0  0086               	movwf	6
 10387  00D1  3002               	movlw	2	; select bank4/5
 10388  00D2  0087               	movwf	7
 10389  00D3  0829               	movf	??_Load_Main,w
 10390  00D4  0081               	movwf	1
 10391                           
 10392                           ;OverLoad_B1.c: 72: product->Data[17]=Load.ADH;
 10393  00D5  0022               	movlb	2	; select bank2
 10394  00D6  082C               	movf	(_Load^(0+256)+5),w
 10395  00D7  0020               	movlb	0	; select bank0
 10396  00D8  00A9               	movwf	??_Load_Main
 10397  00D9  087B               	movf	_product,w
 10398  00DA  3E11               	addlw	17
 10399  00DB  0086               	movwf	6
 10400  00DC  3002               	movlw	2	; select bank4/5
 10401  00DD  0087               	movwf	7
 10402  00DE  0829               	movf	??_Load_Main,w
 10403  00DF  0081               	movwf	1
 10404                           
 10405                           ;OverLoad_B1.c: 73: if (Load.ADH > Load.ADL) {
 10406  00E0  0022               	movlb	2	; select bank2
 10407  00E1  082D               	movf	((_Load+1)^(0+256)+5),w
 10408  00E2  022F               	subwf	((_Load+1)^(0+256)+7),w
 10409  00E3  1D03               	skipz
 10410  00E4  28E7               	goto	u11825
 10411  00E5  082C               	movf	(_Load^(0+256)+5),w
 10412  00E6  022E               	subwf	(_Load^(0+256)+7),w
 10413  00E7                     u11825:	
 10414  00E7  1803               	skipnc
 10415  00E8  29A2               	goto	l10543
 10416                           
 10417                           ;OverLoad_B1.c: 74: Load.AD = (Load.ADH - Load.ADL);
 10418  00E9  3005               	movlw	5
 10419  00EA  3E27               	addlw	_Load& (0+255)
 10420  00EB  0086               	movwf	6
 10421  00EC  3001               	movlw	1	; select bank2/3
 10422  00ED  0087               	movwf	7
 10423  00EE  092E               	comf	(_Load^(0+256)+7),w
 10424  00EF  0020               	movlb	0	; select bank0
 10425  00F0  00A9               	movwf	??_Load_Main
 10426  00F1  0022               	movlb	2	; select bank2
 10427  00F2  092F               	comf	((_Load+1)^(0+256)+7),w
 10428  00F3  0020               	movlb	0	; select bank0
 10429  00F4  00AA               	movwf	??_Load_Main+1
 10430  00F5  0AA9               	incf	??_Load_Main,f
 10431  00F6  1903               	skipnz
 10432  00F7  0AAA               	incf	??_Load_Main+1,f
 10433  00F8  3F40               	moviw [0]fsr1
 10434  00F9  0729               	addwf	??_Load_Main,w
 10435  00FA  0022               	movlb	2	; select bank2
 10436  00FB  00C6               	movwf	(_Load^(0+256)+31)
 10437  00FC  3F41               	moviw [1]fsr1
 10438  00FD  0020               	movlb	0	; select bank0
 10439  00FE  3D2A               	addwfc	??_Load_Main+1,w
 10440  00FF  0022               	movlb	2	; select bank2
 10441  0100  00C7               	movwf	(_Load^(0+256)+32)
 10442                           
 10443                           ;OverLoad_B1.c: 75: RB5 = 0;
 10444  0101  0020               	movlb	0	; select bank0
 10445  0102  128D               	bcf	13,5	;volatile
 10446                           
 10447                           ;OverLoad_B1.c: 76: Load.ADH = 0;
 10448  0103  0022               	movlb	2	; select bank2
 10449  0104  01AC               	clrf	(_Load^(0+256)+5)
 10450  0105  01AD               	clrf	((_Load+1)^(0+256)+5)
 10451                           
 10452                           ;OverLoad_B1.c: 77: Load.ADL = 0;
 10453  0106  01AE               	clrf	(_Load^(0+256)+7)
 10454  0107  01AF               	clrf	((_Load+1)^(0+256)+7)
 10455                           
 10456                           ;OverLoad_B1.c: 79: if (Load.Count < 2) {
 10457  0108  3002               	movlw	2
 10458  0109  0250               	subwf	(_Load^(0+256)+41),w
 10459  010A  1803               	skipnc
 10460  010B  292D               	goto	l10489
 10461                           
 10462                           ;OverLoad_B1.c: 80: Load.Count++;
 10463  010C  3001               	movlw	1
 10464  010D  0020               	movlb	0	; select bank0
 10465  010E  00A9               	movwf	??_Load_Main
 10466  010F  0829               	movf	??_Load_Main,w
 10467  0110  0022               	movlb	2	; select bank2
 10468  0111  07D0               	addwf	(_Load^(0+256)+41),f
 10469                           
 10470                           ;OverLoad_B1.c: 81: if (Load.Count == 1) {
 10471  0112  0850               	movf	(_Load^(0+256)+41),w
 10472  0113  3A01               	xorlw	1
 10473  0114  1D03               	skipz
 10474  0115  291A               	goto	l10481
 10475                           
 10476                           ;OverLoad_B1.c: 82: Load.JudgeValue = 500;
 10477  0116  30F4               	movlw	244
 10478  0117  00CC               	movwf	(_Load^(0+256)+37)
 10479  0118  3001               	movlw	1
 10480  0119  2925               	goto	L7
 10481  011A                     l10481:	
 10482                           ;OverLoad_B1.c: 83: } else if (Load.Count == 2) {
 10483                           
 10484  011A  0850               	movf	(_Load^(0+256)+41),w
 10485  011B  3A02               	xorlw	2
 10486  011C  1D03               	skipz
 10487  011D  292D               	goto	l10489
 10488                           
 10489                           ;OverLoad_B1.c: 84: if (Load.LightsCount == 1) {
 10490  011E  0852               	movf	(_Load^(0+256)+43),w
 10491  011F  3A01               	xorlw	1
 10492  0120  1D03               	skipz
 10493  0121  2927               	goto	l10487
 10494                           
 10495                           ;OverLoad_B1.c: 85: Load.JudgeValue = 0x32;
 10496  0122  3032               	movlw	50
 10497  0123  00CC               	movwf	(_Load^(0+256)+37)
 10498  0124  3000               	movlw	0
 10499  0125                     L7:	
 10500  0125  00CD               	movwf	(_Load^(0+256)+38)
 10501                           
 10502                           ;OverLoad_B1.c: 86: } else {
 10503  0126  292D               	goto	l10489
 10504  0127                     l10487:	
 10505                           
 10506                           ;OverLoad_B1.c: 87: Load.JudgeValue = (0x32 + Load.TotalLoad) - 0x08;
 10507  0127  0830               	movf	(_Load^(0+256)+9),w
 10508  0128  3E2A               	addlw	42
 10509  0129  00CC               	movwf	(_Load^(0+256)+37)
 10510  012A  3000               	movlw	0
 10511  012B  3D31               	addwfc	((_Load+1)^(0+256)+9),w
 10512  012C  00CD               	movwf	((_Load+1)^(0+256)+37)
 10513  012D                     l10489:	
 10514                           
 10515                           ;OverLoad_B1.c: 88: }
 10516                           ;OverLoad_B1.c: 89: }
 10517                           ;OverLoad_B1.c: 90: }
 10518                           ;OverLoad_B1.c: 92: if (Load.AD >= Load.JudgeValue) {
 10519  012D  084D               	movf	((_Load+1)^(0+256)+37),w
 10520  012E  0247               	subwf	((_Load+1)^(0+256)+31),w
 10521  012F  1D03               	skipz
 10522  0130  2933               	goto	u11875
 10523  0131  084C               	movf	(_Load^(0+256)+37),w
 10524  0132  0246               	subwf	(_Load^(0+256)+31),w
 10525  0133                     u11875:	
 10526  0133  1C03               	skipc
 10527  0134  2942               	goto	l10507
 10528                           
 10529                           ;OverLoad_B1.c: 93: Load.ErrorCount++;
 10530  0135  3001               	movlw	1
 10531  0136  0020               	movlb	0	; select bank0
 10532  0137  00A9               	movwf	??_Load_Main
 10533  0138  0829               	movf	??_Load_Main,w
 10534  0139  0022               	movlb	2	; select bank2
 10535  013A  07D1               	addwf	(_Load^(0+256)+42),f
 10536                           
 10537                           ;OverLoad_B1.c: 94: if (Load.ErrorCount > 2) {
 10538  013B  3003               	movlw	3
 10539  013C  0251               	subwf	(_Load^(0+256)+42),w
 10540  013D  1C03               	skipc
 10541  013E  29A2               	goto	l10543
 10542                           
 10543                           ;OverLoad_B1.c: 95: Load.ErrorCount = 0;
 10544  013F  01D1               	clrf	(_Load^(0+256)+42)
 10545                           
 10546                           ;OverLoad_B1.c: 97: Load.ERROR = 1;
 10547  0140  16A7               	bsf	_Load^(0+256),5
 10548  0141  296C               	goto	L8
 10549  0142                     l10507:	
 10550                           ;OverLoad_B1.c: 110: }
 10551                           ;OverLoad_B1.c: 111: } else {
 10552                           
 10553                           ;OverLoad_B1.c: 108: product->Data[8]=Load.LightsCount;
 10554                           
 10555                           ;OverLoad_B1.c: 107: product->Data[7]=Load.JudgeValue;
 10556                           
 10557                           ;OverLoad_B1.c: 106: product->Data[6]=(Load.JudgeValue >> 8);
 10558                           
 10559                           ;OverLoad_B1.c: 105: product->Data[5]=Load.AD;
 10560                           
 10561                           ;OverLoad_B1.c: 104: product->Data[4]=(Load.AD >> 8);
 10562                           
 10563                           
 10564                           ;OverLoad_B1.c: 112: Load.ErrorCount = 0;
 10565  0142  0022               	movlb	2	; select bank2
 10566  0143  01D1               	clrf	(_Load^(0+256)+42)
 10567                           
 10568                           ;OverLoad_B1.c: 113: if (Load.OK == 0) {
 10569  0144  1BA7               	btfsc	_Load^(0+256),7
 10570  0145  29A2               	goto	l10543
 10571                           
 10572                           ;OverLoad_B1.c: 114: Load.SafeCount++;
 10573  0146  3001               	movlw	1
 10574  0147  0020               	movlb	0	; select bank0
 10575  0148  00A9               	movwf	??_Load_Main
 10576  0149  0829               	movf	??_Load_Main,w
 10577  014A  0022               	movlb	2	; select bank2
 10578  014B  07D3               	addwf	(_Load^(0+256)+44),f
 10579                           
 10580                           ;OverLoad_B1.c: 115: if (Load.SafeCount >= 10) {
 10581  014C  300A               	movlw	10
 10582  014D  0253               	subwf	(_Load^(0+256)+44),w
 10583  014E  1C03               	skipc
 10584  014F  29A2               	goto	l10543
 10585                           
 10586                           ;OverLoad_B1.c: 116: Load.SafeCount = 0;
 10587  0150  01D3               	clrf	(_Load^(0+256)+44)
 10588                           
 10589                           ;OverLoad_B1.c: 117: Load.OK = 1;
 10590  0151  17A7               	bsf	_Load^(0+256),7
 10591                           
 10592                           ;OverLoad_B1.c: 118: Load.TotalLoad = Load.AD;
 10593  0152  0847               	movf	((_Load+1)^(0+256)+31),w
 10594  0153  01B1               	clrf	((_Load+1)^(0+256)+9)
 10595  0154  07B1               	addwf	((_Load+1)^(0+256)+9),f
 10596  0155  0846               	movf	(_Load^(0+256)+31),w
 10597  0156  01B0               	clrf	(_Load^(0+256)+9)
 10598  0157  07B0               	addwf	(_Load^(0+256)+9),f
 10599                           
 10600                           ;OverLoad_B1.c: 119: if (Load.LightsCount == 1) {
 10601  0158  0852               	movf	(_Load^(0+256)+43),w
 10602  0159  3A01               	xorlw	1
 10603  015A  1D03               	skipz
 10604  015B  2961               	goto	l10525
 10605                           
 10606                           ;OverLoad_B1.c: 120: Load.JudgeValue = 0x32;
 10607  015C  3032               	movlw	50
 10608  015D  00CC               	movwf	(_Load^(0+256)+37)
 10609  015E  3000               	movlw	0
 10610  015F  00CD               	movwf	(_Load^(0+256)+38)
 10611                           
 10612                           ;OverLoad_B1.c: 121: } else {
 10613  0160  2967               	goto	l10527
 10614  0161                     l10525:	
 10615                           
 10616                           ;OverLoad_B1.c: 122: Load.JudgeValue = (0x32 + Load.TotalLoad) - 0x08;
 10617  0161  0830               	movf	(_Load^(0+256)+9),w
 10618  0162  3E2A               	addlw	42
 10619  0163  00CC               	movwf	(_Load^(0+256)+37)
 10620  0164  3000               	movlw	0
 10621  0165  3D31               	addwfc	((_Load+1)^(0+256)+9),w
 10622  0166  00CD               	movwf	((_Load+1)^(0+256)+37)
 10623  0167                     l10527:	
 10624                           
 10625                           ;OverLoad_B1.c: 123: }
 10626                           ;OverLoad_B1.c: 125: Load.AD = 0;
 10627  0167  01C6               	clrf	(_Load^(0+256)+31)
 10628  0168  01C7               	clrf	((_Load+1)^(0+256)+31)
 10629                           
 10630                           ;OverLoad_B1.c: 126: Load.JudgeValue = 0;
 10631  0169  01CC               	clrf	(_Load^(0+256)+37)
 10632  016A  01CD               	clrf	((_Load+1)^(0+256)+37)
 10633                           
 10634                           ;OverLoad_B1.c: 127: Load.LightsCount = 0;
 10635  016B  01D2               	clrf	(_Load^(0+256)+43)
 10636  016C                     L8:	
 10637                           
 10638                           ;OverLoad_B1.c: 128: product->Data[4]=(Load.AD >> 8);
 10639  016C  0847               	movf	((_Load+1)^(0+256)+31),w
 10640  016D  0020               	movlb	0	; select bank0
 10641  016E  00A9               	movwf	??_Load_Main
 10642  016F  087B               	movf	_product,w
 10643  0170  3E04               	addlw	4
 10644  0171  0086               	movwf	6
 10645  0172  3002               	movlw	2	; select bank4/5
 10646  0173  0087               	movwf	7
 10647  0174  0829               	movf	??_Load_Main,w
 10648  0175  0081               	movwf	1
 10649                           
 10650                           ;OverLoad_B1.c: 129: product->Data[5]=Load.AD;
 10651  0176  0022               	movlb	2	; select bank2
 10652  0177  0846               	movf	(_Load^(0+256)+31),w
 10653  0178  0020               	movlb	0	; select bank0
 10654  0179  00A9               	movwf	??_Load_Main
 10655  017A  087B               	movf	_product,w
 10656  017B  3E05               	addlw	5
 10657  017C  0086               	movwf	6
 10658  017D  3002               	movlw	2	; select bank4/5
 10659  017E  0087               	movwf	7
 10660  017F  0829               	movf	??_Load_Main,w
 10661  0180  0081               	movwf	1
 10662                           
 10663                           ;OverLoad_B1.c: 130: product->Data[6]=(Load.JudgeValue >> 8);
 10664  0181  0022               	movlb	2	; select bank2
 10665  0182  084D               	movf	((_Load+1)^(0+256)+37),w
 10666  0183  0020               	movlb	0	; select bank0
 10667  0184  00A9               	movwf	??_Load_Main
 10668  0185  087B               	movf	_product,w
 10669  0186  3E06               	addlw	6
 10670  0187  0086               	movwf	6
 10671  0188  3002               	movlw	2	; select bank4/5
 10672  0189  0087               	movwf	7
 10673  018A  0829               	movf	??_Load_Main,w
 10674  018B  0081               	movwf	1
 10675                           
 10676                           ;OverLoad_B1.c: 131: product->Data[7]=Load.JudgeValue;
 10677  018C  0022               	movlb	2	; select bank2
 10678  018D  084C               	movf	(_Load^(0+256)+37),w
 10679  018E  0020               	movlb	0	; select bank0
 10680  018F  00A9               	movwf	??_Load_Main
 10681  0190  087B               	movf	_product,w
 10682  0191  3E07               	addlw	7
 10683  0192  0086               	movwf	6
 10684  0193  3002               	movlw	2	; select bank4/5
 10685  0194  0087               	movwf	7
 10686  0195  0829               	movf	??_Load_Main,w
 10687  0196  0081               	movwf	1
 10688                           
 10689                           ;OverLoad_B1.c: 132: product->Data[8]=Load.LightsCount;
 10690  0197  0022               	movlb	2	; select bank2
 10691  0198  0852               	movf	(_Load^(0+256)+43),w
 10692  0199  0020               	movlb	0	; select bank0
 10693  019A  00A9               	movwf	??_Load_Main
 10694  019B  087B               	movf	_product,w
 10695  019C  3E08               	addlw	8
 10696  019D  0086               	movwf	6
 10697  019E  3002               	movlw	2	; select bank4/5
 10698  019F  0087               	movwf	7
 10699  01A0  0829               	movf	??_Load_Main,w
 10700  01A1  0081               	movwf	1
 10701  01A2                     l10543:	
 10702                           
 10703                           ;OverLoad_B1.c: 134: }
 10704                           ;OverLoad_B1.c: 135: }
 10705                           ;OverLoad_B1.c: 136: }
 10706                           ;OverLoad_B1.c: 137: }
 10707                           ;OverLoad_B1.c: 138: setLoad_AH_AL_Restore();
 10708  01A2  319D  25BA         	fcall	_setLoad_AH_AL_Restore
 10709                           
 10710                           ;OverLoad_B1.c: 139: }
 10711                           ;OverLoad_B1.c: 140: } else {
 10712  01A4  0008               	return
 10713  01A5                     l1719:	
 10714                           
 10715                           ;OverLoad_B1.c: 141: Load.ADtoGO = 1;
 10716  01A5  1627               	bsf	_Load^(0+256),4
 10717                           
 10718                           ;OverLoad_B1.c: 142: }
 10719                           ;OverLoad_B1.c: 143: } else {
 10720  01A6  0008               	return
 10721  01A7                     l1718:	
 10722                           
 10723                           ;OverLoad_B1.c: 144: Load.OK = 1;
 10724  01A7  17A7               	bsf	_Load^(0+256),7
 10725                           
 10726                           ;OverLoad_B1.c: 145: if (Load.LightsON == 1) {
 10727  01A8  1D27               	btfss	_Load^(0+256),2
 10728  01A9  29F4               	goto	l10579
 10729                           
 10730                           ;OverLoad_B1.c: 146: Load.LightsON = 0;
 10731  01AA  1127               	bcf	_Load^(0+256),2
 10732                           
 10733                           ;OverLoad_B1.c: 148: Load.Time = 0;
 10734  01AB  01A8               	clrf	(_Load^(0+256)+1)
 10735  01AC  01A9               	clrf	((_Load+1)^(0+256)+1)
 10736                           
 10737                           ;OverLoad_B1.c: 149: Load.ADtoGO = 0;
 10738  01AD  1227               	bcf	_Load^(0+256),4
 10739                           
 10740                           ;OverLoad_B1.c: 150: setLoad_AH_AL_Restore();
 10741  01AE  319D  25BA  3180   	fcall	_setLoad_AH_AL_Restore
 10742                           
 10743                           ;OverLoad_B1.c: 151: Load.Count = 0;
 10744  01B1  0022               	movlb	2	; select bank2
 10745  01B2  01D0               	clrf	(_Load^(0+256)+41)
 10746                           
 10747                           ;OverLoad_B1.c: 152: Load.ErrorCount = 0;
 10748  01B3  01D1               	clrf	(_Load^(0+256)+42)
 10749                           
 10750                           ;OverLoad_B1.c: 153: Load.SafeCount = 0;
 10751  01B4  01D3               	clrf	(_Load^(0+256)+44)
 10752                           
 10753                           ;OverLoad_B1.c: 155: Load.ADH = 0;
 10754  01B5  01AC               	clrf	(_Load^(0+256)+5)
 10755  01B6  01AD               	clrf	((_Load+1)^(0+256)+5)
 10756                           
 10757                           ;OverLoad_B1.c: 156: Load.ADL = 0;
 10758  01B7  01AE               	clrf	(_Load^(0+256)+7)
 10759  01B8  01AF               	clrf	((_Load+1)^(0+256)+7)
 10760                           
 10761                           ;OverLoad_B1.c: 157: Load.AD = 0;
 10762  01B9  01C6               	clrf	(_Load^(0+256)+31)
 10763  01BA  01C7               	clrf	((_Load+1)^(0+256)+31)
 10764                           
 10765                           ;OverLoad_B1.c: 158: Load.JudgeValue = 0;
 10766  01BB  01CC               	clrf	(_Load^(0+256)+37)
 10767  01BC  01CD               	clrf	((_Load+1)^(0+256)+37)
 10768                           
 10769                           ;OverLoad_B1.c: 159: Load.LightsCount = 0;
 10770  01BD  01D2               	clrf	(_Load^(0+256)+43)
 10771                           
 10772                           ;OverLoad_B1.c: 161: product->Data[4]=(Load.AD >> 8);
 10773  01BE  0847               	movf	((_Load+1)^(0+256)+31),w
 10774  01BF  0020               	movlb	0	; select bank0
 10775  01C0  00A9               	movwf	??_Load_Main
 10776  01C1  087B               	movf	_product,w
 10777  01C2  3E04               	addlw	4
 10778  01C3  0086               	movwf	6
 10779  01C4  3002               	movlw	2	; select bank4/5
 10780  01C5  0087               	movwf	7
 10781  01C6  0829               	movf	??_Load_Main,w
 10782  01C7  0081               	movwf	1
 10783                           
 10784                           ;OverLoad_B1.c: 162: product->Data[5]=Load.AD;
 10785  01C8  0022               	movlb	2	; select bank2
 10786  01C9  0846               	movf	(_Load^(0+256)+31),w
 10787  01CA  0020               	movlb	0	; select bank0
 10788  01CB  00A9               	movwf	??_Load_Main
 10789  01CC  087B               	movf	_product,w
 10790  01CD  3E05               	addlw	5
 10791  01CE  0086               	movwf	6
 10792  01CF  3002               	movlw	2	; select bank4/5
 10793  01D0  0087               	movwf	7
 10794  01D1  0829               	movf	??_Load_Main,w
 10795  01D2  0081               	movwf	1
 10796                           
 10797                           ;OverLoad_B1.c: 163: product->Data[6]=(Load.JudgeValue >> 8);
 10798  01D3  0022               	movlb	2	; select bank2
 10799  01D4  084D               	movf	((_Load+1)^(0+256)+37),w
 10800  01D5  0020               	movlb	0	; select bank0
 10801  01D6  00A9               	movwf	??_Load_Main
 10802  01D7  087B               	movf	_product,w
 10803  01D8  3E06               	addlw	6
 10804  01D9  0086               	movwf	6
 10805  01DA  3002               	movlw	2	; select bank4/5
 10806  01DB  0087               	movwf	7
 10807  01DC  0829               	movf	??_Load_Main,w
 10808  01DD  0081               	movwf	1
 10809                           
 10810                           ;OverLoad_B1.c: 164: product->Data[7]=Load.JudgeValue;
 10811  01DE  0022               	movlb	2	; select bank2
 10812  01DF  084C               	movf	(_Load^(0+256)+37),w
 10813  01E0  0020               	movlb	0	; select bank0
 10814  01E1  00A9               	movwf	??_Load_Main
 10815  01E2  087B               	movf	_product,w
 10816  01E3  3E07               	addlw	7
 10817  01E4  0086               	movwf	6
 10818  01E5  3002               	movlw	2	; select bank4/5
 10819  01E6  0087               	movwf	7
 10820  01E7  0829               	movf	??_Load_Main,w
 10821  01E8  0081               	movwf	1
 10822                           
 10823                           ;OverLoad_B1.c: 165: product->Data[8]=Load.LightsCount;
 10824  01E9  0022               	movlb	2	; select bank2
 10825  01EA  0852               	movf	(_Load^(0+256)+43),w
 10826  01EB  0020               	movlb	0	; select bank0
 10827  01EC  00A9               	movwf	??_Load_Main
 10828  01ED  087B               	movf	_product,w
 10829  01EE  3E08               	addlw	8
 10830  01EF  0086               	movwf	6
 10831  01F0  3002               	movlw	2	; select bank4/5
 10832  01F1  0087               	movwf	7
 10833  01F2  0829               	movf	??_Load_Main,w
 10834  01F3  0081               	movwf	1
 10835  01F4                     l10579:	
 10836                           
 10837                           ;OverLoad_B1.c: 167: }
 10838                           ;OverLoad_B1.c: 168: if (Load.ERROR == 1) {
 10839  01F4  0022               	movlb	2	; select bank2
 10840  01F5  1EA7               	btfss	_Load^(0+256),5
 10841  01F6  0008               	return
 10842                           
 10843                           ;OverLoad_B1.c: 169: Load.ErrorTime++;
 10844  01F7  3001               	movlw	1
 10845  01F8  07AA               	addwf	(_Load^(0+256)+3),f
 10846  01F9  3000               	movlw	0
 10847  01FA  3DAB               	addwfc	((_Load+1)^(0+256)+3),f
 10848                           
 10849                           ;OverLoad_B1.c: 170: if (Load.ErrorTime >= 1000)
 10850  01FB  3003               	movlw	3
 10851  01FC  022B               	subwf	((_Load+1)^(0+256)+3),w
 10852  01FD  30E8               	movlw	232
 10853  01FE  1903               	skipnz
 10854  01FF  022A               	subwf	(_Load^(0+256)+3),w
 10855  0200  1C03               	skipc
 10856  0201  0008               	return
 10857                           
 10858                           ;OverLoad_B1.c: 171: {
 10859                           ;OverLoad_B1.c: 172: Load.ErrorTime = 0;
 10860  0202  01AA               	clrf	(_Load^(0+256)+3)
 10861  0203  01AB               	clrf	((_Load+1)^(0+256)+3)
 10862                           
 10863                           ;OverLoad_B1.c: 179: Load.ERROR = 0;
 10864  0204  12A7               	bcf	_Load^(0+256),5
 10865                           
 10866                           ;OverLoad_B1.c: 180: }
 10867                           ;OverLoad_B1.c: 181: }
 10868                           ;OverLoad_B1.c: 182: }
 10869                           ;OverLoad_B1.c: 183: } else {
 10870  0205  0008               	return
 10871  0206                     l1713:	
 10872                           
 10873                           ;OverLoad_B1.c: 184: if (myMain.PowerON == 1) {
 10874  0206  0021               	movlb	1	; select bank1
 10875  0207  1C20               	btfss	_myMain^(0+128),0
 10876  0208  0008               	return
 10877                           
 10878                           ;OverLoad_B1.c: 185: Load.Enable = 1;
 10879  0209  0022               	movlb	2	; select bank2
 10880  020A  1427               	bsf	_Load^(0+256),0
 10881  020B  0008               	return
 10882  020C                     __end_of_Load_Main:	
 10883                           
 10884                           	psect	text53
 10885  1BBB                     __ptext53:	
 10886 ;; *************** function _getMain_LoadOK *****************
 10887 ;; Defined at:
 10888 ;;		line 431 in file "../src/Main_B1.c"
 10889 ;; Parameters:    Size  Location     Type
 10890 ;;		None
 10891 ;; Auto vars:     Size  Location     Type
 10892 ;;  ok              1    3[BANK0 ] unsigned char 
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  1    wreg      unsigned char 
 10895 ;; Registers used:
 10896 ;;		wreg, status,2, pclath, cstack
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10904 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10905 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10906 ;;Total ram usage:        2 bytes
 10907 ;; Hardware stack levels used:    1
 10908 ;; Hardware stack levels required when called:    6
 10909 ;; This function calls:
 10910 ;;		_getDimmer_LoadOK
 10911 ;; This function is called by:
 10912 ;;		_Load_Main
 10913 ;; This function uses a non-reentrant model
 10914 ;;
 10915                           
 10916                           
 10917                           ;psect for function _getMain_LoadOK
 10918  1BBB                     _getMain_LoadOK:	
 10919                           
 10920                           ;Main_B1.c: 432: char ok = 0;
 10921                           
 10922                           ;incstack = 0
 10923                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10924  1BBB  0020               	movlb	0	; select bank0
 10925  1BBC  01A3               	clrf	getMain_LoadOK@ok
 10926                           
 10927                           ;Main_B1.c: 438: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10928  1BBD  319B  237E         	fcall	_getDimmer_LoadOK
 10929  1BBF  3A01               	xorlw	1
 10930  1BC0  3000               	movlw	0
 10931  1BC1  1903               	skipnz
 10932  1BC2  3001               	movlw	1
 10933  1BC3  0020               	movlb	0	; select bank0
 10934  1BC4  00A2               	movwf	??_getMain_LoadOK
 10935  1BC5  0822               	movf	??_getMain_LoadOK,w
 10936  1BC6  00A3               	movwf	getMain_LoadOK@ok
 10937                           
 10938                           ;Main_B1.c: 440: return ok;
 10939  1BC7  0823               	movf	getMain_LoadOK@ok,w
 10940  1BC8  0008               	return
 10941  1BC9                     __end_of_getMain_LoadOK:	
 10942                           
 10943                           	psect	text54
 10944  1B7E                     __ptext54:	
 10945 ;; *************** function _getDimmer_LoadOK *****************
 10946 ;; Defined at:
 10947 ;;		line 653 in file "../src/Dimmer_B1.c"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;		None
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;  status          1    1[BANK0 ] unsigned char 
 10952 ;; Return value:  Size  Location     Type
 10953 ;;                  1    wreg      unsigned char 
 10954 ;; Registers used:
 10955 ;;		wreg
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10965 ;;Total ram usage:        2 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    5
 10968 ;; This function calls:
 10969 ;;		Nothing
 10970 ;; This function is called by:
 10971 ;;		_getMain_LoadOK
 10972 ;; This function uses a non-reentrant model
 10973 ;;
 10974                           
 10975                           
 10976                           ;psect for function _getDimmer_LoadOK
 10977  1B7E                     _getDimmer_LoadOK:	
 10978                           
 10979                           ;Dimmer_B1.c: 654: char status = Dimmer.Load == 1 ? 1 : 0;
 10980                           
 10981                           ;incstack = 0
 10982                           ; Regs used in _getDimmer_LoadOK: [wreg]
 10983  1B7E  0021               	movlb	1	; select bank1
 10984  1B7F  0849               	movf	(_Dimmer^(0+128)+1),w
 10985  1B80  3A01               	xorlw	1
 10986  1B81  3000               	movlw	0
 10987  1B82  1903               	skipnz
 10988  1B83  3001               	movlw	1
 10989  1B84  0020               	movlb	0	; select bank0
 10990  1B85  00A0               	movwf	??_getDimmer_LoadOK
 10991  1B86  0820               	movf	??_getDimmer_LoadOK,w
 10992  1B87  00A1               	movwf	getDimmer_LoadOK@status
 10993                           
 10994                           ;Dimmer_B1.c: 655: return status;
 10995  1B88  0821               	movf	getDimmer_LoadOK@status,w
 10996  1B89  0008               	return
 10997  1B8A                     __end_of_getDimmer_LoadOK:	
 10998                           
 10999                           	psect	text55
 11000  07EA                     __ptext55:	
 11001 ;; *************** function _getMain_Lights_Count *****************
 11002 ;; Defined at:
 11003 ;;		line 401 in file "../src/Main_B1.c"
 11004 ;; Parameters:    Size  Location     Type
 11005 ;;		None
 11006 ;; Auto vars:     Size  Location     Type
 11007 ;;  status2         1    3[BANK0 ] unsigned char 
 11008 ;;  status1         1    2[BANK0 ] unsigned char 
 11009 ;;  status3         1    1[BANK0 ] unsigned char 
 11010 ;;  count           1    0[BANK0 ] unsigned char 
 11011 ;; Return value:  Size  Location     Type
 11012 ;;                  1    wreg      unsigned char 
 11013 ;; Registers used:
 11014 ;;		wreg, status,2, status,0
 11015 ;; Tracked objects:
 11016 ;;		On entry : 0/0
 11017 ;;		On exit  : 0/0
 11018 ;;		Unchanged: 0/0
 11019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11023 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11024 ;;Total ram usage:        4 bytes
 11025 ;; Hardware stack levels used:    1
 11026 ;; Hardware stack levels required when called:    5
 11027 ;; This function calls:
 11028 ;;		Nothing
 11029 ;; This function is called by:
 11030 ;;		_Load_Main
 11031 ;; This function uses a non-reentrant model
 11032 ;;
 11033                           
 11034                           
 11035                           ;psect for function _getMain_Lights_Count
 11036  07EA                     _getMain_Lights_Count:	
 11037                           
 11038                           ;Main_B1.c: 402: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 11039                           
 11040                           ;incstack = 0
 11041                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11042  07EA  0020               	movlb	0	; select bank0
 11043  07EB  01A2               	clrf	getMain_Lights_Count@status1
 11044  07EC  01A3               	clrf	getMain_Lights_Count@status2
 11045  07ED  01A1               	clrf	getMain_Lights_Count@status3
 11046  07EE  01A0               	clrf	getMain_Lights_Count@count
 11047                           
 11048                           ;Main_B1.c: 406: status1 = DimmerLights1.Status == 1 ? 1 : 0;
 11049  07EF  3000               	movlw	0
 11050  07F0  0023               	movlb	3	; select bank3
 11051  07F1  1ABE               	btfsc	_DimmerLights1^(0+384),5
 11052  07F2  3001               	movlw	1
 11053  07F3  0020               	movlb	0	; select bank0
 11054  07F4  00A2               	movwf	getMain_Lights_Count@status1
 11055                           
 11056                           ;Main_B1.c: 409: status2 = DimmerLights2.Status == 1 ? 1 : 0;
 11057  07F5  3000               	movlw	0
 11058  07F6  0023               	movlb	3	; select bank3
 11059  07F7  1ACD               	btfsc	_DimmerLights2^(0+384),5
 11060  07F8  3001               	movlw	1
 11061  07F9  0020               	movlb	0	; select bank0
 11062  07FA  00A3               	movwf	getMain_Lights_Count@status2
 11063                           
 11064                           ;Main_B1.c: 427: return count = (status1 + status2 + status3);
 11065  07FB  0822               	movf	getMain_Lights_Count@status1,w
 11066  07FC  0723               	addwf	getMain_Lights_Count@status2,w
 11067  07FD  0721               	addwf	getMain_Lights_Count@status3,w
 11068  07FE  00A0               	movwf	getMain_Lights_Count@count
 11069  07FF  0008               	return
 11070  0800                     __end_of_getMain_Lights_Count:	
 11071                           
 11072                           	psect	text56
 11073  1ADB                     __ptext56:	
 11074 ;; *************** function _Load_Initialization *****************
 11075 ;; Defined at:
 11076 ;;		line 9 in file "../src/OverLoad_B1.c"
 11077 ;; Parameters:    Size  Location     Type
 11078 ;;		None
 11079 ;; Auto vars:     Size  Location     Type
 11080 ;;		None
 11081 ;; Return value:  Size  Location     Type
 11082 ;;		None               void
 11083 ;; Registers used:
 11084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11085 ;; Tracked objects:
 11086 ;;		On entry : 0/0
 11087 ;;		On exit  : 0/0
 11088 ;;		Unchanged: 0/0
 11089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;Total ram usage:        0 bytes
 11095 ;; Hardware stack levels used:    1
 11096 ;; Hardware stack levels required when called:    6
 11097 ;; This function calls:
 11098 ;;		_setLoad_AH_AL_Restore
 11099 ;; This function is called by:
 11100 ;;		_main
 11101 ;; This function uses a non-reentrant model
 11102 ;;
 11103                           
 11104                           
 11105                           ;psect for function _Load_Initialization
 11106  1ADB                     _Load_Initialization:	
 11107                           
 11108                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11109                           
 11110                           ;incstack = 0
 11111                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11112  1ADB  0022               	movlb	2	; select bank2
 11113  1ADC  17A7               	bsf	_Load^(0+256),7
 11114                           
 11115                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11116  1ADD  319D  25BA         	fcall	_setLoad_AH_AL_Restore
 11117  1ADF  0008               	return
 11118  1AE0                     __end_of_Load_Initialization:	
 11119                           
 11120                           	psect	text57
 11121  1DBA                     __ptext57:	
 11122 ;; *************** function _setLoad_AH_AL_Restore *****************
 11123 ;; Defined at:
 11124 ;;		line 291 in file "../src/OverLoad_B1.c"
 11125 ;; Parameters:    Size  Location     Type
 11126 ;;		None
 11127 ;; Auto vars:     Size  Location     Type
 11128 ;;  i               1    1[BANK0 ] unsigned char 
 11129 ;; Return value:  Size  Location     Type
 11130 ;;		None               void
 11131 ;; Registers used:
 11132 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11133 ;; Tracked objects:
 11134 ;;		On entry : 0/0
 11135 ;;		On exit  : 0/0
 11136 ;;		Unchanged: 0/0
 11137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11139 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11141 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;Total ram usage:        2 bytes
 11143 ;; Hardware stack levels used:    1
 11144 ;; Hardware stack levels required when called:    5
 11145 ;; This function calls:
 11146 ;;		Nothing
 11147 ;; This function is called by:
 11148 ;;		_Load_Initialization
 11149 ;;		_Load_Main
 11150 ;; This function uses a non-reentrant model
 11151 ;;
 11152                           
 11153                           
 11154                           ;psect for function _setLoad_AH_AL_Restore
 11155  1DBA                     _setLoad_AH_AL_Restore:	
 11156                           
 11157                           ;OverLoad_B1.c: 292: char i;
 11158                           ;OverLoad_B1.c: 293: for (i = 0; i < 5; i++) {
 11159                           
 11160                           ;incstack = 0
 11161                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11162  1DBA  0020               	movlb	0	; select bank0
 11163  1DBB  01A1               	clrf	setLoad_AH_AL_Restore@i
 11164  1DBC                     L9:	
 11165  1DBC  3005               	movlw	5
 11166  1DBD  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11167  1DBE  1803               	btfsc	3,0
 11168  1DBF  0008               	return
 11169                           
 11170                           ;OverLoad_B1.c: 294: Load.AH[i] = 0;
 11171  1DC0  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11172  1DC1  3E32               	addlw	(_Load+11)& (0+255)
 11173  1DC2  0086               	movwf	6
 11174  1DC3  3001               	movlw	1	; select bank2/3
 11175  1DC4  0087               	movwf	7
 11176  1DC5  3000               	movlw	0
 11177  1DC6  3FC0               	movwi [0]fsr1
 11178  1DC7  3FC1               	movwi [1]fsr1
 11179                           
 11180                           ;OverLoad_B1.c: 295: Load.AL[i] = 0xffff;
 11181  1DC8  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11182  1DC9  3E3C               	addlw	(_Load+21)& (0+255)
 11183  1DCA  0086               	movwf	6
 11184  1DCB  3001               	movlw	1	; select bank2/3
 11185  1DCC  0087               	movwf	7
 11186  1DCD  30FF               	movlw	255
 11187  1DCE  3FC0               	movwi [0]fsr1
 11188  1DCF  30FF               	movlw	255
 11189  1DD0  3FC1               	movwi [1]fsr1
 11190  1DD1  3001               	movlw	1
 11191  1DD2  00A0               	movwf	??_setLoad_AH_AL_Restore
 11192  1DD3  0820               	movf	??_setLoad_AH_AL_Restore,w
 11193  1DD4  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11194  1DD5  2DBC               	goto	L9
 11195  1DD6                     __end_of_setLoad_AH_AL_Restore:	
 11196                           
 11197                           	psect	text58
 11198  1B72                     __ptext58:	
 11199 ;; *************** function _LED_Main *****************
 11200 ;; Defined at:
 11201 ;;		line 47 in file "../src/LED_B1.c"
 11202 ;; Parameters:    Size  Location     Type
 11203 ;;		None
 11204 ;; Auto vars:     Size  Location     Type
 11205 ;;		None
 11206 ;; Return value:  Size  Location     Type
 11207 ;;		None               void
 11208 ;; Registers used:
 11209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11210 ;; Tracked objects:
 11211 ;;		On entry : 0/0
 11212 ;;		On exit  : 0/0
 11213 ;;		Unchanged: 0/0
 11214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;Total ram usage:        0 bytes
 11220 ;; Hardware stack levels used:    1
 11221 ;; Hardware stack levels required when called:    7
 11222 ;; This function calls:
 11223 ;;		_setLED_Main
 11224 ;; This function is called by:
 11225 ;;		_main
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229                           
 11230                           ;psect for function _LED_Main
 11231  1B72                     _LED_Main:	
 11232                           
 11233                           ;LED_B1.c: 49: setLED_Main(1);
 11234                           
 11235                           ;incstack = 0
 11236                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11237  1B72  3001               	movlw	1
 11238  1B73  3193  2328  319B   	fcall	_setLED_Main
 11239                           
 11240                           ;LED_B1.c: 52: setLED_Main(2);
 11241  1B76  3002               	movlw	2
 11242  1B77  3193  2328  319B   	fcall	_setLED_Main
 11243                           
 11244                           ;LED_B1.c: 58: setLED_Main(99);
 11245  1B7A  3063               	movlw	99
 11246  1B7B  3193  2328         	fcall	_setLED_Main
 11247  1B7D  0008               	return
 11248  1B7E                     __end_of_LED_Main:	
 11249                           
 11250                           	psect	text59
 11251  1328                     __ptext59:	
 11252 ;; *************** function _setLED_Main *****************
 11253 ;; Defined at:
 11254 ;;		line 215 in file "../src/LED_B1.c"
 11255 ;; Parameters:    Size  Location     Type
 11256 ;;  led             1    wreg     unsigned char 
 11257 ;; Auto vars:     Size  Location     Type
 11258 ;;  led             1    4[BANK0 ] unsigned char 
 11259 ;; Return value:  Size  Location     Type
 11260 ;;		None               void
 11261 ;; Registers used:
 11262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11263 ;; Tracked objects:
 11264 ;;		On entry : 0/0
 11265 ;;		On exit  : 0/0
 11266 ;;		Unchanged: 0/0
 11267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11272 ;;Total ram usage:        3 bytes
 11273 ;; Hardware stack levels used:    1
 11274 ;; Hardware stack levels required when called:    6
 11275 ;; This function calls:
 11276 ;;		_LedPointSelect
 11277 ;; This function is called by:
 11278 ;;		_LED_Main
 11279 ;; This function uses a non-reentrant model
 11280 ;;
 11281                           
 11282                           
 11283                           ;psect for function _setLED_Main
 11284  1328                     _setLED_Main:	
 11285                           
 11286                           ;incstack = 0
 11287                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11288                           ;setLED_Main@led stored from wreg
 11289  1328  0020               	movlb	0	; select bank0
 11290  1329  00A4               	movwf	setLED_Main@led
 11291                           
 11292                           ;LED_B1.c: 216: LedPointSelect(led);
 11293  132A  0824               	movf	setLED_Main@led,w
 11294  132B  319E  26B2  3193   	fcall	_LedPointSelect
 11295                           
 11296                           ;LED_B1.c: 217: if (LED->GO == 1) {
 11297  132E  0021               	movlb	1	; select bank1
 11298  132F  084F               	movf	_LED^(0+128),w
 11299  1330  0086               	movwf	6
 11300  1331  3001               	movlw	1	; select bank2/3
 11301  1332  0087               	movwf	7
 11302  1333  1C81               	btfss	1,1
 11303  1334  0008               	return
 11304                           
 11305                           ;LED_B1.c: 218: LED->Time++;
 11306  1335  0A4F               	incf	_LED^(0+128),w
 11307  1336  0086               	movwf	6
 11308  1337  3001               	movlw	1	; select bank2/3
 11309  1338  0087               	movwf	7
 11310  1339  3001               	movlw	1
 11311  133A  0781               	addwf	1,f
 11312  133B  3141               	addfsr 1,1
 11313  133C  1803               	skipnc
 11314  133D  0A81               	incf	1,f
 11315                           
 11316                           ;LED_B1.c: 219: if (LED->Time >= 500 / 10) {
 11317  133E  0A4F               	incf	_LED^(0+128),w
 11318  133F  0086               	movwf	6
 11319  1340  3001               	movlw	1	; select bank2/3
 11320  1341  0087               	movwf	7
 11321  1342  3F40               	moviw [0]fsr1
 11322  1343  0020               	movlb	0	; select bank0
 11323  1344  00A2               	movwf	??_setLED_Main
 11324  1345  3F41               	moviw [1]fsr1
 11325  1346  00A3               	movwf	??_setLED_Main+1
 11326  1347  3000               	movlw	0
 11327  1348  0223               	subwf	??_setLED_Main+1,w
 11328  1349  3032               	movlw	50
 11329  134A  1903               	skipnz
 11330  134B  0222               	subwf	??_setLED_Main,w
 11331  134C  1C03               	skipc
 11332  134D  0008               	return
 11333                           
 11334                           ;LED_B1.c: 220: LED->Time = 0;
 11335  134E  0021               	movlb	1	; select bank1
 11336  134F  0A4F               	incf	_LED^(0+128),w
 11337  1350  0086               	movwf	6
 11338  1351  3001               	movlw	1	; select bank2/3
 11339  1352  0087               	movwf	7
 11340  1353  3000               	movlw	0
 11341  1354  3FC0               	movwi [0]fsr1
 11342  1355  3FC1               	movwi [1]fsr1
 11343                           
 11344                           ;LED_B1.c: 222: if (led == 1) {
 11345  1356  0020               	movlb	0	; select bank0
 11346  1357  0824               	movf	setLED_Main@led,w
 11347  1358  3A01               	xorlw	1
 11348  1359  1D03               	skipz
 11349  135A  2B5E               	goto	l9725
 11350                           
 11351                           ;LED_B1.c: 223: RA3 = RA3 == 1 ? 0 : 1;
 11352  135B  3008               	movlw	8
 11353  135C  068C               	xorwf	12,f
 11354                           
 11355                           ;LED_B1.c: 224: }
 11356  135D  0008               	return
 11357  135E                     l9725:	
 11358                           
 11359                           ;LED_B1.c: 227: else if (led == 2) {
 11360  135E  0824               	movf	setLED_Main@led,w
 11361  135F  3A02               	xorlw	2
 11362  1360  1D03               	skipz
 11363  1361  2B65               	goto	l9729
 11364                           
 11365                           ;LED_B1.c: 228: RC7 = RC7 == 1 ? 0 : 1;
 11366  1362  3080               	movlw	128
 11367  1363  068E               	xorwf	14,f
 11368                           
 11369                           ;LED_B1.c: 229: }
 11370  1364  0008               	return
 11371  1365                     l9729:	
 11372                           
 11373                           ;LED_B1.c: 237: else if (led == 99) {
 11374  1365  0824               	movf	setLED_Main@led,w
 11375  1366  3A63               	xorlw	99
 11376  1367  1D03               	skipz
 11377  1368  0008               	return
 11378                           
 11379                           ;LED_B1.c: 238: RB5 = RB5 == 1 ? 0 : 1;
 11380  1369  3020               	movlw	32
 11381  136A  068D               	xorwf	13,f
 11382  136B  0008               	return
 11383  136C                     __end_of_setLED_Main:	
 11384                           
 11385                           	psect	text60
 11386  1B66                     __ptext60:	
 11387 ;; *************** function _LED_Initialization *****************
 11388 ;; Defined at:
 11389 ;;		line 31 in file "../src/LED_B1.c"
 11390 ;; Parameters:    Size  Location     Type
 11391 ;;		None
 11392 ;; Auto vars:     Size  Location     Type
 11393 ;;		None
 11394 ;; Return value:  Size  Location     Type
 11395 ;;		None               void
 11396 ;; Registers used:
 11397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11398 ;; Tracked objects:
 11399 ;;		On entry : 0/0
 11400 ;;		On exit  : 0/0
 11401 ;;		Unchanged: 0/0
 11402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11407 ;;Total ram usage:        0 bytes
 11408 ;; Hardware stack levels used:    1
 11409 ;; Hardware stack levels required when called:    8
 11410 ;; This function calls:
 11411 ;;		_setLED_Initialization
 11412 ;; This function is called by:
 11413 ;;		_main
 11414 ;; This function uses a non-reentrant model
 11415 ;;
 11416                           
 11417                           
 11418                           ;psect for function _LED_Initialization
 11419  1B66                     _LED_Initialization:	
 11420                           
 11421                           ;LED_B1.c: 33: setLED_Initialization(1);
 11422                           
 11423                           ;incstack = 0
 11424                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11425  1B66  3001               	movlw	1
 11426  1B67  319C  243F  319B   	fcall	_setLED_Initialization
 11427                           
 11428                           ;LED_B1.c: 36: setLED_Initialization(2);
 11429  1B6A  3002               	movlw	2
 11430  1B6B  319C  243F  319B   	fcall	_setLED_Initialization
 11431                           
 11432                           ;LED_B1.c: 42: setLED_Initialization(99);
 11433  1B6E  3063               	movlw	99
 11434  1B6F  319C  243F         	fcall	_setLED_Initialization
 11435  1B71  0008               	return
 11436  1B72                     __end_of_LED_Initialization:	
 11437                           
 11438                           	psect	text61
 11439  1C3F                     __ptext61:	
 11440 ;; *************** function _setLED_Initialization *****************
 11441 ;; Defined at:
 11442 ;;		line 66 in file "../src/LED_B1.c"
 11443 ;; Parameters:    Size  Location     Type
 11444 ;;  led             1    wreg     unsigned char 
 11445 ;; Auto vars:     Size  Location     Type
 11446 ;;  led             1    4[BANK0 ] unsigned char 
 11447 ;; Return value:  Size  Location     Type
 11448 ;;		None               void
 11449 ;; Registers used:
 11450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11451 ;; Tracked objects:
 11452 ;;		On entry : 0/0
 11453 ;;		On exit  : 0/0
 11454 ;;		Unchanged: 0/0
 11455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11460 ;;Total ram usage:        1 bytes
 11461 ;; Hardware stack levels used:    1
 11462 ;; Hardware stack levels required when called:    7
 11463 ;; This function calls:
 11464 ;;		_LedPointSelect
 11465 ;;		_setLED
 11466 ;; This function is called by:
 11467 ;;		_LED_Initialization
 11468 ;; This function uses a non-reentrant model
 11469 ;;
 11470                           
 11471                           
 11472                           ;psect for function _setLED_Initialization
 11473  1C3F                     _setLED_Initialization:	
 11474                           
 11475                           ;incstack = 0
 11476                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11477                           ;setLED_Initialization@led stored from wreg
 11478  1C3F  0020               	movlb	0	; select bank0
 11479  1C40  00A4               	movwf	setLED_Initialization@led
 11480                           
 11481                           ;LED_B1.c: 67: LedPointSelect(led);
 11482  1C41  0824               	movf	setLED_Initialization@led,w
 11483  1C42  319E  26B2  319C   	fcall	_LedPointSelect
 11484                           
 11485                           ;LED_B1.c: 68: LED->Enable = 1;
 11486  1C45  0021               	movlb	1	; select bank1
 11487  1C46  084F               	movf	_LED^(0+128),w
 11488  1C47  0086               	movwf	6
 11489  1C48  3001               	movlw	1	; select bank2/3
 11490  1C49  0087               	movwf	7
 11491  1C4A  1401               	bsf	1,0
 11492                           
 11493                           ;LED_B1.c: 69: setLED(led, 0);
 11494  1C4B  0020               	movlb	0	; select bank0
 11495  1C4C  01A2               	clrf	setLED@command
 11496  1C4D  0824               	movf	setLED_Initialization@led,w
 11497  1C4E  3188  20D1         	fcall	_setLED
 11498  1C50  0008               	return
 11499  1C51                     __end_of_setLED_Initialization:	
 11500                           
 11501                           	psect	text62
 11502  11CA                     __ptext62:	
 11503 ;; *************** function _Flash_Memory_Main *****************
 11504 ;; Defined at:
 11505 ;;		line 901 in file "../src/MCU_B1.c"
 11506 ;; Parameters:    Size  Location     Type
 11507 ;;		None
 11508 ;; Auto vars:     Size  Location     Type
 11509 ;;		None
 11510 ;; Return value:  Size  Location     Type
 11511 ;;		None               void
 11512 ;; Registers used:
 11513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11514 ;; Tracked objects:
 11515 ;;		On entry : 0/0
 11516 ;;		On exit  : 0/0
 11517 ;;		Unchanged: 0/0
 11518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;Total ram usage:        1 bytes
 11524 ;; Hardware stack levels used:    1
 11525 ;; Hardware stack levels required when called:    8
 11526 ;; This function calls:
 11527 ;;		_Flash_Memory_Modify
 11528 ;;		_getMain_LightsStatus
 11529 ;; This function is called by:
 11530 ;;		_main
 11531 ;; This function uses a non-reentrant model
 11532 ;;
 11533                           
 11534                           
 11535                           ;psect for function _Flash_Memory_Main
 11536  11CA                     _Flash_Memory_Main:	
 11537                           
 11538                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 11539                           
 11540                           ;incstack = 0
 11541                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11542  11CA  0024               	movlb	4	; select bank4
 11543  11CB  1C44               	btfss	(_Memory^(0+512)+36),0
 11544  11CC  0008               	return
 11545                           
 11546                           ;MCU_B1.c: 903: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11547  11CD  3190  20D9  3191   	fcall	_getMain_LightsStatus
 11548  11D0  3A00               	xorlw	0
 11549  11D1  3000               	movlw	0
 11550  11D2  1903               	skipnz
 11551  11D3  3001               	movlw	1
 11552  11D4  0020               	movlb	0	; select bank0
 11553  11D5  00A9               	movwf	??_Flash_Memory_Main
 11554  11D6  0DA9               	rlf	??_Flash_Memory_Main,f
 11555  11D7  0024               	movlb	4	; select bank4
 11556  11D8  0844               	movf	(_Memory^(0+512)+36),w
 11557  11D9  0020               	movlb	0	; select bank0
 11558  11DA  0629               	xorwf	??_Flash_Memory_Main,w
 11559  11DB  39FD               	andlw	-3
 11560  11DC  0629               	xorwf	??_Flash_Memory_Main,w
 11561  11DD  0024               	movlb	4	; select bank4
 11562  11DE  00C4               	movwf	(_Memory^(0+512)+36)
 11563                           
 11564                           ;MCU_B1.c: 904: if (Memory.GO == 1) {
 11565  11DF  1CC4               	btfss	(_Memory^(0+512)+36),1
 11566  11E0  29FA               	goto	l1331
 11567                           
 11568                           ;MCU_B1.c: 905: Memory.Runtime = 1;
 11569  11E1  15C4               	bsf	(_Memory^(0+512)+36),3
 11570                           
 11571                           ;MCU_B1.c: 906: Memory.Time++;
 11572  11E2  3001               	movlw	1
 11573  11E3  07C2               	addwf	(_Memory^(0+512)+34),f
 11574  11E4  3000               	movlw	0
 11575  11E5  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11576                           
 11577                           ;MCU_B1.c: 907: if (Memory.Time == 25) {
 11578  11E6  3022               	movlw	34
 11579  11E7  3E20               	addlw	_Memory& (0+255)
 11580  11E8  0086               	movwf	6
 11581  11E9  3002               	movlw	2	; select bank4/5
 11582  11EA  0087               	movwf	7
 11583  11EB  3F40               	moviw [0]fsr1
 11584  11EC  3A19               	xorlw	25
 11585  11ED  1D03               	skipz
 11586  11EE  29F1               	goto	u11485
 11587  11EF  3F41               	moviw [1]fsr1
 11588  11F0  3A00               	xorlw	0
 11589  11F1                     u11485:	
 11590  11F1  1D03               	skipz
 11591  11F2  0008               	return
 11592                           
 11593                           ;MCU_B1.c: 908: Memory.Time = 0;
 11594  11F3  01C2               	clrf	(_Memory^(0+512)+34)
 11595  11F4  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11596                           
 11597                           ;MCU_B1.c: 909: Memory.Modify = 0;
 11598  11F5  1044               	bcf	(_Memory^(0+512)+36),0
 11599                           
 11600                           ;MCU_B1.c: 910: Memory.GO = 0;
 11601  11F6  10C4               	bcf	(_Memory^(0+512)+36),1
 11602                           
 11603                           ;MCU_B1.c: 911: Flash_Memory_Modify();
 11604  11F7  3194  2442         	fcall	_Flash_Memory_Modify
 11605                           
 11606                           ;MCU_B1.c: 912: }
 11607                           ;MCU_B1.c: 913: } else {
 11608  11F9  0008               	return
 11609  11FA                     l1331:	
 11610                           
 11611                           ;MCU_B1.c: 914: if (Memory.Runtime == 1) {
 11612  11FA  1DC4               	btfss	(_Memory^(0+512)+36),3
 11613  11FB  0008               	return
 11614                           
 11615                           ;MCU_B1.c: 915: Memory.Runtime = 0;
 11616  11FC  11C4               	bcf	(_Memory^(0+512)+36),3
 11617                           
 11618                           ;MCU_B1.c: 916: Memory.Time = 0;
 11619  11FD  01C2               	clrf	(_Memory^(0+512)+34)
 11620  11FE  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11621  11FF  0008               	return
 11622  1200                     __end_of_Flash_Memory_Main:	
 11623                           
 11624                           	psect	text63
 11625  10D9                     __ptext63:	
 11626 ;; *************** function _getMain_LightsStatus *****************
 11627 ;; Defined at:
 11628 ;;		line 333 in file "../src/Main_B1.c"
 11629 ;; Parameters:    Size  Location     Type
 11630 ;;		None
 11631 ;; Auto vars:     Size  Location     Type
 11632 ;;  i               2    6[BANK0 ] int 
 11633 ;;  status          1    8[BANK0 ] unsigned char 
 11634 ;;  count           1    5[BANK0 ] unsigned char 
 11635 ;; Return value:  Size  Location     Type
 11636 ;;                  1    wreg      unsigned char 
 11637 ;; Registers used:
 11638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11639 ;; Tracked objects:
 11640 ;;		On entry : 0/0
 11641 ;;		On exit  : 0/0
 11642 ;;		Unchanged: 0/0
 11643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11645 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;Total ram usage:        5 bytes
 11649 ;; Hardware stack levels used:    1
 11650 ;; Hardware stack levels required when called:    7
 11651 ;; This function calls:
 11652 ;;		_getDimmerLights_Status
 11653 ;; This function is called by:
 11654 ;;		_Flash_Memory_Main
 11655 ;;		_setMain_Exception
 11656 ;;		_Load_Main
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           
 11661                           ;psect for function _getMain_LightsStatus
 11662  10D9                     _getMain_LightsStatus:	
 11663                           
 11664                           ;Main_B1.c: 334: char status = 0;
 11665                           
 11666                           ;incstack = 0
 11667                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11668  10D9  0020               	movlb	0	; select bank0
 11669  10DA  01A8               	clrf	getMain_LightsStatus@status
 11670                           
 11671                           ;Main_B1.c: 340: char count = 2;
 11672  10DB  3002               	movlw	2
 11673  10DC  00A4               	movwf	??_getMain_LightsStatus
 11674  10DD  0824               	movf	??_getMain_LightsStatus,w
 11675  10DE  00A5               	movwf	getMain_LightsStatus@count
 11676                           
 11677                           ;Main_B1.c: 346: for (int i = 0; i < count; i++) {
 11678  10DF  01A6               	clrf	getMain_LightsStatus@i
 11679  10E0  01A7               	clrf	getMain_LightsStatus@i+1
 11680  10E1                     l9465:	
 11681  10E1  0827               	movf	getMain_LightsStatus@i+1,w
 11682  10E2  3A80               	xorlw	128
 11683  10E3  00A4               	movwf	??_getMain_LightsStatus
 11684  10E4  3080               	movlw	128
 11685  10E5  0224               	subwf	??_getMain_LightsStatus,w
 11686  10E6  1D03               	skipz
 11687  10E7  28EA               	goto	u10165
 11688  10E8  0825               	movf	getMain_LightsStatus@count,w
 11689  10E9  0226               	subwf	getMain_LightsStatus@i,w
 11690  10EA                     u10165:	
 11691  10EA  1803               	btfsc	3,0
 11692  10EB  2902               	goto	l9467
 11693                           
 11694                           ;Main_B1.c: 347: if (status == 0) {
 11695  10EC  0020               	movlb	0	; select bank0
 11696  10ED  08A8               	movf	getMain_LightsStatus@status,f
 11697  10EE  1D03               	skipz
 11698  10EF  28FD               	goto	l9463
 11699                           
 11700                           ;Main_B1.c: 352: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 11701  10F0  0826               	movf	getMain_LightsStatus@i,w
 11702  10F1  3E01               	addlw	1
 11703  10F2  319B  23D8  3190   	fcall	_getDimmerLights_Status
 11704  10F5  3A01               	xorlw	1
 11705  10F6  3000               	movlw	0
 11706  10F7  1903               	skipnz
 11707  10F8  3001               	movlw	1
 11708  10F9  0020               	movlb	0	; select bank0
 11709  10FA  00A4               	movwf	??_getMain_LightsStatus
 11710  10FB  0824               	movf	??_getMain_LightsStatus,w
 11711  10FC  00A8               	movwf	getMain_LightsStatus@status
 11712  10FD                     l9463:	
 11713  10FD  3001               	movlw	1
 11714  10FE  07A6               	addwf	getMain_LightsStatus@i,f
 11715  10FF  3000               	movlw	0
 11716  1100  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 11717  1101  28E1               	goto	l9465
 11718  1102                     l9467:	
 11719                           
 11720                           ;Main_B1.c: 354: }
 11721                           ;Main_B1.c: 355: }
 11722                           ;Main_B1.c: 356: return status;
 11723  1102  0020               	movlb	0	; select bank0
 11724  1103  0828               	movf	getMain_LightsStatus@status,w
 11725  1104  0008               	return
 11726  1105                     __end_of_getMain_LightsStatus:	
 11727                           
 11728                           	psect	text64
 11729  1442                     __ptext64:	
 11730 ;; *************** function _Flash_Memory_Modify *****************
 11731 ;; Defined at:
 11732 ;;		line 974 in file "../src/MCU_B1.c"
 11733 ;; Parameters:    Size  Location     Type
 11734 ;;		None
 11735 ;; Auto vars:     Size  Location     Type
 11736 ;;  i               1    5[BANK0 ] unsigned char 
 11737 ;; Return value:  Size  Location     Type
 11738 ;;		None               void
 11739 ;; Registers used:
 11740 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11741 ;; Tracked objects:
 11742 ;;		On entry : 0/0
 11743 ;;		On exit  : 0/0
 11744 ;;		Unchanged: 0/0
 11745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11747 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11748 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11749 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11750 ;;Total ram usage:        2 bytes
 11751 ;; Hardware stack levels used:    1
 11752 ;; Hardware stack levels required when called:    7
 11753 ;; This function calls:
 11754 ;;		_Flash_Memory_Erasing
 11755 ;;		_Flash_Memory_Read
 11756 ;;		_Flash_Memory_Write
 11757 ;;		_setMemory_Data
 11758 ;; This function is called by:
 11759 ;;		_Flash_Memory_Main
 11760 ;; This function uses a non-reentrant model
 11761 ;;
 11762                           
 11763                           
 11764                           ;psect for function _Flash_Memory_Modify
 11765  1442                     _Flash_Memory_Modify:	
 11766                           
 11767                           ;MCU_B1.c: 975: char i = 0;
 11768                           
 11769                           ;incstack = 0
 11770                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11771  1442  0020               	movlb	0	; select bank0
 11772  1443  01A5               	clrf	Flash_Memory_Modify@i
 11773                           
 11774                           ;MCU_B1.c: 976: for (i = 0; i < 32; i++) {
 11775  1444  01A5               	clrf	Flash_Memory_Modify@i
 11776  1445  3020               	movlw	32
 11777  1446  0225               	subwf	Flash_Memory_Modify@i,w
 11778  1447  1803               	btfsc	3,0
 11779  1448  2C5E               	goto	l9811
 11780  1449                     l9805:	
 11781                           
 11782                           ;MCU_B1.c: 977: Memory.Data[i] = Flash_Memory_Read(i);
 11783  1449  0825               	movf	Flash_Memory_Modify@i,w
 11784  144A  319D  25A0  3194   	fcall	_Flash_Memory_Read
 11785  144D  0020               	movlb	0	; select bank0
 11786  144E  00A4               	movwf	??_Flash_Memory_Modify
 11787  144F  0825               	movf	Flash_Memory_Modify@i,w
 11788  1450  3E20               	addlw	_Memory& (0+255)
 11789  1451  0086               	movwf	6
 11790  1452  3002               	movlw	2	; select bank4/5
 11791  1453  0087               	movwf	7
 11792  1454  0824               	movf	??_Flash_Memory_Modify,w
 11793  1455  0081               	movwf	1
 11794  1456  3001               	movlw	1
 11795  1457  00A4               	movwf	??_Flash_Memory_Modify
 11796  1458  0824               	movf	??_Flash_Memory_Modify,w
 11797  1459  07A5               	addwf	Flash_Memory_Modify@i,f
 11798  145A  3020               	movlw	32
 11799  145B  0225               	subwf	Flash_Memory_Modify@i,w
 11800  145C  1C03               	skipc
 11801  145D  2C49               	goto	l9805
 11802  145E                     l9811:	
 11803                           
 11804                           ;MCU_B1.c: 978: }
 11805                           ;MCU_B1.c: 979: setMemory_Data(0, product->Data[12]);
 11806  145E  087B               	movf	_product,w
 11807  145F  0086               	movwf	6
 11808  1460  3002               	movlw	2	; select bank4/5
 11809  1461  0087               	movwf	7
 11810  1462  3002               	movlw	2	; select bank4/5
 11811  1463  3F4C               	moviw [12]fsr1
 11812  1464  00A0               	movwf	setMemory_Data@data
 11813  1465  3000               	movlw	0
 11814  1466  319B  234E  3194   	fcall	_setMemory_Data
 11815                           
 11816                           ;MCU_B1.c: 980: setMemory_Data(1, product->Data[13]);
 11817  1469  087B               	movf	_product,w
 11818  146A  0086               	movwf	6
 11819  146B  3002               	movlw	2	; select bank4/5
 11820  146C  0087               	movwf	7
 11821  146D  3002               	movlw	2	; select bank4/5
 11822  146E  3F4D               	moviw [13]fsr1
 11823  146F  0020               	movlb	0	; select bank0
 11824  1470  00A0               	movwf	setMemory_Data@data
 11825  1471  3001               	movlw	1
 11826  1472  319B  234E  3194   	fcall	_setMemory_Data
 11827                           
 11828                           ;MCU_B1.c: 981: setMemory_Data(2, product->Data[14]);
 11829  1475  087B               	movf	_product,w
 11830  1476  0086               	movwf	6
 11831  1477  3002               	movlw	2	; select bank4/5
 11832  1478  0087               	movwf	7
 11833  1479  3002               	movlw	2	; select bank4/5
 11834  147A  3F4E               	moviw [14]fsr1
 11835  147B  0020               	movlb	0	; select bank0
 11836  147C  00A0               	movwf	setMemory_Data@data
 11837  147D  3002               	movlw	2
 11838  147E  319B  234E  3194   	fcall	_setMemory_Data
 11839                           
 11840                           ;MCU_B1.c: 987: if (Memory.LoopSave == 1) {
 11841  1481  0024               	movlb	4	; select bank4
 11842  1482  1D44               	btfss	(_Memory^(0+512)+36),2
 11843  1483  2C88               	goto	l1354
 11844                           
 11845                           ;MCU_B1.c: 988: Memory.LoopSave = 0;
 11846  1484  1144               	bcf	(_Memory^(0+512)+36),2
 11847                           
 11848                           ;MCU_B1.c: 989: myMain.FirstOpen = 0;
 11849  1485  0021               	movlb	1	; select bank1
 11850  1486  11A0               	bcf	_myMain^(0+128),3
 11851                           
 11852                           ;MCU_B1.c: 990: myMain.First = 0;
 11853  1487  12A0               	bcf	_myMain^(0+128),5
 11854  1488                     l1354:	
 11855                           
 11856                           ;MCU_B1.c: 992: }
 11857                           ;MCU_B1.c: 993: GIE = 0;
 11858  1488  138B               	bcf	11,7	;volatile
 11859                           
 11860                           ;MCU_B1.c: 994: Flash_Memory_Erasing();
 11861  1489  319B  235A  3194   	fcall	_Flash_Memory_Erasing
 11862                           
 11863                           ;MCU_B1.c: 995: Flash_Memory_Write();
 11864  148C  3191  2133         	fcall	_Flash_Memory_Write
 11865                           
 11866                           ;MCU_B1.c: 996: GIE = 1;
 11867  148E  178B               	bsf	11,7	;volatile
 11868  148F  0008               	return
 11869  1490                     __end_of_Flash_Memory_Modify:	
 11870                           
 11871                           	psect	text65
 11872  1B5A                     __ptext65:	
 11873 ;; *************** function _Flash_Memory_Erasing *****************
 11874 ;; Defined at:
 11875 ;;		line 963 in file "../src/MCU_B1.c"
 11876 ;; Parameters:    Size  Location     Type
 11877 ;;		None
 11878 ;; Auto vars:     Size  Location     Type
 11879 ;;		None
 11880 ;; Return value:  Size  Location     Type
 11881 ;;		None               void
 11882 ;; Registers used:
 11883 ;;		wreg, status,2, status,0, pclath, cstack
 11884 ;; Tracked objects:
 11885 ;;		On entry : 0/0
 11886 ;;		On exit  : 0/0
 11887 ;;		Unchanged: 0/0
 11888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11893 ;;Total ram usage:        0 bytes
 11894 ;; Hardware stack levels used:    1
 11895 ;; Hardware stack levels required when called:    6
 11896 ;; This function calls:
 11897 ;;		_Flash_Memory_Unlock
 11898 ;; This function is called by:
 11899 ;;		_Flash_Memory_Modify
 11900 ;; This function uses a non-reentrant model
 11901 ;;
 11902                           
 11903                           
 11904                           ;psect for function _Flash_Memory_Erasing
 11905  1B5A                     _Flash_Memory_Erasing:	
 11906                           
 11907                           ;MCU_B1.c: 964: CFGS = 0;
 11908                           
 11909                           ;incstack = 0
 11910                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11911  1B5A  0023               	movlb	3	; select bank3
 11912  1B5B  1315               	bcf	21,6	;volatile
 11913                           
 11914                           ;MCU_B1.c: 965: PMADRH = 0x30;
 11915  1B5C  3030               	movlw	48
 11916  1B5D  0092               	movwf	18	;volatile
 11917                           
 11918                           ;MCU_B1.c: 966: PMADRL = 0x00;
 11919  1B5E  0191               	clrf	17	;volatile
 11920                           
 11921                           ;MCU_B1.c: 967: FREE = 1;
 11922  1B5F  1615               	bsf	21,4	;volatile
 11923                           
 11924                           ;MCU_B1.c: 968: WREN = 1;
 11925  1B60  1515               	bsf	21,2	;volatile
 11926                           
 11927                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
 11928  1B61  319B  2323         	fcall	_Flash_Memory_Unlock
 11929                           
 11930                           ;MCU_B1.c: 970: WREN = 0;
 11931  1B63  0023               	movlb	3	; select bank3
 11932  1B64  1115               	bcf	21,2	;volatile
 11933  1B65  0008               	return
 11934  1B66                     __end_of_Flash_Memory_Erasing:	
 11935                           
 11936                           	psect	text66
 11937  070E                     __ptext66:	
 11938 ;; *************** function _Flash_Memory_Initialization *****************
 11939 ;; Defined at:
 11940 ;;		line 860 in file "../src/MCU_B1.c"
 11941 ;; Parameters:    Size  Location     Type
 11942 ;;		None
 11943 ;; Auto vars:     Size  Location     Type
 11944 ;;  i               1   62[BANK0 ] unsigned char 
 11945 ;; Return value:  Size  Location     Type
 11946 ;;		None               void
 11947 ;; Registers used:
 11948 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11949 ;; Tracked objects:
 11950 ;;		On entry : 0/0
 11951 ;;		On exit  : 0/0
 11952 ;;		Unchanged: 0/0
 11953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;Total ram usage:        2 bytes
 11959 ;; Hardware stack levels used:    1
 11960 ;; Hardware stack levels required when called:    8
 11961 ;; This function calls:
 11962 ;;		_Flash_Memory_Read
 11963 ;;		_Flash_Memory_Write
 11964 ;;		_setMemory_Data
 11965 ;;		_setPercentValue
 11966 ;; This function is called by:
 11967 ;;		_main
 11968 ;; This function uses a non-reentrant model
 11969 ;;
 11970                           
 11971                           
 11972                           ;psect for function _Flash_Memory_Initialization
 11973  070E                     _Flash_Memory_Initialization:	
 11974                           
 11975                           ;MCU_B1.c: 861: char i = 0;
 11976                           
 11977                           ;incstack = 0
 11978                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11979  070E  0020               	movlb	0	; select bank0
 11980  070F  01DE               	clrf	Flash_Memory_Initialization@i
 11981                           
 11982                           ;MCU_B1.c: 862: if (Flash_Memory_Read(31) == 0xaa) {
 11983  0710  301F               	movlw	31
 11984  0711  319D  25A0  3187   	fcall	_Flash_Memory_Read
 11985  0714  3AAA               	xorlw	170
 11986  0715  1D03               	skipz
 11987  0716  2F80               	goto	l10237
 11988                           
 11989                           ;MCU_B1.c: 863: product->Data[12] = Flash_Memory_Read(0);
 11990  0717  3000               	movlw	0
 11991  0718  319D  25A0  3187   	fcall	_Flash_Memory_Read
 11992  071B  0020               	movlb	0	; select bank0
 11993  071C  00DD               	movwf	??_Flash_Memory_Initialization
 11994  071D  087B               	movf	_product,w
 11995  071E  3E0C               	addlw	12
 11996  071F  0086               	movwf	6
 11997  0720  3002               	movlw	2	; select bank4/5
 11998  0721  0087               	movwf	7
 11999  0722  085D               	movf	??_Flash_Memory_Initialization,w
 12000  0723  0081               	movwf	1
 12001                           
 12002                           ;MCU_B1.c: 864: product->Data[13] = Flash_Memory_Read(1);
 12003  0724  3001               	movlw	1
 12004  0725  319D  25A0  3187   	fcall	_Flash_Memory_Read
 12005  0728  0020               	movlb	0	; select bank0
 12006  0729  00DD               	movwf	??_Flash_Memory_Initialization
 12007  072A  087B               	movf	_product,w
 12008  072B  3E0D               	addlw	13
 12009  072C  0086               	movwf	6
 12010  072D  3002               	movlw	2	; select bank4/5
 12011  072E  0087               	movwf	7
 12012  072F  085D               	movf	??_Flash_Memory_Initialization,w
 12013  0730  0081               	movwf	1
 12014                           
 12015                           ;MCU_B1.c: 865: product->Data[14] = Flash_Memory_Read(2);
 12016  0731  3002               	movlw	2
 12017  0732  319D  25A0  3187   	fcall	_Flash_Memory_Read
 12018  0735  0020               	movlb	0	; select bank0
 12019  0736  00DD               	movwf	??_Flash_Memory_Initialization
 12020  0737  087B               	movf	_product,w
 12021  0738  3E0E               	addlw	14
 12022  0739  0086               	movwf	6
 12023  073A  3002               	movlw	2	; select bank4/5
 12024  073B  0087               	movwf	7
 12025  073C  085D               	movf	??_Flash_Memory_Initialization,w
 12026  073D  0081               	movwf	1
 12027                           
 12028                           ;MCU_B1.c: 871: i = setPercentValue(((char)((100-60)*0.8)));
 12029  073E  3020               	movlw	32
 12030  073F  3193  236C  3187   	fcall	_setPercentValue
 12031  0742  0020               	movlb	0	; select bank0
 12032  0743  00DD               	movwf	??_Flash_Memory_Initialization
 12033  0744  085D               	movf	??_Flash_Memory_Initialization,w
 12034  0745  00DE               	movwf	Flash_Memory_Initialization@i
 12035                           
 12036                           ;MCU_B1.c: 872: product->Data[21] = i;
 12037  0746  085E               	movf	Flash_Memory_Initialization@i,w
 12038  0747  00DD               	movwf	??_Flash_Memory_Initialization
 12039  0748  087B               	movf	_product,w
 12040  0749  3E15               	addlw	21
 12041  074A  0086               	movwf	6
 12042  074B  3002               	movlw	2	; select bank4/5
 12043  074C  0087               	movwf	7
 12044  074D  085D               	movf	??_Flash_Memory_Initialization,w
 12045  074E  0081               	movwf	1
 12046                           
 12047                           ;MCU_B1.c: 873: product->Data[22] = i;
 12048  074F  085E               	movf	Flash_Memory_Initialization@i,w
 12049  0750  00DD               	movwf	??_Flash_Memory_Initialization
 12050  0751  087B               	movf	_product,w
 12051  0752  3E16               	addlw	22
 12052  0753  0086               	movwf	6
 12053  0754  3002               	movlw	2	; select bank4/5
 12054  0755  0087               	movwf	7
 12055  0756  085D               	movf	??_Flash_Memory_Initialization,w
 12056  0757  0081               	movwf	1
 12057                           
 12058                           ;MCU_B1.c: 874: product->Data[23] = i;
 12059  0758  085E               	movf	Flash_Memory_Initialization@i,w
 12060  0759  00DD               	movwf	??_Flash_Memory_Initialization
 12061  075A  087B               	movf	_product,w
 12062  075B  3E17               	addlw	23
 12063  075C  0086               	movwf	6
 12064  075D  3002               	movlw	2	; select bank4/5
 12065  075E  0087               	movwf	7
 12066  075F  085D               	movf	??_Flash_Memory_Initialization,w
 12067  0760  0081               	movwf	1
 12068                           
 12069                           ;MCU_B1.c: 876: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12070  0761  087B               	movf	_product,w
 12071  0762  3E0C               	addlw	12
 12072  0763  0086               	movwf	6
 12073  0764  3002               	movlw	2	; select bank4/5
 12074  0765  0087               	movwf	7
 12075  0766  0801               	movf	1,w
 12076  0767  3AFF               	xorlw	255
 12077  0768  1D03               	skipz
 12078  0769  0008               	return
 12079  076A  087B               	movf	_product,w
 12080  076B  3E0D               	addlw	13
 12081  076C  0086               	movwf	6
 12082  076D  3002               	movlw	2	; select bank4/5
 12083  076E  0087               	movwf	7
 12084  076F  0801               	movf	1,w
 12085  0770  3AFF               	xorlw	255
 12086  0771  1D03               	skipz
 12087  0772  0008               	return
 12088  0773  087B               	movf	_product,w
 12089  0774  3E0E               	addlw	14
 12090  0775  0086               	movwf	6
 12091  0776  3002               	movlw	2	; select bank4/5
 12092  0777  0087               	movwf	7
 12093  0778  0801               	movf	1,w
 12094  0779  3AFF               	xorlw	255
 12095  077A  1D03               	skipz
 12096  077B  0008               	return
 12097                           
 12098                           ;MCU_B1.c: 877: myMain.FirstOpen = 1;
 12099  077C  0021               	movlb	1	; select bank1
 12100  077D  15A0               	bsf	_myMain^(0+128),3
 12101                           
 12102                           ;MCU_B1.c: 878: myMain.First = 1;
 12103  077E  16A0               	bsf	_myMain^(0+128),5
 12104                           
 12105                           ;MCU_B1.c: 879: }
 12106                           ;MCU_B1.c: 880: } else {
 12107  077F  0008               	return
 12108  0780                     l10237:	
 12109                           
 12110                           ;MCU_B1.c: 881: i = setPercentValue(((char)((100-60)*0.8)));
 12111  0780  3020               	movlw	32
 12112  0781  3193  236C  3187   	fcall	_setPercentValue
 12113  0784  0020               	movlb	0	; select bank0
 12114  0785  00DD               	movwf	??_Flash_Memory_Initialization
 12115  0786  085D               	movf	??_Flash_Memory_Initialization,w
 12116  0787  00DE               	movwf	Flash_Memory_Initialization@i
 12117                           
 12118                           ;MCU_B1.c: 882: setMemory_Data(0, 0xff);
 12119  0788  30FF               	movlw	255
 12120  0789  00DD               	movwf	??_Flash_Memory_Initialization
 12121  078A  085D               	movf	??_Flash_Memory_Initialization,w
 12122  078B  00A0               	movwf	setMemory_Data@data
 12123  078C  3000               	movlw	0
 12124  078D  319B  234E  3187   	fcall	_setMemory_Data
 12125                           
 12126                           ;MCU_B1.c: 883: setMemory_Data(1, 0xff);
 12127  0790  30FF               	movlw	255
 12128  0791  0020               	movlb	0	; select bank0
 12129  0792  00DD               	movwf	??_Flash_Memory_Initialization
 12130  0793  085D               	movf	??_Flash_Memory_Initialization,w
 12131  0794  00A0               	movwf	setMemory_Data@data
 12132  0795  3001               	movlw	1
 12133  0796  319B  234E  3187   	fcall	_setMemory_Data
 12134                           
 12135                           ;MCU_B1.c: 884: setMemory_Data(2, 0xff);
 12136  0799  30FF               	movlw	255
 12137  079A  0020               	movlb	0	; select bank0
 12138  079B  00DD               	movwf	??_Flash_Memory_Initialization
 12139  079C  085D               	movf	??_Flash_Memory_Initialization,w
 12140  079D  00A0               	movwf	setMemory_Data@data
 12141  079E  3002               	movlw	2
 12142  079F  319B  234E  3187   	fcall	_setMemory_Data
 12143                           
 12144                           ;MCU_B1.c: 885: setMemory_Data(3, 0xff);
 12145  07A2  30FF               	movlw	255
 12146  07A3  0020               	movlb	0	; select bank0
 12147  07A4  00DD               	movwf	??_Flash_Memory_Initialization
 12148  07A5  085D               	movf	??_Flash_Memory_Initialization,w
 12149  07A6  00A0               	movwf	setMemory_Data@data
 12150  07A7  3003               	movlw	3
 12151  07A8  319B  234E  3187   	fcall	_setMemory_Data
 12152                           
 12153                           ;MCU_B1.c: 886: setMemory_Data(4, 0xff);
 12154  07AB  30FF               	movlw	255
 12155  07AC  0020               	movlb	0	; select bank0
 12156  07AD  00DD               	movwf	??_Flash_Memory_Initialization
 12157  07AE  085D               	movf	??_Flash_Memory_Initialization,w
 12158  07AF  00A0               	movwf	setMemory_Data@data
 12159  07B0  3004               	movlw	4
 12160  07B1  319B  234E  3187   	fcall	_setMemory_Data
 12161                           
 12162                           ;MCU_B1.c: 887: setMemory_Data(5, 0xff);
 12163  07B4  30FF               	movlw	255
 12164  07B5  0020               	movlb	0	; select bank0
 12165  07B6  00DD               	movwf	??_Flash_Memory_Initialization
 12166  07B7  085D               	movf	??_Flash_Memory_Initialization,w
 12167  07B8  00A0               	movwf	setMemory_Data@data
 12168  07B9  3005               	movlw	5
 12169  07BA  319B  234E  3187   	fcall	_setMemory_Data
 12170                           
 12171                           ;MCU_B1.c: 888: setMemory_Data(31, 0xaa);
 12172  07BD  30AA               	movlw	170
 12173  07BE  0020               	movlb	0	; select bank0
 12174  07BF  00DD               	movwf	??_Flash_Memory_Initialization
 12175  07C0  085D               	movf	??_Flash_Memory_Initialization,w
 12176  07C1  00A0               	movwf	setMemory_Data@data
 12177  07C2  301F               	movlw	31
 12178  07C3  319B  234E  3187   	fcall	_setMemory_Data
 12179                           
 12180                           ;MCU_B1.c: 889: product->Data[21] = i;
 12181  07C6  0020               	movlb	0	; select bank0
 12182  07C7  085E               	movf	Flash_Memory_Initialization@i,w
 12183  07C8  00DD               	movwf	??_Flash_Memory_Initialization
 12184  07C9  087B               	movf	_product,w
 12185  07CA  3E15               	addlw	21
 12186  07CB  0086               	movwf	6
 12187  07CC  3002               	movlw	2	; select bank4/5
 12188  07CD  0087               	movwf	7
 12189  07CE  085D               	movf	??_Flash_Memory_Initialization,w
 12190  07CF  0081               	movwf	1
 12191                           
 12192                           ;MCU_B1.c: 890: product->Data[22] = i;
 12193  07D0  085E               	movf	Flash_Memory_Initialization@i,w
 12194  07D1  00DD               	movwf	??_Flash_Memory_Initialization
 12195  07D2  087B               	movf	_product,w
 12196  07D3  3E16               	addlw	22
 12197  07D4  0086               	movwf	6
 12198  07D5  3002               	movlw	2	; select bank4/5
 12199  07D6  0087               	movwf	7
 12200  07D7  085D               	movf	??_Flash_Memory_Initialization,w
 12201  07D8  0081               	movwf	1
 12202                           
 12203                           ;MCU_B1.c: 891: product->Data[23] = i;
 12204  07D9  085E               	movf	Flash_Memory_Initialization@i,w
 12205  07DA  00DD               	movwf	??_Flash_Memory_Initialization
 12206  07DB  087B               	movf	_product,w
 12207  07DC  3E17               	addlw	23
 12208  07DD  0086               	movwf	6
 12209  07DE  3002               	movlw	2	; select bank4/5
 12210  07DF  0087               	movwf	7
 12211  07E0  085D               	movf	??_Flash_Memory_Initialization,w
 12212  07E1  0081               	movwf	1
 12213                           
 12214                           ;MCU_B1.c: 892: GIE = 0;
 12215  07E2  138B               	bcf	11,7	;volatile
 12216                           
 12217                           ;MCU_B1.c: 893: Flash_Memory_Write();
 12218  07E3  3191  2133         	fcall	_Flash_Memory_Write
 12219                           
 12220                           ;MCU_B1.c: 894: GIE = 1;
 12221  07E5  178B               	bsf	11,7	;volatile
 12222                           
 12223                           ;MCU_B1.c: 895: myMain.FirstOpen = 1;
 12224  07E6  0021               	movlb	1	; select bank1
 12225  07E7  15A0               	bsf	_myMain^(0+128),3
 12226                           
 12227                           ;MCU_B1.c: 896: myMain.First = 1;
 12228  07E8  16A0               	bsf	_myMain^(0+128),5
 12229  07E9  0008               	return
 12230  07EA                     __end_of_Flash_Memory_Initialization:	
 12231                           
 12232                           	psect	text67
 12233  1B4E                     __ptext67:	
 12234 ;; *************** function _setMemory_Data *****************
 12235 ;; Defined at:
 12236 ;;		line 1011 in file "../src/MCU_B1.c"
 12237 ;; Parameters:    Size  Location     Type
 12238 ;;  address         1    wreg     unsigned char 
 12239 ;;  data            1    0[BANK0 ] unsigned char 
 12240 ;; Auto vars:     Size  Location     Type
 12241 ;;  address         1    2[BANK0 ] unsigned char 
 12242 ;; Return value:  Size  Location     Type
 12243 ;;		None               void
 12244 ;; Registers used:
 12245 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12246 ;; Tracked objects:
 12247 ;;		On entry : 0/0
 12248 ;;		On exit  : 0/0
 12249 ;;		Unchanged: 0/0
 12250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12251 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;Total ram usage:        3 bytes
 12256 ;; Hardware stack levels used:    1
 12257 ;; Hardware stack levels required when called:    5
 12258 ;; This function calls:
 12259 ;;		Nothing
 12260 ;; This function is called by:
 12261 ;;		_Flash_Memory_Initialization
 12262 ;;		_Flash_Memory_Modify
 12263 ;; This function uses a non-reentrant model
 12264 ;;
 12265                           
 12266                           
 12267                           ;psect for function _setMemory_Data
 12268  1B4E                     _setMemory_Data:	
 12269                           
 12270                           ;incstack = 0
 12271                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12272                           ;setMemory_Data@address stored from wreg
 12273  1B4E  0020               	movlb	0	; select bank0
 12274  1B4F  00A2               	movwf	setMemory_Data@address
 12275                           
 12276                           ;MCU_B1.c: 1012: Memory.Data[address] = data;
 12277  1B50  0820               	movf	setMemory_Data@data,w
 12278  1B51  00A1               	movwf	??_setMemory_Data
 12279  1B52  0822               	movf	setMemory_Data@address,w
 12280  1B53  3E20               	addlw	_Memory& (0+255)
 12281  1B54  0086               	movwf	6
 12282  1B55  3002               	movlw	2	; select bank4/5
 12283  1B56  0087               	movwf	7
 12284  1B57  0821               	movf	??_setMemory_Data,w
 12285  1B58  0081               	movwf	1
 12286  1B59  0008               	return
 12287  1B5A                     __end_of_setMemory_Data:	
 12288                           
 12289                           	psect	text68
 12290  1133                     __ptext68:	
 12291 ;; *************** function _Flash_Memory_Write *****************
 12292 ;; Defined at:
 12293 ;;		line 944 in file "../src/MCU_B1.c"
 12294 ;; Parameters:    Size  Location     Type
 12295 ;;		None
 12296 ;; Auto vars:     Size  Location     Type
 12297 ;;  i               1    1[BANK0 ] unsigned char 
 12298 ;; Return value:  Size  Location     Type
 12299 ;;		None               void
 12300 ;; Registers used:
 12301 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12302 ;; Tracked objects:
 12303 ;;		On entry : 0/0
 12304 ;;		On exit  : 0/0
 12305 ;;		Unchanged: 0/0
 12306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12308 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12309 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;Total ram usage:        2 bytes
 12312 ;; Hardware stack levels used:    1
 12313 ;; Hardware stack levels required when called:    6
 12314 ;; This function calls:
 12315 ;;		_Flash_Memory_Unlock
 12316 ;; This function is called by:
 12317 ;;		_Flash_Memory_Initialization
 12318 ;;		_Flash_Memory_Modify
 12319 ;; This function uses a non-reentrant model
 12320 ;;
 12321                           
 12322                           
 12323                           ;psect for function _Flash_Memory_Write
 12324  1133                     _Flash_Memory_Write:	
 12325                           
 12326                           ;MCU_B1.c: 945: char i = 0;
 12327                           
 12328                           ;incstack = 0
 12329                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12330  1133  0020               	movlb	0	; select bank0
 12331  1134  01A1               	clrf	Flash_Memory_Write@i
 12332                           
 12333                           ;MCU_B1.c: 946: CFGS = 0;
 12334  1135  0023               	movlb	3	; select bank3
 12335  1136  1315               	bcf	21,6	;volatile
 12336                           
 12337                           ;MCU_B1.c: 947: PMADRH = 0x30;
 12338  1137  3030               	movlw	48
 12339  1138  0092               	movwf	18	;volatile
 12340                           
 12341                           ;MCU_B1.c: 948: PMDATH = 0;
 12342  1139  0194               	clrf	20	;volatile
 12343                           
 12344                           ;MCU_B1.c: 949: FREE = 0;
 12345  113A  1215               	bcf	21,4	;volatile
 12346                           
 12347                           ;MCU_B1.c: 950: LWLO = 1;
 12348  113B  1695               	bsf	21,5	;volatile
 12349                           
 12350                           ;MCU_B1.c: 951: WREN = 1;
 12351  113C  1515               	bsf	21,2	;volatile
 12352                           
 12353                           ;MCU_B1.c: 952: for (i = 0; i < 32; i++) {
 12354  113D  0020               	movlb	0	; select bank0
 12355  113E  01A1               	clrf	Flash_Memory_Write@i
 12356  113F  3020               	movlw	32
 12357  1140  0221               	subwf	Flash_Memory_Write@i,w
 12358  1141  1803               	btfsc	3,0
 12359  1142  295B               	goto	l1345
 12360  1143                     l9439:	
 12361                           
 12362                           ;MCU_B1.c: 953: PMADRL = i;
 12363  1143  0821               	movf	Flash_Memory_Write@i,w
 12364  1144  0023               	movlb	3	; select bank3
 12365  1145  0091               	movwf	17	;volatile
 12366                           
 12367                           ;MCU_B1.c: 954: PMDATL = Memory.Data[i];
 12368  1146  0020               	movlb	0	; select bank0
 12369  1147  0821               	movf	Flash_Memory_Write@i,w
 12370  1148  3E20               	addlw	_Memory& (0+255)
 12371  1149  0086               	movwf	6
 12372  114A  3002               	movlw	2	; select bank4/5
 12373  114B  0087               	movwf	7
 12374  114C  0801               	movf	1,w
 12375  114D  0023               	movlb	3	; select bank3
 12376  114E  0093               	movwf	19	;volatile
 12377                           
 12378                           ;MCU_B1.c: 955: Flash_Memory_Unlock();
 12379  114F  319B  2323  3191   	fcall	_Flash_Memory_Unlock
 12380  1152  3001               	movlw	1
 12381  1153  0020               	movlb	0	; select bank0
 12382  1154  00A0               	movwf	??_Flash_Memory_Write
 12383  1155  0820               	movf	??_Flash_Memory_Write,w
 12384  1156  07A1               	addwf	Flash_Memory_Write@i,f
 12385  1157  3020               	movlw	32
 12386  1158  0221               	subwf	Flash_Memory_Write@i,w
 12387  1159  1C03               	skipc
 12388  115A  2943               	goto	l9439
 12389  115B                     l1345:	
 12390                           
 12391                           ;MCU_B1.c: 956: }
 12392                           ;MCU_B1.c: 957: LWLO = 0;
 12393  115B  0023               	movlb	3	; select bank3
 12394  115C  1295               	bcf	21,5	;volatile
 12395                           
 12396                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 12397  115D  319B  2323         	fcall	_Flash_Memory_Unlock
 12398                           
 12399                           ;MCU_B1.c: 959: WREN = 0;
 12400  115F  0023               	movlb	3	; select bank3
 12401  1160  1115               	bcf	21,2	;volatile
 12402  1161  0008               	return
 12403  1162                     __end_of_Flash_Memory_Write:	
 12404                           
 12405                           	psect	text69
 12406  1B23                     __ptext69:	
 12407 ;; *************** function _Flash_Memory_Unlock *****************
 12408 ;; Defined at:
 12409 ;;		line 923 in file "../src/MCU_B1.c"
 12410 ;; Parameters:    Size  Location     Type
 12411 ;;		None
 12412 ;; Auto vars:     Size  Location     Type
 12413 ;;		None
 12414 ;; Return value:  Size  Location     Type
 12415 ;;		None               void
 12416 ;; Registers used:
 12417 ;;		wreg
 12418 ;; Tracked objects:
 12419 ;;		On entry : 0/0
 12420 ;;		On exit  : 0/0
 12421 ;;		Unchanged: 0/0
 12422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12427 ;;Total ram usage:        0 bytes
 12428 ;; Hardware stack levels used:    1
 12429 ;; Hardware stack levels required when called:    5
 12430 ;; This function calls:
 12431 ;;		Nothing
 12432 ;; This function is called by:
 12433 ;;		_Flash_Memory_Write
 12434 ;;		_Flash_Memory_Erasing
 12435 ;; This function uses a non-reentrant model
 12436 ;;
 12437                           
 12438                           
 12439                           ;psect for function _Flash_Memory_Unlock
 12440  1B23                     _Flash_Memory_Unlock:	
 12441                           
 12442                           ;MCU_B1.c: 924: PMCON2 = 0x55;
 12443                           
 12444                           ;incstack = 0
 12445                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12446  1B23  3055               	movlw	85
 12447  1B24  0023               	movlb	3	; select bank3
 12448  1B25  0096               	movwf	22	;volatile
 12449                           
 12450                           ;MCU_B1.c: 925: PMCON2 = 0xaa;
 12451  1B26  30AA               	movlw	170
 12452  1B27  0096               	movwf	22	;volatile
 12453                           
 12454                           ;MCU_B1.c: 926: WR = 1;
 12455  1B28  1495               	bsf	21,1	;volatile
 12456                           
 12457                           ;MCU_B1.c: 927: __nop();
 12458  1B29  0000               	nop
 12459                           
 12460                           ;MCU_B1.c: 928: __nop();
 12461  1B2A  0000               	nop
 12462  1B2B  0008               	return
 12463  1B2C                     __end_of_Flash_Memory_Unlock:	
 12464                           
 12465                           	psect	text70
 12466  1DA0                     __ptext70:	
 12467 ;; *************** function _Flash_Memory_Read *****************
 12468 ;; Defined at:
 12469 ;;		line 932 in file "../src/MCU_B1.c"
 12470 ;; Parameters:    Size  Location     Type
 12471 ;;  address         1    wreg     unsigned char 
 12472 ;; Auto vars:     Size  Location     Type
 12473 ;;  address         1    2[BANK0 ] unsigned char 
 12474 ;;  ret             1    3[BANK0 ] unsigned char 
 12475 ;;  i               1    1[BANK0 ] unsigned char 
 12476 ;; Return value:  Size  Location     Type
 12477 ;;                  1    wreg      unsigned char 
 12478 ;; Registers used:
 12479 ;;		wreg, status,2
 12480 ;; Tracked objects:
 12481 ;;		On entry : 0/0
 12482 ;;		On exit  : 0/0
 12483 ;;		Unchanged: 0/0
 12484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12486 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12487 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12488 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12489 ;;Total ram usage:        4 bytes
 12490 ;; Hardware stack levels used:    1
 12491 ;; Hardware stack levels required when called:    5
 12492 ;; This function calls:
 12493 ;;		Nothing
 12494 ;; This function is called by:
 12495 ;;		_Flash_Memory_Initialization
 12496 ;;		_Flash_Memory_Modify
 12497 ;; This function uses a non-reentrant model
 12498 ;;
 12499                           
 12500                           
 12501                           ;psect for function _Flash_Memory_Read
 12502  1DA0                     _Flash_Memory_Read:	
 12503                           
 12504                           ;incstack = 0
 12505                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12506                           ;Flash_Memory_Read@address stored from wreg
 12507  1DA0  0020               	movlb	0	; select bank0
 12508  1DA1  00A2               	movwf	Flash_Memory_Read@address
 12509                           
 12510                           ;MCU_B1.c: 933: char i = 0, ret = 0;
 12511  1DA2  01A1               	clrf	Flash_Memory_Read@i
 12512  1DA3  01A3               	clrf	Flash_Memory_Read@ret
 12513                           
 12514                           ;MCU_B1.c: 934: PMADRH = 0x30;
 12515  1DA4  3030               	movlw	48
 12516  1DA5  0023               	movlb	3	; select bank3
 12517  1DA6  0092               	movwf	18	;volatile
 12518                           
 12519                           ;MCU_B1.c: 935: PMADRL = address;
 12520  1DA7  0020               	movlb	0	; select bank0
 12521  1DA8  0822               	movf	Flash_Memory_Read@address,w
 12522  1DA9  0023               	movlb	3	; select bank3
 12523  1DAA  0091               	movwf	17	;volatile
 12524                           
 12525                           ;MCU_B1.c: 936: CFGS = 0;
 12526  1DAB  1315               	bcf	21,6	;volatile
 12527                           
 12528                           ;MCU_B1.c: 937: RD = 1;
 12529  1DAC  1415               	bsf	21,0	;volatile
 12530                           
 12531                           ;MCU_B1.c: 938: i = PMDATH;
 12532  1DAD  0814               	movf	20,w	;volatile
 12533  1DAE  0020               	movlb	0	; select bank0
 12534  1DAF  00A0               	movwf	??_Flash_Memory_Read
 12535  1DB0  0820               	movf	??_Flash_Memory_Read,w
 12536  1DB1  00A1               	movwf	Flash_Memory_Read@i
 12537                           
 12538                           ;MCU_B1.c: 939: ret = PMDATL;
 12539  1DB2  0023               	movlb	3	; select bank3
 12540  1DB3  0813               	movf	19,w	;volatile
 12541  1DB4  0020               	movlb	0	; select bank0
 12542  1DB5  00A0               	movwf	??_Flash_Memory_Read
 12543  1DB6  0820               	movf	??_Flash_Memory_Read,w
 12544  1DB7  00A3               	movwf	Flash_Memory_Read@ret
 12545                           
 12546                           ;MCU_B1.c: 940: return ret;
 12547  1DB8  0823               	movf	Flash_Memory_Read@ret,w
 12548  1DB9  0008               	return
 12549  1DBA                     __end_of_Flash_Memory_Read:	
 12550                           
 12551                           	psect	text71
 12552  1B13                     __ptext71:	
 12553 ;; *************** function _DimmerLights_Main *****************
 12554 ;; Defined at:
 12555 ;;		line 415 in file "../src/Dimmer_B1.c"
 12556 ;; Parameters:    Size  Location     Type
 12557 ;;		None
 12558 ;; Auto vars:     Size  Location     Type
 12559 ;;		None
 12560 ;; Return value:  Size  Location     Type
 12561 ;;		None               void
 12562 ;; Registers used:
 12563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12564 ;; Tracked objects:
 12565 ;;		On entry : 0/0
 12566 ;;		On exit  : 0/0
 12567 ;;		Unchanged: 0/0
 12568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12573 ;;Total ram usage:        0 bytes
 12574 ;; Hardware stack levels used:    1
 12575 ;; Hardware stack levels required when called:   11
 12576 ;; This function calls:
 12577 ;;		_setDimmerLights_Main
 12578 ;; This function is called by:
 12579 ;;		_main
 12580 ;; This function uses a non-reentrant model
 12581 ;;
 12582                           
 12583                           
 12584                           ;psect for function _DimmerLights_Main
 12585  1B13                     _DimmerLights_Main:	
 12586                           
 12587                           ;Dimmer_B1.c: 417: setDimmerLights_Main(1);
 12588                           
 12589                           ;incstack = 0
 12590                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12591  1B13  3001               	movlw	1
 12592  1B14  318B  2359  319B   	fcall	_setDimmerLights_Main
 12593                           
 12594                           ;Dimmer_B1.c: 421: setDimmerLights_Main(2);
 12595  1B17  3002               	movlw	2
 12596  1B18  318B  2359         	fcall	_setDimmerLights_Main
 12597  1B1A  0008               	return
 12598  1B1B                     __end_of_DimmerLights_Main:	
 12599                           
 12600                           	psect	text72
 12601  0B59                     __ptext72:	
 12602 ;; *************** function _setDimmerLights_Main *****************
 12603 ;; Defined at:
 12604 ;;		line 431 in file "../src/Dimmer_B1.c"
 12605 ;; Parameters:    Size  Location     Type
 12606 ;;  lights          1    wreg     unsigned char 
 12607 ;; Auto vars:     Size  Location     Type
 12608 ;;  lights          1   73[BANK0 ] unsigned char 
 12609 ;; Return value:  Size  Location     Type
 12610 ;;		None               void
 12611 ;; Registers used:
 12612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12613 ;; Tracked objects:
 12614 ;;		On entry : 0/0
 12615 ;;		On exit  : 0/0
 12616 ;;		Unchanged: 0/0
 12617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12619 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12620 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12621 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;Total ram usage:        5 bytes
 12623 ;; Hardware stack levels used:    1
 12624 ;; Hardware stack levels required when called:   10
 12625 ;; This function calls:
 12626 ;;		_DimmerLightsPointSelect
 12627 ;;		_getLoad_OK
 12628 ;;		_getMain_All_Error_Status
 12629 ;;		_setBuz
 12630 ;;		_setDimmerLights
 12631 ;;		_setDimmerLights_Adj
 12632 ;; This function is called by:
 12633 ;;		_DimmerLights_Main
 12634 ;; This function uses a non-reentrant model
 12635 ;;
 12636                           
 12637                           
 12638                           ;psect for function _setDimmerLights_Main
 12639  0B59                     _setDimmerLights_Main:	
 12640                           
 12641                           ;incstack = 0
 12642                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12643                           ;setDimmerLights_Main@lights stored from wreg
 12644  0B59  0020               	movlb	0	; select bank0
 12645  0B5A  00E9               	movwf	setDimmerLights_Main@lights
 12646                           
 12647                           ;Dimmer_B1.c: 432: DimmerLightsPointSelect(lights);
 12648  0B5B  0869               	movf	setDimmerLights_Main@lights,w
 12649  0B5C  319C  2475  318B   	fcall	_DimmerLightsPointSelect
 12650                           
 12651                           ;Dimmer_B1.c: 433: if (DimmerLights->Trigger == 1) {
 12652  0B5F  0877               	movf	_DimmerLights,w
 12653  0B60  3E08               	addlw	8
 12654  0B61  0086               	movwf	6
 12655  0B62  3001               	movlw	1	; select bank2/3
 12656  0B63  0087               	movwf	7
 12657  0B64  1D01               	btfss	1,2
 12658  0B65  2BA8               	goto	l9693
 12659                           
 12660                           ;Dimmer_B1.c: 434: if (getMain_All_Error_Status(0) == 0) {
 12661  0B66  3000               	movlw	0
 12662  0B67  3191  2162  318B   	fcall	_getMain_All_Error_Status
 12663  0B6A  3800               	iorlw	0
 12664  0B6B  1D03               	skipz
 12665  0B6C  2B8A               	goto	l801
 12666                           
 12667                           ;Dimmer_B1.c: 435: if (Dimmer.LoadOK == 1) {
 12668  0B6D  0021               	movlb	1	; select bank1
 12669  0B6E  1CC8               	btfss	_Dimmer^(0+128),1
 12670  0B6F  2B8C               	goto	l807
 12671                           
 12672                           ;Dimmer_B1.c: 436: Dimmer.LoadOK = getLoad_OK() == 1 ? 0 : Dimmer.LoadOK;
 12673  0B70  319B  230B  318B   	fcall	_getLoad_OK
 12674  0B73  3A01               	xorlw	1
 12675  0B74  1903               	skipnz
 12676  0B75  2B81               	goto	l9683
 12677  0B76  0021               	movlb	1	; select bank1
 12678  0B77  0C48               	rrf	_Dimmer^(0+128),w
 12679  0B78  3901               	andlw	1
 12680  0B79  0020               	movlb	0	; select bank0
 12681  0B7A  00E5               	movwf	??_setDimmerLights_Main
 12682  0B7B  01E6               	clrf	??_setDimmerLights_Main+1
 12683  0B7C  0865               	movf	??_setDimmerLights_Main,w
 12684  0B7D  00E7               	movwf	_setDimmerLights_Main$2502
 12685  0B7E  0866               	movf	??_setDimmerLights_Main+1,w
 12686  0B7F  00E8               	movwf	_setDimmerLights_Main$2502+1
 12687  0B80  2B84               	goto	l9685
 12688  0B81                     l9683:	
 12689  0B81  0020               	movlb	0	; select bank0
 12690  0B82  01E7               	clrf	_setDimmerLights_Main$2502
 12691  0B83  01E8               	clrf	_setDimmerLights_Main$2502+1
 12692  0B84                     l9685:	
 12693  0B84  0867               	movf	_setDimmerLights_Main$2502,w
 12694  0B85  0021               	movlb	1	; select bank1
 12695  0B86  10C8               	bcf	_Dimmer^(0+128),1
 12696  0B87  1D03               	skipz
 12697  0B88  14C8               	bsf	_Dimmer^(0+128),1
 12698                           
 12699                           ;Dimmer_B1.c: 437: }
 12700                           ;Dimmer_B1.c: 438: } else {
 12701  0B89  2B8C               	goto	l807
 12702  0B8A                     l801:	
 12703                           
 12704                           ;Dimmer_B1.c: 439: Dimmer.LoadOK = 0;
 12705  0B8A  0021               	movlb	1	; select bank1
 12706  0B8B  10C8               	bcf	_Dimmer^(0+128),1
 12707  0B8C                     l807:	
 12708                           
 12709                           ;Dimmer_B1.c: 440: }
 12710                           ;Dimmer_B1.c: 441: if (Dimmer.LoadOK == 0) {
 12711  0B8C  18C8               	btfsc	_Dimmer^(0+128),1
 12712  0B8D  0008               	return
 12713                           
 12714                           ;Dimmer_B1.c: 442: DimmerLights->Trigger = 0;
 12715  0B8E  0877               	movf	_DimmerLights,w
 12716  0B8F  3E08               	addlw	8
 12717  0B90  0086               	movwf	6
 12718  0B91  3001               	movlw	1	; select bank2/3
 12719  0B92  0087               	movwf	7
 12720  0B93  1101               	bcf	1,2
 12721                           
 12722                           ;Dimmer_B1.c: 444: if (DimmerLights->Switch == 1) {
 12723  0B94  0877               	movf	_DimmerLights,w
 12724  0B95  3E08               	addlw	8
 12725  0B96  0086               	movwf	6
 12726  0B97  3001               	movlw	1	; select bank2/3
 12727  0B98  0087               	movwf	7
 12728  0B99  1C81               	btfss	1,1
 12729  0B9A  2BA2               	goto	l9691
 12730                           
 12731                           ;Dimmer_B1.c: 445: setDimmerLights(lights, 1);
 12732  0B9B  0020               	movlb	0	; select bank0
 12733  0B9C  01A7               	clrf	setDimmerLights@status
 12734  0B9D  0AA7               	incf	setDimmerLights@status,f
 12735  0B9E  0869               	movf	setDimmerLights_Main@lights,w
 12736  0B9F  318C  24DD         	fcall	_setDimmerLights
 12737                           
 12738                           ;Dimmer_B1.c: 446: } else {
 12739  0BA1  0008               	return
 12740  0BA2                     l9691:	
 12741                           
 12742                           ;Dimmer_B1.c: 447: setDimmerLights(lights, 0);
 12743  0BA2  0020               	movlb	0	; select bank0
 12744  0BA3  01A7               	clrf	setDimmerLights@status
 12745  0BA4  0869               	movf	setDimmerLights_Main@lights,w
 12746  0BA5  318C  24DD         	fcall	_setDimmerLights
 12747                           
 12748                           ;Dimmer_B1.c: 448: }
 12749                           ;Dimmer_B1.c: 449: }
 12750                           ;Dimmer_B1.c: 450: } else {
 12751  0BA7  0008               	return
 12752  0BA8                     l9693:	
 12753                           
 12754                           ;Dimmer_B1.c: 451: if (DimmerLights->TriggerAdj == 1) {
 12755  0BA8  0877               	movf	_DimmerLights,w
 12756  0BA9  3E08               	addlw	8
 12757  0BAA  0086               	movwf	6
 12758  0BAB  3001               	movlw	1	; select bank2/3
 12759  0BAC  0087               	movwf	7
 12760  0BAD  1E01               	btfss	1,4
 12761  0BAE  0008               	return
 12762                           
 12763                           ;Dimmer_B1.c: 452: if (Dimmer.LoadOK == 0) {
 12764  0BAF  0021               	movlb	1	; select bank1
 12765  0BB0  18C8               	btfsc	_Dimmer^(0+128),1
 12766  0BB1  0008               	return
 12767                           
 12768                           ;Dimmer_B1.c: 453: DimmerLights->TriggerAdj = 0;
 12769  0BB2  0877               	movf	_DimmerLights,w
 12770  0BB3  3E08               	addlw	8
 12771  0BB4  0086               	movwf	6
 12772  0BB5  3001               	movlw	1	; select bank2/3
 12773  0BB6  0087               	movwf	7
 12774  0BB7  1201               	bcf	1,4
 12775                           
 12776                           ;Dimmer_B1.c: 454: if (DimmerLights->AdjGo == 1) {
 12777  0BB8  0877               	movf	_DimmerLights,w
 12778  0BB9  3E08               	addlw	8
 12779  0BBA  0086               	movwf	6
 12780  0BBB  3001               	movlw	1	; select bank2/3
 12781  0BBC  0087               	movwf	7
 12782  0BBD  1D81               	btfss	1,3
 12783  0BBE  2BCF               	goto	l9703
 12784                           
 12785                           ;Dimmer_B1.c: 455: setDimmerLights_Adj(lights, 1);
 12786  0BBF  0020               	movlb	0	; select bank0
 12787  0BC0  01E2               	clrf	setDimmerLights_Adj@status
 12788  0BC1  0AE2               	incf	setDimmerLights_Adj@status,f
 12789  0BC2  0869               	movf	setDimmerLights_Main@lights,w
 12790  0BC3  3192  22A7  318B   	fcall	_setDimmerLights_Adj
 12791                           
 12792                           ;Dimmer_B1.c: 456: setBuz(1, 100);
 12793  0BC6  3064               	movlw	100
 12794  0BC7  0020               	movlb	0	; select bank0
 12795  0BC8  00A9               	movwf	setBuz@time
 12796  0BC9  3000               	movlw	0
 12797  0BCA  00AA               	movwf	setBuz@time+1
 12798  0BCB  3001               	movlw	1
 12799  0BCC  3196  2632         	fcall	_setBuz
 12800                           
 12801                           ;Dimmer_B1.c: 457: } else {
 12802  0BCE  0008               	return
 12803  0BCF                     l9703:	
 12804                           
 12805                           ;Dimmer_B1.c: 458: setDimmerLights_Adj(lights, 0);
 12806  0BCF  0020               	movlb	0	; select bank0
 12807  0BD0  01E2               	clrf	setDimmerLights_Adj@status
 12808  0BD1  0869               	movf	setDimmerLights_Main@lights,w
 12809  0BD2  3192  22A7         	fcall	_setDimmerLights_Adj
 12810  0BD4  0008               	return
 12811  0BD5                     __end_of_setDimmerLights_Main:	
 12812                           
 12813                           	psect	text73
 12814  12A7                     __ptext73:	
 12815 ;; *************** function _setDimmerLights_Adj *****************
 12816 ;; Defined at:
 12817 ;;		line 716 in file "../src/Dimmer_B1.c"
 12818 ;; Parameters:    Size  Location     Type
 12819 ;;  lights          1    wreg     unsigned char 
 12820 ;;  status          1   66[BANK0 ] unsigned char 
 12821 ;; Auto vars:     Size  Location     Type
 12822 ;;  lights          1   68[BANK0 ] unsigned char 
 12823 ;; Return value:  Size  Location     Type
 12824 ;;		None               void
 12825 ;; Registers used:
 12826 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12827 ;; Tracked objects:
 12828 ;;		On entry : 0/0
 12829 ;;		On exit  : 0/0
 12830 ;;		Unchanged: 0/0
 12831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12832 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12834 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12835 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12836 ;;Total ram usage:        3 bytes
 12837 ;; Hardware stack levels used:    1
 12838 ;; Hardware stack levels required when called:    9
 12839 ;; This function calls:
 12840 ;;		_DimmerLightsPointSelect
 12841 ;;		_setRF_DimmerLights
 12842 ;;		_setTxData
 12843 ;; This function is called by:
 12844 ;;		_setDimmerLights_Main
 12845 ;; This function uses a non-reentrant model
 12846 ;;
 12847                           
 12848                           
 12849                           ;psect for function _setDimmerLights_Adj
 12850  12A7                     _setDimmerLights_Adj:	
 12851                           
 12852                           ;incstack = 0
 12853                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12854                           ;setDimmerLights_Adj@lights stored from wreg
 12855  12A7  0020               	movlb	0	; select bank0
 12856  12A8  00E4               	movwf	setDimmerLights_Adj@lights
 12857                           
 12858                           ;Dimmer_B1.c: 717: DimmerLightsPointSelect(lights);
 12859  12A9  0864               	movf	setDimmerLights_Adj@lights,w
 12860  12AA  319C  2475  3192   	fcall	_DimmerLightsPointSelect
 12861                           
 12862                           ;Dimmer_B1.c: 718: if (status == 1) {
 12863  12AD  0020               	movlb	0	; select bank0
 12864  12AE  0862               	movf	setDimmerLights_Adj@status,w
 12865  12AF  3A01               	xorlw	1
 12866  12B0  1D03               	skipz
 12867  12B1  2ABD               	goto	l9323
 12868                           
 12869                           ;Dimmer_B1.c: 719: DimmerLights->AdjFlag = 1;
 12870  12B2  0877               	movf	_DimmerLights,w
 12871  12B3  0086               	movwf	6
 12872  12B4  3001               	movlw	1	; select bank2/3
 12873  12B5  0087               	movwf	7
 12874  12B6  1581               	bsf	1,3
 12875                           
 12876                           ;Dimmer_B1.c: 720: DimmerLights->Signal = 1;
 12877  12B7  0877               	movf	_DimmerLights,w
 12878  12B8  0086               	movwf	6
 12879  12B9  3001               	movlw	1	; select bank2/3
 12880  12BA  0087               	movwf	7
 12881  12BB  1481               	bsf	1,1
 12882                           
 12883                           ;Dimmer_B1.c: 721: } else {
 12884  12BC  0008               	return
 12885  12BD                     l9323:	
 12886                           
 12887                           ;Dimmer_B1.c: 722: if (DimmerLights->AdjFlag == 1) {
 12888  12BD  0877               	movf	_DimmerLights,w
 12889  12BE  0086               	movwf	6
 12890  12BF  3001               	movlw	1	; select bank2/3
 12891  12C0  0087               	movwf	7
 12892  12C1  1D81               	btfss	1,3
 12893  12C2  0008               	return
 12894                           
 12895                           ;Dimmer_B1.c: 723: DimmerLights->Signal = 0;
 12896  12C3  0877               	movf	_DimmerLights,w
 12897  12C4  0086               	movwf	6
 12898  12C5  3001               	movlw	1	; select bank2/3
 12899  12C6  0087               	movwf	7
 12900  12C7  1081               	bcf	1,1
 12901                           
 12902                           ;Dimmer_B1.c: 724: DimmerLights->AdjFlag = 0;
 12903  12C8  0877               	movf	_DimmerLights,w
 12904  12C9  0086               	movwf	6
 12905  12CA  3001               	movlw	1	; select bank2/3
 12906  12CB  0087               	movwf	7
 12907  12CC  1181               	bcf	1,3
 12908                           
 12909                           ;Dimmer_B1.c: 725: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12910  12CD  0877               	movf	_DimmerLights,w
 12911  12CE  3E04               	addlw	4
 12912  12CF  0086               	movwf	6
 12913  12D0  3001               	movlw	1	; select bank2/3
 12914  12D1  0087               	movwf	7
 12915  12D2  0801               	movf	1,w
 12916  12D3  00E3               	movwf	??_setDimmerLights_Adj
 12917  12D4  0877               	movf	_DimmerLights,w
 12918  12D5  3E05               	addlw	5
 12919  12D6  0086               	movwf	6
 12920  12D7  3001               	movlw	1	; select bank2/3
 12921  12D8  0087               	movwf	7
 12922  12D9  0863               	movf	??_setDimmerLights_Adj,w
 12923  12DA  0081               	movwf	1
 12924                           
 12925                           ;Dimmer_B1.c: 733: setRF_DimmerLights(lights, 1);
 12926  12DB  01DD               	clrf	setRF_DimmerLights@on
 12927  12DC  0ADD               	incf	setRF_DimmerLights@on,f
 12928  12DD  0864               	movf	setDimmerLights_Adj@lights,w
 12929  12DE  3189  219A  3192   	fcall	_setRF_DimmerLights
 12930                           
 12931                           ;Dimmer_B1.c: 734: setTxData();
 12932  12E1  318D  2571         	fcall	_setTxData
 12933  12E3  0008               	return
 12934  12E4                     __end_of_setDimmerLights_Adj:	
 12935                           
 12936                           	psect	text74
 12937  0CDD                     __ptext74:	
 12938 ;; *************** function _setDimmerLights *****************
 12939 ;; Defined at:
 12940 ;;		line 665 in file "../src/Dimmer_B1.c"
 12941 ;; Parameters:    Size  Location     Type
 12942 ;;  lights          1    wreg     unsigned char 
 12943 ;;  status          1    7[BANK0 ] unsigned char 
 12944 ;; Auto vars:     Size  Location     Type
 12945 ;;  lights          1   12[BANK0 ] unsigned char 
 12946 ;; Return value:  Size  Location     Type
 12947 ;;		None               void
 12948 ;; Registers used:
 12949 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12950 ;; Tracked objects:
 12951 ;;		On entry : 0/0
 12952 ;;		On exit  : 0/0
 12953 ;;		Unchanged: 0/0
 12954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12955 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12956 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12957 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12958 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12959 ;;Total ram usage:        6 bytes
 12960 ;; Hardware stack levels used:    1
 12961 ;; Hardware stack levels required when called:    7
 12962 ;; This function calls:
 12963 ;;		_DimmerLightsPointSelect
 12964 ;;		_getMain_All_Error_Status
 12965 ;;		_setLED
 12966 ;; This function is called by:
 12967 ;;		_setDimmerLights_Main
 12968 ;; This function uses a non-reentrant model
 12969 ;;
 12970                           
 12971                           
 12972                           ;psect for function _setDimmerLights
 12973  0CDD                     _setDimmerLights:	
 12974                           
 12975                           ;incstack = 0
 12976                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12977                           ;setDimmerLights@lights stored from wreg
 12978  0CDD  0020               	movlb	0	; select bank0
 12979  0CDE  00AC               	movwf	setDimmerLights@lights
 12980                           
 12981                           ;Dimmer_B1.c: 666: DimmerLightsPointSelect(lights);
 12982  0CDF  082C               	movf	setDimmerLights@lights,w
 12983  0CE0  319C  2475  318C   	fcall	_DimmerLightsPointSelect
 12984                           
 12985                           ;Dimmer_B1.c: 669: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12986  0CE3  3000               	movlw	0
 12987  0CE4  3191  2162  318C   	fcall	_getMain_All_Error_Status
 12988  0CE7  3A00               	xorlw	0
 12989  0CE8  3000               	movlw	0
 12990  0CE9  1903               	skipnz
 12991  0CEA  3001               	movlw	1
 12992  0CEB  0020               	movlb	0	; select bank0
 12993  0CEC  00A8               	movwf	??_setDimmerLights
 12994  0CED  0DA8               	rlf	??_setDimmerLights,f
 12995  0CEE  0021               	movlb	1	; select bank1
 12996  0CEF  0848               	movf	_Dimmer^(0+128),w
 12997  0CF0  0020               	movlb	0	; select bank0
 12998  0CF1  0628               	xorwf	??_setDimmerLights,w
 12999  0CF2  39FD               	andlw	-3
 13000  0CF3  0628               	xorwf	??_setDimmerLights,w
 13001  0CF4  0021               	movlb	1	; select bank1
 13002  0CF5  00C8               	movwf	_Dimmer^(0+128)
 13003                           
 13004                           ;Dimmer_B1.c: 670: Dimmer.LoadGO = status == 1 ? 1 : Dimmer.LoadGO;
 13005  0CF6  0020               	movlb	0	; select bank0
 13006  0CF7  0827               	movf	setDimmerLights@status,w
 13007  0CF8  3A01               	xorlw	1
 13008  0CF9  1903               	skipnz
 13009  0CFA  2D06               	goto	l9301
 13010  0CFB  0021               	movlb	1	; select bank1
 13011  0CFC  0C48               	rrf	_Dimmer^(0+128),w
 13012  0CFD  0C89               	rrf	9,f
 13013  0CFE  3901               	andlw	1
 13014  0CFF  0020               	movlb	0	; select bank0
 13015  0D00  00A8               	movwf	??_setDimmerLights
 13016  0D01  01A9               	clrf	??_setDimmerLights+1
 13017  0D02  0828               	movf	??_setDimmerLights,w
 13018  0D03  00AA               	movwf	_setDimmerLights$2592
 13019  0D04  0829               	movf	??_setDimmerLights+1,w
 13020  0D05  2D09               	goto	L10
 13021  0D06                     l9301:	
 13022  0D06  3001               	movlw	1
 13023  0D07  00AA               	movwf	_setDimmerLights$2592
 13024  0D08  3000               	movlw	0
 13025  0D09                     L10:	
 13026  0D09  00AB               	movwf	_setDimmerLights$2592+1
 13027  0D0A  082A               	movf	_setDimmerLights$2592,w
 13028  0D0B  0021               	movlb	1	; select bank1
 13029  0D0C  1148               	bcf	_Dimmer^(0+128),2
 13030  0D0D  1D03               	skipz
 13031  0D0E  1548               	bsf	_Dimmer^(0+128),2
 13032                           
 13033                           ;Dimmer_B1.c: 672: if (status == 1) {
 13034  0D0F  0020               	movlb	0	; select bank0
 13035  0D10  0827               	movf	setDimmerLights@status,w
 13036  0D11  3A01               	xorlw	1
 13037  0D12  1D03               	skipz
 13038  0D13  2D45               	goto	l9315
 13039                           
 13040                           ;Dimmer_B1.c: 673: setLED(lights, 0);
 13041  0D14  01A2               	clrf	setLED@command
 13042  0D15  082C               	movf	setDimmerLights@lights,w
 13043  0D16  3188  20D1  318C   	fcall	_setLED
 13044                           
 13045                           ;Dimmer_B1.c: 676: DimmerLights->StatusFlag = 1;
 13046  0D19  0877               	movf	_DimmerLights,w
 13047  0D1A  0086               	movwf	6
 13048  0D1B  3001               	movlw	1	; select bank2/3
 13049  0D1C  0087               	movwf	7
 13050  0D1D  1701               	bsf	1,6
 13051                           
 13052                           ;Dimmer_B1.c: 678: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13053  0D1E  0877               	movf	_DimmerLights,w
 13054  0D1F  3E05               	addlw	5
 13055  0D20  0086               	movwf	6
 13056  0D21  3001               	movlw	1	; select bank2/3
 13057  0D22  0087               	movwf	7
 13058  0D23  0801               	movf	1,w
 13059  0D24  0020               	movlb	0	; select bank0
 13060  0D25  00A8               	movwf	??_setDimmerLights
 13061  0D26  0877               	movf	_DimmerLights,w
 13062  0D27  3E04               	addlw	4
 13063  0D28  0086               	movwf	6
 13064  0D29  3001               	movlw	1	; select bank2/3
 13065  0D2A  0087               	movwf	7
 13066  0D2B  0828               	movf	??_setDimmerLights,w
 13067  0D2C  0081               	movwf	1
 13068                           
 13069                           ;Dimmer_B1.c: 682: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 13070  0D2D  3020               	movlw	32
 13071  0D2E  00A8               	movwf	??_setDimmerLights
 13072  0D2F  0877               	movf	_DimmerLights,w
 13073  0D30  3E04               	addlw	4
 13074  0D31  0086               	movwf	6
 13075  0D32  3001               	movlw	1	; select bank2/3
 13076  0D33  0087               	movwf	7
 13077  0D34  0828               	movf	??_setDimmerLights,w
 13078  0D35  0081               	movwf	1
 13079                           
 13080                           ;Dimmer_B1.c: 686: DimmerLights->Signal = 1;
 13081  0D36  0877               	movf	_DimmerLights,w
 13082  0D37  0086               	movwf	6
 13083  0D38  3001               	movlw	1	; select bank2/3
 13084  0D39  0087               	movwf	7
 13085  0D3A  1481               	bsf	1,1
 13086                           
 13087                           ;Dimmer_B1.c: 687: DimmerLights->DimmingTimeValue = 7;
 13088  0D3B  3007               	movlw	7
 13089  0D3C  00A8               	movwf	??_setDimmerLights
 13090  0D3D  0877               	movf	_DimmerLights,w
 13091  0D3E  3E02               	addlw	2
 13092  0D3F  0086               	movwf	6
 13093  0D40  3001               	movlw	1	; select bank2/3
 13094  0D41  0087               	movwf	7
 13095  0D42  0828               	movf	??_setDimmerLights,w
 13096  0D43  0081               	movwf	1
 13097                           
 13098                           ;Dimmer_B1.c: 689: } else {
 13099  0D44  0008               	return
 13100  0D45                     l9315:	
 13101                           
 13102                           ;Dimmer_B1.c: 691: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13103  0D45  0877               	movf	_DimmerLights,w
 13104  0D46  3E06               	addlw	6
 13105  0D47  0086               	movwf	6
 13106  0D48  3001               	movlw	1	; select bank2/3
 13107  0D49  0087               	movwf	7
 13108  0D4A  0801               	movf	1,w
 13109  0D4B  00A8               	movwf	??_setDimmerLights
 13110  0D4C  0877               	movf	_DimmerLights,w
 13111  0D4D  3E04               	addlw	4
 13112  0D4E  0086               	movwf	6
 13113  0D4F  3001               	movlw	1	; select bank2/3
 13114  0D50  0087               	movwf	7
 13115  0D51  0828               	movf	??_setDimmerLights,w
 13116  0D52  0081               	movwf	1
 13117                           
 13118                           ;Dimmer_B1.c: 698: DimmerLights->Signal = 1;
 13119  0D53  0877               	movf	_DimmerLights,w
 13120  0D54  0086               	movwf	6
 13121  0D55  3001               	movlw	1	; select bank2/3
 13122  0D56  0087               	movwf	7
 13123  0D57  1481               	bsf	1,1
 13124                           
 13125                           ;Dimmer_B1.c: 699: DimmerLights->AdjFlag = 0;
 13126  0D58  0877               	movf	_DimmerLights,w
 13127  0D59  0086               	movwf	6
 13128  0D5A  3001               	movlw	1	; select bank2/3
 13129  0D5B  0087               	movwf	7
 13130  0D5C  1181               	bcf	1,3
 13131                           
 13132                           ;Dimmer_B1.c: 700: DimmerLights->AdjStatus = 0;
 13133  0D5D  0877               	movf	_DimmerLights,w
 13134  0D5E  0086               	movwf	6
 13135  0D5F  3001               	movlw	1	; select bank2/3
 13136  0D60  0087               	movwf	7
 13137  0D61  1201               	bcf	1,4
 13138                           
 13139                           ;Dimmer_B1.c: 701: DimmerLights->AdjRF = 0;
 13140  0D62  0877               	movf	_DimmerLights,w
 13141  0D63  0086               	movwf	6
 13142  0D64  3001               	movlw	1	; select bank2/3
 13143  0D65  0087               	movwf	7
 13144  0D66  1101               	bcf	1,2
 13145                           
 13146                           ;Dimmer_B1.c: 702: DimmerLights->DimmingTimeValue = 7;
 13147  0D67  3007               	movlw	7
 13148  0D68  00A8               	movwf	??_setDimmerLights
 13149  0D69  0877               	movf	_DimmerLights,w
 13150  0D6A  3E02               	addlw	2
 13151  0D6B  0086               	movwf	6
 13152  0D6C  3001               	movlw	1	; select bank2/3
 13153  0D6D  0087               	movwf	7
 13154  0D6E  0828               	movf	??_setDimmerLights,w
 13155  0D6F  0081               	movwf	1
 13156  0D70  0008               	return
 13157  0D71                     __end_of_setDimmerLights:	
 13158                           
 13159                           	psect	text75
 13160  08D1                     __ptext75:	
 13161 ;; *************** function _setLED *****************
 13162 ;; Defined at:
 13163 ;;		line 73 in file "../src/LED_B1.c"
 13164 ;; Parameters:    Size  Location     Type
 13165 ;;  led             1    wreg     unsigned char 
 13166 ;;  command         1    2[BANK0 ] unsigned char 
 13167 ;; Auto vars:     Size  Location     Type
 13168 ;;  led             1    3[BANK0 ] unsigned char 
 13169 ;; Return value:  Size  Location     Type
 13170 ;;		None               void
 13171 ;; Registers used:
 13172 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13173 ;; Tracked objects:
 13174 ;;		On entry : 0/0
 13175 ;;		On exit  : 0/0
 13176 ;;		Unchanged: 0/0
 13177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13178 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13179 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13182 ;;Total ram usage:        2 bytes
 13183 ;; Hardware stack levels used:    1
 13184 ;; Hardware stack levels required when called:    6
 13185 ;; This function calls:
 13186 ;;		_LedPointSelect
 13187 ;; This function is called by:
 13188 ;;		_setDimmerLights
 13189 ;;		_setLED_Initialization
 13190 ;;		_setMain_Exception
 13191 ;;		_setSw_Initialization
 13192 ;; This function uses a non-reentrant model
 13193 ;;
 13194                           
 13195                           
 13196                           ;psect for function _setLED
 13197  08D1                     _setLED:	
 13198                           
 13199                           ;incstack = 0
 13200                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13201                           ;setLED@led stored from wreg
 13202  08D1  0020               	movlb	0	; select bank0
 13203  08D2  00A3               	movwf	setLED@led
 13204                           
 13205                           ;LED_B1.c: 74: LedPointSelect(led);
 13206  08D3  0823               	movf	setLED@led,w
 13207  08D4  319E  26B2  3188   	fcall	_LedPointSelect
 13208                           
 13209                           ;LED_B1.c: 75: if (command == 0) {
 13210  08D7  0020               	movlb	0	; select bank0
 13211  08D8  08A2               	movf	setLED@command,f
 13212  08D9  1D03               	skipz
 13213  08DA  28ED               	goto	l9065
 13214                           
 13215                           ;LED_B1.c: 77: if (led == 1) {
 13216  08DB  0823               	movf	setLED@led,w
 13217  08DC  3A01               	xorlw	1
 13218  08DD  1D03               	skipz
 13219  08DE  28E1               	goto	l9057
 13220                           
 13221                           ;LED_B1.c: 81: RA3 = 1;
 13222  08DF  158C               	bsf	12,3	;volatile
 13223                           
 13224                           ;LED_B1.c: 83: }
 13225  08E0  0008               	return
 13226  08E1                     l9057:	
 13227                           
 13228                           ;LED_B1.c: 86: else if (led == 2) {
 13229  08E1  0823               	movf	setLED@led,w
 13230  08E2  3A02               	xorlw	2
 13231  08E3  1D03               	skipz
 13232  08E4  28E7               	goto	l9061
 13233                           
 13234                           ;LED_B1.c: 90: RC7 = 1;
 13235  08E5  178E               	bsf	14,7	;volatile
 13236                           
 13237                           ;LED_B1.c: 92: }
 13238  08E6  0008               	return
 13239  08E7                     l9061:	
 13240                           
 13241                           ;LED_B1.c: 104: else if (led == 99) {
 13242  08E7  0823               	movf	setLED@led,w
 13243  08E8  3A63               	xorlw	99
 13244  08E9  1D03               	skipz
 13245  08EA  0008               	return
 13246                           
 13247                           ;LED_B1.c: 108: RB5 = 1;
 13248  08EB  168D               	bsf	13,5	;volatile
 13249                           
 13250                           ;LED_B1.c: 110: }
 13251                           ;LED_B1.c: 112: } else if (command == 1) {
 13252  08EC  0008               	return
 13253  08ED                     l9065:	
 13254  08ED  0822               	movf	setLED@command,w
 13255  08EE  3A01               	xorlw	1
 13256  08EF  1D03               	skipz
 13257  08F0  2903               	goto	l9079
 13258                           
 13259                           ;LED_B1.c: 114: if (led == 1) {
 13260  08F1  0823               	movf	setLED@led,w
 13261  08F2  3A01               	xorlw	1
 13262  08F3  1D03               	skipz
 13263  08F4  28F7               	goto	l9071
 13264                           
 13265                           ;LED_B1.c: 118: RA3 = 0;
 13266  08F5  118C               	bcf	12,3	;volatile
 13267                           
 13268                           ;LED_B1.c: 120: }
 13269  08F6  0008               	return
 13270  08F7                     l9071:	
 13271                           
 13272                           ;LED_B1.c: 123: else if (led == 2) {
 13273  08F7  0823               	movf	setLED@led,w
 13274  08F8  3A02               	xorlw	2
 13275  08F9  1D03               	skipz
 13276  08FA  28FD               	goto	l9075
 13277                           
 13278                           ;LED_B1.c: 127: RC7 = 0;
 13279  08FB  138E               	bcf	14,7	;volatile
 13280                           
 13281                           ;LED_B1.c: 129: }
 13282  08FC  0008               	return
 13283  08FD                     l9075:	
 13284                           
 13285                           ;LED_B1.c: 141: else if (led == 99) {
 13286  08FD  0823               	movf	setLED@led,w
 13287  08FE  3A63               	xorlw	99
 13288  08FF  1D03               	skipz
 13289  0900  0008               	return
 13290                           
 13291                           ;LED_B1.c: 145: RB5 = 0;
 13292  0901  128D               	bcf	13,5	;volatile
 13293                           
 13294                           ;LED_B1.c: 147: }
 13295                           ;LED_B1.c: 149: } else if (command == 10) {
 13296  0902  0008               	return
 13297  0903                     l9079:	
 13298  0903  0822               	movf	setLED@command,w
 13299  0904  3A0A               	xorlw	10
 13300  0905  1D03               	skipz
 13301  0906  2927               	goto	l9095
 13302                           
 13303                           ;LED_B1.c: 150: LED->GO = 0;
 13304  0907  0021               	movlb	1	; select bank1
 13305  0908  084F               	movf	_LED^(0+128),w
 13306  0909  0086               	movwf	6
 13307  090A  3001               	movlw	1	; select bank2/3
 13308  090B  0087               	movwf	7
 13309  090C  1081               	bcf	1,1
 13310                           
 13311                           ;LED_B1.c: 151: LED->Time = 0;
 13312  090D  0A4F               	incf	_LED^(0+128),w
 13313  090E  0086               	movwf	6
 13314  090F  3001               	movlw	1	; select bank2/3
 13315  0910  0087               	movwf	7
 13316  0911  3000               	movlw	0
 13317  0912  3FC0               	movwi [0]fsr1
 13318  0913  3FC1               	movwi [1]fsr1
 13319                           
 13320                           ;LED_B1.c: 153: if (led == 1) {
 13321  0914  0020               	movlb	0	; select bank0
 13322  0915  0823               	movf	setLED@led,w
 13323  0916  3A01               	xorlw	1
 13324  0917  1D03               	skipz
 13325  0918  291B               	goto	l9087
 13326                           
 13327                           ;LED_B1.c: 157: RA3 = 1;
 13328  0919  158C               	bsf	12,3	;volatile
 13329                           
 13330                           ;LED_B1.c: 159: }
 13331  091A  0008               	return
 13332  091B                     l9087:	
 13333                           
 13334                           ;LED_B1.c: 162: else if (led == 2) {
 13335  091B  0823               	movf	setLED@led,w
 13336  091C  3A02               	xorlw	2
 13337  091D  1D03               	skipz
 13338  091E  2921               	goto	l9091
 13339                           
 13340                           ;LED_B1.c: 166: RC7 = 1;
 13341  091F  178E               	bsf	14,7	;volatile
 13342                           
 13343                           ;LED_B1.c: 168: }
 13344  0920  0008               	return
 13345  0921                     l9091:	
 13346                           
 13347                           ;LED_B1.c: 180: else if (led == 99) {
 13348  0921  0823               	movf	setLED@led,w
 13349  0922  3A63               	xorlw	99
 13350  0923  1D03               	skipz
 13351  0924  0008               	return
 13352                           
 13353                           ;LED_B1.c: 184: RB5 = 1;
 13354  0925  168D               	bsf	13,5	;volatile
 13355                           
 13356                           ;LED_B1.c: 186: }
 13357                           ;LED_B1.c: 188: } else if (command == 11) {
 13358  0926  0008               	return
 13359  0927                     l9095:	
 13360  0927  0822               	movf	setLED@command,w
 13361  0928  3A0B               	xorlw	11
 13362  0929  1D03               	skipz
 13363  092A  0008               	return
 13364                           
 13365                           ;LED_B1.c: 189: LED->GO = 1;
 13366  092B  0021               	movlb	1	; select bank1
 13367  092C  084F               	movf	_LED^(0+128),w
 13368  092D  0086               	movwf	6
 13369  092E  3001               	movlw	1	; select bank2/3
 13370  092F  0087               	movwf	7
 13371  0930  1481               	bsf	1,1
 13372  0931  0008               	return
 13373  0932                     __end_of_setLED:	
 13374                           
 13375                           	psect	text76
 13376  1EB2                     __ptext76:	
 13377 ;; *************** function _LedPointSelect *****************
 13378 ;; Defined at:
 13379 ;;		line 7 in file "../src/LED_B1.c"
 13380 ;; Parameters:    Size  Location     Type
 13381 ;;  led             1    wreg     unsigned char 
 13382 ;; Auto vars:     Size  Location     Type
 13383 ;;  led             1    1[BANK0 ] unsigned char 
 13384 ;; Return value:  Size  Location     Type
 13385 ;;		None               void
 13386 ;; Registers used:
 13387 ;;		wreg
 13388 ;; Tracked objects:
 13389 ;;		On entry : 0/0
 13390 ;;		On exit  : 0/0
 13391 ;;		Unchanged: 0/0
 13392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13397 ;;Total ram usage:        2 bytes
 13398 ;; Hardware stack levels used:    1
 13399 ;; Hardware stack levels required when called:    5
 13400 ;; This function calls:
 13401 ;;		Nothing
 13402 ;; This function is called by:
 13403 ;;		_setLED_Initialization
 13404 ;;		_setLED
 13405 ;;		_setLED_Main
 13406 ;; This function uses a non-reentrant model
 13407 ;;
 13408                           
 13409                           
 13410                           ;psect for function _LedPointSelect
 13411  1EB2                     _LedPointSelect:	
 13412                           
 13413                           ;incstack = 0
 13414                           ; Regs used in _LedPointSelect: [wreg]
 13415                           ;LedPointSelect@led stored from wreg
 13416  1EB2  0020               	movlb	0	; select bank0
 13417  1EB3  00A1               	movwf	LedPointSelect@led
 13418                           
 13419                           ;LED_B1.c: 9: if (led == 1) {
 13420  1EB4  0821               	movf	LedPointSelect@led,w
 13421  1EB5  3A01               	xorlw	1
 13422  1EB6  1D03               	skipz
 13423  1EB7  2EBE               	goto	l8957
 13424                           
 13425                           ;LED_B1.c: 10: LED = &VarLED1;
 13426  1EB8  3061               	movlw	_VarLED1& (0+255)
 13427  1EB9  00A0               	movwf	??_LedPointSelect
 13428  1EBA  0820               	movf	??_LedPointSelect,w
 13429  1EBB  0021               	movlb	1	; select bank1
 13430  1EBC  00CF               	movwf	_LED^(0+128)
 13431                           
 13432                           ;LED_B1.c: 11: }
 13433  1EBD  0008               	return
 13434  1EBE                     l8957:	
 13435                           
 13436                           ;LED_B1.c: 14: else if (led == 2) {
 13437  1EBE  0020               	movlb	0	; select bank0
 13438  1EBF  0821               	movf	LedPointSelect@led,w
 13439  1EC0  3A02               	xorlw	2
 13440  1EC1  1D03               	skipz
 13441  1EC2  2EC9               	goto	l8961
 13442                           
 13443                           ;LED_B1.c: 15: LED = &VarLED2;
 13444  1EC3  3065               	movlw	_VarLED2& (0+255)
 13445  1EC4  00A0               	movwf	??_LedPointSelect
 13446  1EC5  0820               	movf	??_LedPointSelect,w
 13447  1EC6  0021               	movlb	1	; select bank1
 13448  1EC7  00CF               	movwf	_LED^(0+128)
 13449                           
 13450                           ;LED_B1.c: 16: }
 13451  1EC8  0008               	return
 13452  1EC9                     l8961:	
 13453                           
 13454                           ;LED_B1.c: 24: else if (led == 99) {
 13455  1EC9  0020               	movlb	0	; select bank0
 13456  1ECA  0821               	movf	LedPointSelect@led,w
 13457  1ECB  3A63               	xorlw	99
 13458  1ECC  1D03               	skipz
 13459  1ECD  0008               	return
 13460                           
 13461                           ;LED_B1.c: 25: LED = &VarErrLED;
 13462  1ECE  305D               	movlw	_VarErrLED& (0+255)
 13463  1ECF  00A0               	movwf	??_LedPointSelect
 13464  1ED0  0820               	movf	??_LedPointSelect,w
 13465  1ED1  0021               	movlb	1	; select bank1
 13466  1ED2  00CF               	movwf	_LED^(0+128)
 13467  1ED3  0008               	return
 13468  1ED4                     __end_of_LedPointSelect:	
 13469                           
 13470                           	psect	text77
 13471  1162                     __ptext77:	
 13472 ;; *************** function _getMain_All_Error_Status *****************
 13473 ;; Defined at:
 13474 ;;		line 360 in file "../src/Main_B1.c"
 13475 ;; Parameters:    Size  Location     Type
 13476 ;;  command         1    wreg     unsigned char 
 13477 ;; Auto vars:     Size  Location     Type
 13478 ;;  command         1    5[BANK0 ] unsigned char 
 13479 ;;  status          1    6[BANK0 ] unsigned char 
 13480 ;; Return value:  Size  Location     Type
 13481 ;;                  1    wreg      unsigned char 
 13482 ;; Registers used:
 13483 ;;		wreg, status,2, status,0
 13484 ;; Tracked objects:
 13485 ;;		On entry : 0/0
 13486 ;;		On exit  : 0/0
 13487 ;;		Unchanged: 0/0
 13488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13490 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13491 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13492 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13493 ;;Total ram usage:        7 bytes
 13494 ;; Hardware stack levels used:    1
 13495 ;; Hardware stack levels required when called:    5
 13496 ;; This function calls:
 13497 ;;		Nothing
 13498 ;; This function is called by:
 13499 ;;		_setDimmerLights_Main
 13500 ;;		_setDimmerLights
 13501 ;;		_Load_Main
 13502 ;;		_setTemp_Main
 13503 ;;		_setRF_Main
 13504 ;;		_getRxData
 13505 ;;		_Switch_Main
 13506 ;; This function uses a non-reentrant model
 13507 ;;
 13508                           
 13509                           
 13510                           ;psect for function _getMain_All_Error_Status
 13511  1162                     _getMain_All_Error_Status:	
 13512                           
 13513                           ;incstack = 0
 13514                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 13515                           ;getMain_All_Error_Status@command stored from wreg
 13516  1162  0020               	movlb	0	; select bank0
 13517  1163  00A5               	movwf	getMain_All_Error_Status@command
 13518                           
 13519                           ;Main_B1.c: 361: char status = 0;
 13520  1164  01A6               	clrf	getMain_All_Error_Status@status
 13521                           
 13522                           ;Main_B1.c: 372: if (status == 0 && command != 2) {
 13523  1165  08A6               	movf	getMain_All_Error_Status@status,f
 13524  1166  1D03               	skipz
 13525  1167  297C               	goto	l9037
 13526  1168  0825               	movf	getMain_All_Error_Status@command,w
 13527  1169  3A02               	xorlw	2
 13528  116A  1903               	skipnz
 13529  116B  297C               	goto	l9037
 13530                           
 13531                           ;Main_B1.c: 373: status = Temp.ERROR == 1 ? 2 : 0;
 13532  116C  0021               	movlb	1	; select bank1
 13533  116D  18D8               	btfsc	_Temp^(0+128),1
 13534  116E  2973               	goto	l9035
 13535  116F  0020               	movlb	0	; select bank0
 13536  1170  01A1               	clrf	_getMain_All_Error_Status$3925
 13537  1171  01A2               	clrf	_getMain_All_Error_Status$3925+1
 13538  1172  2978               	goto	l1586
 13539  1173                     l9035:	
 13540  1173  3002               	movlw	2
 13541  1174  0020               	movlb	0	; select bank0
 13542  1175  00A1               	movwf	_getMain_All_Error_Status$3925
 13543  1176  3000               	movlw	0
 13544  1177  00A2               	movwf	_getMain_All_Error_Status$3925+1
 13545  1178                     l1586:	
 13546  1178  0821               	movf	_getMain_All_Error_Status$3925,w
 13547  1179  00A0               	movwf	??_getMain_All_Error_Status
 13548  117A  0820               	movf	??_getMain_All_Error_Status,w
 13549  117B  00A6               	movwf	getMain_All_Error_Status@status
 13550  117C                     l9037:	
 13551                           
 13552                           ;Main_B1.c: 374: }
 13553                           ;Main_B1.c: 379: if (status == 0 && command != 3) {
 13554  117C  08A6               	movf	getMain_All_Error_Status@status,f
 13555  117D  1D03               	skipz
 13556  117E  2993               	goto	l1587
 13557  117F  0825               	movf	getMain_All_Error_Status@command,w
 13558  1180  3A03               	xorlw	3
 13559  1181  1903               	skipnz
 13560  1182  2993               	goto	l1587
 13561                           
 13562                           ;Main_B1.c: 380: status = Load.ERROR == 1 ? 3 : 0;
 13563  1183  0022               	movlb	2	; select bank2
 13564  1184  1AA7               	btfsc	_Load^(0+256),5
 13565  1185  298A               	goto	l9045
 13566  1186  0020               	movlb	0	; select bank0
 13567  1187  01A3               	clrf	_getMain_All_Error_Status$3934
 13568  1188  01A4               	clrf	_getMain_All_Error_Status$3934+1
 13569  1189  298F               	goto	l1591
 13570  118A                     l9045:	
 13571  118A  3003               	movlw	3
 13572  118B  0020               	movlb	0	; select bank0
 13573  118C  00A3               	movwf	_getMain_All_Error_Status$3934
 13574  118D  3000               	movlw	0
 13575  118E  00A4               	movwf	_getMain_All_Error_Status$3934+1
 13576  118F                     l1591:	
 13577  118F  0823               	movf	_getMain_All_Error_Status$3934,w
 13578  1190  00A0               	movwf	??_getMain_All_Error_Status
 13579  1191  0820               	movf	??_getMain_All_Error_Status,w
 13580  1192  00A6               	movwf	getMain_All_Error_Status@status
 13581  1193                     l1587:	
 13582                           
 13583                           ;Main_B1.c: 381: }
 13584                           ;Main_B1.c: 397: return status;
 13585  1193  0826               	movf	getMain_All_Error_Status@status,w
 13586  1194  0008               	return
 13587  1195                     __end_of_getMain_All_Error_Status:	
 13588                           
 13589                           	psect	text78
 13590  1B0B                     __ptext78:	
 13591 ;; *************** function _getLoad_OK *****************
 13592 ;; Defined at:
 13593 ;;		line 225 in file "../src/OverLoad_B1.c"
 13594 ;; Parameters:    Size  Location     Type
 13595 ;;		None
 13596 ;; Auto vars:     Size  Location     Type
 13597 ;;  ok              1    0[BANK0 ] unsigned char 
 13598 ;; Return value:  Size  Location     Type
 13599 ;;                  1    wreg      unsigned char 
 13600 ;; Registers used:
 13601 ;;		wreg, status,2
 13602 ;; Tracked objects:
 13603 ;;		On entry : 0/0
 13604 ;;		On exit  : 0/0
 13605 ;;		Unchanged: 0/0
 13606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13608 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13610 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13611 ;;Total ram usage:        1 bytes
 13612 ;; Hardware stack levels used:    1
 13613 ;; Hardware stack levels required when called:    5
 13614 ;; This function calls:
 13615 ;;		Nothing
 13616 ;; This function is called by:
 13617 ;;		_setDimmerLights_Main
 13618 ;; This function uses a non-reentrant model
 13619 ;;
 13620                           
 13621                           
 13622                           ;psect for function _getLoad_OK
 13623  1B0B                     _getLoad_OK:	
 13624                           
 13625                           ;OverLoad_B1.c: 226: char ok = Load.OK == 1 ? 1 : 0;
 13626                           
 13627                           ;incstack = 0
 13628                           ; Regs used in _getLoad_OK: [wreg+status,2]
 13629  1B0B  3000               	movlw	0
 13630  1B0C  0022               	movlb	2	; select bank2
 13631  1B0D  1BA7               	btfsc	_Load^(0+256),7
 13632  1B0E  3001               	movlw	1
 13633  1B0F  0020               	movlb	0	; select bank0
 13634  1B10  00A0               	movwf	getLoad_OK@ok
 13635                           
 13636                           ;OverLoad_B1.c: 227: return ok;
 13637  1B11  0820               	movf	getLoad_OK@ok,w
 13638  1B12  0008               	return
 13639  1B13                     __end_of_getLoad_OK:	
 13640                           
 13641                           	psect	text79
 13642  1D3D                     __ptext79:	
 13643 ;; *************** function _DimmerLights_Initialization *****************
 13644 ;; Defined at:
 13645 ;;		line 342 in file "../src/Dimmer_B1.c"
 13646 ;; Parameters:    Size  Location     Type
 13647 ;;		None
 13648 ;; Auto vars:     Size  Location     Type
 13649 ;;		None
 13650 ;; Return value:  Size  Location     Type
 13651 ;;		None               void
 13652 ;; Registers used:
 13653 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13654 ;; Tracked objects:
 13655 ;;		On entry : 0/0
 13656 ;;		On exit  : 0/0
 13657 ;;		Unchanged: 0/0
 13658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13661 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13662 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13663 ;;Total ram usage:        1 bytes
 13664 ;; Hardware stack levels used:    1
 13665 ;; Hardware stack levels required when called:    7
 13666 ;; This function calls:
 13667 ;;		_Dimmer_Initialization
 13668 ;;		_setDimmerLights_Initialization
 13669 ;; This function is called by:
 13670 ;;		_main
 13671 ;; This function uses a non-reentrant model
 13672 ;;
 13673                           
 13674                           
 13675                           ;psect for function _DimmerLights_Initialization
 13676  1D3D                     _DimmerLights_Initialization:	
 13677                           
 13678                           ;Dimmer_B1.c: 345: DimmerLights11 = &DimmerLights1;
 13679                           
 13680                           ;incstack = 0
 13681                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13682  1D3D  30BE               	movlw	_DimmerLights1& (0+255)
 13683  1D3E  0020               	movlb	0	; select bank0
 13684  1D3F  00A4               	movwf	??_DimmerLights_Initialization
 13685  1D40  0824               	movf	??_DimmerLights_Initialization,w
 13686  1D41  0021               	movlb	1	; select bank1
 13687  1D42  00CC               	movwf	_DimmerLights11^(0+128)
 13688                           
 13689                           ;Dimmer_B1.c: 346: setDimmerLights_Initialization(1);
 13690  1D43  3001               	movlw	1
 13691  1D44  319F  2788  319D   	fcall	_setDimmerLights_Initialization
 13692                           
 13693                           ;Dimmer_B1.c: 350: DimmerLights22 = &DimmerLights2;
 13694  1D47  30CD               	movlw	_DimmerLights2& (0+255)
 13695  1D48  0020               	movlb	0	; select bank0
 13696  1D49  00A4               	movwf	??_DimmerLights_Initialization
 13697  1D4A  0824               	movf	??_DimmerLights_Initialization,w
 13698  1D4B  0021               	movlb	1	; select bank1
 13699  1D4C  00CD               	movwf	_DimmerLights22^(0+128)
 13700                           
 13701                           ;Dimmer_B1.c: 351: setDimmerLights_Initialization(2);
 13702  1D4D  3002               	movlw	2
 13703  1D4E  319F  2788  319D   	fcall	_setDimmerLights_Initialization
 13704                           
 13705                           ;Dimmer_B1.c: 360: Dimmer_Initialization();
 13706  1D51  319A  22B5         	fcall	_Dimmer_Initialization
 13707  1D53  0008               	return
 13708  1D54                     __end_of_DimmerLights_Initialization:	
 13709                           
 13710                           	psect	text80
 13711  1F88                     __ptext80:	
 13712 ;; *************** function _setDimmerLights_Initialization *****************
 13713 ;; Defined at:
 13714 ;;		line 366 in file "../src/Dimmer_B1.c"
 13715 ;; Parameters:    Size  Location     Type
 13716 ;;  lights          1    wreg     unsigned char 
 13717 ;; Auto vars:     Size  Location     Type
 13718 ;;  lights          1    3[BANK0 ] unsigned char 
 13719 ;; Return value:  Size  Location     Type
 13720 ;;		None               void
 13721 ;; Registers used:
 13722 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13723 ;; Tracked objects:
 13724 ;;		On entry : 0/0
 13725 ;;		On exit  : 0/0
 13726 ;;		Unchanged: 0/0
 13727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13731 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13732 ;;Total ram usage:        2 bytes
 13733 ;; Hardware stack levels used:    1
 13734 ;; Hardware stack levels required when called:    6
 13735 ;; This function calls:
 13736 ;;		_DimmerLightsPointSelect
 13737 ;; This function is called by:
 13738 ;;		_DimmerLights_Initialization
 13739 ;; This function uses a non-reentrant model
 13740 ;;
 13741                           
 13742                           
 13743                           ;psect for function _setDimmerLights_Initialization
 13744  1F88                     _setDimmerLights_Initialization:	
 13745                           
 13746                           ;incstack = 0
 13747                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13748                           ;setDimmerLights_Initialization@lights stored from wreg
 13749  1F88  0020               	movlb	0	; select bank0
 13750  1F89  00A3               	movwf	setDimmerLights_Initialization@lights
 13751                           
 13752                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 13753  1F8A  0823               	movf	setDimmerLights_Initialization@lights,w
 13754  1F8B  319C  2475         	fcall	_DimmerLightsPointSelect
 13755                           
 13756                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13757  1F8D  3020               	movlw	32
 13758  1F8E  0020               	movlb	0	; select bank0
 13759  1F8F  00A2               	movwf	??_setDimmerLights_Initialization
 13760  1F90  0877               	movf	_DimmerLights,w
 13761  1F91  3E05               	addlw	5
 13762  1F92  0086               	movwf	6
 13763  1F93  3001               	movlw	1	; select bank2/3
 13764  1F94  0087               	movwf	7
 13765  1F95  0822               	movf	??_setDimmerLights_Initialization,w
 13766  1F96  0081               	movwf	1
 13767                           
 13768                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13769  1F97  303C               	movlw	60
 13770  1F98  00A2               	movwf	??_setDimmerLights_Initialization
 13771  1F99  0877               	movf	_DimmerLights,w
 13772  1F9A  3E06               	addlw	6
 13773  1F9B  0086               	movwf	6
 13774  1F9C  3001               	movlw	1	; select bank2/3
 13775  1F9D  0087               	movwf	7
 13776  1F9E  0822               	movf	??_setDimmerLights_Initialization,w
 13777  1F9F  0081               	movwf	1
 13778                           
 13779                           ;Dimmer_B1.c: 385: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13780  1FA0  0877               	movf	_DimmerLights,w
 13781  1FA1  3E06               	addlw	6
 13782  1FA2  0086               	movwf	6
 13783  1FA3  3001               	movlw	1	; select bank2/3
 13784  1FA4  0087               	movwf	7
 13785  1FA5  0801               	movf	1,w
 13786  1FA6  00A2               	movwf	??_setDimmerLights_Initialization
 13787  1FA7  0877               	movf	_DimmerLights,w
 13788  1FA8  3E04               	addlw	4
 13789  1FA9  0086               	movwf	6
 13790  1FAA  3001               	movlw	1	; select bank2/3
 13791  1FAB  0087               	movwf	7
 13792  1FAC  0822               	movf	??_setDimmerLights_Initialization,w
 13793  1FAD  0081               	movwf	1
 13794  1FAE  0008               	return
 13795  1FAF                     __end_of_setDimmerLights_Initialization:	
 13796                           
 13797                           	psect	text81
 13798  1AB5                     __ptext81:	
 13799 ;; *************** function _Dimmer_Initialization *****************
 13800 ;; Defined at:
 13801 ;;		line 920 in file "../src/Dimmer_B1.c"
 13802 ;; Parameters:    Size  Location     Type
 13803 ;;		None
 13804 ;; Auto vars:     Size  Location     Type
 13805 ;;		None
 13806 ;; Return value:  Size  Location     Type
 13807 ;;		None               void
 13808 ;; Registers used:
 13809 ;;		None
 13810 ;; Tracked objects:
 13811 ;;		On entry : 0/0
 13812 ;;		On exit  : 0/0
 13813 ;;		Unchanged: 0/0
 13814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13819 ;;Total ram usage:        0 bytes
 13820 ;; Hardware stack levels used:    1
 13821 ;; Hardware stack levels required when called:    5
 13822 ;; This function calls:
 13823 ;;		Nothing
 13824 ;; This function is called by:
 13825 ;;		_DimmerLights_Initialization
 13826 ;; This function uses a non-reentrant model
 13827 ;;
 13828                           
 13829                           
 13830                           ;psect for function _Dimmer_Initialization
 13831  1AB5                     _Dimmer_Initialization:	
 13832                           
 13833                           ;incstack = 0
 13834                           ; Regs used in _Dimmer_Initialization: []
 13835  1AB5  0008               	return
 13836  1AB6                     __end_of_Dimmer_Initialization:	
 13837                           
 13838                           	psect	text82
 13839  1B03                     __ptext82:	
 13840 ;; *************** function _DelayOff_Main *****************
 13841 ;; Defined at:
 13842 ;;		line 41 in file "../src/DelayOff_B1.c"
 13843 ;; Parameters:    Size  Location     Type
 13844 ;;		None
 13845 ;; Auto vars:     Size  Location     Type
 13846 ;;		None
 13847 ;; Return value:  Size  Location     Type
 13848 ;;		None               void
 13849 ;; Registers used:
 13850 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13851 ;; Tracked objects:
 13852 ;;		On entry : 0/0
 13853 ;;		On exit  : 0/0
 13854 ;;		Unchanged: 0/0
 13855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13860 ;;Total ram usage:        0 bytes
 13861 ;; Hardware stack levels used:    1
 13862 ;; Hardware stack levels required when called:   11
 13863 ;; This function calls:
 13864 ;;		_DlyOff_Main
 13865 ;; This function is called by:
 13866 ;;		_main
 13867 ;; This function uses a non-reentrant model
 13868 ;;
 13869                           
 13870                           
 13871                           ;psect for function _DelayOff_Main
 13872  1B03                     _DelayOff_Main:	
 13873                           
 13874                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13875                           
 13876                           ;incstack = 0
 13877                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13878  1B03  3001               	movlw	1
 13879  1B04  3188  2070  319B   	fcall	_DlyOff_Main
 13880                           
 13881                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 13882  1B07  3002               	movlw	2
 13883  1B08  3188  2070         	fcall	_DlyOff_Main
 13884  1B0A  0008               	return
 13885  1B0B                     __end_of_DelayOff_Main:	
 13886                           
 13887                           	psect	text83
 13888  0870                     __ptext83:	
 13889 ;; *************** function _DlyOff_Main *****************
 13890 ;; Defined at:
 13891 ;;		line 62 in file "../src/DelayOff_B1.c"
 13892 ;; Parameters:    Size  Location     Type
 13893 ;;  sw              1    wreg     unsigned char 
 13894 ;; Auto vars:     Size  Location     Type
 13895 ;;  sw              1   72[BANK0 ] unsigned char 
 13896 ;; Return value:  Size  Location     Type
 13897 ;;		None               void
 13898 ;; Registers used:
 13899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13900 ;; Tracked objects:
 13901 ;;		On entry : 0/0
 13902 ;;		On exit  : 0/0
 13903 ;;		Unchanged: 0/0
 13904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13907 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13908 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13909 ;;Total ram usage:        3 bytes
 13910 ;; Hardware stack levels used:    1
 13911 ;; Hardware stack levels required when called:   10
 13912 ;; This function calls:
 13913 ;;		_DelayOffPointSelect
 13914 ;;		_getDimmerLights_Status
 13915 ;;		_setDimmerLights_SwOff
 13916 ;;		_setDimmerLights_SwOn
 13917 ;;		_setRF_DimmerLights
 13918 ;; This function is called by:
 13919 ;;		_DelayOff_Main
 13920 ;; This function uses a non-reentrant model
 13921 ;;
 13922                           
 13923                           
 13924                           ;psect for function _DlyOff_Main
 13925  0870                     _DlyOff_Main:	
 13926                           
 13927                           ;incstack = 0
 13928                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13929                           ;DlyOff_Main@sw stored from wreg
 13930  0870  0020               	movlb	0	; select bank0
 13931  0871  00E8               	movwf	DlyOff_Main@sw
 13932                           
 13933                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13934  0872  0868               	movf	DlyOff_Main@sw,w
 13935  0873  319C  24C2  3188   	fcall	_DelayOffPointSelect
 13936                           
 13937                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13938  0876  0876               	movf	_DelayOff,w
 13939  0877  0086               	movwf	6
 13940  0878  3001               	movlw	1	; select bank2/3
 13941  0879  0087               	movwf	7
 13942  087A  1C81               	btfss	1,1
 13943  087B  0008               	return
 13944                           
 13945                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13946  087C  0876               	movf	_DelayOff,w
 13947  087D  0086               	movwf	6
 13948  087E  3001               	movlw	1	; select bank2/3
 13949  087F  0087               	movwf	7
 13950  0880  3001               	movlw	1
 13951  0881  0781               	addwf	1,f
 13952  0882  3141               	addfsr 1,1
 13953  0883  1803               	skipnc
 13954  0884  0A81               	incf	1,f
 13955                           
 13956                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 13957  0885  0876               	movf	_DelayOff,w
 13958  0886  0086               	movwf	6
 13959  0887  3001               	movlw	1	; select bank2/3
 13960  0888  0087               	movwf	7
 13961  0889  3F40               	moviw [0]fsr1
 13962  088A  0020               	movlb	0	; select bank0
 13963  088B  00E6               	movwf	??_DlyOff_Main
 13964  088C  3F41               	moviw [1]fsr1
 13965  088D  00E7               	movwf	??_DlyOff_Main+1
 13966  088E  3016               	movlw	22
 13967  088F  0267               	subwf	??_DlyOff_Main+1,w
 13968  0890  3012               	movlw	18
 13969  0891  1903               	skipnz
 13970  0892  0266               	subwf	??_DlyOff_Main,w
 13971  0893  1C03               	skipc
 13972  0894  0008               	return
 13973                           
 13974                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13975  0895  0876               	movf	_DelayOff,w
 13976  0896  0086               	movwf	6
 13977  0897  3001               	movlw	1	; select bank2/3
 13978  0898  0087               	movwf	7
 13979  0899  3000               	movlw	0
 13980  089A  3FC0               	movwi [0]fsr1
 13981  089B  3FC1               	movwi [1]fsr1
 13982                           
 13983                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13984  089C  3001               	movlw	1
 13985  089D  00E6               	movwf	??_DlyOff_Main
 13986  089E  0876               	movf	_DelayOff,w
 13987  089F  0086               	movwf	6
 13988  08A0  3001               	movlw	1	; select bank2/3
 13989  08A1  0087               	movwf	7
 13990  08A2  0866               	movf	??_DlyOff_Main,w
 13991  08A3  0781               	addwf	1,f
 13992                           
 13993                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13994  08A4  0876               	movf	_DelayOff,w
 13995  08A5  0086               	movwf	6
 13996  08A6  3001               	movlw	1	; select bank2/3
 13997  08A7  0087               	movwf	7
 13998  08A8  0876               	movf	_DelayOff,w
 13999  08A9  0084               	movwf	4
 14000  08AA  3001               	movlw	1	; select bank2/3
 14001  08AB  0085               	movwf	5
 14002  08AC  0800               	movf	0,w
 14003  08AD  0201               	subwf	1,w
 14004  08AE  1C03               	skipc
 14005  08AF  0008               	return
 14006                           
 14007                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 14008  08B0  0876               	movf	_DelayOff,w
 14009  08B1  0086               	movwf	6
 14010  08B2  3001               	movlw	1	; select bank2/3
 14011  08B3  0087               	movwf	7
 14012  08B4  0181               	clrf	1
 14013                           
 14014                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 14015  08B5  0876               	movf	_DelayOff,w
 14016  08B6  0086               	movwf	6
 14017  08B7  3001               	movlw	1	; select bank2/3
 14018  08B8  0087               	movwf	7
 14019  08B9  1081               	bcf	1,1
 14020                           
 14021                           ;DelayOff_B1.c: 74: setDimmerLights_SwOn(sw);
 14022  08BA  0868               	movf	DlyOff_Main@sw,w
 14023  08BB  3193  23B2  3188   	fcall	_setDimmerLights_SwOn
 14024                           
 14025                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 14026  08BE  0020               	movlb	0	; select bank0
 14027  08BF  0868               	movf	DlyOff_Main@sw,w
 14028  08C0  319B  23D8  3188   	fcall	_getDimmerLights_Status
 14029  08C3  3A01               	xorlw	1
 14030  08C4  1D03               	skipz
 14031  08C5  28CB               	goto	l582
 14032                           
 14033                           ;DelayOff_B1.c: 76: setDimmerLights_SwOff(sw);
 14034  08C6  0020               	movlb	0	; select bank0
 14035  08C7  0868               	movf	DlyOff_Main@sw,w
 14036  08C8  3197  2740  3188   	fcall	_setDimmerLights_SwOff
 14037  08CB                     l582:	
 14038                           
 14039                           ;DelayOff_B1.c: 77: }
 14040                           ;DelayOff_B1.c: 78: setRF_DimmerLights(sw, 0);
 14041  08CB  0020               	movlb	0	; select bank0
 14042  08CC  01DD               	clrf	setRF_DimmerLights@on
 14043  08CD  0868               	movf	DlyOff_Main@sw,w
 14044  08CE  3189  219A         	fcall	_setRF_DimmerLights
 14045  08D0  0008               	return
 14046  08D1                     __end_of_DlyOff_Main:	
 14047                           
 14048                           	psect	text84
 14049  13B2                     __ptext84:	
 14050 ;; *************** function _setDimmerLights_SwOn *****************
 14051 ;; Defined at:
 14052 ;;		line 554 in file "../src/Dimmer_B1.c"
 14053 ;; Parameters:    Size  Location     Type
 14054 ;;  sw              1    wreg     unsigned char 
 14055 ;; Auto vars:     Size  Location     Type
 14056 ;;  sw              1   68[BANK0 ] unsigned char 
 14057 ;;  idle            1   67[BANK0 ] unsigned char 
 14058 ;; Return value:  Size  Location     Type
 14059 ;;		None               void
 14060 ;; Registers used:
 14061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14062 ;; Tracked objects:
 14063 ;;		On entry : 0/0
 14064 ;;		On exit  : 0/0
 14065 ;;		Unchanged: 0/0
 14066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14069 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14070 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14071 ;;Total ram usage:        3 bytes
 14072 ;; Hardware stack levels used:    1
 14073 ;; Hardware stack levels required when called:    9
 14074 ;; This function calls:
 14075 ;;		_DimmerLightsPointSelect
 14076 ;;		_getAll_DimmerLights_AdjGO
 14077 ;;		_setBuz
 14078 ;;		_setDimmerLights_Trigger
 14079 ;;		_setRF_DimmerLights
 14080 ;;		_setTxData
 14081 ;; This function is called by:
 14082 ;;		_DlyOff_Main
 14083 ;;		_setRFSW_Control
 14084 ;;		_setSw_Main
 14085 ;; This function uses a non-reentrant model
 14086 ;;
 14087                           
 14088                           
 14089                           ;psect for function _setDimmerLights_SwOn
 14090  13B2                     _setDimmerLights_SwOn:	
 14091                           
 14092                           ;incstack = 0
 14093                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14094                           ;setDimmerLights_SwOn@sw stored from wreg
 14095  13B2  0020               	movlb	0	; select bank0
 14096  13B3  00E4               	movwf	setDimmerLights_SwOn@sw
 14097                           
 14098                           ;Dimmer_B1.c: 555: DimmerLightsPointSelect(sw);
 14099  13B4  0864               	movf	setDimmerLights_SwOn@sw,w
 14100  13B5  319C  2475  3193   	fcall	_DimmerLightsPointSelect
 14101                           
 14102                           ;Dimmer_B1.c: 556: char idle = 0;
 14103  13B8  0020               	movlb	0	; select bank0
 14104  13B9  01E3               	clrf	setDimmerLights_SwOn@idle
 14105                           
 14106                           ;Dimmer_B1.c: 558: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
 14107  13BA  319B  23E8  3193   	fcall	_getAll_DimmerLights_AdjGO
 14108  13BD  3A01               	xorlw	1
 14109  13BE  3000               	movlw	0
 14110  13BF  1903               	skipnz
 14111  13C0  3001               	movlw	1
 14112  13C1  0020               	movlb	0	; select bank0
 14113  13C2  00E2               	movwf	??_setDimmerLights_SwOn
 14114  13C3  0862               	movf	??_setDimmerLights_SwOn,w
 14115  13C4  00E3               	movwf	setDimmerLights_SwOn@idle
 14116                           
 14117                           ;Dimmer_B1.c: 560: if (idle == 0) {
 14118  13C5  08E3               	movf	setDimmerLights_SwOn@idle,f
 14119  13C6  1D03               	skipz
 14120  13C7  0008               	return
 14121                           
 14122                           ;Dimmer_B1.c: 561: DimmerLights->SwFlag = 1;
 14123  13C8  0877               	movf	_DimmerLights,w
 14124  13C9  3E09               	addlw	9
 14125  13CA  0086               	movwf	6
 14126  13CB  3001               	movlw	1	; select bank2/3
 14127  13CC  0087               	movwf	7
 14128  13CD  1701               	bsf	1,6
 14129                           
 14130                           ;Dimmer_B1.c: 562: setBuz(1, 100);
 14131  13CE  3064               	movlw	100
 14132  13CF  00A9               	movwf	setBuz@time
 14133  13D0  3000               	movlw	0
 14134  13D1  00AA               	movwf	setBuz@time+1
 14135  13D2  3001               	movlw	1
 14136  13D3  3196  2632  3193   	fcall	_setBuz
 14137                           
 14138                           ;Dimmer_B1.c: 563: if (DimmerLights->Status == 0) {
 14139  13D6  0877               	movf	_DimmerLights,w
 14140  13D7  0086               	movwf	6
 14141  13D8  3001               	movlw	1	; select bank2/3
 14142  13D9  0087               	movwf	7
 14143  13DA  1A81               	btfsc	1,5
 14144  13DB  2BF2               	goto	l8863
 14145                           
 14146                           ;Dimmer_B1.c: 564: DimmerLights->Status = 1;
 14147  13DC  0877               	movf	_DimmerLights,w
 14148  13DD  0086               	movwf	6
 14149  13DE  3001               	movlw	1	; select bank2/3
 14150  13DF  0087               	movwf	7
 14151  13E0  1681               	bsf	1,5
 14152                           
 14153                           ;Dimmer_B1.c: 565: setDimmerLights_Trigger(sw, 1);
 14154  13E1  0020               	movlb	0	; select bank0
 14155  13E2  01A2               	clrf	setDimmerLights_Trigger@command
 14156  13E3  0AA2               	incf	setDimmerLights_Trigger@command,f
 14157  13E4  0864               	movf	setDimmerLights_SwOn@sw,w
 14158  13E5  319D  25F3  3193   	fcall	_setDimmerLights_Trigger
 14159                           
 14160                           ;Dimmer_B1.c: 566: setRF_DimmerLights(sw, 1);
 14161  13E8  0020               	movlb	0	; select bank0
 14162  13E9  01DD               	clrf	setRF_DimmerLights@on
 14163  13EA  0ADD               	incf	setRF_DimmerLights@on,f
 14164  13EB  0864               	movf	setDimmerLights_SwOn@sw,w
 14165  13EC  3189  219A  3193   	fcall	_setRF_DimmerLights
 14166                           
 14167                           ;Dimmer_B1.c: 567: setTxData();
 14168  13EF  318D  2571         	fcall	_setTxData
 14169                           
 14170                           ;Dimmer_B1.c: 568: } else {
 14171  13F1  0008               	return
 14172  13F2                     l8863:	
 14173                           
 14174                           ;Dimmer_B1.c: 569: DimmerLights->Status = 0;
 14175  13F2  0877               	movf	_DimmerLights,w
 14176  13F3  0086               	movwf	6
 14177  13F4  3001               	movlw	1	; select bank2/3
 14178  13F5  0087               	movwf	7
 14179  13F6  1281               	bcf	1,5
 14180  13F7  0008               	return
 14181  13F8                     __end_of_setDimmerLights_SwOn:	
 14182                           
 14183                           	psect	text85
 14184  1632                     __ptext85:	
 14185 ;; *************** function _setBuz *****************
 14186 ;; Defined at:
 14187 ;;		line 22 in file "../src/Buzzer_B1.c"
 14188 ;; Parameters:    Size  Location     Type
 14189 ;;  count           1    wreg     unsigned char 
 14190 ;;  time            2    9[BANK0 ] int 
 14191 ;; Auto vars:     Size  Location     Type
 14192 ;;  count           1   12[BANK0 ] unsigned char 
 14193 ;; Return value:  Size  Location     Type
 14194 ;;		None               void
 14195 ;; Registers used:
 14196 ;;		wreg, status,2, status,0, pclath, cstack
 14197 ;; Tracked objects:
 14198 ;;		On entry : 0/0
 14199 ;;		On exit  : 0/0
 14200 ;;		Unchanged: 0/0
 14201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14202 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14204 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14205 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14206 ;;Total ram usage:        4 bytes
 14207 ;; Hardware stack levels used:    1
 14208 ;; Hardware stack levels required when called:    6
 14209 ;; This function calls:
 14210 ;;		___awdiv
 14211 ;; This function is called by:
 14212 ;;		_setDimmerLights_Main
 14213 ;;		_setDimmerLights_SwOn
 14214 ;;		_my_MainTimer
 14215 ;;		_setMain_Exception
 14216 ;;		_setLog_Code
 14217 ;;		_setControl_Lights_Table
 14218 ;;		_setSw_Main
 14219 ;; This function uses a non-reentrant model
 14220 ;;
 14221                           
 14222                           
 14223                           ;psect for function _setBuz
 14224  1632                     _setBuz:	
 14225                           
 14226                           ;incstack = 0
 14227                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 14228                           ;setBuz@count stored from wreg
 14229  1632  0020               	movlb	0	; select bank0
 14230  1633  00AC               	movwf	setBuz@count
 14231                           
 14232                           ;Buzzer_B1.c: 23: time /= 10;
 14233  1634  300A               	movlw	10
 14234  1635  00A0               	movwf	___awdiv@divisor
 14235  1636  3000               	movlw	0
 14236  1637  00A1               	movwf	___awdiv@divisor+1
 14237  1638  082A               	movf	setBuz@time+1,w
 14238  1639  01A3               	clrf	___awdiv@dividend+1
 14239  163A  07A3               	addwf	___awdiv@dividend+1,f
 14240  163B  0829               	movf	setBuz@time,w
 14241  163C  01A2               	clrf	___awdiv@dividend
 14242  163D  07A2               	addwf	___awdiv@dividend,f
 14243  163E  3195  2530  3196   	fcall	___awdiv
 14244  1641  0020               	movlb	0	; select bank0
 14245  1642  0821               	movf	?___awdiv+1,w
 14246  1643  01AA               	clrf	setBuz@time+1
 14247  1644  07AA               	addwf	setBuz@time+1,f
 14248  1645  0820               	movf	?___awdiv,w
 14249  1646  01A9               	clrf	setBuz@time
 14250  1647  07A9               	addwf	setBuz@time,f
 14251                           
 14252                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 14253  1648  0021               	movlb	1	; select bank1
 14254  1649  1C30               	btfss	_Buz1^(0+128),0
 14255  164A  0008               	return
 14256                           
 14257                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 14258  164B  18B0               	btfsc	_Buz1^(0+128),1
 14259  164C  2E63               	goto	l96
 14260                           
 14261                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 14262  164D  14B0               	bsf	_Buz1^(0+128),1
 14263                           
 14264                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 14265  164E  01B1               	clrf	(_Buz1^(0+128)+1)
 14266  164F  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 14267                           
 14268                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 14269  1650  0020               	movlb	0	; select bank0
 14270  1651  082C               	movf	setBuz@count,w
 14271  1652  00AB               	movwf	??_setBuz
 14272  1653  082B               	movf	??_setBuz,w
 14273  1654  0021               	movlb	1	; select bank1
 14274  1655  00B3               	movwf	(_Buz1^(0+128)+3)
 14275                           
 14276                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 14277  1656  0020               	movlb	0	; select bank0
 14278  1657  082A               	movf	setBuz@time+1,w
 14279  1658  0021               	movlb	1	; select bank1
 14280  1659  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 14281  165A  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 14282  165B  0020               	movlb	0	; select bank0
 14283  165C  0829               	movf	setBuz@time,w
 14284  165D  0021               	movlb	1	; select bank1
 14285  165E  01B6               	clrf	(_Buz1^(0+128)+6)
 14286  165F  07B6               	addwf	(_Buz1^(0+128)+6),f
 14287                           
 14288                           ;Buzzer_B1.c: 30: RB3 = 1;
 14289  1660  0020               	movlb	0	; select bank0
 14290  1661  158D               	bsf	13,3	;volatile
 14291                           
 14292                           ;Buzzer_B1.c: 31: } else {
 14293  1662  0008               	return
 14294  1663                     l96:	
 14295                           
 14296                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 14297  1663  19B0               	btfsc	_Buz1^(0+128),3
 14298  1664  2E77               	goto	l98
 14299                           
 14300                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 14301  1665  15B0               	bsf	_Buz1^(0+128),3
 14302                           
 14303                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 14304  1666  0020               	movlb	0	; select bank0
 14305  1667  082C               	movf	setBuz@count,w
 14306  1668  00AB               	movwf	??_setBuz
 14307  1669  082B               	movf	??_setBuz,w
 14308  166A  0021               	movlb	1	; select bank1
 14309  166B  00B4               	movwf	(_Buz1^(0+128)+4)
 14310                           
 14311                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 14312  166C  0020               	movlb	0	; select bank0
 14313  166D  082A               	movf	setBuz@time+1,w
 14314  166E  0021               	movlb	1	; select bank1
 14315  166F  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 14316  1670  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 14317  1671  0020               	movlb	0	; select bank0
 14318  1672  0829               	movf	setBuz@time,w
 14319  1673  0021               	movlb	1	; select bank1
 14320  1674  01B8               	clrf	(_Buz1^(0+128)+8)
 14321  1675  07B8               	addwf	(_Buz1^(0+128)+8),f
 14322                           
 14323                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 14324  1676  0008               	return
 14325  1677                     l98:	
 14326  1677  1A30               	btfsc	_Buz1^(0+128),4
 14327  1678  0008               	return
 14328                           
 14329                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 14330  1679  1630               	bsf	_Buz1^(0+128),4
 14331                           
 14332                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 14333  167A  0020               	movlb	0	; select bank0
 14334  167B  082C               	movf	setBuz@count,w
 14335  167C  00AB               	movwf	??_setBuz
 14336  167D  082B               	movf	??_setBuz,w
 14337  167E  0021               	movlb	1	; select bank1
 14338  167F  00B5               	movwf	(_Buz1^(0+128)+5)
 14339                           
 14340                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 14341  1680  0020               	movlb	0	; select bank0
 14342  1681  082A               	movf	setBuz@time+1,w
 14343  1682  0021               	movlb	1	; select bank1
 14344  1683  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 14345  1684  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 14346  1685  0020               	movlb	0	; select bank0
 14347  1686  0829               	movf	setBuz@time,w
 14348  1687  0021               	movlb	1	; select bank1
 14349  1688  01BA               	clrf	(_Buz1^(0+128)+10)
 14350  1689  07BA               	addwf	(_Buz1^(0+128)+10),f
 14351  168A  0008               	return
 14352  168B                     __end_of_setBuz:	
 14353                           
 14354                           	psect	text86
 14355  1530                     __ptext86:	
 14356 ;; *************** function ___awdiv *****************
 14357 ;; Defined at:
 14358 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14359 ;; Parameters:    Size  Location     Type
 14360 ;;  divisor         2    0[BANK0 ] int 
 14361 ;;  dividend        2    2[BANK0 ] int 
 14362 ;; Auto vars:     Size  Location     Type
 14363 ;;  quotient        2    7[BANK0 ] int 
 14364 ;;  sign            1    6[BANK0 ] unsigned char 
 14365 ;;  counter         1    5[BANK0 ] unsigned char 
 14366 ;; Return value:  Size  Location     Type
 14367 ;;                  2    0[BANK0 ] int 
 14368 ;; Registers used:
 14369 ;;		wreg, status,2, status,0
 14370 ;; Tracked objects:
 14371 ;;		On entry : 0/0
 14372 ;;		On exit  : 0/0
 14373 ;;		Unchanged: 0/0
 14374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14375 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14376 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14377 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14378 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14379 ;;Total ram usage:        9 bytes
 14380 ;; Hardware stack levels used:    1
 14381 ;; Hardware stack levels required when called:    5
 14382 ;; This function calls:
 14383 ;;		Nothing
 14384 ;; This function is called by:
 14385 ;;		_setBuz
 14386 ;; This function uses a non-reentrant model
 14387 ;;
 14388                           
 14389                           
 14390                           ;psect for function ___awdiv
 14391  1530                     ___awdiv:	
 14392                           
 14393                           ;incstack = 0
 14394                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14395  1530  0020               	movlb	0	; select bank0
 14396  1531  01A6               	clrf	___awdiv@sign
 14397  1532  1FA1               	btfss	___awdiv@divisor+1,7
 14398  1533  2D3B               	goto	l8657
 14399  1534  09A0               	comf	___awdiv@divisor,f
 14400  1535  09A1               	comf	___awdiv@divisor+1,f
 14401  1536  0AA0               	incf	___awdiv@divisor,f
 14402  1537  1903               	skipnz
 14403  1538  0AA1               	incf	___awdiv@divisor+1,f
 14404  1539  01A6               	clrf	___awdiv@sign
 14405  153A  0AA6               	incf	___awdiv@sign,f
 14406  153B                     l8657:	
 14407  153B  1FA3               	btfss	___awdiv@dividend+1,7
 14408  153C  2D46               	goto	l8663
 14409  153D  09A2               	comf	___awdiv@dividend,f
 14410  153E  09A3               	comf	___awdiv@dividend+1,f
 14411  153F  0AA2               	incf	___awdiv@dividend,f
 14412  1540  1903               	skipnz
 14413  1541  0AA3               	incf	___awdiv@dividend+1,f
 14414  1542  3001               	movlw	1
 14415  1543  00A4               	movwf	??___awdiv
 14416  1544  0824               	movf	??___awdiv,w
 14417  1545  06A6               	xorwf	___awdiv@sign,f
 14418  1546                     l8663:	
 14419  1546  01A7               	clrf	___awdiv@quotient
 14420  1547  01A8               	clrf	___awdiv@quotient+1
 14421  1548  0821               	movf	___awdiv@divisor+1,w
 14422  1549  0420               	iorwf	___awdiv@divisor,w
 14423  154A  1903               	skipnz
 14424  154B  2D75               	goto	l8685
 14425  154C  01A5               	clrf	___awdiv@counter
 14426  154D  0AA5               	incf	___awdiv@counter,f
 14427  154E                     l8673:	
 14428  154E  1BA1               	btfsc	___awdiv@divisor+1,7
 14429  154F  2D5A               	goto	l8675
 14430  1550  3001               	movlw	1
 14431  1551                     u9115:	
 14432  1551  35A0               	lslf	___awdiv@divisor,f
 14433  1552  0DA1               	rlf	___awdiv@divisor+1,f
 14434  1553  0B89               	decfsz	9,f
 14435  1554  2D51               	goto	u9115
 14436  1555  3001               	movlw	1
 14437  1556  00A4               	movwf	??___awdiv
 14438  1557  0824               	movf	??___awdiv,w
 14439  1558  07A5               	addwf	___awdiv@counter,f
 14440  1559  2D4E               	goto	l8673
 14441  155A                     l8675:	
 14442  155A  3001               	movlw	1
 14443  155B                     u9135:	
 14444  155B  35A7               	lslf	___awdiv@quotient,f
 14445  155C  0DA8               	rlf	___awdiv@quotient+1,f
 14446  155D  0B89               	decfsz	9,f
 14447  155E  2D5B               	goto	u9135
 14448  155F  0821               	movf	___awdiv@divisor+1,w
 14449  1560  0223               	subwf	___awdiv@dividend+1,w
 14450  1561  1D03               	skipz
 14451  1562  2D65               	goto	u9145
 14452  1563  0820               	movf	___awdiv@divisor,w
 14453  1564  0222               	subwf	___awdiv@dividend,w
 14454  1565                     u9145:	
 14455  1565  1C03               	skipc
 14456  1566  2D6C               	goto	l8681
 14457  1567  0820               	movf	___awdiv@divisor,w
 14458  1568  02A2               	subwf	___awdiv@dividend,f
 14459  1569  0821               	movf	___awdiv@divisor+1,w
 14460  156A  3BA3               	subwfb	___awdiv@dividend+1,f
 14461  156B  1427               	bsf	___awdiv@quotient,0
 14462  156C                     l8681:	
 14463  156C  3001               	movlw	1
 14464  156D                     u9155:	
 14465  156D  36A1               	lsrf	___awdiv@divisor+1,f
 14466  156E  0CA0               	rrf	___awdiv@divisor,f
 14467  156F  0B89               	decfsz	9,f
 14468  1570  2D6D               	goto	u9155
 14469  1571  3001               	movlw	1
 14470  1572  02A5               	subwf	___awdiv@counter,f
 14471  1573  1D03               	btfss	3,2
 14472  1574  2D5A               	goto	l8675
 14473  1575                     l8685:	
 14474  1575  0826               	movf	___awdiv@sign,w
 14475  1576  1903               	btfsc	3,2
 14476  1577  2D7D               	goto	l8689
 14477  1578  09A7               	comf	___awdiv@quotient,f
 14478  1579  09A8               	comf	___awdiv@quotient+1,f
 14479  157A  0AA7               	incf	___awdiv@quotient,f
 14480  157B  1903               	skipnz
 14481  157C  0AA8               	incf	___awdiv@quotient+1,f
 14482  157D                     l8689:	
 14483  157D  0828               	movf	___awdiv@quotient+1,w
 14484  157E  01A1               	clrf	?___awdiv+1
 14485  157F  07A1               	addwf	?___awdiv+1,f
 14486  1580  0827               	movf	___awdiv@quotient,w
 14487  1581  01A0               	clrf	?___awdiv
 14488  1582  07A0               	addwf	?___awdiv,f
 14489  1583  0008               	return
 14490  1584                     __end_of___awdiv:	
 14491                           
 14492                           	psect	text87
 14493  1BE8                     __ptext87:	
 14494 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 14495 ;; Defined at:
 14496 ;;		line 539 in file "../src/Dimmer_B1.c"
 14497 ;; Parameters:    Size  Location     Type
 14498 ;;		None
 14499 ;; Auto vars:     Size  Location     Type
 14500 ;;  adjgo           1    1[BANK0 ] unsigned char 
 14501 ;; Return value:  Size  Location     Type
 14502 ;;                  1    wreg      unsigned char 
 14503 ;; Registers used:
 14504 ;;		wreg, status,2
 14505 ;; Tracked objects:
 14506 ;;		On entry : 0/0
 14507 ;;		On exit  : 0/0
 14508 ;;		Unchanged: 0/0
 14509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14512 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14513 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14514 ;;Total ram usage:        3 bytes
 14515 ;; Hardware stack levels used:    1
 14516 ;; Hardware stack levels required when called:    5
 14517 ;; This function calls:
 14518 ;;		Nothing
 14519 ;; This function is called by:
 14520 ;;		_setDimmerLights_SwOn
 14521 ;;		_setDimmerLights_AdjControl
 14522 ;; This function uses a non-reentrant model
 14523 ;;
 14524                           
 14525                           
 14526                           ;psect for function _getAll_DimmerLights_AdjGO
 14527  1BE8                     _getAll_DimmerLights_AdjGO:	
 14528                           
 14529                           ;Dimmer_B1.c: 540: char adjgo = 0;
 14530                           
 14531                           ;incstack = 0
 14532                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 14533  1BE8  0020               	movlb	0	; select bank0
 14534  1BE9  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 14535                           
 14536                           ;Dimmer_B1.c: 545: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 14537  1BEA  01A2               	clrf	_getAll_DimmerLights_AdjGO$2560
 14538  1BEB  0AA2               	incf	_getAll_DimmerLights_AdjGO$2560,f
 14539  1BEC  0023               	movlb	3	; select bank3
 14540  1BED  1DC6               	btfss	(_DimmerLights1^(0+384)+8),3
 14541  1BEE  19D5               	btfsc	(_DimmerLights2^(0+384)+8),3
 14542  1BEF  2BF2               	goto	l8775
 14543  1BF0  0020               	movlb	0	; select bank0
 14544  1BF1  01A2               	clrf	_getAll_DimmerLights_AdjGO$2560
 14545  1BF2                     l8775:	
 14546  1BF2  0020               	movlb	0	; select bank0
 14547  1BF3  0822               	movf	_getAll_DimmerLights_AdjGO$2560,w
 14548  1BF4  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 14549  1BF5  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 14550  1BF6  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 14551                           
 14552                           ;Dimmer_B1.c: 550: return adjgo;
 14553  1BF7  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 14554  1BF8  0008               	return
 14555  1BF9                     __end_of_getAll_DimmerLights_AdjGO:	
 14556                           
 14557                           	psect	text88
 14558  1740                     __ptext88:	
 14559 ;; *************** function _setDimmerLights_SwOff *****************
 14560 ;; Defined at:
 14561 ;;		line 575 in file "../src/Dimmer_B1.c"
 14562 ;; Parameters:    Size  Location     Type
 14563 ;;  sw              1    wreg     unsigned char 
 14564 ;; Auto vars:     Size  Location     Type
 14565 ;;  sw              1   69[BANK0 ] unsigned char 
 14566 ;;  command         1   68[BANK0 ] unsigned char 
 14567 ;; Return value:  Size  Location     Type
 14568 ;;		None               void
 14569 ;; Registers used:
 14570 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14571 ;; Tracked objects:
 14572 ;;		On entry : 0/0
 14573 ;;		On exit  : 0/0
 14574 ;;		Unchanged: 0/0
 14575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14578 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;Total ram usage:        4 bytes
 14581 ;; Hardware stack levels used:    1
 14582 ;; Hardware stack levels required when called:    9
 14583 ;; This function calls:
 14584 ;;		_DimmerLightsPointSelect
 14585 ;;		_setDelayOff_GO
 14586 ;;		_setDimmerLights_Trigger
 14587 ;;		_setDimmerLights_TriggerAdj
 14588 ;;		_setRF_DimmerLights
 14589 ;;		_setTxData
 14590 ;; This function is called by:
 14591 ;;		_DlyOff_Main
 14592 ;;		_setDimmerLights_ErrorClose
 14593 ;;		_setRFSW_Control
 14594 ;;		_setSw_Main
 14595 ;; This function uses a non-reentrant model
 14596 ;;
 14597                           
 14598                           
 14599                           ;psect for function _setDimmerLights_SwOff
 14600  1740                     _setDimmerLights_SwOff:	
 14601                           
 14602                           ;incstack = 0
 14603                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14604                           ;setDimmerLights_SwOff@sw stored from wreg
 14605  1740  0020               	movlb	0	; select bank0
 14606  1741  00E5               	movwf	setDimmerLights_SwOff@sw
 14607                           
 14608                           ;Dimmer_B1.c: 576: DimmerLightsPointSelect(sw);
 14609  1742  0865               	movf	setDimmerLights_SwOff@sw,w
 14610  1743  319C  2475  3197   	fcall	_DimmerLightsPointSelect
 14611                           
 14612                           ;Dimmer_B1.c: 577: char command = DimmerLights->Status == 1 ? 1 : 0;
 14613  1746  0877               	movf	_DimmerLights,w
 14614  1747  0086               	movwf	6
 14615  1748  3001               	movlw	1	; select bank2/3
 14616  1749  0087               	movwf	7
 14617  174A  3000               	movlw	0
 14618  174B  1A81               	btfsc	1,5
 14619  174C  3001               	movlw	1
 14620  174D  0020               	movlb	0	; select bank0
 14621  174E  00E4               	movwf	setDimmerLights_SwOff@command
 14622                           
 14623                           ;Dimmer_B1.c: 578: if (DimmerLights->SwFlag == 1) {
 14624  174F  0877               	movf	_DimmerLights,w
 14625  1750  3E09               	addlw	9
 14626  1751  0086               	movwf	6
 14627  1752  3001               	movlw	1	; select bank2/3
 14628  1753  0087               	movwf	7
 14629  1754  1F01               	btfss	1,6
 14630  1755  0008               	return
 14631                           
 14632                           ;Dimmer_B1.c: 579: DimmerLights->SwFlag = 0;
 14633  1756  0877               	movf	_DimmerLights,w
 14634  1757  3E09               	addlw	9
 14635  1758  0086               	movwf	6
 14636  1759  3001               	movlw	1	; select bank2/3
 14637  175A  0087               	movwf	7
 14638  175B  1301               	bcf	1,6
 14639                           
 14640                           ;Dimmer_B1.c: 580: if (DimmerLights->Status == 1) {
 14641  175C  0877               	movf	_DimmerLights,w
 14642  175D  0086               	movwf	6
 14643  175E  3001               	movlw	1	; select bank2/3
 14644  175F  0087               	movwf	7
 14645  1760  1E81               	btfss	1,5
 14646  1761  2F87               	goto	l8889
 14647                           
 14648                           ;Dimmer_B1.c: 581: if (DimmerLights->SwAdj == 1) {
 14649  1762  0877               	movf	_DimmerLights,w
 14650  1763  3E09               	addlw	9
 14651  1764  0086               	movwf	6
 14652  1765  3001               	movlw	1	; select bank2/3
 14653  1766  0087               	movwf	7
 14654  1767  1F81               	btfss	1,7
 14655  1768  2F93               	goto	l856
 14656                           
 14657                           ;Dimmer_B1.c: 582: DimmerLights->SwAdj = 0;
 14658  1769  0877               	movf	_DimmerLights,w
 14659  176A  3E09               	addlw	9
 14660  176B  0086               	movwf	6
 14661  176C  3001               	movlw	1	; select bank2/3
 14662  176D  0087               	movwf	7
 14663  176E  1381               	bcf	1,7
 14664                           
 14665                           ;Dimmer_B1.c: 583: setDimmerLights_TriggerAdj(sw, 0);
 14666  176F  01A2               	clrf	setDimmerLights_TriggerAdj@command
 14667  1770  0865               	movf	setDimmerLights_SwOff@sw,w
 14668  1771  319E  2630  3197   	fcall	_setDimmerLights_TriggerAdj
 14669                           
 14670                           ;Dimmer_B1.c: 584: product->Data[17]=product->Data[26 + sw];
 14671  1774  0020               	movlb	0	; select bank0
 14672  1775  0865               	movf	setDimmerLights_SwOff@sw,w
 14673  1776  3E1A               	addlw	26
 14674  1777  077B               	addwf	_product,w
 14675  1778  00E2               	movwf	??_setDimmerLights_SwOff
 14676  1779  0862               	movf	??_setDimmerLights_SwOff,w
 14677  177A  0086               	movwf	6
 14678  177B  3002               	movlw	2	; select bank4/5
 14679  177C  0087               	movwf	7
 14680  177D  0801               	movf	1,w
 14681  177E  00E3               	movwf	??_setDimmerLights_SwOff+1
 14682  177F  087B               	movf	_product,w
 14683  1780  3E11               	addlw	17
 14684  1781  0086               	movwf	6
 14685  1782  3002               	movlw	2	; select bank4/5
 14686  1783  0087               	movwf	7
 14687  1784  0863               	movf	??_setDimmerLights_SwOff+1,w
 14688  1785  0081               	movwf	1
 14689                           
 14690                           ;Dimmer_B1.c: 587: }
 14691                           ;Dimmer_B1.c: 588: } else {
 14692  1786  2F93               	goto	l856
 14693  1787                     l8889:	
 14694                           
 14695                           ;Dimmer_B1.c: 589: setDimmerLights_Trigger(sw, 0);
 14696  1787  01A2               	clrf	setDimmerLights_Trigger@command
 14697  1788  0865               	movf	setDimmerLights_SwOff@sw,w
 14698  1789  319D  25F3  3197   	fcall	_setDimmerLights_Trigger
 14699                           
 14700                           ;Dimmer_B1.c: 590: setDelayOff_GO(sw, 0, 0);
 14701  178C  0020               	movlb	0	; select bank0
 14702  178D  01AA               	clrf	setDelayOff_GO@command
 14703  178E  01AB               	clrf	setDelayOff_GO@value
 14704  178F  0865               	movf	setDimmerLights_SwOff@sw,w
 14705  1790  3197  279F  3197   	fcall	_setDelayOff_GO
 14706  1793                     l856:	
 14707                           
 14708                           ;Dimmer_B1.c: 593: }
 14709                           ;Dimmer_B1.c: 594: setRF_DimmerLights(sw, command);
 14710  1793  0020               	movlb	0	; select bank0
 14711  1794  0864               	movf	setDimmerLights_SwOff@command,w
 14712  1795  00E2               	movwf	??_setDimmerLights_SwOff
 14713  1796  0862               	movf	??_setDimmerLights_SwOff,w
 14714  1797  00DD               	movwf	setRF_DimmerLights@on
 14715  1798  0865               	movf	setDimmerLights_SwOff@sw,w
 14716  1799  3189  219A  3197   	fcall	_setRF_DimmerLights
 14717                           
 14718                           ;Dimmer_B1.c: 595: setTxData();
 14719  179C  318D  2571         	fcall	_setTxData
 14720  179E  0008               	return
 14721  179F                     __end_of_setDimmerLights_SwOff:	
 14722                           
 14723                           	psect	text89
 14724  0D71                     __ptext89:	
 14725 ;; *************** function _setTxData *****************
 14726 ;; Defined at:
 14727 ;;		line 207 in file "../src/RF_Control_B1.c"
 14728 ;; Parameters:    Size  Location     Type
 14729 ;;		None
 14730 ;; Auto vars:     Size  Location     Type
 14731 ;;  i               1    0        unsigned char 
 14732 ;; Return value:  Size  Location     Type
 14733 ;;		None               void
 14734 ;; Registers used:
 14735 ;;		wreg, fsr1l, fsr1h
 14736 ;; Tracked objects:
 14737 ;;		On entry : 0/0
 14738 ;;		On exit  : 0/0
 14739 ;;		Unchanged: 0/0
 14740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14743 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14744 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14745 ;;Total ram usage:        1 bytes
 14746 ;; Hardware stack levels used:    1
 14747 ;; Hardware stack levels required when called:    5
 14748 ;; This function calls:
 14749 ;;		Nothing
 14750 ;; This function is called by:
 14751 ;;		_setDimmerLights_SwOn
 14752 ;;		_setDimmerLights_SwOff
 14753 ;;		_setDimmerLights_Adj
 14754 ;;		_my_MainTimer
 14755 ;;		_setControl_Lights_Table
 14756 ;;		_setRFSW_AdjControl
 14757 ;; This function uses a non-reentrant model
 14758 ;;
 14759                           
 14760                           
 14761                           ;psect for function _setTxData
 14762  0D71                     _setTxData:	
 14763                           
 14764                           ;RF_Control_B1.c: 208: char i;
 14765                           ;RF_Control_B1.c: 209: if (RF1.Enable == 1) {
 14766                           
 14767                           ;incstack = 0
 14768                           ; Regs used in _setTxData: [wregfsr1]
 14769  0D71  0021               	movlb	1	; select bank1
 14770  0D72  1C3C               	btfss	_RF1^(0+128),0
 14771  0D73  0008               	return
 14772                           
 14773                           ;RF_Control_B1.c: 211: RF1.TransceiveGO = 1;
 14774  0D74  153C               	bsf	_RF1^(0+128),2
 14775                           
 14776                           ;RF_Control_B1.c: 212: RF1.RunTime = 20;
 14777  0D75  3014               	movlw	20
 14778  0D76  00C3               	movwf	(_RF1^(0+128)+7)
 14779  0D77  3000               	movlw	0
 14780  0D78  00C4               	movwf	(_RF1^(0+128)+8)
 14781                           
 14782                           ;RF_Control_B1.c: 221: RF_Data[0] = 0x63;
 14783  0D79  3063               	movlw	99
 14784  0D7A  0020               	movlb	0	; select bank0
 14785  0D7B  00A0               	movwf	??_setTxData
 14786  0D7C  0820               	movf	??_setTxData,w
 14787  0D7D  0023               	movlb	3	; select bank3
 14788  0D7E  00A0               	movwf	_RF_Data^(0+384)
 14789                           
 14790                           ;RF_Control_B1.c: 222: RF_Data[1] = 0x02;
 14791  0D7F  3002               	movlw	2
 14792  0D80  0020               	movlb	0	; select bank0
 14793  0D81  00A0               	movwf	??_setTxData
 14794  0D82  0820               	movf	??_setTxData,w
 14795  0D83  0023               	movlb	3	; select bank3
 14796  0D84  00A1               	movwf	(_RF_Data^(0+384)+1)
 14797                           
 14798                           ;RF_Control_B1.c: 223: RF_Data[2] = product->Data[2];
 14799  0D85  087B               	movf	_product,w
 14800  0D86  0086               	movwf	6
 14801  0D87  3002               	movlw	2	; select bank4/5
 14802  0D88  0087               	movwf	7
 14803  0D89  3002               	movlw	2	; select bank4/5
 14804  0D8A  3F42               	moviw [2]fsr1
 14805  0D8B  00A2               	movwf	(_RF_Data^(0+384)+2)
 14806                           
 14807                           ;RF_Control_B1.c: 224: RF_Data[3] = product->Data[3];
 14808  0D8C  087B               	movf	_product,w
 14809  0D8D  0086               	movwf	6
 14810  0D8E  3002               	movlw	2	; select bank4/5
 14811  0D8F  0087               	movwf	7
 14812  0D90  3002               	movlw	2	; select bank4/5
 14813  0D91  3F43               	moviw [3]fsr1
 14814  0D92  00A3               	movwf	(_RF_Data^(0+384)+3)
 14815                           
 14816                           ;RF_Control_B1.c: 225: RF_Data[4] = product->Data[4];
 14817  0D93  087B               	movf	_product,w
 14818  0D94  0086               	movwf	6
 14819  0D95  3002               	movlw	2	; select bank4/5
 14820  0D96  0087               	movwf	7
 14821  0D97  3002               	movlw	2	; select bank4/5
 14822  0D98  3F44               	moviw [4]fsr1
 14823  0D99  00A4               	movwf	(_RF_Data^(0+384)+4)
 14824                           
 14825                           ;RF_Control_B1.c: 226: RF_Data[5] = product->Data[5];
 14826  0D9A  087B               	movf	_product,w
 14827  0D9B  0086               	movwf	6
 14828  0D9C  3002               	movlw	2	; select bank4/5
 14829  0D9D  0087               	movwf	7
 14830  0D9E  3002               	movlw	2	; select bank4/5
 14831  0D9F  3F45               	moviw [5]fsr1
 14832  0DA0  00A5               	movwf	(_RF_Data^(0+384)+5)
 14833                           
 14834                           ;RF_Control_B1.c: 227: RF_Data[6] = product->Data[6];
 14835  0DA1  087B               	movf	_product,w
 14836  0DA2  0086               	movwf	6
 14837  0DA3  3002               	movlw	2	; select bank4/5
 14838  0DA4  0087               	movwf	7
 14839  0DA5  3002               	movlw	2	; select bank4/5
 14840  0DA6  3F46               	moviw [6]fsr1
 14841  0DA7  00A6               	movwf	(_RF_Data^(0+384)+6)
 14842                           
 14843                           ;RF_Control_B1.c: 228: RF_Data[7] = product->Data[7];
 14844  0DA8  087B               	movf	_product,w
 14845  0DA9  0086               	movwf	6
 14846  0DAA  3002               	movlw	2	; select bank4/5
 14847  0DAB  0087               	movwf	7
 14848  0DAC  3002               	movlw	2	; select bank4/5
 14849  0DAD  3F47               	moviw [7]fsr1
 14850  0DAE  00A7               	movwf	(_RF_Data^(0+384)+7)
 14851                           
 14852                           ;RF_Control_B1.c: 229: RF_Data[8] = product->Data[8];
 14853  0DAF  087B               	movf	_product,w
 14854  0DB0  0086               	movwf	6
 14855  0DB1  3002               	movlw	2	; select bank4/5
 14856  0DB2  0087               	movwf	7
 14857  0DB3  3002               	movlw	2	; select bank4/5
 14858  0DB4  3F48               	moviw [8]fsr1
 14859  0DB5  00A8               	movwf	(_RF_Data^(0+384)+8)
 14860                           
 14861                           ;RF_Control_B1.c: 230: RF_Data[9] = product->Data[9];
 14862  0DB6  087B               	movf	_product,w
 14863  0DB7  0086               	movwf	6
 14864  0DB8  3002               	movlw	2	; select bank4/5
 14865  0DB9  0087               	movwf	7
 14866  0DBA  3002               	movlw	2	; select bank4/5
 14867  0DBB  3F49               	moviw [9]fsr1
 14868  0DBC  00A9               	movwf	(_RF_Data^(0+384)+9)
 14869                           
 14870                           ;RF_Control_B1.c: 231: RF_Data[10] = product->Data[10];
 14871  0DBD  087B               	movf	_product,w
 14872  0DBE  0086               	movwf	6
 14873  0DBF  3002               	movlw	2	; select bank4/5
 14874  0DC0  0087               	movwf	7
 14875  0DC1  3002               	movlw	2	; select bank4/5
 14876  0DC2  3F4A               	moviw [10]fsr1
 14877  0DC3  00AA               	movwf	(_RF_Data^(0+384)+10)
 14878                           
 14879                           ;RF_Control_B1.c: 232: RF_Data[11] = product->Data[11];
 14880  0DC4  087B               	movf	_product,w
 14881  0DC5  0086               	movwf	6
 14882  0DC6  3002               	movlw	2	; select bank4/5
 14883  0DC7  0087               	movwf	7
 14884  0DC8  3002               	movlw	2	; select bank4/5
 14885  0DC9  3F4B               	moviw [11]fsr1
 14886  0DCA  00AB               	movwf	(_RF_Data^(0+384)+11)
 14887                           
 14888                           ;RF_Control_B1.c: 233: RF_Data[12] = product->Data[12];
 14889  0DCB  087B               	movf	_product,w
 14890  0DCC  0086               	movwf	6
 14891  0DCD  3002               	movlw	2	; select bank4/5
 14892  0DCE  0087               	movwf	7
 14893  0DCF  3002               	movlw	2	; select bank4/5
 14894  0DD0  3F4C               	moviw [12]fsr1
 14895  0DD1  00AC               	movwf	(_RF_Data^(0+384)+12)
 14896                           
 14897                           ;RF_Control_B1.c: 234: RF_Data[13] = product->Data[13];
 14898  0DD2  087B               	movf	_product,w
 14899  0DD3  0086               	movwf	6
 14900  0DD4  3002               	movlw	2	; select bank4/5
 14901  0DD5  0087               	movwf	7
 14902  0DD6  3002               	movlw	2	; select bank4/5
 14903  0DD7  3F4D               	moviw [13]fsr1
 14904  0DD8  00AD               	movwf	(_RF_Data^(0+384)+13)
 14905                           
 14906                           ;RF_Control_B1.c: 235: RF_Data[14] = product->Data[14];
 14907  0DD9  087B               	movf	_product,w
 14908  0DDA  0086               	movwf	6
 14909  0DDB  3002               	movlw	2	; select bank4/5
 14910  0DDC  0087               	movwf	7
 14911  0DDD  3002               	movlw	2	; select bank4/5
 14912  0DDE  3F4E               	moviw [14]fsr1
 14913  0DDF  00AE               	movwf	(_RF_Data^(0+384)+14)
 14914                           
 14915                           ;RF_Control_B1.c: 236: RF_Data[15] = product->Data[15];
 14916  0DE0  087B               	movf	_product,w
 14917  0DE1  0086               	movwf	6
 14918  0DE2  3002               	movlw	2	; select bank4/5
 14919  0DE3  0087               	movwf	7
 14920  0DE4  3002               	movlw	2	; select bank4/5
 14921  0DE5  3F4F               	moviw [15]fsr1
 14922  0DE6  00AF               	movwf	(_RF_Data^(0+384)+15)
 14923                           
 14924                           ;RF_Control_B1.c: 237: RF_Data[16] = product->Data[16];
 14925  0DE7  087B               	movf	_product,w
 14926  0DE8  0086               	movwf	6
 14927  0DE9  3002               	movlw	2	; select bank4/5
 14928  0DEA  0087               	movwf	7
 14929  0DEB  3002               	movlw	2	; select bank4/5
 14930  0DEC  3F50               	moviw [16]fsr1
 14931  0DED  00B0               	movwf	(_RF_Data^(0+384)+16)
 14932                           
 14933                           ;RF_Control_B1.c: 238: RF_Data[17] = product->Data[17];
 14934  0DEE  087B               	movf	_product,w
 14935  0DEF  0086               	movwf	6
 14936  0DF0  3002               	movlw	2	; select bank4/5
 14937  0DF1  0087               	movwf	7
 14938  0DF2  3002               	movlw	2	; select bank4/5
 14939  0DF3  3F51               	moviw [17]fsr1
 14940  0DF4  00B1               	movwf	(_RF_Data^(0+384)+17)
 14941                           
 14942                           ;RF_Control_B1.c: 239: RF_Data[18] = product->Data[18];
 14943  0DF5  087B               	movf	_product,w
 14944  0DF6  0086               	movwf	6
 14945  0DF7  3002               	movlw	2	; select bank4/5
 14946  0DF8  0087               	movwf	7
 14947  0DF9  3002               	movlw	2	; select bank4/5
 14948  0DFA  3F52               	moviw [18]fsr1
 14949  0DFB  00B2               	movwf	(_RF_Data^(0+384)+18)
 14950                           
 14951                           ;RF_Control_B1.c: 240: RF_Data[19] = product->Data[19];
 14952  0DFC  087B               	movf	_product,w
 14953  0DFD  0086               	movwf	6
 14954  0DFE  3002               	movlw	2	; select bank4/5
 14955  0DFF  0087               	movwf	7
 14956  0E00  3002               	movlw	2	; select bank4/5
 14957  0E01  3F53               	moviw [19]fsr1
 14958  0E02  00B3               	movwf	(_RF_Data^(0+384)+19)
 14959                           
 14960                           ;RF_Control_B1.c: 241: RF_Data[20] = 210;
 14961  0E03  30D2               	movlw	210
 14962  0E04  0020               	movlb	0	; select bank0
 14963  0E05  00A0               	movwf	??_setTxData
 14964  0E06  0820               	movf	??_setTxData,w
 14965  0E07  0023               	movlb	3	; select bank3
 14966  0E08  00B4               	movwf	(_RF_Data^(0+384)+20)
 14967  0E09  0008               	return
 14968  0E0A                     __end_of_setTxData:	
 14969                           
 14970                           	psect	text90
 14971  099A                     __ptext90:	
 14972 ;; *************** function _setRF_DimmerLights *****************
 14973 ;; Defined at:
 14974 ;;		line 528 in file "../src/RF_Control_B1.c"
 14975 ;; Parameters:    Size  Location     Type
 14976 ;;  lights          1    wreg     unsigned char 
 14977 ;;  on              1   61[BANK0 ] unsigned char 
 14978 ;; Auto vars:     Size  Location     Type
 14979 ;;  lights          1   65[BANK0 ] unsigned char 
 14980 ;;  status          1   64[BANK0 ] unsigned char 
 14981 ;; Return value:  Size  Location     Type
 14982 ;;		None               void
 14983 ;; Registers used:
 14984 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14985 ;; Tracked objects:
 14986 ;;		On entry : 0/0
 14987 ;;		On exit  : 0/0
 14988 ;;		Unchanged: 0/0
 14989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14990 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14993 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14994 ;;Total ram usage:        5 bytes
 14995 ;; Hardware stack levels used:    1
 14996 ;; Hardware stack levels required when called:    8
 14997 ;; This function calls:
 14998 ;;		_setPercentValue
 14999 ;; This function is called by:
 15000 ;;		_DlyOff_Main
 15001 ;;		_setDimmerLights_SwOn
 15002 ;;		_setDimmerLights_SwOff
 15003 ;;		_setDimmerLights_Adj
 15004 ;;		_setRFSW_Control
 15005 ;; This function uses a non-reentrant model
 15006 ;;
 15007                           
 15008                           
 15009                           ;psect for function _setRF_DimmerLights
 15010  099A                     _setRF_DimmerLights:	
 15011                           
 15012                           ;incstack = 0
 15013                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15014                           ;setRF_DimmerLights@lights stored from wreg
 15015  099A  0020               	movlb	0	; select bank0
 15016  099B  00E1               	movwf	setRF_DimmerLights@lights
 15017                           
 15018                           ;RF_Control_B1.c: 529: char status = 1;
 15019  099C  01E0               	clrf	setRF_DimmerLights@status
 15020  099D  0AE0               	incf	setRF_DimmerLights@status,f
 15021                           
 15022                           ;RF_Control_B1.c: 530: status <<= (lights - 1);
 15023  099E  0861               	movf	setRF_DimmerLights@lights,w
 15024  099F  3EFF               	addlw	-1
 15025  09A0  0A89               	incf	9,f
 15026  09A1  29A4               	goto	u9220
 15027  09A2                     u9225:	
 15028  09A2  1003               	clrc
 15029  09A3  0DE0               	rlf	setRF_DimmerLights@status,f
 15030  09A4                     u9220:	
 15031  09A4  3EFF               	addlw	-1
 15032  09A5  1D03               	skipz
 15033  09A6  29A2               	goto	u9225
 15034                           
 15035                           ;RF_Control_B1.c: 531: product->Data[11]=lights;
 15036  09A7  0861               	movf	setRF_DimmerLights@lights,w
 15037  09A8  00DE               	movwf	??_setRF_DimmerLights
 15038  09A9  087B               	movf	_product,w
 15039  09AA  3E0B               	addlw	11
 15040  09AB  0086               	movwf	6
 15041  09AC  3002               	movlw	2	; select bank4/5
 15042  09AD  0087               	movwf	7
 15043  09AE  085E               	movf	??_setRF_DimmerLights,w
 15044  09AF  0081               	movwf	1
 15045                           
 15046                           ;RF_Control_B1.c: 534: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 15047  09B0  3020               	movlw	32
 15048  09B1  3193  236C  3189   	fcall	_setPercentValue
 15049  09B4  0020               	movlb	0	; select bank0
 15050  09B5  00DE               	movwf	??_setRF_DimmerLights
 15051  09B6  0861               	movf	setRF_DimmerLights@lights,w
 15052  09B7  3E14               	addlw	20
 15053  09B8  077B               	addwf	_product,w
 15054  09B9  00DF               	movwf	??_setRF_DimmerLights+1
 15055  09BA  085F               	movf	??_setRF_DimmerLights+1,w
 15056  09BB  0086               	movwf	6
 15057  09BC  3002               	movlw	2	; select bank4/5
 15058  09BD  0087               	movwf	7
 15059  09BE  085E               	movf	??_setRF_DimmerLights,w
 15060  09BF  0081               	movwf	1
 15061                           
 15062                           ;RF_Control_B1.c: 537: product->Data[9]=product->Data[20 + lights];
 15063  09C0  0861               	movf	setRF_DimmerLights@lights,w
 15064  09C1  3E14               	addlw	20
 15065  09C2  077B               	addwf	_product,w
 15066  09C3  00DE               	movwf	??_setRF_DimmerLights
 15067  09C4  085E               	movf	??_setRF_DimmerLights,w
 15068  09C5  0086               	movwf	6
 15069  09C6  3002               	movlw	2	; select bank4/5
 15070  09C7  0087               	movwf	7
 15071  09C8  0801               	movf	1,w
 15072  09C9  00DF               	movwf	??_setRF_DimmerLights+1
 15073  09CA  087B               	movf	_product,w
 15074  09CB  3E09               	addlw	9
 15075  09CC  0086               	movwf	6
 15076  09CD  3002               	movlw	2	; select bank4/5
 15077  09CE  0087               	movwf	7
 15078  09CF  085F               	movf	??_setRF_DimmerLights+1,w
 15079  09D0  0081               	movwf	1
 15080                           
 15081                           ;RF_Control_B1.c: 538: product->Data[17]=product->Data[26 + lights];
 15082  09D1  0861               	movf	setRF_DimmerLights@lights,w
 15083  09D2  3E1A               	addlw	26
 15084  09D3  077B               	addwf	_product,w
 15085  09D4  00DE               	movwf	??_setRF_DimmerLights
 15086  09D5  085E               	movf	??_setRF_DimmerLights,w
 15087  09D6  0086               	movwf	6
 15088  09D7  3002               	movlw	2	; select bank4/5
 15089  09D8  0087               	movwf	7
 15090  09D9  0801               	movf	1,w
 15091  09DA  00DF               	movwf	??_setRF_DimmerLights+1
 15092  09DB  087B               	movf	_product,w
 15093  09DC  3E11               	addlw	17
 15094  09DD  0086               	movwf	6
 15095  09DE  3002               	movlw	2	; select bank4/5
 15096  09DF  0087               	movwf	7
 15097  09E0  085F               	movf	??_setRF_DimmerLights+1,w
 15098  09E1  0081               	movwf	1
 15099                           
 15100                           ;RF_Control_B1.c: 539: if (on == 1) {
 15101  09E2  085D               	movf	setRF_DimmerLights@on,w
 15102  09E3  3A01               	xorlw	1
 15103  09E4  1D03               	skipz
 15104  09E5  29F6               	goto	l8737
 15105                           
 15106                           ;RF_Control_B1.c: 540: product->Data[15]=(product->Data[15] | status);
 15107  09E6  087B               	movf	_product,w
 15108  09E7  3E0F               	addlw	15
 15109  09E8  0086               	movwf	6
 15110  09E9  3002               	movlw	2	; select bank4/5
 15111  09EA  0087               	movwf	7
 15112  09EB  0801               	movf	1,w
 15113  09EC  0460               	iorwf	setRF_DimmerLights@status,w
 15114  09ED  00DE               	movwf	??_setRF_DimmerLights
 15115  09EE  087B               	movf	_product,w
 15116  09EF  3E0F               	addlw	15
 15117  09F0  0086               	movwf	6
 15118  09F1  3002               	movlw	2	; select bank4/5
 15119  09F2  0087               	movwf	7
 15120  09F3  085E               	movf	??_setRF_DimmerLights,w
 15121  09F4  0081               	movwf	1
 15122                           
 15123                           ;RF_Control_B1.c: 541: } else {
 15124  09F5  0008               	return
 15125  09F6                     l8737:	
 15126                           
 15127                           ;RF_Control_B1.c: 542: product->Data[15]=(product->Data[15]&(~status));
 15128  09F6  087B               	movf	_product,w
 15129  09F7  3E0F               	addlw	15
 15130  09F8  0086               	movwf	6
 15131  09F9  3002               	movlw	2	; select bank4/5
 15132  09FA  0087               	movwf	7
 15133  09FB  0960               	comf	setRF_DimmerLights@status,w
 15134  09FC  0501               	andwf	1,w
 15135  09FD  00DE               	movwf	??_setRF_DimmerLights
 15136  09FE  087B               	movf	_product,w
 15137  09FF  3E0F               	addlw	15
 15138  0A00  0086               	movwf	6
 15139  0A01  3002               	movlw	2	; select bank4/5
 15140  0A02  0087               	movwf	7
 15141  0A03  085E               	movf	??_setRF_DimmerLights,w
 15142  0A04  0081               	movwf	1
 15143  0A05  0008               	return
 15144  0A06                     __end_of_setRF_DimmerLights:	
 15145                           
 15146                           	psect	text91
 15147  136C                     __ptext91:	
 15148 ;; *************** function _setPercentValue *****************
 15149 ;; Defined at:
 15150 ;;		line 902 in file "../src/Dimmer_B1.c"
 15151 ;; Parameters:    Size  Location     Type
 15152 ;;  value           1    wreg     unsigned char 
 15153 ;; Auto vars:     Size  Location     Type
 15154 ;;  value           1   57[BANK0 ] unsigned char 
 15155 ;;  i               3   58[BANK0 ] float 
 15156 ;; Return value:  Size  Location     Type
 15157 ;;                  1    wreg      unsigned char 
 15158 ;; Registers used:
 15159 ;;		wreg, status,2, status,0, pclath, cstack
 15160 ;; Tracked objects:
 15161 ;;		On entry : 0/0
 15162 ;;		On exit  : 0/0
 15163 ;;		Unchanged: 0/0
 15164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15168 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15169 ;;Total ram usage:        4 bytes
 15170 ;; Hardware stack levels used:    1
 15171 ;; Hardware stack levels required when called:    7
 15172 ;; This function calls:
 15173 ;;		___awtoft
 15174 ;;		___ftdiv
 15175 ;;		___fttol
 15176 ;; This function is called by:
 15177 ;;		_Flash_Memory_Initialization
 15178 ;;		_setRF_DimmerLights
 15179 ;; This function uses a non-reentrant model
 15180 ;;
 15181                           
 15182                           
 15183                           ;psect for function _setPercentValue
 15184  136C                     _setPercentValue:	
 15185                           
 15186                           ;incstack = 0
 15187                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15188                           ;setPercentValue@value stored from wreg
 15189  136C  0020               	movlb	0	; select bank0
 15190  136D  00D9               	movwf	setPercentValue@value
 15191                           
 15192                           ;Dimmer_B1.c: 904: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 15193  136E  3000               	movlw	0
 15194  136F  00DA               	movwf	setPercentValue@i
 15195  1370  30E0               	movlw	224
 15196  1371  00DB               	movwf	setPercentValue@i+1
 15197  1372  3041               	movlw	65
 15198  1373  00DC               	movwf	setPercentValue@i+2
 15199                           
 15200                           ;Dimmer_B1.c: 905: i /= 100;
 15201  1374  3000               	movlw	0
 15202  1375  00AE               	movwf	___ftdiv@f2
 15203  1376  30C8               	movlw	200
 15204  1377  00AF               	movwf	___ftdiv@f2+1
 15205  1378  3042               	movlw	66
 15206  1379  00B0               	movwf	___ftdiv@f2+2
 15207  137A  085A               	movf	setPercentValue@i,w
 15208  137B  00B1               	movwf	___ftdiv@f1
 15209  137C  085B               	movf	setPercentValue@i+1,w
 15210  137D  00B2               	movwf	___ftdiv@f1+1
 15211  137E  085C               	movf	setPercentValue@i+2,w
 15212  137F  00B3               	movwf	___ftdiv@f1+2
 15213  1380  318E  26A3  3193   	fcall	___ftdiv
 15214  1383  0020               	movlb	0	; select bank0
 15215  1384  082E               	movf	?___ftdiv,w
 15216  1385  00DA               	movwf	setPercentValue@i
 15217  1386  082F               	movf	?___ftdiv+1,w
 15218  1387  00DB               	movwf	setPercentValue@i+1
 15219  1388  0830               	movf	?___ftdiv+2,w
 15220  1389  00DC               	movwf	setPercentValue@i+2
 15221                           
 15222                           ;Dimmer_B1.c: 906: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 15223  138A  0859               	movf	setPercentValue@value,w
 15224  138B  3EE0               	addlw	224
 15225  138C  00A8               	movwf	___awtoft@c
 15226  138D  30FF               	movlw	255
 15227  138E  1803               	skipnc
 15228  138F  3000               	movlw	0
 15229  1390  00A9               	movwf	___awtoft@c+1
 15230  1391  319E  2690  3193   	fcall	___awtoft
 15231  1394  0020               	movlb	0	; select bank0
 15232  1395  0828               	movf	?___awtoft,w
 15233  1396  00B1               	movwf	___ftdiv@f1
 15234  1397  0829               	movf	?___awtoft+1,w
 15235  1398  00B2               	movwf	___ftdiv@f1+1
 15236  1399  082A               	movf	?___awtoft+2,w
 15237  139A  00B3               	movwf	___ftdiv@f1+2
 15238  139B  085A               	movf	setPercentValue@i,w
 15239  139C  00AE               	movwf	___ftdiv@f2
 15240  139D  085B               	movf	setPercentValue@i+1,w
 15241  139E  00AF               	movwf	___ftdiv@f2+1
 15242  139F  085C               	movf	setPercentValue@i+2,w
 15243  13A0  00B0               	movwf	___ftdiv@f2+2
 15244  13A1  318E  26A3  3193   	fcall	___ftdiv
 15245  13A4  0020               	movlb	0	; select bank0
 15246  13A5  082E               	movf	?___ftdiv,w
 15247  13A6  00CB               	movwf	___fttol@f1
 15248  13A7  082F               	movf	?___ftdiv+1,w
 15249  13A8  00CC               	movwf	___fttol@f1+1
 15250  13A9  0830               	movf	?___ftdiv+2,w
 15251  13AA  00CD               	movwf	___fttol@f1+2
 15252  13AB  318C  2456         	fcall	___fttol
 15253  13AD  0020               	movlb	0	; select bank0
 15254  13AE  034B               	decf	?___fttol,w
 15255  13AF  3AFF               	xorlw	255
 15256  13B0  3E64               	addlw	100
 15257  13B1  0008               	return
 15258  13B2                     __end_of_setPercentValue:	
 15259                           
 15260                           	psect	text92
 15261  0C56                     __ptext92:	
 15262 ;; *************** function ___fttol *****************
 15263 ;; Defined at:
 15264 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15265 ;; Parameters:    Size  Location     Type
 15266 ;;  f1              3   43[BANK0 ] float 
 15267 ;; Auto vars:     Size  Location     Type
 15268 ;;  lval            4   52[BANK0 ] unsigned long 
 15269 ;;  exp1            1   56[BANK0 ] unsigned char 
 15270 ;;  sign1           1   51[BANK0 ] unsigned char 
 15271 ;; Return value:  Size  Location     Type
 15272 ;;                  4   43[BANK0 ] long 
 15273 ;; Registers used:
 15274 ;;		wreg, status,2, status,0
 15275 ;; Tracked objects:
 15276 ;;		On entry : 0/0
 15277 ;;		On exit  : 0/0
 15278 ;;		Unchanged: 0/0
 15279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15280 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15281 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15282 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15283 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15284 ;;Total ram usage:       14 bytes
 15285 ;; Hardware stack levels used:    1
 15286 ;; Hardware stack levels required when called:    5
 15287 ;; This function calls:
 15288 ;;		Nothing
 15289 ;; This function is called by:
 15290 ;;		_getPercentValue
 15291 ;;		_setPercentValue
 15292 ;; This function uses a non-reentrant model
 15293 ;;
 15294                           
 15295                           
 15296                           ;psect for function ___fttol
 15297  0C56                     ___fttol:	
 15298                           
 15299                           ;incstack = 0
 15300                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15301  0C56  0020               	movlb	0	; select bank0
 15302  0C57  084B               	movf	___fttol@f1,w
 15303  0C58  00CF               	movwf	??___fttol
 15304  0C59  084C               	movf	___fttol@f1+1,w
 15305  0C5A  00D0               	movwf	??___fttol+1
 15306  0C5B  084D               	movf	___fttol@f1+2,w
 15307  0C5C  00D1               	movwf	??___fttol+2
 15308  0C5D  1003               	clrc
 15309  0C5E  0D50               	rlf	??___fttol+1,w
 15310  0C5F  0D51               	rlf	??___fttol+2,w
 15311  0C60  00D2               	movwf	??___fttol+3
 15312  0C61  0852               	movf	??___fttol+3,w
 15313  0C62  00D8               	movwf	___fttol@exp1
 15314  0C63  08D8               	movf	___fttol@exp1,f
 15315  0C64  1D03               	skipz
 15316  0C65  2C6F               	goto	l8565
 15317  0C66  3000               	movlw	0
 15318  0C67  00CE               	movwf	?___fttol+3
 15319  0C68  3000               	movlw	0
 15320  0C69  00CD               	movwf	?___fttol+2
 15321  0C6A  3000               	movlw	0
 15322  0C6B  00CC               	movwf	?___fttol+1
 15323  0C6C  3000               	movlw	0
 15324  0C6D  00CB               	movwf	?___fttol
 15325  0C6E  0008               	return
 15326  0C6F                     l8565:	
 15327  0C6F  084B               	movf	___fttol@f1,w
 15328  0C70  00CF               	movwf	??___fttol
 15329  0C71  084C               	movf	___fttol@f1+1,w
 15330  0C72  00D0               	movwf	??___fttol+1
 15331  0C73  084D               	movf	___fttol@f1+2,w
 15332  0C74  00D1               	movwf	??___fttol+2
 15333  0C75  3017               	movlw	23
 15334  0C76                     u8935:	
 15335  0C76  36D1               	lsrf	??___fttol+2,f
 15336  0C77  0CD0               	rrf	??___fttol+1,f
 15337  0C78  0CCF               	rrf	??___fttol,f
 15338  0C79  0B89               	decfsz	9,f
 15339  0C7A  2C76               	goto	u8935
 15340  0C7B  084F               	movf	??___fttol,w
 15341  0C7C  00D2               	movwf	??___fttol+3
 15342  0C7D  0852               	movf	??___fttol+3,w
 15343  0C7E  00D3               	movwf	___fttol@sign1
 15344  0C7F  17CC               	bsf	___fttol@f1+1,7
 15345  0C80  30FF               	movlw	255
 15346  0C81  05CB               	andwf	___fttol@f1,f
 15347  0C82  30FF               	movlw	255
 15348  0C83  05CC               	andwf	___fttol@f1+1,f
 15349  0C84  3000               	movlw	0
 15350  0C85  05CD               	andwf	___fttol@f1+2,f
 15351  0C86  084B               	movf	___fttol@f1,w
 15352  0C87  00D4               	movwf	___fttol@lval
 15353  0C88  084C               	movf	___fttol@f1+1,w
 15354  0C89  00D5               	movwf	___fttol@lval+1
 15355  0C8A  084D               	movf	___fttol@f1+2,w
 15356  0C8B  00D6               	movwf	___fttol@lval+2
 15357  0C8C  01D7               	clrf	___fttol@lval+3
 15358  0C8D  308E               	movlw	142
 15359  0C8E  02D8               	subwf	___fttol@exp1,f
 15360  0C8F  1FD8               	btfss	___fttol@exp1,7
 15361  0C90  2CAD               	goto	l8585
 15362  0C91  0858               	movf	___fttol@exp1,w
 15363  0C92  3A80               	xorlw	128
 15364  0C93  3E8F               	addlw	143
 15365  0C94  1803               	skipnc
 15366  0C95  2C9F               	goto	l8583
 15367  0C96  3000               	movlw	0
 15368  0C97  00CE               	movwf	?___fttol+3
 15369  0C98  3000               	movlw	0
 15370  0C99  00CD               	movwf	?___fttol+2
 15371  0C9A  3000               	movlw	0
 15372  0C9B  00CC               	movwf	?___fttol+1
 15373  0C9C  3000               	movlw	0
 15374  0C9D  00CB               	movwf	?___fttol
 15375  0C9E  0008               	return
 15376  0C9F                     l8583:	
 15377  0C9F  3001               	movlw	1
 15378  0CA0                     u8965:	
 15379  0CA0  36D7               	lsrf	___fttol@lval+3,f
 15380  0CA1  0CD6               	rrf	___fttol@lval+2,f
 15381  0CA2  0CD5               	rrf	___fttol@lval+1,f
 15382  0CA3  0CD4               	rrf	___fttol@lval,f
 15383  0CA4  0B89               	decfsz	9,f
 15384  0CA5  2CA0               	goto	u8965
 15385  0CA6  3001               	movlw	1
 15386  0CA7  00CF               	movwf	??___fttol
 15387  0CA8  084F               	movf	??___fttol,w
 15388  0CA9  07D8               	addwf	___fttol@exp1,f
 15389  0CAA  1903               	btfsc	3,2
 15390  0CAB  2CC6               	goto	l8595
 15391  0CAC  2C9F               	goto	l8583
 15392  0CAD                     l8585:	
 15393  0CAD  3018               	movlw	24
 15394  0CAE  0258               	subwf	___fttol@exp1,w
 15395  0CAF  1C03               	skipc
 15396  0CB0  2CC3               	goto	l8593
 15397  0CB1  3000               	movlw	0
 15398  0CB2  00CE               	movwf	?___fttol+3
 15399  0CB3  3000               	movlw	0
 15400  0CB4  00CD               	movwf	?___fttol+2
 15401  0CB5  3000               	movlw	0
 15402  0CB6  00CC               	movwf	?___fttol+1
 15403  0CB7  3000               	movlw	0
 15404  0CB8  00CB               	movwf	?___fttol
 15405  0CB9  0008               	return
 15406  0CBA                     l8591:	
 15407  0CBA  3001               	movlw	1
 15408  0CBB                     u8995:	
 15409  0CBB  35D4               	lslf	___fttol@lval,f
 15410  0CBC  0DD5               	rlf	___fttol@lval+1,f
 15411  0CBD  0DD6               	rlf	___fttol@lval+2,f
 15412  0CBE  0DD7               	rlf	___fttol@lval+3,f
 15413  0CBF  0B89               	decfsz	9,f
 15414  0CC0  2CBB               	goto	u8995
 15415  0CC1  3001               	movlw	1
 15416  0CC2  02D8               	subwf	___fttol@exp1,f
 15417  0CC3                     l8593:	
 15418  0CC3  08D8               	movf	___fttol@exp1,f
 15419  0CC4  1D03               	skipz
 15420  0CC5  2CBA               	goto	l8591
 15421  0CC6                     l8595:	
 15422  0CC6  0853               	movf	___fttol@sign1,w
 15423  0CC7  1903               	btfsc	3,2
 15424  0CC8  2CD4               	goto	l8599
 15425  0CC9  09D4               	comf	___fttol@lval,f
 15426  0CCA  09D5               	comf	___fttol@lval+1,f
 15427  0CCB  09D6               	comf	___fttol@lval+2,f
 15428  0CCC  09D7               	comf	___fttol@lval+3,f
 15429  0CCD  0AD4               	incf	___fttol@lval,f
 15430  0CCE  1903               	skipnz
 15431  0CCF  0AD5               	incf	___fttol@lval+1,f
 15432  0CD0  1903               	skipnz
 15433  0CD1  0AD6               	incf	___fttol@lval+2,f
 15434  0CD2  1903               	skipnz
 15435  0CD3  0AD7               	incf	___fttol@lval+3,f
 15436  0CD4                     l8599:	
 15437  0CD4  0857               	movf	___fttol@lval+3,w
 15438  0CD5  00CE               	movwf	?___fttol+3
 15439  0CD6  0856               	movf	___fttol@lval+2,w
 15440  0CD7  00CD               	movwf	?___fttol+2
 15441  0CD8  0855               	movf	___fttol@lval+1,w
 15442  0CD9  00CC               	movwf	?___fttol+1
 15443  0CDA  0854               	movf	___fttol@lval,w
 15444  0CDB  00CB               	movwf	?___fttol
 15445  0CDC  0008               	return
 15446  0CDD                     __end_of___fttol:	
 15447                           
 15448                           	psect	text93
 15449  0EA3                     __ptext93:	
 15450 ;; *************** function ___ftdiv *****************
 15451 ;; Defined at:
 15452 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15453 ;; Parameters:    Size  Location     Type
 15454 ;;  f2              3   14[BANK0 ] float 
 15455 ;;  f1              3   17[BANK0 ] float 
 15456 ;; Auto vars:     Size  Location     Type
 15457 ;;  f3              3   25[BANK0 ] float 
 15458 ;;  sign            1   29[BANK0 ] unsigned char 
 15459 ;;  exp             1   28[BANK0 ] unsigned char 
 15460 ;;  cntr            1   24[BANK0 ] unsigned char 
 15461 ;; Return value:  Size  Location     Type
 15462 ;;                  3   14[BANK0 ] float 
 15463 ;; Registers used:
 15464 ;;		wreg, status,2, status,0, pclath, cstack
 15465 ;; Tracked objects:
 15466 ;;		On entry : 0/0
 15467 ;;		On exit  : 0/0
 15468 ;;		Unchanged: 0/0
 15469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15470 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15471 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15472 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15473 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15474 ;;Total ram usage:       16 bytes
 15475 ;; Hardware stack levels used:    1
 15476 ;; Hardware stack levels required when called:    6
 15477 ;; This function calls:
 15478 ;;		___ftpack
 15479 ;; This function is called by:
 15480 ;;		_getPercentValue
 15481 ;;		_setPercentValue
 15482 ;; This function uses a non-reentrant model
 15483 ;;
 15484                           
 15485                           
 15486                           ;psect for function ___ftdiv
 15487  0EA3                     ___ftdiv:	
 15488                           
 15489                           ;incstack = 0
 15490                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15491  0EA3  0020               	movlb	0	; select bank0
 15492  0EA4  0831               	movf	___ftdiv@f1,w
 15493  0EA5  00B4               	movwf	??___ftdiv
 15494  0EA6  0832               	movf	___ftdiv@f1+1,w
 15495  0EA7  00B5               	movwf	??___ftdiv+1
 15496  0EA8  0833               	movf	___ftdiv@f1+2,w
 15497  0EA9  00B6               	movwf	??___ftdiv+2
 15498  0EAA  1003               	clrc
 15499  0EAB  0D35               	rlf	??___ftdiv+1,w
 15500  0EAC  0D36               	rlf	??___ftdiv+2,w
 15501  0EAD  00B7               	movwf	??___ftdiv+3
 15502  0EAE  0837               	movf	??___ftdiv+3,w
 15503  0EAF  00BC               	movwf	___ftdiv@exp
 15504  0EB0  08BC               	movf	___ftdiv@exp,f
 15505  0EB1  1D03               	skipz
 15506  0EB2  2EBA               	goto	l8473
 15507  0EB3  3000               	movlw	0
 15508  0EB4  00AE               	movwf	?___ftdiv
 15509  0EB5  3000               	movlw	0
 15510  0EB6  00AF               	movwf	?___ftdiv+1
 15511  0EB7  3000               	movlw	0
 15512  0EB8  00B0               	movwf	?___ftdiv+2
 15513  0EB9  0008               	return
 15514  0EBA                     l8473:	
 15515  0EBA  082E               	movf	___ftdiv@f2,w
 15516  0EBB  00B4               	movwf	??___ftdiv
 15517  0EBC  082F               	movf	___ftdiv@f2+1,w
 15518  0EBD  00B5               	movwf	??___ftdiv+1
 15519  0EBE  0830               	movf	___ftdiv@f2+2,w
 15520  0EBF  00B6               	movwf	??___ftdiv+2
 15521  0EC0  1003               	clrc
 15522  0EC1  0D35               	rlf	??___ftdiv+1,w
 15523  0EC2  0D36               	rlf	??___ftdiv+2,w
 15524  0EC3  00B7               	movwf	??___ftdiv+3
 15525  0EC4  0837               	movf	??___ftdiv+3,w
 15526  0EC5  00BD               	movwf	___ftdiv@sign
 15527  0EC6  08BD               	movf	___ftdiv@sign,f
 15528  0EC7  1D03               	skipz
 15529  0EC8  2ED0               	goto	l8479
 15530  0EC9  3000               	movlw	0
 15531  0ECA  00AE               	movwf	?___ftdiv
 15532  0ECB  3000               	movlw	0
 15533  0ECC  00AF               	movwf	?___ftdiv+1
 15534  0ECD  3000               	movlw	0
 15535  0ECE  00B0               	movwf	?___ftdiv+2
 15536  0ECF  0008               	return
 15537  0ED0                     l8479:	
 15538  0ED0  3000               	movlw	0
 15539  0ED1  00B9               	movwf	___ftdiv@f3
 15540  0ED2  3000               	movlw	0
 15541  0ED3  00BA               	movwf	___ftdiv@f3+1
 15542  0ED4  3000               	movlw	0
 15543  0ED5  00BB               	movwf	___ftdiv@f3+2
 15544  0ED6  3089               	movlw	137
 15545  0ED7  073D               	addwf	___ftdiv@sign,w
 15546  0ED8  00B4               	movwf	??___ftdiv
 15547  0ED9  0834               	movf	??___ftdiv,w
 15548  0EDA  02BC               	subwf	___ftdiv@exp,f
 15549  0EDB  0831               	movf	___ftdiv@f1,w
 15550  0EDC  00B4               	movwf	??___ftdiv
 15551  0EDD  0832               	movf	___ftdiv@f1+1,w
 15552  0EDE  00B5               	movwf	??___ftdiv+1
 15553  0EDF  0833               	movf	___ftdiv@f1+2,w
 15554  0EE0  00B6               	movwf	??___ftdiv+2
 15555  0EE1  3010               	movlw	16
 15556  0EE2                     u8745:	
 15557  0EE2  36B6               	lsrf	??___ftdiv+2,f
 15558  0EE3  0CB5               	rrf	??___ftdiv+1,f
 15559  0EE4  0CB4               	rrf	??___ftdiv,f
 15560  0EE5  0B89               	decfsz	9,f
 15561  0EE6  2EE2               	goto	u8745
 15562  0EE7  0834               	movf	??___ftdiv,w
 15563  0EE8  00B7               	movwf	??___ftdiv+3
 15564  0EE9  0837               	movf	??___ftdiv+3,w
 15565  0EEA  00BD               	movwf	___ftdiv@sign
 15566  0EEB  082E               	movf	___ftdiv@f2,w
 15567  0EEC  00B4               	movwf	??___ftdiv
 15568  0EED  082F               	movf	___ftdiv@f2+1,w
 15569  0EEE  00B5               	movwf	??___ftdiv+1
 15570  0EEF  0830               	movf	___ftdiv@f2+2,w
 15571  0EF0  00B6               	movwf	??___ftdiv+2
 15572  0EF1  3010               	movlw	16
 15573  0EF2                     u8755:	
 15574  0EF2  36B6               	lsrf	??___ftdiv+2,f
 15575  0EF3  0CB5               	rrf	??___ftdiv+1,f
 15576  0EF4  0CB4               	rrf	??___ftdiv,f
 15577  0EF5  0B89               	decfsz	9,f
 15578  0EF6  2EF2               	goto	u8755
 15579  0EF7  0834               	movf	??___ftdiv,w
 15580  0EF8  00B7               	movwf	??___ftdiv+3
 15581  0EF9  0837               	movf	??___ftdiv+3,w
 15582  0EFA  06BD               	xorwf	___ftdiv@sign,f
 15583  0EFB  3080               	movlw	128
 15584  0EFC  00B4               	movwf	??___ftdiv
 15585  0EFD  0834               	movf	??___ftdiv,w
 15586  0EFE  05BD               	andwf	___ftdiv@sign,f
 15587  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 15588  0F00  30FF               	movlw	255
 15589  0F01  05B1               	andwf	___ftdiv@f1,f
 15590  0F02  30FF               	movlw	255
 15591  0F03  05B2               	andwf	___ftdiv@f1+1,f
 15592  0F04  3000               	movlw	0
 15593  0F05  05B3               	andwf	___ftdiv@f1+2,f
 15594  0F06  17AF               	bsf	___ftdiv@f2+1,7
 15595  0F07  30FF               	movlw	255
 15596  0F08  05AE               	andwf	___ftdiv@f2,f
 15597  0F09  30FF               	movlw	255
 15598  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 15599  0F0B  3000               	movlw	0
 15600  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 15601  0F0D  3018               	movlw	24
 15602  0F0E  00B4               	movwf	??___ftdiv
 15603  0F0F  0834               	movf	??___ftdiv,w
 15604  0F10  00B8               	movwf	___ftdiv@cntr
 15605  0F11                     l8493:	
 15606  0F11  3001               	movlw	1
 15607  0F12                     u8765:	
 15608  0F12  35B9               	lslf	___ftdiv@f3,f
 15609  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 15610  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 15611  0F15  0B89               	decfsz	9,f
 15612  0F16  2F12               	goto	u8765
 15613  0F17  0830               	movf	___ftdiv@f2+2,w
 15614  0F18  0233               	subwf	___ftdiv@f1+2,w
 15615  0F19  1D03               	skipz
 15616  0F1A  2F21               	goto	u8775
 15617  0F1B  082F               	movf	___ftdiv@f2+1,w
 15618  0F1C  0232               	subwf	___ftdiv@f1+1,w
 15619  0F1D  1D03               	skipz
 15620  0F1E  2F21               	goto	u8775
 15621  0F1F  082E               	movf	___ftdiv@f2,w
 15622  0F20  0231               	subwf	___ftdiv@f1,w
 15623  0F21                     u8775:	
 15624  0F21  1C03               	skipc
 15625  0F22  2F2A               	goto	l8501
 15626  0F23  082E               	movf	___ftdiv@f2,w
 15627  0F24  02B1               	subwf	___ftdiv@f1,f
 15628  0F25  082F               	movf	___ftdiv@f2+1,w
 15629  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 15630  0F27  0830               	movf	___ftdiv@f2+2,w
 15631  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 15632  0F29  1439               	bsf	___ftdiv@f3,0
 15633  0F2A                     l8501:	
 15634  0F2A  3001               	movlw	1
 15635  0F2B                     u8785:	
 15636  0F2B  35B1               	lslf	___ftdiv@f1,f
 15637  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 15638  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 15639  0F2E  0B89               	decfsz	9,f
 15640  0F2F  2F2B               	goto	u8785
 15641  0F30  3001               	movlw	1
 15642  0F31  02B8               	subwf	___ftdiv@cntr,f
 15643  0F32  1D03               	btfss	3,2
 15644  0F33  2F11               	goto	l8493
 15645  0F34  0839               	movf	___ftdiv@f3,w
 15646  0F35  00A0               	movwf	___ftpack@arg
 15647  0F36  083A               	movf	___ftdiv@f3+1,w
 15648  0F37  00A1               	movwf	___ftpack@arg+1
 15649  0F38  083B               	movf	___ftdiv@f3+2,w
 15650  0F39  00A2               	movwf	___ftpack@arg+2
 15651  0F3A  083C               	movf	___ftdiv@exp,w
 15652  0F3B  00B4               	movwf	??___ftdiv
 15653  0F3C  0834               	movf	??___ftdiv,w
 15654  0F3D  00A3               	movwf	___ftpack@exp
 15655  0F3E  083D               	movf	___ftdiv@sign,w
 15656  0F3F  00B5               	movwf	??___ftdiv+1
 15657  0F40  0835               	movf	??___ftdiv+1,w
 15658  0F41  00A4               	movwf	___ftpack@sign
 15659  0F42  3188  200F         	fcall	___ftpack
 15660  0F44  0020               	movlb	0	; select bank0
 15661  0F45  0820               	movf	?___ftpack,w
 15662  0F46  00AE               	movwf	?___ftdiv
 15663  0F47  0821               	movf	?___ftpack+1,w
 15664  0F48  00AF               	movwf	?___ftdiv+1
 15665  0F49  0822               	movf	?___ftpack+2,w
 15666  0F4A  00B0               	movwf	?___ftdiv+2
 15667  0F4B  0008               	return
 15668  0F4C                     __end_of___ftdiv:	
 15669                           
 15670                           	psect	text94
 15671  1E90                     __ptext94:	
 15672 ;; *************** function ___awtoft *****************
 15673 ;; Defined at:
 15674 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 15675 ;; Parameters:    Size  Location     Type
 15676 ;;  c               2    8[BANK0 ] int 
 15677 ;; Auto vars:     Size  Location     Type
 15678 ;;  sign            1   13[BANK0 ] unsigned char 
 15679 ;; Return value:  Size  Location     Type
 15680 ;;                  3    8[BANK0 ] float 
 15681 ;; Registers used:
 15682 ;;		wreg, status,2, status,0, pclath, cstack
 15683 ;; Tracked objects:
 15684 ;;		On entry : 0/0
 15685 ;;		On exit  : 0/0
 15686 ;;		Unchanged: 0/0
 15687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15688 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15689 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15690 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15691 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15692 ;;Total ram usage:        6 bytes
 15693 ;; Hardware stack levels used:    1
 15694 ;; Hardware stack levels required when called:    6
 15695 ;; This function calls:
 15696 ;;		___ftpack
 15697 ;; This function is called by:
 15698 ;;		_getPercentValue
 15699 ;;		_setPercentValue
 15700 ;; This function uses a non-reentrant model
 15701 ;;
 15702                           
 15703                           
 15704                           ;psect for function ___awtoft
 15705  1E90                     ___awtoft:	
 15706                           
 15707                           ;incstack = 0
 15708                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15709  1E90  0020               	movlb	0	; select bank0
 15710  1E91  01AD               	clrf	___awtoft@sign
 15711  1E92  1FA9               	btfss	___awtoft@c+1,7
 15712  1E93  2E9B               	goto	l8391
 15713  1E94  09A8               	comf	___awtoft@c,f
 15714  1E95  09A9               	comf	___awtoft@c+1,f
 15715  1E96  0AA8               	incf	___awtoft@c,f
 15716  1E97  1903               	skipnz
 15717  1E98  0AA9               	incf	___awtoft@c+1,f
 15718  1E99  01AD               	clrf	___awtoft@sign
 15719  1E9A  0AAD               	incf	___awtoft@sign,f
 15720  1E9B                     l8391:	
 15721  1E9B  0828               	movf	___awtoft@c,w
 15722  1E9C  00A0               	movwf	___ftpack@arg
 15723  1E9D  0829               	movf	___awtoft@c+1,w
 15724  1E9E  00A1               	movwf	___ftpack@arg+1
 15725  1E9F  01A2               	clrf	___ftpack@arg+2
 15726  1EA0  308E               	movlw	142
 15727  1EA1  00AB               	movwf	??___awtoft
 15728  1EA2  082B               	movf	??___awtoft,w
 15729  1EA3  00A3               	movwf	___ftpack@exp
 15730  1EA4  082D               	movf	___awtoft@sign,w
 15731  1EA5  00AC               	movwf	??___awtoft+1
 15732  1EA6  082C               	movf	??___awtoft+1,w
 15733  1EA7  00A4               	movwf	___ftpack@sign
 15734  1EA8  3188  200F         	fcall	___ftpack
 15735  1EAA  0020               	movlb	0	; select bank0
 15736  1EAB  0820               	movf	?___ftpack,w
 15737  1EAC  00A8               	movwf	?___awtoft
 15738  1EAD  0821               	movf	?___ftpack+1,w
 15739  1EAE  00A9               	movwf	?___awtoft+1
 15740  1EAF  0822               	movf	?___ftpack+2,w
 15741  1EB0  00AA               	movwf	?___awtoft+2
 15742  1EB1  0008               	return
 15743  1EB2                     __end_of___awtoft:	
 15744                           
 15745                           	psect	text95
 15746  080F                     __ptext95:	
 15747 ;; *************** function ___ftpack *****************
 15748 ;; Defined at:
 15749 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15750 ;; Parameters:    Size  Location     Type
 15751 ;;  arg             3    0[BANK0 ] unsigned um
 15752 ;;  exp             1    3[BANK0 ] unsigned char 
 15753 ;;  sign            1    4[BANK0 ] unsigned char 
 15754 ;; Auto vars:     Size  Location     Type
 15755 ;;		None
 15756 ;; Return value:  Size  Location     Type
 15757 ;;                  3    0[BANK0 ] float 
 15758 ;; Registers used:
 15759 ;;		wreg, status,2, status,0
 15760 ;; Tracked objects:
 15761 ;;		On entry : 0/0
 15762 ;;		On exit  : 0/0
 15763 ;;		Unchanged: 0/0
 15764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15765 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15767 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15768 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15769 ;;Total ram usage:        8 bytes
 15770 ;; Hardware stack levels used:    1
 15771 ;; Hardware stack levels required when called:    5
 15772 ;; This function calls:
 15773 ;;		Nothing
 15774 ;; This function is called by:
 15775 ;;		___awtoft
 15776 ;;		___ftadd
 15777 ;;		___ftdiv
 15778 ;;		___ftmul
 15779 ;; This function uses a non-reentrant model
 15780 ;;
 15781                           
 15782                           
 15783                           ;psect for function ___ftpack
 15784  080F                     ___ftpack:	
 15785                           
 15786                           ;incstack = 0
 15787                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15788  080F  0020               	movlb	0	; select bank0
 15789  0810  0823               	movf	___ftpack@exp,w
 15790  0811  1903               	btfsc	3,2
 15791  0812  2818               	goto	l8341
 15792  0813  0822               	movf	___ftpack@arg+2,w
 15793  0814  0421               	iorwf	___ftpack@arg+1,w
 15794  0815  0420               	iorwf	___ftpack@arg,w
 15795  0816  1D03               	skipz
 15796  0817  2829               	goto	l8347
 15797  0818                     l8341:	
 15798  0818  3000               	movlw	0
 15799  0819  00A0               	movwf	?___ftpack
 15800  081A  3000               	movlw	0
 15801  081B  00A1               	movwf	?___ftpack+1
 15802  081C  3000               	movlw	0
 15803  081D  00A2               	movwf	?___ftpack+2
 15804  081E  0008               	return
 15805  081F                     l8345:	
 15806  081F  3001               	movlw	1
 15807  0820  00A5               	movwf	??___ftpack
 15808  0821  0825               	movf	??___ftpack,w
 15809  0822  07A3               	addwf	___ftpack@exp,f
 15810  0823  3001               	movlw	1
 15811  0824                     u8375:	
 15812  0824  36A2               	lsrf	___ftpack@arg+2,f
 15813  0825  0CA1               	rrf	___ftpack@arg+1,f
 15814  0826  0CA0               	rrf	___ftpack@arg,f
 15815  0827  0B89               	decfsz	9,f
 15816  0828  2824               	goto	u8375
 15817  0829                     l8347:	
 15818  0829  30FE               	movlw	254
 15819  082A  0522               	andwf	___ftpack@arg+2,w
 15820  082B  1903               	btfsc	3,2
 15821  082C  2842               	goto	l2909
 15822  082D  281F               	goto	l8345
 15823  082E                     l8349:	
 15824  082E  3001               	movlw	1
 15825  082F  00A5               	movwf	??___ftpack
 15826  0830  0825               	movf	??___ftpack,w
 15827  0831  07A3               	addwf	___ftpack@exp,f
 15828  0832  3001               	movlw	1
 15829  0833  07A0               	addwf	___ftpack@arg,f
 15830  0834  3000               	movlw	0
 15831  0835  1803               	skipnc
 15832  0836  3001               	movlw	1
 15833  0837  07A1               	addwf	___ftpack@arg+1,f
 15834  0838  3000               	movlw	0
 15835  0839  1803               	skipnc
 15836  083A  3001               	movlw	1
 15837  083B  07A2               	addwf	___ftpack@arg+2,f
 15838  083C  3001               	movlw	1
 15839  083D                     u8395:	
 15840  083D  36A2               	lsrf	___ftpack@arg+2,f
 15841  083E  0CA1               	rrf	___ftpack@arg+1,f
 15842  083F  0CA0               	rrf	___ftpack@arg,f
 15843  0840  0B89               	decfsz	9,f
 15844  0841  283D               	goto	u8395
 15845  0842                     l2909:	
 15846  0842  30FF               	movlw	255
 15847  0843  0522               	andwf	___ftpack@arg+2,w
 15848  0844  1903               	btfsc	3,2
 15849  0845  284F               	goto	l8357
 15850  0846  282E               	goto	l8349
 15851  0847                     l8355:	
 15852  0847  3001               	movlw	1
 15853  0848  02A3               	subwf	___ftpack@exp,f
 15854  0849  3001               	movlw	1
 15855  084A                     u8415:	
 15856  084A  35A0               	lslf	___ftpack@arg,f
 15857  084B  0DA1               	rlf	___ftpack@arg+1,f
 15858  084C  0DA2               	rlf	___ftpack@arg+2,f
 15859  084D  0B89               	decfsz	9,f
 15860  084E  284A               	goto	u8415
 15861  084F                     l8357:	
 15862  084F  1FA1               	btfss	___ftpack@arg+1,7
 15863  0850  2847               	goto	l8355
 15864  0851  1823               	btfsc	___ftpack@exp,0
 15865  0852  2859               	goto	l2915
 15866  0853  30FF               	movlw	255
 15867  0854  05A0               	andwf	___ftpack@arg,f
 15868  0855  307F               	movlw	127
 15869  0856  05A1               	andwf	___ftpack@arg+1,f
 15870  0857  30FF               	movlw	255
 15871  0858  05A2               	andwf	___ftpack@arg+2,f
 15872  0859                     l2915:	
 15873  0859  1003               	clrc
 15874  085A  0CA3               	rrf	___ftpack@exp,f
 15875  085B  0823               	movf	___ftpack@exp,w
 15876  085C  00A5               	movwf	??___ftpack
 15877  085D  01A6               	clrf	??___ftpack+1
 15878  085E  01A7               	clrf	??___ftpack+2
 15879  085F  3010               	movlw	16
 15880  0860                     u8445:	
 15881  0860  35A5               	lslf	??___ftpack,f
 15882  0861  0DA6               	rlf	??___ftpack+1,f
 15883  0862  0DA7               	rlf	??___ftpack+2,f
 15884  0863  0B89               	decfsz	9,f
 15885  0864  2860               	goto	u8445
 15886  0865  0825               	movf	??___ftpack,w
 15887  0866  04A0               	iorwf	___ftpack@arg,f
 15888  0867  0826               	movf	??___ftpack+1,w
 15889  0868  04A1               	iorwf	___ftpack@arg+1,f
 15890  0869  0827               	movf	??___ftpack+2,w
 15891  086A  04A2               	iorwf	___ftpack@arg+2,f
 15892  086B  0824               	movf	___ftpack@sign,w
 15893  086C  1903               	btfsc	3,2
 15894  086D  0008               	return
 15895  086E  17A2               	bsf	___ftpack@arg+2,7
 15896  086F  0008               	return
 15897  0870                     __end_of___ftpack:	
 15898                           
 15899                           	psect	text96
 15900  1E30                     __ptext96:	
 15901 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15902 ;; Defined at:
 15903 ;;		line 767 in file "../src/Dimmer_B1.c"
 15904 ;; Parameters:    Size  Location     Type
 15905 ;;  lights          1    wreg     unsigned char 
 15906 ;;  command         1    2[BANK0 ] unsigned char 
 15907 ;; Auto vars:     Size  Location     Type
 15908 ;;  lights          1    4[BANK0 ] unsigned char 
 15909 ;; Return value:  Size  Location     Type
 15910 ;;		None               void
 15911 ;; Registers used:
 15912 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15913 ;; Tracked objects:
 15914 ;;		On entry : 0/0
 15915 ;;		On exit  : 0/0
 15916 ;;		Unchanged: 0/0
 15917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15918 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15919 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15920 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15921 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15922 ;;Total ram usage:        3 bytes
 15923 ;; Hardware stack levels used:    1
 15924 ;; Hardware stack levels required when called:    6
 15925 ;; This function calls:
 15926 ;;		_DimmerLightsPointSelect
 15927 ;; This function is called by:
 15928 ;;		_setDimmerLights_SwOff
 15929 ;;		_setDimmerLights_AdjControl
 15930 ;; This function uses a non-reentrant model
 15931 ;;
 15932                           
 15933                           
 15934                           ;psect for function _setDimmerLights_TriggerAdj
 15935  1E30                     _setDimmerLights_TriggerAdj:	
 15936                           
 15937                           ;incstack = 0
 15938                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15939                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15940  1E30  0020               	movlb	0	; select bank0
 15941  1E31  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15942                           
 15943                           ;Dimmer_B1.c: 768: DimmerLightsPointSelect(lights);
 15944  1E32  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15945  1E33  319C  2475         	fcall	_DimmerLightsPointSelect
 15946                           
 15947                           ;Dimmer_B1.c: 769: DimmerLights->TriggerAdj = 1;
 15948  1E35  0877               	movf	_DimmerLights,w
 15949  1E36  3E08               	addlw	8
 15950  1E37  0086               	movwf	6
 15951  1E38  3001               	movlw	1	; select bank2/3
 15952  1E39  0087               	movwf	7
 15953  1E3A  1601               	bsf	1,4
 15954                           
 15955                           ;Dimmer_B1.c: 770: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15956  1E3B  0020               	movlb	0	; select bank0
 15957  1E3C  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15958  1E3D  3A01               	xorlw	1
 15959  1E3E  3000               	movlw	0
 15960  1E3F  1903               	skipnz
 15961  1E40  3001               	movlw	1
 15962  1E41  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15963  1E42  0877               	movf	_DimmerLights,w
 15964  1E43  3E08               	addlw	8
 15965  1E44  0086               	movwf	6
 15966  1E45  3001               	movlw	1	; select bank2/3
 15967  1E46  0087               	movwf	7
 15968  1E47  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15969  1E48  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15970  1E49  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15971  1E4A  0801               	movf	1,w
 15972  1E4B  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15973  1E4C  39F7               	andlw	-9
 15974  1E4D  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15975  1E4E  0081               	movwf	1
 15976  1E4F  0008               	return
 15977  1E50                     __end_of_setDimmerLights_TriggerAdj:	
 15978                           
 15979                           	psect	text97
 15980  1DF3                     __ptext97:	
 15981 ;; *************** function _setDimmerLights_Trigger *****************
 15982 ;; Defined at:
 15983 ;;		line 761 in file "../src/Dimmer_B1.c"
 15984 ;; Parameters:    Size  Location     Type
 15985 ;;  lights          1    wreg     unsigned char 
 15986 ;;  command         1    2[BANK0 ] unsigned char 
 15987 ;; Auto vars:     Size  Location     Type
 15988 ;;  lights          1    4[BANK0 ] unsigned char 
 15989 ;; Return value:  Size  Location     Type
 15990 ;;		None               void
 15991 ;; Registers used:
 15992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15993 ;; Tracked objects:
 15994 ;;		On entry : 0/0
 15995 ;;		On exit  : 0/0
 15996 ;;		Unchanged: 0/0
 15997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15998 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16000 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16001 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16002 ;;Total ram usage:        3 bytes
 16003 ;; Hardware stack levels used:    1
 16004 ;; Hardware stack levels required when called:    6
 16005 ;; This function calls:
 16006 ;;		_DimmerLightsPointSelect
 16007 ;; This function is called by:
 16008 ;;		_setDimmerLights_SwOn
 16009 ;;		_setDimmerLights_SwOff
 16010 ;; This function uses a non-reentrant model
 16011 ;;
 16012                           
 16013                           
 16014                           ;psect for function _setDimmerLights_Trigger
 16015  1DF3                     _setDimmerLights_Trigger:	
 16016                           
 16017                           ;incstack = 0
 16018                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16019                           ;setDimmerLights_Trigger@lights stored from wreg
 16020  1DF3  0020               	movlb	0	; select bank0
 16021  1DF4  00A4               	movwf	setDimmerLights_Trigger@lights
 16022                           
 16023                           ;Dimmer_B1.c: 762: DimmerLightsPointSelect(lights);
 16024  1DF5  0824               	movf	setDimmerLights_Trigger@lights,w
 16025  1DF6  319C  2475         	fcall	_DimmerLightsPointSelect
 16026                           
 16027                           ;Dimmer_B1.c: 763: DimmerLights->Trigger = 1;
 16028  1DF8  0877               	movf	_DimmerLights,w
 16029  1DF9  3E08               	addlw	8
 16030  1DFA  0086               	movwf	6
 16031  1DFB  3001               	movlw	1	; select bank2/3
 16032  1DFC  0087               	movwf	7
 16033  1DFD  1501               	bsf	1,2
 16034                           
 16035                           ;Dimmer_B1.c: 764: DimmerLights->Switch = command == 1 ? 1 : 0;
 16036  1DFE  0020               	movlb	0	; select bank0
 16037  1DFF  0822               	movf	setDimmerLights_Trigger@command,w
 16038  1E00  3A01               	xorlw	1
 16039  1E01  3000               	movlw	0
 16040  1E02  1903               	skipnz
 16041  1E03  3001               	movlw	1
 16042  1E04  00A3               	movwf	??_setDimmerLights_Trigger
 16043  1E05  0877               	movf	_DimmerLights,w
 16044  1E06  3E08               	addlw	8
 16045  1E07  0086               	movwf	6
 16046  1E08  3001               	movlw	1	; select bank2/3
 16047  1E09  0087               	movwf	7
 16048  1E0A  0DA3               	rlf	??_setDimmerLights_Trigger,f
 16049  1E0B  0801               	movf	1,w
 16050  1E0C  0623               	xorwf	??_setDimmerLights_Trigger,w
 16051  1E0D  39FD               	andlw	-3
 16052  1E0E  0623               	xorwf	??_setDimmerLights_Trigger,w
 16053  1E0F  0081               	movwf	1
 16054  1E10  0008               	return
 16055  1E11                     __end_of_setDimmerLights_Trigger:	
 16056                           
 16057                           	psect	text98
 16058  179F                     __ptext98:	
 16059 ;; *************** function _setDelayOff_GO *****************
 16060 ;; Defined at:
 16061 ;;		line 86 in file "../src/DelayOff_B1.c"
 16062 ;; Parameters:    Size  Location     Type
 16063 ;;  sw              1    wreg     unsigned char 
 16064 ;;  command         1   10[BANK0 ] unsigned char 
 16065 ;;  value           1   11[BANK0 ] unsigned char 
 16066 ;; Auto vars:     Size  Location     Type
 16067 ;;  sw              1   14[BANK0 ] unsigned char 
 16068 ;; Return value:  Size  Location     Type
 16069 ;;		None               void
 16070 ;; Registers used:
 16071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16072 ;; Tracked objects:
 16073 ;;		On entry : 0/0
 16074 ;;		On exit  : 0/0
 16075 ;;		Unchanged: 0/0
 16076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16077 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16078 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16079 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16080 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16081 ;;Total ram usage:        5 bytes
 16082 ;; Hardware stack levels used:    1
 16083 ;; Hardware stack levels required when called:    7
 16084 ;; This function calls:
 16085 ;;		_DelayOffPointSelect
 16086 ;;		_DelayTimejudge
 16087 ;; This function is called by:
 16088 ;;		_setDimmerLights_SwOff
 16089 ;;		_setRFSW_Control
 16090 ;; This function uses a non-reentrant model
 16091 ;;
 16092                           
 16093                           
 16094                           ;psect for function _setDelayOff_GO
 16095  179F                     _setDelayOff_GO:	
 16096                           
 16097                           ;incstack = 0
 16098                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16099                           ;setDelayOff_GO@sw stored from wreg
 16100  179F  0020               	movlb	0	; select bank0
 16101  17A0  00AE               	movwf	setDelayOff_GO@sw
 16102                           
 16103                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
 16104  17A1  082E               	movf	setDelayOff_GO@sw,w
 16105  17A2  319C  24C2  3197   	fcall	_DelayOffPointSelect
 16106                           
 16107                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
 16108  17A5  0876               	movf	_DelayOff,w
 16109  17A6  0086               	movwf	6
 16110  17A7  3001               	movlw	1	; select bank2/3
 16111  17A8  0087               	movwf	7
 16112  17A9  1C01               	btfss	1,0
 16113  17AA  0008               	return
 16114                           
 16115                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
 16116  17AB  0020               	movlb	0	; select bank0
 16117  17AC  082A               	movf	setDelayOff_GO@command,w
 16118  17AD  3A01               	xorlw	1
 16119  17AE  3000               	movlw	0
 16120  17AF  1903               	skipnz
 16121  17B0  3001               	movlw	1
 16122  17B1  00AC               	movwf	??_setDelayOff_GO
 16123  17B2  0876               	movf	_DelayOff,w
 16124  17B3  0086               	movwf	6
 16125  17B4  3001               	movlw	1	; select bank2/3
 16126  17B5  0087               	movwf	7
 16127  17B6  0DAC               	rlf	??_setDelayOff_GO,f
 16128  17B7  0801               	movf	1,w
 16129  17B8  062C               	xorwf	??_setDelayOff_GO,w
 16130  17B9  39FD               	andlw	-3
 16131  17BA  062C               	xorwf	??_setDelayOff_GO,w
 16132  17BB  0081               	movwf	1
 16133                           
 16134                           ;DelayOff_B1.c: 90: if (command == 1) {
 16135  17BC  082A               	movf	setDelayOff_GO@command,w
 16136  17BD  3A01               	xorlw	1
 16137  17BE  1D03               	skipz
 16138  17BF  2FEA               	goto	l8759
 16139                           
 16140                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
 16141  17C0  082B               	movf	setDelayOff_GO@value,w
 16142  17C1  3190  20AF  3197   	fcall	_DelayTimejudge
 16143  17C4  0020               	movlb	0	; select bank0
 16144  17C5  00AC               	movwf	??_setDelayOff_GO
 16145  17C6  0876               	movf	_DelayOff,w
 16146  17C7  0086               	movwf	6
 16147  17C8  3001               	movlw	1	; select bank2/3
 16148  17C9  0087               	movwf	7
 16149  17CA  082C               	movf	??_setDelayOff_GO,w
 16150  17CB  0081               	movwf	1
 16151                           
 16152                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16153  17CC  300F               	movlw	15
 16154  17CD  052B               	andwf	setDelayOff_GO@value,w
 16155  17CE  00AC               	movwf	??_setDelayOff_GO
 16156  17CF  082C               	movf	??_setDelayOff_GO,w
 16157  17D0  3A05               	xorlw	5
 16158  17D1  1903               	skipnz
 16159  17D2  2FD7               	goto	l8753
 16160  17D3  082B               	movf	setDelayOff_GO@value,w
 16161  17D4  390F               	andlw	15
 16162  17D5  1D03               	btfss	3,2
 16163  17D6  2FDD               	goto	l8757
 16164  17D7                     l8753:	
 16165  17D7  3026               	movlw	38
 16166  17D8  022B               	subwf	setDelayOff_GO@value,w
 16167  17D9  1803               	skipnc
 16168  17DA  2FDD               	goto	l8757
 16169                           
 16170                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
 16171  17DB  082B               	movf	setDelayOff_GO@value,w
 16172  17DC  2FDE               	goto	L11
 16173  17DD                     l8757:	
 16174                           ;DelayOff_B1.c: 94: } else {
 16175                           
 16176                           
 16177                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
 16178  17DD  3005               	movlw	5
 16179  17DE                     L11:	
 16180  17DE  00AC               	movwf	??_setDelayOff_GO
 16181  17DF  082E               	movf	setDelayOff_GO@sw,w
 16182  17E0  3E1A               	addlw	26
 16183  17E1  077B               	addwf	_product,w
 16184  17E2  00AD               	movwf	??_setDelayOff_GO+1
 16185  17E3  082D               	movf	??_setDelayOff_GO+1,w
 16186  17E4  0086               	movwf	6
 16187  17E5  3002               	movlw	2	; select bank4/5
 16188  17E6  0087               	movwf	7
 16189  17E7  082C               	movf	??_setDelayOff_GO,w
 16190  17E8  0081               	movwf	1
 16191                           
 16192                           ;DelayOff_B1.c: 96: }
 16193                           ;DelayOff_B1.c: 97: } else {
 16194  17E9  2FF3               	goto	l8761
 16195  17EA                     l8759:	
 16196                           
 16197                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
 16198  17EA  082E               	movf	setDelayOff_GO@sw,w
 16199  17EB  3E1A               	addlw	26
 16200  17EC  077B               	addwf	_product,w
 16201  17ED  00AC               	movwf	??_setDelayOff_GO
 16202  17EE  082C               	movf	??_setDelayOff_GO,w
 16203  17EF  0086               	movwf	6
 16204  17F0  3002               	movlw	2	; select bank4/5
 16205  17F1  0087               	movwf	7
 16206  17F2  0181               	clrf	1
 16207  17F3                     l8761:	
 16208                           
 16209                           ;DelayOff_B1.c: 99: }
 16210                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
 16211  17F3  0876               	movf	_DelayOff,w
 16212  17F4  0086               	movwf	6
 16213  17F5  3001               	movlw	1	; select bank2/3
 16214  17F6  0087               	movwf	7
 16215  17F7  3000               	movlw	0
 16216  17F8  3FC0               	movwi [0]fsr1
 16217  17F9  3FC1               	movwi [1]fsr1
 16218                           
 16219                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
 16220  17FA  0876               	movf	_DelayOff,w
 16221  17FB  0086               	movwf	6
 16222  17FC  3001               	movlw	1	; select bank2/3
 16223  17FD  0087               	movwf	7
 16224  17FE  0181               	clrf	1
 16225  17FF  0008               	return
 16226  1800                     __end_of_setDelayOff_GO:	
 16227                           
 16228                           	psect	text99
 16229  10AF                     __ptext99:	
 16230 ;; *************** function _DelayTimejudge *****************
 16231 ;; Defined at:
 16232 ;;		line 106 in file "../src/DelayOff_B1.c"
 16233 ;; Parameters:    Size  Location     Type
 16234 ;;  value           1    wreg     unsigned char 
 16235 ;; Auto vars:     Size  Location     Type
 16236 ;;  value           1    9[BANK0 ] unsigned char 
 16237 ;;  k               1    8[BANK0 ] unsigned char 
 16238 ;;  j               1    7[BANK0 ] unsigned char 
 16239 ;;  i               1    6[BANK0 ] unsigned char 
 16240 ;; Return value:  Size  Location     Type
 16241 ;;                  1    wreg      unsigned char 
 16242 ;; Registers used:
 16243 ;;		wreg, status,2, status,0, pclath, cstack
 16244 ;; Tracked objects:
 16245 ;;		On entry : 0/0
 16246 ;;		On exit  : 0/0
 16247 ;;		Unchanged: 0/0
 16248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16250 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16251 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16252 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16253 ;;Total ram usage:        6 bytes
 16254 ;; Hardware stack levels used:    1
 16255 ;; Hardware stack levels required when called:    6
 16256 ;; This function calls:
 16257 ;;		___bmul
 16258 ;; This function is called by:
 16259 ;;		_setDelayOff_GO
 16260 ;; This function uses a non-reentrant model
 16261 ;;
 16262                           
 16263                           
 16264                           ;psect for function _DelayTimejudge
 16265  10AF                     _DelayTimejudge:	
 16266                           
 16267                           ;incstack = 0
 16268                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16269                           ;DelayTimejudge@value stored from wreg
 16270  10AF  0020               	movlb	0	; select bank0
 16271  10B0  00A9               	movwf	DelayTimejudge@value
 16272                           
 16273                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
 16274  10B1  3005               	movlw	5
 16275  10B2  00A4               	movwf	??_DelayTimejudge
 16276  10B3  0824               	movf	??_DelayTimejudge,w
 16277  10B4  00A6               	movwf	DelayTimejudge@i
 16278  10B5  01A7               	clrf	DelayTimejudge@j
 16279  10B6  01A8               	clrf	DelayTimejudge@k
 16280                           
 16281                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
 16282  10B7  3031               	movlw	49
 16283  10B8  0229               	subwf	DelayTimejudge@value,w
 16284  10B9  1803               	skipnc
 16285  10BA  28D7               	goto	l8623
 16286                           
 16287                           ;DelayOff_B1.c: 109: j = value & 0x0f;
 16288  10BB  0829               	movf	DelayTimejudge@value,w
 16289  10BC  390F               	andlw	15
 16290  10BD  00A4               	movwf	??_DelayTimejudge
 16291  10BE  0824               	movf	??_DelayTimejudge,w
 16292  10BF  00A7               	movwf	DelayTimejudge@j
 16293                           
 16294                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
 16295  10C0  0829               	movf	DelayTimejudge@value,w
 16296  10C1  00A4               	movwf	??_DelayTimejudge
 16297  10C2  3004               	movlw	4
 16298  10C3                     u9055:	
 16299  10C3  36A4               	lsrf	??_DelayTimejudge,f
 16300  10C4  0B89               	decfsz	9,f
 16301  10C5  28C3               	goto	u9055
 16302  10C6  0824               	movf	??_DelayTimejudge,w
 16303  10C7  390F               	andlw	15
 16304  10C8  00A5               	movwf	??_DelayTimejudge+1
 16305  10C9  0825               	movf	??_DelayTimejudge+1,w
 16306  10CA  00A8               	movwf	DelayTimejudge@k
 16307                           
 16308                           ;DelayOff_B1.c: 111: i = j + (k * 10);
 16309  10CB  300A               	movlw	10
 16310  10CC  00A4               	movwf	??_DelayTimejudge
 16311  10CD  0824               	movf	??_DelayTimejudge,w
 16312  10CE  00A0               	movwf	___bmul@multiplicand
 16313  10CF  0828               	movf	DelayTimejudge@k,w
 16314  10D0  319C  242D         	fcall	___bmul
 16315  10D2  0020               	movlb	0	; select bank0
 16316  10D3  0727               	addwf	DelayTimejudge@j,w
 16317  10D4  00A5               	movwf	??_DelayTimejudge+1
 16318  10D5  0825               	movf	??_DelayTimejudge+1,w
 16319  10D6  00A6               	movwf	DelayTimejudge@i
 16320  10D7                     l8623:	
 16321                           
 16322                           ;DelayOff_B1.c: 112: }
 16323                           ;DelayOff_B1.c: 133: return i;
 16324  10D7  0826               	movf	DelayTimejudge@i,w
 16325  10D8  0008               	return
 16326  10D9                     __end_of_DelayTimejudge:	
 16327                           
 16328                           	psect	text100
 16329  1C2D                     __ptext100:	
 16330 ;; *************** function ___bmul *****************
 16331 ;; Defined at:
 16332 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16333 ;; Parameters:    Size  Location     Type
 16334 ;;  multiplier      1    wreg     unsigned char 
 16335 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16336 ;; Auto vars:     Size  Location     Type
 16337 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16338 ;;  product         1    2[BANK0 ] unsigned char 
 16339 ;; Return value:  Size  Location     Type
 16340 ;;                  1    wreg      unsigned char 
 16341 ;; Registers used:
 16342 ;;		wreg, status,2, status,0
 16343 ;; Tracked objects:
 16344 ;;		On entry : 0/0
 16345 ;;		On exit  : 0/0
 16346 ;;		Unchanged: 0/0
 16347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16348 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16349 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16350 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16351 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16352 ;;Total ram usage:        4 bytes
 16353 ;; Hardware stack levels used:    1
 16354 ;; Hardware stack levels required when called:    5
 16355 ;; This function calls:
 16356 ;;		Nothing
 16357 ;; This function is called by:
 16358 ;;		_DelayTimejudge
 16359 ;; This function uses a non-reentrant model
 16360 ;;
 16361                           
 16362                           
 16363                           ;psect for function ___bmul
 16364  1C2D                     ___bmul:	
 16365                           
 16366                           ;incstack = 0
 16367                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16368                           ;___bmul@multiplier stored from wreg
 16369  1C2D  0020               	movlb	0	; select bank0
 16370  1C2E  00A3               	movwf	___bmul@multiplier
 16371  1C2F  01A2               	clrf	___bmul@product
 16372  1C30                     l8369:	
 16373  1C30  1C23               	btfss	___bmul@multiplier,0
 16374  1C31  2C36               	goto	l8373
 16375  1C32  0820               	movf	___bmul@multiplicand,w
 16376  1C33  00A1               	movwf	??___bmul
 16377  1C34  0821               	movf	??___bmul,w
 16378  1C35  07A2               	addwf	___bmul@product,f
 16379  1C36                     l8373:	
 16380  1C36  1003               	clrc
 16381  1C37  0DA0               	rlf	___bmul@multiplicand,f
 16382  1C38  1003               	clrc
 16383  1C39  0CA3               	rrf	___bmul@multiplier,f
 16384  1C3A  08A3               	movf	___bmul@multiplier,f
 16385  1C3B  1D03               	skipz
 16386  1C3C  2C30               	goto	l8369
 16387  1C3D  0822               	movf	___bmul@product,w
 16388  1C3E  0008               	return
 16389  1C3F                     __end_of___bmul:	
 16390                           
 16391                           	psect	text101
 16392  1BD8                     __ptext101:	
 16393 ;; *************** function _getDimmerLights_Status *****************
 16394 ;; Defined at:
 16395 ;;		line 466 in file "../src/Dimmer_B1.c"
 16396 ;; Parameters:    Size  Location     Type
 16397 ;;  lights          1    wreg     unsigned char 
 16398 ;; Auto vars:     Size  Location     Type
 16399 ;;  lights          1    2[BANK0 ] unsigned char 
 16400 ;;  status          1    3[BANK0 ] unsigned char 
 16401 ;; Return value:  Size  Location     Type
 16402 ;;                  1    wreg      unsigned char 
 16403 ;; Registers used:
 16404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16405 ;; Tracked objects:
 16406 ;;		On entry : 0/0
 16407 ;;		On exit  : 0/0
 16408 ;;		Unchanged: 0/0
 16409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16411 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16413 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16414 ;;Total ram usage:        2 bytes
 16415 ;; Hardware stack levels used:    1
 16416 ;; Hardware stack levels required when called:    6
 16417 ;; This function calls:
 16418 ;;		_DimmerLightsPointSelect
 16419 ;; This function is called by:
 16420 ;;		_DlyOff_Main
 16421 ;;		_setDimmerLights_ErrorClose
 16422 ;;		_getMain_LightsStatus
 16423 ;;		_setRFSW_Control
 16424 ;;		_setRFSW_AdjControl
 16425 ;; This function uses a non-reentrant model
 16426 ;;
 16427                           
 16428                           
 16429                           ;psect for function _getDimmerLights_Status
 16430  1BD8                     _getDimmerLights_Status:	
 16431                           
 16432                           ;incstack = 0
 16433                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16434                           ;getDimmerLights_Status@lights stored from wreg
 16435  1BD8  0020               	movlb	0	; select bank0
 16436  1BD9  00A2               	movwf	getDimmerLights_Status@lights
 16437                           
 16438                           ;Dimmer_B1.c: 467: DimmerLightsPointSelect(lights);
 16439  1BDA  0822               	movf	getDimmerLights_Status@lights,w
 16440  1BDB  319C  2475         	fcall	_DimmerLightsPointSelect
 16441                           
 16442                           ;Dimmer_B1.c: 468: char status = DimmerLights->Status == 1 ? 1 : 0;
 16443  1BDD  0877               	movf	_DimmerLights,w
 16444  1BDE  0086               	movwf	6
 16445  1BDF  3001               	movlw	1	; select bank2/3
 16446  1BE0  0087               	movwf	7
 16447  1BE1  3000               	movlw	0
 16448  1BE2  1A81               	btfsc	1,5
 16449  1BE3  3001               	movlw	1
 16450  1BE4  0020               	movlb	0	; select bank0
 16451  1BE5  00A3               	movwf	getDimmerLights_Status@status
 16452                           
 16453                           ;Dimmer_B1.c: 469: return status;
 16454  1BE6  0823               	movf	getDimmerLights_Status@status,w
 16455  1BE7  0008               	return
 16456  1BE8                     __end_of_getDimmerLights_Status:	
 16457                           
 16458                           	psect	text102
 16459  1C75                     __ptext102:	
 16460 ;; *************** function _DimmerLightsPointSelect *****************
 16461 ;; Defined at:
 16462 ;;		line 323 in file "../src/Dimmer_B1.c"
 16463 ;; Parameters:    Size  Location     Type
 16464 ;;  lights          1    wreg     unsigned char 
 16465 ;; Auto vars:     Size  Location     Type
 16466 ;;  lights          1    1[BANK0 ] unsigned char 
 16467 ;; Return value:  Size  Location     Type
 16468 ;;		None               void
 16469 ;; Registers used:
 16470 ;;		wreg
 16471 ;; Tracked objects:
 16472 ;;		On entry : 0/0
 16473 ;;		On exit  : 0/0
 16474 ;;		Unchanged: 0/0
 16475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16478 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16479 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16480 ;;Total ram usage:        2 bytes
 16481 ;; Hardware stack levels used:    1
 16482 ;; Hardware stack levels required when called:    5
 16483 ;; This function calls:
 16484 ;;		Nothing
 16485 ;; This function is called by:
 16486 ;;		_setDimmerLights_Initialization
 16487 ;;		_setDimmerLights_Main
 16488 ;;		_getDimmerLights_Status
 16489 ;;		_setDimmerLights_SwOn
 16490 ;;		_setDimmerLights_SwOff
 16491 ;;		_setDimmerLights_AdjControl
 16492 ;;		_setDimmerLights_ErrorClose
 16493 ;;		_setDimmerLights
 16494 ;;		_setDimmerLights_Adj
 16495 ;;		_setDimmerLights_AdjRF
 16496 ;;		_setDimmerLights_Trigger
 16497 ;;		_setDimmerLights_TriggerAdj
 16498 ;;		_setDimmerLights_Status
 16499 ;;		_setDimmerLights_GO
 16500 ;;		_setDimmerLights_MaxmumValue
 16501 ;; This function uses a non-reentrant model
 16502 ;;
 16503                           
 16504                           
 16505                           ;psect for function _DimmerLightsPointSelect
 16506  1C75                     _DimmerLightsPointSelect:	
 16507                           
 16508                           ;incstack = 0
 16509                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16510                           ;DimmerLightsPointSelect@lights stored from wreg
 16511  1C75  0020               	movlb	0	; select bank0
 16512  1C76  00A1               	movwf	DimmerLightsPointSelect@lights
 16513                           
 16514                           ;Dimmer_B1.c: 325: if (lights == 1) {
 16515  1C77  0821               	movf	DimmerLightsPointSelect@lights,w
 16516  1C78  3A01               	xorlw	1
 16517  1C79  1D03               	skipz
 16518  1C7A  2C7F               	goto	l786
 16519                           
 16520                           ;Dimmer_B1.c: 326: DimmerLights = &DimmerLights1;
 16521  1C7B  30BE               	movlw	_DimmerLights1& (0+255)
 16522  1C7C  00A0               	movwf	??_DimmerLightsPointSelect
 16523  1C7D  0820               	movf	??_DimmerLightsPointSelect,w
 16524  1C7E  00F7               	movwf	_DimmerLights
 16525  1C7F                     l786:	
 16526                           
 16527                           ;Dimmer_B1.c: 327: }
 16528                           ;Dimmer_B1.c: 330: if (lights == 2) {
 16529  1C7F  0821               	movf	DimmerLightsPointSelect@lights,w
 16530  1C80  3A02               	xorlw	2
 16531  1C81  1D03               	skipz
 16532  1C82  0008               	return
 16533                           
 16534                           ;Dimmer_B1.c: 331: DimmerLights = &DimmerLights2;
 16535  1C83  30CD               	movlw	_DimmerLights2& (0+255)
 16536  1C84  00A0               	movwf	??_DimmerLightsPointSelect
 16537  1C85  0820               	movf	??_DimmerLightsPointSelect,w
 16538  1C86  00F7               	movwf	_DimmerLights
 16539  1C87  0008               	return
 16540  1C88                     __end_of_DimmerLightsPointSelect:	
 16541                           
 16542                           	psect	text103
 16543  1AFB                     __ptext103:	
 16544 ;; *************** function _DelayOff_Initialization *****************
 16545 ;; Defined at:
 16546 ;;		line 26 in file "../src/DelayOff_B1.c"
 16547 ;; Parameters:    Size  Location     Type
 16548 ;;		None
 16549 ;; Auto vars:     Size  Location     Type
 16550 ;;		None
 16551 ;; Return value:  Size  Location     Type
 16552 ;;		None               void
 16553 ;; Registers used:
 16554 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16555 ;; Tracked objects:
 16556 ;;		On entry : 0/0
 16557 ;;		On exit  : 0/0
 16558 ;;		Unchanged: 0/0
 16559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16564 ;;Total ram usage:        0 bytes
 16565 ;; Hardware stack levels used:    1
 16566 ;; Hardware stack levels required when called:    7
 16567 ;; This function calls:
 16568 ;;		_DlyOff_Initialization
 16569 ;; This function is called by:
 16570 ;;		_main
 16571 ;; This function uses a non-reentrant model
 16572 ;;
 16573                           
 16574                           
 16575                           ;psect for function _DelayOff_Initialization
 16576  1AFB                     _DelayOff_Initialization:	
 16577                           
 16578                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16579                           
 16580                           ;incstack = 0
 16581                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16582  1AFB  3001               	movlw	1
 16583  1AFC  319B  232C  319A   	fcall	_DlyOff_Initialization
 16584                           
 16585                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16586  1AFF  3002               	movlw	2
 16587  1B00  319B  232C         	fcall	_DlyOff_Initialization
 16588  1B02  0008               	return
 16589  1B03                     __end_of_DelayOff_Initialization:	
 16590                           
 16591                           	psect	text104
 16592  1B2C                     __ptext104:	
 16593 ;; *************** function _DlyOff_Initialization *****************
 16594 ;; Defined at:
 16595 ;;		line 56 in file "../src/DelayOff_B1.c"
 16596 ;; Parameters:    Size  Location     Type
 16597 ;;  sw              1    wreg     unsigned char 
 16598 ;; Auto vars:     Size  Location     Type
 16599 ;;  sw              1    2[BANK0 ] unsigned char 
 16600 ;; Return value:  Size  Location     Type
 16601 ;;		None               void
 16602 ;; Registers used:
 16603 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16604 ;; Tracked objects:
 16605 ;;		On entry : 0/0
 16606 ;;		On exit  : 0/0
 16607 ;;		Unchanged: 0/0
 16608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16612 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16613 ;;Total ram usage:        1 bytes
 16614 ;; Hardware stack levels used:    1
 16615 ;; Hardware stack levels required when called:    6
 16616 ;; This function calls:
 16617 ;;		_DelayOffPointSelect
 16618 ;; This function is called by:
 16619 ;;		_DelayOff_Initialization
 16620 ;; This function uses a non-reentrant model
 16621 ;;
 16622                           
 16623                           
 16624                           ;psect for function _DlyOff_Initialization
 16625  1B2C                     _DlyOff_Initialization:	
 16626                           
 16627                           ;incstack = 0
 16628                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16629                           ;DlyOff_Initialization@sw stored from wreg
 16630  1B2C  0020               	movlb	0	; select bank0
 16631  1B2D  00A2               	movwf	DlyOff_Initialization@sw
 16632                           
 16633                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16634  1B2E  0822               	movf	DlyOff_Initialization@sw,w
 16635  1B2F  319C  24C2         	fcall	_DelayOffPointSelect
 16636                           
 16637                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 16638  1B31  0876               	movf	_DelayOff,w
 16639  1B32  0086               	movwf	6
 16640  1B33  3001               	movlw	1	; select bank2/3
 16641  1B34  0087               	movwf	7
 16642  1B35  1401               	bsf	1,0
 16643  1B36  0008               	return
 16644  1B37                     __end_of_DlyOff_Initialization:	
 16645                           
 16646                           	psect	text105
 16647  1CC2                     __ptext105:	
 16648 ;; *************** function _DelayOffPointSelect *****************
 16649 ;; Defined at:
 16650 ;;		line 7 in file "../src/DelayOff_B1.c"
 16651 ;; Parameters:    Size  Location     Type
 16652 ;;  sw              1    wreg     unsigned char 
 16653 ;; Auto vars:     Size  Location     Type
 16654 ;;  sw              1    1[BANK0 ] unsigned char 
 16655 ;; Return value:  Size  Location     Type
 16656 ;;		None               void
 16657 ;; Registers used:
 16658 ;;		wreg
 16659 ;; Tracked objects:
 16660 ;;		On entry : 0/0
 16661 ;;		On exit  : 0/0
 16662 ;;		Unchanged: 0/0
 16663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16667 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16668 ;;Total ram usage:        2 bytes
 16669 ;; Hardware stack levels used:    1
 16670 ;; Hardware stack levels required when called:    5
 16671 ;; This function calls:
 16672 ;;		Nothing
 16673 ;; This function is called by:
 16674 ;;		_DlyOff_Initialization
 16675 ;;		_DlyOff_Main
 16676 ;;		_setDelayOff_GO
 16677 ;; This function uses a non-reentrant model
 16678 ;;
 16679                           
 16680                           
 16681                           ;psect for function _DelayOffPointSelect
 16682  1CC2                     _DelayOffPointSelect:	
 16683                           
 16684                           ;incstack = 0
 16685                           ; Regs used in _DelayOffPointSelect: [wreg]
 16686                           ;DelayOffPointSelect@sw stored from wreg
 16687  1CC2  0020               	movlb	0	; select bank0
 16688  1CC3  00A1               	movwf	DelayOffPointSelect@sw
 16689                           
 16690                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16691  1CC4  0821               	movf	DelayOffPointSelect@sw,w
 16692  1CC5  3A01               	xorlw	1
 16693  1CC6  1D03               	skipz
 16694  1CC7  2CCD               	goto	l8607
 16695                           
 16696                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16697  1CC8  3069               	movlw	_DlySw1& (0+255)
 16698  1CC9  00A0               	movwf	??_DelayOffPointSelect
 16699  1CCA  0820               	movf	??_DelayOffPointSelect,w
 16700  1CCB  00F6               	movwf	_DelayOff
 16701                           
 16702                           ;DelayOff_B1.c: 11: }
 16703  1CCC  0008               	return
 16704  1CCD                     l8607:	
 16705                           
 16706                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 16707  1CCD  0821               	movf	DelayOffPointSelect@sw,w
 16708  1CCE  3A02               	xorlw	2
 16709  1CCF  1D03               	skipz
 16710  1CD0  0008               	return
 16711                           
 16712                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 16713  1CD1  306B               	movlw	_DlySw2& (0+255)
 16714  1CD2  00A0               	movwf	??_DelayOffPointSelect
 16715  1CD3  0820               	movf	??_DelayOffPointSelect,w
 16716  1CD4  00F6               	movwf	_DelayOff
 16717  1CD5  0008               	return
 16718  1CD6                     __end_of_DelayOffPointSelect:	
 16719                           
 16720                           	psect	text106
 16721  1D13                     __ptext106:	
 16722 ;; *************** function _CC2500_PowerOnInitial *****************
 16723 ;; Defined at:
 16724 ;;		line 122 in file "../src/CC2500_B1.c"
 16725 ;; Parameters:    Size  Location     Type
 16726 ;;		None
 16727 ;; Auto vars:     Size  Location     Type
 16728 ;;		None
 16729 ;; Return value:  Size  Location     Type
 16730 ;;		None               void
 16731 ;; Registers used:
 16732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16733 ;; Tracked objects:
 16734 ;;		On entry : 0/0
 16735 ;;		On exit  : 0/0
 16736 ;;		Unchanged: 0/0
 16737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;Total ram usage:        0 bytes
 16743 ;; Hardware stack levels used:    1
 16744 ;; Hardware stack levels required when called:    8
 16745 ;; This function calls:
 16746 ;;		_CC2500_ClearRXFIFO
 16747 ;;		_CC2500_ClearTXFIFO
 16748 ;;		_CC2500_FrequencyCabr
 16749 ;;		_CC2500_InitPATable
 16750 ;;		_CC2500_InitSetREG
 16751 ;;		_CC2500_PowerRST
 16752 ;;		_CC2500_SIDLEMode
 16753 ;; This function is called by:
 16754 ;;		_main
 16755 ;; This function uses a non-reentrant model
 16756 ;;
 16757                           
 16758                           
 16759                           ;psect for function _CC2500_PowerOnInitial
 16760  1D13                     _CC2500_PowerOnInitial:	
 16761                           
 16762                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 16763                           
 16764                           ;incstack = 0
 16765                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16766  1D13  3192  22E4  319D   	fcall	_CC2500_PowerRST
 16767                           
 16768                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 16769  1D16  3190  2085  319D   	fcall	_CC2500_InitSetREG
 16770                           
 16771                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 16772  1D19  319E  2611  319D   	fcall	_CC2500_InitPATable
 16773                           
 16774                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 16775  1D1C  319A  22CA  319D   	fcall	_CC2500_ClearTXFIFO
 16776                           
 16777                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 16778  1D1F  319A  22C6  319D   	fcall	_CC2500_ClearRXFIFO
 16779                           
 16780                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 16781  1D22  319B  2342  319D   	fcall	_CC2500_FrequencyCabr
 16782                           
 16783                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 16784  1D25  319A  22CE         	fcall	_CC2500_SIDLEMode
 16785  1D27  0008               	return
 16786  1D28                     __end_of_CC2500_PowerOnInitial:	
 16787                           
 16788                           	psect	text107
 16789  1ACE                     __ptext107:	
 16790 ;; *************** function _CC2500_SIDLEMode *****************
 16791 ;; Defined at:
 16792 ;;		line 212 in file "../src/CC2500_B1.c"
 16793 ;; Parameters:    Size  Location     Type
 16794 ;;		None
 16795 ;; Auto vars:     Size  Location     Type
 16796 ;;		None
 16797 ;; Return value:  Size  Location     Type
 16798 ;;		None               void
 16799 ;; Registers used:
 16800 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16801 ;; Tracked objects:
 16802 ;;		On entry : 0/0
 16803 ;;		On exit  : 0/0
 16804 ;;		Unchanged: 0/0
 16805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16810 ;;Total ram usage:        0 bytes
 16811 ;; Hardware stack levels used:    1
 16812 ;; Hardware stack levels required when called:    7
 16813 ;; This function calls:
 16814 ;;		_CC2500_WriteCommand
 16815 ;; This function is called by:
 16816 ;;		_CC2500_PowerOnInitial
 16817 ;; This function uses a non-reentrant model
 16818 ;;
 16819                           
 16820                           
 16821                           ;psect for function _CC2500_SIDLEMode
 16822  1ACE                     _CC2500_SIDLEMode:	
 16823                           
 16824                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 16825                           
 16826                           ;incstack = 0
 16827                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16828  1ACE  3036               	movlw	54
 16829  1ACF  319D  2586         	fcall	_CC2500_WriteCommand
 16830  1AD1  0008               	return
 16831  1AD2                     __end_of_CC2500_SIDLEMode:	
 16832                           
 16833                           	psect	text108
 16834  12E4                     __ptext108:	
 16835 ;; *************** function _CC2500_PowerRST *****************
 16836 ;; Defined at:
 16837 ;;		line 135 in file "../src/CC2500_B1.c"
 16838 ;; Parameters:    Size  Location     Type
 16839 ;;		None
 16840 ;; Auto vars:     Size  Location     Type
 16841 ;;		None
 16842 ;; Return value:  Size  Location     Type
 16843 ;;		None               void
 16844 ;; Registers used:
 16845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16846 ;; Tracked objects:
 16847 ;;		On entry : 0/0
 16848 ;;		On exit  : 0/0
 16849 ;;		Unchanged: 0/0
 16850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16853 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16854 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16855 ;;Total ram usage:        1 bytes
 16856 ;; Hardware stack levels used:    1
 16857 ;; Hardware stack levels required when called:    6
 16858 ;; This function calls:
 16859 ;;		_CC2500_WriteByte
 16860 ;;		_DelayTime_1us
 16861 ;;		_Timeout_Counter
 16862 ;;		_set_TimeoutCleared
 16863 ;; This function is called by:
 16864 ;;		_CC2500_PowerOnInitial
 16865 ;; This function uses a non-reentrant model
 16866 ;;
 16867                           
 16868                           
 16869                           ;psect for function _CC2500_PowerRST
 16870  12E4                     _CC2500_PowerRST:	
 16871                           
 16872                           ;CC2500_B1.c: 136: RC1 = 0;
 16873                           
 16874                           ;incstack = 0
 16875                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16876  12E4  0020               	movlb	0	; select bank0
 16877  12E5  108E               	bcf	14,1	;volatile
 16878                           
 16879                           ;CC2500_B1.c: 137: RC0 = 0;
 16880  12E6  100E               	bcf	14,0	;volatile
 16881                           
 16882                           ;CC2500_B1.c: 138: RC4 = 1;
 16883  12E7  160E               	bsf	14,4	;volatile
 16884                           
 16885                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 16886  12E8  300A               	movlw	10
 16887  12E9  00A0               	movwf	DelayTime_1us@count
 16888  12EA  3000               	movlw	0
 16889  12EB  00A1               	movwf	DelayTime_1us@count+1
 16890  12EC  319F  2762  3192   	fcall	_DelayTime_1us
 16891                           
 16892                           ;CC2500_B1.c: 140: RC4 = 0;
 16893  12EF  0020               	movlb	0	; select bank0
 16894  12F0  120E               	bcf	14,4	;volatile
 16895                           
 16896                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 16897  12F1  300A               	movlw	10
 16898  12F2  00A0               	movwf	DelayTime_1us@count
 16899  12F3  3000               	movlw	0
 16900  12F4  00A1               	movwf	DelayTime_1us@count+1
 16901  12F5  319F  2762  3192   	fcall	_DelayTime_1us
 16902                           
 16903                           ;CC2500_B1.c: 142: RC4 = 1;
 16904  12F8  0020               	movlb	0	; select bank0
 16905  12F9  160E               	bsf	14,4	;volatile
 16906                           
 16907                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 16908  12FA  3028               	movlw	40
 16909  12FB  00A0               	movwf	DelayTime_1us@count
 16910  12FC  3000               	movlw	0
 16911  12FD  00A1               	movwf	DelayTime_1us@count+1
 16912  12FE  319F  2762  3192   	fcall	_DelayTime_1us
 16913                           
 16914                           ;CC2500_B1.c: 144: RC4 = 0;
 16915  1301  0020               	movlb	0	; select bank0
 16916  1302  120E               	bcf	14,4	;volatile
 16917                           
 16918                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 16919  1303  3030               	movlw	48
 16920  1304  00A6               	movwf	??_CC2500_PowerRST
 16921  1305  0826               	movf	??_CC2500_PowerRST,w
 16922  1306  0021               	movlb	1	; select bank1
 16923  1307  00D2               	movwf	_SPI0Buffer^(0+128)
 16924                           
 16925                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 16926  1308  2B0C               	goto	l9577
 16927  1309                     l9575:	
 16928                           
 16929                           ;CC2500_B1.c: 147: Timeout_Counter();
 16930  1309  319C  24FE  3192   	fcall	_Timeout_Counter
 16931  130C                     l9577:	
 16932  130C  0020               	movlb	0	; select bank0
 16933  130D  1D0E               	btfss	14,2	;volatile
 16934  130E  2B12               	goto	l9581
 16935  130F  0021               	movlb	1	; select bank1
 16936  1310  1D2D               	btfss	(_myMain^(0+128)+13),2
 16937  1311  2B09               	goto	l9575
 16938  1312                     l9581:	
 16939                           
 16940                           ;CC2500_B1.c: 148: };
 16941                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 16942  1312  319A  22D6  3192   	fcall	_set_TimeoutCleared
 16943                           
 16944                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 16945  1315  319D  2554  3192   	fcall	_CC2500_WriteByte
 16946                           
 16947                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 16948  1318  2B1C               	goto	l9587
 16949  1319                     l9585:	
 16950                           
 16951                           ;CC2500_B1.c: 152: Timeout_Counter();
 16952  1319  319C  24FE  3192   	fcall	_Timeout_Counter
 16953  131C                     l9587:	
 16954  131C  0020               	movlb	0	; select bank0
 16955  131D  1D0E               	btfss	14,2	;volatile
 16956  131E  2B22               	goto	l9591
 16957  131F  0021               	movlb	1	; select bank1
 16958  1320  1D2D               	btfss	(_myMain^(0+128)+13),2
 16959  1321  2B19               	goto	l9585
 16960  1322                     l9591:	
 16961                           
 16962                           ;CC2500_B1.c: 153: };
 16963                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 16964  1322  319A  22D6         	fcall	_set_TimeoutCleared
 16965                           
 16966                           ;CC2500_B1.c: 155: RC0 = 0;
 16967  1324  0020               	movlb	0	; select bank0
 16968  1325  100E               	bcf	14,0	;volatile
 16969                           
 16970                           ;CC2500_B1.c: 156: RC4 = 1;
 16971  1326  160E               	bsf	14,4	;volatile
 16972  1327  0008               	return
 16973  1328                     __end_of_CC2500_PowerRST:	
 16974                           
 16975                           	psect	text109
 16976  1085                     __ptext109:	
 16977 ;; *************** function _CC2500_InitSetREG *****************
 16978 ;; Defined at:
 16979 ;;		line 162 in file "../src/CC2500_B1.c"
 16980 ;; Parameters:    Size  Location     Type
 16981 ;;		None
 16982 ;; Auto vars:     Size  Location     Type
 16983 ;;  loop_c          1    8[BANK0 ] unsigned char 
 16984 ;;  temp2           1    7[BANK0 ] unsigned char 
 16985 ;;  temp1           1    6[BANK0 ] unsigned char 
 16986 ;; Return value:  Size  Location     Type
 16987 ;;		None               void
 16988 ;; Registers used:
 16989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16990 ;; Tracked objects:
 16991 ;;		On entry : 0/0
 16992 ;;		On exit  : 0/0
 16993 ;;		Unchanged: 0/0
 16994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16996 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16997 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16998 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16999 ;;Total ram usage:        4 bytes
 17000 ;; Hardware stack levels used:    1
 17001 ;; Hardware stack levels required when called:    7
 17002 ;; This function calls:
 17003 ;;		_CC2500_WriteREG
 17004 ;; This function is called by:
 17005 ;;		_CC2500_PowerOnInitial
 17006 ;; This function uses a non-reentrant model
 17007 ;;
 17008                           
 17009                           
 17010                           ;psect for function _CC2500_InitSetREG
 17011  1085                     _CC2500_InitSetREG:	
 17012                           
 17013                           ;CC2500_B1.c: 163: unsigned char loop_c;
 17014                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 17015                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 17016                           
 17017                           ;incstack = 0
 17018                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17019  1085  0020               	movlb	0	; select bank0
 17020  1086  01A8               	clrf	CC2500_InitSetREG@loop_c
 17021  1087                     L12:	
 17022  1087  302F               	movlw	47
 17023  1088  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17024  1089  1803               	btfsc	3,0
 17025  108A  0008               	return
 17026                           
 17027                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 17028  108B  0828               	movf	CC2500_InitSetREG@loop_c,w
 17029  108C  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17030  108D  0084               	movwf	4
 17031  108E  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17032  108F  1803               	skipnc
 17033  1090  3E01               	addlw	1
 17034  1091  0085               	movwf	5
 17035  1092  0800               	movf	0,w	;code access
 17036  1093  00A5               	movwf	??_CC2500_InitSetREG
 17037  1094  0825               	movf	??_CC2500_InitSetREG,w
 17038  1095  00A6               	movwf	CC2500_InitSetREG@temp1
 17039                           
 17040                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 17041  1096  0828               	movf	CC2500_InitSetREG@loop_c,w
 17042  1097  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17043  1098  0084               	movwf	4
 17044  1099  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17045  109A  1803               	skipnc
 17046  109B  3E01               	addlw	1
 17047  109C  0085               	movwf	5
 17048  109D  0800               	movf	0,w	;code access
 17049  109E  00A5               	movwf	??_CC2500_InitSetREG
 17050  109F  0825               	movf	??_CC2500_InitSetREG,w
 17051  10A0  00A7               	movwf	CC2500_InitSetREG@temp2
 17052                           
 17053                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 17054  10A1  0827               	movf	CC2500_InitSetREG@temp2,w
 17055  10A2  00A5               	movwf	??_CC2500_InitSetREG
 17056  10A3  0825               	movf	??_CC2500_InitSetREG,w
 17057  10A4  00A2               	movwf	CC2500_WriteREG@value
 17058  10A5  0826               	movf	CC2500_InitSetREG@temp1,w
 17059  10A6  319E  26F6  3190   	fcall	_CC2500_WriteREG
 17060  10A9  3001               	movlw	1
 17061  10AA  0020               	movlb	0	; select bank0
 17062  10AB  00A5               	movwf	??_CC2500_InitSetREG
 17063  10AC  0825               	movf	??_CC2500_InitSetREG,w
 17064  10AD  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17065  10AE  2887               	goto	L12
 17066  10AF                     __end_of_CC2500_InitSetREG:	
 17067                           
 17068                           	psect	text110
 17069  1E11                     __ptext110:	
 17070 ;; *************** function _CC2500_InitPATable *****************
 17071 ;; Defined at:
 17072 ;;		line 177 in file "../src/CC2500_B1.c"
 17073 ;; Parameters:    Size  Location     Type
 17074 ;;		None
 17075 ;; Auto vars:     Size  Location     Type
 17076 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17077 ;;  temp            1    6[BANK0 ] unsigned char 
 17078 ;; Return value:  Size  Location     Type
 17079 ;;		None               void
 17080 ;; Registers used:
 17081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17082 ;; Tracked objects:
 17083 ;;		On entry : 0/0
 17084 ;;		On exit  : 0/0
 17085 ;;		Unchanged: 0/0
 17086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17088 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17090 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17091 ;;Total ram usage:        3 bytes
 17092 ;; Hardware stack levels used:    1
 17093 ;; Hardware stack levels required when called:    7
 17094 ;; This function calls:
 17095 ;;		_CC2500_WriteREG
 17096 ;; This function is called by:
 17097 ;;		_CC2500_PowerOnInitial
 17098 ;; This function uses a non-reentrant model
 17099 ;;
 17100                           
 17101                           
 17102                           ;psect for function _CC2500_InitPATable
 17103  1E11                     _CC2500_InitPATable:	
 17104                           
 17105                           ;CC2500_B1.c: 178: unsigned char loop_d;
 17106                           ;CC2500_B1.c: 179: unsigned char temp;
 17107                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 17108                           
 17109                           ;incstack = 0
 17110                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17111  1E11  0020               	movlb	0	; select bank0
 17112  1E12  01A7               	clrf	CC2500_InitPATable@loop_d
 17113  1E13                     L13:	
 17114  1E13  3008               	movlw	8
 17115  1E14  0227               	subwf	CC2500_InitPATable@loop_d,w
 17116  1E15  1803               	btfsc	3,0
 17117  1E16  0008               	return
 17118                           
 17119                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 17120  1E17  0827               	movf	CC2500_InitPATable@loop_d,w
 17121  1E18  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17122  1E19  0084               	movwf	4
 17123  1E1A  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17124  1E1B  1803               	skipnc
 17125  1E1C  3E01               	addlw	1
 17126  1E1D  0085               	movwf	5
 17127  1E1E  0800               	movf	0,w	;code access
 17128  1E1F  00A5               	movwf	??_CC2500_InitPATable
 17129  1E20  0825               	movf	??_CC2500_InitPATable,w
 17130  1E21  00A6               	movwf	CC2500_InitPATable@temp
 17131                           
 17132                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 17133  1E22  0826               	movf	CC2500_InitPATable@temp,w
 17134  1E23  00A5               	movwf	??_CC2500_InitPATable
 17135  1E24  0825               	movf	??_CC2500_InitPATable,w
 17136  1E25  00A2               	movwf	CC2500_WriteREG@value
 17137  1E26  303E               	movlw	62
 17138  1E27  319E  26F6  319E   	fcall	_CC2500_WriteREG
 17139  1E2A  3001               	movlw	1
 17140  1E2B  0020               	movlb	0	; select bank0
 17141  1E2C  00A5               	movwf	??_CC2500_InitPATable
 17142  1E2D  0825               	movf	??_CC2500_InitPATable,w
 17143  1E2E  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17144  1E2F  2E13               	goto	L13
 17145  1E30                     __end_of_CC2500_InitPATable:	
 17146                           
 17147                           	psect	text111
 17148  1EF6                     __ptext111:	
 17149 ;; *************** function _CC2500_WriteREG *****************
 17150 ;; Defined at:
 17151 ;;		line 254 in file "../src/CC2500_B1.c"
 17152 ;; Parameters:    Size  Location     Type
 17153 ;;  w_addr          1    wreg     unsigned char 
 17154 ;;  value           1    2[BANK0 ] unsigned char 
 17155 ;; Auto vars:     Size  Location     Type
 17156 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17157 ;; Return value:  Size  Location     Type
 17158 ;;		None               void
 17159 ;; Registers used:
 17160 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17161 ;; Tracked objects:
 17162 ;;		On entry : 0/0
 17163 ;;		On exit  : 0/0
 17164 ;;		Unchanged: 0/0
 17165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17166 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17167 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17169 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17170 ;;Total ram usage:        3 bytes
 17171 ;; Hardware stack levels used:    1
 17172 ;; Hardware stack levels required when called:    6
 17173 ;; This function calls:
 17174 ;;		_CC2500_WriteByte
 17175 ;;		_Timeout_Counter
 17176 ;;		_set_TimeoutCleared
 17177 ;; This function is called by:
 17178 ;;		_CC2500_InitSetREG
 17179 ;;		_CC2500_InitPATable
 17180 ;; This function uses a non-reentrant model
 17181 ;;
 17182                           
 17183                           
 17184                           ;psect for function _CC2500_WriteREG
 17185  1EF6                     _CC2500_WriteREG:	
 17186                           
 17187                           ;incstack = 0
 17188                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17189                           ;CC2500_WriteREG@w_addr stored from wreg
 17190  1EF6  0020               	movlb	0	; select bank0
 17191  1EF7  00A4               	movwf	CC2500_WriteREG@w_addr
 17192                           
 17193                           ;CC2500_B1.c: 255: RC4 = 0;
 17194  1EF8  120E               	bcf	14,4	;volatile
 17195                           
 17196                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17197  1EF9  0824               	movf	CC2500_WriteREG@w_addr,w
 17198  1EFA  00A3               	movwf	??_CC2500_WriteREG
 17199  1EFB  0823               	movf	??_CC2500_WriteREG,w
 17200  1EFC  0021               	movlb	1	; select bank1
 17201  1EFD  00D2               	movwf	_SPI0Buffer^(0+128)
 17202                           
 17203                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 17204  1EFE  2F02               	goto	l9277
 17205  1EFF                     l9275:	
 17206                           
 17207                           ;CC2500_B1.c: 258: Timeout_Counter();
 17208  1EFF  319C  24FE  319E   	fcall	_Timeout_Counter
 17209  1F02                     l9277:	
 17210  1F02  0020               	movlb	0	; select bank0
 17211  1F03  1D0E               	btfss	14,2	;volatile
 17212  1F04  2F08               	goto	l9281
 17213  1F05  0021               	movlb	1	; select bank1
 17214  1F06  1D2D               	btfss	(_myMain^(0+128)+13),2
 17215  1F07  2EFF               	goto	l9275
 17216  1F08                     l9281:	
 17217                           
 17218                           ;CC2500_B1.c: 259: };
 17219                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17220  1F08  319A  22D6  319E   	fcall	_set_TimeoutCleared
 17221                           
 17222                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17223  1F0B  319D  2554  319E   	fcall	_CC2500_WriteByte
 17224                           
 17225                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17226  1F0E  0020               	movlb	0	; select bank0
 17227  1F0F  0822               	movf	CC2500_WriteREG@value,w
 17228  1F10  00A3               	movwf	??_CC2500_WriteREG
 17229  1F11  0823               	movf	??_CC2500_WriteREG,w
 17230  1F12  0021               	movlb	1	; select bank1
 17231  1F13  00D2               	movwf	_SPI0Buffer^(0+128)
 17232                           
 17233                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17234  1F14  319D  2554         	fcall	_CC2500_WriteByte
 17235                           
 17236                           ;CC2500_B1.c: 265: RC4 = 1;
 17237  1F16  0020               	movlb	0	; select bank0
 17238  1F17  160E               	bsf	14,4	;volatile
 17239  1F18  0008               	return
 17240  1F19                     __end_of_CC2500_WriteREG:	
 17241                           
 17242                           	psect	text112
 17243  1B42                     __ptext112:	
 17244 ;; *************** function _CC2500_FrequencyCabr *****************
 17245 ;; Defined at:
 17246 ;;		line 204 in file "../src/CC2500_B1.c"
 17247 ;; Parameters:    Size  Location     Type
 17248 ;;		None
 17249 ;; Auto vars:     Size  Location     Type
 17250 ;;		None
 17251 ;; Return value:  Size  Location     Type
 17252 ;;		None               void
 17253 ;; Registers used:
 17254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17255 ;; Tracked objects:
 17256 ;;		On entry : 0/0
 17257 ;;		On exit  : 0/0
 17258 ;;		Unchanged: 0/0
 17259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17264 ;;Total ram usage:        0 bytes
 17265 ;; Hardware stack levels used:    1
 17266 ;; Hardware stack levels required when called:    7
 17267 ;; This function calls:
 17268 ;;		_CC2500_WriteCommand
 17269 ;;		_DelayTime_1us
 17270 ;; This function is called by:
 17271 ;;		_CC2500_PowerOnInitial
 17272 ;; This function uses a non-reentrant model
 17273 ;;
 17274                           
 17275                           
 17276                           ;psect for function _CC2500_FrequencyCabr
 17277  1B42                     _CC2500_FrequencyCabr:	
 17278                           
 17279                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17280                           
 17281                           ;incstack = 0
 17282                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17283  1B42  3033               	movlw	51
 17284  1B43  319D  2586  319B   	fcall	_CC2500_WriteCommand
 17285                           
 17286                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17287  1B46  30E8               	movlw	232
 17288  1B47  0020               	movlb	0	; select bank0
 17289  1B48  00A0               	movwf	DelayTime_1us@count
 17290  1B49  3003               	movlw	3
 17291  1B4A  00A1               	movwf	DelayTime_1us@count+1
 17292  1B4B  319F  2762         	fcall	_DelayTime_1us
 17293  1B4D  0008               	return
 17294  1B4E                     __end_of_CC2500_FrequencyCabr:	
 17295                           
 17296                           	psect	text113
 17297  1F62                     __ptext113:	
 17298 ;; *************** function _DelayTime_1us *****************
 17299 ;; Defined at:
 17300 ;;		line 323 in file "../src/CC2500_B1.c"
 17301 ;; Parameters:    Size  Location     Type
 17302 ;;  count           2    0[BANK0 ] int 
 17303 ;; Auto vars:     Size  Location     Type
 17304 ;;  j               2    4[BANK0 ] unsigned int 
 17305 ;;  i               2    2[BANK0 ] unsigned int 
 17306 ;; Return value:  Size  Location     Type
 17307 ;;		None               void
 17308 ;; Registers used:
 17309 ;;		wreg, status,2
 17310 ;; Tracked objects:
 17311 ;;		On entry : 0/0
 17312 ;;		On exit  : 0/0
 17313 ;;		Unchanged: 0/0
 17314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17315 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17316 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17318 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17319 ;;Total ram usage:        6 bytes
 17320 ;; Hardware stack levels used:    1
 17321 ;; Hardware stack levels required when called:    5
 17322 ;; This function calls:
 17323 ;;		Nothing
 17324 ;; This function is called by:
 17325 ;;		_CC2500_PowerRST
 17326 ;;		_CC2500_FrequencyCabr
 17327 ;; This function uses a non-reentrant model
 17328 ;;
 17329                           
 17330                           
 17331                           ;psect for function _DelayTime_1us
 17332  1F62                     _DelayTime_1us:	
 17333                           
 17334                           ;CC2500_B1.c: 324: unsigned int i, j;
 17335                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 17336                           
 17337                           ;incstack = 0
 17338                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17339  1F62  3001               	movlw	1
 17340  1F63  0020               	movlb	0	; select bank0
 17341  1F64  00A2               	movwf	DelayTime_1us@i
 17342  1F65  3000               	movlw	0
 17343  1F66  00A3               	movwf	DelayTime_1us@i+1
 17344  1F67                     l374:	
 17345  1F67  0821               	movf	DelayTime_1us@count+1,w
 17346  1F68  0223               	subwf	DelayTime_1us@i+1,w
 17347  1F69  1D03               	skipz
 17348  1F6A  2F6D               	goto	u9945
 17349  1F6B  0820               	movf	DelayTime_1us@count,w
 17350  1F6C  0222               	subwf	DelayTime_1us@i,w
 17351  1F6D                     u9945:	
 17352  1F6D  1803               	btfsc	3,0
 17353  1F6E  0008               	return
 17354                           
 17355                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 17356  1F6F  01A4               	clrf	DelayTime_1us@j
 17357  1F70  01A5               	clrf	DelayTime_1us@j+1
 17358  1F71  3000               	movlw	0
 17359  1F72  0225               	subwf	DelayTime_1us@j+1,w
 17360  1F73  3002               	movlw	2
 17361  1F74  1903               	skipnz
 17362  1F75  0224               	subwf	DelayTime_1us@j,w
 17363  1F76  1803               	btfsc	3,0
 17364  1F77  2F83               	goto	l9269
 17365  1F78                     l9267:	
 17366  1F78  3001               	movlw	1
 17367  1F79  07A4               	addwf	DelayTime_1us@j,f
 17368  1F7A  3000               	movlw	0
 17369  1F7B  3DA5               	addwfc	DelayTime_1us@j+1,f
 17370  1F7C  3000               	movlw	0
 17371  1F7D  0225               	subwf	DelayTime_1us@j+1,w
 17372  1F7E  3002               	movlw	2
 17373  1F7F  1903               	skipnz
 17374  1F80  0224               	subwf	DelayTime_1us@j,w
 17375  1F81  1C03               	skipc
 17376  1F82  2F78               	goto	l9267
 17377  1F83                     l9269:	
 17378  1F83  3001               	movlw	1
 17379  1F84  07A2               	addwf	DelayTime_1us@i,f
 17380  1F85  3000               	movlw	0
 17381  1F86  3DA3               	addwfc	DelayTime_1us@i+1,f
 17382  1F87  2F67               	goto	l374
 17383  1F88                     __end_of_DelayTime_1us:	
 17384                           
 17385                           	psect	text114
 17386  1ACA                     __ptext114:	
 17387 ;; *************** function _CC2500_ClearTXFIFO *****************
 17388 ;; Defined at:
 17389 ;;		line 190 in file "../src/CC2500_B1.c"
 17390 ;; Parameters:    Size  Location     Type
 17391 ;;		None
 17392 ;; Auto vars:     Size  Location     Type
 17393 ;;		None
 17394 ;; Return value:  Size  Location     Type
 17395 ;;		None               void
 17396 ;; Registers used:
 17397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17398 ;; Tracked objects:
 17399 ;;		On entry : 0/0
 17400 ;;		On exit  : 0/0
 17401 ;;		Unchanged: 0/0
 17402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17407 ;;Total ram usage:        0 bytes
 17408 ;; Hardware stack levels used:    1
 17409 ;; Hardware stack levels required when called:    7
 17410 ;; This function calls:
 17411 ;;		_CC2500_WriteCommand
 17412 ;; This function is called by:
 17413 ;;		_CC2500_PowerOnInitial
 17414 ;; This function uses a non-reentrant model
 17415 ;;
 17416                           
 17417                           
 17418                           ;psect for function _CC2500_ClearTXFIFO
 17419  1ACA                     _CC2500_ClearTXFIFO:	
 17420                           
 17421                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 17422                           
 17423                           ;incstack = 0
 17424                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17425  1ACA  303B               	movlw	59
 17426  1ACB  319D  2586         	fcall	_CC2500_WriteCommand
 17427  1ACD  0008               	return
 17428  1ACE                     __end_of_CC2500_ClearTXFIFO:	
 17429                           
 17430                           	psect	text115
 17431  1AC6                     __ptext115:	
 17432 ;; *************** function _CC2500_ClearRXFIFO *****************
 17433 ;; Defined at:
 17434 ;;		line 197 in file "../src/CC2500_B1.c"
 17435 ;; Parameters:    Size  Location     Type
 17436 ;;		None
 17437 ;; Auto vars:     Size  Location     Type
 17438 ;;		None
 17439 ;; Return value:  Size  Location     Type
 17440 ;;		None               void
 17441 ;; Registers used:
 17442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17443 ;; Tracked objects:
 17444 ;;		On entry : 0/0
 17445 ;;		On exit  : 0/0
 17446 ;;		Unchanged: 0/0
 17447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17452 ;;Total ram usage:        0 bytes
 17453 ;; Hardware stack levels used:    1
 17454 ;; Hardware stack levels required when called:    7
 17455 ;; This function calls:
 17456 ;;		_CC2500_WriteCommand
 17457 ;; This function is called by:
 17458 ;;		_CC2500_PowerOnInitial
 17459 ;; This function uses a non-reentrant model
 17460 ;;
 17461                           
 17462                           
 17463                           ;psect for function _CC2500_ClearRXFIFO
 17464  1AC6                     _CC2500_ClearRXFIFO:	
 17465                           
 17466                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 17467                           
 17468                           ;incstack = 0
 17469                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17470  1AC6  303A               	movlw	58
 17471  1AC7  319D  2586         	fcall	_CC2500_WriteCommand
 17472  1AC9  0008               	return
 17473  1ACA                     __end_of_CC2500_ClearRXFIFO:	
 17474                           
 17475                           	psect	text116
 17476  1D86                     __ptext116:	
 17477 ;; *************** function _CC2500_WriteCommand *****************
 17478 ;; Defined at:
 17479 ;;		line 288 in file "../src/CC2500_B1.c"
 17480 ;; Parameters:    Size  Location     Type
 17481 ;;  command         1    wreg     unsigned char 
 17482 ;; Auto vars:     Size  Location     Type
 17483 ;;  command         1    3[BANK0 ] unsigned char 
 17484 ;; Return value:  Size  Location     Type
 17485 ;;		None               void
 17486 ;; Registers used:
 17487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17488 ;; Tracked objects:
 17489 ;;		On entry : 0/0
 17490 ;;		On exit  : 0/0
 17491 ;;		Unchanged: 0/0
 17492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17496 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17497 ;;Total ram usage:        2 bytes
 17498 ;; Hardware stack levels used:    1
 17499 ;; Hardware stack levels required when called:    6
 17500 ;; This function calls:
 17501 ;;		_CC2500_WriteByte
 17502 ;;		_Timeout_Counter
 17503 ;;		_set_TimeoutCleared
 17504 ;; This function is called by:
 17505 ;;		_CC2500_TxData
 17506 ;;		_CC2500_ClearTXFIFO
 17507 ;;		_CC2500_ClearRXFIFO
 17508 ;;		_CC2500_FrequencyCabr
 17509 ;;		_CC2500_SIDLEMode
 17510 ;;		_setRF_Main
 17511 ;;		_RF_RxDisable
 17512 ;; This function uses a non-reentrant model
 17513 ;;
 17514                           
 17515                           
 17516                           ;psect for function _CC2500_WriteCommand
 17517  1D86                     _CC2500_WriteCommand:	
 17518                           
 17519                           ;incstack = 0
 17520                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17521                           ;CC2500_WriteCommand@command stored from wreg
 17522  1D86  0020               	movlb	0	; select bank0
 17523  1D87  00A3               	movwf	CC2500_WriteCommand@command
 17524                           
 17525                           ;CC2500_B1.c: 289: RC4 = 0;
 17526  1D88  120E               	bcf	14,4	;volatile
 17527                           
 17528                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 17529  1D89  0823               	movf	CC2500_WriteCommand@command,w
 17530  1D8A  00A2               	movwf	??_CC2500_WriteCommand
 17531  1D8B  0822               	movf	??_CC2500_WriteCommand,w
 17532  1D8C  0021               	movlb	1	; select bank1
 17533  1D8D  00D2               	movwf	_SPI0Buffer^(0+128)
 17534                           
 17535                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 17536  1D8E  2D92               	goto	l8995
 17537  1D8F                     l8993:	
 17538                           
 17539                           ;CC2500_B1.c: 293: Timeout_Counter();
 17540  1D8F  319C  24FE  319D   	fcall	_Timeout_Counter
 17541  1D92                     l8995:	
 17542  1D92  0020               	movlb	0	; select bank0
 17543  1D93  1D0E               	btfss	14,2	;volatile
 17544  1D94  2D98               	goto	l8999
 17545  1D95  0021               	movlb	1	; select bank1
 17546  1D96  1D2D               	btfss	(_myMain^(0+128)+13),2
 17547  1D97  2D8F               	goto	l8993
 17548  1D98                     l8999:	
 17549                           
 17550                           ;CC2500_B1.c: 294: };
 17551                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 17552  1D98  319A  22D6  319D   	fcall	_set_TimeoutCleared
 17553                           
 17554                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 17555  1D9B  319D  2554         	fcall	_CC2500_WriteByte
 17556                           
 17557                           ;CC2500_B1.c: 298: RC4 = 1;
 17558  1D9D  0020               	movlb	0	; select bank0
 17559  1D9E  160E               	bsf	14,4	;volatile
 17560  1D9F  0008               	return
 17561  1DA0                     __end_of_CC2500_WriteCommand:	
 17562                           
 17563                           	psect	text117
 17564  1AD6                     __ptext117:	
 17565 ;; *************** function _set_TimeoutCleared *****************
 17566 ;; Defined at:
 17567 ;;		line 270 in file "../src/Main_B1.c"
 17568 ;; Parameters:    Size  Location     Type
 17569 ;;		None
 17570 ;; Auto vars:     Size  Location     Type
 17571 ;;		None
 17572 ;; Return value:  Size  Location     Type
 17573 ;;		None               void
 17574 ;; Registers used:
 17575 ;;		status,2
 17576 ;; Tracked objects:
 17577 ;;		On entry : 0/0
 17578 ;;		On exit  : 0/0
 17579 ;;		Unchanged: 0/0
 17580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17585 ;;Total ram usage:        0 bytes
 17586 ;; Hardware stack levels used:    1
 17587 ;; Hardware stack levels required when called:    5
 17588 ;; This function calls:
 17589 ;;		Nothing
 17590 ;; This function is called by:
 17591 ;;		_CC2500_TxData
 17592 ;;		_CC2500_RxData
 17593 ;;		_CC2500_PowerRST
 17594 ;;		_CC2500_WriteREG
 17595 ;;		_CC2500_WriteCommand
 17596 ;;		_CC2500_ReadStatus
 17597 ;;		_getAD
 17598 ;;		_TouchPower
 17599 ;;		_CC2500_ReadREG
 17600 ;; This function uses a non-reentrant model
 17601 ;;
 17602                           
 17603                           
 17604                           ;psect for function _set_TimeoutCleared
 17605  1AD6                     _set_TimeoutCleared:	
 17606                           
 17607                           ;Main_B1.c: 271: myMain.Timeout = 0;
 17608                           
 17609                           ;incstack = 0
 17610                           ; Regs used in _set_TimeoutCleared: [status,2]
 17611  1AD6  0021               	movlb	1	; select bank1
 17612  1AD7  112D               	bcf	(_myMain^(0+128)+13),2
 17613                           
 17614                           ;Main_B1.c: 272: myMain.Timeout_Counter = 0;
 17615  1AD8  01AE               	clrf	(_myMain^(0+128)+14)
 17616  1AD9  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17617  1ADA  0008               	return
 17618  1ADB                     __end_of_set_TimeoutCleared:	
 17619                           
 17620                           	psect	text118
 17621  1CFE                     __ptext118:	
 17622 ;; *************** function _Timeout_Counter *****************
 17623 ;; Defined at:
 17624 ;;		line 261 in file "../src/Main_B1.c"
 17625 ;; Parameters:    Size  Location     Type
 17626 ;;		None
 17627 ;; Auto vars:     Size  Location     Type
 17628 ;;		None
 17629 ;; Return value:  Size  Location     Type
 17630 ;;		None               void
 17631 ;; Registers used:
 17632 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17633 ;; Tracked objects:
 17634 ;;		On entry : 0/0
 17635 ;;		On exit  : 0/0
 17636 ;;		Unchanged: 0/0
 17637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17642 ;;Total ram usage:        0 bytes
 17643 ;; Hardware stack levels used:    1
 17644 ;; Hardware stack levels required when called:    5
 17645 ;; This function calls:
 17646 ;;		Nothing
 17647 ;; This function is called by:
 17648 ;;		_CC2500_TxData
 17649 ;;		_CC2500_RxData
 17650 ;;		_CC2500_PowerRST
 17651 ;;		_CC2500_WriteREG
 17652 ;;		_CC2500_WriteCommand
 17653 ;;		_CC2500_ReadStatus
 17654 ;;		_getAD
 17655 ;;		_TouchPower
 17656 ;;		_CC2500_ReadREG
 17657 ;; This function uses a non-reentrant model
 17658 ;;
 17659                           
 17660                           
 17661                           ;psect for function _Timeout_Counter
 17662  1CFE                     _Timeout_Counter:	
 17663                           
 17664                           ;Main_B1.c: 262: myMain.Timeout_Counter++;
 17665                           
 17666                           ;incstack = 0
 17667                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17668  1CFE  3001               	movlw	1
 17669  1CFF  0021               	movlb	1	; select bank1
 17670  1D00  07AE               	addwf	(_myMain^(0+128)+14),f
 17671  1D01  3000               	movlw	0
 17672  1D02  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 17673                           
 17674                           ;Main_B1.c: 263: if (myMain.Timeout_Counter == 10000) {
 17675  1D03  300E               	movlw	14
 17676  1D04  3EA0               	addlw	_myMain& (0+255)
 17677  1D05  0086               	movwf	6
 17678  1D06  0187               	clrf	7
 17679  1D07  3F40               	moviw [0]fsr1
 17680  1D08  3A10               	xorlw	16
 17681  1D09  1D03               	skipz
 17682  1D0A  2D0D               	goto	u9385
 17683  1D0B  3F41               	moviw [1]fsr1
 17684  1D0C  3A27               	xorlw	39
 17685  1D0D                     u9385:	
 17686  1D0D  1D03               	skipz
 17687  1D0E  0008               	return
 17688                           
 17689                           ;Main_B1.c: 264: myMain.Timeout_Counter = 0;
 17690  1D0F  01AE               	clrf	(_myMain^(0+128)+14)
 17691  1D10  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17692                           
 17693                           ;Main_B1.c: 265: myMain.Timeout = 1;
 17694  1D11  152D               	bsf	(_myMain^(0+128)+13),2
 17695  1D12  0008               	return
 17696  1D13                     __end_of_Timeout_Counter:	
 17697                           
 17698                           	psect	text119
 17699  1D54                     __ptext119:	
 17700 ;; *************** function _CC2500_WriteByte *****************
 17701 ;; Defined at:
 17702 ;;		line 222 in file "../src/CC2500_B1.c"
 17703 ;; Parameters:    Size  Location     Type
 17704 ;;		None
 17705 ;; Auto vars:     Size  Location     Type
 17706 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17707 ;; Return value:  Size  Location     Type
 17708 ;;		None               void
 17709 ;; Registers used:
 17710 ;;		wreg, status,2, status,0
 17711 ;; Tracked objects:
 17712 ;;		On entry : 0/0
 17713 ;;		On exit  : 0/0
 17714 ;;		Unchanged: 0/0
 17715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17717 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17718 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17719 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17720 ;;Total ram usage:        2 bytes
 17721 ;; Hardware stack levels used:    1
 17722 ;; Hardware stack levels required when called:    5
 17723 ;; This function calls:
 17724 ;;		Nothing
 17725 ;; This function is called by:
 17726 ;;		_CC2500_TxData
 17727 ;;		_CC2500_RxData
 17728 ;;		_CC2500_PowerRST
 17729 ;;		_CC2500_WriteREG
 17730 ;;		_CC2500_WriteCommand
 17731 ;;		_CC2500_ReadStatus
 17732 ;;		_CC2500_ReadREG
 17733 ;; This function uses a non-reentrant model
 17734 ;;
 17735                           
 17736                           
 17737                           ;psect for function _CC2500_WriteByte
 17738  1D54                     _CC2500_WriteByte:	
 17739                           
 17740                           ;CC2500_B1.c: 223: unsigned char loop_a;
 17741                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 17742                           
 17743                           ;incstack = 0
 17744                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17745  1D54  0020               	movlb	0	; select bank0
 17746  1D55  01A1               	clrf	CC2500_WriteByte@loop_a
 17747  1D56                     L14:	
 17748  1D56  3008               	movlw	8
 17749  1D57  0221               	subwf	CC2500_WriteByte@loop_a,w
 17750  1D58  1803               	btfsc	3,0
 17751  1D59  0008               	return
 17752                           
 17753                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 17754  1D5A  0021               	movlb	1	; select bank1
 17755  1D5B  1FD2               	btfss	_SPI0Buffer^(0+128),7
 17756  1D5C  2D60               	goto	l330
 17757                           
 17758                           ;CC2500_B1.c: 226: RC0 = 1;
 17759  1D5D  0020               	movlb	0	; select bank0
 17760  1D5E  140E               	bsf	14,0	;volatile
 17761  1D5F  2D62               	goto	l331
 17762  1D60                     l330:	
 17763                           
 17764                           ;CC2500_B1.c: 227: else
 17765                           ;CC2500_B1.c: 228: RC0 = 0;
 17766  1D60  0020               	movlb	0	; select bank0
 17767  1D61  100E               	bcf	14,0	;volatile
 17768  1D62                     l331:	
 17769                           
 17770                           ;CC2500_B1.c: 229: RC1 = 1;
 17771  1D62  148E               	bsf	14,1	;volatile
 17772                           
 17773                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 17774  1D63  1003               	clrc
 17775  1D64  0021               	movlb	1	; select bank1
 17776  1D65  0DD2               	rlf	_SPI0Buffer^(0+128),f
 17777                           
 17778                           ;CC2500_B1.c: 231: RC1 = 0;
 17779  1D66  0020               	movlb	0	; select bank0
 17780  1D67  108E               	bcf	14,1	;volatile
 17781  1D68  3001               	movlw	1
 17782  1D69  00A0               	movwf	??_CC2500_WriteByte
 17783  1D6A  0820               	movf	??_CC2500_WriteByte,w
 17784  1D6B  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17785  1D6C  2D56               	goto	L14
 17786  1D6D                     __end_of_CC2500_WriteByte:	
 17787                           
 17788                           	psect	text120
 17789  13F8                     __ptext120:	
 17790 ;; *************** function _Buzzer_Main *****************
 17791 ;; Defined at:
 17792 ;;		line 46 in file "../src/Buzzer_B1.c"
 17793 ;; Parameters:    Size  Location     Type
 17794 ;;		None
 17795 ;; Auto vars:     Size  Location     Type
 17796 ;;		None
 17797 ;; Return value:  Size  Location     Type
 17798 ;;		None               void
 17799 ;; Registers used:
 17800 ;;		wreg, status,2, status,0
 17801 ;; Tracked objects:
 17802 ;;		On entry : 0/0
 17803 ;;		On exit  : 0/0
 17804 ;;		Unchanged: 0/0
 17805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17808 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17809 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17810 ;;Total ram usage:        1 bytes
 17811 ;; Hardware stack levels used:    1
 17812 ;; Hardware stack levels required when called:    5
 17813 ;; This function calls:
 17814 ;;		Nothing
 17815 ;; This function is called by:
 17816 ;;		_main
 17817 ;; This function uses a non-reentrant model
 17818 ;;
 17819                           
 17820                           
 17821                           ;psect for function _Buzzer_Main
 17822  13F8                     _Buzzer_Main:	
 17823                           
 17824                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17825                           
 17826                           ;incstack = 0
 17827                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17828  13F8  0021               	movlb	1	; select bank1
 17829  13F9  1CB0               	btfss	_Buz1^(0+128),1
 17830  13FA  0008               	return
 17831                           
 17832                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17833  13FB  3001               	movlw	1
 17834  13FC  07B1               	addwf	(_Buz1^(0+128)+1),f
 17835  13FD  3000               	movlw	0
 17836  13FE  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 17837                           
 17838                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17839  13FF  0837               	movf	((_Buz1+1)^(0+128)+6),w
 17840  1400  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 17841  1401  1D03               	skipz
 17842  1402  2C05               	goto	u11365
 17843  1403  0836               	movf	(_Buz1^(0+128)+6),w
 17844  1404  0231               	subwf	(_Buz1^(0+128)+1),w
 17845  1405                     u11365:	
 17846  1405  1C03               	skipc
 17847  1406  0008               	return
 17848                           
 17849                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17850  1407  01B1               	clrf	(_Buz1^(0+128)+1)
 17851  1408  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 17852                           
 17853                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17854  1409  12B0               	bcf	_Buz1^(0+128),5
 17855  140A  0020               	movlb	0	; select bank0
 17856  140B  1D8D               	btfss	13,3	;volatile
 17857  140C  2C0F               	goto	l10169
 17858  140D  0021               	movlb	1	; select bank1
 17859  140E  16B0               	bsf	_Buz1^(0+128),5
 17860  140F                     l10169:	
 17861                           
 17862                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17863  140F  0021               	movlb	1	; select bank1
 17864  1410  1AB0               	btfsc	_Buz1^(0+128),5
 17865  1411  2C3B               	goto	l106
 17866                           
 17867                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17868  1412  08B3               	movf	(_Buz1^(0+128)+3),f
 17869  1413  1D03               	skipz
 17870  1414  2C37               	goto	l107
 17871                           
 17872                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17873  1415  1DB0               	btfss	_Buz1^(0+128),3
 17874  1416  2C25               	goto	l108
 17875                           
 17876                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17877  1417  11B0               	bcf	_Buz1^(0+128),3
 17878                           
 17879                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17880  1418  0834               	movf	(_Buz1^(0+128)+4),w
 17881  1419  0020               	movlb	0	; select bank0
 17882  141A  00A0               	movwf	??_Buzzer_Main
 17883  141B  0820               	movf	??_Buzzer_Main,w
 17884  141C  0021               	movlb	1	; select bank1
 17885  141D  00B3               	movwf	(_Buz1^(0+128)+3)
 17886                           
 17887                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17888  141E  0839               	movf	((_Buz1+1)^(0+128)+8),w
 17889  141F  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17890  1420  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17891  1421  0838               	movf	(_Buz1^(0+128)+8),w
 17892  1422  01B6               	clrf	(_Buz1^(0+128)+6)
 17893  1423  07B6               	addwf	(_Buz1^(0+128)+6),f
 17894                           
 17895                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17896  1424  0008               	return
 17897  1425                     l108:	
 17898  1425  1E30               	btfss	_Buz1^(0+128),4
 17899  1426  2C35               	goto	l110
 17900                           
 17901                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17902  1427  1230               	bcf	_Buz1^(0+128),4
 17903                           
 17904                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17905  1428  0835               	movf	(_Buz1^(0+128)+5),w
 17906  1429  0020               	movlb	0	; select bank0
 17907  142A  00A0               	movwf	??_Buzzer_Main
 17908  142B  0820               	movf	??_Buzzer_Main,w
 17909  142C  0021               	movlb	1	; select bank1
 17910  142D  00B3               	movwf	(_Buz1^(0+128)+3)
 17911                           
 17912                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17913  142E  083B               	movf	((_Buz1+1)^(0+128)+10),w
 17914  142F  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17915  1430  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17916  1431  083A               	movf	(_Buz1^(0+128)+10),w
 17917  1432  01B6               	clrf	(_Buz1^(0+128)+6)
 17918  1433  07B6               	addwf	(_Buz1^(0+128)+6),f
 17919                           
 17920                           ;Buzzer_B1.c: 62: } else {
 17921  1434  0008               	return
 17922  1435                     l110:	
 17923                           
 17924                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17925  1435  10B0               	bcf	_Buz1^(0+128),1
 17926                           
 17927                           ;Buzzer_B1.c: 64: }
 17928                           ;Buzzer_B1.c: 65: } else {
 17929  1436  0008               	return
 17930  1437                     l107:	
 17931                           
 17932                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17933  1437  16B0               	bsf	_Buz1^(0+128),5
 17934                           
 17935                           ;Buzzer_B1.c: 68: RB3 = 1;
 17936  1438  0020               	movlb	0	; select bank0
 17937  1439  158D               	bsf	13,3	;volatile
 17938                           
 17939                           ;Buzzer_B1.c: 69: }
 17940                           ;Buzzer_B1.c: 70: } else {
 17941  143A  0008               	return
 17942  143B                     l106:	
 17943                           
 17944                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17945  143B  12B0               	bcf	_Buz1^(0+128),5
 17946                           
 17947                           ;Buzzer_B1.c: 73: RB3 = 0;
 17948  143C  0020               	movlb	0	; select bank0
 17949  143D  118D               	bcf	13,3	;volatile
 17950                           
 17951                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17952  143E  3001               	movlw	1
 17953  143F  0021               	movlb	1	; select bank1
 17954  1440  02B3               	subwf	(_Buz1^(0+128)+3),f
 17955  1441  0008               	return
 17956  1442                     __end_of_Buzzer_Main:	
 17957                           
 17958                           	psect	text121
 17959  1AB7                     __ptext121:	
 17960 ;; *************** function _Buzzer_Initialization *****************
 17961 ;; Defined at:
 17962 ;;		line 11 in file "../src/Buzzer_B1.c"
 17963 ;; Parameters:    Size  Location     Type
 17964 ;;		None
 17965 ;; Auto vars:     Size  Location     Type
 17966 ;;		None
 17967 ;; Return value:  Size  Location     Type
 17968 ;;		None               void
 17969 ;; Registers used:
 17970 ;;		None
 17971 ;; Tracked objects:
 17972 ;;		On entry : 0/0
 17973 ;;		On exit  : 0/0
 17974 ;;		Unchanged: 0/0
 17975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17980 ;;Total ram usage:        0 bytes
 17981 ;; Hardware stack levels used:    1
 17982 ;; Hardware stack levels required when called:    5
 17983 ;; This function calls:
 17984 ;;		Nothing
 17985 ;; This function is called by:
 17986 ;;		_main
 17987 ;; This function uses a non-reentrant model
 17988 ;;
 17989                           
 17990                           
 17991                           ;psect for function _Buzzer_Initialization
 17992  1AB7                     _Buzzer_Initialization:	
 17993                           
 17994                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 17995                           
 17996                           ;incstack = 0
 17997                           ; Regs used in _Buzzer_Initialization: []
 17998  1AB7  0021               	movlb	1	; select bank1
 17999  1AB8  1430               	bsf	_Buz1^(0+128),0
 18000  1AB9  0008               	return
 18001  1ABA                     __end_of_Buzzer_Initialization:	
 18002                           
 18003                           	psect	intentry
 18004  0004                     __pintentry:	
 18005 ;; *************** function _ISR *****************
 18006 ;; Defined at:
 18007 ;;		line 107 in file "../src/MCU_B1.c"
 18008 ;; Parameters:    Size  Location     Type
 18009 ;;		None
 18010 ;; Auto vars:     Size  Location     Type
 18011 ;;		None
 18012 ;; Return value:  Size  Location     Type
 18013 ;;		None               void
 18014 ;; Registers used:
 18015 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18016 ;; Tracked objects:
 18017 ;;		On entry : 0/0
 18018 ;;		On exit  : 0/0
 18019 ;;		Unchanged: 0/0
 18020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18023 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18024 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18025 ;;Total ram usage:        1 bytes
 18026 ;; Hardware stack levels used:    1
 18027 ;; Hardware stack levels required when called:    4
 18028 ;; This function calls:
 18029 ;;		_IOC_ISR
 18030 ;;		_TMR1_ISR
 18031 ;; This function is called by:
 18032 ;;		Interrupt level 1
 18033 ;; This function uses a non-reentrant model
 18034 ;;
 18035                           
 18036  0004                     _ISR:	
 18037                           
 18038                           ;incstack = 0
 18039                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18040  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18041  0005  3180               	pagesel	$
 18042  0006  0020               	movlb	0	; select bank0
 18043  0007  087F               	movf	127,w
 18044  0008  00F5               	movwf	??_ISR
 18045                           
 18046                           ;MCU_B1.c: 109: IOC_ISR();
 18047  0009  319B  23C9  3180   	fcall	_IOC_ISR
 18048                           
 18049                           ;MCU_B1.c: 111: ;;
 18050                           ;MCU_B1.c: 113: TMR1_ISR();
 18051  000C  319F  27D7         	fcall	_TMR1_ISR
 18052  000E  0875               	movf	??_ISR,w
 18053  000F  0020               	movlb	0	; select bank0
 18054  0010  00FF               	movwf	127
 18055  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18056  0012  0009               	retfie
 18057  0013                     __end_of_ISR:	
 18058                           
 18059                           	psect	text123
 18060  1FD7                     __ptext123:	
 18061 ;; *************** function _TMR1_ISR *****************
 18062 ;; Defined at:
 18063 ;;		line 209 in file "../src/MCU_B1.c"
 18064 ;; Parameters:    Size  Location     Type
 18065 ;;		None
 18066 ;; Auto vars:     Size  Location     Type
 18067 ;;		None
 18068 ;; Return value:  Size  Location     Type
 18069 ;;		None               void
 18070 ;; Registers used:
 18071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18072 ;; Tracked objects:
 18073 ;;		On entry : 0/0
 18074 ;;		On exit  : 0/0
 18075 ;;		Unchanged: 0/0
 18076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18081 ;;Total ram usage:        0 bytes
 18082 ;; Hardware stack levels used:    1
 18083 ;; Hardware stack levels required when called:    2
 18084 ;; This function calls:
 18085 ;;		_setDimmerLights_IntrControl
 18086 ;; This function is called by:
 18087 ;;		_ISR
 18088 ;; This function uses a non-reentrant model
 18089 ;;
 18090                           
 18091                           
 18092                           ;psect for function _TMR1_ISR
 18093  1FD7                     _TMR1_ISR:	
 18094                           
 18095                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18096                           
 18097                           ;incstack = 0
 18098                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18099  1FD7  0021               	movlb	1	; select bank1
 18100  1FD8  1C11               	btfss	17,0	;volatile
 18101  1FD9  0008               	return
 18102  1FDA  0020               	movlb	0	; select bank0
 18103  1FDB  1C11               	btfss	17,0	;volatile
 18104  1FDC  0008               	return
 18105                           
 18106                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18107  1FDD  30FA               	movlw	250
 18108  1FDE  0097               	movwf	23	;volatile
 18109                           
 18110                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18111  1FDF  3038               	movlw	56
 18112  1FE0  0096               	movwf	22	;volatile
 18113                           
 18114                           ;MCU_B1.c: 214: TMR1IF = 0;
 18115  1FE1  1011               	bcf	17,0	;volatile
 18116                           
 18117                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18118  1FE2  3001               	movlw	1
 18119  1FE3  3182  220C  319F   	fcall	_setDimmerLights_IntrControl
 18120                           
 18121                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18122  1FE6  3002               	movlw	2
 18123  1FE7  3182  220C  319F   	fcall	_setDimmerLights_IntrControl
 18124                           
 18125                           ;MCU_B1.c: 234: Timer1.Count++;
 18126  1FEA  3001               	movlw	1
 18127  1FEB  0022               	movlb	2	; select bank2
 18128  1FEC  07A1               	addwf	(_Timer1^(0+256)+1),f
 18129  1FED  3000               	movlw	0
 18130  1FEE  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18131                           
 18132                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18133  1FEF  3001               	movlw	1
 18134  1FF0  3E20               	addlw	_Timer1& (0+255)
 18135  1FF1  0086               	movwf	6
 18136  1FF2  3001               	movlw	1	; select bank2/3
 18137  1FF3  0087               	movwf	7
 18138  1FF4  3F40               	moviw [0]fsr1
 18139  1FF5  3A64               	xorlw	100
 18140  1FF6  1D03               	skipz
 18141  1FF7  2FFA               	goto	u765_25
 18142  1FF8  3F41               	moviw [1]fsr1
 18143  1FF9  3A00               	xorlw	0
 18144  1FFA                     u765_25:	
 18145  1FFA  1D03               	skipz
 18146  1FFB  0008               	return
 18147                           
 18148                           ;MCU_B1.c: 236: {
 18149                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18150  1FFC  01A1               	clrf	(_Timer1^(0+256)+1)
 18151  1FFD  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18152                           
 18153                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18154  1FFE  1420               	bsf	_Timer1^(0+256),0
 18155  1FFF  0008               	return
 18156  2000                     __end_of_TMR1_ISR:	
 18157                           
 18158                           	psect	text124
 18159  020C                     __ptext124:	
 18160 ;; *************** function _setDimmerLights_IntrControl *****************
 18161 ;; Defined at:
 18162 ;;		line 94 in file "../src/Dimmer_B1.c"
 18163 ;; Parameters:    Size  Location     Type
 18164 ;;  lights          1    wreg     unsigned char 
 18165 ;; Auto vars:     Size  Location     Type
 18166 ;;  lights          1    4[COMMON] unsigned char 
 18167 ;; Return value:  Size  Location     Type
 18168 ;;		None               void
 18169 ;; Registers used:
 18170 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18171 ;; Tracked objects:
 18172 ;;		On entry : 0/0
 18173 ;;		On exit  : 0/0
 18174 ;;		Unchanged: 0/0
 18175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18177 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18178 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18179 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18180 ;;Total ram usage:        3 bytes
 18181 ;; Hardware stack levels used:    1
 18182 ;; Hardware stack levels required when called:    1
 18183 ;; This function calls:
 18184 ;;		_DimmerIntrPointSelect
 18185 ;; This function is called by:
 18186 ;;		_TMR1_ISR
 18187 ;; This function uses a non-reentrant model
 18188 ;;
 18189                           
 18190                           
 18191                           ;psect for function _setDimmerLights_IntrControl
 18192  020C                     _setDimmerLights_IntrControl:	
 18193                           
 18194                           ;incstack = 0
 18195                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18196                           ;setDimmerLights_IntrControl@lights stored from wreg
 18197  020C  00F4               	movwf	setDimmerLights_IntrControl@lights
 18198                           
 18199                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 18200  020D  0874               	movf	setDimmerLights_IntrControl@lights,w
 18201  020E  319C  241B  3182   	fcall	_DimmerIntrPointSelect
 18202                           
 18203                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 18204  0211  0878               	movf	_DimmerLightsIntr,w
 18205  0212  0086               	movwf	6
 18206  0213  3001               	movlw	1	; select bank2/3
 18207  0214  0087               	movwf	7
 18208  0215  1C01               	btfss	1,0
 18209  0216  2A63               	goto	i1l7113
 18210                           
 18211                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 18212  0217  3001               	movlw	1
 18213  0218  00F2               	movwf	??_setDimmerLights_IntrControl
 18214  0219  0878               	movf	_DimmerLightsIntr,w
 18215  021A  3E03               	addlw	3
 18216  021B  0086               	movwf	6
 18217  021C  3001               	movlw	1	; select bank2/3
 18218  021D  0087               	movwf	7
 18219  021E  0872               	movf	??_setDimmerLights_IntrControl,w
 18220  021F  0781               	addwf	1,f
 18221                           
 18222                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r.Correction)) {
 18223  0220  0878               	movf	_DimmerLightsIntr,w
 18224  0221  3E04               	addlw	4
 18225  0222  0086               	movwf	6
 18226  0223  3001               	movlw	1	; select bank2/3
 18227  0224  0087               	movwf	7
 18228  0225  0801               	movf	1,w
 18229  0226  0021               	movlb	1	; select bank1
 18230  0227  074A               	addwf	(_Dimmer^(0+128)+2),w
 18231  0228  00F2               	movwf	??_setDimmerLights_IntrControl
 18232  0229  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18233  022A  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 18234  022B  0878               	movf	_DimmerLightsIntr,w
 18235  022C  3E03               	addlw	3
 18236  022D  0086               	movwf	6
 18237  022E  3001               	movlw	1	; select bank2/3
 18238  022F  0087               	movwf	7
 18239  0230  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18240  0231  3A80               	xorlw	128
 18241  0232  3C80               	sublw	128
 18242  0233  1D03               	skipz
 18243  0234  2A37               	goto	u642_25
 18244  0235  0872               	movf	??_setDimmerLights_IntrControl,w
 18245  0236  0201               	subwf	1,w
 18246  0237                     u642_25:	
 18247  0237  1C03               	skipc
 18248  0238  2B61               	goto	i1l7175
 18249                           
 18250                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 18251  0239  0878               	movf	_DimmerLightsIntr,w
 18252  023A  3E03               	addlw	3
 18253  023B  0086               	movwf	6
 18254  023C  3001               	movlw	1	; select bank2/3
 18255  023D  0087               	movwf	7
 18256  023E  0181               	clrf	1
 18257                           
 18258                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 18259  023F  0878               	movf	_DimmerLightsIntr,w
 18260  0240  0086               	movwf	6
 18261  0241  3001               	movlw	1	; select bank2/3
 18262  0242  0087               	movwf	7
 18263  0243  1001               	bcf	1,0
 18264                           
 18265                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 18266  0244  0878               	movf	_DimmerLightsIntr,w
 18267  0245  0086               	movwf	6
 18268  0246  3001               	movlw	1	; select bank2/3
 18269  0247  0087               	movwf	7
 18270  0248  1F01               	btfss	1,6
 18271  0249  2B61               	goto	i1l7175
 18272                           
 18273                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 18274  024A  0878               	movf	_DimmerLightsIntr,w
 18275  024B  3E08               	addlw	8
 18276  024C  0086               	movwf	6
 18277  024D  3001               	movlw	1	; select bank2/3
 18278  024E  0087               	movwf	7
 18279  024F  1401               	bsf	1,0
 18280                           
 18281                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 18282  0250  0878               	movf	_DimmerLightsIntr,w
 18283  0251  3E08               	addlw	8
 18284  0252  0086               	movwf	6
 18285  0253  3001               	movlw	1	; select bank2/3
 18286  0254  0087               	movwf	7
 18287  0255  1681               	bsf	1,5
 18288                           
 18289                           ;Dimmer_B1.c: 107: if (lights == 1) {
 18290  0256  0874               	movf	setDimmerLights_IntrControl@lights,w
 18291  0257  3A01               	xorlw	1
 18292  0258  1D03               	skipz
 18293  0259  2A5C               	goto	i1l7109
 18294                           
 18295                           ;Dimmer_B1.c: 108: RA7 = 1;
 18296  025A  0020               	movlb	0	; select bank0
 18297  025B  178C               	bsf	12,7	;volatile
 18298  025C                     i1l7109:	
 18299                           ;Dimmer_B1.c: 109: ;;
 18300                           
 18301                           
 18302                           ;Dimmer_B1.c: 110: }
 18303                           ;Dimmer_B1.c: 113: if (lights == 2) {
 18304  025C  0874               	movf	setDimmerLights_IntrControl@lights,w
 18305  025D  3A02               	xorlw	2
 18306  025E  1D03               	skipz
 18307  025F  2B61               	goto	i1l7175
 18308                           
 18309                           ;Dimmer_B1.c: 114: RB4 = 1;
 18310  0260  0020               	movlb	0	; select bank0
 18311  0261  160D               	bsf	13,4	;volatile
 18312                           
 18313                           ;Dimmer_B1.c: 115: }
 18314                           ;Dimmer_B1.c: 122: }
 18315                           ;Dimmer_B1.c: 123: }
 18316                           ;Dimmer_B1.c: 124: } else {
 18317  0262  2B61               	goto	i1l7175
 18318  0263                     i1l7113:	
 18319                           
 18320                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 18321  0263  0878               	movf	_DimmerLightsIntr,w
 18322  0264  3E08               	addlw	8
 18323  0265  0086               	movwf	6
 18324  0266  3001               	movlw	1	; select bank2/3
 18325  0267  0087               	movwf	7
 18326  0268  1C01               	btfss	1,0
 18327  0269  2B61               	goto	i1l7175
 18328                           
 18329                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 18330  026A  0878               	movf	_DimmerLightsIntr,w
 18331  026B  3E08               	addlw	8
 18332  026C  0086               	movwf	6
 18333  026D  3001               	movlw	1	; select bank2/3
 18334  026E  0087               	movwf	7
 18335  026F  1001               	bcf	1,0
 18336                           
 18337                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 18338  0270  0878               	movf	_DimmerLightsIntr,w
 18339  0271  0086               	movwf	6
 18340  0272  3001               	movlw	1	; select bank2/3
 18341  0273  0087               	movwf	7
 18342  0274  1C81               	btfss	1,1
 18343  0275  2B61               	goto	i1l7175
 18344                           
 18345                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 18346  0276  3001               	movlw	1
 18347  0277  00F2               	movwf	??_setDimmerLights_IntrControl
 18348  0278  0A78               	incf	_DimmerLightsIntr,w
 18349  0279  0086               	movwf	6
 18350  027A  3001               	movlw	1	; select bank2/3
 18351  027B  0087               	movwf	7
 18352  027C  0872               	movf	??_setDimmerLights_IntrControl,w
 18353  027D  0781               	addwf	1,f
 18354                           
 18355                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18356  027E  0A78               	incf	_DimmerLightsIntr,w
 18357  027F  0086               	movwf	6
 18358  0280  3001               	movlw	1	; select bank2/3
 18359  0281  0087               	movwf	7
 18360  0282  0878               	movf	_DimmerLightsIntr,w
 18361  0283  3E02               	addlw	2
 18362  0284  0084               	movwf	4
 18363  0285  3001               	movlw	1	; select bank2/3
 18364  0286  0085               	movwf	5
 18365  0287  0800               	movf	0,w
 18366  0288  0201               	subwf	1,w
 18367  0289  1C03               	skipc
 18368  028A  2B61               	goto	i1l7175
 18369                           
 18370                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 18371  028B  0A78               	incf	_DimmerLightsIntr,w
 18372  028C  0086               	movwf	6
 18373  028D  3001               	movlw	1	; select bank2/3
 18374  028E  0087               	movwf	7
 18375  028F  0181               	clrf	1
 18376                           
 18377                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 18378  0290  0878               	movf	_DimmerLightsIntr,w
 18379  0291  0086               	movwf	6
 18380  0292  3001               	movlw	1	; select bank2/3
 18381  0293  0087               	movwf	7
 18382  0294  1D81               	btfss	1,3
 18383  0295  2ACC               	goto	i1l7139
 18384                           
 18385                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 18386  0296  0878               	movf	_DimmerLightsIntr,w
 18387  0297  0086               	movwf	6
 18388  0298  3001               	movlw	1	; select bank2/3
 18389  0299  0087               	movwf	7
 18390  029A  1A01               	btfsc	1,4
 18391  029B  2AB3               	goto	i1l7133
 18392                           
 18393                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 18394  029C  0878               	movf	_DimmerLightsIntr,w
 18395  029D  3E04               	addlw	4
 18396  029E  0086               	movwf	6
 18397  029F  3001               	movlw	1	; select bank2/3
 18398  02A0  0087               	movwf	7
 18399  02A1  3021               	movlw	33
 18400  02A2  0201               	subwf	1,w
 18401  02A3  1C03               	skipc
 18402  02A4  2AAD               	goto	i1l7131
 18403                           
 18404                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 18405  02A5  0878               	movf	_DimmerLightsIntr,w
 18406  02A6  3E04               	addlw	4
 18407  02A7  0086               	movwf	6
 18408  02A8  3001               	movlw	1	; select bank2/3
 18409  02A9  0087               	movwf	7
 18410  02AA  3001               	movlw	1
 18411  02AB  0281               	subwf	1,f
 18412                           
 18413                           ;Dimmer_B1.c: 135: } else {
 18414  02AC  2B61               	goto	i1l7175
 18415  02AD                     i1l7131:	
 18416                           
 18417                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 18418  02AD  0878               	movf	_DimmerLightsIntr,w
 18419  02AE  0086               	movwf	6
 18420  02AF  3001               	movlw	1	; select bank2/3
 18421  02B0  0087               	movwf	7
 18422  02B1  1601               	bsf	1,4
 18423                           
 18424                           ;Dimmer_B1.c: 137: }
 18425                           ;Dimmer_B1.c: 138: } else {
 18426  02B2  2B61               	goto	i1l7175
 18427  02B3                     i1l7133:	
 18428                           
 18429                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 18430  02B3  0878               	movf	_DimmerLightsIntr,w
 18431  02B4  3E04               	addlw	4
 18432  02B5  0086               	movwf	6
 18433  02B6  3001               	movlw	1	; select bank2/3
 18434  02B7  0087               	movwf	7
 18435  02B8  303C               	movlw	60
 18436  02B9  0201               	subwf	1,w
 18437  02BA  1803               	skipnc
 18438  02BB  2AC6               	goto	i1l7137
 18439                           
 18440                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 18441  02BC  3001               	movlw	1
 18442  02BD  00F2               	movwf	??_setDimmerLights_IntrControl
 18443  02BE  0878               	movf	_DimmerLightsIntr,w
 18444  02BF  3E04               	addlw	4
 18445  02C0  0086               	movwf	6
 18446  02C1  3001               	movlw	1	; select bank2/3
 18447  02C2  0087               	movwf	7
 18448  02C3  0872               	movf	??_setDimmerLights_IntrControl,w
 18449  02C4  0781               	addwf	1,f
 18450                           
 18451                           ;Dimmer_B1.c: 141: } else {
 18452  02C5  2B61               	goto	i1l7175
 18453  02C6                     i1l7137:	
 18454                           
 18455                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 18456  02C6  0878               	movf	_DimmerLightsIntr,w
 18457  02C7  0086               	movwf	6
 18458  02C8  3001               	movlw	1	; select bank2/3
 18459  02C9  0087               	movwf	7
 18460  02CA  1201               	bcf	1,4
 18461                           
 18462                           ;Dimmer_B1.c: 143: }
 18463                           ;Dimmer_B1.c: 144: }
 18464                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 18465  02CB  2B61               	goto	i1l7175
 18466  02CC                     i1l7139:	
 18467  02CC  0878               	movf	_DimmerLightsIntr,w
 18468  02CD  0086               	movwf	6
 18469  02CE  3001               	movlw	1	; select bank2/3
 18470  02CF  0087               	movwf	7
 18471  02D0  1D01               	btfss	1,2
 18472  02D1  2B13               	goto	i1l7153
 18473                           
 18474                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 18475  02D2  0878               	movf	_DimmerLightsIntr,w
 18476  02D3  3E05               	addlw	5
 18477  02D4  0086               	movwf	6
 18478  02D5  3001               	movlw	1	; select bank2/3
 18479  02D6  0087               	movwf	7
 18480  02D7  0878               	movf	_DimmerLightsIntr,w
 18481  02D8  3E04               	addlw	4
 18482  02D9  0084               	movwf	4
 18483  02DA  3001               	movlw	1	; select bank2/3
 18484  02DB  0085               	movwf	5
 18485  02DC  0800               	movf	0,w
 18486  02DD  0201               	subwf	1,w
 18487  02DE  1803               	skipnc
 18488  02DF  2AE8               	goto	i1l7145
 18489                           
 18490                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 18491  02E0  0878               	movf	_DimmerLightsIntr,w
 18492  02E1  3E04               	addlw	4
 18493  02E2  0086               	movwf	6
 18494  02E3  3001               	movlw	1	; select bank2/3
 18495  02E4  0087               	movwf	7
 18496  02E5  3001               	movlw	1
 18497  02E6  0281               	subwf	1,f
 18498                           
 18499                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 18500  02E7  2AFF               	goto	i1l7149
 18501  02E8                     i1l7145:	
 18502  02E8  0878               	movf	_DimmerLightsIntr,w
 18503  02E9  3E04               	addlw	4
 18504  02EA  0086               	movwf	6
 18505  02EB  3001               	movlw	1	; select bank2/3
 18506  02EC  0087               	movwf	7
 18507  02ED  0878               	movf	_DimmerLightsIntr,w
 18508  02EE  3E05               	addlw	5
 18509  02EF  0084               	movwf	4
 18510  02F0  3001               	movlw	1	; select bank2/3
 18511  02F1  0085               	movwf	5
 18512  02F2  0800               	movf	0,w
 18513  02F3  0201               	subwf	1,w
 18514  02F4  1803               	skipnc
 18515  02F5  2AFF               	goto	i1l7149
 18516                           
 18517                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 18518  02F6  3001               	movlw	1
 18519  02F7  00F2               	movwf	??_setDimmerLights_IntrControl
 18520  02F8  0878               	movf	_DimmerLightsIntr,w
 18521  02F9  3E04               	addlw	4
 18522  02FA  0086               	movwf	6
 18523  02FB  3001               	movlw	1	; select bank2/3
 18524  02FC  0087               	movwf	7
 18525  02FD  0872               	movf	??_setDimmerLights_IntrControl,w
 18526  02FE  0781               	addwf	1,f
 18527  02FF                     i1l7149:	
 18528                           
 18529                           ;Dimmer_B1.c: 150: }
 18530                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18531  02FF  0878               	movf	_DimmerLightsIntr,w
 18532  0300  3E05               	addlw	5
 18533  0301  0086               	movwf	6
 18534  0302  3001               	movlw	1	; select bank2/3
 18535  0303  0087               	movwf	7
 18536  0304  0878               	movf	_DimmerLightsIntr,w
 18537  0305  3E04               	addlw	4
 18538  0306  0084               	movwf	4
 18539  0307  3001               	movlw	1	; select bank2/3
 18540  0308  0085               	movwf	5
 18541  0309  0800               	movf	0,w
 18542  030A  0601               	xorwf	1,w
 18543  030B  1D03               	skipz
 18544  030C  2B61               	goto	i1l7175
 18545                           
 18546                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 18547  030D  0878               	movf	_DimmerLightsIntr,w
 18548  030E  0086               	movwf	6
 18549  030F  3001               	movlw	1	; select bank2/3
 18550  0310  0087               	movwf	7
 18551  0311  1101               	bcf	1,2
 18552  0312  2B2E               	goto	i1l7159
 18553  0313                     i1l7153:	
 18554                           ;Dimmer_B1.c: 154: }
 18555                           ;Dimmer_B1.c: 155: } else {
 18556                           
 18557                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 18558                           
 18559                           
 18560                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 18561  0313  0878               	movf	_DimmerLightsIntr,w
 18562  0314  0086               	movwf	6
 18563  0315  3001               	movlw	1	; select bank2/3
 18564  0316  0087               	movwf	7
 18565  0317  1E81               	btfss	1,5
 18566  0318  2B34               	goto	i1l7161
 18567                           
 18568                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 18569  0319  0878               	movf	_DimmerLightsIntr,w
 18570  031A  3E04               	addlw	4
 18571  031B  0086               	movwf	6
 18572  031C  3001               	movlw	1	; select bank2/3
 18573  031D  0087               	movwf	7
 18574  031E  3001               	movlw	1
 18575  031F  0281               	subwf	1,f
 18576                           
 18577                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 18578  0320  0878               	movf	_DimmerLightsIntr,w
 18579  0321  3E05               	addlw	5
 18580  0322  0086               	movwf	6
 18581  0323  3001               	movlw	1	; select bank2/3
 18582  0324  0087               	movwf	7
 18583  0325  0878               	movf	_DimmerLightsIntr,w
 18584  0326  3E04               	addlw	4
 18585  0327  0084               	movwf	4
 18586  0328  3001               	movlw	1	; select bank2/3
 18587  0329  0085               	movwf	5
 18588  032A  0800               	movf	0,w
 18589  032B  0201               	subwf	1,w
 18590  032C  1C03               	skipc
 18591  032D  2B61               	goto	i1l7175
 18592  032E                     i1l7159:	
 18593                           
 18594                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 18595  032E  0878               	movf	_DimmerLightsIntr,w
 18596  032F  0086               	movwf	6
 18597  0330  3001               	movlw	1	; select bank2/3
 18598  0331  0087               	movwf	7
 18599  0332  1081               	bcf	1,1
 18600                           
 18601                           ;Dimmer_B1.c: 160: }
 18602                           ;Dimmer_B1.c: 161: } else {
 18603  0333  2B61               	goto	i1l7175
 18604  0334                     i1l7161:	
 18605                           
 18606                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 18607  0334  3001               	movlw	1
 18608  0335  00F2               	movwf	??_setDimmerLights_IntrControl
 18609  0336  0878               	movf	_DimmerLightsIntr,w
 18610  0337  3E04               	addlw	4
 18611  0338  0086               	movwf	6
 18612  0339  3001               	movlw	1	; select bank2/3
 18613  033A  0087               	movwf	7
 18614  033B  0872               	movf	??_setDimmerLights_IntrControl,w
 18615  033C  0781               	addwf	1,f
 18616                           
 18617                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 18618  033D  0878               	movf	_DimmerLightsIntr,w
 18619  033E  3E04               	addlw	4
 18620  033F  0086               	movwf	6
 18621  0340  3001               	movlw	1	; select bank2/3
 18622  0341  0087               	movwf	7
 18623  0342  0878               	movf	_DimmerLightsIntr,w
 18624  0343  3E06               	addlw	6
 18625  0344  0084               	movwf	4
 18626  0345  3001               	movlw	1	; select bank2/3
 18627  0346  0085               	movwf	5
 18628  0347  0800               	movf	0,w
 18629  0348  0201               	subwf	1,w
 18630  0349  1C03               	skipc
 18631  034A  2B61               	goto	i1l7175
 18632                           
 18633                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 18634  034B  0878               	movf	_DimmerLightsIntr,w
 18635  034C  0086               	movwf	6
 18636  034D  3001               	movlw	1	; select bank2/3
 18637  034E  0087               	movwf	7
 18638  034F  1081               	bcf	1,1
 18639                           
 18640                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 18641  0350  0878               	movf	_DimmerLightsIntr,w
 18642  0351  0086               	movwf	6
 18643  0352  3001               	movlw	1	; select bank2/3
 18644  0353  0087               	movwf	7
 18645  0354  1301               	bcf	1,6
 18646                           
 18647                           ;Dimmer_B1.c: 167: if (lights == 1) {
 18648  0355  0874               	movf	setDimmerLights_IntrControl@lights,w
 18649  0356  3A01               	xorlw	1
 18650  0357  1D03               	skipz
 18651  0358  2B5B               	goto	i1l7171
 18652                           
 18653                           ;Dimmer_B1.c: 168: RA3 = 0;
 18654  0359  0020               	movlb	0	; select bank0
 18655  035A  118C               	bcf	12,3	;volatile
 18656  035B                     i1l7171:	
 18657                           
 18658                           ;Dimmer_B1.c: 170: }
 18659                           ;Dimmer_B1.c: 173: if (lights == 2) {
 18660  035B  0874               	movf	setDimmerLights_IntrControl@lights,w
 18661  035C  3A02               	xorlw	2
 18662  035D  1D03               	skipz
 18663  035E  2B61               	goto	i1l7175
 18664                           
 18665                           ;Dimmer_B1.c: 174: RC7 = 0;
 18666  035F  0020               	movlb	0	; select bank0
 18667  0360  138E               	bcf	14,7	;volatile
 18668  0361                     i1l7175:	
 18669                           
 18670                           ;Dimmer_B1.c: 175: }
 18671                           ;Dimmer_B1.c: 182: }
 18672                           ;Dimmer_B1.c: 183: }
 18673                           ;Dimmer_B1.c: 184: }
 18674                           ;Dimmer_B1.c: 185: }
 18675                           ;Dimmer_B1.c: 186: }
 18676                           ;Dimmer_B1.c: 187: }
 18677                           ;Dimmer_B1.c: 188: }
 18678                           ;Dimmer_B1.c: 189: if (DimmerLightsIntr->Triac == 1) {
 18679  0361  0878               	movf	_DimmerLightsIntr,w
 18680  0362  3E08               	addlw	8
 18681  0363  0086               	movwf	6
 18682  0364  3001               	movlw	1	; select bank2/3
 18683  0365  0087               	movwf	7
 18684  0366  1E81               	btfss	1,5
 18685  0367  2B92               	goto	i1l7193
 18686                           
 18687                           ;Dimmer_B1.c: 190: DimmerLightsIntr->TriacTime++;
 18688  0368  3001               	movlw	1
 18689  0369  00F2               	movwf	??_setDimmerLights_IntrControl
 18690  036A  0878               	movf	_DimmerLightsIntr,w
 18691  036B  3E07               	addlw	7
 18692  036C  0086               	movwf	6
 18693  036D  3001               	movlw	1	; select bank2/3
 18694  036E  0087               	movwf	7
 18695  036F  0872               	movf	??_setDimmerLights_IntrControl,w
 18696  0370  0781               	addwf	1,f
 18697                           
 18698                           ;Dimmer_B1.c: 191: if (DimmerLightsIntr->TriacTime >= 5) {
 18699  0371  0878               	movf	_DimmerLightsIntr,w
 18700  0372  3E07               	addlw	7
 18701  0373  0086               	movwf	6
 18702  0374  3001               	movlw	1	; select bank2/3
 18703  0375  0087               	movwf	7
 18704  0376  3005               	movlw	5
 18705  0377  0201               	subwf	1,w
 18706  0378  1C03               	skipc
 18707  0379  2B92               	goto	i1l7193
 18708                           
 18709                           ;Dimmer_B1.c: 192: DimmerLightsIntr->TriacTime = 0;
 18710  037A  0878               	movf	_DimmerLightsIntr,w
 18711  037B  3E07               	addlw	7
 18712  037C  0086               	movwf	6
 18713  037D  3001               	movlw	1	; select bank2/3
 18714  037E  0087               	movwf	7
 18715  037F  0181               	clrf	1
 18716                           
 18717                           ;Dimmer_B1.c: 193: DimmerLightsIntr->Triac = 0;
 18718  0380  0878               	movf	_DimmerLightsIntr,w
 18719  0381  3E08               	addlw	8
 18720  0382  0086               	movwf	6
 18721  0383  3001               	movlw	1	; select bank2/3
 18722  0384  0087               	movwf	7
 18723  0385  1281               	bcf	1,5
 18724                           
 18725                           ;Dimmer_B1.c: 196: if (lights == 1) {
 18726  0386  0874               	movf	setDimmerLights_IntrControl@lights,w
 18727  0387  3A01               	xorlw	1
 18728  0388  1D03               	skipz
 18729  0389  2B8C               	goto	i1l7189
 18730                           
 18731                           ;Dimmer_B1.c: 197: RA7 = 0;
 18732  038A  0020               	movlb	0	; select bank0
 18733  038B  138C               	bcf	12,7	;volatile
 18734  038C                     i1l7189:	
 18735                           ;Dimmer_B1.c: 198: ;;
 18736                           
 18737                           
 18738                           ;Dimmer_B1.c: 199: }
 18739                           ;Dimmer_B1.c: 202: if (lights == 2) {
 18740  038C  0874               	movf	setDimmerLights_IntrControl@lights,w
 18741  038D  3A02               	xorlw	2
 18742  038E  1D03               	skipz
 18743  038F  2B92               	goto	i1l7193
 18744                           
 18745                           ;Dimmer_B1.c: 203: RB4 = 0;
 18746  0390  0020               	movlb	0	; select bank0
 18747  0391  120D               	bcf	13,4	;volatile
 18748  0392                     i1l7193:	
 18749                           
 18750                           ;Dimmer_B1.c: 204: }
 18751                           ;Dimmer_B1.c: 211: }
 18752                           ;Dimmer_B1.c: 212: }
 18753                           ;Dimmer_B1.c: 213: if (DimmerLightsIntr->TriacFlag == 1) {
 18754  0392  0878               	movf	_DimmerLightsIntr,w
 18755  0393  3E09               	addlw	9
 18756  0394  0086               	movwf	6
 18757  0395  3001               	movlw	1	; select bank2/3
 18758  0396  0087               	movwf	7
 18759  0397  1E81               	btfss	1,5
 18760  0398  0008               	return
 18761                           
 18762                           ;Dimmer_B1.c: 214: DimmerLightsIntr->TriacCount++;
 18763  0399  3001               	movlw	1
 18764  039A  00F2               	movwf	??_setDimmerLights_IntrControl
 18765  039B  0878               	movf	_DimmerLightsIntr,w
 18766  039C  3E0A               	addlw	10
 18767  039D  0086               	movwf	6
 18768  039E  3001               	movlw	1	; select bank2/3
 18769  039F  0087               	movwf	7
 18770  03A0  0872               	movf	??_setDimmerLights_IntrControl,w
 18771  03A1  0781               	addwf	1,f
 18772                           
 18773                           ;Dimmer_B1.c: 215: if (DimmerLightsIntr->TriacCount == 60) {
 18774  03A2  0878               	movf	_DimmerLightsIntr,w
 18775  03A3  3E0A               	addlw	10
 18776  03A4  0086               	movwf	6
 18777  03A5  3001               	movlw	1	; select bank2/3
 18778  03A6  0087               	movwf	7
 18779  03A7  0801               	movf	1,w
 18780  03A8  3A3C               	xorlw	60
 18781  03A9  1D03               	skipz
 18782  03AA  0008               	return
 18783                           
 18784                           ;Dimmer_B1.c: 216: DimmerLightsIntr->TriacCount = 0;
 18785  03AB  0878               	movf	_DimmerLightsIntr,w
 18786  03AC  3E0A               	addlw	10
 18787  03AD  0086               	movwf	6
 18788  03AE  3001               	movlw	1	; select bank2/3
 18789  03AF  0087               	movwf	7
 18790  03B0  0181               	clrf	1
 18791                           
 18792                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacFlag = 0;
 18793  03B1  0878               	movf	_DimmerLightsIntr,w
 18794  03B2  3E09               	addlw	9
 18795  03B3  0086               	movwf	6
 18796  03B4  3001               	movlw	1	; select bank2/3
 18797  03B5  0087               	movwf	7
 18798  03B6  1281               	bcf	1,5
 18799  03B7  0008               	return
 18800  03B8                     __end_of_setDimmerLights_IntrControl:	
 18801                           
 18802                           	psect	text125
 18803  1C1B                     __ptext125:	
 18804 ;; *************** function _DimmerIntrPointSelect *****************
 18805 ;; Defined at:
 18806 ;;		line 72 in file "../src/Dimmer_B1.c"
 18807 ;; Parameters:    Size  Location     Type
 18808 ;;  lights          1    wreg     unsigned char 
 18809 ;; Auto vars:     Size  Location     Type
 18810 ;;  lights          1    1[COMMON] unsigned char 
 18811 ;; Return value:  Size  Location     Type
 18812 ;;		None               void
 18813 ;; Registers used:
 18814 ;;		wreg
 18815 ;; Tracked objects:
 18816 ;;		On entry : 0/0
 18817 ;;		On exit  : 0/0
 18818 ;;		Unchanged: 0/0
 18819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18822 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18823 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18824 ;;Total ram usage:        2 bytes
 18825 ;; Hardware stack levels used:    1
 18826 ;; This function calls:
 18827 ;;		Nothing
 18828 ;; This function is called by:
 18829 ;;		_setDimmerLights_IntrControl
 18830 ;; This function uses a non-reentrant model
 18831 ;;
 18832                           
 18833                           
 18834                           ;psect for function _DimmerIntrPointSelect
 18835  1C1B                     _DimmerIntrPointSelect:	
 18836                           
 18837                           ;incstack = 0
 18838                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18839                           ;DimmerIntrPointSelect@lights stored from wreg
 18840  1C1B  00F1               	movwf	DimmerIntrPointSelect@lights
 18841                           
 18842                           ;Dimmer_B1.c: 74: if (lights == 1) {
 18843  1C1C  0871               	movf	DimmerIntrPointSelect@lights,w
 18844  1C1D  3A01               	xorlw	1
 18845  1C1E  1D03               	skipz
 18846  1C1F  2C24               	goto	i1l743
 18847                           
 18848                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 18849  1C20  30BE               	movlw	_DimmerLights1& (0+255)
 18850  1C21  00F0               	movwf	??_DimmerIntrPointSelect
 18851  1C22  0870               	movf	??_DimmerIntrPointSelect,w
 18852  1C23  00F8               	movwf	_DimmerLightsIntr
 18853  1C24                     i1l743:	
 18854                           
 18855                           ;Dimmer_B1.c: 76: }
 18856                           ;Dimmer_B1.c: 79: if (lights == 2) {
 18857  1C24  0871               	movf	DimmerIntrPointSelect@lights,w
 18858  1C25  3A02               	xorlw	2
 18859  1C26  1D03               	skipz
 18860  1C27  0008               	return
 18861                           
 18862                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 18863  1C28  30CD               	movlw	_DimmerLights2& (0+255)
 18864  1C29  00F0               	movwf	??_DimmerIntrPointSelect
 18865  1C2A  0870               	movf	??_DimmerIntrPointSelect,w
 18866  1C2B  00F8               	movwf	_DimmerLightsIntr
 18867  1C2C  0008               	return
 18868  1C2D                     __end_of_DimmerIntrPointSelect:	
 18869                           
 18870                           	psect	text126
 18871  1BC9                     __ptext126:	
 18872 ;; *************** function _IOC_ISR *****************
 18873 ;; Defined at:
 18874 ;;		line 402 in file "../src/MCU_B1.c"
 18875 ;; Parameters:    Size  Location     Type
 18876 ;;		None
 18877 ;; Auto vars:     Size  Location     Type
 18878 ;;		None
 18879 ;; Return value:  Size  Location     Type
 18880 ;;		None               void
 18881 ;; Registers used:
 18882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18883 ;; Tracked objects:
 18884 ;;		On entry : 0/0
 18885 ;;		On exit  : 0/0
 18886 ;;		Unchanged: 0/0
 18887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18892 ;;Total ram usage:        0 bytes
 18893 ;; Hardware stack levels used:    1
 18894 ;; Hardware stack levels required when called:    3
 18895 ;; This function calls:
 18896 ;;		_setDimmerReClock
 18897 ;; This function is called by:
 18898 ;;		_ISR
 18899 ;; This function uses a non-reentrant model
 18900 ;;
 18901                           
 18902                           
 18903                           ;psect for function _IOC_ISR
 18904  1BC9                     _IOC_ISR:	
 18905                           
 18906                           ;MCU_B1.c: 403: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18907                           
 18908                           ;incstack = 0
 18909                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18910  1BC9  1D8B               	btfss	11,3	;volatile
 18911  1BCA  0008               	return
 18912  1BCB  1C0B               	btfss	11,0	;volatile
 18913  1BCC  0008               	return
 18914  1BCD  0027               	movlb	7	; select bank7
 18915  1BCE  1D16               	btfss	22,2	;volatile
 18916  1BCF  0008               	return
 18917                           
 18918                           ;MCU_B1.c: 404: IOCBF2 = 0;
 18919  1BD0  1116               	bcf	22,2	;volatile
 18920                           
 18921                           ;MCU_B1.c: 405: IOCIF = 0;
 18922  1BD1  100B               	bcf	11,0	;volatile
 18923                           
 18924                           ;MCU_B1.c: 406: if (myMain.PowerON == 1) {
 18925  1BD2  0021               	movlb	1	; select bank1
 18926  1BD3  1C20               	btfss	_myMain^(0+128),0
 18927  1BD4  0008               	return
 18928                           
 18929                           ;MCU_B1.c: 408: setDimmerReClock();
 18930  1BD5  319A  22F3         	fcall	_setDimmerReClock
 18931  1BD7  0008               	return
 18932  1BD8                     __end_of_IOC_ISR:	
 18933                           
 18934                           	psect	text127
 18935  1AF3                     __ptext127:	
 18936 ;; *************** function _setDimmerReClock *****************
 18937 ;; Defined at:
 18938 ;;		line 244 in file "../src/MCU_B1.c"
 18939 ;; Parameters:    Size  Location     Type
 18940 ;;		None
 18941 ;; Auto vars:     Size  Location     Type
 18942 ;;		None
 18943 ;; Return value:  Size  Location     Type
 18944 ;;		None               void
 18945 ;; Registers used:
 18946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18947 ;; Tracked objects:
 18948 ;;		On entry : 0/0
 18949 ;;		On exit  : 0/0
 18950 ;;		Unchanged: 0/0
 18951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18956 ;;Total ram usage:        0 bytes
 18957 ;; Hardware stack levels used:    1
 18958 ;; Hardware stack levels required when called:    2
 18959 ;; This function calls:
 18960 ;;		_setDimmerLights_IntrIOC_GO
 18961 ;; This function is called by:
 18962 ;;		_IOC_ISR
 18963 ;; This function uses a non-reentrant model
 18964 ;;
 18965                           
 18966                           
 18967                           ;psect for function _setDimmerReClock
 18968  1AF3                     _setDimmerReClock:	
 18969                           
 18970                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18971                           
 18972                           ;incstack = 0
 18973                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18974  1AF3  3001               	movlw	1
 18975  1AF4  319F  27AF  319A   	fcall	_setDimmerLights_IntrIOC_GO
 18976                           
 18977                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 18978  1AF7  3002               	movlw	2
 18979  1AF8  319F  27AF         	fcall	_setDimmerLights_IntrIOC_GO
 18980  1AFA  0008               	return
 18981  1AFB                     __end_of_setDimmerReClock:	
 18982                           
 18983                           	psect	text128
 18984  1FAF                     __ptext128:	
 18985 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18986 ;; Defined at:
 18987 ;;		line 28 in file "../src/Dimmer_B1.c"
 18988 ;; Parameters:    Size  Location     Type
 18989 ;;  lights          1    wreg     unsigned char 
 18990 ;; Auto vars:     Size  Location     Type
 18991 ;;  lights          1    2[COMMON] unsigned char 
 18992 ;; Return value:  Size  Location     Type
 18993 ;;		None               void
 18994 ;; Registers used:
 18995 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18996 ;; Tracked objects:
 18997 ;;		On entry : 0/0
 18998 ;;		On exit  : 0/0
 18999 ;;		Unchanged: 0/0
 19000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19004 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19005 ;;Total ram usage:        1 bytes
 19006 ;; Hardware stack levels used:    1
 19007 ;; Hardware stack levels required when called:    1
 19008 ;; This function calls:
 19009 ;;		_DimmerIntrIOCPointSelect
 19010 ;; This function is called by:
 19011 ;;		_setDimmerReClock
 19012 ;; This function uses a non-reentrant model
 19013 ;;
 19014                           
 19015                           
 19016                           ;psect for function _setDimmerLights_IntrIOC_GO
 19017  1FAF                     _setDimmerLights_IntrIOC_GO:	
 19018                           
 19019                           ;incstack = 0
 19020                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19021                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19022  1FAF  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19023                           
 19024                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 19025  1FB0  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19026  1FB1  319C  24AE  319F   	fcall	_DimmerIntrIOCPointSelect
 19027                           
 19028                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 19029  1FB4  0021               	movlb	1	; select bank1
 19030  1FB5  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19031  1FB6  0086               	movwf	6
 19032  1FB7  3001               	movlw	1	; select bank2/3
 19033  1FB8  0087               	movwf	7
 19034  1FB9  1801               	btfsc	1,0
 19035  1FBA  0008               	return
 19036  1FBB  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19037  1FBC  3E09               	addlw	9
 19038  1FBD  0086               	movwf	6
 19039  1FBE  3001               	movlw	1	; select bank2/3
 19040  1FBF  0087               	movwf	7
 19041  1FC0  1A81               	btfsc	1,5
 19042  1FC1  0008               	return
 19043                           
 19044                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 19045  1FC2  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19046  1FC3  0086               	movwf	6
 19047  1FC4  3001               	movlw	1	; select bank2/3
 19048  1FC5  0087               	movwf	7
 19049  1FC6  1401               	bsf	1,0
 19050                           
 19051                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 19052  1FC7  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19053  1FC8  3E09               	addlw	9
 19054  1FC9  0086               	movwf	6
 19055  1FCA  3001               	movlw	1	; select bank2/3
 19056  1FCB  0087               	movwf	7
 19057  1FCC  1681               	bsf	1,5
 19058                           
 19059                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 19060  1FCD  0020               	movlb	0	; select bank0
 19061  1FCE  1D0D               	btfss	13,2	;volatile
 19062  1FCF  2FD4               	goto	i1l6707
 19063                           
 19064                           ;Dimmer_B1.c: 36: Dimmer.Correction = 1;
 19065  1FD0  0021               	movlb	1	; select bank1
 19066  1FD1  01CA               	clrf	(_Dimmer^(0+128)+2)
 19067  1FD2  0ACA               	incf	(_Dimmer^(0+128)+2),f
 19068                           
 19069                           ;Dimmer_B1.c: 37: } else {
 19070  1FD3  0008               	return
 19071  1FD4                     i1l6707:	
 19072                           
 19073                           ;Dimmer_B1.c: 38: Dimmer.Correction = 0;
 19074  1FD4  0021               	movlb	1	; select bank1
 19075  1FD5  01CA               	clrf	(_Dimmer^(0+128)+2)
 19076  1FD6  0008               	return
 19077  1FD7                     __end_of_setDimmerLights_IntrIOC_GO:	
 19078                           
 19079                           	psect	text129
 19080  1CAE                     __ptext129:	
 19081 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19082 ;; Defined at:
 19083 ;;		line 8 in file "../src/Dimmer_B1.c"
 19084 ;; Parameters:    Size  Location     Type
 19085 ;;  lights          1    wreg     unsigned char 
 19086 ;; Auto vars:     Size  Location     Type
 19087 ;;  lights          1    1[COMMON] unsigned char 
 19088 ;; Return value:  Size  Location     Type
 19089 ;;		None               void
 19090 ;; Registers used:
 19091 ;;		wreg
 19092 ;; Tracked objects:
 19093 ;;		On entry : 0/0
 19094 ;;		On exit  : 0/0
 19095 ;;		Unchanged: 0/0
 19096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19098 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19099 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19100 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19101 ;;Total ram usage:        2 bytes
 19102 ;; Hardware stack levels used:    1
 19103 ;; This function calls:
 19104 ;;		Nothing
 19105 ;; This function is called by:
 19106 ;;		_setDimmerLights_IntrIOC_GO
 19107 ;; This function uses a non-reentrant model
 19108 ;;
 19109                           
 19110                           
 19111                           ;psect for function _DimmerIntrIOCPointSelect
 19112  1CAE                     _DimmerIntrIOCPointSelect:	
 19113                           
 19114                           ;incstack = 0
 19115                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19116                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19117  1CAE  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19118                           
 19119                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19120  1CAF  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19121  1CB0  3A01               	xorlw	1
 19122  1CB1  1D03               	skipz
 19123  1CB2  2CB8               	goto	i1l732
 19124                           
 19125                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19126  1CB3  30BE               	movlw	_DimmerLights1& (0+255)
 19127  1CB4  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19128  1CB5  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19129  1CB6  0021               	movlb	1	; select bank1
 19130  1CB7  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19131  1CB8                     i1l732:	
 19132                           
 19133                           ;Dimmer_B1.c: 12: }
 19134                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19135  1CB8  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19136  1CB9  3A02               	xorlw	2
 19137  1CBA  1D03               	skipz
 19138  1CBB  0008               	return
 19139                           
 19140                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19141  1CBC  30CD               	movlw	_DimmerLights2& (0+255)
 19142  1CBD  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19143  1CBE  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19144  1CBF  0021               	movlb	1	; select bank1
 19145  1CC0  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19146  1CC1  0008               	return
 19147  1CC2                     __end_of_DimmerIntrIOCPointSelect:	
 19148  007E                     btemp	set	126	;btemp
 19149  007E                     pic14e$flags	set	126
 19150  007E                     wtemp	set	126
 19151  007E                     wtemp0	set	126
 19152  0080                     wtemp1	set	128
 19153  0082                     wtemp2	set	130
 19154  0084                     wtemp3	set	132
 19155  0086                     wtemp4	set	134
 19156  0088                     wtemp5	set	136
 19157  007F                     wtemp6	set	127
 19158  007E                     ttemp	set	126
 19159  007E                     ttemp0	set	126
 19160  0081                     ttemp1	set	129
 19161  0084                     ttemp2	set	132
 19162  0087                     ttemp3	set	135
 19163  007F                     ttemp4	set	127
 19164  007E                     ltemp	set	126
 19165  007E                     ltemp0	set	126
 19166  0082                     ltemp1	set	130
 19167  0086                     ltemp2	set	134
 19168  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         261
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     78      78
    BANK1            80      5      79
    BANK2            80      0      77
    BANK3            80      4      73
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK2[2]), DlySw1(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _main->_Switch_Main
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _getMain_LightsStatus->_getDimmerLights_Status
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_getMain_All_Error_Status
    _setLED->_LedPointSelect
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setRF_DimmerLights
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_setRF_DimmerLights
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Switch_Main->_setMain_Exception

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  172211
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1705
                             _setBuz
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     669
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0     238
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0     238
                                              7 BANK0      2     2      0
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   43389
                                             76 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   27010
                                             70 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           3     3      0     567
                                              5 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    6     6      0   16045
                                             75 BANK0      1     1      0
                                              0 BANK1      5     5      0
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0   12795
                                             70 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1078
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1078
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   59187
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   59187
                                             74 BANK0      4     4      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   57960
                                             72 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1767
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   55921
                             _setBuz
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   36092
                                             70 BANK0      2     2      0
             _getDimmerLights_Status
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   18124
                                             68 BANK0      3     3      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   17842
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   17749
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   17656
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    4020
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4925
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1026
                                              9 BANK0      6     6      0
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      71
                                              2 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0     114
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1202
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1202
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1739
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     297
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1442
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   10215
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1102
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   14003
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 5     5      0   14003
                                             69 BANK0      5     5      0
            _DimmerLightsPointSelect
                         _getLoad_OK
           _getMain_All_Error_Status
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   10056
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      6     5      1    1716
                                              7 BANK0      6     5      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1047
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   34351
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   34351
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0   11996
                                             66 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1705
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                4     4      0   12318
                                             66 BANK0      4     4      0
            _DimmerLightsPointSelect
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    9693
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    8711
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     579
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    4368
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3665
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    3324
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1679
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     264
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     198
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     198
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getLoad_OK
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setLED
           _LedPointSelect
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
           _setRF_DimmerLights
             _setPercentValue
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _setTxData
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv
     _setTxData

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      5      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      49      11       91.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     184      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     184      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Nov 11 17:23:48 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 1663                                       l98 1677  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1F19  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 0079                   __end_of_setDelayOff_GO 1800  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                 __size_of_getRF_KeyStatus 0011  
                   _setDimmerLights_Main 0B59                             ___ftadd@sign 0048  
                                    l110 1435                                      l106 143B  
                                    l107 1437                                      l108 1425  
                                    l330 1D60                                      l331 1D62  
                   _setDimmerLights_SwOn 13B2                                      l255 096E  
                                    l280 0B0C                                      l281 0B53  
                                    l374 1F67                                      l801 0B8A  
                                    l582 08CB                                      l807 0B8C  
                                    l856 1793                                      l786 1C7F  
                                    _GIE 005F                                      _CRC 00CB  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 00CF                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BC  
                                    _ISR 0004                                      _WDT 0125  
           getDimmerLights_Status@lights 0022                                      _Sw1 0154  
                                    _Sw2 01DC                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1D6D                    _Buzzer_Initialization 1AB7  
                        __end_of_ADC_Set 1AF3                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                          _setDimmerLights 0CDD  
                 _setMain_Exception$3908 00EB                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1ED4                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0067                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1BD8                               Load_Main@i 002E  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l1331 11FA                                     l2220 070A  
                                   l2301 0A73                                     l2230 0685  
                                   l2222 0647                                     l2223 0649  
                                   l2232 06C2                                     l2224 0651  
                                   l1345 115B                                     l2313 1292  
                                   l2305 14FE                                     l1354 1488  
               ?_DimmerLightsPointSelect 0070                                     l2229 0689  
                                   l1542 14C8                                     l2271 0A8F  
                                   l1713 0206                                     l2281 0AE0  
                                   l2611 1D2F                          __end_of_IOC_Set 1B96  
                                   l1718 01A7                                     l1591 118F  
                                   l1719 01A5                                     l2287 1232  
                                   l1586 1178                                     l1587 1193  
                                   l2627 1F29                                     l2637 051E  
                         _Load_Main$4288 002D                                     l2639 03F7  
                                   l2915 0859                                     l2909 0842  
                                   l1869 0E9F                                     l2938 05C6  
                                   l9011 1F4A                    _setDimmerLights_SwOff 1740  
                                   l9015 1F50                                     l9009 1F47  
                                   l9035 1173                                     l9211 0AEA  
                                   l8403 054F                                     l8341 0818  
                                   l8501 0F2A                                     l9045 118A  
                                   l9037 117C                                     l9061 08E7  
                                   l9301 0D06                                     l8413 0565  
                                   l9141 0A50                                     l9133 0A33  
                                   l9071 08F7                                     l9215 0AF0  
                                   l8431 0592                                     l8407 0556  
                                   l9143 0A54                                     l9119 0A07  
                                   l8345 081F                                     l9057 08E1  
                                   l9065 08ED                                     l9209 0AE7  
                                   l9217 0AF3                                     l8433 059C  
                                   l8425 057F                                     l8521 0F79  
                                   l9137 0A48                                     l8355 0847  
                                   l8347 0829                                     l9091 0921  
                                   l9075 08FD                                     l9315 0D45  
                                   l9323 12BD                                     l9243 0B1E  
                                   l9227 0B09                                     l9163 0943  
                                   l8443 05B8                                     l8435 05A1  
                                   l8515 0F63                                     l9139 0A4C  
                                   l9147 0A58                                     l8373 1C36  
                                   l8357 084F                                     l8349 082E  
                                   l9245 0B37                                     l9229 0B03  
                                   l9181 0974                                     l9157 093A  
                                   l9501 1C15                                     l8453 05EA  
                                   l8445 05C2                                     l8437 05A5  
                                   l8533 0FB4                                     l9341 1073  
                                   l8607 1CCD                                     l8623 10D7  
                                   l8391 1E9B                                     l9087 091B  
                                   l9095 0927                                     l9079 0903  
                                   l9191 0984                                     l9183 0977  
                                   l9159 093D                                     l8463 0605  
                                   l9351 107F                                     l9343 1075  
                                   l9281 1F08                                     l8369 1C30  
                                   l8473 0EBA                                     l9257 0B55  
                                   l9177 0955                                     l8449 05D8  
                                   l8545 0FD0                                     l8537 0FBC  
                                   l9521 0A92                                     l9353 1083  
                                   l9267 1F78                                     l9275 1EFF  
                                   l9195 098A                                     l9187 097D  
                                   l9269 1F83                                     l9277 1F02  
                                   l8493 0F11                                     l8565 0C6F  
                                   l9189 0981                                     l8549 0FD8  
                                   l9533 0AAA                    _myMain_Initialization 0800  
                                   l8479 0ED0                                     l8591 0CBA  
                                   l8583 0C9F                                     l8663 1546  
                                   l9703 0BCF                                     l9439 1143  
                                   l9463 10FD                                     l9543 0ACB  
                                   l9383 16C2                                     l8761 17F3  
                                   l8753 17D7                                     l8593 0CC3  
                                   l8585 0CAD                                     l8737 09F6  
                                   l8681 156C                                     l8673 154E  
                                   l8657 153B                                     l9465 10E1  
                                   l9385 1697                                     l8595 0CC6  
                                   l8675 155A                                     l9811 145E  
                                   l9467 1102                                     l9387 16C8  
                                   l9581 1312                                     l8757 17DD  
                                   l8685 1575                                     l9805 1449  
                                   l9725 135E                                     l9549 0AD6  
                                   l9591 1322                                     l9575 1309  
                                   l8759 17EA                                     l8599 0CD4  
                                   l8775 1BF2                                     l8863 13F2  
                                   l9831 158E                                     l9559 1CE1  
                                   l9585 1319                                     l9577 130C  
                                   l8689 157D                                     l8961 1EC9  
                                   l9729 1365                                     _CFGS 0CAE  
                                   l9587 131C                                     l9691 0BA2  
                                   l9683 0B81                                     l8947 1DE6  
                                   l9843 15AB                                     l8957 1EBE  
                                   l9685 0B84                                     l9693 0BA8  
                                   l8949 1DEC                                     l8973 1505  
                                   l9853 15CB                                     l9837 159D  
                                   l9847 15BB                                     l9855 15D4  
                                   l9927 0E6E                             __CFG_WDTE$ON 0000  
                                   l8993 1D8F                                     l8889 1787  
                                   l8985 1280                                     l8977 151E  
                                   l9937 0E83                                     l9793 1E63  
                                   l8995 1D92                                     l8899 11A2  
                                   l9939 0E84                                     l9787 1E5B  
                                   l9789 1E5E                                     l8999 1D98  
                                   l9977 0668                                     l9897 0E1E  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   _PEIE 005E                                     u9115 1551  
                                   u9220 09A4                                     u9055 10C3  
                                   u8415 084A                                     u9135 155B  
                                   u9225 09A2                                     u9145 1565  
                                   u9155 156D                                     u8445 0860  
                                   u8375 0824                                     u8615 0593  
                                   u8395 083D                                     u8645 05A6  
                                   u9385 1D0D                                     u8745 0EE2  
                                   u8585 0580                                     u8905 0FDF  
                                   u8825 0F85                                     u8755 0EF2  
                                   u8675 05B9                                     u8835 0F95  
                                   u8765 0F12                                     u8775 0F21  
                                   u8935 0C76                                     u8855 0FBD  
                                   u8785 0F2B                                     u8865 0FC3  
                                   _LWLO 0CAD                                     u8965 0CA0  
                                   u8895 0FD9                                     u9945 1F6D  
                                   u8995 0CBB                                     _RSSI 00D0  
                                   _WREN 0CAA                                     _Buz1 00B0  
                                   _Load 0127                                     _Temp 00D8  
                                   _main 15DA                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 08D1                          __end_of_RF_Main 1AC0  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1BAE  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1AF3                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 12A7  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                      ?_getDimmer_LoadOK 0070                                    ??_ISR 0075  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
                 _getDimmerLights_Status 1BD8                       ??_getDimmer_LoadOK 0020  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1B7E  
       setDimmerLights_ErrorClose@lights 0068            __end_of_DimmerIntrPointSelect 1C2D  
                                  l10011 06A7                                    l10013 06A9  
                                  l10041 06F8                                    l10105 0457  
                                  l10029 06D7                                    l10061 1D34  
                                  l10119 0495                                    l10065 1D3A  
                                  l10129 04C7                                    l10155 051A  
                                  l10237 0780                                    l10341 0C23  
                                  l10423 0063                                    l10095 0425  
                                  l10079 03E2                                    l10169 140F  
                                  l10433 0074                                    l10337 0C1B  
                                  l10329 0BF6                                    l10507 0142  
                                  l10451 0096                                    l10603 1F32  
                                  l10371 125E                                    l10525 0161  
                                  l10357 0C50                                    l10527 0167  
                                  l10543 01A2                                    l10481 011A  
                                  l10457 00C0                                    l10389 14B2  
                                  l10487 0127                                    l10399 14C9  
                                  l10671 1609                    ?_setDimmerLights_Main 0070  
                                  l10489 012D                                    l10579 01F4  
                                  l10667 15FE                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 01E5  
                        __end_of___awdiv 1584                          __end_of___ftadd 061D  
                        __end_of___ftdiv 0F4C                                    u10115 16A0  
                                  u10165 10EA                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                                    u11095 06E8  
                                  _T1CON 0018                                    u11365 1405  
                        __end_of___fttol 0CDD                                    u11545 0C09  
                                  u11635 1255                                    u11485 11F1  
                                  u11805 00C2                                    u10845 0E5F  
                                  u11645 1264                                    u11815 00C7  
                                  u11825 00E7                                    u10865 0E74  
                                  u11665 14A1                                    u11595 0C3D  
                                  u11675 14C0                                    u10965 0662  
                                  u11695 14D7                                    u11875 0133  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l732 1CB8  
                                  i1l743 1C24                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0021  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                     setMain_Exception@buz 00EA  
                __end_of_Timeout_Counter 1D13                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 1FD7               _setDimmerLights_IntrIOC_GO 1FAF  
                       __end_of_TMR1_ISR 2000             __size_of_CC2500_WriteCommand 001A  
     __end_of_setDimmerLights_ErrorClose 16E5               _setDimmerLights_ErrorClose 168B  
                       __end_of_TMR1_Set 1BA2                                    _getAD 1E50  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1C75  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03D0                           __CFG_BOREN$OFF 0000  
           __end_of_getMain_Lights_Count 0800                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0012  
           __end_of_getMain_LightsStatus 1105            __end_of_setLED_Initialization 1C51  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 099A              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0070  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 16E5  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ?_setMemory_Modify 0070  
                      ??_setPercentValue 0059                             __end_of_main 1632  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1AD6  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D71  
                   _setSw_Initialization 1B1B                                   ??_main 006E  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0A06                           _setMemory_Data 1B4E  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 0014  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03D0  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C88  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 0052  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0027  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 0870                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1EB2  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 0870  
               _getMain_All_Error_Status 1162                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1DF3                                   i1l7113 0263  
                                 i1l7131 02AD                                   i1l7133 02B3  
                                 i1l7109 025C                                   i1l7161 0334  
                                 i1l7145 02E8                                   i1l7153 0313  
                                 i1l7137 02C6                                   i1l7171 035B  
                                 i1l7139 02CC                                   i1l7149 02FF  
                                 i1l7159 032E                                   i1l7175 0361  
                                 i1l7193 0392                                   i1l6707 1FD4  
                                 i1l7189 038C                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                                 u642_25 0237                       __size_of_Load_Main 01C3  
                                 _TMR1IE 0488                                   _TMR1IF 0088  
                                 u765_25 1FFA                                   _IO_Set 1D6D  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1AB5           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1D28                                   _Dimmer 00C8  
                                 _DlySw1 0169                                   _DlySw2 016B  
             __end_of_Mcu_Initialization 1C63                      __end_of_Buzzer_Main 1442  
                                 _Memory 0220                                   _Timer1 0120  
     __end_of_setDimmerLights_TriggerAdj 1E50               _setDimmerLights_TriggerAdj 1E30  
                                 ___bmul 1C2D                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                    setDimmerLights@lights 002C  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00D6  
                                 _s_data 00D7                   ??_setDimmerLights_SwOn 0062  
                                 _setLED 08D1                                   _myMain 00A0  
              _setDimmerLights_Main$2502 0067                   __end_of_setMemory_Data 1B5A  
                       _DimmerLightsIntr 0078                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0027                         ___awdiv@quotient 0027  
                                 _setBuz 1632                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1AE0         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 03B8  
            _setDimmerLights_IntrControl 020C                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1CAE  
            getMain_Lights_Count@status1 0022              getMain_Lights_Count@status2 0023  
            getMain_Lights_Count@status3 0021                    __end_of_SwPointSelect 1CEA  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0074  
                __size_of_LedPointSelect 0022                  __size_of_getMain_LoadOK 000E  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 1D28  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 1740  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0045  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                     _getRF_KeyStatus$5689 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 1E70                            __end_of_getAD 1E70  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 003D                       _LED_Initialization 1B66  
                        _getSw_KeyStatus 1066                ??_setControl_Lights_Table 0068  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 005D  
                       ?_setDimmerLights 0027                     _getMain_Lights_Count 07EA  
                              ?_WDT_Main 0070                        __end_of_Load_Main 020C  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 10D9  
             __end_of_set_TimeoutCleared 1ADB                 __end_of_setDimmerReClock 1AFB  
                     __size_of_getRxData 006F                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00CC                           _DimmerLights22 00CD  
                   __size_of_setLED_Main 0044                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1AC0  
                     ??_CC2500_WriteByte 0020                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 13F8                        ??_setRFSW_Control 0066  
                      __end_of_Temp_Main 1AC6                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1AFB                               __pnvCOMMON 007B  
              getMain_LightsStatus@count 0025                            ??_Switch_Main 006C  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 0077  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0070                               __pmaintext 15DA  
                    _CC2500_WriteCommand 1D86                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0075                            ?_setTemp_Main 0070  
                             _getLoad_AD 0BD5                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                             _getLoad_OK 1B0B                       __size_of_setTxData 0099  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                  ?_getMain_Lights_Count 0070                                  _ADC_Set 1AEC  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 1236  
                             ??_WDT_Main 0020                    ?_getMain_LightsStatus 0070  
           __end_of_setRF_Initialization 1B42                       _setRFSW_AdjControl 126D  
                                _IOC_ISR 1BC9                                  _IOC_Set 1B8A  
                   __size_of_setLog_Code 0036                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 11CA                __size_of_getDimmer_LoadOK 000C  
                      _Flash_Memory_Read 1DA0              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 0076                   __size_of_CC2500_TxData 0068  
            ?_setDimmerLights_ErrorClose 0070                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 01A0                                  _RF_Main 1ABD  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1BA2          __end_of_setControl_Lights_Table 0A74  
                        setRF_Main@error 006D                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _setPercentValue 136C  
                ??_setLoad_AH_AL_Restore 0020                         ?_getPercentValue 0070  
           __end_of_CC2500_FrequencyCabr 1B4E                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1C0A                      ??_Flash_Memory_Main 0029  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0161  
                                _VarLED2 0165           __end_of_getDimmerLights_Status 1BE8  
                      __end_of_getRxData 0AE3                  __end_of_getSw_KeyStatus 1085  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1CC2  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1E11  
                   ??_setRFSW_AdjControl 0064                           ??_setTemp_Main 0027  
                        __size_of___bmul 0012                                  ___awdiv 1530  
                                ___ftadd 0527                                  ___ftdiv 0EA3  
                                ___ftmul 0F4C                                  ___fttol 0C56  
                    __end_of_Switch_Main 1F3D                  ??_Buzzer_Initialization 0020  
                        _getRF_KeyStatus 1C0A                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0061  
                   setRFSW_AdjControl@sw 0066                          __size_of_setBuz 0059  
                                __ptext1 1490                                  __ptext2 0800  
                                __ptext3 1236                                  __ptext4 0BD5  
                                __ptext5 1E50                                  __ptext6 1C63  
                                __ptext7 0002                                  __ptext8 1AC3  
                                __ptext9 0E0A                  ??_setDimmerLights_AdjRF 005F  
              __size_of_CC2500_SIDLEMode 0004                    _DimmerIntrPointSelect 1C1B  
                           __size_of_ISR 000F               ??_getMain_All_Error_Status 0020  
              __end_of_Flash_Memory_Main 1200                __end_of_Flash_Memory_Read 1DBA  
                ??_setDimmerLights_SwOff 0062                               _setRF_Main 061D  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1B03  
                      _DimmerLights_Main 1B13           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022                __size_of_setMemory_Modify 0013  
          __end_of_DlyOff_Initialization 1B37               __end_of_CC2500_ClearRXFIFO 1ACA  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1ACE  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 007B  
                         _LedPointSelect 1EB2                      _DelayOffPointSelect 1CC2  
                         _getMain_LoadOK 1BBB                                  clrloop0 1AE7  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 1BBB  
                   end_of_initialization 0045                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 1085                            _DelayTime_1us 1F62  
                      __end_of_setTxData 0E0A               __end_of_Flash_Memory_Write 1162  
                                init_ram 1AE0                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 006A                     Flash_Memory_Read@ret 0023  
                                initloop 1AE1                               _setSw_Main 03B8  
                  CC2500_ReadByte@loop_b 0021                   setDimmerLights_SwOn@sw 0064  
                      _CC2500_ReadStatus 1F3D                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1C3F                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 0AE3                            _CC2500_TxData 0932  
                    ??_CC2500_InitSetREG 0025              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 1442                              ?_getLoad_AD 0070  
                            ?_getLoad_OK 0070                   ??_getMain_Lights_Count 0020  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1B23  
                    ??_CC2500_ReadStatus 0022                   ??_getMain_LightsStatus 0024  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 0015                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 1B1B  
                     _Mcu_Initialization 1C51                 __size_of_CC2500_PowerRST 0044  
                   __end_of_my_MainTimer 14DE                           ?_DelayOff_Main 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1ED4  
                __end_of_setPercentValue 13B2                   __end_of_getMain_LoadOK 1BC9  
               __size_of_CC2500_WriteREG 0023                __end_of_CC2500_InitSetREG 10AF  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 12A7                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1F62              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0025                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1D86                     _setRF_Initialization 1B37  
                     _setMemory_LoopSave 1C9B                              _Switch_Main 1F19  
                      __size_of_LED_Main 000C                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1C75                  __end_of_getRF_KeyStatus 1C1B  
                      _setMain_Exception 1584                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1D13  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1C3F                 setMain_Exception@command 00EE  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1CAE  
                      getSw_KeyStatus@sw 0024                        __size_of_TMR1_ISR 0029  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 007C                           __end_of_setLED 0932  
          __size_of_setDimmerLights_SwOn 0046                           __end_of_setBuz 168B  
                    ??_setMain_Exception 006B                     _CC2500_FrequencyCabr 1B42  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 14DE  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 1195  
                        ?_LedPointSelect 0070                                _Load_Main 0049  
                            __end_of_ISR 0013                          ?_getMain_LoadOK 0070  
                       _getDimmer_LoadOK 1B7E                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1E30  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0EA3                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1AD6                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 015D  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0037                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 15DA                __size_of_CC2500_WriteByte 0019  
                              _Temp_Main 1AC3                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D1  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D4                              __pdataBANK4 0245  
              _getAll_DimmerLights_AdjGO 1BE8                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0069                        ??_CC2500_ReadByte 0020  
       __end_of_getMain_All_Error_Status 1195                         _CC2500_SIDLEMode 1ACE  
             __size_of_DimmerLights_Main 0008                __end_of_setRF_DimmerValue 11CA  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
         _getAll_DimmerLights_AdjGO$2560 0022                              __pbssCOMMON 0076  
                               ?_IOC_Set 0070                                ___latbits 0003  
                       _setMemory_Modify 1C88                               ?_Load_Main 0070  
                          __pcstackBANK0 0020                            __pcstackBANK1 00EA  
                          __pcstackBANK3 01E5                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0094  
                          DlyOff_Main@sw 0068                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 0061  
             __size_of_CC2500_ReadStatus 0025                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01BE  
                          _DimmerLights2 01CD                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1DD6                          ??_CC2500_TxData 0024  
                         getRxData@error 0069              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00F1                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002C                   _setTemp_Initialization 1AB6  
                              _getBuz_GO 1BF9      __end_of_Flash_Memory_Initialization 07EA  
            _Flash_Memory_Initialization 070E                                 ?___awdiv 0020  
                              __ptext100 1C2D                                __ptext101 1BD8  
                              __ptext110 1E11                                __ptext102 1C75  
                              __ptext111 1EF6                                __ptext103 1AFB  
                              __ptext120 13F8                                __ptext112 1B42  
                              __ptext104 1B2C                                __ptext121 1AB7  
                              __ptext113 1F62                                __ptext105 1CC2  
                              __ptext114 1ACA                                __ptext106 1D13  
                              __ptext123 1FD7                                __ptext115 1AC6  
                              __ptext107 1ACE                                __ptext124 020C  
                              __ptext116 1D86                                __ptext108 12E4  
                              __ptext125 1C1B                                __ptext117 1AD6  
                              __ptext109 1085                                 ?___ftadd 003E  
                              __ptext126 1BC9                                __ptext118 1CFE  
                              __ptext127 1AF3                                __ptext119 1D54  
                              __ptext128 1FAF                                __ptext129 1CAE  
                              _getRxData 0A74                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                  __size_of_my_MainTimer 004E                  __end_of_setRFSW_Control 1530  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0023            __end_of_Buzzer_Initialization 1ABA  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 1D3D  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 016F             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0022            __end_of_setDimmerLights_AdjRF 1EF6  
                 CC2500_WriteByte@loop_a 0021                                _r_address 00D5  
         __size_of_setDimmerLights_SwOff 005F           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 179F             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 080F                           __size_of_getAD 0020  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1CD6  
                    __end_of_setLED_Main 136C                      _DimmerLightsIntrIOC 00CE  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1AC3  
           setDimmerLights_SwOff@command 0064                        _CC2500_rfSettings 102F  
                               _LED_Main 1B72                          SwPointSelect@sw 0021  
                              clear_ram0 1AE6                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 0056                             _my_MainTimer 1490  
                              _setTxData 0D71      __end_of_DimmerLights_Initialization 1D54  
            _DimmerLights_Initialization 1D3D                       _CC2500_ClearRXFIFO 1AC6  
                     _CC2500_ClearTXFIFO 1ACA           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1CFE                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003A  
                     _Flash_Memory_Write 1133                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 1FD7  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1B96  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 0123  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1DA0  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1C63  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0023  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 006B  
                  __size_of_setTemp_Main 0099                  __size_of_setDelayOff_GO 0061  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0076  
                           setSw_Main@sw 0068         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1B66  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 1236  
                  _DlyOff_Initialization 1B2C                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1AD2  
                       __size_of_WDT_Set 000C                  setMain_Exception@status 00ED  
                     __end_of_getLoad_AD 0C56                       __end_of_getLoad_OK 1B13  
                  _Switch_Initialization 1BAE        __size_of_getMain_All_Error_Status 0033  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0028  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 126D                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1D54                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 005E                                 _SwDetect 00D3  
                            ??_Temp_Main 0029                        setRFSW_Control@sw 0067  
          _getMain_All_Error_Status$3925 0021            _getMain_All_Error_Status$3934 0023  
               __end_of_getDimmer_LoadOK 1B8A                      _Load_Initialization 1ADB  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
    __size_of_setDimmerLights_AdjControl 002E                             _setTemp_Main 0E0A  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
               setDimmerLights_SwOn@idle 0063                                 ___awtoft 1E90  
                       ??_LedPointSelect 0020                                 ___ftpack 080F  
          __size_of_getMain_Lights_Count 0016                         ??_getMain_LoadOK 0022  
          __size_of_getMain_LightsStatus 002C                        getTemp_AD@channel 0025  
                           ??_setRF_Main 006A                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1328               __end_of_setRF_DimmerLights 0A06  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 002E  
     __size_of_getAll_DimmerLights_AdjGO 0011                     ?_Load_Initialization 0070  
                               __ptext10 1AC0                                 __ptext11 1AB6  
                               __ptext20 1BAE                                 __ptext12 1F19  
                               __ptext21 1B1B                                 __ptext13 03B8  
                               __ptext30 126D                                 __ptext22 1D28  
                               __ptext14 1CEA                                 __ptext31 1195  
                               __ptext23 1ABD                                 __ptext15 1105  
                               __ptext40 0AE3                                 __ptext32 1ED4  
                               __ptext24 061D                                 __ptext16 1066  
                               __ptext41 1F3D                                 __ptext33 16E5  
                               __ptext25 0A74                                 __ptext17 1CD6  
                               __ptext50 1AD2                                 __ptext42 1DD6  
                               __ptext34 0F4C                                 __ptext26 1200  
                               __ptext18 1584                                 __ptext51 1AEC  
                               __ptext43 1ABA                                 __ptext35 0527  
                               __ptext27 1C9B                                 __ptext19 168B  
                               __ptext60 1B66                                 __ptext52 0049  
                               __ptext44 1B37                                 __ptext36 1C88  
                               __ptext28 0A06                                 __ptext61 1C3F  
                               __ptext53 1BBB                                 __ptext45 1C51  
                               __ptext37 1C0A                                 __ptext29 14DE  
                               __ptext70 1DA0                                 __ptext62 11CA  
                               __ptext54 1B7E                                 __ptext46 1BA2  
                               __ptext38 1BF9                                 __ptext71 1B13  
                               __ptext63 10D9                                 __ptext55 07EA  
                               __ptext47 1B96                                 __ptext39 0932  
                               __ptext80 1F88                                 __ptext72 0B59  
                               __ptext64 1442                                 __ptext56 1ADB  
                               __ptext48 1D6D                                 __ptext81 1AB5  
                               __ptext73 12A7                                 __ptext65 1B5A  
                               __ptext57 1DBA                                 __ptext49 1B8A  
                               __ptext90 099A                                 __ptext82 1B03  
                               __ptext74 0CDD                                 __ptext66 070E  
                               __ptext58 1B72                                 __ptext91 136C  
                               __ptext83 0870                                 __ptext75 08D1  
                               __ptext67 1B4E                                 __ptext59 1328  
                               __ptext92 0C56                                 __ptext84 13B2  
                               __ptext76 1EB2                                 __ptext68 1133  
                               __ptext93 0EA3                                 __ptext85 1632  
                               __ptext77 1162                                 __ptext69 1B23  
                               __ptext94 1E90                                 __ptext86 1530  
                               __ptext78 1B0B                                 __ptext95 080F  
                               __ptext87 1BE8                                 __ptext79 1D3D  
                               __ptext96 1E30                                 __ptext88 1740  
                               __ptext97 1DF3                                 __ptext89 0D71  
                               __ptext98 179F                                 __ptext99 10AF  
                               __product 0245            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
         __size_of_Dimmer_Initialization 0001            __end_of_Dimmer_Initialization 1AB6  
           __end_of_setDimmerLights_Main 0BD5                         Switch_Main@error 006D  
           __end_of_setDimmerLights_SwOn 13F8                   getDimmer_LoadOK@status 0021  
                           ??_setSw_Main 0066                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1CEA  
               __end_of_CC2500_SIDLEMode 1AD2               setDimmerLights_Main@lights 0069  
            __end_of_DelayOffPointSelect 1CD6               CC2500_WriteCommand@command 0023  
                   setRF_Main@Receive_OK 006C                __size_of_setDimmerReClock 0008  
         setDimmerLights_AdjControl@idle 0026                          _CC2500_ReadByte 1DD6  
                     _CC2500_InitPATable 1E11                 __end_of_setMemory_Modify 1C9B  
          setDimmerLights_Trigger@lights 0024                       __end_of_setRF_Main 070E  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
            setDimmerLights_ErrorClose@i 0069                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0068                             getLoad_OK@ok 0020  
       setDimmerLights_TriggerAdj@lights 0024                                 main@argc 01E5  
                               main@argv 01E7                     _getSw_KeyStatus$2556 0021  
                   _getSw_KeyStatus$2557 0022                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 12E4                 __size_of_getSw_KeyStatus 001F  
            __end_of_Flash_Memory_Modify 1490                        ??_getPercentValue 0059  
                            _setLog_Code 1200              __end_of_Flash_Memory_Unlock 1B2C  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1EF6  
                     __end_of_setSw_Main 0527                    ??_Load_Initialization 0022  
                          _Transceive_OK 03D1                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 10AF                              pic14e$flags 007E  
           ??_setDimmerLights_IntrIOC_GO 0072             ??_setDimmerLights_ErrorClose 0066  
                setDimmerLights_SwOff@sw 0065        __end_of_getAll_DimmerLights_AdjGO 1BF9  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1FAF  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 1F88  
            __end_of_setDimmerLights_Adj 12E4                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1ABA     __size_of_setDimmerLights_IntrControl 01AC  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1B5A  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00D2  
        __end_of_DelayOff_Initialization 1B03      __size_of_setDimmerLights_IntrIOC_GO 0028  
    __size_of_setDimmerLights_ErrorClose 005A                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1B0B       __end_of_setDimmerLights_AdjControl 1133  
             _setDimmerLights_AdjControl 1105                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 179F  
       __size_of_setControl_Lights_Table 006E                   __end_of_DelayTimejudge 10D9  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0066                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 1F88                  __end_of_CC2500_ReadByte 1DF3  
           __end_of_setSw_Initialization 1B23                          _Timeout_Counter 1CFE  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005B  
             __end_of_LED_Initialization 1B72         __size_of_setDimmerLights_Trigger 001E  
         __end_of_setTemp_Initialization 1AB7                 __size_of_setPercentValue 0046  
                setMemory_Modify@command 0021                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1ABD                     _setDimmerLights$2592 002A  
                  __end_of_CC2500_RxData 0B59                    __end_of_CC2500_TxData 099A  
                  _setLoad_AH_AL_Restore 1DBA                  __end_of_CC2500_PowerRST 1328  
         getAll_DimmerLights_AdjGO@adjgo 0021  
