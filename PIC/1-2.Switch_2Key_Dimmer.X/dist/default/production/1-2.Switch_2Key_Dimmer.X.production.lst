

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Dec 25 13:16:57 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	intentry,global,class=CODE,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   146                           	dabs	1,0x7E,2
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0008                     	;# 
   156  0009                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000D                     	;# 
   161  000E                     	;# 
   162  0010                     	;# 
   163  0011                     	;# 
   164  0012                     	;# 
   165  0015                     	;# 
   166  0016                     	;# 
   167  0016                     	;# 
   168  0017                     	;# 
   169  0018                     	;# 
   170  0019                     	;# 
   171  001A                     	;# 
   172  001B                     	;# 
   173  001C                     	;# 
   174  008C                     	;# 
   175  008D                     	;# 
   176  008E                     	;# 
   177  0090                     	;# 
   178  0091                     	;# 
   179  0092                     	;# 
   180  0095                     	;# 
   181  0096                     	;# 
   182  0097                     	;# 
   183  0099                     	;# 
   184  009A                     	;# 
   185  009B                     	;# 
   186  009B                     	;# 
   187  009C                     	;# 
   188  009D                     	;# 
   189  009E                     	;# 
   190  010C                     	;# 
   191  010D                     	;# 
   192  010E                     	;# 
   193  0116                     	;# 
   194  0117                     	;# 
   195  011D                     	;# 
   196  018C                     	;# 
   197  018D                     	;# 
   198  018E                     	;# 
   199  0191                     	;# 
   200  0191                     	;# 
   201  0192                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0194                     	;# 
   205  0195                     	;# 
   206  0196                     	;# 
   207  0197                     	;# 
   208  0199                     	;# 
   209  019A                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019B                     	;# 
   213  019B                     	;# 
   214  019C                     	;# 
   215  019C                     	;# 
   216  019D                     	;# 
   217  019E                     	;# 
   218  019F                     	;# 
   219  020D                     	;# 
   220  0210                     	;# 
   221  0211                     	;# 
   222  0211                     	;# 
   223  0212                     	;# 
   224  0212                     	;# 
   225  0213                     	;# 
   226  0213                     	;# 
   227  0214                     	;# 
   228  0214                     	;# 
   229  0215                     	;# 
   230  0215                     	;# 
   231  0215                     	;# 
   232  0216                     	;# 
   233  0216                     	;# 
   234  0217                     	;# 
   235  0217                     	;# 
   236  0291                     	;# 
   237  0291                     	;# 
   238  0292                     	;# 
   239  0293                     	;# 
   240  0298                     	;# 
   241  0298                     	;# 
   242  0299                     	;# 
   243  029A                     	;# 
   244  0394                     	;# 
   245  0395                     	;# 
   246  0396                     	;# 
   247  0FE4                     	;# 
   248  0FE5                     	;# 
   249  0FE6                     	;# 
   250  0FE7                     	;# 
   251  0FE8                     	;# 
   252  0FE9                     	;# 
   253  0FEA                     	;# 
   254  0FEB                     	;# 
   255  0FED                     	;# 
   256  0FEE                     	;# 
   257  0FEF                     	;# 
   258  0000                     	;# 
   259  0001                     	;# 
   260  0002                     	;# 
   261  0003                     	;# 
   262  0004                     	;# 
   263  0005                     	;# 
   264  0006                     	;# 
   265  0007                     	;# 
   266  0008                     	;# 
   267  0009                     	;# 
   268  000A                     	;# 
   269  000B                     	;# 
   270  000C                     	;# 
   271  000D                     	;# 
   272  000E                     	;# 
   273  0010                     	;# 
   274  0011                     	;# 
   275  0012                     	;# 
   276  0015                     	;# 
   277  0016                     	;# 
   278  0016                     	;# 
   279  0017                     	;# 
   280  0018                     	;# 
   281  0019                     	;# 
   282  001A                     	;# 
   283  001B                     	;# 
   284  001C                     	;# 
   285  008C                     	;# 
   286  008D                     	;# 
   287  008E                     	;# 
   288  0090                     	;# 
   289  0091                     	;# 
   290  0092                     	;# 
   291  0095                     	;# 
   292  0096                     	;# 
   293  0097                     	;# 
   294  0099                     	;# 
   295  009A                     	;# 
   296  009B                     	;# 
   297  009B                     	;# 
   298  009C                     	;# 
   299  009D                     	;# 
   300  009E                     	;# 
   301  010C                     	;# 
   302  010D                     	;# 
   303  010E                     	;# 
   304  0116                     	;# 
   305  0117                     	;# 
   306  011D                     	;# 
   307  018C                     	;# 
   308  018D                     	;# 
   309  018E                     	;# 
   310  0191                     	;# 
   311  0191                     	;# 
   312  0192                     	;# 
   313  0193                     	;# 
   314  0193                     	;# 
   315  0194                     	;# 
   316  0195                     	;# 
   317  0196                     	;# 
   318  0197                     	;# 
   319  0199                     	;# 
   320  019A                     	;# 
   321  019B                     	;# 
   322  019B                     	;# 
   323  019B                     	;# 
   324  019B                     	;# 
   325  019C                     	;# 
   326  019C                     	;# 
   327  019D                     	;# 
   328  019E                     	;# 
   329  019F                     	;# 
   330  020D                     	;# 
   331  0210                     	;# 
   332  0211                     	;# 
   333  0211                     	;# 
   334  0212                     	;# 
   335  0212                     	;# 
   336  0213                     	;# 
   337  0213                     	;# 
   338  0214                     	;# 
   339  0214                     	;# 
   340  0215                     	;# 
   341  0215                     	;# 
   342  0215                     	;# 
   343  0216                     	;# 
   344  0216                     	;# 
   345  0217                     	;# 
   346  0217                     	;# 
   347  0291                     	;# 
   348  0291                     	;# 
   349  0292                     	;# 
   350  0293                     	;# 
   351  0298                     	;# 
   352  0298                     	;# 
   353  0299                     	;# 
   354  029A                     	;# 
   355  0394                     	;# 
   356  0395                     	;# 
   357  0396                     	;# 
   358  0FE4                     	;# 
   359  0FE5                     	;# 
   360  0FE6                     	;# 
   361  0FE7                     	;# 
   362  0FE8                     	;# 
   363  0FE9                     	;# 
   364  0FEA                     	;# 
   365  0FEB                     	;# 
   366  0FED                     	;# 
   367  0FEE                     	;# 
   368  0FEF                     	;# 
   369  0000                     	;# 
   370  0001                     	;# 
   371  0002                     	;# 
   372  0003                     	;# 
   373  0004                     	;# 
   374  0005                     	;# 
   375  0006                     	;# 
   376  0007                     	;# 
   377  0008                     	;# 
   378  0009                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  000D                     	;# 
   383  000E                     	;# 
   384  0010                     	;# 
   385  0011                     	;# 
   386  0012                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  008C                     	;# 
   397  008D                     	;# 
   398  008E                     	;# 
   399  0090                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0095                     	;# 
   403  0096                     	;# 
   404  0097                     	;# 
   405  0099                     	;# 
   406  009A                     	;# 
   407  009B                     	;# 
   408  009B                     	;# 
   409  009C                     	;# 
   410  009D                     	;# 
   411  009E                     	;# 
   412  010C                     	;# 
   413  010D                     	;# 
   414  010E                     	;# 
   415  0116                     	;# 
   416  0117                     	;# 
   417  011D                     	;# 
   418  018C                     	;# 
   419  018D                     	;# 
   420  018E                     	;# 
   421  0191                     	;# 
   422  0191                     	;# 
   423  0192                     	;# 
   424  0193                     	;# 
   425  0193                     	;# 
   426  0194                     	;# 
   427  0195                     	;# 
   428  0196                     	;# 
   429  0197                     	;# 
   430  0199                     	;# 
   431  019A                     	;# 
   432  019B                     	;# 
   433  019B                     	;# 
   434  019B                     	;# 
   435  019B                     	;# 
   436  019C                     	;# 
   437  019C                     	;# 
   438  019D                     	;# 
   439  019E                     	;# 
   440  019F                     	;# 
   441  020D                     	;# 
   442  0210                     	;# 
   443  0211                     	;# 
   444  0211                     	;# 
   445  0212                     	;# 
   446  0212                     	;# 
   447  0213                     	;# 
   448  0213                     	;# 
   449  0214                     	;# 
   450  0214                     	;# 
   451  0215                     	;# 
   452  0215                     	;# 
   453  0215                     	;# 
   454  0216                     	;# 
   455  0216                     	;# 
   456  0217                     	;# 
   457  0217                     	;# 
   458  0291                     	;# 
   459  0291                     	;# 
   460  0292                     	;# 
   461  0293                     	;# 
   462  0298                     	;# 
   463  0298                     	;# 
   464  0299                     	;# 
   465  029A                     	;# 
   466  0394                     	;# 
   467  0395                     	;# 
   468  0396                     	;# 
   469  0FE4                     	;# 
   470  0FE5                     	;# 
   471  0FE6                     	;# 
   472  0FE7                     	;# 
   473  0FE8                     	;# 
   474  0FE9                     	;# 
   475  0FEA                     	;# 
   476  0FEB                     	;# 
   477  0FED                     	;# 
   478  0FEE                     	;# 
   479  0FEF                     	;# 
   480  0000                     	;# 
   481  0001                     	;# 
   482  0002                     	;# 
   483  0003                     	;# 
   484  0004                     	;# 
   485  0005                     	;# 
   486  0006                     	;# 
   487  0007                     	;# 
   488  0008                     	;# 
   489  0009                     	;# 
   490  000A                     	;# 
   491  000B                     	;# 
   492  000C                     	;# 
   493  000D                     	;# 
   494  000E                     	;# 
   495  0010                     	;# 
   496  0011                     	;# 
   497  0012                     	;# 
   498  0015                     	;# 
   499  0016                     	;# 
   500  0016                     	;# 
   501  0017                     	;# 
   502  0018                     	;# 
   503  0019                     	;# 
   504  001A                     	;# 
   505  001B                     	;# 
   506  001C                     	;# 
   507  008C                     	;# 
   508  008D                     	;# 
   509  008E                     	;# 
   510  0090                     	;# 
   511  0091                     	;# 
   512  0092                     	;# 
   513  0095                     	;# 
   514  0096                     	;# 
   515  0097                     	;# 
   516  0099                     	;# 
   517  009A                     	;# 
   518  009B                     	;# 
   519  009B                     	;# 
   520  009C                     	;# 
   521  009D                     	;# 
   522  009E                     	;# 
   523  010C                     	;# 
   524  010D                     	;# 
   525  010E                     	;# 
   526  0116                     	;# 
   527  0117                     	;# 
   528  011D                     	;# 
   529  018C                     	;# 
   530  018D                     	;# 
   531  018E                     	;# 
   532  0191                     	;# 
   533  0191                     	;# 
   534  0192                     	;# 
   535  0193                     	;# 
   536  0193                     	;# 
   537  0194                     	;# 
   538  0195                     	;# 
   539  0196                     	;# 
   540  0197                     	;# 
   541  0199                     	;# 
   542  019A                     	;# 
   543  019B                     	;# 
   544  019B                     	;# 
   545  019B                     	;# 
   546  019B                     	;# 
   547  019C                     	;# 
   548  019C                     	;# 
   549  019D                     	;# 
   550  019E                     	;# 
   551  019F                     	;# 
   552  020D                     	;# 
   553  0210                     	;# 
   554  0211                     	;# 
   555  0211                     	;# 
   556  0212                     	;# 
   557  0212                     	;# 
   558  0213                     	;# 
   559  0213                     	;# 
   560  0214                     	;# 
   561  0214                     	;# 
   562  0215                     	;# 
   563  0215                     	;# 
   564  0215                     	;# 
   565  0216                     	;# 
   566  0216                     	;# 
   567  0217                     	;# 
   568  0217                     	;# 
   569  0291                     	;# 
   570  0291                     	;# 
   571  0292                     	;# 
   572  0293                     	;# 
   573  0298                     	;# 
   574  0298                     	;# 
   575  0299                     	;# 
   576  029A                     	;# 
   577  0394                     	;# 
   578  0395                     	;# 
   579  0396                     	;# 
   580  0FE4                     	;# 
   581  0FE5                     	;# 
   582  0FE6                     	;# 
   583  0FE7                     	;# 
   584  0FE8                     	;# 
   585  0FE9                     	;# 
   586  0FEA                     	;# 
   587  0FEB                     	;# 
   588  0FED                     	;# 
   589  0FEE                     	;# 
   590  0FEF                     	;# 
   591  0000                     	;# 
   592  0001                     	;# 
   593  0002                     	;# 
   594  0003                     	;# 
   595  0004                     	;# 
   596  0005                     	;# 
   597  0006                     	;# 
   598  0007                     	;# 
   599  0008                     	;# 
   600  0009                     	;# 
   601  000A                     	;# 
   602  000B                     	;# 
   603  000C                     	;# 
   604  000D                     	;# 
   605  000E                     	;# 
   606  0010                     	;# 
   607  0011                     	;# 
   608  0012                     	;# 
   609  0015                     	;# 
   610  0016                     	;# 
   611  0016                     	;# 
   612  0017                     	;# 
   613  0018                     	;# 
   614  0019                     	;# 
   615  001A                     	;# 
   616  001B                     	;# 
   617  001C                     	;# 
   618  008C                     	;# 
   619  008D                     	;# 
   620  008E                     	;# 
   621  0090                     	;# 
   622  0091                     	;# 
   623  0092                     	;# 
   624  0095                     	;# 
   625  0096                     	;# 
   626  0097                     	;# 
   627  0099                     	;# 
   628  009A                     	;# 
   629  009B                     	;# 
   630  009B                     	;# 
   631  009C                     	;# 
   632  009D                     	;# 
   633  009E                     	;# 
   634  010C                     	;# 
   635  010D                     	;# 
   636  010E                     	;# 
   637  0116                     	;# 
   638  0117                     	;# 
   639  011D                     	;# 
   640  018C                     	;# 
   641  018D                     	;# 
   642  018E                     	;# 
   643  0191                     	;# 
   644  0191                     	;# 
   645  0192                     	;# 
   646  0193                     	;# 
   647  0193                     	;# 
   648  0194                     	;# 
   649  0195                     	;# 
   650  0196                     	;# 
   651  0197                     	;# 
   652  0199                     	;# 
   653  019A                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019B                     	;# 
   657  019B                     	;# 
   658  019C                     	;# 
   659  019C                     	;# 
   660  019D                     	;# 
   661  019E                     	;# 
   662  019F                     	;# 
   663  020D                     	;# 
   664  0210                     	;# 
   665  0211                     	;# 
   666  0211                     	;# 
   667  0212                     	;# 
   668  0212                     	;# 
   669  0213                     	;# 
   670  0213                     	;# 
   671  0214                     	;# 
   672  0214                     	;# 
   673  0215                     	;# 
   674  0215                     	;# 
   675  0215                     	;# 
   676  0216                     	;# 
   677  0216                     	;# 
   678  0217                     	;# 
   679  0217                     	;# 
   680  0291                     	;# 
   681  0291                     	;# 
   682  0292                     	;# 
   683  0293                     	;# 
   684  0298                     	;# 
   685  0298                     	;# 
   686  0299                     	;# 
   687  029A                     	;# 
   688  0394                     	;# 
   689  0395                     	;# 
   690  0396                     	;# 
   691  0FE4                     	;# 
   692  0FE5                     	;# 
   693  0FE6                     	;# 
   694  0FE7                     	;# 
   695  0FE8                     	;# 
   696  0FE9                     	;# 
   697  0FEA                     	;# 
   698  0FEB                     	;# 
   699  0FED                     	;# 
   700  0FEE                     	;# 
   701  0FEF                     	;# 
   702  0000                     	;# 
   703  0001                     	;# 
   704  0002                     	;# 
   705  0003                     	;# 
   706  0004                     	;# 
   707  0005                     	;# 
   708  0006                     	;# 
   709  0007                     	;# 
   710  0008                     	;# 
   711  0009                     	;# 
   712  000A                     	;# 
   713  000B                     	;# 
   714  000C                     	;# 
   715  000D                     	;# 
   716  000E                     	;# 
   717  0010                     	;# 
   718  0011                     	;# 
   719  0012                     	;# 
   720  0015                     	;# 
   721  0016                     	;# 
   722  0016                     	;# 
   723  0017                     	;# 
   724  0018                     	;# 
   725  0019                     	;# 
   726  001A                     	;# 
   727  001B                     	;# 
   728  001C                     	;# 
   729  008C                     	;# 
   730  008D                     	;# 
   731  008E                     	;# 
   732  0090                     	;# 
   733  0091                     	;# 
   734  0092                     	;# 
   735  0095                     	;# 
   736  0096                     	;# 
   737  0097                     	;# 
   738  0099                     	;# 
   739  009A                     	;# 
   740  009B                     	;# 
   741  009B                     	;# 
   742  009C                     	;# 
   743  009D                     	;# 
   744  009E                     	;# 
   745  010C                     	;# 
   746  010D                     	;# 
   747  010E                     	;# 
   748  0116                     	;# 
   749  0117                     	;# 
   750  011D                     	;# 
   751  018C                     	;# 
   752  018D                     	;# 
   753  018E                     	;# 
   754  0191                     	;# 
   755  0191                     	;# 
   756  0192                     	;# 
   757  0193                     	;# 
   758  0193                     	;# 
   759  0194                     	;# 
   760  0195                     	;# 
   761  0196                     	;# 
   762  0197                     	;# 
   763  0199                     	;# 
   764  019A                     	;# 
   765  019B                     	;# 
   766  019B                     	;# 
   767  019B                     	;# 
   768  019B                     	;# 
   769  019C                     	;# 
   770  019C                     	;# 
   771  019D                     	;# 
   772  019E                     	;# 
   773  019F                     	;# 
   774  020D                     	;# 
   775  0210                     	;# 
   776  0211                     	;# 
   777  0211                     	;# 
   778  0212                     	;# 
   779  0212                     	;# 
   780  0213                     	;# 
   781  0213                     	;# 
   782  0214                     	;# 
   783  0214                     	;# 
   784  0215                     	;# 
   785  0215                     	;# 
   786  0215                     	;# 
   787  0216                     	;# 
   788  0216                     	;# 
   789  0217                     	;# 
   790  0217                     	;# 
   791  0291                     	;# 
   792  0291                     	;# 
   793  0292                     	;# 
   794  0293                     	;# 
   795  0298                     	;# 
   796  0298                     	;# 
   797  0299                     	;# 
   798  029A                     	;# 
   799  0394                     	;# 
   800  0395                     	;# 
   801  0396                     	;# 
   802  0FE4                     	;# 
   803  0FE5                     	;# 
   804  0FE6                     	;# 
   805  0FE7                     	;# 
   806  0FE8                     	;# 
   807  0FE9                     	;# 
   808  0FEA                     	;# 
   809  0FEB                     	;# 
   810  0FED                     	;# 
   811  0FEE                     	;# 
   812  0FEF                     	;# 
   813  0000                     	;# 
   814  0001                     	;# 
   815  0002                     	;# 
   816  0003                     	;# 
   817  0004                     	;# 
   818  0005                     	;# 
   819  0006                     	;# 
   820  0007                     	;# 
   821  0008                     	;# 
   822  0009                     	;# 
   823  000A                     	;# 
   824  000B                     	;# 
   825  000C                     	;# 
   826  000D                     	;# 
   827  000E                     	;# 
   828  0010                     	;# 
   829  0011                     	;# 
   830  0012                     	;# 
   831  0015                     	;# 
   832  0016                     	;# 
   833  0016                     	;# 
   834  0017                     	;# 
   835  0018                     	;# 
   836  0019                     	;# 
   837  001A                     	;# 
   838  001B                     	;# 
   839  001C                     	;# 
   840  008C                     	;# 
   841  008D                     	;# 
   842  008E                     	;# 
   843  0090                     	;# 
   844  0091                     	;# 
   845  0092                     	;# 
   846  0095                     	;# 
   847  0096                     	;# 
   848  0097                     	;# 
   849  0099                     	;# 
   850  009A                     	;# 
   851  009B                     	;# 
   852  009B                     	;# 
   853  009C                     	;# 
   854  009D                     	;# 
   855  009E                     	;# 
   856  010C                     	;# 
   857  010D                     	;# 
   858  010E                     	;# 
   859  0116                     	;# 
   860  0117                     	;# 
   861  011D                     	;# 
   862  018C                     	;# 
   863  018D                     	;# 
   864  018E                     	;# 
   865  0191                     	;# 
   866  0191                     	;# 
   867  0192                     	;# 
   868  0193                     	;# 
   869  0193                     	;# 
   870  0194                     	;# 
   871  0195                     	;# 
   872  0196                     	;# 
   873  0197                     	;# 
   874  0199                     	;# 
   875  019A                     	;# 
   876  019B                     	;# 
   877  019B                     	;# 
   878  019B                     	;# 
   879  019B                     	;# 
   880  019C                     	;# 
   881  019C                     	;# 
   882  019D                     	;# 
   883  019E                     	;# 
   884  019F                     	;# 
   885  020D                     	;# 
   886  0210                     	;# 
   887  0211                     	;# 
   888  0211                     	;# 
   889  0212                     	;# 
   890  0212                     	;# 
   891  0213                     	;# 
   892  0213                     	;# 
   893  0214                     	;# 
   894  0214                     	;# 
   895  0215                     	;# 
   896  0215                     	;# 
   897  0215                     	;# 
   898  0216                     	;# 
   899  0216                     	;# 
   900  0217                     	;# 
   901  0217                     	;# 
   902  0291                     	;# 
   903  0291                     	;# 
   904  0292                     	;# 
   905  0293                     	;# 
   906  0298                     	;# 
   907  0298                     	;# 
   908  0299                     	;# 
   909  029A                     	;# 
   910  0394                     	;# 
   911  0395                     	;# 
   912  0396                     	;# 
   913  0FE4                     	;# 
   914  0FE5                     	;# 
   915  0FE6                     	;# 
   916  0FE7                     	;# 
   917  0FE8                     	;# 
   918  0FE9                     	;# 
   919  0FEA                     	;# 
   920  0FEB                     	;# 
   921  0FED                     	;# 
   922  0FEE                     	;# 
   923  0FEF                     	;# 
   924  0000                     	;# 
   925  0001                     	;# 
   926  0002                     	;# 
   927  0003                     	;# 
   928  0004                     	;# 
   929  0005                     	;# 
   930  0006                     	;# 
   931  0007                     	;# 
   932  0008                     	;# 
   933  0009                     	;# 
   934  000A                     	;# 
   935  000B                     	;# 
   936  000C                     	;# 
   937  000D                     	;# 
   938  000E                     	;# 
   939  0010                     	;# 
   940  0011                     	;# 
   941  0012                     	;# 
   942  0015                     	;# 
   943  0016                     	;# 
   944  0016                     	;# 
   945  0017                     	;# 
   946  0018                     	;# 
   947  0019                     	;# 
   948  001A                     	;# 
   949  001B                     	;# 
   950  001C                     	;# 
   951  008C                     	;# 
   952  008D                     	;# 
   953  008E                     	;# 
   954  0090                     	;# 
   955  0091                     	;# 
   956  0092                     	;# 
   957  0095                     	;# 
   958  0096                     	;# 
   959  0097                     	;# 
   960  0099                     	;# 
   961  009A                     	;# 
   962  009B                     	;# 
   963  009B                     	;# 
   964  009C                     	;# 
   965  009D                     	;# 
   966  009E                     	;# 
   967  010C                     	;# 
   968  010D                     	;# 
   969  010E                     	;# 
   970  0116                     	;# 
   971  0117                     	;# 
   972  011D                     	;# 
   973  018C                     	;# 
   974  018D                     	;# 
   975  018E                     	;# 
   976  0191                     	;# 
   977  0191                     	;# 
   978  0192                     	;# 
   979  0193                     	;# 
   980  0193                     	;# 
   981  0194                     	;# 
   982  0195                     	;# 
   983  0196                     	;# 
   984  0197                     	;# 
   985  0199                     	;# 
   986  019A                     	;# 
   987  019B                     	;# 
   988  019B                     	;# 
   989  019B                     	;# 
   990  019B                     	;# 
   991  019C                     	;# 
   992  019C                     	;# 
   993  019D                     	;# 
   994  019E                     	;# 
   995  019F                     	;# 
   996  020D                     	;# 
   997  0210                     	;# 
   998  0211                     	;# 
   999  0211                     	;# 
  1000  0212                     	;# 
  1001  0212                     	;# 
  1002  0213                     	;# 
  1003  0213                     	;# 
  1004  0214                     	;# 
  1005  0214                     	;# 
  1006  0215                     	;# 
  1007  0215                     	;# 
  1008  0215                     	;# 
  1009  0216                     	;# 
  1010  0216                     	;# 
  1011  0217                     	;# 
  1012  0217                     	;# 
  1013  0291                     	;# 
  1014  0291                     	;# 
  1015  0292                     	;# 
  1016  0293                     	;# 
  1017  0298                     	;# 
  1018  0298                     	;# 
  1019  0299                     	;# 
  1020  029A                     	;# 
  1021  0394                     	;# 
  1022  0395                     	;# 
  1023  0396                     	;# 
  1024  0FE4                     	;# 
  1025  0FE5                     	;# 
  1026  0FE6                     	;# 
  1027  0FE7                     	;# 
  1028  0FE8                     	;# 
  1029  0FE9                     	;# 
  1030  0FEA                     	;# 
  1031  0FEB                     	;# 
  1032  0FED                     	;# 
  1033  0FEE                     	;# 
  1034  0FEF                     	;# 
  1035  0000                     	;# 
  1036  0001                     	;# 
  1037  0002                     	;# 
  1038  0003                     	;# 
  1039  0004                     	;# 
  1040  0005                     	;# 
  1041  0006                     	;# 
  1042  0007                     	;# 
  1043  0008                     	;# 
  1044  0009                     	;# 
  1045  000A                     	;# 
  1046  000B                     	;# 
  1047  000C                     	;# 
  1048  000D                     	;# 
  1049  000E                     	;# 
  1050  0010                     	;# 
  1051  0011                     	;# 
  1052  0012                     	;# 
  1053  0015                     	;# 
  1054  0016                     	;# 
  1055  0016                     	;# 
  1056  0017                     	;# 
  1057  0018                     	;# 
  1058  0019                     	;# 
  1059  001A                     	;# 
  1060  001B                     	;# 
  1061  001C                     	;# 
  1062  008C                     	;# 
  1063  008D                     	;# 
  1064  008E                     	;# 
  1065  0090                     	;# 
  1066  0091                     	;# 
  1067  0092                     	;# 
  1068  0095                     	;# 
  1069  0096                     	;# 
  1070  0097                     	;# 
  1071  0099                     	;# 
  1072  009A                     	;# 
  1073  009B                     	;# 
  1074  009B                     	;# 
  1075  009C                     	;# 
  1076  009D                     	;# 
  1077  009E                     	;# 
  1078  010C                     	;# 
  1079  010D                     	;# 
  1080  010E                     	;# 
  1081  0116                     	;# 
  1082  0117                     	;# 
  1083  011D                     	;# 
  1084  018C                     	;# 
  1085  018D                     	;# 
  1086  018E                     	;# 
  1087  0191                     	;# 
  1088  0191                     	;# 
  1089  0192                     	;# 
  1090  0193                     	;# 
  1091  0193                     	;# 
  1092  0194                     	;# 
  1093  0195                     	;# 
  1094  0196                     	;# 
  1095  0197                     	;# 
  1096  0199                     	;# 
  1097  019A                     	;# 
  1098  019B                     	;# 
  1099  019B                     	;# 
  1100  019B                     	;# 
  1101  019B                     	;# 
  1102  019C                     	;# 
  1103  019C                     	;# 
  1104  019D                     	;# 
  1105  019E                     	;# 
  1106  019F                     	;# 
  1107  020D                     	;# 
  1108  0210                     	;# 
  1109  0211                     	;# 
  1110  0211                     	;# 
  1111  0212                     	;# 
  1112  0212                     	;# 
  1113  0213                     	;# 
  1114  0213                     	;# 
  1115  0214                     	;# 
  1116  0214                     	;# 
  1117  0215                     	;# 
  1118  0215                     	;# 
  1119  0215                     	;# 
  1120  0216                     	;# 
  1121  0216                     	;# 
  1122  0217                     	;# 
  1123  0217                     	;# 
  1124  0291                     	;# 
  1125  0291                     	;# 
  1126  0292                     	;# 
  1127  0293                     	;# 
  1128  0298                     	;# 
  1129  0298                     	;# 
  1130  0299                     	;# 
  1131  029A                     	;# 
  1132  0394                     	;# 
  1133  0395                     	;# 
  1134  0396                     	;# 
  1135  0FE4                     	;# 
  1136  0FE5                     	;# 
  1137  0FE6                     	;# 
  1138  0FE7                     	;# 
  1139  0FE8                     	;# 
  1140  0FE9                     	;# 
  1141  0FEA                     	;# 
  1142  0FEB                     	;# 
  1143  0FED                     	;# 
  1144  0FEE                     	;# 
  1145  0FEF                     	;# 
  1146  0000                     	;# 
  1147  0001                     	;# 
  1148  0002                     	;# 
  1149  0003                     	;# 
  1150  0004                     	;# 
  1151  0005                     	;# 
  1152  0006                     	;# 
  1153  0007                     	;# 
  1154  0008                     	;# 
  1155  0009                     	;# 
  1156  000A                     	;# 
  1157  000B                     	;# 
  1158  000C                     	;# 
  1159  000D                     	;# 
  1160  000E                     	;# 
  1161  0010                     	;# 
  1162  0011                     	;# 
  1163  0012                     	;# 
  1164  0015                     	;# 
  1165  0016                     	;# 
  1166  0016                     	;# 
  1167  0017                     	;# 
  1168  0018                     	;# 
  1169  0019                     	;# 
  1170  001A                     	;# 
  1171  001B                     	;# 
  1172  001C                     	;# 
  1173  008C                     	;# 
  1174  008D                     	;# 
  1175  008E                     	;# 
  1176  0090                     	;# 
  1177  0091                     	;# 
  1178  0092                     	;# 
  1179  0095                     	;# 
  1180  0096                     	;# 
  1181  0097                     	;# 
  1182  0099                     	;# 
  1183  009A                     	;# 
  1184  009B                     	;# 
  1185  009B                     	;# 
  1186  009C                     	;# 
  1187  009D                     	;# 
  1188  009E                     	;# 
  1189  010C                     	;# 
  1190  010D                     	;# 
  1191  010E                     	;# 
  1192  0116                     	;# 
  1193  0117                     	;# 
  1194  011D                     	;# 
  1195  018C                     	;# 
  1196  018D                     	;# 
  1197  018E                     	;# 
  1198  0191                     	;# 
  1199  0191                     	;# 
  1200  0192                     	;# 
  1201  0193                     	;# 
  1202  0193                     	;# 
  1203  0194                     	;# 
  1204  0195                     	;# 
  1205  0196                     	;# 
  1206  0197                     	;# 
  1207  0199                     	;# 
  1208  019A                     	;# 
  1209  019B                     	;# 
  1210  019B                     	;# 
  1211  019B                     	;# 
  1212  019B                     	;# 
  1213  019C                     	;# 
  1214  019C                     	;# 
  1215  019D                     	;# 
  1216  019E                     	;# 
  1217  019F                     	;# 
  1218  020D                     	;# 
  1219  0210                     	;# 
  1220  0211                     	;# 
  1221  0211                     	;# 
  1222  0212                     	;# 
  1223  0212                     	;# 
  1224  0213                     	;# 
  1225  0213                     	;# 
  1226  0214                     	;# 
  1227  0214                     	;# 
  1228  0215                     	;# 
  1229  0215                     	;# 
  1230  0215                     	;# 
  1231  0216                     	;# 
  1232  0216                     	;# 
  1233  0217                     	;# 
  1234  0217                     	;# 
  1235  0291                     	;# 
  1236  0291                     	;# 
  1237  0292                     	;# 
  1238  0293                     	;# 
  1239  0298                     	;# 
  1240  0298                     	;# 
  1241  0299                     	;# 
  1242  029A                     	;# 
  1243  0394                     	;# 
  1244  0395                     	;# 
  1245  0396                     	;# 
  1246  0FE4                     	;# 
  1247  0FE5                     	;# 
  1248  0FE6                     	;# 
  1249  0FE7                     	;# 
  1250  0FE8                     	;# 
  1251  0FE9                     	;# 
  1252  0FEA                     	;# 
  1253  0FEB                     	;# 
  1254  0FED                     	;# 
  1255  0FEE                     	;# 
  1256  0FEF                     	;# 
  1257  0000                     	;# 
  1258  0001                     	;# 
  1259  0002                     	;# 
  1260  0003                     	;# 
  1261  0004                     	;# 
  1262  0005                     	;# 
  1263  0006                     	;# 
  1264  0007                     	;# 
  1265  0008                     	;# 
  1266  0009                     	;# 
  1267  000A                     	;# 
  1268  000B                     	;# 
  1269  000C                     	;# 
  1270  000D                     	;# 
  1271  000E                     	;# 
  1272  0010                     	;# 
  1273  0011                     	;# 
  1274  0012                     	;# 
  1275  0015                     	;# 
  1276  0016                     	;# 
  1277  0016                     	;# 
  1278  0017                     	;# 
  1279  0018                     	;# 
  1280  0019                     	;# 
  1281  001A                     	;# 
  1282  001B                     	;# 
  1283  001C                     	;# 
  1284  008C                     	;# 
  1285  008D                     	;# 
  1286  008E                     	;# 
  1287  0090                     	;# 
  1288  0091                     	;# 
  1289  0092                     	;# 
  1290  0095                     	;# 
  1291  0096                     	;# 
  1292  0097                     	;# 
  1293  0099                     	;# 
  1294  009A                     	;# 
  1295  009B                     	;# 
  1296  009B                     	;# 
  1297  009C                     	;# 
  1298  009D                     	;# 
  1299  009E                     	;# 
  1300  010C                     	;# 
  1301  010D                     	;# 
  1302  010E                     	;# 
  1303  0116                     	;# 
  1304  0117                     	;# 
  1305  011D                     	;# 
  1306  018C                     	;# 
  1307  018D                     	;# 
  1308  018E                     	;# 
  1309  0191                     	;# 
  1310  0191                     	;# 
  1311  0192                     	;# 
  1312  0193                     	;# 
  1313  0193                     	;# 
  1314  0194                     	;# 
  1315  0195                     	;# 
  1316  0196                     	;# 
  1317  0197                     	;# 
  1318  0199                     	;# 
  1319  019A                     	;# 
  1320  019B                     	;# 
  1321  019B                     	;# 
  1322  019B                     	;# 
  1323  019B                     	;# 
  1324  019C                     	;# 
  1325  019C                     	;# 
  1326  019D                     	;# 
  1327  019E                     	;# 
  1328  019F                     	;# 
  1329  020D                     	;# 
  1330  0210                     	;# 
  1331  0211                     	;# 
  1332  0211                     	;# 
  1333  0212                     	;# 
  1334  0212                     	;# 
  1335  0213                     	;# 
  1336  0213                     	;# 
  1337  0214                     	;# 
  1338  0214                     	;# 
  1339  0215                     	;# 
  1340  0215                     	;# 
  1341  0215                     	;# 
  1342  0216                     	;# 
  1343  0216                     	;# 
  1344  0217                     	;# 
  1345  0217                     	;# 
  1346  0291                     	;# 
  1347  0291                     	;# 
  1348  0292                     	;# 
  1349  0293                     	;# 
  1350  0298                     	;# 
  1351  0298                     	;# 
  1352  0299                     	;# 
  1353  029A                     	;# 
  1354  0394                     	;# 
  1355  0395                     	;# 
  1356  0396                     	;# 
  1357  0FE4                     	;# 
  1358  0FE5                     	;# 
  1359  0FE6                     	;# 
  1360  0FE7                     	;# 
  1361  0FE8                     	;# 
  1362  0FE9                     	;# 
  1363  0FEA                     	;# 
  1364  0FEB                     	;# 
  1365  0FED                     	;# 
  1366  0FEE                     	;# 
  1367  0FEF                     	;# 
  1368  0000                     	;# 
  1369  0001                     	;# 
  1370  0002                     	;# 
  1371  0003                     	;# 
  1372  0004                     	;# 
  1373  0005                     	;# 
  1374  0006                     	;# 
  1375  0007                     	;# 
  1376  0008                     	;# 
  1377  0009                     	;# 
  1378  000A                     	;# 
  1379  000B                     	;# 
  1380  000C                     	;# 
  1381  000D                     	;# 
  1382  000E                     	;# 
  1383  0010                     	;# 
  1384  0011                     	;# 
  1385  0012                     	;# 
  1386  0015                     	;# 
  1387  0016                     	;# 
  1388  0016                     	;# 
  1389  0017                     	;# 
  1390  0018                     	;# 
  1391  0019                     	;# 
  1392  001A                     	;# 
  1393  001B                     	;# 
  1394  001C                     	;# 
  1395  008C                     	;# 
  1396  008D                     	;# 
  1397  008E                     	;# 
  1398  0090                     	;# 
  1399  0091                     	;# 
  1400  0092                     	;# 
  1401  0095                     	;# 
  1402  0096                     	;# 
  1403  0097                     	;# 
  1404  0099                     	;# 
  1405  009A                     	;# 
  1406  009B                     	;# 
  1407  009B                     	;# 
  1408  009C                     	;# 
  1409  009D                     	;# 
  1410  009E                     	;# 
  1411  010C                     	;# 
  1412  010D                     	;# 
  1413  010E                     	;# 
  1414  0116                     	;# 
  1415  0117                     	;# 
  1416  011D                     	;# 
  1417  018C                     	;# 
  1418  018D                     	;# 
  1419  018E                     	;# 
  1420  0191                     	;# 
  1421  0191                     	;# 
  1422  0192                     	;# 
  1423  0193                     	;# 
  1424  0193                     	;# 
  1425  0194                     	;# 
  1426  0195                     	;# 
  1427  0196                     	;# 
  1428  0197                     	;# 
  1429  0199                     	;# 
  1430  019A                     	;# 
  1431  019B                     	;# 
  1432  019B                     	;# 
  1433  019B                     	;# 
  1434  019B                     	;# 
  1435  019C                     	;# 
  1436  019C                     	;# 
  1437  019D                     	;# 
  1438  019E                     	;# 
  1439  019F                     	;# 
  1440  020D                     	;# 
  1441  0210                     	;# 
  1442  0211                     	;# 
  1443  0211                     	;# 
  1444  0212                     	;# 
  1445  0212                     	;# 
  1446  0213                     	;# 
  1447  0213                     	;# 
  1448  0214                     	;# 
  1449  0214                     	;# 
  1450  0215                     	;# 
  1451  0215                     	;# 
  1452  0215                     	;# 
  1453  0216                     	;# 
  1454  0216                     	;# 
  1455  0217                     	;# 
  1456  0217                     	;# 
  1457  0291                     	;# 
  1458  0291                     	;# 
  1459  0292                     	;# 
  1460  0293                     	;# 
  1461  0298                     	;# 
  1462  0298                     	;# 
  1463  0299                     	;# 
  1464  029A                     	;# 
  1465  0394                     	;# 
  1466  0395                     	;# 
  1467  0396                     	;# 
  1468  0FE4                     	;# 
  1469  0FE5                     	;# 
  1470  0FE6                     	;# 
  1471  0FE7                     	;# 
  1472  0FE8                     	;# 
  1473  0FE9                     	;# 
  1474  0FEA                     	;# 
  1475  0FEB                     	;# 
  1476  0FED                     	;# 
  1477  0FEE                     	;# 
  1478  0FEF                     	;# 
  1479  0000                     	;# 
  1480  0001                     	;# 
  1481  0002                     	;# 
  1482  0003                     	;# 
  1483  0004                     	;# 
  1484  0005                     	;# 
  1485  0006                     	;# 
  1486  0007                     	;# 
  1487  0008                     	;# 
  1488  0009                     	;# 
  1489  000A                     	;# 
  1490  000B                     	;# 
  1491  000C                     	;# 
  1492  000D                     	;# 
  1493  000E                     	;# 
  1494  0010                     	;# 
  1495  0011                     	;# 
  1496  0012                     	;# 
  1497  0015                     	;# 
  1498  0016                     	;# 
  1499  0016                     	;# 
  1500  0017                     	;# 
  1501  0018                     	;# 
  1502  0019                     	;# 
  1503  001A                     	;# 
  1504  001B                     	;# 
  1505  001C                     	;# 
  1506  008C                     	;# 
  1507  008D                     	;# 
  1508  008E                     	;# 
  1509  0090                     	;# 
  1510  0091                     	;# 
  1511  0092                     	;# 
  1512  0095                     	;# 
  1513  0096                     	;# 
  1514  0097                     	;# 
  1515  0099                     	;# 
  1516  009A                     	;# 
  1517  009B                     	;# 
  1518  009B                     	;# 
  1519  009C                     	;# 
  1520  009D                     	;# 
  1521  009E                     	;# 
  1522  010C                     	;# 
  1523  010D                     	;# 
  1524  010E                     	;# 
  1525  0116                     	;# 
  1526  0117                     	;# 
  1527  011D                     	;# 
  1528  018C                     	;# 
  1529  018D                     	;# 
  1530  018E                     	;# 
  1531  0191                     	;# 
  1532  0191                     	;# 
  1533  0192                     	;# 
  1534  0193                     	;# 
  1535  0193                     	;# 
  1536  0194                     	;# 
  1537  0195                     	;# 
  1538  0196                     	;# 
  1539  0197                     	;# 
  1540  0199                     	;# 
  1541  019A                     	;# 
  1542  019B                     	;# 
  1543  019B                     	;# 
  1544  019B                     	;# 
  1545  019B                     	;# 
  1546  019C                     	;# 
  1547  019C                     	;# 
  1548  019D                     	;# 
  1549  019E                     	;# 
  1550  019F                     	;# 
  1551  020D                     	;# 
  1552  0210                     	;# 
  1553  0211                     	;# 
  1554  0211                     	;# 
  1555  0212                     	;# 
  1556  0212                     	;# 
  1557  0213                     	;# 
  1558  0213                     	;# 
  1559  0214                     	;# 
  1560  0214                     	;# 
  1561  0215                     	;# 
  1562  0215                     	;# 
  1563  0215                     	;# 
  1564  0216                     	;# 
  1565  0216                     	;# 
  1566  0217                     	;# 
  1567  0217                     	;# 
  1568  0291                     	;# 
  1569  0291                     	;# 
  1570  0292                     	;# 
  1571  0293                     	;# 
  1572  0298                     	;# 
  1573  0298                     	;# 
  1574  0299                     	;# 
  1575  029A                     	;# 
  1576  0394                     	;# 
  1577  0395                     	;# 
  1578  0396                     	;# 
  1579  0FE4                     	;# 
  1580  0FE5                     	;# 
  1581  0FE6                     	;# 
  1582  0FE7                     	;# 
  1583  0FE8                     	;# 
  1584  0FE9                     	;# 
  1585  0FEA                     	;# 
  1586  0FEB                     	;# 
  1587  0FED                     	;# 
  1588  0FEE                     	;# 
  1589  0FEF                     	;# 
  1590  0000                     	;# 
  1591  0001                     	;# 
  1592  0002                     	;# 
  1593  0003                     	;# 
  1594  0004                     	;# 
  1595  0005                     	;# 
  1596  0006                     	;# 
  1597  0007                     	;# 
  1598  0008                     	;# 
  1599  0009                     	;# 
  1600  000A                     	;# 
  1601  000B                     	;# 
  1602  000C                     	;# 
  1603  000D                     	;# 
  1604  000E                     	;# 
  1605  0010                     	;# 
  1606  0011                     	;# 
  1607  0012                     	;# 
  1608  0015                     	;# 
  1609  0016                     	;# 
  1610  0016                     	;# 
  1611  0017                     	;# 
  1612  0018                     	;# 
  1613  0019                     	;# 
  1614  001A                     	;# 
  1615  001B                     	;# 
  1616  001C                     	;# 
  1617  008C                     	;# 
  1618  008D                     	;# 
  1619  008E                     	;# 
  1620  0090                     	;# 
  1621  0091                     	;# 
  1622  0092                     	;# 
  1623  0095                     	;# 
  1624  0096                     	;# 
  1625  0097                     	;# 
  1626  0099                     	;# 
  1627  009A                     	;# 
  1628  009B                     	;# 
  1629  009B                     	;# 
  1630  009C                     	;# 
  1631  009D                     	;# 
  1632  009E                     	;# 
  1633  010C                     	;# 
  1634  010D                     	;# 
  1635  010E                     	;# 
  1636  0116                     	;# 
  1637  0117                     	;# 
  1638  011D                     	;# 
  1639  018C                     	;# 
  1640  018D                     	;# 
  1641  018E                     	;# 
  1642  0191                     	;# 
  1643  0191                     	;# 
  1644  0192                     	;# 
  1645  0193                     	;# 
  1646  0193                     	;# 
  1647  0194                     	;# 
  1648  0195                     	;# 
  1649  0196                     	;# 
  1650  0197                     	;# 
  1651  0199                     	;# 
  1652  019A                     	;# 
  1653  019B                     	;# 
  1654  019B                     	;# 
  1655  019B                     	;# 
  1656  019B                     	;# 
  1657  019C                     	;# 
  1658  019C                     	;# 
  1659  019D                     	;# 
  1660  019E                     	;# 
  1661  019F                     	;# 
  1662  020D                     	;# 
  1663  0210                     	;# 
  1664  0211                     	;# 
  1665  0211                     	;# 
  1666  0212                     	;# 
  1667  0212                     	;# 
  1668  0213                     	;# 
  1669  0213                     	;# 
  1670  0214                     	;# 
  1671  0214                     	;# 
  1672  0215                     	;# 
  1673  0215                     	;# 
  1674  0215                     	;# 
  1675  0216                     	;# 
  1676  0216                     	;# 
  1677  0217                     	;# 
  1678  0217                     	;# 
  1679  0291                     	;# 
  1680  0291                     	;# 
  1681  0292                     	;# 
  1682  0293                     	;# 
  1683  0298                     	;# 
  1684  0298                     	;# 
  1685  0299                     	;# 
  1686  029A                     	;# 
  1687  0394                     	;# 
  1688  0395                     	;# 
  1689  0396                     	;# 
  1690  0FE4                     	;# 
  1691  0FE5                     	;# 
  1692  0FE6                     	;# 
  1693  0FE7                     	;# 
  1694  0FE8                     	;# 
  1695  0FE9                     	;# 
  1696  0FEA                     	;# 
  1697  0FEB                     	;# 
  1698  0FED                     	;# 
  1699  0FEE                     	;# 
  1700  0FEF                     	;# 
  1701  0000                     	;# 
  1702  0001                     	;# 
  1703  0002                     	;# 
  1704  0003                     	;# 
  1705  0004                     	;# 
  1706  0005                     	;# 
  1707  0006                     	;# 
  1708  0007                     	;# 
  1709  0008                     	;# 
  1710  0009                     	;# 
  1711  000A                     	;# 
  1712  000B                     	;# 
  1713  000C                     	;# 
  1714  000D                     	;# 
  1715  000E                     	;# 
  1716  0010                     	;# 
  1717  0011                     	;# 
  1718  0012                     	;# 
  1719  0015                     	;# 
  1720  0016                     	;# 
  1721  0016                     	;# 
  1722  0017                     	;# 
  1723  0018                     	;# 
  1724  0019                     	;# 
  1725  001A                     	;# 
  1726  001B                     	;# 
  1727  001C                     	;# 
  1728  008C                     	;# 
  1729  008D                     	;# 
  1730  008E                     	;# 
  1731  0090                     	;# 
  1732  0091                     	;# 
  1733  0092                     	;# 
  1734  0095                     	;# 
  1735  0096                     	;# 
  1736  0097                     	;# 
  1737  0099                     	;# 
  1738  009A                     	;# 
  1739  009B                     	;# 
  1740  009B                     	;# 
  1741  009C                     	;# 
  1742  009D                     	;# 
  1743  009E                     	;# 
  1744  010C                     	;# 
  1745  010D                     	;# 
  1746  010E                     	;# 
  1747  0116                     	;# 
  1748  0117                     	;# 
  1749  011D                     	;# 
  1750  018C                     	;# 
  1751  018D                     	;# 
  1752  018E                     	;# 
  1753  0191                     	;# 
  1754  0191                     	;# 
  1755  0192                     	;# 
  1756  0193                     	;# 
  1757  0193                     	;# 
  1758  0194                     	;# 
  1759  0195                     	;# 
  1760  0196                     	;# 
  1761  0197                     	;# 
  1762  0199                     	;# 
  1763  019A                     	;# 
  1764  019B                     	;# 
  1765  019B                     	;# 
  1766  019B                     	;# 
  1767  019B                     	;# 
  1768  019C                     	;# 
  1769  019C                     	;# 
  1770  019D                     	;# 
  1771  019E                     	;# 
  1772  019F                     	;# 
  1773  020D                     	;# 
  1774  0210                     	;# 
  1775  0211                     	;# 
  1776  0211                     	;# 
  1777  0212                     	;# 
  1778  0212                     	;# 
  1779  0213                     	;# 
  1780  0213                     	;# 
  1781  0214                     	;# 
  1782  0214                     	;# 
  1783  0215                     	;# 
  1784  0215                     	;# 
  1785  0215                     	;# 
  1786  0216                     	;# 
  1787  0216                     	;# 
  1788  0217                     	;# 
  1789  0217                     	;# 
  1790  0291                     	;# 
  1791  0291                     	;# 
  1792  0292                     	;# 
  1793  0293                     	;# 
  1794  0298                     	;# 
  1795  0298                     	;# 
  1796  0299                     	;# 
  1797  029A                     	;# 
  1798  0394                     	;# 
  1799  0395                     	;# 
  1800  0396                     	;# 
  1801  0FE4                     	;# 
  1802  0FE5                     	;# 
  1803  0FE6                     	;# 
  1804  0FE7                     	;# 
  1805  0FE8                     	;# 
  1806  0FE9                     	;# 
  1807  0FEA                     	;# 
  1808  0FEB                     	;# 
  1809  0FED                     	;# 
  1810  0FEE                     	;# 
  1811  0FEF                     	;# 
  1812  0000                     	;# 
  1813  0001                     	;# 
  1814  0002                     	;# 
  1815  0003                     	;# 
  1816  0004                     	;# 
  1817  0005                     	;# 
  1818  0006                     	;# 
  1819  0007                     	;# 
  1820  0008                     	;# 
  1821  0009                     	;# 
  1822  000A                     	;# 
  1823  000B                     	;# 
  1824  000C                     	;# 
  1825  000D                     	;# 
  1826  000E                     	;# 
  1827  0010                     	;# 
  1828  0011                     	;# 
  1829  0012                     	;# 
  1830  0015                     	;# 
  1831  0016                     	;# 
  1832  0016                     	;# 
  1833  0017                     	;# 
  1834  0018                     	;# 
  1835  0019                     	;# 
  1836  001A                     	;# 
  1837  001B                     	;# 
  1838  001C                     	;# 
  1839  008C                     	;# 
  1840  008D                     	;# 
  1841  008E                     	;# 
  1842  0090                     	;# 
  1843  0091                     	;# 
  1844  0092                     	;# 
  1845  0095                     	;# 
  1846  0096                     	;# 
  1847  0097                     	;# 
  1848  0099                     	;# 
  1849  009A                     	;# 
  1850  009B                     	;# 
  1851  009B                     	;# 
  1852  009C                     	;# 
  1853  009D                     	;# 
  1854  009E                     	;# 
  1855  010C                     	;# 
  1856  010D                     	;# 
  1857  010E                     	;# 
  1858  0116                     	;# 
  1859  0117                     	;# 
  1860  011D                     	;# 
  1861  018C                     	;# 
  1862  018D                     	;# 
  1863  018E                     	;# 
  1864  0191                     	;# 
  1865  0191                     	;# 
  1866  0192                     	;# 
  1867  0193                     	;# 
  1868  0193                     	;# 
  1869  0194                     	;# 
  1870  0195                     	;# 
  1871  0196                     	;# 
  1872  0197                     	;# 
  1873  0199                     	;# 
  1874  019A                     	;# 
  1875  019B                     	;# 
  1876  019B                     	;# 
  1877  019B                     	;# 
  1878  019B                     	;# 
  1879  019C                     	;# 
  1880  019C                     	;# 
  1881  019D                     	;# 
  1882  019E                     	;# 
  1883  019F                     	;# 
  1884  020D                     	;# 
  1885  0210                     	;# 
  1886  0211                     	;# 
  1887  0211                     	;# 
  1888  0212                     	;# 
  1889  0212                     	;# 
  1890  0213                     	;# 
  1891  0213                     	;# 
  1892  0214                     	;# 
  1893  0214                     	;# 
  1894  0215                     	;# 
  1895  0215                     	;# 
  1896  0215                     	;# 
  1897  0216                     	;# 
  1898  0216                     	;# 
  1899  0217                     	;# 
  1900  0217                     	;# 
  1901  0291                     	;# 
  1902  0291                     	;# 
  1903  0292                     	;# 
  1904  0293                     	;# 
  1905  0298                     	;# 
  1906  0298                     	;# 
  1907  0299                     	;# 
  1908  029A                     	;# 
  1909  0394                     	;# 
  1910  0395                     	;# 
  1911  0396                     	;# 
  1912  0FE4                     	;# 
  1913  0FE5                     	;# 
  1914  0FE6                     	;# 
  1915  0FE7                     	;# 
  1916  0FE8                     	;# 
  1917  0FE9                     	;# 
  1918  0FEA                     	;# 
  1919  0FEB                     	;# 
  1920  0FED                     	;# 
  1921  0FEE                     	;# 
  1922  0FEF                     	;# 
  1923  0000                     	;# 
  1924  0001                     	;# 
  1925  0002                     	;# 
  1926  0003                     	;# 
  1927  0004                     	;# 
  1928  0005                     	;# 
  1929  0006                     	;# 
  1930  0007                     	;# 
  1931  0008                     	;# 
  1932  0009                     	;# 
  1933  000A                     	;# 
  1934  000B                     	;# 
  1935  000C                     	;# 
  1936  000D                     	;# 
  1937  000E                     	;# 
  1938  0010                     	;# 
  1939  0011                     	;# 
  1940  0012                     	;# 
  1941  0015                     	;# 
  1942  0016                     	;# 
  1943  0016                     	;# 
  1944  0017                     	;# 
  1945  0018                     	;# 
  1946  0019                     	;# 
  1947  001A                     	;# 
  1948  001B                     	;# 
  1949  001C                     	;# 
  1950  008C                     	;# 
  1951  008D                     	;# 
  1952  008E                     	;# 
  1953  0090                     	;# 
  1954  0091                     	;# 
  1955  0092                     	;# 
  1956  0095                     	;# 
  1957  0096                     	;# 
  1958  0097                     	;# 
  1959  0099                     	;# 
  1960  009A                     	;# 
  1961  009B                     	;# 
  1962  009B                     	;# 
  1963  009C                     	;# 
  1964  009D                     	;# 
  1965  009E                     	;# 
  1966  010C                     	;# 
  1967  010D                     	;# 
  1968  010E                     	;# 
  1969  0116                     	;# 
  1970  0117                     	;# 
  1971  011D                     	;# 
  1972  018C                     	;# 
  1973  018D                     	;# 
  1974  018E                     	;# 
  1975  0191                     	;# 
  1976  0191                     	;# 
  1977  0192                     	;# 
  1978  0193                     	;# 
  1979  0193                     	;# 
  1980  0194                     	;# 
  1981  0195                     	;# 
  1982  0196                     	;# 
  1983  0197                     	;# 
  1984  0199                     	;# 
  1985  019A                     	;# 
  1986  019B                     	;# 
  1987  019B                     	;# 
  1988  019B                     	;# 
  1989  019B                     	;# 
  1990  019C                     	;# 
  1991  019C                     	;# 
  1992  019D                     	;# 
  1993  019E                     	;# 
  1994  019F                     	;# 
  1995  020D                     	;# 
  1996  0210                     	;# 
  1997  0211                     	;# 
  1998  0211                     	;# 
  1999  0212                     	;# 
  2000  0212                     	;# 
  2001  0213                     	;# 
  2002  0213                     	;# 
  2003  0214                     	;# 
  2004  0214                     	;# 
  2005  0215                     	;# 
  2006  0215                     	;# 
  2007  0215                     	;# 
  2008  0216                     	;# 
  2009  0216                     	;# 
  2010  0217                     	;# 
  2011  0217                     	;# 
  2012  0291                     	;# 
  2013  0291                     	;# 
  2014  0292                     	;# 
  2015  0293                     	;# 
  2016  0298                     	;# 
  2017  0298                     	;# 
  2018  0299                     	;# 
  2019  029A                     	;# 
  2020  0394                     	;# 
  2021  0395                     	;# 
  2022  0396                     	;# 
  2023  0FE4                     	;# 
  2024  0FE5                     	;# 
  2025  0FE6                     	;# 
  2026  0FE7                     	;# 
  2027  0FE8                     	;# 
  2028  0FE9                     	;# 
  2029  0FEA                     	;# 
  2030  0FEB                     	;# 
  2031  0FED                     	;# 
  2032  0FEE                     	;# 
  2033  0FEF                     	;# 
  2034                           
  2035                           	psect	idataBANK4
  2036  1224                     __pidataBANK4:	
  2037                           
  2038                           ;initializer for __product
  2039  1224  3463               	retlw	99
  2040  1225  3402               	retlw	2
  2041  1226  3400               	retlw	0
  2042  1227  3400               	retlw	0
  2043  1228  3400               	retlw	0
  2044  1229  3400               	retlw	0
  2045  122A  3400               	retlw	0
  2046  122B  3400               	retlw	0
  2047  122C  3400               	retlw	0
  2048  122D  3400               	retlw	0
  2049  122E  3400               	retlw	0
  2050  122F  3400               	retlw	0
  2051  1230  34FF               	retlw	255
  2052  1231  34FF               	retlw	255
  2053  1232  34FF               	retlw	255
  2054  1233  3400               	retlw	0
  2055  1234  3400               	retlw	0
  2056  1235  3400               	retlw	0
  2057  1236  3400               	retlw	0
  2058  1237  3400               	retlw	0
  2059  1238  3400               	retlw	0
  2060  1239  3400               	retlw	0
  2061  123A  3400               	retlw	0
  2062  123B  3400               	retlw	0
  2063  123C  3400               	retlw	0
  2064  123D  3400               	retlw	0
  2065  123E  3400               	retlw	0
  2066  123F  3400               	retlw	0
  2067  1240  3400               	retlw	0
  2068  1241  3400               	retlw	0
  2069  1242  3400               	retlw	0
  2070  1243  3400               	retlw	0
  2071                           
  2072                           	psect	stringtext
  2073  1000                     __pstringtext:	
  2074  1000                     _CC2500_registers_address:	
  2075  1000  3403               	retlw	3
  2076  1001  3416               	retlw	22
  2077  1002  3417               	retlw	23
  2078  1003  341E               	retlw	30
  2079  1004  341F               	retlw	31
  2080  1005  3420               	retlw	32
  2081  1006  342A               	retlw	42
  2082  1007  342B               	retlw	43
  2083  1008  340B               	retlw	11
  2084  1009  340C               	retlw	12
  2085  100A  340D               	retlw	13
  2086  100B  340E               	retlw	14
  2087  100C  340F               	retlw	15
  2088  100D  3410               	retlw	16
  2089  100E  3411               	retlw	17
  2090  100F  3412               	retlw	18
  2091  1010  3413               	retlw	19
  2092  1011  3414               	retlw	20
  2093  1012  340A               	retlw	10
  2094  1013  3415               	retlw	21
  2095  1014  3421               	retlw	33
  2096  1015  3422               	retlw	34
  2097  1016  3418               	retlw	24
  2098  1017  3419               	retlw	25
  2099  1018  341A               	retlw	26
  2100  1019  341B               	retlw	27
  2101  101A  341C               	retlw	28
  2102  101B  341D               	retlw	29
  2103  101C  3423               	retlw	35
  2104  101D  3424               	retlw	36
  2105  101E  3425               	retlw	37
  2106  101F  3426               	retlw	38
  2107  1020  3429               	retlw	41
  2108  1021  342C               	retlw	44
  2109  1022  342D               	retlw	45
  2110  1023  342E               	retlw	46
  2111  1024  3400               	retlw	0
  2112  1025  3401               	retlw	1
  2113  1026  3402               	retlw	2
  2114  1027  3407               	retlw	7
  2115  1028  3408               	retlw	8
  2116  1029  3409               	retlw	9
  2117  102A  3406               	retlw	6
  2118  102B  3404               	retlw	4
  2119  102C  3405               	retlw	5
  2120  102D  3427               	retlw	39
  2121  102E  3428               	retlw	40
  2122  102F                     __end_of_CC2500_registers_address:	
  2123  102F                     _CC2500_rfSettings:	
  2124  102F  3407               	retlw	7
  2125  1030  3407               	retlw	7
  2126  1031  3430               	retlw	48
  2127  1032  3487               	retlw	135
  2128  1033  346B               	retlw	107
  2129  1034  34F8               	retlw	248
  2130  1035  347F               	retlw	127
  2131  1036  343F               	retlw	63
  2132  1037  3409               	retlw	9
  2133  1038  3400               	retlw	0
  2134  1039  345C               	retlw	92
  2135  103A  34A7               	retlw	167
  2136  103B  3462               	retlw	98
  2137  103C  3486               	retlw	134
  2138  103D  3483               	retlw	131
  2139  103E  3403               	retlw	3
  2140  103F  3422               	retlw	34
  2141  1040  34F8               	retlw	248
  2142  1041  3400               	retlw	0
  2143  1042  3444               	retlw	68
  2144  1043  34B6               	retlw	182
  2145  1044  3410               	retlw	16
  2146  1045  3418               	retlw	24
  2147  1046  341D               	retlw	29
  2148  1047  341C               	retlw	28
  2149  1048  34C7               	retlw	199
  2150  1049  3400               	retlw	0
  2151  104A  34B2               	retlw	178
  2152  104B  34EA               	retlw	234
  2153  104C  340A               	retlw	10
  2154  104D  3400               	retlw	0
  2155  104E  3411               	retlw	17
  2156  104F  3459               	retlw	89
  2157  1050  3488               	retlw	136
  2158  1051  3431               	retlw	49
  2159  1052  340B               	retlw	11
  2160  1053  342F               	retlw	47
  2161  1054  342E               	retlw	46
  2162  1055  3406               	retlw	6
  2163  1056  3404               	retlw	4
  2164  1057  3405               	retlw	5
  2165  1058  3400               	retlw	0
  2166  1059  3430               	retlw	48
  2167  105A  34D3               	retlw	211
  2168  105B  3491               	retlw	145
  2169  105C  3441               	retlw	65
  2170  105D  3400               	retlw	0
  2171  105E                     __end_of_CC2500_rfSettings:	
  2172  105E                     _CC2500_patable_vaule:	
  2173  105E  34FE               	retlw	254
  2174  105F  34FE               	retlw	254
  2175  1060  34FE               	retlw	254
  2176  1061  34FE               	retlw	254
  2177  1062  34FE               	retlw	254
  2178  1063  34FE               	retlw	254
  2179  1064  34FE               	retlw	254
  2180  1065  34FE               	retlw	254
  2181  1066                     __end_of_CC2500_patable_vaule:	
  2182                           
  2183                           	psect	nvBANK0
  2184  006E                     __pnvBANK0:	
  2185  006E                     _product:	
  2186  006E                     	ds	1
  2187  000C                     _PORTA	set	12
  2188  000D                     _PORTB	set	13
  2189  000E                     _PORTC	set	14
  2190  0018                     _T1CON	set	24
  2191  0017                     _TMR1H	set	23
  2192  0016                     _TMR1L	set	22
  2193  005F                     _GIE	set	95
  2194  005B                     _IOCIE	set	91
  2195  0058                     _IOCIF	set	88
  2196  005E                     _PEIE	set	94
  2197  0060                     _RA0	set	96
  2198  0063                     _RA3	set	99
  2199  0064                     _RA4	set	100
  2200  0066                     _RA6	set	102
  2201  0067                     _RA7	set	103
  2202  0068                     _RB0	set	104
  2203  0069                     _RB1	set	105
  2204  006A                     _RB2	set	106
  2205  006B                     _RB3	set	107
  2206  006C                     _RB4	set	108
  2207  006D                     _RB5	set	109
  2208  0070                     _RC0	set	112
  2209  0071                     _RC1	set	113
  2210  0072                     _RC2	set	114
  2211  0074                     _RC4	set	116
  2212  0075                     _RC5	set	117
  2213  0077                     _RC7	set	119
  2214  0088                     _TMR1IF	set	136
  2215  009D                     _ADCON0	set	157
  2216  009E                     _ADCON1	set	158
  2217  009C                     _ADRESH	set	156
  2218  009B                     _ADRESL	set	155
  2219  0099                     _OSCCON	set	153
  2220  008C                     _TRISA	set	140
  2221  008D                     _TRISB	set	141
  2222  008E                     _TRISC	set	142
  2223  0097                     _WDTCON	set	151
  2224  04E9                     _GO_nDONE	set	1257
  2225  0488                     _TMR1IE	set	1160
  2226  0117                     _FVRCON	set	279
  2227  010C                     _LATA	set	268
  2228  010D                     _LATB	set	269
  2229  010E                     _LATC	set	270
  2230  018C                     _ANSELA	set	396
  2231  018D                     _ANSELB	set	397
  2232  018E                     _ANSELC	set	398
  2233  0192                     _PMADRH	set	402
  2234  0191                     _PMADRL	set	401
  2235  0196                     _PMCON2	set	406
  2236  0194                     _PMDATH	set	404
  2237  0193                     _PMDATL	set	403
  2238  0CAE                     _CFGS	set	3246
  2239  0CAC                     _FREE	set	3244
  2240  0CAD                     _LWLO	set	3245
  2241  0CA8                     _RD	set	3240
  2242  0CA9                     _WR	set	3241
  2243  0CAA                     _WREN	set	3242
  2244  020D                     _WPUB	set	525
  2245  1069                     _WPUB1	set	4201
  2246  106A                     _WPUB2	set	4202
  2247  0396                     _IOCBF	set	918
  2248  0395                     _IOCBN	set	917
  2249  0394                     _IOCBP	set	916
  2250  1CB2                     _IOCBF2	set	7346
  2251                           
  2252                           ; #config settings
  2253  0000                     
  2254                           	psect	cinit
  2255  0022                     start_initialization:	
  2256  0022                     __initialization:	
  2257                           
  2258                           ; Clear objects allocated to BITCOMMON
  2259  0022  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2260                           
  2261                           ; Clear objects allocated to COMMON
  2262  0023  01F6               	clrf	__pbssCOMMON& (0+127)
  2263  0024  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2264  0025  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2265  0026  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2266  0027  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  2267                           
  2268                           ; Clear objects allocated to BANK0
  2269  0028  01EF               	clrf	__pbssBANK0& (0+127)
  2270                           
  2271                           ; Clear objects allocated to BANK1
  2272  0029  30A0               	movlw	low __pbssBANK1
  2273  002A  0084               	movwf	4
  2274  002B  3000               	movlw	high __pbssBANK1
  2275  002C  0085               	movwf	5
  2276  002D  304C               	movlw	76
  2277  002E  319D  25FF  3180   	fcall	clear_ram0
  2278                           
  2279                           ; Clear objects allocated to BANK2
  2280  0031  3020               	movlw	low __pbssBANK2
  2281  0032  0084               	movwf	4
  2282  0033  3001               	movlw	high __pbssBANK2
  2283  0034  0085               	movwf	5
  2284  0035  304F               	movlw	79
  2285  0036  319D  25FF  3180   	fcall	clear_ram0
  2286                           
  2287                           ; Clear objects allocated to BANK3
  2288  0039  30A0               	movlw	low __pbssBANK3
  2289  003A  0084               	movwf	4
  2290  003B  3001               	movlw	high __pbssBANK3
  2291  003C  0085               	movwf	5
  2292  003D  3041               	movlw	65
  2293  003E  319D  25FF  3180   	fcall	clear_ram0
  2294                           
  2295                           ; Initialize objects allocated to BANK4
  2296  0041  3024               	movlw	low __pidataBANK4
  2297  0042  0084               	movwf	4
  2298  0043  3092               	movlw	(high __pidataBANK4)| (0+128)
  2299  0044  0085               	movwf	5
  2300  0045  3020               	movlw	low __pdataBANK4
  2301  0046  0086               	movwf	6
  2302  0047  3002               	movlw	high __pdataBANK4
  2303  0048  0087               	movwf	7
  2304  0049  3020               	movlw	32
  2305  004A  319D  25F9         	fcall	init_ram
  2306  004C                     end_of_initialization:	
  2307                           ;End of C runtime variable initialization code
  2308                           
  2309  004C                     __end_of__initialization:	
  2310  004C  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2311  004D  0020               	movlb	0
  2312  004E  3188  282C         	ljmp	_main	;jump to C main() function
  2313                           
  2314                           	psect	bitbssCOMMON
  2315  03D8                     __pbitbssCOMMON:	
  2316  03D8                     _Receive_OK:	
  2317  03D8                     	ds	1
  2318  03D9                     _Transceive_OK:	
  2319  03D9                     	ds	1
  2320                           
  2321                           	psect	bssCOMMON
  2322  0076                     __pbssCOMMON:	
  2323  0076                     _DelayOff:	
  2324  0076                     	ds	1
  2325  0077                     _DimmerLightsIntr:	
  2326  0077                     	ds	1
  2327  0078                     _LED:	
  2328  0078                     	ds	1
  2329  0079                     _SPI0Buffer:	
  2330  0079                     	ds	1
  2331  007A                     _Sw:	
  2332  007A                     	ds	1
  2333                           
  2334                           	psect	bssBANK0
  2335  006F                     __pbssBANK0:	
  2336  006F                     _DimmerLights:	
  2337  006F                     	ds	1
  2338                           
  2339                           	psect	bssBANK1
  2340  00A0                     __pbssBANK1:	
  2341  00A0                     _RF1:	
  2342  00A0                     	ds	14
  2343  00AE                     _myMain:	
  2344  00AE                     	ds	14
  2345  00BC                     _Buz1:	
  2346  00BC                     	ds	12
  2347  00C8                     _Dimmer:	
  2348  00C8                     	ds	3
  2349  00CB                     _RF_Count:	
  2350  00CB                     	ds	2
  2351  00CD                     _WDT:	
  2352  00CD                     	ds	2
  2353  00CF                     _CRC:	
  2354  00CF                     	ds	1
  2355  00D0                     _DimmerLights11:	
  2356  00D0                     	ds	1
  2357  00D1                     _DimmerLights22:	
  2358  00D1                     	ds	1
  2359  00D2                     _DimmerLightsIntrIOC:	
  2360  00D2                     	ds	1
  2361  00D3                     _RSSI:	
  2362  00D3                     	ds	1
  2363  00D4                     _Rx_Length:	
  2364  00D4                     	ds	1
  2365  00D5                     _SwDetect:	
  2366  00D5                     	ds	1
  2367  00D6                     _Tx_Length:	
  2368  00D6                     	ds	1
  2369  00D7                     _r_address:	
  2370  00D7                     	ds	1
  2371  00D8                     _r_data:	
  2372  00D8                     	ds	1
  2373  00D9                     _s_data:	
  2374  00D9                     	ds	1
  2375  00DA                     _Temp:	
  2376  00DA                     	ds	18
  2377                           
  2378                           	psect	bssBANK2
  2379  0120                     __pbssBANK2:	
  2380  0120                     _RF_Data:	
  2381  0120                     	ds	30
  2382  013E                     _Timer1:	
  2383  013E                     	ds	3
  2384  0141                     _DimmerLights1:	
  2385  0141                     	ds	17
  2386  0152                     _DimmerLights2:	
  2387  0152                     	ds	17
  2388  0163                     _VarErrLED:	
  2389  0163                     	ds	4
  2390  0167                     _VarLED1:	
  2391  0167                     	ds	4
  2392  016B                     _VarLED2:	
  2393  016B                     	ds	4
  2394                           
  2395                           	psect	bssBANK3
  2396  01A0                     __pbssBANK3:	
  2397  01A0                     _Memory:	
  2398  01A0                     	ds	37
  2399  01C5                     _Sw1:	
  2400  01C5                     	ds	9
  2401  01CE                     _Sw2:	
  2402  01CE                     	ds	9
  2403  01D7                     _DlySw1:	
  2404  01D7                     	ds	5
  2405  01DC                     _DlySw2:	
  2406  01DC                     	ds	5
  2407                           
  2408                           	psect	dataBANK4
  2409  0220                     __pdataBANK4:	
  2410  0220                     __product:	
  2411  0220                     	ds	32
  2412                           
  2413                           	psect	clrtext
  2414  1DFF                     clear_ram0:	
  2415                           ;	Called with FSR0 containing the base address, and
  2416                           ;	WREG with the size to clear
  2417                           
  2418  1DFF  0064               	clrwdt	;clear the watchdog before getting into this loop
  2419  1E00                     clrloop0:	
  2420  1E00  0180               	clrf	0	;clear RAM location pointed to by FSR
  2421  1E01  3101               	addfsr 0,1
  2422  1E02  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2423  1E03  2E00               	goto	clrloop0	;have we reached the end yet?
  2424  1E04  3400               	retlw	0	;all done for this memory range, return
  2425                           
  2426                           	psect	inittext
  2427  1DF9                     init_ram:	
  2428  1DF9  00FE               	movwf	126
  2429  1DFA                     initloop:	
  2430  1DFA  0012               	moviw fsr0++
  2431  1DFB  001E               	movwi fsr1++
  2432  1DFC  0BFE               	decfsz	126,f
  2433  1DFD  2DFA               	goto	initloop
  2434  1DFE  3400               	retlw	0
  2435                           
  2436                           	psect	cstackBANK3
  2437  01E1                     __pcstackBANK3:	
  2438  01E1                     ?_main:	
  2439  01E1                     main@argc:	
  2440                           ; 2 bytes @ 0x0
  2441                           
  2442                           
  2443                           ; 2 bytes @ 0x0
  2444  01E1                     	ds	2
  2445  01E3                     main@argv:	
  2446                           
  2447                           ; 2 bytes @ 0x2
  2448  01E3                     	ds	2
  2449                           
  2450                           	psect	cstackBANK1
  2451  00EC                     __pcstackBANK1:	
  2452  00EC                     setRF_Main@loop_f:	
  2453                           
  2454                           ; 1 bytes @ 0x0
  2455  00EC                     	ds	1
  2456  00ED                     setRF_Main@error:	
  2457                           
  2458                           ; 1 bytes @ 0x1
  2459  00ED                     	ds	1
  2460                           
  2461                           	psect	cstackCOMMON
  2462  0070                     __pcstackCOMMON:	
  2463  0070                     ?_CC2500_WriteCommand:	
  2464  0070                     ?_RF_Timeout_Counter:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0070                     ?_setRF_TimeoutCleared:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0070                     ?_CC2500_WriteByte:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0070                     ?_CC2500_ReadStatus:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0070                     ?_CC2500_ReadByte:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0070                     ?_CC2500_PowerRST:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0070                     ?_CC2500_InitSetREG:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_CC2500_InitPATable:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_CC2500_ClearTXFIFO:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_CC2500_ClearRXFIFO:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_CC2500_FrequencyCabr:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_CC2500_SIDLEMode:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_DlyOff_Initialization:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_DlyOff_Main:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_setDimmerLights_ErrorClose:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_setDimmerLights_Initialization:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_setDimmerLights_Main:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_setTxData:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_setDimmerLights_Line:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_setLED_Initialization:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_setLED_Main:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_Fosc_Set:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_IO_Set:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_TMR1_Set:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_ADC_Set:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_IOC_Set:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_WDT_Set:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_IOC_ISR:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_TMR1_ISR:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_Timeout_Counter:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_set_TimeoutCleared:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_Flash_Memory_Write:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_Flash_Memory_Modify:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_WDT_Clearing:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_myMain_Initialization:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_Temp_Initialization:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_Switch_Initialization:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_RF_Initialization:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_getTemp_AD:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_my_MainTimer:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_Temp_Main:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_Switch_Main:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_RF_Main:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_Exception_Main:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_setTemp_Initialization:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_setTemp_Main:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_setRF_Initialization:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_setRF_Main:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_RF_RxDisable:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_getRxData:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setLog_Code:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setControl_Lights_Table:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setRFSW_Control:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setRFSW_AdjControl:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setRF_DimmerValue:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setSw_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setSw_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_Buzzer_Initialization:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_Buzzer_Main:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_TxData:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_CC2500_RxData:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_CC2500_PowerOnInitial:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_DelayOffPointSelect:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_DelayOff_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_DelayOff_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_DimmerIntrIOCPointSelect:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ??_DimmerIntrIOCPointSelect:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_DimmerIntrPointSelect:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ??_DimmerIntrPointSelect:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_setDimmerLights_IntrControl:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_DimmerLightsPointSelect:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_DimmerLights_Initialization:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_setDimmerLights_SwOn:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setDimmerLights_SwOff:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_setDimmerLights_AdjOn:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_DimmerLights_Main:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_setDimmerLights_AdjRF:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_LedPointSelect:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_LED_Initialization:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_LED_Main:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Mcu_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_ISR:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Flash_Memory_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Flash_Memory_Main:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Flash_Memory_Unlock:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Flash_Memory_Erasing:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setMemory_Modify:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setMemory_LoopSave:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_WDT_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setRF_Learn:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_TouchPower:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_SwPointSelect:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_DelayTimejudge:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_getDimmerLights_Allow_Condition:	
  2747                           ; 1 bytes @ 0x0
  2748                           
  2749  0070                     ?_getMain_LightsStatus:	
  2750                           ; 1 bytes @ 0x0
  2751                           
  2752  0070                     ?_setPercentValue:	
  2753                           ; 1 bytes @ 0x0
  2754                           
  2755  0070                     ?_getPercentValue:	
  2756                           ; 1 bytes @ 0x0
  2757                           
  2758  0070                     ?_Flash_Memory_Read:	
  2759                           ; 1 bytes @ 0x0
  2760                           
  2761  0070                     ?_getRF_KeyStatus:	
  2762                           ; 1 bytes @ 0x0
  2763                           
  2764  0070                     ?_getSw_KeyStatus:	
  2765                           ; 1 bytes @ 0x0
  2766                           
  2767  0070                     ?_getDelayOff_GO:	
  2768                           ; 1 bytes @ 0x0
  2769                           
  2770  0070                     ?_getDimmerLights_Line:	
  2771                           ; 1 bytes @ 0x0
  2772                           
  2773  0070                     ?_getDimmerLights_Status:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0070                     ?_getMain_All_Error_Status:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779                           
  2780                           ; 1 bytes @ 0x0
  2781  0070                     	ds	1
  2782  0071                     DimmerIntrIOCPointSelect@lights:	
  2783  0071                     DimmerIntrPointSelect@lights:	
  2784                           ; 1 bytes @ 0x1
  2785                           
  2786                           
  2787                           ; 1 bytes @ 0x1
  2788  0071                     	ds	1
  2789  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2790  0072                     ??_setDimmerLights_IntrControl:	
  2791                           ; 0 bytes @ 0x2
  2792                           
  2793                           
  2794                           ; 0 bytes @ 0x2
  2795  0072                     	ds	1
  2796  0073                     setDimmerLights_IntrIOC_GO@lights:	
  2797                           
  2798                           ; 1 bytes @ 0x3
  2799  0073                     	ds	1
  2800  0074                     ??_IOC_ISR:	
  2801  0074                     setDimmerLights_IntrControl@lights:	
  2802                           ; 0 bytes @ 0x4
  2803                           
  2804                           
  2805                           ; 1 bytes @ 0x4
  2806  0074                     	ds	1
  2807  0075                     ??_TMR1_ISR:	
  2808  0075                     ??_ISR:	
  2809                           ; 0 bytes @ 0x5
  2810                           
  2811                           
  2812                           ; 0 bytes @ 0x5
  2813  0075                     	ds	1
  2814                           
  2815                           	psect	cstackBANK0
  2816  0020                     __pcstackBANK0:	
  2817  0020                     ??_RF_Timeout_Counter:	
  2818  0020                     ??_setRF_TimeoutCleared:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0020                     ??_CC2500_WriteByte:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0020                     ??_CC2500_ReadByte:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0020                     ?_DelayTime_1us:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0020                     ??_getDimmerLights_Allow_Condition:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0020                     ??_getMain_LightsStatus:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ??_setTxData:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ??_setDimmerLights_Line:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_Fosc_Set:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_IO_Set:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ??_TMR1_Set:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ??_ADC_Set:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_IOC_Set:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_WDT_Set:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_Timeout_Counter:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_set_TimeoutCleared:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_Flash_Memory_Read:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ?_setMemory_Data:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_Flash_Memory_Write:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_WDT_Clearing:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_myMain_Initialization:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_Temp_Initialization:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_setTemp_Initialization:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ??_setRF_Initialization:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_getRF_KeyStatus:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_getSw_KeyStatus:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_Buzzer_Initialization:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_Buzzer_Main:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_DelayOffPointSelect:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_DimmerLightsPointSelect:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ??_getDimmerLights_Line:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ??_LedPointSelect:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ??_Flash_Memory_Unlock:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0020                     ??_Flash_Memory_Erasing:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0020                     ??_setMemory_Modify:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0020                     ??_setMemory_LoopSave:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0020                     ??_WDT_Main:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0020                     ??_getMain_All_Error_Status:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0020                     ??_setRF_Learn:	
  2933                           ; 0 bytes @ 0x0
  2934                           
  2935  0020                     ??_TouchPower:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0020                     ??_SwPointSelect:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0020                     ?___bmul:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0020                     ?_getBuz_GO:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0020                     ?_getAD:	
  2948                           ; 2 bytes @ 0x0
  2949                           
  2950  0020                     ?___awdiv:	
  2951                           ; 2 bytes @ 0x0
  2952                           
  2953  0020                     ?___ftpack:	
  2954                           ; 2 bytes @ 0x0
  2955                           
  2956  0020                     setDimmerLights_Line@lights:	
  2957                           ; 3 bytes @ 0x0
  2958                           
  2959  0020                     getAD@adcon1:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0020                     setMemory_Data@data:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0020                     getMain_LightsStatus@status:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0020                     ___bmul@multiplicand:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971  0020                     DelayTime_1us@count:	
  2972                           ; 1 bytes @ 0x0
  2973                           
  2974  0020                     ___awdiv@divisor:	
  2975                           ; 2 bytes @ 0x0
  2976                           
  2977  0020                     ___ftpack@arg:	
  2978                           ; 2 bytes @ 0x0
  2979                           
  2980                           
  2981                           ; 3 bytes @ 0x0
  2982  0020                     	ds	1
  2983  0021                     ??_setMemory_Data:	
  2984  0021                     ??_RF_Initialization:	
  2985                           ; 0 bytes @ 0x1
  2986                           
  2987  0021                     ??_Mcu_Initialization:	
  2988                           ; 0 bytes @ 0x1
  2989                           
  2990  0021                     ??___bmul:	
  2991                           ; 0 bytes @ 0x1
  2992                           
  2993  0021                     CC2500_WriteByte@loop_a:	
  2994                           ; 0 bytes @ 0x1
  2995                           
  2996  0021                     CC2500_ReadByte@loop_b:	
  2997                           ; 1 bytes @ 0x1
  2998                           
  2999  0021                     DelayOffPointSelect@sw:	
  3000                           ; 1 bytes @ 0x1
  3001                           
  3002  0021                     DimmerLightsPointSelect@lights:	
  3003                           ; 1 bytes @ 0x1
  3004                           
  3005  0021                     _getDimmerLights_Allow_Condition$2156:	
  3006                           ; 1 bytes @ 0x1
  3007                           
  3008  0021                     getDimmerLights_Line@line:	
  3009                           ; 1 bytes @ 0x1
  3010                           
  3011  0021                     LedPointSelect@led:	
  3012                           ; 1 bytes @ 0x1
  3013                           
  3014  0021                     Flash_Memory_Read@i:	
  3015                           ; 1 bytes @ 0x1
  3016                           
  3017  0021                     Flash_Memory_Write@i:	
  3018                           ; 1 bytes @ 0x1
  3019                           
  3020  0021                     setMemory_Modify@command:	
  3021                           ; 1 bytes @ 0x1
  3022                           
  3023  0021                     setMemory_LoopSave@command:	
  3024                           ; 1 bytes @ 0x1
  3025                           
  3026  0021                     getMain_All_Error_Status@command:	
  3027                           ; 1 bytes @ 0x1
  3028                           
  3029  0021                     setRF_Learn@command:	
  3030                           ; 1 bytes @ 0x1
  3031                           
  3032  0021                     getRF_KeyStatus@key:	
  3033                           ; 1 bytes @ 0x1
  3034                           
  3035  0021                     SwPointSelect@sw:	
  3036                           ; 1 bytes @ 0x1
  3037                           
  3038  0021                     _getSw_KeyStatus$5744:	
  3039                           ; 1 bytes @ 0x1
  3040                           
  3041                           
  3042                           ; 1 bytes @ 0x1
  3043  0021                     	ds	1
  3044  0022                     ??_CC2500_WriteCommand:	
  3045  0022                     ??_CC2500_ReadStatus:	
  3046                           ; 0 bytes @ 0x2
  3047                           
  3048  0022                     ??_DelayTime_1us:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0022                     ?_CC2500_WriteREG:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0022                     ??_DlyOff_Initialization:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0022                     ??_setDimmerLights_Initialization:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0022                     ?_setLED:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0022                     ??_setLED_Main:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0022                     ??_getBuz_GO:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0022                     ??_getDelayOff_GO:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0022                     ??_setDimmerLights_AdjOn:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0022                     ??_getDimmerLights_Status:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0022                     CC2500_WriteREG@value:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0022                     DlyOff_Initialization@sw:	
  3082                           ; 1 bytes @ 0x2
  3083                           
  3084  0022                     getDelayOff_GO@sw:	
  3085                           ; 1 bytes @ 0x2
  3086                           
  3087  0022                     setDimmerLights_AdjOn@sw:	
  3088                           ; 1 bytes @ 0x2
  3089                           
  3090  0022                     _getDimmerLights_Allow_Condition$2157:	
  3091                           ; 1 bytes @ 0x2
  3092                           
  3093  0022                     getDimmerLights_Status@lights:	
  3094                           ; 1 bytes @ 0x2
  3095                           
  3096  0022                     setLED@command:	
  3097                           ; 1 bytes @ 0x2
  3098                           
  3099  0022                     Flash_Memory_Read@address:	
  3100                           ; 1 bytes @ 0x2
  3101                           
  3102  0022                     setMemory_Data@address:	
  3103                           ; 1 bytes @ 0x2
  3104                           
  3105  0022                     _getRF_KeyStatus$4838:	
  3106                           ; 1 bytes @ 0x2
  3107                           
  3108  0022                     _getSw_KeyStatus$5745:	
  3109                           ; 1 bytes @ 0x2
  3110                           
  3111  0022                     ___bmul@product:	
  3112                           ; 1 bytes @ 0x2
  3113                           
  3114  0022                     DelayTime_1us@i:	
  3115                           ; 1 bytes @ 0x2
  3116                           
  3117  0022                     _getMain_All_Error_Status$3339:	
  3118                           ; 2 bytes @ 0x2
  3119                           
  3120  0022                     ___awdiv@dividend:	
  3121                           ; 2 bytes @ 0x2
  3122                           
  3123                           
  3124                           ; 2 bytes @ 0x2
  3125  0022                     	ds	1
  3126  0023                     ??_CC2500_WriteREG:	
  3127  0023                     ??_setLED:	
  3128                           ; 0 bytes @ 0x3
  3129                           
  3130  0023                     ??_DelayOff_Initialization:	
  3131                           ; 0 bytes @ 0x3
  3132                           
  3133  0023                     ??_getAD:	
  3134                           ; 0 bytes @ 0x3
  3135                           
  3136  0023                     CC2500_WriteCommand@command:	
  3137                           ; 0 bytes @ 0x3
  3138                           
  3139  0023                     CC2500_ReadStatus@status_addr:	
  3140                           ; 1 bytes @ 0x3
  3141                           
  3142  0023                     getDelayOff_GO@go:	
  3143                           ; 1 bytes @ 0x3
  3144                           
  3145  0023                     setDimmerLights_Initialization@lights:	
  3146                           ; 1 bytes @ 0x3
  3147                           
  3148  0023                     getDimmerLights_Allow_Condition@lights:	
  3149                           ; 1 bytes @ 0x3
  3150                           
  3151  0023                     getDimmerLights_Status@status:	
  3152                           ; 1 bytes @ 0x3
  3153                           
  3154  0023                     setLED@led:	
  3155                           ; 1 bytes @ 0x3
  3156                           
  3157  0023                     getAD@adcon0:	
  3158                           ; 1 bytes @ 0x3
  3159                           
  3160  0023                     Flash_Memory_Read@ret:	
  3161                           ; 1 bytes @ 0x3
  3162                           
  3163  0023                     getSw_KeyStatus@status:	
  3164                           ; 1 bytes @ 0x3
  3165                           
  3166  0023                     ___bmul@multiplier:	
  3167                           ; 1 bytes @ 0x3
  3168                           
  3169  0023                     ___ftpack@exp:	
  3170                           ; 1 bytes @ 0x3
  3171                           
  3172                           
  3173                           ; 1 bytes @ 0x3
  3174  0023                     	ds	1
  3175  0024                     ??_CC2500_ClearTXFIFO:	
  3176  0024                     ??_CC2500_ClearRXFIFO:	
  3177                           ; 0 bytes @ 0x4
  3178                           
  3179  0024                     ??_CC2500_SIDLEMode:	
  3180                           ; 0 bytes @ 0x4
  3181                           
  3182  0024                     ??_DelayTimejudge:	
  3183                           ; 0 bytes @ 0x4
  3184                           
  3185  0024                     ??_setLED_Initialization:	
  3186                           ; 0 bytes @ 0x4
  3187                           
  3188  0024                     ??_Flash_Memory_Modify:	
  3189                           ; 0 bytes @ 0x4
  3190                           
  3191  0024                     ??_getTemp_AD:	
  3192                           ; 0 bytes @ 0x4
  3193                           
  3194  0024                     ??_RF_RxDisable:	
  3195                           ; 0 bytes @ 0x4
  3196                           
  3197  0024                     ??_setSw_Initialization:	
  3198                           ; 0 bytes @ 0x4
  3199                           
  3200  0024                     ??_CC2500_TxData:	
  3201                           ; 0 bytes @ 0x4
  3202                           
  3203  0024                     ??_CC2500_RxData:	
  3204                           ; 0 bytes @ 0x4
  3205                           
  3206  0024                     ??_DimmerLights_Initialization:	
  3207                           ; 0 bytes @ 0x4
  3208                           
  3209  0024                     ??___awdiv:	
  3210                           ; 0 bytes @ 0x4
  3211                           
  3212  0024                     CC2500_WriteREG@w_addr:	
  3213                           ; 0 bytes @ 0x4
  3214                           
  3215  0024                     getDimmerLights_Allow_Condition@allow:	
  3216                           ; 1 bytes @ 0x4
  3217                           
  3218  0024                     setLED_Initialization@led:	
  3219                           ; 1 bytes @ 0x4
  3220                           
  3221  0024                     setLED_Main@led:	
  3222                           ; 1 bytes @ 0x4
  3223                           
  3224  0024                     getMain_All_Error_Status@status:	
  3225                           ; 1 bytes @ 0x4
  3226                           
  3227  0024                     setSw_Initialization@sw:	
  3228                           ; 1 bytes @ 0x4
  3229                           
  3230  0024                     getSw_KeyStatus@sw:	
  3231                           ; 1 bytes @ 0x4
  3232                           
  3233  0024                     ___ftpack@sign:	
  3234                           ; 1 bytes @ 0x4
  3235                           
  3236  0024                     getBuz_GO@i:	
  3237                           ; 1 bytes @ 0x4
  3238                           
  3239  0024                     DelayTime_1us@j:	
  3240                           ; 2 bytes @ 0x4
  3241                           
  3242                           
  3243                           ; 2 bytes @ 0x4
  3244  0024                     	ds	1
  3245  0025                     ??_CC2500_InitSetREG:	
  3246  0025                     ??_CC2500_InitPATable:	
  3247                           ; 0 bytes @ 0x5
  3248                           
  3249  0025                     ??_Switch_Initialization:	
  3250                           ; 0 bytes @ 0x5
  3251                           
  3252  0025                     ??___ftpack:	
  3253                           ; 0 bytes @ 0x5
  3254                           
  3255  0025                     ??_LED_Initialization:	
  3256                           ; 0 bytes @ 0x5
  3257                           
  3258  0025                     ??_LED_Main:	
  3259                           ; 0 bytes @ 0x5
  3260                           
  3261  0025                     CC2500_TxData@loop_e:	
  3262                           ; 0 bytes @ 0x5
  3263                           
  3264  0025                     CC2500_RxData@loop_f:	
  3265                           ; 1 bytes @ 0x5
  3266                           
  3267  0025                     Flash_Memory_Modify@i:	
  3268                           ; 1 bytes @ 0x5
  3269                           
  3270  0025                     getTemp_AD@channel:	
  3271                           ; 1 bytes @ 0x5
  3272                           
  3273  0025                     ___awdiv@counter:	
  3274                           ; 1 bytes @ 0x5
  3275                           
  3276                           
  3277                           ; 1 bytes @ 0x5
  3278  0025                     	ds	1
  3279  0026                     ??_CC2500_PowerRST:	
  3280  0026                     ??_CC2500_FrequencyCabr:	
  3281                           ; 0 bytes @ 0x6
  3282                           
  3283  0026                     ??_Flash_Memory_Main:	
  3284                           ; 0 bytes @ 0x6
  3285                           
  3286  0026                     CC2500_InitSetREG@temp1:	
  3287                           ; 0 bytes @ 0x6
  3288                           
  3289  0026                     CC2500_InitPATable@temp:	
  3290                           ; 1 bytes @ 0x6
  3291                           
  3292  0026                     DelayTimejudge@i:	
  3293                           ; 1 bytes @ 0x6
  3294                           
  3295  0026                     ___awdiv@sign:	
  3296                           ; 1 bytes @ 0x6
  3297                           
  3298                           
  3299                           ; 1 bytes @ 0x6
  3300  0026                     	ds	1
  3301  0027                     CC2500_InitSetREG@temp2:	
  3302  0027                     CC2500_InitPATable@loop_d:	
  3303                           ; 1 bytes @ 0x7
  3304                           
  3305  0027                     DelayTimejudge@j:	
  3306                           ; 1 bytes @ 0x7
  3307                           
  3308  0027                     ___awdiv@quotient:	
  3309                           ; 1 bytes @ 0x7
  3310                           
  3311                           
  3312                           ; 2 bytes @ 0x7
  3313  0027                     	ds	1
  3314  0028                     ?___awtoft:	
  3315  0028                     CC2500_InitSetREG@loop_c:	
  3316                           ; 3 bytes @ 0x8
  3317                           
  3318  0028                     DelayTimejudge@k:	
  3319                           ; 1 bytes @ 0x8
  3320                           
  3321  0028                     ___awtoft@c:	
  3322                           ; 1 bytes @ 0x8
  3323                           
  3324                           
  3325                           ; 2 bytes @ 0x8
  3326  0028                     	ds	1
  3327  0029                     ?_setBuz:	
  3328  0029                     ??_CC2500_PowerOnInitial:	
  3329                           ; 0 bytes @ 0x9
  3330                           
  3331  0029                     DelayTimejudge@value:	
  3332                           ; 0 bytes @ 0x9
  3333                           
  3334  0029                     setBuz@time:	
  3335                           ; 1 bytes @ 0x9
  3336                           
  3337                           
  3338                           ; 2 bytes @ 0x9
  3339  0029                     	ds	2
  3340  002B                     ??_setBuz:	
  3341  002B                     ??___awtoft:	
  3342                           ; 0 bytes @ 0xB
  3343                           
  3344                           
  3345                           ; 0 bytes @ 0xB
  3346  002B                     	ds	1
  3347  002C                     setBuz@count:	
  3348                           
  3349                           ; 1 bytes @ 0xC
  3350  002C                     	ds	1
  3351  002D                     ??_my_MainTimer:	
  3352  002D                     ??_setDimmerLights_SwOn:	
  3353                           ; 0 bytes @ 0xD
  3354                           
  3355  002D                     ___awtoft@sign:	
  3356                           ; 0 bytes @ 0xD
  3357                           
  3358                           
  3359                           ; 1 bytes @ 0xD
  3360  002D                     	ds	1
  3361  002E                     ?___ftdiv:	
  3362  002E                     ?___ftmul:	
  3363                           ; 3 bytes @ 0xE
  3364                           
  3365  002E                     _setDimmerLights_SwOn$2142:	
  3366                           ; 3 bytes @ 0xE
  3367                           
  3368  002E                     ___ftdiv@f2:	
  3369                           ; 1 bytes @ 0xE
  3370                           
  3371  002E                     ___ftmul@f1:	
  3372                           ; 3 bytes @ 0xE
  3373                           
  3374                           
  3375                           ; 3 bytes @ 0xE
  3376  002E                     	ds	1
  3377  002F                     _setDimmerLights_SwOn$2143:	
  3378                           
  3379                           ; 1 bytes @ 0xF
  3380  002F                     	ds	1
  3381  0030                     setDimmerLights_SwOn@idle:	
  3382                           
  3383                           ; 1 bytes @ 0x10
  3384  0030                     	ds	1
  3385  0031                     setDimmerLights_SwOn@sw:	
  3386  0031                     ___ftdiv@f1:	
  3387                           ; 1 bytes @ 0x11
  3388                           
  3389  0031                     ___ftmul@f2:	
  3390                           ; 3 bytes @ 0x11
  3391                           
  3392                           
  3393                           ; 3 bytes @ 0x11
  3394  0031                     	ds	3
  3395  0034                     ??___ftdiv:	
  3396  0034                     ??___ftmul:	
  3397                           ; 0 bytes @ 0x14
  3398                           
  3399                           
  3400                           ; 0 bytes @ 0x14
  3401  0034                     	ds	4
  3402  0038                     ___ftdiv@cntr:	
  3403  0038                     ___ftmul@exp:	
  3404                           ; 1 bytes @ 0x18
  3405                           
  3406                           
  3407                           ; 1 bytes @ 0x18
  3408  0038                     	ds	1
  3409  0039                     ___ftdiv@f3:	
  3410  0039                     ___ftmul@f3_as_product:	
  3411                           ; 3 bytes @ 0x19
  3412                           
  3413                           
  3414                           ; 3 bytes @ 0x19
  3415  0039                     	ds	3
  3416  003C                     ___ftdiv@exp:	
  3417  003C                     ___ftmul@cntr:	
  3418                           ; 1 bytes @ 0x1C
  3419                           
  3420                           
  3421                           ; 1 bytes @ 0x1C
  3422  003C                     	ds	1
  3423  003D                     ___ftdiv@sign:	
  3424  003D                     ___ftmul@sign:	
  3425                           ; 1 bytes @ 0x1D
  3426                           
  3427                           
  3428                           ; 1 bytes @ 0x1D
  3429  003D                     	ds	1
  3430  003E                     ?___ftadd:	
  3431  003E                     ___ftadd@f1:	
  3432                           ; 3 bytes @ 0x1E
  3433                           
  3434                           
  3435                           ; 3 bytes @ 0x1E
  3436  003E                     	ds	3
  3437  0041                     ___ftadd@f2:	
  3438                           
  3439                           ; 3 bytes @ 0x21
  3440  0041                     	ds	3
  3441  0044                     ??___ftadd:	
  3442                           
  3443                           ; 0 bytes @ 0x24
  3444  0044                     	ds	4
  3445  0048                     ___ftadd@sign:	
  3446                           
  3447                           ; 1 bytes @ 0x28
  3448  0048                     	ds	1
  3449  0049                     ___ftadd@exp2:	
  3450                           
  3451                           ; 1 bytes @ 0x29
  3452  0049                     	ds	1
  3453  004A                     ___ftadd@exp1:	
  3454                           
  3455                           ; 1 bytes @ 0x2A
  3456  004A                     	ds	1
  3457  004B                     ?___fttol:	
  3458  004B                     ___fttol@f1:	
  3459                           ; 4 bytes @ 0x2B
  3460                           
  3461                           
  3462                           ; 3 bytes @ 0x2B
  3463  004B                     	ds	4
  3464  004F                     ??___fttol:	
  3465                           
  3466                           ; 0 bytes @ 0x2F
  3467  004F                     	ds	4
  3468  0053                     ___fttol@sign1:	
  3469                           
  3470                           ; 1 bytes @ 0x33
  3471  0053                     	ds	1
  3472  0054                     ___fttol@lval:	
  3473                           
  3474                           ; 4 bytes @ 0x34
  3475  0054                     	ds	4
  3476  0058                     ___fttol@exp1:	
  3477                           
  3478                           ; 1 bytes @ 0x38
  3479  0058                     	ds	1
  3480  0059                     ??_setPercentValue:	
  3481  0059                     ??_getPercentValue:	
  3482                           ; 0 bytes @ 0x39
  3483                           
  3484  0059                     setPercentValue@value:	
  3485                           ; 0 bytes @ 0x39
  3486                           
  3487                           
  3488                           ; 1 bytes @ 0x39
  3489  0059                     	ds	1
  3490  005A                     setPercentValue@i:	
  3491                           
  3492                           ; 3 bytes @ 0x3A
  3493  005A                     	ds	1
  3494  005B                     getPercentValue@value:	
  3495                           
  3496                           ; 1 bytes @ 0x3B
  3497  005B                     	ds	1
  3498  005C                     getPercentValue@i:	
  3499                           
  3500                           ; 3 bytes @ 0x3C
  3501  005C                     	ds	1
  3502  005D                     ?_setProductData:	
  3503  005D                     ??_Flash_Memory_Initialization:	
  3504                           ; 0 bytes @ 0x3D
  3505                           
  3506  005D                     setProductData@value:	
  3507                           ; 0 bytes @ 0x3D
  3508                           
  3509                           
  3510                           ; 1 bytes @ 0x3D
  3511  005D                     	ds	1
  3512  005E                     ??_setProductData:	
  3513  005E                     Flash_Memory_Initialization@i:	
  3514                           ; 0 bytes @ 0x3E
  3515                           
  3516                           
  3517                           ; 1 bytes @ 0x3E
  3518  005E                     	ds	1
  3519  005F                     ??_setDimmerLights_AdjRF:	
  3520                           
  3521                           ; 0 bytes @ 0x3F
  3522  005F                     	ds	1
  3523  0060                     setDimmerLights_AdjRF@lights:	
  3524  0060                     setProductData@address:	
  3525                           ; 1 bytes @ 0x40
  3526                           
  3527                           
  3528                           ; 1 bytes @ 0x40
  3529  0060                     	ds	1
  3530  0061                     ?_setRF_DimmerLights:	
  3531  0061                     ??_setTemp_Main:	
  3532                           ; 0 bytes @ 0x41
  3533                           
  3534  0061                     ??_setLog_Code:	
  3535                           ; 0 bytes @ 0x41
  3536                           
  3537  0061                     ??_setRF_DimmerValue:	
  3538                           ; 0 bytes @ 0x41
  3539                           
  3540  0061                     ?_setDelayOff_GO:	
  3541                           ; 0 bytes @ 0x41
  3542                           
  3543  0061                     setDelayOff_GO@command:	
  3544                           ; 0 bytes @ 0x41
  3545                           
  3546  0061                     setRF_DimmerLights@on:	
  3547                           ; 1 bytes @ 0x41
  3548                           
  3549                           
  3550                           ; 1 bytes @ 0x41
  3551  0061                     	ds	1
  3552  0062                     ??_setRF_DimmerLights:	
  3553  0062                     setDelayOff_GO@value:	
  3554                           ; 0 bytes @ 0x42
  3555                           
  3556  0062                     setRF_DimmerValue@lights:	
  3557                           ; 1 bytes @ 0x42
  3558                           
  3559                           
  3560                           ; 1 bytes @ 0x42
  3561  0062                     	ds	1
  3562  0063                     ??_setRFSW_AdjControl:	
  3563  0063                     ??_setDelayOff_GO:	
  3564                           ; 0 bytes @ 0x43
  3565                           
  3566  0063                     setTemp_Main@error:	
  3567                           ; 0 bytes @ 0x43
  3568                           
  3569                           
  3570                           ; 1 bytes @ 0x43
  3571  0063                     	ds	1
  3572  0064                     ??_Temp_Main:	
  3573  0064                     setDelayOff_GO@sw:	
  3574                           ; 0 bytes @ 0x44
  3575                           
  3576  0064                     setRF_DimmerLights@status:	
  3577                           ; 1 bytes @ 0x44
  3578                           
  3579                           
  3580                           ; 1 bytes @ 0x44
  3581  0064                     	ds	1
  3582  0065                     ??_setDimmerLights_SwOff:	
  3583  0065                     setDimmerLights_SwOff@sw:	
  3584                           ; 0 bytes @ 0x45
  3585                           
  3586  0065                     setRFSW_AdjControl@status:	
  3587                           ; 1 bytes @ 0x45
  3588                           
  3589  0065                     setRF_DimmerLights@lights:	
  3590                           ; 1 bytes @ 0x45
  3591                           
  3592                           
  3593                           ; 1 bytes @ 0x45
  3594  0065                     	ds	1
  3595  0066                     ??_setDimmerLights_ErrorClose:	
  3596  0066                     ?_setDimmerLights:	
  3597                           ; 0 bytes @ 0x46
  3598                           
  3599  0066                     ?_setDimmerLights_Adj:	
  3600                           ; 0 bytes @ 0x46
  3601                           
  3602  0066                     ??_Exception_Main:	
  3603                           ; 0 bytes @ 0x46
  3604                           
  3605  0066                     ??_setRFSW_Control:	
  3606                           ; 0 bytes @ 0x46
  3607                           
  3608  0066                     ??_setSw_Main:	
  3609                           ; 0 bytes @ 0x46
  3610                           
  3611  0066                     setDimmerLights@status:	
  3612                           ; 0 bytes @ 0x46
  3613                           
  3614  0066                     setDimmerLights_Adj@status:	
  3615                           ; 1 bytes @ 0x46
  3616                           
  3617  0066                     setRFSW_AdjControl@sw:	
  3618                           ; 1 bytes @ 0x46
  3619                           
  3620                           
  3621                           ; 1 bytes @ 0x46
  3622  0066                     	ds	1
  3623  0067                     ??_setDimmerLights:	
  3624  0067                     ??_setDimmerLights_Adj:	
  3625                           ; 0 bytes @ 0x47
  3626                           
  3627  0067                     setDimmerLights_ErrorClose@count:	
  3628                           ; 0 bytes @ 0x47
  3629                           
  3630  0067                     Exception_Main@count:	
  3631                           ; 1 bytes @ 0x47
  3632                           
  3633  0067                     setRFSW_Control@status:	
  3634                           ; 1 bytes @ 0x47
  3635                           
  3636                           
  3637                           ; 1 bytes @ 0x47
  3638  0067                     	ds	1
  3639  0068                     setDimmerLights@lights:	
  3640  0068                     setDimmerLights_Adj@lights:	
  3641                           ; 1 bytes @ 0x48
  3642                           
  3643  0068                     setDimmerLights_ErrorClose@lights:	
  3644                           ; 1 bytes @ 0x48
  3645                           
  3646  0068                     Exception_Main@error:	
  3647                           ; 1 bytes @ 0x48
  3648                           
  3649  0068                     setRFSW_Control@sw:	
  3650                           ; 1 bytes @ 0x48
  3651                           
  3652  0068                     setSw_Main@sw:	
  3653                           ; 1 bytes @ 0x48
  3654                           
  3655                           
  3656                           ; 1 bytes @ 0x48
  3657  0068                     	ds	1
  3658  0069                     ??_setDimmerLights_Main:	
  3659  0069                     ??_Switch_Main:	
  3660                           ; 0 bytes @ 0x49
  3661                           
  3662  0069                     setDimmerLights_Main@lights:	
  3663                           ; 0 bytes @ 0x49
  3664                           
  3665  0069                     setDimmerLights_ErrorClose@i:	
  3666                           ; 1 bytes @ 0x49
  3667                           
  3668  0069                     Exception_Main@i:	
  3669                           ; 2 bytes @ 0x49
  3670                           
  3671                           
  3672                           ; 2 bytes @ 0x49
  3673  0069                     	ds	1
  3674  006A                     ??_DimmerLights_Main:	
  3675                           
  3676                           ; 0 bytes @ 0x4A
  3677  006A                     	ds	1
  3678  006B                     ??_DlyOff_Main:	
  3679  006B                     ??_getRxData:	
  3680                           ; 0 bytes @ 0x4B
  3681                           
  3682  006B                     ??_setControl_Lights_Table:	
  3683                           ; 0 bytes @ 0x4B
  3684                           
  3685  006B                     Exception_Main@i_3354:	
  3686                           ; 0 bytes @ 0x4B
  3687                           
  3688                           
  3689                           ; 2 bytes @ 0x4B
  3690  006B                     	ds	1
  3691  006C                     getRxData@error:	
  3692                           
  3693                           ; 1 bytes @ 0x4C
  3694  006C                     	ds	1
  3695  006D                     ??_setRF_Main:	
  3696  006D                     DlyOff_Main@sw:	
  3697                           ; 0 bytes @ 0x4D
  3698                           
  3699  006D                     Exception_Main@lights:	
  3700                           ; 1 bytes @ 0x4D
  3701                           
  3702                           
  3703                           ; 1 bytes @ 0x4D
  3704  006D                     	ds	1
  3705  006E                     ??_RF_Main:	
  3706  006E                     ??_DelayOff_Main:	
  3707                           ; 0 bytes @ 0x4E
  3708                           
  3709  006E                     ??_main:	
  3710                           ; 0 bytes @ 0x4E
  3711                           
  3712                           
  3713                           	psect	maintext
  3714  082C                     __pmaintext:	
  3715                           ; 0 bytes @ 0x4E
  3716 ;;
  3717 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3718 ;;
  3719 ;; *************** function _main *****************
  3720 ;; Defined at:
  3721 ;;		line 7 in file "../src/Main_B1.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;  argc            2    0[BANK3 ] int 
  3724 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  2    0[BANK3 ] int 
  3729 ;; Registers used:
  3730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 17F/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3736 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3739 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3740 ;;Total ram usage:        4 bytes
  3741 ;; Hardware stack levels required when called:   14
  3742 ;; This function calls:
  3743 ;;		_Buzzer_Initialization
  3744 ;;		_Buzzer_Main
  3745 ;;		_CC2500_PowerOnInitial
  3746 ;;		_DelayOff_Initialization
  3747 ;;		_DelayOff_Main
  3748 ;;		_DimmerLights_Initialization
  3749 ;;		_DimmerLights_Main
  3750 ;;		_Exception_Main
  3751 ;;		_Flash_Memory_Initialization
  3752 ;;		_Flash_Memory_Main
  3753 ;;		_LED_Initialization
  3754 ;;		_LED_Main
  3755 ;;		_Mcu_Initialization
  3756 ;;		_RF_Initialization
  3757 ;;		_RF_Main
  3758 ;;		_Switch_Initialization
  3759 ;;		_Switch_Main
  3760 ;;		_Temp_Initialization
  3761 ;;		_Temp_Main
  3762 ;;		_WDT_Main
  3763 ;;		_getTemp_AD
  3764 ;;		_myMain_Initialization
  3765 ;;		_my_MainTimer
  3766 ;; This function is called by:
  3767 ;;		Startup code after reset
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           
  3772                           ;psect for function _main
  3773  082C                     _main:	
  3774                           
  3775                           ;Main_B1.c: 8: myMain_Initialization();
  3776                           
  3777                           ;incstack = 0
  3778                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3779  082C  319E  26CD  3188   	fcall	_myMain_Initialization
  3780                           
  3781                           ;Main_B1.c: 9: Mcu_Initialization();
  3782  082F  319F  2742  3188   	fcall	_Mcu_Initialization
  3783                           
  3784                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3785  0832  3184  2448  3188   	fcall	_Flash_Memory_Initialization
  3786                           
  3787                           ;Main_B1.c: 11: LED_Initialization();
  3788  0835  319E  2666  3188   	fcall	_LED_Initialization
  3789                           
  3790                           ;Main_B1.c: 12: Buzzer_Initialization();
  3791  0838  319D  25CB  3188   	fcall	_Buzzer_Initialization
  3792                           
  3793                           ;Main_B1.c: 14: ;;
  3794                           ;Main_B1.c: 15: Temp_Initialization();
  3795  083B  319D  25D4  3188   	fcall	_Temp_Initialization
  3796                           
  3797                           ;Main_B1.c: 16: ;;
  3798                           ;Main_B1.c: 17: ;;
  3799                           ;Main_B1.c: 18: DelayOff_Initialization();
  3800  083E  319E  260C  3188   	fcall	_DelayOff_Initialization
  3801                           
  3802                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3803  0841  319F  27EC  3188   	fcall	_DimmerLights_Initialization
  3804                           
  3805                           ;Main_B1.c: 21: ;;
  3806                           ;Main_B1.c: 22: ;;
  3807                           ;Main_B1.c: 23: ;;
  3808                           ;Main_B1.c: 24: Switch_Initialization();
  3809  0844  3187  27F3  3188   	fcall	_Switch_Initialization
  3810                           
  3811                           ;Main_B1.c: 25: RF_Initialization();
  3812  0847  319D  25CE  3188   	fcall	_RF_Initialization
  3813                           
  3814                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3815  084A  3190  20D4  3188   	fcall	_CC2500_PowerOnInitial
  3816  084D                     l9831:	
  3817                           ;Main_B1.c: 27: ;;
  3818                           ;Main_B1.c: 28: ;;
  3819                           ;Main_B1.c: 30: while (1) {
  3820                           
  3821                           
  3822                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  3823  084D  0021               	movlb	1	; select bank1
  3824  084E  1C2E               	btfss	_myMain^(0+128),0
  3825  084F  2854               	goto	l9835
  3826                           
  3827                           ;Main_B1.c: 42: getTemp_AD(0x09);
  3828  0850  3009               	movlw	9
  3829  0851  3195  2570  3188   	fcall	_getTemp_AD
  3830  0854                     l9835:	
  3831                           
  3832                           ;Main_B1.c: 57: }
  3833                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  3834  0854  0022               	movlb	2	; select bank2
  3835  0855  1C3E               	btfss	_Timer1^(0+256),0
  3836  0856  284D               	goto	l9831
  3837                           
  3838                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  3839  0857  103E               	bcf	_Timer1^(0+256),0
  3840                           
  3841                           ;Main_B1.c: 96: my_MainTimer();
  3842  0858  3194  24B8  3188   	fcall	_my_MainTimer
  3843                           
  3844                           ;Main_B1.c: 97: WDT_Main();
  3845  085B  319F  2754  3188   	fcall	_WDT_Main
  3846                           
  3847                           ;Main_B1.c: 98: ;;
  3848                           ;Main_B1.c: 99: ;;
  3849                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  3850  085E  0021               	movlb	1	; select bank1
  3851  085F  1C2E               	btfss	_myMain^(0+128),0
  3852  0860  284D               	goto	l9831
  3853                           
  3854                           ;Main_B1.c: 101: Flash_Memory_Main();
  3855  0861  3194  2482  3188   	fcall	_Flash_Memory_Main
  3856                           
  3857                           ;Main_B1.c: 103: LED_Main();
  3858  0864  319E  2672  3188   	fcall	_LED_Main
  3859                           
  3860                           ;Main_B1.c: 104: Buzzer_Main();
  3861  0867  3196  267A  3188   	fcall	_Buzzer_Main
  3862                           
  3863                           ;Main_B1.c: 106: ;;
  3864                           ;Main_B1.c: 107: Temp_Main();
  3865  086A  319D  25D7  3188   	fcall	_Temp_Main
  3866                           
  3867                           ;Main_B1.c: 108: ;;
  3868                           ;Main_B1.c: 109: ;;
  3869                           ;Main_B1.c: 111: ;;
  3870                           ;Main_B1.c: 112: DimmerLights_Main();
  3871  086D  319E  261C  3188   	fcall	_DimmerLights_Main
  3872                           
  3873                           ;Main_B1.c: 113: Switch_Main();
  3874  0870  319E  2643  3188   	fcall	_Switch_Main
  3875                           
  3876                           ;Main_B1.c: 114: ;;
  3877                           ;Main_B1.c: 115: ;;
  3878                           ;Main_B1.c: 117: RF_Main();
  3879  0873  319D  25D1  3188   	fcall	_RF_Main
  3880                           
  3881                           ;Main_B1.c: 118: DelayOff_Main();
  3882  0876  319E  2614  3188   	fcall	_DelayOff_Main
  3883                           
  3884                           ;Main_B1.c: 119: ;;
  3885                           ;Main_B1.c: 120: ;;
  3886                           ;Main_B1.c: 121: Exception_Main();
  3887  0879  3185  2524  3188   	fcall	_Exception_Main
  3888  087C  284D               	goto	l9831
  3889  087D                     __end_of_main:	
  3890                           ;Main_B1.c: 128: }
  3891                           ;Main_B1.c: 129: }
  3892                           ;Main_B1.c: 163: }
  3893                           ;Main_B1.c: 164: return (0);
  3894                           ;	Return value of _main is never used
  3895                           
  3896                           
  3897                           	psect	text1
  3898  14B8                     __ptext1:	
  3899 ;; *************** function _my_MainTimer *****************
  3900 ;; Defined at:
  3901 ;;		line 185 in file "../src/Main_B1.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;		None
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;		None
  3906 ;; Return value:  Size  Location     Type
  3907 ;;		None               void
  3908 ;; Registers used:
  3909 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3918 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3919 ;;Total ram usage:        1 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    6
  3922 ;; This function calls:
  3923 ;;		_setBuz
  3924 ;; This function is called by:
  3925 ;;		_main
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           
  3930                           ;psect for function _my_MainTimer
  3931  14B8                     _my_MainTimer:	
  3932                           
  3933                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  3934                           
  3935                           ;incstack = 0
  3936                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3937  14B8  0021               	movlb	1	; select bank1
  3938  14B9  182E               	btfsc	_myMain^(0+128),0
  3939  14BA  2CD2               	goto	l9673
  3940                           
  3941                           ;Main_B1.c: 189: myMain.PowerCount++;
  3942  14BB  3001               	movlw	1
  3943  14BC  0020               	movlb	0	; select bank0
  3944  14BD  00AD               	movwf	??_my_MainTimer
  3945  14BE  082D               	movf	??_my_MainTimer,w
  3946  14BF  0021               	movlb	1	; select bank1
  3947  14C0  07AF               	addwf	(_myMain^(0+128)+1),f
  3948                           
  3949                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  3950  14C1  082F               	movf	(_myMain^(0+128)+1),w
  3951  14C2  3A96               	xorlw	150
  3952  14C3  1D03               	skipz
  3953  14C4  0008               	return
  3954                           
  3955                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  3956  14C5  01AF               	clrf	(_myMain^(0+128)+1)
  3957                           
  3958                           ;Main_B1.c: 192: myMain.PowerON = 1;
  3959  14C6  142E               	bsf	_myMain^(0+128),0
  3960                           
  3961                           ;Main_B1.c: 197: setBuz(3, 50);
  3962  14C7  3032               	movlw	50
  3963  14C8  0020               	movlb	0	; select bank0
  3964  14C9  00A9               	movwf	setBuz@time
  3965  14CA  3000               	movlw	0
  3966  14CB  00AA               	movwf	setBuz@time+1
  3967  14CC  3003               	movlw	3
  3968  14CD  3189  217C         	fcall	_setBuz
  3969                           
  3970                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  3971  14CF  0021               	movlb	1	; select bank1
  3972  14D0  162E               	bsf	_myMain^(0+128),4
  3973                           
  3974                           ;Main_B1.c: 207: }
  3975                           ;Main_B1.c: 208: } else {
  3976  14D1  0008               	return
  3977  14D2                     l9673:	
  3978                           
  3979                           ;Main_B1.c: 209: myMain.PowerCount++;
  3980  14D2  3001               	movlw	1
  3981  14D3  0020               	movlb	0	; select bank0
  3982  14D4  00AD               	movwf	??_my_MainTimer
  3983  14D5  082D               	movf	??_my_MainTimer,w
  3984  14D6  0021               	movlb	1	; select bank1
  3985  14D7  07AF               	addwf	(_myMain^(0+128)+1),f
  3986                           
  3987                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  3988  14D8  082F               	movf	(_myMain^(0+128)+1),w
  3989  14D9  3A64               	xorlw	100
  3990  14DA  1903               	btfsc	3,2
  3991                           
  3992                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  3993  14DB  01AF               	clrf	(_myMain^(0+128)+1)
  3994                           
  3995                           ;Main_B1.c: 226: }
  3996                           ;Main_B1.c: 228: myMain.Count1++;
  3997  14DC  3001               	movlw	1
  3998  14DD  07B2               	addwf	(_myMain^(0+128)+4),f
  3999  14DE  3000               	movlw	0
  4000  14DF  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4001                           
  4002                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4003  14E0  3004               	movlw	4
  4004  14E1  3EAE               	addlw	_myMain& (0+255)
  4005  14E2  0086               	movwf	6
  4006  14E3  0187               	clrf	7
  4007  14E4  3F40               	moviw [0]fsr1
  4008  14E5  3A64               	xorlw	100
  4009  14E6  1D03               	skipz
  4010  14E7  2CEA               	goto	u10825
  4011  14E8  3F41               	moviw [1]fsr1
  4012  14E9  3A00               	xorlw	0
  4013  14EA                     u10825:	
  4014  14EA  1D03               	skipz
  4015  14EB  0008               	return
  4016                           
  4017                           ;Main_B1.c: 230: {
  4018                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4019  14EC  01B2               	clrf	(_myMain^(0+128)+4)
  4020  14ED  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4021                           
  4022                           ;Main_B1.c: 243: if (myMain.Flag) {
  4023  14EE  1CAE               	btfss	_myMain^(0+128),1
  4024  14EF  2CF2               	goto	l1522
  4025                           
  4026                           ;Main_B1.c: 244: myMain.Flag = 0;
  4027  14F0  10AE               	bcf	_myMain^(0+128),1
  4028                           
  4029                           ;Main_B1.c: 253: } else {
  4030  14F1  0008               	return
  4031  14F2                     l1522:	
  4032                           
  4033                           ;Main_B1.c: 254: myMain.Flag = 1;
  4034  14F2  14AE               	bsf	_myMain^(0+128),1
  4035  14F3  0008               	return
  4036  14F4                     __end_of_my_MainTimer:	
  4037                           
  4038                           	psect	text2
  4039  1ECD                     __ptext2:	
  4040 ;; *************** function _myMain_Initialization *****************
  4041 ;; Defined at:
  4042 ;;		line 170 in file "../src/Main_B1.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;		None
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;		None               void
  4049 ;; Registers used:
  4050 ;;		wreg, fsr1l, fsr1h
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4060 ;;Total ram usage:        1 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    4
  4063 ;; This function calls:
  4064 ;;		Nothing
  4065 ;; This function is called by:
  4066 ;;		_main
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           
  4071                           ;psect for function _myMain_Initialization
  4072  1ECD                     _myMain_Initialization:	
  4073                           
  4074                           ;Main_B1.c: 173: product = &_product;
  4075                           
  4076                           ;incstack = 0
  4077                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4078  1ECD  3020               	movlw	__product& (0+255)
  4079  1ECE  0020               	movlb	0	; select bank0
  4080  1ECF  00A0               	movwf	??_myMain_Initialization
  4081  1ED0  0820               	movf	??_myMain_Initialization,w
  4082  1ED1  00EE               	movwf	_product
  4083                           
  4084                           ;Main_B1.c: 174: product->Data[20] = 210;
  4085  1ED2  30D2               	movlw	210
  4086  1ED3  00A0               	movwf	??_myMain_Initialization
  4087  1ED4  086E               	movf	_product,w
  4088  1ED5  3E14               	addlw	20
  4089  1ED6  0086               	movwf	6
  4090  1ED7  3002               	movlw	2	; select bank4/5
  4091  1ED8  0087               	movwf	7
  4092  1ED9  0820               	movf	??_myMain_Initialization,w
  4093  1EDA  0081               	movwf	1
  4094  1EDB  0008               	return
  4095  1EDC                     __end_of_myMain_Initialization:	
  4096                           
  4097                           	psect	text3
  4098  1570                     __ptext3:	
  4099 ;; *************** function _getTemp_AD *****************
  4100 ;; Defined at:
  4101 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;  channel         1    wreg     unsigned char 
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;  channel         1    5[BANK0 ] unsigned char 
  4106 ;; Return value:  Size  Location     Type
  4107 ;;		None               void
  4108 ;; Registers used:
  4109 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4116 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4117 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4118 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4119 ;;Total ram usage:        2 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    6
  4122 ;; This function calls:
  4123 ;;		_getAD
  4124 ;; This function is called by:
  4125 ;;		_main
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           
  4130                           ;psect for function _getTemp_AD
  4131  1570                     _getTemp_AD:	
  4132                           
  4133                           ;incstack = 0
  4134                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4135                           ;getTemp_AD@channel stored from wreg
  4136  1570  0020               	movlb	0	; select bank0
  4137  1571  00A5               	movwf	getTemp_AD@channel
  4138                           
  4139                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4140  1572  0021               	movlb	1	; select bank1
  4141  1573  1D5A               	btfss	_Temp^(0+128),2
  4142  1574  0008               	return
  4143                           
  4144                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4145  1575  30F0               	movlw	240
  4146  1576  0020               	movlb	0	; select bank0
  4147  1577  00A4               	movwf	??_getTemp_AD
  4148  1578  0824               	movf	??_getTemp_AD,w
  4149  1579  00A0               	movwf	getAD@adcon1
  4150  157A  0825               	movf	getTemp_AD@channel,w
  4151  157B  3192  2204  3195   	fcall	_getAD
  4152  157E  0020               	movlb	0	; select bank0
  4153  157F  0821               	movf	?_getAD+1,w
  4154  1580  0021               	movlb	1	; select bank1
  4155  1581  01E7               	clrf	((_Temp+1)^(0+128)+12)
  4156  1582  07E7               	addwf	((_Temp+1)^(0+128)+12),f
  4157  1583  0020               	movlb	0	; select bank0
  4158  1584  0820               	movf	?_getAD,w
  4159  1585  0021               	movlb	1	; select bank1
  4160  1586  01E6               	clrf	(_Temp^(0+128)+12)
  4161  1587  07E6               	addwf	(_Temp^(0+128)+12),f
  4162                           
  4163                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4164  1588  300C               	movlw	12
  4165  1589  3EDA               	addlw	_Temp& (0+255)
  4166  158A  0086               	movwf	6
  4167  158B  0187               	clrf	7
  4168  158C  0016               	moviw fsr1++
  4169  158D  0401               	iorwf	1,w
  4170  158E  1903               	skipnz
  4171  158F  0008               	return
  4172                           
  4173                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4174  1590  0867               	movf	((_Temp+1)^(0+128)+12),w
  4175  1591  0263               	subwf	((_Temp+1)^(0+128)+8),w
  4176  1592  1D03               	skipz
  4177  1593  2D96               	goto	u10775
  4178  1594  0866               	movf	(_Temp^(0+128)+12),w
  4179  1595  0262               	subwf	(_Temp^(0+128)+8),w
  4180  1596                     u10775:	
  4181  1596  1803               	skipnc
  4182  1597  2D9F               	goto	l9655
  4183                           
  4184                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4185  1598  0867               	movf	((_Temp+1)^(0+128)+12),w
  4186  1599  01E3               	clrf	((_Temp+1)^(0+128)+8)
  4187  159A  07E3               	addwf	((_Temp+1)^(0+128)+8),f
  4188  159B  0866               	movf	(_Temp^(0+128)+12),w
  4189  159C  01E2               	clrf	(_Temp^(0+128)+8)
  4190  159D  07E2               	addwf	(_Temp^(0+128)+8),f
  4191                           
  4192                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4193  159E  0008               	return
  4194  159F                     l9655:	
  4195  159F  0867               	movf	((_Temp+1)^(0+128)+12),w
  4196  15A0  0265               	subwf	((_Temp+1)^(0+128)+10),w
  4197  15A1  1D03               	skipz
  4198  15A2  2DA5               	goto	u10785
  4199  15A3  0866               	movf	(_Temp^(0+128)+12),w
  4200  15A4  0264               	subwf	(_Temp^(0+128)+10),w
  4201  15A5                     u10785:	
  4202  15A5  1803               	skipnc
  4203  15A6  0008               	return
  4204                           
  4205                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4206  15A7  0867               	movf	((_Temp+1)^(0+128)+12),w
  4207  15A8  01E5               	clrf	((_Temp+1)^(0+128)+10)
  4208  15A9  07E5               	addwf	((_Temp+1)^(0+128)+10),f
  4209  15AA  0866               	movf	(_Temp^(0+128)+12),w
  4210  15AB  01E4               	clrf	(_Temp^(0+128)+10)
  4211  15AC  07E4               	addwf	(_Temp^(0+128)+10),f
  4212  15AD  0008               	return
  4213  15AE                     __end_of_getTemp_AD:	
  4214                           
  4215                           	psect	text4
  4216  1204                     __ptext4:	
  4217 ;; *************** function _getAD *****************
  4218 ;; Defined at:
  4219 ;;		line 460 in file "../src/MCU_B1.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;  adcon0          1    wreg     unsigned char 
  4222 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  2    0[BANK0 ] int 
  4227 ;; Registers used:
  4228 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4234 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4235 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4237 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4238 ;;Total ram usage:        4 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    5
  4241 ;; This function calls:
  4242 ;;		_Timeout_Counter
  4243 ;;		_set_TimeoutCleared
  4244 ;; This function is called by:
  4245 ;;		_getTemp_AD
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           
  4249                           
  4250                           ;psect for function _getAD
  4251  1204                     _getAD:	
  4252                           
  4253                           ;incstack = 0
  4254                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4255                           ;getAD@adcon0 stored from wreg
  4256  1204  0020               	movlb	0	; select bank0
  4257  1205  00A3               	movwf	getAD@adcon0
  4258                           
  4259                           ;MCU_B1.c: 461: ADCON0 = adcon0;
  4260  1206  0823               	movf	getAD@adcon0,w
  4261  1207  0021               	movlb	1	; select bank1
  4262  1208  009D               	movwf	29	;volatile
  4263                           
  4264                           ;MCU_B1.c: 462: ADCON1 = adcon1;
  4265  1209  0020               	movlb	0	; select bank0
  4266  120A  0820               	movf	getAD@adcon1,w
  4267  120B  0021               	movlb	1	; select bank1
  4268  120C  009E               	movwf	30	;volatile
  4269                           
  4270                           ;MCU_B1.c: 463: GO_nDONE = 1;
  4271  120D  149D               	bsf	29,1	;volatile
  4272                           
  4273                           ;MCU_B1.c: 464: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4274  120E  2A12               	goto	l9229
  4275  120F                     l9227:	
  4276                           
  4277                           ;MCU_B1.c: 465: Timeout_Counter();
  4278  120F  3190  20E9  3192   	fcall	_Timeout_Counter
  4279  1212                     l9229:	
  4280  1212  0021               	movlb	1	; select bank1
  4281  1213  1C9D               	btfss	29,1	;volatile
  4282  1214  2A17               	goto	l9233
  4283  1215  1D39               	btfss	(_myMain^(0+128)+11),2
  4284  1216  2A0F               	goto	l9227
  4285  1217                     l9233:	
  4286                           
  4287                           ;MCU_B1.c: 466: };
  4288                           ;MCU_B1.c: 467: set_TimeoutCleared();
  4289  1217  319D  25EE         	fcall	_set_TimeoutCleared
  4290                           
  4291                           ;MCU_B1.c: 468: return ((ADRESH*256)+ADRESL);
  4292  1219  0021               	movlb	1	; select bank1
  4293  121A  081C               	movf	28,w	;volatile
  4294  121B  0020               	movlb	0	; select bank0
  4295  121C  01A1               	clrf	?_getAD+1
  4296  121D  07A1               	addwf	?_getAD+1,f
  4297  121E  0021               	movlb	1	; select bank1
  4298  121F  081B               	movf	27,w	;volatile
  4299  1220  0020               	movlb	0	; select bank0
  4300  1221  01A0               	clrf	?_getAD
  4301  1222  07A0               	addwf	?_getAD,f
  4302  1223  0008               	return
  4303  1224                     __end_of_getAD:	
  4304                           
  4305                           	psect	text5
  4306  1F54                     __ptext5:	
  4307 ;; *************** function _WDT_Main *****************
  4308 ;; Defined at:
  4309 ;;		line 1104 in file "../src/MCU_B1.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;		None
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;		None
  4314 ;; Return value:  Size  Location     Type
  4315 ;;		None               void
  4316 ;; Registers used:
  4317 ;;		wreg, status,2, status,0, pclath, cstack
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4326 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4327 ;;Total ram usage:        1 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; Hardware stack levels required when called:    5
  4330 ;; This function calls:
  4331 ;;		_WDT_Clearing
  4332 ;; This function is called by:
  4333 ;;		_main
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           
  4338                           ;psect for function _WDT_Main
  4339  1F54                     _WDT_Main:	
  4340                           
  4341                           ;MCU_B1.c: 1105: if (WDT.Enable == 1) {
  4342                           
  4343                           ;incstack = 0
  4344                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4345  1F54  0021               	movlb	1	; select bank1
  4346  1F55  1C4D               	btfss	_WDT^(0+128),0
  4347  1F56  0008               	return
  4348                           
  4349                           ;MCU_B1.c: 1106: if (WDT.Timer-- > 0) {
  4350  1F57  3001               	movlw	1
  4351  1F58  02CE               	subwf	(_WDT^(0+128)+1),f
  4352  1F59  084E               	movf	(_WDT^(0+128)+1),w
  4353  1F5A  3AFF               	xorlw	255
  4354  1F5B  1903               	skipnz
  4355  1F5C  0008               	return
  4356                           
  4357                           ;MCU_B1.c: 1107: WDT.Timer = 100;
  4358  1F5D  3064               	movlw	100
  4359  1F5E  0020               	movlb	0	; select bank0
  4360  1F5F  00A0               	movwf	??_WDT_Main
  4361  1F60  0820               	movf	??_WDT_Main,w
  4362  1F61  0021               	movlb	1	; select bank1
  4363  1F62  00CE               	movwf	(_WDT^(0+128)+1)
  4364                           
  4365                           ;MCU_B1.c: 1108: WDT_Clearing();
  4366  1F63  3180  2002         	fcall	_WDT_Clearing
  4367  1F65  0008               	return
  4368  1F66                     __end_of_WDT_Main:	
  4369                           
  4370                           	psect	text6
  4371  0002                     __ptext6:	
  4372 ;; *************** function _WDT_Clearing *****************
  4373 ;; Defined at:
  4374 ;;		line 1114 in file "../src/MCU_B1.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;		None
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;		None
  4379 ;; Return value:  Size  Location     Type
  4380 ;;		None               void
  4381 ;; Registers used:
  4382 ;;		None
  4383 ;; Tracked objects:
  4384 ;;		On entry : 0/0
  4385 ;;		On exit  : 0/0
  4386 ;;		Unchanged: 0/0
  4387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4392 ;;Total ram usage:        0 bytes
  4393 ;; Hardware stack levels used:    1
  4394 ;; Hardware stack levels required when called:    4
  4395 ;; This function calls:
  4396 ;;		Nothing
  4397 ;; This function is called by:
  4398 ;;		_WDT_Main
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           
  4403                           ;psect for function _WDT_Clearing
  4404  0002                     _WDT_Clearing:	
  4405                           
  4406                           ;incstack = 0
  4407                           ; Regs used in _WDT_Clearing: []
  4408  0002  0064               	clrwdt	;# 
  4409  0003  0008               	return
  4410  0004                     __end_of_WDT_Clearing:	
  4411                           
  4412                           	psect	text7
  4413  1DD7                     __ptext7:	
  4414 ;; *************** function _Temp_Main *****************
  4415 ;; Defined at:
  4416 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4417 ;; Parameters:    Size  Location     Type
  4418 ;;		None
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;		None
  4421 ;; Return value:  Size  Location     Type
  4422 ;;		None               void
  4423 ;; Registers used:
  4424 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4434 ;;Total ram usage:        0 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    7
  4437 ;; This function calls:
  4438 ;;		_setTemp_Main
  4439 ;; This function is called by:
  4440 ;;		_main
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           
  4445                           ;psect for function _Temp_Main
  4446  1DD7                     _Temp_Main:	
  4447                           
  4448                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4449                           
  4450                           ;incstack = 0
  4451                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4452  1DD7  318F  2750         	fcall	_setTemp_Main
  4453  1DD9  0008               	return
  4454  1DDA                     __end_of_Temp_Main:	
  4455                           
  4456                           	psect	text8
  4457  0F50                     __ptext8:	
  4458 ;; *************** function _setTemp_Main *****************
  4459 ;; Defined at:
  4460 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;		None
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;  error           1   67[BANK0 ] unsigned char 
  4465 ;; Return value:  Size  Location     Type
  4466 ;;		None               void
  4467 ;; Registers used:
  4468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4476 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4478 ;;Total ram usage:        3 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    6
  4481 ;; This function calls:
  4482 ;;		_getMain_All_Error_Status
  4483 ;;		_setBuz
  4484 ;;		_setProductData
  4485 ;; This function is called by:
  4486 ;;		_Temp_Main
  4487 ;; This function uses a non-reentrant model
  4488 ;;
  4489                           
  4490                           
  4491                           ;psect for function _setTemp_Main
  4492  0F50                     _setTemp_Main:	
  4493                           
  4494                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4495                           
  4496                           ;incstack = 0
  4497                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4498  0F50  3000               	movlw	0
  4499  0F51  3191  21AA  318F   	fcall	_getMain_All_Error_Status
  4500  0F54  0020               	movlb	0	; select bank0
  4501  0F55  00E1               	movwf	??_setTemp_Main
  4502  0F56  0861               	movf	??_setTemp_Main,w
  4503  0F57  00E3               	movwf	setTemp_Main@error
  4504                           
  4505                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4506  0F58  0021               	movlb	1	; select bank1
  4507  0F59  1C5A               	btfss	_Temp^(0+128),0
  4508  0F5A  2FFC               	goto	l1777
  4509                           
  4510                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4511  0F5B  195A               	btfsc	_Temp^(0+128),2
  4512  0F5C  2F6C               	goto	l9277
  4513                           
  4514                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4515  0F5D  3001               	movlw	1
  4516  0F5E  07DB               	addwf	(_Temp^(0+128)+1),f
  4517  0F5F  3000               	movlw	0
  4518  0F60  3DDC               	addwfc	((_Temp+1)^(0+128)+1),f
  4519                           
  4520                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  4521  0F61  3001               	movlw	1
  4522  0F62  025C               	subwf	((_Temp+1)^(0+128)+1),w
  4523  0F63  30F4               	movlw	244
  4524  0F64  1903               	skipnz
  4525  0F65  025B               	subwf	(_Temp^(0+128)+1),w
  4526  0F66  1C03               	skipc
  4527  0F67  0008               	return
  4528                           
  4529                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  4530  0F68  01DB               	clrf	(_Temp^(0+128)+1)
  4531  0F69  01DC               	clrf	((_Temp+1)^(0+128)+1)
  4532                           
  4533                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  4534  0F6A  155A               	bsf	_Temp^(0+128),2
  4535                           
  4536                           ;OverTemperature_B1.c: 70: }
  4537                           ;OverTemperature_B1.c: 71: } else {
  4538  0F6B  0008               	return
  4539  0F6C                     l9277:	
  4540                           
  4541                           ;OverTemperature_B1.c: 72: Temp.Time++;
  4542  0F6C  3001               	movlw	1
  4543  0F6D  07DB               	addwf	(_Temp^(0+128)+1),f
  4544  0F6E  3000               	movlw	0
  4545  0F6F  3DDC               	addwfc	((_Temp+1)^(0+128)+1),f
  4546                           
  4547                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  4548  0F70  3000               	movlw	0
  4549  0F71  025C               	subwf	((_Temp+1)^(0+128)+1),w
  4550  0F72  3005               	movlw	5
  4551  0F73  1903               	skipnz
  4552  0F74  025B               	subwf	(_Temp^(0+128)+1),w
  4553  0F75  1C03               	skipc
  4554  0F76  0008               	return
  4555                           
  4556                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  4557  0F77  01DB               	clrf	(_Temp^(0+128)+1)
  4558  0F78  01DC               	clrf	((_Temp+1)^(0+128)+1)
  4559                           
  4560                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  4561  0F79  3008               	movlw	8
  4562  0F7A  3EDA               	addlw	_Temp& (0+255)
  4563  0F7B  0086               	movwf	6
  4564  0F7C  0187               	clrf	7
  4565  0F7D  0016               	moviw fsr1++
  4566  0F7E  0401               	iorwf	1,w
  4567  0F7F  1903               	skipnz
  4568  0F80  2FF6               	goto	l1782
  4569  0F81  300A               	movlw	10
  4570  0F82  3EDA               	addlw	_Temp& (0+255)
  4571  0F83  0086               	movwf	6
  4572  0F84  0187               	clrf	7
  4573  0F85  0016               	moviw fsr1++
  4574  0F86  0401               	iorwf	1,w
  4575  0F87  1903               	skipnz
  4576  0F88  2FF6               	goto	l1782
  4577                           
  4578                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  4579  0F89  115A               	bcf	_Temp^(0+128),2
  4580                           
  4581                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4582  0F8A  300A               	movlw	10
  4583  0F8B  3EDA               	addlw	_Temp& (0+255)
  4584  0F8C  0086               	movwf	6
  4585  0F8D  0187               	clrf	7
  4586  0F8E  3008               	movlw	8
  4587  0F8F  3EDA               	addlw	_Temp& (0+255)
  4588  0F90  0084               	movwf	4
  4589  0F91  0185               	clrf	5
  4590  0F92  3F40               	moviw [0]fsr1
  4591  0F93  0700               	addwf	0,w
  4592  0F94  0020               	movlb	0	; select bank0
  4593  0F95  00E1               	movwf	??_setTemp_Main
  4594  0F96  3101               	addfsr 0,1
  4595  0F97  3F41               	moviw [1]fsr1
  4596  0F98  3D00               	addwfc	0,w
  4597  0F99  00E2               	movwf	??_setTemp_Main+1
  4598  0F9A  36E2               	lsrf	??_setTemp_Main+1,f
  4599  0F9B  0CE1               	rrf	??_setTemp_Main,f
  4600  0F9C  0861               	movf	??_setTemp_Main,w
  4601  0F9D  0021               	movlb	1	; select bank1
  4602  0F9E  00E0               	movwf	(_Temp^(0+128)+6)
  4603  0F9F  0020               	movlb	0	; select bank0
  4604  0FA0  0862               	movf	??_setTemp_Main+1,w
  4605  0FA1  0021               	movlb	1	; select bank1
  4606  0FA2  00E1               	movwf	((_Temp+1)^(0+128)+6)
  4607                           
  4608                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  4609  0FA3  30C7               	movlw	199
  4610  0FA4  00E8               	movwf	(_Temp^(0+128)+14)
  4611  0FA5  3001               	movlw	1
  4612  0FA6  00E9               	movwf	(_Temp^(0+128)+15)
  4613                           
  4614                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  4615  0FA7  309F               	movlw	159
  4616  0FA8  00EA               	movwf	(_Temp^(0+128)+16)
  4617  0FA9  3001               	movlw	1
  4618  0FAA  00EB               	movwf	(_Temp^(0+128)+17)
  4619                           
  4620                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  4621  0FAB  1CDA               	btfss	_Temp^(0+128),1
  4622  0FAC  2FCD               	goto	l9309
  4623                           
  4624                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  4625  0FAD  0869               	movf	((_Temp+1)^(0+128)+14),w
  4626  0FAE  0261               	subwf	((_Temp+1)^(0+128)+6),w
  4627  0FAF  1D03               	skipz
  4628  0FB0  2FB3               	goto	u10215
  4629  0FB1  0868               	movf	(_Temp^(0+128)+14),w
  4630  0FB2  0260               	subwf	(_Temp^(0+128)+6),w
  4631  0FB3                     u10215:	
  4632  0FB3  1C03               	skipc
  4633  0FB4  2FCB               	goto	l9307
  4634                           
  4635                           ;OverTemperature_B1.c: 98: Temp.Count++;
  4636  0FB5  3001               	movlw	1
  4637  0FB6  0020               	movlb	0	; select bank0
  4638  0FB7  00E1               	movwf	??_setTemp_Main
  4639  0FB8  0861               	movf	??_setTemp_Main,w
  4640  0FB9  0021               	movlb	1	; select bank1
  4641  0FBA  07DD               	addwf	(_Temp^(0+128)+3),f
  4642                           
  4643                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  4644  0FBB  3003               	movlw	3
  4645  0FBC  025D               	subwf	(_Temp^(0+128)+3),w
  4646  0FBD  1C03               	skipc
  4647  0FBE  2FE3               	goto	l9321
  4648                           
  4649                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  4650  0FBF  01DD               	clrf	(_Temp^(0+128)+3)
  4651                           
  4652                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  4653  0FC0  10DA               	bcf	_Temp^(0+128),1
  4654                           
  4655                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  4656  0FC1  3064               	movlw	100
  4657  0FC2  0020               	movlb	0	; select bank0
  4658  0FC3  00A9               	movwf	setBuz@time
  4659  0FC4  3000               	movlw	0
  4660  0FC5  00AA               	movwf	setBuz@time+1
  4661  0FC6  3002               	movlw	2
  4662  0FC7  3189  217C  318F   	fcall	_setBuz
  4663                           
  4664                           ;OverTemperature_B1.c: 103: }
  4665                           ;OverTemperature_B1.c: 104: } else {
  4666  0FCA  2FE3               	goto	l9321
  4667  0FCB                     l9307:	
  4668                           
  4669                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  4670  0FCB  0021               	movlb	1	; select bank1
  4671  0FCC  2FE2               	goto	l9319
  4672  0FCD                     l9309:	
  4673                           ;OverTemperature_B1.c: 106: }
  4674                           ;OverTemperature_B1.c: 107: } else {
  4675                           
  4676                           
  4677                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  4678  0FCD  0861               	movf	((_Temp+1)^(0+128)+6),w
  4679  0FCE  026B               	subwf	((_Temp+1)^(0+128)+16),w
  4680  0FCF  1D03               	skipz
  4681  0FD0  2FD3               	goto	u10235
  4682  0FD1  0860               	movf	(_Temp^(0+128)+6),w
  4683  0FD2  026A               	subwf	(_Temp^(0+128)+16),w
  4684  0FD3                     u10235:	
  4685  0FD3  1C03               	skipc
  4686  0FD4  2FE2               	goto	l9319
  4687                           
  4688                           ;OverTemperature_B1.c: 109: Temp.Count++;
  4689  0FD5  3001               	movlw	1
  4690  0FD6  0020               	movlb	0	; select bank0
  4691  0FD7  00E1               	movwf	??_setTemp_Main
  4692  0FD8  0861               	movf	??_setTemp_Main,w
  4693  0FD9  0021               	movlb	1	; select bank1
  4694  0FDA  07DD               	addwf	(_Temp^(0+128)+3),f
  4695                           
  4696                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  4697  0FDB  3003               	movlw	3
  4698  0FDC  025D               	subwf	(_Temp^(0+128)+3),w
  4699  0FDD  1C03               	skipc
  4700  0FDE  2FE3               	goto	l9321
  4701                           
  4702                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  4703  0FDF  01DD               	clrf	(_Temp^(0+128)+3)
  4704                           
  4705                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  4706  0FE0  14DA               	bsf	_Temp^(0+128),1
  4707                           
  4708                           ;OverTemperature_B1.c: 113: }
  4709                           ;OverTemperature_B1.c: 114: } else {
  4710  0FE1  2FE3               	goto	l9321
  4711  0FE2                     l9319:	
  4712                           
  4713                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  4714  0FE2  01DD               	clrf	(_Temp^(0+128)+3)
  4715  0FE3                     l9321:	
  4716                           
  4717                           ;OverTemperature_B1.c: 116: }
  4718                           ;OverTemperature_B1.c: 117: }
  4719                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  4720  0FE3  0021               	movlb	1	; select bank1
  4721  0FE4  0861               	movf	((_Temp+1)^(0+128)+6),w
  4722  0FE5  0020               	movlb	0	; select bank0
  4723  0FE6  00E1               	movwf	??_setTemp_Main
  4724  0FE7  0861               	movf	??_setTemp_Main,w
  4725  0FE8  00DD               	movwf	setProductData@value
  4726  0FE9  3018               	movlw	24
  4727  0FEA  319E  26B0  318F   	fcall	_setProductData
  4728                           
  4729                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  4730  0FED  0021               	movlb	1	; select bank1
  4731  0FEE  0860               	movf	(_Temp^(0+128)+6),w
  4732  0FEF  0020               	movlb	0	; select bank0
  4733  0FF0  00E1               	movwf	??_setTemp_Main
  4734  0FF1  0861               	movf	??_setTemp_Main,w
  4735  0FF2  00DD               	movwf	setProductData@value
  4736  0FF3  3019               	movlw	25
  4737  0FF4  319E  26B0         	fcall	_setProductData
  4738  0FF6                     l1782:	
  4739                           
  4740                           ;OverTemperature_B1.c: 135: }
  4741                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  4742  0FF6  0021               	movlb	1	; select bank1
  4743  0FF7  01E2               	clrf	(_Temp^(0+128)+8)
  4744  0FF8  01E3               	clrf	((_Temp+1)^(0+128)+8)
  4745                           
  4746                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  4747  0FF9  01E4               	clrf	(_Temp^(0+128)+10)
  4748  0FFA  01E5               	clrf	((_Temp+1)^(0+128)+10)
  4749                           
  4750                           ;OverTemperature_B1.c: 138: }
  4751                           ;OverTemperature_B1.c: 139: }
  4752                           ;OverTemperature_B1.c: 141: } else {
  4753  0FFB  0008               	return
  4754  0FFC                     l1777:	
  4755                           
  4756                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  4757  0FFC  1C2E               	btfss	_myMain^(0+128),0
  4758  0FFD  0008               	return
  4759                           
  4760                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  4761  0FFE  145A               	bsf	_Temp^(0+128),0
  4762  0FFF  0008               	return
  4763  1000                     __end_of_setTemp_Main:	
  4764                           
  4765                           	psect	text9
  4766  1DD4                     __ptext9:	
  4767 ;; *************** function _Temp_Initialization *****************
  4768 ;; Defined at:
  4769 ;;		line 8 in file "../src/OverTemperature_B1.c"
  4770 ;; Parameters:    Size  Location     Type
  4771 ;;		None
  4772 ;; Auto vars:     Size  Location     Type
  4773 ;;		None
  4774 ;; Return value:  Size  Location     Type
  4775 ;;		None               void
  4776 ;; Registers used:
  4777 ;;		status,2, status,0, pclath, cstack
  4778 ;; Tracked objects:
  4779 ;;		On entry : 0/0
  4780 ;;		On exit  : 0/0
  4781 ;;		Unchanged: 0/0
  4782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4787 ;;Total ram usage:        0 bytes
  4788 ;; Hardware stack levels used:    1
  4789 ;; Hardware stack levels required when called:    5
  4790 ;; This function calls:
  4791 ;;		_setTemp_Initialization
  4792 ;; This function is called by:
  4793 ;;		_main
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           
  4798                           ;psect for function _Temp_Initialization
  4799  1DD4                     _Temp_Initialization:	
  4800                           
  4801                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  4802                           
  4803                           ;incstack = 0
  4804                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4805  1DD4  3188  2001         	fcall	_setTemp_Initialization
  4806  1DD6  0008               	return
  4807  1DD7                     __end_of_Temp_Initialization:	
  4808                           
  4809                           	psect	text10
  4810  0801                     __ptext10:	
  4811 ;; *************** function _setTemp_Initialization *****************
  4812 ;; Defined at:
  4813 ;;		line 44 in file "../src/OverTemperature_B1.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;		None
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;		None
  4818 ;; Return value:  Size  Location     Type
  4819 ;;		None               void
  4820 ;; Registers used:
  4821 ;;		None
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4831 ;;Total ram usage:        0 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    4
  4834 ;; This function calls:
  4835 ;;		Nothing
  4836 ;; This function is called by:
  4837 ;;		_Temp_Initialization
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           
  4842                           ;psect for function _setTemp_Initialization
  4843  0801                     _setTemp_Initialization:	
  4844                           
  4845                           ;incstack = 0
  4846                           ; Regs used in _setTemp_Initialization: []
  4847  0801  0008               	return
  4848  0802                     __end_of_setTemp_Initialization:	
  4849                           
  4850                           	psect	text11
  4851  1E43                     __ptext11:	
  4852 ;; *************** function _Switch_Main *****************
  4853 ;; Defined at:
  4854 ;;		line 72 in file "../src/Switch_B1.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;		None
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;		None
  4859 ;; Return value:  Size  Location     Type
  4860 ;;		None               void
  4861 ;; Registers used:
  4862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4872 ;;Total ram usage:        0 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; Hardware stack levels required when called:    9
  4875 ;; This function calls:
  4876 ;;		_TouchPower
  4877 ;;		_setSw_Main
  4878 ;; This function is called by:
  4879 ;;		_main
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           
  4884                           ;psect for function _Switch_Main
  4885  1E43                     _Switch_Main:	
  4886                           
  4887                           ;Switch_B1.c: 75: setSw_Main(1);
  4888                           
  4889                           ;incstack = 0
  4890                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4891  1E43  3001               	movlw	1
  4892  1E44  3181  21E3  319E   	fcall	_setSw_Main
  4893                           
  4894                           ;Switch_B1.c: 79: setSw_Main(2);
  4895  1E47  3002               	movlw	2
  4896  1E48  3181  21E3  319E   	fcall	_setSw_Main
  4897                           
  4898                           ;Switch_B1.c: 87: TouchPower();
  4899  1E4B  3190  20FE         	fcall	_TouchPower
  4900  1E4D  0008               	return
  4901  1E4E                     __end_of_Switch_Main:	
  4902                           
  4903                           	psect	text12
  4904  01E3                     __ptext12:	
  4905 ;; *************** function _setSw_Main *****************
  4906 ;; Defined at:
  4907 ;;		line 121 in file "../src/Switch_B1.c"
  4908 ;; Parameters:    Size  Location     Type
  4909 ;;  sw              1    wreg     unsigned char 
  4910 ;; Auto vars:     Size  Location     Type
  4911 ;;  sw              1   72[BANK0 ] unsigned char 
  4912 ;; Return value:  Size  Location     Type
  4913 ;;		None               void
  4914 ;; Registers used:
  4915 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4916 ;; Tracked objects:
  4917 ;;		On entry : 0/0
  4918 ;;		On exit  : 0/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4922 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4923 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4924 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4925 ;;Total ram usage:        3 bytes
  4926 ;; Hardware stack levels used:    1
  4927 ;; Hardware stack levels required when called:    8
  4928 ;; This function calls:
  4929 ;;		_SwPointSelect
  4930 ;;		_getMain_All_Error_Status
  4931 ;;		_getSw_KeyStatus
  4932 ;;		_setBuz
  4933 ;;		_setDimmerLights_AdjOn
  4934 ;;		_setDimmerLights_SwOff
  4935 ;;		_setDimmerLights_SwOn
  4936 ;;		_setRF_Learn
  4937 ;; This function is called by:
  4938 ;;		_Switch_Main
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           
  4943                           ;psect for function _setSw_Main
  4944  01E3                     _setSw_Main:	
  4945                           
  4946                           ;incstack = 0
  4947                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4948                           ;setSw_Main@sw stored from wreg
  4949  01E3  0020               	movlb	0	; select bank0
  4950  01E4  00E8               	movwf	setSw_Main@sw
  4951                           
  4952                           ;Switch_B1.c: 122: SwPointSelect(sw);
  4953  01E5  0868               	movf	setSw_Main@sw,w
  4954  01E6  3190  2082  3181   	fcall	_SwPointSelect
  4955                           
  4956                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  4957  01E9  087A               	movf	_Sw,w
  4958  01EA  0086               	movwf	6
  4959  01EB  3001               	movlw	1	; select bank2/3
  4960  01EC  0087               	movwf	7
  4961  01ED  1C01               	btfss	1,0
  4962  01EE  2B49               	goto	l2536
  4963                           
  4964                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  4965  01EF  3000               	movlw	0
  4966  01F0  3191  21AA  3181   	fcall	_getMain_All_Error_Status
  4967  01F3  3800               	iorlw	0
  4968  01F4  1D03               	skipz
  4969  01F5  2A11               	goto	l9421
  4970                           
  4971                           ;Switch_B1.c: 126: Sw->Detect = 0;
  4972  01F6  0A7A               	incf	_Sw,w
  4973  01F7  0086               	movwf	6
  4974  01F8  3001               	movlw	1	; select bank2/3
  4975  01F9  0087               	movwf	7
  4976  01FA  1081               	bcf	1,1
  4977                           
  4978                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  4979  01FB  0020               	movlb	0	; select bank0
  4980  01FC  0868               	movf	setSw_Main@sw,w
  4981  01FD  3191  21E5  3181   	fcall	_getSw_KeyStatus
  4982  0200  3A01               	xorlw	1
  4983  0201  3000               	movlw	0
  4984  0202  1903               	skipnz
  4985  0203  3001               	movlw	1
  4986  0204  0020               	movlb	0	; select bank0
  4987  0205  00E6               	movwf	??_setSw_Main
  4988  0206  087A               	movf	_Sw,w
  4989  0207  0086               	movwf	6
  4990  0208  3001               	movlw	1	; select bank2/3
  4991  0209  0087               	movwf	7
  4992  020A  0DE6               	rlf	??_setSw_Main,f
  4993  020B  0801               	movf	1,w
  4994  020C  0666               	xorwf	??_setSw_Main,w
  4995  020D  39FD               	andlw	-3
  4996  020E  0666               	xorwf	??_setSw_Main,w
  4997  020F  0081               	movwf	1
  4998                           
  4999                           ;Switch_B1.c: 128: } else {
  5000  0210  2A26               	goto	l2538
  5001  0211                     l9421:	
  5002                           
  5003                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5004  0211  0A7A               	incf	_Sw,w
  5005  0212  0086               	movwf	6
  5006  0213  3001               	movlw	1	; select bank2/3
  5007  0214  0087               	movwf	7
  5008  0215  1881               	btfsc	1,1
  5009  0216  2A26               	goto	l2538
  5010                           
  5011                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5012  0217  0A7A               	incf	_Sw,w
  5013  0218  0086               	movwf	6
  5014  0219  3001               	movlw	1	; select bank2/3
  5015  021A  0087               	movwf	7
  5016  021B  1481               	bsf	1,1
  5017                           
  5018                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5019  021C  087A               	movf	_Sw,w
  5020  021D  0086               	movwf	6
  5021  021E  3001               	movlw	1	; select bank2/3
  5022  021F  0087               	movwf	7
  5023  0220  1081               	bcf	1,1
  5024                           
  5025                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5026  0221  087A               	movf	_Sw,w
  5027  0222  0086               	movwf	6
  5028  0223  3001               	movlw	1	; select bank2/3
  5029  0224  0087               	movwf	7
  5030  0225  1501               	bsf	1,2
  5031  0226                     l2538:	
  5032                           
  5033                           ;Switch_B1.c: 134: }
  5034                           ;Switch_B1.c: 135: }
  5035                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5036  0226  087A               	movf	_Sw,w
  5037  0227  0086               	movwf	6
  5038  0228  3001               	movlw	1	; select bank2/3
  5039  0229  0087               	movwf	7
  5040  022A  1C81               	btfss	1,1
  5041  022B  2AF6               	goto	l9471
  5042                           
  5043                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5044  022C  087A               	movf	_Sw,w
  5045  022D  0086               	movwf	6
  5046  022E  3001               	movlw	1	; select bank2/3
  5047  022F  0087               	movwf	7
  5048  0230  1901               	btfsc	1,2
  5049  0231  2A54               	goto	l9437
  5050                           
  5051                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5052  0232  3001               	movlw	1
  5053  0233  0020               	movlb	0	; select bank0
  5054  0234  00E6               	movwf	??_setSw_Main
  5055  0235  087A               	movf	_Sw,w
  5056  0236  3E02               	addlw	2
  5057  0237  0086               	movwf	6
  5058  0238  3001               	movlw	1	; select bank2/3
  5059  0239  0087               	movwf	7
  5060  023A  0866               	movf	??_setSw_Main,w
  5061  023B  0781               	addwf	1,f
  5062                           
  5063                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  5064  023C  087A               	movf	_Sw,w
  5065  023D  3E02               	addlw	2
  5066  023E  0086               	movwf	6
  5067  023F  3001               	movlw	1	; select bank2/3
  5068  0240  0087               	movwf	7
  5069  0241  3005               	movlw	5
  5070  0242  0201               	subwf	1,w
  5071  0243  1C03               	skipc
  5072  0244  0008               	return
  5073                           
  5074                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5075  0245  087A               	movf	_Sw,w
  5076  0246  3E02               	addlw	2
  5077  0247  0086               	movwf	6
  5078  0248  3001               	movlw	1	; select bank2/3
  5079  0249  0087               	movwf	7
  5080  024A  0181               	clrf	1
  5081                           
  5082                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5083  024B  087A               	movf	_Sw,w
  5084  024C  0086               	movwf	6
  5085  024D  3001               	movlw	1	; select bank2/3
  5086  024E  0087               	movwf	7
  5087  024F  1501               	bsf	1,2
  5088                           
  5089                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5090  0250  0868               	movf	setSw_Main@sw,w
  5091  0251  318A  22E5         	fcall	_setDimmerLights_SwOn
  5092                           
  5093                           ;Switch_B1.c: 148: }
  5094                           ;Switch_B1.c: 149: } else {
  5095  0253  0008               	return
  5096  0254                     l9437:	
  5097                           
  5098                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5099  0254  087A               	movf	_Sw,w
  5100  0255  0086               	movwf	6
  5101  0256  3001               	movlw	1	; select bank2/3
  5102  0257  0087               	movwf	7
  5103  0258  1981               	btfsc	1,3
  5104  0259  2A86               	goto	l9447
  5105                           
  5106                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5107  025A  087A               	movf	_Sw,w
  5108  025B  3E03               	addlw	3
  5109  025C  0086               	movwf	6
  5110  025D  3001               	movlw	1	; select bank2/3
  5111  025E  0087               	movwf	7
  5112  025F  3001               	movlw	1
  5113  0260  0781               	addwf	1,f
  5114  0261  3141               	addfsr 1,1
  5115  0262  1803               	skipnc
  5116  0263  0A81               	incf	1,f
  5117                           
  5118                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  5119  0264  087A               	movf	_Sw,w
  5120  0265  3E03               	addlw	3
  5121  0266  0086               	movwf	6
  5122  0267  3001               	movlw	1	; select bank2/3
  5123  0268  0087               	movwf	7
  5124  0269  3F40               	moviw [0]fsr1
  5125  026A  0020               	movlb	0	; select bank0
  5126  026B  00E6               	movwf	??_setSw_Main
  5127  026C  3F41               	moviw [1]fsr1
  5128  026D  00E7               	movwf	??_setSw_Main+1
  5129  026E  3000               	movlw	0
  5130  026F  0267               	subwf	??_setSw_Main+1,w
  5131  0270  3096               	movlw	150
  5132  0271  1903               	skipnz
  5133  0272  0266               	subwf	??_setSw_Main,w
  5134  0273  1C03               	skipc
  5135  0274  0008               	return
  5136                           
  5137                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5138  0275  087A               	movf	_Sw,w
  5139  0276  3E03               	addlw	3
  5140  0277  0086               	movwf	6
  5141  0278  3001               	movlw	1	; select bank2/3
  5142  0279  0087               	movwf	7
  5143  027A  3000               	movlw	0
  5144  027B  3FC0               	movwi [0]fsr1
  5145  027C  3FC1               	movwi [1]fsr1
  5146                           
  5147                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5148  027D  087A               	movf	_Sw,w
  5149  027E  0086               	movwf	6
  5150  027F  3001               	movlw	1	; select bank2/3
  5151  0280  0087               	movwf	7
  5152  0281  1581               	bsf	1,3
  5153                           
  5154                           ;Switch_B1.c: 157: setDimmerLights_AdjOn(sw);
  5155  0282  0868               	movf	setSw_Main@sw,w
  5156  0283  3193  2391         	fcall	_setDimmerLights_AdjOn
  5157                           
  5158                           ;Switch_B1.c: 160: }
  5159                           ;Switch_B1.c: 161: } else {
  5160  0285  0008               	return
  5161  0286                     l9447:	
  5162                           
  5163                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5164  0286  087A               	movf	_Sw,w
  5165  0287  0086               	movwf	6
  5166  0288  3001               	movlw	1	; select bank2/3
  5167  0289  0087               	movwf	7
  5168  028A  1A01               	btfsc	1,4
  5169  028B  2AC4               	goto	l9461
  5170                           
  5171                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5172  028C  087A               	movf	_Sw,w
  5173  028D  3E05               	addlw	5
  5174  028E  0086               	movwf	6
  5175  028F  3001               	movlw	1	; select bank2/3
  5176  0290  0087               	movwf	7
  5177  0291  3001               	movlw	1
  5178  0292  0781               	addwf	1,f
  5179  0293  3141               	addfsr 1,1
  5180  0294  1803               	skipnc
  5181  0295  0A81               	incf	1,f
  5182                           
  5183                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5184  0296  087A               	movf	_Sw,w
  5185  0297  3E05               	addlw	5
  5186  0298  0086               	movwf	6
  5187  0299  3001               	movlw	1	; select bank2/3
  5188  029A  0087               	movwf	7
  5189  029B  3F40               	moviw [0]fsr1
  5190  029C  0020               	movlb	0	; select bank0
  5191  029D  00E6               	movwf	??_setSw_Main
  5192  029E  3F41               	moviw [1]fsr1
  5193  029F  00E7               	movwf	??_setSw_Main+1
  5194  02A0  3000               	movlw	0
  5195  02A1  0267               	subwf	??_setSw_Main+1,w
  5196  02A2  3096               	movlw	150
  5197  02A3  1903               	skipnz
  5198  02A4  0266               	subwf	??_setSw_Main,w
  5199  02A5  1C03               	skipc
  5200  02A6  0008               	return
  5201                           
  5202                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5203  02A7  087A               	movf	_Sw,w
  5204  02A8  3E05               	addlw	5
  5205  02A9  0086               	movwf	6
  5206  02AA  3001               	movlw	1	; select bank2/3
  5207  02AB  0087               	movwf	7
  5208  02AC  3000               	movlw	0
  5209  02AD  3FC0               	movwi [0]fsr1
  5210  02AE  3FC1               	movwi [1]fsr1
  5211                           
  5212                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5213  02AF  087A               	movf	_Sw,w
  5214  02B0  0086               	movwf	6
  5215  02B1  3001               	movlw	1	; select bank2/3
  5216  02B2  0087               	movwf	7
  5217  02B3  1601               	bsf	1,4
  5218                           
  5219                           ;Switch_B1.c: 169: setRF_Learn(1);
  5220  02B4  3001               	movlw	1
  5221  02B5  3190  2096  3181   	fcall	_setRF_Learn
  5222                           
  5223                           ;Switch_B1.c: 171: if (myMain.First == 1) {
  5224  02B8  0021               	movlb	1	; select bank1
  5225  02B9  1EAE               	btfss	_myMain^(0+128),5
  5226  02BA  0008               	return
  5227                           
  5228                           ;Switch_B1.c: 172: setBuz(2, 100);
  5229  02BB  3064               	movlw	100
  5230  02BC  0020               	movlb	0	; select bank0
  5231  02BD  00A9               	movwf	setBuz@time
  5232  02BE  3000               	movlw	0
  5233  02BF  00AA               	movwf	setBuz@time+1
  5234  02C0  3002               	movlw	2
  5235  02C1  3189  217C         	fcall	_setBuz
  5236                           
  5237                           ;Switch_B1.c: 173: }
  5238                           ;Switch_B1.c: 175: }
  5239                           ;Switch_B1.c: 176: } else {
  5240  02C3  0008               	return
  5241  02C4                     l9461:	
  5242                           
  5243                           ;Switch_B1.c: 177: if (Sw->Hold3 == 0) {
  5244  02C4  087A               	movf	_Sw,w
  5245  02C5  0086               	movwf	6
  5246  02C6  3001               	movlw	1	; select bank2/3
  5247  02C7  0087               	movwf	7
  5248  02C8  1A81               	btfsc	1,5
  5249  02C9  0008               	return
  5250                           
  5251                           ;Switch_B1.c: 178: Sw->Hold3Time++;
  5252  02CA  087A               	movf	_Sw,w
  5253  02CB  3E07               	addlw	7
  5254  02CC  0086               	movwf	6
  5255  02CD  3001               	movlw	1	; select bank2/3
  5256  02CE  0087               	movwf	7
  5257  02CF  3001               	movlw	1
  5258  02D0  0781               	addwf	1,f
  5259  02D1  3141               	addfsr 1,1
  5260  02D2  1803               	skipnc
  5261  02D3  0A81               	incf	1,f
  5262                           
  5263                           ;Switch_B1.c: 179: if (Sw->Hold3Time >= 300) {
  5264  02D4  087A               	movf	_Sw,w
  5265  02D5  3E07               	addlw	7
  5266  02D6  0086               	movwf	6
  5267  02D7  3001               	movlw	1	; select bank2/3
  5268  02D8  0087               	movwf	7
  5269  02D9  3F40               	moviw [0]fsr1
  5270  02DA  0020               	movlb	0	; select bank0
  5271  02DB  00E6               	movwf	??_setSw_Main
  5272  02DC  3F41               	moviw [1]fsr1
  5273  02DD  00E7               	movwf	??_setSw_Main+1
  5274  02DE  3001               	movlw	1
  5275  02DF  0267               	subwf	??_setSw_Main+1,w
  5276  02E0  302C               	movlw	44
  5277  02E1  1903               	skipnz
  5278  02E2  0266               	subwf	??_setSw_Main,w
  5279  02E3  1C03               	skipc
  5280  02E4  0008               	return
  5281                           
  5282                           ;Switch_B1.c: 180: Sw->Hold3Time = 0;
  5283  02E5  087A               	movf	_Sw,w
  5284  02E6  3E07               	addlw	7
  5285  02E7  0086               	movwf	6
  5286  02E8  3001               	movlw	1	; select bank2/3
  5287  02E9  0087               	movwf	7
  5288  02EA  3000               	movlw	0
  5289  02EB  3FC0               	movwi [0]fsr1
  5290  02EC  3FC1               	movwi [1]fsr1
  5291                           
  5292                           ;Switch_B1.c: 181: Sw->Hold3 = 1;
  5293  02ED  087A               	movf	_Sw,w
  5294  02EE  0086               	movwf	6
  5295  02EF  3001               	movlw	1	; select bank2/3
  5296  02F0  0087               	movwf	7
  5297  02F1  1681               	bsf	1,5
  5298                           
  5299                           ;Switch_B1.c: 184: setRF_Learn(0);
  5300  02F2  3000               	movlw	0
  5301  02F3  3190  2096         	fcall	_setRF_Learn
  5302                           
  5303                           ;Switch_B1.c: 187: }
  5304                           ;Switch_B1.c: 188: }
  5305                           ;Switch_B1.c: 189: }
  5306                           ;Switch_B1.c: 190: }
  5307                           ;Switch_B1.c: 191: }
  5308                           ;Switch_B1.c: 192: } else {
  5309  02F5  0008               	return
  5310  02F6                     l9471:	
  5311                           
  5312                           ;Switch_B1.c: 193: if (Sw->Debounce == 1) {
  5313  02F6  087A               	movf	_Sw,w
  5314  02F7  0086               	movwf	6
  5315  02F8  3001               	movlw	1	; select bank2/3
  5316  02F9  0087               	movwf	7
  5317  02FA  1D01               	btfss	1,2
  5318  02FB  0008               	return
  5319                           
  5320                           ;Switch_B1.c: 194: Sw->DebounceTime++;
  5321  02FC  3001               	movlw	1
  5322  02FD  0020               	movlb	0	; select bank0
  5323  02FE  00E6               	movwf	??_setSw_Main
  5324  02FF  087A               	movf	_Sw,w
  5325  0300  3E02               	addlw	2
  5326  0301  0086               	movwf	6
  5327  0302  3001               	movlw	1	; select bank2/3
  5328  0303  0087               	movwf	7
  5329  0304  0866               	movf	??_setSw_Main,w
  5330  0305  0781               	addwf	1,f
  5331                           
  5332                           ;Switch_B1.c: 195: if (Sw->DebounceTime >= 5) {
  5333  0306  087A               	movf	_Sw,w
  5334  0307  3E02               	addlw	2
  5335  0308  0086               	movwf	6
  5336  0309  3001               	movlw	1	; select bank2/3
  5337  030A  0087               	movwf	7
  5338  030B  3005               	movlw	5
  5339  030C  0201               	subwf	1,w
  5340  030D  1C03               	skipc
  5341  030E  0008               	return
  5342                           
  5343                           ;Switch_B1.c: 196: Sw->DebounceTime = 0;
  5344  030F  087A               	movf	_Sw,w
  5345  0310  3E02               	addlw	2
  5346  0311  0086               	movwf	6
  5347  0312  3001               	movlw	1	; select bank2/3
  5348  0313  0087               	movwf	7
  5349  0314  0181               	clrf	1
  5350                           
  5351                           ;Switch_B1.c: 197: Sw->Debounce = 0;
  5352  0315  087A               	movf	_Sw,w
  5353  0316  0086               	movwf	6
  5354  0317  3001               	movlw	1	; select bank2/3
  5355  0318  0087               	movwf	7
  5356  0319  1101               	bcf	1,2
  5357                           
  5358                           ;Switch_B1.c: 198: Sw->Hold1Time = 0;
  5359  031A  087A               	movf	_Sw,w
  5360  031B  3E03               	addlw	3
  5361  031C  0086               	movwf	6
  5362  031D  3001               	movlw	1	; select bank2/3
  5363  031E  0087               	movwf	7
  5364  031F  3000               	movlw	0
  5365  0320  3FC0               	movwi [0]fsr1
  5366  0321  3FC1               	movwi [1]fsr1
  5367                           
  5368                           ;Switch_B1.c: 199: Sw->Hold1 = 0;
  5369  0322  087A               	movf	_Sw,w
  5370  0323  0086               	movwf	6
  5371  0324  3001               	movlw	1	; select bank2/3
  5372  0325  0087               	movwf	7
  5373  0326  1181               	bcf	1,3
  5374                           
  5375                           ;Switch_B1.c: 200: Sw->Hold2Time = 0;
  5376  0327  087A               	movf	_Sw,w
  5377  0328  3E05               	addlw	5
  5378  0329  0086               	movwf	6
  5379  032A  3001               	movlw	1	; select bank2/3
  5380  032B  0087               	movwf	7
  5381  032C  3000               	movlw	0
  5382  032D  3FC0               	movwi [0]fsr1
  5383  032E  3FC1               	movwi [1]fsr1
  5384                           
  5385                           ;Switch_B1.c: 201: Sw->Hold2 = 0;
  5386  032F  087A               	movf	_Sw,w
  5387  0330  0086               	movwf	6
  5388  0331  3001               	movlw	1	; select bank2/3
  5389  0332  0087               	movwf	7
  5390  0333  1201               	bcf	1,4
  5391                           
  5392                           ;Switch_B1.c: 202: Sw->Hold3Time = 0;
  5393  0334  087A               	movf	_Sw,w
  5394  0335  3E07               	addlw	7
  5395  0336  0086               	movwf	6
  5396  0337  3001               	movlw	1	; select bank2/3
  5397  0338  0087               	movwf	7
  5398  0339  3000               	movlw	0
  5399  033A  3FC0               	movwi [0]fsr1
  5400  033B  3FC1               	movwi [1]fsr1
  5401                           
  5402                           ;Switch_B1.c: 203: Sw->Hold3 = 0;
  5403  033C  087A               	movf	_Sw,w
  5404  033D  0086               	movwf	6
  5405  033E  3001               	movlw	1	; select bank2/3
  5406  033F  0087               	movwf	7
  5407  0340  1281               	bcf	1,5
  5408                           
  5409                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5410  0341  0868               	movf	setSw_Main@sw,w
  5411  0342  3197  2712  3181   	fcall	_setDimmerLights_SwOff
  5412                           
  5413                           ;Switch_B1.c: 209: setRF_Learn(0);
  5414  0345  3000               	movlw	0
  5415  0346  3190  2096         	fcall	_setRF_Learn
  5416                           
  5417                           ;Switch_B1.c: 211: }
  5418                           ;Switch_B1.c: 212: }
  5419                           ;Switch_B1.c: 213: }
  5420                           ;Switch_B1.c: 214: } else {
  5421  0348  0008               	return
  5422  0349                     l2536:	
  5423                           
  5424                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5425  0349  0021               	movlb	1	; select bank1
  5426  034A  1C2E               	btfss	_myMain^(0+128),0
  5427  034B  0008               	return
  5428                           
  5429                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5430  034C  087A               	movf	_Sw,w
  5431  034D  0086               	movwf	6
  5432  034E  3001               	movlw	1	; select bank2/3
  5433  034F  0087               	movwf	7
  5434  0350  1401               	bsf	1,0
  5435  0351  0008               	return
  5436  0352                     __end_of_setSw_Main:	
  5437                           
  5438                           	psect	text13
  5439  1096                     __ptext13:	
  5440 ;; *************** function _setRF_Learn *****************
  5441 ;; Defined at:
  5442 ;;		line 23 in file "../src/RF_Control_B1.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;  command         1    wreg     unsigned char 
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;  command         1    1[BANK0 ] unsigned char 
  5447 ;; Return value:  Size  Location     Type
  5448 ;;		None               void
  5449 ;; Registers used:
  5450 ;;		wreg, status,2, status,0
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5458 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5459 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5460 ;;Total ram usage:        2 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    4
  5463 ;; This function calls:
  5464 ;;		Nothing
  5465 ;; This function is called by:
  5466 ;;		_setSw_Main
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           
  5471                           ;psect for function _setRF_Learn
  5472  1096                     _setRF_Learn:	
  5473                           
  5474                           ;incstack = 0
  5475                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5476                           ;setRF_Learn@command stored from wreg
  5477  1096  0020               	movlb	0	; select bank0
  5478  1097  00A1               	movwf	setRF_Learn@command
  5479                           
  5480                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5481  1098  0821               	movf	setRF_Learn@command,w
  5482  1099  3A01               	xorlw	1
  5483  109A  3000               	movlw	0
  5484  109B  1903               	skipnz
  5485  109C  3001               	movlw	1
  5486  109D  00A0               	movwf	??_setRF_Learn
  5487  109E  0EA0               	swapf	??_setRF_Learn,f
  5488  109F  0DA0               	rlf	??_setRF_Learn,f
  5489  10A0  0DA0               	rlf	??_setRF_Learn,f
  5490  10A1  0021               	movlb	1	; select bank1
  5491  10A2  0820               	movf	_RF1^(0+128),w
  5492  10A3  0020               	movlb	0	; select bank0
  5493  10A4  0620               	xorwf	??_setRF_Learn,w
  5494  10A5  39BF               	andlw	-65
  5495  10A6  0620               	xorwf	??_setRF_Learn,w
  5496  10A7  0021               	movlb	1	; select bank1
  5497  10A8  00A0               	movwf	_RF1^(0+128)
  5498  10A9  0008               	return
  5499  10AA                     __end_of_setRF_Learn:	
  5500                           
  5501                           	psect	text14
  5502  1391                     __ptext14:	
  5503 ;; *************** function _setDimmerLights_AdjOn *****************
  5504 ;; Defined at:
  5505 ;;		line 497 in file "../src/Dimmer_B1.c"
  5506 ;; Parameters:    Size  Location     Type
  5507 ;;  sw              1    wreg     unsigned char 
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;  sw              1    2[BANK0 ] unsigned char 
  5510 ;; Return value:  Size  Location     Type
  5511 ;;		None               void
  5512 ;; Registers used:
  5513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5523 ;;Total ram usage:        1 bytes
  5524 ;; Hardware stack levels used:    1
  5525 ;; Hardware stack levels required when called:    5
  5526 ;; This function calls:
  5527 ;;		_DimmerLightsPointSelect
  5528 ;; This function is called by:
  5529 ;;		_setSw_Main
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           
  5534                           ;psect for function _setDimmerLights_AdjOn
  5535  1391                     _setDimmerLights_AdjOn:	
  5536                           
  5537                           ;incstack = 0
  5538                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5539                           ;setDimmerLights_AdjOn@sw stored from wreg
  5540  1391  0020               	movlb	0	; select bank0
  5541  1392  00A2               	movwf	setDimmerLights_AdjOn@sw
  5542                           
  5543                           ;Dimmer_B1.c: 498: DimmerLightsPointSelect(sw);
  5544  1393  0822               	movf	setDimmerLights_AdjOn@sw,w
  5545  1394  319F  2779  3193   	fcall	_DimmerLightsPointSelect
  5546                           
  5547                           ;Dimmer_B1.c: 508: if (DimmerLights->Trigger == 0) {
  5548  1397  0020               	movlb	0	; select bank0
  5549  1398  086F               	movf	_DimmerLights,w
  5550  1399  3E0A               	addlw	10
  5551  139A  0086               	movwf	6
  5552  139B  3001               	movlw	1	; select bank2/3
  5553  139C  0087               	movwf	7
  5554  139D  1881               	btfsc	1,1
  5555  139E  0008               	return
  5556                           
  5557                           ;Dimmer_B1.c: 509: if (DimmerLights->SwFlag == 1) {
  5558  139F  086F               	movf	_DimmerLights,w
  5559  13A0  3E0B               	addlw	11
  5560  13A1  0086               	movwf	6
  5561  13A2  3001               	movlw	1	; select bank2/3
  5562  13A3  0087               	movwf	7
  5563  13A4  1C81               	btfss	1,1
  5564  13A5  0008               	return
  5565                           
  5566                           ;Dimmer_B1.c: 510: DimmerLights->SwAdj = 1;
  5567  13A6  086F               	movf	_DimmerLights,w
  5568  13A7  3E0B               	addlw	11
  5569  13A8  0086               	movwf	6
  5570  13A9  3001               	movlw	1	; select bank2/3
  5571  13AA  0087               	movwf	7
  5572  13AB  1501               	bsf	1,2
  5573                           
  5574                           ;Dimmer_B1.c: 511: DimmerLights->Status = 1;
  5575  13AC  086F               	movf	_DimmerLights,w
  5576  13AD  3E02               	addlw	2
  5577  13AE  0086               	movwf	6
  5578  13AF  3001               	movlw	1	; select bank2/3
  5579  13B0  0087               	movwf	7
  5580  13B1  1481               	bsf	1,1
  5581                           
  5582                           ;Dimmer_B1.c: 513: DimmerLights->TriggerAdj = 1;
  5583  13B2  086F               	movf	_DimmerLights,w
  5584  13B3  3E0A               	addlw	10
  5585  13B4  0086               	movwf	6
  5586  13B5  3001               	movlw	1	; select bank2/3
  5587  13B6  0087               	movwf	7
  5588  13B7  1581               	bsf	1,3
  5589                           
  5590                           ;Dimmer_B1.c: 514: DimmerLights->SwitchAdj = 1;
  5591  13B8  086F               	movf	_DimmerLights,w
  5592  13B9  3E0A               	addlw	10
  5593  13BA  0086               	movwf	6
  5594  13BB  3001               	movlw	1	; select bank2/3
  5595  13BC  0087               	movwf	7
  5596  13BD  1501               	bsf	1,2
  5597  13BE  0008               	return
  5598  13BF                     __end_of_setDimmerLights_AdjOn:	
  5599                           
  5600                           	psect	text15
  5601  11E5                     __ptext15:	
  5602 ;; *************** function _getSw_KeyStatus *****************
  5603 ;; Defined at:
  5604 ;;		line 222 in file "../src/Switch_B1.c"
  5605 ;; Parameters:    Size  Location     Type
  5606 ;;  sw              1    wreg     unsigned char 
  5607 ;; Auto vars:     Size  Location     Type
  5608 ;;  sw              1    4[BANK0 ] unsigned char 
  5609 ;;  status          1    3[BANK0 ] unsigned char 
  5610 ;; Return value:  Size  Location     Type
  5611 ;;                  1    wreg      unsigned char 
  5612 ;; Registers used:
  5613 ;;		wreg, status,2
  5614 ;; Tracked objects:
  5615 ;;		On entry : 0/0
  5616 ;;		On exit  : 0/0
  5617 ;;		Unchanged: 0/0
  5618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5620 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5621 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5622 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5623 ;;Total ram usage:        5 bytes
  5624 ;; Hardware stack levels used:    1
  5625 ;; Hardware stack levels required when called:    4
  5626 ;; This function calls:
  5627 ;;		Nothing
  5628 ;; This function is called by:
  5629 ;;		_setSw_Main
  5630 ;; This function uses a non-reentrant model
  5631 ;;
  5632                           
  5633                           
  5634                           ;psect for function _getSw_KeyStatus
  5635  11E5                     _getSw_KeyStatus:	
  5636                           
  5637                           ;incstack = 0
  5638                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  5639                           ;getSw_KeyStatus@sw stored from wreg
  5640  11E5  0020               	movlb	0	; select bank0
  5641  11E6  00A4               	movwf	getSw_KeyStatus@sw
  5642                           
  5643                           ;Switch_B1.c: 223: char status = 0;
  5644  11E7  01A3               	clrf	getSw_KeyStatus@status
  5645                           
  5646                           ;Switch_B1.c: 235: if (sw == 1) {
  5647  11E8  0824               	movf	getSw_KeyStatus@sw,w
  5648  11E9  3A01               	xorlw	1
  5649  11EA  1D03               	skipz
  5650  11EB  29F4               	goto	l9063
  5651                           
  5652                           ;Switch_B1.c: 236: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  5653  11EC  01A1               	clrf	_getSw_KeyStatus$5744
  5654  11ED  0AA1               	incf	_getSw_KeyStatus$5744,f
  5655  11EE  1F0C               	btfss	12,6	;volatile
  5656  11EF  1A0C               	btfsc	12,4	;volatile
  5657  11F0  29F2               	goto	l9061
  5658  11F1  01A1               	clrf	_getSw_KeyStatus$5744
  5659  11F2                     l9061:	
  5660  11F2  0821               	movf	_getSw_KeyStatus$5744,w
  5661  11F3  29FF               	goto	L1
  5662  11F4                     l9063:	
  5663                           ;Switch_B1.c: 237: } else if (sw == 2) {
  5664                           
  5665  11F4  0824               	movf	getSw_KeyStatus@sw,w
  5666  11F5  3A02               	xorlw	2
  5667  11F6  1D03               	skipz
  5668  11F7  2A02               	goto	l9073
  5669                           
  5670                           ;Switch_B1.c: 238: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  5671  11F8  01A2               	clrf	_getSw_KeyStatus$5745
  5672  11F9  0AA2               	incf	_getSw_KeyStatus$5745,f
  5673  11FA  1C0C               	btfss	12,0	;volatile
  5674  11FB  188D               	btfsc	13,1	;volatile
  5675  11FC  29FE               	goto	l9071
  5676  11FD  01A2               	clrf	_getSw_KeyStatus$5745
  5677  11FE                     l9071:	
  5678  11FE  0822               	movf	_getSw_KeyStatus$5745,w
  5679  11FF                     L1:	
  5680  11FF  00A0               	movwf	??_getSw_KeyStatus
  5681  1200  0820               	movf	??_getSw_KeyStatus,w
  5682  1201  00A3               	movwf	getSw_KeyStatus@status
  5683  1202                     l9073:	
  5684                           
  5685                           ;Switch_B1.c: 239: }
  5686                           ;Switch_B1.c: 246: return status;
  5687  1202  0823               	movf	getSw_KeyStatus@status,w
  5688  1203  0008               	return
  5689  1204                     __end_of_getSw_KeyStatus:	
  5690                           
  5691                           	psect	text16
  5692  1082                     __ptext16:	
  5693 ;; *************** function _SwPointSelect *****************
  5694 ;; Defined at:
  5695 ;;		line 25 in file "../src/Switch_B1.c"
  5696 ;; Parameters:    Size  Location     Type
  5697 ;;  sw              1    wreg     unsigned char 
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;  sw              1    1[BANK0 ] unsigned char 
  5700 ;; Return value:  Size  Location     Type
  5701 ;;		None               void
  5702 ;; Registers used:
  5703 ;;		wreg
  5704 ;; Tracked objects:
  5705 ;;		On entry : 0/0
  5706 ;;		On exit  : 0/0
  5707 ;;		Unchanged: 0/0
  5708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5710 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5711 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5712 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5713 ;;Total ram usage:        2 bytes
  5714 ;; Hardware stack levels used:    1
  5715 ;; Hardware stack levels required when called:    4
  5716 ;; This function calls:
  5717 ;;		Nothing
  5718 ;; This function is called by:
  5719 ;;		_setSw_Main
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723                           
  5724                           ;psect for function _SwPointSelect
  5725  1082                     _SwPointSelect:	
  5726                           
  5727                           ;incstack = 0
  5728                           ; Regs used in _SwPointSelect: [wreg]
  5729                           ;SwPointSelect@sw stored from wreg
  5730  1082  0020               	movlb	0	; select bank0
  5731  1083  00A1               	movwf	SwPointSelect@sw
  5732                           
  5733                           ;Switch_B1.c: 28: if (sw == 1) {
  5734  1084  0821               	movf	SwPointSelect@sw,w
  5735  1085  3A01               	xorlw	1
  5736  1086  1D03               	skipz
  5737  1087  288D               	goto	l9047
  5738                           
  5739                           ;Switch_B1.c: 29: Sw = &Sw1;
  5740  1088  30C5               	movlw	_Sw1& (0+255)
  5741  1089  00A0               	movwf	??_SwPointSelect
  5742  108A  0820               	movf	??_SwPointSelect,w
  5743  108B  00FA               	movwf	_Sw
  5744                           
  5745                           ;Switch_B1.c: 30: }
  5746  108C  0008               	return
  5747  108D                     l9047:	
  5748                           
  5749                           ;Switch_B1.c: 33: else if (sw == 2) {
  5750  108D  0821               	movf	SwPointSelect@sw,w
  5751  108E  3A02               	xorlw	2
  5752  108F  1D03               	skipz
  5753  1090  0008               	return
  5754                           
  5755                           ;Switch_B1.c: 34: Sw = &Sw2;
  5756  1091  30CE               	movlw	_Sw2& (0+255)
  5757  1092  00A0               	movwf	??_SwPointSelect
  5758  1093  0820               	movf	??_SwPointSelect,w
  5759  1094  00FA               	movwf	_Sw
  5760  1095  0008               	return
  5761  1096                     __end_of_SwPointSelect:	
  5762                           
  5763                           	psect	text17
  5764  07F3                     __ptext17:	
  5765 ;; *************** function _Switch_Initialization *****************
  5766 ;; Defined at:
  5767 ;;		line 46 in file "../src/Switch_B1.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;		None
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;		None
  5772 ;; Return value:  Size  Location     Type
  5773 ;;		None               void
  5774 ;; Registers used:
  5775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5776 ;; Tracked objects:
  5777 ;;		On entry : 0/0
  5778 ;;		On exit  : 0/0
  5779 ;;		Unchanged: 0/0
  5780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5785 ;;Total ram usage:        0 bytes
  5786 ;; Hardware stack levels used:    1
  5787 ;; Hardware stack levels required when called:    7
  5788 ;; This function calls:
  5789 ;;		_TouchPower
  5790 ;;		_setSw_Initialization
  5791 ;; This function is called by:
  5792 ;;		_main
  5793 ;; This function uses a non-reentrant model
  5794 ;;
  5795                           
  5796                           
  5797                           ;psect for function _Switch_Initialization
  5798  07F3                     _Switch_Initialization:	
  5799                           
  5800                           ;Switch_B1.c: 47: TouchPower();
  5801                           
  5802                           ;incstack = 0
  5803                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5804  07F3  3190  20FE  3187   	fcall	_TouchPower
  5805                           
  5806                           ;Switch_B1.c: 49: WPUB1 = 0;
  5807  07F6  0024               	movlb	4	; select bank4
  5808  07F7  108D               	bcf	13,1	;volatile
  5809                           
  5810                           ;Switch_B1.c: 58: setSw_Initialization(1);
  5811  07F8  3001               	movlw	1
  5812  07F9  3190  2066  3187   	fcall	_setSw_Initialization
  5813                           
  5814                           ;Switch_B1.c: 62: setSw_Initialization(2);
  5815  07FC  3002               	movlw	2
  5816  07FD  3190  2066         	fcall	_setSw_Initialization
  5817  07FF  0008               	return
  5818  0800                     __end_of_Switch_Initialization:	
  5819                           
  5820                           	psect	text18
  5821  1066                     __ptext18:	
  5822 ;; *************** function _setSw_Initialization *****************
  5823 ;; Defined at:
  5824 ;;		line 93 in file "../src/Switch_B1.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;  sw              1    wreg     unsigned char 
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;  sw              1    4[BANK0 ] unsigned char 
  5829 ;; Return value:  Size  Location     Type
  5830 ;;		None               void
  5831 ;; Registers used:
  5832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;Total ram usage:        1 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; Hardware stack levels required when called:    6
  5845 ;; This function calls:
  5846 ;;		_setLED
  5847 ;; This function is called by:
  5848 ;;		_Switch_Initialization
  5849 ;; This function uses a non-reentrant model
  5850 ;;
  5851                           
  5852                           
  5853                           ;psect for function _setSw_Initialization
  5854  1066                     _setSw_Initialization:	
  5855                           
  5856                           ;incstack = 0
  5857                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5858                           ;setSw_Initialization@sw stored from wreg
  5859  1066  0020               	movlb	0	; select bank0
  5860  1067  00A4               	movwf	setSw_Initialization@sw
  5861                           
  5862                           ;Switch_B1.c: 94: setLED(sw, 1);
  5863  1068  01A2               	clrf	setLED@command
  5864  1069  0AA2               	incf	setLED@command,f
  5865  106A  0824               	movf	setSw_Initialization@sw,w
  5866  106B  3197  27B0         	fcall	_setLED
  5867  106D  0008               	return
  5868  106E                     __end_of_setSw_Initialization:	
  5869                           
  5870                           	psect	text19
  5871  10FE                     __ptext19:	
  5872 ;; *************** function _TouchPower *****************
  5873 ;; Defined at:
  5874 ;;		line 10 in file "../src/Switch_B1.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;		None
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;		None
  5879 ;; Return value:  Size  Location     Type
  5880 ;;		None               void
  5881 ;; Registers used:
  5882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5883 ;; Tracked objects:
  5884 ;;		On entry : 0/0
  5885 ;;		On exit  : 0/0
  5886 ;;		Unchanged: 0/0
  5887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;Total ram usage:        0 bytes
  5893 ;; Hardware stack levels used:    1
  5894 ;; Hardware stack levels required when called:    5
  5895 ;; This function calls:
  5896 ;;		_Timeout_Counter
  5897 ;;		_set_TimeoutCleared
  5898 ;; This function is called by:
  5899 ;;		_Switch_Initialization
  5900 ;;		_Switch_Main
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           
  5905                           ;psect for function _TouchPower
  5906  10FE                     _TouchPower:	
  5907                           
  5908                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  5909                           
  5910                           ;incstack = 0
  5911                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5912  10FE  0021               	movlb	1	; select bank1
  5913  10FF  1C2E               	btfss	_myMain^(0+128),0
  5914  1100  0008               	return
  5915                           
  5916                           ;Switch_B1.c: 12: if (RC5 == 0) {
  5917  1101  0020               	movlb	0	; select bank0
  5918  1102  1A8E               	btfsc	14,5	;volatile
  5919  1103  0008               	return
  5920  1104  290A               	goto	l9403
  5921  1105                     l2514:	
  5922                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  5923                           
  5924                           
  5925                           ;Switch_B1.c: 14: RC5 = 1;
  5926  1105  0020               	movlb	0	; select bank0
  5927  1106  168E               	bsf	14,5	;volatile
  5928                           
  5929                           ;Switch_B1.c: 15: Timeout_Counter();
  5930  1107  3190  20E9  3190   	fcall	_Timeout_Counter
  5931  110A                     l9403:	
  5932  110A  0020               	movlb	0	; select bank0
  5933  110B  1A8E               	btfsc	14,5	;volatile
  5934  110C  2910               	goto	l9407
  5935  110D  0021               	movlb	1	; select bank1
  5936  110E  1D39               	btfss	(_myMain^(0+128)+11),2
  5937  110F  2905               	goto	l2514
  5938  1110                     l9407:	
  5939                           
  5940                           ;Switch_B1.c: 16: }
  5941                           ;Switch_B1.c: 17: set_TimeoutCleared();
  5942  1110  319D  25EE         	fcall	_set_TimeoutCleared
  5943  1112  0008               	return
  5944  1113                     __end_of_TouchPower:	
  5945                           
  5946                           	psect	text20
  5947  1DEE                     __ptext20:	
  5948 ;; *************** function _set_TimeoutCleared *****************
  5949 ;; Defined at:
  5950 ;;		line 283 in file "../src/Main_B1.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;		None
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;		None
  5955 ;; Return value:  Size  Location     Type
  5956 ;;		None               void
  5957 ;; Registers used:
  5958 ;;		status,2
  5959 ;; Tracked objects:
  5960 ;;		On entry : 0/0
  5961 ;;		On exit  : 0/0
  5962 ;;		Unchanged: 0/0
  5963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5968 ;;Total ram usage:        0 bytes
  5969 ;; Hardware stack levels used:    1
  5970 ;; Hardware stack levels required when called:    4
  5971 ;; This function calls:
  5972 ;;		Nothing
  5973 ;; This function is called by:
  5974 ;;		_getAD
  5975 ;;		_TouchPower
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           
  5980                           ;psect for function _set_TimeoutCleared
  5981  1DEE                     _set_TimeoutCleared:	
  5982                           
  5983                           ;Main_B1.c: 284: myMain.Timeout = 0;
  5984                           
  5985                           ;incstack = 0
  5986                           ; Regs used in _set_TimeoutCleared: [status,2]
  5987  1DEE  0021               	movlb	1	; select bank1
  5988  1DEF  1139               	bcf	(_myMain^(0+128)+11),2
  5989                           
  5990                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
  5991  1DF0  01BA               	clrf	(_myMain^(0+128)+12)
  5992  1DF1  01BB               	clrf	((_myMain+1)^(0+128)+12)
  5993  1DF2  0008               	return
  5994  1DF3                     __end_of_set_TimeoutCleared:	
  5995                           
  5996                           	psect	text21
  5997  10E9                     __ptext21:	
  5998 ;; *************** function _Timeout_Counter *****************
  5999 ;; Defined at:
  6000 ;;		line 274 in file "../src/Main_B1.c"
  6001 ;; Parameters:    Size  Location     Type
  6002 ;;		None
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;		None
  6005 ;; Return value:  Size  Location     Type
  6006 ;;		None               void
  6007 ;; Registers used:
  6008 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6009 ;; Tracked objects:
  6010 ;;		On entry : 0/0
  6011 ;;		On exit  : 0/0
  6012 ;;		Unchanged: 0/0
  6013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6018 ;;Total ram usage:        0 bytes
  6019 ;; Hardware stack levels used:    1
  6020 ;; Hardware stack levels required when called:    4
  6021 ;; This function calls:
  6022 ;;		Nothing
  6023 ;; This function is called by:
  6024 ;;		_getAD
  6025 ;;		_TouchPower
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           
  6030                           ;psect for function _Timeout_Counter
  6031  10E9                     _Timeout_Counter:	
  6032                           
  6033                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
  6034                           
  6035                           ;incstack = 0
  6036                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6037  10E9  3001               	movlw	1
  6038  10EA  0021               	movlb	1	; select bank1
  6039  10EB  07BA               	addwf	(_myMain^(0+128)+12),f
  6040  10EC  3000               	movlw	0
  6041  10ED  3DBB               	addwfc	((_myMain+1)^(0+128)+12),f
  6042                           
  6043                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 25000) {
  6044  10EE  300C               	movlw	12
  6045  10EF  3EAE               	addlw	_myMain& (0+255)
  6046  10F0  0086               	movwf	6
  6047  10F1  0187               	clrf	7
  6048  10F2  3F40               	moviw [0]fsr1
  6049  10F3  3AA8               	xorlw	168
  6050  10F4  1D03               	skipz
  6051  10F5  28F8               	goto	u9565
  6052  10F6  3F41               	moviw [1]fsr1
  6053  10F7  3A61               	xorlw	97
  6054  10F8                     u9565:	
  6055  10F8  1D03               	skipz
  6056  10F9  0008               	return
  6057                           
  6058                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
  6059  10FA  01BA               	clrf	(_myMain^(0+128)+12)
  6060  10FB  01BB               	clrf	((_myMain+1)^(0+128)+12)
  6061                           
  6062                           ;Main_B1.c: 278: myMain.Timeout = 1;
  6063  10FC  1539               	bsf	(_myMain^(0+128)+11),2
  6064  10FD  0008               	return
  6065  10FE                     __end_of_Timeout_Counter:	
  6066                           
  6067                           	psect	text22
  6068  1DD1                     __ptext22:	
  6069 ;; *************** function _RF_Main *****************
  6070 ;; Defined at:
  6071 ;;		line 16 in file "../src/RF_Control_B1.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;		None
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;		None
  6076 ;; Return value:  Size  Location     Type
  6077 ;;		None               void
  6078 ;; Registers used:
  6079 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;Total ram usage:        0 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; Hardware stack levels required when called:   13
  6092 ;; This function calls:
  6093 ;;		_setRF_Main
  6094 ;; This function is called by:
  6095 ;;		_main
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           
  6100                           ;psect for function _RF_Main
  6101  1DD1                     _RF_Main:	
  6102                           
  6103                           ;RF_Control_B1.c: 18: setRF_Main();
  6104                           
  6105                           ;incstack = 0
  6106                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6107  1DD1  318E  2621         	fcall	_setRF_Main
  6108  1DD3  0008               	return
  6109  1DD4                     __end_of_RF_Main:	
  6110                           
  6111                           	psect	text23
  6112  0E21                     __ptext23:	
  6113 ;; *************** function _setRF_Main *****************
  6114 ;; Defined at:
  6115 ;;		line 53 in file "../src/RF_Control_B1.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;		None
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;  error           1    1[BANK1 ] unsigned char 
  6120 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6121 ;; Return value:  Size  Location     Type
  6122 ;;		None               void
  6123 ;; Registers used:
  6124 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;Total ram usage:        3 bytes
  6135 ;; Hardware stack levels used:    1
  6136 ;; Hardware stack levels required when called:   12
  6137 ;; This function calls:
  6138 ;;		_CC2500_PowerOnInitial
  6139 ;;		_CC2500_RxData
  6140 ;;		_CC2500_TxData
  6141 ;;		_CC2500_WriteCommand
  6142 ;;		_RF_RxDisable
  6143 ;;		_getBuz_GO
  6144 ;;		_getRF_KeyStatus
  6145 ;;		_getRxData
  6146 ;; This function is called by:
  6147 ;;		_RF_Main
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           
  6152                           ;psect for function _setRF_Main
  6153  0E21                     _setRF_Main:	
  6154                           
  6155                           ;RF_Control_B1.c: 54: char loop_f = 0, error = 0;
  6156                           
  6157                           ;incstack = 0
  6158                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6159  0E21  0021               	movlb	1	; select bank1
  6160  0E22  01EC               	clrf	setRF_Main@loop_f^(0+128)
  6161  0E23  01ED               	clrf	setRF_Main@error^(0+128)
  6162                           
  6163                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6164  0E24  1C20               	btfss	_RF1^(0+128),0
  6165  0E25  2EA3               	goto	l2127
  6166                           
  6167                           ;RF_Control_B1.c: 57: if (getBuz_GO() == 0) {
  6168  0E26  319F  270E  318E   	fcall	_getBuz_GO
  6169  0E29  0020               	movlb	0	; select bank0
  6170  0E2A  0821               	movf	?_getBuz_GO+1,w
  6171  0E2B  0420               	iorwf	?_getBuz_GO,w
  6172  0E2C  1D03               	skipz
  6173  0E2D  2E84               	goto	l9373
  6174                           
  6175                           ;RF_Control_B1.c: 60: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6176  0E2E  319F  271F  318E   	fcall	_getRF_KeyStatus
  6177  0E31  3A01               	xorlw	1
  6178  0E32  3000               	movlw	0
  6179  0E33  1903               	skipnz
  6180  0E34  3001               	movlw	1
  6181  0E35  0020               	movlb	0	; select bank0
  6182  0E36  00ED               	movwf	??_setRF_Main
  6183  0E37  0CED               	rrf	??_setRF_Main,f
  6184  0E38  0CED               	rrf	??_setRF_Main,f
  6185  0E39  0021               	movlb	1	; select bank1
  6186  0E3A  0820               	movf	_RF1^(0+128),w
  6187  0E3B  0020               	movlb	0	; select bank0
  6188  0E3C  066D               	xorwf	??_setRF_Main,w
  6189  0E3D  397F               	andlw	-129
  6190  0E3E  066D               	xorwf	??_setRF_Main,w
  6191  0E3F  0021               	movlb	1	; select bank1
  6192  0E40  00A0               	movwf	_RF1^(0+128)
  6193                           
  6194                           ;RF_Control_B1.c: 65: if (RF1.Key == 0 || RF1.Learn == 1) {
  6195  0E41  1FA0               	btfss	_RF1^(0+128),7
  6196  0E42  2E45               	goto	l2131
  6197  0E43  1F20               	btfss	_RF1^(0+128),6
  6198  0E44  2E84               	goto	l9373
  6199  0E45                     l2131:	
  6200                           
  6201                           ;RF_Control_B1.c: 67: if (RF1.TransceiveGO == 1) {
  6202  0E45  1D20               	btfss	_RF1^(0+128),2
  6203  0E46  2E55               	goto	l2132
  6204                           
  6205                           ;RF_Control_B1.c: 68: RF1.TransceiveGO = 0;
  6206  0E47  1120               	bcf	_RF1^(0+128),2
  6207                           
  6208                           ;RF_Control_B1.c: 69: if (RF1.Learn == 0) {
  6209  0E48  1B20               	btfsc	_RF1^(0+128),6
  6210  0E49  2E84               	goto	l9373
  6211                           
  6212                           ;RF_Control_B1.c: 70: RF1.Count = 0;
  6213  0E4A  01A2               	clrf	(_RF1^(0+128)+2)
  6214  0E4B  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6215                           
  6216                           ;RF_Control_B1.c: 71: RF1.CorrectionCounter = 0;
  6217  0E4C  01AA               	clrf	(_RF1^(0+128)+10)
  6218  0E4D  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6219                           
  6220                           ;RF_Control_B1.c: 72: RF_RxDisable();
  6221  0E4E  319E  26BE  318E   	fcall	_RF_RxDisable
  6222                           
  6223                           ;RF_Control_B1.c: 73: CC2500_TxData();
  6224  0E51  318C  24CC  318E   	fcall	_CC2500_TxData
  6225                           
  6226                           ;RF_Control_B1.c: 75: }
  6227                           ;RF_Control_B1.c: 76: } else {
  6228  0E54  2E84               	goto	l9373
  6229  0E55                     l2132:	
  6230                           
  6231                           ;RF_Control_B1.c: 77: if (RF1.RxStatus == 1) {
  6232  0E55  1DA0               	btfss	_RF1^(0+128),3
  6233  0E56  2E64               	goto	l9359
  6234                           
  6235                           ;RF_Control_B1.c: 79: CC2500_RxData();
  6236  0E57  318B  23FF  318E   	fcall	_CC2500_RxData
  6237                           
  6238                           ;RF_Control_B1.c: 81: if (RF1.ReceiveGO == 1) {
  6239  0E5A  0021               	movlb	1	; select bank1
  6240  0E5B  1CA0               	btfss	_RF1^(0+128),1
  6241  0E5C  2E84               	goto	l9373
  6242                           
  6243                           ;RF_Control_B1.c: 82: RF1.ReceiveGO = 0;
  6244  0E5D  10A0               	bcf	_RF1^(0+128),1
  6245                           
  6246                           ;RF_Control_B1.c: 83: RF1.CorrectionCounter = 0;
  6247  0E5E  01AA               	clrf	(_RF1^(0+128)+10)
  6248  0E5F  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6249                           
  6250                           ;RF_Control_B1.c: 91: getRxData();
  6251  0E60  318D  25A2  318E   	fcall	_getRxData
  6252                           
  6253                           ;RF_Control_B1.c: 94: }
  6254                           ;RF_Control_B1.c: 95: } else {
  6255  0E63  2E84               	goto	l9373
  6256  0E64                     l9359:	
  6257                           
  6258                           ;RF_Control_B1.c: 96: RF1.Count++;
  6259  0E64  3001               	movlw	1
  6260  0E65  0021               	movlb	1	; select bank1
  6261  0E66  07A2               	addwf	(_RF1^(0+128)+2),f
  6262  0E67  3000               	movlw	0
  6263  0E68  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6264                           
  6265                           ;RF_Control_B1.c: 97: if (RF1.Count == RF1.RunTime) {
  6266  0E69  3002               	movlw	2
  6267  0E6A  3EA0               	addlw	_RF1& (0+255)
  6268  0E6B  0086               	movwf	6
  6269  0E6C  0187               	clrf	7
  6270  0E6D  3F40               	moviw [0]fsr1
  6271  0E6E  0627               	xorwf	(_RF1^(0+128)+7),w
  6272  0E6F  1D03               	skipz
  6273  0E70  2E73               	goto	u10345
  6274  0E71  3F41               	moviw [1]fsr1
  6275  0E72  0628               	xorwf	((_RF1+1)^(0+128)+7),w
  6276  0E73                     u10345:	
  6277  0E73  1D03               	skipz
  6278  0E74  2E84               	goto	l9373
  6279                           
  6280                           ;RF_Control_B1.c: 98: RF1.Count = 0;
  6281  0E75  01A2               	clrf	(_RF1^(0+128)+2)
  6282  0E76  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6283                           
  6284                           ;RF_Control_B1.c: 100: RF1.RxStatus = 1;
  6285  0E77  15A0               	bsf	_RF1^(0+128),3
  6286                           
  6287                           ;RF_Control_B1.c: 101: CC2500_WriteCommand(0x36);
  6288  0E78  3036               	movlw	54
  6289  0E79  3191  2141  318E   	fcall	_CC2500_WriteCommand
  6290                           
  6291                           ;RF_Control_B1.c: 102: CC2500_WriteCommand(0x3A);
  6292  0E7C  303A               	movlw	58
  6293  0E7D  3191  2141  318E   	fcall	_CC2500_WriteCommand
  6294                           
  6295                           ;RF_Control_B1.c: 103: CC2500_WriteCommand(0x34);
  6296  0E80  3034               	movlw	52
  6297  0E81  3191  2141  318E   	fcall	_CC2500_WriteCommand
  6298  0E84                     l9373:	
  6299                           
  6300                           ;RF_Control_B1.c: 105: }
  6301                           ;RF_Control_B1.c: 107: }
  6302                           ;RF_Control_B1.c: 108: }
  6303                           ;RF_Control_B1.c: 109: }
  6304                           ;RF_Control_B1.c: 110: }
  6305                           ;RF_Control_B1.c: 112: RF1.CorrectionCounter++;
  6306  0E84  3001               	movlw	1
  6307  0E85  0021               	movlb	1	; select bank1
  6308  0E86  07AA               	addwf	(_RF1^(0+128)+10),f
  6309  0E87  3000               	movlw	0
  6310  0E88  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6311                           
  6312                           ;RF_Control_B1.c: 113: if (RF1.CorrectionCounter > 6000) {
  6313  0E89  3017               	movlw	23
  6314  0E8A  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6315  0E8B  3071               	movlw	113
  6316  0E8C  1903               	skipnz
  6317  0E8D  022A               	subwf	(_RF1^(0+128)+10),w
  6318  0E8E  1C03               	skipc
  6319  0E8F  2E9C               	goto	l9387
  6320                           
  6321                           ;RF_Control_B1.c: 114: RF1.CorrectionCounter = 0;
  6322  0E90  01AA               	clrf	(_RF1^(0+128)+10)
  6323  0E91  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6324                           
  6325                           ;RF_Control_B1.c: 116: RF1.RxStatus = 0;
  6326  0E92  11A0               	bcf	_RF1^(0+128),3
  6327                           
  6328                           ;RF_Control_B1.c: 117: RF1.ReceiveGO = 0;
  6329  0E93  10A0               	bcf	_RF1^(0+128),1
  6330                           
  6331                           ;RF_Control_B1.c: 118: CC2500_WriteCommand(0x36);
  6332  0E94  3036               	movlw	54
  6333  0E95  3191  2141  318E   	fcall	_CC2500_WriteCommand
  6334                           
  6335                           ;RF_Control_B1.c: 119: CC2500_WriteCommand(0x3A);
  6336  0E98  303A               	movlw	58
  6337  0E99  3191  2141  318E   	fcall	_CC2500_WriteCommand
  6338  0E9C                     l9387:	
  6339                           
  6340                           ;RF_Control_B1.c: 120: }
  6341                           ;RF_Control_B1.c: 122: if (RF1.Timeout == 1) {
  6342  0E9C  0021               	movlb	1	; select bank1
  6343  0E9D  1F21               	btfss	(_RF1^(0+128)+1),6
  6344  0E9E  0008               	return
  6345                           
  6346                           ;RF_Control_B1.c: 123: RF1.Timeout = 0;
  6347  0E9F  1321               	bcf	(_RF1^(0+128)+1),6
  6348                           
  6349                           ;RF_Control_B1.c: 124: CC2500_PowerOnInitial();
  6350  0EA0  3190  20D4         	fcall	_CC2500_PowerOnInitial
  6351                           
  6352                           ;RF_Control_B1.c: 125: }
  6353                           ;RF_Control_B1.c: 127: } else {
  6354  0EA2  0008               	return
  6355  0EA3                     l2127:	
  6356                           
  6357                           ;RF_Control_B1.c: 128: if (myMain.PowerON == 1) {
  6358  0EA3  1C2E               	btfss	_myMain^(0+128),0
  6359  0EA4  0008               	return
  6360                           
  6361                           ;RF_Control_B1.c: 129: RF1.Enable = 1;
  6362  0EA5  1420               	bsf	_RF1^(0+128),0
  6363  0EA6  0008               	return
  6364  0EA7                     __end_of_setRF_Main:	
  6365                           
  6366                           	psect	text24
  6367  0DA2                     __ptext24:	
  6368 ;; *************** function _getRxData *****************
  6369 ;; Defined at:
  6370 ;;		line 235 in file "../src/RF_Control_B1.c"
  6371 ;; Parameters:    Size  Location     Type
  6372 ;;		None
  6373 ;; Auto vars:     Size  Location     Type
  6374 ;;  error           1   76[BANK0 ] unsigned char 
  6375 ;; Return value:  Size  Location     Type
  6376 ;;		None               void
  6377 ;; Registers used:
  6378 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6379 ;; Tracked objects:
  6380 ;;		On entry : 0/0
  6381 ;;		On exit  : 0/0
  6382 ;;		Unchanged: 0/0
  6383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6386 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6388 ;;Total ram usage:        2 bytes
  6389 ;; Hardware stack levels used:    1
  6390 ;; Hardware stack levels required when called:   11
  6391 ;; This function calls:
  6392 ;;		_getMain_All_Error_Status
  6393 ;;		_setControl_Lights_Table
  6394 ;;		_setLog_Code
  6395 ;;		_setTxData
  6396 ;; This function is called by:
  6397 ;;		_setRF_Main
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           
  6402                           ;psect for function _getRxData
  6403  0DA2                     _getRxData:	
  6404                           
  6405                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  6406                           
  6407                           ;incstack = 0
  6408                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6409  0DA2  3000               	movlw	0
  6410  0DA3  3191  21AA  318D   	fcall	_getMain_All_Error_Status
  6411  0DA6  0020               	movlb	0	; select bank0
  6412  0DA7  00EB               	movwf	??_getRxData
  6413  0DA8  086B               	movf	??_getRxData,w
  6414  0DA9  00EC               	movwf	getRxData@error
  6415                           
  6416                           ;RF_Control_B1.c: 237: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6417  0DAA  0022               	movlb	2	; select bank2
  6418  0DAB  0820               	movf	_RF_Data^(0+256),w
  6419  0DAC  3AAA               	xorlw	170
  6420  0DAD  1D03               	skipz
  6421  0DAE  2DC0               	goto	l9001
  6422  0DAF  0821               	movf	(_RF_Data^(0+256)+1),w
  6423  0DB0  3A01               	xorlw	1
  6424  0DB1  1D03               	skipz
  6425  0DB2  2DC0               	goto	l9001
  6426                           
  6427                           ;RF_Control_B1.c: 239: product->Data[2] = 0x55;
  6428  0DB3  3055               	movlw	85
  6429  0DB4  0020               	movlb	0	; select bank0
  6430  0DB5  00EB               	movwf	??_getRxData
  6431  0DB6  086E               	movf	_product,w
  6432  0DB7  3E02               	addlw	2
  6433  0DB8  0086               	movwf	6
  6434  0DB9  3002               	movlw	2	; select bank4/5
  6435  0DBA  0087               	movwf	7
  6436  0DBB  086B               	movf	??_getRxData,w
  6437  0DBC  0081               	movwf	1
  6438                           
  6439                           ;RF_Control_B1.c: 240: setTxData();
  6440  0DBD  3185  25FD         	fcall	_setTxData
  6441                           
  6442                           ;RF_Control_B1.c: 246: } else {
  6443  0DBF  0008               	return
  6444  0DC0                     l9001:	
  6445                           
  6446                           ;RF_Control_B1.c: 248: if (error == 0) {
  6447  0DC0  0020               	movlb	0	; select bank0
  6448  0DC1  08EC               	movf	getRxData@error,f
  6449  0DC2  1D03               	skipz
  6450  0DC3  0008               	return
  6451                           
  6452                           ;RF_Control_B1.c: 249: if (RF1.Learn == 1) {
  6453  0DC4  0021               	movlb	1	; select bank1
  6454  0DC5  1F20               	btfss	_RF1^(0+128),6
  6455  0DC6  2DD2               	goto	l9011
  6456                           
  6457                           ;RF_Control_B1.c: 250: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6458  0DC7  0022               	movlb	2	; select bank2
  6459  0DC8  08A0               	movf	_RF_Data^(0+256),f
  6460  0DC9  1D03               	skipz
  6461  0DCA  0008               	return
  6462  0DCB  0821               	movf	(_RF_Data^(0+256)+1),w
  6463  0DCC  3A64               	xorlw	100
  6464  0DCD  1D03               	skipz
  6465  0DCE  0008               	return
  6466                           
  6467                           ;RF_Control_B1.c: 251: setLog_Code();
  6468  0DCF  3194  244E         	fcall	_setLog_Code
  6469                           
  6470                           ;RF_Control_B1.c: 252: }
  6471                           ;RF_Control_B1.c: 253: } else {
  6472  0DD1  0008               	return
  6473  0DD2                     l9011:	
  6474                           
  6475                           ;RF_Control_B1.c: 254: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6476  0DD2  0022               	movlb	2	; select bank2
  6477  0DD3  08A0               	movf	_RF_Data^(0+256),f
  6478  0DD4  1D03               	skipz
  6479  0DD5  2E0C               	goto	l9031
  6480  0DD6  0821               	movf	(_RF_Data^(0+256)+1),w
  6481  0DD7  3A02               	xorlw	2
  6482  0DD8  1D03               	skipz
  6483  0DD9  2E0C               	goto	l9031
  6484                           
  6485                           ;RF_Control_B1.c: 256: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6486  0DDA  082C               	movf	(_RF_Data^(0+256)+12),w
  6487  0DDB  3AFF               	xorlw	255
  6488  0DDC  1D03               	skipz
  6489  0DDD  2DE8               	goto	l9023
  6490  0DDE  082D               	movf	(_RF_Data^(0+256)+13),w
  6491  0DDF  3AFF               	xorlw	255
  6492  0DE0  1D03               	skipz
  6493  0DE1  2DE8               	goto	l9023
  6494  0DE2  082E               	movf	(_RF_Data^(0+256)+14),w
  6495  0DE3  3AFF               	xorlw	255
  6496  0DE4  1D03               	skipz
  6497  0DE5  2DE8               	goto	l9023
  6498                           
  6499                           ;RF_Control_B1.c: 257: __nop();
  6500  0DE6  0000               	nop
  6501                           
  6502                           ;RF_Control_B1.c: 258: } else {
  6503  0DE7  0008               	return
  6504  0DE8                     l9023:	
  6505                           
  6506                           ;RF_Control_B1.c: 259: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6507  0DE8  0020               	movlb	0	; select bank0
  6508  0DE9  086E               	movf	_product,w
  6509  0DEA  3E0C               	addlw	12
  6510  0DEB  0086               	movwf	6
  6511  0DEC  3002               	movlw	2	; select bank4/5
  6512  0DED  0087               	movwf	7
  6513  0DEE  0022               	movlb	2	; select bank2
  6514  0DEF  082C               	movf	(_RF_Data^(0+256)+12),w
  6515  0DF0  0601               	xorwf	1,w
  6516  0DF1  1D03               	skipz
  6517  0DF2  0008               	return
  6518  0DF3  0020               	movlb	0	; select bank0
  6519  0DF4  086E               	movf	_product,w
  6520  0DF5  3E0D               	addlw	13
  6521  0DF6  0086               	movwf	6
  6522  0DF7  3002               	movlw	2	; select bank4/5
  6523  0DF8  0087               	movwf	7
  6524  0DF9  0022               	movlb	2	; select bank2
  6525  0DFA  082D               	movf	(_RF_Data^(0+256)+13),w
  6526  0DFB  0601               	xorwf	1,w
  6527  0DFC  1D03               	skipz
  6528  0DFD  0008               	return
  6529  0DFE  0020               	movlb	0	; select bank0
  6530  0DFF  086E               	movf	_product,w
  6531  0E00  3E0E               	addlw	14
  6532  0E01  0086               	movwf	6
  6533  0E02  3002               	movlw	2	; select bank4/5
  6534  0E03  0087               	movwf	7
  6535  0E04  0022               	movlb	2	; select bank2
  6536  0E05  082E               	movf	(_RF_Data^(0+256)+14),w
  6537  0E06  0601               	xorwf	1,w
  6538  0E07  1D03               	skipz
  6539  0E08  0008               	return
  6540                           
  6541                           ;RF_Control_B1.c: 260: setControl_Lights_Table();
  6542  0E09  318C  2465         	fcall	_setControl_Lights_Table
  6543                           
  6544                           ;RF_Control_B1.c: 261: }
  6545                           ;RF_Control_B1.c: 262: }
  6546                           ;RF_Control_B1.c: 263: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6547  0E0B  0008               	return
  6548  0E0C                     l9031:	
  6549  0E0C  0022               	movlb	2	; select bank2
  6550  0E0D  0820               	movf	_RF_Data^(0+256),w
  6551  0E0E  3AFF               	xorlw	255
  6552  0E0F  1D03               	skipz
  6553  0E10  2E17               	goto	l9037
  6554  0E11  0821               	movf	(_RF_Data^(0+256)+1),w
  6555  0E12  3A02               	xorlw	2
  6556  0E13  1D03               	skipz
  6557  0E14  2E17               	goto	l9037
  6558                           
  6559                           ;RF_Control_B1.c: 264: __nop();
  6560  0E15  0000               	nop
  6561                           
  6562                           ;RF_Control_B1.c: 265: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6563  0E16  0008               	return
  6564  0E17                     l9037:	
  6565  0E17  0022               	movlb	2	; select bank2
  6566  0E18  08A0               	movf	_RF_Data^(0+256),f
  6567  0E19  1D03               	skipz
  6568  0E1A  0008               	return
  6569  0E1B  0821               	movf	(_RF_Data^(0+256)+1),w
  6570  0E1C  3A65               	xorlw	101
  6571  0E1D  1D03               	skipz
  6572  0E1E  0008               	return
  6573                           
  6574                           ;RF_Control_B1.c: 266: __nop();
  6575  0E1F  0000               	nop
  6576                           
  6577                           ;RF_Control_B1.c: 273: ;
  6578                           
  6579                           ;RF_Control_B1.c: 267: }
  6580                           ;RF_Control_B1.c: 271: }
  6581                           ;RF_Control_B1.c: 272: } else {
  6582  0E20  0008               	return
  6583  0E21                     __end_of_getRxData:	
  6584                           
  6585                           	psect	text25
  6586  144E                     __ptext25:	
  6587 ;; *************** function _setLog_Code *****************
  6588 ;; Defined at:
  6589 ;;		line 279 in file "../src/RF_Control_B1.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;		None
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;		None
  6594 ;; Return value:  Size  Location     Type
  6595 ;;		None               void
  6596 ;; Registers used:
  6597 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6606 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6607 ;;Total ram usage:        1 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    6
  6610 ;; This function calls:
  6611 ;;		_setBuz
  6612 ;;		_setMemory_LoopSave
  6613 ;;		_setMemory_Modify
  6614 ;;		_setProductData
  6615 ;; This function is called by:
  6616 ;;		_getRxData
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           
  6621                           ;psect for function _setLog_Code
  6622  144E                     _setLog_Code:	
  6623                           
  6624                           ;RF_Control_B1.c: 280: RF1.Learn = 0;
  6625                           
  6626                           ;incstack = 0
  6627                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6628  144E  0021               	movlb	1	; select bank1
  6629  144F  1320               	bcf	_RF1^(0+128),6
  6630                           
  6631                           ;RF_Control_B1.c: 281: setProductData(12, RF_Data[12]);
  6632  1450  0022               	movlb	2	; select bank2
  6633  1451  082C               	movf	(_RF_Data^(0+256)+12),w
  6634  1452  0020               	movlb	0	; select bank0
  6635  1453  00E1               	movwf	??_setLog_Code
  6636  1454  0861               	movf	??_setLog_Code,w
  6637  1455  00DD               	movwf	setProductData@value
  6638  1456  300C               	movlw	12
  6639  1457  319E  26B0  3194   	fcall	_setProductData
  6640                           
  6641                           ;RF_Control_B1.c: 282: setProductData(13, RF_Data[13]);
  6642  145A  0022               	movlb	2	; select bank2
  6643  145B  082D               	movf	(_RF_Data^(0+256)+13),w
  6644  145C  0020               	movlb	0	; select bank0
  6645  145D  00E1               	movwf	??_setLog_Code
  6646  145E  0861               	movf	??_setLog_Code,w
  6647  145F  00DD               	movwf	setProductData@value
  6648  1460  300D               	movlw	13
  6649  1461  319E  26B0  3194   	fcall	_setProductData
  6650                           
  6651                           ;RF_Control_B1.c: 283: setProductData(14, RF_Data[14]);
  6652  1464  0022               	movlb	2	; select bank2
  6653  1465  082E               	movf	(_RF_Data^(0+256)+14),w
  6654  1466  0020               	movlb	0	; select bank0
  6655  1467  00E1               	movwf	??_setLog_Code
  6656  1468  0861               	movf	??_setLog_Code,w
  6657  1469  00DD               	movwf	setProductData@value
  6658  146A  300E               	movlw	14
  6659  146B  319E  26B0  3194   	fcall	_setProductData
  6660                           
  6661                           ;RF_Control_B1.c: 284: setBuz(1, 100);
  6662  146E  3064               	movlw	100
  6663  146F  0020               	movlb	0	; select bank0
  6664  1470  00A9               	movwf	setBuz@time
  6665  1471  3000               	movlw	0
  6666  1472  00AA               	movwf	setBuz@time+1
  6667  1473  3001               	movlw	1
  6668  1474  3189  217C  3194   	fcall	_setBuz
  6669                           
  6670                           ;RF_Control_B1.c: 285: if (myMain.First == 1) {
  6671  1477  0021               	movlb	1	; select bank1
  6672  1478  1EAE               	btfss	_myMain^(0+128),5
  6673  1479  2C7E               	goto	l2190
  6674                           
  6675                           ;RF_Control_B1.c: 286: setMemory_LoopSave(1);
  6676  147A  3001               	movlw	1
  6677  147B  319F  27C5  3194   	fcall	_setMemory_LoopSave
  6678  147E                     l2190:	
  6679                           
  6680                           ;RF_Control_B1.c: 287: }
  6681                           ;RF_Control_B1.c: 288: setMemory_Modify(1);
  6682  147E  3001               	movlw	1
  6683  147F  319F  27B2         	fcall	_setMemory_Modify
  6684  1481  0008               	return
  6685  1482                     __end_of_setLog_Code:	
  6686                           
  6687                           	psect	text26
  6688  1FC5                     __ptext26:	
  6689 ;; *************** function _setMemory_LoopSave *****************
  6690 ;; Defined at:
  6691 ;;		line 1077 in file "../src/MCU_B1.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;  command         1    wreg     unsigned char 
  6694 ;; Auto vars:     Size  Location     Type
  6695 ;;  command         1    1[BANK0 ] unsigned char 
  6696 ;; Return value:  Size  Location     Type
  6697 ;;		None               void
  6698 ;; Registers used:
  6699 ;;		wreg, status,2, status,0
  6700 ;; Tracked objects:
  6701 ;;		On entry : 0/0
  6702 ;;		On exit  : 0/0
  6703 ;;		Unchanged: 0/0
  6704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;Total ram usage:        2 bytes
  6710 ;; Hardware stack levels used:    1
  6711 ;; Hardware stack levels required when called:    4
  6712 ;; This function calls:
  6713 ;;		Nothing
  6714 ;; This function is called by:
  6715 ;;		_setLog_Code
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           
  6720                           ;psect for function _setMemory_LoopSave
  6721  1FC5                     _setMemory_LoopSave:	
  6722                           
  6723                           ;incstack = 0
  6724                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  6725                           ;setMemory_LoopSave@command stored from wreg
  6726  1FC5  0020               	movlb	0	; select bank0
  6727  1FC6  00A1               	movwf	setMemory_LoopSave@command
  6728                           
  6729                           ;MCU_B1.c: 1078: Memory.LoopSave = command == 1 ? 1 : 0;
  6730  1FC7  0821               	movf	setMemory_LoopSave@command,w
  6731  1FC8  3A01               	xorlw	1
  6732  1FC9  3000               	movlw	0
  6733  1FCA  1903               	skipnz
  6734  1FCB  3001               	movlw	1
  6735  1FCC  00A0               	movwf	??_setMemory_LoopSave
  6736  1FCD  0DA0               	rlf	??_setMemory_LoopSave,f
  6737  1FCE  0DA0               	rlf	??_setMemory_LoopSave,f
  6738  1FCF  0023               	movlb	3	; select bank3
  6739  1FD0  0844               	movf	(_Memory^(0+384)+36),w
  6740  1FD1  0020               	movlb	0	; select bank0
  6741  1FD2  0620               	xorwf	??_setMemory_LoopSave,w
  6742  1FD3  39FB               	andlw	-5
  6743  1FD4  0620               	xorwf	??_setMemory_LoopSave,w
  6744  1FD5  0023               	movlb	3	; select bank3
  6745  1FD6  00C4               	movwf	(_Memory^(0+384)+36)
  6746  1FD7  0008               	return
  6747  1FD8                     __end_of_setMemory_LoopSave:	
  6748                           
  6749                           	psect	text27
  6750  0C65                     __ptext27:	
  6751 ;; *************** function _setControl_Lights_Table *****************
  6752 ;; Defined at:
  6753 ;;		line 292 in file "../src/RF_Control_B1.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;		None
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;		None
  6758 ;; Return value:  Size  Location     Type
  6759 ;;		None               void
  6760 ;; Registers used:
  6761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;Total ram usage:        0 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:   10
  6774 ;; This function calls:
  6775 ;;		_setBuz
  6776 ;;		_setDimmerLights_ErrorClose
  6777 ;;		_setProductData
  6778 ;;		_setRFSW_AdjControl
  6779 ;;		_setRFSW_Control
  6780 ;;		_setTxData
  6781 ;; This function is called by:
  6782 ;;		_getRxData
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           
  6787                           ;psect for function _setControl_Lights_Table
  6788  0C65                     _setControl_Lights_Table:	
  6789                           
  6790                           ;RF_Control_B1.c: 293: switch (RF_Data[15]) {
  6791                           
  6792                           ;incstack = 0
  6793                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6794  0C65  2CB0               	goto	l8681
  6795  0C66                     l8665:	
  6796                           ;RF_Control_B1.c: 294: case 0x00:
  6797                           
  6798                           
  6799                           ;RF_Control_B1.c: 296: setDimmerLights_ErrorClose(255);
  6800  0C66  30FF               	movlw	255
  6801  0C67  318A  2289  318C   	fcall	_setDimmerLights_ErrorClose
  6802                           
  6803                           ;RF_Control_B1.c: 298: setProductData(9, 0);
  6804  0C6A  0020               	movlb	0	; select bank0
  6805  0C6B  01DD               	clrf	setProductData@value
  6806  0C6C  3009               	movlw	9
  6807  0C6D  319E  26B0  318C   	fcall	_setProductData
  6808                           
  6809                           ;RF_Control_B1.c: 299: setProductData(11, 0);
  6810  0C70  0020               	movlb	0	; select bank0
  6811  0C71  01DD               	clrf	setProductData@value
  6812  0C72  300B               	movlw	11
  6813  0C73  319E  26B0  318C   	fcall	_setProductData
  6814                           
  6815                           ;RF_Control_B1.c: 300: setProductData(15, 0);
  6816  0C76  0020               	movlb	0	; select bank0
  6817  0C77  01DD               	clrf	setProductData@value
  6818  0C78  300F               	movlw	15
  6819  0C79  319E  26B0  318C   	fcall	_setProductData
  6820                           
  6821                           ;RF_Control_B1.c: 301: setProductData(17, 0);
  6822  0C7C  0020               	movlb	0	; select bank0
  6823  0C7D  01DD               	clrf	setProductData@value
  6824  0C7E  3011               	movlw	17
  6825  0C7F  319E  26B0  318C   	fcall	_setProductData
  6826                           
  6827                           ;RF_Control_B1.c: 302: setBuz(1, 100);
  6828  0C82  3064               	movlw	100
  6829  0C83  0020               	movlb	0	; select bank0
  6830  0C84  00A9               	movwf	setBuz@time
  6831  0C85  3000               	movlw	0
  6832  0C86  00AA               	movwf	setBuz@time+1
  6833  0C87  3001               	movlw	1
  6834  0C88  3189  217C         	fcall	_setBuz
  6835                           
  6836                           ;RF_Control_B1.c: 304: break;
  6837  0C8A  0008               	return
  6838  0C8B                     l8669:	
  6839                           ;RF_Control_B1.c: 305: case 0x20:
  6840                           
  6841                           
  6842                           ;RF_Control_B1.c: 306: setProductData(9, 0);
  6843  0C8B  0020               	movlb	0	; select bank0
  6844  0C8C  01DD               	clrf	setProductData@value
  6845  0C8D  3009               	movlw	9
  6846  0C8E  319E  26B0  318C   	fcall	_setProductData
  6847                           
  6848                           ;RF_Control_B1.c: 307: setProductData(11, 0);
  6849  0C91  0020               	movlb	0	; select bank0
  6850  0C92  01DD               	clrf	setProductData@value
  6851  0C93  300B               	movlw	11
  6852  0C94  319E  26B0  318C   	fcall	_setProductData
  6853                           
  6854                           ;RF_Control_B1.c: 308: setProductData(17, 0);
  6855  0C97  0020               	movlb	0	; select bank0
  6856  0C98  01DD               	clrf	setProductData@value
  6857  0C99  3011               	movlw	17
  6858  0C9A  319E  26B0  318C   	fcall	_setProductData
  6859                           
  6860                           ;RF_Control_B1.c: 309: setTxData();
  6861  0C9D  3185  25FD         	fcall	_setTxData
  6862                           
  6863                           ;RF_Control_B1.c: 310: break;
  6864  0C9F  0008               	return
  6865  0CA0                     l8671:	
  6866                           ;RF_Control_B1.c: 311: case 0x01:
  6867                           
  6868                           
  6869                           ;RF_Control_B1.c: 313: setRFSW_Control(1);
  6870  0CA0  3001               	movlw	1
  6871  0CA1  3197  2761         	fcall	_setRFSW_Control
  6872                           
  6873                           ;RF_Control_B1.c: 315: break;
  6874  0CA3  0008               	return
  6875  0CA4                     l8673:	
  6876                           ;RF_Control_B1.c: 316: case 0x02:
  6877                           
  6878                           
  6879                           ;RF_Control_B1.c: 318: setRFSW_Control(2);
  6880  0CA4  3002               	movlw	2
  6881  0CA5  3197  2761         	fcall	_setRFSW_Control
  6882                           
  6883                           ;RF_Control_B1.c: 325: break;
  6884                           
  6885                           ;RF_Control_B1.c: 321: case 0x03:
  6886                           
  6887                           ;RF_Control_B1.c: 320: break;
  6888  0CA7  0008               	return
  6889  0CA8                     l8675:	
  6890                           ;RF_Control_B1.c: 326: case 0x11:
  6891                           
  6892                           
  6893                           ;RF_Control_B1.c: 329: setRFSW_AdjControl(1);
  6894  0CA8  3001               	movlw	1
  6895  0CA9  3195  2532         	fcall	_setRFSW_AdjControl
  6896                           
  6897                           ;RF_Control_B1.c: 332: break;
  6898  0CAB  0008               	return
  6899  0CAC                     l8677:	
  6900                           ;RF_Control_B1.c: 333: case 0x21:
  6901                           
  6902                           
  6903                           ;RF_Control_B1.c: 336: setRFSW_AdjControl(2);
  6904  0CAC  3002               	movlw	2
  6905  0CAD  3195  2532         	fcall	_setRFSW_AdjControl
  6906                           
  6907                           ;RF_Control_B1.c: 347: }
  6908                           
  6909                           ;RF_Control_B1.c: 346: break;
  6910                           
  6911                           ;RF_Control_B1.c: 340: case 0x31:
  6912                           
  6913                           ;RF_Control_B1.c: 339: break;
  6914  0CAF  0008               	return
  6915  0CB0                     l8681:	
  6916  0CB0  0022               	movlb	2	; select bank2
  6917  0CB1  082F               	movf	(_RF_Data^(0+256)+15),w
  6918                           
  6919                           ; Switch size 1, requested type "space"
  6920                           ; Number of cases is 8, Range of values is 0 to 49
  6921                           ; switch strategies available:
  6922                           ; Name         Instructions Cycles
  6923                           ; simple_byte           25    13 (average)
  6924                           ; direct_byte          106     6 (fixed)
  6925                           ; jumptable            260     6 (fixed)
  6926                           ;	Chosen strategy is simple_byte
  6927  0CB2  3A00               	xorlw	0	; case 0
  6928  0CB3  1903               	skipnz
  6929  0CB4  2C66               	goto	l8665
  6930  0CB5  3A01               	xorlw	1	; case 1
  6931  0CB6  1903               	skipnz
  6932  0CB7  2CA0               	goto	l8671
  6933  0CB8  3A03               	xorlw	3	; case 2
  6934  0CB9  1903               	skipnz
  6935  0CBA  2CA4               	goto	l8673
  6936  0CBB  3A01               	xorlw	1	; case 3
  6937  0CBC  1903               	skipnz
  6938  0CBD  2CCB               	goto	l2204
  6939  0CBE  3A12               	xorlw	18	; case 17
  6940  0CBF  1903               	skipnz
  6941  0CC0  2CA8               	goto	l8675
  6942  0CC1  3A31               	xorlw	49	; case 32
  6943  0CC2  1903               	skipnz
  6944  0CC3  2C8B               	goto	l8669
  6945  0CC4  3A01               	xorlw	1	; case 33
  6946  0CC5  1903               	skipnz
  6947  0CC6  2CAC               	goto	l8677
  6948  0CC7  3A10               	xorlw	16	; case 49
  6949  0CC8  1903               	skipnz
  6950  0CC9  2CCB               	goto	l2204
  6951  0CCA  2CCB               	goto	l2204
  6952  0CCB                     l2204:	
  6953  0CCB  0008               	return
  6954  0CCC                     __end_of_setControl_Lights_Table:	
  6955                           
  6956                           	psect	text28
  6957  1761                     __ptext28:	
  6958 ;; *************** function _setRFSW_Control *****************
  6959 ;; Defined at:
  6960 ;;		line 374 in file "../src/RF_Control_B1.c"
  6961 ;; Parameters:    Size  Location     Type
  6962 ;;  sw              1    wreg     unsigned char 
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;  sw              1   72[BANK0 ] unsigned char 
  6965 ;;  status          1   71[BANK0 ] unsigned char 
  6966 ;; Return value:  Size  Location     Type
  6967 ;;		None               void
  6968 ;; Registers used:
  6969 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6970 ;; Tracked objects:
  6971 ;;		On entry : 0/0
  6972 ;;		On exit  : 0/0
  6973 ;;		Unchanged: 0/0
  6974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6976 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6978 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;Total ram usage:        3 bytes
  6980 ;; Hardware stack levels used:    1
  6981 ;; Hardware stack levels required when called:    8
  6982 ;; This function calls:
  6983 ;;		_getDelayOff_GO
  6984 ;;		_getDimmerLights_Status
  6985 ;;		_setBuz
  6986 ;;		_setDelayOff_GO
  6987 ;;		_setDimmerLights_SwOff
  6988 ;;		_setDimmerLights_SwOn
  6989 ;;		_setRF_DimmerLights
  6990 ;;		_setTxData
  6991 ;; This function is called by:
  6992 ;;		_setControl_Lights_Table
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           
  6997                           ;psect for function _setRFSW_Control
  6998  1761                     _setRFSW_Control:	
  6999                           
  7000                           ;incstack = 0
  7001                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7002                           ;setRFSW_Control@sw stored from wreg
  7003  1761  0020               	movlb	0	; select bank0
  7004  1762  00E8               	movwf	setRFSW_Control@sw
  7005                           
  7006                           ;RF_Control_B1.c: 375: char status = 0;
  7007  1763  01E7               	clrf	setRFSW_Control@status
  7008                           
  7009                           ;RF_Control_B1.c: 378: if (RF_Data[16] == 0x80) {
  7010  1764  0022               	movlb	2	; select bank2
  7011  1765  0830               	movf	(_RF_Data^(0+256)+16),w
  7012  1766  3A80               	xorlw	128
  7013  1767  1D03               	skipz
  7014  1768  2F94               	goto	l8451
  7015                           
  7016                           ;RF_Control_B1.c: 379: setDelayOff_GO(sw, 1, RF_Data[17]);
  7017  1769  0020               	movlb	0	; select bank0
  7018  176A  01E1               	clrf	setDelayOff_GO@command
  7019  176B  0AE1               	incf	setDelayOff_GO@command,f
  7020  176C  0022               	movlb	2	; select bank2
  7021  176D  0831               	movf	(_RF_Data^(0+256)+17),w
  7022  176E  0020               	movlb	0	; select bank0
  7023  176F  00E6               	movwf	??_setRFSW_Control
  7024  1770  0866               	movf	??_setRFSW_Control,w
  7025  1771  00E2               	movwf	setDelayOff_GO@value
  7026  1772  0868               	movf	setRFSW_Control@sw,w
  7027  1773  3188  207D  3197   	fcall	_setDelayOff_GO
  7028                           
  7029                           ;RF_Control_B1.c: 380: if (getDimmerLights_Status(sw) == 1) {
  7030  1776  0020               	movlb	0	; select bank0
  7031  1777  0868               	movf	setRFSW_Control@sw,w
  7032  1778  319E  26EC  3197   	fcall	_getDimmerLights_Status
  7033  177B  3A01               	xorlw	1
  7034  177C  1D03               	skipz
  7035  177D  2FA3               	goto	l8455
  7036                           
  7037                           ;RF_Control_B1.c: 381: setBuz(1, 100);
  7038  177E  3064               	movlw	100
  7039  177F  0020               	movlb	0	; select bank0
  7040  1780  00A9               	movwf	setBuz@time
  7041  1781  3000               	movlw	0
  7042  1782  00AA               	movwf	setBuz@time+1
  7043  1783  3001               	movlw	1
  7044  1784  3189  217C  3197   	fcall	_setBuz
  7045                           
  7046                           ;RF_Control_B1.c: 382: status = 1;
  7047  1787  0020               	movlb	0	; select bank0
  7048  1788  01E7               	clrf	setRFSW_Control@status
  7049  1789  0AE7               	incf	setRFSW_Control@status,f
  7050                           
  7051                           ;RF_Control_B1.c: 383: setRF_DimmerLights(sw, 1);
  7052  178A  01E1               	clrf	setRF_DimmerLights@on
  7053  178B  0AE1               	incf	setRF_DimmerLights@on,f
  7054  178C  0868               	movf	setRFSW_Control@sw,w
  7055  178D  3189  21D5  3197   	fcall	_setRF_DimmerLights
  7056                           
  7057                           ;RF_Control_B1.c: 384: setTxData();
  7058  1790  3185  25FD  3197   	fcall	_setTxData
  7059                           
  7060                           ;RF_Control_B1.c: 385: }
  7061                           ;RF_Control_B1.c: 386: } else {
  7062  1793  2FA3               	goto	l8455
  7063  1794                     l8451:	
  7064                           
  7065                           ;RF_Control_B1.c: 388: if (getDelayOff_GO(sw) == 1) {
  7066  1794  0020               	movlb	0	; select bank0
  7067  1795  0868               	movf	setRFSW_Control@sw,w
  7068  1796  319E  26DC  3197   	fcall	_getDelayOff_GO
  7069  1799  3A01               	xorlw	1
  7070  179A  1D03               	skipz
  7071  179B  2FA3               	goto	l8455
  7072                           
  7073                           ;RF_Control_B1.c: 389: setDelayOff_GO(sw, 0, 0);
  7074  179C  0020               	movlb	0	; select bank0
  7075  179D  01E1               	clrf	setDelayOff_GO@command
  7076  179E  01E2               	clrf	setDelayOff_GO@value
  7077  179F  0868               	movf	setRFSW_Control@sw,w
  7078  17A0  3188  207D  3197   	fcall	_setDelayOff_GO
  7079  17A3                     l8455:	
  7080                           
  7081                           ;RF_Control_B1.c: 390: }
  7082                           ;RF_Control_B1.c: 392: }
  7083                           ;RF_Control_B1.c: 393: if (status == 0) {
  7084  17A3  0020               	movlb	0	; select bank0
  7085  17A4  08E7               	movf	setRFSW_Control@status,f
  7086  17A5  1D03               	skipz
  7087  17A6  0008               	return
  7088                           
  7089                           ;RF_Control_B1.c: 395: setDimmerLights_SwOn(sw);
  7090  17A7  0868               	movf	setRFSW_Control@sw,w
  7091  17A8  318A  22E5  3197   	fcall	_setDimmerLights_SwOn
  7092                           
  7093                           ;RF_Control_B1.c: 396: setDimmerLights_SwOff(sw);
  7094  17AB  0020               	movlb	0	; select bank0
  7095  17AC  0868               	movf	setRFSW_Control@sw,w
  7096  17AD  3197  2712         	fcall	_setDimmerLights_SwOff
  7097  17AF  0008               	return
  7098  17B0                     __end_of_setRFSW_Control:	
  7099                           
  7100                           	psect	text29
  7101  0AE5                     __ptext29:	
  7102 ;; *************** function _setDimmerLights_SwOn *****************
  7103 ;; Defined at:
  7104 ;;		line 425 in file "../src/Dimmer_B1.c"
  7105 ;; Parameters:    Size  Location     Type
  7106 ;;  sw              1    wreg     unsigned char 
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;  sw              1   17[BANK0 ] unsigned char 
  7109 ;;  idle            1   16[BANK0 ] unsigned char 
  7110 ;; Return value:  Size  Location     Type
  7111 ;;		None               void
  7112 ;; Registers used:
  7113 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7114 ;; Tracked objects:
  7115 ;;		On entry : 0/0
  7116 ;;		On exit  : 0/0
  7117 ;;		Unchanged: 0/0
  7118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7120 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7122 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7123 ;;Total ram usage:        5 bytes
  7124 ;; Hardware stack levels used:    1
  7125 ;; Hardware stack levels required when called:    6
  7126 ;; This function calls:
  7127 ;;		_DimmerLightsPointSelect
  7128 ;;		_setBuz
  7129 ;; This function is called by:
  7130 ;;		_setRFSW_Control
  7131 ;;		_setSw_Main
  7132 ;; This function uses a non-reentrant model
  7133 ;;
  7134                           
  7135                           
  7136                           ;psect for function _setDimmerLights_SwOn
  7137  0AE5                     _setDimmerLights_SwOn:	
  7138                           
  7139                           ;incstack = 0
  7140                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7141                           ;setDimmerLights_SwOn@sw stored from wreg
  7142  0AE5  0020               	movlb	0	; select bank0
  7143  0AE6  00B1               	movwf	setDimmerLights_SwOn@sw
  7144                           
  7145                           ;Dimmer_B1.c: 426: DimmerLightsPointSelect(sw);
  7146  0AE7  0831               	movf	setDimmerLights_SwOn@sw,w
  7147  0AE8  319F  2779  318A   	fcall	_DimmerLightsPointSelect
  7148                           
  7149                           ;Dimmer_B1.c: 427: char idle = 0;
  7150  0AEB  0020               	movlb	0	; select bank0
  7151  0AEC  01B0               	clrf	setDimmerLights_SwOn@idle
  7152                           
  7153                           ;Dimmer_B1.c: 430: if (idle == 0) {
  7154  0AED  08B0               	movf	setDimmerLights_SwOn@idle,f
  7155  0AEE  1D03               	skipz
  7156  0AEF  2B10               	goto	l8227
  7157                           
  7158                           ;Dimmer_B1.c: 431: if (sw == 1) {
  7159  0AF0  0831               	movf	setDimmerLights_SwOn@sw,w
  7160  0AF1  3A01               	xorlw	1
  7161  0AF2  1D03               	skipz
  7162  0AF3  2AFF               	goto	l8217
  7163                           
  7164                           ;Dimmer_B1.c: 432: idle = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1 
      +                          : 0;
  7165  0AF4  01AE               	clrf	_setDimmerLights_SwOn$2142
  7166  0AF5  0AAE               	incf	_setDimmerLights_SwOn$2142,f
  7167  0AF6  0022               	movlb	2	; select bank2
  7168  0AF7  1DDC               	btfss	(_DimmerLights2^(0+256)+10),3
  7169  0AF8  1B53               	btfsc	(_DimmerLights2^(0+256)+1),6
  7170  0AF9  2AFC               	goto	l8215
  7171  0AFA  0020               	movlb	0	; select bank0
  7172  0AFB  01AE               	clrf	_setDimmerLights_SwOn$2142
  7173  0AFC                     l8215:	
  7174  0AFC  0020               	movlb	0	; select bank0
  7175  0AFD  082E               	movf	_setDimmerLights_SwOn$2142,w
  7176  0AFE  2B0D               	goto	L2
  7177  0AFF                     l8217:	
  7178                           ;Dimmer_B1.c: 433: } else if (sw == 2) {
  7179                           
  7180  0AFF  0831               	movf	setDimmerLights_SwOn@sw,w
  7181  0B00  3A02               	xorlw	2
  7182  0B01  1D03               	skipz
  7183  0B02  2B10               	goto	l8227
  7184                           
  7185                           ;Dimmer_B1.c: 434: idle = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1 
      +                          : 0;
  7186  0B03  01AF               	clrf	_setDimmerLights_SwOn$2143
  7187  0B04  0AAF               	incf	_setDimmerLights_SwOn$2143,f
  7188  0B05  0022               	movlb	2	; select bank2
  7189  0B06  1DCB               	btfss	(_DimmerLights1^(0+256)+10),3
  7190  0B07  1B42               	btfsc	(_DimmerLights1^(0+256)+1),6
  7191  0B08  2B0B               	goto	l8225
  7192  0B09  0020               	movlb	0	; select bank0
  7193  0B0A  01AF               	clrf	_setDimmerLights_SwOn$2143
  7194  0B0B                     l8225:	
  7195  0B0B  0020               	movlb	0	; select bank0
  7196  0B0C  082F               	movf	_setDimmerLights_SwOn$2143,w
  7197  0B0D                     L2:	
  7198  0B0D  00AD               	movwf	??_setDimmerLights_SwOn
  7199  0B0E  082D               	movf	??_setDimmerLights_SwOn,w
  7200  0B0F  00B0               	movwf	setDimmerLights_SwOn@idle
  7201  0B10                     l8227:	
  7202                           
  7203                           ;Dimmer_B1.c: 435: }
  7204                           ;Dimmer_B1.c: 436: }
  7205                           ;Dimmer_B1.c: 456: if (idle == 0) {
  7206  0B10  08B0               	movf	setDimmerLights_SwOn@idle,f
  7207  0B11  1D03               	skipz
  7208  0B12  0008               	return
  7209                           
  7210                           ;Dimmer_B1.c: 457: DimmerLights->SwFlag = 1;
  7211  0B13  086F               	movf	_DimmerLights,w
  7212  0B14  3E0B               	addlw	11
  7213  0B15  0086               	movwf	6
  7214  0B16  3001               	movlw	1	; select bank2/3
  7215  0B17  0087               	movwf	7
  7216  0B18  1481               	bsf	1,1
  7217                           
  7218                           ;Dimmer_B1.c: 458: if (DimmerLights->Status == 0) {
  7219  0B19  086F               	movf	_DimmerLights,w
  7220  0B1A  3E02               	addlw	2
  7221  0B1B  0086               	movwf	6
  7222  0B1C  3001               	movlw	1	; select bank2/3
  7223  0B1D  0087               	movwf	7
  7224  0B1E  1881               	btfsc	1,1
  7225  0B1F  2B33               	goto	l8233
  7226                           
  7227                           ;Dimmer_B1.c: 459: DimmerLights->Status = 1;
  7228  0B20  086F               	movf	_DimmerLights,w
  7229  0B21  3E02               	addlw	2
  7230  0B22  0086               	movwf	6
  7231  0B23  3001               	movlw	1	; select bank2/3
  7232  0B24  0087               	movwf	7
  7233  0B25  1481               	bsf	1,1
  7234                           
  7235                           ;Dimmer_B1.c: 460: DimmerLights->Trigger = 1;
  7236  0B26  086F               	movf	_DimmerLights,w
  7237  0B27  3E0A               	addlw	10
  7238  0B28  0086               	movwf	6
  7239  0B29  3001               	movlw	1	; select bank2/3
  7240  0B2A  0087               	movwf	7
  7241  0B2B  1481               	bsf	1,1
  7242                           
  7243                           ;Dimmer_B1.c: 461: DimmerLights->Switch = 1;
  7244  0B2C  086F               	movf	_DimmerLights,w
  7245  0B2D  3E0A               	addlw	10
  7246  0B2E  0086               	movwf	6
  7247  0B2F  3001               	movlw	1	; select bank2/3
  7248  0B30  0087               	movwf	7
  7249  0B31  1401               	bsf	1,0
  7250                           
  7251                           ;Dimmer_B1.c: 462: } else {
  7252  0B32  2B39               	goto	l8235
  7253  0B33                     l8233:	
  7254                           
  7255                           ;Dimmer_B1.c: 463: DimmerLights->Status = 0;
  7256  0B33  086F               	movf	_DimmerLights,w
  7257  0B34  3E02               	addlw	2
  7258  0B35  0086               	movwf	6
  7259  0B36  3001               	movlw	1	; select bank2/3
  7260  0B37  0087               	movwf	7
  7261  0B38  1081               	bcf	1,1
  7262  0B39                     l8235:	
  7263                           
  7264                           ;Dimmer_B1.c: 464: }
  7265                           ;Dimmer_B1.c: 465: setBuz(1, 100);
  7266  0B39  3064               	movlw	100
  7267  0B3A  00A9               	movwf	setBuz@time
  7268  0B3B  3000               	movlw	0
  7269  0B3C  00AA               	movwf	setBuz@time+1
  7270  0B3D  3001               	movlw	1
  7271  0B3E  3189  217C         	fcall	_setBuz
  7272  0B40  0008               	return
  7273  0B41                     __end_of_setDimmerLights_SwOn:	
  7274                           
  7275                           	psect	text30
  7276  1532                     __ptext30:	
  7277 ;; *************** function _setRFSW_AdjControl *****************
  7278 ;; Defined at:
  7279 ;;		line 402 in file "../src/RF_Control_B1.c"
  7280 ;; Parameters:    Size  Location     Type
  7281 ;;  sw              1    wreg     unsigned char 
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;  sw              1   70[BANK0 ] unsigned char 
  7284 ;;  status          1   69[BANK0 ] unsigned char 
  7285 ;; Return value:  Size  Location     Type
  7286 ;;		None               void
  7287 ;; Registers used:
  7288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7289 ;; Tracked objects:
  7290 ;;		On entry : 0/0
  7291 ;;		On exit  : 0/0
  7292 ;;		Unchanged: 0/0
  7293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7295 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7296 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7297 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7298 ;;Total ram usage:        4 bytes
  7299 ;; Hardware stack levels used:    1
  7300 ;; Hardware stack levels required when called:    9
  7301 ;; This function calls:
  7302 ;;		_getDimmerLights_Status
  7303 ;;		_setMemory_Modify
  7304 ;;		_setProductData
  7305 ;;		_setRF_DimmerValue
  7306 ;;		_setTxData
  7307 ;; This function is called by:
  7308 ;;		_setControl_Lights_Table
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           
  7313                           ;psect for function _setRFSW_AdjControl
  7314  1532                     _setRFSW_AdjControl:	
  7315                           
  7316                           ;incstack = 0
  7317                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7318                           ;setRFSW_AdjControl@sw stored from wreg
  7319  1532  0020               	movlb	0	; select bank0
  7320  1533  00E6               	movwf	setRFSW_AdjControl@sw
  7321                           
  7322                           ;RF_Control_B1.c: 403: char status = 0;
  7323  1534  01E5               	clrf	setRFSW_AdjControl@status
  7324                           
  7325                           ;RF_Control_B1.c: 405: status = getDimmerLights_Status(sw);
  7326  1535  0866               	movf	setRFSW_AdjControl@sw,w
  7327  1536  319E  26EC  3195   	fcall	_getDimmerLights_Status
  7328  1539  0020               	movlb	0	; select bank0
  7329  153A  00E3               	movwf	??_setRFSW_AdjControl
  7330  153B  0863               	movf	??_setRFSW_AdjControl,w
  7331  153C  00E5               	movwf	setRFSW_AdjControl@status
  7332                           
  7333                           ;RF_Control_B1.c: 408: if (status == 1) {
  7334  153D  0865               	movf	setRFSW_AdjControl@status,w
  7335  153E  3A01               	xorlw	1
  7336  153F  1D03               	skipz
  7337  1540  2D4B               	goto	l8469
  7338                           
  7339                           ;RF_Control_B1.c: 409: setMemory_Modify(1);
  7340  1541  3001               	movlw	1
  7341  1542  319F  27B2  3195   	fcall	_setMemory_Modify
  7342                           
  7343                           ;RF_Control_B1.c: 410: setRF_DimmerValue(sw);
  7344  1545  0020               	movlb	0	; select bank0
  7345  1546  0866               	movf	setRFSW_AdjControl@sw,w
  7346  1547  3193  23EE  3195   	fcall	_setRF_DimmerValue
  7347                           
  7348                           ;RF_Control_B1.c: 411: } else {
  7349  154A  2D5C               	goto	l2216
  7350  154B                     l8469:	
  7351                           
  7352                           ;RF_Control_B1.c: 412: setProductData(9, product->Data[20 + sw]);
  7353  154B  0020               	movlb	0	; select bank0
  7354  154C  0866               	movf	setRFSW_AdjControl@sw,w
  7355  154D  3E14               	addlw	20
  7356  154E  076E               	addwf	_product,w
  7357  154F  00E3               	movwf	??_setRFSW_AdjControl
  7358  1550  0863               	movf	??_setRFSW_AdjControl,w
  7359  1551  0086               	movwf	6
  7360  1552  3002               	movlw	2	; select bank4/5
  7361  1553  0087               	movwf	7
  7362  1554  0801               	movf	1,w
  7363  1555  00E4               	movwf	??_setRFSW_AdjControl+1
  7364  1556  0864               	movf	??_setRFSW_AdjControl+1,w
  7365  1557  00DD               	movwf	setProductData@value
  7366  1558  3009               	movlw	9
  7367  1559  319E  26B0  3195   	fcall	_setProductData
  7368  155C                     l2216:	
  7369                           
  7370                           ;RF_Control_B1.c: 413: }
  7371                           ;RF_Control_B1.c: 414: setProductData(17, product->Data[26 + sw]);
  7372  155C  0020               	movlb	0	; select bank0
  7373  155D  0866               	movf	setRFSW_AdjControl@sw,w
  7374  155E  3E1A               	addlw	26
  7375  155F  076E               	addwf	_product,w
  7376  1560  00E3               	movwf	??_setRFSW_AdjControl
  7377  1561  0863               	movf	??_setRFSW_AdjControl,w
  7378  1562  0086               	movwf	6
  7379  1563  3002               	movlw	2	; select bank4/5
  7380  1564  0087               	movwf	7
  7381  1565  0801               	movf	1,w
  7382  1566  00E4               	movwf	??_setRFSW_AdjControl+1
  7383  1567  0864               	movf	??_setRFSW_AdjControl+1,w
  7384  1568  00DD               	movwf	setProductData@value
  7385  1569  3011               	movlw	17
  7386  156A  319E  26B0  3195   	fcall	_setProductData
  7387                           
  7388                           ;RF_Control_B1.c: 415: setTxData();
  7389  156D  3185  25FD         	fcall	_setTxData
  7390  156F  0008               	return
  7391  1570                     __end_of_setRFSW_AdjControl:	
  7392                           
  7393                           	psect	text31
  7394  13EE                     __ptext31:	
  7395 ;; *************** function _setRF_DimmerValue *****************
  7396 ;; Defined at:
  7397 ;;		line 420 in file "../src/RF_Control_B1.c"
  7398 ;; Parameters:    Size  Location     Type
  7399 ;;  lights          1    wreg     unsigned char 
  7400 ;; Auto vars:     Size  Location     Type
  7401 ;;  lights          1   66[BANK0 ] unsigned char 
  7402 ;; Return value:  Size  Location     Type
  7403 ;;		None               void
  7404 ;; Registers used:
  7405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7406 ;; Tracked objects:
  7407 ;;		On entry : 0/0
  7408 ;;		On exit  : 0/0
  7409 ;;		Unchanged: 0/0
  7410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;Total ram usage:        2 bytes
  7416 ;; Hardware stack levels used:    1
  7417 ;; Hardware stack levels required when called:    8
  7418 ;; This function calls:
  7419 ;;		_setDimmerLights_AdjRF
  7420 ;;		_setProductData
  7421 ;; This function is called by:
  7422 ;;		_setRFSW_AdjControl
  7423 ;; This function uses a non-reentrant model
  7424 ;;
  7425                           
  7426                           
  7427                           ;psect for function _setRF_DimmerValue
  7428  13EE                     _setRF_DimmerValue:	
  7429                           
  7430                           ;incstack = 0
  7431                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7432                           ;setRF_DimmerValue@lights stored from wreg
  7433  13EE  0020               	movlb	0	; select bank0
  7434  13EF  00E2               	movwf	setRF_DimmerValue@lights
  7435                           
  7436                           ;RF_Control_B1.c: 421: if (RF_Data[9] > 0x64) {
  7437  13F0  3065               	movlw	101
  7438  13F1  0022               	movlb	2	; select bank2
  7439  13F2  0229               	subwf	(_RF_Data^(0+256)+9),w
  7440  13F3  1C03               	skipc
  7441  13F4  2BFB               	goto	l8329
  7442                           
  7443                           ;RF_Control_B1.c: 422: RF_Data[9] = 0x64;
  7444  13F5  3064               	movlw	100
  7445  13F6  0020               	movlb	0	; select bank0
  7446  13F7  00E1               	movwf	??_setRF_DimmerValue
  7447  13F8  0861               	movf	??_setRF_DimmerValue,w
  7448  13F9  0022               	movlb	2	; select bank2
  7449  13FA  00A9               	movwf	(_RF_Data^(0+256)+9)
  7450  13FB                     l8329:	
  7451                           
  7452                           ;RF_Control_B1.c: 423: }
  7453                           ;RF_Control_B1.c: 424: setProductData(9, RF_Data[9]);
  7454  13FB  0829               	movf	(_RF_Data^(0+256)+9),w
  7455  13FC  0020               	movlb	0	; select bank0
  7456  13FD  00E1               	movwf	??_setRF_DimmerValue
  7457  13FE  0861               	movf	??_setRF_DimmerValue,w
  7458  13FF  00DD               	movwf	setProductData@value
  7459  1400  3009               	movlw	9
  7460  1401  319E  26B0  3193   	fcall	_setProductData
  7461                           
  7462                           ;RF_Control_B1.c: 425: setProductData(11, lights);
  7463  1404  0020               	movlb	0	; select bank0
  7464  1405  0862               	movf	setRF_DimmerValue@lights,w
  7465  1406  00E1               	movwf	??_setRF_DimmerValue
  7466  1407  0861               	movf	??_setRF_DimmerValue,w
  7467  1408  00DD               	movwf	setProductData@value
  7468  1409  300B               	movlw	11
  7469  140A  319E  26B0  3193   	fcall	_setProductData
  7470                           
  7471                           ;RF_Control_B1.c: 426: setProductData((20 + lights), RF_Data[9]);
  7472  140D  0022               	movlb	2	; select bank2
  7473  140E  0829               	movf	(_RF_Data^(0+256)+9),w
  7474  140F  0020               	movlb	0	; select bank0
  7475  1410  00E1               	movwf	??_setRF_DimmerValue
  7476  1411  0861               	movf	??_setRF_DimmerValue,w
  7477  1412  00DD               	movwf	setProductData@value
  7478  1413  0862               	movf	setRF_DimmerValue@lights,w
  7479  1414  3E14               	addlw	20
  7480  1415  319E  26B0  3193   	fcall	_setProductData
  7481                           
  7482                           ;RF_Control_B1.c: 427: setDimmerLights_AdjRF(lights);
  7483  1418  0020               	movlb	0	; select bank0
  7484  1419  0862               	movf	setRF_DimmerValue@lights,w
  7485  141A  3192  22CD         	fcall	_setDimmerLights_AdjRF
  7486  141C  0008               	return
  7487  141D                     __end_of_setRF_DimmerValue:	
  7488                           
  7489                           	psect	text32
  7490  12CD                     __ptext32:	
  7491 ;; *************** function _setDimmerLights_AdjRF *****************
  7492 ;; Defined at:
  7493 ;;		line 931 in file "../src/Dimmer_B1.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;  lights          1    wreg     unsigned char 
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;  lights          1   64[BANK0 ] unsigned char 
  7498 ;; Return value:  Size  Location     Type
  7499 ;;		None               void
  7500 ;; Registers used:
  7501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7508 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7511 ;;Total ram usage:        2 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:    7
  7514 ;; This function calls:
  7515 ;;		_DimmerLightsPointSelect
  7516 ;;		_getPercentValue
  7517 ;; This function is called by:
  7518 ;;		_setRF_DimmerValue
  7519 ;; This function uses a non-reentrant model
  7520 ;;
  7521                           
  7522                           
  7523                           ;psect for function _setDimmerLights_AdjRF
  7524  12CD                     _setDimmerLights_AdjRF:	
  7525                           
  7526                           ;incstack = 0
  7527                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7528                           ;setDimmerLights_AdjRF@lights stored from wreg
  7529  12CD  0020               	movlb	0	; select bank0
  7530  12CE  00E0               	movwf	setDimmerLights_AdjRF@lights
  7531                           
  7532                           ;Dimmer_B1.c: 933: DimmerLightsPointSelect(lights);
  7533  12CF  0860               	movf	setDimmerLights_AdjRF@lights,w
  7534  12D0  319F  2779  3192   	fcall	_DimmerLightsPointSelect
  7535                           
  7536                           ;Dimmer_B1.c: 934: DimmerLights->AdjRF = 1;
  7537  12D3  0020               	movlb	0	; select bank0
  7538  12D4  086F               	movf	_DimmerLights,w
  7539  12D5  3E02               	addlw	2
  7540  12D6  0086               	movwf	6
  7541  12D7  3001               	movlw	1	; select bank2/3
  7542  12D8  0087               	movwf	7
  7543  12D9  1401               	bsf	1,0
  7544                           
  7545                           ;Dimmer_B1.c: 935: DimmerLights->Signal = 1;
  7546  12DA  0A6F               	incf	_DimmerLights,w
  7547  12DB  0086               	movwf	6
  7548  12DC  3001               	movlw	1	; select bank2/3
  7549  12DD  0087               	movwf	7
  7550  12DE  1681               	bsf	1,5
  7551                           
  7552                           ;Dimmer_B1.c: 936: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7553  12DF  086E               	movf	_product,w
  7554  12E0  3E09               	addlw	9
  7555  12E1  0086               	movwf	6
  7556  12E2  3002               	movlw	2	; select bank4/5
  7557  12E3  0087               	movwf	7
  7558  12E4  0801               	movf	1,w
  7559  12E5  318A  222E         	fcall	_getPercentValue
  7560  12E7  0020               	movlb	0	; select bank0
  7561  12E8  00DF               	movwf	??_setDimmerLights_AdjRF
  7562  12E9  086F               	movf	_DimmerLights,w
  7563  12EA  3E06               	addlw	6
  7564  12EB  0086               	movwf	6
  7565  12EC  3001               	movlw	1	; select bank2/3
  7566  12ED  0087               	movwf	7
  7567  12EE  085F               	movf	??_setDimmerLights_AdjRF,w
  7568  12EF  0081               	movwf	1
  7569  12F0  0008               	return
  7570  12F1                     __end_of_setDimmerLights_AdjRF:	
  7571                           
  7572                           	psect	text33
  7573  0A2E                     __ptext33:	
  7574 ;; *************** function _getPercentValue *****************
  7575 ;; Defined at:
  7576 ;;		line 1046 in file "../src/Dimmer_B1.c"
  7577 ;; Parameters:    Size  Location     Type
  7578 ;;  value           1    wreg     unsigned char 
  7579 ;; Auto vars:     Size  Location     Type
  7580 ;;  value           1   59[BANK0 ] unsigned char 
  7581 ;;  i               3   60[BANK0 ] float 
  7582 ;; Return value:  Size  Location     Type
  7583 ;;                  1    wreg      unsigned char 
  7584 ;; Registers used:
  7585 ;;		wreg, status,2, status,0, pclath, cstack
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7595 ;;Total ram usage:        6 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; Hardware stack levels required when called:    6
  7598 ;; This function calls:
  7599 ;;		___awtoft
  7600 ;;		___ftadd
  7601 ;;		___ftdiv
  7602 ;;		___ftmul
  7603 ;;		___fttol
  7604 ;; This function is called by:
  7605 ;;		_setDimmerLights_AdjRF
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           
  7610                           ;psect for function _getPercentValue
  7611  0A2E                     _getPercentValue:	
  7612                           
  7613                           ;incstack = 0
  7614                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7615                           ;getPercentValue@value stored from wreg
  7616  0A2E  0020               	movlb	0	; select bank0
  7617  0A2F  00DB               	movwf	getPercentValue@value
  7618                           
  7619                           ;Dimmer_B1.c: 1048: float i = ((char)((100-15)*0.8)) - ((char)((100-70)*0.8));
  7620  0A30  3000               	movlw	0
  7621  0A31  00DC               	movwf	getPercentValue@i
  7622  0A32  3030               	movlw	48
  7623  0A33  00DD               	movwf	getPercentValue@i+1
  7624  0A34  3042               	movlw	66
  7625  0A35  00DE               	movwf	getPercentValue@i+2
  7626                           
  7627                           ;Dimmer_B1.c: 1049: i /= 100;
  7628  0A36  3000               	movlw	0
  7629  0A37  00AE               	movwf	___ftdiv@f2
  7630  0A38  30C8               	movlw	200
  7631  0A39  00AF               	movwf	___ftdiv@f2+1
  7632  0A3A  3042               	movlw	66
  7633  0A3B  00B0               	movwf	___ftdiv@f2+2
  7634  0A3C  085C               	movf	getPercentValue@i,w
  7635  0A3D  00B1               	movwf	___ftdiv@f1
  7636  0A3E  085D               	movf	getPercentValue@i+1,w
  7637  0A3F  00B2               	movwf	___ftdiv@f1+1
  7638  0A40  085E               	movf	getPercentValue@i+2,w
  7639  0A41  00B3               	movwf	___ftdiv@f1+2
  7640  0A42  318E  26A7  318A   	fcall	___ftdiv
  7641  0A45  0020               	movlb	0	; select bank0
  7642  0A46  082E               	movf	?___ftdiv,w
  7643  0A47  00DC               	movwf	getPercentValue@i
  7644  0A48  082F               	movf	?___ftdiv+1,w
  7645  0A49  00DD               	movwf	getPercentValue@i+1
  7646  0A4A  0830               	movf	?___ftdiv+2,w
  7647  0A4B  00DE               	movwf	getPercentValue@i+2
  7648                           
  7649                           ;Dimmer_B1.c: 1050: return (char) (((100 - value) * i) + ((char)((100-70)*0.8)));
  7650  0A4C  085B               	movf	getPercentValue@value,w
  7651  0A4D  00D9               	movwf	??_getPercentValue
  7652  0A4E  01DA               	clrf	??_getPercentValue+1
  7653  0A4F  09D9               	comf	??_getPercentValue,f
  7654  0A50  09DA               	comf	??_getPercentValue+1,f
  7655  0A51  0AD9               	incf	??_getPercentValue,f
  7656  0A52  1903               	skipnz
  7657  0A53  0ADA               	incf	??_getPercentValue+1,f
  7658  0A54  0859               	movf	??_getPercentValue,w
  7659  0A55  3E64               	addlw	100
  7660  0A56  00A8               	movwf	___awtoft@c
  7661  0A57  3000               	movlw	0
  7662  0A58  3D5A               	addwfc	??_getPercentValue+1,w
  7663  0A59  00A9               	movwf	___awtoft@c+1
  7664  0A5A  3192  2265  318A   	fcall	___awtoft
  7665  0A5D  0020               	movlb	0	; select bank0
  7666  0A5E  0828               	movf	?___awtoft,w
  7667  0A5F  00B1               	movwf	___ftmul@f2
  7668  0A60  0829               	movf	?___awtoft+1,w
  7669  0A61  00B2               	movwf	___ftmul@f2+1
  7670  0A62  082A               	movf	?___awtoft+2,w
  7671  0A63  00B3               	movwf	___ftmul@f2+2
  7672  0A64  085C               	movf	getPercentValue@i,w
  7673  0A65  00AE               	movwf	___ftmul@f1
  7674  0A66  085D               	movf	getPercentValue@i+1,w
  7675  0A67  00AF               	movwf	___ftmul@f1+1
  7676  0A68  085E               	movf	getPercentValue@i+2,w
  7677  0A69  00B0               	movwf	___ftmul@f1+2
  7678  0A6A  3186  26B8  318A   	fcall	___ftmul
  7679  0A6D  0020               	movlb	0	; select bank0
  7680  0A6E  082E               	movf	?___ftmul,w
  7681  0A6F  00C1               	movwf	___ftadd@f2
  7682  0A70  082F               	movf	?___ftmul+1,w
  7683  0A71  00C2               	movwf	___ftadd@f2+1
  7684  0A72  0830               	movf	?___ftmul+2,w
  7685  0A73  00C3               	movwf	___ftadd@f2+2
  7686  0A74  3000               	movlw	0
  7687  0A75  00BE               	movwf	___ftadd@f1
  7688  0A76  30C0               	movlw	192
  7689  0A77  00BF               	movwf	___ftadd@f1+1
  7690  0A78  3041               	movlw	65
  7691  0A79  00C0               	movwf	___ftadd@f1+2
  7692  0A7A  3183  2352  318A   	fcall	___ftadd
  7693  0A7D  0020               	movlb	0	; select bank0
  7694  0A7E  083E               	movf	?___ftadd,w
  7695  0A7F  00CB               	movwf	___fttol@f1
  7696  0A80  083F               	movf	?___ftadd+1,w
  7697  0A81  00CC               	movwf	___fttol@f1+1
  7698  0A82  0840               	movf	?___ftadd+2,w
  7699  0A83  00CD               	movwf	___fttol@f1+2
  7700  0A84  3187  276C         	fcall	___fttol
  7701  0A86  0020               	movlb	0	; select bank0
  7702  0A87  084B               	movf	?___fttol,w
  7703  0A88  0008               	return
  7704  0A89                     __end_of_getPercentValue:	
  7705                           
  7706                           	psect	text34
  7707  06B8                     __ptext34:	
  7708 ;; *************** function ___ftmul *****************
  7709 ;; Defined at:
  7710 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7711 ;; Parameters:    Size  Location     Type
  7712 ;;  f1              3   14[BANK0 ] float 
  7713 ;;  f2              3   17[BANK0 ] float 
  7714 ;; Auto vars:     Size  Location     Type
  7715 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7716 ;;  sign            1   29[BANK0 ] unsigned char 
  7717 ;;  cntr            1   28[BANK0 ] unsigned char 
  7718 ;;  exp             1   24[BANK0 ] unsigned char 
  7719 ;; Return value:  Size  Location     Type
  7720 ;;                  3   14[BANK0 ] float 
  7721 ;; Registers used:
  7722 ;;		wreg, status,2, status,0, pclath, cstack
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7728 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7729 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7730 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7731 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7732 ;;Total ram usage:       16 bytes
  7733 ;; Hardware stack levels used:    1
  7734 ;; Hardware stack levels required when called:    5
  7735 ;; This function calls:
  7736 ;;		___ftpack
  7737 ;; This function is called by:
  7738 ;;		_getPercentValue
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           
  7743                           ;psect for function ___ftmul
  7744  06B8                     ___ftmul:	
  7745                           
  7746                           ;incstack = 0
  7747                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7748  06B8  0020               	movlb	0	; select bank0
  7749  06B9  082E               	movf	___ftmul@f1,w
  7750  06BA  00B4               	movwf	??___ftmul
  7751  06BB  082F               	movf	___ftmul@f1+1,w
  7752  06BC  00B5               	movwf	??___ftmul+1
  7753  06BD  0830               	movf	___ftmul@f1+2,w
  7754  06BE  00B6               	movwf	??___ftmul+2
  7755  06BF  1003               	clrc
  7756  06C0  0D35               	rlf	??___ftmul+1,w
  7757  06C1  0D36               	rlf	??___ftmul+2,w
  7758  06C2  00B7               	movwf	??___ftmul+3
  7759  06C3  0837               	movf	??___ftmul+3,w
  7760  06C4  00B8               	movwf	___ftmul@exp
  7761  06C5  08B8               	movf	___ftmul@exp,f
  7762  06C6  1D03               	skipz
  7763  06C7  2ECF               	goto	l7935
  7764  06C8  3000               	movlw	0
  7765  06C9  00AE               	movwf	?___ftmul
  7766  06CA  3000               	movlw	0
  7767  06CB  00AF               	movwf	?___ftmul+1
  7768  06CC  3000               	movlw	0
  7769  06CD  00B0               	movwf	?___ftmul+2
  7770  06CE  0008               	return
  7771  06CF                     l7935:	
  7772  06CF  0831               	movf	___ftmul@f2,w
  7773  06D0  00B4               	movwf	??___ftmul
  7774  06D1  0832               	movf	___ftmul@f2+1,w
  7775  06D2  00B5               	movwf	??___ftmul+1
  7776  06D3  0833               	movf	___ftmul@f2+2,w
  7777  06D4  00B6               	movwf	??___ftmul+2
  7778  06D5  1003               	clrc
  7779  06D6  0D35               	rlf	??___ftmul+1,w
  7780  06D7  0D36               	rlf	??___ftmul+2,w
  7781  06D8  00B7               	movwf	??___ftmul+3
  7782  06D9  0837               	movf	??___ftmul+3,w
  7783  06DA  00BD               	movwf	___ftmul@sign
  7784  06DB  08BD               	movf	___ftmul@sign,f
  7785  06DC  1D03               	skipz
  7786  06DD  2EE5               	goto	l7941
  7787  06DE  3000               	movlw	0
  7788  06DF  00AE               	movwf	?___ftmul
  7789  06E0  3000               	movlw	0
  7790  06E1  00AF               	movwf	?___ftmul+1
  7791  06E2  3000               	movlw	0
  7792  06E3  00B0               	movwf	?___ftmul+2
  7793  06E4  0008               	return
  7794  06E5                     l7941:	
  7795  06E5  083D               	movf	___ftmul@sign,w
  7796  06E6  3E7B               	addlw	123
  7797  06E7  00B4               	movwf	??___ftmul
  7798  06E8  0834               	movf	??___ftmul,w
  7799  06E9  07B8               	addwf	___ftmul@exp,f
  7800  06EA  082E               	movf	___ftmul@f1,w
  7801  06EB  00B4               	movwf	??___ftmul
  7802  06EC  082F               	movf	___ftmul@f1+1,w
  7803  06ED  00B5               	movwf	??___ftmul+1
  7804  06EE  0830               	movf	___ftmul@f1+2,w
  7805  06EF  00B6               	movwf	??___ftmul+2
  7806  06F0  3010               	movlw	16
  7807  06F1                     u8125:	
  7808  06F1  36B6               	lsrf	??___ftmul+2,f
  7809  06F2  0CB5               	rrf	??___ftmul+1,f
  7810  06F3  0CB4               	rrf	??___ftmul,f
  7811  06F4  0B89               	decfsz	9,f
  7812  06F5  2EF1               	goto	u8125
  7813  06F6  0834               	movf	??___ftmul,w
  7814  06F7  00B7               	movwf	??___ftmul+3
  7815  06F8  0837               	movf	??___ftmul+3,w
  7816  06F9  00BD               	movwf	___ftmul@sign
  7817  06FA  0831               	movf	___ftmul@f2,w
  7818  06FB  00B4               	movwf	??___ftmul
  7819  06FC  0832               	movf	___ftmul@f2+1,w
  7820  06FD  00B5               	movwf	??___ftmul+1
  7821  06FE  0833               	movf	___ftmul@f2+2,w
  7822  06FF  00B6               	movwf	??___ftmul+2
  7823  0700  3010               	movlw	16
  7824  0701                     u8135:	
  7825  0701  36B6               	lsrf	??___ftmul+2,f
  7826  0702  0CB5               	rrf	??___ftmul+1,f
  7827  0703  0CB4               	rrf	??___ftmul,f
  7828  0704  0B89               	decfsz	9,f
  7829  0705  2F01               	goto	u8135
  7830  0706  0834               	movf	??___ftmul,w
  7831  0707  00B7               	movwf	??___ftmul+3
  7832  0708  0837               	movf	??___ftmul+3,w
  7833  0709  06BD               	xorwf	___ftmul@sign,f
  7834  070A  3080               	movlw	128
  7835  070B  00B4               	movwf	??___ftmul
  7836  070C  0834               	movf	??___ftmul,w
  7837  070D  05BD               	andwf	___ftmul@sign,f
  7838  070E  17AF               	bsf	___ftmul@f1+1,7
  7839  070F  17B2               	bsf	___ftmul@f2+1,7
  7840  0710  30FF               	movlw	255
  7841  0711  05B1               	andwf	___ftmul@f2,f
  7842  0712  30FF               	movlw	255
  7843  0713  05B2               	andwf	___ftmul@f2+1,f
  7844  0714  3000               	movlw	0
  7845  0715  05B3               	andwf	___ftmul@f2+2,f
  7846  0716  3000               	movlw	0
  7847  0717  00B9               	movwf	___ftmul@f3_as_product
  7848  0718  3000               	movlw	0
  7849  0719  00BA               	movwf	___ftmul@f3_as_product+1
  7850  071A  3000               	movlw	0
  7851  071B  00BB               	movwf	___ftmul@f3_as_product+2
  7852  071C  3007               	movlw	7
  7853  071D  00B4               	movwf	??___ftmul
  7854  071E  0834               	movf	??___ftmul,w
  7855  071F  00BC               	movwf	___ftmul@cntr
  7856  0720                     l7953:	
  7857  0720  1C2E               	btfss	___ftmul@f1,0
  7858  0721  2F28               	goto	l7957
  7859  0722  0831               	movf	___ftmul@f2,w
  7860  0723  07B9               	addwf	___ftmul@f3_as_product,f
  7861  0724  0832               	movf	___ftmul@f2+1,w
  7862  0725  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7863  0726  0833               	movf	___ftmul@f2+2,w
  7864  0727  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7865  0728                     l7957:	
  7866  0728  3001               	movlw	1
  7867  0729                     u8155:	
  7868  0729  36B0               	lsrf	___ftmul@f1+2,f
  7869  072A  0CAF               	rrf	___ftmul@f1+1,f
  7870  072B  0CAE               	rrf	___ftmul@f1,f
  7871  072C  0B89               	decfsz	9,f
  7872  072D  2F29               	goto	u8155
  7873  072E  3001               	movlw	1
  7874  072F                     u8165:	
  7875  072F  35B1               	lslf	___ftmul@f2,f
  7876  0730  0DB2               	rlf	___ftmul@f2+1,f
  7877  0731  0DB3               	rlf	___ftmul@f2+2,f
  7878  0732  0B89               	decfsz	9,f
  7879  0733  2F2F               	goto	u8165
  7880  0734  3001               	movlw	1
  7881  0735  02BC               	subwf	___ftmul@cntr,f
  7882  0736  1D03               	btfss	3,2
  7883  0737  2F20               	goto	l7953
  7884  0738  3009               	movlw	9
  7885  0739  00B4               	movwf	??___ftmul
  7886  073A  0834               	movf	??___ftmul,w
  7887  073B  00BC               	movwf	___ftmul@cntr
  7888  073C                     l7965:	
  7889  073C  1C2E               	btfss	___ftmul@f1,0
  7890  073D  2F44               	goto	l7969
  7891  073E  0831               	movf	___ftmul@f2,w
  7892  073F  07B9               	addwf	___ftmul@f3_as_product,f
  7893  0740  0832               	movf	___ftmul@f2+1,w
  7894  0741  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7895  0742  0833               	movf	___ftmul@f2+2,w
  7896  0743  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7897  0744                     l7969:	
  7898  0744  3001               	movlw	1
  7899  0745                     u8195:	
  7900  0745  36B0               	lsrf	___ftmul@f1+2,f
  7901  0746  0CAF               	rrf	___ftmul@f1+1,f
  7902  0747  0CAE               	rrf	___ftmul@f1,f
  7903  0748  0B89               	decfsz	9,f
  7904  0749  2F45               	goto	u8195
  7905  074A  3001               	movlw	1
  7906  074B                     u8205:	
  7907  074B  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7908  074C  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7909  074D  0CB9               	rrf	___ftmul@f3_as_product,f
  7910  074E  0B89               	decfsz	9,f
  7911  074F  2F4B               	goto	u8205
  7912  0750  3001               	movlw	1
  7913  0751  02BC               	subwf	___ftmul@cntr,f
  7914  0752  1D03               	btfss	3,2
  7915  0753  2F3C               	goto	l7965
  7916  0754  0839               	movf	___ftmul@f3_as_product,w
  7917  0755  00A0               	movwf	___ftpack@arg
  7918  0756  083A               	movf	___ftmul@f3_as_product+1,w
  7919  0757  00A1               	movwf	___ftpack@arg+1
  7920  0758  083B               	movf	___ftmul@f3_as_product+2,w
  7921  0759  00A2               	movwf	___ftpack@arg+2
  7922  075A  0838               	movf	___ftmul@exp,w
  7923  075B  00B4               	movwf	??___ftmul
  7924  075C  0834               	movf	??___ftmul,w
  7925  075D  00A3               	movwf	___ftpack@exp
  7926  075E  083D               	movf	___ftmul@sign,w
  7927  075F  00B5               	movwf	??___ftmul+1
  7928  0760  0835               	movf	??___ftmul+1,w
  7929  0761  00A4               	movwf	___ftpack@sign
  7930  0762  318B  239E         	fcall	___ftpack
  7931  0764  0020               	movlb	0	; select bank0
  7932  0765  0820               	movf	?___ftpack,w
  7933  0766  00AE               	movwf	?___ftmul
  7934  0767  0821               	movf	?___ftpack+1,w
  7935  0768  00AF               	movwf	?___ftmul+1
  7936  0769  0822               	movf	?___ftpack+2,w
  7937  076A  00B0               	movwf	?___ftmul+2
  7938  076B  0008               	return
  7939  076C                     __end_of___ftmul:	
  7940                           
  7941                           	psect	text35
  7942  0352                     __ptext35:	
  7943 ;; *************** function ___ftadd *****************
  7944 ;; Defined at:
  7945 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7946 ;; Parameters:    Size  Location     Type
  7947 ;;  f1              3   30[BANK0 ] float 
  7948 ;;  f2              3   33[BANK0 ] float 
  7949 ;; Auto vars:     Size  Location     Type
  7950 ;;  exp1            1   42[BANK0 ] unsigned char 
  7951 ;;  exp2            1   41[BANK0 ] unsigned char 
  7952 ;;  sign            1   40[BANK0 ] unsigned char 
  7953 ;; Return value:  Size  Location     Type
  7954 ;;                  3   30[BANK0 ] float 
  7955 ;; Registers used:
  7956 ;;		wreg, status,2, status,0, pclath, cstack
  7957 ;; Tracked objects:
  7958 ;;		On entry : 0/0
  7959 ;;		On exit  : 0/0
  7960 ;;		Unchanged: 0/0
  7961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7962 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7963 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7964 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7965 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7966 ;;Total ram usage:       13 bytes
  7967 ;; Hardware stack levels used:    1
  7968 ;; Hardware stack levels required when called:    5
  7969 ;; This function calls:
  7970 ;;		___ftpack
  7971 ;; This function is called by:
  7972 ;;		_getPercentValue
  7973 ;; This function uses a non-reentrant model
  7974 ;;
  7975                           
  7976                           
  7977                           ;psect for function ___ftadd
  7978  0352                     ___ftadd:	
  7979                           
  7980                           ;incstack = 0
  7981                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7982  0352  0020               	movlb	0	; select bank0
  7983  0353  083E               	movf	___ftadd@f1,w
  7984  0354  00C4               	movwf	??___ftadd
  7985  0355  083F               	movf	___ftadd@f1+1,w
  7986  0356  00C5               	movwf	??___ftadd+1
  7987  0357  0840               	movf	___ftadd@f1+2,w
  7988  0358  00C6               	movwf	??___ftadd+2
  7989  0359  1003               	clrc
  7990  035A  0D45               	rlf	??___ftadd+1,w
  7991  035B  0D46               	rlf	??___ftadd+2,w
  7992  035C  00C7               	movwf	??___ftadd+3
  7993  035D  0847               	movf	??___ftadd+3,w
  7994  035E  00CA               	movwf	___ftadd@exp1
  7995  035F  0841               	movf	___ftadd@f2,w
  7996  0360  00C4               	movwf	??___ftadd
  7997  0361  0842               	movf	___ftadd@f2+1,w
  7998  0362  00C5               	movwf	??___ftadd+1
  7999  0363  0843               	movf	___ftadd@f2+2,w
  8000  0364  00C6               	movwf	??___ftadd+2
  8001  0365  1003               	clrc
  8002  0366  0D45               	rlf	??___ftadd+1,w
  8003  0367  0D46               	rlf	??___ftadd+2,w
  8004  0368  00C7               	movwf	??___ftadd+3
  8005  0369  0847               	movf	??___ftadd+3,w
  8006  036A  00C9               	movwf	___ftadd@exp2
  8007  036B  084A               	movf	___ftadd@exp1,w
  8008  036C  1903               	btfsc	3,2
  8009  036D  2B7A               	goto	l7823
  8010  036E  0849               	movf	___ftadd@exp2,w
  8011  036F  024A               	subwf	___ftadd@exp1,w
  8012  0370  1803               	skipnc
  8013  0371  2B81               	goto	l7827
  8014  0372  034A               	decf	___ftadd@exp1,w
  8015  0373  3AFF               	xorlw	255
  8016  0374  0749               	addwf	___ftadd@exp2,w
  8017  0375  00C4               	movwf	??___ftadd
  8018  0376  3019               	movlw	25
  8019  0377  0244               	subwf	??___ftadd,w
  8020  0378  1C03               	skipc
  8021  0379  2B81               	goto	l7827
  8022  037A                     l7823:	
  8023  037A  0841               	movf	___ftadd@f2,w
  8024  037B  00BE               	movwf	?___ftadd
  8025  037C  0842               	movf	___ftadd@f2+1,w
  8026  037D  00BF               	movwf	?___ftadd+1
  8027  037E  0843               	movf	___ftadd@f2+2,w
  8028  037F  00C0               	movwf	?___ftadd+2
  8029  0380  0008               	return
  8030  0381                     l7827:	
  8031  0381  0849               	movf	___ftadd@exp2,w
  8032  0382  1903               	btfsc	3,2
  8033  0383  0008               	return
  8034  0384  084A               	movf	___ftadd@exp1,w
  8035  0385  0249               	subwf	___ftadd@exp2,w
  8036  0386  1803               	skipnc
  8037  0387  2B90               	goto	l7833
  8038  0388  0349               	decf	___ftadd@exp2,w
  8039  0389  3AFF               	xorlw	255
  8040  038A  074A               	addwf	___ftadd@exp1,w
  8041  038B  00C4               	movwf	??___ftadd
  8042  038C  3019               	movlw	25
  8043  038D  0244               	subwf	??___ftadd,w
  8044  038E  1803               	btfsc	3,0
  8045  038F  0008               	return
  8046  0390                     l7833:	
  8047  0390  3006               	movlw	6
  8048  0391  00C4               	movwf	??___ftadd
  8049  0392  0844               	movf	??___ftadd,w
  8050  0393  00C8               	movwf	___ftadd@sign
  8051  0394  1BC0               	btfsc	___ftadd@f1+2,7
  8052  0395  17C8               	bsf	___ftadd@sign,7
  8053  0396  1BC3               	btfsc	___ftadd@f2+2,7
  8054  0397  1748               	bsf	___ftadd@sign,6
  8055  0398  17BF               	bsf	___ftadd@f1+1,7
  8056  0399  30FF               	movlw	255
  8057  039A  05BE               	andwf	___ftadd@f1,f
  8058  039B  30FF               	movlw	255
  8059  039C  05BF               	andwf	___ftadd@f1+1,f
  8060  039D  3000               	movlw	0
  8061  039E  05C0               	andwf	___ftadd@f1+2,f
  8062  039F  17C2               	bsf	___ftadd@f2+1,7
  8063  03A0  30FF               	movlw	255
  8064  03A1  05C1               	andwf	___ftadd@f2,f
  8065  03A2  30FF               	movlw	255
  8066  03A3  05C2               	andwf	___ftadd@f2+1,f
  8067  03A4  3000               	movlw	0
  8068  03A5  05C3               	andwf	___ftadd@f2+2,f
  8069  03A6  0849               	movf	___ftadd@exp2,w
  8070  03A7  024A               	subwf	___ftadd@exp1,w
  8071  03A8  1803               	skipnc
  8072  03A9  2BCC               	goto	l7855
  8073  03AA                     l7845:	
  8074  03AA  3001               	movlw	1
  8075  03AB                     u7885:	
  8076  03AB  35C1               	lslf	___ftadd@f2,f
  8077  03AC  0DC2               	rlf	___ftadd@f2+1,f
  8078  03AD  0DC3               	rlf	___ftadd@f2+2,f
  8079  03AE  0B89               	decfsz	9,f
  8080  03AF  2BAB               	goto	u7885
  8081  03B0  3001               	movlw	1
  8082  03B1  02C9               	subwf	___ftadd@exp2,f
  8083  03B2  0849               	movf	___ftadd@exp2,w
  8084  03B3  064A               	xorwf	___ftadd@exp1,w
  8085  03B4  1903               	skipnz
  8086  03B5  2BC7               	goto	l7853
  8087  03B6  3001               	movlw	1
  8088  03B7  02C8               	subwf	___ftadd@sign,f
  8089  03B8  0848               	movf	___ftadd@sign,w
  8090  03B9  3907               	andlw	7
  8091  03BA  1903               	btfsc	3,2
  8092  03BB  2BC7               	goto	l7853
  8093  03BC  2BAA               	goto	l7845
  8094  03BD                     l7851:	
  8095  03BD  3001               	movlw	1
  8096  03BE                     u7915:	
  8097  03BE  36C0               	lsrf	___ftadd@f1+2,f
  8098  03BF  0CBF               	rrf	___ftadd@f1+1,f
  8099  03C0  0CBE               	rrf	___ftadd@f1,f
  8100  03C1  0B89               	decfsz	9,f
  8101  03C2  2BBE               	goto	u7915
  8102  03C3  3001               	movlw	1
  8103  03C4  00C4               	movwf	??___ftadd
  8104  03C5  0844               	movf	??___ftadd,w
  8105  03C6  07CA               	addwf	___ftadd@exp1,f
  8106  03C7                     l7853:	
  8107  03C7  084A               	movf	___ftadd@exp1,w
  8108  03C8  0649               	xorwf	___ftadd@exp2,w
  8109  03C9  1903               	btfsc	3,2
  8110  03CA  2BF1               	goto	l2844
  8111  03CB  2BBD               	goto	l7851
  8112  03CC                     l7855:	
  8113  03CC  084A               	movf	___ftadd@exp1,w
  8114  03CD  0249               	subwf	___ftadd@exp2,w
  8115  03CE  1803               	skipnc
  8116  03CF  2BF1               	goto	l2844
  8117  03D0                     l7857:	
  8118  03D0  3001               	movlw	1
  8119  03D1                     u7945:	
  8120  03D1  35BE               	lslf	___ftadd@f1,f
  8121  03D2  0DBF               	rlf	___ftadd@f1+1,f
  8122  03D3  0DC0               	rlf	___ftadd@f1+2,f
  8123  03D4  0B89               	decfsz	9,f
  8124  03D5  2BD1               	goto	u7945
  8125  03D6  3001               	movlw	1
  8126  03D7  02CA               	subwf	___ftadd@exp1,f
  8127  03D8  0849               	movf	___ftadd@exp2,w
  8128  03D9  064A               	xorwf	___ftadd@exp1,w
  8129  03DA  1903               	skipnz
  8130  03DB  2BED               	goto	l7865
  8131  03DC  3001               	movlw	1
  8132  03DD  02C8               	subwf	___ftadd@sign,f
  8133  03DE  0848               	movf	___ftadd@sign,w
  8134  03DF  3907               	andlw	7
  8135  03E0  1903               	btfsc	3,2
  8136  03E1  2BED               	goto	l7865
  8137  03E2  2BD0               	goto	l7857
  8138  03E3                     l7863:	
  8139  03E3  3001               	movlw	1
  8140  03E4                     u7975:	
  8141  03E4  36C3               	lsrf	___ftadd@f2+2,f
  8142  03E5  0CC2               	rrf	___ftadd@f2+1,f
  8143  03E6  0CC1               	rrf	___ftadd@f2,f
  8144  03E7  0B89               	decfsz	9,f
  8145  03E8  2BE4               	goto	u7975
  8146  03E9  3001               	movlw	1
  8147  03EA  00C4               	movwf	??___ftadd
  8148  03EB  0844               	movf	??___ftadd,w
  8149  03EC  07C9               	addwf	___ftadd@exp2,f
  8150  03ED                     l7865:	
  8151  03ED  084A               	movf	___ftadd@exp1,w
  8152  03EE  0649               	xorwf	___ftadd@exp2,w
  8153  03EF  1D03               	skipz
  8154  03F0  2BE3               	goto	l7863
  8155  03F1                     l2844:	
  8156  03F1  1FC8               	btfss	___ftadd@sign,7
  8157  03F2  2C03               	goto	l7869
  8158  03F3  30FF               	movlw	255
  8159  03F4  06BE               	xorwf	___ftadd@f1,f
  8160  03F5  30FF               	movlw	255
  8161  03F6  06BF               	xorwf	___ftadd@f1+1,f
  8162  03F7  30FF               	movlw	255
  8163  03F8  06C0               	xorwf	___ftadd@f1+2,f
  8164  03F9  3001               	movlw	1
  8165  03FA  07BE               	addwf	___ftadd@f1,f
  8166  03FB  3000               	movlw	0
  8167  03FC  1803               	skipnc
  8168  03FD  3001               	movlw	1
  8169  03FE  07BF               	addwf	___ftadd@f1+1,f
  8170  03FF  3000               	movlw	0
  8171  0400  1803               	skipnc
  8172  0401  3001               	movlw	1
  8173  0402  07C0               	addwf	___ftadd@f1+2,f
  8174  0403                     l7869:	
  8175  0403  1F48               	btfss	___ftadd@sign,6
  8176  0404  2C15               	goto	l7873
  8177  0405  30FF               	movlw	255
  8178  0406  06C1               	xorwf	___ftadd@f2,f
  8179  0407  30FF               	movlw	255
  8180  0408  06C2               	xorwf	___ftadd@f2+1,f
  8181  0409  30FF               	movlw	255
  8182  040A  06C3               	xorwf	___ftadd@f2+2,f
  8183  040B  3001               	movlw	1
  8184  040C  07C1               	addwf	___ftadd@f2,f
  8185  040D  3000               	movlw	0
  8186  040E  1803               	skipnc
  8187  040F  3001               	movlw	1
  8188  0410  07C2               	addwf	___ftadd@f2+1,f
  8189  0411  3000               	movlw	0
  8190  0412  1803               	skipnc
  8191  0413  3001               	movlw	1
  8192  0414  07C3               	addwf	___ftadd@f2+2,f
  8193  0415                     l7873:	
  8194  0415  01C8               	clrf	___ftadd@sign
  8195  0416  083E               	movf	___ftadd@f1,w
  8196  0417  07C1               	addwf	___ftadd@f2,f
  8197  0418  083F               	movf	___ftadd@f1+1,w
  8198  0419  3DC2               	addwfc	___ftadd@f2+1,f
  8199  041A  0840               	movf	___ftadd@f1+2,w
  8200  041B  3DC3               	addwfc	___ftadd@f2+2,f
  8201  041C  1FC3               	btfss	___ftadd@f2+2,7
  8202  041D  2C30               	goto	l7883
  8203  041E  30FF               	movlw	255
  8204  041F  06C1               	xorwf	___ftadd@f2,f
  8205  0420  30FF               	movlw	255
  8206  0421  06C2               	xorwf	___ftadd@f2+1,f
  8207  0422  30FF               	movlw	255
  8208  0423  06C3               	xorwf	___ftadd@f2+2,f
  8209  0424  3001               	movlw	1
  8210  0425  07C1               	addwf	___ftadd@f2,f
  8211  0426  3000               	movlw	0
  8212  0427  1803               	skipnc
  8213  0428  3001               	movlw	1
  8214  0429  07C2               	addwf	___ftadd@f2+1,f
  8215  042A  3000               	movlw	0
  8216  042B  1803               	skipnc
  8217  042C  3001               	movlw	1
  8218  042D  07C3               	addwf	___ftadd@f2+2,f
  8219  042E  01C8               	clrf	___ftadd@sign
  8220  042F  0AC8               	incf	___ftadd@sign,f
  8221  0430                     l7883:	
  8222  0430  0841               	movf	___ftadd@f2,w
  8223  0431  00A0               	movwf	___ftpack@arg
  8224  0432  0842               	movf	___ftadd@f2+1,w
  8225  0433  00A1               	movwf	___ftpack@arg+1
  8226  0434  0843               	movf	___ftadd@f2+2,w
  8227  0435  00A2               	movwf	___ftpack@arg+2
  8228  0436  084A               	movf	___ftadd@exp1,w
  8229  0437  00C4               	movwf	??___ftadd
  8230  0438  0844               	movf	??___ftadd,w
  8231  0439  00A3               	movwf	___ftpack@exp
  8232  043A  0848               	movf	___ftadd@sign,w
  8233  043B  00C5               	movwf	??___ftadd+1
  8234  043C  0845               	movf	??___ftadd+1,w
  8235  043D  00A4               	movwf	___ftpack@sign
  8236  043E  318B  239E         	fcall	___ftpack
  8237  0440  0020               	movlb	0	; select bank0
  8238  0441  0820               	movf	?___ftpack,w
  8239  0442  00BE               	movwf	?___ftadd
  8240  0443  0821               	movf	?___ftpack+1,w
  8241  0444  00BF               	movwf	?___ftadd+1
  8242  0445  0822               	movf	?___ftpack+2,w
  8243  0446  00C0               	movwf	?___ftadd+2
  8244  0447  0008               	return
  8245  0448                     __end_of___ftadd:	
  8246                           
  8247                           	psect	text36
  8248  1FB2                     __ptext36:	
  8249 ;; *************** function _setMemory_Modify *****************
  8250 ;; Defined at:
  8251 ;;		line 1071 in file "../src/MCU_B1.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;  command         1    wreg     unsigned char 
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;  command         1    1[BANK0 ] unsigned char 
  8256 ;; Return value:  Size  Location     Type
  8257 ;;		None               void
  8258 ;; Registers used:
  8259 ;;		wreg, status,2, status,0
  8260 ;; Tracked objects:
  8261 ;;		On entry : 0/0
  8262 ;;		On exit  : 0/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8268 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8269 ;;Total ram usage:        2 bytes
  8270 ;; Hardware stack levels used:    1
  8271 ;; Hardware stack levels required when called:    4
  8272 ;; This function calls:
  8273 ;;		Nothing
  8274 ;; This function is called by:
  8275 ;;		_setLog_Code
  8276 ;;		_setRFSW_AdjControl
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           
  8281                           ;psect for function _setMemory_Modify
  8282  1FB2                     _setMemory_Modify:	
  8283                           
  8284                           ;incstack = 0
  8285                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8286                           ;setMemory_Modify@command stored from wreg
  8287  1FB2  0020               	movlb	0	; select bank0
  8288  1FB3  00A1               	movwf	setMemory_Modify@command
  8289                           
  8290                           ;MCU_B1.c: 1072: Memory.Modify = command == 1 ? 1 : 0;
  8291  1FB4  0821               	movf	setMemory_Modify@command,w
  8292  1FB5  3A01               	xorlw	1
  8293  1FB6  3000               	movlw	0
  8294  1FB7  1903               	skipnz
  8295  1FB8  3001               	movlw	1
  8296  1FB9  00A0               	movwf	??_setMemory_Modify
  8297  1FBA  0023               	movlb	3	; select bank3
  8298  1FBB  0844               	movf	(_Memory^(0+384)+36),w
  8299  1FBC  0020               	movlb	0	; select bank0
  8300  1FBD  0620               	xorwf	??_setMemory_Modify,w
  8301  1FBE  39FE               	andlw	-2
  8302  1FBF  0620               	xorwf	??_setMemory_Modify,w
  8303  1FC0  0023               	movlb	3	; select bank3
  8304  1FC1  00C4               	movwf	(_Memory^(0+384)+36)
  8305                           
  8306                           ;MCU_B1.c: 1073: Memory.Time = 0;
  8307  1FC2  01C2               	clrf	(_Memory^(0+384)+34)
  8308  1FC3  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8309  1FC4  0008               	return
  8310  1FC5                     __end_of_setMemory_Modify:	
  8311                           
  8312                           	psect	text37
  8313  1F1F                     __ptext37:	
  8314 ;; *************** function _getRF_KeyStatus *****************
  8315 ;; Defined at:
  8316 ;;		line 150 in file "../src/RF_Control_B1.c"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;		None
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;  key             1    1[BANK0 ] unsigned char 
  8321 ;; Return value:  Size  Location     Type
  8322 ;;                  1    wreg      unsigned char 
  8323 ;; Registers used:
  8324 ;;		wreg, status,2
  8325 ;; Tracked objects:
  8326 ;;		On entry : 0/0
  8327 ;;		On exit  : 0/0
  8328 ;;		Unchanged: 0/0
  8329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8331 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8332 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8333 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8334 ;;Total ram usage:        3 bytes
  8335 ;; Hardware stack levels used:    1
  8336 ;; Hardware stack levels required when called:    4
  8337 ;; This function calls:
  8338 ;;		Nothing
  8339 ;; This function is called by:
  8340 ;;		_setRF_Main
  8341 ;; This function uses a non-reentrant model
  8342 ;;
  8343                           
  8344                           
  8345                           ;psect for function _getRF_KeyStatus
  8346  1F1F                     _getRF_KeyStatus:	
  8347                           
  8348                           ;RF_Control_B1.c: 151: char key = 0;
  8349                           
  8350                           ;incstack = 0
  8351                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8352  1F1F  0020               	movlb	0	; select bank0
  8353  1F20  01A1               	clrf	getRF_KeyStatus@key
  8354                           
  8355                           ;RF_Control_B1.c: 157: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8356  1F21  01A2               	clrf	_getRF_KeyStatus$4838
  8357  1F22  0AA2               	incf	_getRF_KeyStatus$4838,f
  8358  1F23  1F0C               	btfss	12,6	;volatile
  8359  1F24  1A0C               	btfsc	12,4	;volatile
  8360  1F25  2F2A               	goto	l8979
  8361  1F26  1C0C               	btfss	12,0	;volatile
  8362  1F27  188D               	btfsc	13,1	;volatile
  8363  1F28  2F2A               	goto	l8979
  8364  1F29  01A2               	clrf	_getRF_KeyStatus$4838
  8365  1F2A                     l8979:	
  8366  1F2A  0822               	movf	_getRF_KeyStatus$4838,w
  8367  1F2B  00A0               	movwf	??_getRF_KeyStatus
  8368  1F2C  0820               	movf	??_getRF_KeyStatus,w
  8369  1F2D  00A1               	movwf	getRF_KeyStatus@key
  8370                           
  8371                           ;RF_Control_B1.c: 163: return key;
  8372  1F2E  0821               	movf	getRF_KeyStatus@key,w
  8373  1F2F  0008               	return
  8374  1F30                     __end_of_getRF_KeyStatus:	
  8375                           
  8376                           	psect	text38
  8377  1F0E                     __ptext38:	
  8378 ;; *************** function _getBuz_GO *****************
  8379 ;; Defined at:
  8380 ;;		line 82 in file "../src/Buzzer_B1.c"
  8381 ;; Parameters:    Size  Location     Type
  8382 ;;		None
  8383 ;; Auto vars:     Size  Location     Type
  8384 ;;  i               2    4[BANK0 ] int 
  8385 ;; Return value:  Size  Location     Type
  8386 ;;                  2    0[BANK0 ] int 
  8387 ;; Registers used:
  8388 ;;		wreg, status,2, status,0
  8389 ;; Tracked objects:
  8390 ;;		On entry : 0/0
  8391 ;;		On exit  : 0/0
  8392 ;;		Unchanged: 0/0
  8393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8394 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;Total ram usage:        6 bytes
  8399 ;; Hardware stack levels used:    1
  8400 ;; Hardware stack levels required when called:    4
  8401 ;; This function calls:
  8402 ;;		Nothing
  8403 ;; This function is called by:
  8404 ;;		_setRF_Main
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408                           
  8409                           ;psect for function _getBuz_GO
  8410  1F0E                     _getBuz_GO:	
  8411                           
  8412                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8413                           
  8414                           ;incstack = 0
  8415                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8416  1F0E  0021               	movlb	1	; select bank1
  8417  1F0F  0C3C               	rrf	_Buz1^(0+128),w
  8418  1F10  3901               	andlw	1
  8419  1F11  0020               	movlb	0	; select bank0
  8420  1F12  00A2               	movwf	??_getBuz_GO
  8421  1F13  01A3               	clrf	??_getBuz_GO+1
  8422  1F14  0822               	movf	??_getBuz_GO,w
  8423  1F15  00A4               	movwf	getBuz_GO@i
  8424  1F16  0823               	movf	??_getBuz_GO+1,w
  8425  1F17  00A5               	movwf	getBuz_GO@i+1
  8426                           
  8427                           ;Buzzer_B1.c: 84: return i;
  8428  1F18  0825               	movf	getBuz_GO@i+1,w
  8429  1F19  01A1               	clrf	?_getBuz_GO+1
  8430  1F1A  07A1               	addwf	?_getBuz_GO+1,f
  8431  1F1B  0824               	movf	getBuz_GO@i,w
  8432  1F1C  01A0               	clrf	?_getBuz_GO
  8433  1F1D  07A0               	addwf	?_getBuz_GO,f
  8434  1F1E  0008               	return
  8435  1F1F                     __end_of_getBuz_GO:	
  8436                           
  8437                           	psect	text39
  8438  1EBE                     __ptext39:	
  8439 ;; *************** function _RF_RxDisable *****************
  8440 ;; Defined at:
  8441 ;;		line 223 in file "../src/RF_Control_B1.c"
  8442 ;; Parameters:    Size  Location     Type
  8443 ;;		None
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;		None
  8446 ;; Return value:  Size  Location     Type
  8447 ;;		None               void
  8448 ;; Registers used:
  8449 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8450 ;; Tracked objects:
  8451 ;;		On entry : 0/0
  8452 ;;		On exit  : 0/0
  8453 ;;		Unchanged: 0/0
  8454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8459 ;;Total ram usage:        0 bytes
  8460 ;; Hardware stack levels used:    1
  8461 ;; Hardware stack levels required when called:    6
  8462 ;; This function calls:
  8463 ;;		_CC2500_WriteCommand
  8464 ;; This function is called by:
  8465 ;;		_setRF_Main
  8466 ;; This function uses a non-reentrant model
  8467 ;;
  8468                           
  8469                           
  8470                           ;psect for function _RF_RxDisable
  8471  1EBE                     _RF_RxDisable:	
  8472                           
  8473                           ;RF_Control_B1.c: 224: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8474                           
  8475                           ;incstack = 0
  8476                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8477  1EBE  0021               	movlb	1	; select bank1
  8478  1EBF  18A0               	btfsc	_RF1^(0+128),1
  8479  1EC0  2EC3               	goto	l2168
  8480  1EC1  1DA0               	btfss	_RF1^(0+128),3
  8481  1EC2  0008               	return
  8482  1EC3                     l2168:	
  8483                           
  8484                           ;RF_Control_B1.c: 225: RF1.RxStatus = 0;
  8485  1EC3  11A0               	bcf	_RF1^(0+128),3
  8486                           
  8487                           ;RF_Control_B1.c: 226: RF1.ReceiveGO = 0;
  8488  1EC4  10A0               	bcf	_RF1^(0+128),1
  8489                           
  8490                           ;RF_Control_B1.c: 227: CC2500_WriteCommand(0x36);
  8491  1EC5  3036               	movlw	54
  8492  1EC6  3191  2141  319E   	fcall	_CC2500_WriteCommand
  8493                           
  8494                           ;RF_Control_B1.c: 228: CC2500_WriteCommand(0x3A);
  8495  1EC9  303A               	movlw	58
  8496  1ECA  3191  2141         	fcall	_CC2500_WriteCommand
  8497  1ECC  0008               	return
  8498  1ECD                     __end_of_RF_RxDisable:	
  8499                           
  8500                           	psect	text40
  8501  0CCC                     __ptext40:	
  8502 ;; *************** function _CC2500_TxData *****************
  8503 ;; Defined at:
  8504 ;;		line 32 in file "../src/CC2500_B1.c"
  8505 ;; Parameters:    Size  Location     Type
  8506 ;;		None
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8509 ;; Return value:  Size  Location     Type
  8510 ;;		None               void
  8511 ;; Registers used:
  8512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8513 ;; Tracked objects:
  8514 ;;		On entry : 0/0
  8515 ;;		On exit  : 0/0
  8516 ;;		Unchanged: 0/0
  8517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8519 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;Total ram usage:        2 bytes
  8523 ;; Hardware stack levels used:    1
  8524 ;; Hardware stack levels required when called:    6
  8525 ;; This function calls:
  8526 ;;		_CC2500_WriteByte
  8527 ;;		_CC2500_WriteCommand
  8528 ;;		_RF_Timeout_Counter
  8529 ;;		_setRF_TimeoutCleared
  8530 ;; This function is called by:
  8531 ;;		_setRF_Main
  8532 ;; This function uses a non-reentrant model
  8533 ;;
  8534                           
  8535                           
  8536                           ;psect for function _CC2500_TxData
  8537  0CCC                     _CC2500_TxData:	
  8538                           
  8539                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8540                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8541                           
  8542                           ;incstack = 0
  8543                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8544  0CCC  3036               	movlw	54
  8545  0CCD  3191  2141  318C   	fcall	_CC2500_WriteCommand
  8546                           
  8547                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8548  0CD0  303B               	movlw	59
  8549  0CD1  3191  2141  318C   	fcall	_CC2500_WriteCommand
  8550                           
  8551                           ;CC2500_B1.c: 38: RC4 = 0;
  8552  0CD4  0020               	movlb	0	; select bank0
  8553  0CD5  120E               	bcf	14,4	;volatile
  8554                           
  8555                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8556  0CD6  307F               	movlw	127
  8557  0CD7  00A4               	movwf	??_CC2500_TxData
  8558  0CD8  0824               	movf	??_CC2500_TxData,w
  8559  0CD9  00F9               	movwf	_SPI0Buffer
  8560                           
  8561                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8562  0CDA  2CDE               	goto	l8695
  8563  0CDB                     l8693:	
  8564                           
  8565                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8566  0CDB  3190  20BF  318C   	fcall	_RF_Timeout_Counter
  8567  0CDE                     l8695:	
  8568  0CDE  0020               	movlb	0	; select bank0
  8569  0CDF  1D0E               	btfss	14,2	;volatile
  8570  0CE0  2CE4               	goto	l8699
  8571  0CE1  0021               	movlb	1	; select bank1
  8572  0CE2  1F21               	btfss	(_RF1^(0+128)+1),6
  8573  0CE3  2CDB               	goto	l8693
  8574  0CE4                     l8699:	
  8575                           
  8576                           ;CC2500_B1.c: 42: };
  8577                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8578  0CE4  319D  25DE  318C   	fcall	_setRF_TimeoutCleared
  8579                           
  8580                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8581  0CE7  3190  206E  318C   	fcall	_CC2500_WriteByte
  8582                           
  8583                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8584  0CEA  0021               	movlb	1	; select bank1
  8585  0CEB  0856               	movf	_Tx_Length^(0+128),w
  8586  0CEC  0020               	movlb	0	; select bank0
  8587  0CED  00A4               	movwf	??_CC2500_TxData
  8588  0CEE  0824               	movf	??_CC2500_TxData,w
  8589  0CEF  00F9               	movwf	_SPI0Buffer
  8590                           
  8591                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8592  0CF0  3190  206E  318C   	fcall	_CC2500_WriteByte
  8593                           
  8594                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8595  0CF3  0020               	movlb	0	; select bank0
  8596  0CF4  01A5               	clrf	CC2500_TxData@loop_e
  8597  0CF5                     l8713:	
  8598  0CF5  0021               	movlb	1	; select bank1
  8599  0CF6  0856               	movf	_Tx_Length^(0+128),w
  8600  0CF7  0020               	movlb	0	; select bank0
  8601  0CF8  0225               	subwf	CC2500_TxData@loop_e,w
  8602  0CF9  1803               	btfsc	3,0
  8603  0CFA  2D0D               	goto	l251
  8604                           
  8605                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8606  0CFB  0825               	movf	CC2500_TxData@loop_e,w
  8607  0CFC  3E20               	addlw	_RF_Data& (0+255)
  8608  0CFD  0086               	movwf	6
  8609  0CFE  3001               	movlw	1	; select bank2/3
  8610  0CFF  0087               	movwf	7
  8611  0D00  0801               	movf	1,w
  8612  0D01  00A4               	movwf	??_CC2500_TxData
  8613  0D02  0824               	movf	??_CC2500_TxData,w
  8614  0D03  00F9               	movwf	_SPI0Buffer
  8615                           
  8616                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8617  0D04  3190  206E  318C   	fcall	_CC2500_WriteByte
  8618  0D07  3001               	movlw	1
  8619  0D08  0020               	movlb	0	; select bank0
  8620  0D09  00A4               	movwf	??_CC2500_TxData
  8621  0D0A  0824               	movf	??_CC2500_TxData,w
  8622  0D0B  07A5               	addwf	CC2500_TxData@loop_e,f
  8623  0D0C  2CF5               	goto	l8713
  8624  0D0D                     l251:	
  8625                           
  8626                           ;CC2500_B1.c: 51: }
  8627                           ;CC2500_B1.c: 52: RC4 = 1;
  8628  0D0D  160E               	bsf	14,4	;volatile
  8629                           
  8630                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8631  0D0E  3035               	movlw	53
  8632  0D0F  3191  2141  318C   	fcall	_CC2500_WriteCommand
  8633                           
  8634                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8635  0D12  2D16               	goto	l8719
  8636  0D13                     l8717:	
  8637                           
  8638                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8639  0D13  3190  20BF  318C   	fcall	_RF_Timeout_Counter
  8640  0D16                     l8719:	
  8641  0D16  0020               	movlb	0	; select bank0
  8642  0D17  180D               	btfsc	13,0	;volatile
  8643  0D18  2D1C               	goto	l8723
  8644  0D19  0021               	movlb	1	; select bank1
  8645  0D1A  1F21               	btfss	(_RF1^(0+128)+1),6
  8646  0D1B  2D13               	goto	l8717
  8647  0D1C                     l8723:	
  8648                           
  8649                           ;CC2500_B1.c: 56: };
  8650                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8651  0D1C  319D  25DE  318C   	fcall	_setRF_TimeoutCleared
  8652                           
  8653                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8654  0D1F  2D23               	goto	l8727
  8655  0D20                     l8725:	
  8656                           
  8657                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8658  0D20  3190  20BF  318C   	fcall	_RF_Timeout_Counter
  8659  0D23                     l8727:	
  8660  0D23  0020               	movlb	0	; select bank0
  8661  0D24  1C0D               	btfss	13,0	;volatile
  8662  0D25  2D29               	goto	l8731
  8663  0D26  0021               	movlb	1	; select bank1
  8664  0D27  1F21               	btfss	(_RF1^(0+128)+1),6
  8665  0D28  2D20               	goto	l8725
  8666  0D29                     l8731:	
  8667                           
  8668                           ;CC2500_B1.c: 61: };
  8669                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8670  0D29  319D  25DE  318C   	fcall	_setRF_TimeoutCleared
  8671                           
  8672                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8673  0D2C  3036               	movlw	54
  8674  0D2D  3191  2141  318C   	fcall	_CC2500_WriteCommand
  8675                           
  8676                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8677  0D30  303B               	movlw	59
  8678  0D31  3191  2141         	fcall	_CC2500_WriteCommand
  8679                           
  8680                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8681  0D33  14FB               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8682  0D34  0008               	return
  8683  0D35                     __end_of_CC2500_TxData:	
  8684                           
  8685                           	psect	text41
  8686  0BFF                     __ptext41:	
  8687 ;; *************** function _CC2500_RxData *****************
  8688 ;; Defined at:
  8689 ;;		line 73 in file "../src/CC2500_B1.c"
  8690 ;; Parameters:    Size  Location     Type
  8691 ;;		None
  8692 ;; Auto vars:     Size  Location     Type
  8693 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8694 ;; Return value:  Size  Location     Type
  8695 ;;		None               void
  8696 ;; Registers used:
  8697 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8698 ;; Tracked objects:
  8699 ;;		On entry : 0/0
  8700 ;;		On exit  : 0/0
  8701 ;;		Unchanged: 0/0
  8702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;Total ram usage:        2 bytes
  8708 ;; Hardware stack levels used:    1
  8709 ;; Hardware stack levels required when called:    6
  8710 ;; This function calls:
  8711 ;;		_CC2500_ReadByte
  8712 ;;		_CC2500_ReadStatus
  8713 ;;		_CC2500_WriteByte
  8714 ;;		_CC2500_WriteCommand
  8715 ;;		_RF_Timeout_Counter
  8716 ;;		_setRF_TimeoutCleared
  8717 ;; This function is called by:
  8718 ;;		_setRF_Main
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           
  8723                           ;psect for function _CC2500_RxData
  8724  0BFF                     _CC2500_RxData:	
  8725                           
  8726                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8727                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8728                           
  8729                           ;incstack = 0
  8730                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8731  0BFF  0020               	movlb	0	; select bank0
  8732  0C00  180D               	btfsc	13,0	;volatile
  8733  0C01  0008               	return
  8734                           
  8735                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8736  0C02  303B               	movlw	59
  8737  0C03  3192  2287  318B   	fcall	_CC2500_ReadStatus
  8738                           
  8739                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8740  0C06  0021               	movlb	1	; select bank1
  8741  0C07  0859               	movf	_s_data^(0+128),w
  8742  0C08  1903               	btfsc	3,2
  8743  0C09  0008               	return
  8744                           
  8745                           ;CC2500_B1.c: 90: RC4 = 0;
  8746  0C0A  0020               	movlb	0	; select bank0
  8747  0C0B  120E               	bcf	14,4	;volatile
  8748                           
  8749                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8750  0C0C  30FF               	movlw	255
  8751  0C0D  00A4               	movwf	??_CC2500_RxData
  8752  0C0E  0824               	movf	??_CC2500_RxData,w
  8753  0C0F  00F9               	movwf	_SPI0Buffer
  8754                           
  8755                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8756  0C10  2C14               	goto	l8751
  8757  0C11                     l8749:	
  8758                           
  8759                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8760  0C11  3190  20BF  318B   	fcall	_RF_Timeout_Counter
  8761  0C14                     l8751:	
  8762  0C14  0020               	movlb	0	; select bank0
  8763  0C15  1D0E               	btfss	14,2	;volatile
  8764  0C16  2C1A               	goto	l8755
  8765  0C17  0021               	movlb	1	; select bank1
  8766  0C18  1F21               	btfss	(_RF1^(0+128)+1),6
  8767  0C19  2C11               	goto	l8749
  8768  0C1A                     l8755:	
  8769                           
  8770                           ;CC2500_B1.c: 95: };
  8771                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8772  0C1A  319D  25DE  318B   	fcall	_setRF_TimeoutCleared
  8773                           
  8774                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8775  0C1D  3190  206E  318B   	fcall	_CC2500_WriteByte
  8776                           
  8777                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8778  0C20  3191  212A  318B   	fcall	_CC2500_ReadByte
  8779                           
  8780                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8781  0C23  0879               	movf	_SPI0Buffer,w
  8782  0C24  0020               	movlb	0	; select bank0
  8783  0C25  00A4               	movwf	??_CC2500_RxData
  8784  0C26  0824               	movf	??_CC2500_RxData,w
  8785  0C27  0021               	movlb	1	; select bank1
  8786  0C28  00D4               	movwf	_Rx_Length^(0+128)
  8787                           
  8788                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8789  0C29  0020               	movlb	0	; select bank0
  8790  0C2A  01A5               	clrf	CC2500_RxData@loop_f
  8791  0C2B                     l8771:	
  8792  0C2B  0021               	movlb	1	; select bank1
  8793  0C2C  0854               	movf	_Rx_Length^(0+128),w
  8794  0C2D  0020               	movlb	0	; select bank0
  8795  0C2E  0225               	subwf	CC2500_RxData@loop_f,w
  8796  0C2F  1803               	btfsc	3,0
  8797  0C30  2C43               	goto	l8773
  8798                           
  8799                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8800  0C31  3191  212A  318B   	fcall	_CC2500_ReadByte
  8801                           
  8802                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8803  0C34  0879               	movf	_SPI0Buffer,w
  8804  0C35  0020               	movlb	0	; select bank0
  8805  0C36  00A4               	movwf	??_CC2500_RxData
  8806  0C37  0825               	movf	CC2500_RxData@loop_f,w
  8807  0C38  3E20               	addlw	_RF_Data& (0+255)
  8808  0C39  0086               	movwf	6
  8809  0C3A  3001               	movlw	1	; select bank2/3
  8810  0C3B  0087               	movwf	7
  8811  0C3C  0824               	movf	??_CC2500_RxData,w
  8812  0C3D  0081               	movwf	1
  8813  0C3E  3001               	movlw	1
  8814  0C3F  00A4               	movwf	??_CC2500_RxData
  8815  0C40  0824               	movf	??_CC2500_RxData,w
  8816  0C41  07A5               	addwf	CC2500_RxData@loop_f,f
  8817  0C42  2C2B               	goto	l8771
  8818  0C43                     l8773:	
  8819                           
  8820                           ;CC2500_B1.c: 104: }
  8821                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8822  0C43  3191  212A  318B   	fcall	_CC2500_ReadByte
  8823                           
  8824                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8825  0C46  0879               	movf	_SPI0Buffer,w
  8826  0C47  0020               	movlb	0	; select bank0
  8827  0C48  00A4               	movwf	??_CC2500_RxData
  8828  0C49  0824               	movf	??_CC2500_RxData,w
  8829  0C4A  0021               	movlb	1	; select bank1
  8830  0C4B  00D3               	movwf	_RSSI^(0+128)
  8831                           
  8832                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8833  0C4C  3191  212A  318B   	fcall	_CC2500_ReadByte
  8834                           
  8835                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8836  0C4F  0879               	movf	_SPI0Buffer,w
  8837  0C50  0020               	movlb	0	; select bank0
  8838  0C51  00A4               	movwf	??_CC2500_RxData
  8839  0C52  0824               	movf	??_CC2500_RxData,w
  8840  0C53  0021               	movlb	1	; select bank1
  8841  0C54  00CF               	movwf	_CRC^(0+128)
  8842                           
  8843                           ;CC2500_B1.c: 109: RC4 = 1;
  8844  0C55  0020               	movlb	0	; select bank0
  8845  0C56  160E               	bsf	14,4	;volatile
  8846                           
  8847                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8848  0C57  0021               	movlb	1	; select bank1
  8849  0C58  1BCF               	btfsc	_CRC^(0+128),7
  8850                           
  8851                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8852  0C59  147B               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8853                           
  8854                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8855  0C5A  11A0               	bcf	_RF1^(0+128),3
  8856                           
  8857                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8858  0C5B  14A0               	bsf	_RF1^(0+128),1
  8859                           
  8860                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8861  0C5C  3036               	movlw	54
  8862  0C5D  3191  2141  318B   	fcall	_CC2500_WriteCommand
  8863                           
  8864                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8865  0C60  303A               	movlw	58
  8866  0C61  3191  2141         	fcall	_CC2500_WriteCommand
  8867  0C63  0021               	movlb	1	; select bank1
  8868  0C64  0008               	return
  8869  0C65                     __end_of_CC2500_RxData:	
  8870                           
  8871                           	psect	text42
  8872  1287                     __ptext42:	
  8873 ;; *************** function _CC2500_ReadStatus *****************
  8874 ;; Defined at:
  8875 ;;		line 308 in file "../src/CC2500_B1.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;  status_addr     1    wreg     unsigned char 
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8880 ;; Return value:  Size  Location     Type
  8881 ;;		None               void
  8882 ;; Registers used:
  8883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8884 ;; Tracked objects:
  8885 ;;		On entry : 0/0
  8886 ;;		On exit  : 0/0
  8887 ;;		Unchanged: 0/0
  8888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;Total ram usage:        2 bytes
  8894 ;; Hardware stack levels used:    1
  8895 ;; Hardware stack levels required when called:    5
  8896 ;; This function calls:
  8897 ;;		_CC2500_ReadByte
  8898 ;;		_CC2500_WriteByte
  8899 ;;		_RF_Timeout_Counter
  8900 ;;		_setRF_TimeoutCleared
  8901 ;; This function is called by:
  8902 ;;		_CC2500_RxData
  8903 ;; This function uses a non-reentrant model
  8904 ;;
  8905                           
  8906                           
  8907                           ;psect for function _CC2500_ReadStatus
  8908  1287                     _CC2500_ReadStatus:	
  8909                           
  8910                           ;incstack = 0
  8911                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8912                           ;CC2500_ReadStatus@status_addr stored from wreg
  8913  1287  0020               	movlb	0	; select bank0
  8914  1288  00A3               	movwf	CC2500_ReadStatus@status_addr
  8915                           
  8916                           ;CC2500_B1.c: 309: RC4 = 0;
  8917  1289  120E               	bcf	14,4	;volatile
  8918                           
  8919                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8920  128A  0823               	movf	CC2500_ReadStatus@status_addr,w
  8921  128B  3EC0               	addlw	192
  8922  128C  00A2               	movwf	??_CC2500_ReadStatus
  8923  128D  0822               	movf	??_CC2500_ReadStatus,w
  8924  128E  00F9               	movwf	_SPI0Buffer
  8925                           
  8926                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8927  128F  2A93               	goto	l8477
  8928  1290                     l8475:	
  8929                           
  8930                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8931  1290  3190  20BF  3192   	fcall	_RF_Timeout_Counter
  8932  1293                     l8477:	
  8933  1293  0020               	movlb	0	; select bank0
  8934  1294  1D0E               	btfss	14,2	;volatile
  8935  1295  2A99               	goto	l8481
  8936  1296  0021               	movlb	1	; select bank1
  8937  1297  1F21               	btfss	(_RF1^(0+128)+1),6
  8938  1298  2A90               	goto	l8475
  8939  1299                     l8481:	
  8940                           
  8941                           ;CC2500_B1.c: 314: };
  8942                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8943  1299  319D  25DE  3192   	fcall	_setRF_TimeoutCleared
  8944                           
  8945                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8946  129C  3190  206E  3192   	fcall	_CC2500_WriteByte
  8947                           
  8948                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8949  129F  3191  212A         	fcall	_CC2500_ReadByte
  8950                           
  8951                           ;CC2500_B1.c: 319: RC4 = 1;
  8952  12A1  0020               	movlb	0	; select bank0
  8953  12A2  160E               	bsf	14,4	;volatile
  8954                           
  8955                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8956  12A3  0879               	movf	_SPI0Buffer,w
  8957  12A4  00A2               	movwf	??_CC2500_ReadStatus
  8958  12A5  0822               	movf	??_CC2500_ReadStatus,w
  8959  12A6  0021               	movlb	1	; select bank1
  8960  12A7  00D9               	movwf	_s_data^(0+128)
  8961  12A8  0008               	return
  8962  12A9                     __end_of_CC2500_ReadStatus:	
  8963                           
  8964                           	psect	text43
  8965  112A                     __ptext43:	
  8966 ;; *************** function _CC2500_ReadByte *****************
  8967 ;; Defined at:
  8968 ;;		line 242 in file "../src/CC2500_B1.c"
  8969 ;; Parameters:    Size  Location     Type
  8970 ;;		None
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8973 ;; Return value:  Size  Location     Type
  8974 ;;		None               void
  8975 ;; Registers used:
  8976 ;;		wreg, status,2, status,0
  8977 ;; Tracked objects:
  8978 ;;		On entry : 0/0
  8979 ;;		On exit  : 0/0
  8980 ;;		Unchanged: 0/0
  8981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8983 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;Total ram usage:        2 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; Hardware stack levels required when called:    4
  8989 ;; This function calls:
  8990 ;;		Nothing
  8991 ;; This function is called by:
  8992 ;;		_CC2500_RxData
  8993 ;;		_CC2500_ReadStatus
  8994 ;;		_CC2500_ReadREG
  8995 ;; This function uses a non-reentrant model
  8996 ;;
  8997                           
  8998                           
  8999                           ;psect for function _CC2500_ReadByte
  9000  112A                     _CC2500_ReadByte:	
  9001                           
  9002                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9003                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9004                           
  9005                           ;incstack = 0
  9006                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9007  112A  0020               	movlb	0	; select bank0
  9008  112B  01A1               	clrf	CC2500_ReadByte@loop_b
  9009  112C                     L3:	
  9010  112C  3008               	movlw	8
  9011  112D  0221               	subwf	CC2500_ReadByte@loop_b,w
  9012  112E  1803               	btfsc	3,0
  9013  112F  0008               	return
  9014                           
  9015                           ;CC2500_B1.c: 245: RC1 = 1;
  9016  1130  148E               	bsf	14,1	;volatile
  9017                           
  9018                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9019  1131  1003               	clrc
  9020  1132  0DF9               	rlf	_SPI0Buffer,f
  9021                           
  9022                           ;CC2500_B1.c: 247: if (RC2 == 1)
  9023  1133  1D0E               	btfss	14,2	;volatile
  9024  1134  2937               	goto	l8365
  9025                           
  9026                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9027  1135  1479               	bsf	_SPI0Buffer,0
  9028  1136  293B               	goto	l8367
  9029  1137                     l8365:	
  9030                           
  9031                           ;CC2500_B1.c: 249: else
  9032                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9033  1137  30FE               	movlw	254
  9034  1138  00A0               	movwf	??_CC2500_ReadByte
  9035  1139  0820               	movf	??_CC2500_ReadByte,w
  9036  113A  05F9               	andwf	_SPI0Buffer,f
  9037  113B                     l8367:	
  9038                           
  9039                           ;CC2500_B1.c: 251: RC1 = 0;
  9040  113B  108E               	bcf	14,1	;volatile
  9041  113C  3001               	movlw	1
  9042  113D  00A0               	movwf	??_CC2500_ReadByte
  9043  113E  0820               	movf	??_CC2500_ReadByte,w
  9044  113F  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9045  1140  292C               	goto	L3
  9046  1141                     __end_of_CC2500_ReadByte:	
  9047                           
  9048                           	psect	text44
  9049  10D4                     __ptext44:	
  9050 ;; *************** function _CC2500_PowerOnInitial *****************
  9051 ;; Defined at:
  9052 ;;		line 126 in file "../src/CC2500_B1.c"
  9053 ;; Parameters:    Size  Location     Type
  9054 ;;		None
  9055 ;; Auto vars:     Size  Location     Type
  9056 ;;		None
  9057 ;; Return value:  Size  Location     Type
  9058 ;;		None               void
  9059 ;; Registers used:
  9060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9061 ;; Tracked objects:
  9062 ;;		On entry : 0/0
  9063 ;;		On exit  : 0/0
  9064 ;;		Unchanged: 0/0
  9065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;Total ram usage:        0 bytes
  9071 ;; Hardware stack levels used:    1
  9072 ;; Hardware stack levels required when called:    7
  9073 ;; This function calls:
  9074 ;;		_CC2500_ClearRXFIFO
  9075 ;;		_CC2500_ClearTXFIFO
  9076 ;;		_CC2500_FrequencyCabr
  9077 ;;		_CC2500_InitPATable
  9078 ;;		_CC2500_InitSetREG
  9079 ;;		_CC2500_PowerRST
  9080 ;;		_CC2500_SIDLEMode
  9081 ;; This function is called by:
  9082 ;;		_main
  9083 ;;		_setRF_Main
  9084 ;; This function uses a non-reentrant model
  9085 ;;
  9086                           
  9087                           
  9088                           ;psect for function _CC2500_PowerOnInitial
  9089  10D4                     _CC2500_PowerOnInitial:	
  9090                           
  9091                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9092                           
  9093                           ;incstack = 0
  9094                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9095  10D4  3195  25F1  3190   	fcall	_CC2500_PowerRST
  9096                           
  9097                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9098  10D7  3188  2002  3190   	fcall	_CC2500_InitSetREG
  9099                           
  9100                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9101  10DA  3191  21C6  3190   	fcall	_CC2500_InitPATable
  9102                           
  9103                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9104  10DD  319D  25E6  3190   	fcall	_CC2500_ClearTXFIFO
  9105                           
  9106                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9107  10E0  319D  25E2  3190   	fcall	_CC2500_ClearRXFIFO
  9108                           
  9109                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9110  10E3  319E  2696  3190   	fcall	_CC2500_FrequencyCabr
  9111                           
  9112                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9113  10E6  319D  25EA         	fcall	_CC2500_SIDLEMode
  9114  10E8  0008               	return
  9115  10E9                     __end_of_CC2500_PowerOnInitial:	
  9116                           
  9117                           	psect	text45
  9118  1DEA                     __ptext45:	
  9119 ;; *************** function _CC2500_SIDLEMode *****************
  9120 ;; Defined at:
  9121 ;;		line 216 in file "../src/CC2500_B1.c"
  9122 ;; Parameters:    Size  Location     Type
  9123 ;;		None
  9124 ;; Auto vars:     Size  Location     Type
  9125 ;;		None
  9126 ;; Return value:  Size  Location     Type
  9127 ;;		None               void
  9128 ;; Registers used:
  9129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9130 ;; Tracked objects:
  9131 ;;		On entry : 0/0
  9132 ;;		On exit  : 0/0
  9133 ;;		Unchanged: 0/0
  9134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9139 ;;Total ram usage:        0 bytes
  9140 ;; Hardware stack levels used:    1
  9141 ;; Hardware stack levels required when called:    6
  9142 ;; This function calls:
  9143 ;;		_CC2500_WriteCommand
  9144 ;; This function is called by:
  9145 ;;		_CC2500_PowerOnInitial
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           
  9150                           ;psect for function _CC2500_SIDLEMode
  9151  1DEA                     _CC2500_SIDLEMode:	
  9152                           
  9153                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9154                           
  9155                           ;incstack = 0
  9156                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9157  1DEA  3036               	movlw	54
  9158  1DEB  3191  2141         	fcall	_CC2500_WriteCommand
  9159  1DED  0008               	return
  9160  1DEE                     __end_of_CC2500_SIDLEMode:	
  9161                           
  9162                           	psect	text46
  9163  15F1                     __ptext46:	
  9164 ;; *************** function _CC2500_PowerRST *****************
  9165 ;; Defined at:
  9166 ;;		line 139 in file "../src/CC2500_B1.c"
  9167 ;; Parameters:    Size  Location     Type
  9168 ;;		None
  9169 ;; Auto vars:     Size  Location     Type
  9170 ;;		None
  9171 ;; Return value:  Size  Location     Type
  9172 ;;		None               void
  9173 ;; Registers used:
  9174 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9175 ;; Tracked objects:
  9176 ;;		On entry : 0/0
  9177 ;;		On exit  : 0/0
  9178 ;;		Unchanged: 0/0
  9179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9183 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9184 ;;Total ram usage:        1 bytes
  9185 ;; Hardware stack levels used:    1
  9186 ;; Hardware stack levels required when called:    5
  9187 ;; This function calls:
  9188 ;;		_CC2500_WriteByte
  9189 ;;		_DelayTime_1us
  9190 ;;		_RF_Timeout_Counter
  9191 ;;		_setRF_TimeoutCleared
  9192 ;; This function is called by:
  9193 ;;		_CC2500_PowerOnInitial
  9194 ;; This function uses a non-reentrant model
  9195 ;;
  9196                           
  9197                           
  9198                           ;psect for function _CC2500_PowerRST
  9199  15F1                     _CC2500_PowerRST:	
  9200                           
  9201                           ;CC2500_B1.c: 140: RC1 = 0;
  9202                           
  9203                           ;incstack = 0
  9204                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9205  15F1  0020               	movlb	0	; select bank0
  9206  15F2  108E               	bcf	14,1	;volatile
  9207                           
  9208                           ;CC2500_B1.c: 141: RC0 = 0;
  9209  15F3  100E               	bcf	14,0	;volatile
  9210                           
  9211                           ;CC2500_B1.c: 142: RC4 = 1;
  9212  15F4  160E               	bsf	14,4	;volatile
  9213                           
  9214                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9215  15F5  300A               	movlw	10
  9216  15F6  00A0               	movwf	DelayTime_1us@count
  9217  15F7  3000               	movlw	0
  9218  15F8  00A1               	movwf	DelayTime_1us@count+1
  9219  15F9  3192  22F1  3195   	fcall	_DelayTime_1us
  9220                           
  9221                           ;CC2500_B1.c: 144: RC4 = 0;
  9222  15FC  0020               	movlb	0	; select bank0
  9223  15FD  120E               	bcf	14,4	;volatile
  9224                           
  9225                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9226  15FE  300A               	movlw	10
  9227  15FF  00A0               	movwf	DelayTime_1us@count
  9228  1600  3000               	movlw	0
  9229  1601  00A1               	movwf	DelayTime_1us@count+1
  9230  1602  3192  22F1  3195   	fcall	_DelayTime_1us
  9231                           
  9232                           ;CC2500_B1.c: 146: RC4 = 1;
  9233  1605  0020               	movlb	0	; select bank0
  9234  1606  160E               	bsf	14,4	;volatile
  9235                           
  9236                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9237  1607  3028               	movlw	40
  9238  1608  00A0               	movwf	DelayTime_1us@count
  9239  1609  3000               	movlw	0
  9240  160A  00A1               	movwf	DelayTime_1us@count+1
  9241  160B  3192  22F1  3195   	fcall	_DelayTime_1us
  9242                           
  9243                           ;CC2500_B1.c: 148: RC4 = 0;
  9244  160E  0020               	movlb	0	; select bank0
  9245  160F  120E               	bcf	14,4	;volatile
  9246                           
  9247                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9248  1610  3030               	movlw	48
  9249  1611  00A6               	movwf	??_CC2500_PowerRST
  9250  1612  0826               	movf	??_CC2500_PowerRST,w
  9251  1613  00F9               	movwf	_SPI0Buffer
  9252                           
  9253                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9254  1614  2E18               	goto	l8505
  9255  1615                     l8503:	
  9256                           
  9257                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9258  1615  3190  20BF  3195   	fcall	_RF_Timeout_Counter
  9259  1618                     l8505:	
  9260  1618  0020               	movlb	0	; select bank0
  9261  1619  1D0E               	btfss	14,2	;volatile
  9262  161A  2E1E               	goto	l8509
  9263  161B  0021               	movlb	1	; select bank1
  9264  161C  1F21               	btfss	(_RF1^(0+128)+1),6
  9265  161D  2E15               	goto	l8503
  9266  161E                     l8509:	
  9267                           
  9268                           ;CC2500_B1.c: 152: };
  9269                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9270  161E  319D  25DE  3195   	fcall	_setRF_TimeoutCleared
  9271                           
  9272                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9273  1621  3190  206E  3195   	fcall	_CC2500_WriteByte
  9274                           
  9275                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9276  1624  2E28               	goto	l8515
  9277  1625                     l8513:	
  9278                           
  9279                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9280  1625  3190  20BF  3195   	fcall	_RF_Timeout_Counter
  9281  1628                     l8515:	
  9282  1628  0020               	movlb	0	; select bank0
  9283  1629  1D0E               	btfss	14,2	;volatile
  9284  162A  2E2E               	goto	l8519
  9285  162B  0021               	movlb	1	; select bank1
  9286  162C  1F21               	btfss	(_RF1^(0+128)+1),6
  9287  162D  2E25               	goto	l8513
  9288  162E                     l8519:	
  9289                           
  9290                           ;CC2500_B1.c: 157: };
  9291                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9292  162E  319D  25DE         	fcall	_setRF_TimeoutCleared
  9293                           
  9294                           ;CC2500_B1.c: 159: RC0 = 0;
  9295  1630  0020               	movlb	0	; select bank0
  9296  1631  100E               	bcf	14,0	;volatile
  9297                           
  9298                           ;CC2500_B1.c: 160: RC4 = 1;
  9299  1632  160E               	bsf	14,4	;volatile
  9300  1633  0008               	return
  9301  1634                     __end_of_CC2500_PowerRST:	
  9302                           
  9303                           	psect	text47
  9304  0802                     __ptext47:	
  9305 ;; *************** function _CC2500_InitSetREG *****************
  9306 ;; Defined at:
  9307 ;;		line 166 in file "../src/CC2500_B1.c"
  9308 ;; Parameters:    Size  Location     Type
  9309 ;;		None
  9310 ;; Auto vars:     Size  Location     Type
  9311 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9312 ;;  temp2           1    7[BANK0 ] unsigned char 
  9313 ;;  temp1           1    6[BANK0 ] unsigned char 
  9314 ;; Return value:  Size  Location     Type
  9315 ;;		None               void
  9316 ;; Registers used:
  9317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;Total ram usage:        4 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    6
  9330 ;; This function calls:
  9331 ;;		_CC2500_WriteREG
  9332 ;; This function is called by:
  9333 ;;		_CC2500_PowerOnInitial
  9334 ;; This function uses a non-reentrant model
  9335 ;;
  9336                           
  9337                           
  9338                           ;psect for function _CC2500_InitSetREG
  9339  0802                     _CC2500_InitSetREG:	
  9340                           
  9341                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9342                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9343                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9344                           
  9345                           ;incstack = 0
  9346                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9347  0802  0020               	movlb	0	; select bank0
  9348  0803  01A8               	clrf	CC2500_InitSetREG@loop_c
  9349  0804                     L4:	
  9350  0804  302F               	movlw	47
  9351  0805  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9352  0806  1803               	btfsc	3,0
  9353  0807  0008               	return
  9354                           
  9355                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9356  0808  0828               	movf	CC2500_InitSetREG@loop_c,w
  9357  0809  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9358  080A  0084               	movwf	4
  9359  080B  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9360  080C  1803               	skipnc
  9361  080D  3E01               	addlw	1
  9362  080E  0085               	movwf	5
  9363  080F  0800               	movf	0,w	;code access
  9364  0810  00A5               	movwf	??_CC2500_InitSetREG
  9365  0811  0825               	movf	??_CC2500_InitSetREG,w
  9366  0812  00A6               	movwf	CC2500_InitSetREG@temp1
  9367                           
  9368                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9369  0813  0828               	movf	CC2500_InitSetREG@loop_c,w
  9370  0814  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9371  0815  0084               	movwf	4
  9372  0816  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9373  0817  1803               	skipnc
  9374  0818  3E01               	addlw	1
  9375  0819  0085               	movwf	5
  9376  081A  0800               	movf	0,w	;code access
  9377  081B  00A5               	movwf	??_CC2500_InitSetREG
  9378  081C  0825               	movf	??_CC2500_InitSetREG,w
  9379  081D  00A7               	movwf	CC2500_InitSetREG@temp2
  9380                           
  9381                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9382  081E  0827               	movf	CC2500_InitSetREG@temp2,w
  9383  081F  00A5               	movwf	??_CC2500_InitSetREG
  9384  0820  0825               	movf	??_CC2500_InitSetREG,w
  9385  0821  00A2               	movwf	CC2500_WriteREG@value
  9386  0822  0826               	movf	CC2500_InitSetREG@temp1,w
  9387  0823  3192  2244  3188   	fcall	_CC2500_WriteREG
  9388  0826  3001               	movlw	1
  9389  0827  0020               	movlb	0	; select bank0
  9390  0828  00A5               	movwf	??_CC2500_InitSetREG
  9391  0829  0825               	movf	??_CC2500_InitSetREG,w
  9392  082A  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9393  082B  2804               	goto	L4
  9394  082C                     __end_of_CC2500_InitSetREG:	
  9395                           
  9396                           	psect	text48
  9397  11C6                     __ptext48:	
  9398 ;; *************** function _CC2500_InitPATable *****************
  9399 ;; Defined at:
  9400 ;;		line 181 in file "../src/CC2500_B1.c"
  9401 ;; Parameters:    Size  Location     Type
  9402 ;;		None
  9403 ;; Auto vars:     Size  Location     Type
  9404 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9405 ;;  temp            1    6[BANK0 ] unsigned char 
  9406 ;; Return value:  Size  Location     Type
  9407 ;;		None               void
  9408 ;; Registers used:
  9409 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9410 ;; Tracked objects:
  9411 ;;		On entry : 0/0
  9412 ;;		On exit  : 0/0
  9413 ;;		Unchanged: 0/0
  9414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;Total ram usage:        3 bytes
  9420 ;; Hardware stack levels used:    1
  9421 ;; Hardware stack levels required when called:    6
  9422 ;; This function calls:
  9423 ;;		_CC2500_WriteREG
  9424 ;; This function is called by:
  9425 ;;		_CC2500_PowerOnInitial
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           
  9430                           ;psect for function _CC2500_InitPATable
  9431  11C6                     _CC2500_InitPATable:	
  9432                           
  9433                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9434                           ;CC2500_B1.c: 183: unsigned char temp;
  9435                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9436                           
  9437                           ;incstack = 0
  9438                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9439  11C6  0020               	movlb	0	; select bank0
  9440  11C7  01A7               	clrf	CC2500_InitPATable@loop_d
  9441  11C8                     L5:	
  9442  11C8  3008               	movlw	8
  9443  11C9  0227               	subwf	CC2500_InitPATable@loop_d,w
  9444  11CA  1803               	btfsc	3,0
  9445  11CB  0008               	return
  9446                           
  9447                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9448  11CC  0827               	movf	CC2500_InitPATable@loop_d,w
  9449  11CD  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9450  11CE  0084               	movwf	4
  9451  11CF  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9452  11D0  1803               	skipnc
  9453  11D1  3E01               	addlw	1
  9454  11D2  0085               	movwf	5
  9455  11D3  0800               	movf	0,w	;code access
  9456  11D4  00A5               	movwf	??_CC2500_InitPATable
  9457  11D5  0825               	movf	??_CC2500_InitPATable,w
  9458  11D6  00A6               	movwf	CC2500_InitPATable@temp
  9459                           
  9460                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9461  11D7  0826               	movf	CC2500_InitPATable@temp,w
  9462  11D8  00A5               	movwf	??_CC2500_InitPATable
  9463  11D9  0825               	movf	??_CC2500_InitPATable,w
  9464  11DA  00A2               	movwf	CC2500_WriteREG@value
  9465  11DB  303E               	movlw	62
  9466  11DC  3192  2244  3191   	fcall	_CC2500_WriteREG
  9467  11DF  3001               	movlw	1
  9468  11E0  0020               	movlb	0	; select bank0
  9469  11E1  00A5               	movwf	??_CC2500_InitPATable
  9470  11E2  0825               	movf	??_CC2500_InitPATable,w
  9471  11E3  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9472  11E4  29C8               	goto	L5
  9473  11E5                     __end_of_CC2500_InitPATable:	
  9474                           
  9475                           	psect	text49
  9476  1244                     __ptext49:	
  9477 ;; *************** function _CC2500_WriteREG *****************
  9478 ;; Defined at:
  9479 ;;		line 258 in file "../src/CC2500_B1.c"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;  w_addr          1    wreg     unsigned char 
  9482 ;;  value           1    2[BANK0 ] unsigned char 
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9485 ;; Return value:  Size  Location     Type
  9486 ;;		None               void
  9487 ;; Registers used:
  9488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/0
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9494 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;Total ram usage:        3 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:    5
  9501 ;; This function calls:
  9502 ;;		_CC2500_WriteByte
  9503 ;;		_RF_Timeout_Counter
  9504 ;;		_setRF_TimeoutCleared
  9505 ;; This function is called by:
  9506 ;;		_CC2500_InitSetREG
  9507 ;;		_CC2500_InitPATable
  9508 ;; This function uses a non-reentrant model
  9509 ;;
  9510                           
  9511                           
  9512                           ;psect for function _CC2500_WriteREG
  9513  1244                     _CC2500_WriteREG:	
  9514                           
  9515                           ;incstack = 0
  9516                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9517                           ;CC2500_WriteREG@w_addr stored from wreg
  9518  1244  0020               	movlb	0	; select bank0
  9519  1245  00A4               	movwf	CC2500_WriteREG@w_addr
  9520                           
  9521                           ;CC2500_B1.c: 259: RC4 = 0;
  9522  1246  120E               	bcf	14,4	;volatile
  9523                           
  9524                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9525  1247  0824               	movf	CC2500_WriteREG@w_addr,w
  9526  1248  00A3               	movwf	??_CC2500_WriteREG
  9527  1249  0823               	movf	??_CC2500_WriteREG,w
  9528  124A  00F9               	movwf	_SPI0Buffer
  9529                           
  9530                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9531  124B  2A4F               	goto	l8389
  9532  124C                     l8387:	
  9533                           
  9534                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9535  124C  3190  20BF  3192   	fcall	_RF_Timeout_Counter
  9536  124F                     l8389:	
  9537  124F  0020               	movlb	0	; select bank0
  9538  1250  1D0E               	btfss	14,2	;volatile
  9539  1251  2A55               	goto	l8393
  9540  1252  0021               	movlb	1	; select bank1
  9541  1253  1F21               	btfss	(_RF1^(0+128)+1),6
  9542  1254  2A4C               	goto	l8387
  9543  1255                     l8393:	
  9544                           
  9545                           ;CC2500_B1.c: 263: };
  9546                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9547  1255  319D  25DE  3192   	fcall	_setRF_TimeoutCleared
  9548                           
  9549                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9550  1258  3190  206E  3192   	fcall	_CC2500_WriteByte
  9551                           
  9552                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9553  125B  0020               	movlb	0	; select bank0
  9554  125C  0822               	movf	CC2500_WriteREG@value,w
  9555  125D  00A3               	movwf	??_CC2500_WriteREG
  9556  125E  0823               	movf	??_CC2500_WriteREG,w
  9557  125F  00F9               	movwf	_SPI0Buffer
  9558                           
  9559                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9560  1260  3190  206E         	fcall	_CC2500_WriteByte
  9561                           
  9562                           ;CC2500_B1.c: 269: RC4 = 1;
  9563  1262  0020               	movlb	0	; select bank0
  9564  1263  160E               	bsf	14,4	;volatile
  9565  1264  0008               	return
  9566  1265                     __end_of_CC2500_WriteREG:	
  9567                           
  9568                           	psect	text50
  9569  1E96                     __ptext50:	
  9570 ;; *************** function _CC2500_FrequencyCabr *****************
  9571 ;; Defined at:
  9572 ;;		line 208 in file "../src/CC2500_B1.c"
  9573 ;; Parameters:    Size  Location     Type
  9574 ;;		None
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;		None
  9577 ;; Return value:  Size  Location     Type
  9578 ;;		None               void
  9579 ;; Registers used:
  9580 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;Total ram usage:        0 bytes
  9591 ;; Hardware stack levels used:    1
  9592 ;; Hardware stack levels required when called:    6
  9593 ;; This function calls:
  9594 ;;		_CC2500_WriteCommand
  9595 ;;		_DelayTime_1us
  9596 ;; This function is called by:
  9597 ;;		_CC2500_PowerOnInitial
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           
  9602                           ;psect for function _CC2500_FrequencyCabr
  9603  1E96                     _CC2500_FrequencyCabr:	
  9604                           
  9605                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9606                           
  9607                           ;incstack = 0
  9608                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9609  1E96  3033               	movlw	51
  9610  1E97  3191  2141  319E   	fcall	_CC2500_WriteCommand
  9611                           
  9612                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9613  1E9A  30E8               	movlw	232
  9614  1E9B  0020               	movlb	0	; select bank0
  9615  1E9C  00A0               	movwf	DelayTime_1us@count
  9616  1E9D  3003               	movlw	3
  9617  1E9E  00A1               	movwf	DelayTime_1us@count+1
  9618  1E9F  3192  22F1         	fcall	_DelayTime_1us
  9619  1EA1  0008               	return
  9620  1EA2                     __end_of_CC2500_FrequencyCabr:	
  9621                           
  9622                           	psect	text51
  9623  12F1                     __ptext51:	
  9624 ;; *************** function _DelayTime_1us *****************
  9625 ;; Defined at:
  9626 ;;		line 327 in file "../src/CC2500_B1.c"
  9627 ;; Parameters:    Size  Location     Type
  9628 ;;  count           2    0[BANK0 ] int 
  9629 ;; Auto vars:     Size  Location     Type
  9630 ;;  j               2    4[BANK0 ] unsigned int 
  9631 ;;  i               2    2[BANK0 ] unsigned int 
  9632 ;; Return value:  Size  Location     Type
  9633 ;;		None               void
  9634 ;; Registers used:
  9635 ;;		wreg, status,2
  9636 ;; Tracked objects:
  9637 ;;		On entry : 0/0
  9638 ;;		On exit  : 0/0
  9639 ;;		Unchanged: 0/0
  9640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9641 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9644 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;Total ram usage:        6 bytes
  9646 ;; Hardware stack levels used:    1
  9647 ;; Hardware stack levels required when called:    4
  9648 ;; This function calls:
  9649 ;;		Nothing
  9650 ;; This function is called by:
  9651 ;;		_CC2500_PowerRST
  9652 ;;		_CC2500_FrequencyCabr
  9653 ;; This function uses a non-reentrant model
  9654 ;;
  9655                           
  9656                           
  9657                           ;psect for function _DelayTime_1us
  9658  12F1                     _DelayTime_1us:	
  9659                           
  9660                           ;CC2500_B1.c: 328: unsigned int i, j;
  9661                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9662                           
  9663                           ;incstack = 0
  9664                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9665  12F1  3001               	movlw	1
  9666  12F2  0020               	movlb	0	; select bank0
  9667  12F3  00A2               	movwf	DelayTime_1us@i
  9668  12F4  3000               	movlw	0
  9669  12F5  00A3               	movwf	DelayTime_1us@i+1
  9670  12F6                     l363:	
  9671  12F6  0821               	movf	DelayTime_1us@count+1,w
  9672  12F7  0223               	subwf	DelayTime_1us@i+1,w
  9673  12F8  1D03               	skipz
  9674  12F9  2AFC               	goto	u8855
  9675  12FA  0820               	movf	DelayTime_1us@count,w
  9676  12FB  0222               	subwf	DelayTime_1us@i,w
  9677  12FC                     u8855:	
  9678  12FC  1803               	btfsc	3,0
  9679  12FD  0008               	return
  9680                           
  9681                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9682  12FE  01A4               	clrf	DelayTime_1us@j
  9683  12FF  01A5               	clrf	DelayTime_1us@j+1
  9684  1300  3000               	movlw	0
  9685  1301  0225               	subwf	DelayTime_1us@j+1,w
  9686  1302  3002               	movlw	2
  9687  1303  1903               	skipnz
  9688  1304  0224               	subwf	DelayTime_1us@j,w
  9689  1305  1803               	btfsc	3,0
  9690  1306  2B12               	goto	l8381
  9691  1307                     l8379:	
  9692  1307  3001               	movlw	1
  9693  1308  07A4               	addwf	DelayTime_1us@j,f
  9694  1309  3000               	movlw	0
  9695  130A  3DA5               	addwfc	DelayTime_1us@j+1,f
  9696  130B  3000               	movlw	0
  9697  130C  0225               	subwf	DelayTime_1us@j+1,w
  9698  130D  3002               	movlw	2
  9699  130E  1903               	skipnz
  9700  130F  0224               	subwf	DelayTime_1us@j,w
  9701  1310  1C03               	skipc
  9702  1311  2B07               	goto	l8379
  9703  1312                     l8381:	
  9704  1312  3001               	movlw	1
  9705  1313  07A2               	addwf	DelayTime_1us@i,f
  9706  1314  3000               	movlw	0
  9707  1315  3DA3               	addwfc	DelayTime_1us@i+1,f
  9708  1316  2AF6               	goto	l363
  9709  1317                     __end_of_DelayTime_1us:	
  9710                           
  9711                           	psect	text52
  9712  1DE6                     __ptext52:	
  9713 ;; *************** function _CC2500_ClearTXFIFO *****************
  9714 ;; Defined at:
  9715 ;;		line 194 in file "../src/CC2500_B1.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;		None
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;		None
  9720 ;; Return value:  Size  Location     Type
  9721 ;;		None               void
  9722 ;; Registers used:
  9723 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9724 ;; Tracked objects:
  9725 ;;		On entry : 0/0
  9726 ;;		On exit  : 0/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9733 ;;Total ram usage:        0 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:    6
  9736 ;; This function calls:
  9737 ;;		_CC2500_WriteCommand
  9738 ;; This function is called by:
  9739 ;;		_CC2500_PowerOnInitial
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           
  9744                           ;psect for function _CC2500_ClearTXFIFO
  9745  1DE6                     _CC2500_ClearTXFIFO:	
  9746                           
  9747                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9748                           
  9749                           ;incstack = 0
  9750                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9751  1DE6  303B               	movlw	59
  9752  1DE7  3191  2141         	fcall	_CC2500_WriteCommand
  9753  1DE9  0008               	return
  9754  1DEA                     __end_of_CC2500_ClearTXFIFO:	
  9755                           
  9756                           	psect	text53
  9757  1DE2                     __ptext53:	
  9758 ;; *************** function _CC2500_ClearRXFIFO *****************
  9759 ;; Defined at:
  9760 ;;		line 201 in file "../src/CC2500_B1.c"
  9761 ;; Parameters:    Size  Location     Type
  9762 ;;		None
  9763 ;; Auto vars:     Size  Location     Type
  9764 ;;		None
  9765 ;; Return value:  Size  Location     Type
  9766 ;;		None               void
  9767 ;; Registers used:
  9768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9769 ;; Tracked objects:
  9770 ;;		On entry : 0/0
  9771 ;;		On exit  : 0/0
  9772 ;;		Unchanged: 0/0
  9773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;Total ram usage:        0 bytes
  9779 ;; Hardware stack levels used:    1
  9780 ;; Hardware stack levels required when called:    6
  9781 ;; This function calls:
  9782 ;;		_CC2500_WriteCommand
  9783 ;; This function is called by:
  9784 ;;		_CC2500_PowerOnInitial
  9785 ;; This function uses a non-reentrant model
  9786 ;;
  9787                           
  9788                           
  9789                           ;psect for function _CC2500_ClearRXFIFO
  9790  1DE2                     _CC2500_ClearRXFIFO:	
  9791                           
  9792                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9793                           
  9794                           ;incstack = 0
  9795                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9796  1DE2  303A               	movlw	58
  9797  1DE3  3191  2141         	fcall	_CC2500_WriteCommand
  9798  1DE5  0008               	return
  9799  1DE6                     __end_of_CC2500_ClearRXFIFO:	
  9800                           
  9801                           	psect	text54
  9802  1141                     __ptext54:	
  9803 ;; *************** function _CC2500_WriteCommand *****************
  9804 ;; Defined at:
  9805 ;;		line 292 in file "../src/CC2500_B1.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;  command         1    wreg     unsigned char 
  9808 ;; Auto vars:     Size  Location     Type
  9809 ;;  command         1    3[BANK0 ] unsigned char 
  9810 ;; Return value:  Size  Location     Type
  9811 ;;		None               void
  9812 ;; Registers used:
  9813 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9814 ;; Tracked objects:
  9815 ;;		On entry : 0/0
  9816 ;;		On exit  : 0/0
  9817 ;;		Unchanged: 0/0
  9818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9823 ;;Total ram usage:        2 bytes
  9824 ;; Hardware stack levels used:    1
  9825 ;; Hardware stack levels required when called:    5
  9826 ;; This function calls:
  9827 ;;		_CC2500_WriteByte
  9828 ;;		_RF_Timeout_Counter
  9829 ;;		_setRF_TimeoutCleared
  9830 ;; This function is called by:
  9831 ;;		_CC2500_TxData
  9832 ;;		_CC2500_RxData
  9833 ;;		_CC2500_ClearTXFIFO
  9834 ;;		_CC2500_ClearRXFIFO
  9835 ;;		_CC2500_FrequencyCabr
  9836 ;;		_CC2500_SIDLEMode
  9837 ;;		_setRF_Main
  9838 ;;		_RF_RxDisable
  9839 ;; This function uses a non-reentrant model
  9840 ;;
  9841                           
  9842                           
  9843                           ;psect for function _CC2500_WriteCommand
  9844  1141                     _CC2500_WriteCommand:	
  9845                           
  9846                           ;incstack = 0
  9847                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9848                           ;CC2500_WriteCommand@command stored from wreg
  9849  1141  0020               	movlb	0	; select bank0
  9850  1142  00A3               	movwf	CC2500_WriteCommand@command
  9851                           
  9852                           ;CC2500_B1.c: 293: RC4 = 0;
  9853  1143  120E               	bcf	14,4	;volatile
  9854                           
  9855                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9856  1144  0823               	movf	CC2500_WriteCommand@command,w
  9857  1145  00A2               	movwf	??_CC2500_WriteCommand
  9858  1146  0822               	movf	??_CC2500_WriteCommand,w
  9859  1147  00F9               	movwf	_SPI0Buffer
  9860                           
  9861                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9862  1148  294C               	goto	l8343
  9863  1149                     l8341:	
  9864                           
  9865                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9866  1149  3190  20BF  3191   	fcall	_RF_Timeout_Counter
  9867  114C                     l8343:	
  9868  114C  0020               	movlb	0	; select bank0
  9869  114D  1D0E               	btfss	14,2	;volatile
  9870  114E  2952               	goto	l8347
  9871  114F  0021               	movlb	1	; select bank1
  9872  1150  1F21               	btfss	(_RF1^(0+128)+1),6
  9873  1151  2949               	goto	l8341
  9874  1152                     l8347:	
  9875                           
  9876                           ;CC2500_B1.c: 298: };
  9877                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9878  1152  319D  25DE  3191   	fcall	_setRF_TimeoutCleared
  9879                           
  9880                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9881  1155  3190  206E         	fcall	_CC2500_WriteByte
  9882                           
  9883                           ;CC2500_B1.c: 302: RC4 = 1;
  9884  1157  0020               	movlb	0	; select bank0
  9885  1158  160E               	bsf	14,4	;volatile
  9886  1159  0008               	return
  9887  115A                     __end_of_CC2500_WriteCommand:	
  9888                           
  9889                           	psect	text55
  9890  1DDE                     __ptext55:	
  9891 ;; *************** function _setRF_TimeoutCleared *****************
  9892 ;; Defined at:
  9893 ;;		line 144 in file "../src/RF_Control_B1.c"
  9894 ;; Parameters:    Size  Location     Type
  9895 ;;		None
  9896 ;; Auto vars:     Size  Location     Type
  9897 ;;		None
  9898 ;; Return value:  Size  Location     Type
  9899 ;;		None               void
  9900 ;; Registers used:
  9901 ;;		status,2
  9902 ;; Tracked objects:
  9903 ;;		On entry : 0/0
  9904 ;;		On exit  : 0/0
  9905 ;;		Unchanged: 0/0
  9906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9911 ;;Total ram usage:        0 bytes
  9912 ;; Hardware stack levels used:    1
  9913 ;; Hardware stack levels required when called:    4
  9914 ;; This function calls:
  9915 ;;		Nothing
  9916 ;; This function is called by:
  9917 ;;		_CC2500_TxData
  9918 ;;		_CC2500_RxData
  9919 ;;		_CC2500_PowerRST
  9920 ;;		_CC2500_WriteREG
  9921 ;;		_CC2500_WriteCommand
  9922 ;;		_CC2500_ReadStatus
  9923 ;;		_CC2500_ReadREG
  9924 ;; This function uses a non-reentrant model
  9925 ;;
  9926                           
  9927                           
  9928                           ;psect for function _setRF_TimeoutCleared
  9929  1DDE                     _setRF_TimeoutCleared:	
  9930                           
  9931                           ;RF_Control_B1.c: 145: RF1.TimeoutCount = 0;
  9932                           
  9933                           ;incstack = 0
  9934                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9935  1DDE  0021               	movlb	1	; select bank1
  9936  1DDF  01AC               	clrf	(_RF1^(0+128)+12)
  9937  1DE0  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9938  1DE1  0008               	return
  9939  1DE2                     __end_of_setRF_TimeoutCleared:	
  9940                           
  9941                           	psect	text56
  9942  10BF                     __ptext56:	
  9943 ;; *************** function _RF_Timeout_Counter *****************
  9944 ;; Defined at:
  9945 ;;		line 136 in file "../src/RF_Control_B1.c"
  9946 ;; Parameters:    Size  Location     Type
  9947 ;;		None
  9948 ;; Auto vars:     Size  Location     Type
  9949 ;;		None
  9950 ;; Return value:  Size  Location     Type
  9951 ;;		None               void
  9952 ;; Registers used:
  9953 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9954 ;; Tracked objects:
  9955 ;;		On entry : 0/0
  9956 ;;		On exit  : 0/0
  9957 ;;		Unchanged: 0/0
  9958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9963 ;;Total ram usage:        0 bytes
  9964 ;; Hardware stack levels used:    1
  9965 ;; Hardware stack levels required when called:    4
  9966 ;; This function calls:
  9967 ;;		Nothing
  9968 ;; This function is called by:
  9969 ;;		_CC2500_TxData
  9970 ;;		_CC2500_RxData
  9971 ;;		_CC2500_PowerRST
  9972 ;;		_CC2500_WriteREG
  9973 ;;		_CC2500_WriteCommand
  9974 ;;		_CC2500_ReadStatus
  9975 ;;		_CC2500_ReadREG
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979                           
  9980                           ;psect for function _RF_Timeout_Counter
  9981  10BF                     _RF_Timeout_Counter:	
  9982                           
  9983                           ;RF_Control_B1.c: 137: RF1.TimeoutCount++;
  9984                           
  9985                           ;incstack = 0
  9986                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9987  10BF  3001               	movlw	1
  9988  10C0  0021               	movlb	1	; select bank1
  9989  10C1  07AC               	addwf	(_RF1^(0+128)+12),f
  9990  10C2  3000               	movlw	0
  9991  10C3  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9992                           
  9993                           ;RF_Control_B1.c: 138: if (RF1.TimeoutCount == 25000) {
  9994  10C4  300C               	movlw	12
  9995  10C5  3EA0               	addlw	_RF1& (0+255)
  9996  10C6  0086               	movwf	6
  9997  10C7  0187               	clrf	7
  9998  10C8  3F40               	moviw [0]fsr1
  9999  10C9  3AA8               	xorlw	168
 10000  10CA  1D03               	skipz
 10001  10CB  28CE               	goto	u8565
 10002  10CC  3F41               	moviw [1]fsr1
 10003  10CD  3A61               	xorlw	97
 10004  10CE                     u8565:	
 10005  10CE  1D03               	skipz
 10006  10CF  0008               	return
 10007                           
 10008                           ;RF_Control_B1.c: 139: RF1.TimeoutCount = 0;
 10009  10D0  01AC               	clrf	(_RF1^(0+128)+12)
 10010  10D1  01AD               	clrf	((_RF1+1)^(0+128)+12)
 10011                           
 10012                           ;RF_Control_B1.c: 140: RF1.Timeout = 1;
 10013  10D2  1721               	bsf	(_RF1^(0+128)+1),6
 10014  10D3  0008               	return
 10015  10D4                     __end_of_RF_Timeout_Counter:	
 10016                           
 10017                           	psect	text57
 10018  106E                     __ptext57:	
 10019 ;; *************** function _CC2500_WriteByte *****************
 10020 ;; Defined at:
 10021 ;;		line 226 in file "../src/CC2500_B1.c"
 10022 ;; Parameters:    Size  Location     Type
 10023 ;;		None
 10024 ;; Auto vars:     Size  Location     Type
 10025 ;;  loop_a          1    1[BANK0 ] unsigned char 
 10026 ;; Return value:  Size  Location     Type
 10027 ;;		None               void
 10028 ;; Registers used:
 10029 ;;		wreg, status,2, status,0
 10030 ;; Tracked objects:
 10031 ;;		On entry : 0/0
 10032 ;;		On exit  : 0/0
 10033 ;;		Unchanged: 0/0
 10034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;Total ram usage:        2 bytes
 10040 ;; Hardware stack levels used:    1
 10041 ;; Hardware stack levels required when called:    4
 10042 ;; This function calls:
 10043 ;;		Nothing
 10044 ;; This function is called by:
 10045 ;;		_CC2500_TxData
 10046 ;;		_CC2500_RxData
 10047 ;;		_CC2500_PowerRST
 10048 ;;		_CC2500_WriteREG
 10049 ;;		_CC2500_WriteCommand
 10050 ;;		_CC2500_ReadStatus
 10051 ;;		_CC2500_ReadREG
 10052 ;; This function uses a non-reentrant model
 10053 ;;
 10054                           
 10055                           
 10056                           ;psect for function _CC2500_WriteByte
 10057  106E                     _CC2500_WriteByte:	
 10058                           
 10059                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10060                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10061                           
 10062                           ;incstack = 0
 10063                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10064  106E  0020               	movlb	0	; select bank0
 10065  106F  01A1               	clrf	CC2500_WriteByte@loop_a
 10066  1070                     L6:	
 10067  1070  3008               	movlw	8
 10068  1071  0221               	subwf	CC2500_WriteByte@loop_a,w
 10069  1072  1803               	btfsc	3,0
 10070  1073  0008               	return
 10071                           
 10072                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10073  1074  1FF9               	btfss	_SPI0Buffer,7
 10074  1075  2878               	goto	l319
 10075                           
 10076                           ;CC2500_B1.c: 230: RC0 = 1;
 10077  1076  140E               	bsf	14,0	;volatile
 10078  1077  2879               	goto	l320
 10079  1078                     l319:	
 10080                           
 10081                           ;CC2500_B1.c: 231: else
 10082                           ;CC2500_B1.c: 232: RC0 = 0;
 10083  1078  100E               	bcf	14,0	;volatile
 10084  1079                     l320:	
 10085                           
 10086                           ;CC2500_B1.c: 233: RC1 = 1;
 10087  1079  148E               	bsf	14,1	;volatile
 10088                           
 10089                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10090  107A  1003               	clrc
 10091  107B  0DF9               	rlf	_SPI0Buffer,f
 10092                           
 10093                           ;CC2500_B1.c: 235: RC1 = 0;
 10094  107C  108E               	bcf	14,1	;volatile
 10095  107D  3001               	movlw	1
 10096  107E  00A0               	movwf	??_CC2500_WriteByte
 10097  107F  0820               	movf	??_CC2500_WriteByte,w
 10098  1080  07A1               	addwf	CC2500_WriteByte@loop_a,f
 10099  1081  2870               	goto	L6
 10100  1082                     __end_of_CC2500_WriteByte:	
 10101                           
 10102                           	psect	text58
 10103  1DCE                     __ptext58:	
 10104 ;; *************** function _RF_Initialization *****************
 10105 ;; Defined at:
 10106 ;;		line 9 in file "../src/RF_Control_B1.c"
 10107 ;; Parameters:    Size  Location     Type
 10108 ;;		None
 10109 ;; Auto vars:     Size  Location     Type
 10110 ;;		None
 10111 ;; Return value:  Size  Location     Type
 10112 ;;		None               void
 10113 ;; Registers used:
 10114 ;;		wreg, status,2, status,0, pclath, cstack
 10115 ;; Tracked objects:
 10116 ;;		On entry : 0/0
 10117 ;;		On exit  : 0/0
 10118 ;;		Unchanged: 0/0
 10119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10124 ;;Total ram usage:        0 bytes
 10125 ;; Hardware stack levels used:    1
 10126 ;; Hardware stack levels required when called:    5
 10127 ;; This function calls:
 10128 ;;		_setRF_Initialization
 10129 ;; This function is called by:
 10130 ;;		_main
 10131 ;; This function uses a non-reentrant model
 10132 ;;
 10133                           
 10134                           
 10135                           ;psect for function _RF_Initialization
 10136  1DCE                     _RF_Initialization:	
 10137                           
 10138                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10139                           
 10140                           ;incstack = 0
 10141                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10142  1DCE  319E  2638         	fcall	_setRF_Initialization
 10143  1DD0  0008               	return
 10144  1DD1                     __end_of_RF_Initialization:	
 10145                           
 10146                           	psect	text59
 10147  1E38                     __ptext59:	
 10148 ;; *************** function _setRF_Initialization *****************
 10149 ;; Defined at:
 10150 ;;		line 43 in file "../src/RF_Control_B1.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;		None
 10153 ;; Auto vars:     Size  Location     Type
 10154 ;;		None
 10155 ;; Return value:  Size  Location     Type
 10156 ;;		None               void
 10157 ;; Registers used:
 10158 ;;		wreg
 10159 ;; Tracked objects:
 10160 ;;		On entry : 0/0
 10161 ;;		On exit  : 0/0
 10162 ;;		Unchanged: 0/0
 10163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10166 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;Total ram usage:        1 bytes
 10169 ;; Hardware stack levels used:    1
 10170 ;; Hardware stack levels required when called:    4
 10171 ;; This function calls:
 10172 ;;		Nothing
 10173 ;; This function is called by:
 10174 ;;		_RF_Initialization
 10175 ;; This function uses a non-reentrant model
 10176 ;;
 10177                           
 10178                           
 10179                           ;psect for function _setRF_Initialization
 10180  1E38                     _setRF_Initialization:	
 10181                           
 10182                           ;RF_Control_B1.c: 45: Tx_Length = 21;
 10183                           
 10184                           ;incstack = 0
 10185                           ; Regs used in _setRF_Initialization: [wreg]
 10186  1E38  3015               	movlw	21
 10187  1E39  0020               	movlb	0	; select bank0
 10188  1E3A  00A0               	movwf	??_setRF_Initialization
 10189  1E3B  0820               	movf	??_setRF_Initialization,w
 10190  1E3C  0021               	movlb	1	; select bank1
 10191  1E3D  00D6               	movwf	_Tx_Length^(0+128)
 10192                           
 10193                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
 10194  1E3E  3014               	movlw	20
 10195  1E3F  00A7               	movwf	(_RF1^(0+128)+7)
 10196  1E40  3000               	movlw	0
 10197  1E41  00A8               	movwf	(_RF1^(0+128)+8)
 10198  1E42  0008               	return
 10199  1E43                     __end_of_setRF_Initialization:	
 10200                           
 10201                           	psect	text60
 10202  1F42                     __ptext60:	
 10203 ;; *************** function _Mcu_Initialization *****************
 10204 ;; Defined at:
 10205 ;;		line 30 in file "../src/MCU_B1.c"
 10206 ;; Parameters:    Size  Location     Type
 10207 ;;		None
 10208 ;; Auto vars:     Size  Location     Type
 10209 ;;		None
 10210 ;; Return value:  Size  Location     Type
 10211 ;;		None               void
 10212 ;; Registers used:
 10213 ;;		wreg, status,2, status,0, pclath, cstack
 10214 ;; Tracked objects:
 10215 ;;		On entry : 0/0
 10216 ;;		On exit  : 0/0
 10217 ;;		Unchanged: 0/0
 10218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;Total ram usage:        0 bytes
 10224 ;; Hardware stack levels used:    1
 10225 ;; Hardware stack levels required when called:    5
 10226 ;; This function calls:
 10227 ;;		_ADC_Set
 10228 ;;		_Fosc_Set
 10229 ;;		_IOC_Set
 10230 ;;		_IO_Set
 10231 ;;		_TMR1_Set
 10232 ;;		_WDT_Set
 10233 ;; This function is called by:
 10234 ;;		_main
 10235 ;; This function uses a non-reentrant model
 10236 ;;
 10237                           
 10238                           
 10239                           ;psect for function _Mcu_Initialization
 10240  1F42                     _Mcu_Initialization:	
 10241                           
 10242                           ;MCU_B1.c: 32: Fosc_Set();
 10243                           
 10244                           ;incstack = 0
 10245                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10246  1F42  319D  25DA  319F   	fcall	_Fosc_Set
 10247                           
 10248                           ;MCU_B1.c: 34: IO_Set();
 10249  1F45  3191  218F  319F   	fcall	_IO_Set
 10250                           
 10251                           ;MCU_B1.c: 36: ;;
 10252                           ;MCU_B1.c: 38: TMR1_Set();
 10253  1F48  319E  268A  319F   	fcall	_TMR1_Set
 10254                           
 10255                           ;MCU_B1.c: 40: ADC_Set();
 10256  1F4B  319E  2605  319F   	fcall	_ADC_Set
 10257                           
 10258                           ;MCU_B1.c: 42: ;;
 10259                           ;MCU_B1.c: 44: ;;
 10260                           ;MCU_B1.c: 46: IOC_Set();
 10261  1F4E  319E  267E  319F   	fcall	_IOC_Set
 10262                           
 10263                           ;MCU_B1.c: 48: ;;
 10264                           ;MCU_B1.c: 50: ;;
 10265                           ;MCU_B1.c: 52: WDT_Set();
 10266  1F51  319E  262D         	fcall	_WDT_Set
 10267  1F53  0008               	return
 10268  1F54                     __end_of_Mcu_Initialization:	
 10269                           
 10270                           	psect	text61
 10271  1E2D                     __ptext61:	
 10272 ;; *************** function _WDT_Set *****************
 10273 ;; Defined at:
 10274 ;;		line 1090 in file "../src/MCU_B1.c"
 10275 ;; Parameters:    Size  Location     Type
 10276 ;;		None
 10277 ;; Auto vars:     Size  Location     Type
 10278 ;;		None
 10279 ;; Return value:  Size  Location     Type
 10280 ;;		None               void
 10281 ;; Registers used:
 10282 ;;		wreg
 10283 ;; Tracked objects:
 10284 ;;		On entry : 0/0
 10285 ;;		On exit  : 0/0
 10286 ;;		Unchanged: 0/0
 10287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10291 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10292 ;;Total ram usage:        1 bytes
 10293 ;; Hardware stack levels used:    1
 10294 ;; Hardware stack levels required when called:    4
 10295 ;; This function calls:
 10296 ;;		Nothing
 10297 ;; This function is called by:
 10298 ;;		_Mcu_Initialization
 10299 ;; This function uses a non-reentrant model
 10300 ;;
 10301                           
 10302                           
 10303                           ;psect for function _WDT_Set
 10304  1E2D                     _WDT_Set:	
 10305                           
 10306                           ;MCU_B1.c: 1097: WDTCON = 0b00010111;;
 10307                           
 10308                           ;incstack = 0
 10309                           ; Regs used in _WDT_Set: [wreg]
 10310  1E2D  3017               	movlw	23
 10311  1E2E  0021               	movlb	1	; select bank1
 10312  1E2F  0097               	movwf	23	;volatile
 10313                           
 10314                           ;MCU_B1.c: 1099: WDT.Enable = 1;
 10315  1E30  144D               	bsf	_WDT^(0+128),0
 10316                           
 10317                           ;MCU_B1.c: 1100: WDT.Timer = 10;
 10318  1E31  300A               	movlw	10
 10319  1E32  0020               	movlb	0	; select bank0
 10320  1E33  00A0               	movwf	??_WDT_Set
 10321  1E34  0820               	movf	??_WDT_Set,w
 10322  1E35  0021               	movlb	1	; select bank1
 10323  1E36  00CE               	movwf	(_WDT^(0+128)+1)
 10324  1E37  0008               	return
 10325  1E38                     __end_of_WDT_Set:	
 10326                           
 10327                           	psect	text62
 10328  1E8A                     __ptext62:	
 10329 ;; *************** function _TMR1_Set *****************
 10330 ;; Defined at:
 10331 ;;		line 221 in file "../src/MCU_B1.c"
 10332 ;; Parameters:    Size  Location     Type
 10333 ;;		None
 10334 ;; Auto vars:     Size  Location     Type
 10335 ;;		None
 10336 ;; Return value:  Size  Location     Type
 10337 ;;		None               void
 10338 ;; Registers used:
 10339 ;;		wreg
 10340 ;; Tracked objects:
 10341 ;;		On entry : 0/0
 10342 ;;		On exit  : 0/0
 10343 ;;		Unchanged: 0/0
 10344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;Total ram usage:        0 bytes
 10350 ;; Hardware stack levels used:    1
 10351 ;; Hardware stack levels required when called:    4
 10352 ;; This function calls:
 10353 ;;		Nothing
 10354 ;; This function is called by:
 10355 ;;		_Mcu_Initialization
 10356 ;; This function uses a non-reentrant model
 10357 ;;
 10358                           
 10359                           
 10360                           ;psect for function _TMR1_Set
 10361  1E8A                     _TMR1_Set:	
 10362                           
 10363                           ;MCU_B1.c: 222: T1CON = (0x40 | 0x00 | 0x01);
 10364                           
 10365                           ;incstack = 0
 10366                           ; Regs used in _TMR1_Set: [wreg]
 10367  1E8A  3041               	movlw	65
 10368  1E8B  0020               	movlb	0	; select bank0
 10369  1E8C  0098               	movwf	24	;volatile
 10370                           
 10371                           ;MCU_B1.c: 223: TMR1H = (int)((65536-1480)/256);
 10372  1E8D  30FA               	movlw	250
 10373  1E8E  0097               	movwf	23	;volatile
 10374                           
 10375                           ;MCU_B1.c: 224: TMR1L = (int)((65536-1480)%256);
 10376  1E8F  3038               	movlw	56
 10377  1E90  0096               	movwf	22	;volatile
 10378                           
 10379                           ;MCU_B1.c: 225: TMR1IE = 1;
 10380  1E91  0021               	movlb	1	; select bank1
 10381  1E92  1411               	bsf	17,0	;volatile
 10382                           
 10383                           ;MCU_B1.c: 226: PEIE = 1;
 10384  1E93  170B               	bsf	11,6	;volatile
 10385                           
 10386                           ;MCU_B1.c: 227: GIE = 1;
 10387  1E94  178B               	bsf	11,7	;volatile
 10388  1E95  0008               	return
 10389  1E96                     __end_of_TMR1_Set:	
 10390                           
 10391                           	psect	text63
 10392  118F                     __ptext63:	
 10393 ;; *************** function _IO_Set *****************
 10394 ;; Defined at:
 10395 ;;		line 60 in file "../src/MCU_B1.c"
 10396 ;; Parameters:    Size  Location     Type
 10397 ;;		None
 10398 ;; Auto vars:     Size  Location     Type
 10399 ;;		None
 10400 ;; Return value:  Size  Location     Type
 10401 ;;		None               void
 10402 ;; Registers used:
 10403 ;;		wreg, status,2
 10404 ;; Tracked objects:
 10405 ;;		On entry : 0/0
 10406 ;;		On exit  : 0/0
 10407 ;;		Unchanged: 0/0
 10408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;Total ram usage:        0 bytes
 10414 ;; Hardware stack levels used:    1
 10415 ;; Hardware stack levels required when called:    4
 10416 ;; This function calls:
 10417 ;;		Nothing
 10418 ;; This function is called by:
 10419 ;;		_Mcu_Initialization
 10420 ;; This function uses a non-reentrant model
 10421 ;;
 10422                           
 10423                           
 10424                           ;psect for function _IO_Set
 10425  118F                     _IO_Set:	
 10426                           
 10427                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10428                           
 10429                           ;incstack = 0
 10430                           ; Regs used in _IO_Set: [wreg+status,2]
 10431  118F  3077               	movlw	119
 10432  1190  0021               	movlb	1	; select bank1
 10433  1191  008C               	movwf	12	;volatile
 10434                           
 10435                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10436  1192  3007               	movlw	7
 10437  1193  008D               	movwf	13	;volatile
 10438                           
 10439                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10440  1194  300C               	movlw	12
 10441  1195  008E               	movwf	14	;volatile
 10442                           
 10443                           ;MCU_B1.c: 92: LATA = 0b00000000;;
 10444  1196  0022               	movlb	2	; select bank2
 10445  1197  018C               	clrf	12	;volatile
 10446                           
 10447                           ;MCU_B1.c: 93: LATB = 0b00000010;;
 10448  1198  3002               	movlw	2
 10449  1199  008D               	movwf	13	;volatile
 10450                           
 10451                           ;MCU_B1.c: 94: LATC = 0b00000000;;
 10452  119A  018E               	clrf	14	;volatile
 10453                           
 10454                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10455  119B  3022               	movlw	34
 10456  119C  0023               	movlb	3	; select bank3
 10457  119D  008C               	movwf	12	;volatile
 10458                           
 10459                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10460  119E  018D               	clrf	13	;volatile
 10461                           
 10462                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10463  119F  018E               	clrf	14	;volatile
 10464                           
 10465                           ;MCU_B1.c: 100: PORTA = 0b01110111;;
 10466  11A0  3077               	movlw	119
 10467  11A1  0020               	movlb	0	; select bank0
 10468  11A2  008C               	movwf	12	;volatile
 10469                           
 10470                           ;MCU_B1.c: 101: PORTB = 0b00000111;;
 10471  11A3  3007               	movlw	7
 10472  11A4  008D               	movwf	13	;volatile
 10473                           
 10474                           ;MCU_B1.c: 102: PORTC = 0b00001100;;
 10475  11A5  300C               	movlw	12
 10476  11A6  008E               	movwf	14	;volatile
 10477                           
 10478                           ;MCU_B1.c: 104: WPUB = 0b00000000;;
 10479  11A7  0024               	movlb	4	; select bank4
 10480  11A8  018D               	clrf	13	;volatile
 10481  11A9  0008               	return
 10482  11AA                     __end_of_IO_Set:	
 10483                           
 10484                           	psect	text64
 10485  1E7E                     __ptext64:	
 10486 ;; *************** function _IOC_Set *****************
 10487 ;; Defined at:
 10488 ;;		line 361 in file "../src/MCU_B1.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;		None
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;		None
 10493 ;; Return value:  Size  Location     Type
 10494 ;;		None               void
 10495 ;; Registers used:
 10496 ;;		wreg, status,2
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10506 ;;Total ram usage:        0 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    4
 10509 ;; This function calls:
 10510 ;;		Nothing
 10511 ;; This function is called by:
 10512 ;;		_Mcu_Initialization
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           
 10517                           ;psect for function _IOC_Set
 10518  1E7E                     _IOC_Set:	
 10519                           
 10520                           ;MCU_B1.c: 362: WPUB2 = 0;
 10521                           
 10522                           ;incstack = 0
 10523                           ; Regs used in _IOC_Set: [wreg+status,2]
 10524  1E7E  0024               	movlb	4	; select bank4
 10525  1E7F  110D               	bcf	13,2	;volatile
 10526                           
 10527                           ;MCU_B1.c: 370: IOCBP = 0b00000000;
 10528  1E80  0027               	movlb	7	; select bank7
 10529  1E81  0194               	clrf	20	;volatile
 10530                           
 10531                           ;MCU_B1.c: 371: IOCBN = 0b00000100;
 10532  1E82  3004               	movlw	4
 10533  1E83  0095               	movwf	21	;volatile
 10534                           
 10535                           ;MCU_B1.c: 387: IOCBF = 0b00000000;
 10536  1E84  0196               	clrf	22	;volatile
 10537                           
 10538                           ;MCU_B1.c: 389: IOCIE = 1;
 10539  1E85  158B               	bsf	11,3	;volatile
 10540                           
 10541                           ;MCU_B1.c: 390: IOCIF = 0;
 10542  1E86  100B               	bcf	11,0	;volatile
 10543                           
 10544                           ;MCU_B1.c: 391: PEIE = 1;
 10545  1E87  170B               	bsf	11,6	;volatile
 10546                           
 10547                           ;MCU_B1.c: 392: GIE = 1;
 10548  1E88  178B               	bsf	11,7	;volatile
 10549  1E89  0008               	return
 10550  1E8A                     __end_of_IOC_Set:	
 10551                           
 10552                           	psect	text65
 10553  1DDA                     __ptext65:	
 10554 ;; *************** function _Fosc_Set *****************
 10555 ;; Defined at:
 10556 ;;		line 56 in file "../src/MCU_B1.c"
 10557 ;; Parameters:    Size  Location     Type
 10558 ;;		None
 10559 ;; Auto vars:     Size  Location     Type
 10560 ;;		None
 10561 ;; Return value:  Size  Location     Type
 10562 ;;		None               void
 10563 ;; Registers used:
 10564 ;;		wreg
 10565 ;; Tracked objects:
 10566 ;;		On entry : 0/0
 10567 ;;		On exit  : 0/0
 10568 ;;		Unchanged: 0/0
 10569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;Total ram usage:        0 bytes
 10575 ;; Hardware stack levels used:    1
 10576 ;; Hardware stack levels required when called:    4
 10577 ;; This function calls:
 10578 ;;		Nothing
 10579 ;; This function is called by:
 10580 ;;		_Mcu_Initialization
 10581 ;; This function uses a non-reentrant model
 10582 ;;
 10583                           
 10584                           
 10585                           ;psect for function _Fosc_Set
 10586  1DDA                     _Fosc_Set:	
 10587                           
 10588                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10589                           
 10590                           ;incstack = 0
 10591                           ; Regs used in _Fosc_Set: [wreg]
 10592  1DDA  3078               	movlw	120
 10593  1DDB  0021               	movlb	1	; select bank1
 10594  1DDC  0099               	movwf	25	;volatile
 10595  1DDD  0008               	return
 10596  1DDE                     __end_of_Fosc_Set:	
 10597                           
 10598                           	psect	text66
 10599  1E05                     __ptext66:	
 10600 ;; *************** function _ADC_Set *****************
 10601 ;; Defined at:
 10602 ;;		line 426 in file "../src/MCU_B1.c"
 10603 ;; Parameters:    Size  Location     Type
 10604 ;;		None
 10605 ;; Auto vars:     Size  Location     Type
 10606 ;;		None
 10607 ;; Return value:  Size  Location     Type
 10608 ;;		None               void
 10609 ;; Registers used:
 10610 ;;		wreg
 10611 ;; Tracked objects:
 10612 ;;		On entry : 0/0
 10613 ;;		On exit  : 0/0
 10614 ;;		Unchanged: 0/0
 10615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10620 ;;Total ram usage:        0 bytes
 10621 ;; Hardware stack levels used:    1
 10622 ;; Hardware stack levels required when called:    4
 10623 ;; This function calls:
 10624 ;;		Nothing
 10625 ;; This function is called by:
 10626 ;;		_Mcu_Initialization
 10627 ;; This function uses a non-reentrant model
 10628 ;;
 10629                           
 10630                           
 10631                           ;psect for function _ADC_Set
 10632  1E05                     _ADC_Set:	
 10633                           
 10634                           ;MCU_B1.c: 427: ADCON1 = 0xf3;
 10635                           
 10636                           ;incstack = 0
 10637                           ; Regs used in _ADC_Set: [wreg]
 10638  1E05  30F3               	movlw	243
 10639  1E06  0021               	movlb	1	; select bank1
 10640  1E07  009E               	movwf	30	;volatile
 10641                           
 10642                           ;MCU_B1.c: 428: FVRCON = 0xc1;
 10643  1E08  30C1               	movlw	193
 10644  1E09  0022               	movlb	2	; select bank2
 10645  1E0A  0097               	movwf	23	;volatile
 10646  1E0B  0008               	return
 10647  1E0C                     __end_of_ADC_Set:	
 10648                           
 10649                           	psect	text67
 10650  1E72                     __ptext67:	
 10651 ;; *************** function _LED_Main *****************
 10652 ;; Defined at:
 10653 ;;		line 47 in file "../src/LED_B1.c"
 10654 ;; Parameters:    Size  Location     Type
 10655 ;;		None
 10656 ;; Auto vars:     Size  Location     Type
 10657 ;;		None
 10658 ;; Return value:  Size  Location     Type
 10659 ;;		None               void
 10660 ;; Registers used:
 10661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10662 ;; Tracked objects:
 10663 ;;		On entry : 0/0
 10664 ;;		On exit  : 0/0
 10665 ;;		Unchanged: 0/0
 10666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10671 ;;Total ram usage:        0 bytes
 10672 ;; Hardware stack levels used:    1
 10673 ;; Hardware stack levels required when called:    6
 10674 ;; This function calls:
 10675 ;;		_setLED_Main
 10676 ;; This function is called by:
 10677 ;;		_main
 10678 ;; This function uses a non-reentrant model
 10679 ;;
 10680                           
 10681                           
 10682                           ;psect for function _LED_Main
 10683  1E72                     _LED_Main:	
 10684                           
 10685                           ;LED_B1.c: 53: setLED_Main(1);
 10686                           
 10687                           ;incstack = 0
 10688                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10689  1E72  3001               	movlw	1
 10690  1E73  3194  24F4  319E   	fcall	_setLED_Main
 10691                           
 10692                           ;LED_B1.c: 56: setLED_Main(2);
 10693  1E76  3002               	movlw	2
 10694  1E77  3194  24F4  319E   	fcall	_setLED_Main
 10695                           
 10696                           ;LED_B1.c: 62: setLED_Main(99);
 10697  1E7A  3063               	movlw	99
 10698  1E7B  3194  24F4         	fcall	_setLED_Main
 10699  1E7D  0008               	return
 10700  1E7E                     __end_of_LED_Main:	
 10701                           
 10702                           	psect	text68
 10703  14F4                     __ptext68:	
 10704 ;; *************** function _setLED_Main *****************
 10705 ;; Defined at:
 10706 ;;		line 221 in file "../src/LED_B1.c"
 10707 ;; Parameters:    Size  Location     Type
 10708 ;;  led             1    wreg     unsigned char 
 10709 ;; Auto vars:     Size  Location     Type
 10710 ;;  led             1    4[BANK0 ] unsigned char 
 10711 ;; Return value:  Size  Location     Type
 10712 ;;		None               void
 10713 ;; Registers used:
 10714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10715 ;; Tracked objects:
 10716 ;;		On entry : 0/0
 10717 ;;		On exit  : 0/0
 10718 ;;		Unchanged: 0/0
 10719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;Total ram usage:        3 bytes
 10725 ;; Hardware stack levels used:    1
 10726 ;; Hardware stack levels required when called:    5
 10727 ;; This function calls:
 10728 ;;		_LedPointSelect
 10729 ;; This function is called by:
 10730 ;;		_LED_Main
 10731 ;; This function uses a non-reentrant model
 10732 ;;
 10733                           
 10734                           
 10735                           ;psect for function _setLED_Main
 10736  14F4                     _setLED_Main:	
 10737                           
 10738                           ;incstack = 0
 10739                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10740                           ;setLED_Main@led stored from wreg
 10741  14F4  0020               	movlb	0	; select bank0
 10742  14F5  00A4               	movwf	setLED_Main@led
 10743                           
 10744                           ;LED_B1.c: 222: LedPointSelect(led);
 10745  14F6  0824               	movf	setLED_Main@led,w
 10746  14F7  3191  2174  3194   	fcall	_LedPointSelect
 10747                           
 10748                           ;LED_B1.c: 223: if (LED->GO == 1) {
 10749  14FA  0878               	movf	_LED,w
 10750  14FB  0086               	movwf	6
 10751  14FC  3001               	movlw	1	; select bank2/3
 10752  14FD  0087               	movwf	7
 10753  14FE  1C81               	btfss	1,1
 10754  14FF  0008               	return
 10755                           
 10756                           ;LED_B1.c: 224: LED->Time++;
 10757  1500  0A78               	incf	_LED,w
 10758  1501  0086               	movwf	6
 10759  1502  3001               	movlw	1	; select bank2/3
 10760  1503  0087               	movwf	7
 10761  1504  3001               	movlw	1
 10762  1505  0781               	addwf	1,f
 10763  1506  3141               	addfsr 1,1
 10764  1507  1803               	skipnc
 10765  1508  0A81               	incf	1,f
 10766                           
 10767                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 10768  1509  0A78               	incf	_LED,w
 10769  150A  0086               	movwf	6
 10770  150B  3001               	movlw	1	; select bank2/3
 10771  150C  0087               	movwf	7
 10772  150D  3F40               	moviw [0]fsr1
 10773  150E  0020               	movlb	0	; select bank0
 10774  150F  00A2               	movwf	??_setLED_Main
 10775  1510  3F41               	moviw [1]fsr1
 10776  1511  00A3               	movwf	??_setLED_Main+1
 10777  1512  3000               	movlw	0
 10778  1513  0223               	subwf	??_setLED_Main+1,w
 10779  1514  3032               	movlw	50
 10780  1515  1903               	skipnz
 10781  1516  0222               	subwf	??_setLED_Main,w
 10782  1517  1C03               	skipc
 10783  1518  0008               	return
 10784                           
 10785                           ;LED_B1.c: 226: LED->Time = 0;
 10786  1519  0A78               	incf	_LED,w
 10787  151A  0086               	movwf	6
 10788  151B  3001               	movlw	1	; select bank2/3
 10789  151C  0087               	movwf	7
 10790  151D  3000               	movlw	0
 10791  151E  3FC0               	movwi [0]fsr1
 10792  151F  3FC1               	movwi [1]fsr1
 10793                           
 10794                           ;LED_B1.c: 228: if (led == 1) {
 10795  1520  0824               	movf	setLED_Main@led,w
 10796  1521  3A01               	xorlw	1
 10797                           
 10798                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 10799  1522  3008               	movlw	8
 10800  1523  1903               	btfsc	3,2
 10801  1524  068C               	xorwf	12,f
 10802                           
 10803                           ;LED_B1.c: 230: }
 10804                           ;LED_B1.c: 233: if (led == 2) {
 10805  1525  0824               	movf	setLED_Main@led,w
 10806  1526  3A02               	xorlw	2
 10807  1527  1D03               	skipz
 10808  1528  2D2B               	goto	l1052
 10809                           
 10810                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 10811  1529  3080               	movlw	128
 10812  152A  068E               	xorwf	14,f
 10813  152B                     l1052:	
 10814                           
 10815                           ;LED_B1.c: 235: }
 10816                           ;LED_B1.c: 243: if (led == 99) {
 10817  152B  0824               	movf	setLED_Main@led,w
 10818  152C  3A63               	xorlw	99
 10819  152D  1D03               	skipz
 10820  152E  0008               	return
 10821                           
 10822                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 10823  152F  3020               	movlw	32
 10824  1530  068D               	xorwf	13,f
 10825  1531  0008               	return
 10826  1532                     __end_of_setLED_Main:	
 10827                           
 10828                           	psect	text69
 10829  1E66                     __ptext69:	
 10830 ;; *************** function _LED_Initialization *****************
 10831 ;; Defined at:
 10832 ;;		line 31 in file "../src/LED_B1.c"
 10833 ;; Parameters:    Size  Location     Type
 10834 ;;		None
 10835 ;; Auto vars:     Size  Location     Type
 10836 ;;		None
 10837 ;; Return value:  Size  Location     Type
 10838 ;;		None               void
 10839 ;; Registers used:
 10840 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;Total ram usage:        0 bytes
 10851 ;; Hardware stack levels used:    1
 10852 ;; Hardware stack levels required when called:    7
 10853 ;; This function calls:
 10854 ;;		_setLED_Initialization
 10855 ;; This function is called by:
 10856 ;;		_main
 10857 ;; This function uses a non-reentrant model
 10858 ;;
 10859                           
 10860                           
 10861                           ;psect for function _LED_Initialization
 10862  1E66                     _LED_Initialization:	
 10863                           
 10864                           ;LED_B1.c: 33: setLED_Initialization(1);
 10865                           
 10866                           ;incstack = 0
 10867                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10868  1E66  3001               	movlw	1
 10869  1E67  319E  26FD  319E   	fcall	_setLED_Initialization
 10870                           
 10871                           ;LED_B1.c: 36: setLED_Initialization(2);
 10872  1E6A  3002               	movlw	2
 10873  1E6B  319E  26FD  319E   	fcall	_setLED_Initialization
 10874                           
 10875                           ;LED_B1.c: 42: setLED_Initialization(99);
 10876  1E6E  3063               	movlw	99
 10877  1E6F  319E  26FD         	fcall	_setLED_Initialization
 10878  1E71  0008               	return
 10879  1E72                     __end_of_LED_Initialization:	
 10880                           
 10881                           	psect	text70
 10882  1EFD                     __ptext70:	
 10883 ;; *************** function _setLED_Initialization *****************
 10884 ;; Defined at:
 10885 ;;		line 69 in file "../src/LED_B1.c"
 10886 ;; Parameters:    Size  Location     Type
 10887 ;;  led             1    wreg     unsigned char 
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;  led             1    4[BANK0 ] unsigned char 
 10890 ;; Return value:  Size  Location     Type
 10891 ;;		None               void
 10892 ;; Registers used:
 10893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10894 ;; Tracked objects:
 10895 ;;		On entry : 0/0
 10896 ;;		On exit  : 0/0
 10897 ;;		Unchanged: 0/0
 10898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10902 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;Total ram usage:        1 bytes
 10904 ;; Hardware stack levels used:    1
 10905 ;; Hardware stack levels required when called:    6
 10906 ;; This function calls:
 10907 ;;		_LedPointSelect
 10908 ;;		_setLED
 10909 ;; This function is called by:
 10910 ;;		_LED_Initialization
 10911 ;; This function uses a non-reentrant model
 10912 ;;
 10913                           
 10914                           
 10915                           ;psect for function _setLED_Initialization
 10916  1EFD                     _setLED_Initialization:	
 10917                           
 10918                           ;incstack = 0
 10919                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10920                           ;setLED_Initialization@led stored from wreg
 10921  1EFD  0020               	movlb	0	; select bank0
 10922  1EFE  00A4               	movwf	setLED_Initialization@led
 10923                           
 10924                           ;LED_B1.c: 70: LedPointSelect(led);
 10925  1EFF  0824               	movf	setLED_Initialization@led,w
 10926  1F00  3191  2174  319E   	fcall	_LedPointSelect
 10927                           
 10928                           ;LED_B1.c: 71: LED->Enable = 1;
 10929  1F03  0878               	movf	_LED,w
 10930  1F04  0086               	movwf	6
 10931  1F05  3001               	movlw	1	; select bank2/3
 10932  1F06  0087               	movwf	7
 10933  1F07  1401               	bsf	1,0
 10934                           
 10935                           ;LED_B1.c: 72: setLED(led, 0);
 10936  1F08  0020               	movlb	0	; select bank0
 10937  1F09  01A2               	clrf	setLED@command
 10938  1F0A  0824               	movf	setLED_Initialization@led,w
 10939  1F0B  3197  27B0         	fcall	_setLED
 10940  1F0D  0008               	return
 10941  1F0E                     __end_of_setLED_Initialization:	
 10942                           
 10943                           	psect	text71
 10944  1482                     __ptext71:	
 10945 ;; *************** function _Flash_Memory_Main *****************
 10946 ;; Defined at:
 10947 ;;		line 972 in file "../src/MCU_B1.c"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;		None
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;		None
 10952 ;; Return value:  Size  Location     Type
 10953 ;;		None               void
 10954 ;; Registers used:
 10955 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10965 ;;Total ram usage:        1 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    7
 10968 ;; This function calls:
 10969 ;;		_Flash_Memory_Modify
 10970 ;;		_getMain_LightsStatus
 10971 ;; This function is called by:
 10972 ;;		_main
 10973 ;; This function uses a non-reentrant model
 10974 ;;
 10975                           
 10976                           
 10977                           ;psect for function _Flash_Memory_Main
 10978  1482                     _Flash_Memory_Main:	
 10979                           
 10980                           ;MCU_B1.c: 973: if (Memory.Modify == 1) {
 10981                           
 10982                           ;incstack = 0
 10983                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10984  1482  0023               	movlb	3	; select bank3
 10985  1483  1C44               	btfss	(_Memory^(0+384)+36),0
 10986  1484  0008               	return
 10987                           
 10988                           ;MCU_B1.c: 974: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 10989  1485  319F  278C  3194   	fcall	_getMain_LightsStatus
 10990  1488  3A00               	xorlw	0
 10991  1489  3000               	movlw	0
 10992  148A  1903               	skipnz
 10993  148B  3001               	movlw	1
 10994  148C  0020               	movlb	0	; select bank0
 10995  148D  00A6               	movwf	??_Flash_Memory_Main
 10996  148E  0DA6               	rlf	??_Flash_Memory_Main,f
 10997  148F  0023               	movlb	3	; select bank3
 10998  1490  0844               	movf	(_Memory^(0+384)+36),w
 10999  1491  0020               	movlb	0	; select bank0
 11000  1492  0626               	xorwf	??_Flash_Memory_Main,w
 11001  1493  39FD               	andlw	-3
 11002  1494  0626               	xorwf	??_Flash_Memory_Main,w
 11003  1495  0023               	movlb	3	; select bank3
 11004  1496  00C4               	movwf	(_Memory^(0+384)+36)
 11005                           
 11006                           ;MCU_B1.c: 975: if (Memory.GO == 1) {
 11007  1497  1CC4               	btfss	(_Memory^(0+384)+36),1
 11008  1498  2CB2               	goto	l1318
 11009                           
 11010                           ;MCU_B1.c: 976: Memory.Runtime = 1;
 11011  1499  15C4               	bsf	(_Memory^(0+384)+36),3
 11012                           
 11013                           ;MCU_B1.c: 977: Memory.Time++;
 11014  149A  3001               	movlw	1
 11015  149B  07C2               	addwf	(_Memory^(0+384)+34),f
 11016  149C  3000               	movlw	0
 11017  149D  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 11018                           
 11019                           ;MCU_B1.c: 978: if (Memory.Time == 25) {
 11020  149E  3022               	movlw	34
 11021  149F  3EA0               	addlw	_Memory& (0+255)
 11022  14A0  0086               	movwf	6
 11023  14A1  3001               	movlw	1	; select bank3/4
 11024  14A2  0087               	movwf	7
 11025  14A3  3F40               	moviw [0]fsr1
 11026  14A4  3A19               	xorlw	25
 11027  14A5  1D03               	skipz
 11028  14A6  2CA9               	goto	u10715
 11029  14A7  3F41               	moviw [1]fsr1
 11030  14A8  3A00               	xorlw	0
 11031  14A9                     u10715:	
 11032  14A9  1D03               	skipz
 11033  14AA  0008               	return
 11034                           
 11035                           ;MCU_B1.c: 979: Memory.Time = 0;
 11036  14AB  01C2               	clrf	(_Memory^(0+384)+34)
 11037  14AC  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11038                           
 11039                           ;MCU_B1.c: 980: Memory.Modify = 0;
 11040  14AD  1044               	bcf	(_Memory^(0+384)+36),0
 11041                           
 11042                           ;MCU_B1.c: 981: Memory.GO = 0;
 11043  14AE  10C4               	bcf	(_Memory^(0+384)+36),1
 11044                           
 11045                           ;MCU_B1.c: 982: Flash_Memory_Modify();
 11046  14AF  3196  26C4         	fcall	_Flash_Memory_Modify
 11047                           
 11048                           ;MCU_B1.c: 983: }
 11049                           ;MCU_B1.c: 984: } else {
 11050  14B1  0008               	return
 11051  14B2                     l1318:	
 11052                           
 11053                           ;MCU_B1.c: 985: if (Memory.Runtime == 1) {
 11054  14B2  1DC4               	btfss	(_Memory^(0+384)+36),3
 11055  14B3  0008               	return
 11056                           
 11057                           ;MCU_B1.c: 986: Memory.Runtime = 0;
 11058  14B4  11C4               	bcf	(_Memory^(0+384)+36),3
 11059                           
 11060                           ;MCU_B1.c: 987: Memory.Time = 0;
 11061  14B5  01C2               	clrf	(_Memory^(0+384)+34)
 11062  14B6  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11063  14B7  0008               	return
 11064  14B8                     __end_of_Flash_Memory_Main:	
 11065                           
 11066                           	psect	text72
 11067  16C4                     __ptext72:	
 11068 ;; *************** function _Flash_Memory_Modify *****************
 11069 ;; Defined at:
 11070 ;;		line 1045 in file "../src/MCU_B1.c"
 11071 ;; Parameters:    Size  Location     Type
 11072 ;;		None
 11073 ;; Auto vars:     Size  Location     Type
 11074 ;;  i               1    5[BANK0 ] unsigned char 
 11075 ;; Return value:  Size  Location     Type
 11076 ;;		None               void
 11077 ;; Registers used:
 11078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11079 ;; Tracked objects:
 11080 ;;		On entry : 0/0
 11081 ;;		On exit  : 0/0
 11082 ;;		Unchanged: 0/0
 11083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11086 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11087 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11088 ;;Total ram usage:        2 bytes
 11089 ;; Hardware stack levels used:    1
 11090 ;; Hardware stack levels required when called:    6
 11091 ;; This function calls:
 11092 ;;		_Flash_Memory_Erasing
 11093 ;;		_Flash_Memory_Read
 11094 ;;		_Flash_Memory_Write
 11095 ;;		_setMemory_Data
 11096 ;; This function is called by:
 11097 ;;		_Flash_Memory_Main
 11098 ;; This function uses a non-reentrant model
 11099 ;;
 11100                           
 11101                           
 11102                           ;psect for function _Flash_Memory_Modify
 11103  16C4                     _Flash_Memory_Modify:	
 11104                           
 11105                           ;MCU_B1.c: 1046: char i = 0;
 11106                           
 11107                           ;incstack = 0
 11108                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11109  16C4  0020               	movlb	0	; select bank0
 11110  16C5  01A5               	clrf	Flash_Memory_Modify@i
 11111                           
 11112                           ;MCU_B1.c: 1047: for (i = 0; i < 32; i++) {
 11113  16C6  01A5               	clrf	Flash_Memory_Modify@i
 11114  16C7  3020               	movlw	32
 11115  16C8  0225               	subwf	Flash_Memory_Modify@i,w
 11116  16C9  1803               	btfsc	3,0
 11117  16CA  2EE0               	goto	l9251
 11118  16CB                     l9245:	
 11119                           
 11120                           ;MCU_B1.c: 1048: Memory.Data[i] = Flash_Memory_Read(i);
 11121  16CB  0825               	movf	Flash_Memory_Modify@i,w
 11122  16CC  3191  215A  3196   	fcall	_Flash_Memory_Read
 11123  16CF  0020               	movlb	0	; select bank0
 11124  16D0  00A4               	movwf	??_Flash_Memory_Modify
 11125  16D1  0825               	movf	Flash_Memory_Modify@i,w
 11126  16D2  3EA0               	addlw	_Memory& (0+255)
 11127  16D3  0086               	movwf	6
 11128  16D4  3001               	movlw	1	; select bank3/4
 11129  16D5  0087               	movwf	7
 11130  16D6  0824               	movf	??_Flash_Memory_Modify,w
 11131  16D7  0081               	movwf	1
 11132  16D8  3001               	movlw	1
 11133  16D9  00A4               	movwf	??_Flash_Memory_Modify
 11134  16DA  0824               	movf	??_Flash_Memory_Modify,w
 11135  16DB  07A5               	addwf	Flash_Memory_Modify@i,f
 11136  16DC  3020               	movlw	32
 11137  16DD  0225               	subwf	Flash_Memory_Modify@i,w
 11138  16DE  1C03               	skipc
 11139  16DF  2ECB               	goto	l9245
 11140  16E0                     l9251:	
 11141                           
 11142                           ;MCU_B1.c: 1049: }
 11143                           ;MCU_B1.c: 1050: setMemory_Data(0, product->Data[12]);
 11144  16E0  086E               	movf	_product,w
 11145  16E1  0086               	movwf	6
 11146  16E2  3002               	movlw	2	; select bank4/5
 11147  16E3  0087               	movwf	7
 11148  16E4  3002               	movlw	2	; select bank4/5
 11149  16E5  3F4C               	moviw [12]fsr1
 11150  16E6  00A0               	movwf	setMemory_Data@data
 11151  16E7  3000               	movlw	0
 11152  16E8  319E  264E  3196   	fcall	_setMemory_Data
 11153                           
 11154                           ;MCU_B1.c: 1051: setMemory_Data(1, product->Data[13]);
 11155  16EB  0020               	movlb	0	; select bank0
 11156  16EC  086E               	movf	_product,w
 11157  16ED  0086               	movwf	6
 11158  16EE  3002               	movlw	2	; select bank4/5
 11159  16EF  0087               	movwf	7
 11160  16F0  3002               	movlw	2	; select bank4/5
 11161  16F1  3F4D               	moviw [13]fsr1
 11162  16F2  00A0               	movwf	setMemory_Data@data
 11163  16F3  3001               	movlw	1
 11164  16F4  319E  264E  3196   	fcall	_setMemory_Data
 11165                           
 11166                           ;MCU_B1.c: 1052: setMemory_Data(2, product->Data[14]);
 11167  16F7  0020               	movlb	0	; select bank0
 11168  16F8  086E               	movf	_product,w
 11169  16F9  0086               	movwf	6
 11170  16FA  3002               	movlw	2	; select bank4/5
 11171  16FB  0087               	movwf	7
 11172  16FC  3002               	movlw	2	; select bank4/5
 11173  16FD  3F4E               	moviw [14]fsr1
 11174  16FE  00A0               	movwf	setMemory_Data@data
 11175  16FF  3002               	movlw	2
 11176  1700  319E  264E  3196   	fcall	_setMemory_Data
 11177                           
 11178                           ;MCU_B1.c: 1058: if (Memory.LoopSave == 1) {
 11179  1703  0023               	movlb	3	; select bank3
 11180  1704  1D44               	btfss	(_Memory^(0+384)+36),2
 11181  1705  2F0A               	goto	l1341
 11182                           
 11183                           ;MCU_B1.c: 1059: Memory.LoopSave = 0;
 11184  1706  1144               	bcf	(_Memory^(0+384)+36),2
 11185                           
 11186                           ;MCU_B1.c: 1060: myMain.FirstOpen = 0;
 11187  1707  0021               	movlb	1	; select bank1
 11188  1708  11AE               	bcf	_myMain^(0+128),3
 11189                           
 11190                           ;MCU_B1.c: 1061: myMain.First = 0;
 11191  1709  12AE               	bcf	_myMain^(0+128),5
 11192  170A                     l1341:	
 11193                           
 11194                           ;MCU_B1.c: 1063: }
 11195                           ;MCU_B1.c: 1064: GIE = 0;
 11196  170A  138B               	bcf	11,7	;volatile
 11197                           
 11198                           ;MCU_B1.c: 1065: Flash_Memory_Erasing();
 11199  170B  319E  265A  3196   	fcall	_Flash_Memory_Erasing
 11200                           
 11201                           ;MCU_B1.c: 1066: Flash_Memory_Write();
 11202  170E  3193  23BF         	fcall	_Flash_Memory_Write
 11203                           
 11204                           ;MCU_B1.c: 1067: GIE = 1;
 11205  1710  178B               	bsf	11,7	;volatile
 11206  1711  0008               	return
 11207  1712                     __end_of_Flash_Memory_Modify:	
 11208                           
 11209                           	psect	text73
 11210  1E5A                     __ptext73:	
 11211 ;; *************** function _Flash_Memory_Erasing *****************
 11212 ;; Defined at:
 11213 ;;		line 1034 in file "../src/MCU_B1.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;		None
 11216 ;; Auto vars:     Size  Location     Type
 11217 ;;		None
 11218 ;; Return value:  Size  Location     Type
 11219 ;;		None               void
 11220 ;; Registers used:
 11221 ;;		wreg, status,2, status,0, pclath, cstack
 11222 ;; Tracked objects:
 11223 ;;		On entry : 0/0
 11224 ;;		On exit  : 0/0
 11225 ;;		Unchanged: 0/0
 11226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11231 ;;Total ram usage:        0 bytes
 11232 ;; Hardware stack levels used:    1
 11233 ;; Hardware stack levels required when called:    5
 11234 ;; This function calls:
 11235 ;;		_Flash_Memory_Unlock
 11236 ;; This function is called by:
 11237 ;;		_Flash_Memory_Modify
 11238 ;; This function uses a non-reentrant model
 11239 ;;
 11240                           
 11241                           
 11242                           ;psect for function _Flash_Memory_Erasing
 11243  1E5A                     _Flash_Memory_Erasing:	
 11244                           
 11245                           ;MCU_B1.c: 1035: CFGS = 0;
 11246                           
 11247                           ;incstack = 0
 11248                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11249  1E5A  0023               	movlb	3	; select bank3
 11250  1E5B  1315               	bcf	21,6	;volatile
 11251                           
 11252                           ;MCU_B1.c: 1036: PMADRH = 0x30;
 11253  1E5C  3030               	movlw	48
 11254  1E5D  0092               	movwf	18	;volatile
 11255                           
 11256                           ;MCU_B1.c: 1037: PMADRL = 0x00;
 11257  1E5E  0191               	clrf	17	;volatile
 11258                           
 11259                           ;MCU_B1.c: 1038: FREE = 1;
 11260  1E5F  1615               	bsf	21,4	;volatile
 11261                           
 11262                           ;MCU_B1.c: 1039: WREN = 1;
 11263  1E60  1515               	bsf	21,2	;volatile
 11264                           
 11265                           ;MCU_B1.c: 1040: Flash_Memory_Unlock();
 11266  1E61  319E  2624         	fcall	_Flash_Memory_Unlock
 11267                           
 11268                           ;MCU_B1.c: 1041: WREN = 0;
 11269  1E63  0023               	movlb	3	; select bank3
 11270  1E64  1115               	bcf	21,2	;volatile
 11271  1E65  0008               	return
 11272  1E66                     __end_of_Flash_Memory_Erasing:	
 11273                           
 11274                           	psect	text74
 11275  0448                     __ptext74:	
 11276 ;; *************** function _Flash_Memory_Initialization *****************
 11277 ;; Defined at:
 11278 ;;		line 931 in file "../src/MCU_B1.c"
 11279 ;; Parameters:    Size  Location     Type
 11280 ;;		None
 11281 ;; Auto vars:     Size  Location     Type
 11282 ;;  i               1   62[BANK0 ] unsigned char 
 11283 ;; Return value:  Size  Location     Type
 11284 ;;		None               void
 11285 ;; Registers used:
 11286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11287 ;; Tracked objects:
 11288 ;;		On entry : 0/0
 11289 ;;		On exit  : 0/0
 11290 ;;		Unchanged: 0/0
 11291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;Total ram usage:        2 bytes
 11297 ;; Hardware stack levels used:    1
 11298 ;; Hardware stack levels required when called:    7
 11299 ;; This function calls:
 11300 ;;		_Flash_Memory_Read
 11301 ;;		_Flash_Memory_Write
 11302 ;;		_setMemory_Data
 11303 ;;		_setPercentValue
 11304 ;; This function is called by:
 11305 ;;		_main
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           
 11310                           ;psect for function _Flash_Memory_Initialization
 11311  0448                     _Flash_Memory_Initialization:	
 11312                           
 11313                           ;MCU_B1.c: 932: char i = 0;
 11314                           
 11315                           ;incstack = 0
 11316                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11317  0448  0020               	movlb	0	; select bank0
 11318  0449  01DE               	clrf	Flash_Memory_Initialization@i
 11319                           
 11320                           ;MCU_B1.c: 933: if (Flash_Memory_Read(31) == 0xaa) {
 11321  044A  301F               	movlw	31
 11322  044B  3191  215A  3184   	fcall	_Flash_Memory_Read
 11323  044E  3AAA               	xorlw	170
 11324  044F  1D03               	skipz
 11325  0450  2CBA               	goto	l9569
 11326                           
 11327                           ;MCU_B1.c: 934: product->Data[12] = Flash_Memory_Read(0);
 11328  0451  3000               	movlw	0
 11329  0452  3191  215A  3184   	fcall	_Flash_Memory_Read
 11330  0455  0020               	movlb	0	; select bank0
 11331  0456  00DD               	movwf	??_Flash_Memory_Initialization
 11332  0457  086E               	movf	_product,w
 11333  0458  3E0C               	addlw	12
 11334  0459  0086               	movwf	6
 11335  045A  3002               	movlw	2	; select bank4/5
 11336  045B  0087               	movwf	7
 11337  045C  085D               	movf	??_Flash_Memory_Initialization,w
 11338  045D  0081               	movwf	1
 11339                           
 11340                           ;MCU_B1.c: 935: product->Data[13] = Flash_Memory_Read(1);
 11341  045E  3001               	movlw	1
 11342  045F  3191  215A  3184   	fcall	_Flash_Memory_Read
 11343  0462  0020               	movlb	0	; select bank0
 11344  0463  00DD               	movwf	??_Flash_Memory_Initialization
 11345  0464  086E               	movf	_product,w
 11346  0465  3E0D               	addlw	13
 11347  0466  0086               	movwf	6
 11348  0467  3002               	movlw	2	; select bank4/5
 11349  0468  0087               	movwf	7
 11350  0469  085D               	movf	??_Flash_Memory_Initialization,w
 11351  046A  0081               	movwf	1
 11352                           
 11353                           ;MCU_B1.c: 936: product->Data[14] = Flash_Memory_Read(2);
 11354  046B  3002               	movlw	2
 11355  046C  3191  215A  3184   	fcall	_Flash_Memory_Read
 11356  046F  0020               	movlb	0	; select bank0
 11357  0470  00DD               	movwf	??_Flash_Memory_Initialization
 11358  0471  086E               	movf	_product,w
 11359  0472  3E0E               	addlw	14
 11360  0473  0086               	movwf	6
 11361  0474  3002               	movlw	2	; select bank4/5
 11362  0475  0087               	movwf	7
 11363  0476  085D               	movf	??_Flash_Memory_Initialization,w
 11364  0477  0081               	movwf	1
 11365                           
 11366                           ;MCU_B1.c: 942: i = setPercentValue(((char)((100-70)*0.8)));
 11367  0478  3018               	movlw	24
 11368  0479  3196  2634  3184   	fcall	_setPercentValue
 11369  047C  0020               	movlb	0	; select bank0
 11370  047D  00DD               	movwf	??_Flash_Memory_Initialization
 11371  047E  085D               	movf	??_Flash_Memory_Initialization,w
 11372  047F  00DE               	movwf	Flash_Memory_Initialization@i
 11373                           
 11374                           ;MCU_B1.c: 943: product->Data[21] = i;
 11375  0480  085E               	movf	Flash_Memory_Initialization@i,w
 11376  0481  00DD               	movwf	??_Flash_Memory_Initialization
 11377  0482  086E               	movf	_product,w
 11378  0483  3E15               	addlw	21
 11379  0484  0086               	movwf	6
 11380  0485  3002               	movlw	2	; select bank4/5
 11381  0486  0087               	movwf	7
 11382  0487  085D               	movf	??_Flash_Memory_Initialization,w
 11383  0488  0081               	movwf	1
 11384                           
 11385                           ;MCU_B1.c: 944: product->Data[22] = i;
 11386  0489  085E               	movf	Flash_Memory_Initialization@i,w
 11387  048A  00DD               	movwf	??_Flash_Memory_Initialization
 11388  048B  086E               	movf	_product,w
 11389  048C  3E16               	addlw	22
 11390  048D  0086               	movwf	6
 11391  048E  3002               	movlw	2	; select bank4/5
 11392  048F  0087               	movwf	7
 11393  0490  085D               	movf	??_Flash_Memory_Initialization,w
 11394  0491  0081               	movwf	1
 11395                           
 11396                           ;MCU_B1.c: 945: product->Data[23] = i;
 11397  0492  085E               	movf	Flash_Memory_Initialization@i,w
 11398  0493  00DD               	movwf	??_Flash_Memory_Initialization
 11399  0494  086E               	movf	_product,w
 11400  0495  3E17               	addlw	23
 11401  0496  0086               	movwf	6
 11402  0497  3002               	movlw	2	; select bank4/5
 11403  0498  0087               	movwf	7
 11404  0499  085D               	movf	??_Flash_Memory_Initialization,w
 11405  049A  0081               	movwf	1
 11406                           
 11407                           ;MCU_B1.c: 947: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11408  049B  086E               	movf	_product,w
 11409  049C  3E0C               	addlw	12
 11410  049D  0086               	movwf	6
 11411  049E  3002               	movlw	2	; select bank4/5
 11412  049F  0087               	movwf	7
 11413  04A0  0801               	movf	1,w
 11414  04A1  3AFF               	xorlw	255
 11415  04A2  1D03               	skipz
 11416  04A3  0008               	return
 11417  04A4  086E               	movf	_product,w
 11418  04A5  3E0D               	addlw	13
 11419  04A6  0086               	movwf	6
 11420  04A7  3002               	movlw	2	; select bank4/5
 11421  04A8  0087               	movwf	7
 11422  04A9  0801               	movf	1,w
 11423  04AA  3AFF               	xorlw	255
 11424  04AB  1D03               	skipz
 11425  04AC  0008               	return
 11426  04AD  086E               	movf	_product,w
 11427  04AE  3E0E               	addlw	14
 11428  04AF  0086               	movwf	6
 11429  04B0  3002               	movlw	2	; select bank4/5
 11430  04B1  0087               	movwf	7
 11431  04B2  0801               	movf	1,w
 11432  04B3  3AFF               	xorlw	255
 11433  04B4  1D03               	skipz
 11434  04B5  0008               	return
 11435                           
 11436                           ;MCU_B1.c: 948: myMain.FirstOpen = 1;
 11437  04B6  0021               	movlb	1	; select bank1
 11438  04B7  15AE               	bsf	_myMain^(0+128),3
 11439                           
 11440                           ;MCU_B1.c: 949: myMain.First = 1;
 11441  04B8  16AE               	bsf	_myMain^(0+128),5
 11442                           
 11443                           ;MCU_B1.c: 950: }
 11444                           ;MCU_B1.c: 951: } else {
 11445  04B9  0008               	return
 11446  04BA                     l9569:	
 11447                           
 11448                           ;MCU_B1.c: 952: i = setPercentValue(((char)((100-70)*0.8)));
 11449  04BA  3018               	movlw	24
 11450  04BB  3196  2634  3184   	fcall	_setPercentValue
 11451  04BE  0020               	movlb	0	; select bank0
 11452  04BF  00DD               	movwf	??_Flash_Memory_Initialization
 11453  04C0  085D               	movf	??_Flash_Memory_Initialization,w
 11454  04C1  00DE               	movwf	Flash_Memory_Initialization@i
 11455                           
 11456                           ;MCU_B1.c: 953: setMemory_Data(0, 0xff);
 11457  04C2  30FF               	movlw	255
 11458  04C3  00DD               	movwf	??_Flash_Memory_Initialization
 11459  04C4  085D               	movf	??_Flash_Memory_Initialization,w
 11460  04C5  00A0               	movwf	setMemory_Data@data
 11461  04C6  3000               	movlw	0
 11462  04C7  319E  264E  3184   	fcall	_setMemory_Data
 11463                           
 11464                           ;MCU_B1.c: 954: setMemory_Data(1, 0xff);
 11465  04CA  30FF               	movlw	255
 11466  04CB  0020               	movlb	0	; select bank0
 11467  04CC  00DD               	movwf	??_Flash_Memory_Initialization
 11468  04CD  085D               	movf	??_Flash_Memory_Initialization,w
 11469  04CE  00A0               	movwf	setMemory_Data@data
 11470  04CF  3001               	movlw	1
 11471  04D0  319E  264E  3184   	fcall	_setMemory_Data
 11472                           
 11473                           ;MCU_B1.c: 955: setMemory_Data(2, 0xff);
 11474  04D3  30FF               	movlw	255
 11475  04D4  0020               	movlb	0	; select bank0
 11476  04D5  00DD               	movwf	??_Flash_Memory_Initialization
 11477  04D6  085D               	movf	??_Flash_Memory_Initialization,w
 11478  04D7  00A0               	movwf	setMemory_Data@data
 11479  04D8  3002               	movlw	2
 11480  04D9  319E  264E  3184   	fcall	_setMemory_Data
 11481                           
 11482                           ;MCU_B1.c: 956: setMemory_Data(3, 0xff);
 11483  04DC  30FF               	movlw	255
 11484  04DD  0020               	movlb	0	; select bank0
 11485  04DE  00DD               	movwf	??_Flash_Memory_Initialization
 11486  04DF  085D               	movf	??_Flash_Memory_Initialization,w
 11487  04E0  00A0               	movwf	setMemory_Data@data
 11488  04E1  3003               	movlw	3
 11489  04E2  319E  264E  3184   	fcall	_setMemory_Data
 11490                           
 11491                           ;MCU_B1.c: 957: setMemory_Data(4, 0xff);
 11492  04E5  30FF               	movlw	255
 11493  04E6  0020               	movlb	0	; select bank0
 11494  04E7  00DD               	movwf	??_Flash_Memory_Initialization
 11495  04E8  085D               	movf	??_Flash_Memory_Initialization,w
 11496  04E9  00A0               	movwf	setMemory_Data@data
 11497  04EA  3004               	movlw	4
 11498  04EB  319E  264E  3184   	fcall	_setMemory_Data
 11499                           
 11500                           ;MCU_B1.c: 958: setMemory_Data(5, 0xff);
 11501  04EE  30FF               	movlw	255
 11502  04EF  0020               	movlb	0	; select bank0
 11503  04F0  00DD               	movwf	??_Flash_Memory_Initialization
 11504  04F1  085D               	movf	??_Flash_Memory_Initialization,w
 11505  04F2  00A0               	movwf	setMemory_Data@data
 11506  04F3  3005               	movlw	5
 11507  04F4  319E  264E  3184   	fcall	_setMemory_Data
 11508                           
 11509                           ;MCU_B1.c: 959: setMemory_Data(31, 0xaa);
 11510  04F7  30AA               	movlw	170
 11511  04F8  0020               	movlb	0	; select bank0
 11512  04F9  00DD               	movwf	??_Flash_Memory_Initialization
 11513  04FA  085D               	movf	??_Flash_Memory_Initialization,w
 11514  04FB  00A0               	movwf	setMemory_Data@data
 11515  04FC  301F               	movlw	31
 11516  04FD  319E  264E  3184   	fcall	_setMemory_Data
 11517                           
 11518                           ;MCU_B1.c: 960: product->Data[21] = i;
 11519  0500  0020               	movlb	0	; select bank0
 11520  0501  085E               	movf	Flash_Memory_Initialization@i,w
 11521  0502  00DD               	movwf	??_Flash_Memory_Initialization
 11522  0503  086E               	movf	_product,w
 11523  0504  3E15               	addlw	21
 11524  0505  0086               	movwf	6
 11525  0506  3002               	movlw	2	; select bank4/5
 11526  0507  0087               	movwf	7
 11527  0508  085D               	movf	??_Flash_Memory_Initialization,w
 11528  0509  0081               	movwf	1
 11529                           
 11530                           ;MCU_B1.c: 961: product->Data[22] = i;
 11531  050A  085E               	movf	Flash_Memory_Initialization@i,w
 11532  050B  00DD               	movwf	??_Flash_Memory_Initialization
 11533  050C  086E               	movf	_product,w
 11534  050D  3E16               	addlw	22
 11535  050E  0086               	movwf	6
 11536  050F  3002               	movlw	2	; select bank4/5
 11537  0510  0087               	movwf	7
 11538  0511  085D               	movf	??_Flash_Memory_Initialization,w
 11539  0512  0081               	movwf	1
 11540                           
 11541                           ;MCU_B1.c: 962: product->Data[23] = i;
 11542  0513  085E               	movf	Flash_Memory_Initialization@i,w
 11543  0514  00DD               	movwf	??_Flash_Memory_Initialization
 11544  0515  086E               	movf	_product,w
 11545  0516  3E17               	addlw	23
 11546  0517  0086               	movwf	6
 11547  0518  3002               	movlw	2	; select bank4/5
 11548  0519  0087               	movwf	7
 11549  051A  085D               	movf	??_Flash_Memory_Initialization,w
 11550  051B  0081               	movwf	1
 11551                           
 11552                           ;MCU_B1.c: 963: GIE = 0;
 11553  051C  138B               	bcf	11,7	;volatile
 11554                           
 11555                           ;MCU_B1.c: 964: Flash_Memory_Write();
 11556  051D  3193  23BF         	fcall	_Flash_Memory_Write
 11557                           
 11558                           ;MCU_B1.c: 965: GIE = 1;
 11559  051F  178B               	bsf	11,7	;volatile
 11560                           
 11561                           ;MCU_B1.c: 966: myMain.FirstOpen = 1;
 11562  0520  0021               	movlb	1	; select bank1
 11563  0521  15AE               	bsf	_myMain^(0+128),3
 11564                           
 11565                           ;MCU_B1.c: 967: myMain.First = 1;
 11566  0522  16AE               	bsf	_myMain^(0+128),5
 11567  0523  0008               	return
 11568  0524                     __end_of_Flash_Memory_Initialization:	
 11569                           
 11570                           	psect	text75
 11571  1E4E                     __ptext75:	
 11572 ;; *************** function _setMemory_Data *****************
 11573 ;; Defined at:
 11574 ;;		line 1082 in file "../src/MCU_B1.c"
 11575 ;; Parameters:    Size  Location     Type
 11576 ;;  address         1    wreg     unsigned char 
 11577 ;;  data            1    0[BANK0 ] unsigned char 
 11578 ;; Auto vars:     Size  Location     Type
 11579 ;;  address         1    2[BANK0 ] unsigned char 
 11580 ;; Return value:  Size  Location     Type
 11581 ;;		None               void
 11582 ;; Registers used:
 11583 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11584 ;; Tracked objects:
 11585 ;;		On entry : 0/0
 11586 ;;		On exit  : 0/0
 11587 ;;		Unchanged: 0/0
 11588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11589 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11590 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11591 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11592 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11593 ;;Total ram usage:        3 bytes
 11594 ;; Hardware stack levels used:    1
 11595 ;; Hardware stack levels required when called:    4
 11596 ;; This function calls:
 11597 ;;		Nothing
 11598 ;; This function is called by:
 11599 ;;		_Flash_Memory_Initialization
 11600 ;;		_Flash_Memory_Modify
 11601 ;; This function uses a non-reentrant model
 11602 ;;
 11603                           
 11604                           
 11605                           ;psect for function _setMemory_Data
 11606  1E4E                     _setMemory_Data:	
 11607                           
 11608                           ;incstack = 0
 11609                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11610                           ;setMemory_Data@address stored from wreg
 11611  1E4E  0020               	movlb	0	; select bank0
 11612  1E4F  00A2               	movwf	setMemory_Data@address
 11613                           
 11614                           ;MCU_B1.c: 1083: Memory.Data[address] = data;
 11615  1E50  0820               	movf	setMemory_Data@data,w
 11616  1E51  00A1               	movwf	??_setMemory_Data
 11617  1E52  0822               	movf	setMemory_Data@address,w
 11618  1E53  3EA0               	addlw	_Memory& (0+255)
 11619  1E54  0086               	movwf	6
 11620  1E55  3001               	movlw	1	; select bank3/4
 11621  1E56  0087               	movwf	7
 11622  1E57  0821               	movf	??_setMemory_Data,w
 11623  1E58  0081               	movwf	1
 11624  1E59  0008               	return
 11625  1E5A                     __end_of_setMemory_Data:	
 11626                           
 11627                           	psect	text76
 11628  13BF                     __ptext76:	
 11629 ;; *************** function _Flash_Memory_Write *****************
 11630 ;; Defined at:
 11631 ;;		line 1015 in file "../src/MCU_B1.c"
 11632 ;; Parameters:    Size  Location     Type
 11633 ;;		None
 11634 ;; Auto vars:     Size  Location     Type
 11635 ;;  i               1    1[BANK0 ] unsigned char 
 11636 ;; Return value:  Size  Location     Type
 11637 ;;		None               void
 11638 ;; Registers used:
 11639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11640 ;; Tracked objects:
 11641 ;;		On entry : 0/0
 11642 ;;		On exit  : 0/0
 11643 ;;		Unchanged: 0/0
 11644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;Total ram usage:        2 bytes
 11650 ;; Hardware stack levels used:    1
 11651 ;; Hardware stack levels required when called:    5
 11652 ;; This function calls:
 11653 ;;		_Flash_Memory_Unlock
 11654 ;; This function is called by:
 11655 ;;		_Flash_Memory_Initialization
 11656 ;;		_Flash_Memory_Modify
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           
 11661                           ;psect for function _Flash_Memory_Write
 11662  13BF                     _Flash_Memory_Write:	
 11663                           
 11664                           ;MCU_B1.c: 1016: char i = 0;
 11665                           
 11666                           ;incstack = 0
 11667                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11668  13BF  0020               	movlb	0	; select bank0
 11669  13C0  01A1               	clrf	Flash_Memory_Write@i
 11670                           
 11671                           ;MCU_B1.c: 1017: CFGS = 0;
 11672  13C1  0023               	movlb	3	; select bank3
 11673  13C2  1315               	bcf	21,6	;volatile
 11674                           
 11675                           ;MCU_B1.c: 1018: PMADRH = 0x30;
 11676  13C3  3030               	movlw	48
 11677  13C4  0092               	movwf	18	;volatile
 11678                           
 11679                           ;MCU_B1.c: 1019: PMDATH = 0;
 11680  13C5  0194               	clrf	20	;volatile
 11681                           
 11682                           ;MCU_B1.c: 1020: FREE = 0;
 11683  13C6  1215               	bcf	21,4	;volatile
 11684                           
 11685                           ;MCU_B1.c: 1021: LWLO = 1;
 11686  13C7  1695               	bsf	21,5	;volatile
 11687                           
 11688                           ;MCU_B1.c: 1022: WREN = 1;
 11689  13C8  1515               	bsf	21,2	;volatile
 11690                           
 11691                           ;MCU_B1.c: 1023: for (i = 0; i < 32; i++) {
 11692  13C9  0020               	movlb	0	; select bank0
 11693  13CA  01A1               	clrf	Flash_Memory_Write@i
 11694  13CB  3020               	movlw	32
 11695  13CC  0221               	subwf	Flash_Memory_Write@i,w
 11696  13CD  1803               	btfsc	3,0
 11697  13CE  2BE7               	goto	l1332
 11698  13CF                     l8935:	
 11699                           
 11700                           ;MCU_B1.c: 1024: PMADRL = i;
 11701  13CF  0821               	movf	Flash_Memory_Write@i,w
 11702  13D0  0023               	movlb	3	; select bank3
 11703  13D1  0091               	movwf	17	;volatile
 11704                           
 11705                           ;MCU_B1.c: 1025: PMDATL = Memory.Data[i];
 11706  13D2  0020               	movlb	0	; select bank0
 11707  13D3  0821               	movf	Flash_Memory_Write@i,w
 11708  13D4  3EA0               	addlw	_Memory& (0+255)
 11709  13D5  0086               	movwf	6
 11710  13D6  3001               	movlw	1	; select bank3/4
 11711  13D7  0087               	movwf	7
 11712  13D8  0801               	movf	1,w
 11713  13D9  0023               	movlb	3	; select bank3
 11714  13DA  0093               	movwf	19	;volatile
 11715                           
 11716                           ;MCU_B1.c: 1026: Flash_Memory_Unlock();
 11717  13DB  319E  2624  3193   	fcall	_Flash_Memory_Unlock
 11718  13DE  3001               	movlw	1
 11719  13DF  0020               	movlb	0	; select bank0
 11720  13E0  00A0               	movwf	??_Flash_Memory_Write
 11721  13E1  0820               	movf	??_Flash_Memory_Write,w
 11722  13E2  07A1               	addwf	Flash_Memory_Write@i,f
 11723  13E3  3020               	movlw	32
 11724  13E4  0221               	subwf	Flash_Memory_Write@i,w
 11725  13E5  1C03               	skipc
 11726  13E6  2BCF               	goto	l8935
 11727  13E7                     l1332:	
 11728                           
 11729                           ;MCU_B1.c: 1027: }
 11730                           ;MCU_B1.c: 1028: LWLO = 0;
 11731  13E7  0023               	movlb	3	; select bank3
 11732  13E8  1295               	bcf	21,5	;volatile
 11733                           
 11734                           ;MCU_B1.c: 1029: Flash_Memory_Unlock();
 11735  13E9  319E  2624         	fcall	_Flash_Memory_Unlock
 11736                           
 11737                           ;MCU_B1.c: 1030: WREN = 0;
 11738  13EB  0023               	movlb	3	; select bank3
 11739  13EC  1115               	bcf	21,2	;volatile
 11740  13ED  0008               	return
 11741  13EE                     __end_of_Flash_Memory_Write:	
 11742                           
 11743                           	psect	text77
 11744  1E24                     __ptext77:	
 11745 ;; *************** function _Flash_Memory_Unlock *****************
 11746 ;; Defined at:
 11747 ;;		line 994 in file "../src/MCU_B1.c"
 11748 ;; Parameters:    Size  Location     Type
 11749 ;;		None
 11750 ;; Auto vars:     Size  Location     Type
 11751 ;;		None
 11752 ;; Return value:  Size  Location     Type
 11753 ;;		None               void
 11754 ;; Registers used:
 11755 ;;		wreg
 11756 ;; Tracked objects:
 11757 ;;		On entry : 0/0
 11758 ;;		On exit  : 0/0
 11759 ;;		Unchanged: 0/0
 11760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11765 ;;Total ram usage:        0 bytes
 11766 ;; Hardware stack levels used:    1
 11767 ;; Hardware stack levels required when called:    4
 11768 ;; This function calls:
 11769 ;;		Nothing
 11770 ;; This function is called by:
 11771 ;;		_Flash_Memory_Write
 11772 ;;		_Flash_Memory_Erasing
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           
 11777                           ;psect for function _Flash_Memory_Unlock
 11778  1E24                     _Flash_Memory_Unlock:	
 11779                           
 11780                           ;MCU_B1.c: 995: PMCON2 = 0x55;
 11781                           
 11782                           ;incstack = 0
 11783                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11784  1E24  3055               	movlw	85
 11785  1E25  0023               	movlb	3	; select bank3
 11786  1E26  0096               	movwf	22	;volatile
 11787                           
 11788                           ;MCU_B1.c: 996: PMCON2 = 0xaa;
 11789  1E27  30AA               	movlw	170
 11790  1E28  0096               	movwf	22	;volatile
 11791                           
 11792                           ;MCU_B1.c: 997: WR = 1;
 11793  1E29  1495               	bsf	21,1	;volatile
 11794                           
 11795                           ;MCU_B1.c: 998: __nop();
 11796  1E2A  0000               	nop
 11797                           
 11798                           ;MCU_B1.c: 999: __nop();
 11799  1E2B  0000               	nop
 11800  1E2C  0008               	return
 11801  1E2D                     __end_of_Flash_Memory_Unlock:	
 11802                           
 11803                           	psect	text78
 11804  115A                     __ptext78:	
 11805 ;; *************** function _Flash_Memory_Read *****************
 11806 ;; Defined at:
 11807 ;;		line 1003 in file "../src/MCU_B1.c"
 11808 ;; Parameters:    Size  Location     Type
 11809 ;;  address         1    wreg     unsigned char 
 11810 ;; Auto vars:     Size  Location     Type
 11811 ;;  address         1    2[BANK0 ] unsigned char 
 11812 ;;  ret             1    3[BANK0 ] unsigned char 
 11813 ;;  i               1    1[BANK0 ] unsigned char 
 11814 ;; Return value:  Size  Location     Type
 11815 ;;                  1    wreg      unsigned char 
 11816 ;; Registers used:
 11817 ;;		wreg, status,2
 11818 ;; Tracked objects:
 11819 ;;		On entry : 0/0
 11820 ;;		On exit  : 0/0
 11821 ;;		Unchanged: 0/0
 11822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11824 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11825 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11826 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11827 ;;Total ram usage:        4 bytes
 11828 ;; Hardware stack levels used:    1
 11829 ;; Hardware stack levels required when called:    4
 11830 ;; This function calls:
 11831 ;;		Nothing
 11832 ;; This function is called by:
 11833 ;;		_Flash_Memory_Initialization
 11834 ;;		_Flash_Memory_Modify
 11835 ;; This function uses a non-reentrant model
 11836 ;;
 11837                           
 11838                           
 11839                           ;psect for function _Flash_Memory_Read
 11840  115A                     _Flash_Memory_Read:	
 11841                           
 11842                           ;incstack = 0
 11843                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11844                           ;Flash_Memory_Read@address stored from wreg
 11845  115A  0020               	movlb	0	; select bank0
 11846  115B  00A2               	movwf	Flash_Memory_Read@address
 11847                           
 11848                           ;MCU_B1.c: 1004: char i = 0, ret = 0;
 11849  115C  01A1               	clrf	Flash_Memory_Read@i
 11850  115D  01A3               	clrf	Flash_Memory_Read@ret
 11851                           
 11852                           ;MCU_B1.c: 1005: PMADRH = 0x30;
 11853  115E  3030               	movlw	48
 11854  115F  0023               	movlb	3	; select bank3
 11855  1160  0092               	movwf	18	;volatile
 11856                           
 11857                           ;MCU_B1.c: 1006: PMADRL = address;
 11858  1161  0020               	movlb	0	; select bank0
 11859  1162  0822               	movf	Flash_Memory_Read@address,w
 11860  1163  0023               	movlb	3	; select bank3
 11861  1164  0091               	movwf	17	;volatile
 11862                           
 11863                           ;MCU_B1.c: 1007: CFGS = 0;
 11864  1165  1315               	bcf	21,6	;volatile
 11865                           
 11866                           ;MCU_B1.c: 1008: RD = 1;
 11867  1166  1415               	bsf	21,0	;volatile
 11868                           
 11869                           ;MCU_B1.c: 1009: i = PMDATH;
 11870  1167  0814               	movf	20,w	;volatile
 11871  1168  0020               	movlb	0	; select bank0
 11872  1169  00A0               	movwf	??_Flash_Memory_Read
 11873  116A  0820               	movf	??_Flash_Memory_Read,w
 11874  116B  00A1               	movwf	Flash_Memory_Read@i
 11875                           
 11876                           ;MCU_B1.c: 1010: ret = PMDATL;
 11877  116C  0023               	movlb	3	; select bank3
 11878  116D  0813               	movf	19,w	;volatile
 11879  116E  0020               	movlb	0	; select bank0
 11880  116F  00A0               	movwf	??_Flash_Memory_Read
 11881  1170  0820               	movf	??_Flash_Memory_Read,w
 11882  1171  00A3               	movwf	Flash_Memory_Read@ret
 11883                           
 11884                           ;MCU_B1.c: 1011: return ret;
 11885  1172  0823               	movf	Flash_Memory_Read@ret,w
 11886  1173  0008               	return
 11887  1174                     __end_of_Flash_Memory_Read:	
 11888                           
 11889                           	psect	text79
 11890  0524                     __ptext79:	
 11891 ;; *************** function _Exception_Main *****************
 11892 ;; Defined at:
 11893 ;;		line 523 in file "../src/Main_B1.c"
 11894 ;; Parameters:    Size  Location     Type
 11895 ;;		None
 11896 ;; Auto vars:     Size  Location     Type
 11897 ;;  i               2   75[BANK0 ] int 
 11898 ;;  i               2   73[BANK0 ] int 
 11899 ;;  lights          1   77[BANK0 ] unsigned char 
 11900 ;;  error           1   72[BANK0 ] unsigned char 
 11901 ;;  count           1   71[BANK0 ] unsigned char 
 11902 ;; Return value:  Size  Location     Type
 11903 ;;		None               void
 11904 ;; Registers used:
 11905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11906 ;; Tracked objects:
 11907 ;;		On entry : 0/0
 11908 ;;		On exit  : 0/0
 11909 ;;		Unchanged: 0/0
 11910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11912 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11913 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11914 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11915 ;;Total ram usage:        8 bytes
 11916 ;; Hardware stack levels used:    1
 11917 ;; Hardware stack levels required when called:    8
 11918 ;; This function calls:
 11919 ;;		_getDimmerLights_Line
 11920 ;;		_getDimmerLights_Status
 11921 ;;		_getMain_All_Error_Status
 11922 ;;		_getMain_LightsStatus
 11923 ;;		_setBuz
 11924 ;;		_setDimmerLights_SwOff
 11925 ;;		_setLED
 11926 ;; This function is called by:
 11927 ;;		_main
 11928 ;; This function uses a non-reentrant model
 11929 ;;
 11930                           
 11931                           
 11932                           ;psect for function _Exception_Main
 11933  0524                     _Exception_Main:	
 11934                           
 11935                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
 11936                           
 11937                           ;incstack = 0
 11938                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11939  0524  3000               	movlw	0
 11940  0525  3191  21AA  3185   	fcall	_getMain_All_Error_Status
 11941  0528  0020               	movlb	0	; select bank0
 11942  0529  00E6               	movwf	??_Exception_Main
 11943  052A  0866               	movf	??_Exception_Main,w
 11944  052B  00E8               	movwf	Exception_Main@error
 11945                           
 11946                           ;Main_B1.c: 525: char lights = 0, count = 2;
 11947  052C  01ED               	clrf	Exception_Main@lights
 11948  052D  3002               	movlw	2
 11949  052E  00E6               	movwf	??_Exception_Main
 11950  052F  0866               	movf	??_Exception_Main,w
 11951  0530  00E7               	movwf	Exception_Main@count
 11952                           
 11953                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
 11954  0531  0021               	movlb	1	; select bank1
 11955  0532  1DB9               	btfss	(_myMain^(0+128)+11),3
 11956  0533  2D43               	goto	l9709
 11957                           
 11958                           ;Main_B1.c: 527: if (error == 0) {
 11959  0534  0020               	movlb	0	; select bank0
 11960  0535  08E8               	movf	Exception_Main@error,f
 11961  0536  1D03               	skipz
 11962  0537  0008               	return
 11963                           
 11964                           ;Main_B1.c: 528: myMain.Error_Run = 0;
 11965  0538  0021               	movlb	1	; select bank1
 11966  0539  11B9               	bcf	(_myMain^(0+128)+11),3
 11967                           
 11968                           ;Main_B1.c: 533: setLED(99, 10);
 11969  053A  300A               	movlw	10
 11970  053B  0020               	movlb	0	; select bank0
 11971  053C  00E6               	movwf	??_Exception_Main
 11972  053D  0866               	movf	??_Exception_Main,w
 11973  053E  00A2               	movwf	setLED@command
 11974  053F  3063               	movlw	99
 11975  0540  3197  27B0         	fcall	_setLED
 11976                           
 11977                           ;Main_B1.c: 535: }
 11978                           ;Main_B1.c: 536: } else {
 11979  0542  0008               	return
 11980  0543                     l9709:	
 11981                           
 11982                           ;Main_B1.c: 537: if (error != 0) {
 11983  0543  0020               	movlb	0	; select bank0
 11984  0544  0868               	movf	Exception_Main@error,w
 11985  0545  1903               	btfsc	3,2
 11986  0546  0008               	return
 11987                           
 11988                           ;Main_B1.c: 538: myMain.Error_Run = 1;
 11989  0547  0021               	movlb	1	; select bank1
 11990  0548  15B9               	bsf	(_myMain^(0+128)+11),3
 11991                           
 11992                           ;Main_B1.c: 541: setLED(99, 11);
 11993  0549  300B               	movlw	11
 11994  054A  0020               	movlb	0	; select bank0
 11995  054B  00E6               	movwf	??_Exception_Main
 11996  054C  0866               	movf	??_Exception_Main,w
 11997  054D  00A2               	movwf	setLED@command
 11998  054E  3063               	movlw	99
 11999  054F  3197  27B0  3185   	fcall	_setLED
 12000                           
 12001                           ;Main_B1.c: 543: switch (error) {
 12002  0552  2DF2               	goto	l9757
 12003  0553                     l9715:	
 12004                           ;Main_B1.c: 544: case 2:
 12005                           
 12006                           
 12007                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
 12008  0553  319F  278C  3185   	fcall	_getMain_LightsStatus
 12009  0556  3A01               	xorlw	1
 12010  0557  1D03               	skipz
 12011  0558  2D62               	goto	l9719
 12012                           
 12013                           ;Main_B1.c: 546: setBuz(10, 300);
 12014  0559  302C               	movlw	44
 12015  055A  0020               	movlb	0	; select bank0
 12016  055B  00A9               	movwf	setBuz@time
 12017  055C  3001               	movlw	1
 12018  055D  00AA               	movwf	setBuz@time+1
 12019  055E  300A               	movlw	10
 12020  055F  3189  217C  3185   	fcall	_setBuz
 12021  0562                     l9719:	
 12022                           
 12023                           ;Main_B1.c: 547: }
 12024                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
 12025  0562  0020               	movlb	0	; select bank0
 12026  0563  01E9               	clrf	Exception_Main@i
 12027  0564  01EA               	clrf	Exception_Main@i+1
 12028  0565                     l9729:	
 12029  0565  086A               	movf	Exception_Main@i+1,w
 12030  0566  3A80               	xorlw	128
 12031  0567  00E6               	movwf	??_Exception_Main
 12032  0568  3080               	movlw	128
 12033  0569  0266               	subwf	??_Exception_Main,w
 12034  056A  1D03               	skipz
 12035  056B  2D6E               	goto	u10895
 12036  056C  0867               	movf	Exception_Main@count,w
 12037  056D  0269               	subwf	Exception_Main@i,w
 12038  056E                     u10895:	
 12039  056E  1803               	btfsc	3,0
 12040  056F  2D91               	goto	u10890
 12041                           
 12042                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
 12043  0570  0020               	movlb	0	; select bank0
 12044  0571  0869               	movf	Exception_Main@i,w
 12045  0572  3E01               	addlw	1
 12046  0573  319E  26EC  3185   	fcall	_getDimmerLights_Status
 12047  0576  3A01               	xorlw	1
 12048  0577  1D03               	skipz
 12049  0578  2D8B               	goto	l9727
 12050                           
 12051                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
 12052  0579  0020               	movlb	0	; select bank0
 12053  057A  086F               	movf	_DimmerLights,w
 12054  057B  3E0B               	addlw	11
 12055  057C  0086               	movwf	6
 12056  057D  3001               	movlw	1	; select bank2/3
 12057  057E  0087               	movwf	7
 12058  057F  1481               	bsf	1,1
 12059                           
 12060                           ;Main_B1.c: 553: DimmerLights->Status = 0;
 12061  0580  086F               	movf	_DimmerLights,w
 12062  0581  3E02               	addlw	2
 12063  0582  0086               	movwf	6
 12064  0583  3001               	movlw	1	; select bank2/3
 12065  0584  0087               	movwf	7
 12066  0585  1081               	bcf	1,1
 12067                           
 12068                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
 12069  0586  0869               	movf	Exception_Main@i,w
 12070  0587  3E01               	addlw	1
 12071  0588  3197  2712  3185   	fcall	_setDimmerLights_SwOff
 12072  058B                     l9727:	
 12073  058B  3001               	movlw	1
 12074  058C  0020               	movlb	0	; select bank0
 12075  058D  07E9               	addwf	Exception_Main@i,f
 12076  058E  3000               	movlw	0
 12077  058F  3DEA               	addwfc	Exception_Main@i+1,f
 12078  0590  2D65               	goto	l9729
 12079  0591                     u10890:	
 12080  0591  0020               	movlb	0	; select bank0
 12081  0592  0008               	return
 12082  0593                     l9731:	
 12083                           ;Main_B1.c: 558: case 3:
 12084                           
 12085                           ;Main_B1.c: 555: }
 12086                           ;Main_B1.c: 556: }
 12087                           ;Main_B1.c: 557: break;
 12088                           
 12089                           
 12090                           ;Main_B1.c: 560: setBuz(5, 300);
 12091  0593  302C               	movlw	44
 12092  0594  0020               	movlb	0	; select bank0
 12093  0595  00A9               	movwf	setBuz@time
 12094  0596  3001               	movlw	1
 12095  0597  00AA               	movwf	setBuz@time+1
 12096  0598  3005               	movlw	5
 12097  0599  3189  217C  3185   	fcall	_setBuz
 12098                           
 12099                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
 12100  059C  319F  279F  3185   	fcall	_getDimmerLights_Line
 12101  059F  0020               	movlb	0	; select bank0
 12102  05A0  00E6               	movwf	??_Exception_Main
 12103  05A1  0866               	movf	??_Exception_Main,w
 12104  05A2  00ED               	movwf	Exception_Main@lights
 12105                           
 12106                           ;Main_B1.c: 562: if (lights == 0) {
 12107  05A3  08ED               	movf	Exception_Main@lights,f
 12108  05A4  1D03               	skipz
 12109  05A5  2DD6               	goto	l9749
 12110                           
 12111                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
 12112  05A6  01EB               	clrf	Exception_Main@i_3354
 12113  05A7  01EC               	clrf	Exception_Main@i_3354+1
 12114  05A8                     l9747:	
 12115  05A8  086C               	movf	Exception_Main@i_3354+1,w
 12116  05A9  3A80               	xorlw	128
 12117  05AA  00E6               	movwf	??_Exception_Main
 12118  05AB  3080               	movlw	128
 12119  05AC  0266               	subwf	??_Exception_Main,w
 12120  05AD  1D03               	skipz
 12121  05AE  2DB1               	goto	u10925
 12122  05AF  0867               	movf	Exception_Main@count,w
 12123  05B0  026B               	subwf	Exception_Main@i_3354,w
 12124  05B1                     u10925:	
 12125  05B1  1803               	btfsc	3,0
 12126  05B2  2DD4               	goto	u10920
 12127                           
 12128                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
 12129  05B3  0020               	movlb	0	; select bank0
 12130  05B4  086B               	movf	Exception_Main@i_3354,w
 12131  05B5  3E01               	addlw	1
 12132  05B6  319E  26EC  3185   	fcall	_getDimmerLights_Status
 12133  05B9  3A01               	xorlw	1
 12134  05BA  1D03               	skipz
 12135  05BB  2DCE               	goto	l9745
 12136                           
 12137                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
 12138  05BC  0020               	movlb	0	; select bank0
 12139  05BD  086F               	movf	_DimmerLights,w
 12140  05BE  3E0B               	addlw	11
 12141  05BF  0086               	movwf	6
 12142  05C0  3001               	movlw	1	; select bank2/3
 12143  05C1  0087               	movwf	7
 12144  05C2  1481               	bsf	1,1
 12145                           
 12146                           ;Main_B1.c: 568: DimmerLights->Status = 0;
 12147  05C3  086F               	movf	_DimmerLights,w
 12148  05C4  3E02               	addlw	2
 12149  05C5  0086               	movwf	6
 12150  05C6  3001               	movlw	1	; select bank2/3
 12151  05C7  0087               	movwf	7
 12152  05C8  1081               	bcf	1,1
 12153                           
 12154                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
 12155  05C9  086B               	movf	Exception_Main@i_3354,w
 12156  05CA  3E01               	addlw	1
 12157  05CB  3197  2712  3185   	fcall	_setDimmerLights_SwOff
 12158  05CE                     l9745:	
 12159  05CE  3001               	movlw	1
 12160  05CF  0020               	movlb	0	; select bank0
 12161  05D0  07EB               	addwf	Exception_Main@i_3354,f
 12162  05D1  3000               	movlw	0
 12163  05D2  3DEC               	addwfc	Exception_Main@i_3354+1,f
 12164  05D3  2DA8               	goto	l9747
 12165  05D4                     u10920:	
 12166  05D4  0020               	movlb	0	; select bank0
 12167  05D5  0008               	return
 12168  05D6                     l9749:	
 12169                           ;Main_B1.c: 570: }
 12170                           ;Main_B1.c: 571: }
 12171                           ;Main_B1.c: 572: } else {
 12172                           
 12173                           
 12174                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
 12175  05D6  0020               	movlb	0	; select bank0
 12176  05D7  086D               	movf	Exception_Main@lights,w
 12177  05D8  319E  26EC  3185   	fcall	_getDimmerLights_Status
 12178  05DB  3A01               	xorlw	1
 12179  05DC  1903               	btfsc	3,2
 12180  05DD  2DE0               	goto	l9751
 12181  05DE  0020               	movlb	0	; select bank0
 12182  05DF  0008               	return
 12183  05E0                     l9751:	
 12184                           
 12185                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 12186  05E0  0020               	movlb	0	; select bank0
 12187  05E1  086F               	movf	_DimmerLights,w
 12188  05E2  3E0B               	addlw	11
 12189  05E3  0086               	movwf	6
 12190  05E4  3001               	movlw	1	; select bank2/3
 12191  05E5  0087               	movwf	7
 12192  05E6  1481               	bsf	1,1
 12193                           
 12194                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 12195  05E7  086F               	movf	_DimmerLights,w
 12196  05E8  3E02               	addlw	2
 12197  05E9  0086               	movwf	6
 12198  05EA  3001               	movlw	1	; select bank2/3
 12199  05EB  0087               	movwf	7
 12200  05EC  1081               	bcf	1,1
 12201                           
 12202                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
 12203  05ED  086D               	movf	Exception_Main@lights,w
 12204  05EE  3197  2712         	fcall	_setDimmerLights_SwOff
 12205  05F0  0020               	movlb	0	; select bank0
 12206  05F1  0008               	return
 12207  05F2                     l9757:	
 12208                           ;Main_B1.c: 582: }
 12209                           
 12210                           ;Main_B1.c: 579: }
 12211                           ;Main_B1.c: 580: }
 12212                           ;Main_B1.c: 581: break;
 12213                           
 12214  05F2  0020               	movlb	0	; select bank0
 12215  05F3  0868               	movf	Exception_Main@error,w
 12216                           
 12217                           ; Switch size 1, requested type "space"
 12218                           ; Number of cases is 2, Range of values is 2 to 3
 12219                           ; switch strategies available:
 12220                           ; Name         Instructions Cycles
 12221                           ; simple_byte            7     4 (average)
 12222                           ; direct_byte           13     9 (fixed)
 12223                           ; jumptable            263     9 (fixed)
 12224                           ;	Chosen strategy is simple_byte
 12225  05F4  3A02               	xorlw	2	; case 2
 12226  05F5  1903               	skipnz
 12227  05F6  2D53               	goto	l9715
 12228  05F7  3A01               	xorlw	1	; case 3
 12229  05F8  1903               	skipnz
 12230  05F9  2D93               	goto	l9731
 12231  05FA  2DFC               	goto	l1578
 12232  05FB  0008               	return
 12233  05FC                     l1578:	
 12234  05FC  0008               	return
 12235  05FD                     __end_of_Exception_Main:	
 12236                           
 12237                           	psect	text80
 12238  11AA                     __ptext80:	
 12239 ;; *************** function _getMain_All_Error_Status *****************
 12240 ;; Defined at:
 12241 ;;		line 426 in file "../src/Main_B1.c"
 12242 ;; Parameters:    Size  Location     Type
 12243 ;;  command         1    wreg     unsigned char 
 12244 ;; Auto vars:     Size  Location     Type
 12245 ;;  command         1    1[BANK0 ] unsigned char 
 12246 ;;  status          1    4[BANK0 ] unsigned char 
 12247 ;; Return value:  Size  Location     Type
 12248 ;;                  1    wreg      unsigned char 
 12249 ;; Registers used:
 12250 ;;		wreg, status,2, status,0
 12251 ;; Tracked objects:
 12252 ;;		On entry : 0/0
 12253 ;;		On exit  : 0/0
 12254 ;;		Unchanged: 0/0
 12255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12257 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12259 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12260 ;;Total ram usage:        5 bytes
 12261 ;; Hardware stack levels used:    1
 12262 ;; Hardware stack levels required when called:    4
 12263 ;; This function calls:
 12264 ;;		Nothing
 12265 ;; This function is called by:
 12266 ;;		_Exception_Main
 12267 ;;		_setTemp_Main
 12268 ;;		_getRxData
 12269 ;;		_setSw_Main
 12270 ;; This function uses a non-reentrant model
 12271 ;;
 12272                           
 12273                           
 12274                           ;psect for function _getMain_All_Error_Status
 12275  11AA                     _getMain_All_Error_Status:	
 12276                           
 12277                           ;incstack = 0
 12278                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 12279                           ;getMain_All_Error_Status@command stored from wreg
 12280  11AA  0020               	movlb	0	; select bank0
 12281  11AB  00A1               	movwf	getMain_All_Error_Status@command
 12282                           
 12283                           ;Main_B1.c: 427: char status = 0;
 12284  11AC  01A4               	clrf	getMain_All_Error_Status@status
 12285                           
 12286                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 12287  11AD  08A4               	movf	getMain_All_Error_Status@status,f
 12288  11AE  1D03               	skipz
 12289  11AF  29C4               	goto	l1544
 12290  11B0  0821               	movf	getMain_All_Error_Status@command,w
 12291  11B1  3A02               	xorlw	2
 12292  11B2  1903               	skipnz
 12293  11B3  29C4               	goto	l1544
 12294                           
 12295                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 12296  11B4  0021               	movlb	1	; select bank1
 12297  11B5  18DA               	btfsc	_Temp^(0+128),1
 12298  11B6  29BB               	goto	l8649
 12299  11B7  0020               	movlb	0	; select bank0
 12300  11B8  01A2               	clrf	_getMain_All_Error_Status$3339
 12301  11B9  01A3               	clrf	_getMain_All_Error_Status$3339+1
 12302  11BA  29C0               	goto	l1548
 12303  11BB                     l8649:	
 12304  11BB  3002               	movlw	2
 12305  11BC  0020               	movlb	0	; select bank0
 12306  11BD  00A2               	movwf	_getMain_All_Error_Status$3339
 12307  11BE  3000               	movlw	0
 12308  11BF  00A3               	movwf	_getMain_All_Error_Status$3339+1
 12309  11C0                     l1548:	
 12310  11C0  0822               	movf	_getMain_All_Error_Status$3339,w
 12311  11C1  00A0               	movwf	??_getMain_All_Error_Status
 12312  11C2  0820               	movf	??_getMain_All_Error_Status,w
 12313  11C3  00A4               	movwf	getMain_All_Error_Status@status
 12314  11C4                     l1544:	
 12315                           
 12316                           ;Main_B1.c: 440: }
 12317                           ;Main_B1.c: 463: return status;
 12318  11C4  0824               	movf	getMain_All_Error_Status@status,w
 12319  11C5  0008               	return
 12320  11C6                     __end_of_getMain_All_Error_Status:	
 12321                           
 12322                           	psect	text81
 12323  1F9F                     __ptext81:	
 12324 ;; *************** function _getDimmerLights_Line *****************
 12325 ;; Defined at:
 12326 ;;		line 764 in file "../src/Dimmer_B1.c"
 12327 ;; Parameters:    Size  Location     Type
 12328 ;;		None
 12329 ;; Auto vars:     Size  Location     Type
 12330 ;;  line            1    1[BANK0 ] unsigned char 
 12331 ;; Return value:  Size  Location     Type
 12332 ;;                  1    wreg      unsigned char 
 12333 ;; Registers used:
 12334 ;;		wreg, status,2
 12335 ;; Tracked objects:
 12336 ;;		On entry : 0/0
 12337 ;;		On exit  : 0/0
 12338 ;;		Unchanged: 0/0
 12339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;Total ram usage:        2 bytes
 12345 ;; Hardware stack levels used:    1
 12346 ;; Hardware stack levels required when called:    4
 12347 ;; This function calls:
 12348 ;;		Nothing
 12349 ;; This function is called by:
 12350 ;;		_Exception_Main
 12351 ;; This function uses a non-reentrant model
 12352 ;;
 12353                           
 12354                           
 12355                           ;psect for function _getDimmerLights_Line
 12356  1F9F                     _getDimmerLights_Line:	
 12357                           
 12358                           ;Dimmer_B1.c: 765: char line = 0;
 12359                           
 12360                           ;incstack = 0
 12361                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12362  1F9F  0020               	movlb	0	; select bank0
 12363  1FA0  01A1               	clrf	getDimmerLights_Line@line
 12364                           
 12365                           ;Dimmer_B1.c: 767: if (DimmerLights1.Line == 1) {
 12366  1FA1  0022               	movlb	2	; select bank2
 12367  1FA2  1F4B               	btfss	(_DimmerLights1^(0+256)+10),6
 12368  1FA3  2FA8               	goto	l850
 12369                           
 12370                           ;Dimmer_B1.c: 768: line = 1;
 12371  1FA4  0020               	movlb	0	; select bank0
 12372  1FA5  01A1               	clrf	getDimmerLights_Line@line
 12373  1FA6  0AA1               	incf	getDimmerLights_Line@line,f
 12374                           
 12375                           ;Dimmer_B1.c: 769: }
 12376  1FA7  2FAF               	goto	l851
 12377  1FA8                     l850:	
 12378                           
 12379                           ;Dimmer_B1.c: 772: else if (DimmerLights2.Line == 1) {
 12380  1FA8  1F5C               	btfss	(_DimmerLights2^(0+256)+10),6
 12381  1FA9  2FAF               	goto	l851
 12382                           
 12383                           ;Dimmer_B1.c: 773: line = 2;
 12384  1FAA  3002               	movlw	2
 12385  1FAB  0020               	movlb	0	; select bank0
 12386  1FAC  00A0               	movwf	??_getDimmerLights_Line
 12387  1FAD  0820               	movf	??_getDimmerLights_Line,w
 12388  1FAE  00A1               	movwf	getDimmerLights_Line@line
 12389  1FAF                     l851:	
 12390                           
 12391                           ;Dimmer_B1.c: 774: }
 12392                           ;Dimmer_B1.c: 781: return line;
 12393  1FAF  0020               	movlb	0	; select bank0
 12394  1FB0  0821               	movf	getDimmerLights_Line@line,w
 12395  1FB1  0008               	return
 12396  1FB2                     __end_of_getDimmerLights_Line:	
 12397                           
 12398                           	psect	text82
 12399  1E1C                     __ptext82:	
 12400 ;; *************** function _DimmerLights_Main *****************
 12401 ;; Defined at:
 12402 ;;		line 522 in file "../src/Dimmer_B1.c"
 12403 ;; Parameters:    Size  Location     Type
 12404 ;;		None
 12405 ;; Auto vars:     Size  Location     Type
 12406 ;;		None
 12407 ;; Return value:  Size  Location     Type
 12408 ;;		None               void
 12409 ;; Registers used:
 12410 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12411 ;; Tracked objects:
 12412 ;;		On entry : 0/0
 12413 ;;		On exit  : 0/0
 12414 ;;		Unchanged: 0/0
 12415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;Total ram usage:        0 bytes
 12421 ;; Hardware stack levels used:    1
 12422 ;; Hardware stack levels required when called:    9
 12423 ;; This function calls:
 12424 ;;		_setDimmerLights_Main
 12425 ;; This function is called by:
 12426 ;;		_main
 12427 ;; This function uses a non-reentrant model
 12428 ;;
 12429                           
 12430                           
 12431                           ;psect for function _DimmerLights_Main
 12432  1E1C                     _DimmerLights_Main:	
 12433                           
 12434                           ;Dimmer_B1.c: 542: setDimmerLights_Main(1);
 12435                           
 12436                           ;incstack = 0
 12437                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12438  1E1C  3001               	movlw	1
 12439  1E1D  318D  2535  319E   	fcall	_setDimmerLights_Main
 12440                           
 12441                           ;Dimmer_B1.c: 546: setDimmerLights_Main(2);
 12442  1E20  3002               	movlw	2
 12443  1E21  318D  2535         	fcall	_setDimmerLights_Main
 12444  1E23  0008               	return
 12445  1E24                     __end_of_DimmerLights_Main:	
 12446                           
 12447                           	psect	text83
 12448  0D35                     __ptext83:	
 12449 ;; *************** function _setDimmerLights_Main *****************
 12450 ;; Defined at:
 12451 ;;		line 556 in file "../src/Dimmer_B1.c"
 12452 ;; Parameters:    Size  Location     Type
 12453 ;;  lights          1    wreg     unsigned char 
 12454 ;; Auto vars:     Size  Location     Type
 12455 ;;  lights          1   73[BANK0 ] unsigned char 
 12456 ;; Return value:  Size  Location     Type
 12457 ;;		None               void
 12458 ;; Registers used:
 12459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12460 ;; Tracked objects:
 12461 ;;		On entry : 0/0
 12462 ;;		On exit  : 0/0
 12463 ;;		Unchanged: 0/0
 12464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12468 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12469 ;;Total ram usage:        1 bytes
 12470 ;; Hardware stack levels used:    1
 12471 ;; Hardware stack levels required when called:    8
 12472 ;; This function calls:
 12473 ;;		_DimmerLightsPointSelect
 12474 ;;		_getDimmerLights_Allow_Condition
 12475 ;;		_getMain_LightsStatus
 12476 ;;		_setDimmerLights
 12477 ;;		_setDimmerLights_Adj
 12478 ;; This function is called by:
 12479 ;;		_DimmerLights_Main
 12480 ;; This function uses a non-reentrant model
 12481 ;;
 12482                           
 12483                           
 12484                           ;psect for function _setDimmerLights_Main
 12485  0D35                     _setDimmerLights_Main:	
 12486                           
 12487                           ;incstack = 0
 12488                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12489                           ;setDimmerLights_Main@lights stored from wreg
 12490  0D35  0020               	movlb	0	; select bank0
 12491  0D36  00E9               	movwf	setDimmerLights_Main@lights
 12492                           
 12493                           ;Dimmer_B1.c: 557: DimmerLightsPointSelect(lights);
 12494  0D37  0869               	movf	setDimmerLights_Main@lights,w
 12495  0D38  319F  2779  318D   	fcall	_DimmerLightsPointSelect
 12496                           
 12497                           ;Dimmer_B1.c: 559: if (DimmerLights->Trigger == 1) {
 12498  0D3B  0020               	movlb	0	; select bank0
 12499  0D3C  086F               	movf	_DimmerLights,w
 12500  0D3D  3E0A               	addlw	10
 12501  0D3E  0086               	movwf	6
 12502  0D3F  3001               	movlw	1	; select bank2/3
 12503  0D40  0087               	movwf	7
 12504  0D41  1C81               	btfss	1,1
 12505  0D42  2D64               	goto	l9123
 12506                           
 12507                           ;Dimmer_B1.c: 560: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12508  0D43  0869               	movf	setDimmerLights_Main@lights,w
 12509  0D44  3193  233F  318D   	fcall	_getDimmerLights_Allow_Condition
 12510  0D47  3800               	iorlw	0
 12511  0D48  1D03               	skipz
 12512  0D49  0008               	return
 12513                           
 12514                           ;Dimmer_B1.c: 561: DimmerLights->Trigger = 0;
 12515  0D4A  0020               	movlb	0	; select bank0
 12516  0D4B  086F               	movf	_DimmerLights,w
 12517  0D4C  3E0A               	addlw	10
 12518  0D4D  0086               	movwf	6
 12519  0D4E  3001               	movlw	1	; select bank2/3
 12520  0D4F  0087               	movwf	7
 12521  0D50  1081               	bcf	1,1
 12522                           
 12523                           ;Dimmer_B1.c: 562: if (DimmerLights->Switch == 1) {
 12524  0D51  086F               	movf	_DimmerLights,w
 12525  0D52  3E0A               	addlw	10
 12526  0D53  0086               	movwf	6
 12527  0D54  3001               	movlw	1	; select bank2/3
 12528  0D55  0087               	movwf	7
 12529  0D56  1C01               	btfss	1,0
 12530  0D57  2D5E               	goto	l9121
 12531                           
 12532                           ;Dimmer_B1.c: 563: setDimmerLights(lights, 1);
 12533  0D58  01E6               	clrf	setDimmerLights@status
 12534  0D59  0AE6               	incf	setDimmerLights@status,f
 12535  0D5A  0869               	movf	setDimmerLights_Main@lights,w
 12536  0D5B  3195  25AE         	fcall	_setDimmerLights
 12537                           
 12538                           ;Dimmer_B1.c: 564: } else {
 12539  0D5D  0008               	return
 12540  0D5E                     l9121:	
 12541                           
 12542                           ;Dimmer_B1.c: 565: setDimmerLights(lights, 0);
 12543  0D5E  0020               	movlb	0	; select bank0
 12544  0D5F  01E6               	clrf	setDimmerLights@status
 12545  0D60  0869               	movf	setDimmerLights_Main@lights,w
 12546  0D61  3195  25AE         	fcall	_setDimmerLights
 12547                           
 12548                           ;Dimmer_B1.c: 566: }
 12549                           ;Dimmer_B1.c: 567: }
 12550                           ;Dimmer_B1.c: 568: } else {
 12551  0D63  0008               	return
 12552  0D64                     l9123:	
 12553                           
 12554                           ;Dimmer_B1.c: 569: if (getMain_LightsStatus() == 1) {
 12555  0D64  319F  278C  318D   	fcall	_getMain_LightsStatus
 12556  0D67  3A01               	xorlw	1
 12557  0D68  1D03               	skipz
 12558  0D69  2D93               	goto	l9135
 12559                           
 12560                           ;Dimmer_B1.c: 570: if (DimmerLights->TriggerAdj == 1) {
 12561  0D6A  0020               	movlb	0	; select bank0
 12562  0D6B  086F               	movf	_DimmerLights,w
 12563  0D6C  3E0A               	addlw	10
 12564  0D6D  0086               	movwf	6
 12565  0D6E  3001               	movlw	1	; select bank2/3
 12566  0D6F  0087               	movwf	7
 12567  0D70  1D81               	btfss	1,3
 12568  0D71  0008               	return
 12569                           
 12570                           ;Dimmer_B1.c: 571: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12571  0D72  0869               	movf	setDimmerLights_Main@lights,w
 12572  0D73  3193  233F  318D   	fcall	_getDimmerLights_Allow_Condition
 12573  0D76  3800               	iorlw	0
 12574  0D77  1D03               	skipz
 12575  0D78  0008               	return
 12576                           
 12577                           ;Dimmer_B1.c: 572: DimmerLights->TriggerAdj = 0;
 12578  0D79  0020               	movlb	0	; select bank0
 12579  0D7A  086F               	movf	_DimmerLights,w
 12580  0D7B  3E0A               	addlw	10
 12581  0D7C  0086               	movwf	6
 12582  0D7D  3001               	movlw	1	; select bank2/3
 12583  0D7E  0087               	movwf	7
 12584  0D7F  1181               	bcf	1,3
 12585                           
 12586                           ;Dimmer_B1.c: 573: if (DimmerLights->SwitchAdj == 1) {
 12587  0D80  086F               	movf	_DimmerLights,w
 12588  0D81  3E0A               	addlw	10
 12589  0D82  0086               	movwf	6
 12590  0D83  3001               	movlw	1	; select bank2/3
 12591  0D84  0087               	movwf	7
 12592  0D85  1D01               	btfss	1,2
 12593  0D86  2D8D               	goto	l9133
 12594                           
 12595                           ;Dimmer_B1.c: 574: setDimmerLights_Adj(lights, 1);
 12596  0D87  01E6               	clrf	setDimmerLights_Adj@status
 12597  0D88  0AE6               	incf	setDimmerLights_Adj@status,f
 12598  0D89  0869               	movf	setDimmerLights_Main@lights,w
 12599  0D8A  3189  2124         	fcall	_setDimmerLights_Adj
 12600                           
 12601                           ;Dimmer_B1.c: 575: } else {
 12602  0D8C  0008               	return
 12603  0D8D                     l9133:	
 12604                           
 12605                           ;Dimmer_B1.c: 576: setDimmerLights_Adj(lights, 0);
 12606  0D8D  0020               	movlb	0	; select bank0
 12607  0D8E  01E6               	clrf	setDimmerLights_Adj@status
 12608  0D8F  0869               	movf	setDimmerLights_Main@lights,w
 12609  0D90  3189  2124         	fcall	_setDimmerLights_Adj
 12610                           
 12611                           ;Dimmer_B1.c: 577: }
 12612                           ;Dimmer_B1.c: 578: }
 12613                           ;Dimmer_B1.c: 579: }
 12614                           ;Dimmer_B1.c: 580: } else {
 12615  0D92  0008               	return
 12616  0D93                     l9135:	
 12617                           
 12618                           ;Dimmer_B1.c: 581: if (DimmerLights->TriggerAdj == 1) {
 12619  0D93  0020               	movlb	0	; select bank0
 12620  0D94  086F               	movf	_DimmerLights,w
 12621  0D95  3E0A               	addlw	10
 12622  0D96  0086               	movwf	6
 12623  0D97  3001               	movlw	1	; select bank2/3
 12624  0D98  0087               	movwf	7
 12625  0D99  1D81               	btfss	1,3
 12626  0D9A  0008               	return
 12627                           
 12628                           ;Dimmer_B1.c: 582: DimmerLights->TriggerAdj = 0;
 12629  0D9B  086F               	movf	_DimmerLights,w
 12630  0D9C  3E0A               	addlw	10
 12631  0D9D  0086               	movwf	6
 12632  0D9E  3001               	movlw	1	; select bank2/3
 12633  0D9F  0087               	movwf	7
 12634  0DA0  1181               	bcf	1,3
 12635  0DA1  0008               	return
 12636  0DA2                     __end_of_setDimmerLights_Main:	
 12637                           
 12638                           	psect	text84
 12639  0924                     __ptext84:	
 12640 ;; *************** function _setDimmerLights_Adj *****************
 12641 ;; Defined at:
 12642 ;;		line 700 in file "../src/Dimmer_B1.c"
 12643 ;; Parameters:    Size  Location     Type
 12644 ;;  lights          1    wreg     unsigned char 
 12645 ;;  status          1   70[BANK0 ] unsigned char 
 12646 ;; Auto vars:     Size  Location     Type
 12647 ;;  lights          1   72[BANK0 ] unsigned char 
 12648 ;; Return value:  Size  Location     Type
 12649 ;;		None               void
 12650 ;; Registers used:
 12651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12652 ;; Tracked objects:
 12653 ;;		On entry : 0/0
 12654 ;;		On exit  : 0/0
 12655 ;;		Unchanged: 0/0
 12656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12657 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12660 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12661 ;;Total ram usage:        3 bytes
 12662 ;; Hardware stack levels used:    1
 12663 ;; Hardware stack levels required when called:    7
 12664 ;; This function calls:
 12665 ;;		_setBuz
 12666 ;;		_setDimmerLights_Line
 12667 ;;		_setPercentValue
 12668 ;;		_setProductData
 12669 ;;		_setRF_DimmerLights
 12670 ;;		_setTxData
 12671 ;; This function is called by:
 12672 ;;		_setDimmerLights_Main
 12673 ;; This function uses a non-reentrant model
 12674 ;;
 12675                           
 12676                           
 12677                           ;psect for function _setDimmerLights_Adj
 12678  0924                     _setDimmerLights_Adj:	
 12679                           
 12680                           ;incstack = 0
 12681                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12682                           ;setDimmerLights_Adj@lights stored from wreg
 12683  0924  0020               	movlb	0	; select bank0
 12684  0925  00E8               	movwf	setDimmerLights_Adj@lights
 12685                           
 12686                           ;Dimmer_B1.c: 702: if (status == 1) {
 12687  0926  0866               	movf	setDimmerLights_Adj@status,w
 12688  0927  3A01               	xorlw	1
 12689  0928  1D03               	skipz
 12690  0929  293C               	goto	l8865
 12691                           
 12692                           ;Dimmer_B1.c: 703: DimmerLights->AdjSw = 1;
 12693  092A  0A6F               	incf	_DimmerLights,w
 12694  092B  0086               	movwf	6
 12695  092C  3001               	movlw	1	; select bank2/3
 12696  092D  0087               	movwf	7
 12697  092E  1701               	bsf	1,6
 12698                           
 12699                           ;Dimmer_B1.c: 704: DimmerLights->Signal = 1;
 12700  092F  0A6F               	incf	_DimmerLights,w
 12701  0930  0086               	movwf	6
 12702  0931  3001               	movlw	1	; select bank2/3
 12703  0932  0087               	movwf	7
 12704  0933  1681               	bsf	1,5
 12705                           
 12706                           ;Dimmer_B1.c: 705: setBuz(1, 100);
 12707  0934  3064               	movlw	100
 12708  0935  00A9               	movwf	setBuz@time
 12709  0936  3000               	movlw	0
 12710  0937  00AA               	movwf	setBuz@time+1
 12711  0938  3001               	movlw	1
 12712  0939  3189  217C         	fcall	_setBuz
 12713                           
 12714                           ;Dimmer_B1.c: 706: } else if (status == 0) {
 12715  093B  0008               	return
 12716  093C                     l8865:	
 12717  093C  0020               	movlb	0	; select bank0
 12718  093D  08E6               	movf	setDimmerLights_Adj@status,f
 12719  093E  1D03               	skipz
 12720  093F  0008               	return
 12721                           
 12722                           ;Dimmer_B1.c: 707: Dimmer.Load_Status = 0;
 12723  0940  0021               	movlb	1	; select bank1
 12724  0941  11C8               	bcf	_Dimmer^(0+128),3	;volatile
 12725                           
 12726                           ;Dimmer_B1.c: 708: setDimmerLights_Line(lights);
 12727  0942  0020               	movlb	0	; select bank0
 12728  0943  0868               	movf	setDimmerLights_Adj@lights,w
 12729  0944  3191  2113  3189   	fcall	_setDimmerLights_Line
 12730                           
 12731                           ;Dimmer_B1.c: 709: DimmerLights->AdjSw = 0;
 12732  0947  0020               	movlb	0	; select bank0
 12733  0948  0A6F               	incf	_DimmerLights,w
 12734  0949  0086               	movwf	6
 12735  094A  3001               	movlw	1	; select bank2/3
 12736  094B  0087               	movwf	7
 12737  094C  1301               	bcf	1,6
 12738                           
 12739                           ;Dimmer_B1.c: 710: DimmerLights->Signal = 0;
 12740  094D  0A6F               	incf	_DimmerLights,w
 12741  094E  0086               	movwf	6
 12742  094F  3001               	movlw	1	; select bank2/3
 12743  0950  0087               	movwf	7
 12744  0951  1281               	bcf	1,5
 12745                           
 12746                           ;Dimmer_B1.c: 712: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12747  0952  086F               	movf	_DimmerLights,w
 12748  0953  3E04               	addlw	4
 12749  0954  0086               	movwf	6
 12750  0955  3001               	movlw	1	; select bank2/3
 12751  0956  0087               	movwf	7
 12752  0957  0801               	movf	1,w
 12753  0958  00E7               	movwf	??_setDimmerLights_Adj
 12754  0959  086F               	movf	_DimmerLights,w
 12755  095A  3E06               	addlw	6
 12756  095B  0086               	movwf	6
 12757  095C  3001               	movlw	1	; select bank2/3
 12758  095D  0087               	movwf	7
 12759  095E  0867               	movf	??_setDimmerLights_Adj,w
 12760  095F  0081               	movwf	1
 12761                           
 12762                           ;Dimmer_B1.c: 713: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 12763  0960  086F               	movf	_DimmerLights,w
 12764  0961  3E04               	addlw	4
 12765  0962  0086               	movwf	6
 12766  0963  3001               	movlw	1	; select bank2/3
 12767  0964  0087               	movwf	7
 12768  0965  0801               	movf	1,w
 12769  0966  3196  2634  3189   	fcall	_setPercentValue
 12770  0969  0020               	movlb	0	; select bank0
 12771  096A  00E7               	movwf	??_setDimmerLights_Adj
 12772  096B  0867               	movf	??_setDimmerLights_Adj,w
 12773  096C  00DD               	movwf	setProductData@value
 12774  096D  0868               	movf	setDimmerLights_Adj@lights,w
 12775  096E  3E14               	addlw	20
 12776  096F  319E  26B0  3189   	fcall	_setProductData
 12777                           
 12778                           ;Dimmer_B1.c: 728: setRF_DimmerLights(lights, 1);
 12779  0972  0020               	movlb	0	; select bank0
 12780  0973  01E1               	clrf	setRF_DimmerLights@on
 12781  0974  0AE1               	incf	setRF_DimmerLights@on,f
 12782  0975  0868               	movf	setDimmerLights_Adj@lights,w
 12783  0976  3189  21D5  3189   	fcall	_setRF_DimmerLights
 12784                           
 12785                           ;Dimmer_B1.c: 729: setTxData();
 12786  0979  3185  25FD         	fcall	_setTxData
 12787  097B  0008               	return
 12788  097C                     __end_of_setDimmerLights_Adj:	
 12789                           
 12790                           	psect	text85
 12791  1113                     __ptext85:	
 12792 ;; *************** function _setDimmerLights_Line *****************
 12793 ;; Defined at:
 12794 ;;		line 734 in file "../src/Dimmer_B1.c"
 12795 ;; Parameters:    Size  Location     Type
 12796 ;;  lights          1    wreg     unsigned char 
 12797 ;; Auto vars:     Size  Location     Type
 12798 ;;  lights          1    0[BANK0 ] unsigned char 
 12799 ;; Return value:  Size  Location     Type
 12800 ;;		None               void
 12801 ;; Registers used:
 12802 ;;		wreg
 12803 ;; Tracked objects:
 12804 ;;		On entry : 0/0
 12805 ;;		On exit  : 0/0
 12806 ;;		Unchanged: 0/0
 12807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12811 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12812 ;;Total ram usage:        1 bytes
 12813 ;; Hardware stack levels used:    1
 12814 ;; Hardware stack levels required when called:    4
 12815 ;; This function calls:
 12816 ;;		Nothing
 12817 ;; This function is called by:
 12818 ;;		_setDimmerLights_Adj
 12819 ;; This function uses a non-reentrant model
 12820 ;;
 12821                           
 12822                           
 12823                           ;psect for function _setDimmerLights_Line
 12824  1113                     _setDimmerLights_Line:	
 12825                           
 12826                           ;incstack = 0
 12827                           ; Regs used in _setDimmerLights_Line: [wreg]
 12828                           ;setDimmerLights_Line@lights stored from wreg
 12829  1113  0020               	movlb	0	; select bank0
 12830  1114  00A0               	movwf	setDimmerLights_Line@lights
 12831                           
 12832                           ;Dimmer_B1.c: 735: Dimmer.LoadGO = 1;
 12833  1115  0021               	movlb	1	; select bank1
 12834  1116  1548               	bsf	_Dimmer^(0+128),2	;volatile
 12835                           
 12836                           ;Dimmer_B1.c: 737: DimmerLights1.Line = 0;
 12837  1117  0022               	movlb	2	; select bank2
 12838  1118  134B               	bcf	(_DimmerLights1^(0+256)+10),6
 12839                           
 12840                           ;Dimmer_B1.c: 740: DimmerLights2.Line = 0;
 12841  1119  135C               	bcf	(_DimmerLights2^(0+256)+10),6
 12842                           
 12843                           ;Dimmer_B1.c: 746: if (lights == 1) {
 12844  111A  0020               	movlb	0	; select bank0
 12845  111B  0820               	movf	setDimmerLights_Line@lights,w
 12846  111C  3A01               	xorlw	1
 12847  111D  1D03               	skipz
 12848  111E  2922               	goto	l8627
 12849                           
 12850                           ;Dimmer_B1.c: 747: DimmerLights1.Line = 1;
 12851  111F  0022               	movlb	2	; select bank2
 12852  1120  174B               	bsf	(_DimmerLights1^(0+256)+10),6
 12853                           
 12854                           ;Dimmer_B1.c: 748: }
 12855  1121  0008               	return
 12856  1122                     l8627:	
 12857                           
 12858                           ;Dimmer_B1.c: 751: else if (lights == 2) {
 12859  1122  0020               	movlb	0	; select bank0
 12860  1123  0820               	movf	setDimmerLights_Line@lights,w
 12861  1124  3A02               	xorlw	2
 12862  1125  1D03               	skipz
 12863  1126  0008               	return
 12864                           
 12865                           ;Dimmer_B1.c: 752: DimmerLights2.Line = 1;
 12866  1127  0022               	movlb	2	; select bank2
 12867  1128  175C               	bsf	(_DimmerLights2^(0+256)+10),6
 12868  1129  0008               	return
 12869  112A                     __end_of_setDimmerLights_Line:	
 12870                           
 12871                           	psect	text86
 12872  15AE                     __ptext86:	
 12873 ;; *************** function _setDimmerLights *****************
 12874 ;; Defined at:
 12875 ;;		line 658 in file "../src/Dimmer_B1.c"
 12876 ;; Parameters:    Size  Location     Type
 12877 ;;  lights          1    wreg     unsigned char 
 12878 ;;  status          1   70[BANK0 ] unsigned char 
 12879 ;; Auto vars:     Size  Location     Type
 12880 ;;  lights          1   72[BANK0 ] unsigned char 
 12881 ;; Return value:  Size  Location     Type
 12882 ;;		None               void
 12883 ;; Registers used:
 12884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12885 ;; Tracked objects:
 12886 ;;		On entry : 0/0
 12887 ;;		On exit  : 0/0
 12888 ;;		Unchanged: 0/0
 12889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12890 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12894 ;;Total ram usage:        3 bytes
 12895 ;; Hardware stack levels used:    1
 12896 ;; Hardware stack levels required when called:    7
 12897 ;; This function calls:
 12898 ;;		_setLED
 12899 ;;		_setPercentValue
 12900 ;;		_setProductData
 12901 ;;		_setRF_DimmerLights
 12902 ;;		_setTxData
 12903 ;; This function is called by:
 12904 ;;		_setDimmerLights_Main
 12905 ;; This function uses a non-reentrant model
 12906 ;;
 12907                           
 12908                           
 12909                           ;psect for function _setDimmerLights
 12910  15AE                     _setDimmerLights:	
 12911                           
 12912                           ;incstack = 0
 12913                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12914                           ;setDimmerLights@lights stored from wreg
 12915  15AE  0020               	movlb	0	; select bank0
 12916  15AF  00E8               	movwf	setDimmerLights@lights
 12917                           
 12918                           ;Dimmer_B1.c: 666: if (status == 1) {
 12919  15B0  0866               	movf	setDimmerLights@status,w
 12920  15B1  3A01               	xorlw	1
 12921  15B2  1D03               	skipz
 12922  15B3  2DD6               	goto	l8837
 12923                           
 12924                           ;Dimmer_B1.c: 667: DimmerLights->StatusFlag = 1;
 12925  15B4  0A6F               	incf	_DimmerLights,w
 12926  15B5  0086               	movwf	6
 12927  15B6  3001               	movlw	1	; select bank2/3
 12928  15B7  0087               	movwf	7
 12929  15B8  1501               	bsf	1,2
 12930                           
 12931                           ;Dimmer_B1.c: 673: setLED(lights, 0);
 12932  15B9  01A2               	clrf	setLED@command
 12933  15BA  0868               	movf	setDimmerLights@lights,w
 12934  15BB  3197  27B0  3195   	fcall	_setLED
 12935                           
 12936                           ;Dimmer_B1.c: 678: DimmerLights->DimmingValue = ((char)((100-70)*0.8));
 12937  15BE  3018               	movlw	24
 12938  15BF  0020               	movlb	0	; select bank0
 12939  15C0  00E7               	movwf	??_setDimmerLights
 12940  15C1  086F               	movf	_DimmerLights,w
 12941  15C2  3E04               	addlw	4
 12942  15C3  0086               	movwf	6
 12943  15C4  3001               	movlw	1	; select bank2/3
 12944  15C5  0087               	movwf	7
 12945  15C6  0867               	movf	??_setDimmerLights,w
 12946  15C7  0081               	movwf	1
 12947                           
 12948                           ;Dimmer_B1.c: 680: setProductData((20 + lights), setPercentValue(((char)((100-70)*0.8)))
      +                          );
 12949  15C8  3018               	movlw	24
 12950  15C9  3196  2634  3195   	fcall	_setPercentValue
 12951  15CC  0020               	movlb	0	; select bank0
 12952  15CD  00E7               	movwf	??_setDimmerLights
 12953  15CE  0867               	movf	??_setDimmerLights,w
 12954  15CF  00DD               	movwf	setProductData@value
 12955  15D0  0868               	movf	setDimmerLights@lights,w
 12956  15D1  3E14               	addlw	20
 12957  15D2  319E  26B0  3195   	fcall	_setProductData
 12958                           
 12959                           ;Dimmer_B1.c: 682: } else if (status == 0) {
 12960  15D5  2DE5               	goto	l8843
 12961  15D6                     l8837:	
 12962  15D6  0020               	movlb	0	; select bank0
 12963  15D7  08E6               	movf	setDimmerLights@status,f
 12964  15D8  1D03               	skipz
 12965  15D9  2DE5               	goto	l8843
 12966                           
 12967                           ;Dimmer_B1.c: 683: DimmerLights->StatusFlag = 0;
 12968  15DA  0A6F               	incf	_DimmerLights,w
 12969  15DB  0086               	movwf	6
 12970  15DC  3001               	movlw	1	; select bank2/3
 12971  15DD  0087               	movwf	7
 12972  15DE  1101               	bcf	1,2
 12973                           
 12974                           ;Dimmer_B1.c: 689: setLED(lights, 1);
 12975  15DF  01A2               	clrf	setLED@command
 12976  15E0  0AA2               	incf	setLED@command,f
 12977  15E1  0868               	movf	setDimmerLights@lights,w
 12978  15E2  3197  27B0  3195   	fcall	_setLED
 12979  15E5                     l8843:	
 12980                           
 12981                           ;Dimmer_B1.c: 691: }
 12982                           ;Dimmer_B1.c: 694: setRF_DimmerLights(lights, status);
 12983  15E5  0020               	movlb	0	; select bank0
 12984  15E6  0866               	movf	setDimmerLights@status,w
 12985  15E7  00E7               	movwf	??_setDimmerLights
 12986  15E8  0867               	movf	??_setDimmerLights,w
 12987  15E9  00E1               	movwf	setRF_DimmerLights@on
 12988  15EA  0868               	movf	setDimmerLights@lights,w
 12989  15EB  3189  21D5  3195   	fcall	_setRF_DimmerLights
 12990                           
 12991                           ;Dimmer_B1.c: 695: setTxData();
 12992  15EE  3185  25FD         	fcall	_setTxData
 12993  15F0  0008               	return
 12994  15F1                     __end_of_setDimmerLights:	
 12995                           
 12996                           	psect	text87
 12997  05FD                     __ptext87:	
 12998 ;; *************** function _setTxData *****************
 12999 ;; Defined at:
 13000 ;;		line 167 in file "../src/RF_Control_B1.c"
 13001 ;; Parameters:    Size  Location     Type
 13002 ;;		None
 13003 ;; Auto vars:     Size  Location     Type
 13004 ;;  i               1    0        unsigned char 
 13005 ;; Return value:  Size  Location     Type
 13006 ;;		None               void
 13007 ;; Registers used:
 13008 ;;		wreg, fsr1l, fsr1h
 13009 ;; Tracked objects:
 13010 ;;		On entry : 0/0
 13011 ;;		On exit  : 0/0
 13012 ;;		Unchanged: 0/0
 13013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13017 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;Total ram usage:        1 bytes
 13019 ;; Hardware stack levels used:    1
 13020 ;; Hardware stack levels required when called:    4
 13021 ;; This function calls:
 13022 ;;		Nothing
 13023 ;; This function is called by:
 13024 ;;		_setDimmerLights
 13025 ;;		_setDimmerLights_Adj
 13026 ;;		_getRxData
 13027 ;;		_setControl_Lights_Table
 13028 ;;		_setRFSW_Control
 13029 ;;		_setRFSW_AdjControl
 13030 ;; This function uses a non-reentrant model
 13031 ;;
 13032                           
 13033                           
 13034                           ;psect for function _setTxData
 13035  05FD                     _setTxData:	
 13036                           
 13037                           ;RF_Control_B1.c: 168: char i;
 13038                           ;RF_Control_B1.c: 169: if (RF1.Enable == 1) {
 13039                           
 13040                           ;incstack = 0
 13041                           ; Regs used in _setTxData: [wregfsr1]
 13042  05FD  0021               	movlb	1	; select bank1
 13043  05FE  1C20               	btfss	_RF1^(0+128),0
 13044  05FF  0008               	return
 13045                           
 13046                           ;RF_Control_B1.c: 171: if (RF1.TransceiveGO == 0) {
 13047  0600  1920               	btfsc	_RF1^(0+128),2
 13048  0601  0008               	return
 13049                           
 13050                           ;RF_Control_B1.c: 172: RF1.TransceiveGO = 1;
 13051  0602  1520               	bsf	_RF1^(0+128),2
 13052                           
 13053                           ;RF_Control_B1.c: 184: RF_Data[0] = 0x63;
 13054  0603  3063               	movlw	99
 13055  0604  0020               	movlb	0	; select bank0
 13056  0605  00A0               	movwf	??_setTxData
 13057  0606  0820               	movf	??_setTxData,w
 13058  0607  0022               	movlb	2	; select bank2
 13059  0608  00A0               	movwf	_RF_Data^(0+256)
 13060                           
 13061                           ;RF_Control_B1.c: 185: RF_Data[1] = 0x02;
 13062  0609  3002               	movlw	2
 13063  060A  0020               	movlb	0	; select bank0
 13064  060B  00A0               	movwf	??_setTxData
 13065  060C  0820               	movf	??_setTxData,w
 13066  060D  0022               	movlb	2	; select bank2
 13067  060E  00A1               	movwf	(_RF_Data^(0+256)+1)
 13068                           
 13069                           ;RF_Control_B1.c: 187: RF_Data[2] = product->Data[2];
 13070  060F  0020               	movlb	0	; select bank0
 13071  0610  086E               	movf	_product,w
 13072  0611  0086               	movwf	6
 13073  0612  3002               	movlw	2	; select bank4/5
 13074  0613  0087               	movwf	7
 13075  0614  3002               	movlw	2	; select bank4/5
 13076  0615  3F42               	moviw [2]fsr1
 13077  0616  0022               	movlb	2	; select bank2
 13078  0617  00A2               	movwf	(_RF_Data^(0+256)+2)
 13079                           
 13080                           ;RF_Control_B1.c: 188: RF_Data[3] = product->Data[3];
 13081  0618  0020               	movlb	0	; select bank0
 13082  0619  086E               	movf	_product,w
 13083  061A  0086               	movwf	6
 13084  061B  3002               	movlw	2	; select bank4/5
 13085  061C  0087               	movwf	7
 13086  061D  3002               	movlw	2	; select bank4/5
 13087  061E  3F43               	moviw [3]fsr1
 13088  061F  0022               	movlb	2	; select bank2
 13089  0620  00A3               	movwf	(_RF_Data^(0+256)+3)
 13090                           
 13091                           ;RF_Control_B1.c: 189: RF_Data[4] = product->Data[4];
 13092  0621  0020               	movlb	0	; select bank0
 13093  0622  086E               	movf	_product,w
 13094  0623  0086               	movwf	6
 13095  0624  3002               	movlw	2	; select bank4/5
 13096  0625  0087               	movwf	7
 13097  0626  3002               	movlw	2	; select bank4/5
 13098  0627  3F44               	moviw [4]fsr1
 13099  0628  0022               	movlb	2	; select bank2
 13100  0629  00A4               	movwf	(_RF_Data^(0+256)+4)
 13101                           
 13102                           ;RF_Control_B1.c: 190: RF_Data[5] = product->Data[5];
 13103  062A  0020               	movlb	0	; select bank0
 13104  062B  086E               	movf	_product,w
 13105  062C  0086               	movwf	6
 13106  062D  3002               	movlw	2	; select bank4/5
 13107  062E  0087               	movwf	7
 13108  062F  3002               	movlw	2	; select bank4/5
 13109  0630  3F45               	moviw [5]fsr1
 13110  0631  0022               	movlb	2	; select bank2
 13111  0632  00A5               	movwf	(_RF_Data^(0+256)+5)
 13112                           
 13113                           ;RF_Control_B1.c: 191: RF_Data[6] = product->Data[6];
 13114  0633  0020               	movlb	0	; select bank0
 13115  0634  086E               	movf	_product,w
 13116  0635  0086               	movwf	6
 13117  0636  3002               	movlw	2	; select bank4/5
 13118  0637  0087               	movwf	7
 13119  0638  3002               	movlw	2	; select bank4/5
 13120  0639  3F46               	moviw [6]fsr1
 13121  063A  0022               	movlb	2	; select bank2
 13122  063B  00A6               	movwf	(_RF_Data^(0+256)+6)
 13123                           
 13124                           ;RF_Control_B1.c: 192: RF_Data[7] = product->Data[7];
 13125  063C  0020               	movlb	0	; select bank0
 13126  063D  086E               	movf	_product,w
 13127  063E  0086               	movwf	6
 13128  063F  3002               	movlw	2	; select bank4/5
 13129  0640  0087               	movwf	7
 13130  0641  3002               	movlw	2	; select bank4/5
 13131  0642  3F47               	moviw [7]fsr1
 13132  0643  0022               	movlb	2	; select bank2
 13133  0644  00A7               	movwf	(_RF_Data^(0+256)+7)
 13134                           
 13135                           ;RF_Control_B1.c: 193: RF_Data[8] = product->Data[8];
 13136  0645  0020               	movlb	0	; select bank0
 13137  0646  086E               	movf	_product,w
 13138  0647  0086               	movwf	6
 13139  0648  3002               	movlw	2	; select bank4/5
 13140  0649  0087               	movwf	7
 13141  064A  3002               	movlw	2	; select bank4/5
 13142  064B  3F48               	moviw [8]fsr1
 13143  064C  0022               	movlb	2	; select bank2
 13144  064D  00A8               	movwf	(_RF_Data^(0+256)+8)
 13145                           
 13146                           ;RF_Control_B1.c: 194: RF_Data[9] = product->Data[9];
 13147  064E  0020               	movlb	0	; select bank0
 13148  064F  086E               	movf	_product,w
 13149  0650  0086               	movwf	6
 13150  0651  3002               	movlw	2	; select bank4/5
 13151  0652  0087               	movwf	7
 13152  0653  3002               	movlw	2	; select bank4/5
 13153  0654  3F49               	moviw [9]fsr1
 13154  0655  0022               	movlb	2	; select bank2
 13155  0656  00A9               	movwf	(_RF_Data^(0+256)+9)
 13156                           
 13157                           ;RF_Control_B1.c: 195: RF_Data[10] = product->Data[10];
 13158  0657  0020               	movlb	0	; select bank0
 13159  0658  086E               	movf	_product,w
 13160  0659  0086               	movwf	6
 13161  065A  3002               	movlw	2	; select bank4/5
 13162  065B  0087               	movwf	7
 13163  065C  3002               	movlw	2	; select bank4/5
 13164  065D  3F4A               	moviw [10]fsr1
 13165  065E  0022               	movlb	2	; select bank2
 13166  065F  00AA               	movwf	(_RF_Data^(0+256)+10)
 13167                           
 13168                           ;RF_Control_B1.c: 196: RF_Data[11] = product->Data[11];
 13169  0660  0020               	movlb	0	; select bank0
 13170  0661  086E               	movf	_product,w
 13171  0662  0086               	movwf	6
 13172  0663  3002               	movlw	2	; select bank4/5
 13173  0664  0087               	movwf	7
 13174  0665  3002               	movlw	2	; select bank4/5
 13175  0666  3F4B               	moviw [11]fsr1
 13176  0667  0022               	movlb	2	; select bank2
 13177  0668  00AB               	movwf	(_RF_Data^(0+256)+11)
 13178                           
 13179                           ;RF_Control_B1.c: 197: RF_Data[12] = product->Data[12];
 13180  0669  0020               	movlb	0	; select bank0
 13181  066A  086E               	movf	_product,w
 13182  066B  0086               	movwf	6
 13183  066C  3002               	movlw	2	; select bank4/5
 13184  066D  0087               	movwf	7
 13185  066E  3002               	movlw	2	; select bank4/5
 13186  066F  3F4C               	moviw [12]fsr1
 13187  0670  0022               	movlb	2	; select bank2
 13188  0671  00AC               	movwf	(_RF_Data^(0+256)+12)
 13189                           
 13190                           ;RF_Control_B1.c: 198: RF_Data[13] = product->Data[13];
 13191  0672  0020               	movlb	0	; select bank0
 13192  0673  086E               	movf	_product,w
 13193  0674  0086               	movwf	6
 13194  0675  3002               	movlw	2	; select bank4/5
 13195  0676  0087               	movwf	7
 13196  0677  3002               	movlw	2	; select bank4/5
 13197  0678  3F4D               	moviw [13]fsr1
 13198  0679  0022               	movlb	2	; select bank2
 13199  067A  00AD               	movwf	(_RF_Data^(0+256)+13)
 13200                           
 13201                           ;RF_Control_B1.c: 199: RF_Data[14] = product->Data[14];
 13202  067B  0020               	movlb	0	; select bank0
 13203  067C  086E               	movf	_product,w
 13204  067D  0086               	movwf	6
 13205  067E  3002               	movlw	2	; select bank4/5
 13206  067F  0087               	movwf	7
 13207  0680  3002               	movlw	2	; select bank4/5
 13208  0681  3F4E               	moviw [14]fsr1
 13209  0682  0022               	movlb	2	; select bank2
 13210  0683  00AE               	movwf	(_RF_Data^(0+256)+14)
 13211                           
 13212                           ;RF_Control_B1.c: 200: RF_Data[15] = product->Data[15];
 13213  0684  0020               	movlb	0	; select bank0
 13214  0685  086E               	movf	_product,w
 13215  0686  0086               	movwf	6
 13216  0687  3002               	movlw	2	; select bank4/5
 13217  0688  0087               	movwf	7
 13218  0689  3002               	movlw	2	; select bank4/5
 13219  068A  3F4F               	moviw [15]fsr1
 13220  068B  0022               	movlb	2	; select bank2
 13221  068C  00AF               	movwf	(_RF_Data^(0+256)+15)
 13222                           
 13223                           ;RF_Control_B1.c: 201: RF_Data[16] = product->Data[16];
 13224  068D  0020               	movlb	0	; select bank0
 13225  068E  086E               	movf	_product,w
 13226  068F  0086               	movwf	6
 13227  0690  3002               	movlw	2	; select bank4/5
 13228  0691  0087               	movwf	7
 13229  0692  3002               	movlw	2	; select bank4/5
 13230  0693  3F50               	moviw [16]fsr1
 13231  0694  0022               	movlb	2	; select bank2
 13232  0695  00B0               	movwf	(_RF_Data^(0+256)+16)
 13233                           
 13234                           ;RF_Control_B1.c: 202: RF_Data[17] = product->Data[17];
 13235  0696  0020               	movlb	0	; select bank0
 13236  0697  086E               	movf	_product,w
 13237  0698  0086               	movwf	6
 13238  0699  3002               	movlw	2	; select bank4/5
 13239  069A  0087               	movwf	7
 13240  069B  3002               	movlw	2	; select bank4/5
 13241  069C  3F51               	moviw [17]fsr1
 13242  069D  0022               	movlb	2	; select bank2
 13243  069E  00B1               	movwf	(_RF_Data^(0+256)+17)
 13244                           
 13245                           ;RF_Control_B1.c: 203: RF_Data[18] = product->Data[18];
 13246  069F  0020               	movlb	0	; select bank0
 13247  06A0  086E               	movf	_product,w
 13248  06A1  0086               	movwf	6
 13249  06A2  3002               	movlw	2	; select bank4/5
 13250  06A3  0087               	movwf	7
 13251  06A4  3002               	movlw	2	; select bank4/5
 13252  06A5  3F52               	moviw [18]fsr1
 13253  06A6  0022               	movlb	2	; select bank2
 13254  06A7  00B2               	movwf	(_RF_Data^(0+256)+18)
 13255                           
 13256                           ;RF_Control_B1.c: 204: RF_Data[19] = product->Data[19];
 13257  06A8  0020               	movlb	0	; select bank0
 13258  06A9  086E               	movf	_product,w
 13259  06AA  0086               	movwf	6
 13260  06AB  3002               	movlw	2	; select bank4/5
 13261  06AC  0087               	movwf	7
 13262  06AD  3002               	movlw	2	; select bank4/5
 13263  06AE  3F53               	moviw [19]fsr1
 13264  06AF  0022               	movlb	2	; select bank2
 13265  06B0  00B3               	movwf	(_RF_Data^(0+256)+19)
 13266                           
 13267                           ;RF_Control_B1.c: 205: RF_Data[20] = 210;
 13268  06B1  30D2               	movlw	210
 13269  06B2  0020               	movlb	0	; select bank0
 13270  06B3  00A0               	movwf	??_setTxData
 13271  06B4  0820               	movf	??_setTxData,w
 13272  06B5  0022               	movlb	2	; select bank2
 13273  06B6  00B4               	movwf	(_RF_Data^(0+256)+20)
 13274  06B7  0008               	return
 13275  06B8                     __end_of_setTxData:	
 13276                           
 13277                           	psect	text88
 13278  09D5                     __ptext88:	
 13279 ;; *************** function _setRF_DimmerLights *****************
 13280 ;; Defined at:
 13281 ;;		line 431 in file "../src/RF_Control_B1.c"
 13282 ;; Parameters:    Size  Location     Type
 13283 ;;  lights          1    wreg     unsigned char 
 13284 ;;  on              1   65[BANK0 ] unsigned char 
 13285 ;; Auto vars:     Size  Location     Type
 13286 ;;  lights          1   69[BANK0 ] unsigned char 
 13287 ;;  status          1   68[BANK0 ] unsigned char 
 13288 ;; Return value:  Size  Location     Type
 13289 ;;		None               void
 13290 ;; Registers used:
 13291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13292 ;; Tracked objects:
 13293 ;;		On entry : 0/0
 13294 ;;		On exit  : 0/0
 13295 ;;		Unchanged: 0/0
 13296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13297 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13301 ;;Total ram usage:        5 bytes
 13302 ;; Hardware stack levels used:    1
 13303 ;; Hardware stack levels required when called:    5
 13304 ;; This function calls:
 13305 ;;		_setProductData
 13306 ;; This function is called by:
 13307 ;;		_setDimmerLights
 13308 ;;		_setDimmerLights_Adj
 13309 ;;		_setRFSW_Control
 13310 ;; This function uses a non-reentrant model
 13311 ;;
 13312                           
 13313                           
 13314                           ;psect for function _setRF_DimmerLights
 13315  09D5                     _setRF_DimmerLights:	
 13316                           
 13317                           ;incstack = 0
 13318                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13319                           ;setRF_DimmerLights@lights stored from wreg
 13320  09D5  0020               	movlb	0	; select bank0
 13321  09D6  00E5               	movwf	setRF_DimmerLights@lights
 13322                           
 13323                           ;RF_Control_B1.c: 432: char status = 1;
 13324  09D7  01E4               	clrf	setRF_DimmerLights@status
 13325  09D8  0AE4               	incf	setRF_DimmerLights@status,f
 13326                           
 13327                           ;RF_Control_B1.c: 433: status <<= (lights - 1);
 13328  09D9  0865               	movf	setRF_DimmerLights@lights,w
 13329  09DA  3EFF               	addlw	-1
 13330  09DB  0A89               	incf	9,f
 13331  09DC  29DF               	goto	u8730
 13332  09DD                     u8735:	
 13333  09DD  1003               	clrc
 13334  09DE  0DE4               	rlf	setRF_DimmerLights@status,f
 13335  09DF                     u8730:	
 13336  09DF  3EFF               	addlw	-1
 13337  09E0  1D03               	skipz
 13338  09E1  29DD               	goto	u8735
 13339                           
 13340                           ;RF_Control_B1.c: 434: setProductData(11, lights);
 13341  09E2  0865               	movf	setRF_DimmerLights@lights,w
 13342  09E3  00E2               	movwf	??_setRF_DimmerLights
 13343  09E4  0862               	movf	??_setRF_DimmerLights,w
 13344  09E5  00DD               	movwf	setProductData@value
 13345  09E6  300B               	movlw	11
 13346  09E7  319E  26B0  3189   	fcall	_setProductData
 13347                           
 13348                           ;RF_Control_B1.c: 442: setProductData(9, product->Data[20 + lights]);
 13349  09EA  0020               	movlb	0	; select bank0
 13350  09EB  0865               	movf	setRF_DimmerLights@lights,w
 13351  09EC  3E14               	addlw	20
 13352  09ED  076E               	addwf	_product,w
 13353  09EE  00E2               	movwf	??_setRF_DimmerLights
 13354  09EF  0862               	movf	??_setRF_DimmerLights,w
 13355  09F0  0086               	movwf	6
 13356  09F1  3002               	movlw	2	; select bank4/5
 13357  09F2  0087               	movwf	7
 13358  09F3  0801               	movf	1,w
 13359  09F4  00E3               	movwf	??_setRF_DimmerLights+1
 13360  09F5  0863               	movf	??_setRF_DimmerLights+1,w
 13361  09F6  00DD               	movwf	setProductData@value
 13362  09F7  3009               	movlw	9
 13363  09F8  319E  26B0  3189   	fcall	_setProductData
 13364                           
 13365                           ;RF_Control_B1.c: 443: setProductData(17, product->Data[26 + lights]);
 13366  09FB  0020               	movlb	0	; select bank0
 13367  09FC  0865               	movf	setRF_DimmerLights@lights,w
 13368  09FD  3E1A               	addlw	26
 13369  09FE  076E               	addwf	_product,w
 13370  09FF  00E2               	movwf	??_setRF_DimmerLights
 13371  0A00  0862               	movf	??_setRF_DimmerLights,w
 13372  0A01  0086               	movwf	6
 13373  0A02  3002               	movlw	2	; select bank4/5
 13374  0A03  0087               	movwf	7
 13375  0A04  0801               	movf	1,w
 13376  0A05  00E3               	movwf	??_setRF_DimmerLights+1
 13377  0A06  0863               	movf	??_setRF_DimmerLights+1,w
 13378  0A07  00DD               	movwf	setProductData@value
 13379  0A08  3011               	movlw	17
 13380  0A09  319E  26B0  3189   	fcall	_setProductData
 13381                           
 13382                           ;RF_Control_B1.c: 444: if (on == 1) {
 13383  0A0C  0020               	movlb	0	; select bank0
 13384  0A0D  0861               	movf	setRF_DimmerLights@on,w
 13385  0A0E  3A01               	xorlw	1
 13386  0A0F  1D03               	skipz
 13387  0A10  2A1F               	goto	l8267
 13388                           
 13389                           ;RF_Control_B1.c: 445: setProductData(15, (product->Data[15] | status));
 13390  0A11  086E               	movf	_product,w
 13391  0A12  3E0F               	addlw	15
 13392  0A13  0086               	movwf	6
 13393  0A14  3002               	movlw	2	; select bank4/5
 13394  0A15  0087               	movwf	7
 13395  0A16  0801               	movf	1,w
 13396  0A17  0464               	iorwf	setRF_DimmerLights@status,w
 13397  0A18  00E2               	movwf	??_setRF_DimmerLights
 13398  0A19  0862               	movf	??_setRF_DimmerLights,w
 13399  0A1A  00DD               	movwf	setProductData@value
 13400  0A1B  300F               	movlw	15
 13401  0A1C  319E  26B0         	fcall	_setProductData
 13402                           
 13403                           ;RF_Control_B1.c: 446: } else {
 13404  0A1E  0008               	return
 13405  0A1F                     l8267:	
 13406                           
 13407                           ;RF_Control_B1.c: 447: setProductData(15, (product->Data[15]&(~status)));
 13408  0A1F  0020               	movlb	0	; select bank0
 13409  0A20  086E               	movf	_product,w
 13410  0A21  3E0F               	addlw	15
 13411  0A22  0086               	movwf	6
 13412  0A23  3002               	movlw	2	; select bank4/5
 13413  0A24  0087               	movwf	7
 13414  0A25  0964               	comf	setRF_DimmerLights@status,w
 13415  0A26  0501               	andwf	1,w
 13416  0A27  00E2               	movwf	??_setRF_DimmerLights
 13417  0A28  0862               	movf	??_setRF_DimmerLights,w
 13418  0A29  00DD               	movwf	setProductData@value
 13419  0A2A  300F               	movlw	15
 13420  0A2B  319E  26B0         	fcall	_setProductData
 13421  0A2D  0008               	return
 13422  0A2E                     __end_of_setRF_DimmerLights:	
 13423                           
 13424                           	psect	text89
 13425  1634                     __ptext89:	
 13426 ;; *************** function _setPercentValue *****************
 13427 ;; Defined at:
 13428 ;;		line 1062 in file "../src/Dimmer_B1.c"
 13429 ;; Parameters:    Size  Location     Type
 13430 ;;  value           1    wreg     unsigned char 
 13431 ;; Auto vars:     Size  Location     Type
 13432 ;;  value           1   57[BANK0 ] unsigned char 
 13433 ;;  i               3   58[BANK0 ] float 
 13434 ;; Return value:  Size  Location     Type
 13435 ;;                  1    wreg      unsigned char 
 13436 ;; Registers used:
 13437 ;;		wreg, status,2, status,0, pclath, cstack
 13438 ;; Tracked objects:
 13439 ;;		On entry : 0/0
 13440 ;;		On exit  : 0/0
 13441 ;;		Unchanged: 0/0
 13442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13444 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13446 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13447 ;;Total ram usage:        4 bytes
 13448 ;; Hardware stack levels used:    1
 13449 ;; Hardware stack levels required when called:    6
 13450 ;; This function calls:
 13451 ;;		___awtoft
 13452 ;;		___ftdiv
 13453 ;;		___fttol
 13454 ;; This function is called by:
 13455 ;;		_setDimmerLights
 13456 ;;		_setDimmerLights_Adj
 13457 ;;		_Flash_Memory_Initialization
 13458 ;; This function uses a non-reentrant model
 13459 ;;
 13460                           
 13461                           
 13462                           ;psect for function _setPercentValue
 13463  1634                     _setPercentValue:	
 13464                           
 13465                           ;incstack = 0
 13466                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13467                           ;setPercentValue@value stored from wreg
 13468  1634  0020               	movlb	0	; select bank0
 13469  1635  00D9               	movwf	setPercentValue@value
 13470                           
 13471                           ;Dimmer_B1.c: 1064: float i = ((char)((100-15)*0.8)) - ((char)((100-70)*0.8));
 13472  1636  3000               	movlw	0
 13473  1637  00DA               	movwf	setPercentValue@i
 13474  1638  3030               	movlw	48
 13475  1639  00DB               	movwf	setPercentValue@i+1
 13476  163A  3042               	movlw	66
 13477  163B  00DC               	movwf	setPercentValue@i+2
 13478                           
 13479                           ;Dimmer_B1.c: 1065: i /= 100;
 13480  163C  3000               	movlw	0
 13481  163D  00AE               	movwf	___ftdiv@f2
 13482  163E  30C8               	movlw	200
 13483  163F  00AF               	movwf	___ftdiv@f2+1
 13484  1640  3042               	movlw	66
 13485  1641  00B0               	movwf	___ftdiv@f2+2
 13486  1642  085A               	movf	setPercentValue@i,w
 13487  1643  00B1               	movwf	___ftdiv@f1
 13488  1644  085B               	movf	setPercentValue@i+1,w
 13489  1645  00B2               	movwf	___ftdiv@f1+1
 13490  1646  085C               	movf	setPercentValue@i+2,w
 13491  1647  00B3               	movwf	___ftdiv@f1+2
 13492  1648  318E  26A7  3196   	fcall	___ftdiv
 13493  164B  0020               	movlb	0	; select bank0
 13494  164C  082E               	movf	?___ftdiv,w
 13495  164D  00DA               	movwf	setPercentValue@i
 13496  164E  082F               	movf	?___ftdiv+1,w
 13497  164F  00DB               	movwf	setPercentValue@i+1
 13498  1650  0830               	movf	?___ftdiv+2,w
 13499  1651  00DC               	movwf	setPercentValue@i+2
 13500                           
 13501                           ;Dimmer_B1.c: 1066: return (100 - (char) ((value - ((char)((100-70)*0.8))) / i));
 13502  1652  0859               	movf	setPercentValue@value,w
 13503  1653  3EE8               	addlw	232
 13504  1654  00A8               	movwf	___awtoft@c
 13505  1655  30FF               	movlw	255
 13506  1656  1803               	skipnc
 13507  1657  3000               	movlw	0
 13508  1658  00A9               	movwf	___awtoft@c+1
 13509  1659  3192  2265  3196   	fcall	___awtoft
 13510  165C  0020               	movlb	0	; select bank0
 13511  165D  0828               	movf	?___awtoft,w
 13512  165E  00B1               	movwf	___ftdiv@f1
 13513  165F  0829               	movf	?___awtoft+1,w
 13514  1660  00B2               	movwf	___ftdiv@f1+1
 13515  1661  082A               	movf	?___awtoft+2,w
 13516  1662  00B3               	movwf	___ftdiv@f1+2
 13517  1663  085A               	movf	setPercentValue@i,w
 13518  1664  00AE               	movwf	___ftdiv@f2
 13519  1665  085B               	movf	setPercentValue@i+1,w
 13520  1666  00AF               	movwf	___ftdiv@f2+1
 13521  1667  085C               	movf	setPercentValue@i+2,w
 13522  1668  00B0               	movwf	___ftdiv@f2+2
 13523  1669  318E  26A7  3196   	fcall	___ftdiv
 13524  166C  0020               	movlb	0	; select bank0
 13525  166D  082E               	movf	?___ftdiv,w
 13526  166E  00CB               	movwf	___fttol@f1
 13527  166F  082F               	movf	?___ftdiv+1,w
 13528  1670  00CC               	movwf	___fttol@f1+1
 13529  1671  0830               	movf	?___ftdiv+2,w
 13530  1672  00CD               	movwf	___fttol@f1+2
 13531  1673  3187  276C         	fcall	___fttol
 13532  1675  0020               	movlb	0	; select bank0
 13533  1676  034B               	decf	?___fttol,w
 13534  1677  3AFF               	xorlw	255
 13535  1678  3E64               	addlw	100
 13536  1679  0008               	return
 13537  167A                     __end_of_setPercentValue:	
 13538                           
 13539                           	psect	text90
 13540  076C                     __ptext90:	
 13541 ;; *************** function ___fttol *****************
 13542 ;; Defined at:
 13543 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13544 ;; Parameters:    Size  Location     Type
 13545 ;;  f1              3   43[BANK0 ] float 
 13546 ;; Auto vars:     Size  Location     Type
 13547 ;;  lval            4   52[BANK0 ] unsigned long 
 13548 ;;  exp1            1   56[BANK0 ] unsigned char 
 13549 ;;  sign1           1   51[BANK0 ] unsigned char 
 13550 ;; Return value:  Size  Location     Type
 13551 ;;                  4   43[BANK0 ] long 
 13552 ;; Registers used:
 13553 ;;		wreg, status,2, status,0
 13554 ;; Tracked objects:
 13555 ;;		On entry : 0/0
 13556 ;;		On exit  : 0/0
 13557 ;;		Unchanged: 0/0
 13558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13559 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13562 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13563 ;;Total ram usage:       14 bytes
 13564 ;; Hardware stack levels used:    1
 13565 ;; Hardware stack levels required when called:    4
 13566 ;; This function calls:
 13567 ;;		Nothing
 13568 ;; This function is called by:
 13569 ;;		_getPercentValue
 13570 ;;		_setPercentValue
 13571 ;; This function uses a non-reentrant model
 13572 ;;
 13573                           
 13574                           
 13575                           ;psect for function ___fttol
 13576  076C                     ___fttol:	
 13577                           
 13578                           ;incstack = 0
 13579                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13580  076C  0020               	movlb	0	; select bank0
 13581  076D  084B               	movf	___fttol@f1,w
 13582  076E  00CF               	movwf	??___fttol
 13583  076F  084C               	movf	___fttol@f1+1,w
 13584  0770  00D0               	movwf	??___fttol+1
 13585  0771  084D               	movf	___fttol@f1+2,w
 13586  0772  00D1               	movwf	??___fttol+2
 13587  0773  1003               	clrc
 13588  0774  0D50               	rlf	??___fttol+1,w
 13589  0775  0D51               	rlf	??___fttol+2,w
 13590  0776  00D2               	movwf	??___fttol+3
 13591  0777  0852               	movf	??___fttol+3,w
 13592  0778  00D8               	movwf	___fttol@exp1
 13593  0779  08D8               	movf	___fttol@exp1,f
 13594  077A  1D03               	skipz
 13595  077B  2F85               	goto	l7985
 13596  077C  3000               	movlw	0
 13597  077D  00CE               	movwf	?___fttol+3
 13598  077E  3000               	movlw	0
 13599  077F  00CD               	movwf	?___fttol+2
 13600  0780  3000               	movlw	0
 13601  0781  00CC               	movwf	?___fttol+1
 13602  0782  3000               	movlw	0
 13603  0783  00CB               	movwf	?___fttol
 13604  0784  0008               	return
 13605  0785                     l7985:	
 13606  0785  084B               	movf	___fttol@f1,w
 13607  0786  00CF               	movwf	??___fttol
 13608  0787  084C               	movf	___fttol@f1+1,w
 13609  0788  00D0               	movwf	??___fttol+1
 13610  0789  084D               	movf	___fttol@f1+2,w
 13611  078A  00D1               	movwf	??___fttol+2
 13612  078B  3017               	movlw	23
 13613  078C                     u8235:	
 13614  078C  36D1               	lsrf	??___fttol+2,f
 13615  078D  0CD0               	rrf	??___fttol+1,f
 13616  078E  0CCF               	rrf	??___fttol,f
 13617  078F  0B89               	decfsz	9,f
 13618  0790  2F8C               	goto	u8235
 13619  0791  084F               	movf	??___fttol,w
 13620  0792  00D2               	movwf	??___fttol+3
 13621  0793  0852               	movf	??___fttol+3,w
 13622  0794  00D3               	movwf	___fttol@sign1
 13623  0795  17CC               	bsf	___fttol@f1+1,7
 13624  0796  30FF               	movlw	255
 13625  0797  05CB               	andwf	___fttol@f1,f
 13626  0798  30FF               	movlw	255
 13627  0799  05CC               	andwf	___fttol@f1+1,f
 13628  079A  3000               	movlw	0
 13629  079B  05CD               	andwf	___fttol@f1+2,f
 13630  079C  084B               	movf	___fttol@f1,w
 13631  079D  00D4               	movwf	___fttol@lval
 13632  079E  084C               	movf	___fttol@f1+1,w
 13633  079F  00D5               	movwf	___fttol@lval+1
 13634  07A0  084D               	movf	___fttol@f1+2,w
 13635  07A1  00D6               	movwf	___fttol@lval+2
 13636  07A2  01D7               	clrf	___fttol@lval+3
 13637  07A3  308E               	movlw	142
 13638  07A4  02D8               	subwf	___fttol@exp1,f
 13639  07A5  1FD8               	btfss	___fttol@exp1,7
 13640  07A6  2FC3               	goto	l8005
 13641  07A7  0858               	movf	___fttol@exp1,w
 13642  07A8  3A80               	xorlw	128
 13643  07A9  3E8F               	addlw	143
 13644  07AA  1803               	skipnc
 13645  07AB  2FB5               	goto	l8003
 13646  07AC  3000               	movlw	0
 13647  07AD  00CE               	movwf	?___fttol+3
 13648  07AE  3000               	movlw	0
 13649  07AF  00CD               	movwf	?___fttol+2
 13650  07B0  3000               	movlw	0
 13651  07B1  00CC               	movwf	?___fttol+1
 13652  07B2  3000               	movlw	0
 13653  07B3  00CB               	movwf	?___fttol
 13654  07B4  0008               	return
 13655  07B5                     l8003:	
 13656  07B5  3001               	movlw	1
 13657  07B6                     u8265:	
 13658  07B6  36D7               	lsrf	___fttol@lval+3,f
 13659  07B7  0CD6               	rrf	___fttol@lval+2,f
 13660  07B8  0CD5               	rrf	___fttol@lval+1,f
 13661  07B9  0CD4               	rrf	___fttol@lval,f
 13662  07BA  0B89               	decfsz	9,f
 13663  07BB  2FB6               	goto	u8265
 13664  07BC  3001               	movlw	1
 13665  07BD  00CF               	movwf	??___fttol
 13666  07BE  084F               	movf	??___fttol,w
 13667  07BF  07D8               	addwf	___fttol@exp1,f
 13668  07C0  1903               	btfsc	3,2
 13669  07C1  2FDC               	goto	l8015
 13670  07C2  2FB5               	goto	l8003
 13671  07C3                     l8005:	
 13672  07C3  3018               	movlw	24
 13673  07C4  0258               	subwf	___fttol@exp1,w
 13674  07C5  1C03               	skipc
 13675  07C6  2FD9               	goto	l8013
 13676  07C7  3000               	movlw	0
 13677  07C8  00CE               	movwf	?___fttol+3
 13678  07C9  3000               	movlw	0
 13679  07CA  00CD               	movwf	?___fttol+2
 13680  07CB  3000               	movlw	0
 13681  07CC  00CC               	movwf	?___fttol+1
 13682  07CD  3000               	movlw	0
 13683  07CE  00CB               	movwf	?___fttol
 13684  07CF  0008               	return
 13685  07D0                     l8011:	
 13686  07D0  3001               	movlw	1
 13687  07D1                     u8295:	
 13688  07D1  35D4               	lslf	___fttol@lval,f
 13689  07D2  0DD5               	rlf	___fttol@lval+1,f
 13690  07D3  0DD6               	rlf	___fttol@lval+2,f
 13691  07D4  0DD7               	rlf	___fttol@lval+3,f
 13692  07D5  0B89               	decfsz	9,f
 13693  07D6  2FD1               	goto	u8295
 13694  07D7  3001               	movlw	1
 13695  07D8  02D8               	subwf	___fttol@exp1,f
 13696  07D9                     l8013:	
 13697  07D9  08D8               	movf	___fttol@exp1,f
 13698  07DA  1D03               	skipz
 13699  07DB  2FD0               	goto	l8011
 13700  07DC                     l8015:	
 13701  07DC  0853               	movf	___fttol@sign1,w
 13702  07DD  1903               	btfsc	3,2
 13703  07DE  2FEA               	goto	l8019
 13704  07DF  09D4               	comf	___fttol@lval,f
 13705  07E0  09D5               	comf	___fttol@lval+1,f
 13706  07E1  09D6               	comf	___fttol@lval+2,f
 13707  07E2  09D7               	comf	___fttol@lval+3,f
 13708  07E3  0AD4               	incf	___fttol@lval,f
 13709  07E4  1903               	skipnz
 13710  07E5  0AD5               	incf	___fttol@lval+1,f
 13711  07E6  1903               	skipnz
 13712  07E7  0AD6               	incf	___fttol@lval+2,f
 13713  07E8  1903               	skipnz
 13714  07E9  0AD7               	incf	___fttol@lval+3,f
 13715  07EA                     l8019:	
 13716  07EA  0857               	movf	___fttol@lval+3,w
 13717  07EB  00CE               	movwf	?___fttol+3
 13718  07EC  0856               	movf	___fttol@lval+2,w
 13719  07ED  00CD               	movwf	?___fttol+2
 13720  07EE  0855               	movf	___fttol@lval+1,w
 13721  07EF  00CC               	movwf	?___fttol+1
 13722  07F0  0854               	movf	___fttol@lval,w
 13723  07F1  00CB               	movwf	?___fttol
 13724  07F2  0008               	return
 13725  07F3                     __end_of___fttol:	
 13726                           
 13727                           	psect	text91
 13728  0EA7                     __ptext91:	
 13729 ;; *************** function ___ftdiv *****************
 13730 ;; Defined at:
 13731 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13732 ;; Parameters:    Size  Location     Type
 13733 ;;  f2              3   14[BANK0 ] float 
 13734 ;;  f1              3   17[BANK0 ] float 
 13735 ;; Auto vars:     Size  Location     Type
 13736 ;;  f3              3   25[BANK0 ] float 
 13737 ;;  sign            1   29[BANK0 ] unsigned char 
 13738 ;;  exp             1   28[BANK0 ] unsigned char 
 13739 ;;  cntr            1   24[BANK0 ] unsigned char 
 13740 ;; Return value:  Size  Location     Type
 13741 ;;                  3   14[BANK0 ] float 
 13742 ;; Registers used:
 13743 ;;		wreg, status,2, status,0, pclath, cstack
 13744 ;; Tracked objects:
 13745 ;;		On entry : 0/0
 13746 ;;		On exit  : 0/0
 13747 ;;		Unchanged: 0/0
 13748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13749 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13750 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13751 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13752 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13753 ;;Total ram usage:       16 bytes
 13754 ;; Hardware stack levels used:    1
 13755 ;; Hardware stack levels required when called:    5
 13756 ;; This function calls:
 13757 ;;		___ftpack
 13758 ;; This function is called by:
 13759 ;;		_getPercentValue
 13760 ;;		_setPercentValue
 13761 ;; This function uses a non-reentrant model
 13762 ;;
 13763                           
 13764                           
 13765                           ;psect for function ___ftdiv
 13766  0EA7                     ___ftdiv:	
 13767                           
 13768                           ;incstack = 0
 13769                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13770  0EA7  0020               	movlb	0	; select bank0
 13771  0EA8  0831               	movf	___ftdiv@f1,w
 13772  0EA9  00B4               	movwf	??___ftdiv
 13773  0EAA  0832               	movf	___ftdiv@f1+1,w
 13774  0EAB  00B5               	movwf	??___ftdiv+1
 13775  0EAC  0833               	movf	___ftdiv@f1+2,w
 13776  0EAD  00B6               	movwf	??___ftdiv+2
 13777  0EAE  1003               	clrc
 13778  0EAF  0D35               	rlf	??___ftdiv+1,w
 13779  0EB0  0D36               	rlf	??___ftdiv+2,w
 13780  0EB1  00B7               	movwf	??___ftdiv+3
 13781  0EB2  0837               	movf	??___ftdiv+3,w
 13782  0EB3  00BC               	movwf	___ftdiv@exp
 13783  0EB4  08BC               	movf	___ftdiv@exp,f
 13784  0EB5  1D03               	skipz
 13785  0EB6  2EBE               	goto	l7893
 13786  0EB7  3000               	movlw	0
 13787  0EB8  00AE               	movwf	?___ftdiv
 13788  0EB9  3000               	movlw	0
 13789  0EBA  00AF               	movwf	?___ftdiv+1
 13790  0EBB  3000               	movlw	0
 13791  0EBC  00B0               	movwf	?___ftdiv+2
 13792  0EBD  0008               	return
 13793  0EBE                     l7893:	
 13794  0EBE  082E               	movf	___ftdiv@f2,w
 13795  0EBF  00B4               	movwf	??___ftdiv
 13796  0EC0  082F               	movf	___ftdiv@f2+1,w
 13797  0EC1  00B5               	movwf	??___ftdiv+1
 13798  0EC2  0830               	movf	___ftdiv@f2+2,w
 13799  0EC3  00B6               	movwf	??___ftdiv+2
 13800  0EC4  1003               	clrc
 13801  0EC5  0D35               	rlf	??___ftdiv+1,w
 13802  0EC6  0D36               	rlf	??___ftdiv+2,w
 13803  0EC7  00B7               	movwf	??___ftdiv+3
 13804  0EC8  0837               	movf	??___ftdiv+3,w
 13805  0EC9  00BD               	movwf	___ftdiv@sign
 13806  0ECA  08BD               	movf	___ftdiv@sign,f
 13807  0ECB  1D03               	skipz
 13808  0ECC  2ED4               	goto	l7899
 13809  0ECD  3000               	movlw	0
 13810  0ECE  00AE               	movwf	?___ftdiv
 13811  0ECF  3000               	movlw	0
 13812  0ED0  00AF               	movwf	?___ftdiv+1
 13813  0ED1  3000               	movlw	0
 13814  0ED2  00B0               	movwf	?___ftdiv+2
 13815  0ED3  0008               	return
 13816  0ED4                     l7899:	
 13817  0ED4  3000               	movlw	0
 13818  0ED5  00B9               	movwf	___ftdiv@f3
 13819  0ED6  3000               	movlw	0
 13820  0ED7  00BA               	movwf	___ftdiv@f3+1
 13821  0ED8  3000               	movlw	0
 13822  0ED9  00BB               	movwf	___ftdiv@f3+2
 13823  0EDA  3089               	movlw	137
 13824  0EDB  073D               	addwf	___ftdiv@sign,w
 13825  0EDC  00B4               	movwf	??___ftdiv
 13826  0EDD  0834               	movf	??___ftdiv,w
 13827  0EDE  02BC               	subwf	___ftdiv@exp,f
 13828  0EDF  0831               	movf	___ftdiv@f1,w
 13829  0EE0  00B4               	movwf	??___ftdiv
 13830  0EE1  0832               	movf	___ftdiv@f1+1,w
 13831  0EE2  00B5               	movwf	??___ftdiv+1
 13832  0EE3  0833               	movf	___ftdiv@f1+2,w
 13833  0EE4  00B6               	movwf	??___ftdiv+2
 13834  0EE5  3010               	movlw	16
 13835  0EE6                     u8045:	
 13836  0EE6  36B6               	lsrf	??___ftdiv+2,f
 13837  0EE7  0CB5               	rrf	??___ftdiv+1,f
 13838  0EE8  0CB4               	rrf	??___ftdiv,f
 13839  0EE9  0B89               	decfsz	9,f
 13840  0EEA  2EE6               	goto	u8045
 13841  0EEB  0834               	movf	??___ftdiv,w
 13842  0EEC  00B7               	movwf	??___ftdiv+3
 13843  0EED  0837               	movf	??___ftdiv+3,w
 13844  0EEE  00BD               	movwf	___ftdiv@sign
 13845  0EEF  082E               	movf	___ftdiv@f2,w
 13846  0EF0  00B4               	movwf	??___ftdiv
 13847  0EF1  082F               	movf	___ftdiv@f2+1,w
 13848  0EF2  00B5               	movwf	??___ftdiv+1
 13849  0EF3  0830               	movf	___ftdiv@f2+2,w
 13850  0EF4  00B6               	movwf	??___ftdiv+2
 13851  0EF5  3010               	movlw	16
 13852  0EF6                     u8055:	
 13853  0EF6  36B6               	lsrf	??___ftdiv+2,f
 13854  0EF7  0CB5               	rrf	??___ftdiv+1,f
 13855  0EF8  0CB4               	rrf	??___ftdiv,f
 13856  0EF9  0B89               	decfsz	9,f
 13857  0EFA  2EF6               	goto	u8055
 13858  0EFB  0834               	movf	??___ftdiv,w
 13859  0EFC  00B7               	movwf	??___ftdiv+3
 13860  0EFD  0837               	movf	??___ftdiv+3,w
 13861  0EFE  06BD               	xorwf	___ftdiv@sign,f
 13862  0EFF  3080               	movlw	128
 13863  0F00  00B4               	movwf	??___ftdiv
 13864  0F01  0834               	movf	??___ftdiv,w
 13865  0F02  05BD               	andwf	___ftdiv@sign,f
 13866  0F03  17B2               	bsf	___ftdiv@f1+1,7
 13867  0F04  30FF               	movlw	255
 13868  0F05  05B1               	andwf	___ftdiv@f1,f
 13869  0F06  30FF               	movlw	255
 13870  0F07  05B2               	andwf	___ftdiv@f1+1,f
 13871  0F08  3000               	movlw	0
 13872  0F09  05B3               	andwf	___ftdiv@f1+2,f
 13873  0F0A  17AF               	bsf	___ftdiv@f2+1,7
 13874  0F0B  30FF               	movlw	255
 13875  0F0C  05AE               	andwf	___ftdiv@f2,f
 13876  0F0D  30FF               	movlw	255
 13877  0F0E  05AF               	andwf	___ftdiv@f2+1,f
 13878  0F0F  3000               	movlw	0
 13879  0F10  05B0               	andwf	___ftdiv@f2+2,f
 13880  0F11  3018               	movlw	24
 13881  0F12  00B4               	movwf	??___ftdiv
 13882  0F13  0834               	movf	??___ftdiv,w
 13883  0F14  00B8               	movwf	___ftdiv@cntr
 13884  0F15                     l7913:	
 13885  0F15  3001               	movlw	1
 13886  0F16                     u8065:	
 13887  0F16  35B9               	lslf	___ftdiv@f3,f
 13888  0F17  0DBA               	rlf	___ftdiv@f3+1,f
 13889  0F18  0DBB               	rlf	___ftdiv@f3+2,f
 13890  0F19  0B89               	decfsz	9,f
 13891  0F1A  2F16               	goto	u8065
 13892  0F1B  0830               	movf	___ftdiv@f2+2,w
 13893  0F1C  0233               	subwf	___ftdiv@f1+2,w
 13894  0F1D  1D03               	skipz
 13895  0F1E  2F25               	goto	u8075
 13896  0F1F  082F               	movf	___ftdiv@f2+1,w
 13897  0F20  0232               	subwf	___ftdiv@f1+1,w
 13898  0F21  1D03               	skipz
 13899  0F22  2F25               	goto	u8075
 13900  0F23  082E               	movf	___ftdiv@f2,w
 13901  0F24  0231               	subwf	___ftdiv@f1,w
 13902  0F25                     u8075:	
 13903  0F25  1C03               	skipc
 13904  0F26  2F2E               	goto	l7921
 13905  0F27  082E               	movf	___ftdiv@f2,w
 13906  0F28  02B1               	subwf	___ftdiv@f1,f
 13907  0F29  082F               	movf	___ftdiv@f2+1,w
 13908  0F2A  3BB2               	subwfb	___ftdiv@f1+1,f
 13909  0F2B  0830               	movf	___ftdiv@f2+2,w
 13910  0F2C  3BB3               	subwfb	___ftdiv@f1+2,f
 13911  0F2D  1439               	bsf	___ftdiv@f3,0
 13912  0F2E                     l7921:	
 13913  0F2E  3001               	movlw	1
 13914  0F2F                     u8085:	
 13915  0F2F  35B1               	lslf	___ftdiv@f1,f
 13916  0F30  0DB2               	rlf	___ftdiv@f1+1,f
 13917  0F31  0DB3               	rlf	___ftdiv@f1+2,f
 13918  0F32  0B89               	decfsz	9,f
 13919  0F33  2F2F               	goto	u8085
 13920  0F34  3001               	movlw	1
 13921  0F35  02B8               	subwf	___ftdiv@cntr,f
 13922  0F36  1D03               	btfss	3,2
 13923  0F37  2F15               	goto	l7913
 13924  0F38  0839               	movf	___ftdiv@f3,w
 13925  0F39  00A0               	movwf	___ftpack@arg
 13926  0F3A  083A               	movf	___ftdiv@f3+1,w
 13927  0F3B  00A1               	movwf	___ftpack@arg+1
 13928  0F3C  083B               	movf	___ftdiv@f3+2,w
 13929  0F3D  00A2               	movwf	___ftpack@arg+2
 13930  0F3E  083C               	movf	___ftdiv@exp,w
 13931  0F3F  00B4               	movwf	??___ftdiv
 13932  0F40  0834               	movf	??___ftdiv,w
 13933  0F41  00A3               	movwf	___ftpack@exp
 13934  0F42  083D               	movf	___ftdiv@sign,w
 13935  0F43  00B5               	movwf	??___ftdiv+1
 13936  0F44  0835               	movf	??___ftdiv+1,w
 13937  0F45  00A4               	movwf	___ftpack@sign
 13938  0F46  318B  239E         	fcall	___ftpack
 13939  0F48  0020               	movlb	0	; select bank0
 13940  0F49  0820               	movf	?___ftpack,w
 13941  0F4A  00AE               	movwf	?___ftdiv
 13942  0F4B  0821               	movf	?___ftpack+1,w
 13943  0F4C  00AF               	movwf	?___ftdiv+1
 13944  0F4D  0822               	movf	?___ftpack+2,w
 13945  0F4E  00B0               	movwf	?___ftdiv+2
 13946  0F4F  0008               	return
 13947  0F50                     __end_of___ftdiv:	
 13948                           
 13949                           	psect	text92
 13950  1265                     __ptext92:	
 13951 ;; *************** function ___awtoft *****************
 13952 ;; Defined at:
 13953 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13954 ;; Parameters:    Size  Location     Type
 13955 ;;  c               2    8[BANK0 ] int 
 13956 ;; Auto vars:     Size  Location     Type
 13957 ;;  sign            1   13[BANK0 ] unsigned char 
 13958 ;; Return value:  Size  Location     Type
 13959 ;;                  3    8[BANK0 ] float 
 13960 ;; Registers used:
 13961 ;;		wreg, status,2, status,0, pclath, cstack
 13962 ;; Tracked objects:
 13963 ;;		On entry : 0/0
 13964 ;;		On exit  : 0/0
 13965 ;;		Unchanged: 0/0
 13966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13967 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13969 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13970 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13971 ;;Total ram usage:        6 bytes
 13972 ;; Hardware stack levels used:    1
 13973 ;; Hardware stack levels required when called:    5
 13974 ;; This function calls:
 13975 ;;		___ftpack
 13976 ;; This function is called by:
 13977 ;;		_getPercentValue
 13978 ;;		_setPercentValue
 13979 ;; This function uses a non-reentrant model
 13980 ;;
 13981                           
 13982                           
 13983                           ;psect for function ___awtoft
 13984  1265                     ___awtoft:	
 13985                           
 13986                           ;incstack = 0
 13987                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13988  1265  0020               	movlb	0	; select bank0
 13989  1266  01AD               	clrf	___awtoft@sign
 13990  1267  1FA9               	btfss	___awtoft@c+1,7
 13991  1268  2A70               	goto	l7811
 13992  1269  09A8               	comf	___awtoft@c,f
 13993  126A  09A9               	comf	___awtoft@c+1,f
 13994  126B  0AA8               	incf	___awtoft@c,f
 13995  126C  1903               	skipnz
 13996  126D  0AA9               	incf	___awtoft@c+1,f
 13997  126E  01AD               	clrf	___awtoft@sign
 13998  126F  0AAD               	incf	___awtoft@sign,f
 13999  1270                     l7811:	
 14000  1270  0828               	movf	___awtoft@c,w
 14001  1271  00A0               	movwf	___ftpack@arg
 14002  1272  0829               	movf	___awtoft@c+1,w
 14003  1273  00A1               	movwf	___ftpack@arg+1
 14004  1274  01A2               	clrf	___ftpack@arg+2
 14005  1275  308E               	movlw	142
 14006  1276  00AB               	movwf	??___awtoft
 14007  1277  082B               	movf	??___awtoft,w
 14008  1278  00A3               	movwf	___ftpack@exp
 14009  1279  082D               	movf	___awtoft@sign,w
 14010  127A  00AC               	movwf	??___awtoft+1
 14011  127B  082C               	movf	??___awtoft+1,w
 14012  127C  00A4               	movwf	___ftpack@sign
 14013  127D  318B  239E         	fcall	___ftpack
 14014  127F  0020               	movlb	0	; select bank0
 14015  1280  0820               	movf	?___ftpack,w
 14016  1281  00A8               	movwf	?___awtoft
 14017  1282  0821               	movf	?___ftpack+1,w
 14018  1283  00A9               	movwf	?___awtoft+1
 14019  1284  0822               	movf	?___ftpack+2,w
 14020  1285  00AA               	movwf	?___awtoft+2
 14021  1286  0008               	return
 14022  1287                     __end_of___awtoft:	
 14023                           
 14024                           	psect	text93
 14025  0B9E                     __ptext93:	
 14026 ;; *************** function ___ftpack *****************
 14027 ;; Defined at:
 14028 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14029 ;; Parameters:    Size  Location     Type
 14030 ;;  arg             3    0[BANK0 ] unsigned um
 14031 ;;  exp             1    3[BANK0 ] unsigned char 
 14032 ;;  sign            1    4[BANK0 ] unsigned char 
 14033 ;; Auto vars:     Size  Location     Type
 14034 ;;		None
 14035 ;; Return value:  Size  Location     Type
 14036 ;;                  3    0[BANK0 ] float 
 14037 ;; Registers used:
 14038 ;;		wreg, status,2, status,0
 14039 ;; Tracked objects:
 14040 ;;		On entry : 0/0
 14041 ;;		On exit  : 0/0
 14042 ;;		Unchanged: 0/0
 14043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14044 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14046 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14047 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14048 ;;Total ram usage:        8 bytes
 14049 ;; Hardware stack levels used:    1
 14050 ;; Hardware stack levels required when called:    4
 14051 ;; This function calls:
 14052 ;;		Nothing
 14053 ;; This function is called by:
 14054 ;;		___awtoft
 14055 ;;		___ftadd
 14056 ;;		___ftdiv
 14057 ;;		___ftmul
 14058 ;; This function uses a non-reentrant model
 14059 ;;
 14060                           
 14061                           
 14062                           ;psect for function ___ftpack
 14063  0B9E                     ___ftpack:	
 14064                           
 14065                           ;incstack = 0
 14066                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14067  0B9E  0020               	movlb	0	; select bank0
 14068  0B9F  0823               	movf	___ftpack@exp,w
 14069  0BA0  1903               	btfsc	3,2
 14070  0BA1  2BA7               	goto	l7761
 14071  0BA2  0822               	movf	___ftpack@arg+2,w
 14072  0BA3  0421               	iorwf	___ftpack@arg+1,w
 14073  0BA4  0420               	iorwf	___ftpack@arg,w
 14074  0BA5  1D03               	skipz
 14075  0BA6  2BB8               	goto	l7767
 14076  0BA7                     l7761:	
 14077  0BA7  3000               	movlw	0
 14078  0BA8  00A0               	movwf	?___ftpack
 14079  0BA9  3000               	movlw	0
 14080  0BAA  00A1               	movwf	?___ftpack+1
 14081  0BAB  3000               	movlw	0
 14082  0BAC  00A2               	movwf	?___ftpack+2
 14083  0BAD  0008               	return
 14084  0BAE                     l7765:	
 14085  0BAE  3001               	movlw	1
 14086  0BAF  00A5               	movwf	??___ftpack
 14087  0BB0  0825               	movf	??___ftpack,w
 14088  0BB1  07A3               	addwf	___ftpack@exp,f
 14089  0BB2  3001               	movlw	1
 14090  0BB3                     u7675:	
 14091  0BB3  36A2               	lsrf	___ftpack@arg+2,f
 14092  0BB4  0CA1               	rrf	___ftpack@arg+1,f
 14093  0BB5  0CA0               	rrf	___ftpack@arg,f
 14094  0BB6  0B89               	decfsz	9,f
 14095  0BB7  2BB3               	goto	u7675
 14096  0BB8                     l7767:	
 14097  0BB8  30FE               	movlw	254
 14098  0BB9  0522               	andwf	___ftpack@arg+2,w
 14099  0BBA  1903               	btfsc	3,2
 14100  0BBB  2BD1               	goto	l2815
 14101  0BBC  2BAE               	goto	l7765
 14102  0BBD                     l7769:	
 14103  0BBD  3001               	movlw	1
 14104  0BBE  00A5               	movwf	??___ftpack
 14105  0BBF  0825               	movf	??___ftpack,w
 14106  0BC0  07A3               	addwf	___ftpack@exp,f
 14107  0BC1  3001               	movlw	1
 14108  0BC2  07A0               	addwf	___ftpack@arg,f
 14109  0BC3  3000               	movlw	0
 14110  0BC4  1803               	skipnc
 14111  0BC5  3001               	movlw	1
 14112  0BC6  07A1               	addwf	___ftpack@arg+1,f
 14113  0BC7  3000               	movlw	0
 14114  0BC8  1803               	skipnc
 14115  0BC9  3001               	movlw	1
 14116  0BCA  07A2               	addwf	___ftpack@arg+2,f
 14117  0BCB  3001               	movlw	1
 14118  0BCC                     u7695:	
 14119  0BCC  36A2               	lsrf	___ftpack@arg+2,f
 14120  0BCD  0CA1               	rrf	___ftpack@arg+1,f
 14121  0BCE  0CA0               	rrf	___ftpack@arg,f
 14122  0BCF  0B89               	decfsz	9,f
 14123  0BD0  2BCC               	goto	u7695
 14124  0BD1                     l2815:	
 14125  0BD1  30FF               	movlw	255
 14126  0BD2  0522               	andwf	___ftpack@arg+2,w
 14127  0BD3  1903               	btfsc	3,2
 14128  0BD4  2BDE               	goto	l7777
 14129  0BD5  2BBD               	goto	l7769
 14130  0BD6                     l7775:	
 14131  0BD6  3001               	movlw	1
 14132  0BD7  02A3               	subwf	___ftpack@exp,f
 14133  0BD8  3001               	movlw	1
 14134  0BD9                     u7715:	
 14135  0BD9  35A0               	lslf	___ftpack@arg,f
 14136  0BDA  0DA1               	rlf	___ftpack@arg+1,f
 14137  0BDB  0DA2               	rlf	___ftpack@arg+2,f
 14138  0BDC  0B89               	decfsz	9,f
 14139  0BDD  2BD9               	goto	u7715
 14140  0BDE                     l7777:	
 14141  0BDE  1FA1               	btfss	___ftpack@arg+1,7
 14142  0BDF  2BD6               	goto	l7775
 14143  0BE0  1823               	btfsc	___ftpack@exp,0
 14144  0BE1  2BE8               	goto	l2821
 14145  0BE2  30FF               	movlw	255
 14146  0BE3  05A0               	andwf	___ftpack@arg,f
 14147  0BE4  307F               	movlw	127
 14148  0BE5  05A1               	andwf	___ftpack@arg+1,f
 14149  0BE6  30FF               	movlw	255
 14150  0BE7  05A2               	andwf	___ftpack@arg+2,f
 14151  0BE8                     l2821:	
 14152  0BE8  1003               	clrc
 14153  0BE9  0CA3               	rrf	___ftpack@exp,f
 14154  0BEA  0823               	movf	___ftpack@exp,w
 14155  0BEB  00A5               	movwf	??___ftpack
 14156  0BEC  01A6               	clrf	??___ftpack+1
 14157  0BED  01A7               	clrf	??___ftpack+2
 14158  0BEE  3010               	movlw	16
 14159  0BEF                     u7745:	
 14160  0BEF  35A5               	lslf	??___ftpack,f
 14161  0BF0  0DA6               	rlf	??___ftpack+1,f
 14162  0BF1  0DA7               	rlf	??___ftpack+2,f
 14163  0BF2  0B89               	decfsz	9,f
 14164  0BF3  2BEF               	goto	u7745
 14165  0BF4  0825               	movf	??___ftpack,w
 14166  0BF5  04A0               	iorwf	___ftpack@arg,f
 14167  0BF6  0826               	movf	??___ftpack+1,w
 14168  0BF7  04A1               	iorwf	___ftpack@arg+1,f
 14169  0BF8  0827               	movf	??___ftpack+2,w
 14170  0BF9  04A2               	iorwf	___ftpack@arg+2,f
 14171  0BFA  0824               	movf	___ftpack@sign,w
 14172  0BFB  1903               	btfsc	3,2
 14173  0BFC  0008               	return
 14174  0BFD  17A2               	bsf	___ftpack@arg+2,7
 14175  0BFE  0008               	return
 14176  0BFF                     __end_of___ftpack:	
 14177                           
 14178                           	psect	text94
 14179  17B0                     __ptext94:	
 14180 ;; *************** function _setLED *****************
 14181 ;; Defined at:
 14182 ;;		line 76 in file "../src/LED_B1.c"
 14183 ;; Parameters:    Size  Location     Type
 14184 ;;  led             1    wreg     unsigned char 
 14185 ;;  command         1    2[BANK0 ] unsigned char 
 14186 ;; Auto vars:     Size  Location     Type
 14187 ;;  led             1    3[BANK0 ] unsigned char 
 14188 ;; Return value:  Size  Location     Type
 14189 ;;		None               void
 14190 ;; Registers used:
 14191 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14192 ;; Tracked objects:
 14193 ;;		On entry : 0/0
 14194 ;;		On exit  : 0/0
 14195 ;;		Unchanged: 0/0
 14196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14197 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14201 ;;Total ram usage:        2 bytes
 14202 ;; Hardware stack levels used:    1
 14203 ;; Hardware stack levels required when called:    5
 14204 ;; This function calls:
 14205 ;;		_LedPointSelect
 14206 ;; This function is called by:
 14207 ;;		_setDimmerLights
 14208 ;;		_setLED_Initialization
 14209 ;;		_Exception_Main
 14210 ;;		_setSw_Initialization
 14211 ;; This function uses a non-reentrant model
 14212 ;;
 14213                           
 14214                           
 14215                           ;psect for function _setLED
 14216  17B0                     _setLED:	
 14217                           
 14218                           ;incstack = 0
 14219                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14220                           ;setLED@led stored from wreg
 14221  17B0  0020               	movlb	0	; select bank0
 14222  17B1  00A3               	movwf	setLED@led
 14223                           
 14224                           ;LED_B1.c: 77: LedPointSelect(led);
 14225  17B2  0823               	movf	setLED@led,w
 14226  17B3  3191  2174  3197   	fcall	_LedPointSelect
 14227                           
 14228                           ;LED_B1.c: 78: if (command == 0) {
 14229  17B6  0020               	movlb	0	; select bank0
 14230  17B7  08A2               	movf	setLED@command,f
 14231  17B8  1D03               	skipz
 14232  17B9  2FC7               	goto	l8579
 14233                           
 14234                           ;LED_B1.c: 80: if (led == 1) {
 14235  17BA  0823               	movf	setLED@led,w
 14236  17BB  3A01               	xorlw	1
 14237  17BC  1D03               	skipz
 14238  17BD  2FBF               	goto	l8571
 14239                           
 14240                           ;LED_B1.c: 84: RA3 = 1;
 14241  17BE  158C               	bsf	12,3	;volatile
 14242  17BF                     l8571:	
 14243                           
 14244                           ;LED_B1.c: 86: }
 14245                           ;LED_B1.c: 89: if (led == 2) {
 14246  17BF  0823               	movf	setLED@led,w
 14247  17C0  3A02               	xorlw	2
 14248  17C1  1903               	btfsc	3,2
 14249                           
 14250                           ;LED_B1.c: 93: RC7 = 1;
 14251  17C2  178E               	bsf	14,7	;volatile
 14252                           
 14253                           ;LED_B1.c: 95: }
 14254                           ;LED_B1.c: 107: if (led == 99) {
 14255  17C3  0823               	movf	setLED@led,w
 14256  17C4  3A63               	xorlw	99
 14257  17C5  1903               	btfsc	3,2
 14258                           
 14259                           ;LED_B1.c: 111: RB5 = 1;
 14260  17C6  168D               	bsf	13,5	;volatile
 14261  17C7                     l8579:	
 14262                           
 14263                           ;LED_B1.c: 113: }
 14264                           ;LED_B1.c: 115: }
 14265                           ;LED_B1.c: 116: if (command == 1) {
 14266  17C7  0822               	movf	setLED@command,w
 14267  17C8  3A01               	xorlw	1
 14268  17C9  1D03               	skipz
 14269  17CA  2FD8               	goto	l8593
 14270                           
 14271                           ;LED_B1.c: 118: if (led == 1) {
 14272  17CB  0823               	movf	setLED@led,w
 14273  17CC  3A01               	xorlw	1
 14274  17CD  1D03               	skipz
 14275  17CE  2FD0               	goto	l8585
 14276                           
 14277                           ;LED_B1.c: 122: RA3 = 0;
 14278  17CF  118C               	bcf	12,3	;volatile
 14279  17D0                     l8585:	
 14280                           
 14281                           ;LED_B1.c: 124: }
 14282                           ;LED_B1.c: 127: if (led == 2) {
 14283  17D0  0823               	movf	setLED@led,w
 14284  17D1  3A02               	xorlw	2
 14285  17D2  1903               	btfsc	3,2
 14286                           
 14287                           ;LED_B1.c: 131: RC7 = 0;
 14288  17D3  138E               	bcf	14,7	;volatile
 14289                           
 14290                           ;LED_B1.c: 133: }
 14291                           ;LED_B1.c: 145: if (led == 99) {
 14292  17D4  0823               	movf	setLED@led,w
 14293  17D5  3A63               	xorlw	99
 14294  17D6  1903               	btfsc	3,2
 14295                           
 14296                           ;LED_B1.c: 149: RB5 = 0;
 14297  17D7  128D               	bcf	13,5	;volatile
 14298  17D8                     l8593:	
 14299                           
 14300                           ;LED_B1.c: 151: }
 14301                           ;LED_B1.c: 153: }
 14302                           ;LED_B1.c: 154: if (command == 10) {
 14303  17D8  0822               	movf	setLED@command,w
 14304  17D9  3A0A               	xorlw	10
 14305  17DA  1D03               	skipz
 14306  17DB  2FF6               	goto	l8609
 14307                           
 14308                           ;LED_B1.c: 155: LED->GO = 0;
 14309  17DC  0878               	movf	_LED,w
 14310  17DD  0086               	movwf	6
 14311  17DE  3001               	movlw	1	; select bank2/3
 14312  17DF  0087               	movwf	7
 14313  17E0  1081               	bcf	1,1
 14314                           
 14315                           ;LED_B1.c: 156: LED->Time = 0;
 14316  17E1  0A78               	incf	_LED,w
 14317  17E2  0086               	movwf	6
 14318  17E3  3001               	movlw	1	; select bank2/3
 14319  17E4  0087               	movwf	7
 14320  17E5  3000               	movlw	0
 14321  17E6  3FC0               	movwi [0]fsr1
 14322  17E7  3FC1               	movwi [1]fsr1
 14323                           
 14324                           ;LED_B1.c: 158: if (led == 1) {
 14325  17E8  0823               	movf	setLED@led,w
 14326  17E9  3A01               	xorlw	1
 14327  17EA  1D03               	skipz
 14328  17EB  2FEE               	goto	l8601
 14329                           
 14330                           ;LED_B1.c: 162: RA3 = 1;
 14331  17EC  158C               	bsf	12,3	;volatile
 14332                           
 14333                           ;LED_B1.c: 164: }
 14334  17ED  2FF2               	goto	l8605
 14335  17EE                     l8601:	
 14336                           
 14337                           ;LED_B1.c: 167: else if (led == 2) {
 14338  17EE  0823               	movf	setLED@led,w
 14339  17EF  3A02               	xorlw	2
 14340  17F0  1903               	btfsc	3,2
 14341                           
 14342                           ;LED_B1.c: 171: RC7 = 1;
 14343  17F1  178E               	bsf	14,7	;volatile
 14344  17F2                     l8605:	
 14345                           
 14346                           ;LED_B1.c: 173: }
 14347                           ;LED_B1.c: 185: if (led == 99) {
 14348  17F2  0823               	movf	setLED@led,w
 14349  17F3  3A63               	xorlw	99
 14350  17F4  1903               	btfsc	3,2
 14351                           
 14352                           ;LED_B1.c: 189: RB5 = 1;
 14353  17F5  168D               	bsf	13,5	;volatile
 14354  17F6                     l8609:	
 14355                           
 14356                           ;LED_B1.c: 191: }
 14357                           ;LED_B1.c: 193: }
 14358                           ;LED_B1.c: 194: if (command == 11) {
 14359  17F6  0822               	movf	setLED@command,w
 14360  17F7  3A0B               	xorlw	11
 14361  17F8  1D03               	skipz
 14362  17F9  0008               	return
 14363                           
 14364                           ;LED_B1.c: 195: LED->GO = 1;
 14365  17FA  0878               	movf	_LED,w
 14366  17FB  0086               	movwf	6
 14367  17FC  3001               	movlw	1	; select bank2/3
 14368  17FD  0087               	movwf	7
 14369  17FE  1481               	bsf	1,1
 14370  17FF  0008               	return
 14371  1800                     __end_of_setLED:	
 14372                           
 14373                           	psect	text95
 14374  1174                     __ptext95:	
 14375 ;; *************** function _LedPointSelect *****************
 14376 ;; Defined at:
 14377 ;;		line 7 in file "../src/LED_B1.c"
 14378 ;; Parameters:    Size  Location     Type
 14379 ;;  led             1    wreg     unsigned char 
 14380 ;; Auto vars:     Size  Location     Type
 14381 ;;  led             1    1[BANK0 ] unsigned char 
 14382 ;; Return value:  Size  Location     Type
 14383 ;;		None               void
 14384 ;; Registers used:
 14385 ;;		wreg
 14386 ;; Tracked objects:
 14387 ;;		On entry : 0/0
 14388 ;;		On exit  : 0/0
 14389 ;;		Unchanged: 0/0
 14390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14394 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14395 ;;Total ram usage:        2 bytes
 14396 ;; Hardware stack levels used:    1
 14397 ;; Hardware stack levels required when called:    4
 14398 ;; This function calls:
 14399 ;;		Nothing
 14400 ;; This function is called by:
 14401 ;;		_setLED_Initialization
 14402 ;;		_setLED
 14403 ;;		_setLED_Main
 14404 ;; This function uses a non-reentrant model
 14405 ;;
 14406                           
 14407                           
 14408                           ;psect for function _LedPointSelect
 14409  1174                     _LedPointSelect:	
 14410                           
 14411                           ;incstack = 0
 14412                           ; Regs used in _LedPointSelect: [wreg]
 14413                           ;LedPointSelect@led stored from wreg
 14414  1174  0020               	movlb	0	; select bank0
 14415  1175  00A1               	movwf	LedPointSelect@led
 14416                           
 14417                           ;LED_B1.c: 9: if (led == 1) {
 14418  1176  0821               	movf	LedPointSelect@led,w
 14419  1177  3A01               	xorlw	1
 14420  1178  1D03               	skipz
 14421  1179  297E               	goto	l1017
 14422                           
 14423                           ;LED_B1.c: 10: LED = &VarLED1;
 14424  117A  3067               	movlw	_VarLED1& (0+255)
 14425  117B  00A0               	movwf	??_LedPointSelect
 14426  117C  0820               	movf	??_LedPointSelect,w
 14427  117D  00F8               	movwf	_LED
 14428  117E                     l1017:	
 14429                           
 14430                           ;LED_B1.c: 11: }
 14431                           ;LED_B1.c: 14: if (led == 2) {
 14432  117E  0821               	movf	LedPointSelect@led,w
 14433  117F  3A02               	xorlw	2
 14434  1180  1D03               	skipz
 14435  1181  2986               	goto	l1018
 14436                           
 14437                           ;LED_B1.c: 15: LED = &VarLED2;
 14438  1182  306B               	movlw	_VarLED2& (0+255)
 14439  1183  00A0               	movwf	??_LedPointSelect
 14440  1184  0820               	movf	??_LedPointSelect,w
 14441  1185  00F8               	movwf	_LED
 14442  1186                     l1018:	
 14443                           
 14444                           ;LED_B1.c: 16: }
 14445                           ;LED_B1.c: 24: if (led == 99) {
 14446  1186  0821               	movf	LedPointSelect@led,w
 14447  1187  3A63               	xorlw	99
 14448  1188  1D03               	skipz
 14449  1189  0008               	return
 14450                           
 14451                           ;LED_B1.c: 25: LED = &VarErrLED;
 14452  118A  3063               	movlw	_VarErrLED& (0+255)
 14453  118B  00A0               	movwf	??_LedPointSelect
 14454  118C  0820               	movf	??_LedPointSelect,w
 14455  118D  00F8               	movwf	_LED
 14456  118E  0008               	return
 14457  118F                     __end_of_LedPointSelect:	
 14458                           
 14459                           	psect	text96
 14460  1F8C                     __ptext96:	
 14461 ;; *************** function _getMain_LightsStatus *****************
 14462 ;; Defined at:
 14463 ;;		line 375 in file "../src/Main_B1.c"
 14464 ;; Parameters:    Size  Location     Type
 14465 ;;		None
 14466 ;; Auto vars:     Size  Location     Type
 14467 ;;  status          1    0[BANK0 ] unsigned char 
 14468 ;; Return value:  Size  Location     Type
 14469 ;;                  1    wreg      unsigned char 
 14470 ;; Registers used:
 14471 ;;		wreg, status,2, status,0
 14472 ;; Tracked objects:
 14473 ;;		On entry : 0/0
 14474 ;;		On exit  : 0/0
 14475 ;;		Unchanged: 0/0
 14476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14480 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14481 ;;Total ram usage:        1 bytes
 14482 ;; Hardware stack levels used:    1
 14483 ;; Hardware stack levels required when called:    4
 14484 ;; This function calls:
 14485 ;;		Nothing
 14486 ;; This function is called by:
 14487 ;;		_setDimmerLights_Main
 14488 ;;		_Flash_Memory_Main
 14489 ;;		_Exception_Main
 14490 ;; This function uses a non-reentrant model
 14491 ;;
 14492                           
 14493                           
 14494                           ;psect for function _getMain_LightsStatus
 14495  1F8C                     _getMain_LightsStatus:	
 14496                           
 14497                           ;Main_B1.c: 376: char status = 0;
 14498                           
 14499                           ;incstack = 0
 14500                           ; Regs used in _getMain_LightsStatus: [wreg+status,2+status,0]
 14501  1F8C  0020               	movlb	0	; select bank0
 14502  1F8D  01A0               	clrf	getMain_LightsStatus@status
 14503                           
 14504                           ;Main_B1.c: 395: status = DimmerLights1.Status == 1 ? 1 : 0;
 14505  1F8E  3000               	movlw	0
 14506  1F8F  0022               	movlb	2	; select bank2
 14507  1F90  18C3               	btfsc	(_DimmerLights1^(0+256)+2),1
 14508  1F91  3001               	movlw	1
 14509  1F92  0020               	movlb	0	; select bank0
 14510  1F93  00A0               	movwf	getMain_LightsStatus@status
 14511                           
 14512                           ;Main_B1.c: 396: if (status == 0) {
 14513  1F94  08A0               	movf	getMain_LightsStatus@status,f
 14514  1F95  1D03               	skipz
 14515  1F96  2F9D               	goto	l8855
 14516                           
 14517                           ;Main_B1.c: 397: status = DimmerLights2.Status == 1 ? 1 : 0;
 14518  1F97  3000               	movlw	0
 14519  1F98  0022               	movlb	2	; select bank2
 14520  1F99  18D4               	btfsc	(_DimmerLights2^(0+256)+2),1
 14521  1F9A  3001               	movlw	1
 14522  1F9B  0020               	movlb	0	; select bank0
 14523  1F9C  00A0               	movwf	getMain_LightsStatus@status
 14524  1F9D                     l8855:	
 14525                           
 14526                           ;Main_B1.c: 398: }
 14527                           ;Main_B1.c: 422: return status;
 14528  1F9D  0820               	movf	getMain_LightsStatus@status,w
 14529  1F9E  0008               	return
 14530  1F9F                     __end_of_getMain_LightsStatus:	
 14531                           
 14532                           	psect	text97
 14533  133F                     __ptext97:	
 14534 ;; *************** function _getDimmerLights_Allow_Condition *****************
 14535 ;; Defined at:
 14536 ;;		line 614 in file "../src/Dimmer_B1.c"
 14537 ;; Parameters:    Size  Location     Type
 14538 ;;  lights          1    wreg     unsigned char 
 14539 ;; Auto vars:     Size  Location     Type
 14540 ;;  lights          1    3[BANK0 ] unsigned char 
 14541 ;;  allow           1    4[BANK0 ] unsigned char 
 14542 ;; Return value:  Size  Location     Type
 14543 ;;                  1    wreg      unsigned char 
 14544 ;; Registers used:
 14545 ;;		wreg, status,2, status,0
 14546 ;; Tracked objects:
 14547 ;;		On entry : 0/0
 14548 ;;		On exit  : 0/0
 14549 ;;		Unchanged: 0/0
 14550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14552 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14554 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14555 ;;Total ram usage:        5 bytes
 14556 ;; Hardware stack levels used:    1
 14557 ;; Hardware stack levels required when called:    4
 14558 ;; This function calls:
 14559 ;;		Nothing
 14560 ;; This function is called by:
 14561 ;;		_setDimmerLights_Main
 14562 ;; This function uses a non-reentrant model
 14563 ;;
 14564                           
 14565                           
 14566                           ;psect for function _getDimmerLights_Allow_Condition
 14567  133F                     _getDimmerLights_Allow_Condition:	
 14568                           
 14569                           ;incstack = 0
 14570                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0]
 14571                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 14572  133F  0020               	movlb	0	; select bank0
 14573  1340  00A3               	movwf	getDimmerLights_Allow_Condition@lights
 14574                           
 14575                           ;Dimmer_B1.c: 615: char allow = 0;
 14576  1341  01A4               	clrf	getDimmerLights_Allow_Condition@allow
 14577                           
 14578                           ;Dimmer_B1.c: 627: if (allow == 0) {
 14579  1342  08A4               	movf	getDimmerLights_Allow_Condition@allow,f
 14580  1343  1D03               	skipz
 14581  1344  2B65               	goto	l8825
 14582                           
 14583                           ;Dimmer_B1.c: 628: if (lights == 1) {
 14584  1345  0823               	movf	getDimmerLights_Allow_Condition@lights,w
 14585  1346  3A01               	xorlw	1
 14586  1347  1D03               	skipz
 14587  1348  2B54               	goto	l8815
 14588                           
 14589                           ;Dimmer_B1.c: 629: allow = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1
      +                           : 0;
 14590  1349  01A1               	clrf	_getDimmerLights_Allow_Condition$2156
 14591  134A  0AA1               	incf	_getDimmerLights_Allow_Condition$2156,f
 14592  134B  0022               	movlb	2	; select bank2
 14593  134C  1DDC               	btfss	(_DimmerLights2^(0+256)+10),3
 14594  134D  1B53               	btfsc	(_DimmerLights2^(0+256)+1),6
 14595  134E  2B51               	goto	l8813
 14596  134F  0020               	movlb	0	; select bank0
 14597  1350  01A1               	clrf	_getDimmerLights_Allow_Condition$2156
 14598  1351                     l8813:	
 14599  1351  0020               	movlb	0	; select bank0
 14600  1352  0821               	movf	_getDimmerLights_Allow_Condition$2156,w
 14601  1353  2B62               	goto	L7
 14602  1354                     l8815:	
 14603                           ;Dimmer_B1.c: 630: } else if (lights == 2) {
 14604                           
 14605  1354  0823               	movf	getDimmerLights_Allow_Condition@lights,w
 14606  1355  3A02               	xorlw	2
 14607  1356  1D03               	skipz
 14608  1357  2B65               	goto	l8825
 14609                           
 14610                           ;Dimmer_B1.c: 631: allow = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1
      +                           : 0;
 14611  1358  01A2               	clrf	_getDimmerLights_Allow_Condition$2157
 14612  1359  0AA2               	incf	_getDimmerLights_Allow_Condition$2157,f
 14613  135A  0022               	movlb	2	; select bank2
 14614  135B  1DCB               	btfss	(_DimmerLights1^(0+256)+10),3
 14615  135C  1B42               	btfsc	(_DimmerLights1^(0+256)+1),6
 14616  135D  2B60               	goto	l8823
 14617  135E  0020               	movlb	0	; select bank0
 14618  135F  01A2               	clrf	_getDimmerLights_Allow_Condition$2157
 14619  1360                     l8823:	
 14620  1360  0020               	movlb	0	; select bank0
 14621  1361  0822               	movf	_getDimmerLights_Allow_Condition$2157,w
 14622  1362                     L7:	
 14623  1362  00A0               	movwf	??_getDimmerLights_Allow_Condition
 14624  1363  0820               	movf	??_getDimmerLights_Allow_Condition,w
 14625  1364  00A4               	movwf	getDimmerLights_Allow_Condition@allow
 14626  1365                     l8825:	
 14627                           
 14628                           ;Dimmer_B1.c: 632: }
 14629                           ;Dimmer_B1.c: 633: }
 14630                           ;Dimmer_B1.c: 647: return allow;
 14631  1365  0824               	movf	getDimmerLights_Allow_Condition@allow,w
 14632  1366  0008               	return
 14633  1367                     __end_of_getDimmerLights_Allow_Condition:	
 14634                           
 14635                           	psect	text98
 14636  1FEC                     __ptext98:	
 14637 ;; *************** function _DimmerLights_Initialization *****************
 14638 ;; Defined at:
 14639 ;;		line 361 in file "../src/Dimmer_B1.c"
 14640 ;; Parameters:    Size  Location     Type
 14641 ;;		None
 14642 ;; Auto vars:     Size  Location     Type
 14643 ;;		None
 14644 ;; Return value:  Size  Location     Type
 14645 ;;		None               void
 14646 ;; Registers used:
 14647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14648 ;; Tracked objects:
 14649 ;;		On entry : 0/0
 14650 ;;		On exit  : 0/0
 14651 ;;		Unchanged: 0/0
 14652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14656 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14657 ;;Total ram usage:        1 bytes
 14658 ;; Hardware stack levels used:    1
 14659 ;; Hardware stack levels required when called:    6
 14660 ;; This function calls:
 14661 ;;		_setDimmerLights_Initialization
 14662 ;; This function is called by:
 14663 ;;		_main
 14664 ;; This function uses a non-reentrant model
 14665 ;;
 14666                           
 14667                           
 14668                           ;psect for function _DimmerLights_Initialization
 14669  1FEC                     _DimmerLights_Initialization:	
 14670                           
 14671                           ;Dimmer_B1.c: 364: DimmerLights11 = &DimmerLights1;
 14672                           
 14673                           ;incstack = 0
 14674                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14675  1FEC  3041               	movlw	_DimmerLights1& (0+255)
 14676  1FED  0020               	movlb	0	; select bank0
 14677  1FEE  00A4               	movwf	??_DimmerLights_Initialization
 14678  1FEF  0824               	movf	??_DimmerLights_Initialization,w
 14679  1FF0  0021               	movlb	1	; select bank1
 14680  1FF1  00D0               	movwf	_DimmerLights11^(0+128)
 14681                           
 14682                           ;Dimmer_B1.c: 365: setDimmerLights_Initialization(1);
 14683  1FF2  3001               	movlw	1
 14684  1FF3  3194  241D  319F   	fcall	_setDimmerLights_Initialization
 14685                           
 14686                           ;Dimmer_B1.c: 369: DimmerLights22 = &DimmerLights2;
 14687  1FF6  3052               	movlw	_DimmerLights2& (0+255)
 14688  1FF7  0020               	movlb	0	; select bank0
 14689  1FF8  00A4               	movwf	??_DimmerLights_Initialization
 14690  1FF9  0824               	movf	??_DimmerLights_Initialization,w
 14691  1FFA  0021               	movlb	1	; select bank1
 14692  1FFB  00D1               	movwf	_DimmerLights22^(0+128)
 14693                           
 14694                           ;Dimmer_B1.c: 370: setDimmerLights_Initialization(2);
 14695  1FFC  3002               	movlw	2
 14696  1FFD  3194  241D         	fcall	_setDimmerLights_Initialization
 14697  1FFF  0008               	return
 14698  2000                     __end_of_DimmerLights_Initialization:	
 14699                           
 14700                           	psect	text99
 14701  141D                     __ptext99:	
 14702 ;; *************** function _setDimmerLights_Initialization *****************
 14703 ;; Defined at:
 14704 ;;		line 385 in file "../src/Dimmer_B1.c"
 14705 ;; Parameters:    Size  Location     Type
 14706 ;;  lights          1    wreg     unsigned char 
 14707 ;; Auto vars:     Size  Location     Type
 14708 ;;  lights          1    3[BANK0 ] unsigned char 
 14709 ;; Return value:  Size  Location     Type
 14710 ;;		None               void
 14711 ;; Registers used:
 14712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14713 ;; Tracked objects:
 14714 ;;		On entry : 0/0
 14715 ;;		On exit  : 0/0
 14716 ;;		Unchanged: 0/0
 14717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14720 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14722 ;;Total ram usage:        2 bytes
 14723 ;; Hardware stack levels used:    1
 14724 ;; Hardware stack levels required when called:    5
 14725 ;; This function calls:
 14726 ;;		_DimmerLightsPointSelect
 14727 ;; This function is called by:
 14728 ;;		_DimmerLights_Initialization
 14729 ;; This function uses a non-reentrant model
 14730 ;;
 14731                           
 14732                           
 14733                           ;psect for function _setDimmerLights_Initialization
 14734  141D                     _setDimmerLights_Initialization:	
 14735                           
 14736                           ;incstack = 0
 14737                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14738                           ;setDimmerLights_Initialization@lights stored from wreg
 14739  141D  0020               	movlb	0	; select bank0
 14740  141E  00A3               	movwf	setDimmerLights_Initialization@lights
 14741                           
 14742                           ;Dimmer_B1.c: 387: DimmerLightsPointSelect(lights);
 14743  141F  0823               	movf	setDimmerLights_Initialization@lights,w
 14744  1420  319F  2779  3194   	fcall	_DimmerLightsPointSelect
 14745                           
 14746                           ;Dimmer_B1.c: 389: DimmerLights->DimmingTimeValue = 7;
 14747  1423  3007               	movlw	7
 14748  1424  0020               	movlb	0	; select bank0
 14749  1425  00A2               	movwf	??_setDimmerLights_Initialization
 14750  1426  086F               	movf	_DimmerLights,w
 14751  1427  3E08               	addlw	8
 14752  1428  0086               	movwf	6
 14753  1429  3001               	movlw	1	; select bank2/3
 14754  142A  0087               	movwf	7
 14755  142B  0822               	movf	??_setDimmerLights_Initialization,w
 14756  142C  0081               	movwf	1
 14757                           
 14758                           ;Dimmer_B1.c: 394: DimmerLights->MaxmumValue = ((char)((100-70)*0.8));
 14759  142D  3018               	movlw	24
 14760  142E  00A2               	movwf	??_setDimmerLights_Initialization
 14761  142F  086F               	movf	_DimmerLights,w
 14762  1430  3E06               	addlw	6
 14763  1431  0086               	movwf	6
 14764  1432  3001               	movlw	1	; select bank2/3
 14765  1433  0087               	movwf	7
 14766  1434  0822               	movf	??_setDimmerLights_Initialization,w
 14767  1435  0081               	movwf	1
 14768                           
 14769                           ;Dimmer_B1.c: 395: DimmerLights->MinimumValue = ((char)((100-15)*0.8));
 14770  1436  3044               	movlw	68
 14771  1437  00A2               	movwf	??_setDimmerLights_Initialization
 14772  1438  086F               	movf	_DimmerLights,w
 14773  1439  3E09               	addlw	9
 14774  143A  0086               	movwf	6
 14775  143B  3001               	movlw	1	; select bank2/3
 14776  143C  0087               	movwf	7
 14777  143D  0822               	movf	??_setDimmerLights_Initialization,w
 14778  143E  0081               	movwf	1
 14779                           
 14780                           ;Dimmer_B1.c: 405: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14781  143F  086F               	movf	_DimmerLights,w
 14782  1440  3E09               	addlw	9
 14783  1441  0086               	movwf	6
 14784  1442  3001               	movlw	1	; select bank2/3
 14785  1443  0087               	movwf	7
 14786  1444  0801               	movf	1,w
 14787  1445  00A2               	movwf	??_setDimmerLights_Initialization
 14788  1446  086F               	movf	_DimmerLights,w
 14789  1447  3E04               	addlw	4
 14790  1448  0086               	movwf	6
 14791  1449  3001               	movlw	1	; select bank2/3
 14792  144A  0087               	movwf	7
 14793  144B  0822               	movf	??_setDimmerLights_Initialization,w
 14794  144C  0081               	movwf	1
 14795  144D  0008               	return
 14796  144E                     __end_of_setDimmerLights_Initialization:	
 14797                           
 14798                           	psect	text100
 14799  1E14                     __ptext100:	
 14800 ;; *************** function _DelayOff_Main *****************
 14801 ;; Defined at:
 14802 ;;		line 41 in file "../src/DelayOff_B1.c"
 14803 ;; Parameters:    Size  Location     Type
 14804 ;;		None
 14805 ;; Auto vars:     Size  Location     Type
 14806 ;;		None
 14807 ;; Return value:  Size  Location     Type
 14808 ;;		None               void
 14809 ;; Registers used:
 14810 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14811 ;; Tracked objects:
 14812 ;;		On entry : 0/0
 14813 ;;		On exit  : 0/0
 14814 ;;		Unchanged: 0/0
 14815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14820 ;;Total ram usage:        0 bytes
 14821 ;; Hardware stack levels used:    1
 14822 ;; Hardware stack levels required when called:   10
 14823 ;; This function calls:
 14824 ;;		_DlyOff_Main
 14825 ;; This function is called by:
 14826 ;;		_main
 14827 ;; This function uses a non-reentrant model
 14828 ;;
 14829                           
 14830                           
 14831                           ;psect for function _DelayOff_Main
 14832  1E14                     _DelayOff_Main:	
 14833                           
 14834                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 14835                           
 14836                           ;incstack = 0
 14837                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14838  1E14  3001               	movlw	1
 14839  1E15  318B  2341  319E   	fcall	_DlyOff_Main
 14840                           
 14841                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 14842  1E18  3002               	movlw	2
 14843  1E19  318B  2341         	fcall	_DlyOff_Main
 14844  1E1B  0008               	return
 14845  1E1C                     __end_of_DelayOff_Main:	
 14846                           
 14847                           	psect	text101
 14848  0B41                     __ptext101:	
 14849 ;; *************** function _DlyOff_Main *****************
 14850 ;; Defined at:
 14851 ;;		line 61 in file "../src/DelayOff_B1.c"
 14852 ;; Parameters:    Size  Location     Type
 14853 ;;  sw              1    wreg     unsigned char 
 14854 ;; Auto vars:     Size  Location     Type
 14855 ;;  sw              1   77[BANK0 ] unsigned char 
 14856 ;; Return value:  Size  Location     Type
 14857 ;;		None               void
 14858 ;; Registers used:
 14859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14860 ;; Tracked objects:
 14861 ;;		On entry : 0/0
 14862 ;;		On exit  : 0/0
 14863 ;;		Unchanged: 0/0
 14864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14867 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14868 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14869 ;;Total ram usage:        3 bytes
 14870 ;; Hardware stack levels used:    1
 14871 ;; Hardware stack levels required when called:    9
 14872 ;; This function calls:
 14873 ;;		_DelayOffPointSelect
 14874 ;;		_setBuz
 14875 ;;		_setDimmerLights_ErrorClose
 14876 ;; This function is called by:
 14877 ;;		_DelayOff_Main
 14878 ;; This function uses a non-reentrant model
 14879 ;;
 14880                           
 14881                           
 14882                           ;psect for function _DlyOff_Main
 14883  0B41                     _DlyOff_Main:	
 14884                           
 14885                           ;incstack = 0
 14886                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14887                           ;DlyOff_Main@sw stored from wreg
 14888  0B41  0020               	movlb	0	; select bank0
 14889  0B42  00ED               	movwf	DlyOff_Main@sw
 14890                           
 14891                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 14892  0B43  086D               	movf	DlyOff_Main@sw,w
 14893  0B44  319F  27D8  318B   	fcall	_DelayOffPointSelect
 14894                           
 14895                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 14896  0B47  0876               	movf	_DelayOff,w
 14897  0B48  0086               	movwf	6
 14898  0B49  3001               	movlw	1	; select bank2/3
 14899  0B4A  0087               	movwf	7
 14900  0B4B  1C81               	btfss	1,1
 14901  0B4C  0008               	return
 14902                           
 14903                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 14904  0B4D  0876               	movf	_DelayOff,w
 14905  0B4E  3E02               	addlw	2
 14906  0B4F  0086               	movwf	6
 14907  0B50  3001               	movlw	1	; select bank2/3
 14908  0B51  0087               	movwf	7
 14909  0B52  3001               	movlw	1
 14910  0B53  0781               	addwf	1,f
 14911  0B54  3141               	addfsr 1,1
 14912  0B55  1803               	skipnc
 14913  0B56  0A81               	incf	1,f
 14914                           
 14915                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 14916  0B57  0876               	movf	_DelayOff,w
 14917  0B58  3E02               	addlw	2
 14918  0B59  0086               	movwf	6
 14919  0B5A  3001               	movlw	1	; select bank2/3
 14920  0B5B  0087               	movwf	7
 14921  0B5C  3F40               	moviw [0]fsr1
 14922  0B5D  0020               	movlb	0	; select bank0
 14923  0B5E  00EB               	movwf	??_DlyOff_Main
 14924  0B5F  3F41               	moviw [1]fsr1
 14925  0B60  00EC               	movwf	??_DlyOff_Main+1
 14926  0B61  3017               	movlw	23
 14927  0B62  026C               	subwf	??_DlyOff_Main+1,w
 14928  0B63  3070               	movlw	112
 14929  0B64  1903               	skipnz
 14930  0B65  026B               	subwf	??_DlyOff_Main,w
 14931  0B66  1C03               	skipc
 14932  0B67  0008               	return
 14933                           
 14934                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 14935  0B68  0876               	movf	_DelayOff,w
 14936  0B69  3E02               	addlw	2
 14937  0B6A  0086               	movwf	6
 14938  0B6B  3001               	movlw	1	; select bank2/3
 14939  0B6C  0087               	movwf	7
 14940  0B6D  3000               	movlw	0
 14941  0B6E  3FC0               	movwi [0]fsr1
 14942  0B6F  3FC1               	movwi [1]fsr1
 14943                           
 14944                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 14945  0B70  3001               	movlw	1
 14946  0B71  00EB               	movwf	??_DlyOff_Main
 14947  0B72  0876               	movf	_DelayOff,w
 14948  0B73  3E04               	addlw	4
 14949  0B74  0086               	movwf	6
 14950  0B75  3001               	movlw	1	; select bank2/3
 14951  0B76  0087               	movwf	7
 14952  0B77  086B               	movf	??_DlyOff_Main,w
 14953  0B78  0781               	addwf	1,f
 14954                           
 14955                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 14956  0B79  0876               	movf	_DelayOff,w
 14957  0B7A  3E04               	addlw	4
 14958  0B7B  0086               	movwf	6
 14959  0B7C  3001               	movlw	1	; select bank2/3
 14960  0B7D  0087               	movwf	7
 14961  0B7E  0A76               	incf	_DelayOff,w
 14962  0B7F  0084               	movwf	4
 14963  0B80  3001               	movlw	1	; select bank2/3
 14964  0B81  0085               	movwf	5
 14965  0B82  0800               	movf	0,w
 14966  0B83  0201               	subwf	1,w
 14967  0B84  1C03               	skipc
 14968  0B85  0008               	return
 14969                           
 14970                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 14971  0B86  0876               	movf	_DelayOff,w
 14972  0B87  3E04               	addlw	4
 14973  0B88  0086               	movwf	6
 14974  0B89  3001               	movlw	1	; select bank2/3
 14975  0B8A  0087               	movwf	7
 14976  0B8B  0181               	clrf	1
 14977                           
 14978                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 14979  0B8C  0876               	movf	_DelayOff,w
 14980  0B8D  0086               	movwf	6
 14981  0B8E  3001               	movlw	1	; select bank2/3
 14982  0B8F  0087               	movwf	7
 14983  0B90  1081               	bcf	1,1
 14984                           
 14985                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 14986  0B91  3064               	movlw	100
 14987  0B92  00A9               	movwf	setBuz@time
 14988  0B93  3000               	movlw	0
 14989  0B94  00AA               	movwf	setBuz@time+1
 14990  0B95  3001               	movlw	1
 14991  0B96  3189  217C  318B   	fcall	_setBuz
 14992                           
 14993                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 14994  0B99  0020               	movlb	0	; select bank0
 14995  0B9A  086D               	movf	DlyOff_Main@sw,w
 14996  0B9B  318A  2289         	fcall	_setDimmerLights_ErrorClose
 14997  0B9D  0008               	return
 14998  0B9E                     __end_of_DlyOff_Main:	
 14999                           
 15000                           	psect	text102
 15001  0A89                     __ptext102:	
 15002 ;; *************** function _setDimmerLights_ErrorClose *****************
 15003 ;; Defined at:
 15004 ;;		line 874 in file "../src/Dimmer_B1.c"
 15005 ;; Parameters:    Size  Location     Type
 15006 ;;  lights          1    wreg     unsigned char 
 15007 ;; Auto vars:     Size  Location     Type
 15008 ;;  lights          1   72[BANK0 ] unsigned char 
 15009 ;;  i               2   73[BANK0 ] int 
 15010 ;;  count           1   71[BANK0 ] unsigned char 
 15011 ;; Return value:  Size  Location     Type
 15012 ;;		None               void
 15013 ;; Registers used:
 15014 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15015 ;; Tracked objects:
 15016 ;;		On entry : 0/0
 15017 ;;		On exit  : 0/0
 15018 ;;		Unchanged: 0/0
 15019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15021 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15023 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15024 ;;Total ram usage:        5 bytes
 15025 ;; Hardware stack levels used:    1
 15026 ;; Hardware stack levels required when called:    8
 15027 ;; This function calls:
 15028 ;;		_DimmerLightsPointSelect
 15029 ;;		_getDimmerLights_Status
 15030 ;;		_setDimmerLights_SwOff
 15031 ;; This function is called by:
 15032 ;;		_DlyOff_Main
 15033 ;;		_setControl_Lights_Table
 15034 ;; This function uses a non-reentrant model
 15035 ;;
 15036                           
 15037                           
 15038                           ;psect for function _setDimmerLights_ErrorClose
 15039  0A89                     _setDimmerLights_ErrorClose:	
 15040                           
 15041                           ;incstack = 0
 15042                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15043                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15044  0A89  0020               	movlb	0	; select bank0
 15045  0A8A  00E8               	movwf	setDimmerLights_ErrorClose@lights
 15046                           
 15047                           ;Dimmer_B1.c: 875: if (lights == 255) {
 15048  0A8B  0868               	movf	setDimmerLights_ErrorClose@lights,w
 15049  0A8C  3AFF               	xorlw	255
 15050  0A8D  1D03               	skipz
 15051  0A8E  2AC7               	goto	l8419
 15052                           
 15053                           ;Dimmer_B1.c: 880: char count = 2;
 15054  0A8F  3002               	movlw	2
 15055  0A90  00E6               	movwf	??_setDimmerLights_ErrorClose
 15056  0A91  0866               	movf	??_setDimmerLights_ErrorClose,w
 15057  0A92  00E7               	movwf	setDimmerLights_ErrorClose@count
 15058                           
 15059                           ;Dimmer_B1.c: 885: for (int i = 0; i < count; i++) {
 15060  0A93  01E9               	clrf	setDimmerLights_ErrorClose@i
 15061  0A94  01EA               	clrf	setDimmerLights_ErrorClose@i+1
 15062  0A95                     l8417:	
 15063  0A95  086A               	movf	setDimmerLights_ErrorClose@i+1,w
 15064  0A96  3A80               	xorlw	128
 15065  0A97  00E6               	movwf	??_setDimmerLights_ErrorClose
 15066  0A98  3080               	movlw	128
 15067  0A99  0266               	subwf	??_setDimmerLights_ErrorClose,w
 15068  0A9A  1D03               	skipz
 15069  0A9B  2A9E               	goto	u8905
 15070  0A9C  0867               	movf	setDimmerLights_ErrorClose@count,w
 15071  0A9D  0269               	subwf	setDimmerLights_ErrorClose@i,w
 15072  0A9E                     u8905:	
 15073  0A9E  1803               	btfsc	3,0
 15074  0A9F  0008               	return
 15075                           
 15076                           ;Dimmer_B1.c: 886: DimmerLightsPointSelect(i + 1);
 15077  0AA0  0020               	movlb	0	; select bank0
 15078  0AA1  0869               	movf	setDimmerLights_ErrorClose@i,w
 15079  0AA2  3E01               	addlw	1
 15080  0AA3  319F  2779  318A   	fcall	_DimmerLightsPointSelect
 15081                           
 15082                           ;Dimmer_B1.c: 887: if (getDimmerLights_Status(i + 1) == 1) {
 15083  0AA6  0020               	movlb	0	; select bank0
 15084  0AA7  0869               	movf	setDimmerLights_ErrorClose@i,w
 15085  0AA8  3E01               	addlw	1
 15086  0AA9  319E  26EC  318A   	fcall	_getDimmerLights_Status
 15087  0AAC  3A01               	xorlw	1
 15088  0AAD  1D03               	skipz
 15089  0AAE  2AC1               	goto	l8415
 15090                           
 15091                           ;Dimmer_B1.c: 888: DimmerLights->SwFlag = 1;
 15092  0AAF  0020               	movlb	0	; select bank0
 15093  0AB0  086F               	movf	_DimmerLights,w
 15094  0AB1  3E0B               	addlw	11
 15095  0AB2  0086               	movwf	6
 15096  0AB3  3001               	movlw	1	; select bank2/3
 15097  0AB4  0087               	movwf	7
 15098  0AB5  1481               	bsf	1,1
 15099                           
 15100                           ;Dimmer_B1.c: 889: DimmerLights->Status = 0;
 15101  0AB6  086F               	movf	_DimmerLights,w
 15102  0AB7  3E02               	addlw	2
 15103  0AB8  0086               	movwf	6
 15104  0AB9  3001               	movlw	1	; select bank2/3
 15105  0ABA  0087               	movwf	7
 15106  0ABB  1081               	bcf	1,1
 15107                           
 15108                           ;Dimmer_B1.c: 890: setDimmerLights_SwOff(i + 1);
 15109  0ABC  0869               	movf	setDimmerLights_ErrorClose@i,w
 15110  0ABD  3E01               	addlw	1
 15111  0ABE  3197  2712  318A   	fcall	_setDimmerLights_SwOff
 15112  0AC1                     l8415:	
 15113  0AC1  3001               	movlw	1
 15114  0AC2  0020               	movlb	0	; select bank0
 15115  0AC3  07E9               	addwf	setDimmerLights_ErrorClose@i,f
 15116  0AC4  3000               	movlw	0
 15117  0AC5  3DEA               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15118  0AC6  2A95               	goto	l8417
 15119  0AC7                     l8419:	
 15120                           ;Dimmer_B1.c: 891: }
 15121                           ;Dimmer_B1.c: 892: }
 15122                           ;Dimmer_B1.c: 893: } else {
 15123                           
 15124                           
 15125                           ;Dimmer_B1.c: 894: DimmerLightsPointSelect(lights);
 15126  0AC7  0020               	movlb	0	; select bank0
 15127  0AC8  0868               	movf	setDimmerLights_ErrorClose@lights,w
 15128  0AC9  319F  2779  318A   	fcall	_DimmerLightsPointSelect
 15129                           
 15130                           ;Dimmer_B1.c: 895: if (getDimmerLights_Status(lights) == 1) {
 15131  0ACC  0020               	movlb	0	; select bank0
 15132  0ACD  0868               	movf	setDimmerLights_ErrorClose@lights,w
 15133  0ACE  319E  26EC  318A   	fcall	_getDimmerLights_Status
 15134  0AD1  3A01               	xorlw	1
 15135  0AD2  1D03               	skipz
 15136  0AD3  0008               	return
 15137                           
 15138                           ;Dimmer_B1.c: 896: DimmerLights->SwFlag = 1;
 15139  0AD4  0020               	movlb	0	; select bank0
 15140  0AD5  086F               	movf	_DimmerLights,w
 15141  0AD6  3E0B               	addlw	11
 15142  0AD7  0086               	movwf	6
 15143  0AD8  3001               	movlw	1	; select bank2/3
 15144  0AD9  0087               	movwf	7
 15145  0ADA  1481               	bsf	1,1
 15146                           
 15147                           ;Dimmer_B1.c: 897: DimmerLights->Status = 0;
 15148  0ADB  086F               	movf	_DimmerLights,w
 15149  0ADC  3E02               	addlw	2
 15150  0ADD  0086               	movwf	6
 15151  0ADE  3001               	movlw	1	; select bank2/3
 15152  0ADF  0087               	movwf	7
 15153  0AE0  1081               	bcf	1,1
 15154                           
 15155                           ;Dimmer_B1.c: 898: setDimmerLights_SwOff(lights);
 15156  0AE1  0868               	movf	setDimmerLights_ErrorClose@lights,w
 15157  0AE2  3197  2712         	fcall	_setDimmerLights_SwOff
 15158  0AE4  0008               	return
 15159  0AE5                     __end_of_setDimmerLights_ErrorClose:	
 15160                           
 15161                           	psect	text103
 15162  1712                     __ptext103:	
 15163 ;; *************** function _setDimmerLights_SwOff *****************
 15164 ;; Defined at:
 15165 ;;		line 470 in file "../src/Dimmer_B1.c"
 15166 ;; Parameters:    Size  Location     Type
 15167 ;;  sw              1    wreg     unsigned char 
 15168 ;; Auto vars:     Size  Location     Type
 15169 ;;  sw              1   69[BANK0 ] unsigned char 
 15170 ;; Return value:  Size  Location     Type
 15171 ;;		None               void
 15172 ;; Registers used:
 15173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15174 ;; Tracked objects:
 15175 ;;		On entry : 0/0
 15176 ;;		On exit  : 0/0
 15177 ;;		Unchanged: 0/0
 15178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15182 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15183 ;;Total ram usage:        1 bytes
 15184 ;; Hardware stack levels used:    1
 15185 ;; Hardware stack levels required when called:    7
 15186 ;; This function calls:
 15187 ;;		_DimmerLightsPointSelect
 15188 ;;		_getDelayOff_GO
 15189 ;;		_setDelayOff_GO
 15190 ;; This function is called by:
 15191 ;;		_setDimmerLights_ErrorClose
 15192 ;;		_Exception_Main
 15193 ;;		_setRFSW_Control
 15194 ;;		_setSw_Main
 15195 ;; This function uses a non-reentrant model
 15196 ;;
 15197                           
 15198                           
 15199                           ;psect for function _setDimmerLights_SwOff
 15200  1712                     _setDimmerLights_SwOff:	
 15201                           
 15202                           ;incstack = 0
 15203                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15204                           ;setDimmerLights_SwOff@sw stored from wreg
 15205  1712  0020               	movlb	0	; select bank0
 15206  1713  00E5               	movwf	setDimmerLights_SwOff@sw
 15207                           
 15208                           ;Dimmer_B1.c: 471: DimmerLightsPointSelect(sw);
 15209  1714  0865               	movf	setDimmerLights_SwOff@sw,w
 15210  1715  319F  2779  3197   	fcall	_DimmerLightsPointSelect
 15211                           
 15212                           ;Dimmer_B1.c: 473: if (DimmerLights->SwFlag == 1) {
 15213  1718  0020               	movlb	0	; select bank0
 15214  1719  086F               	movf	_DimmerLights,w
 15215  171A  3E0B               	addlw	11
 15216  171B  0086               	movwf	6
 15217  171C  3001               	movlw	1	; select bank2/3
 15218  171D  0087               	movwf	7
 15219  171E  1C81               	btfss	1,1
 15220  171F  0008               	return
 15221                           
 15222                           ;Dimmer_B1.c: 474: DimmerLights->SwFlag = 0;
 15223  1720  086F               	movf	_DimmerLights,w
 15224  1721  3E0B               	addlw	11
 15225  1722  0086               	movwf	6
 15226  1723  3001               	movlw	1	; select bank2/3
 15227  1724  0087               	movwf	7
 15228  1725  1081               	bcf	1,1
 15229                           
 15230                           ;Dimmer_B1.c: 475: if (DimmerLights->Status == 1) {
 15231  1726  086F               	movf	_DimmerLights,w
 15232  1727  3E02               	addlw	2
 15233  1728  0086               	movwf	6
 15234  1729  3001               	movlw	1	; select bank2/3
 15235  172A  0087               	movwf	7
 15236  172B  1C81               	btfss	1,1
 15237  172C  2F47               	goto	l8247
 15238                           
 15239                           ;Dimmer_B1.c: 477: if (DimmerLights->SwAdj == 1) {
 15240  172D  086F               	movf	_DimmerLights,w
 15241  172E  3E0B               	addlw	11
 15242  172F  0086               	movwf	6
 15243  1730  3001               	movlw	1	; select bank2/3
 15244  1731  0087               	movwf	7
 15245  1732  1D01               	btfss	1,2
 15246  1733  0008               	return
 15247                           
 15248                           ;Dimmer_B1.c: 478: DimmerLights->SwAdj = 0;
 15249  1734  086F               	movf	_DimmerLights,w
 15250  1735  3E0B               	addlw	11
 15251  1736  0086               	movwf	6
 15252  1737  3001               	movlw	1	; select bank2/3
 15253  1738  0087               	movwf	7
 15254  1739  1101               	bcf	1,2
 15255                           
 15256                           ;Dimmer_B1.c: 480: DimmerLights->TriggerAdj = 1;
 15257  173A  086F               	movf	_DimmerLights,w
 15258  173B  3E0A               	addlw	10
 15259  173C  0086               	movwf	6
 15260  173D  3001               	movlw	1	; select bank2/3
 15261  173E  0087               	movwf	7
 15262  173F  1581               	bsf	1,3
 15263                           
 15264                           ;Dimmer_B1.c: 481: DimmerLights->SwitchAdj = 0;
 15265  1740  086F               	movf	_DimmerLights,w
 15266  1741  3E0A               	addlw	10
 15267  1742  0086               	movwf	6
 15268  1743  3001               	movlw	1	; select bank2/3
 15269  1744  0087               	movwf	7
 15270  1745  1101               	bcf	1,2
 15271                           
 15272                           ;Dimmer_B1.c: 482: }
 15273                           ;Dimmer_B1.c: 483: } else {
 15274  1746  0008               	return
 15275  1747                     l8247:	
 15276                           
 15277                           ;Dimmer_B1.c: 484: DimmerLights->Trigger = 1;
 15278  1747  086F               	movf	_DimmerLights,w
 15279  1748  3E0A               	addlw	10
 15280  1749  0086               	movwf	6
 15281  174A  3001               	movlw	1	; select bank2/3
 15282  174B  0087               	movwf	7
 15283  174C  1481               	bsf	1,1
 15284                           
 15285                           ;Dimmer_B1.c: 485: DimmerLights->Switch = 0;
 15286  174D  086F               	movf	_DimmerLights,w
 15287  174E  3E0A               	addlw	10
 15288  174F  0086               	movwf	6
 15289  1750  3001               	movlw	1	; select bank2/3
 15290  1751  0087               	movwf	7
 15291  1752  1001               	bcf	1,0
 15292                           
 15293                           ;Dimmer_B1.c: 488: if (getDelayOff_GO(sw) == 1) {
 15294  1753  0865               	movf	setDimmerLights_SwOff@sw,w
 15295  1754  319E  26DC  3197   	fcall	_getDelayOff_GO
 15296  1757  3A01               	xorlw	1
 15297  1758  1D03               	skipz
 15298  1759  0008               	return
 15299                           
 15300                           ;Dimmer_B1.c: 489: setDelayOff_GO(sw, 0, 0);
 15301  175A  0020               	movlb	0	; select bank0
 15302  175B  01E1               	clrf	setDelayOff_GO@command
 15303  175C  01E2               	clrf	setDelayOff_GO@value
 15304  175D  0865               	movf	setDimmerLights_SwOff@sw,w
 15305  175E  3188  207D         	fcall	_setDelayOff_GO
 15306  1760  0008               	return
 15307  1761                     __end_of_setDimmerLights_SwOff:	
 15308                           
 15309                           	psect	text104
 15310  087D                     __ptext104:	
 15311 ;; *************** function _setDelayOff_GO *****************
 15312 ;; Defined at:
 15313 ;;		line 83 in file "../src/DelayOff_B1.c"
 15314 ;; Parameters:    Size  Location     Type
 15315 ;;  sw              1    wreg     unsigned char 
 15316 ;;  command         1   65[BANK0 ] unsigned char 
 15317 ;;  value           1   66[BANK0 ] unsigned char 
 15318 ;; Auto vars:     Size  Location     Type
 15319 ;;  sw              1   68[BANK0 ] unsigned char 
 15320 ;; Return value:  Size  Location     Type
 15321 ;;		None               void
 15322 ;; Registers used:
 15323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15324 ;; Tracked objects:
 15325 ;;		On entry : 0/0
 15326 ;;		On exit  : 0/0
 15327 ;;		Unchanged: 0/0
 15328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15329 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15332 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15333 ;;Total ram usage:        4 bytes
 15334 ;; Hardware stack levels used:    1
 15335 ;; Hardware stack levels required when called:    6
 15336 ;; This function calls:
 15337 ;;		_DelayOffPointSelect
 15338 ;;		_DelayTimejudge
 15339 ;;		_setProductData
 15340 ;; This function is called by:
 15341 ;;		_setDimmerLights_SwOff
 15342 ;;		_setRFSW_Control
 15343 ;; This function uses a non-reentrant model
 15344 ;;
 15345                           
 15346                           
 15347                           ;psect for function _setDelayOff_GO
 15348  087D                     _setDelayOff_GO:	
 15349                           
 15350                           ;incstack = 0
 15351                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15352                           ;setDelayOff_GO@sw stored from wreg
 15353  087D  0020               	movlb	0	; select bank0
 15354  087E  00E4               	movwf	setDelayOff_GO@sw
 15355                           
 15356                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15357  087F  0864               	movf	setDelayOff_GO@sw,w
 15358  0880  319F  27D8  3188   	fcall	_DelayOffPointSelect
 15359                           
 15360                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15361  0883  0020               	movlb	0	; select bank0
 15362  0884  0861               	movf	setDelayOff_GO@command,w
 15363  0885  3A01               	xorlw	1
 15364  0886  3000               	movlw	0
 15365  0887  1903               	skipnz
 15366  0888  3001               	movlw	1
 15367  0889  00E3               	movwf	??_setDelayOff_GO
 15368  088A  0876               	movf	_DelayOff,w
 15369  088B  0086               	movwf	6
 15370  088C  3001               	movlw	1	; select bank2/3
 15371  088D  0087               	movwf	7
 15372  088E  0DE3               	rlf	??_setDelayOff_GO,f
 15373  088F  0801               	movf	1,w
 15374  0890  0663               	xorwf	??_setDelayOff_GO,w
 15375  0891  39FD               	andlw	-3
 15376  0892  0663               	xorwf	??_setDelayOff_GO,w
 15377  0893  0081               	movwf	1
 15378                           
 15379                           ;DelayOff_B1.c: 89: if (command == 1) {
 15380  0894  0861               	movf	setDelayOff_GO@command,w
 15381  0895  3A01               	xorlw	1
 15382  0896  1D03               	skipz
 15383  0897  28BB               	goto	l8153
 15384                           
 15385                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15386  0898  0862               	movf	setDelayOff_GO@value,w
 15387  0899  3193  2367  3188   	fcall	_DelayTimejudge
 15388  089C  0020               	movlb	0	; select bank0
 15389  089D  00E3               	movwf	??_setDelayOff_GO
 15390  089E  0A76               	incf	_DelayOff,w
 15391  089F  0086               	movwf	6
 15392  08A0  3001               	movlw	1	; select bank2/3
 15393  08A1  0087               	movwf	7
 15394  08A2  0863               	movf	??_setDelayOff_GO,w
 15395  08A3  0081               	movwf	1
 15396                           
 15397                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15398  08A4  300F               	movlw	15
 15399  08A5  0562               	andwf	setDelayOff_GO@value,w
 15400  08A6  00E3               	movwf	??_setDelayOff_GO
 15401  08A7  0863               	movf	??_setDelayOff_GO,w
 15402  08A8  3A05               	xorlw	5
 15403  08A9  1903               	skipnz
 15404  08AA  28AF               	goto	l8147
 15405  08AB  0862               	movf	setDelayOff_GO@value,w
 15406  08AC  390F               	andlw	15
 15407  08AD  1D03               	btfss	3,2
 15408  08AE  28B5               	goto	l8151
 15409  08AF                     l8147:	
 15410  08AF  3026               	movlw	38
 15411  08B0  0262               	subwf	setDelayOff_GO@value,w
 15412  08B1  1803               	skipnc
 15413  08B2  28B5               	goto	l8151
 15414                           
 15415                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 15416  08B3  0862               	movf	setDelayOff_GO@value,w
 15417  08B4  28B7               	goto	L9
 15418  08B5                     l8151:	
 15419                           ;DelayOff_B1.c: 93: } else {
 15420                           
 15421                           
 15422                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 15423  08B5  3005               	movlw	5
 15424  08B6  0020               	movlb	0	; select bank0
 15425  08B7                     L9:	
 15426  08B7  00E3               	movwf	??_setDelayOff_GO
 15427  08B8  0863               	movf	??_setDelayOff_GO,w
 15428  08B9  00DD               	movwf	setProductData@value
 15429  08BA  28BD               	goto	L8
 15430  08BB                     l8153:	
 15431                           ;DelayOff_B1.c: 95: }
 15432                           ;DelayOff_B1.c: 96: } else {
 15433                           
 15434                           
 15435                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 15436  08BB  0020               	movlb	0	; select bank0
 15437  08BC  01DD               	clrf	setProductData@value
 15438  08BD                     L8:	
 15439  08BD  0864               	movf	setDelayOff_GO@sw,w
 15440  08BE  3E1A               	addlw	26
 15441  08BF  319E  26B0         	fcall	_setProductData
 15442                           
 15443                           ;DelayOff_B1.c: 98: }
 15444                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15445  08C1  0876               	movf	_DelayOff,w
 15446  08C2  3E02               	addlw	2
 15447  08C3  0086               	movwf	6
 15448  08C4  3001               	movlw	1	; select bank2/3
 15449  08C5  0087               	movwf	7
 15450  08C6  3000               	movlw	0
 15451  08C7  3FC0               	movwi [0]fsr1
 15452  08C8  3FC1               	movwi [1]fsr1
 15453                           
 15454                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15455  08C9  0876               	movf	_DelayOff,w
 15456  08CA  3E04               	addlw	4
 15457  08CB  0086               	movwf	6
 15458  08CC  3001               	movlw	1	; select bank2/3
 15459  08CD  0087               	movwf	7
 15460  08CE  0181               	clrf	1
 15461  08CF  0008               	return
 15462  08D0                     __end_of_setDelayOff_GO:	
 15463                           
 15464                           	psect	text105
 15465  1EB0                     __ptext105:	
 15466 ;; *************** function _setProductData *****************
 15467 ;; Defined at:
 15468 ;;		line 605 in file "../src/Main_B1.c"
 15469 ;; Parameters:    Size  Location     Type
 15470 ;;  address         1    wreg     unsigned char 
 15471 ;;  value           1   61[BANK0 ] unsigned char 
 15472 ;; Auto vars:     Size  Location     Type
 15473 ;;  address         1   64[BANK0 ] unsigned char 
 15474 ;; Return value:  Size  Location     Type
 15475 ;;		None               void
 15476 ;; Registers used:
 15477 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15478 ;; Tracked objects:
 15479 ;;		On entry : 0/0
 15480 ;;		On exit  : 0/0
 15481 ;;		Unchanged: 0/0
 15482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15483 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15485 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15486 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15487 ;;Total ram usage:        4 bytes
 15488 ;; Hardware stack levels used:    1
 15489 ;; Hardware stack levels required when called:    4
 15490 ;; This function calls:
 15491 ;;		Nothing
 15492 ;; This function is called by:
 15493 ;;		_setDelayOff_GO
 15494 ;;		_setDimmerLights
 15495 ;;		_setDimmerLights_Adj
 15496 ;;		_setTemp_Main
 15497 ;;		_setLog_Code
 15498 ;;		_setControl_Lights_Table
 15499 ;;		_setRFSW_AdjControl
 15500 ;;		_setRF_DimmerValue
 15501 ;;		_setRF_DimmerLights
 15502 ;; This function uses a non-reentrant model
 15503 ;;
 15504                           
 15505                           
 15506                           ;psect for function _setProductData
 15507  1EB0                     _setProductData:	
 15508                           
 15509                           ;incstack = 0
 15510                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 15511                           ;setProductData@address stored from wreg
 15512  1EB0  0020               	movlb	0	; select bank0
 15513  1EB1  00E0               	movwf	setProductData@address
 15514                           
 15515                           ;Main_B1.c: 606: product->Data[address] = value;
 15516  1EB2  085D               	movf	setProductData@value,w
 15517  1EB3  00DE               	movwf	??_setProductData
 15518  1EB4  0860               	movf	setProductData@address,w
 15519  1EB5  076E               	addwf	_product,w
 15520  1EB6  00DF               	movwf	??_setProductData+1
 15521  1EB7  085F               	movf	??_setProductData+1,w
 15522  1EB8  0086               	movwf	6
 15523  1EB9  3002               	movlw	2	; select bank4/5
 15524  1EBA  0087               	movwf	7
 15525  1EBB  085E               	movf	??_setProductData,w
 15526  1EBC  0081               	movwf	1
 15527  1EBD  0008               	return
 15528  1EBE                     __end_of_setProductData:	
 15529                           
 15530                           	psect	text106
 15531  1367                     __ptext106:	
 15532 ;; *************** function _DelayTimejudge *****************
 15533 ;; Defined at:
 15534 ;;		line 112 in file "../src/DelayOff_B1.c"
 15535 ;; Parameters:    Size  Location     Type
 15536 ;;  value           1    wreg     unsigned char 
 15537 ;; Auto vars:     Size  Location     Type
 15538 ;;  value           1    9[BANK0 ] unsigned char 
 15539 ;;  k               1    8[BANK0 ] unsigned char 
 15540 ;;  j               1    7[BANK0 ] unsigned char 
 15541 ;;  i               1    6[BANK0 ] unsigned char 
 15542 ;; Return value:  Size  Location     Type
 15543 ;;                  1    wreg      unsigned char 
 15544 ;; Registers used:
 15545 ;;		wreg, status,2, status,0, pclath, cstack
 15546 ;; Tracked objects:
 15547 ;;		On entry : 0/0
 15548 ;;		On exit  : 0/0
 15549 ;;		Unchanged: 0/0
 15550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15552 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15553 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15554 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15555 ;;Total ram usage:        6 bytes
 15556 ;; Hardware stack levels used:    1
 15557 ;; Hardware stack levels required when called:    5
 15558 ;; This function calls:
 15559 ;;		___bmul
 15560 ;; This function is called by:
 15561 ;;		_setDelayOff_GO
 15562 ;; This function uses a non-reentrant model
 15563 ;;
 15564                           
 15565                           
 15566                           ;psect for function _DelayTimejudge
 15567  1367                     _DelayTimejudge:	
 15568                           
 15569                           ;incstack = 0
 15570                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 15571                           ;DelayTimejudge@value stored from wreg
 15572  1367  0020               	movlb	0	; select bank0
 15573  1368  00A9               	movwf	DelayTimejudge@value
 15574                           
 15575                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 15576  1369  3005               	movlw	5
 15577  136A  00A4               	movwf	??_DelayTimejudge
 15578  136B  0824               	movf	??_DelayTimejudge,w
 15579  136C  00A6               	movwf	DelayTimejudge@i
 15580  136D  01A7               	clrf	DelayTimejudge@j
 15581  136E  01A8               	clrf	DelayTimejudge@k
 15582                           
 15583                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 15584  136F  3031               	movlw	49
 15585  1370  0229               	subwf	DelayTimejudge@value,w
 15586  1371  1803               	skipnc
 15587  1372  2B8F               	goto	l8043
 15588                           
 15589                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 15590  1373  0829               	movf	DelayTimejudge@value,w
 15591  1374  390F               	andlw	15
 15592  1375  00A4               	movwf	??_DelayTimejudge
 15593  1376  0824               	movf	??_DelayTimejudge,w
 15594  1377  00A7               	movwf	DelayTimejudge@j
 15595                           
 15596                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 15597  1378  0829               	movf	DelayTimejudge@value,w
 15598  1379  00A4               	movwf	??_DelayTimejudge
 15599  137A  3004               	movlw	4
 15600  137B                     u8355:	
 15601  137B  36A4               	lsrf	??_DelayTimejudge,f
 15602  137C  0B89               	decfsz	9,f
 15603  137D  2B7B               	goto	u8355
 15604  137E  0824               	movf	??_DelayTimejudge,w
 15605  137F  390F               	andlw	15
 15606  1380  00A5               	movwf	??_DelayTimejudge+1
 15607  1381  0825               	movf	??_DelayTimejudge+1,w
 15608  1382  00A8               	movwf	DelayTimejudge@k
 15609                           
 15610                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 15611  1383  300A               	movlw	10
 15612  1384  00A4               	movwf	??_DelayTimejudge
 15613  1385  0824               	movf	??_DelayTimejudge,w
 15614  1386  00A0               	movwf	___bmul@multiplicand
 15615  1387  0828               	movf	DelayTimejudge@k,w
 15616  1388  319F  2730         	fcall	___bmul
 15617  138A  0020               	movlb	0	; select bank0
 15618  138B  0727               	addwf	DelayTimejudge@j,w
 15619  138C  00A5               	movwf	??_DelayTimejudge+1
 15620  138D  0825               	movf	??_DelayTimejudge+1,w
 15621  138E  00A6               	movwf	DelayTimejudge@i
 15622  138F                     l8043:	
 15623                           
 15624                           ;DelayOff_B1.c: 118: }
 15625                           ;DelayOff_B1.c: 139: return i;
 15626  138F  0826               	movf	DelayTimejudge@i,w
 15627  1390  0008               	return
 15628  1391                     __end_of_DelayTimejudge:	
 15629                           
 15630                           	psect	text107
 15631  1F30                     __ptext107:	
 15632 ;; *************** function ___bmul *****************
 15633 ;; Defined at:
 15634 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15635 ;; Parameters:    Size  Location     Type
 15636 ;;  multiplier      1    wreg     unsigned char 
 15637 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 15638 ;; Auto vars:     Size  Location     Type
 15639 ;;  multiplier      1    3[BANK0 ] unsigned char 
 15640 ;;  product         1    2[BANK0 ] unsigned char 
 15641 ;; Return value:  Size  Location     Type
 15642 ;;                  1    wreg      unsigned char 
 15643 ;; Registers used:
 15644 ;;		wreg, status,2, status,0
 15645 ;; Tracked objects:
 15646 ;;		On entry : 0/0
 15647 ;;		On exit  : 0/0
 15648 ;;		Unchanged: 0/0
 15649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15650 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15651 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15652 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;Total ram usage:        4 bytes
 15655 ;; Hardware stack levels used:    1
 15656 ;; Hardware stack levels required when called:    4
 15657 ;; This function calls:
 15658 ;;		Nothing
 15659 ;; This function is called by:
 15660 ;;		_DelayTimejudge
 15661 ;; This function uses a non-reentrant model
 15662 ;;
 15663                           
 15664                           
 15665                           ;psect for function ___bmul
 15666  1F30                     ___bmul:	
 15667                           
 15668                           ;incstack = 0
 15669                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15670                           ;___bmul@multiplier stored from wreg
 15671  1F30  0020               	movlb	0	; select bank0
 15672  1F31  00A3               	movwf	___bmul@multiplier
 15673  1F32  01A2               	clrf	___bmul@product
 15674  1F33                     l7789:	
 15675  1F33  1C23               	btfss	___bmul@multiplier,0
 15676  1F34  2F39               	goto	l7793
 15677  1F35  0820               	movf	___bmul@multiplicand,w
 15678  1F36  00A1               	movwf	??___bmul
 15679  1F37  0821               	movf	??___bmul,w
 15680  1F38  07A2               	addwf	___bmul@product,f
 15681  1F39                     l7793:	
 15682  1F39  1003               	clrc
 15683  1F3A  0DA0               	rlf	___bmul@multiplicand,f
 15684  1F3B  1003               	clrc
 15685  1F3C  0CA3               	rrf	___bmul@multiplier,f
 15686  1F3D  08A3               	movf	___bmul@multiplier,f
 15687  1F3E  1D03               	skipz
 15688  1F3F  2F33               	goto	l7789
 15689  1F40  0822               	movf	___bmul@product,w
 15690  1F41  0008               	return
 15691  1F42                     __end_of___bmul:	
 15692                           
 15693                           	psect	text108
 15694  1EDC                     __ptext108:	
 15695 ;; *************** function _getDelayOff_GO *****************
 15696 ;; Defined at:
 15697 ;;		line 105 in file "../src/DelayOff_B1.c"
 15698 ;; Parameters:    Size  Location     Type
 15699 ;;  sw              1    wreg     unsigned char 
 15700 ;; Auto vars:     Size  Location     Type
 15701 ;;  sw              1    2[BANK0 ] unsigned char 
 15702 ;;  go              1    3[BANK0 ] unsigned char 
 15703 ;; Return value:  Size  Location     Type
 15704 ;;                  1    wreg      unsigned char 
 15705 ;; Registers used:
 15706 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15707 ;; Tracked objects:
 15708 ;;		On entry : 0/0
 15709 ;;		On exit  : 0/0
 15710 ;;		Unchanged: 0/0
 15711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15715 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15716 ;;Total ram usage:        2 bytes
 15717 ;; Hardware stack levels used:    1
 15718 ;; Hardware stack levels required when called:    5
 15719 ;; This function calls:
 15720 ;;		_DelayOffPointSelect
 15721 ;; This function is called by:
 15722 ;;		_setDimmerLights_SwOff
 15723 ;;		_setRFSW_Control
 15724 ;; This function uses a non-reentrant model
 15725 ;;
 15726                           
 15727                           
 15728                           ;psect for function _getDelayOff_GO
 15729  1EDC                     _getDelayOff_GO:	
 15730                           
 15731                           ;incstack = 0
 15732                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15733                           ;getDelayOff_GO@sw stored from wreg
 15734  1EDC  0020               	movlb	0	; select bank0
 15735  1EDD  00A2               	movwf	getDelayOff_GO@sw
 15736                           
 15737                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 15738  1EDE  0822               	movf	getDelayOff_GO@sw,w
 15739  1EDF  319F  27D8         	fcall	_DelayOffPointSelect
 15740                           
 15741                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 15742  1EE1  0876               	movf	_DelayOff,w
 15743  1EE2  0086               	movwf	6
 15744  1EE3  3001               	movlw	1	; select bank2/3
 15745  1EE4  0087               	movwf	7
 15746  1EE5  3000               	movlw	0
 15747  1EE6  1881               	btfsc	1,1
 15748  1EE7  3001               	movlw	1
 15749  1EE8  0020               	movlb	0	; select bank0
 15750  1EE9  00A3               	movwf	getDelayOff_GO@go
 15751                           
 15752                           ;DelayOff_B1.c: 108: return go;
 15753  1EEA  0823               	movf	getDelayOff_GO@go,w
 15754  1EEB  0008               	return
 15755  1EEC                     __end_of_getDelayOff_GO:	
 15756                           
 15757                           	psect	text109
 15758  1EEC                     __ptext109:	
 15759 ;; *************** function _getDimmerLights_Status *****************
 15760 ;; Defined at:
 15761 ;;		line 785 in file "../src/Dimmer_B1.c"
 15762 ;; Parameters:    Size  Location     Type
 15763 ;;  lights          1    wreg     unsigned char 
 15764 ;; Auto vars:     Size  Location     Type
 15765 ;;  lights          1    2[BANK0 ] unsigned char 
 15766 ;;  status          1    3[BANK0 ] unsigned char 
 15767 ;; Return value:  Size  Location     Type
 15768 ;;                  1    wreg      unsigned char 
 15769 ;; Registers used:
 15770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15771 ;; Tracked objects:
 15772 ;;		On entry : 0/0
 15773 ;;		On exit  : 0/0
 15774 ;;		Unchanged: 0/0
 15775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15777 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15779 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15780 ;;Total ram usage:        2 bytes
 15781 ;; Hardware stack levels used:    1
 15782 ;; Hardware stack levels required when called:    5
 15783 ;; This function calls:
 15784 ;;		_DimmerLightsPointSelect
 15785 ;; This function is called by:
 15786 ;;		_setDimmerLights_ErrorClose
 15787 ;;		_Exception_Main
 15788 ;;		_setRFSW_Control
 15789 ;;		_setRFSW_AdjControl
 15790 ;; This function uses a non-reentrant model
 15791 ;;
 15792                           
 15793                           
 15794                           ;psect for function _getDimmerLights_Status
 15795  1EEC                     _getDimmerLights_Status:	
 15796                           
 15797                           ;incstack = 0
 15798                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15799                           ;getDimmerLights_Status@lights stored from wreg
 15800  1EEC  0020               	movlb	0	; select bank0
 15801  1EED  00A2               	movwf	getDimmerLights_Status@lights
 15802                           
 15803                           ;Dimmer_B1.c: 786: DimmerLightsPointSelect(lights);
 15804  1EEE  0822               	movf	getDimmerLights_Status@lights,w
 15805  1EEF  319F  2779         	fcall	_DimmerLightsPointSelect
 15806                           
 15807                           ;Dimmer_B1.c: 787: char status = DimmerLights->Status == 1 ? 1 : 0;
 15808  1EF1  0020               	movlb	0	; select bank0
 15809  1EF2  086F               	movf	_DimmerLights,w
 15810  1EF3  3E02               	addlw	2
 15811  1EF4  0086               	movwf	6
 15812  1EF5  3001               	movlw	1	; select bank2/3
 15813  1EF6  0087               	movwf	7
 15814  1EF7  3000               	movlw	0
 15815  1EF8  1881               	btfsc	1,1
 15816  1EF9  3001               	movlw	1
 15817  1EFA  00A3               	movwf	getDimmerLights_Status@status
 15818                           
 15819                           ;Dimmer_B1.c: 788: return status;
 15820  1EFB  0823               	movf	getDimmerLights_Status@status,w
 15821  1EFC  0008               	return
 15822  1EFD                     __end_of_getDimmerLights_Status:	
 15823                           
 15824                           	psect	text110
 15825  1F79                     __ptext110:	
 15826 ;; *************** function _DimmerLightsPointSelect *****************
 15827 ;; Defined at:
 15828 ;;		line 341 in file "../src/Dimmer_B1.c"
 15829 ;; Parameters:    Size  Location     Type
 15830 ;;  lights          1    wreg     unsigned char 
 15831 ;; Auto vars:     Size  Location     Type
 15832 ;;  lights          1    1[BANK0 ] unsigned char 
 15833 ;; Return value:  Size  Location     Type
 15834 ;;		None               void
 15835 ;; Registers used:
 15836 ;;		wreg
 15837 ;; Tracked objects:
 15838 ;;		On entry : 0/0
 15839 ;;		On exit  : 0/0
 15840 ;;		Unchanged: 0/0
 15841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15844 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15845 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15846 ;;Total ram usage:        2 bytes
 15847 ;; Hardware stack levels used:    1
 15848 ;; Hardware stack levels required when called:    4
 15849 ;; This function calls:
 15850 ;;		Nothing
 15851 ;; This function is called by:
 15852 ;;		_setDimmerLights_Initialization
 15853 ;;		_setDimmerLights_SwOn
 15854 ;;		_setDimmerLights_SwOff
 15855 ;;		_setDimmerLights_AdjOn
 15856 ;;		_setDimmerLights_Main
 15857 ;;		_getDimmerLights_Status
 15858 ;;		_setDimmerLights_ErrorClose
 15859 ;;		_setDimmerLights_AdjRF
 15860 ;;		_getAll_DimmerLights_AdjSw
 15861 ;;		_setDimmerLights_Status
 15862 ;;		_setDimmerLights_GO
 15863 ;;		_setDimmerLights_MaxmumValue
 15864 ;;		_setDimmerLights_Trigger
 15865 ;; This function uses a non-reentrant model
 15866 ;;
 15867                           
 15868                           
 15869                           ;psect for function _DimmerLightsPointSelect
 15870  1F79                     _DimmerLightsPointSelect:	
 15871                           
 15872                           ;incstack = 0
 15873                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15874                           ;DimmerLightsPointSelect@lights stored from wreg
 15875  1F79  0020               	movlb	0	; select bank0
 15876  1F7A  00A1               	movwf	DimmerLightsPointSelect@lights
 15877                           
 15878                           ;Dimmer_B1.c: 343: if (lights == 1) {
 15879  1F7B  0821               	movf	DimmerLightsPointSelect@lights,w
 15880  1F7C  3A01               	xorlw	1
 15881  1F7D  1D03               	skipz
 15882  1F7E  2F83               	goto	l762
 15883                           
 15884                           ;Dimmer_B1.c: 344: DimmerLights = &DimmerLights1;
 15885  1F7F  3041               	movlw	_DimmerLights1& (0+255)
 15886  1F80  00A0               	movwf	??_DimmerLightsPointSelect
 15887  1F81  0820               	movf	??_DimmerLightsPointSelect,w
 15888  1F82  00EF               	movwf	_DimmerLights
 15889  1F83                     l762:	
 15890                           
 15891                           ;Dimmer_B1.c: 345: }
 15892                           ;Dimmer_B1.c: 348: if (lights == 2) {
 15893  1F83  0821               	movf	DimmerLightsPointSelect@lights,w
 15894  1F84  3A02               	xorlw	2
 15895  1F85  1D03               	skipz
 15896  1F86  0008               	return
 15897                           
 15898                           ;Dimmer_B1.c: 349: DimmerLights = &DimmerLights2;
 15899  1F87  3052               	movlw	_DimmerLights2& (0+255)
 15900  1F88  00A0               	movwf	??_DimmerLightsPointSelect
 15901  1F89  0820               	movf	??_DimmerLightsPointSelect,w
 15902  1F8A  00EF               	movwf	_DimmerLights
 15903  1F8B  0008               	return
 15904  1F8C                     __end_of_DimmerLightsPointSelect:	
 15905                           
 15906                           	psect	text111
 15907  097C                     __ptext111:	
 15908 ;; *************** function _setBuz *****************
 15909 ;; Defined at:
 15910 ;;		line 22 in file "../src/Buzzer_B1.c"
 15911 ;; Parameters:    Size  Location     Type
 15912 ;;  count           1    wreg     unsigned char 
 15913 ;;  time            2    9[BANK0 ] int 
 15914 ;; Auto vars:     Size  Location     Type
 15915 ;;  count           1   12[BANK0 ] unsigned char 
 15916 ;; Return value:  Size  Location     Type
 15917 ;;		None               void
 15918 ;; Registers used:
 15919 ;;		wreg, status,2, status,0, pclath, cstack
 15920 ;; Tracked objects:
 15921 ;;		On entry : 0/0
 15922 ;;		On exit  : 0/0
 15923 ;;		Unchanged: 0/0
 15924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15925 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15926 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15928 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15929 ;;Total ram usage:        4 bytes
 15930 ;; Hardware stack levels used:    1
 15931 ;; Hardware stack levels required when called:    5
 15932 ;; This function calls:
 15933 ;;		___awdiv
 15934 ;; This function is called by:
 15935 ;;		_DlyOff_Main
 15936 ;;		_setDimmerLights_SwOn
 15937 ;;		_setDimmerLights_Adj
 15938 ;;		_my_MainTimer
 15939 ;;		_Exception_Main
 15940 ;;		_setTemp_Main
 15941 ;;		_setLog_Code
 15942 ;;		_setControl_Lights_Table
 15943 ;;		_setRFSW_Control
 15944 ;;		_setSw_Main
 15945 ;; This function uses a non-reentrant model
 15946 ;;
 15947                           
 15948                           
 15949                           ;psect for function _setBuz
 15950  097C                     _setBuz:	
 15951                           
 15952                           ;incstack = 0
 15953                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15954                           ;setBuz@count stored from wreg
 15955  097C  0020               	movlb	0	; select bank0
 15956  097D  00AC               	movwf	setBuz@count
 15957                           
 15958                           ;Buzzer_B1.c: 23: time /= 10;
 15959  097E  300A               	movlw	10
 15960  097F  00A0               	movwf	___awdiv@divisor
 15961  0980  3000               	movlw	0
 15962  0981  00A1               	movwf	___awdiv@divisor+1
 15963  0982  082A               	movf	setBuz@time+1,w
 15964  0983  01A3               	clrf	___awdiv@dividend+1
 15965  0984  07A3               	addwf	___awdiv@dividend+1,f
 15966  0985  0829               	movf	setBuz@time,w
 15967  0986  01A2               	clrf	___awdiv@dividend
 15968  0987  07A2               	addwf	___awdiv@dividend,f
 15969  0988  3188  20D0  3189   	fcall	___awdiv
 15970  098B  0020               	movlb	0	; select bank0
 15971  098C  0821               	movf	?___awdiv+1,w
 15972  098D  01AA               	clrf	setBuz@time+1
 15973  098E  07AA               	addwf	setBuz@time+1,f
 15974  098F  0820               	movf	?___awdiv,w
 15975  0990  01A9               	clrf	setBuz@time
 15976  0991  07A9               	addwf	setBuz@time,f
 15977                           
 15978                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15979  0992  0021               	movlb	1	; select bank1
 15980  0993  1C3C               	btfss	_Buz1^(0+128),0
 15981  0994  0008               	return
 15982                           
 15983                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15984  0995  18BC               	btfsc	_Buz1^(0+128),1
 15985  0996  29AD               	goto	l94
 15986                           
 15987                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15988  0997  14BC               	bsf	_Buz1^(0+128),1
 15989                           
 15990                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15991  0998  01BD               	clrf	(_Buz1^(0+128)+1)
 15992  0999  01BE               	clrf	((_Buz1+1)^(0+128)+1)
 15993                           
 15994                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15995  099A  0020               	movlb	0	; select bank0
 15996  099B  082C               	movf	setBuz@count,w
 15997  099C  00AB               	movwf	??_setBuz
 15998  099D  082B               	movf	??_setBuz,w
 15999  099E  0021               	movlb	1	; select bank1
 16000  099F  00BF               	movwf	(_Buz1^(0+128)+3)
 16001                           
 16002                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16003  09A0  0020               	movlb	0	; select bank0
 16004  09A1  082A               	movf	setBuz@time+1,w
 16005  09A2  0021               	movlb	1	; select bank1
 16006  09A3  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 16007  09A4  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 16008  09A5  0020               	movlb	0	; select bank0
 16009  09A6  0829               	movf	setBuz@time,w
 16010  09A7  0021               	movlb	1	; select bank1
 16011  09A8  01C2               	clrf	(_Buz1^(0+128)+6)
 16012  09A9  07C2               	addwf	(_Buz1^(0+128)+6),f
 16013                           
 16014                           ;Buzzer_B1.c: 30: RB3 = 1;
 16015  09AA  0020               	movlb	0	; select bank0
 16016  09AB  158D               	bsf	13,3	;volatile
 16017                           
 16018                           ;Buzzer_B1.c: 31: } else {
 16019  09AC  0008               	return
 16020  09AD                     l94:	
 16021                           
 16022                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16023  09AD  19BC               	btfsc	_Buz1^(0+128),3
 16024  09AE  29C1               	goto	l96
 16025                           
 16026                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16027  09AF  15BC               	bsf	_Buz1^(0+128),3
 16028                           
 16029                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16030  09B0  0020               	movlb	0	; select bank0
 16031  09B1  082C               	movf	setBuz@count,w
 16032  09B2  00AB               	movwf	??_setBuz
 16033  09B3  082B               	movf	??_setBuz,w
 16034  09B4  0021               	movlb	1	; select bank1
 16035  09B5  00C0               	movwf	(_Buz1^(0+128)+4)
 16036                           
 16037                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16038  09B6  0020               	movlb	0	; select bank0
 16039  09B7  082A               	movf	setBuz@time+1,w
 16040  09B8  0021               	movlb	1	; select bank1
 16041  09B9  01C5               	clrf	((_Buz1+1)^(0+128)+8)
 16042  09BA  07C5               	addwf	((_Buz1+1)^(0+128)+8),f
 16043  09BB  0020               	movlb	0	; select bank0
 16044  09BC  0829               	movf	setBuz@time,w
 16045  09BD  0021               	movlb	1	; select bank1
 16046  09BE  01C4               	clrf	(_Buz1^(0+128)+8)
 16047  09BF  07C4               	addwf	(_Buz1^(0+128)+8),f
 16048                           
 16049                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16050  09C0  0008               	return
 16051  09C1                     l96:	
 16052  09C1  1A3C               	btfsc	_Buz1^(0+128),4
 16053  09C2  0008               	return
 16054                           
 16055                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16056  09C3  163C               	bsf	_Buz1^(0+128),4
 16057                           
 16058                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16059  09C4  0020               	movlb	0	; select bank0
 16060  09C5  082C               	movf	setBuz@count,w
 16061  09C6  00AB               	movwf	??_setBuz
 16062  09C7  082B               	movf	??_setBuz,w
 16063  09C8  0021               	movlb	1	; select bank1
 16064  09C9  00C1               	movwf	(_Buz1^(0+128)+5)
 16065                           
 16066                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16067  09CA  0020               	movlb	0	; select bank0
 16068  09CB  082A               	movf	setBuz@time+1,w
 16069  09CC  0021               	movlb	1	; select bank1
 16070  09CD  01C7               	clrf	((_Buz1+1)^(0+128)+10)
 16071  09CE  07C7               	addwf	((_Buz1+1)^(0+128)+10),f
 16072  09CF  0020               	movlb	0	; select bank0
 16073  09D0  0829               	movf	setBuz@time,w
 16074  09D1  0021               	movlb	1	; select bank1
 16075  09D2  01C6               	clrf	(_Buz1^(0+128)+10)
 16076  09D3  07C6               	addwf	(_Buz1^(0+128)+10),f
 16077  09D4  0008               	return
 16078  09D5                     __end_of_setBuz:	
 16079                           
 16080                           	psect	text112
 16081  08D0                     __ptext112:	
 16082 ;; *************** function ___awdiv *****************
 16083 ;; Defined at:
 16084 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16085 ;; Parameters:    Size  Location     Type
 16086 ;;  divisor         2    0[BANK0 ] int 
 16087 ;;  dividend        2    2[BANK0 ] int 
 16088 ;; Auto vars:     Size  Location     Type
 16089 ;;  quotient        2    7[BANK0 ] int 
 16090 ;;  sign            1    6[BANK0 ] unsigned char 
 16091 ;;  counter         1    5[BANK0 ] unsigned char 
 16092 ;; Return value:  Size  Location     Type
 16093 ;;                  2    0[BANK0 ] int 
 16094 ;; Registers used:
 16095 ;;		wreg, status,2, status,0
 16096 ;; Tracked objects:
 16097 ;;		On entry : 0/0
 16098 ;;		On exit  : 0/0
 16099 ;;		Unchanged: 0/0
 16100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16101 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16102 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16103 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16104 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16105 ;;Total ram usage:        9 bytes
 16106 ;; Hardware stack levels used:    1
 16107 ;; Hardware stack levels required when called:    4
 16108 ;; This function calls:
 16109 ;;		Nothing
 16110 ;; This function is called by:
 16111 ;;		_setBuz
 16112 ;; This function uses a non-reentrant model
 16113 ;;
 16114                           
 16115                           
 16116                           ;psect for function ___awdiv
 16117  08D0                     ___awdiv:	
 16118                           
 16119                           ;incstack = 0
 16120                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16121  08D0  0020               	movlb	0	; select bank0
 16122  08D1  01A6               	clrf	___awdiv@sign
 16123  08D2  1FA1               	btfss	___awdiv@divisor+1,7
 16124  08D3  28DB               	goto	l8071
 16125  08D4  09A0               	comf	___awdiv@divisor,f
 16126  08D5  09A1               	comf	___awdiv@divisor+1,f
 16127  08D6  0AA0               	incf	___awdiv@divisor,f
 16128  08D7  1903               	skipnz
 16129  08D8  0AA1               	incf	___awdiv@divisor+1,f
 16130  08D9  01A6               	clrf	___awdiv@sign
 16131  08DA  0AA6               	incf	___awdiv@sign,f
 16132  08DB                     l8071:	
 16133  08DB  1FA3               	btfss	___awdiv@dividend+1,7
 16134  08DC  28E6               	goto	l8077
 16135  08DD  09A2               	comf	___awdiv@dividend,f
 16136  08DE  09A3               	comf	___awdiv@dividend+1,f
 16137  08DF  0AA2               	incf	___awdiv@dividend,f
 16138  08E0  1903               	skipnz
 16139  08E1  0AA3               	incf	___awdiv@dividend+1,f
 16140  08E2  3001               	movlw	1
 16141  08E3  00A4               	movwf	??___awdiv
 16142  08E4  0824               	movf	??___awdiv,w
 16143  08E5  06A6               	xorwf	___awdiv@sign,f
 16144  08E6                     l8077:	
 16145  08E6  01A7               	clrf	___awdiv@quotient
 16146  08E7  01A8               	clrf	___awdiv@quotient+1
 16147  08E8  0821               	movf	___awdiv@divisor+1,w
 16148  08E9  0420               	iorwf	___awdiv@divisor,w
 16149  08EA  1903               	skipnz
 16150  08EB  2915               	goto	l8099
 16151  08EC  01A5               	clrf	___awdiv@counter
 16152  08ED  0AA5               	incf	___awdiv@counter,f
 16153  08EE                     l8087:	
 16154  08EE  1BA1               	btfsc	___awdiv@divisor+1,7
 16155  08EF  28FA               	goto	l8089
 16156  08F0  3001               	movlw	1
 16157  08F1                     u8415:	
 16158  08F1  35A0               	lslf	___awdiv@divisor,f
 16159  08F2  0DA1               	rlf	___awdiv@divisor+1,f
 16160  08F3  0B89               	decfsz	9,f
 16161  08F4  28F1               	goto	u8415
 16162  08F5  3001               	movlw	1
 16163  08F6  00A4               	movwf	??___awdiv
 16164  08F7  0824               	movf	??___awdiv,w
 16165  08F8  07A5               	addwf	___awdiv@counter,f
 16166  08F9  28EE               	goto	l8087
 16167  08FA                     l8089:	
 16168  08FA  3001               	movlw	1
 16169  08FB                     u8435:	
 16170  08FB  35A7               	lslf	___awdiv@quotient,f
 16171  08FC  0DA8               	rlf	___awdiv@quotient+1,f
 16172  08FD  0B89               	decfsz	9,f
 16173  08FE  28FB               	goto	u8435
 16174  08FF  0821               	movf	___awdiv@divisor+1,w
 16175  0900  0223               	subwf	___awdiv@dividend+1,w
 16176  0901  1D03               	skipz
 16177  0902  2905               	goto	u8445
 16178  0903  0820               	movf	___awdiv@divisor,w
 16179  0904  0222               	subwf	___awdiv@dividend,w
 16180  0905                     u8445:	
 16181  0905  1C03               	skipc
 16182  0906  290C               	goto	l8095
 16183  0907  0820               	movf	___awdiv@divisor,w
 16184  0908  02A2               	subwf	___awdiv@dividend,f
 16185  0909  0821               	movf	___awdiv@divisor+1,w
 16186  090A  3BA3               	subwfb	___awdiv@dividend+1,f
 16187  090B  1427               	bsf	___awdiv@quotient,0
 16188  090C                     l8095:	
 16189  090C  3001               	movlw	1
 16190  090D                     u8455:	
 16191  090D  36A1               	lsrf	___awdiv@divisor+1,f
 16192  090E  0CA0               	rrf	___awdiv@divisor,f
 16193  090F  0B89               	decfsz	9,f
 16194  0910  290D               	goto	u8455
 16195  0911  3001               	movlw	1
 16196  0912  02A5               	subwf	___awdiv@counter,f
 16197  0913  1D03               	btfss	3,2
 16198  0914  28FA               	goto	l8089
 16199  0915                     l8099:	
 16200  0915  0826               	movf	___awdiv@sign,w
 16201  0916  1903               	btfsc	3,2
 16202  0917  291D               	goto	l8103
 16203  0918  09A7               	comf	___awdiv@quotient,f
 16204  0919  09A8               	comf	___awdiv@quotient+1,f
 16205  091A  0AA7               	incf	___awdiv@quotient,f
 16206  091B  1903               	skipnz
 16207  091C  0AA8               	incf	___awdiv@quotient+1,f
 16208  091D                     l8103:	
 16209  091D  0828               	movf	___awdiv@quotient+1,w
 16210  091E  01A1               	clrf	?___awdiv+1
 16211  091F  07A1               	addwf	?___awdiv+1,f
 16212  0920  0827               	movf	___awdiv@quotient,w
 16213  0921  01A0               	clrf	?___awdiv
 16214  0922  07A0               	addwf	?___awdiv,f
 16215  0923  0008               	return
 16216  0924                     __end_of___awdiv:	
 16217                           
 16218                           	psect	text113
 16219  1E0C                     __ptext113:	
 16220 ;; *************** function _DelayOff_Initialization *****************
 16221 ;; Defined at:
 16222 ;;		line 26 in file "../src/DelayOff_B1.c"
 16223 ;; Parameters:    Size  Location     Type
 16224 ;;		None
 16225 ;; Auto vars:     Size  Location     Type
 16226 ;;		None
 16227 ;; Return value:  Size  Location     Type
 16228 ;;		None               void
 16229 ;; Registers used:
 16230 ;;		wreg, status,2, status,0, pclath, cstack
 16231 ;; Tracked objects:
 16232 ;;		On entry : 0/0
 16233 ;;		On exit  : 0/0
 16234 ;;		Unchanged: 0/0
 16235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16240 ;;Total ram usage:        0 bytes
 16241 ;; Hardware stack levels used:    1
 16242 ;; Hardware stack levels required when called:    6
 16243 ;; This function calls:
 16244 ;;		_DlyOff_Initialization
 16245 ;; This function is called by:
 16246 ;;		_main
 16247 ;; This function uses a non-reentrant model
 16248 ;;
 16249                           
 16250                           
 16251                           ;psect for function _DelayOff_Initialization
 16252  1E0C                     _DelayOff_Initialization:	
 16253                           
 16254                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16255                           
 16256                           ;incstack = 0
 16257                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16258  1E0C  3001               	movlw	1
 16259  1E0D  319D  25F3  319E   	fcall	_DlyOff_Initialization
 16260                           
 16261                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16262  1E10  3002               	movlw	2
 16263  1E11  319D  25F3         	fcall	_DlyOff_Initialization
 16264  1E13  0008               	return
 16265  1E14                     __end_of_DelayOff_Initialization:	
 16266                           
 16267                           	psect	text114
 16268  1DF3                     __ptext114:	
 16269 ;; *************** function _DlyOff_Initialization *****************
 16270 ;; Defined at:
 16271 ;;		line 56 in file "../src/DelayOff_B1.c"
 16272 ;; Parameters:    Size  Location     Type
 16273 ;;  sw              1    wreg     unsigned char 
 16274 ;; Auto vars:     Size  Location     Type
 16275 ;;  sw              1    2[BANK0 ] unsigned char 
 16276 ;; Return value:  Size  Location     Type
 16277 ;;		None               void
 16278 ;; Registers used:
 16279 ;;		wreg, status,2, status,0, pclath, cstack
 16280 ;; Tracked objects:
 16281 ;;		On entry : 0/0
 16282 ;;		On exit  : 0/0
 16283 ;;		Unchanged: 0/0
 16284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16286 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16288 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16289 ;;Total ram usage:        1 bytes
 16290 ;; Hardware stack levels used:    1
 16291 ;; Hardware stack levels required when called:    5
 16292 ;; This function calls:
 16293 ;;		_DelayOffPointSelect
 16294 ;; This function is called by:
 16295 ;;		_DelayOff_Initialization
 16296 ;; This function uses a non-reentrant model
 16297 ;;
 16298                           
 16299                           
 16300                           ;psect for function _DlyOff_Initialization
 16301  1DF3                     _DlyOff_Initialization:	
 16302                           
 16303                           ;incstack = 0
 16304                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16305                           ;DlyOff_Initialization@sw stored from wreg
 16306  1DF3  0020               	movlb	0	; select bank0
 16307  1DF4  00A2               	movwf	DlyOff_Initialization@sw
 16308                           
 16309                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16310  1DF5  0822               	movf	DlyOff_Initialization@sw,w
 16311  1DF6  319F  27D8         	fcall	_DelayOffPointSelect
 16312  1DF8  0008               	return
 16313  1DF9                     __end_of_DlyOff_Initialization:	
 16314                           
 16315                           	psect	text115
 16316  1FD8                     __ptext115:	
 16317 ;; *************** function _DelayOffPointSelect *****************
 16318 ;; Defined at:
 16319 ;;		line 7 in file "../src/DelayOff_B1.c"
 16320 ;; Parameters:    Size  Location     Type
 16321 ;;  sw              1    wreg     unsigned char 
 16322 ;; Auto vars:     Size  Location     Type
 16323 ;;  sw              1    1[BANK0 ] unsigned char 
 16324 ;; Return value:  Size  Location     Type
 16325 ;;		None               void
 16326 ;; Registers used:
 16327 ;;		wreg
 16328 ;; Tracked objects:
 16329 ;;		On entry : 0/0
 16330 ;;		On exit  : 0/0
 16331 ;;		Unchanged: 0/0
 16332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16334 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16335 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16336 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16337 ;;Total ram usage:        2 bytes
 16338 ;; Hardware stack levels used:    1
 16339 ;; Hardware stack levels required when called:    4
 16340 ;; This function calls:
 16341 ;;		Nothing
 16342 ;; This function is called by:
 16343 ;;		_DlyOff_Initialization
 16344 ;;		_DlyOff_Main
 16345 ;;		_setDelayOff_GO
 16346 ;;		_getDelayOff_GO
 16347 ;; This function uses a non-reentrant model
 16348 ;;
 16349                           
 16350                           
 16351                           ;psect for function _DelayOffPointSelect
 16352  1FD8                     _DelayOffPointSelect:	
 16353                           
 16354                           ;incstack = 0
 16355                           ; Regs used in _DelayOffPointSelect: [wreg]
 16356                           ;DelayOffPointSelect@sw stored from wreg
 16357  1FD8  0020               	movlb	0	; select bank0
 16358  1FD9  00A1               	movwf	DelayOffPointSelect@sw
 16359                           
 16360                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16361  1FDA  0821               	movf	DelayOffPointSelect@sw,w
 16362  1FDB  3A01               	xorlw	1
 16363  1FDC  1D03               	skipz
 16364  1FDD  2FE3               	goto	l8027
 16365                           
 16366                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16367  1FDE  30D7               	movlw	_DlySw1& (0+255)
 16368  1FDF  00A0               	movwf	??_DelayOffPointSelect
 16369  1FE0  0820               	movf	??_DelayOffPointSelect,w
 16370  1FE1  00F6               	movwf	_DelayOff
 16371                           
 16372                           ;DelayOff_B1.c: 11: }
 16373  1FE2  0008               	return
 16374  1FE3                     l8027:	
 16375                           
 16376                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 16377  1FE3  0821               	movf	DelayOffPointSelect@sw,w
 16378  1FE4  3A02               	xorlw	2
 16379  1FE5  1D03               	skipz
 16380  1FE6  0008               	return
 16381                           
 16382                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 16383  1FE7  30DC               	movlw	_DlySw2& (0+255)
 16384  1FE8  00A0               	movwf	??_DelayOffPointSelect
 16385  1FE9  0820               	movf	??_DelayOffPointSelect,w
 16386  1FEA  00F6               	movwf	_DelayOff
 16387  1FEB  0008               	return
 16388  1FEC                     __end_of_DelayOffPointSelect:	
 16389                           
 16390                           	psect	text116
 16391  167A                     __ptext116:	
 16392 ;; *************** function _Buzzer_Main *****************
 16393 ;; Defined at:
 16394 ;;		line 46 in file "../src/Buzzer_B1.c"
 16395 ;; Parameters:    Size  Location     Type
 16396 ;;		None
 16397 ;; Auto vars:     Size  Location     Type
 16398 ;;		None
 16399 ;; Return value:  Size  Location     Type
 16400 ;;		None               void
 16401 ;; Registers used:
 16402 ;;		wreg, status,2, status,0
 16403 ;; Tracked objects:
 16404 ;;		On entry : 0/0
 16405 ;;		On exit  : 0/0
 16406 ;;		Unchanged: 0/0
 16407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16410 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16411 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16412 ;;Total ram usage:        1 bytes
 16413 ;; Hardware stack levels used:    1
 16414 ;; Hardware stack levels required when called:    4
 16415 ;; This function calls:
 16416 ;;		Nothing
 16417 ;; This function is called by:
 16418 ;;		_main
 16419 ;; This function uses a non-reentrant model
 16420 ;;
 16421                           
 16422                           
 16423                           ;psect for function _Buzzer_Main
 16424  167A                     _Buzzer_Main:	
 16425                           
 16426                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 16427                           
 16428                           ;incstack = 0
 16429                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 16430  167A  0021               	movlb	1	; select bank1
 16431  167B  1CBC               	btfss	_Buz1^(0+128),1
 16432  167C  0008               	return
 16433                           
 16434                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 16435  167D  3001               	movlw	1
 16436  167E  07BD               	addwf	(_Buz1^(0+128)+1),f
 16437  167F  3000               	movlw	0
 16438  1680  3DBE               	addwfc	((_Buz1+1)^(0+128)+1),f
 16439                           
 16440                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 16441  1681  0843               	movf	((_Buz1+1)^(0+128)+6),w
 16442  1682  023E               	subwf	((_Buz1+1)^(0+128)+1),w
 16443  1683  1D03               	skipz
 16444  1684  2E87               	goto	u10595
 16445  1685  0842               	movf	(_Buz1^(0+128)+6),w
 16446  1686  023D               	subwf	(_Buz1^(0+128)+1),w
 16447  1687                     u10595:	
 16448  1687  1C03               	skipc
 16449  1688  0008               	return
 16450                           
 16451                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 16452  1689  01BD               	clrf	(_Buz1^(0+128)+1)
 16453  168A  01BE               	clrf	((_Buz1+1)^(0+128)+1)
 16454                           
 16455                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 16456  168B  12BC               	bcf	_Buz1^(0+128),5
 16457  168C  0020               	movlb	0	; select bank0
 16458  168D  1D8D               	btfss	13,3	;volatile
 16459  168E  2E91               	goto	l9509
 16460  168F  0021               	movlb	1	; select bank1
 16461  1690  16BC               	bsf	_Buz1^(0+128),5
 16462  1691                     l9509:	
 16463                           
 16464                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 16465  1691  0021               	movlb	1	; select bank1
 16466  1692  1ABC               	btfsc	_Buz1^(0+128),5
 16467  1693  2EBD               	goto	l104
 16468                           
 16469                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 16470  1694  08BF               	movf	(_Buz1^(0+128)+3),f
 16471  1695  1D03               	skipz
 16472  1696  2EB9               	goto	l105
 16473                           
 16474                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 16475  1697  1DBC               	btfss	_Buz1^(0+128),3
 16476  1698  2EA7               	goto	l106
 16477                           
 16478                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 16479  1699  11BC               	bcf	_Buz1^(0+128),3
 16480                           
 16481                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 16482  169A  0840               	movf	(_Buz1^(0+128)+4),w
 16483  169B  0020               	movlb	0	; select bank0
 16484  169C  00A0               	movwf	??_Buzzer_Main
 16485  169D  0820               	movf	??_Buzzer_Main,w
 16486  169E  0021               	movlb	1	; select bank1
 16487  169F  00BF               	movwf	(_Buz1^(0+128)+3)
 16488                           
 16489                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 16490  16A0  0845               	movf	((_Buz1+1)^(0+128)+8),w
 16491  16A1  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 16492  16A2  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 16493  16A3  0844               	movf	(_Buz1^(0+128)+8),w
 16494  16A4  01C2               	clrf	(_Buz1^(0+128)+6)
 16495  16A5  07C2               	addwf	(_Buz1^(0+128)+6),f
 16496                           
 16497                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 16498  16A6  0008               	return
 16499  16A7                     l106:	
 16500  16A7  1E3C               	btfss	_Buz1^(0+128),4
 16501  16A8  2EB7               	goto	l108
 16502                           
 16503                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 16504  16A9  123C               	bcf	_Buz1^(0+128),4
 16505                           
 16506                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 16507  16AA  0841               	movf	(_Buz1^(0+128)+5),w
 16508  16AB  0020               	movlb	0	; select bank0
 16509  16AC  00A0               	movwf	??_Buzzer_Main
 16510  16AD  0820               	movf	??_Buzzer_Main,w
 16511  16AE  0021               	movlb	1	; select bank1
 16512  16AF  00BF               	movwf	(_Buz1^(0+128)+3)
 16513                           
 16514                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 16515  16B0  0847               	movf	((_Buz1+1)^(0+128)+10),w
 16516  16B1  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 16517  16B2  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 16518  16B3  0846               	movf	(_Buz1^(0+128)+10),w
 16519  16B4  01C2               	clrf	(_Buz1^(0+128)+6)
 16520  16B5  07C2               	addwf	(_Buz1^(0+128)+6),f
 16521                           
 16522                           ;Buzzer_B1.c: 62: } else {
 16523  16B6  0008               	return
 16524  16B7                     l108:	
 16525                           
 16526                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 16527  16B7  10BC               	bcf	_Buz1^(0+128),1
 16528                           
 16529                           ;Buzzer_B1.c: 64: }
 16530                           ;Buzzer_B1.c: 65: } else {
 16531  16B8  0008               	return
 16532  16B9                     l105:	
 16533                           
 16534                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 16535  16B9  16BC               	bsf	_Buz1^(0+128),5
 16536                           
 16537                           ;Buzzer_B1.c: 68: RB3 = 1;
 16538  16BA  0020               	movlb	0	; select bank0
 16539  16BB  158D               	bsf	13,3	;volatile
 16540                           
 16541                           ;Buzzer_B1.c: 69: }
 16542                           ;Buzzer_B1.c: 70: } else {
 16543  16BC  0008               	return
 16544  16BD                     l104:	
 16545                           
 16546                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 16547  16BD  12BC               	bcf	_Buz1^(0+128),5
 16548                           
 16549                           ;Buzzer_B1.c: 73: RB3 = 0;
 16550  16BE  0020               	movlb	0	; select bank0
 16551  16BF  118D               	bcf	13,3	;volatile
 16552                           
 16553                           ;Buzzer_B1.c: 75: Buz1.Count--;
 16554  16C0  3001               	movlw	1
 16555  16C1  0021               	movlb	1	; select bank1
 16556  16C2  02BF               	subwf	(_Buz1^(0+128)+3),f
 16557  16C3  0008               	return
 16558  16C4                     __end_of_Buzzer_Main:	
 16559                           
 16560                           	psect	text117
 16561  1DCB                     __ptext117:	
 16562 ;; *************** function _Buzzer_Initialization *****************
 16563 ;; Defined at:
 16564 ;;		line 11 in file "../src/Buzzer_B1.c"
 16565 ;; Parameters:    Size  Location     Type
 16566 ;;		None
 16567 ;; Auto vars:     Size  Location     Type
 16568 ;;		None
 16569 ;; Return value:  Size  Location     Type
 16570 ;;		None               void
 16571 ;; Registers used:
 16572 ;;		None
 16573 ;; Tracked objects:
 16574 ;;		On entry : 0/0
 16575 ;;		On exit  : 0/0
 16576 ;;		Unchanged: 0/0
 16577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16582 ;;Total ram usage:        0 bytes
 16583 ;; Hardware stack levels used:    1
 16584 ;; Hardware stack levels required when called:    4
 16585 ;; This function calls:
 16586 ;;		Nothing
 16587 ;; This function is called by:
 16588 ;;		_main
 16589 ;; This function uses a non-reentrant model
 16590 ;;
 16591                           
 16592                           
 16593                           ;psect for function _Buzzer_Initialization
 16594  1DCB                     _Buzzer_Initialization:	
 16595                           
 16596                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 16597                           
 16598                           ;incstack = 0
 16599                           ; Regs used in _Buzzer_Initialization: []
 16600  1DCB  0021               	movlb	1	; select bank1
 16601  1DCC  143C               	bsf	_Buz1^(0+128),0
 16602  1DCD  0008               	return
 16603  1DCE                     __end_of_Buzzer_Initialization:	
 16604                           
 16605                           	psect	intentry
 16606  0004                     __pintentry:	
 16607 ;; *************** function _ISR *****************
 16608 ;; Defined at:
 16609 ;;		line 112 in file "../src/MCU_B1.c"
 16610 ;; Parameters:    Size  Location     Type
 16611 ;;		None
 16612 ;; Auto vars:     Size  Location     Type
 16613 ;;		None
 16614 ;; Return value:  Size  Location     Type
 16615 ;;		None               void
 16616 ;; Registers used:
 16617 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16618 ;; Tracked objects:
 16619 ;;		On entry : 0/0
 16620 ;;		On exit  : 0/0
 16621 ;;		Unchanged: 0/0
 16622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16625 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16626 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16627 ;;Total ram usage:        1 bytes
 16628 ;; Hardware stack levels used:    1
 16629 ;; Hardware stack levels required when called:    3
 16630 ;; This function calls:
 16631 ;;		_IOC_ISR
 16632 ;;		_TMR1_ISR
 16633 ;; This function is called by:
 16634 ;;		Interrupt level 1
 16635 ;; This function uses a non-reentrant model
 16636 ;;
 16637                           
 16638  0004                     _ISR:	
 16639                           
 16640                           ;incstack = 0
 16641                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16642  0004  147E               	bsf	126,0	;set compiler interrupt flag
 16643  0005  3180               	pagesel	$
 16644  0006  0020               	movlb	0	; select bank0
 16645  0007  087F               	movf	127,w
 16646  0008  00F5               	movwf	??_ISR
 16647                           
 16648                           ;MCU_B1.c: 115: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 16649  0009  198B               	btfsc	11,3	;volatile
 16650  000A  1C0B               	btfss	11,0	;volatile
 16651  000B  2813               	goto	i1l1280
 16652  000C  0027               	movlb	7	; select bank7
 16653  000D  1D16               	btfss	22,2	;volatile
 16654  000E  2813               	goto	i1l1280
 16655                           
 16656                           ;MCU_B1.c: 116: IOC_ISR();
 16657  000F  319E  26A2  3180   	fcall	_IOC_ISR
 16658                           
 16659                           ;MCU_B1.c: 117: }
 16660  0012  281B               	goto	i1l1283
 16661  0013                     i1l1280:	
 16662                           
 16663                           ;MCU_B1.c: 125: else if (TMR1IE == 1 && TMR1IF == 1) {
 16664  0013  0021               	movlb	1	; select bank1
 16665  0014  1C11               	btfss	17,0	;volatile
 16666  0015  281B               	goto	i1l1283
 16667  0016  0020               	movlb	0	; select bank0
 16668  0017  1C11               	btfss	17,0	;volatile
 16669  0018  281B               	goto	i1l1283
 16670                           
 16671                           ;MCU_B1.c: 126: TMR1_ISR();
 16672  0019  3192  22A9         	fcall	_TMR1_ISR
 16673  001B                     i1l1283:	
 16674                           ;MCU_B1.c: 127: }
 16675                           ;MCU_B1.c: 143: return;
 16676                           
 16677  001B  0875               	movf	??_ISR,w
 16678  001C  0020               	movlb	0	; select bank0
 16679  001D  00FF               	movwf	127
 16680  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 16681  001F  0009               	retfie
 16682  0020                     __end_of_ISR:	
 16683                           
 16684                           	psect	text119
 16685  12A9                     __ptext119:	
 16686 ;; *************** function _TMR1_ISR *****************
 16687 ;; Defined at:
 16688 ;;		line 231 in file "../src/MCU_B1.c"
 16689 ;; Parameters:    Size  Location     Type
 16690 ;;		None
 16691 ;; Auto vars:     Size  Location     Type
 16692 ;;		None
 16693 ;; Return value:  Size  Location     Type
 16694 ;;		None               void
 16695 ;; Registers used:
 16696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16697 ;; Tracked objects:
 16698 ;;		On entry : 0/0
 16699 ;;		On exit  : 0/0
 16700 ;;		Unchanged: 0/0
 16701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16706 ;;Total ram usage:        0 bytes
 16707 ;; Hardware stack levels used:    1
 16708 ;; Hardware stack levels required when called:    2
 16709 ;; This function calls:
 16710 ;;		_setDimmerLights_IntrControl
 16711 ;; This function is called by:
 16712 ;;		_ISR
 16713 ;; This function uses a non-reentrant model
 16714 ;;
 16715                           
 16716                           
 16717                           ;psect for function _TMR1_ISR
 16718  12A9                     _TMR1_ISR:	
 16719                           
 16720                           ;MCU_B1.c: 233: TMR1H = (int)((65536-1480)/256);
 16721                           
 16722                           ;incstack = 0
 16723                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16724  12A9  30FA               	movlw	250
 16725  12AA  0020               	movlb	0	; select bank0
 16726  12AB  0097               	movwf	23	;volatile
 16727                           
 16728                           ;MCU_B1.c: 234: TMR1L = (int)((65536-1480)%256);
 16729  12AC  3038               	movlw	56
 16730  12AD  0096               	movwf	22	;volatile
 16731                           
 16732                           ;MCU_B1.c: 235: TMR1IF = 0;
 16733  12AE  1011               	bcf	17,0	;volatile
 16734                           
 16735                           ;MCU_B1.c: 240: setDimmerLights_IntrControl(1);
 16736  12AF  3001               	movlw	1
 16737  12B0  3180  2050  3192   	fcall	_setDimmerLights_IntrControl
 16738                           
 16739                           ;MCU_B1.c: 244: setDimmerLights_IntrControl(2);
 16740  12B3  3002               	movlw	2
 16741  12B4  3180  2050  3192   	fcall	_setDimmerLights_IntrControl
 16742                           
 16743                           ;MCU_B1.c: 253: Timer1.Count++;
 16744  12B7  3001               	movlw	1
 16745  12B8  0022               	movlb	2	; select bank2
 16746  12B9  07BF               	addwf	(_Timer1^(0+256)+1),f
 16747  12BA  3000               	movlw	0
 16748  12BB  3DC0               	addwfc	((_Timer1+1)^(0+256)+1),f
 16749                           
 16750                           ;MCU_B1.c: 254: if (Timer1.Count == 100) {
 16751  12BC  3001               	movlw	1
 16752  12BD  3E3E               	addlw	_Timer1& (0+255)
 16753  12BE  0086               	movwf	6
 16754  12BF  3001               	movlw	1	; select bank2/3
 16755  12C0  0087               	movwf	7
 16756  12C1  3F40               	moviw [0]fsr1
 16757  12C2  3A64               	xorlw	100
 16758  12C3  1D03               	skipz
 16759  12C4  2AC7               	goto	u718_25
 16760  12C5  3F41               	moviw [1]fsr1
 16761  12C6  3A00               	xorlw	0
 16762  12C7                     u718_25:	
 16763  12C7  1D03               	skipz
 16764  12C8  0008               	return
 16765                           
 16766                           ;MCU_B1.c: 255: Timer1.Count = 0;
 16767  12C9  01BF               	clrf	(_Timer1^(0+256)+1)
 16768  12CA  01C0               	clrf	((_Timer1+1)^(0+256)+1)
 16769                           
 16770                           ;MCU_B1.c: 256: Timer1.Timeout = 1;
 16771  12CB  143E               	bsf	_Timer1^(0+256),0
 16772  12CC  0008               	return
 16773  12CD                     __end_of_TMR1_ISR:	
 16774                           
 16775                           	psect	text120
 16776  0050                     __ptext120:	
 16777 ;; *************** function _setDimmerLights_IntrControl *****************
 16778 ;; Defined at:
 16779 ;;		line 116 in file "../src/Dimmer_B1.c"
 16780 ;; Parameters:    Size  Location     Type
 16781 ;;  lights          1    wreg     unsigned char 
 16782 ;; Auto vars:     Size  Location     Type
 16783 ;;  lights          1    4[COMMON] unsigned char 
 16784 ;; Return value:  Size  Location     Type
 16785 ;;		None               void
 16786 ;; Registers used:
 16787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16788 ;; Tracked objects:
 16789 ;;		On entry : 0/0
 16790 ;;		On exit  : 0/0
 16791 ;;		Unchanged: 0/0
 16792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16794 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16795 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16796 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16797 ;;Total ram usage:        3 bytes
 16798 ;; Hardware stack levels used:    1
 16799 ;; Hardware stack levels required when called:    1
 16800 ;; This function calls:
 16801 ;;		_DimmerIntrPointSelect
 16802 ;; This function is called by:
 16803 ;;		_TMR1_ISR
 16804 ;; This function uses a non-reentrant model
 16805 ;;
 16806                           
 16807                           
 16808                           ;psect for function _setDimmerLights_IntrControl
 16809  0050                     _setDimmerLights_IntrControl:	
 16810                           
 16811                           ;incstack = 0
 16812                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16813                           ;setDimmerLights_IntrControl@lights stored from wreg
 16814  0050  00F4               	movwf	setDimmerLights_IntrControl@lights
 16815                           
 16816                           ;Dimmer_B1.c: 118: DimmerIntrPointSelect(lights);
 16817  0051  0874               	movf	setDimmerLights_IntrControl@lights,w
 16818  0052  319F  2766  3180   	fcall	_DimmerIntrPointSelect
 16819                           
 16820                           ;Dimmer_B1.c: 119: if (DimmerLightsIntr->GO == 1) {
 16821  0055  0A77               	incf	_DimmerLightsIntr,w
 16822  0056  0086               	movwf	6
 16823  0057  3001               	movlw	1	; select bank2/3
 16824  0058  0087               	movwf	7
 16825  0059  1C01               	btfss	1,0
 16826  005A  28A5               	goto	i1l6795
 16827                           
 16828                           ;Dimmer_B1.c: 120: DimmerLightsIntr->Count++;
 16829  005B  3001               	movlw	1
 16830  005C  00F2               	movwf	??_setDimmerLights_IntrControl
 16831  005D  0877               	movf	_DimmerLightsIntr,w
 16832  005E  3E03               	addlw	3
 16833  005F  0086               	movwf	6
 16834  0060  3001               	movlw	1	; select bank2/3
 16835  0061  0087               	movwf	7
 16836  0062  0872               	movf	??_setDimmerLights_IntrControl,w
 16837  0063  0781               	addwf	1,f
 16838                           
 16839                           ;Dimmer_B1.c: 121: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimm
      +                          er.Correction)) {
 16840  0064  0877               	movf	_DimmerLightsIntr,w
 16841  0065  3E04               	addlw	4
 16842  0066  0086               	movwf	6
 16843  0067  3001               	movlw	1	; select bank2/3
 16844  0068  0087               	movwf	7
 16845  0069  0801               	movf	1,w
 16846  006A  0021               	movlb	1	; select bank1
 16847  006B  074A               	addwf	(_Dimmer^(0+128)+2),w	;volatile
 16848  006C  00F2               	movwf	??_setDimmerLights_IntrControl
 16849  006D  01F3               	clrf	??_setDimmerLights_IntrControl+1
 16850  006E  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 16851  006F  0877               	movf	_DimmerLightsIntr,w
 16852  0070  3E03               	addlw	3
 16853  0071  0086               	movwf	6
 16854  0072  3001               	movlw	1	; select bank2/3
 16855  0073  0087               	movwf	7
 16856  0074  0873               	movf	??_setDimmerLights_IntrControl+1,w
 16857  0075  3A80               	xorlw	128
 16858  0076  3C80               	sublw	128
 16859  0077  1D03               	skipz
 16860  0078  287B               	goto	u620_25
 16861  0079  0872               	movf	??_setDimmerLights_IntrControl,w
 16862  007A  0201               	subwf	1,w
 16863  007B                     u620_25:	
 16864  007B  1C03               	skipc
 16865  007C  2989               	goto	i1l732
 16866                           
 16867                           ;Dimmer_B1.c: 122: DimmerLightsIntr->Count = 0;
 16868  007D  0877               	movf	_DimmerLightsIntr,w
 16869  007E  3E03               	addlw	3
 16870  007F  0086               	movwf	6
 16871  0080  3001               	movlw	1	; select bank2/3
 16872  0081  0087               	movwf	7
 16873  0082  0181               	clrf	1
 16874                           
 16875                           ;Dimmer_B1.c: 123: DimmerLightsIntr->GO = 0;
 16876  0083  0A77               	incf	_DimmerLightsIntr,w
 16877  0084  0086               	movwf	6
 16878  0085  3001               	movlw	1	; select bank2/3
 16879  0086  0087               	movwf	7
 16880  0087  1001               	bcf	1,0
 16881                           
 16882                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->StatusFlag == 1) {
 16883  0088  0A77               	incf	_DimmerLightsIntr,w
 16884  0089  0086               	movwf	6
 16885  008A  3001               	movlw	1	; select bank2/3
 16886  008B  0087               	movwf	7
 16887  008C  1D01               	btfss	1,2
 16888  008D  2989               	goto	i1l732
 16889                           
 16890                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 1;
 16891  008E  0A77               	incf	_DimmerLightsIntr,w
 16892  008F  0086               	movwf	6
 16893  0090  3001               	movlw	1	; select bank2/3
 16894  0091  0087               	movwf	7
 16895  0092  1581               	bsf	1,3
 16896                           
 16897                           ;Dimmer_B1.c: 127: DimmerLightsIntr->Triac = 1;
 16898  0093  0A77               	incf	_DimmerLightsIntr,w
 16899  0094  0086               	movwf	6
 16900  0095  3001               	movlw	1	; select bank2/3
 16901  0096  0087               	movwf	7
 16902  0097  1601               	bsf	1,4
 16903                           
 16904                           ;Dimmer_B1.c: 129: if (lights == 1) {
 16905  0098  0874               	movf	setDimmerLights_IntrControl@lights,w
 16906  0099  3A01               	xorlw	1
 16907  009A  1D03               	skipz
 16908  009B  289E               	goto	i1l6791
 16909                           
 16910                           ;Dimmer_B1.c: 130: RA7 = 1;
 16911  009C  0020               	movlb	0	; select bank0
 16912  009D  178C               	bsf	12,7	;volatile
 16913  009E                     i1l6791:	
 16914                           ;Dimmer_B1.c: 131: ;;
 16915                           
 16916                           
 16917                           ;Dimmer_B1.c: 132: }
 16918                           ;Dimmer_B1.c: 135: if (lights == 2) {
 16919  009E  0874               	movf	setDimmerLights_IntrControl@lights,w
 16920  009F  3A02               	xorlw	2
 16921  00A0  1D03               	skipz
 16922  00A1  2989               	goto	i1l732
 16923                           
 16924                           ;Dimmer_B1.c: 136: RB4 = 1;
 16925  00A2  0020               	movlb	0	; select bank0
 16926  00A3  160D               	bsf	13,4	;volatile
 16927                           
 16928                           ;Dimmer_B1.c: 137: }
 16929                           ;Dimmer_B1.c: 144: }
 16930                           ;Dimmer_B1.c: 145: }
 16931                           ;Dimmer_B1.c: 146: } else {
 16932  00A4  2989               	goto	i1l732
 16933  00A5                     i1l6795:	
 16934                           
 16935                           ;Dimmer_B1.c: 147: if (DimmerLightsIntr->Flag == 1) {
 16936  00A5  0A77               	incf	_DimmerLightsIntr,w
 16937  00A6  0086               	movwf	6
 16938  00A7  3001               	movlw	1	; select bank2/3
 16939  00A8  0087               	movwf	7
 16940  00A9  1D81               	btfss	1,3
 16941  00AA  2989               	goto	i1l732
 16942                           
 16943                           ;Dimmer_B1.c: 148: DimmerLightsIntr->Flag = 0;
 16944  00AB  0A77               	incf	_DimmerLightsIntr,w
 16945  00AC  0086               	movwf	6
 16946  00AD  3001               	movlw	1	; select bank2/3
 16947  00AE  0087               	movwf	7
 16948  00AF  1181               	bcf	1,3
 16949                           
 16950                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Signal == 1) {
 16951  00B0  0A77               	incf	_DimmerLightsIntr,w
 16952  00B1  0086               	movwf	6
 16953  00B2  3001               	movlw	1	; select bank2/3
 16954  00B3  0087               	movwf	7
 16955  00B4  1E81               	btfss	1,5
 16956  00B5  2989               	goto	i1l732
 16957                           
 16958                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingTime++;
 16959  00B6  3001               	movlw	1
 16960  00B7  00F2               	movwf	??_setDimmerLights_IntrControl
 16961  00B8  0877               	movf	_DimmerLightsIntr,w
 16962  00B9  3E05               	addlw	5
 16963  00BA  0086               	movwf	6
 16964  00BB  3001               	movlw	1	; select bank2/3
 16965  00BC  0087               	movwf	7
 16966  00BD  0872               	movf	??_setDimmerLights_IntrControl,w
 16967  00BE  0781               	addwf	1,f
 16968                           
 16969                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 16970  00BF  0877               	movf	_DimmerLightsIntr,w
 16971  00C0  3E05               	addlw	5
 16972  00C1  0086               	movwf	6
 16973  00C2  3001               	movlw	1	; select bank2/3
 16974  00C3  0087               	movwf	7
 16975  00C4  0877               	movf	_DimmerLightsIntr,w
 16976  00C5  3E08               	addlw	8
 16977  00C6  0084               	movwf	4
 16978  00C7  3001               	movlw	1	; select bank2/3
 16979  00C8  0085               	movwf	5
 16980  00C9  0800               	movf	0,w
 16981  00CA  0201               	subwf	1,w
 16982  00CB  1C03               	skipc
 16983  00CC  2989               	goto	i1l732
 16984                           
 16985                           ;Dimmer_B1.c: 152: DimmerLightsIntr->DimmingTime = 0;
 16986  00CD  0877               	movf	_DimmerLightsIntr,w
 16987  00CE  3E05               	addlw	5
 16988  00CF  0086               	movwf	6
 16989  00D0  3001               	movlw	1	; select bank2/3
 16990  00D1  0087               	movwf	7
 16991  00D2  0181               	clrf	1
 16992                           
 16993                           ;Dimmer_B1.c: 153: if (DimmerLightsIntr->AdjSw == 1) {
 16994  00D3  0A77               	incf	_DimmerLightsIntr,w
 16995  00D4  0086               	movwf	6
 16996  00D5  3001               	movlw	1	; select bank2/3
 16997  00D6  0087               	movwf	7
 16998  00D7  1F01               	btfss	1,6
 16999  00D8  291F               	goto	i1l6825
 17000                           
 17001                           ;Dimmer_B1.c: 154: if (DimmerLightsIntr->AdjStatus == 0) {
 17002  00D9  0A77               	incf	_DimmerLightsIntr,w
 17003  00DA  0086               	movwf	6
 17004  00DB  3001               	movlw	1	; select bank2/3
 17005  00DC  0087               	movwf	7
 17006  00DD  1B81               	btfsc	1,7
 17007  00DE  28FE               	goto	i1l6817
 17008                           
 17009                           ;Dimmer_B1.c: 155: if (DimmerLightsIntr->DimmingValue > ((char)((100-70)*0.8))) {
 17010  00DF  0877               	movf	_DimmerLightsIntr,w
 17011  00E0  3E04               	addlw	4
 17012  00E1  0086               	movwf	6
 17013  00E2  3001               	movlw	1	; select bank2/3
 17014  00E3  0087               	movwf	7
 17015  00E4  3019               	movlw	25
 17016  00E5  0201               	subwf	1,w
 17017  00E6  1C03               	skipc
 17018  00E7  28EF               	goto	i1l6813
 17019                           
 17020                           ;Dimmer_B1.c: 156: DimmerLightsIntr->DimmingValue--;
 17021  00E8  0877               	movf	_DimmerLightsIntr,w
 17022  00E9  3E04               	addlw	4
 17023  00EA  0086               	movwf	6
 17024  00EB  3001               	movlw	1	; select bank2/3
 17025  00EC  0087               	movwf	7
 17026  00ED  3001               	movlw	1
 17027  00EE  0281               	subwf	1,f
 17028  00EF                     i1l6813:	
 17029                           
 17030                           ;Dimmer_B1.c: 157: }
 17031                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue == ((char)((100-70)*0.8))) {
 17032  00EF  0877               	movf	_DimmerLightsIntr,w
 17033  00F0  3E04               	addlw	4
 17034  00F1  0086               	movwf	6
 17035  00F2  3001               	movlw	1	; select bank2/3
 17036  00F3  0087               	movwf	7
 17037  00F4  0801               	movf	1,w
 17038  00F5  3A18               	xorlw	24
 17039  00F6  1D03               	skipz
 17040  00F7  2989               	goto	i1l732
 17041                           
 17042                           ;Dimmer_B1.c: 159: DimmerLightsIntr->AdjStatus = 1;
 17043  00F8  0A77               	incf	_DimmerLightsIntr,w
 17044  00F9  0086               	movwf	6
 17045  00FA  3001               	movlw	1	; select bank2/3
 17046  00FB  0087               	movwf	7
 17047  00FC  1781               	bsf	1,7
 17048                           
 17049                           ;Dimmer_B1.c: 160: }
 17050                           ;Dimmer_B1.c: 161: } else {
 17051  00FD  2989               	goto	i1l732
 17052  00FE                     i1l6817:	
 17053                           
 17054                           ;Dimmer_B1.c: 162: if (DimmerLightsIntr->DimmingValue < ((char)((100-15)*0.8))) {
 17055  00FE  0877               	movf	_DimmerLightsIntr,w
 17056  00FF  3E04               	addlw	4
 17057  0100  0086               	movwf	6
 17058  0101  3001               	movlw	1	; select bank2/3
 17059  0102  0087               	movwf	7
 17060  0103  3044               	movlw	68
 17061  0104  0201               	subwf	1,w
 17062  0105  1803               	skipnc
 17063  0106  2910               	goto	i1l6821
 17064                           
 17065                           ;Dimmer_B1.c: 163: DimmerLightsIntr->DimmingValue++;
 17066  0107  3001               	movlw	1
 17067  0108  00F2               	movwf	??_setDimmerLights_IntrControl
 17068  0109  0877               	movf	_DimmerLightsIntr,w
 17069  010A  3E04               	addlw	4
 17070  010B  0086               	movwf	6
 17071  010C  3001               	movlw	1	; select bank2/3
 17072  010D  0087               	movwf	7
 17073  010E  0872               	movf	??_setDimmerLights_IntrControl,w
 17074  010F  0781               	addwf	1,f
 17075  0110                     i1l6821:	
 17076                           
 17077                           ;Dimmer_B1.c: 164: }
 17078                           ;Dimmer_B1.c: 165: if (DimmerLightsIntr->DimmingValue == ((char)((100-15)*0.8))) {
 17079  0110  0877               	movf	_DimmerLightsIntr,w
 17080  0111  3E04               	addlw	4
 17081  0112  0086               	movwf	6
 17082  0113  3001               	movlw	1	; select bank2/3
 17083  0114  0087               	movwf	7
 17084  0115  0801               	movf	1,w
 17085  0116  3A44               	xorlw	68
 17086  0117  1D03               	skipz
 17087  0118  2989               	goto	i1l732
 17088                           
 17089                           ;Dimmer_B1.c: 166: DimmerLightsIntr->AdjStatus = 0;
 17090  0119  0A77               	incf	_DimmerLightsIntr,w
 17091  011A  0086               	movwf	6
 17092  011B  3001               	movlw	1	; select bank2/3
 17093  011C  0087               	movwf	7
 17094  011D  1381               	bcf	1,7
 17095                           
 17096                           ;Dimmer_B1.c: 167: }
 17097                           ;Dimmer_B1.c: 168: }
 17098                           ;Dimmer_B1.c: 169: } else if (DimmerLightsIntr->AdjRF == 1) {
 17099  011E  2989               	goto	i1l732
 17100  011F                     i1l6825:	
 17101  011F  0877               	movf	_DimmerLightsIntr,w
 17102  0120  3E02               	addlw	2
 17103  0121  0086               	movwf	6
 17104  0122  3001               	movlw	1	; select bank2/3
 17105  0123  0087               	movwf	7
 17106  0124  1C01               	btfss	1,0
 17107  0125  2968               	goto	i1l6839
 17108                           
 17109                           ;Dimmer_B1.c: 170: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17110  0126  0877               	movf	_DimmerLightsIntr,w
 17111  0127  3E06               	addlw	6
 17112  0128  0086               	movwf	6
 17113  0129  3001               	movlw	1	; select bank2/3
 17114  012A  0087               	movwf	7
 17115  012B  0877               	movf	_DimmerLightsIntr,w
 17116  012C  3E04               	addlw	4
 17117  012D  0084               	movwf	4
 17118  012E  3001               	movlw	1	; select bank2/3
 17119  012F  0085               	movwf	5
 17120  0130  0800               	movf	0,w
 17121  0131  0201               	subwf	1,w
 17122  0132  1803               	skipnc
 17123  0133  293C               	goto	i1l6831
 17124                           
 17125                           ;Dimmer_B1.c: 171: DimmerLightsIntr->DimmingValue--;
 17126  0134  0877               	movf	_DimmerLightsIntr,w
 17127  0135  3E04               	addlw	4
 17128  0136  0086               	movwf	6
 17129  0137  3001               	movlw	1	; select bank2/3
 17130  0138  0087               	movwf	7
 17131  0139  3001               	movlw	1
 17132  013A  0281               	subwf	1,f
 17133                           
 17134                           ;Dimmer_B1.c: 172: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17135  013B  2953               	goto	i1l6835
 17136  013C                     i1l6831:	
 17137  013C  0877               	movf	_DimmerLightsIntr,w
 17138  013D  3E04               	addlw	4
 17139  013E  0086               	movwf	6
 17140  013F  3001               	movlw	1	; select bank2/3
 17141  0140  0087               	movwf	7
 17142  0141  0877               	movf	_DimmerLightsIntr,w
 17143  0142  3E06               	addlw	6
 17144  0143  0084               	movwf	4
 17145  0144  3001               	movlw	1	; select bank2/3
 17146  0145  0085               	movwf	5
 17147  0146  0800               	movf	0,w
 17148  0147  0201               	subwf	1,w
 17149  0148  1803               	skipnc
 17150  0149  2953               	goto	i1l6835
 17151                           
 17152                           ;Dimmer_B1.c: 173: DimmerLightsIntr->DimmingValue++;
 17153  014A  3001               	movlw	1
 17154  014B  00F2               	movwf	??_setDimmerLights_IntrControl
 17155  014C  0877               	movf	_DimmerLightsIntr,w
 17156  014D  3E04               	addlw	4
 17157  014E  0086               	movwf	6
 17158  014F  3001               	movlw	1	; select bank2/3
 17159  0150  0087               	movwf	7
 17160  0151  0872               	movf	??_setDimmerLights_IntrControl,w
 17161  0152  0781               	addwf	1,f
 17162  0153                     i1l6835:	
 17163                           
 17164                           ;Dimmer_B1.c: 174: }
 17165                           ;Dimmer_B1.c: 175: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17166  0153  0877               	movf	_DimmerLightsIntr,w
 17167  0154  3E06               	addlw	6
 17168  0155  0086               	movwf	6
 17169  0156  3001               	movlw	1	; select bank2/3
 17170  0157  0087               	movwf	7
 17171  0158  0877               	movf	_DimmerLightsIntr,w
 17172  0159  3E04               	addlw	4
 17173  015A  0084               	movwf	4
 17174  015B  3001               	movlw	1	; select bank2/3
 17175  015C  0085               	movwf	5
 17176  015D  0800               	movf	0,w
 17177  015E  0601               	xorwf	1,w
 17178  015F  1D03               	skipz
 17179  0160  2989               	goto	i1l732
 17180                           
 17181                           ;Dimmer_B1.c: 176: DimmerLightsIntr->AdjRF = 0;
 17182  0161  0877               	movf	_DimmerLightsIntr,w
 17183  0162  3E02               	addlw	2
 17184  0163  0086               	movwf	6
 17185  0164  3001               	movlw	1	; select bank2/3
 17186  0165  0087               	movwf	7
 17187  0166  1001               	bcf	1,0
 17188  0167  2984               	goto	i1l6845
 17189  0168                     i1l6839:	
 17190                           ;Dimmer_B1.c: 178: }
 17191                           ;Dimmer_B1.c: 179: } else {
 17192                           
 17193                           ;Dimmer_B1.c: 177: DimmerLightsIntr->Signal = 0;
 17194                           
 17195                           
 17196                           ;Dimmer_B1.c: 180: if (DimmerLightsIntr->Status == 1) {
 17197  0168  0877               	movf	_DimmerLightsIntr,w
 17198  0169  3E02               	addlw	2
 17199  016A  0086               	movwf	6
 17200  016B  3001               	movlw	1	; select bank2/3
 17201  016C  0087               	movwf	7
 17202  016D  1C81               	btfss	1,1
 17203  016E  2989               	goto	i1l732
 17204                           
 17205                           ;Dimmer_B1.c: 181: DimmerLightsIntr->DimmingValue--;
 17206  016F  0877               	movf	_DimmerLightsIntr,w
 17207  0170  3E04               	addlw	4
 17208  0171  0086               	movwf	6
 17209  0172  3001               	movlw	1	; select bank2/3
 17210  0173  0087               	movwf	7
 17211  0174  3001               	movlw	1
 17212  0175  0281               	subwf	1,f
 17213                           
 17214                           ;Dimmer_B1.c: 182: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17215  0176  0877               	movf	_DimmerLightsIntr,w
 17216  0177  3E06               	addlw	6
 17217  0178  0086               	movwf	6
 17218  0179  3001               	movlw	1	; select bank2/3
 17219  017A  0087               	movwf	7
 17220  017B  0877               	movf	_DimmerLightsIntr,w
 17221  017C  3E04               	addlw	4
 17222  017D  0084               	movwf	4
 17223  017E  3001               	movlw	1	; select bank2/3
 17224  017F  0085               	movwf	5
 17225  0180  0800               	movf	0,w
 17226  0181  0201               	subwf	1,w
 17227  0182  1C03               	skipc
 17228  0183  2989               	goto	i1l732
 17229  0184                     i1l6845:	
 17230                           
 17231                           ;Dimmer_B1.c: 183: DimmerLightsIntr->Signal = 0;
 17232  0184  0A77               	incf	_DimmerLightsIntr,w
 17233  0185  0086               	movwf	6
 17234  0186  3001               	movlw	1	; select bank2/3
 17235  0187  0087               	movwf	7
 17236  0188  1281               	bcf	1,5
 17237  0189                     i1l732:	
 17238                           
 17239                           ;Dimmer_B1.c: 184: }
 17240                           ;Dimmer_B1.c: 185: }
 17241                           ;Dimmer_B1.c: 210: }
 17242                           ;Dimmer_B1.c: 211: }
 17243                           ;Dimmer_B1.c: 212: }
 17244                           ;Dimmer_B1.c: 213: }
 17245                           ;Dimmer_B1.c: 214: }
 17246                           ;Dimmer_B1.c: 215: if (DimmerLightsIntr->Triac == 1) {
 17247  0189  0A77               	incf	_DimmerLightsIntr,w
 17248  018A  0086               	movwf	6
 17249  018B  3001               	movlw	1	; select bank2/3
 17250  018C  0087               	movwf	7
 17251  018D  1E01               	btfss	1,4
 17252  018E  29B9               	goto	i1l6863
 17253                           
 17254                           ;Dimmer_B1.c: 216: DimmerLightsIntr->TriacTime++;
 17255  018F  3001               	movlw	1
 17256  0190  00F2               	movwf	??_setDimmerLights_IntrControl
 17257  0191  0877               	movf	_DimmerLightsIntr,w
 17258  0192  3E07               	addlw	7
 17259  0193  0086               	movwf	6
 17260  0194  3001               	movlw	1	; select bank2/3
 17261  0195  0087               	movwf	7
 17262  0196  0872               	movf	??_setDimmerLights_IntrControl,w
 17263  0197  0781               	addwf	1,f
 17264                           
 17265                           ;Dimmer_B1.c: 217: if (DimmerLightsIntr->TriacTime >= 5) {
 17266  0198  0877               	movf	_DimmerLightsIntr,w
 17267  0199  3E07               	addlw	7
 17268  019A  0086               	movwf	6
 17269  019B  3001               	movlw	1	; select bank2/3
 17270  019C  0087               	movwf	7
 17271  019D  3005               	movlw	5
 17272  019E  0201               	subwf	1,w
 17273  019F  1C03               	skipc
 17274  01A0  0008               	return
 17275                           
 17276                           ;Dimmer_B1.c: 218: DimmerLightsIntr->TriacTime = 0;
 17277  01A1  0877               	movf	_DimmerLightsIntr,w
 17278  01A2  3E07               	addlw	7
 17279  01A3  0086               	movwf	6
 17280  01A4  3001               	movlw	1	; select bank2/3
 17281  01A5  0087               	movwf	7
 17282  01A6  0181               	clrf	1
 17283                           
 17284                           ;Dimmer_B1.c: 219: DimmerLightsIntr->Triac = 0;
 17285  01A7  0A77               	incf	_DimmerLightsIntr,w
 17286  01A8  0086               	movwf	6
 17287  01A9  3001               	movlw	1	; select bank2/3
 17288  01AA  0087               	movwf	7
 17289  01AB  1201               	bcf	1,4
 17290                           
 17291                           ;Dimmer_B1.c: 222: if (lights == 1) {
 17292  01AC  0874               	movf	setDimmerLights_IntrControl@lights,w
 17293  01AD  3A01               	xorlw	1
 17294  01AE  1D03               	skipz
 17295  01AF  29B2               	goto	i1l6859
 17296                           
 17297                           ;Dimmer_B1.c: 223: RA7 = 0;
 17298  01B0  0020               	movlb	0	; select bank0
 17299  01B1  138C               	bcf	12,7	;volatile
 17300  01B2                     i1l6859:	
 17301                           ;Dimmer_B1.c: 224: ;;
 17302                           
 17303                           
 17304                           ;Dimmer_B1.c: 225: }
 17305                           ;Dimmer_B1.c: 228: if (lights == 2) {
 17306  01B2  0874               	movf	setDimmerLights_IntrControl@lights,w
 17307  01B3  3A02               	xorlw	2
 17308  01B4  1D03               	skipz
 17309  01B5  0008               	return
 17310                           
 17311                           ;Dimmer_B1.c: 229: RB4 = 0;
 17312  01B6  0020               	movlb	0	; select bank0
 17313  01B7  120D               	bcf	13,4	;volatile
 17314                           
 17315                           ;Dimmer_B1.c: 230: }
 17316                           ;Dimmer_B1.c: 237: }
 17317                           ;Dimmer_B1.c: 238: } else {
 17318  01B8  0008               	return
 17319  01B9                     i1l6863:	
 17320                           
 17321                           ;Dimmer_B1.c: 239: if (DimmerLightsIntr->TriacFlag == 1 && DimmerLightsIntr->GO == 0) {
 17322  01B9  0877               	movf	_DimmerLightsIntr,w
 17323  01BA  0086               	movwf	6
 17324  01BB  3001               	movlw	1	; select bank2/3
 17325  01BC  0087               	movwf	7
 17326  01BD  1C81               	btfss	1,1
 17327  01BE  0008               	return
 17328  01BF  0A77               	incf	_DimmerLightsIntr,w
 17329  01C0  0086               	movwf	6
 17330  01C1  3001               	movlw	1	; select bank2/3
 17331  01C2  0087               	movwf	7
 17332  01C3  1801               	btfsc	1,0
 17333  01C4  0008               	return
 17334                           
 17335                           ;Dimmer_B1.c: 240: DimmerLightsIntr->TriacCount++;
 17336  01C5  3001               	movlw	1
 17337  01C6  00F2               	movwf	??_setDimmerLights_IntrControl
 17338  01C7  0877               	movf	_DimmerLightsIntr,w
 17339  01C8  3E0C               	addlw	12
 17340  01C9  0086               	movwf	6
 17341  01CA  3001               	movlw	1	; select bank2/3
 17342  01CB  0087               	movwf	7
 17343  01CC  0872               	movf	??_setDimmerLights_IntrControl,w
 17344  01CD  0781               	addwf	1,f
 17345                           
 17346                           ;Dimmer_B1.c: 241: if (DimmerLightsIntr->TriacCount == 5) {
 17347  01CE  0877               	movf	_DimmerLightsIntr,w
 17348  01CF  3E0C               	addlw	12
 17349  01D0  0086               	movwf	6
 17350  01D1  3001               	movlw	1	; select bank2/3
 17351  01D2  0087               	movwf	7
 17352  01D3  0801               	movf	1,w
 17353  01D4  3A05               	xorlw	5
 17354  01D5  1D03               	skipz
 17355  01D6  0008               	return
 17356                           
 17357                           ;Dimmer_B1.c: 242: DimmerLightsIntr->TriacCount = 0;
 17358  01D7  0877               	movf	_DimmerLightsIntr,w
 17359  01D8  3E0C               	addlw	12
 17360  01D9  0086               	movwf	6
 17361  01DA  3001               	movlw	1	; select bank2/3
 17362  01DB  0087               	movwf	7
 17363  01DC  0181               	clrf	1
 17364                           
 17365                           ;Dimmer_B1.c: 243: DimmerLightsIntr->TriacFlag = 0;
 17366  01DD  0877               	movf	_DimmerLightsIntr,w
 17367  01DE  0086               	movwf	6
 17368  01DF  3001               	movlw	1	; select bank2/3
 17369  01E0  0087               	movwf	7
 17370  01E1  1081               	bcf	1,1
 17371  01E2  0008               	return
 17372  01E3                     __end_of_setDimmerLights_IntrControl:	
 17373                           
 17374                           	psect	text121
 17375  1F66                     __ptext121:	
 17376 ;; *************** function _DimmerIntrPointSelect *****************
 17377 ;; Defined at:
 17378 ;;		line 94 in file "../src/Dimmer_B1.c"
 17379 ;; Parameters:    Size  Location     Type
 17380 ;;  lights          1    wreg     unsigned char 
 17381 ;; Auto vars:     Size  Location     Type
 17382 ;;  lights          1    1[COMMON] unsigned char 
 17383 ;; Return value:  Size  Location     Type
 17384 ;;		None               void
 17385 ;; Registers used:
 17386 ;;		wreg
 17387 ;; Tracked objects:
 17388 ;;		On entry : 0/0
 17389 ;;		On exit  : 0/0
 17390 ;;		Unchanged: 0/0
 17391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17394 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17395 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17396 ;;Total ram usage:        2 bytes
 17397 ;; Hardware stack levels used:    1
 17398 ;; This function calls:
 17399 ;;		Nothing
 17400 ;; This function is called by:
 17401 ;;		_setDimmerLights_IntrControl
 17402 ;; This function uses a non-reentrant model
 17403 ;;
 17404                           
 17405                           
 17406                           ;psect for function _DimmerIntrPointSelect
 17407  1F66                     _DimmerIntrPointSelect:	
 17408                           
 17409                           ;incstack = 0
 17410                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17411                           ;DimmerIntrPointSelect@lights stored from wreg
 17412  1F66  00F1               	movwf	DimmerIntrPointSelect@lights
 17413                           
 17414                           ;Dimmer_B1.c: 96: if (lights == 1) {
 17415  1F67  0871               	movf	DimmerIntrPointSelect@lights,w
 17416  1F68  3A01               	xorlw	1
 17417  1F69  1D03               	skipz
 17418  1F6A  2F70               	goto	i1l6445
 17419                           
 17420                           ;Dimmer_B1.c: 97: DimmerLightsIntr = &DimmerLights1;
 17421  1F6B  3041               	movlw	_DimmerLights1& (0+255)
 17422  1F6C  00F0               	movwf	??_DimmerIntrPointSelect
 17423  1F6D  0870               	movf	??_DimmerIntrPointSelect,w
 17424  1F6E  00F7               	movwf	_DimmerLightsIntr
 17425                           
 17426                           ;Dimmer_B1.c: 98: }
 17427  1F6F  0008               	return
 17428  1F70                     i1l6445:	
 17429                           
 17430                           ;Dimmer_B1.c: 101: else if (lights == 2) {
 17431  1F70  0871               	movf	DimmerIntrPointSelect@lights,w
 17432  1F71  3A02               	xorlw	2
 17433  1F72  1D03               	skipz
 17434  1F73  0008               	return
 17435                           
 17436                           ;Dimmer_B1.c: 102: DimmerLightsIntr = &DimmerLights2;
 17437  1F74  3052               	movlw	_DimmerLights2& (0+255)
 17438  1F75  00F0               	movwf	??_DimmerIntrPointSelect
 17439  1F76  0870               	movf	??_DimmerIntrPointSelect,w
 17440  1F77  00F7               	movwf	_DimmerLightsIntr
 17441  1F78  0008               	return
 17442  1F79                     __end_of_DimmerIntrPointSelect:	
 17443                           
 17444                           	psect	text122
 17445  1EA2                     __ptext122:	
 17446 ;; *************** function _IOC_ISR *****************
 17447 ;; Defined at:
 17448 ;;		line 396 in file "../src/MCU_B1.c"
 17449 ;; Parameters:    Size  Location     Type
 17450 ;;		None
 17451 ;; Auto vars:     Size  Location     Type
 17452 ;;		None
 17453 ;; Return value:  Size  Location     Type
 17454 ;;		None               void
 17455 ;; Registers used:
 17456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17457 ;; Tracked objects:
 17458 ;;		On entry : 0/0
 17459 ;;		On exit  : 0/0
 17460 ;;		Unchanged: 0/0
 17461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17466 ;;Total ram usage:        0 bytes
 17467 ;; Hardware stack levels used:    1
 17468 ;; Hardware stack levels required when called:    2
 17469 ;; This function calls:
 17470 ;;		_setDimmerLights_IntrIOC_GO
 17471 ;; This function is called by:
 17472 ;;		_ISR
 17473 ;; This function uses a non-reentrant model
 17474 ;;
 17475                           
 17476                           
 17477                           ;psect for function _IOC_ISR
 17478  1EA2                     _IOC_ISR:	
 17479                           
 17480                           ;MCU_B1.c: 398: IOCBF2 = 0;
 17481                           
 17482                           ;incstack = 0
 17483                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17484  1EA2  0027               	movlb	7	; select bank7
 17485  1EA3  1116               	bcf	22,2	;volatile
 17486                           
 17487                           ;MCU_B1.c: 399: IOCIF = 0;
 17488  1EA4  100B               	bcf	11,0	;volatile
 17489                           
 17490                           ;MCU_B1.c: 400: if (myMain.PowerON == 1) {
 17491  1EA5  0021               	movlb	1	; select bank1
 17492  1EA6  1C2E               	btfss	_myMain^(0+128),0
 17493  1EA7  0008               	return
 17494                           
 17495                           ;MCU_B1.c: 405: setDimmerLights_IntrIOC_GO(1);
 17496  1EA8  3001               	movlw	1
 17497  1EA9  3193  2317  319E   	fcall	_setDimmerLights_IntrIOC_GO
 17498                           
 17499                           ;MCU_B1.c: 409: setDimmerLights_IntrIOC_GO(2);
 17500  1EAC  3002               	movlw	2
 17501  1EAD  3193  2317         	fcall	_setDimmerLights_IntrIOC_GO
 17502  1EAF  0008               	return
 17503  1EB0                     __end_of_IOC_ISR:	
 17504                           
 17505                           	psect	text123
 17506  1317                     __ptext123:	
 17507 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 17508 ;; Defined at:
 17509 ;;		line 48 in file "../src/Dimmer_B1.c"
 17510 ;; Parameters:    Size  Location     Type
 17511 ;;  lights          1    wreg     unsigned char 
 17512 ;; Auto vars:     Size  Location     Type
 17513 ;;  lights          1    3[COMMON] unsigned char 
 17514 ;; Return value:  Size  Location     Type
 17515 ;;		None               void
 17516 ;; Registers used:
 17517 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17518 ;; Tracked objects:
 17519 ;;		On entry : 0/0
 17520 ;;		On exit  : 0/0
 17521 ;;		Unchanged: 0/0
 17522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17525 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17526 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17527 ;;Total ram usage:        2 bytes
 17528 ;; Hardware stack levels used:    1
 17529 ;; Hardware stack levels required when called:    1
 17530 ;; This function calls:
 17531 ;;		_DimmerIntrIOCPointSelect
 17532 ;; This function is called by:
 17533 ;;		_IOC_ISR
 17534 ;;		_setDimmerLights_IOC_Main
 17535 ;; This function uses a non-reentrant model
 17536 ;;
 17537                           
 17538                           
 17539                           ;psect for function _setDimmerLights_IntrIOC_GO
 17540  1317                     _setDimmerLights_IntrIOC_GO:	
 17541                           
 17542                           ;incstack = 0
 17543                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17544                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 17545  1317  00F3               	movwf	setDimmerLights_IntrIOC_GO@lights
 17546                           
 17547                           ;Dimmer_B1.c: 49: DimmerIntrIOCPointSelect(lights);
 17548  1318  0873               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17549  1319  3190  20AA  3193   	fcall	_DimmerIntrIOCPointSelect
 17550                           
 17551                           ;Dimmer_B1.c: 51: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 17552  131C  0021               	movlb	1	; select bank1
 17553  131D  0A52               	incf	_DimmerLightsIntrIOC^(0+128),w
 17554  131E  0086               	movwf	6
 17555  131F  3001               	movlw	1	; select bank2/3
 17556  1320  0087               	movwf	7
 17557  1321  1801               	btfsc	1,0
 17558  1322  0008               	return
 17559  1323  0852               	movf	_DimmerLightsIntrIOC^(0+128),w
 17560  1324  0086               	movwf	6
 17561  1325  3001               	movlw	1	; select bank2/3
 17562  1326  0087               	movwf	7
 17563  1327  1881               	btfsc	1,1
 17564  1328  0008               	return
 17565                           
 17566                           ;Dimmer_B1.c: 52: DimmerLightsIntrIOC->GO = 1;
 17567  1329  0A52               	incf	_DimmerLightsIntrIOC^(0+128),w
 17568  132A  0086               	movwf	6
 17569  132B  3001               	movlw	1	; select bank2/3
 17570  132C  0087               	movwf	7
 17571  132D  1401               	bsf	1,0
 17572                           
 17573                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->TriacFlag = 1;
 17574  132E  0852               	movf	_DimmerLightsIntrIOC^(0+128),w
 17575  132F  0086               	movwf	6
 17576  1330  3001               	movlw	1	; select bank2/3
 17577  1331  0087               	movwf	7
 17578  1332  1481               	bsf	1,1
 17579                           
 17580                           ;Dimmer_B1.c: 54: if (RB2 == 1) {
 17581  1333  0020               	movlb	0	; select bank0
 17582  1334  1D0D               	btfss	13,2	;volatile
 17583  1335  2B3C               	goto	i1l6769
 17584                           
 17585                           ;Dimmer_B1.c: 55: Dimmer.Correction = 1;
 17586  1336  3001               	movlw	1
 17587  1337  00F2               	movwf	??_setDimmerLights_IntrIOC_GO
 17588  1338  0872               	movf	??_setDimmerLights_IntrIOC_GO,w
 17589  1339  0021               	movlb	1	; select bank1
 17590  133A  00CA               	movwf	(_Dimmer^(0+128)+2)	;volatile
 17591                           
 17592                           ;Dimmer_B1.c: 56: } else {
 17593  133B  0008               	return
 17594  133C                     i1l6769:	
 17595                           
 17596                           ;Dimmer_B1.c: 57: Dimmer.Correction = 0;
 17597  133C  0021               	movlb	1	; select bank1
 17598  133D  01CA               	clrf	(_Dimmer^(0+128)+2)	;volatile
 17599  133E  0008               	return
 17600  133F                     __end_of_setDimmerLights_IntrIOC_GO:	
 17601                           
 17602                           	psect	text124
 17603  10AA                     __ptext124:	
 17604 ;; *************** function _DimmerIntrIOCPointSelect *****************
 17605 ;; Defined at:
 17606 ;;		line 8 in file "../src/Dimmer_B1.c"
 17607 ;; Parameters:    Size  Location     Type
 17608 ;;  lights          1    wreg     unsigned char 
 17609 ;; Auto vars:     Size  Location     Type
 17610 ;;  lights          1    1[COMMON] unsigned char 
 17611 ;; Return value:  Size  Location     Type
 17612 ;;		None               void
 17613 ;; Registers used:
 17614 ;;		wreg
 17615 ;; Tracked objects:
 17616 ;;		On entry : 0/0
 17617 ;;		On exit  : 0/0
 17618 ;;		Unchanged: 0/0
 17619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17621 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17623 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17624 ;;Total ram usage:        2 bytes
 17625 ;; Hardware stack levels used:    1
 17626 ;; This function calls:
 17627 ;;		Nothing
 17628 ;; This function is called by:
 17629 ;;		_setDimmerLights_IntrIOC_GO
 17630 ;; This function uses a non-reentrant model
 17631 ;;
 17632                           
 17633                           
 17634                           ;psect for function _DimmerIntrIOCPointSelect
 17635  10AA                     _DimmerIntrIOCPointSelect:	
 17636                           
 17637                           ;incstack = 0
 17638                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 17639                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 17640  10AA  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 17641                           
 17642                           ;Dimmer_B1.c: 10: if (lights == 1) {
 17643  10AB  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17644  10AC  3A01               	xorlw	1
 17645  10AD  1D03               	skipz
 17646  10AE  28B5               	goto	i1l6437
 17647                           
 17648                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 17649  10AF  3041               	movlw	_DimmerLights1& (0+255)
 17650  10B0  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17651  10B1  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17652  10B2  0021               	movlb	1	; select bank1
 17653  10B3  00D2               	movwf	_DimmerLightsIntrIOC^(0+128)
 17654                           
 17655                           ;Dimmer_B1.c: 12: }
 17656  10B4  0008               	return
 17657  10B5                     i1l6437:	
 17658                           
 17659                           ;Dimmer_B1.c: 15: else if (lights == 2) {
 17660  10B5  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17661  10B6  3A02               	xorlw	2
 17662  10B7  1D03               	skipz
 17663  10B8  0008               	return
 17664                           
 17665                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 17666  10B9  3052               	movlw	_DimmerLights2& (0+255)
 17667  10BA  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17668  10BB  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17669  10BC  0021               	movlb	1	; select bank1
 17670  10BD  00D2               	movwf	_DimmerLightsIntrIOC^(0+128)
 17671  10BE  0008               	return
 17672  10BF                     __end_of_DimmerIntrIOCPointSelect:	
 17673  007E                     btemp	set	126	;btemp
 17674  007E                     pic14e$flags	set	126
 17675  007E                     wtemp	set	126
 17676  007E                     wtemp0	set	126
 17677  0080                     wtemp1	set	128
 17678  0082                     wtemp2	set	130
 17679  0084                     wtemp3	set	132
 17680  0086                     wtemp4	set	134
 17681  0088                     wtemp5	set	136
 17682  007F                     wtemp6	set	127
 17683  007E                     ttemp	set	126
 17684  007E                     ttemp0	set	126
 17685  0081                     ttemp1	set	129
 17686  0084                     ttemp2	set	132
 17687  0087                     ttemp3	set	135
 17688  007F                     ttemp4	set	127
 17689  007E                     ltemp	set	126
 17690  007E                     ltemp0	set	126
 17691  0082                     ltemp1	set	130
 17692  0086                     ltemp2	set	134
 17693  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         226
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     78      80
    BANK1            80      2      78
    BANK2            80      0      79
    BANK3            80      4      69
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _IOC_ISR->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _main->_Exception_Main
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  115240
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     170
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     139
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    3946
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    3946
                                             65 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    7990
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    7990
                                             70 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0      93
                                              2 BANK0      1     1      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   47606
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   47606
                                             77 BANK0      1     1      0
                                              0 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44338
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             65 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40299
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13863
                                             70 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1966
                                             13 BANK0      5     5      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18447
                                             67 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   15987
                                             65 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   13753
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   13660
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3926
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1243
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7893
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    7192
                                             70 BANK0      8     8      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             5     5      0     136
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   26744
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   26744
                                             73 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
               _getMain_LightsStatus
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   13432
                                             70 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   12755
                                             70 BANK0      3     2      1
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             65 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      4     4      0    6659
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     989
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      71
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      5     5      0     207
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5972
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5972
                                             75 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4182
                                             70 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3705
                                             69 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3423
                                             65 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             61 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     154
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     154
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrIOC_GO                          2     2      0      66
                                              2 COMMON     2     2      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
       _getMain_LightsStatus
       _setDimmerLights
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerLights_IntrIOC_GO
       _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      2      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     15E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     15E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Dec 25 13:16:57 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
                                      l94 09AD                                        l96 09C1  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1265  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 007A                      _getDimmerLights_Line 1F9F  
                  __end_of_setDelayOff_GO 08D0                              ___ftadd@exp1 004A  
                            ___ftadd@exp2 0049                 setDimmerLights_Adj@lights 0068  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0D35  
                    _setDimmerLights_Line 1113                              ___ftadd@sign 0048  
                                     l104 16BD                                       l105 16B9  
                                     l106 16A7                                       l108 16B7  
                                     l320 1079                                       l251 0D0D  
                    _setDimmerLights_SwOn 0AE5                                       l319 1078  
                                     l363 12F6                                       l762 1F83  
                                     l850 1FA8                                       l851 1FAF  
                                     _GIE 005F                                       _CRC 00CF  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 0014                                       _RB1 0069  
                                     _RA3 0063                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 0078                                       _RC1 0071  
                                     _RB3 006B                                       _RC2 0072  
                                     _RB4 006C                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RC7 0077                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 00CD  
            getDimmerLights_Status@lights 0022                                       _Sw1 01C5  
                                     _Sw2 01CE                 setDimmerLights_Adj@status 0066  
                __end_of_CC2500_WriteByte 1082                     _Buzzer_Initialization 1DCB  
                         __end_of_ADC_Set 1E0C                           ?_DelayTimejudge 0070  
                                     wreg 0009      setDimmerLights_Initialization@lights 0023  
            getDimmerLights_Status@status 0023                           _setDimmerLights 15AE  
                       ??_getSw_KeyStatus 0020                     _setDimmerLights_AdjRF 12CD  
                   _setDimmerLights_AdjOn 1391                                      ?_ISR 0070  
         setDimmerLights_ErrorClose@count 0067                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1EB0                              ___ftdiv@sign 003D  
                                    l1017 117E                                      l1018 1186  
                                    l1052 152B                                      l2131 0E45  
                                    l1332 13E7                                      l2204 0CCB  
                                    l2132 0E55                                      l1341 170A  
                                    l1318 14B2                                      l2127 0EA3  
                                    l2216 155C                                      l1522 14F2  
                ?_DimmerLightsPointSelect 0070                                      l2190 147E  
                                    l1544 11C4                                      l2168 1EC3  
                                    l2514 1105                                      l1548 11C0  
                         __end_of_IOC_Set 1E8A                                      l2536 0349  
                                    l1578 05FC                                      l2538 0226  
                                    l2821 0BE8                                      l1782 0FF6  
                                    l2815 0BD1                                      l1777 0FFC  
                                    l2844 03F1                                      l8011 07D0  
                                    l8003 07B5                                      l8013 07D9  
                                    l8005 07C3                                      l8103 091D  
                                    l8015 07DC                                      l9001 0DC0  
                                    l8027 1FE3                                      l8043 138F  
                                    l8019 07EA                                      l9011 0DD2  
                   _setDimmerLights_SwOff 1712                                      l8071 08DB  
                                    l8151 08B5                                      l8215 0AFC  
                                    l9023 0DE8                                      l9031 0E0C  
                                    l8153 08BB                                      l9121 0D5E  
                                    l8233 0B33                                      l8225 0B0B  
                                    l8217 0AFF                                      l8147 08AF  
                                    l9123 0D64                                      l8235 0B39  
                                    l8227 0B10                                      l8077 08E6  
                                    l9133 0D8D                                      l8341 1149  
                                    l9037 0E17                                      l9061 11F2  
                                    l8095 090C                                      l8087 08EE  
                                    l8247 1747                                      l8415 0AC1  
                                    l9135 0D93                                      l8343 114C  
                                    l8503 1615                                      l9047 108D  
                                    l9071 11FE                                      l9063 11F4  
                                    l8089 08FA                                      l8417 0A95  
                                    l8601 17EE                                      l8513 1625  
                                    l8505 1618                                      l8329 13FB  
                                    l9073 1202                                      l9321 0FE3  
                                    l9233 1217                                      l8099 0915  
                                    l8419 0AC7                                      l7811 1270  
                                    l8267 0A1F                                      l9251 16E0  
                                    l8347 1152                                      l8515 1628  
                                    l8451 1794                                      l9403 110A  
                                    l9307 0FCB                                      l9227 120F  
                                    l8605 17F2                                      l9245 16CB  
                                    l8381 1312                                      l8509 161E  
                                    l8365 1137                                      l9421 0211  
                                    l9309 0FCD                                      l9229 1212  
                                    l8519 162E                                      l8367 113B  
                                    l7823 037A                                      l8455 17A3  
                                    l9407 1110                                      l9319 0FE2  
                                    l8609 17F6                                      l7761 0BA7  
                                    l7921 0F2E                                      l7913 0F15  
                                    l8393 1255                                      l8481 1299  
                                    l8713 0CF5                                      l7833 0390  
                                    l8571 17BF                                      l8627 1122  
                                    l8379 1307                                      l8387 124C  
                                    l8475 1290                                      l8731 0D29  
                                    l8723 0D1C                                      l7851 03BD  
                                    l7827 0381                                      l9509 1691  
                                    l8813 1351                                      l7765 0BAE  
                                    l8389 124F                                      l8477 1293  
                                    l8725 0D20                                      l8717 0D13  
                                    l7853 03C7                                      l7845 03AA  
                                    l7941 06E5                                      l8469 154B  
                                    l9373 0E84                                      l9461 02C4  
                                    l9437 0254                                      l9277 0F6C  
                   _myMain_Initialization 1ECD                                      l8823 1360  
                                    l8815 1354                                      l7775 0BD6  
                                    l7767 0BB8                                      l8751 0C14  
                                    l8727 0D23                                      l8719 0D16  
                                    l7863 03E3                                      l7855 03CC  
                                    l7935 06CF                                      l8671 0CA0  
                                    l9359 0E64                                      l9447 0286  
                                    l9471 02F6                                      l7793 1F39  
                                    l8825 1365                                      l8585 17D0  
                                    l8593 17D8                                      l7777 0BDE  
                                    l7769 0BBD                                      l8649 11BB  
                                    l7873 0415                                      l7865 03ED  
                                    l7857 03D0                                      l7953 0720  
                                    l8673 0CA4                                      l8665 0C66  
                                    l8681 0CB0                                      l8579 17C7  
                                    l8843 15E5                                      l9731 0593  
                                    l9715 0553                                      l8771 0C2B  
                                    l8755 0C1A                                      l7883 0430  
                                    l8675 0CA8                                      l9387 0E9C  
                                    l7789 1F33                                      l7893 0EBE  
                                    l8837 15D6                                      l9709 0543  
                                    l8773 0C43                                      l8749 0C11  
                                    l8693 0CDB                                      l7869 0403  
                                    l7965 073C                                      l7957 0728  
                                    l8677 0CAC                                      l8669 0C8B  
                                    l8855 1F9D                                      l9751 05E0  
                                    l9727 058B                                      l9719 0562  
                                    l8935 13CF                                      l8695 0CDE  
                                    l9655 159F                                      l9831 084D  
                                    l7985 0785                                      l8865 093C  
                                    l9745 05CE                                      l9729 0565  
                                    l9569 04BA                                      l7969 0744  
                                    l9673 14D2                                      _CFGS 0CAE  
                                    l7899 0ED4                                      l9747 05A8  
                                    l8699 0CE4                                      l9835 0854  
                                    l9749 05D6                                      l9757 05F2  
                            __CFG_WDTE$ON 0000                                      l8979 1F2A  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u8045 0EE6  
                                    u8205 074B                                      u8125 06F1  
                                    u8055 0EF6                                      u8135 0701  
                                    u8065 0F16                                      u8075 0F25  
                                    u8235 078C                                      u8155 0729  
                                    u8085 0F2F                                      u8165 072F  
                                    u8415 08F1                                      u8265 07B6  
                                    u8435 08FB                                      u8355 137B  
                                    u7715 0BD9                                      u8195 0745  
                                    u8445 0905                                      u8455 090D  
                                    u8295 07D1                                      u7745 0BEF  
                                    u8730 09DF                                      u7675 0BB3  
                                    u7915 03BE                                      u8565 10CE  
                                    u7695 0BCC                                      u8735 09DD  
                                    u8905 0A9E                                      u7945 03D1  
                                    u7885 03AB                                      u9565 10F8  
                                    u8855 12FC                                      u7975 03E4  
                                    _LWLO 0CAD                                      _RSSI 00D3  
                                    _WREN 0CAA                                      _WPUB 020D  
                                    _Buz1 00BC                                      _Temp 00DA  
                                    _main 082C                              ___ftpack@arg 0020  
                     __end_of_DlyOff_Main 0B9E                           __end_of_RF_Main 1DD4  
                            ___ftpack@exp 0023                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1E38                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 0020  
                                    ttemp 007E                                      wtemp 007E  
                     DelayTimejudge@value 0029                __end_of_setRFSW_AdjControl 1570  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2156 0021      _getDimmerLights_Allow_Condition$2157 0022  
                                   ??_ISR 0075                              ___fttol@exp1 0058  
                            ___fttol@lval 0054   __end_of_getDimmerLights_Allow_Condition 1367  
__size_of_getDimmerLights_Allow_Condition 0028         ??_getDimmerLights_Allow_Condition 0020  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 133F  
                  _getDimmerLights_Status 1EEC            __size_of_DimmerIntrPointSelect 0013  
                        __end_of_LED_Main 1E7E          setDimmerLights_ErrorClose@lights 0068  
           __end_of_DimmerIntrPointSelect 1F79                     ?_getDimmerLights_Line 0070  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0061                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 01E1                           __end_of___awdiv 0924  
                         __end_of___ftadd 0448                           __end_of___ftdiv 0F50  
                                   u10215 0FB3                                     u10235 0FD3  
                         __end_of___ftmul 076C                                     u10345 0E73  
                         ___awdiv@divisor 0020                                     _T1CON 0018  
                                   u10715 14A9                           __end_of___fttol 07F3  
                                   u10920 05D4                                     u10825 14EA  
                                   u10595 1687                                     u10925 05B1  
                                   u10775 1596                                     u10785 15A5  
                                   u10890 0591                                     u10895 056E  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                                     i1l732 0189  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                                     _WPUB2 106A  
                 __end_of_Timeout_Counter 10FE                             __CFG_WRT$HALF 0000  
      __end_of_setDimmerLights_IntrIOC_GO 133F                _setDimmerLights_IntrIOC_GO 1317  
                        __end_of_TMR1_ISR 12CD                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 0019        __end_of_setDimmerLights_ErrorClose 0AE5  
              _setDimmerLights_ErrorClose 0A89                          __end_of_TMR1_Set 1E96  
                                   _getAD 1204                             ___awtoft@sign 002D  
             DimmerIntrPointSelect@lights 0071                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1F66               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03D8  
                          __CFG_BOREN$OFF 0000                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0011  
            __end_of_getMain_LightsStatus 1F9F             __end_of_setLED_Initialization 1F0E  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 09D5               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                         setTemp_Main@error 0063  
                  ??_Flash_Memory_Erasing 0020                           _getPercentValue 0A2E  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0022  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 0010                         ??_setPercentValue 0059  
                            __end_of_main 087D                       ?_setRF_DimmerLights 0061  
                        __end_of_Fosc_Set 1DDE                        ??_setMemory_Modify 0020  
                          _Exception_Main 0524                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                   __end_of_setDimmerLights 15F1  
                    _setSw_Initialization 1066                                    ??_main 006E  
                           ___fttol@sign1 0053                              ?_setLog_Code 0070  
                 _setControl_Lights_Table 0C65                            _setMemory_Data 1E4E  
                  ?_Buzzer_Initialization 0070         __size_of_DimmerIntrIOCPointSelect 0015  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 03D8  
               ?_DimmerIntrIOCPointSelect 0070                                 ??_IOC_ISR 0074  
                               ??_IOC_Set 0020           __end_of_DimmerLightsPointSelect 1F8C  
                  ?_setDimmerLights_AdjRF 0070                    ?_setDimmerLights_AdjOn 0070  
                __size_of_setRFSW_Control 004F                        _RF_Timeout_Counter 10BF  
                 ??_Switch_Initialization 0025                      ??_setRF_DimmerLights 0062  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0B41  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 006E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                                 ??_WDT_Set 0020  
                        __end_of___awtoft 1287                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 0BFF                  _getMain_All_Error_Status 11AA  
                                  _IOCBF2 1CB2                                    i1l1280 0013  
                                  i1l1283 001B                                    i1l6437 10B5  
                                  i1l6445 1F70                                    i1l6821 0110  
                                  i1l6813 00EF                                    i1l6831 013C  
                                  i1l6817 00FE                                    i1l6825 011F  
                                  i1l6835 0153                                    i1l6845 0184  
                                  i1l6863 01B9                                    i1l6839 0168  
                                  i1l6791 009E                                    i1l6769 133C  
                                  i1l6859 01B2                                    i1l6795 00A5  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0024  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  u620_25 007B                                    _OSCCON 0099  
                                  u718_25 12C7                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 118F  
                                  _WDTCON 0097                      Exception_Main@i_3354 006B  
                      DelayTime_1us@count 0020            __size_of_CC2500_PowerOnInitial 0015  
           __end_of_CC2500_PowerOnInitial 10E9                                    _Dimmer 00C8  
                                  _DlySw1 01D7                                    _DlySw2 01DC  
           __size_of_setRF_TimeoutCleared 0004                __end_of_Mcu_Initialization 1F54  
                     __end_of_Buzzer_Main 16C4                                    _Memory 01A0  
                                  _Timer1 013E                                    ___bmul 1F30  
                  __end_of_Exception_Main 05FD                      Exception_Main@lights 006D  
                               ??___awdiv 0024                                 ??___ftadd 0044  
            __size_of_DelayOffPointSelect 0014                                 ??___ftdiv 0034  
                   setDimmerLights@lights 0068                                 ??___ftmul 0034  
                               ??___fttol 004F              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020               setDimmerLights_AdjRF@lights 0060  
                  ??_setDimmerLights_Main 0069                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D8                                    _s_data 00D9  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 17B0  
                                  _myMain 00AE                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 1E5A                          _DimmerLightsIntr 0077  
                   ?_setSw_Initialization 0070                     setDimmerLights@status 0066  
                        ___awdiv@quotient 0027                                    _setBuz 097C  
                      __size_of_Temp_Main 0003          ??_setDimmerLights_Initialization 0022  
         ?_setDimmerLights_Initialization 0070                     ___ftmul@f3_as_product 0039  
     __end_of_setDimmerLights_IntrControl 01E3               _setDimmerLights_IntrControl 0050  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1FD8                     __end_of_SwPointSelect 1096  
            __size_of_Flash_Memory_Modify 004E         setDimmerLights_IntrControl@lights 0074  
                 __size_of_LedPointSelect 001B                       Flash_Memory_Write@i 0021  
            __size_of_Flash_Memory_Unlock 0009                getMain_LightsStatus@status 0020  
                              _TouchPower 10FE               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025                   __end_of_getPercentValue 0A89  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 004C  
                               ?_LED_Main 0070                                ___ftadd@f1 003E  
                              ___ftadd@f2 0041                      _getRF_KeyStatus$4838 0022  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2142 002E  
               _setDimmerLights_SwOn$2143 002F                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                                ___fttol@f1 004B  
                          __pcstackCOMMON 0070            DimmerIntrIOCPointSelect@lights 0071  
                         ?_Exception_Main 0070                              __pidataBANK4 1224  
                           __end_of_getAD 1224                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                 setMemory_LoopSave@command 0021  
            __size_of_setDimmerLights_Adj 0058                        _LED_Initialization 1E66  
                         _getSw_KeyStatus 11E5                 ??_setControl_Lights_Table 006B  
                      getRF_KeyStatus@key 0021                          ??_DelayTimejudge 0024  
                         ?_setMemory_Data 0020             ??_Flash_Memory_Initialization 005D  
                        ?_setDimmerLights 0066                                 ?_WDT_Main 0070  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 1F8C  
              __end_of_set_TimeoutCleared 1DF3                        __size_of_getRxData 007F  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1EB0                            _DimmerLights11 00D0  
                          _DimmerLights22 00D1                      __size_of_setLED_Main 003E  
                                 ??_getAD 0023                       _Temp_Initialization 1DD4  
                      ??_CC2500_WriteByte 0020                                __pbssBANK0 006F  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 167A                         ??_setRFSW_Control 0066  
                       __end_of_Temp_Main 1DDA                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002D                                ??_LED_Main 0025  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1E0C  
                           ??_Switch_Main 0069                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 006F                         LedPointSelect@led 0021  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 082C                            _getDelayOff_GO 1EDC  
                     _CC2500_WriteCommand 1141                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020          __size_of_DimmerLightsPointSelect 0013  
                        ??_setDelayOff_GO 0063             ??_DimmerLights_Initialization 0024  
                              ??_TMR1_ISR 0075                             ?_setTemp_Main 0070  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                        __size_of_setTxData 00BB  
                                 ?_setLED 0022                    __size_of_DelayTime_1us 0026  
                                 _ADC_Set 1E05                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 1570                                ??_WDT_Main 0020  
                   ?_getMain_LightsStatus 0070              __end_of_setRF_Initialization 1E43  
                      _setRFSW_AdjControl 1532                    __end_of_setProductData 1EBE  
                                 _IOC_ISR 1EA2                                   _IOC_Set 1E7E  
                    __size_of_setLog_Code 0034     getDimmerLights_Allow_Condition@lights 0023  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 1482  
                       _Flash_Memory_Read 115A               ?_setDimmerLights_IntrIOC_GO 0070  
                  __size_of_CC2500_RxData 0066                    __size_of_CC2500_TxData 0069  
             ?_setDimmerLights_ErrorClose 0070                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 0120                                   _RF_Main 1DD1  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1E2D           __end_of_setControl_Lights_Table 0CCC  
                         setRF_Main@error 00ED                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070                           _setPercentValue 1634  
                        ?_getPercentValue 0070              __end_of_CC2500_FrequencyCabr 1EA2  
                         __size_of_IO_Set 001B                         __end_of_getBuz_GO 1F1F  
                     ??_Flash_Memory_Main 0026                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 1EEC                                   _VarLED1 0167  
                                 _VarLED2 016B            __end_of_getDimmerLights_Status 1EFD  
                       __end_of_getRxData 0E21                   __end_of_getSw_KeyStatus 1204  
                _CC2500_registers_address 1000          __end_of_DimmerIntrIOCPointSelect 10BF  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0063  
                          ??_setTemp_Main 0061                           __size_of___bmul 0012  
                     setProductData@value 005D                                   ___awdiv 08D0  
                                 ___ftadd 0352                                   ___ftdiv 0EA7  
                                 ___ftmul 06B8                                   ___fttol 076C  
                     __end_of_Switch_Main 1E4E                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1F1F                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0050  
                    setRFSW_AdjControl@sw 0066                           __size_of_setBuz 0059  
                                 __ptext1 14B8                                   __ptext2 1ECD  
                                 __ptext3 1570                                   __ptext4 1204  
                                 __ptext5 1F54                                   __ptext6 0002  
                                 __ptext7 1DD7                                   __ptext8 0F50  
                                 __ptext9 1DD4                   ??_setDimmerLights_AdjRF 005F  
                 ??_setDimmerLights_AdjOn 0022                 __size_of_CC2500_SIDLEMode 0004  
                   _DimmerIntrPointSelect 1F66                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0020                           ?_setProductData 005D  
               __end_of_Flash_Memory_Main 14B8                 __end_of_Flash_Memory_Read 1174  
                 ??_setDimmerLights_SwOff 0065                                _setRF_Main 0E21  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1E14  
                       _DimmerLights_Main 1E1C            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1DF9                __end_of_CC2500_ClearRXFIFO 1DE6  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1DEA  
           DimmerLightsPointSelect@lights 0021                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 006E  
                          _LedPointSelect 1174                       _DelayOffPointSelect 1FD8  
                                 clrloop0 1E00            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 0800                      end_of_initialization 004C  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 0802  
                           _DelayTime_1us 12F1                         __end_of_setTxData 06B8  
              __end_of_Flash_Memory_Write 13EE                                   init_ram 1DF9  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006A  
                    Flash_Memory_Read@ret 0023                                   initloop 1DFA  
                              _setSw_Main 01E3                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 0031                         _CC2500_ReadStatus 1287  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1EFD  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 0017  
                           _CC2500_RxData 0BFF                             _CC2500_TxData 0CCC  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 16C4  
                            __pstringtext 1000                       _Flash_Memory_Unlock 1E24  
                     ??_CC2500_ReadStatus 0022                    ??_getMain_LightsStatus 0020  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1E24  
                      _Mcu_Initialization 1F42                  __size_of_CC2500_PowerRST 0043  
            __end_of_setRF_TimeoutCleared 1DE2                      __end_of_my_MainTimer 14F4  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 118F                   __end_of_setPercentValue 167A  
                __size_of_CC2500_WriteREG 0021                 __end_of_CC2500_InitSetREG 082C  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0020  
                     _setDimmerLights_Adj 0924                      ?_Flash_Memory_Unlock 0070  
               __end_of_CC2500_ReadStatus 12A9                             ?_RF_RxDisable 0070  
         getMain_All_Error_Status@command 0021                               ___ftdiv@exp 003C  
                        ??_Exception_Main 0066                            __end_of_IO_Set 11AA  
                    _setRF_Initialization 1E38                        _setMemory_LoopSave 1FC5  
                             _Switch_Main 1E43                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   _DimmerLightsPointSelect 1F79  
                 __end_of_getRF_KeyStatus 1F30                          ??_setMemory_Data 0021  
                             ___ftmul@exp 0038                     _CC2500_PowerOnInitial 10D4  
                    ??_Mcu_Initialization 0021                     ??_DelayOffPointSelect 0020  
                           ?_WDT_Clearing 0070                       ?_setMemory_LoopSave 0070  
                    ?_setDimmerLights_Adj 0066                            __end_of___bmul 1F42  
                    setRF_DimmerLights@on 0061                  _DimmerIntrIOCPointSelect 10AA  
                       getSw_KeyStatus@sw 0024               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 0024             __size_of_getDimmerLights_Line 0013  
                  ?_DimmerIntrPointSelect 0070                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006D                            __end_of_setLED 1800  
           __size_of_setDimmerLights_Line 0017             __size_of_setDimmerLights_SwOn 005C  
                          __end_of_setBuz 09D5                      _CC2500_FrequencyCabr 1E96  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 1761  
                       __size_of_WDT_Main 0012                       start_initialization 0022  
                       _setRF_DimmerValue 13EE                           ?_LedPointSelect 0070  
                             __end_of_ISR 0020                     ??_Flash_Memory_Modify 0024  
                      ?_setRF_DimmerValue 0070                __end_of_CC2500_InitPATable 11E5  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 1000  
                          ??_RF_RxDisable 0024                              ?_Buzzer_Main 0070  
                      _set_TimeoutCleared 1DEE                                  ??_IO_Set 0020  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 0163  
                             ?_setSw_Main 0070                       ??_setRF_DimmerValue 0061  
                     __size_of_getTemp_AD 003E                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0014                                 _Temp_Main 1DD7  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0020  
                               _Rx_Length 00D4                     setProductData@address 0060  
                     Exception_Main@count 0067                   setRF_DimmerValue@lights 0062  
                     Exception_Main@error 0068                                  ??___bmul 0021  
                   ??_setDimmerLights_Adj 0067                    __size_of_SwPointSelect 0014  
                               _Tx_Length 00D6                               __pdataBANK4 0220  
                                ??_setLED 0023                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 006E  
                       ??_CC2500_ReadByte 0020          __end_of_getMain_All_Error_Status 11C6  
                        _CC2500_SIDLEMode 1DEA                __size_of_DimmerLights_Main 0008  
               __end_of_setRF_DimmerValue 141D                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                               __pbssCOMMON 0076  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1FB2                             __pcstackBANK0 0020  
                           __pcstackBANK1 00EC                             __pcstackBANK3 01E1  
                    ??_set_TimeoutCleared 0020                          ?_setPercentValue 0070  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                __size_of_setDimmerLights 0043                             DlyOff_Main@sw 006D  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 005D                __size_of_CC2500_ReadStatus 0022  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 0141                             _DimmerLights2 0152  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0061  
               ??_DimmerLightsPointSelect 0020                           ??_CC2500_RxData 0024  
                setRFSW_AdjControl@status 0065                           ??_CC2500_TxData 0024  
                               __pnvBANK0 006E                            getRxData@error 006C  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 1DDE  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0069  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 0086  
                   DelayOffPointSelect@sw 0021                                setBuz@time 0029  
                     setDelayOff_GO@value 0062                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                    _setTemp_Initialization 0801  
                               _getBuz_GO 1F0E       __end_of_Flash_Memory_Initialization 0524  
             _Flash_Memory_Initialization 0448                                  ?___awdiv 0020  
                               __ptext100 1E14                                 __ptext101 0B41  
                               __ptext110 1F79                                 __ptext102 0A89  
                               __ptext111 097C                                 __ptext103 1712  
                               __ptext120 0050                                 __ptext112 08D0  
                               __ptext104 087D                                 __ptext121 1F66  
                               __ptext113 1E0C                                 __ptext105 1EB0  
                               __ptext122 1EA2                                 __ptext114 1DF3  
                               __ptext106 1367                                 __ptext123 1317  
                               __ptext115 1FD8                                 __ptext107 1F30  
                               __ptext124 10AA                                 __ptext116 167A  
                               __ptext108 1EDC                                 __ptext117 1DCB  
                               __ptext109 1EEC                                  ?___ftadd 003E  
                               __ptext119 12A9                                 _getRxData 0DA2  
                                ?___ftdiv 002E                                  ?___ftmul 002E  
                                ?___fttol 004B                     __size_of_my_MainTimer 003C  
                 __end_of_setRFSW_Control 17B0                          ??_setProductData 005E  
           __size_of_setSw_Initialization 0008            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1DCE                          getPercentValue@i 005C  
                        setPercentValue@i 005A                             ??_setLog_Code 0061  
                getDimmerLights_Line@line 0021                        __end_of_TouchPower 1113  
                         DelayTimejudge@i 0026                           DelayTimejudge@j 0027  
                         DelayTimejudge@k 0028                       __size_of_setSw_Main 016F  
            CC2500_ReadStatus@status_addr 0023            __size_of_setDimmerLights_AdjRF 0024  
          __size_of_setDimmerLights_AdjOn 002E             __end_of_setDimmerLights_AdjRF 12F1  
           __end_of_setDimmerLights_AdjOn 13BF                    CC2500_WriteByte@loop_a 0021  
                               _r_address 00D7            __size_of_setDimmerLights_SwOff 004F  
          __size_of_myMain_Initialization 000F             __end_of_setDimmerLights_SwOff 1761  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1EDC  
                          __size_of_getAD 0020                   __size_of_DelayTimejudge 002A  
                           _SwPointSelect 1082                       __end_of_setLED_Main 1532  
                        ??_getDelayOff_GO 0022                       _DimmerLightsIntrIOC 00D2  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1DD7  
                       _CC2500_rfSettings 102F                                  _LED_Main 1E72  
                         SwPointSelect@sw 0021                                 clear_ram0 1DFF  
                CC2500_InitPATable@loop_d 0027                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 14B8                                 _setTxData 05FD  
     __end_of_DimmerLights_Initialization 2000               _DimmerLights_Initialization 1FEC  
                      _CC2500_ClearRXFIFO 1DE2                        _CC2500_ClearTXFIFO 1DE6  
                setRF_DimmerLights@lights 0065                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 10AA                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  __size_of_getPercentValue 005B  
                setRF_DimmerLights@status 0064               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 13BF                                ?_getRxData 0070  
                                _TMR1_ISR 12A9                    CC2500_InitSetREG@temp1 0026  
                  CC2500_InitSetREG@temp2 0027                                  _TMR1_Set 1E8A  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                                _RF_Count 00CB                      __end_of_RF_RxDisable 1ECD  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 115A  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1F54  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0023  
                        __size_of_ADC_Set 0007                __size_of_setRF_DimmerValue 002F  
                     ?_Flash_Memory_Write 0070                          setRF_Main@loop_f 00EC  
                   __size_of_setTemp_Main 00B0                   __size_of_setDelayOff_GO 0053  
                                _DelayOff 0076                              setSw_Main@sw 0068  
        setDimmerLights_IntrIOC_GO@lights 0073                          __size_of_IOC_ISR 000E  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0024  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1E66  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1482  
                   _DlyOff_Initialization 1DF3                      ??_CC2500_ClearRXFIFO 0024  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 1DDA  
                        __size_of_WDT_Set 000B                     setRFSW_Control@status 0067  
                   _Switch_Initialization 07F3         __size_of_getMain_All_Error_Status 001C  
                    ??_Flash_Memory_Write 0020                         ??_setDimmerLights 0067  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 15AE                                ?_setTxData 0070  
                            ?_Switch_Main 0070                ??_DimmerIntrIOCPointSelect 0070  
                        _CC2500_WriteByte 106E              Flash_Memory_Initialization@i 005E  
                                _SwDetect 00D5                               ??_Temp_Main 0064  
                       setRFSW_Control@sw 0068             _getMain_All_Error_Status$3339 0022  
                               setLED@led 0023                   ??_DimmerIntrPointSelect 0070  
                            _setTemp_Main 0F50                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                  setDimmerLights_SwOn@idle 0030  
                                ___awtoft 1265                          ??_LedPointSelect 0020  
                                ___ftpack 0B9E             __size_of_getMain_LightsStatus 0013  
                       getTemp_AD@channel 0025                              ??_setRF_Main 006D  
                    CC2500_WriteREG@value 0022                               _setLED_Main 14F4  
              __end_of_setRF_DimmerLights 0A2E                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0023                          getDelayOff_GO@sw 0022  
                        setDelayOff_GO@sw 0064                                  __ptext10 0801  
                                __ptext11 1E43                                  __ptext20 1DEE  
                                __ptext12 01E3                                  __ptext21 10E9  
                                __ptext13 1096                                  __ptext30 1532  
                                __ptext22 1DD1                                  __ptext14 1391  
                                __ptext31 13EE                                  __ptext23 0E21  
                                __ptext15 11E5                                  __ptext40 0CCC  
                                __ptext32 12CD                                  __ptext24 0DA2  
                                __ptext16 1082                                  __ptext41 0BFF  
                                __ptext33 0A2E                                  __ptext25 144E  
                                __ptext17 07F3                                  __ptext50 1E96  
                                __ptext42 1287                                  __ptext34 06B8  
                                __ptext26 1FC5                                  __ptext18 1066  
                                __ptext51 12F1                                  __ptext43 112A  
                                __ptext35 0352                                  __ptext27 0C65  
                                __ptext19 10FE                                  __ptext60 1F42  
                                __ptext52 1DE6                                  __ptext44 10D4  
                                __ptext36 1FB2                                  __ptext28 1761  
                                __ptext61 1E2D                                  __ptext53 1DE2  
                                __ptext45 1DEA                                  __ptext37 1F1F  
                                __ptext29 0AE5                                  __ptext70 1EFD  
                                __ptext62 1E8A                                  __ptext54 1141  
                                __ptext46 15F1                                  __ptext38 1F0E  
                                __ptext71 1482                                  __ptext63 118F  
                                __ptext55 1DDE                                  __ptext47 0802  
                                __ptext39 1EBE                                  __ptext80 11AA  
                                __ptext72 16C4                                  __ptext64 1E7E  
                                __ptext56 10BF                                  __ptext48 11C6  
                                __ptext81 1F9F                                  __ptext73 1E5A  
                                __ptext65 1DDA                                  __ptext57 106E  
                                __ptext49 1244                                  __ptext90 076C  
                                __ptext82 1E1C                                  __ptext74 0448  
                                __ptext66 1E05                                  __ptext58 1DCE  
                                __ptext91 0EA7                                  __ptext83 0D35  
                                __ptext75 1E4E                                  __ptext67 1E72  
                                __ptext59 1E38                                  __ptext92 1265  
                                __ptext84 0924                                  __ptext76 13BF  
                                __ptext68 14F4                                  __ptext93 0B9E  
                                __ptext85 1113                                  __ptext77 1E24  
                                __ptext69 1E66                                  __ptext94 17B0  
                                __ptext86 15AE                                  __ptext78 115A  
                                __ptext95 1174                                  __ptext87 05FD  
                                __ptext79 0524                                  __ptext96 1F8C  
                                __ptext88 09D5                                  __ptext97 133F  
                                __ptext89 1634                                  __ptext98 1FEC  
                                __ptext99 141D                                  __product 0220  
           ??_setDimmerLights_IntrControl 0072                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1FB2  
            __end_of_setDimmerLights_Main 0DA2              __end_of_setDimmerLights_Line 112A  
            __end_of_setDimmerLights_SwOn 0B41                              ??_setSw_Main 0066  
                  ??_setRF_TimeoutCleared 0020                             setLED@command 0022  
                           __size_of_main 0051                               _setRF_Learn 1096  
                __end_of_CC2500_SIDLEMode 1DEE                setDimmerLights_Main@lights 0069  
             __end_of_DelayOffPointSelect 1FEC                CC2500_WriteCommand@command 0023  
                 setDimmerLights_AdjOn@sw 0022                           _CC2500_ReadByte 112A  
                      _CC2500_InitPATable 11C6                  __end_of_setMemory_Modify 1FC5  
                      __end_of_setRF_Main 0EA7                               ??_getBuz_GO 0022  
             __size_of_Mcu_Initialization 0012               setDimmerLights_ErrorClose@i 0069  
                    _CC2500_patable_vaule 105E                               ??_getRxData 006B  
              __end_of_RF_Timeout_Counter 10D4                                  main@argc 01E1  
                                main@argv 01E3                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$5744 0021                      _getSw_KeyStatus$5745 0022  
                         _CC2500_PowerRST 15F1                  __size_of_getSw_KeyStatus 001F  
             __end_of_Flash_Memory_Modify 1712                         ??_getPercentValue 0059  
                             _setLog_Code 144E               __end_of_Flash_Memory_Unlock 1E2D  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 1244  
                      __end_of_setSw_Main 0352                             _Transceive_OK 03D9  
                  ?_DlyOff_Initialization 0070                            _DelayTimejudge 1367  
                             pic14e$flags 007E              ??_setDimmerLights_IntrIOC_GO 0072  
              setDimmerLights_Line@lights 0020              ??_setDimmerLights_ErrorClose 0066  
                 setDimmerLights_SwOff@sw 0065               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                   ??_CC2500_PowerOnInitial 0029  
  __end_of_setDimmerLights_Initialization 144E   __size_of_setDimmerLights_Initialization 0031  
          _setDimmerLights_Initialization 141D               __end_of_setDimmerLights_Adj 097C  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1DCE      __size_of_setDimmerLights_IntrControl 0193  
                    _Flash_Memory_Erasing 1E5A                        ?_RF_Initialization 0070  
                              _SPI0Buffer 0079                   __size_of_Exception_Main 00D9  
         __end_of_DelayOff_Initialization 1E14       __size_of_setDimmerLights_IntrIOC_GO 0028  
     __size_of_setDimmerLights_ErrorClose 005C                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1E1C                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 087D  
        __size_of_setControl_Lights_Table 0067                    __end_of_DelayTimejudge 1391  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 006B                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 1317                   __end_of_CC2500_ReadByte 1141  
            __end_of_setSw_Initialization 106E                           _Timeout_Counter 10E9  
         __size_of_getDimmerLights_Status 0011                      getPercentValue@value 005B  
                            _RF_RxDisable 1EBE                __end_of_LED_Initialization 1E72  
          __end_of_setTemp_Initialization 0802                  __size_of_setPercentValue 0046  
                 setMemory_Modify@command 0021                      setPercentValue@value 0059  
               __end_of_RF_Initialization 1DD1                     __end_of_CC2500_RxData 0C65  
                   __end_of_CC2500_TxData 0D35                   __end_of_CC2500_PowerRST 1634  
